continuations functional data structure generating programs explicit represented records recycled 
served purpose temporary intermediate structures managing program control space occupy reused structures programs produce output 
effect immediate memory reclamation sequence correctness preserving program transformations demonstrated series simple examples 
apply transformations general anamorphism operators important consequence nite output anamorphisms run stack overhead 
runtime architecture language implementation keeps track continuations procedure calls stack call frames linked chain continuation structures 
advantage may claimed stack approach deallocation frames inexpensive happens soon procedure returns 
heap allocated continuations hand typically take memory space reclaimed runtime memory manager garbage collector 
show certain class procedures continuation approach lead immediate reclamation space continuations elimination memory overhead incurred aforementioned architectures 
link inversion algorithms generally deutsch waite algorithms standard means traversing data structures polynomial sum products types little memory overhead 
problem algorithms mutate structures traversal 
link inversion generally unsafe critical sections garbage collections context original published description supported part national science foundation ccr 
appeared icfp international conference functional programming september baltimore maryland 
copyright acm recycling continuations jonathan sobel daniel friedman computer science department indiana university bloomington indiana cs indiana edu uniquely referenced objects 
demonstrate series correctness preserving program transformations takes functional structure generating procedure including anamorphisms produces uses safe variation link inversion reduce eliminate memory overhead recursive procedure calls :10.1.1.41.125
algorithms traversing constructing data structures variations techniques rst published years ago special cases 
standard fare undergraduate data structures texts 
contribution derive algorithms sequence correctness preserving program transformations 
exercise may rst entertaining useful real practical bene ts transformation approach 
programmer technique formal mathematical algorithm parallels recursive structure data tune program ciency 
second transformations automated allowing included compiler source source translator optimizer 
simple concrete procedure de nition follow sequence transformations 
rst example procedure copies list 
working example consider procedure copies binary trees 
generalize examples 
history implement recursion generally procedure calls ciently subject great scrutiny programming language design compiler construction 
early stack runtime architecture developed call frames pushed stack procedure call 
stack memory programmers lookout ways reduce memory consumption 
technique traversing trees inductively de ned structures little memory overhead pointers way structure leaving trail follow way 
recursive call returns popping stackframe inverts pointer back original orientation 
traversal procedure needed start top structure able perform correct traversal pointers returned original states 
surprisingly rst publication technique speci ed context essential little memory safe assume time traversal happen concurrently garbage collection 
waite algorithm developed time deutsch developed similar independently link inversion algorithms known collectively deutsch waite algorithms 
idea programs transformed return information needed saved procedure calls rst recorded talk van wijngaarden transcript ensuing discussion 
explicit continuations represent computational contexts moved center stage reynolds seminal 
implementors began explore possibility replacing architecture continuation variety trade exposed 
trade immediate interest simplicity procedure call continuation systems simplicity space reclamation procedure return stack systems 
program written transformed continuation passing style cps call tail call may implemented simple jump goto information needs done call returns encapsulated structure usually heap allocated 
barring userlevel rei cation continuations continuation disposed stack architecture continuations treated just heap structures continue occupy space runtime memory manager recognizes unreachable 
directly recursive stack style call requires extra creation setup new stack frame returning call usually simple matter adjusting value single register 
memory frame instantly available reuse 
attempt eliminate recursion overhead altogether minamide demonstrates new technique representing un nished data structures 
technique programs required growth stack construction chain continuations run simple loops 
style programs written order bene minamide representation closely related cps author mentions 
relationship led question deeply connection continuations appear certain programs data structures programs construct 
follows result inquiry 
lists code examples scheme order maintain continuity list tree examples built scheme lists car cdr cons avoided 
explicitly de ne list datatype datatype list empty list pair head tail datatype construct standard scheme form 
intended feel similar form ml 
waite link inversion mark phase mark sweep collector chase arbitrary pointers graph structure 
focus functional recursive structures arbitrary graphs 
de nition explication datatype macro appears www cs indiana edu 
short de ning datatype provides constructors variants case form de structuring objects datatype 
procedure copying lists define list copy lambda list case empty list empty list pair pair list copy list copy example may bit odd functionally equivalent identity function 
intent examples convey nature program transformations list copy simplest procedures construct lists 
procedures perform interesting subst remove iota produces increasing list numbers straightforward generalizations list copy long non varying parameters abstracted recursion 
lists continuation passing style rst transformation applied list copy standard call value conversion continuation passing style cps 
administrative cps reductions left constructors treated primitive atomic operations 
copy define list copy cps lambda list case empty list empty list pair list copy cps lambda pair original argument version list copy simple wrapper list copy cps 
copy define list copy lambda list copy cps lambda versions list copy direct continuationpassing style compute result done way slightly di erent 
direct style version language implementation maintains control context 
cps version call tail call equivalent jump goto far compiler tell left copying tail 
continuation maintained explicitly program 
list copy walks list constructs sequence nested closures 
display closure representation mind closure sequence memory locations containing code pointer values procedure free variables evident continuation really linear linked structure 
reaching list procedure starts chain reaction invoking outermost linked closures 
rst constructs new pair invokes constructing pair identity empty initial continuation reached copied list returned 
lists representation independence explicit treatment continuations cps version list copy fact bit explicit continuations closures representation hard wired code 
step list copy treat continuation abstractly representation continuation modi ed 
procedures retain prior form copy representation independent define list copy cps lambda list case empty list invoke empty list pair list copy cps pairing define list copy lambda list copy cps initial continuations constructed invoked interface 
invocation operator su ces eliminate assumption continuations procedures 
spite interface continuations really represented procedures de ned list continuations procedure representation define invoke lambda having committed procedural representation continuation constructors better produce closures original cps version bodies transformed necessary 
course implies values free variables passed arguments constructors 
continuation constructors procedure representation define initial lambda lambda define pairing lambda lambda invoke pair missing part list copy cps pairing pairing missing part list copy just initial initial lists representing continuations records freed dependence particular representation switch procedural record representation continuations changing de nition list copy 
changes construction invocation continuations explicitly de ned constructors datatype 
continuation datatype list initial pairing head constructors de ned preceding section replaced trivial record constructors 
shifted procedure 
order preserve semantics invocation simply copy code bodies old continuation procedures di erent cases procedure 
list continuations record representation define invoke lambda list case initial pairing invoke pair linked structure continuations described section completely explicit 
continuation explicit link form record eld continuation chain 
consider call list copy works 
list copy cps walks list creating pairing record pair list 

list base case list copy cps calls chain pairing ks empty list arguments 

constructs new pair pairing saved head value head value parameter tail 

reaches initial continuation value complete copy original list returned 
data structures involved call list copy input list chain continuations output list 
addition property call tail call preserved original cps transformation 
lists link inversion crucial observations de nition 
accidentally name part pattern pairing line shadowing parameter 
hiding parameter harm choose case bind pattern variables 
continuation passed right hand side case clause 
free occurrences clauses value longer reachable garbage soon pattern matched 
terminology obeys linear type discipline important implications data structure bound treated 
second observation pair constructed pairing clause similar form contents pairing 
elds value rst elds 
di erence pairing replaced pair 
advantage linearity ofk take replacement literally 
input continuation needed result 
suppose addition regular constructors case form datatype form extended dene recycling constructors variant 
instance list datatype de ned get pair constructor recycle pair constructor new syntactic form looks recycle recycle pair record expr fieldname expr 
evaluating form roughly equivalent pseudo expression expansion recycle record record expr coerce pair 
record set fieldname record expr record coerce pair 
imagined low level operation requires argument size record pair re tags record pair 
imagined set head 
set tail 
update appropriate elds record values second arguments 
update speci ed eld value remains unchanged recycling 
rewrite list continuations record representation define invoke lambda list case initial pairing invoke recycle pair tail version exactly suggested 
reuses memory pairing construct pair contents pairing tail eld contains value 
words pairing re tagged pair tail eld updated contain new value 
new memory allocated 
call list copy produces answer behavior way changed quite bit 
list copy cps walks list creating pairing record pair list 

list base case calls chain pairing ks empty list arguments 

inverts backward pointing links connect continuation making point forward tail 

reaches initial continuation complete copy original list returned 
data structures involved call list copy input list continuations output list 
extra memory necessary creating result 
diagram represents situation called third time copying list containing numbers 
ironically exploiting linearity requires violation 
constant amount memory allocating initial accurate claim memory list copy constant counting memory output 
narrow box far right empty list 
square left initial continuation 
records containing pairing ks 
records containing pairs 
transformation list copy works exactly standard link inversion algorithm list traversal 
di erence presentations link inversion treat means traversing existing list list copy uses link inversion traverse freshly allocated result list 
external result exist usual danger created link inversion goes away traversals happen 
rst version list copy section desirable property recursive structure closely matched inductive type structure lists copied 
correspondence clearly code preferable writing direct style version convert cient version correctness preserving transformations 
transformations program produces answer uses extra space original program requires extra space proportional length list order compute result 
complete path standard link inversion algorithm lists observe maintaining distinction list list necessary 
list type eliminated favor lists including representation continuations obviating record coercion 
list examples transformation technique demonstrated preceding sections depended form input procedure transformed 
certain control ow necessary order produce desired output certain form continuations induced control ow 
clarify form output determining factor consider having seen list copy easy conclude sequence transformations works programs take list return new list 
fact exactly right number continuations allocated procedures lengths di erent 
instance procedure remove returns list length equal length input eliminating elements match rst argument 
define remove lambda letrec rem lambda list case empty list empty list pair equal 
rem pair rem rem completely transforming program define remove lambda letrec rem cps lambda list case empty list invoke empty list pair equal 
rem cps rem cps pairing rem cps initial de ned exactly recycling version list copy 
fact program constructs lists 
counterexample procedure double creates list elements input list output list twice long input list 
see pairing created just case pair needed output list 
space wasted continuations 
input need list 
need construct list output suitable transformation 
example iota procedure takes natural number produces list contains numbers including suitable candidate eliminating stack overhead 
define iota lambda letrec lambda cond empty list pair iota returns list needs construct pair recursive step 
transformations get define iota lambda letrec cps lambda cond invoke empty list cps pairing cps initial construction pair construction pairing continuation converted pair base case reached 
trees lists simple 
de nition single recursive straightforward continuations traverse iteratively 
possible arbitrary inductively de ned structures 
sections attempt apply sequence transformations tree copying procedure applied list copying procedure 
attempt reveals subtleties clari ed section arise preceding section 
datatype de nition 
simplicity loss generality distinct leaf type leaf node empty subtrees 
htree datatype tree empty tree node datum left right direct style copying procedure induced type htree define tree copy lambda tree case empty tree empty tree node node tree copy tree copy presence recursive calls tree copy accompanying input output subtrees act sequence transformations helping re ne generalize 
trees continuation passing style standard cps conversion raises issues hidden 
cps inherently sequential recursive calls tree copy speci ed ordering direct style programs scheme 
arbitrarily choose left right evaluation ordering 
htree copy define tree copy cps lambda tree case empty tree empty tree node tree copy cps lambda vl tree copy cps lambda vr node vl vr define tree copy lambda tree copy cps lambda list examples converting program cps explicit done computation point 
procedure walks leftmost path tree creating sequence nested closures formed lambda vl 
continuation 
reaching left branch closures invoked procedure begins walk right branch 
left right branches completed continuation chain invoked newly created node 
data structure traversed tree continuation remains linear structure 
precisely stack runtime architecture feasible 
trees representation independence list copy procedure creates di erent kinds continuations tree version creates 
rst omnipresent empty continuation 
second created descending left branches third right branches created second invoked 
version cps tree copy expressed abstractly htree copy representation independent define tree copy cps lambda tree case empty tree invoke empty tree node tree copy cps left define tree copy lambda tree copy cps initial procedural de nition tree continuations procedure representation define invoke lambda constructor initial continuation lists htree continuation constructors procedure representation define initial lambda lambda constructors nested continuations easiest write starting innermost working outward 
htree continuation constructors procedure representation define right lambda vl lambda invoke node vl clari es constructor left continuations htree continuation constructors procedure representation define left lambda lambda tree copy cps right missing part tree copy completed way left left trees representing continuations records section ended observation types list list isomorphic distinction dropped 
clearly special case tree tree dissimilar htree continuation datatype tree initial left datum right right datum left fact may readily apparent right eld left parameter left eld right vl parameter point di erent structures old tree new tree respectively 
right eld left refers old tree copied 
left eld right refers newly constructed left subtree part output tree 
burden behavior lifted continuations falls procedure 
copying bodies continuation procedures preceding section get tree continuations record representation define invoke lambda tree case initial left tree copy cps right right invoke node linked structure continuations completely explicit 
observe dynamic behavior chain continuations see observe list example 
chain list continuations grew monotonically reached maximum length 
monotonically initial continuation invoked 
chain tree continuations alternately grows shrinks matching growth pattern stack exhibit traversal tree copied 
total number continuation records created greater maximum length chain number nodes tree inviting reuse space occupy 
trees link inversion comparing tree list observe rst case clause identical list version 
case clause similar saw list example evident simply replace middle clause new fairly obvious right constructed nearly identical left replaces 
di erence left replaced right 
possible recycle continuations avoid allocating new records 
tree continuations record representation define invoke lambda tree case initial left tree copy cps recycle right left right invoke recycle node right walk sequence events begins call tree copy tree 

tree copy cps walks leftmost branch tree creates record 
record contains node datum pointer right subtree needs processing 

rst empty left subtree tree copy cps calls chain left ks tree arguments 

turns left right saving new left subtree empty tree rst chain left ks redirects tree copy cps subtree 

process starts right subtree node children reached 
tree copy cps calls rst continuation chain 

turns right node inverting upward pointing link continuation chain right subtree moves continuation 

reaches initial continuation new tree returned 
suppose tree copy called balanced node tree 
diagram represents situation called second time tree left tree copied 
current continuation right 
step continuation recycled node right eld updated point current empty tree 
called new values current continuation left value node just completed 
list copying program data structures involved input tree chain continuations gradually output tree 
possible claim tree copy memory overhead 
continuations isomorphic trees necessary distinguish left right continuations trees kind node 
link inversion terminology necessary determine pointers reached nal state save data need processed 
alternatives distinction encoded single bit 
length chain continuations equal depth recursion moment maximum amount memory needed number bits equal maximum depth height tree 
undergraduate data structures textbook comes close expressing connection tag bit continuations method completely eliminate memory stack recursive algorithm reduce single bit cell 
essence bit encodes information needed recursive version indicate recursive call nishes recursive calls body program caused invocation body program execution continue page 
comparison prior versions tree copy great deal memory overhead eliminated possible remove overhead 
binary trees remaining overhead merely bit level recursion situation grows worse general recursive structures 
structure elds ben di erent kinds continuations distinguish leading overhead lgn bits level recursion 
practice record length constrained length overhead bounded word level recursion 
preceding discussion notwithstanding implementations user de ned types variants take entire word tag variant distinguish 
left right continuations theoretically occupy space tree node typically take amount space practice 
really fair trick recycle right node done de nition general polynomial types transformations preceding sections generalize types lists trees 
fact procedures act generators polynomially typed data sums product record types link inversion stack space 
particular sequence transformations works nite output anamorphism de ned precisely section :10.1.1.41.125
transformations sections sources cited examples reconstructed extended suit language examples needs fourth transformation 
continuation passing style cps algorithm standard exception constructors language de ned primitives treated atomic operations variable 
procedures run user code treated atomically need rewritten map cps 
insist de ning wrapper procedures explicitly call cps transformed versions initial continuations 
example di cult discuss complete behavior list copy cps referring list copy wrapper 
complete cps algorithms de ne translations call cc order possible recycle continuations treated linearly way implement algorithm extra pointer record identi es eld needs processed 
takes memory word record 
implementation uses plain tree nodes plus stack tag bits 
sense linear logic 
translation call cc creates multiple potential uses continuation disallow programs recycling desired 
representation independence transformation brie described follows 
replace continuation invocations invoke 

innermost continuation constructions lambda expressions transfer continuation new de nition outer lambda expression bind free variables 

site original continuation constructions ones just moved insert calls newly de ned constructors passing values free variables 

de ne invoke lambda 
ordering free variable parameters parameters outer lambda constructor provides room optimization 
goal little shifting possible recycling stage 
general solutions problem equivalent register allocation strategies compilers 
simple heuristic works fact free variables usually match elds records recursion de ned 
value eld argument continuation rest elds listed order appear record 
eld fewer mentioned free variable parameters continuation constructors variant handled continuation 
continuation initial needs refer exactly continuation 
continuation passed argument constructor total number arguments number elds variant handled order simplify recycling 
representing continuations records transformation eliminate constructor definitions produced preceding transformation replace single datatype de nition 
elds variant exactly parameters corresponding procedural constructor 
invoke procedure rewritten case form continuation datatype 
clause contains body constructor procedure variant derived 
interpretive dispatch overhead invoke important concern kinds jump table optimization performed smalltalk style object systems recover speed direct procedure calls 
link inversion completing preceding transformations case clause invoke constructs new variant 
clauses correspond innermost continuations construct result types clauses exception initial continuation clause match construct continuation types 
demonstrated list tree examples standard constructors types replaced recycling constructors updating eld time 
fact continuation rst constructed allocated elds refer input data structure 
elds updated time refer continuations completely recycled output data structures 
eld eld updated continuation recycled output type continuation chain invoked 
elds updated point newly completed node link inverted 
potential cause concern point record lengths continuations match record lengths appropriate output records 
mismatch lengths continuation record fewer slots output structure 
order continuation slots lling output structure data come free variables 
instance continuation lambda pair free variable slot 
truth surprisingly hard nd realistic examples problem 
iota procedure section rst problem class 
real case arise values passed continuation constructors free pairing alternative translation 
list program written iteratively start 
continuations free variables slots output structure 
example looks lambda pair free 
clearly possible construct continuation pairing pairing 
generally possible fold free values fewer slots shifting computations earlier time preceding example storing values additional record adding indirection 
solution obviously desirable creates memory overhead precisely trying eliminate 
claim practice preceding problem cases arise rarely 
fact assert prove section clear procedures expressed nite output anamorphisms de ned shortly length continuation records matches length output records 
anamorphisms argued enables recycling continuations output structures algorithm implemented similarity continuations output data structure generating procedures 
canonical class generators inductively typed data set procedures de ned anamorphisms :10.1.1.41.125
anamorphism recursive function de ned lens operator generalized version list unfold functional 
acquainted settings may appropriate recycling constructors recycle pair level operation may available user may compiler users operating privileged mode 
anamorphisms de ne brie essential understand de nitions order appreciate remaining programs 
de nition functor homomorphism categories mapping objects objects arrows 
arrows 
identity composition preserved de nition endofunctor category back 
de nition endofunctor arrow 
arrow 
diagram commutes words anamorphism de ned recursively preceding de nitions allow closed form solution exists anamorphism 
lazy languages languages streams useful admit anamorphisms 
setting wish produce nite structures require anamorphisms terminate strictly producing nite data structures 
opportunity invert links programming category interest usually type objects functions arrows 
functors pair type constructor higher order function usually named map purely functional programming community 
example type constructor xpoint lists elements type empty list pair higher order map function empty list empty list scheme un curried define list map lambda list case empty list empty list pair pair lens brackets written ana 
corresponding ana lists define list ana lambda psi letrec lambda list map psi allow write list copy remove iota anamorphisms 
copy define list copy list ana lambda define remove lambda letrec psi lambda list case empty list pair equal 
psi list ana psi define iota lambda list ana lambda cond empty list pair transforming individual procedures transform ana operator appropriate datatype functors 
completely transformed versions map define list map cps lambda list case empty list invoke empty list pair pairing lens define list ana cps lambda psi letrec lambda list map cps psi define list ana lambda psi lambda list ana cps psi initial recycling de nition section de nitions list copy remove iota remain untouched run stack continuation space overhead 
passes compiler language preprocessor written anamorphisms recycling technique appears widely applicable 
fact cps transformation implemented way inviting optimization 
directions demonstrated method transforming speci structure producing programs general anamorphism operators eliminate stack space usage recursion 
lists clearly possible go eliminate link inversion stage inverting links forward pairs continuations constructed 
list construction fully iterative minamide 
way extend iterative property spine trees polynomial types discovered elegant transformation follow link inversion transformation produce property 
wand demonstrates elegant sequence transformations exploits connection cps accumulator passing style 
di erent related set observations free variables continuation terms enabling recursive procedures converted iterative ones accumulators 
wand performs conversion proving accumulated value correctly represents continuation simply switch obviously equivalent representation 
transformations informally wand technique formal equivalence proofs easily applicable transformation 
expect side ects complicate somewhat equivalence proof transformation 
meijer hutton extend anamorphisms exponential types function spaces 
naturally setting explored implications mix 
furthermore anamorphisms catamorphisms duals wonder dual technique provide sort optimization catamorphisms 
relationship continuation passing style monadic style invites extension monadic setting 
cps monad monad incurs cost terms space 
plan explore extension transformations monads general monadic framework 
related see chen hudak discussion translating functional linear datatypes monadic ones updatable state 
great powers monads provision rei cation re ection monadic metainformation 
order retain power precise implications presence re ective operators call cc explored context recycling 
acknowledgments erik hilsdale hours discussion help datatype macro 
erik matthias felleisen mitch wand jon steve ganz anonymous referee thorough readings insightful comments guide way 
appreciate comments michael levin anurag mendhekar oleg participants friday morning programming languages seminar indiana university 
richard bird philip wadler 
functional programming 
prentice hall 
luca cardelli 
functional machine 
technical report tr bell labs 
bell labs technical memorandum tm 
luca cardelli 
compiling functional language 
conference record acm symposium lisp functional programming pages 
acm press 
words paradigm writes clear correct possibly ine cient program transforms correctness preserving transformations program cient probably clear 
chih ping chen paul hudak 
rolling mutable adt connection linear types monads 
conference record popl th acm sigplan sigact symposium principles programming languages pages paris france january 
acm press 
kent dybvig 
models scheme 
phd thesis university north carolina chapel hill 
harry lewis larry 
data structures algorithms 
harpercollins 
malcolm 
algebraic data types program transformation 
science computer programming september 
erik meijer maarten fokkinga ross paterson :10.1.1.41.125
functional programming bananas lenses envelopes barbed wire 
fpca th international conference programming languages computer architecture number lecture notes computer science 
springer verlag 
erik meijer graham hutton 
bananas space extending fold unfold exponential types 
fpca th international conference programming languages computer architecture pages la jolla june 
acm press 
minamide 
functional representation data structures hole 
conference record popl th acm sigplan sigact symposium principles programming languages san diego january 
acm press 
eugenio moggi 
notions computation monads 
information computation july 
greg morrisett matthias felleisen robert harper 
models memory management 
fpca th international conference functional programming languages computer architecture pages la jolla june 
acm press 
john reynolds 
de nitional interpreters higherorder programming languages 
proceedings acm national conference pages 
acm press 
waite 
cient machineindependent procedure garbage collection various list structures 
communications acm august 
je rey smith 
design analysis algorithms 
pws kent boston 
mitchell wand 
continuation program transformation strategies 
journal association computing machinery january 
benjamin wegbreit 
space cient list structure tracing algorithm 
ieee transactions computers 
van wijngaarden 
recursive de nition syntax semantics 
formal language description languages pages 
north holland 
