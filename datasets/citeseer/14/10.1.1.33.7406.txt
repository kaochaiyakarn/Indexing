data dependence analysis assembly code wolfram peter braun computer science department friedrich schiller university jena jena germany braun computer org francois inria rocquencourt le chesnay cedex france francois inria fr determination data dependences task typically performed high level language source code today optimizing parallelizing compilers 
little done field data dependence analysis assembly language code area growing importance increasing ilp 
central element data dependence analysis case method memory disambiguation decides memory operations may access memory location 
describe new approach determination data dependences assembly code 
method sophisticated algorithm symbolic value propagation derive value dependences memory operations dependences 
integrated method system assembly language optimization 
experimental results show approach greatly improves accuracy dependence analysis cases 

determination data dependences nowadays done parallelizing optimizing compiler systems level source code fortran intermediate code rtl 
data dependence analysis level assembly code aims increasing instruction level parallelism 
various scheduling techniques list scheduling trace scheduling percolation scheduling new sequence instructions constructed regard data control dependences properties target processor 
today instruction schedulers determine data dependences register accesses consider memory cell memory accesses assumed data dependent 
analyzing memory accesses important doing global instruction scheduling 
describe intraprocedural value data dependence analysis see maslov details address value data dependences implemented context tool 
framework develop optimization transformation techniques various processors 
user describes target processor mixture rtl language 
program written assembly code analyzed modified interface 
implemented kind conflict analysis approach determines address dependences register accesses assumes memory cell 
analyzing data dependences assembly code distinguish accesses registers memory 
cases derive data dependence reaching definitions reaching uses information obtain monotone data flow analysis 
register analysis complications set defined registers instruction established easily registers aliases 
determination data dependences register accesses scope 
memory solve aliasing problem memory access location 
see landi ryder details aliasing 
prove point location alias show refer location 
prove conservative approximation alias pairs may alias memory refer location 
derive possible addresses accessed memory instruction symbolic value propagation algorithm 
compare memory addresses modification gcd test 
experimental results indicate cases method accurate determination data dependences previous methods 

programming model assumptions assume risc instruction set 
memory accessed load ld store st instructions 
memory format mem rx ry mem rx offset 
scaling factor provided model addition difficult 
memory accesses normally read write word bytes 
global memory access address label moved register 
read written memory instruction 
initialization registers copying contents register done mv instruction 
logic arithmetic operators format op src src dest 
operation op executed operand src operand src result written register dest 
operand register integer constant 
control flow modeled unconditional conditional bcc branch instructions 
runtime memory divided classes static global memory stack heap memory 
address unequivocally classes simple memory disambiguation feasible see section 
unfortunately easy prove address stack interprocedural analysis done obtain information frame pointer 
approach assumptions 

alias analysis assembly code section briefly review techniques alias analysis memory 
doing alias analysis leads assumption store instruction dependent load store instruction 
common technique compile time instruction schedulers alias analysis instruction inspection scheduler looks instructions see obvious different memory addresses referenced 
technique independence memory fig 
proved base register different offsets different memory classes referenced 
fig 
shows example technique fails 
looking register assumed register point memory location determine data dependent 
local analysis disables notice definition register statement 
example clear fold improvement needed 
need save information address arithmetic secondly need kind copy propagation 
provided algorithm easy show statement register value fp gamma overlap byte memory blocks starting gamma resp 
fp gamma 

symbolic value set propagation section extension known constant propagation algorithm 
target determination possible symbolic value sets contents register program statement 
subsequent step analysis information determination data dependences storage memory accesses meaning store load instructions 
calculation symbolic value sets performed data flow analysis 
model problem data flow framework called data flow information set union operator set semantic functions 
semantic functions monotone forms bounded semi lattice element zero element general iterative algorithm terminates yields fix point data flow system 

data flow information set method describes content register form symbolic values 
define initialization points program statement called initialization point load instruction defines content call node entry node procedure 
finite set initialization points init 
finite set sv symbolic values consists symbol proper symbolic values polynomials sv delta init variable symbolic value represents value stored register initialization point value assumptions content register 
performing static analysis able infer direction branches taken program execution 
happen register symbolic value valid specific program point 
consequence describe possible register contents called bounded symbolic value sets 
limitation sets ensure termination analysis 
arbitrary fixed 
bounded symbolic value set set sv fx sv kg ld fp st fp ld fp sethi hi llc st lo llc add fp st ld fp 
sample code different techniques alias detection solved instruction inspection needs sophisticated analysis 
regs stand set registers 
call total map ff regs sv state 
means data flow information set calculation symbolic value sets set possible states svs 

union operator node control flow graph predecessor integrate information stemming predecessors 
data flow frameworks joining paths flow graph implemented union operator 
ff fi svs union operator data flow problem defined shown fig 

union operator simple componentwise union sets 
additionally ensure definition operator map arising sets cardinality greater special value 
proven fixed set states svs conjunction union operator constitutes bounded semi lattice element zero element 

semantic functions control flow graph chosen analysis node stands uniquely labeled program statement 
unambiguously assign semantic function nodes semantic function update symbolic value sets assigned register 
fig 
specify semantic functions method 
specification ff stands state execution semantic function ff corresponding state execution semantic function 
execution initialization point knowledge defined value register main idea method describe register content definition symbolic value 
mentioned entry nodes procedure load instructions initialization points 
semantic function entry node initializes symbolic value set register corresponding initialization point doing execution symbolic value stands value stored execution procedure code 
semantic function assigned load instruction initializes symbolic value set register value defined operation similar description corresponding initialization point 
opposed entry nodes initialization valid initialization point safe 
call initialization point safe corresponding statement part loop 
contrast initialization point inside loop called unsafe 
problem unsafe initialization points value affected register may change loop iteration 
safe assumption initialization value 
obtain safe approximation case symbolic value set register set special value 
fig 
operator phi extension add operator polynomials 
result application phi sv pairwise addition terms ensure definition operator resulting sets cardinality greater mapped 
operands value operator returns 
proven semantic functions monotone general iterative algorithm solve data flow problem 

improvement value set propagation limiting cardinality symbolic value sets propagation algorithm may lead infinite sets 
registers contents change loop iteration responsible phenomenon 
calculated symbolic value set registers comprises special value 
inaccuracy analysis accepted practice 
propose improvement symbolic value set propagation algorithm nsv registers 

nsv registers section introduce concept non symbolic value registers called nsv registers 
nsv register loop register content ff fi svs regs ff fi ff fi ff fi sv ff fi 
union operator symbolic value sets 
entry regs ff fr mv rj copy register 
regs fr ff ff 
ff fag add ri rj rm add value store result 
regs fr ff ff 
ff ff phi ff ld mem rj load value address mem register 
regs fr ff ff 
ff ae fr safe initialization point 
semantic functions instructions 
change 
modified propagation algorithm works follows 
determine nsv registers loops program 
sets nsv registers contain things induction registers registers defined load instruction 
nsv register insert additional nodes control flow graph 
loop body attach statement init unique unused statement number 
loop body node control flow graph reached execution loop insert statement 
perform symbolic value set propagation modified control flow graph 
inserted nodes defined semantic functions set symbolic value set initialization point init resp 


consider initialization point safe 
improved version algorithm advantages number iterations general iterative algorithm data flow analysis reduced 
additionally compare memory addresses depend nsv registers 

determination nsv registers loop statement inside statement called loop invariant destination register defined value loop iteration 
determination loop invariant statements performed steps 
mark statements loop invariant constants operands operands defined outside 
iteratively mark untagged statements loop invariant operands defined loop invariant statement 
algorithm terminates statement marked 
concept loop invariants determine nsv registers loop simple way 
register nsv register iff defined statement loop invariant statement fig 
shows results improved symbolic value set propagation simple program 
nsv registers loop 
nsv register init instruction resp 
instructions inserted program 
consequence data flow algorithm terminates third iteration 
concept nsv registers allows accurate analysis memory inside loop 
nsv registers value register set eventually 
contrast improved symbolic value propagation leads proper values 

data dependence analysis determination data dependences achieved different means 
commonly calculation reaching definitions resp 
reaching uses statements 
described problem determining specific statement memory location statements value memory location written resp 

reaching definitions uses determined able infer def def def def associations pair statements indicates true dependence def def pair output dependence def pair anti dependence 
scalar variables determination reaching definitions performed wellknown standard algorithm described 
algorithm data dependence analysis assembly code derive may alias information check storage accesses refer storage object 
improve accuracy data dependence analysis alias information needed check storage accesses refer storage object 
achieve information need mechanism checks index expressions storage accesses represent value 
solve problem applying modified gcd test 
replace appearances registers elements corresponding symbolic value sets check possible combinations equation gamma solution 
example refer fig 

obviously instruction reaching memory instruction 
derived memory addresses gamma gamma respectively 
assumption instructions executed loop iteration prove different memory addresses accessed 
means loop independent data dependence instructions 
instructions executed different loop iterations may different values 
modified gcd test shows instructions may memory location 
assume loop carried data dependence instructions 
implementation results method determining data dependences assembly code sections implemented user function sun sparc workstation running solaris 
presently assembly code sparc processor analyzed extension processors require minimal technical effort 
results analysis tools 
evaluation method taken closer look aspects 
comparison number data dependences method method implemented shows difference value dependence analysis concerning register accesses 

comparison number data dependences address value dependence analysis memory accesses 
sample chose procedures sixth public release independent jpeg group free jpeg software package compression decompression jpeg images 
distinguish levels accuracy level determine address dependences register accesses memory modeled cell pair memory accesses assumed data dependent 
level models memory way level value dependence analysis register accesses 
level register accesses determined way level analyze memory accesses symbolic value set propagation level derivation dependence address 
level perform value dependence analysis 
level analysis performed consider control flow 
instructions assumed data dependent executed 
level common technique today instruction schedulers 
iteration 
iteration mov ll init init fr fr init fr fr fr fr init fr fr fr fr fr fr ld fr fr fr fr fr fr fr fr add fr fr fr fr fr fr fr fr ld fr fr fr fr fr fr cmp fr fr fr fr fr fr add fr fr fr fr fr fr st fr fr fr fr add fr fr fr fr fr fr fr fr fr fr fr fr ble ll 
symbolic value set propagation 
registers mentioned value fr gcc larus 
systems kind value propagation determine address dependences classified level 
section closer look techniques value propagation 
method classified level 
know method determines value dependences 
table contains procedures improvement dependences noticeable level level 
fig 
shows number dependences sum true anti output dependences distinguish different levels accuracy register memory accesses 
fig 
shows rightmost columns effect value analysis address analysis 
procedure clear see proportion data dependences method 

related far done field memory disambiguation 
ellis method derive symbolic expressions memory addresses chasing back reaching definitions symbolic register expression simplified rules algebra expressions compared gcd test 
method implemented bulldog compiler works intermediate level close high level language 
authors inspired ellis lowney ebcioglu 
approach ebcioglu implemented chameleon compiler works assembly code 
procedure transformed ssa form loops normalized 
gathering possible register values procedure name loc level level level level improvement reg 
mem 
reg 
mem 
reg 
mem 
reg 
mem 
reg 
mem 
test function shifting signed jpeg jpeg suppress tables jpeg finish compress emit byte emit emit dht emit sof emit sos write marker write frame header write scan header write tables jpeg abort jpeg jpeg start decompress post process pass jpeg read coefficients select file name sample rows read byte read bytes marker marker skip variable process com process scan jpeg header read byte read colormap read non rle pixel read rle pixel sample rows flush packet start output tga 
number dependences sum true anti output dependences levels accuracy 
results divided register memory dependences 
rightmost columns show improvement value dependence analysis dependence analysis 
technique bulldog compiler 
register multiple definitions algorithm described chase reaching definitions concrete implementation chameleon compiler support 
comparing memory addresses gcd test banerjee inequalities 
results method alias information 
debray approach close 
address descriptors represent addresses addresses containing symbolic registers 
address descriptor pair instruction set mod gamma residues 
denotes set offsets relative register defined instruction note address descriptor depends symbolic register 
data flow system propagate values control flow graph 
mod gamma sets bounded semi lattice needed tests 
leads approximation address representation impossible derive alias information 
second drawback definitions register different control flow paths joined set mapped 
comparing address descriptors reduced comparison mod gammak sets dominator information handle loops correctly 
derive data dependence information 

new method detect data dependences assembly code 
works steps perform symbolic value set propagation monotone data flow system 
compute reaching definitions reaching uses register memory access derive value data dependences 
comparing memory modification gcd test 
known approaches memory disambiguation propagate values memory cells 
remember loading memory causes destination register symbolic value 
compare memory mind registers defined different instructions may different values loaded memory address 
handle situation plan extend method propagate values memory cells 
software pipelining major application near family techniques overlaps execution different iterations original loop requires precise dependence analysis additional information distance dependence 
development entails particular discovering induction variables possible post pass soon loop invariants known 
coupling known dependence tests banerjee test omega test considered 
extending method interprocedural analysis lead accurate dependence analysis 
presently assume contents registers memory cells may changed evaluation procedure call 
step assumptions global memory locations derive exact dependences 
acknowledgments referees comments helped improving 
aho sethi ullman 
compilers principles techniques tools 
addison wesley reading ma 
banerjee 
dependence analysis supercomputing 
kluwer academic boston ma usa 
bernstein rodeh 
global instruction scheduling superscalar machines 
proceedings acm sigplan conference programming language design implementation pages toronto canada june 

exploitation fine grain parallelism volume lncs 
springer verlag berlin germany 
cytron ferrante rosen wegman 
efficient method computing static single assignment form 
proceedings sixteenth annual acm symposium principles programming languages pages austin texas jan 
davidson shriver mallet 
experiments local microcode compaction horizontal machines 
ieee trans 
computers july 
debray muth 
alias analysis executable code 
proceedings fifth annual acm symposium principles programming languages pages san diego california 
ellis 
bulldog compiler vliw architectures 
mit press 
fisher 
trace scheduling technique global microcode compaction 
ieee trans 
computers july 
kam ullman 
monotone data flow analysis frameworks 
acta informatica 
landi ryder 
pointer induced aliasing problem classification 
proceedings eighteenth annual acm symposium principles programming languages pages orlando florida jan 
larus hilfinger 
detecting conflicts structure accesses 
acm sigplan notices july 
lowney freudenberger lichtenstein nix donnell 
multiflow trace scheduling compiler 
journal supercomputing 

lazy array data flow dependence analysis 
proceedings annual acm symposium principles programming languages pages 

moon ebcioglu 
study number memory ports multiple instruction issue machines 
proc 
th annual international symposium microarchitecture micro pages 
moreno ebcioglu altman chen 
compiler architecture interaction tree vliw processor 
workshop interaction compilers computer architectures conjunction hpca san antonio tx feb 
nicolau 
percolation scheduling parallel compilation technique 
technical report dep 
computer science cornell university 
pugh 
omega test fast practical integer programming algorithm dependence analysis 
communications acm august 

system assembly language transformation optimization 
proc 
th workshop compilers parallel computers pages aachen dec 
schnarr larus 
instruction scheduling executable editing 
proc 
th annual international symposium microarchitecture micro pages paris france dec 

gnu instruction scheduler 
technical report free software foundation june 
wall 
limits instruction level parallelism 
technical report digital western research laboratory university avenue palo alto california 
zima chapman 
supercompilers parallel vector computers 
addison wesley reading ma 
