data striping local area network luis felipe cabrera ibm almaden research center computer science department internet cabrera almaden ibm com darrell long computer information sciences university california santa cruz internet darrell cis ucsc edu technique storing data single object storage servers called data striping achieve high transfer data rates local area network 
parallel paths data allows client transfer data storage higher rate supported single storage server 
implemented network data service called swift uses data striping 
swift exhibits expected scaling property number storage servers connected network number interconnection networks system 
simulated version swift explore limits possible configurations 
observe system evolve support high speed interconnection networks large numbers storage servers 
swift distributed system independently replaceable components component limits performance replaced faster component available replicated parallel 
allow system incorporate exploit emerging storage networking technologies 
current generation distributed computing systems support intensive applications 
particular incapable integrating high quality video data general purpose environment 
example multimedia applications require level service include scientific visualization image processing recording playback color video 
data rates required applications range megabytes second dvi compressed video megabits second cd quality audio megabytes second uncompressed full frame color video 
data striping technique distributes data individual object storage servers built system called swift addresses problem data rate mismatches requirements application storage devices interconnection medium 
goal swift support general purpose distributed systems high data rates necessary multimedia applications 
swift designed distributed storage system 
provides advantages easy expansion load sharing provides better resource utilization resources necessary satisfy request 
addition swift flexibility appropriate storage technology including disk array highperformance storage devices array tapes 
raid swift drives storage servers parallel provide high data rates 
described underlying architecture system 
swift build unix operating system 
prototype provides unix file system interface includes open close read write seek 
swift provides data rates significantly faster access local scsi disk limited capacity single ethernet segment case multiple ethernet segments ability client drive 
case synchronous writes prototype single ethernet segment servers achieves data rates double data rate provided access local scsi disk 
cases reads asynchronous writes data rates achieved prototype scale approximately linearly number storage servers saturation ethernet segment 
measurements show swift scales multiple storage servers interconnections appropriate storage technology including high performance devices disk arrays 
constructed simulation model demonstrate systems swift exploit advances processor communication storage technology 
consider effects processor speed interconnection capacity multiple storage servers utilization unix trademark bell laboratories components data rate system 
show data rates scale number storage devices replacing highly stressed components powerful ones data rates entire system increase significantly 
simulation includes processor utilization account data transmission cost computing parity blocks data 
remainder organized follows description swift 
measurements prototype 
simulation model 
consider related 
description swift swift builds notion distributing data multiple storage servers driving parallel 
principle swift simple aggregate slow storage devices faster logical storage service making applications unaware aggregation 
swift sets storage servers concurrently satisfy requests clients 
concurrent architectures cfs raid observation 
mainframes super computers exploited approach 
swift client server system independently replaceable components 
clients connected sets storage servers interconnection medium 
storage servers interconnection medium upgraded independently 
advantage modular approach component limits performance replaced faster component available replicated parallel 
experimenting prototype example different interconnection configurations single ethernet second ethernets 
partial failures important concern swift 
precautions taken failure single component particular storage server hinder operation entire system 
example object data failed storage server unavailable object data written failed storage server sparcstation slc servers local scsi disks sparcstation slc servers local scsi disks departmental ethernet laboratory ethernet sparcstation client ethernet configuration swift client 
damaged 
accepted solution problem redundant data including multiple copy computed copy erasure correcting codes 
choice compatible system prototype computed copy redundancy form parity 
simple approach provides resiliency presence single failure parity group low cost terms storage expense additional computation 
swift built set libraries standard filing interprocess communication facilities unix 
library assumes storage servers homogeneous interleaves data uniformly set storage servers service request 
library translates file names user requests swift file names underlying file system naming 
ethernet configuration swift depicted 
request client swift library communicates storage servers involved request simultaneously perform operation striped file 
client unaware actual placement data 
file may striped number storage servers important performance limiting factors rate client servers send receive packets maximum transfer rate ethernet 
prototype allowed confirm high aggregate data rate achieved 
data transfer protocol swift built light weight data transfer protocol top udp datagram protocol 
avoid unnecessary data copying possible scatter gather kernel deposit data coming network directly buffer client address space 
current prototype client sun sparcstation megabytes memory megabytes local scsi disk unused experiments 
list hosts act storage servers 
storage servers placed sun slc megabytes memory identical local scsi disks capacity megabytes 
client storage servers dedicated udp ports transfer data dedicated server process handle user requests 
data transfer protocol swift client uses unique udp port connection 
done effort allocate buffer space possible client 
client services open request contacting storage server advertised udp port address 
swift storage server waits open requests known udp port address 
open request received new secondary thread control established private port communication regarding file client 
thread remains active communications channel remains open close request received client primary thread continues await new open requests 
secondary thread receives read write request receives additional information type size request 
additional information thread calculate packets expected sent received 
case read request client sends requests blocks client 
ahead allows blocks various states transmission client resulted significant data rate benefits 
client servers implement simple sliding window protocol assure packets lost assembled correct order client 
client write request swift library sends data written block time receives explicit acknowledgment 
client write request returns corresponding received 
explicit acknowledgments necessary prevent client flooding servers packets performing synchronous writes 
experiments extra acknowledgments significant impact measured data rate faster network sophisticated protocol 
receipt close request client expires file handle storage servers release ports extinguish threads dedicated handling requests file 
read operations need explicit data client stay ahead servers 
measurements swift measure performance swift prototype sixteen megabytes read written swift objects 
order calculate confidence intervals samples measurement taken 
analogous tests performed local scsi disk nfs file service 
data rate measurements kilobyte denote bytes 
order maintain cold caches file mapped virtual address space flushing process 
pages file invalidated requires disk file accessed 
mappings removed delete pages file 
methods disk partition containing file tried yielded similar results 
experiments local scsi disk kilobyte blocks 
measure rates system access actual device 
results local scsi measurements indicate sun quantum local disk capable reading data sigma kilobytes second sixteen megabyte file 
measured values decrease slightly high sigma kilobytes second megabyte file amount data read increases 
synchronous write rate obtained sixteen megabyte file sigma kilobytes second decreases longer files 
probable reason increased complexity accessing data blocks length file increases 
experiments asynchronous writes measure rate writes file system memory written disk file system efficiently 
performance user perceives writing local disk 
data guaranteed written disk file closed 
data rates asynchronous writes higher synchronous write 
measurements reveal rate local file system sun asynchronously write data sigma kilobytes second sixteen megabyte file sigma kilobytes second megabyte file 
significant drop performance due fact larger files file system buffer space exhausted file system needs write data disk pause disk completions 
performance swift prototype 
storage server prototype performs nearly accessing local scsi disk prototype slightly slower due data transmission protocol processing delays 
prototype sends requests case allows server ahead file processing accesses local disk data transmitted 
enables prototype read megabyte file rate approximately kilobytes second single sun server 
synchronous writes considered prototype performs identically local file system prototype slightly slower due transmission delays 
asynchronous writes considered performance prototype single server comparable local file system 
prototype able write approximately kilobytes second large files 
slightly slower local file system attributed transmission delay introduced ethernet 
cases prototype servers performs approximately twice prototype single server 
reads considered prototype performs slightly twice servers single server 
primary reason disparity see increasingly issue servers employed limited ability sparcstation receive data ethernet 
case synchronous writes data rate prototype servers number servers read synchronous write asynchronous write data rate swift prototype ethernets 
exactly doubles data rate single server 
noticeable degradation ethernet lightly loaded approximately kilobytes second transferred 
case asynchronous writes prototype servers approximately doubles data rate prototype single server 
servers data rate approximately times single server cases reads synchronous writes 
asynchronous writes increase data rate muted ethernet increasingly saturated 
performance better reads transmitting data ethernet requires fewer process context switches data copying interrupt signal completion 
purposes comparison measurements data rates provided high performance nfs file server 
server sun megabytes memory gigabytes disk space ipi drives 
server connected sparcstation client prototype experiments second network interface 
network shared departmental ethernet measurements conducted late night minimize interference tasks 
case reads high performance nfs file server provides data rate sigma kilobytes second sixteen megabyte file approximately better prototype single server 
surprising sun designed act file server ipi disks faster local scsi disk swift 
synchronous writes considered nfs file server provides data rate sigma kilobytes second sixteen megabyte file approximately better prototype single server 
multiple swift servers prototype provides significantly better performance nfs file server 
asynchronous writes considered nfs file server provides data rate sigma kilobytes second sixteen megabyte file 
case swift server provides significantly better performance single server employed 
careful comparing swift nfs swift prototype provide features nfs support 
example nfs stateless provide guarantees asynchronous writes stronger provided swift 
measurements prototype single ethernet segment demonstrate swift achieve high data rates local area network aggregating data rates slower data servers 
prototype validates concept distributed disk striping network 
demonstrated prototype providing data rates higher local scsi disk nfs file server 
effect adding second ethernet determine effect doubling data rate capacity interconnection added second ethernet segment client added additional storage servers 
case storage servers sun slc faculty offices megabytes memory local scsi disks hosts laboratory 
second ethernet segment shared groups department 
measurements performed late night period load departmental ethernet segment seldom capacity 
interface second network segment placed bus client standard bus sun 
bus interface known achieve lower data rates board interface expect obtain data rates twice large dedicated laboratory network 
expected see network subsystem client highly stressed 
results swift prototype storage servers separate ethernet segments 
compared results storage servers single ethernet segment apparent case reads having storage servers networks slightly worse having single network 
reasons anomaly 
network interfaces interrupts fielded client 
second second network shared entire department slight load late night 
hosts departmental ethernet segment memory laboratory 
results synchronous writes comparable obtained single ethernet segment data rate scales linearly 
measurements asynchronous writes comparable obtained single ethernet segment 
reason difference scaling write puts stress sparcstation read 
storage servers placed ethernet apparent data rate reads scale linearly comparable storage servers single ethernet segment 
due complexity ethernet interfaces 
case synchronous writes data rate continues scale linearly performing twice storage servers 
asynchronous writes ceased scale linearly client approaching capacity transmit data ethernet interfaces 
storage servers placed ethernet data rate read improves proportion number storage servers 
client highly stressed fielding interrupts copying data 
case synchronous writes data rate continues scale linearly 
unexpected low base data rates local scsi disks stress network 
case asynchronous writes essentially change storage servers client saturated 
number servers read synchronous write asynchronous write data rate swift prototype ethernets 
simulation performance study modeled hypothetical high speed local area token ring implementation swift 
primary goal simulation show system swift exploit network processor advances 
second goal demonstrate distributed disk striping viable technique provide data rates required intensive applications 
third goal confirm scaling properties swift 
necessary network technology available simulation appropriate exploration vehicle 
token ring local area network assumed transfer rate gigabit second 
clients modeled disk hosts single network interface connected token ring 
storage servers modeled hosts single disk device single network interface 
evaluate possible effect processor bottlenecks simulated processor types instructions second processors 
structure simulator system modeled client requests drive storage server processes 
generator process creates client requests exponential distribution govern request interarrival times 
client requests differentiated pure read pure write conservative read write ratio 
modeling overlapping execution requests modeled serially request completed issued 
simulation swift read operation small request packet multicast storage servers 
client waits data transmitted storage servers 
write operation client transmits data storage servers 
blocks write request transmitted client awaits acknowledgment storage servers data written disk 
simulator models parity computations 
write requests simulator calculates cost producing parity blocks data written 
computing data parity important factor processor utilization 
simulator charges instructions compute parity byte data 
consider way computing parity errs conservative side 
disk devices modeled shared resource 
requests allowed complete resource relinquished 
time transfer block consists seek time rotational delay time transfer data disk 
seek time rotational latency assumed independent uniform random variables pessimistic assumption advanced layout policies 
block read disk scheduled transmission network 
simulation results simulator gave ability determine data rates possible configuration processors interconnection medium storage devices 
modeling parameters varied processor speed intervening computing nodes number disk devices representing storage servers size transfer unit 
simulator observe system bottlenecks moved storage servers processor power number disks read read write data rate kilobyte blocks varying read write ratio 
client depending specific configuration 
simulating chose disk parameters typical commonly current file servers 
disk assumed spin revolutions minute yielding average rotational latency milliseconds 
rotational latency modeled uniform distribution 
average seek time assumed uniformly distributed mean milliseconds 
assumption simplifies seek time distribution actual disk drives acceleration deceleration phase modeled uniform distribution 
read write ratio considered 
processor disk utilization ratio reads writes significant effect data rate system 
increased load processor compute redundancy code writing data 
considering large requests writes penalized multiple access costs associated small writes 
preserve parity function small writes necessary read parity block block parity set modified write block parity block 
number disks blocks blocks blocks blocks effect block size throughput 
clear obtainable data rate sufficient interconnection capacity available data rate linearly related number storage servers size transfer unit 
cost computing parity non negligible processor bottleneck write requests directed large numbers storage servers 
instructions second processor utilization storage servers increases high loads processor client bottleneck 
illustrate effect block size data rate 
expects larger block size higher data rate 
data rate continue increase cylinder boundary reached forcing disk seek logical request transfer rate capacity device reached 
illustrates rotational latency seek time significant sources delay system 
reason transfer unit large impact data rates achieved system seek time rotational latency enormous compared speed processors network transfer rate 
shows value careful data number disks read read write fraction processor kilobyte blocks 
placement indicates resource preallocation may beneficial performance 
small transfer units require seeks order transfer data large transfer units significantly positive effect data rates achieved 
small numbers disks seek time dominated extent effect performance significant number disks 
message network data transfer processing costs important factor effect transfer unit 
example assumed protocol processing required instructions plus instruction byte packet 
size packet increases protocol cost decreases proportionally packet size 
cost instruction byte packet part unavoidable reflects necessary data copying 
see demands processor significant case pure reads 
read costs due cost protocol processing necessary cost copying data system user address space 
having hardware network interface merge striped data directly user address space significant amount copying saved simulation instruction byte 
case number disks read read write fraction disk kilobyte blocks 
writes processor seen significant performance limiting factor 
due assumed cost computing parity code exclusive 
see utilization disks decreases disks 
due saturation processor especially writes increased load interconnection network 
notice correspondence processor utilization processor utilization writes high corresponding utilization disks low 
fraction network capacity 
network capacity close saturation significant load large number disks 
high load effect data rate system utilization disks 
effect doubling processor speed modeled effect doubling processor speed evaluate effect processor bottleneck 
comparing figures see highest number disks percent busy processor decreased pure read load number disks read read write fraction network capacity kilobyte blocks 
pure write load 
see simulation shows client achieve pure read data rates order megabytes second disks contrast megabytes second depicted 
pure writes system achieve data rates megabytes second disks versus megabytes second depicted 
disk simultaneously utilized capacity pure reads capacity pure writes 
corresponding utilization percentages respectively 
substantial increase data rate pure writes highlights effect cost computing error correcting parity codes software 
faster processor bottleneck shifted serial nature data transmission protocol 
explains pure read data rates increase write data rates network interconnection medium disk storage subsystem spare capacity 
number disks read read write mips fraction processor kilobyte blocks 
number disks read read write data rate kilobyte blocks varying read write ratio 
related research notion disk striping formally introduced salem garcia molina 
technique years subsystems super computers high performance mainframe systems 
disk striping versions unix operating system means improving swapping performance 
knowledge swift disk striping distributed environment striping files multiple servers local area network 
examples commercial systems utilize disk striping include super computers cm airline reservation system ibm cfs intel 
hewlett packard developing system called uses array storage processors connected high speed switched network 
maximum data rate limited interconnection medium channel 
higher data rates achieved multiple channels 
aggregation data rates swift generalizes proposed raid disk array system ability support data rates single disk array controller 
fact swift concurrently drive collection raids high speed devices 
due distributed nature swift advantage raid having single point failure disk array controller power supply 
swift differs traditional disk striping systems important areas scaling reliability 
interconnecting communication networks swift scalable centralized systems 
higher performance required additional storage servers added swift system increasing performance proportionally 
selectively hardening system components swift achieve arbitrarily high reliability data metadata communication media 
cfs example mechanism metadata tolerant storage failures 
cfs repository descriptor multi repository object fails entire object unavailable 
third difference traditional disk striping systems swift advantages sharing decentralized control distributed environment 
clients may access independent sets storage servers 
swift incorporates data management techniques long centralized computing systems distributed environment 
particular viewed generalization distributed systems channel architectures mainframe computers 
presents swift scalable distributed system achieves high data rates striping data storage servers driving concurrently 
system validates concept distributed disk striping local area network 
swift presents flexible powerful way doing local area network aggregation servers satisfy requests client 
swift sets available storage servers viewed larger powerful storage server 
swift built unix ethernet local area network 
swift demonstrates achieve high data rates local area network aggregating data rates slower data servers 
servers single ethernet segment prototype achieved twice data rates provided access local scsi disk achieved times nfs data rate asynchronous writes twice nfs data rate synchronous writes twice nfs data rate reads 
performance swift limited speed ethernet local area network 
second ethernet path added client storage servers data rates measured demonstrated swift immediate faster interconnection medium 
data rates writes doubled 
reads improvements pronounced client absorb increased network load 
simulations system swift show exploit powerful components components limit performance 
simulations show data rates swift scale proportionally size transfer unit number storage servers sufficient interconnection processor capacity available 
distributed nature swift leads believe able exploit current hardware trends increases processor speed network capacity decreases volatile memory cost secondary storage inexpensive correspondingly faster 
swift flexibility alternative data storage technologies arrays digital audio tapes 
lastly system prototype installed easily existing operating system needing modify underlying networking hardware file specific software 
exploit emerging high speed networks large installed base current file servers 

grateful contributed research including aaron dean long prototype laura haas mary long thoughtful comments manuscript john wilkes stimulating discussions distributed file systems 
simulation results obtained aid simulation language developed supported products la jolla ca 
luther digital video pc environment 
hill 
salem garcia molina disk striping proceeding nd international conference data engineering pp 
ieee feb 
patterson gibson katz case redundant arrays inexpensive disks raid proceedings acm sigmod conference chicago pp 
acm june 

cabrera long swift distributed disk striping provide high data rates computing systems vol 
pp 
dec 
thinking machines incorporated connection machine model cm technical summary may 
pratt french janet comparison architecture performance parallel file systems proceedings th conference hypercubes monterey mar 
stonebraker schloss distributed raid new multiple copy algorithm proceedings th international conference data engineering los angeles pp 
ieee computer society feb 
ng pitfalls designing disk arrays proceedings ieee compcon conference san francisco feb 
ibm concepts structure manual 
clark application system performance characteristics ibm systems journal vol 
pp 

johnson dimensional wave equation computations vector computers proceedings ieee vol 
jan 
davidson garcia molina skeen consistency partitioned networks computing surveys vol 
pp 
sept 
comer internetworking tcp ip principles protocols architecture 
prentice hall 

cabrera hunter karels user process communication performance networks computers ieee transactions software engineering vol 
pp 
jan 
shum architecture mvs mvs xa transactions vol 
pp 


