dependently typed records representing mathematical structure robert pollack durham university rap dcs ed ac uk august consider statement groups group 
naive approach formalize unfold meaning group statement groups begins set operation associative 
approach improved collecting parts meaning group context need explicitly mentioned statement 
means discharging context provided statements context instantiated particular groups 
group context discharged parts group mentioned general lemma groups 
variations supported proof tools coq section mechanism lego discharge automath contexts isabelle locales 
significant refinement achieved giving names bits context telescopes class contexts martin lof framework explicit substitutions 
need discharge context instantiate definitions lemmas 
contexts telescopes flat don show structures built existing structures sharing parts inheriting properties 
informally define packaging approach collecting parts mathematical structures supporting manipulation structures 
packaging edged sword structures packaged gain abstraction need tools manipulating 
overview sect 
show known inductively definable packaging constructions sigma types inductive records pointing issues ciency abstraction known 
section presents true records including treatment labels 
presentation supported uk epsrc gr previous version appears theorem proving higher order logics tphols springer verlag 
see www springer de comp lncs 
inspired considerably simplifies explains 
simplifications removal record subtyping core description records favor general notion coercive subtyping briefly discussed sect 

sect 
making signatures precise discusses pebble style sharing manifest types signatures 
manifest types extended simple notation adding manifest information existing signature 
sect 
shows manifestly typed records definitional extension type theory inductive recursive definition 
main novelty simple completely formal treatment manifest types signatures 
formal presentation unitary sense 
appears informal discussion 
main idea wish sell manifest signatures necessary actual practice formalization mathematics 
notations lambda abstraction dependent function type non dependent function type application 
variable body 
field labels written distinguish variables owes discussion colleagues computer assisted reasoning group durham especially zhaohui luo 
courant discussion signature strengthening definable structures structuring techniques inductively definable dependent type theory 
class constructions parameterized 
partial equivalence relation running example 
sym resp 
trn express symmetric resp 
transitive relation telescope informal record type set prop sax sym tax trn set prop sax sym tax trn 
object signature fitting telescope informally sax tax 
set prop sym trn sigma types clear approach packaging handle dependency parts earlier parts package 
simplest dependent package pairs sigma types 
purposes best logical framework presentation sigma types fig 
dependency handled dependent function type framework see rule form 
written computation rules typed equality implemented syntactic reduction 
form type type ap type intro ap type ap ap elim ap elim ap comp ap ap ap comp ap ap ap lf presentation sigma types 
type synthesis ective pairs ap heavily typed carry annotation ap type component inferred write sigma formalized coq similarly lego inductively defined family single constructor inductive type type type 
constructor pairs heavily typed fig 

projections defined terms inductive elimination rule case analysis projection type type cases 
fig 
definable projection heavily typed artifact functional presentation 
example right association represent associating pairs right 
usually written directly set prop sym trn 
clarify definition written incrementally inner set prop sym trn middle set prop inner set middle 
inside signature fields named referred bound variables names purely local refer fields object anonymous second projections 
help matters give names field example un annotated pair inhabits ap ap equal types 
projectors 
informal dot notation application defined projectors functions 
set prop sax sym tax trn defined field projectors global reused globally projectors packages shadowing ad hoc solution 
inhabitant signature defined inner middle 
example left association alternative associate pairs left 
rel set prop rel sym trn 
get local field names directly defining signature project fields define top level names field projectors tuple set 
tax trn inhabitant signature defined rel 
di erences giving right left associating definitions incrementally emphasised duality constructions 
symmetry broken type dependency increases right 
sect 
argue left association really better di erences 
nested pairs heavily typed duplication type information cases implementation may optimize structures keeping outermost type annotation 
inner annotations subterms outer annotations projection left associating structures cost free optimization 
inner annotations substitution instances outer annotations optimization requires traversing types order project second component 
want add field structure equivalence relation added right general depend previous fields 
extended directly structure remain left associating lego built sigma types 
immediate substructure 
property called extensibility 
hand extending entail breaking right association reorganizing entire structure longer substructure 
suppose want specialize natural numbers 
data definition shows directly rest package depends field middle nat structure want 
application parameterized signatures known pebble style sharing discussed sect 

obvious way specialize definition reorganizing entire structure 
point evidently dual previous paragraph 
observation application sharing defined directly nested sigma types appears clear understanding tuples right associating 
ad hoc association ways build tuple pairs sigma types free ad hoc association choose 
unitary rules building records discussed choose left right association uniformly 
inductive telescopes inductive definition sigma types tuples projections programmed terms inductive elimination extended arbitrary telescopes 

telescope inductively defined type single constructor formation rules form type type 


type type intro type 

premises say exactly typed premises say 
fits coq similarly lego special syntax inductive telescopes 
example define record type set prop sym sym trn trn 
generates inductive definition inductive type build set prop trn sym 
having constructor build 
field names 
bound variables 
access fields outside package anonymous eliminator cases 
example defined approximately set cases build coq tries define projectors automatically name associated bound variable name fail name top level 
uniform packages define general telescope length sect 
general telescope 
general telescope programmed coq record sig type type type type type 
definition exactly captures rules 
defined definition type sig set set prop set prop sym set prop sym trn 
possible define general telescopes terms shorter general telescopes various ways defined ways terms pairs 
di erences 
heavily typed build construct 

build inhabits 
hand heavily typed constructor type annotations 
name equality vs structure equality 
due way coq lego create inductive types di erent type hiding constructor done programming language module systems 
definitionally equal type sig applied arguments convert definition 
require hiding sig constructor 
similarly structure defined specializing general package admits extra type equalities 
dependently typed records give extension martin lof framework extensible dependently typed records record subtyping 
prototype implementation worked interesting examples 
presentation complicated framework apparently essential subtyping system hard understand 
give form type type type intro type elimination projection restriction visible label 
el tr el tp elimination passing operations top level 
el lr el lp computation rules 
tr tp lr lp rules left associating records 
simplified version system subtyping explicit substitutions turns straightforward left associating records 
am informal di erence type set 
record subtyping treated orthogonally coercive subtyping sect 

right associating records reasonable 
left associating records left associating record pair labelled second component 
responds label passes label component 
record types signatures syntax records structures syntax henceforth omit type annotations records necessary setting type synthesis ective 
rules shown fig 

labels bind signatures records 
notation syntax local definition 
precise say label part signature type annotation record 
formation rules form intro may record type may field fields shadow earlier fields label 
allowing repeated labels signatures completely satisfactory simplifies presentation allowing signatures class 
kind record type enforce record type known labels known side conditions freshness labels sense 
presentation modified enforce fresh labels similar way 
type type typed may label similarly empty record type required informal notion pure record type obtained starting unit type write record 
elimination computation type theory elimination guided canonical form object type computation guided canonical form object 
canonical mean records signatures field labels top level construction 
sequentially decomposing signature record maintain principle top level structure rule 
record projection restriction 
operational meaning elimination rules search signature linearly field label 
choice allow repeated labels signatures side condition needed force matching field 
rules el lr resp 
el lp resp 
typed know resp 
typed equal signature field labelled record subtyping explain projection field conclude project fields precede fields precede restriction operation explicit allows write elimination rules el tp prior notion record subtyping 
reading computation rules left right rules tr tp compute canonical records expected 
compute record label top level rules lr lp strip top level restriction proceed 
records vs sigma clear presentation left associating signatures just sigma types carrying labels erase read respectively 
nested wish call left associating rule el lp searches right left 
projection labels anonymous restriction operator just drop rules el lr lr know object record type know label gained 
full restriction shown rules operations signatures discussed 
aside operations signatures fig 
conventional rules el tr 
el lp elimination hypothetical object record type 
fact object plays role alternative rules elimination computation signatures fig 

rules slightly sharper fig 
sect 

elimination record objects easily expressed terms signature operations 
example left associating records cial syntax write set set rel set set prop rel sax rel sym tax trn tr type type tp type type lr type type type lp type type type signature operations left associating records 
binding variables local field names treated rules lr lp depth projections increase trn trn 
field labels new interact local names 
structure defined nested pairs field label accessible writing signature intermediate definitions removing inner brackets redundant type tags get nearly acceptable notation set prop sax sym tax trn 
cial inhabitant sax tax omitting redundant information write sax tax 
right associating records left associating records close 
viewpoint records just sigma types labels right associating records natural 
guess chose left association achieve extensibility 
right associating record pair labelled component 
responds label passes label second component 
record types syntax records syntax henceforth omit type annotations records necessary type synthesis ective 
local definition bind rules analogous left associating records sect 
fig 

signature abstraction rules fig 
see express elimination rules right associating signatures carrying operations underneath top level involves signature family type signature 
top level signature operations definable rules tr tp fig 

restriction takes closed package shows functionally depends field 
operation supports signature application pebble style sharing sects 

main reason interested right associating records 
form type type type intro type el tr el tp el lr el lp signature abstraction tr type type tp type 
type rules right associating records 
example right associating records cial syntax write set set prop prop sax sym sym tax trn trn 
removing inferable type annotations internal brackets write set prop sax sym tax trn 
binding variables local names treated 
cial inhabitant sax tax omitting redundant information write sax tax labels variables labels global accessors records alpha converted 
labels variables syntactic class dependent record types substitute set knowledge satisfactory handling problem field label bind variable bind 
written set prop sax sym tax trn 
approaches give inspired parsimonious existing dependent function type introducing new binding construct 
notations labels variables 
heavy 
point informal notation set prop sax sym tax trn translated mechanically formal notations 
true signatures represented informal manner example shows left associating type type right associating type type type type harper lillibridge type type 
variables needed disambiguate labels notation satisfactory formalization 
known proof tools pvs dependent record types notation 
formal approaches left right associating records harper lillibridge style labels variables distinct syntactic classes 
confusion implemented concrete type labels variables appear di erent syntactic positions 
dependent records 
harper lillibridge courant structures dependent dependently typed field variables fields local definitions 
say records packaged environments 
example write record definitionally equal operation distinguish dependent presentation flattened 
evident rules intro figs 
fields left right associating records depend previous fields 
records equally expressive write type example 
preserve sharing take syntactic sugar local variable su ciently fresh 
dependency harper lillibridge structures useful say precisely di erence guess relevant mention harper lillibridge structures extensible structure closed potential field variables 
coercions presentations built notion structural subtyping roughly welltyped permutation fields extension signature subtype signature 
allows corresponding fields subtype relation 
object certain type required object subtype accepted group monoid expected 
show approach limited structures flat constructed substructures desirable practice 
peter aczel suggested notion coercive subtyping type theory 
coq lego support ad hoc useful notions coercive subtyping 
zhaohui luo colleagues studied coercive subtyping mechanism introduces definitional equalities logical framework level 
approach expressive ways implementations respects equal 
claim usability implementability issues logical framework typed equality judgement universes la tarski worked 
style requires field variables structures signatures 
example coercive subtyping reconsider equation coercions coq notation 
define inner parameterized record field structure record inner set prop type sym sym trn trn 
record type set prop inner 
notation set means set treated coercion set write mean ranging carrier typechecker invisibly inserting coercion similarly prop coercion relations carrier 
write type 
statement particular relation reflexive written 
similarly inner means inner written inner treated coercion inner field projections sym trn inner applied directly typechecker invisibly inserting coercion appears subtype inner 
structural subtyping show subtype inner permutation extension inner 
practice build new structures existing structures way sect 

structural subtyping depends accidents structure support natural mathematical definitions 
example coercion opens inner structure users structure 
opening transitive sense larger structure record er type 
project fields inner er object 
shows extensibility important coercive subtyping 
practice want renaming support opening substructures common labels additive multiplicative monoids ring 
subtyping sigma types records constructed nested sigma types useful ask subtyping propagates sigma 
suppose subtype coercion type lifted coercion la showing la subtype 
type la defined composition needed subtype formed expects object object 
idiom appear sect 

illusion complete inner parameterized projections applied parameters trn 
implicit arguments write trn 
manifest signatures programming language designers long recognized need see signatures modules give taste relevant literature :10.1.1.22.3072
assume reader familiar basic approaches pebble style sharing uses pure abstraction application manifest types signatures requires new explanation 
term manifest types informally referring particulars 
manifest signatures 
expressive theorems packages lemma dual stated formulation coarse express meaning 
identity function proof duality construction 
seen application parameterized signature pebble style sharing sect 

convenient right associating structures 
definition duality theorem stated inner dual 
shows duality explicitly doesn return operations package applied structure returned 
theorem directly prove dualization involutive 
manifest signature expresses intended meaning set dual prop sax sym forces rewrite definition error prone obscures statement 
manifest place value succeeding fields 
needed notation add information signature 
duality lemma stated dual 
considered syntactic sugar details precise sect 

apparent subtype sect 
obvious sect 

sharing suppose signature monoids signature groups 
define additive group multiplicative monoid sharing carrier set having axioms connecting operations 
satisfied pebble style sharing applying carrier group 
objection arises approach multiplicative monoid occurs substructure ring attempts formalize algebra way interesting progress 
pebble style sharing heavy doesn scale practice 
needed notation allowing write crr crr 
form la type type intro type computation rules 
comp comp rules manifest left associating pairs 
definable manifest signatures left associating single constructor inductive definitions add value specification right field sigma type fig 

call left associating intend way example shows 
doesn say value second field constrains uniformly function field 
write aa informally aa coq notation type defined record psi type type type psi 
projection rule comp defined inductive elimination second projection rule comp defined heavy type annotations definition psi type type psi 
psi 
psi 

strong rule shows aa second field manifest second projection computed non canonical object type aa intro clear aa isomorphic form clear aa subtype definable coercion subtyping implicit coq definition psi type type psi 
psi 
psi 

coercion psi psi 
example surprisingly aa uniformly typed aa type implies type possible construct non uniform signatures 
example informal signature type typed set set type manifest signature set type typed construction type set informally set type informally informally 
rule comp definitionally equal set informally set 
inhabited tuple set nat form type aal type intro aal type aal aal comp aal comp aal aal aal rules manifest right associating pairs 
example duality examples previous require manifest computation rule 
typing depends rule comp underlying signature typed 
remembering am labels informally subsection consider variations set dual prop sax sym set dual prop sax sym set dual prop sax sym 
equation typed dependency dual requires dual convert dual example accomplished adding manifest information case arriving 
hand typed express duality range subtype relation constrained act set bool nat inhabits range equation convertible type theory judgement distinguish 
surprisingly field depends coercions permute right fields 
definable manifest telescopes trick fields manifest inductive telescope 
shows left field type manifest 
write aal 
analogous inductively definable type theory representation strong manifest computation rule comp 
inner signature closed manifest fields outer signature 
build right associating structures represent example unfolding manifest definition set type set typed set type typed type 
similarly duality example 
sense better subtyping manifest signatures motivating example duality order view theorem returning need coercion erases manifest type information type structure returned seen subtype just seen coercion psi returning corresponding coercion type type type manifest computation 
man rules manifest left associating records 
allows viewing set type subtype type typed 
usual rule subtyping manifest signatures premise requiring manifest supertype typed 
presentation coercion forgetting particular manifest field constructed applying psi substructure constructed field forgets manifest value typed successively lifting coercion fields sect 

typing checks stage supertype typed approach seen analysing usual rule unitary rules psi manifest left associating record types just added labels sect 
add labels manifest signatures syntax opaque manifest objects inhabiting manifest signatures cially syntax write rules fig 

inversion typed general typedness guarantee typedness typing may depend value informative elimination computation rules sect 
hold define coercion psi sect 
projection restriction operations type new computation rule projection manifest field man admissible rule man goes underneath top constructor 
example suppose el tr man 
lp 
lr notation explained terms manifest fields fig 

defined typed rule def 
having explained apply record explain apply longer record rules ro def type type ro type type type rm type type type rules coercion forgetting manifest information sect 

rm 
moving right signature loses information typing may may 
fig 
allow write manifest field alternative chosen 
subtyping sect 
showed uniform coercion psi forgetting manifest value field signature 
similarly uniform coercion forgetting signature 
defined mutually appears rules ro rm 
reason composition rules lifting subtyping outer constructor signature sect 

psi iterated long signature definitionally equal signature 
sense signatures subset manifest signatures especially behaved respect subtyping 

obviously returns subtype just forget trailing fact requires checking 
check computation showing definitionally equal 
conversely set type definitionally equal opaque signature followed programming records type theory shown dependently manifestly typed structures represented type theory types sects 

representation leaves labels meta theory outside formalization 
signatures class objects formalized 
surprise dependently manifestly typed structures including labels described sect 
programmed logical framework martin lof luo extended inductive recursive definition 
main reasons doing support experimentation interesting examples clarify details rules gain confidence meta theory proposed system seen sense definitional extension lf plus inductive recursive definition 
lego coq cially supports schema induction recursion implemented follows lego circumventing schema checking 
formation lbl type having decidable equality string labels 
type signatures sign type signature type records having signature recd sign type defined induction recursion 
sign rules unit sign sign lbl recd type sign man sign lbl recd type recd sign sign recd computes type records nested sign elimination recd type recd type recd recd type recd 
rules previous sections allowed labels appear signature 
induction recursion formalize type signatures duplicate labels shows done 
case compute label occurs signature sign elimination occ prop false occ prop true occ occ prop true occ 
think type sign tarski style universe types records nested 
sign name recd sign inductively defined define functions occ recursion sign types 
names contain information labels types name record type nested name sign 
recursion sign uses aspect universes large elimination 
elimination operations inherited underlying types need specification 
proof occ operations restriction projection signature label lbl sign occ type lbl sign occ type defined sign elimination 
follow alternative rules fig 
fig 
write informally type recd type type recd type clarity show argument suppressed 
shown passing proofs label occurrence notice ground occ computes true false proof object needed ground examples canonical proof true 
deal computation embodies run time type checking computation rules fig 
involved representation 
computation rules restriction projection operations records lbl sign recd occ lbl sign recd occ programmed sign elimination 
recall types records nested definition 
informally suppress proofs label occurrence 
recd 
recd 
rules explained sect 
defined simultaneously coercion forgetting information sign lbl sign sign lbl recd recd 
suppressed required proof occ definitions remains experiment encoding develop interesting examples 
representation class labels testable equality suggests possibilities programmable renaming opening 
shown surprisingly simple class dependently typed records manifest types 
manifest types extended simple notation adding manifest information existing signature 
built notion subtyping coercive subtyping fact program exactly rules fig 
allow write manifest field requires new relation saying outermost occurrence opaque gives flexible notion usual structural record subtyping 
notation treated syntactic sugar literature completely formalized presentation 
developed meta theory records including class labels testable equality programmed type theory extended inductive recursive definitions 
extended framework properties informally believed system manifest signatures preserves properties 
records suggested formalizing mathematical structures necessarily modules separate checking proof libraries 
remains important aspects usability ciency renaming fields 
aczel 
simple overloading type theories 
privately circulated notes 
bailey 
machine checked literate formalisation algebra type theory 
phd thesis univ manchester 

dependent record types formal reasoning 
phd thesis chalmers univ technology 

extension martin lof type theory record types subtyping 
sambin smith editors years constructive type theory 
oxford univ press 
coq project 
pauillac inria fr coq 
courant 
mc module calculus pure type systems 
technical report cnrs universite paris sud lri june 
de bruijn 
telescopic mappings typed lambda calculus 
information computation april 
peter dybjer 
general notion simultaneous inductive recursive definition type theory 
journal symbolic logic 
appear 
harper lillibridge 
type theoretic approach higher order modules sharing 
popl 
acm press 

modular structures dependent types isabelle 
altenkirch reus editors types selected papers volume lncs 
springer verlag 
lampson burstall 
pebble kernel language modules data types 
information computation 
lego proof assistant 
www dcs ed ac uk home lego 
leroy 
manifest types modules separate compilation 
popl new york ny usa 
acm press 
xavier leroy 
syntactic theory type generativity sharing 
journal functional programming september 
luo 
coercive subtyping 
journal logic computation 
luo 
dependent coercions 
category theory computer science ctcs electronic notes theoretical computer science 
elsevier 
macqueen 
dependent types express modular structure 
popl 
martin lof 
intuitionistic type theory volume studies proof theory 
bibliopolis 
pottier 
algebra coq 
see user contributions coq release 

typing algorithm type theory inheritance 
popl 

substitution record types subtyping type theory applications theory programming 
phd thesis chalmers univ technology may 

