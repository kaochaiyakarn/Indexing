re ection san francisco april 
re ection oriented programming jonathan sobel daniel friedman computer science department indiana university lindley hall bloomington cs indiana edu accounts re ection interpreted framework tend assume availability particular pieces state program interpretation including current source code expression 
presents computational account re ection drawing distinction meta level manipulation data control mere availability meta circular implementation details 
particular account doesnot presume existence program source code runtime 
introduces programming paradigm relies re ective language features draws power object oriented programming 
examples features provided explanation translation implementation 
examples include measurement computational expense rst class continuations modi cation semantics expressed values framework re ection oriented programming 
intuitively re ective computational systems allow computations observe modify properties behavior especially properties typically observed external meta level viewpoint 
concept re ection best understood reaching back study self awareness arti cial intelligence am walking street rain 
starting get open umbrella 
thought fragment reveals self awareness behavior state leads change behavior state 
desirable computations avail re ective capabilities examining order meta level information decisions 
realization fundamental understanding re ection means create new programming paradigm compiled programs extended naturally addition composable re ective components 
call new paradigm re ection oriented programming 
research departs previous research partially supported national science foundation ccr 
re ection san francisco april 
striving distinguish notions computation program interpretation 
borrows concepts object oriented systems seen closely related re ective systems ways 
main contributions concise framework computational re ection series examples implementation leaves code open re ection compiled 
section review avenues research computational relates 
section explain approach re ection followed series examples demonstrate power utility re ection oriented programming 
section possible implementation strategy wehave system 
nal section discuss potential research directions re ection oriented programming 
background related research obvious step providing background detailed explanation re programming give precise formal de nition computational re ection 
de nition elusive variety reasons 
lack satisfactory theoretically useful de nition computation 
furthermore circularity inherent notion re ection hard express concrete de nition 
descriptions re ection programming languages avoided notion computation relied concrete concept program 
addressing computation computation restricted programs programs 
framework re ection just property programs happen 
process program execution serves adequate model computation complete treatment topic computation scope research 
introspective interpreters research re ection focuses introspective interpreters 
precisely programs referred 
meta circular interpreter written language interprets special forms added language allow program access modify internal state interpreter running program 
speci cally process converting component state value may manipulated program called rei cation process converting programmatically expressed value component interpreter state called re ection 
re ecting code interpreter program cause code execute meta level 
models turing machines calculi de ne computability provide sort formal mathematical understanding computation concepts programming languages meaning program type term 
confusing term re ection refers speci activity broad subject 
re ection discussed relation rei cation speci meaning intend 
re ection san francisco april 
notable examples genre introspective computation lisp brown blond 
lisp smith introduces idea re ective tower nite number meta circular interpreters run executing interpreter immediately 
program may re ect code higher level including code accesses level possible program run code arbitrarily high meta levels 
introspective interpreters essentially thing variations interpreter state available ect re ective code ensuing computation 
case concept re ection knotted tightly interpretation tightly fact commonplace assume availability original source code execution re ective programs 
debugging aids ability trace execution source program cited examples done introspective interpreters 
attempts escape world interpreter formalize sort re ection performed introspective interpreters overcome extremely operational implementation dependent nature approach re ection 
focusing processes programs free introspective meta circular interpreter 
implementation re ection oriented programming presume interpreted language existence source code program execution allows pre compiled code extended re ective behaviors 
metaobject protocols alternative introspective interpreters grown object oriented programming 
object oriented system program speci es behavior objects class specializing set methods respect class superclasses 
program invokes methods objects knowing precisely class come system chooses appropriate methods run 
metaobject protocol extends object oriented system giving object corresponding metaobject 
metaobject instance metaclass 
methods specialized respect metaclass specify meta level behavior object metaobject pair meta level behaviors include example workings inheritance instantiation method invocation 
real implementations really create metaobject object metaobject protocol subset objects system classes functions 
metaobject protocols provide powerful exible means modifying behavior language 
tool add multiple inheritance language begins single inheritance allow coexistence di erent kinds inheritance method dispatch 
metaobject protocols program control way new objects represented system 
nature metaobject protocol focuses objects system 
correspondence objects metaobjects caused languages metaobject protocols limit re ection values 
role programs manipulate data values objects added power quite useful traditional metaobject protocol program say directly control ow re ection san francisco april 
meta level concepts correspond directly objects problem domain 
re ection oriented programming hand correspondence re ective objects computations 
fact possible understand re ection oriented programming kind meta computation protocol plausible framework re ecting computational properties 
monads monads category theoretic constructs rst received attention programming language community moggi represent ect laden computation denotational semantics :10.1.1.41.840
seen growing acceptance practical tool especially means handling side ects purely functional languages 
monad de ned triple consisting atype constructor operators 
type constructor operators unit extension allow expressions type transformed expressions type values type usually taken represent computations values type monads allows program manipulate computations values kind re ection 
monadic re ection explored relation forms re ection largely unaddressed :10.1.1.41.840:10.1.1.43.8213
study monads strongly uences concept computation especially dissection computations possible de ne re ection oriented programming monads 
hand implementation monadic look familiar acquainted monads 
deeper connections monads explored 
exciting possibility re ection oriented programming allows multiple re ective properties de ned independently formalized address issue monad composition 
currently systems combining monads narrow scope non extensible extended theoretical awareness part user 
re ection oriented programming re ection oriented programming understand computation process program 
right think process execution program long care taken focus particular application interpreter source program 
computation program happening 
re ection computations add lost comparison approaches 
thing re ective systems especially introspective interpreters metaobject protocols enabled program refer variables 
concept program variable necessarily sense context pure processes original source code thrown away 
arguments reifying procedure brown example program text reifying procedure applied 
purely computational view re ection disallows examinations code 
text program merely means process 
re ection san francisco april 
hand purely computational re ection gain ability refer concepts computational expense ow meta information meaning expressed values 
re ection oriented programming paradigm better understand re ection oriented programming paradigm consider programming task 
suppose addition able write edit program complete task possible examine edit source code interpreter programming language 
course programming situations exists choice extra ort go great lengths solve problem user code modify extend interpreter 
dilemma mentioned maes 
familiar example situation need rst class continuations 
need arises convert entire program continuation passing style convert interpreter continuation passing style provide means program reify current continuation replace current continuation 
measuring computational expense simple example 
programmer needs measure number steps program takes complete task main options 
program written updates counter time takes step threading extra argument entire program necessitating continuation passing style modifying global variable 
programmer similar modi cations interpreter provisions user programs examine replace current value interpreter uptime counter 
cases probably simpler just rewrite program program small simple right automatic translation tools available 
program long complex convenient modify interpreter provide interface new features 
starting point associate re ection oriented paradigm choosing modify interpreter providing appropriate interface modi cations 
name re ection oriented programming justi ed grounds style programming computation directly depends information created maintained meta level grounds computation access ect information 
course practical settings programmer access source code interpreter desire interpreted language 
extend re ection oriented programming paradigm programming interpreter modi ed 
precisely de ne re ection oriented programming programming style uses means available extend meta level semantics computation order avoid situations local requirements program fragment non local rewriting program 
re ection san francisco april 
re ection oriented concepts approach re ection oriented programming concepts objectoriented programming start reviewing way object oriented program works 
object oriented programming writes program shape completely xed 
shape determined shape data comes contact 
imagine throwing object oriented program data watching execution program wrap data conforming contours hits 
likewise wish system program wrap execution shape computation hits 
want throw 
give computations shape divide categories 
atomic completed single logical step 

compound requires completion subcomputations 
examples atomic computations numbers variables boolean values performing primitive operations computations corresponding arguments operations completed 
examples compound computations function applications conditionals sequencing operations 
compound computation possible identify initial subcomputation 
semantics source language provides speci cation ordering subcomputations initial subcomputation may uniquely determined 
may arbitrarily subparts compound computation 
call non initial subcomputations rest compound computation 
non initial subcomputation rest subcomputations group compound computation 
computations shape re ective programs written wrap shape 
introduce concept meta information 
meta information consists knowledge available maintained meta level 
example interested knowing ort expended program runs think current number steps completed dynamic context meta information 
view relationship meta information computations shown diagram circle computation numbered boxes represent states sort meta information 
numbers merely labels 
prior state meta information computation occurs left new state meta information 
computational expense example rst box represent number steps executed prior particular computation second box represent number steps executed altogether including steps computation 
system re ective specify behavior type meta information 
re ective class describes structure instances 
instances re ectives re ective objects carriers meta information 
metalevel viewpoint computations act transformers re ective objects 
current re ective re ection san francisco april 
object re ective represents meta information exists instant 
classes re ectives inherit structure methods re ectives 
computation provided meta information form instance re ective exact ect meta information determined methods specialized re ective ancestors 
far re ectives placed naturally groups simple re ectives control re ectives 
re ective concepts environments stores computational expense modeled simple re ectives 
re ection meanings expressed values carried special subset simple re ectives called value re ectives 
control re ectives model concepts pertaining ow control 
notation sections presume object oriented language generic functions 
re ective convention writing names re ectives 
types simply capitalized integer 
parameter function de nition followed optional specializer followed re ective type 
re ective eld new re ective extends re ective new elds eld 
new elds ective write re ective clear result subtype re ective 
instance re ective name eld instance eld reify re ective evaluates current instance re ective 
evaluating re ect re ective causes current instance re ective evaluating returning re ective appears text example just meta variable act empty base re ective type particular functionality 
application left associative usual 
simple re ectives behavior simple re ective instances governed methods 
rst method atomic speci es sort transition instances atomic computations 
second method compound initial speci es sort transition take place entering initial part compound computation 
speci es meta information gets passed rest compound computation re ective object produced initial subcomputation re ective object representing state meta information prior compound computation 
gures form proof rules demonstrate methods process computation atomic 
lled circle rule represents atomic computation 
read rule atomic computation produces output atomic re ection san francisco april 
method produces meta information state supplied meta information state conclude atomic computation causes transition state state meta information 
instance de ne atomic add tick step counter argument applied instances computational expense re ective say atomic computations take computational step 
compound initial compound rest second rule oval computations inside represents compound computation 
circle initial subcomputation small oval rest compound computation 
subparts may atomic compound 
continuing example compound initial add tick step counter argument 
initial subcomputation starts meta information produced compound initial transforms new state possibly going intermediate states way subcomputation compound 
box labeled represents total number steps taken initial subcomputation plus tick added plus steps taken place prior compound computation 
sum original meta information labeled passed compound rest 
example want compound rest return second argument 
compound computation transforms output compound rest ultimate result computation labeled 
total number steps compound computation sum subcomputations 
wanted model system returning subcomputations popping stack represents expense compound rest add tick second argument 
diagrams clear separation meta level behavior information base level program behavior 
de nitions methods linked program compiled 
right hooks compiled program possible add new re ective behaviors modifying original code 
idea concrete consider text program computational expense measured exactly extra re ective information maintained 
furthermore advantage method selection possible de ne di erent kinds re ectives active 
system truly re ective add operations reify re ect language allow meta information rei ed re ected demand 
example possible debugger track expense program runs excluding cost debugger 
debugger reify current expense measuring re ective object entry part computation 
re ect saved expense information back meta level just handing control back user program 
convenient default behaviors atomic compound initial simply thread meta information computations store 
build de nitions system re ection san francisco april 
simple re ective def re ective fg atomic outer simple re ective def outer compound initial outer simple re ective def outer compound rest outer simple re ective inner simple re ective def inner example measuring computational expense discussed measurement computational expense detail preceding section 
implement behavior need de nitions runtime def simple re ective atomic outer runtime def outer add outer ticks ticks compound initial outer runtime def outer add outer ticks ticks inherited de nition compound rest su ces 
suppose want evaluate expression counting cost 
reify re ect operations reify runtime result re ect runtime result capture expense meta information evaluating save evaluating restore old meta information 
result evaluating returned 
course time wewant know cumulative expense program examine reify runtime ticks 
example environments interpreter re ectives possible write simple interpreter untyped call byvalue calculus passing environment argument recursive calls interpreter 
de ne environment re ective 
env def simple re ective compound rest outer env inner env def outer way environment acts di erently default store behavior simple re ectives rest compound computation executed bindings ect outside compound computation prior initial part compound computation 
re ection san francisco april 
suppose parsed calculus terms objects types lambda app 
write interpreter terms follows interp exp def reify env lookup exp name bindings interp exp lambda def reify env bindings reify env re ect env interp exp app def interp exp interp exp rand extend exp formal bindings interp exp body reify second time inside lambda clause re ective may derived env current instance env may elds just bindings virtue inheritance 
careful throw away additional meta information re ect new instance back meta level 
typical issue systems support subtype polymorphism unique re ection oriented programming 
environment expense re ectives coexist possible measure expense evaluating terms interpreter 
generally re ectives exist simultaneously arbitrary amount meta information maintained system accessed programs 
value re ectives useful build special ective simple re ective modeling concept expressed values values produced result computations 
inheriting value re ective possible modify extend semantics expressed values 
default standard concrete values returned computations passed continuations creation new value re ective allows values 
example producing number computation may produce type integer value 
value re ectives probably complex manage changing semantics values necessarily wide systemic rami cations 
just interpreter language primitive operations need rede ned 
possible value re ectives 
example addition rede ned integer integer produces value integer integer avalue meta level description number 
abridged version de nitions value re ective methods appears 
reality method de nitions complicated ways order deal correctly language primitives depending deeply re ection oriented programming embedded language 
re ection san francisco april 
value re ective def simple re ective atomic outer value re ective def outer base value expect value coming outside ignored default de nition 
eld instances re ective acts carrier standard meta level expressed values meta circular interpreter 
example bounding possible values integers simple example power value re ectives restriction domain integers computation 
bound def min max bounded int def value re ective fg atomic integer outer bounded int def outer bound base value compound rest outer bounded int inner bounded int def inner base value instance integer inner bound base value inner new elds added de nition bounded int 
re ective merely modi es behavior integer values overriding default methods 
new de nition atomic example applies integers inherited atomic works types 
de nitions place computation corresponding produce value 
furthermore complex calculations intermediate values subject bounding 
happens program de nes disjoint ectives value re ective 
example de ne value re ective restrict absolute values integers ective rst restrict integer values positive 
reasonable answer orthogonal de nitions simply disallowed 
chosen allow existence independent value re ectives 
step computation values various base value elds collected passed turn continuation 
course worst case lead exponential increase number steps program takes 
implementation attempt control exponential explosion recognizing duplicate values passing continuation 
re ection san francisco april 
control re ectives value re ectives really just simple re ectives get special treatment control re ectives completely di erent species 
methods associated simple re ectives specify meta information ow computations ective basis 
methods associated control re ectives hand specify control managed computations meta information control propagated 
methods de ne behavior control re ective atomic control compound control 
atomic computation encapsulated function executes computation applied appropriate instance control re ective 
likewise compound computation encapsulated functions initial computation rest subcomputations 
possible control split thread computation presence multiple value re ectives example functions returns sequence control re ective objects seen default de nition compound control 
atomic control outer control re ective atom function def atom outer compound control outer control re ective initial function rest function def map concat rest initial outer default de nition atomic control applies function representing atomic computation current instance control re ective 
default de nition passes re ective object function representing initial subcomputation maps function representing rest subcomputations sequence objects returned initial function 
resulting sequences concatenated form nal result 
example implementing class continuations immediate control re ectives rst class continuations 
de ne control re ective cont model continuations eld hold current continuation stage computation 
cont def control re ective atomic control outer cont atom function def map concat head cc tail cc cc atom outer compound control outer cont initial function rest function def initial outer pair rest outer cc cc compound control method passes initial instance cont current continuation eld supplemented rest 
way control ow walks leftmost initial branches computation tree reaching rst atomic computation 
point atomic computation run various resulting instances re ection san francisco april 
cont passed continuation 
rst piece continuation run current continuation eld reset include piece 
de nitions scheme call current continuation call cc dened ordinary function reify re ect 
capture continuation context call cc invoked 
inside function passed receiver function re ect replace current continuation saved 
call cc def reify cont instance list head new reify cont re ect cont new cc cc list cleverness required return value right context list guarantee type di erent cont second time bound 
simply replace entire re ective object new saved old just updating old continuation throw away additional information current instance cont carrying 
remember object question indirect instance cont direct instance ective cont 
implementation implementation translation 
essence translation lays program syntactically resembles computation subcomputation model methods 
section describes main portion translation section discusses representation propagation meta information section extends translation support de nition new re ectives reify re ect 
program translation goal translation recognize demarcate unit syntax corresponds semantically computation 
translated program runtime hooks atomic compound computation 
furthermore syntactic construct evaluates compound computation subexpression evaluates initial subcomputation clearly set apart 
requirements surprising resulting translation bears strong resemblance continuation passing style normal form monadic style 
see section 
translation places functions output applied program fragments correspond atomic computations applied program fragments correspond compound computations 
rst argument corresponds initial subcomputation second argument corresponds rest subcomputations packaged function expects applied base value generated initial subcomputation 
rest translation readable de ning helpful piece syntactic sugar re ection san francisco april 
bind bind rest translation reasons cumbersome read nested applications expressions appear new syntax clearer subexpression corresponds initial subcomputation 
bind bind bind bind bind bind bind translations reify re ect absent depend knowledge representation meta information able shift re ective objects metalevel value domain 
representation goal implement particular representation metainformation 
restricting interest simple re ectives returning idea computations transformers meta information 
translation treats atomic computations values evidenced fact translation go inside expressions correspond atomic computations 
suppose moment re ective de ned 
ensure sort values available returned computations re ective value re ective 
know value produced atomic computation able accept re ective object instance value re ective transform de nition atomic 
conclude type type simple re ectives 
type induced type re ection san francisco april 
applied translated code 
fact translation guarantees 
holds vary type values 
roughly diagrams section de ne follows def atomic def compound initial compound rest base value de nitions support single simple value re ective 
order handle simple re ectives simultaneously complicate de nitions little 
restricting world simple re ectives sibling value re ectives subtype suppose wehave function nd value obj picks value re ective object set simple re ective objects 
support system extending follows def map atomic def map compound initial map compound rest nd value obj base value dealt control re ectives de nitions 
support multiple threads control idea current meta information accomplish objective de ne control re ectives instance carries complete set simple re ective objects possibly including value re ective objects 
control re ective def re ective full support multiple threads relax restrictions slightly control re ective addition value re ective arbitrarily simple re ectives 
control re ective base control re ective 
upgrade system type control re ectives 
new de nitions similar previous ones list simple re ectives carried objs eld re ective 
nd value obj extended get value re ective object re ective object 
re ection san francisco april 
def map atomic objs objs def map compound initial objs objs map compound rest objs objs objs nd value obj base value ready support multiple threads control 
model multiple value re ectives cause process branch di erent directions leading di ering sets re ective objects 
leave restriction place user de ned control re ectives 
restriction reached nal de nition de nitions map concat places bring type replace nd value obj general value objs collects value re ective objects set objects carried control re ective object 
def list map atomic objs objs def map concat map compound rest objs objs objs map concat base value value objs map compound initial objs objs nal revision allow user de ned control re ectives 
remember leave control compound control decide perform computations wrap activity inside expressions passed control functions 
def atomic control list map atomic objs objs def compound control map compound initial objs objs map compound rest objs objs objs map concat base value value objs looking back default de nitions atomic control compound control section see merely uninstantiated de nitions order produce nal versions issue avoided far precisely necessary set re ectives completely representing user choice meta information 
turns necessary instantiate re ectives de ned 
new re ective inherits elds parent de nitions methods specialized new re ective intended supersede parent su cient leaves inheritance hierarchy 
example bounded int de ned longer need carry instance value re ective represent expressed values 
re ection san francisco april 
interface ready return translation extend support user de ned re ectives reify re ect 
obvious convenient way implement re ectives classes 
re ective objects merely instances classes 
translation de nitions re ectives empty translation notation class de nitions re ective de nitions 
order implement reify re ect introduce new functions re ective ref re ective subst 
re ective ref function takes control re ective object re ective nds instance re ective subst function takes re ective object re ective control re ective object returns control re ective object substituted instance 
re ective object type 
re ective ref control re ective def instance re ective ref objs re ective ref re list def instance head re head re re ective ref tail re re ective subst control re ective def instance objs objs re ective subst objs objs re ective subst re list def instance head re pair tail re pair head re re ective subst tail re de nitions simpli ed great deal 
robust de nitions check error cases handle appearance satisfactory target object list re ective objects 
translations reify re ect simply functions 
reify bind re ective ref re ect bind bind re ective subst translations takes advantage knowledge functions expecting applied instances control re ectives 
re ection san francisco april 
introduced re ection oriented programming programming paradigm system conveniently directing propagation meta level information process 
main contributions lay concise framework computational re ection provide examples demonstrate translation implementation 
implementation enables re ection compiled programs parts programs compiled known meta level concepts modeled 
distinction re ection programs re ection computations 
leaves issues unaddressed open research 
outstanding precise formalization re ection oriented programming may carefully compared monadic re ection formal accounts re ection 
clear restrictions functions variant oft form kleisli triple 
restrictions precise properties re ectives violate restrictions investigated carefully 
power combination value re ectives control re ectives fully explored 
possible program perform signi cant amount static analysis re ectively enforced manipulation control re ectives 
extension idea create dynamically self optimizing programs 
multiple inheritance local uid re ectives addressed expect discussions topics object oriented programming carry cleanly realm re ection oriented programming 
supporting multiple inheritance enable creation libraries re ectives user inherit order mix re ective properties 
supporting uid re ectives allow things measurement computational expense segment computation de ning new re ective globally 
implementation somewhat na uniform translation programs regardless particular re ectives de ned 
order re ection usable cient great deal attention needs focused improving optimizing implementation 
example closed system assumed new re ectives introduced possible eliminate calls 
approach follow methodology filinski writing direct style programs monads 
related issue partial restriction extensibility re ection oriented programs 
desirable leave program partially open re ection especially total openness create security risks 
re ection oriented programming may signi cant rami cations characterizing programming language semantics concisely modularly 
particular presentations interpreters compilers greatly simpli ed leaning heavily re ection especially combined crafted object orientation 
re ection san francisco april 
acknowledgments wish brian smith helpful comments nature re ection erik hilsdale jon reading critiquing 
wish anonymous referees critiques led revision notation presentation strategies 
alan bawden 
rei cation evaluation 
proceedings acm conference lisp functional programming pages snowbird utah july 
acm press 
patrick cousot cousot 
interpretation uni ed lattice model static analysis programs construction approximation xpoints 
conference record fourth acm symposium principles programming languages pages 
acm press 
olivier danvy intensions extensions re ective tower 
proceedings acm conference lisp functional programming pages snowbird utah july 
acm press 
david espinosa 
semantic lego 
phd thesis columbia university new york 
andrzej filinski 
representing monads 
conference record popl st acm sigplan sigact symposium principles programming languages pages new york january 
acm press 
cormac flanagan amr sabry bruce duba matthias felleisen 
essence compiling continuations 
proceedings acm sigplan conference programming language design implementation pages 
acm press 
daniel friedman mitchell wand 
rei cation re ection metaphysics 
conference record acm symposium lisp functional programming pages austin texas august 
acm press 
stanley je erson daniel friedman 
simple re ective interpreter 
lisp symbolic computation may june 
gregor kiczales jim des rivieres daniel bobrow 
art metaobject protocol 
mit press 
sheng liang paul hudak mark jones 
monad transformers modular interpreters 
popl nd acm sigplan sigact symposium principles programming languages sanfrancisco january 
acm press 
pattie maes 
concepts experiments computational re ection 
proceedings oopsla acm sigplan notices december 
re ection san francisco april 
anurag mendhekar daniel friedman 
exploration relationships re ective theories 
proceedings re ection san francisco april 
appear 
eugenio moggi 
view programming languages 
technical report ecs lfcs laboratory foundations computer science university edinburgh edinburgh scotland april 
eugenio moggi 
notions computation monads 
information computation july 
gordon plotkin 
call name call value calculus 
theoretical computer science december 
david schmidt 
detecting global variables denotational speci cations 
acm transactions programming languages systems april 
brian smith 
re ection semantics procedural language 
technical report mit lcs tr massachusetts institute technology cambridge mass january 
brian smith 
re ection semantics lisp 
conference record eleventh annual acm symposium principles programming languages pages 
acm press january 
philip wadler 
comprehending monads 
mathematical structures computer science december 
mitchell wand daniel friedman 
mystery tower revealed ective description re 
lisp symbolic computation june 
