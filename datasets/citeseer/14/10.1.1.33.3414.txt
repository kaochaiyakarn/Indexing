integrating scenario measurement software product assessment lionel briand carleton university systems computer engineering colonel drive ottawa canada briand sce carleton ca report isern report 
isern rgen st fraunhofer institute experimental software engineering kaiserslautern germany fhg de software industry needs means evaluate software products compare development implementation technologies context actual projects 
solutions need costeffective technically sound 
presents methodology combine software product evaluation techniques measurement structural design properties evaluation change scenarios 
goal approaches address limitations 
case study context european aerospace industry combined methodology assess impact choice programming language distribution technology maintainability resulting systems 
encompasses comparison java distribution communication technologies ipc sockets corba implementation 
lessons learned terms benefits limitations 
study shows usefulness approach clear needs combination means evaluation critical mind engineering solution 
practical situations able analyze software product assess quality maintainability iso 
number approaches taken range measuring code designs cdk analyzing architectures qualitative standpoint bck 
approaches measuring structural properties control flow complexity coupling static analysis believed related quality attributes maintainability 
small number studies tried establish relationships bwl 
methods analyzing architectures known software architecture analysis method saam identifying relevant representative scenarios change scenarios maintainability assess impact scenarios system terms example change effort difficulty 
presents practical method integrate abovementioned approaches 
fact see complementary fundamental motivation 
example context maintainability saam analysis indicates system parts changed static analysis indicates parts support changes 
define change difficulty indices combine information maintainability indicators 
illustrate application method case study took place gmbh daimlerchrysler aerospace germany 
study focuses maintainability aspects lessons learned expected relevant quality aspects 
defined procedure general reusable manner 
structured follows 
describe problem case study motivations settings 
provide brief overview methodology introduce section provide important details regarding implementation 
section report case study results structured manner discuss 
section concludes study reporting lessons learned terms methodology case study results 
case study description section presents motivations case study aspects case study design systems study 
motivations object oriented component technology seldom embedded software development aerospace domain 
gmbh european space agency esa wanted determine relative impact languages established java consideration performance maintainability reusability 
addition wanted investigate distribution technologies corba common object request brokers architecture inter process communication ipc sockets 
words decided compare java different distribution contexts distribution multithreaded process running single image distributed heavyweight processes communication sockets ipc libraries distributed heavyweight processes communicating corba orb visibroker orb part jdk java 
key quality aspects selected focus study performance cpu usage memory consumption maintainability reusability 
design case study straightforward inexpensive ways answer questions compare different projects different programming languages distribution technologies 
main problem difficult possible compare systems differ size complexity design strategy programming style usage development cycles system lifetime 
addition java distribution technologies question widely onboard space software difficult find projects place 
strategic importance decisions regarding programming languages distribution technologies esa decided finance study replicate development system times programming languages times distribution contexts 
decided system small representative see section 
ensured implementations high level design order ensure differences low level design due differences programming language distribution technology 
achieved running study follows java systems implemented professional developer course months 
second professional developer developed versions system high level design java systems 
implementations particular language independent ipc corba versions derived multithreaded version additional code manage separate heavyweight processes communication sockets orb 
systems study mentioned important develop systems representative application domain study board space software systems 
typical system consists service library provides certain generic functionalities support flight application programs operate specific onboard hardware configuration 
functionality offered service library includes acquisition sensor values execution commands sent ground control sending actuator commands monitoring sensor values generation housekeeping telemetry generation report telemetry provide simple complete example board system need flight applications basic functionalities 
flight application developed case study thermal control system tcs control regulate onboard temperature 
onboard payloads emit heat absorbed radiator 
tcs controls temperature adjusting amount pumped radiator 
tcs implements functions tcs activation starts processes tcs system switch hardware tcs temperature control executes closed loop control temperature temperature adjustment 
failure detection isolation recovery switch backup pump main pump fails switch payloads 
change requested temperature tcs 
tcs deactivation 
underlying hardware services library fault tolerant computer typical board functionally hardware redundancy mil bus interface 
running real time os unix compatible vxworks 
architecture onboard system depicted 
activation deactivation tc control flight plications flight closed loop control mode change layer dms services library monitoring operating system vxworks hardware housekeeping tm generation report tm generation board system architecture dms services layer operating system device drivers case study development environment windows nt platform 
software simulator developed substitute physical interfaces provide access sensors commands telemetry 
assessment method overview assessment method composed parts analysis structural properties design code static analysis development analysis scenarios saam bck integration 
static analysis structural properties system class coupling affect ease system undertake maintenance activities general modifiability 
perform static analysis source code measure compare structural properties software 
type structural properties measure previous empirical studies particular study looked impact coupling ripple effects performing changes bwl 
described structural measures span coupling complexity size expect may affect cost maintenance 
scenario evaluation software architecture analysis method saam bck knowledge advanced operational method analyzing modifiability software architecture 
method number case studies reported bck 
key idea saam software architecture prove modifiable depends types modification system undergo architecture supports changes 
scenarios means changes captured 
scenarios short descriptions typical usage system 
similar cases described uml uml 
scenarios describe representative set changes functional nonfunctional requirements deemed occur 
set change scenarios identified determined scenario architecture modified support scenario parts system modified added deleted extensive changes 
help identify hot spots architecture instance modules undergo frequent extensive changes 
saam typically applied early stages development architectural level 
study scenario evaluation carried lower level implementation level 
changes system evaluated class level 
possible fully implemented systems available time evaluation carried 
saam uses specific set scenarios analyze specific modifiability system context scenarios 
contrasts general modifiability yielded static code analysis 
see complementary need 
integrating saam structural measurement weakness static analysis structural properties discriminate parts system change stable classes 
results saam analysis provide way weight measurement values static code analysis 
saam analysis indicate classes changed static analysis provide indications modifiability classes 
static measurement performed isolation classes high complexity coupling generally considered difficult maintain reuse 
saam evaluation put context 
class high complexity coupling may cause problems changed reused 
hand class undergo frequent changes moderate coupling complexity result additional maintenance reuse cost 
analysis strategy integrates static analysis saam evaluation systems define change difficulty index cdi scenario incorporates extent changes classes associated coupling complexity size 
comparison cdis class level provide insight relative maintainability reusability systems 
details provided section 
section describe step detail 
implementation strategy section describes detail implemented method described context study aspects generalized situations 
case study results described section order illustrate method steps 
develop scenarios step maintainability example system stakeholders identify set representative change scenarios describe changes functional non functional requirements occur 
similarly reuse scenarios identified trying determine classes class clusters reused flight applications 
quality standards iso clear distinction maintainability reusability iso 
qualities concerned ease system modified suit changed requirements changes environment respectively 
reusability maintainability seen specific forms modifiability assessed 
set scenarios covering aspects modifiability case study 
number scenarios large representative inherently subjective 
scenario defined subjected analysis described 
analyze scenarios scenario goal identify necessary changes system class level estimate cost performing changes extent change class percentage class implementation need modified 
class determine number scenarios affect class 
gives indication class change 
classes designed ease maintenance reuse low coupling complexity size key interest step focusing static analysis 
aspects scenarios analysis see bck provide relevant insight general suitability selected architecture prime focus classes scenario affect 
analyze locality changes 
scenario requires classes changed difficult maintain consistency classes 
addition context space software affected modules updated puts stress restricted bandwidth space communication links 
scenario interactions 
scenarios interact necessitate change class 
interaction similar scenarios fine indicates high functional cohesion classes 
interaction fundamentally different scenarios may problem low functional cohesion separation concerns 
perform structural measurement static analysis performed analyze structural properties classes assess amenable specific classes change 
structural properties class considered indicative cognitive complexity class 
cognitive complexity mean mental burden persons deal class developers inspectors testers maintainers 
assume necessary high cognitive complexity class causes display undesirable external qualities decreased maintainability testability increased fault proneness 
summarizes relationship structural class properties cognitive complexity external quality 
may include analysts developers maintainers marketing management 
structural class properties coupling affect cognitive complexity affect indicate external quality attributes maintainability fault proneness relationships structural class properties cognitive complexity external quality identify internal quality attributes source code impact maintainability reusability system classes 
set understood internal attributes hypothesized impact maintainability reusability summarized table 
internal attribute maintainability reusability coupling modifications difficult perform imported services understood ripple effects changes classes high import coupling affected ripple effects changing classes high export coupling trigger ripple effects leading changes classes complexity changes difficult perform higher cognitive load involved understanding class modified adaptation difficult functionality classes import coupling provided context reuse adaptation difficult higher cognitive load certification reuse difficult size upload changed class expensive certification reuse difficult table internal quality attributes impact maintainability reusability internal quality attributes table selected empirical evidence impact measures attributes external system qualities probability ripple effects bwl major aspect decreased maintainability fault proneness cdk 
words measures attributes consistently shown quality indicators number case studies 
external quality attributes modifiability fault proneness symptoms underlying cognitive complexity classes base choice structural measures results hoping capture relevant structural properties related general modifiability classes 
understanding theoretical properties measures attributes 
helps determine proposed coupling measure instance measuring purports measure 
selected internal quality attributes operational formal definitions exist bmb proposed measures attributes checked 
furthermore internal quality attributes measures identified collected automatically source code applicable java different communication technologies investigated 
measures subsections 
claim set internal quality attributes complete measures chosen internal qualities capture relevant dimensions 
instance cohesion known structural property existing measures cohesion showed inconsistent trends impact external quality attributes fault proneness 
reason certain dimensions coupling take inheritance account regularly observed oo systems considered 
long inconsistent trends understood difficult unsafe draw measurements 
general strategy point methodology try capture dimensions considered shown related quality aspect interest maintainability 
coupling measures coupling measures distinguish direction locus coupling import export coupling various coupling mechanisms method invocation aggregation 
shown widely orthogonal dimensions coupling 
import coupling method invocations 
measures count class number external method invocations number invoked classes 
import coupling aggregation 
measures count class attributes class type 
export coupling measures related fault proneness lesser extent 
measures count class classes frequency class classes may indicative cognitive complexity class class classes constructed simple fashion 
modification class high export coupling critical may require follow modifications potentially impact large parts system 
export coupling measures relevant study 
name description class attribute interaction import coupling 
class measure counts number attributes data members class type class derived class pointer instance array class method interaction import coupling 
class measure counts number parameters methods type class sim statically invoked methods 
class number methods classes invoked methods static invocations considered 
pim invoked methods 
class number methods classes polymorphism dynamic binding invoked methods class attribute interaction export coupling 
class measure counts number attribute classes class type 
class method interaction export coupling 
class measure counts number parameters classes type class statically invoked methods export coupling 
class number method invocations classes method class static invocations considered 
invoked methods export coupling 
polymorphism dynamic binding taken account 
table coupling measures selected complexity measures complexity measures study focus relationships elements class methods attributes 
empirical studies shown amount method invocations class impact fault proneness class 
likewise accesses attributes methods class introduce state dependencies methods causes class difficult modify 
measures relationships methods attributes class complemented traditional complexity measures structural programming 
measures shown indicators cognitive complexity object oriented programming eva 
measures cyclomatic complexity algorithms class methods instance wmc weighted method complexity ck 
wmc weighted method complexity mccabe cyclomatic complexity measure summed methods class 
intra class method invocations direct 
number invocations methods class id intra class method invocations indirect number direct indirect method invocations class intra class attribute 
number attributes class methods class size measures table complexity measures selected size class known increase cognitive load person develop modify class instance causes larger classes fault prone 
measure size classes terms number methods number attributes number executable declaration statements class 
measures equally applicable java comparable java syntax language definition similar statements java comparable levels abstraction libraries jdk java tools threads visibroker offer services levels abstraction 
loc non blank non comment source lines code number methods implemented class excludes inherited methods includes redefined overriding methods number attributes non inherited ones data collection table size measures selected static source code analyzer generated sema group fast parser technology sem collect code measures 
analyzer designed developed fraunhofer germany ease implementation new measures maximum extent possible independent specific programming language study 
integration scenario analysis structural measurement final step combine results scenario evaluation results static source code analysis 
system scenario define change difficulty index cdi accounts estimated extent changes coupling complexity size measures classes affected change 
calculate change difficulty indices perform principal component analysis pca dun measures identify minimal non redundant subset selected measures captures variability dataset 
goal ensure account times structural property analysis 
result pca obtain number orthogonal structural dimensions domains characterized subset measures 
pick measure dimension account general modifiability classes 
details provided presenting case study 
scenario weight selected measure class extent change undergoes take sum weighted measure values classes system 
change difficulty index scenario selected measure form cdi cn classes system cj extent change class cj scenario cj value structural class property measured obtained class cj 
definition cdi idea undesirable structural class properties high coupling complexity size resulting high cj value acceptable class undergo modifications low cj value 
similarly extensive changes class acceptable class designed low coupling complexity size low cj value 
extensive changes high coupling complexity size coincide penalized causes high cdi values 
result system distribution change difficulty indices domain measurement scenario 
distributions basis comparing systems capture expected change scenarios extent complexity performing changes 
case study opportunity provide details analysis procedure 
case study results set change scenarios identified group stakeholders developers project managers esa gmbh capture representative changes new functional requirements system specifications consideration 
scenario system developers determined systems modified support change 
affected class extent change class estimated 
change scenarios identified briefly described section scenarios analysis results summarized section 
note selected scenarios capture aspects maintenance functional requirements enhancements reuse software different contexts 
selected scenarios briefly change scenarios obtained saam process 
context case study study participants felt changes representative expected foreseeable 
fulfilled requirements perform statistical analysis required procedure 
scenario evaluation carried fine grained description scenarios give reader rough idea nature detailed understanding require depth knowledge system 
support new functional forms calibration functions 
calibration functions map raw measurement value obtained sensor meaningful scale 
better fault detection isolation recovery capabilities complicated preconditions start need specified 
change board hardware configuration add remove piece hardware tcs 
system taken reconfiguration 
adding flight application program performs completely new operations existing unchanged hardware system running 
adding new modify calibration constant system running 
system run different operating system 
assumptions availability java virtual machine third party class libraries new platform 
simulated hw interface connect real subsystem mil std protocol change configuration data tables 
connection real subsystem mil std protocol changes configuration data tables 
application service layer space system implies destinations telemetry data sources control data 
adding redundancy support service layer ensure continuous system operation 
analysis scenarios list system classes affected scenario give description change estimate extensive change extent change expressed percentage class implementation needs modified 
practice actual percentage estimated reliable efficient manner distinguish levels change extent 
table list classes affected scenarios 
columns lan dist class name indicate language java changes affect languages equally distribution technology ipc corba threaded ipc corba versions changed classes names 
lan 
dist class name corba corba idl new class java new class ool config java ool config ool config ool config ool config ool config ool config ool service ool service java ool service ool service java ool service ool service java ool service ool service java ool service ool service java ool service ool service java ool service ool service ool service ool service java ool service ool service ool service api ool service api java ool service api java ool service api code ool service api ool service api java ool service api corba ool service corba java corba ool service corba corba ool service corba corba ool service corba ipc ool service ipc ipc ool service ipc ipc ool service ipc java ipc ool service ipc ipc ool service ipc java ipc ool service ipc ipc ool service ipc java ipc ool service ipc ipc ool service ipc java ipc ool service ipc ool service utils ool service utils java ool service utils ool service utils ool service utils timer ool tcs ool tcs ool tcs table interactions scenarios classes class indicate scenarios affected estimated extent modification scenario columns 
number qualitative observations drawn table comparing java systems 
scenarios reveal differences java systems 
scenarios evaluation corresponding java implementations identical 
due fact system structure distribution functionality identical corresponding java implementations 
versions require similar changes accommodate scenario 
scenarios availability specific language features java runtime classes write plus standardized libraries jdk result different technical solutions terms modifiability favoring java implementations 
comparing distribution communication technologies 
selected set scenarios ipc corba implementations show advantages threaded implementations 
scenarios impose additional maintenance effort classes service corba service ipc 
scenarios evaluation ipc corba implementations identical respective threaded implementation 
result largely due narrow focus investigated systems small conveniently run single machine 
advantages distributed solutions evident dealing larger flight application systems 
mentioned saam evaluation typically includes additional analyses scenario interaction class affected different scenarios scenario spread scenario affects classes 
scenario interaction 
classes affected scenarios 
classes affected scenarios classes affected scenarios class implementation affected scenarios 
presence scenario interaction may indicate problem scenarios inherently different hints low functional cohesion class may overloaded distinct functionalities 
scenarios incompatible implementing changes different scenarios may difficult lead unforeseen side effects 
architecture evaluation extreme scenario interactions discovered design alternatives considered alleviate potentially harmful effects 
scenario spread 
impact scenarios spread classes classes usually restricted subsystems 
indicates important design decisions encapsulated small part system 
scenarios display large spread affecting classes 
static measurement results static analysis source code system version performed measure structural properties measures introduced section 
measurement results considered intermediate step providing necessary input calculation change difficulty indices 
appendix summarizes descriptive including mean minimum maximum values standard deviation measures considered 
java versions class corresponding versions 
expected high level design direct mapping classes corresponding java systems 
differences measurement values corresponding java systems 
terms loc java systems smaller systems java systems attribute aggregation coupling 
differences size due header files contain class definitions source redundancy 
memory management explicitly dealt developers java taken care automatic garbage collection mechanism 
respect measures differences 
reflects corresponding implementations close identical system structure communication paths 
comparing versions language different distribution communication technologies threaded implementations lower coupling complexity size corba implementations turn lower coupling complexity size ipc implementations 
threaded implementations show advantage terms general modifiability 
change difficulty indices final step combine results scenario static source code analyses 
system scenario define change difficulty indices cdis incorporate estimated extent changes coupling complexity size measures classes affected change 
section illustrate detail cdis computed 
principal component analysis group variables data set coupling complexity size measures collected systems strongly correlated variables essentially measure underlying dimension property class measured 
necessary identify eliminate redundancy single dimension inadvertently receives higher weight subsequent analyses 
principal component analysis pca standard technique identify underlying orthogonal dimensions explain relations variables data set dun 
principal components pcs linear combinations standardized variables 
sum squares coefficients standardized variables linear combination equal 
pcs calculated follows 
pc linear combination standardized variables explains maximum amount variance data set 
second subsequent pcs linear combinations standardized variables new pc orthogonal previously calculated pcs captures maximum remaining variance conditions 
usually subset variables large coefficients contributes significantly variance pc 
variables high coefficients help identify dimension pc capturing usually requires degree interpretation 
dimensions pcs capturing referred domains data set 
systems merged data set pca performed 
performed pca individual system separately systems java systems verify distribution communication technology programming language impact dimensions spanned selected structural measures 
case arrived interpretations pcs obtained complete data set 
dimensions spanned measures influenced distribution communication technology programming language 
conclude pcs observed meaningful systems study 
pca identified orthogonal dimensions capture variance data set 
rotated components table 
princ 
comp 
pc pc pc pc eigenvalue percent pim wmc sim loc table rotated components coefficients rotated components table dimensions interpreted follows pc loc wmc 
size measures loc number implemented methods complexity measures counting intra class method invocations 
interpret pc measure size complexity functionality provided class 
brevity refer pc method size class 
pc export coupling measures 
apparently mechanisms classes export occur concurrently system differentiated 
interpret pc measure export coupling 
pc number attributes number aggregations associations class number accesses class attributes 
interpret pc size complexity data abstraction underlying class 
brevity refer pc attribute size class 
pc sim pim measures count import coupling static polymorphic method invocations interpretation pc 
calculate change difficulty indices selected measure principal component measure representative domain dimension 
measures high coefficients pc select measure captures interpretation pc straightforward simple manner considered accurate indicator modifiability pc method size class loc pc export coupling pc attribute size class na pc import coupling method invocations sim 
calculation change difficulty indices change difficulty index cdi class scenario domain measure defined cdi estimated extent change class scenario value measure selected represent domain class table shows weights formula level estimated extent change 
levels change subdivide scale intervals 
assume level required extent change class distributed equally interval spanned level percentage equally probable occur 
select mid points interval weights formula 
general simulation perform sensitivity analysis see weights affect final outcome modifiability analysis 
level interval weight table change weights cdi system scenario domain measure defined sum cdis classes 
appendix shows system level cdis obtained system scenario domain measures 
relationship structural properties scenario evaluation important question regarding analysis methodology measurement scenario analyses produce distinguishable results 
nature analyses inherently different produce similar results classes undesirable structural properties affected changes 
case combination analyses propose unnecessary complication 
subsection perform simple investigation relationship structural class properties amount change estimated class scenario evaluation 
amount change class characterized investigated measures empirically validated shown relate relevant external quality attributes context information drive selection 
number scenarios affect class 
take extent change account 
number scenarios affect class weighted extent change weights table amounts calculating cdis structural measure set 
addition extent change assign priorities scenarios likelihood occurrence 
small scope systems prioritization possible confined options treating scenario equally possible 
spearman rho assess correlation size coupling complexity measure extent change 
skewed distributions measures nonparametric statistic preferred parametric sensitive outlying observations 
table shows rho coefficient values 
columns weighted sum contain results scenarios weighted extent change columns scenarios show results just count scenarios affecting classes regardless extent change 
correlations highlighted values 
weighted sum scenarios measure spearman rho value spearman rho value pim wmc sim loc table correlations structural measures extent change exception export coupling measures measures show weak significant relationship amount scenario changes 
largest impact observed size loc method invocation import coupling order 
structural properties class appear influence likelihood modified 
larger class functionality allocated affected change 
stronger coupling interacts rest system may need changed interaction patterns communication protocols changed 
provides additional evidence worthwhile consider structural properties making design decisions 
correlation coefficients measure individually explains variation extent change clear scenario measurement evaluation redundant functionality interaction patterns equally modified 
confirms analyses complementary furthermore necessary comprehensive investigation system modifiability 
decision scenarios weighted extent change class impact results table 
shown note results obtained parametric correlation coefficient pearson yield comparison change difficulty indices comparison cdis done parts compare differences modifiability due programming languages 
ii compare differences modifiability due distribution communication technology 
comparing programming languages determine differences modifiability due programming language compare cdis corresponding threaded ipc corba versions java threaded threaded java ipc ipc java corba corba 
system pair wilcoxon tests cap applied compare cdis respect domain measures 
purpose test assess statistical significance observed differences cdi systems 
testing null hypothesis distributions cdis systems 
hypothesis cdis different distributions assumptions system higher cdis perform tailed test 
wilcoxon test assesses statistical significance differences cdis observed systems 
order quantitatively assess magnitude difference calculate system pair difference systems mean cdis normalized standard deviation cdis 
normalization required eliminate effects different measurement units various size coupling measures cdis allow systematic comparison system pairs 
normalized difference expressed equation mean standard deviation cdis domain measure system mean standard deviation cdi domain measure system 
results summarized table 
column indicates system pairs compared 
system denoted letter acronym letter indicating language java second letter indicating version threaded ipc corba 
system pair domain measure report statistics wilcoxon test normalized difference mean column stat 
value standardized sum positive ranks value probability different chance 
columns dom dom provide values domain measure 
rows indicate normalized difference mean system pairs 
note values set boldface 
negative values system mentioned column system pair lower cdis java implementations 
positive values system mentioned second implementation 
system pair stat dom loc dom dom na dom sim jt ct ji ci jc cc table comparing cdis java implementations table see domain measures capturing method attribute size classes java versions significantly lower cdis threaded versions attribute size domain measures cdis significantly different 
factors play descriptive statistics measures showed systems clearly larger lead higher cdis size measures 
hand differences structural properties small little impact cdis 
second factor identical scenario evaluation java systems 
versions consistently higher cdis scenarios scenarios differing evaluations java sufficient cause significant difference structural properties classes comparable languages 
statistically significant difference scenarios may practical significance especially differences cdis scenarios huge cdis scenarios higher factors affected scenarios occur 
normalized differences mean cdis standard deviations dom dom case advantage java systems 
reflects smaller java implementations differing evaluations scenarios 
differences standard deviation may small practical significance 
comparing distribution communication technologies compare differences modifiability due distribution communication technology perform pairwise comparison java implementations pairwise comparison systems 
table shows results comparison java implementations format previous section 
system pair stat dom loc dom dom na dom sim jt ji jt jc ji jc table comparing cdis java implementations method size export coupling results indicate lower cdis threaded implementation difference corba ipc implementations 
method invocations order threaded ipc corba 
attribute size threaded corba ipc 
summarize cases threaded version lower cdis corba ipc 
consistent trend comparing ipc corba 
consistent results static analysis scenario evaluation 
way corba ipc versions implemented selected set change scenarios corba ipc versions require number scenarios additional modifications subsystems service corba service ipc 
lower cdis threaded 
normalized differences standard deviations indicate better modifiability threaded implementation consistent trend comparing ipc corba 
domain measure export coupling observe difference practical importance percent standard deviation 
remaining domain measures normalized differences lower probably practically significant 
system pair stat dom loc dom dom na dom sim ct ci ct cc ci cc table comparing cdis implementations implementations results identical java systems 
cases threaded implementation significantly lower cdis compared implementations significant difference corba ipc implementations 
indicates differences modifiability due distribution communication technology independent chosen programming language 
normalized differences means low standard deviation 
observed higher values consistent trends comparing languages 
indicates impact programming language pervasive 
java classes constantly smaller affects cdi classes scenarios 
impact distribution technologies visible half scenarios affects cdi selected classes 
draw types study 
general level provides methodology product technology evaluation uses static measurement scenario evaluation 
key concepts change difficulty index cdi allows meaningful quantifiable comparisons products 
shown useful feedback received practitioners gmbh positive results obtained comparison cdis large confirmed stronger beliefs java systems maintainable implementations effort distributed implementations complex 
expectation higher complexity distributed implementations offset allowing modifications scenarios implemented easily confirmed case study provided new important insights developers 
draw number regarding distribution technologies programming languages evaluated 
distribution technologies corba ipc subsystem communication additional overhead compared implementation requiring additional implementation code additional maintenance 
considering change scenarios difference cdis compared non distributed implementations low typically 
assume differences cdis proportional cost translate higher maintenance costs distributed implementations 
course non linear relationships cdis maintenance costs possible expounded 
distribution required single image implementation obviously feasible 
case results show clear difference modifiability corba ipc implementations 
independent java implementation language 
furthermore put aside additional complexity distributed implementation showed advantages scenarios replacement components run time principle better supported non distributed implementation especially languages java support run time class replacement 
summarize discussion choice distributed implementation advantages carefully needs balanced additional cost entails 
methodology provided results help quantify tradeoff 
turning comparison programming languages differences structural properties coupling java implementations small tangible impact modifiability systems 
functional enhancements considered scenario evaluation revealed differences java implementations 
java implementations consistently smaller implementations 
analysis determined difference due header files carry part redundant information language features automatic memory management java 
result systems show mean cdis higher corresponding java implementations higher maintenance cost assume proportional relationship cdis maintenance costs 
scenario evaluation showed porting system different platform substantially expensive 
factors play standardized language definition java complete library jdk classes obviating need cots libraries compared various dialects complete set standard libraries classes 
scenario porting different os assumption commercial libraries available new platform 
assumption may reality fulfilled 
virtual machine concept java realizes write run feature gives java implementation edge implementations change scenarios 
hand statement assume availability java vm new platform may case 
likewise scenario showed run time ap easily implemented java somewhat portable corba solution feasible requires substantial rework system 
note addition factors covered static measurement changes java systems easier faster compilation time shorter java full java system recompile approx 
sec approx 
min 
general important note results scenarios static measurement provide incomplete answer questions 
important think limitations measurement scenarios complete studies qualitative considerations 
result single case study relatively small systems implemented simulator environment findings concerning distribution technologies programming languages purport general validity 
need re evaluated instances techniques considered 
study showed measurement analysis methodology produce interpretable traceable results regarding product technology evaluation context application 
limitation methodology applicable systems implemented architectural description exists structural properties measured uml diagrams class object sequence diagrams 
comparison design alternatives alternatives described comparable levels detail 
general limitation method differences cdis helpful indirect measure really want know productivity change 
historical change data collected organization relationship differences cdis differences change effort established 
addition despite limitation small difference cdi result huge difference effort 
similarly huge differences result negligible differences effort 
plausible assumptions need investigated believe cdis useful decision making instrument context methodology provide 
study funded european space agency context object oriented languages project contract nl pa uwe brauer martin frank pla meier gmbh initiating conducting project 
want sema group providing fast parser technology 
lionel briand partly supported national science engineering research council canada nserc 
appendices appendix results static measurement appendix shows descriptive statistics measures systems 
implementation provide sum mean standard deviation maximum th percentile median th percentile minimum measures considered 
msr sum mean stddev max med min sim pim wmc loc table corba version classes msr sum mean stddev max med min sim pim wmc loc table ipc version classes msr sum mean stddev max med min sim pim wmc loc table threaded version classes msr sum mean stddev max med min sim pim wmc loc table java corba version classes msr sum mean stddev max med min sim pim wmc loc table java ipc version classes msr sum mean stddev max med min sim pim wmc loc table java threaded version classes appendix change difficulty indices domain measures tables show system level cdis obtained systems rows scenarios columns 
domain measure method size domain measure export coupling scenario java java ipc java ipc threaded corba threaded corba table system level cdis method size scenario java java ipc java ipc threaded corba threaded corba table system level cdis export coupling domain measure attribute size domain measure method invocation scenario java java ipc java ipc threaded corba threaded corba table system level cdis attribute size scenario java java ipc java ipc threaded corba threaded corba table system level cdis method invocations bck bass clements kazman software architecture practice addison wesley 
briand daly porter st comprehensive empirical validation product measures object oriented systems journal systems software 
bmb briand basili property software engineering measurement ieee transactions software engineering briand st investigating quality factors object oriented designs industrial case study proceedings st international conference software engineering los angeles ca may 
bwl briand st coupling measurement impact analysis object oriented systems proceedings th international conference software maintenance oxford uk 
cap capon elementary statistics social sciences wadsworth publishing belmont ca 
cdk chidamber kemerer managerial metrics object oriented software exploratory analysis ieee transactions software engineering ck chidamber kemerer metrics suite object oriented design ieee transactions software engineering 
dun 
principal component analysis sage university oaks ca 
eva poisson analyses defects small software components journal systems science july 
ieee ieee ieee standard glossary software engineering terminology ieee std 

iso iso iec draft technical report information technology software quality characteristics metrics part external metrics 
jacobson jonsson object oriented software engineering case driven approach acm press addison wesley reading ma 
mk munson software metrics reliability assessment lyu ed software reliability engineering mcgraw hill 
system calculating software metrics source code internal fraunhofer report 
sem sema group fast audit programmer manual 
uml unified modeling language version www omg org uml 
