holcf higher order logic computable functions franz informatik tu muenchen de technische universitat munchen 
presents survey holcf higher order logic computable functions 
logic holcf variant known higher order logic hol offers additional concept type classes 
holcf extends concepts domain theory complete partial orders continuous functions fixed point operator 
help type classes extension formulated way logic lcf constitutes proper sublanguage holcf 
techniques higher order logic lcf combined fruitful manner avoiding drawbacks logics 
development holcf entirely conducted isabelle system 
presents survey holcf higher order logic computable functions 
logic holcf variant known higher order logic hol gm offers additional concept type classes 
holcf extends concepts domain theory complete partial orders continuous functions fixed point operator 
help type classes extension formulated way logic lcf gmw pau constitutes proper sublanguage holcf 
techniques higher order logic lcf combined fruitful manner avoiding drawbacks logics 
logic implemented logical framework isabelle pau development holcf conducted isabelle system 
syntax semantics proof rules development holcf described full detail thesis reg 
parallel development holcf sten developed hol cpo age system basis gordon hol system 
aim theses combination hol lcf techniques approaches differ aspects 
availability type classes significant impact development holcf 
problems sten deal avoided see discussion theory cfun page 
hand new mechanisms conservative safe theory extensions respect type classes established 
organized follows 
section give brief survey higher order logic type classes 
main focus survey differences gordon hol gm implemented isabelle system pau 
section addresses central issue development logic holcf 
section draws survey topics formalized holcf due space limitation 
discussion current 
higher order logic type classes logic variant gordon hol gm 
formalized isabelle system pau logical framework generic tactical theorem prover 
isabelle terms called object logic formalized isabelle meta logic intuitionistic higher order logic 
meta logic formal language logical framework isabelle pau 
isabelle logic just called hol name avoid confusion gordon hol 
minor syntactic differences main difference gordon hol isabelle availability type classes 
concept type classes specific object logic derived isabelle meta logic 
type classes introduced isabelle nipkow nip np purely syntactic device 
admit fine grained polymorphism description object logics 
type classes available meta logic object logics 
sensible semantics object logic gives meaning concept polymorphism type classes 
type classes 
question answered best examples 
basis examples knowledge polymorphism gordon hol hindley milner polymorphism assumed 
detailed description polymorphism hol especially semantics gm 
gordon hol types interpreted inhabitants universe sets exhibits certain closure properties sufficient interpretation types type constructors 
polymorphic constants identity function ff ff bool hilbert choice function ff bool ff interpreted families interpretations generalized cartesian products indexed sets universe 
syntax hol provides type variables usually denoted small greek letters type ff ff bool polymorphic equality 
type terms interpreted environment maps type variable member mentioned universe types 
interpretation types slightly involved 
may different kinds types classes types respectively order isabelle terminologies 
semantics type class associated private universe type interpretations 
important type class class term semantics directly corresponds hol universe sets 
type class term mandatory theories may depend additional type classes 
issue additional type classes discussed 
moment assume just class term 
semantics theory respects restriction corresponds semantics gordon hol 
examples demonstrate type classes 
suppose want formalize partially ordered sets po address ordering relation ordered sets polymorphic constant ff ff bool lcf 
attempt formalization power type classes syntax explained hol default term consts ff ff bool rules refl gamma 
trans gamma 
example shows typical theory extension isabelle 
new theory called 
extends theory hol new polymorphic constant type ff ff bool 
properties new constant specified known axioms refl trans 
phrase default term tells isabelle type inference mechanism type variable occurs explicit qualification type class treated type variable class term 
example default mechanism simply write ff ff bool verbose phrase ff term ff bool 
axioms example necessary mention types type inference mechanism deduce needed information 
technique type inference type class polymorphism addressed full detail np 
theory problematic reasons 
theory constitutes extension safe sense hol 
axioms specify notion partial order definitions prefered hol definitions preserve models consistency 
second problem formalization strong 
means see page explanation safe extension 
type class term equipped ordering relation bool 
argue trivial partial ordering type identity relation 
crude patch ruled immediately add additional constant ff fourth axiom minimal help type classes find elegant way second problem little effort way safe solves problem conservativity 
discussion solutions problem stay framework gordon hol thesis age 
reformulate attempt way second hol default term classes po term consts ff po ff bool rules refl gamma 
trans gamma 
phrase classes po term declares new class identifier po 
convention theory mentions class identifier context classes po term interpreted definition class left hand side symbol 
properties new type class entirely specified body class definition 
phrase po term means po supposed subclass term 
order explain semantics subclass relation look constants axioms specified sections consts rules respectively 
constants section consts class definition called characteristic constants new class 
axioms section rules called characteristic axioms new class 
semantics class po follows 
consists universe mathematical structures algebras structures obtained construction 
take structure universe superclass 
example superclass term structures universe term solely consist carrier set 
add interpretation characteristic constant characteristic axioms constant axioms partial ordering fulfilled 
summary interpretation class po implies exactly occurrence class identifier 
class term exception rule 
universe partial orderings obtained carrier universe superclass term adding arbitrary ordering function 
general semantics class universe structures obtained structures adding interpretations characteristic constants characteristic axioms fulfilled 
way structure universe carries particular interpretations characteristic constants class superclasses 
sufficient characteristic constants axioms class polymorphic exactly type variable class 
usual polymorphic constants interpreted generalized cartesian products time products indexed entire structures universe type class 
way easy select right instance polymorphic constant construction carried part indexing structure 
see reg formal treatment 
come back problem conservativity theory extension 
hol extension theory called conservative save definitional arbitrary model theory extended strongly persistent gm way model extended theory 
safe extensions preserve consistency 
example extended theory hol new class po description characteristic constants axioms 
thing go wrong new universe class po empty 
means way extend structure universe term interpretation fulfills characteristic axioms 
order prevent failure simply show advance extension 
example easy find witness 
type witness take bool ordering function take identity bool bool bool 
prove theorems theory hol bool bool bool bool bool bool gamma 
bool bool bool gamma 
course trivial task shows structure universe class po interpretation type bool identity function type bool ordering function 
carrier plus ordering function 
higher order logic functions bool model binary relations 
precisely constants axioms occur class definition 
restriction leads strictly weaker notion class polymorphism known functional programming languages haskell gofer 
restriction simplifies semantics class polymorphism interpretation instance characteristic constant non polymorphic 
supposed element appropriate carrier set universe class term 
ready give final version theory example extension new class 
follows hol default term classes po term arities bool po consts ff po ff bool rules refl gamma 
trans gamma 
inst bool po bool bool bool bool bool bool difference version second final mentioned witness type bool 
section arities specified type bool type class po axiom inst bool po describes instance characteristic constant witness type bool 
new arity instance definition validated theorems proved guarantee theory extension safe 
formal treatment reg 
examples saw introduce new type class conservative way 
suppose want formalize 
type oe class term type class po type functions oe partially ordered pointwise extension ordering time theory extension safe 
define pointwise ordering function space fun consts fun ff term fi po ff fi bool rules fun def fun 
theory fun just introduced new constant fun 
axiom fun def definition theory extension fun obviously conservative 
theory fun example extension new constant corresponds notion gordon hol 
constants introduced way different characteristic constants classes 
restricted degree polymorphism 
characteristic constants introduced class definition 
example fun 
full development holcf theory fun additional theories pcpo 
see 
definition new constant characteristic constants defined class example 
prove theorems theory fun fun fun fun gamma 
fun fun gamma 
fun theorems show function fun behaves partial ordering 
allowed formalize theory extension called extension new arity 
fun fun arities term po po rules inst fun po ff term fi po ff fi bool fun phrase term po term tells isabelle type inference mechanism type oe class term type class po function space oe type class po 
axiom inst fun po fixes instance characteristic constant type oe due theorems proved advance extension safe 
concludes short survey logic 
extension new class theory extension new arity theory fun extension new constant theory fun extension new type class term 
extension mechanism corresponds directly extension type definition gordon hol discussed 
see example extension mechanism section 
development holcf section parts development holcf higher order logic type classes briefly described previous section 
shows part hierarchy theories constitutes logic holcf 
theory known section 
theory type class po partial orders introduced 
notions upper bounds upper bounds chains introduced 
theory pcpo class pcpo pointed complete partial orders introduced subclass po 
characteristic constant class symbol element 
main parts theories fun fun section 
theory fun contains just arity instance declarations function type constructor respect type class pcpo 
theory cont notions monotone continuous functions defined predicates full function space ff fi pcpo ff fi 
ccc pcpo fun cont cfun fix lift fig 

holcf theories continuous functions play central role logic lcf theories cfun gamma introduce special type constructor continuous functions 
order avoid confusion elements type ff fi called operations 
type ff fi introduced type definition fixes interpretation ff fi isomorphic subset continuous functions type ff fi 
discuss 
theories gamma gamma gamma lift gamma conservatively introduce types strict products cartesian products strict sums lifting type types class pcpo 
extensions safe steps needed type construction 
step type construction defined extension new type class term 
step ordering function defined proved function behaves partial ordering 
step shows element type consideration exist upper bounds chains 
validates step specifies type construction yields types class pcpo provided argument types type construction class pcpo 
theory fix contains fixed point theory lcf 
central theory definitions fixed point operator definition admissibility 
kleene fixed point theorem scott induction various propagations admissibility proved 
theory ccc union theories enumerated defines addition identity operation composition operations 
name theory stems fact class pcpo operations arrows forms category 
addition category shown cartesian closed cartesian product categorical product type operations exponential 
concentrate theories pcpo cont cfun gamma fix 
theory theory notions upper bounds upper bounds lub chains introduced 
due type class po polymorphism various constants restricted class partially ordered types 
leads natural formalization concepts 
note characteristic constant class po axioms 
default class term 
type variable ff explicitly qualified class po 
qualification type term sufficient 
note difference infix predicate function lub 
relation means upper bound set function yields upper bound provided exists 
type constructor set polymorphic powerset constructor 
applied type constructs powerset isomorphic type bool 
consts ff set ff po bool infixl ff set ff po bool infixl lub ff set ff po chain nat ff po bool rules ub gamma 
lub 
gamma 
lub lub chain chain suc convenient notions talk upper bounds 
technical reasons chain formalized function enumerates chain range enumeration 
theory pcpo theory introduce new type class pcpo pointed complete partial orders subclass po 
intention pcpo inhabited types suitable arrows 
partially ordered addition element complete respect chains 
kind types needed formalize logic lcf 
pcpo classes pcpo po arities void pcpo consts ff pcpo rules minimal cpo chain gamma 

range ff pcpo inst void pcpo void void witness non emptiness new class trivial type void solely consists element void 
clearly type partially ordered identity relation void element 
provide formalization type instance class po trivial 
note due explicit qualification ff pcpo chain completeness required types class pcpo 
qualification type inference mechanism computed ff po strong 
function range function yields range argument function 
get range chain theory cont skip theories fun fun fun 
theories shown full function space ff fi types ff term fi pcpo partially ordered pointwise ordering pcpo structure 
immediately skip theory cont introduces notions monotone continuous functions 
cont fun default pcpo consts ff po fi po bool ff fi bool ff fi bool rules gamma 

chain gamma 
lub range lub range 
chain gamma 
range lub range note changed default class pcpo 
need explicit qualification po type predicate monotone 
axioms theory directly correspond text book 
due type classes allows hide lot details scenes 
higher order logic type classes axioms cluttered premises ordering relation needs passed explicit argument predicates 
see age details 
definition third axiom surprising 
proved proved theory holds 
theories cfun cfun theory cfun central development holcf 
expressive power higher order logic type classes apparent places 
theory cfun introduce type operations semantics isomorphic subset continuous functions 
theory follows cfun cont types infixr arities pcpo pcpo term consts cfun ff fi set ff fi ff fi fabs ff fi ff fi binder cfun ff fi ff fi bool rules cfun def cfun ff 
rep cfun cfun rep cfun inverse fabs abs cfun inverse cfun gamma 
fabs cfun def cfun theory cfun example conservative extension new type 
constructor introduced infix type constructor 
axioms rep cfun rep cfun inverse abs cfun inverse state type ff fi text book probably find lub range lub range 
isomorphic set cfun set continuous functions type ff fi 
course shown advance subset empty 
interesting thing theory new constructor restricted argument types class pcpo 
restriction vital pcpo structure subset continuous functions meaning 
due type classes new constructor total argument classes 
situation arises formalization strict products strict sums theories gamma gamma 
technique similar languages subtypes 
suitable subtypes model partial functions 
higher order logic type classes way introduce type constructor continuous functions strict products strict sums partial 
see age detailed discussion problem 
mysterious phrases binder introduce mixfix syntax new type 
writing readable application fabs abstraction operation user simply writes 
syntactic sugaring yields smooth embedding lcf terms 
term part lcf sublanguage just built variables continuous constants abstractions applications 
result type definition fi reduction operations subject restriction concerns continuity abstraction 
shown theorem fi reduction operations holds gamma 
means order fi reduction continuity body proved 
fortunately continuity proof done automatically body term lcf sublanguage 
axiom cfun def defines ordering relation operations 
course ordering inherited full function space 
theories cfun cfun shown ordering defined really yields pcpo structure validate instances inst cfun po ff fi ff fi bool cfun inst cfun pcpo ff fi 
arity definitions arities pcpo pcpo po arities pcpo pcpo pcpo new isabelle version provides subtype package style gordon hol produces axiomatization scenes 
package checks user supplied theorem non emptiness representing set 
theory fix theory introduces fixed point theory lcf 
main parts shown 
iterator iterate iterates operation times starting value defined primitive recursion 
parameter third argument primitive recursion really needed definition iterator 
supply order confirm type primitive recursion nat rec 
fix cfun consts iterate nat ff ff ff ff ff ff ff fix ff ff ff adm ff bool bool rules iterate def iterate nat rec def lub range iterate fix def fix adm def adm 
chain gamma 
gamma 
lub range function type ff ff ff just introduced intermediate constant ease technical treatment 
interesting constant fixed point operator fix type ff ff ff operation 
definition adm def notion admissibility defined 
main theorems theory fix fixed point properties fix eq fix fix fix gamma 
fix fix def fix lub range iterate known lcf 
note notation corresponds lcf 
clearly third theorem expressive power lcf 
kleene constructive characterization fixed point continuous function 
theorem functions may defined application context 
extensionality functions guarantees conservativity definitions 
order derive theorems continuity function proved 
proof follows argumentation literature lcf 
see win gun different approaches 
prominent theorems domain theory principle computational induction 
fix ind adm 

gamma 
gamma 
fix comp ind adm 
iterate gamma 
fix immediately follow definition admissibility 
addition various propagations admissibility derived 
listed adm gamma 
adm adm subst adm gamma 
adm adm conj adm adm gamma 
adm adm disj adm adm gamma 
adm lcf theorems hard wired syntactic tests system expressed inside logic 
see pau discussion drawbacks lack expressive power 
holcf flexible admissibility predicate derived special argumentation predicate directly fit syntactic schemes ones listed 
due fact admissibility definable holcf 
section central ideas higher order logic type classes 
particular mechanisms theory extensions respect type classes conservativity illustrated simple examples 
section main steps development holcf higher order version lcf described 
theories theorems 
summing took steps conservative theory extensions theorems formalize derive logical concepts constitute lcf 
full formalization syntax semantics proof rules detailed description development holcf applications thesis reg 
due type classes isabelle advanced syntactic capabilities resulting formalization lcf smoothly integrated 
higher order logic logic computable functions freely mixed yields higher order version lcf holcf 
advantage combination briefly discussed presentation fixed point theory 
concept admissibility formalized inside logic remedies drawbacks lcf 
advantages combination discussed due lack space 
reg recursive data types strict lists streams formalized holcf 
types strict constructors strict lists structural induction principles derived restricted admissibility considerations 
lcf strict types chain finite argument types admissibility proviso eliminated pau 
addition tree types induction principle pit derived holcf 
usually interesting types infinite elements streams 
currently holcf tuned kernel language specification language distributed systems style bdd 
type definition package style lcf produces exclusively conservative axiomatizations preparation 
acknowledgment am grateful constructive suggestions received referees 
tobias nipkow advice discussions holcf 
age sten 
hol basis reasoning functional programs 
phd thesis university aarhus brics departement computer science 
brics report series rs 
bdd manfred broy frank claus max fuchs thomas rainer weber 
design distributed systems focus 
technical report tum institut fur informatik technische universitat munchen 
ehrich gogolla 

teubner 
gm gordon melham 
hol theorem proving environment higher order logic 
cambridge university press 
gmw gordon milner wadsworth 
edinburgh lcf mechanised logic computation volume lncs 
springer 
gun carl gunter 
semantics programming languages structures techniques 
mit press 
nip tobias nipkow 
order sorted polymorphism isabelle 
huet plotkin jones editors proc 
nd workshop logical frameworks pages 
np tobias nipkow christian prehofer 
type checking type classes 
proc 
th acm symp 
principles programming languages pages 
pau paulson 
deriving structural induction lcf volume lncs pages 
springer 
pau paulson 
logic computation interactive proof cambridge lcf volume cambridge tracts theoretical computer science 
cambridge university press 
pau paulson 
foundation generic theorem prover 
journal automated reasoning 
pau paulson 
isabelle generic theorem prover volume lncs 
springer 
pit andrew pitts 
induction principle recursively defined domains 
technical report university cambridge computer laboratory 
reg franz 
holcf eine erweiterung von hol um lcf 
dissertation technische universitat munchen 
win winskel 
formal semantics programming languages 
mit press 
article processed macro package llncs style 
