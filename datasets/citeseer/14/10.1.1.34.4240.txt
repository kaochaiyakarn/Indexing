fully complete models ml polymorphic types samson abramsky marina laboratory foundations computer science university edinburgh scotland 
october axiomatic characterization models fully complete ml polymorphic types system axiomatization hyperdoctrine models arise adjoint models kleisli categories suitable linear categories 
examples adjoint models obtained categories partial equivalence relations linear combinatory algebras 
show special linear combinatory algebra partial involutions induces hyperdoctrine satisfies axiomatization provides fully complete model ml types 
address problem full completeness system categorical model type theory logic said fully complete aj types formulae morphisms interpretation interpretation denotations proof term notion full completeness counterpart notion full abstraction sense term language executable fully complete model possible quotient fully 
full completeness ask question theory induced model coincides precisely syntactical theory equations satisfied model called faithful realizes exactly syntactical theory 
importance fully faithfully complete fully denotational models characterize space proofs programs compositional syntax independent way 
models give various directions 
context static analysis denotational semantics suggested interesting typing disciplines see abr 
models yield new mathematical principles reasoning syntactical theories observational equivalences example scott induction principle 
game semantics define fully complete models various fragment linear logic aj am give fully models programming languages including pcf ajm ho nic richer functional languages supported tmr linear ct 
am mcc hy languages non functional features types non local control constructs am am am lai 
concrete fully complete fully models studied problem abstracting axiomatizing key properties constructions arises naturally 
line research started abr axioms models pcf order guarantee full abstraction axioms models simply typed calculus order guarantee full completeness 
axioms pcf abstracted key lemmas proof full abstraction game model ajm 
proof essential underlying linear structure game category 
correspondingly axiomatization abr applies models pcf arise kleisli categories linear category 
kind models linear category cartesian closed category monoidal adjunction categories called adjoint models bie bw 
problem full completeness second order polymorphic calculus girard system gir important problem extensively studied 
results literature 
hrr category partial equivalence relations open term model untyped calculus proved fully faithfully complete algebraic types 
ml types rank equal instance type church numerals 
ml types universal closures simple types types form xn free fv fx xn rank ml type nesting level negative occurrences simple type fully complete model system provided bc model built means quotient terms compositional sufficiently 
hug fully faithfully complete game model system 
game model syntactical flavour 
summarizing situation previous full completeness problem system produced semantically satisfactory models algebraic types 
provide satisfactory denotational models fully complete class ml types 
consists parts 
part provide axiomatization models fully complete ml types 
axiomatization models system called hyperdoctrines cro 
abr axiomatization works context adjoint models 
consists crucial steps 
axiomatize fact morphism ml type generates decomposition possibly infinite typed bohm tree 
introduce axiom rules infinite trees model 
second part linear realizability technique building hyperdoctrine adjoint models 
technique allows construct category linear combinatory algebra turns linear category forms adjoint model kleisli category 
notion linear combinatory algebra lca introduced abramsky abr refines standard notion combinatory algebra way intuitionistic linear logic refines logic 
construction models lca quite simple clear yields models extensionality properties avoiding cumbersome quotienting operations needed defining game categories models 
interest realizability techniques particular linear realizability especially connection full completeness full abstraction problems 
realizability regarded powerful tool mediating intensional extensional aspects computation intensional constructions am technique building directly interesting possibly fully complete models 
examples realizability fully model pcf alternative game model ajm provided linear algebra bracketed strategies 
third part build example concrete fully complete model ml types 
built linear realizability special linear combinatory algebra partial involutions 
algebra arises context abramsky generalization girard geometry interaction aj abr abr 
proof full completeness consists showing model satisfies axioms axiomatization 
particular proving model contain infinite typed bohm trees quite difficult requires study intermediate model 
model generated sierpinski consists possibly infinite bohm trees typed calculus constants 
crucial step proof consists proving simply typed calculus typical ambiguity constants totality tests definable finite typed trees 
totality tests allow tell apart terms appears terms appear 
ingredient approximation lemma line ajm 
authors thankful jagadeesan laird longley martini useful discussions issues 
contents simply typed calculus ml polymorphism system statman typical ambiguity theorem 
definability tests calculus typical ambiguity models system adjoint hyperdoctrines 
axiomatizing models fully complete ml types axioms 
axiomatic full completeness 
models pers linear combinatory algebra linear realizability 
partial involutions affine combinatory algebra 
fully complete model proof axioms 
proof finiteness axiom 
final remarks directions simply typed calculus ml polymorphism system recall syntax simply typed calculus type variables constants system introduce notation 
important results simply typed calculus theory typical ambiguity 
typical ambiguity theories obtained theories simply typed calculus requiring terms equated possible substitutions type variables equated theory simply typed calculus 
result statman typical ambiguity theorem ensures exactly consistent theory typical ambiguity simply typed calculus infinite type variables fij theory 
immediate consequence consistent theory fragment system consisting ml types precisely fij theory 
second result concerns definability convergence tests simply typed calculus infinite type variables constants theory typical ambiguity 
particular prove type test terms detect presence constants term type 
implies immediately theory typical ambiguity simply typed calculus infinite type variables constants term equated term 
definition simply typed calculus class simple types possible infinite set type variables tvar defined tvar 
raw terms defined follows mm set constants 
typed terms 
introduce proof system deriving typing judgements form delta delta type assignment finite list xn tn rules proof system delta delta delta delta delta delta delta delta delta mn fij conversion 
fij conversion typed terms relation generated rules rules congruence closure omit fi delta delta delta delta mx delta dom delta 
notation 
call simply typed calculus tv ar simply typed calculus tv ar base constant type 
simply typed calculus tv ar base constants type simply typed calculus infinite type variables tvar simply typed calculus infinite type variables tvar base constants type tv ar simply typed calculus infinite type variables tvar base constants type tv ar 
definition system class type system types infinite set type variables tvar defined type tvar 
system raw terms defined follows mm mt var 
typed terms 
proof system deriving typing judgements defined follows 
typing judgement form gamma delta gamma context finite list type variables delta type assignment finite list xn tn legal gamma 
rules deriving judgement gamma read legal gamma gamma gamma gamma gamma gamma gamma gamma rules deriving typing judgement gamma delta gamma delta delta gamma delta gamma delta gamma delta gamma delta gamma delta mn gamma delta gamma delta gamma delta legal gamma gamma delta ms fv ran delta 
fij conversion 
fij conversion typed terms relation generated rules rules congruence closure omit fi gamma delta gamma delta gamma delta gamma delta mx gamma delta dom delta 
fi gamma delta gamma delta fv ran delta 
gamma delta gamma delta fv ran delta 
introduce class ml polymorphic types correspond limited kind polymorphism allowed language ml 
definition ml types class ml type ml types defined ml type fv xg terms ml types essentially combinatorics terms simply typed calculus 
precisely ml terms regarded terms calculus typical ambiguity theory 
statman typical ambiguity theorem result simply typed proved sta 
immediate consequence theorem theory ml types non trivial model system exactly fij theory 
theorem statman typical ambiguity type fv fx xn fij exist types sn tv ar term bool bool lm fij true bool ln fij false bool true false denotes term type variables substituted corollary maximal consistent theory typical ambiguity fij theory 
corollary maximal consistent theory fragment system consisting ml types fij theory 
definability tests calculus typical ambiguity show convergence tests definable theory typical ambiguity 
result section prove model pers linear combinatory algebra partial involutions fully complete ml types 
definition typed convergence tests tn distinguished type variable ff 
define induction convergence test term ff ff follows ffl ffl tn iq ff ff xn ff tn ff ff ff ff show convergence test terms defined give procedure deciding term contains divergent subterm 
term type tn instantiate free variables apply sequence convergence tests ff ff tn effect head reduction ms ff ff tn subterm definitely appears head position reduces identity detected 
term denote ff ff ff simply ff term type ff obtained instantiating type variables free 
theorem typed separability tn term 
ff ff ff tn ae free proof 
possibly open term ff ff ff closed term obtained saturating free variables ff convergence tests appropriate types 
prove induction structure ff ff ff tn ae free base case prove ff ff ff tn fact immediately shown induction induction step ff ff ff iq ff ff ff tn ff ff ff iq ff ff iq 
thesis follows applying induction hypothesis ff ij theorem regarded typed version bohm separability theorem sense think generic unsolvable term theorem allows tell apart normal forms unsolvable terms 
corollary theory typical ambiguity term constant appears equated term constants 
typed separability result read saying non divergent computations reduced way identity computation 
consistent view taken geometry interaction game semantics paradigm computations simply typed calculus handled just operations strategies copying information producing new result 
models system focus hyperdoctrine models system recall notion theta hyperdoctrine see cro 
essentially corresponds notion external model see 
give formal definition full faithful complete hyperdoctrine model 
carry linear analysis notion theta hyperdoctrine 
allow express conditions guarantee full completeness model ml types 
particular introduce categorical notion adjoint hyperdoctrine 
adjoint hyperdoctrines arise kleisli indexed categories linear indexed categories 
follows assume indexed categories consider strict see cro details indexed categories 
definition theta hyperdoctrine theta hyperdoctrine triple ffl base category finite products consists distinguished object generates objects product operation theta 
denote objects ffl op indexed cartesian closed category category cartesian closed categories strict cartesian closed functors underlying collection objects cartesian closed fibre category indexed collection morphisms objects morphisms hom morphism op cartesian closed functor called reindexing functor denoted object ffl object functor theta right adjoint functor theta theta projection satisfies beck chevalley condition morphism diagram functors commutes theta fflffl thetaid theta canonical natural transformation ffi ffi theta id identity 
theta hyperdoctrine endowed notion interpretation language system types free variables xm interpreted morphisms category objects xm typed terms xm xn tn interpreted morphisms category xm xn tn theta theta tn precisely definition endow theta hyperdoctrine interpretation function language system follows 
defined types induction derivations judgement gamma ffl gamma gamma gamma theta theta gamma ffl gamma gamma gamma ffl gamma gamma defined terms induction derivations typing judgement gamma delta ffl gamma xn tn gamma theta theta gamma theta theta gamma tn gamma ffl gamma delta gamma delta ffl gamma delta mn gamma delta gamma delta ap ffl gamma delta gamma delta gamma bijection definition ffl gamma delta ms gamma delta hid gamma gamma id gamma inverse gamma proposition cro theta hyperdoctrine interpretation function definition model system definition full faithful completeness theta hyperdoctrine 
fully complete class closed types ii fully faithfully complete class closed types fij normal form adjoint hyperdoctrines start recalling definitions definition linear category bie bw linear category symmetric monoidal closed category omega gamma gammaffi ffl symmetric monoidal comonad der ffi oe oe ffl monoidal natural transformations components cona omega cona commutative comonoid cona coalgebra maps ffi oe ffi omega ffi omega ffi oe respectively 
coalgebra maps free coalgebras preserve canonical structure 
definition adjoint model bw adjoint model specified 
symmetric monoidal closed category omega gamma gammaffi 
cartesian closed category theta 
symmetric monoidal adjunction give indexed version notion adjoint model definition indexed adjoint model indexed adjoint model specified 
symmetric monoidal closed indexed category op category symmetric monoidal closed categories strict monoidal closed functors 
cartesian closed indexed category op category cartesian closed categories strict cartesian closed functors 
symmetric monoidal indexed adjunction definition capture theta hyperdoctrines arise kleisli construction indexed linear category 
definition adjoint hyperdoctrine adjoint hyperdoctrine quadruple ffl base category finite products consists distinguished object generates objects product operation theta 
denote objects ffl op indexed linear category category linear categories strict monoidal closed functors underlying collection objects linear fibre category indexed collection morphisms ffl op indexed kleisli category assume cartesian closed 
ffl object functor theta theta right adjoint functor theta theta projection theta satisfies beck chevalley condition 
adjoint hyperdoctrine particular indexed adjoint model gives rise theta hyperdoctrine theorem adjoint hyperdoctrine 
categories form indexed adjoint model ii hyperdoctrine 

notice definition adjoint hyperdoctrine require indexed categories form adjoint model assume existence family functors fibre categories model linear order types linear higher order types definition capture models nl system notion model general sufficient dealing ml types expressing axioms full completeness ml types see section 
axiomatizing models fully complete ml types isolate sufficient conditions adjoint hyperdoctrine models system order guarantee full completeness ml polymorphic types 
conditions amount axioms subsection 
axiomatization full completeness ml polymorphism line abr axiomatic approach full abstraction full completeness pcf simply typed calculus 
axiomatizations inspired proof full abstraction game semantics model pcf ajm 
axiomatization full completeness ml types consists parts 
axioms ensuring decomposition theorem 
theorem allows recover top level structure possibly infinite bohm tree denoted morphisms terminal object interpretation ml type fibre category 
axioms decomposition theorem axioms section essential linear category underlying adjoint hyperdoctrine 
axioms apart axioms expressed requiring canonical maps suitable spaces morphisms fibre categories isomorphisms 

finiteness axiom allows rule infinite bohm trees model 
notice definition interpretation function hyperdoctrine definition morphisms terminal object tn ml type definable morphisms theta definable 
gamma focus space morphisms theta tn simple types 
start presenting main result section decomposition theorem 
proof theorem follows strong decomposition theorem proved section 
morphism theta definable iq making evident top level structure bohm tree ffl ffl ffl iq decomposition theorem allows recover top level structure bohm tree corresponding sense theorem decomposition adjoint hyperdoctrine satisfying axioms section 
tn simple type fv fx xng iq hom theta exist ng hom theta ij ffl ffl appearing decomposition live uncurrying space morphisms denoting simple type keep iterating decomposition expanding turn getting possible infinite tree decomposition theorem holds order get full completeness result left rule morphisms generating trees height infinite correspond infinite typed bohm trees 
expressed finiteness axiom 
axioms axiom base axiom expresses fact type empty closed terms typable axiom base hom terminal object denotes th projection weak omega omega weak gamma omega der omega weak omega omega axiom allows extract copy type head variable corresponding variable 
notice property expressed axiom truly linear 
fact order state implicitly isomorphism omega axiom linearization head occurrence case foe hom gamma gammaffi hom ffl denotes coproduct set ffl omega ng omega ij gamma gammaffi ffl hom gamma gammaffi suitable subset hom gamma gammaffi intended contain total elements strict divergent ffl oe hom gamma gammaffi hom canonical morphism hom gamma gammaffi fflffl gamma hom omega fflffl hom id hom omega gamma gammaffi hom con id hom omega omega omega omega omega axiom reflects form coherence type head variable global type term 
type term type head variable shape axiom type coherence hom gamma gammaffi gamma gammaffi axiom expresses fact thing linear functional parameter applying argument 
axiom linear function extensionality hom delta id hom hom gamma gammaffi gamma gammaffi axiom expresses fact morphisms fibre category uniform behaviour threads 
axiom uniformity threads hom id der hom hom hom axioms guarantee validity strong decomposition theorem see section allows decompose unique way morphisms hom omega omega gamma gammaffi hom omega space morphisms omega simple types tn final axiom axiomatization guarantees tree generated repeated applications decomposition theorem morphisms hom omega omega ij gamma gammaffi finite 
axiom finiteness exists size function omega omega ij gamma gammaffi gamma 
defined decomposition theorem 
axiomatic full completeness axioms morphisms hom omega omega ij gamma gammaffi unique decomposition theorem strong decomposition adjoint hyperdoctrine satisfying axioms section 
hom omega omega ij gamma gammaffi exist unique unique hom ij con omega hg ap proof 
axiom exists unique ng unique hom gamma gammaffi con omega id gamma 
axiom axiom exists unique hom omega ij gamma gammaffi id omega ap 
con omega ap 
axiom universal property product obtain hg summarizing results section theorem axiomatic full completeness adjoint hyperdoctrine 
satisfies axioms fully faithfully complete ml types 
proof 
tn ml type hom 
easily prove induction exists 

strong decomposition theorem stronger decomposition theorem respects 
guarantees unicity decomposition 
unicity condition implies immediately model faithful 
give alternative forms axioms substituting isomorphisms requirements weaker conditions order ensure just existence decomposition 
sufficient faithfulness model follows statman theorem 
precisely order guarantee existence decomposition sufficient ask canonical morphisms axioms morphism hom axiom surjective maps 
axioms weakened considering morphisms domains codomains denotations types generic objects 
strong form axioms advantage readable concise 
see section strong axioms decomposition theorem hold concrete example fully complete model linearization head occurrence prove weak form 
conjecture axiom holds strong form 
section finiteness axiom proved weak form 
precisely show exists size function morphisms domains codomains denotations appropriate types 
models pers linear combinatory algebra canonical examples theta hyperdoctrines arise considering partial equivalence relation category combinatory algebra see cro chapter section details 
section show build category linear combinatory algebra lca 
furthermore prove category forms adjoint model kleisli category show adjoint hyperdoctrines arise categories linear combinatory algebra 
special lca partial involutions show provide fully complete model ml types see section 
start recalling definition linear combinatory algebra abr definition linear combinatory algebra linear combinatory algebra ffl applicative structure ffl unary injective operation distinguished elements combinators ffi satisfying equations equation principal type logical rule ix ff gamma identity yz ff gamma gamma gammaffi fl gamma gamma gamma cut xz ff gamma gamma gamma gamma gamma exchange kx ff gamma gammaffi fi gamma weakening wx ff gamma gammaffi ff gamma gamma gammaffi ff gamma contraction ff gamma dereliction ffi ff gamma gammaffi ff comultiplication xy ff gamma gamma gammaffi ff gamma gammaffi fi closed functoriality lca correspond hilbert style axiomatization gamma gammaffi fragment linear logic 
lca ffl form standard ca ffl combinatory version girard translation intuitionistic logic linear logic 
define ff ffl fi fi standard combinators defined terms linear ones see details 
linear realizability start considering bci algebra applicative structure ffl combinators 
define category bci algebra show category symmetric monoidal closed 
definition ffl bci algebra 
define category pera follows 
objects partial equivalence relations theta symmetric transitive relations 
morphisms morphism equivalence class gamma gammaffi gamma gammaffi defined ff gamma gammaffi fi iff fl fl ff ffl fl fi ffl fl bci algebras satisfy extensionality pairs standard pairing gives rise tensor product lemma ffl bci algebra 
pairing combinator 
notation 
satisfies extensionality pairs fffi ff fi ff ff fi fi pers defined fffi omega ff fi iff ff ff fi fi notice particular bci algebra affine bck algebra extensionality pairs holds 
proposition ffl bci algebra satisfying extensionality pairs 
pera symmetric monoidal closed category 
proof 
omega pera theta pera pera defined objects lemma 
arrows define omega omega omega xy xy xy fx 
plays role tensor identity 
natural isomorphisms ae omega ae xy yx ff omega omega omega omega ff xyz px oe omega omega oe uz zz omega gamma gammaffi 
gamma gammaffi gamma gammaffi fxy pxy 
show lca gives rise linear category 
proposition ffl lca satisfying extensionality pairs 
pera pera functor defined ffl ff fi ff fig ffl 
ffi oe oe symmetric monoidal comonad ffl oe omega omega defined oe xy ffl oe ffi notice isomorphisms hold immediately categories lca lemma ffl lca satisfying extensionality pairs 
pers 
idempotency 
ffi 
uniformity threads gamma gammaffi 
gamma gammaffi delta equivalently ff gamma gammaffi 
ff ff 
commutativity 
second isomorphism lemma relevant full completeness 
fact see section isomorphism amounts exactly uniformity threads axiom axiomatization full completeness 
isomorphisms lemma highlight degeneracies construction models 
theorem ffl lca satisfying extensionality pairs 
ffl category pera linear 
ffl kleisli category pera induced comonad category pera cartesian closed 
ffl categories pera pera form adjoint model 
ffl category pera isomorphic category pera pera category obtained standard realizability standard combinatory algebra show build adjoint hyperdoctrine lca theorem adjoint hyperdoctrine ffl lca satisfying extensionality pairs 
gives rise adjoint hyperdoctrine defining set fr ag 
objects finite products set copies set particular terminal object set 
morphism set theoretic function morphisms fibre category equivalence classes gamma 
object define 
morphism define behaviour functor morphisms morphism gamma ffi gamma 
functor theta defined follows 
theta 
morphism theta partial involutions affine combinatory algebra examples arise abramsky categorical version girard geometry interaction construction traced symmetric monoidal categories abr abr 
basic example lca introduced abr defined space partial functions natural numbers natural numbers applying construction traced category pfn sets partial functions 
briefly recall definition lca discussing categorical framework see abr abr details 
lca partial involutions shown provide fully complete model ml types see section arises subalgebra 
consider space partial functions natural numbers natural numbers 
ff injective denote ff gamma inverse ff 
show endow space structure lca 
algebra obtain affine full combinator 
start fixing injective coding functions gamma theta gamma order define application allows transform input function input output function creating infinitely copies input output function ff defining ff 
explain application computed geometrically language boxes wires arises general setting traced symmetric monoidal categories see jsv general categorical treatment 
represent input output function ff port output port box ff order define application ff ffl fi ff fi regard ff output function coding ff gamma particular ff gamma described matrix input functions ff ff ff ff ff ij ff gamma gamma account contribution th input wire th output wire 
graphically ff ff ff ff result application ff ffl fi input output function computed follows 
input token input ff gamma lefthand input wire see fig 

function ff gamma sends lefthand righthand output wire 
case result case resulting token input fi keeps traveling lefthand wires ff gamma input wire fi ff gamma possibly sends righthand output wire 
formally ff ffl fi ff ff fi ff fi ff denotes union graph relations denotes fi ff formula computing application essentially execution formula girard geometry interaction gir 
definition operation applicative structure quite simple 
operation intended produce single copy ff infinitely copies ff 
obtained simply tagging copies natural number define ff gamma id theta ff left show affine combinators defined structure ffl 
formal algebraic definition combinators ff ff ffl fi fi linear application 
definition combinators gamma ffl ffl defined 
gamma fb ffl defined id id id id id ffl fb function defined equations symmetric closure fb fb fb 
gamma fc ffl defined id id id id ffl fc function defined equations symmetric closure fc fc fc 
gamma fk ffl defined id ffl fk function defined equations fk fc 
order define need fix gamma fw ffl theta defined id id id id id ffl fw theta theta function defined equations symmetric closure fw fw fw 
order define need fix gamma fd ffl theta defined id ffl fd theta theta function defined equations fd fd 
ffi order define ffi need fix ffi gamma ffi ffi ffi ffl ffi theta theta defined ffi id theta id id ffl ffi theta theta theta theta function defined equations ffi ffi 
order define need fix gamma ff ffl theta theta defined id theta id id id ffl ff theta theta theta theta function defined equations symmetric closure ff ff 
simple geometrical explanation combinators language boxes wires see fig 

example consider identity combinator satisfy equation ix order define convenient regard input output function coding see fig 

identity combinator just copies informations lefthand input wire righthand output wire vice versa righthand input wire lefthand output wire 
jj omega omega omega omega omega omega omega omega jj omega omega omega omega jj omega omega omega omega jj phi phi phi phi phi phi omega omega omega omega jj omega omega omega omega jj omega omega omega omega jj combinators 
phi phi phi phi phi phi phi phi phi phi phi phi omega omega omega omega jj ae ae ae ae ffi ae ae ae ae combinators 
fact identity equation simple geometrical explanation 
apply partial function string connecting input output wires result application forgetting box corresponding gives immediately expected result argument property trace symmetric monoidal category pfn underlying combinatory algebra 
particular axioms characterizing trace operation general setting traced symmetric monoidal categories 
elaborate 
consider combinator satisfies equation yz 
order define box purely linear combinator need determine input wires correspondingly output wires box wires connected inside box 
number input output wires depends number arguments combinator takes role played arguments just appear arguments righthand side equation satisfied combinator functions arguments 
concretely box see fig 
input output wires input output wires applied argument input output wire appears argument plus extra input output wire input token output token intended enter exit 
connections wires inside box determined control flow righthand part equation 
control flow passes input port input port second port connected input port second port connected unique port remaining connections obtained symmetry 
compute result application omega omega omega omega jj omega omega omega omega jj omega omega omega omega jj pulling global input output string forgetting box corresponding get expected result briefly review remaining combinators 
combinator see fig 
explained similar way affine combinator simply forgets second argument order define see fig 
need fix different tagging copies arguments remaining copies ignored 
behaviour ffi explained similarly 
essentially combinators fig 
functions mediate required interactions arguments simply copying informations various ports 
possible conditions imposed partial functions order cut space maintaining closure application affine combinators 
subalgebra gives rise fully complete model section obtained considering partial involutions definition partial involution graph symmetric relation 
denote inv space partial involutions check partial involutions closed application operation combinators definition proposition ap inv inv ffl affine combinatory algebra 
ap inv highly constrained algebra computations reversible 
partial involutions copy cat strategies game categories computational effect copying informations input output wires 
similar idea define ap inv order provide fully model pcf 
constraints different nature put space capture functions representing strategies ajm style 
fully complete model section prove category lca ap inv section satisfies axioms section weak form gives rise fully faithfully complete model ml types 
definition adjoint models see theorem section fact categories pointed morphisms fibre category hom gamma pera set forgetful functor 
order verify main axioms decomposition theorem left establish isomorphisms images set suitable closed polymorphic pers 
notice axiom uniformity threads axiom hold immediately models 
fact axiom hold need verify empty 
follows immediately instantiating empty 
uniformity threads axiom follows isomorphism gamma gammaffi gamma immediate consequence lemma section 
rest section devoted proof validity axioms 
proof validity axioms essentially nature partial involutions requires careful analysis applicative behaviour 
difficult part proof full completeness model pera pinv consists proving finiteness axiom ruling infinite typed trees 
proof axiom typed separability result section requires approximation lemma lines ajm 
proof axioms technical lemmata carry analysis structure partial involutions inhabit pers involved axioms 
particular lemma show partial involutions dom omega gamma gammaffix gamma gammaffix total sense possible sequence arguments input look producing output different empty partial involution 
lemma show partial involutions ask argument say th argument possible sequence arguments 
allows isolate copy lemma order define space total morphisms appearing axioms 
space amounts total partial involutions see definition 
lemma gamma gammaffix closed omega gamma gammaffix dom gamma gammaffix 
total gamma proof 
contradiction 
assume 
reach contradiction instantiating follows fh inv fact dom dom gamma gammaffix 
order conclude left check dom 
check dom 
exist taken function constantly equal element define gamma similarly rule case 
technical definition useful sequel 
definition inv dn inv dn dn theta theta defined follows theta theta fflffl id theta id theta idn theta theta fflffl idn fflffl gamma fflffl gamma gamma fflffl gamma gamma idn theta theta fflffl id theta gamma id theta gamma idn defined induction follows id lemma gamma gammaffix closed omega gamma gammaffix dom gamma gammaffix 
exists unique ffl ffl defined definition denotes element theta second projection 
proof 
lemma dom gamma gammaffix 
prove contradiction 
assume 
instantiate ff inv mg 
partial involution gamma particular take 
ffl reach contradiction 
similar argument rule case instantiate fh inv yields ffl ffl left show 
prove contradiction 
assume 
notice argument ff inv lf 
lemma gamma gammaffix omega gamma gammaffix dom gamma gammaffix 
gamma gammaffix defined definition 
proof 
contradiction 
assume equivalence classes fh inv fh inv gamma get contradiction 
introduce total space morphisms appearing axioms 
induced suitable gamma gammaffix gamma gammaffi gamma gammaffix meant contain equivalences classes total maps 
intend equivalence classes form subset set equivalence classes original 
notice general categories natural notion strict total map natural elements 
special case combinatory algebra natural candidate equivalence class empty partial involution 
course sense restrict pers belongs 
strict maps turn maps look arguments total maps defined usual strict maps different 
bearing intuition define space total polymorphic maps axiom follows lemma guaranteed definition yields identifies subset set equivalence classes original definition gamma gammaffix gamma gammaffi gamma gammaffix closed 
lf predicate read 
ffl define total gamma gammaffix gamma gammaffi gamma gammaffix gamma gammaffix gamma gammaffi gamma gammaffix contains total partial involutions dom gamma gammaffix gamma gammaffi gamma gammaffix iff dom gamma gammaffix gamma gammaffi gamma gammaffix gamma gamma gamma ffl define space total morphisms hom gamma gammaffi gamma gammaffi set gamma gammaffix gamma gammaffi gamma gammaffix start proving validity axioms leaving axiom problematic 
theorem type coherence gamma gammaffix gamma gammaffi gamma gammaffix closed gamma gammaffix gamma gammaffi gamma gammaffix proof 
assume contradiction dom gamma gammaffix gamma gammaffi gamma gammaffix total 
gamma gamma gamma suitably instantiating mimicking part proof lemma check 
instantiating fh inv get gamma gammaffix ffl theorem linear function extensionality gamma gammaffix gamma gammaffi gamma gammaffix closed 
delta gamma xk gamma gamma gammaffix gamma gammaffi gamma gammaffix proof 
define inverse delta gamma xk equivalence class gamma gamma gamma gamma gamma id id partial involution 
easily check inverse delta gamma xk left show axiom case ff oe gamma gammaffi gamma gammaffix gamma gammaffix oe appropriate canonical morphism 
function case ff oe easily shown surjective 
proving injectivity problematic 
fact amounts showing case gamma gammaffi gamma gammaffix case oe gamma gammaffix oe 
remarked section sole surjectivity function case ff oe rate sufficient guarantee relevant morphisms decomposition finiteness condition holds full completeness 
question remains strong version linearization head occurrence axiom holds 
say prove posteriori isomorphism holds case restrict universal pers denoting ml types 
fact weak decomposition theorem finiteness axiom hold model proved section infer model fully complete morphisms type interpretations type interpretations definable 
theorem model non trivial relevant morphism denotes exactly fij normal form isomorphism holds theorem weak linearization head occurrence gamma gammaffix denote 
case ff oe gamma gammaffi gamma gammaffix gamma gammaffix oe gamma gamma xk con gamma xk proof 
proof follows theorems 
proof finiteness axiom prove weak form finiteness axiom consider universal pers denotations ml types 
particular prove trees generated elements pers repeated applications decomposition theorem finite height 
size function finiteness axiom taken directly height tree generated theorem 
order prove finiteness result need study intermediate model contains approximant terms possibly infinite trees live 
aim introduce sierpinski corresponding hierarchy simple pers 
hierarchy gives rise model simply typed calculus 
section 
definition sierpinski ffl sierpinski classes defined follows ff inv ff inv ffl define hierarchy simple pers sierpinski follows follows omit index denoting sierpinski pers isomorphic 
simple pers yield model 
precisely model ccc freely generated sierpinski 
denote interpretation function 
notice model trivially faithful theory contains properly fij theory 
fact finite number equivalence classes 
finite number equivalence classes church numerals identified model 
precisely model generated induces minimal theory simply typed calculus defined induction types follows iff mp nq model generated sierpinski remarkable property partial involutions inhabit simple decompose lemma 
proof lemma proceeds line proof decomposition theorem fact deal directly partial involutions equivalence classes 
proof lemma omitted 
lemma dom rn 
rn 
iq ffl ffl ffl ng dom ij ffl ffl ffl define approximants partial involutions simple pers approximants defined decomposition theorem 
repeatedly applying decomposition theorem partial involution obtain possibly infinite typed bohm tree 
th approximant obtained truncating level tree substituting empty partial involution possibly erased subtrees 
formally definition approximants dom ffl define th tree height generated applications decomposition theorem induction follows tree height root tree height tree obtained tree expanding possible leaves level decomposition theorem 
ffl define th approximant partial involution dom partial involution obtained tree substituting necessary partial involution level empty partial involution 
supremum heights trees yields measure partial involutions definition size function dom define sup height tree 
lemma approximation dom simple 
ii dom 
ffl 
ffl proof sketch proof ii follows definition application partial involutions 
proof follows fact dom ffl 
ffl implication immediate definition approximants 
order prove converse check induction ffl thread length ffl lemma dom term 
typed bohm tree obtained tree relabeling nodes way nodes appearing th level relabeled constant 
appropriate type remaining nodes labeled corresponding projections 
proof 
induction theorem finiteness dom closed denoting ml type 
proof 
contradiction 
assume 
dom 

ff gn ff tn 
fg gn dom 
lemma 
gn dom 
lemma ii 
gn 

lemma gn ff ff tn typed separability theorem fh gamma 
gn 
fh gamma contradiction 
final remarks directions give list remarks interesting issues remain addressed currently investigation 
ffl fully complete model ml types 
natural question arises happens ml types 
partial answer 
type nat nat nat type church numerals model partial involutions fully complete 
fact recursive functions functions natural numbers natural numbers encoded type nat nat 
similar problem arises consider term combinatory algebra 
models defined give full completeness ml types 
innovative construction called 
ffl question arises naturally model linear term combinatory algebra fully complete ml types 
conjecture case proof fact difficult 
logical relation technique relating term algebra term subalgebra partial involutions useful 
interest linear term algebras lies fact model generated essentially model shown fully complete algebraic types hrr 
ffl linear realizability technique building categories lca 
categories turn linear categories 
interesting carry investigation general properties categories define coproducts products 
ffl full completeness parametricity quality filter models polymorphic functions 
particular plo logic linear parametric models suggested line pa 
interesting develop approach see logic holds linear models 
longo genericity lms viewed form parametricity amounts uniformity property polymorphic functions input types 
issue parametricity la reynolds investigated 
ffl models partial involutions worthwhile investigating typed untyped calculi different system strategies ajm style represented partial involutions opponent moves player moves provide fully complete models simply typed calculus base constants 
untyped setting partial involutions strategies possibly provide fully models alternative dfh kno 
ffl category pinv models typed bohm trees naturally arise model induced sierpinski section 
particular models simply typed calculus fixed point combinator suggested alex simpson 
infinite calculi interesting investigated 
abr abramsky 
domain theory logical form annals pure applied logic 
abr abramsky 
interaction combinators complexity notes siena italy 
abr abramsky 
retracing paths process algebra concur conf 
proc 
abr abramsky 
axioms full abstraction full completeness appear 
abramsky panangaden scott 
geometry interaction models combinatory logic appear 
aj abramsky jagadeesan 
new foundations geometry interaction inf 
comp 

aj abramsky jagadeesan 
games full completeness multiplicative linear logic symbolic logic 
ajm abramsky jagadeesan malacaria 
full abstraction pcf appear 
abramsky longley 
realizability models free strategies draft 
abramsky 
full completeness genericity parametric polymorphism preparation 
am abramsky mccusker 
games full abstraction lazy lambdacalculus lics conf 
proc 
am abramsky mccusker 
full abstraction idealized algol passive expressions appear 
am abramsky mccusker 
call value games csl conf 
proc lncs 
am abramsky mccusker 
linearity sharing state hearn tennent eds algol languages birkhauser 
am abramsky 
concurrent games full completeness lics conf 
proc 
asperti longo 
categories types ad structures category theory working computer scientist foundations computing series mit press 
bc breazu tannen coquand 
extensional models polymorphism tcs 
bw benton wadler 
linear logic monads lambda calculus lics conf 
proc 
bie bierman 
categorical model intuitionistic linear logic tlca conf 
proc lncs 
coppo dezani honsell longo 
extended type structures filter lambda models logic colloquium conf 
proc longo eds north holland 
cro crole categories types cambridge university press 
dfh di franco honsell 
game semantics untyped calculus tlca conf 
proc lncs 
gir girard 
interpr etation des coupures de arithm etique ordre sup erieur th ese etat universit paris vii 
gir girard 
geometry interaction contemporary mathematics 
hug hughes 
games definability system lics conf 
proc 
hrr hyland robinson rosolini 
algebraic types models mfps conf 
proc main eds lncs 
ho hyland ong 
full abstraction pcf information computation appear 
hy honda yoshida 
game theoretic analysis call value computation icalp conf 
proc lncs 
kno ker ong 
universal game models untyped calculus bohm tree strikes back csl conf 
proc lncs 
jsv joyal street verity 
traced monoidal categories math 
proc 
comb 
phil 
soc 

lai laird 
full abstraction functional languages control lics conf 
proc 
lms longo 
genericity theorem notion parametricity polymorphic calculus lics conf 
proc 
mcc mccusker 
games full abstraction fpc lics conf 
proc 
nic 
hereditarily sequential functionals proc 
symposium logical foundations computer science lncs 
plo plotkin 
linear notes 
pa plotkin abadi 
logic parametric polymorphism tlca conf 
proc lncs 
sta statman 
definable functionals fij conversion arch 
math 
logik 

