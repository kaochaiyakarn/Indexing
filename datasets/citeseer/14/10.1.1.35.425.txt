term rewriting systems klop contents reduction systems basic notions disjoint sums term rewriting systems termination proof technique completion equational specifications formulation completion unification orthogonal term rewriting systems basic theory orthogonal trs reduction strategies orthogonal trs sequential orthogonal term rewriting systems conditional term rewriting systems term rewriting systems play important role various areas data type specifications implementations functional programming languages automated deduction 
chapter introduce basic concepts facts trs 
specifically discuss reduction systems general term rewriting systems including account knuth bendix completion unification orthogonal trs reduction strategies strongly sequential orthogonal trs 
concludes discussion conditional term rewriting systems 
emphasis chapter providing information syntactic nature 
research partially supported esprit project meteor sept esprit bra projects integration july 
klop concept term rewriting system trs paradigmatic study computational procedures 
half century ago calculus probably known term rewriting system played crucial role mathematical logic respect formalizing notion computability trs figured fundamental scott plotkin leading break denotational semantics programming languages 
related system combinatory logic shown fruitful tool implementation functional languages 
related family trs categorical combinatory logic emerged yielding remarkable connection concepts category theory elementary steps machine computations 
term rewriting systems attractive simple syntax semantics trs involve bound variables calculus involve rewriting terms order language 
simplicity facilitates satisfactory mathematical analysis 
hand provide natural medium implementing computations principle parallel computations 
feature trs interesting design parallel reduction machines 
field trs play fundamental role concerns analysis implementation data type specifications consistency properties computability theory decidability word problems theorem proving 
aim give key concepts theory term rewriting providing possible details 
various places exercises included 
contain additional information proofs relatively easy primarily meant educational purpose distribution exercises uniform 
starts level rewriting possible proceeds considering term rewriting systems structure 
start reduction systems sets equipped binary rewrite relations 
number basic properties facts stated level 
subsequently reductions specialized reductions rewritings terms 
general term rewriting systems key issue prove termination property major powerful termination proof methods recursive path orderings new formulation designed facilitate human understanding practical term rewriting systems implementation 
proving termination great importance area knuth bendix completions 
concerned equational specification construct trs confluent terminating proves equations original specification 
construction successful yields positive solution validity problem original equational specification 
nowadays applications knuth bendix completion methods inductionless induction computing equations 
survey applications refer dershowitz jouannaud 
chapter explain basic ideas knuth bendix completion interesting approach bachmair dershowitz hsiang prove correctness knuth bendix completion algorithms 
elegant unification algorithm likewise unification 
chapter impose structure trs form orthogonality requirement non ambiguity left linearity 
orthogonal trs sizeable amount theory developed syntactically semantically 
exclusively concerned syntactical aspects semantical aspects refer boudol berry evy 
basic theorems confluence parallel moves lemma church theorem donnell theorem possible proof sketch 
section survey important facts concerning reduction strategies orthogonal trs strategies aiming finding normal forms possible 
chapter concludes explanation beautiful theory huet evy strongly sequential trs 
trs possess reduction strategy 
final chapter consider trs conditional rewrite rules 
important topics way 
notable rewriting modulo set equations proof consistency procedures graph rewriting 
information refer bachmair dershowitz jouannaud graph rewriting may consult barendregt 
chapter extension short survey tutorial klop material klop included 
reduction systems basic definitions properties trs term rewriting systems stated abstractly viz 
sets equipped binary relations 
instructive see definitions properties depend term structure basic start klop section reduction systems 
concepts properties reduction systems apply rewrite systems trs string rewrite systems thue systems tree rewrite systems graph grammars 
sequence simple definitions 
definition 
reduction system ars structure ha 
ff ff consisting set sequence binary relations ff called reduction rewrite relations 
refer ff ff 
case just reduction relation 
ars just reduction relation called replacement system staples transformation system 

ff write ff call step ff reduct 
transitive reflexive closure ff written ff 
customary notation ff prefer double arrow notation find convenient diagrams 
ff possibly empty finite sequence reduction steps ff ff delta delta delta ff denotes identity elements element called ff reduct equivalence relation generated ff ff called convertibility relation generated ff reflexive closure ff ff transitive closure ff ff converse relation ff ff gamma ff union ff fi denoted fffi composition ff ffi fi defined ff ffi fi ff fi 
ff fi reduction relations say ff commutes weakly fi diagram holds fi ff ff fi shorter notation fi ffi ff ff ffi fi ff commutes fi ff fi commute weakly 
terminology differs bachmair dershowitz ff commutes fi ff gamma ffi fi fi gamma ffi ff 
reduction relation called weakly confluent weakly wcr weakly self commuting see property wcr called local confluence 

notation wcr diagram holds 
confluent church rosser church rosser property cr self commuting see called confluent situation proposition church rosser 
term rewriting systems proposition 
equivalent 
confluent 
weakly confluent 
self commuting 

diagram holds 
convertibility relation generated 
see diagram 
definition 
ha ars 

say normal form normal form normal form 
reduction relation weakly normalizing wn normal form 
case say wn 
klop 
strongly normalizing sn reduction sequence delta delta delta eventually terminate 
terminology terminating noetherian 
converse reduction relation sn say sn gamma 
unique normal form property un normal forms 

normal form property nf normal form 
inductive ind reduction sequence possibly infinite delta delta delta 
increasing map 
set natural numbers usual ordering 
finitely branching fb set step reducts fb bg finite 
converse reduction relation fb say fb gamma 
huet fb called locally finite 
exercise 
define unique normal form property respect reduction un normal forms 
show un un conversely 
ars confluent terminating cr sn called complete terminology canonical uniquely terminating 
exhibiting facts notions introduce concepts 
definition 
ha ff hb fi ars 
sub ars notation 

ff restriction fi fi ff 
closed fi fi ars called extension note properties introduced far cr wcr wcr wn sn un nf ind fb preserved downwards cr 
particular interest sub ars determined element ars 
definition 
ha ars reduction graph smallest sub ars containing elements reducts including structured term rewriting systems relation restricted set reducts 
collect theorem implications various properties ars 
part main motivation concept confluence guarantees unique normal forms course desirable state affairs implementations algebraic data type specifications 
apart fundamental implication cr un important fact known newman lemma 
property cp property defined exercise 
theorem 
cr nf un 
sn wcr cr newman lemma 
un wn cr 
un wn ind 
ind sn 
wcr wn sn 
cr cp countable ars 
proofs easy 
newman lemma short proof huet alternative proof illustrating notion proof ordering section exercise 
proposition nederpelt proved klop see exercise 
propositions statement theorem see exercises displayed important implication arrow points conjunction sign conjuncts 
likewise tail implication arrow 
un wn ind sn wcr un wn sn gamma fb gamma sn gamma cr un cr un wn 
possible reverse arrows diagram implications 
instructive counterexample wcr cr trs hindley see huet 
facts ars helpful proving properties algebraic data type specifications 
form series exercises 
understanding sequel additional facts necessary 
proofs require notion multiset ordering explained exercise 
exercises 

rosen ha ars confluent 

hindley ha 
ff ff ars ff fi ff commutes fi 
particular ff commutes 
klop union ff ff confluent 
proposition referred lemma hindley rosen see barendregt proposition 
hindley ha ars 
suppose 
see 
commute 

staples ha ars 
suppose 
see 
commute 
term rewriting systems 
rosen ha ars 
definition requests see 
prove confluent requests confluent 

rosen ha ars confluent 
see 
requests 
staples ha ars requests confluent 
composition iff suppose 
confluent 

staples definition ars ha reduction relation called refinement compatible refinement ars ha reduction relation refinement prove compatible refinement iff 
staples ha ars compatible refinement confluent iff confluent 

huet definition ha ars 
called strongly confluent see 
prove strong confluence implies confluence 

ha 
ff ff ars ff fi ff commutes weakly fi definition ff relatively terminating reduction ff ff contains infinitely ff 
ff splitting effect fi ff fi ff fi reduction fi consists step 
prove ff ff splitting effect relatively terminating confluent 
note equivalent newman lemma 

winkler buchberger ha ars reduction relation partial order sn 
founded 
suppose implies equivalent confluent conversion dn 

see 
note strengthens newman lemma 

klop ha ars 
cofinal furthermore said property cp reduction graph possibly infinite reduction sequence fan cofinal 
countable ars cr cp 

ha ars 
define consistent pair elements convertible 
note confluent different normal forms consistent 
ha ff klop hb fi ars define conservative extension fi ff 
note conservative extension consistent ars consistent 
note confluent extension conservative 

newman wcr property ars ha 
see 
prove wcr wn sn give counterexample implication wcr wn sn 

bachmair dershowitz ha ff fi ars ff fi fi fffi 
terminology bachmair dershowitz fi quasi commutes ff 
see 
prove fi ff sn iff fi sn 
definition fi ff see exercise 

klop ha ff hb fi ars 
maps ff fi reductions lifted 
see 
prove sn implies sn 

ha ff fi ars reduction relations ff fi ff fi transitive 
ff fi sn ff sn fi sn 
hint infinite version ramsey theorem set notation denote set ffa bg bg element subsets furthermore set natural numbers 
theorem partitioned subsets term rewriting systems infinite 
exercise reformulates slightly generalizes exercise 
ha ff fi ars 
definition ff fi ff modulo fi reduction relation fi fffi ff fi iff fi ff fi note ff relatively terminating sense exercise iff ff fi sn 
definition fi called respect ff fi fi ff fi ff fi 
ff fi prove ff fi sn ff wcr fi non splitting ff fi confluent 
basic notions syntax term rewriting systems term rewriting system trs pair sigma alphabet signature sigma set reduction rules rewrite rules alphabet sigma consists 
countably infinite set variables denoted 
non empty set function symbols operator symbols equipped arity natural number number arguments supposed 
may unary binary ternary function symbols ary called constant symbols 
set terms expressions sigma ter sigma defined inductively 
ter sigma 
ary function symbol ter sigma ter sigma 
arguments term 
terms containing variable called ground terms closed terms ter sigma set ground terms 
terms variable occurs twice called linear 
klop contexts terms containing occurrence special symbol denoting empty place 
context generally denoted 
ter sigma substituted result ter sigma said subterm notation 
context trivial context notion subterm precise distinguish occurrences subterms symbols term easy define notion occurrence formally sequence numbers denoting position term satisfied informal treatment 
example 
sigma fa arities respectively 
non linear term linear term ground term context subterm having occurrences 
substitution oe map ter sigma ter sigma satisfies oe oe oe ary function symbol 
oe determined restriction set variables 
write oe oe reduction rule rewrite rule pair terms ter sigma 
written reduction rule get name write conditions imposed 
lhs left hand side variable 
variables right hand side contained reduction rule determines set rewrites oe oe substitutions oe 
lhs oe called redex reducible expression precisely redex 
redex oe may replaced contractum oe inside context gives rise reduction steps step rewritings oe oe call step reduction relation generated concatenating reduction steps possibly infinite reduction sequences delta delta delta reductions short 
delta delta delta write reduct accordance notations concepts introduced section 
example 
consider sigma example 
sigma trs specifying natural numbers addition multiplication successor zero reduction rules table 
reduction term rewriting systems table step bold face redex rewritten 
note reduction 
obviously trs sigma corresponding ars ter sigma 

careful may big difference discusses trs sigma consisting terms trs restricted ground terms see example 
adopt convention sigma corresponding ars mentioned write sigma ars ter sigma 
meant 
associated ars notions considered section cr un sn 
carry trs 
example 
sigma trs example consider sigma fa extra rule expresses commutativity addition 
sigma wn term normal form 
sigma restriction ground terms wn 
sigma sn sigma longer witnessed infinite reductions possible reduction graph 
bottom term reduction graph normal form 
sorted term rewriting systems trs sigma just defined called homogeneous ganzinger giegerich correspond algebraic data type specifications replacing signature sigma klop just sort mentioned 
straightforward extend previous definitions heterogeneous sorted case 
definition term formation usual sorted data type specifications left reader 
stick homogeneous case note extends heterogeneous case respect theory chapter course extension heterogeneous case presents area new features problems see ehrig mahr treatment sorted specifications rewriting 
semi thue systems semi thue systems sts defined viewed ways trs 
demonstrate 
aba bab rule sts 
corresponds trs unary function symbols constant reduction rule 
reduction step translates reduction step 
easy see translation gives isomorphism precisely restriction ground terms 

second way sts correspond trs introducing associative concatenation operator letting symbols sts correspond constant symbols trs 
fact natural correspondence way requires introduce equational trs 
see bachmair plaisted plaisted 
term rewriting systems applicative term rewriting systems important trs special binary operator called application ap 
combinatory logic cl rewrite rules table 
constants 
uses ap ap ap ap ap ap ap ap ap table infix notation delta ap case rewrite rules cl read follows delta delta delta 
delta delta delta delta delta delta table ordinary algebra dot suppressed notational simplification pairs brackets dropped convention association left 
restores missing brackets choosing step restoration leftmost possibility 
rules xz yz kxy ix table note xz yz restores xz yz yz 
likewise kxy restores kx xy 
course bracket pairs dropped restored xz quite different xz yz 
note contain redex ix 
convenient fiction view equations operators variable arity operators may followed arbitrary number arguments 
needs case arguments rewrite rule klop st example 
sii sii sii sii sii sii sii sii 
term sii sii reductions constitute interesting reduction graph see 
trs cl universal computational power partial recursive function natural numbers expressed cl feature turner cl implement functional programming languages 
extension cl called skim machine applicative trs see table 
note trs infinitely constants apart constants eq constant infinitely reduction rules rules rule schemes plus stands reduction rules plus plus plus fact extra constants skim reasons efficient implementation defined defining ks ks kx yz kx yz yz yz term rewriting systems xz yz kxy ix yz uz pxy cond true xy cond false xy plus times delta eq true eq false table 
likewise defining bbs kk reader may check 
definitions may consult barendregt hindley seldin 
harmless mix applicative notation usual cl test syntactical equality table 
xz yz kxy ix table care taken consider trs table 
xz yz kxy ix table constant binary operator subject rewrite rule full notation ap ap trs klop different properties shall see trs confluent second 
interesting example trs mixed notation weak categorical combinatory logic plays important role implementations functional languages see curien hardin id ffi yz st snd hx 
xz yz app xy yz table id st snd app constants ffi binary function symbols unary function symbol 
note st snd binary symbols app underlying application operator called cl ap 
disjoint sums term rewriting systems view need modularisation data type specifications helpful properties trs inferred validity parts trs 
simplest possible definition parts obtained concept disjoint sum trs definition 
trs 
disjoint sum phi trs obtained disjoint union alphabets disjoint function constant symbols common disjoint sum ordinary union take renamed copies copies disjoint alphabets define phi union copies 
useful fact toyama theorem 
phi confluent iff confluent 
confluence modular property 
think true termination sn toyama gives simple counterexample take ff yg term rewriting systems sn phi infinite reduction delta delta delta counterexample confluent may conjecture confluent terminating cr sn complete modular property phi complete iff 
case counterexample barendregt klop adapted toyama see toyama shows eleven rules rules similar counterexamples additional property reduced irreducible meaning sides rule normal forms respect rules see definition accurate definition toyama ganzinger giegerich 
complete phi exercise 
simpler counterexample 
slightly adapted reads klop complete disjoint sum 
see consider term show cyclic reduction 
counterexamples involve non trs 
essential theorem indicates 
define concept definition 
reduction rule left linear linear term 

trs left linear reduction rules left linear 
theorem 
toyama klop barendregt trs 
phi complete iff complete 
useful information concerning inference sn sn property separately rusinowitch middeldorp terms collapsing duplicating rewrite rules 
definition 
rewrite rule collapsing rule rule variable 

rewrite rule duplicating rule rule variable occurrences example 
rule rule 
theorem 
trs property sn 

contain rules phi sn 

contain rules phi sn 

trs contains rules phi sn 
statements proved rusinowitch statement proved middeldorp 
exercise 
prove wn modular property 
useful fact proved middeldorp un modular term rewriting systems property 
theorem 
phi un iff 
proof theorem employs lemma independent interest see proof sketch exercises 
exercises 
middeldorp 
trs 
ter denotes equivalence class respect convertibility ft set variables occurring ev set essential variables defined 
term essential variables xn non essential variables ym prove arbitrary terms sm 

property un unique normal forms 
show normal form essential variables 

contain ground term contains constant symbol 
show convertibility class contains term having essential variables 

property un contain ground term 
show choice function ter ter selecting equivalence class term contains normal form oe contains essential variables 

lemma 
trs property un containing ground term 
extended confluent trs alphabet convertibility normal forms 
prove lemma considering originating adding set reduction rules ft ter 
note added reduction rules merely reduction steps 

lemma 
trs property un 
extended confluent trs convertibility normal forms 
prove lemma follows case contains constant applies add constant rule yield apply exercise 
middeldorp disjoint trs having property un 
show phi property un 
proof sketch previous exercise extend confluent convertibility normal forms 
taken disjoint 
toyama theorem phi confluent un 
consider ter phi normal forms convertible phi obviously convertible phi proof concluded showing klop normal forms phi phi un 
examples 

consider cl phi fd combinatory logic binary test syntactic equality table 
note disjoint sum 
shall see section cl confluent 
trivially rule trs fd confluent 
toyama theorem disjoint sum confluent 

contrast union cl combinatory logic test syntactic equality table confluent 
see klop 
note combined trs merely union disjoint sum cl function symbol ap common hidden applicative notation 

application toyama theorem consist rules true false true false constants gamma gamma ternary function symbol 
cl phi confluent 
analogous situation essential gamma gamma construct ternary operator 
corresponding operator resulting trs confluent 

different approach modularity taken kurihara 
disjoint trs allowed approach perform arbitrary interleaving steps steps obligation long possible rules trs 
rule say applied term normalize respect applying rules vice versa 
formally define relations terms ter phi normal form furthermore union kurihara prove theorem 
disjoint trs 
relation terminating sn 

disjoint complete trs 
relation complete 
note need sn 
sketch proof 
assuming part theorem follows easy steps observe un cr un sn cr general fact ars 
prove un consider reductions delta delta delta term rewriting systems delta delta delta normal forms 
original reductions sn terms normal forms respect union 
toyama theorem exercises 
middeldorp 
show modularity wn exercise corollary theorem 

give example disjoint confluent trs confluent 
solution middeldorp question kurihara ff bg fe xg 
terms different normal forms 
trs consider termination properties combined trs disjoint sums 
results area see dershowitz bachmair dershowitz toyama heterogeneous trs ganzinger giegerich 
confluence properties combined trs disjoint sums include facts exercises require concepts sequel notion overlapping reduction rules critical pairs calculus 
exercise 
vuillemin toyama trs 
define orthogonal overlap rule 
may critical pairs due overlap rules rules 
prove theorem 
left linear confluent trs confluent 
proof sketch 
prove reductions commute reductions commute reductions commute reductions 
order prove sufficient prove 
prove need left linearity orthogonality requirements 
result follows application hindley rosen lemma exercise 
orthogonality obviously necessary 
note left linearity dropped see example 
klop exercises 
prove theorem 
left linear confluent trs 
signature disjoint calculus contain application operator 
phi disjoint sum calculus confluent 
proof sketch strategy exercise 
semantics term rewriting systems enter subject semantics trs see boudol simple 
concerns semantical consideration great help proof un cr theorem 
algebra trs normal forms ffl property un uniqueness normal forms 
phrase algebra trs means signature reduction sound respect ir implies ffl terms need ground terms 
semantic confluence tests plaisted setting equational trs treated 
decidability properties term rewriting systems adopt restriction subsection trs finite alphabet finitely reduction rules 
undecidable trs property confluence cr holds 
trs terms trs restricted ground terms 
ground trs trs rule terms ground terms confused confluence decidable dauchet tison dauchet 
termination property sn situation 
undecidable general trs trs rule see proof dauchet 
ground trs termination decidable huet lankford 
particular trs may undecidable terms convertible term normal form term infinite reduction 
trs properties undecidable combinatory logic cl table 
exercise 
ter say sn admits infinite reduction delta delta delta prove sn redex term rewriting systems sn 
fact redex contractum sn 
exercises 
huet lankford 
ground trs finitely rules ft ng 
prove sn ng context hint previous exercise induction 

conclude sn decidable finite ground trs 
exercise 
undecidability sn exercise outline proof sn undecidable property finite trs translation problem uniform halting problem turing machines 
proof slight simplification huet lankford 
proof employs constants unary function symbols binary function symbols 
concerned number reduction rules employed translation turing machine trs undecidability proof trs reduction rules establishing sn undecidable trs rules see dershowitz 
complicated proof rule trs property sn undecidable see dauchet 
orthogonal rule trs sn undecidable shown dauchet 
property orthogonal defined chapter 
deterministic turing machine consists triple hq ffii set fq states smg set tape symbols empty symbol blank ffi partial function transition function theta theta theta fl rg 
represents move left right 
instantaneous description configuration element qs known notation regular expressions 
configuration pictured understanding configuration qw head state scans symbol right furthermore infinite portions tape left right supposed blank 
equivalent configurations arise appending left right configuration finite portions empty tape elements transition function ffi determines transition rules form ae ffi ae ts ffi transition rule type type move right see second type type move left 
rule type rendered qs ae ffi transition rules may applied context giving rise transitions configurations appending words left right 
klop transition rule ae tr generates transitions ae tw note transitions operate fact equivalence classes configurations 
translate terminology trs 
associate turing machine hq ffii trs rm follows 
binary function symbol denote letter 
corresponds unary function symbol denoted letter 
furthermore alphabet rm contains constant symbol xi 
word translated term oe follows oe xi empty word oe sw oe translation baa xi 
sequel exercise suppress parentheses association right rendering xi baa xi 
term rewriting systems configuration qw translated oe gamma oe 
gamma reversed 
reason reversal clear 
configuration translated xi baa xi 
define translation transition rules reduction rules rm transition rules type qs ae correspond reduction rule sy case rule reads ae add reduction rule xi xi sense second rule degenerate case conceiving xi potentially infinite portion tape satisfying equation xi xi clear rule arises 
rule type ae ts correspond reduction rule tx sy ts extra rules degenerate cases 
ae ts fact qs ae ts add xi sy xi ae ts fact tq ae ts add tx xi ts xi ae ts ae add xi xi xi xi transition rule ae corresponds reduction rules 

hard prove configurations ff fi ff ae fi oe ff oe fi 
prove trs term problem determine infinite reduction undecidable 
means algorithm accepts inputs pairs trs finite set rewrite rules term ter yields output answer infinite reduction 
reduce problem known undecidable halting problem turing machines empty tape initial configuration 

ground term rm form terms occurs call term restricted corresponds klop configuration restriction 
prove term rm infinite reduction rm restricted ground term rm having infinite reduction yielding corresponding infinite run turing machine 
prove referring known undecidable uniform halting problem turing machines problem determine trs sn strongly normalizing undecidable 
uniform halting problem turing machines problem decide turing machine halts input initial configuration 
termination proof technique newman lemma wcr sn cr shows termination sn useful property 
general noted exercise undecidable trs sn instances sn proved various techniques developed 
see huet oppen dershowitz 
section powerful termination proof techniques method recursive path orderings developed dershowitz basis beautiful theorem kruskal 
see similar concept path subterm ordering plaisted discussed rusinowitch 
fact presentation bergstra klop complicated inductive definitions usual presentation replaced reduction procedure taste easier grasp 
definition 
set commutative finite trees nodes labeled natural numbers 
example see 
tree denoted 
commutativity means arguments may permuted denotes commutative tree 

set trees nodes may marked single example see tree denoted notation 
written 
elements stands definition 
define reduction relation follows 

place marker top term rewriting systems 
copies lesser top copies 
push marker copies 
select argument kg understood reductions may take place context write transitive reflexive closure 
example 
displays reduction clearly reduction sn consider second step right hand side contains copy left hand side 
theorem 
relation restricted founded partial ordering 
rephrased relation restricted sn 
infinite sequence delta delta delta terms markers 
proof theorem kruskal tree theorem give main argument 
order introduce notion embedding definition trees precise 
element tis pair hd ff finite set fff fi fl distinguished element ff called root top partially ordered require 
ff fi fi 
fi fl fi ffi fl ffi ffi fl fi fl ffi klop set called nodes 
furthermore map assigning labels natural numbers nodes notation ff fi supremum upper bound ff fi 
actual names ff fi nodes important suppressed pictorial representation 
definition 
say embedded notation map nodes nodes 
injective 
monotonic ff fi ff fi 
sup preserving ff fi ff fi 
label increasing ff ff labeling maps respectively ordering natural numbers 
superfluous follows 
example 
embedding shows 

note 
term rewriting systems clearly partial order satisfies remarkable property theorem 
kruskal tree theorem sequence trees proof theorem kruskal extremely complicated 
proofs dershowitz dershowitz jouannaud 
see exercise detailed proof sketch restricted case sufficient purpose 
proposition nontrivial prove proposition 
strict partial order 
transitive reflexive closure 
combining theorem 
suppose infinite sequence delta delta delta delta delta delta delta delta delta impossible strict partial order 
application dershowitz 
trs table 
prove sn 
choose weight assignment 

klop 



table 

reduction corresponds reduction sn follows second rule 

termination proof method rule left hand side embedded sense definition right hand side 
extension kruskal theorem leading method deal case see kamin evy 

example method directly trs corresponding process algebra axiomatizations bergstra klop 
instance axiom system pa rewrite rules 

delta delta wants order operators follows delta get stuck third rule re emergence heavy operator bergstra klop solution adopted term rewriting systems introduce infinitely operators refers complexity measure actual arguments operators reduction 
fact operator contribute problem forgetting writing delta example dershowitz problem takes form solved lexicographical combination recursive path orderings termination proof bergstra klop amounts example 
define norm terms length symbols introduce normed operators hn order operators hn hn gn replace term subterm jsj jrj likewise 
recursive path ordering applicable 
caution required norm chosen norm term increased reduction subterm 
reason length symbols process algebra example 

third example proof method associativity rule delta delta delta delta 
problem occurs trs ackermann function need lexicographic path ordering kamin evy see dershowitz 
essentially says reduction complexity argument outweighs increase strictly bounded complexity original term second argument 
fact ordering effect easily described framework reduction markers explained give commutativity trees tand require embedding definition respects left right ordering kruskal tree theorem works case noncommutative trees 
rules definition restricted arities operators respected definition operators treated 
rule klop 
add rules definition amended rule 
simplify left argument gamma copies example exercise 
exercise outline short proof restricted version kruskal tree theorem sufficient termination proofs trs function symbols arities uniformly bounded natural number 
may infinitely function symbols gn hn preceding 
fortiori case trs finite alphabet 
proof similar dershowitz proof dershowitz jouannaud similar short cut appealing special case tree theorem known higman lemma 
proofs originally due nash williams 
define 
branching degree node number immediate successor nodes 
subset trees nodes branching degree likewise define outline proof kruskal tree theorem tis restricted 
claim 
infinite sequence natural numbers weakly ascending infinite subsequence 
means subsequence proof simple 

definition 
number nodes 
notation infinite sequence trees written initial segment tn gamma set infinite sequences trees sequence minimal sn tn furthermore say distance gamman induces metric term rewriting systems 
claim 
non empty closed metric just defined 
contains minimal element respect 
proof claim easy 

notation 
means subsequence 
subsequence proper subtree write call 
see 

definition 
chain embedding relation kruskal tree theorem 
suppose proof contradiction counterexample sequence restricted version kruskal tree theorem want prove 
set sequences supposed non empty 
note closed sense definition 

claim 
minimal element suppose 
stronger contains subsequence chain 
proof claim 
note minimal element exists assumption claim 
claim 
proper subtree tk consider sequence tk gamma followed minimality sequence contains embedded pair elements earlier embedded 
embedded pair occur prefix form contain embedded pair embedded pair occur postfix part claim suppose contain infinite chain subsequence 
contains infinite number finite chains starting right previous finite chain maximal sense klop prolonged element occurring right consider elements finite chains 
elements constitute infinite containing claim embedded pair 
means maximal finite chains prolonged contradiction 

claim 
minimal suppose contains infinite chain subsequence 
proof claim trivial 
apply sieve procedure minimal counterexample sequence claim take subsequence root labels weakly ascending 
take subsequence property branching degrees roots weakly ascending sequence 
claim contains infinite embedding chain 
freeze elements impose ordering successors node arbitrary way 
frozen trees longer commutative trees speak second arguments node 
argument node ff subtree root successor node fi ff 
step sieve procedure done considering sequence arguments roots elements contains infinite chain 
accordingly thin subsequence sequence property arguments form chain 
thinned considering sequence second arguments sequence contains chain thinning accordingly yields subsequence steps kind 
result chain roots satisfied embedding condition form weakly ascending chain arguments related chains 
see 
contradicts assumption contains embedded pair 
empty restricted version kruskal tree theorem proved 
exercise 
kruskal exercise introduce terminology quasi orders formulate kruskal tree theorem 
term rewriting systems 
definition 
binary relation quasi order qo reflexive transitive 
relation trs qo 
addition anti symmetric partial order po 

definition 
hx qo 
subset called cone cone generated notation set fx xg 
intersection cones containing cone finitely generated finite 
definition 
hx qo po respectively 
hx order wqo partial order respectively cone finitely generated 

definition 
hx qo 
subset anti chain elements pairwise incomparable prove lemma 
lemma 
hx qo 
conditions equivalent hx wqo contains infinite descending chains delta delta delta anti chains finite infinite sequence elements kruskal tree theorem stated reformulated follows ht quasi order 
prove ht fact partial order kruskal theorem states ht partial order 
exercise 

show partial order ht linear order 

show linear order 
founded theorem corresponds ordinal 
connections ordinal gamma impredicative ordinal see dershowitz 
kruskal tree theorem connection large ordinals version tree theorem independent peano arithmetic see nski gallier 
exercise 
multiset orderings useful termination proofs exercises multiset orderings particular cases founded ordering ht discussed restricting domain 
multisets 
hx strict partial order 
multisets multiset extension notation hx obtained follows 
elements finite sets elements understanding multiplicity occurrences taken account ordinary sets 
multiset denoted square brackets 
klop different multisets denote multiset 
stated differently multiset finite sequence elements order occurrences sequence disregarded 
giving formal definition left reader 
multiset known bag 
exercise ff fi variables multisets 
define relation elements clauses bn bn ff fi ff fl fi fl 
denotes multiset union defined obvious way union multiplicities elements respected 

multiset gets smaller replacing element arbitrarily possibly elements original ordering 
converse furthermore define transitive closure prove statements hx strict partial order multiset extension hx hx linear order hx dershowitz manna hx founded hx founded 
hx founded infinite descending chains 
hx founded linear order order type ff 
hx order type ff 
nested multisets 
hx nested multisets notation hx defined follows 
domain set inductively xn delta delta delta xn xn note elements represented finite commutative trees terminal nodes labeled elements non terminal nodes label representing multiset operator 
depth ff stage inductive definition generated tree representation maximum lengths branches tree corresponding ff furthermore ordering relation extending satisfying ff multisets ff gamma ff fi fi ff fi fi ff fi ff fi ff fl fi fl multisets ff fi fl gamma term rewriting systems hx prove hx hx linear order hx 
ff fi hx prove depth ff greater depth fi ff fi 
dershowitz manna hx founded hx founded 
hn natural numbers usual ordering 
prove hn nested multisets natural numbers fact restriction recursive path ordering ht nonterminal nodes tree representation ff taken 
ff fi ff fi ff fi show order type founded linear ordering hn ffl note hn isomorphic hf occurrence restriction fact empty relation 
gives example multisets ff fi ff fi equivalently ff fi 
labels nodes taken omitted 
note procedure markers may employ clauses definition clause 
completion equational specifications section give knuth bendix completion equational specifications 
introduce concept 
equational specifications syntax semantics short introducing syntax equational specifications equational specification just trs orientation 
precisely equational specification pair sigma signature klop alphabet sigma section trs sigma set equations terms ter sigma equation derivable equations write sigma formally derivability defined means inference system table 
sigma sigma sigma oe oe substitution oe sigma sigma sigma ary sigma sigma sigma sigma sigma sigma sigma table exercise 
equational deduction systems inference system table slightly different follows 
prove equivalence versions system 
axioms addition equations reflexivity rules symmetry transitivity substitution substitution term rewriting systems denotes substitution occurrences 
assignment notation chosen avoid usual confusion 
equivalent formulation combine substitution rules substitution sigma signature sigma algebra set functions ary function symbol sigma 
ary constant 
equation ter sigma assigned meaning interpreting function symbols corresponding functions variables implicitly universally quantified 
universally quantified statement corresponding ter sigma true write say valid called model set equations equation valid abbreviation variety sigma algebras defined equational specification sigma notation alg sigma class sigma algebras alg sigma set equations sigma terms write sigma known completeness theorem equational logic birkhoff theorem 
sigma equational specification 
ter sigma sigma sigma validity problem uniform word problem sigma equation sigma terms decide sigma birkhoff completeness theorem equational logic amounts deciding sigma state complete trs trs sn cr important 
suppose equational specification sigma find complete trs sigma terms ter sigma finitely rewrite rules positive solution validity problem 
decision algorithm simple 
reduce respective normal forms 
compare iff faced question find complete trs set equations holds 
general possible klop finite solvable validity problem 
famous example unsolvable validity problem set equations obtained cl combinatory logic tables replacing see table 
xz yz kxy ix table proof unsolvability see barendregt 
validity problem sigma solved providing complete trs sigma sigma 
note equational specifications sigma decidable validity problem complete trs sigma satisfying see exercise 
exercise 
sigma specification equations prove complete trs terms ter sigma 
consider supposed complete trs normal forms open terms 
important realize considered equations possibly open sigma terms possibly containing variables 
restrict attention equations ground terms considering word problem sigma decidability problem equation ground terms ter sigma decide sigma equivalently sigma 
word problem complete trs provide positive solution 
fact require completeness sn cr terms ground terms 
see example example difference 
may exercise complete trs respect terms exist trs complete restriction ground terms 
exercise 
consider specification previous exercise find trs sigma sigma restriction sigma ground terms complete 
term rewriting systems 
note finite equational specifications sigma decidable word problem ground terms complete trs complete respect ground terms exists 
strengthens observation exercise 
simplest sigma specification consisting single binary commutative operator constant equations fx xg 
exercise works simpler specification complete trs open exercise stronger result trs exists complete ground terms ground terms exercise 
bergstra klop prove fact theorem 
sigma specification sigma fx xg 
finite trs restriction ground terms complete coincide ground terms 
proof sketch 
define terms tn tn tn 
suppose trs finitely rewrite rules coincide ground terms 
maximum depths lhs rewrite rules 
depth refers height corresponding term formation tree 
consider terms tn tn clearly fact ft equivalence class convertibility class 
rewrite rule redex redex elements convertibility class say redex 
easily show sn ground terms 
term rewriting initial algebra semantics explicit connection term rewriting initial algebra semantics 
suppose familiarity concept initial algebra class models equational specification sigma variety alg sigma defined universal properties terms homomorphisms 
see meinke tucker goguen meseguer 
initial algebra determined isomorphism speak initial algebra notation sigma 
known sigma obtained set ground terms ter sigma dividing congruence relation equate initial algebra sigma quotient algebra ter sigma suppose sigma trs sigma coincides 
initial algebra sigma van written ter sigma complete trs sigma fact computable algebra 
merely rephrasing word problem ground terms sigma solvable 
noted exercise reverse necessarily case sigma computable initial algebra exist klop complete trs signature 
remarkable theorem bergstra tucker states allow extension signature functions constants new sorts complete trs 
result follows simulation turing machines trs consisting rules dershowitz 
precisely definition 
algebra alg sigma minimal isomorphic quotient algebra ter sigma congruence particular sigma minimal algebra 
words algebra minimal elements generated functions constants signature 

minimal algebra computable equality decidable relation ground terms ter sigma decidable 
theorem 
bergstra tucker minimal sigma algebra sigma finite signature 
equivalent 
computable algebra 
extension sigma finite sigma obtained adding function constant symbols complete trs sigma sigma sigma equational specification obtained viewing reduction rules equations sigma restriction signature sigma 
reduct see meinke tucker initial algebra complete trs 
trs theorem ground complete complete respect terms 
orthogonal trs defined chapter orthogonal trs possessing ground term ground completeness implies completeness 
functions including constants ary functions added sigma referred hidden functions 
note statement theorem new sorts needed theorem bearing homogeneous sorted case considering chapter 
information concerning connection term rewriting computability aspects initial algebra semantics final algebra semantics heterogeneous sorted case refer complete survey goguen meseguer 
critical pair completion resume question find complete trs case open terms henceforth equational specification sigma 
fact term rewriting systems knuth bendix completion algorithm trying 
explain essential features completion algorithm informal intuition guided completion equational specification groups delta delta delta delta delta delta table give equations sensible orientation 
delta 
delta 
delta delta delta delta note orientation rules forced restrictions rewrite rules section 
orientation rule direction just sensible 
rules confluent seen superposition 
redex delta unified nonvariable subterm redex delta deltaz underlined subterm result delta delta term subject possible reductions delta delta delta delta delta delta delta 
pair reducts delta delta delta called critical pair confluence property depends reduction possibilities terms pair 
formally definition reading easily digested 
concept general unifier refer section 
definition 
ff fi fl ffi rewrite rules ff unifiable renaming variables subterm fl variable non variable subterm 
means context non variable term general unifier oe fl oe ff oe term fl oe oe reduced possible ways oe fi oe fl oe ffi oe pair reducts hc fi oe ffi oe called critical pair obtained superposition ff fi fl ffi ff fi fl ffi rewrite rule furthermore require ff unifiable proper ff non variable subterm fl ff definition 
critical pair hs ti called convergent common reduct 
critical pair delta delta delta convergent delta delta klop normal form delta reduces normal form problematic pair terms delta delta problematic equality derivable common reduct respect reduction available far 
adopt new rule 
delta delta superposition rule delta delta delta delta delta yields critical pair hy delta ei reduced 
adopt new rule 
delta cancelled turn stage rule superfluous 
go searching critical pairs 
superposition delta delta delta delta delta adopt new rule 
delta cancelled superposition iy delta delta delta delta iy delta delta delta adopt new rule 
iy delta delta cancelled superposition delta delta adopt new rule 
delta superposition delta delta adopt new rule 
cancel rule longer necessary ensure critical pair hy delta ei common reduct delta delta likewise rule 
superposition delta delta adopt new rule 
cancel superposition delta eand delta delta adopt new rule 
delta superposition delta delta delta delta delta delta delta adopt new rule 
delta delta superposition delta delta delta delta delta delta delta delta delta adopt new rule 
delta delta delta delta cancelled superposition delta delta delta delta delta delta delta delta delta delta delta adopt new rule term rewriting systems 
delta delta cancelled cancel superposition delta delta delta delta delta delta delta delta adopt new rule 
delta delta cancel moment trs convergent critical pairs 
significance fact stated lemma 
lemma 
critical pair lemma knuth bendix huet trs wcr iff critical pairs convergent 
exercise 
prove critical pair lemma 
proof hard distinguishing cases le ch proof 
care taken deal repeated variables left hand sides reduction rules 
exercise 
prove critical pair lemma trs finitely rules sn wcr cr decidable 
trs rewrite rules table wcr 
delta delta delta delta delta delta delta delta delta delta delta delta delta delta table furthermore prove sn knuth bendix ordering treated recursive path ordering explained section 
fact need extended lexicographic version due presence associativity rule 
newman lemma cr complete 
conclude validity problem equational specification groups solvable 
theorem knuth bendix immediate corollary critical pair lemma newman lemma corollary 
knuth bendix trs sn 
cr iff critical pairs convergent 
klop completion procedure hand naive systematic searching critical pairs especially guided intuitive sense direction adopt generating new rule 
cases possibility delta delta reduction rule due restriction lhs single variable case direction plausible length decreasing 
direction delta delta led disastrous complications described knuth bendix 
problem direction choose solved actual knuthbendix algorithm variants reduction ordering terms 
term rewriting systems definition 
reduction ordering founded partial ordering terms closed substitutions contexts oe oe substitutions oe contexts 
immediately fact noting sn satisfies requirements definition proposition 
trs sn iff reduction ordering ff fi rewrite rule ff fi simple version knuth bendix completion algorithm input equational specification sigma reduction ordering ter sigma program computes output complete trs ter sigma sigma choose equation reduce respective normal forms respect gamma fs tg ff fi ff fi failure fi cp fp hp qi critical pair rules ff fig fff fig cp gamma fs tg fi od success klop simple version knuth bendix completion algorithm 
reduction ordering ter sigma input algorithm finding matter ingenuity experimentation 
reduction ordering computer systems knuthbendix completion equipped interactive question orientation equations rewrite rules great help 
program possibilities may terminate successfully loop infinitely fail pair terms oriented 
third case gives important restriction knuth bendix algorithm equational specifications commutative operators completed 
exercise 
show exists complete trs specification abelian groups table 
consider supposed complete trs normal forms open terms 
gammax table wants deal equational specifications having commutative associative operators exercise modulo equations associativity commutativity 
completion modulo equations refer peterson stickel jouannaud kirchner 
case resulting trs complete 
show requires non trivial proof see huet 
section give formulation knuth bendix completion bachmair dershowitz hsiang streamlines considerably kind correctness proofs 
completion program simplify rewrite rules 
optimization performed termination program follows 
definition 
trs called irreducible rewrite rule ff fi holds 
fi normal form respect 
ff normal form respect gamma fff fig exercise 
prove irreducible ground trs complete 
hint exercise corollary 
term rewriting systems theorem 
complete trs 
find irreducible complete trs coincide 
exercise 
proof theorem line 
trs fff fi ff fi fi normal form fi respect rg 
may assume contain rewrite rules renaming rewrite rule 
define fff fi ff normal form respect 
proof follows easy proofs sequence statements 

define set normal forms 
sn 
ir normal form ir 

cr 

define set normal forms 
sn 
ir normal form ir 

cr 
irreducible 
optimizing trs output simple completion algorithm completion efficient completion 
contains efficient knuth bendix completion algorithm successful termination yields irreducible trs output 
conclude section theorem stating knuth bendix completion algorithm equational specification reduction ordering generate different complete irreducible trs 
dershowitz marcus tarlecki theorem originally due proved 
definition 
reduction ordering 
call trs compatible rewrite rule ff fi ff fi klop efficient version knuth bendix completion algorithm input equational specification sigma reduction ordering ter sigma output complete irreducible trs ter sigma sigma choose equation reduce respective normal forms choose equation reduce respective normal forms respect gamma fs tg ff fi ff fi failure fi ffl ffi fl ffi ffi normal form ffi respect fff cp fp hp qi critical pair rules ff fig cp ffl ffi fl ffi fl reducible ff fig gamma fs tg fff fig gamma ffl ffi fl reducible ff fig fi od success theorem 
complete irreducible trs compatible reduction ordering 
suppose define convertibility 
equal modulo renaming variables 
exercise 
huet exercise collect criteria confluence terms properties critical pairs counterexamples term rewriting systems huet 
questions listed far know open 
see table 
table 
row table critical pair lemma stated critical pair ht si convergent notation wcr holds 
cr need hold counterexample trs constants rules 
row table theorem knuth bendix 

row ll means trs left linear rl right linear right hand side reduction rule contains repetitions variable 
strongly confluent defined exercise 
furthermore define definition 
trs strongly closed critical pair ht si prove strongly closed sufficient guarantee cr considering non left linear trs ff trs left linear right linear strongly closed cr holds proof see huet fact strong confluence 

rl dropped 
nice counterexample huet 
evy contains left linear rules 
see 
check cr hold trs strongly closed 
klop 
remarkable fact trs left linear critical pair ht si jj wcr holds cr 
parallel reduction denotes sequence redex contractions disjoint occurrences 

replace cr question open 
likewise replaced replaced 
exercise 
knuth bendix contains completions specifications closely resemble specification groups see table called theory theory 
prove completions delta derivable theory theory equations delta delta derivable 
furthermore theory equation delta derivable 
theories different determine different varieties algebras 
fact note variety groups proper subset variety algebras algebras varieties incomparable respect set inclusion 
formulation completion section taken klop middeldorp 
completion algorithms figures differing order execution ways optimization 
question prove algorithms correct deliver successful termination trs equality generated original set equations family completion algorithms needs extract principles algorithms done bachmair dershowitz hsiang 
method proving correctness completion algorithms starts derivation system objects pairs term rewriting systems group theory theory theory delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta completion completion completion delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta table derivation step preserves equality coincides sequence derivations actual proofs equations getting better better optimal proof format rewrite proof 
see shown pair gradually transformed pairs trs pair way example proofs get oriented rewrite form 
direction downward horizontal steps direction 
crucial ideas approach 
concept derivation system pairs discussed 
concept ordering proofs equations degree orientation 
proceed formal explanation 
klop definition 
sigma equational specification 
application exactly equation write iff exists context substitution oe equation oe oe definition 
sigma equational specification trs signature sigma 
proof equation terms ter sigma sequence terms gamma gamma gamma 
subproof proof notation means subproof 
occurrence subproof 
proof form ir jr called rewrite proof 
definition proof contains example proof 
knuth bendix completion aims transforming proof term rewriting systems rewrite proof inference system knuth bendix completion 
objects system pairs 
inference system bc basic completion rules see table reduction ordering 
orienting equation fs tg fs tg adding equation fs tg simplifying equation fs tg fu tg deleting trivial equation fs sg table notation means symbol denotes disjoint union 
bc derivation finite infinite sequence delta delta delta write transitive closure 
easily seen derivation step sn furthermore coincides proofs general simpler example adding equations inference rule subproofs replaced formalize reduction complexity introduce orderings proofs 
definition 
binary relation ae proofs monotonic ae implies ae proofs relation ae stable ae implies klop oe oe oe ae oe oe oe proofs contexts substitutions oe 
proof ordering stable monotonic founded partial ordering proofs 
exercise 
illustrate concept proof ordering give alternative proof newman lemma notion 
alternative respect proofs seen literature 
proof known 
see exercise multiset notations 
trs sn wcr 
sn proof conversion sn define complexity proof multiset sn 
ordering ae induced multiset extension notation 
ae iff 
means ae multiset arises multiset repeatedly replacing element multiset arbitrarily elements sense founded ordering repeatedly replacing term multiset terms number proper reducts 

prove ae proof ordering 

sn rewrite proof proof equation sn ae 
hint consider peak conversion replace valley wcr 
see 

conclude cr 
proof ordering completion reduction ordering elementary steps proof 
term rewriting systems definition 
complexity proof multiset gamma gamma complexity elementary proof step defined gamma gamma gamma gamma gamma gamma 
compare complexities elementary proof steps multiset extension reduction ordering 
see exercise 
compare proof complexities multiset extension notation define 
definition 
proof ordering ae compatible bc implies proof equation exists proof ae proposition straightforward proof follows considering applying stability monotonicity suggests proofs reduced complexity application transformation step instance case see complexity subproof decreases complexity subproof 
decrease 
proposition 
ordering bc proof ordering compatible bc 
bc derivation delta delta delta proofs difficult corresponding proofs fairness property bc derivations implies proof equation rewrite proof simplified rewrite proof definition 
bc derivation delta delta delta called fair 

hc di ji cp 
cp set critical pairs rewrite rules critical pair arises equation time equation considered klop eventually oriented rewrite rule simplified deleted 
fact proved routinely 
proposition 
delta delta delta fair bc derivation proof rewrite proof exists proof completion procedure mean strategy applying inference rules bc inputs sigma reduction ordering order generate bc derivation delta delta delta 
inputs fair derivation may possible allow completion procedure fail 
say completion procedure fair generates fair derivations fails 
theorem 
bachmair dershowitz hsiang fair completion procedure fail input sigma 
generate pair term rewriting systems common reduct 
rn complete trs 
unification preceding sections completion algorithms subroutine determination general unifier terms 
section describe version unification algorithm due martelli montanari nondeterministic algorithm compute mgu phrased terminology rewriting 
start presenting rewrite rules syntactic unification extend rules include semantic unification unification 
syntactic unification presenting syntactic unification algorithm introduce concepts substitutions defined section homomorphisms respect term formation set terms ter trs ter 
composition substitutions oe usual functions ffi oe oe ter ffi oe written oe accordance earlier notation convention oe oe note notation unambiguous oe oe support substitution oe restriction oe set variables oe usually support finite case write oe abus de langage support finite list bindings terms variables fx renaming substitution bijective substitution 
implies renaming restricted set variables ar fx permutation ar 
note composition oe renamings oe renaming inverse oe gamma renaming oe exists renaming 
terms differing renaming oe renaming oe called variants 
terms oe substitution oe write relation partial ordering quasi ordering called subsumption relation 
easily proves ter variants 
substitutions oe write oe oeae substitution ae 
case oe called general 
overloading symbol cause confusion 
analogous case terms easily proves oe oe oe differ renaming oeae renaming ae 
klop call oe unifier set terms ft ng oe oe general unifier mgu unifier oe finite set terms unified unifier mgu unique modulo renamings 
task finding general unifier terms viewed task solving set equations ft elegant algorithm exploiting representation martelli montanari 
consists rules transform set equations 
conform notation equational logic programming holldobler write ft called equational goal 
empty goal empty set equations denoted algorithm transforms nondeterministically goals goals just logic programming intend sequence transformations empty goal ae ae delta delta delta ae ae denotes elementary derivation step equational goals 
ae steps may obtain sideeffect substitution oe denoted subscript step form ae oe derivation may form ae ae oe ae oe ae ae ae oe ae delta delta delta ae derivation sequences successful possible derivation stuck prolonged reach transformation rule applies 
case conclude sequence goal sequence got stuck symbol xi failure ae ae delta delta delta ae xi case successful derivation obtain harvest composing substitutions order appearance example oe oe oe delta delta delta substitution computed answer substitution successful derivation considering 
derivation rules equational goals constitute unification algorithm 
adaptations martelli montanari rules mm rules follows 
stands equational goal containing equation denote remaining equations goal 
term rewriting systems 
term decomposition ae 
removal trivial equations ae 
swap ae variable 
variable elimination ae fx tg fx tg oe oe oe oe oe abbreviate occurs 
note transformation rule substitution delivered 
known completeness theorem theorem 
unification theorem equational goal equivalent 
equations unified 
mgu oe oe oe oe oe 
derivation tree root constructed mm rules finite success branches yielding mgu equations computed answer substitution 
furthermore equations unified mm derivation tree root finite branches unsuccessfully 
clear meant statement theorem derivation tree arises rules applied nondeterministically 
original presentation martelli montanari rules included enhance efficiency pruning mm derivation tree unsuccessful subtrees 
don need completeness nondeterministic unification algorithm 
extending set rules deal unification omitted 
klop 
failure rule ae xi 
occur check ae xi hard prove mm rules terminating stated unification theorem 
see martelli montanari apt dershowitz jouannaud 
unifiable terms denote mgu particular mgu fs tg obtained performing mm transformations fixed strategy 
example 
want determine mgu terms 
mm rules yield successful derivation ae ae ae fz ae ae fx ae fu computed answer substitution fz gfx fz mgu original pair terms 

failing unification attempt ae ae fx yg ae xi semantic unification previous section algorithm solve equations syntactically particular case important problem solve equations semantically modulo equational theory reason semantic unification called unification 
term rewriting systems precisely presence equational theory equation want find substitutions oe ffl oe oe equivalently see theorem oe oe syntactic unification unification empty situation complicated case syntactic unification general general unifier oe really enter vast area unification theory see siekmann mention algorithms unification pertinent term rewriting 
algorithms operate assumption underlying equational theory complete trs corresponds orienting equality axioms rewrite rules 
important application knuthbendix completion prepares way equation solving delivering complete trs possible 
narrowing known technique solve equations presence equational theory uses narrowing transformation terms 
give intuitive explanation explains narrowing called narrowing 
sigma equational theory write set solutions equation foe oe oe solution oe substitution defined earlier map ar set variables ter sigma 
sub set substitutions sub oex denote foe xg 
noting oe oe oe oe principle possibility stepwise determination stepwise determination consists kind steps 
just described guess component oe solution narrow oe oe oe second apply equation sides equation consideration 
clearly step second kind preserves equality solution set 
iteration steps alternating steps kind steps second kind may reach solution set trivial equation sub oe oe oe oe oe oeoe oe oeoe delta delta delta delta delta delta oeoe delta delta delta oe solution set oeoe delta delta delta oe narrowing chain general element substitution oeoe delta delta delta oe word narrowing formal content denotes certain method klop term rewriting perform stepwise determination described 
narrowing step combines step kind second 
narrowing relation defined terms equations definition suppose trs equivalent coincides 
note narrowing generalization reduction reductions step trs narrowing step 
formally definition 
term contain subterm context 
presence trs say nonvariable subterm rewrite rule oe mgu oe notation oe 
drop mention oe 
extend narrowing transformation defined terms equations oe oe likewise oe said narrowing steps equations 
seen word narrowing refers solution sets oe oe oe oe oe note narrowing cuts search space determining solution set directional aspect trs second performing substitutions small general possible 
price paid ensure completeness term rewriting systems narrowing method solving equations require underlying trs 
complete 
precisely stated order solve equation equational theory corresponding complete trs construct possible narrowing derivations starting equation equation obtained syntactically unifiable 
fact sure find possible solutions equation 
precise definition 
definition 
oe substitutions equational theory 
oe ae ae oe 
ae oe means ae oe 
completeness theorem narrowing plus syntactic unification 
see martelli rossi theorem 
see holldobler proof theorem related facts 
formulation theorem refers slightly general setting discussion narrowing narrowing procedure may applied single equations equational goals theorem 
complete trs 
suppose oe oe oe solution equation 
successful derivation sequence starting narrowing steps mm steps computed answer substitution sequence improves oe oe 
note subscript oe necessary 
example ff bg 
oe fx ag solution computed answer substitution find fx bg 
completeness necessary 
see confluence necessary consider trs fa cg confluent 
equation solved find expected computed answer substitution ffl identity substitution 
turn confluent system adding rewrite rules narrowing syntactic unification gives refutation ffl ffl ae see termination necessary consider confluent nonterminating trs rule 
narrowing plus syntactic unification complete equation solution fx cg resolved klop subterm narrowing may applied narrowing may performed variable unify 
syntactic unification help occurs 
find computed answer substitution 

theorem improved sense drop termination requirement requiring confluent consider normalizable solutions oe statement theorem 
oe called normalizable terms oe variable normal form 
note solution fx cg normalizable 
consider normalizable solutions oe normal oe meaning oe normal form drop subscript oe statement theorem 
lazy term rewriting complete unification algorithm interesting complete unification algorithm martelli rossi case corresponds orienting equations complete trs nondeterministic algorithm consists derivation rules syntactic unification single rule called term rewriting martelli 
course derivation rules failure rule occur check included 
rule resemble usually called term rewriting 
call rule lazy term rewriting 

lazy term rewriting ae likewise reverse equations context rewrite rule complete trs note amazingly little done lazy term rewriting step compared complicated narrowing procedure 
orthogonal term rewriting systems preceding sections considered general properties trs properties related important property confluence consequence uniqueness normal forms 
term rewriting systems consider special class trs orthogonal ones literature known non ambiguous left linear trs confluence property various desirable properties concerned reduction strategies 
concerning choice word orthogonal avoid cumbersome phrase non ambiguous left linear klop introduced abbreviation regular 
terminology donnell kennaway klop early versions dershowitz jouannaud 
proposal dershowitz jouannaud word regular replaced orthogonal view fact authors terminology regular objectionable 
word orthogonal right intuitive connotations 
basic theory orthogonal trs definition 
trs orthogonal reduction rules left linear left linear critical pairs 

weakly orthogonal left linear contains trivial critical pairs ht si critical pair recall reduction rule left linear linear variable occurs twice rule left linear rule trs critical pairs called non ambiguous non overlapping 
problem non left linear rules application requires test syntactic equality arguments substituted variables occurring 
terms may large may laborious 
problem presence non left linear rules may destroy cr property 
exercise 
consist rules 
show wcr cr reductions common reduct 
critical pairs view theorem stating orthogonal trs confluent non confluence caused non left linear rule preceding section definition defined notion critical pair 
definition difficult explain absence critical pairs intuitive way 
trs table klop table call context pattern rule 
earlier defined context term exactly hole clear context holes tree form pattern shaded area 
left linear rule pattern counts 
trs table property term patterns overlap non overlapping non ambiguity property 
shows term patterns indicated overlap 
term rewriting systems overlap occur rule rule see 
overlap root tree corresponding term arising rules shown 
overlap root arising rules non deterministic shown 
formulate sketch proofs basic theorems orthogonal trs 
need notion descendant reduction 
somewhat informally notion introduced follows term orthogonal trs redex head symbol give marking say underlining able trace sequence reduction rewrite steps 
marked 
consider rewrite step obtained contraction redex wish know happened step marked redex cases distinguished depending relative positions case 
occurrences disjoint 
find back marked redex unaltered case 
occurrences coincide 
marked redex disappeared contain underlined symbol 
case 
proper subterm marked redex subterm arguments 
find back marked redex possible change arguments 
need orthogonality marked redex stopped redex internal contraction case 
proper subterm marked redex times multiplied erased reduct contains copies marked redex marked 
marked redexes called descendants reduction step obvious extend definition klop transitivity sequences rewrite steps delta delta delta gamma proposition 
orthogonal trs ter 
contain possibly mutually disjoint redexes redexes marked underlining head symbol 
furthermore suppose sequence rewrite steps obtained contraction redexes order rewrite step obtained contracting redex 
see 
common reduct contracting marked redexes mutually disjoint 
reduction consists contraction descendants reduction proof matter easy left reader 
immediate corollary parallel moves lemma lemma 
parallel moves lemma consider reductions orthogonal trs 
step reduction contraction redex common reduct contraction descendants redex mutually disjoint 
see 
repeated application parallel moves lemma theorem 
orthogonal trs confluent 
theorem holds weakly orthogonal trs 
earliest proof theorem probably rosen earlier proofs confluence cl combinatory logic just orthogonal trs general 
confluence theorem weakly orthogonal trs special case theorem huet mentioned exercise stated proof 
need definition definition 
parallel reduction reduction disjoint redexes 
term rewriting systems theorem 
huet left linear trs 
suppose critical pair ht si strongly confluent confluent 
definition strongly confluent see exercise 
fact proof huet yields see definition 
exercises 
combinatory logic table rule patterns overlap 
cl left linear orthogonal confluent 

skim table orthogonal 
likewise trs cl test equality binary applicative tables respectively 
weak categorical combinatory logic table orthogonal 

recursive program scheme rps trs finite set function symbols ff fng unknown functions arity finite set fg known basic functions disjoint arity reduction rules form xm displayed variables pairwise different arbitrary term built operators displayed variables 
exactly rule 
rps orthogonal confluent 
extensive treatise semantical aspects recursive program schemes see courcelle 
exercise 
deterministic turing machine trs rm defined exercise orthogonal 
apart confluence interesting facts proved orthogonal trs 
klop definition 

trs non erasing rule variables occur 
cl non erasing due rule kxy 
trs weakly innermost normalizing win term normal form reached innermost reduction 
innermost reduction redex may contracted contains proper 
theorem proved church case version calculus calculus restriction term formation adopted saying abstraction term variable free occurrence theorem 
orthogonal non erasing 
wn iff sn 
useful theorem reduces burden termination sn proof orthogonal trs theorem 
donnell orthogonal trs 
win iff sn 
theorems refined terms call term wn normal form sn infinite reductions win normal form reachable innermost reduction 
local version theorem says term orthogonal non erasing trs properties wn sn coincide 
likewise local version theorem 
cl term normalized innermost reduction reductions finite 
exercise 
exercise sketch proof theorem donnell theorem 

proposition easy proof proposition 
term orthogonal trs containing mutually disjoint redexes sn redex step reduction obtained contraction order redexes sn suppose reduction descendants ng means coincides contained argument 
write term infinite reduction 
delta delta delta iff sn 
proposition prove proof non trivial lemma 
term orthogonal trs 
reduction step 
redex contain proper subterm erased step term rewriting systems descendants 

lemma easy prove theorem critical steps occur non erasing trs 

theorem follows lemma observing innermost contraction erase proper subterm admits infinite reduction contracted redex innermost 
exercise 
sts semi thue systems viewed trs explained section non erasing left hand side right hand side rule trs version 
critical pairs sts orthogonal 
sts critical pairs properties sn wn coincide 
trivial observation easily noting sts critical pairs property wcr holds defined exercise wn sn 
exercise 
klop term orthogonal trs 
suppose normal form infinite reduction delta delta delta show infinite expansion reverse reduction delta delta delta gamma gamma hint lemma exercise note erasing redex pump infinite expansion 
exercise 
klop 
orthogonal suppose wn term normal form sn 
ter term infinite reduction 
reduction graph contains infinite expansion confluence infinite expansion normal form inside 
fact contains reductions follows delta delta delta delta delta delta tn pairwise distinct likewise pairwise distinct 

term orthogonal trs 
prove contains infinite reduction contains infinite acyclic expansion reduces context term normal form 
set called barendregt family 
particular holds finite contains reduction cycle 
curiously cl table impossible finite reduction graphs cl acyclic see klop 

displays reduction graph term orthogonal trs give example conclude term normal form family 
fortiori reduction graph occur orthogonal trs wn 
klop exercise 
klop prove orthogonal trs finite alphabet finitely rules 
non erasing property fb gamma 
see definition fb gamma 
property sn gamma property 
see definition 
hint prove sn gamma non erasing implication fb gamma sn gamma see reduction strategies orthogonal trs terms trs may normal form admitting infinite reductions 
interested finding normal forms strategy disposal telling redex contract order achieve desired result 
section strategies guaranteed find normal form term normal form exists 
adopt restriction orthogonal trs general trs result existence reduction strategies 
strategies kinds step sequential strategies point reduction step just redex contract step strategies set redexes contracted simultaneously 
course strategies computable 
apart objective finding normal form consider objective finding best possible reduction term hand normal form 
term rewriting systems definition 
trs 

step reduction strategy map ter ter normal form 

step reduction strategy map ter ter normal form 
transitive reflexive closure 
step strategy say sequential strategy 
definition 
reduction strategy step step normalizing term having normal form sequence ff contains normal form 

cofinal sequence ff cofinal reduction graph 
see exercise cofinal see normalizing reduction strategy cofinal better finds applied term best possible reduction sequence starting best possible sense 
consider reduction gain information normal forms maximum information 
case normal form consider infinite reductions developing information 
cofinal reductions delta delta delta optimal klop contain information content definition cofinal 
sense cofinal reduction plays role kind infinite normal form 
see berry evy boudol spaces finite infinite reductions modulo called permutation equivalence studied give rise cpo complete lattices bottom point corresponds empty reduction top point corresponds normal form equivalence class reductions normal form exists equivalence class cofinal reductions 
known reduction strategies 
definition 
leftmost innermost step strategy strategy step leftmost minimal innermost redexes contracted reduced 

parallel innermost step strategy reduces simultaneously innermost redexes 
pairwise disjoint problem 

leftmost outermost step strategy step leftmost redex maximal outermost redexes reduced 
notation lm 
parallel outermost step strategy reduces simultaneously maximal redexes pairwise disjoint problem 
notation po 
full substitution rule kleene reduction gross knuth reduction step strategy redexes simultaneously reduced 
notation fgk strategies defined general trs 
strategy defined orthogonal trs general trs possible define unequivocal result simultaneous reduction set possibly nested redexes 
strategies illustrated taken bergstra heering klint trs true false false true true false true mainly interested strategies reason clear inspection table 
facts proofs see donnell klop term rewriting systems bergstra heering klint theorem 
orthogonal trs 
fgk cofinal reduction strategy 

po normalizing reduction strategy 

calculus theorem holds 
lm normalizing strategy just orthogonal trs cl combinatory logic 
general lm normalizing strategy orthogonal trs see exercise 
exercise 
example showing leftmost outermost strategy normalizing general huet evy take orthogonal trs ff cg consider term 
check term normal form strategy 
klop 
example dershowitz showing parallel outermost reduction need cofinal trs fa lm general orthogonal trs normalizing large class orthogonal trs definition 
donnell orthogonal trs left normal reduction rule constant function symbols left hand side precede linear term notation variables 
example 
cl combinatory logic left normal 

rps recursive program schemes defined exercise left normal 

left normal left normal 
exercise 
primitive recursive functions primitive recursive functions defined inductive definition shoenfield 
constant functions cn projection functions successor function primitive recursive 
cn xn xn 

hk primitive recursive defined hk xn primitive recursive 

primitive recursive defined primitive recursive 
show replacing defining equations primitive recursive function defined terminating left normal orthogonal constructor trs 
definition constructor trs see section theorem 
donnell klop left normal orthogonal trs 
lm normalizing reduction strategy exercise 
hindley 
consider cl extended recursor recursor rxy sz yz note applicative trs left normal show flm normalizing 

trs cl recursor recursor fr xy sz xy yz strategy flm normalizing 
term rewriting systems reduction strategy fgk full substitution redex killed soon arises repeatedly 
suppose relax requirement allow time number reduction steps getting rid particular redex obligation deal eventually 
reductions arising way cofinal 
definition 

delta delta delta finite infinite reduction sequence 
consider redex term say secured eventually descendants left contains descendants 
fair redex secured 
theorem 
reductions orthogonal trs fair cofinal 
note theorem corollary theorem evidently reductions obtained applying fgk fair 
similar relaxation constraints applies strategies po lm definition 

reduction leftmost fair ends normal form infinitely times leftmost outermost redex contracted 
delta delta delta outermost fair contain term outermost redex infinitely long stays outermost redex contracted 
theorem 
orthogonal trs 

outermost fair reductions normalizing 

left normal leftmost fair reductions normalizing 
summarize main properties various reduction strategies relaxed versions table 
doing introduce property strategies definition 
reduction strategy perpetual means infinite reduction sn 
perpetual strategy opposite normalizing tries avoid normal forms possible called 
klop table stand perpetual normalizing cofinal respectively 
case property mentioned hold generally 
note leftmost outermost strategy applied orthogonal trs general properties holds generally 
proofs reduction normalizing left normal orthogonal trs parallel outermost reduction normalizing orthogonal trs donnell 
fact proved bergstra klop appendix 
table computable reduction strategies strategy recursive computable coding terms natural numbers recursive function 
obviously primarily interested computable strategies strategies definition computable 
may ask orthogonal trs computable step normalizing reduction strategy 
priori clear view trs berry cl extended rules orthogonal trs 
trs require parallel reduction strategy step sequential strategy term form way see right argument computation step third argument may unnecessary second argument evaluate respectively undecidable due presence cl likewise step arguments may unnecessary 
section sequential trs problem analyzed extensively 
want liberal consider problem weakly orthogonal trs obtained extending cl parallel term rewriting systems true true true true claimed authors trs require parallel evaluation 
surprising fact 
theorem 
kennaway weakly orthogonal trs exists computable sequential normalizing reduction strategy 
algorithm involved complicated theoretical interest 
standard reductions orthogonal trs calculus cl convenient tool standardization theorem see barendregt klop 
orthogonal trs unfortunately straightforward generalization theorem see huet evy generalization 
obstacle normalizing property leftmost reduction strategy discussed previous section 
restrict left normal orthogonal trs straightforward generalization 
definition 
standard reductions trs delta delta delta reduction mark step redex head symbols left head symbol contracted redex 
furthermore markers persistent subsequent steps 
standard reduction step redex contracted marked head operator 
exercise 
consider cl pairing pairing fd dxy dxy yg 
show reduction kii dii standard 

show kii kii standard 
exercise 
hindley consider applicative trs xx ix xg reduction pr iq prq rr sr show standard reduction reduction pr iq sr standard 
theorem 
standardization theorem left normal orthogonal trs left normal orthogonal trs 
standard reduction proof see klop 
corollary earlier theorem stating lm normalizing strategy left normal orthogonal trs klop fact calculus cl literature known normalization theorem 
exercise 
prove normalization theorem left normal orthogonal trs standardization theorem 
hint suppose normal form standardization theorem standard reduction fact reduction flm sequential orthogonal term rewriting systems important feature orthogonal trs sequential 
property sequentiality relevant existence normalizing reduction strategies definability implementability calculus cl trs sequential course mean impossible rewrite redexes parallel way 
means adequate sequential reduction strategies necessary rewrite parallel way order find normal forms 
sequentiality desirable property unfortunately undecidable property 
stronger version strong sequentiality decidable guarantees existence recursive step normalizing reduction strategy 
shown huet evy 
section follow klop middeldorp 
note primarily interested mathematical properties strong sequentiality concerned efficiency decision algorithms see huet evy 
remarked kennaway ask sequential right terminology view theorem stating orthogonal trs computable sequential normalizing strategy 
feel terminology right interested feasibly sequential admitting sequential normalizing strategy computable feasible way 
definition 
orthogonal 
redex 
needed redex needed computation normal form exists iff reductions delta delta delta normal form descendant contracted 
trivially redex term normal form needed 
exercise 
show leftmost outermost redex left normal orthogonal trs needed redex 
theorem 
huet evy term orthogonal trs term rewriting systems 
normal form contains needed redex 

repeated contraction needed redex leads normal form exists 
needed reduction normalizing 
proof involves quite effort included 
proof different huet evy see kennaway sleep 
exercise 
theory needed reductions orthogonal trs non erasing trs show non erasing orthogonal trs redex term needed 

kennaway furthermore theory straightforward generalization weakly orthogonal trs show theorem hold weakly orthogonal trs considering true true true trueg 
see donnell 
theorem gives normalizing reduction strategy just contract needed redex 
definition needed refers reductions normal form order determine needed redexes inspect normalizing reductions recipe normalizing reduction strategy 
words determination needed redexes involves look ahead necessity look ahead wish eliminate 
observation easy prove proposition 
orthogonal 
redexes needed needed 
corollary 
term normal form 
outermost redex needed 
denote context holes 
denote oe substitution redexes holes corollary states normal form oe needed needed may depend oe pleasant state affairs trs satisfy property definition 
orthogonal trs 
sequential normal form oe needed klop exercise 
middeldorp 
show orthogonal trs cl combinatory logic cl phi ff cg due berry sequential 
show trs ff cg sequential 
conclude sequential modular property 
concept sequential introduced expository purposes 
satisfactory property undecidable 
turn satisfactory property strongly sequential defined follows 
definition 
orthogonal trs context 
reduction relation 
possible reduction defined follows 
redex term 
usual transitive reflexive closure 
concept descendant defined 
obvious way 

redex strongly needed reduction 
normal form descendant contracted 
clearly strongly needed needed 

strongly sequential normal form oe strongly needed 
property strong sequentiality may subtle example huet evy exercise shows 
exercise 
rewrite rules written tree notation rhs irrelevant 
show strongly sequential considering context 
situation takes pleasant turn prove decidable orthogonal trs strongly sequential simple algorithm compute definition 
huet evy define concepts sequential strongly sequential different way sequential exactly coincide sequential strongly sequential equivalent strongly sequential 
define concepts 
need preliminary definitions definition 

orthogonal trs 
set ter omega omega gamma terms consists terms built function constant term rewriting systems symbols new constant omega gamma reduction relations 
extended ter omega obvious way 
say normal form ter omega contains omega contains redexes 
omega gamma form contains redexes may contain occurrences omega gamma 
ter omega define partial order omega ter omega 
clearly iff omega context containing omega gamma ter omega 
predicate ter omega monotone implies 
predicate nf defined ter omega follows nf holds normal form omega gamma 
predicate nf defined ter omega follows nf 
holds normal form 
monotone predicate ter omega 
omega omega omega gamma omega gammal displayed 
underlined occurrence omega index respect index omega note particular index hold 
easily proved predicates nf nf monotone 
define huet evy klop definition 

orthogonal trs sequential ter omega omega gamma form normal form nf index 

orthogonal trs strongly sequential ter omega omega gamma form normal form nf index 
exercise 
middeldorp 
show sequential sequential vice versa 
hint consider trs exercise term omega omega 
show strongly sequential strongly sequential exercise 
omega omega omega gamma ter omega necessarily strongly sequential 
th occurrence omega underlined 
suppose underlined occurrence nf index show sn redex arbitrary terms redex strongly needed 
link section terminology contexts set omega gammaa note context normal form containing hole corresponds omega gamma omega gamma form normal form 
devoting rest section exposition long proof strong sequentiality decidable property show find nf index 
need definitions 
definition 
ter omega 
redex compatible omega refined redex redex 

omega gamma reduction replaces redex compatible subterm omega omega gamma notation omega omega omega gamma redex compatible omega 
fixed part omega gamma result maximal application omega gamma words normal form respect omega gamma exercise 
show defined proving omega gammat confluent terminating 
omega omega omega gamma form containing omega gamma wish test th occurrence omega gamma underlined nf index replace fresh constant symbol result omega claim omega nf index occurs 
see 
term rewriting systems proof claim routine omit 
intuitively persistence test symbol means redexes general terms cf 
exercise places reducts vanish action redexes general terms 
actual redex way normalize term hand reduce eventually 
huet evy gives efficient algorithm executing test finding nf indexes strongly needed redexes cf 
exercise 
decision procedure strong sequentiality property difficult 
proof slightly informal way simplification huet evy pay attention efficiency decision procedure 
refer nf index index short 
omega gamma index called free 
term omega gammal free called free 
main problem transitivity property indexes sight expect hold omega gammae omega gamma omega gamma terms displayed occurrence omega index may omega gammah occurring displayed omega omega gamma index 
example 
counterexample transitivity indexes 
consider trs exercise term omega omega gamma omega underlined occurrence index easily seen applying test omega omega gamma omega substituting term index position result omega omega gamma omega omega gamma omega gamma context shown essentially exercise free term 
partial transitivity properties propagation indexes hold notably proposition 
klop explicit properties index propagation 
employ notational convention displayed occurrence omega omega gamma index omega gammae omega gamma may contain omega just write omega 
absence arrow omega omega mean case omega index 
furthermore stipulate omega omega gamma version arrow annotations occurrences omega may occur ones displayed specified explicitly 
notations omega omega gamma possibly arrow annotations refer omega gamma call just terms 
proposition 

omega omega omega 
reverse implication hold generally 
proof 
see arrow points omega gamma part counterexample 
part follows easy argument test criterion indexes 
proposition 

omega omega omega omega 
reverse implication holds omega omega omega proof 
see 
simple applications test 
proposition klop middeldorp states partial transitivity index propagation mentioned 
ae refers maximal height trees corresponding redex schemes left hand sides reduction rules furthermore depth occurrence term length branch leading root symbol occurrence 
proposition 
depth omega omega gamma ae 
omega omega omega term rewriting systems proof sketch 
suppose contexts omega gamma proposition 
consider 
claim term 
consider omega gamma leading especially omega gamma step symbol lost 
redex compatible subterm removed step root symbol occur subterm occur 
occur part occur due assumption referring ae 
propositions rigid term term terms omega called soft melt away completely omega gamma hard prove term unique decomposition top part rigid subterms soft 
top context may trivial equal omega klop proposition 
term ter omega written uniquely omega rigid soft 
proposition 
suppose term omega omega gamma rigid soft omega gamma omega gamma omega proof 
see 
routine arguments involving test 
attempt decide trs strongly sequential try construct term ter omega omega gamma form normal form free indexes 
free term exists strongly sequential 
especially look minimal free term minimal respect length 
proposition may suppose minimal free term exists soft 
minimal free term built redex compatible terms originates starting redex compatible term repeatedly substituting redex compatible terms omega gammar follows definition soft omega gamma see 
observation sufficient sensible attempt construct minimal free term general infinitely redex compatible terms may building blocks minimal free term looking 
fortunately may suppose minimal free term built special kind redex compatible terms finitely exist trs finitely reduction rules assumption 
see 
definition 

redex scheme redex pattern left hand side reduction rule variables replaced omega 
term refined redex scheme 
see 
term rewriting systems redex scheme redex compatible term 
trs finitely rules finitely 
omega gammae redex scheme free omega gammae arising truncating redex scheme forming may free index depending redex schemes 
old omega gammal truncation remain free 
follows immediately definitions test 
noted minimal free term may supposed built redex compatible terms 
partition redex compatible terms need unique matter 
klop suppose certain partition corresponding omega gammae omega redex compatible term built removed omega gammas consists refined extra subterms 
subterms difference 
remove extra subterms 
see 
claim term originating removing extra subterms free 
consider example remove extra subterms redex compatible subterm omega gammae arise removal free follows easily applying test noting subterm soft 
omega gammae free follows proposition 
furthermore removal extra subterms turn free omega gammae places indexes proposition 
try construct minimal free term tree procedure suggested 
course want omega gamma cf 
definition 
start finitely proper proper redex scheme 
index omega gamma attach construction step proper 
nondeterministic procedure repeated 
branch originating tree construction terminates successfully free term reached 
case trs strongly sequential 
may arise infinite branches construction tree 
may close eventually form loop checking way 
definition 
definition 

omega gamma 
term cn omega gamma term rewriting systems called tower 
say tower contains omega gamma 
ae maximal height redex schemes tower cn omega gamma sufficiently high depth displayed omega ae klop 
term built 
main tower tower arising removing subterms containing complete branch tree corresponding root final symbol 
construction tree observe construction branch arising term main tower containing disjoint sufficiently high identical construction branch stopped unsuccessfully 
branch construction tree terminates successfully free term unsuccessfully 
construction tree finitely branching result finite construction tree 
construction branches terminate unsuccessfully trs strongly sequential presence free term successful branch reveals trs strongly sequential 
strong sequentiality decidable 
prove decision procedure correct particular justify correctness loop check unsuccessfully closing branches repetition occurs 
consider term point node construction tree consider successor obtained adjoining proper index position general contain free omega gammae index omega gammad respect 
free omega gammae remain free respect term proposition 
indexes may free happens entirely determined main tower proper leading omega adjoined 
follows proposition stating removal soft terms affect index non index status omega fact happens indexes determined height ae immediately adherence point omega follows proposition 
easy see minimal free term repetition identical sufficiently large disjoint see 
repetition occurs minimal free term construct smaller cutting away part term contradicting minimality 
ends proof decidability strong sequentiality 
trs arising practice constructor trs 
trs easy decide strong sequentiality 
constructor trs trs set function symbols partitioned set defined function symbols set constructors rewrite rule left hand side form ter set terms built variables constructors 
term rewriting systems reason constructor trs deciding strong sequentiality easy transitivity indexes contrast case general trs cf 
counterexample 
proposition 
orthogonal constructor trs 
omega gamma start defined function symbol 
omega omega implies omega proof 
straightforward test finding indexes 
corollary 
constructor trs strongly sequential iff proper index 
order decide constructor trs strongly sequential compute indexes finitely proper 
supposed finitely rewrite rules 
computation indexes easy omega omega omega gamma difficult see omega omega omega gamma iff omega redex compatible 
exercise 
orthogonal constructor trs 
show strongly sequential proper omega gamma klop redex schemes defined replaced omega gamma omega gamma exercise 
huet evy left normal orthogonal trs 
show strongly sequential 
show fact omega omega gamma omega gamma context normal form leftmost occurrence omega index 
exercise 
klop middeldorp show strong sequentiality modular property orthogonal trs orthogonal trs disjoint alphabet phi strongly sequential strongly sequential 
exercise 
thatte orthogonal trs 
define left equivalent rewrite rules identical left hand sides 
orthogonal trs called left sequential trs sequential definition 
orthogonal trs omega context omega gamma form 
th occurrence omega called index respect left sequentiality omega index respect sequentiality trs left equivalent 
trs rules ff ag 
show third occurrence omega omega gamma omega gamma index respect left sequentiality respect strong sequentiality 

prove strong sequentiality implies left sequentiality 

open problem 
reverse hold trs strongly sequential 
conditional term rewriting systems growing importance field term rewriting conditional term rewriting systems ctrs 
ctrs originally arisen universal algebra see meinke tucker theory data types implementations specifications containing positive conditional equations equation called unconditional 
needs contain variables 
implicitly universal quantification 
meant term rewriting systems variables appearing conditions consequent existential meaning true true true elementary predicate logic equivalent true true true henceforth conform notation equational logic programming write example 
specification gcd natural numbers successor conditional equations gamma gamma gamma gamma gcd gcd gamma gcd gcd gamma gcd keep specification sorted booleans false true respectively 
furthermore gamma cut subtraction 
satisfaction relation equational implication call henceforth conditional equation clear see meinke tucker shown analogous equational case develop initial algebra semantics conditional equations 
conditional equations facilitate specifications strictly stronger specification mechanism 
bergstra meyer conditional specification initial algebra specified signature means equations 
ask exists deduction system corresponding completeness theorem analogy birkhoff theorem equational logic 
conditional equational deduction selman presents sound complete deduction system called equation conjunction implication eci languages say conditional equational logic 
state deduction system considerably simplified way considering conditional equation klop sequence conditions set ordered tuple selman admitting empty 
see table adapting inference system case multiset ordered tuple straightforward 
axioms ary rules substitution oe oe oe oe table ft ft oe ft oe oe oe oe operational semantics conditional equations unconditional case problem transition equations directed equations rewrite rules replaced provided left hand side single variable variables occurring right hand side occur left hand side 
course choosing right direction may problem see discussion knuth bendix completion 
conditional case transition conditional equations conditional rewrite rules problem choices 
dershowitz okada sivakumar distinctions extending classification introduced bergstra klop 
introduce notation 
term rewriting systems definition 
rewrite relation 

joinable term 
confluent convertibility coincide 

ground normal form 
choices evaluating conditions ctrs 
terminology dershowitz okada sivakumar distinguish types ctrs 
semi equational systems 
join systems 
normal systems 
generalized systems pn type ctrs conditions formulated general mathematical framework order language involving variables occurring consequent possibly 
bergstra klop semi equational systems called type join systems type ii normal systems type iii bergstra klop define ground normal form respect unconditional part ctrs obtained removing conditions 
necessary reduction relation may defined 
note cases definition circular depends conditions involving way hard see fact defined conditions type positive 
rewrite rules constitute positive induction definition 
case generalized ctrs take care formulating conditions order ensure welldefined 

rewrite rule requires new variables appear respect requirement conditional rewrite rules observed dershowitz okada sivakumar ctrs sense lift klop requirement perfectly natural conditional rewrite specification fibonacci numbers ib ib hz zi ib hy zi study liberal format introduces considerable complication theory 
discuss confluence criteria ctrs 
generalization due middeldorp middeldorp toyama theorem stating confluence modular property trs ctrs theorem 
semi equational ctrs join ctrs normal ctrs disjoint alphabet 
confluent phi confluent 
disjoint sum phi defined analogously unconditional case simply join sets rewrite rules 
proof nontrivial application toyama theorem 
orthogonal conditional term rewriting systems state confluence criteria orthogonal ctrs 
definition 
ctrs type semi equational join 
unconditional version trs arises deleting conditions 

ctrs called non left linear likewise weakly orthogonal 
see section orthogonal trs definition 
ctrs rewrite relation ary predicate set terms closed respect terms 
ctrs rewrite relation 
closed conditions appearing conditional rewrite rule viewed term rewriting systems predicates variables ranging terms closed respect 
theorem 
donnell generalized weakly orthogonal ctrs closed 
confluent 
proof straightforward generalization confluence proof weakly orthogonal trs 
obviously convertibility conditions rewrite rule semi equational ctrs closed 
corollary 
weakly orthogonal semi equational ctrs confluent 
example 
orthogonal semi equational ctrs obtained extending combinatory logic test convertibility xz yz kxy ix dxy confluent 
question arises analogous facts hold types ctrs 
case normal conditions 
theorem slight generalization result bergstra klop theorem 
weakly orthogonal normal ctrs confluent 


orthogonal join ctrs general confluent general weakly confluent 
bergstra klop counterexample see 
hold require 
counterexample exhibits interesting phenomenon pitfall explicit 
corollary semi equational ctrs rules klop confluent 
convertibility coincides joinability relation 
iff 
join ctrs obtained replacing condition confluent 
complexity normal forms unconditional case normal form easily decidable property needs longer case ctrs 
fact semi equational orthogonal ctrs set normal forms undecidable complement set normal forms 
holds normal orthogonal ctrs join ctrs 
proof short instructive included consider cl combinatory logic known cf 
barendregt representation ground cl term normal form natural number computable coding set ground cl terms natural numbers enumerator ground cl term normal form ground cl term normal ctrs obtained extending cl new constant symbol rule fx ex note reduction relation satisfies fx ex 
decidable normal forms particular set fn fn decidable set fn en 
set fm ground cl term decidable compute decide 
confluence follows 
contradicts fact undecidable follows theorem scott stating nonempty proper subset set ground cl terms closed convertibility cl undecidable 
term rewriting systems condition guaranteeing decidability normal forms refer notion decreasing 
exercise 
adapt proof holds normal ctrs join ctrs 
exercise 
bergstra klop exercise give criterion decidability normal forms imply termination criterion decreasing 
normal ctrs 
tk nk rule instance oe oe substitution called candidate redex 
course depends validity instantiated conditions oe oe actual redex 
define inductively set normal forms order follows nf set normal forms ru unconditional part suppose nf defined 
candidate redex oe left hand side conditions oe evaluates wrong normal form order furthermore nf set normal forms say nf gamma contains normal forms infinite order 

show nf undecidable normal form infinite order 

suppose rule ae proper subterm say subterm conditions 
show subterm conditions normal forms infinite order 
nf decidable 
non orthogonal conditional rewriting dershowitz okada sivakumar see dershowitz okada consider ctrs orthogonal may critical pairs formulate conditions ensuring confluence 
definition 
critical pairs 
ctrs containing conditional rewrite rules suppose standardized apart variables common 
suppose unified nonvariable subterm oe mgu 
conditional equation 
oe oe oe critical pair rules 
klop 
critical pair overlay unify root 
ctrs non overlapping non ambiguous critical pairs 

critical pair joinable substitutions oe oe true oe oe theorem 
dershowitz okada sivakumar 
semi equational ctrs 
terminating critical pairs joinable confluent 

join system 
decreasing critical pairs joinable confluent 

join system 
terminating critical pairs overlays joinable confluent 
theorem contains unexplained notion decreasing ctrs definition 
dershowitz okada sivakumar ctrs 

decreasing ordering founded ordering set terms descending chains delta delta delta ae ae proper subterm ordering rewrite rule substitution oe oe oe oe 
likewise ctrs join ctrs 
ctrs decreasing decreasing ordering 
consequence decreasing termination 
notions normal form decidable 

related notions fair simplifying ctrs kaplan reductive ctrs jouannaud 
fact reductive simplifying decreasing see dershowitz okada 
conclude section mentioning useful fact theorem 
dershowitz okada sivakumar decreasing semi equational ctrs 
corresponding join ctrs conditions changed 
confluent confluent 
term rewriting systems am grateful persons support writing chapter 
particular henk barendregt nachum dershowitz ronan sleep de editors authors handbook 
special middeldorp contributions evy close scrutiny previous version including helpful comments 
middeldorp vincent van jane fer jan de vries struggle transform early macintosh version apt 

logic programming 
formal models semantics handbook theoretical computer science vol 
ed 
van leeuwen 
bachmair 

proof consistency equational theories 
proceedings rd ieee symposium logic computer science edinburgh 
bachmair 

canonical equational proofs 
birkhauser boston 
bachmair dershowitz 

commutation transformation termination 
proceedings th conference automated deduction ed 
siekmann oxford springer lncs 
bachmair dershowitz hsiang 

orderings equational proofs 
proceedings st ieee symposium logic computer science cambridge massachusetts 
bachmair plaisted 

associative path orderings 
proceedings st international conference rewriting techniques applications ed 

jouannaud springer lncs 
barendregt 

lambda calculus syntax semantics st edn 
nd edn 

north holland amsterdam 
barendregt 

functional programming lambda calculus 
handbook theoretical computer science ed 
van leeuwen north holland amsterdam 
barendregt van eekelen kennaway plasmeijer sleep 

term graph rewriting 
proceedings st conference parallel architectures languages europe parle eindhoven vol 
ii springer lncs 
bergstra heering klint 
eds 

algebraic specification 
addison wesley reading massachusetts 
bergstra klop 

process algebra synchronous communication 
information control 
bergstra klop 

algebra communicating processes abstraction 
tcs 
bergstra klop 

conditional rewrite rules confluence termination 
jcss 
klop bergstra meyer ch 

specifying sets integers 
eik und kybernetik 
bergstra tucker 

characterisation computable data types means finite equational specification method 
proceedings th international colloquium automata languages programming eds 
de bakker van leeuwen amsterdam springer lncs 
berry evy 

minimal optimal computations recursive programs 
jacm 
birkhoff 

structure algebras 
proceedings cambridge philosophical society 
boudol 

computational semantics term rewriting systems 
algebraic methods semantics eds 
nivat reynolds cambridge university press 
courcelle 

recursive application schemes 
formal models semantics handbook theoretical computer science vol 
ed 
van leeuwen elsevier mit press amsterdam 
church 

calculi lambda conversion 
annals mathematics studies vol 
princeton university press 
curien 

categorical combinators sequential algorithms functional programming 
research notes theoretical computer science pitman london 
dauchet 

simulation turing machines left linear rewrite rule 
proceedings rd international conference rewriting techniques applications chapel hill springer lncs 
dauchet tison 

decidability confluence ground term rewriting systems 
report universit de lille dauchet tison lescanne 

decidability confluence ground term rewriting systems 
proceedings nd symposium logic computer science ithaca ny 
dershowitz 

note simplification orderings 
information processing letters 
dershowitz 

termination linear rewriting systems 
proceedings th international colloquium automata languages programming eds 
springer lncs 
dershowitz 

computing rewrite systems 
information control 
dershowitz 

termination rewriting 
symbolic computation 
corrigendum 
dershowitz jouannaud 

rewrite systems 
formal models semantics handbook theoretical computer science vol 
ed 
van leeuwen elsevier mit press amsterdam 
dershowitz manna 

proving termination multiset orderings 
comm 
acm 
dershowitz marcus tarlecki 

existence uniqueness term rewriting systems construction rewrite systems 
siam comput 

dershowitz okada 

rationale conditional equational programming 
tcs 
dershowitz okada sivakumar 

confluence conditional rewrite systems 
proceedings st international workshop conditional term rewrite systems orsay springer lncs 
dershowitz okada sivakumar 

canonical conditional rewrite systems 
proceedings th conference automated deduction argonne springer lncs 



informatik springer 
german 
ehrig mahr 

fundamentals algebraic specification 
equations initial semantics 
springer verlag berlin 
gallier 

special kruskal theorem ordinal gamma technical report ms cis university pennsylvania philadelphia 
ganzinger giegerich 

note termination combinations heterogeneous term rewriting systems 
bulletin eatcs european association theoretical computer science 


relative termination 
ph thesis university passau 
goguen meseguer 

initiality induction computability 
algebraic methods semantics eds 
nivat reynolds cambridge university press 


algebraic semantics 
springer lncs 
hardin 

confluence results pure strong categorical logic ccl calculi subsystems ccl 
tcs fundamental studies 
hindley 

church rosser property result combinatory logic 
ph thesis university newcastle tyne 
hindley seldin 

combinators calculus 
london mathematical society student texts cambridge university press 
holldobler 

foundations equational logic programming 
springer lncs 
huet 

confluent reductions properties applications term rewriting systems 
jacm 
huet 

complete proof correctness knuth bendix completion algorithm 
jcss 
huet lankford 

uniform halting problem term rewriting systems 
rapport 
huet evy 

call need computations non ambiguous linear term rewriting systems 
rapport inria 
appear computations orthogonal term rewriting systems computational logic essays honour alan robinson eds 

lassez plotkin mit press cambridge massachusetts 
huet oppen 

equations rewrite rules survey 
klop formal language theory perspectives open problems ed 
book academic press london 

canonical forms unification 
proceedings th conference automated deduction les arcs france 


confluent string rewriting congruences 
eatcs european association theoretical computer science monographs theoretical computer science springer verlag berlin 
jouannaud 
kirchner 

completion set rules modulo set equations 
siam comp 

jouannaud 


reductive conditional term rewriting systems 
proceedings rd ifip working conference formal description programming concepts 
kamin evy 

generalizations recursive path ordering 
unpublished manuscript university illinois 
kaplan 

conditional rewrite rules 
tcs 
kaplan 

simplifying conditional term rewriting systems unification termination confluence 
symbolic computation 
kennaway 

sequential evaluation strategies parallel related reduction systems 
annals pure applied logic 
kennaway sleep 

regular combinatory reduction systems 
preprint school information systems university east 
klop 

combinatory reduction systems 
mathematical centre tracts cwi amsterdam 
klop 

reduction cycles combinatory logic 
festschrift curry essays combinatory logic lambda calculus formalism eds 
seldin hindley academic press london 
klop 

term rewriting systems 
notes seminar reduction machines 
unpublished 
klop 
term rewriting systems tutorial bulletin eatcs 
klop middeldorp 

knuth bendix completion 
cwi quarterly centre mathematics computer science amsterdam 
klop middeldorp 

sequentiality orthogonal term rewriting systems 
report cs cwi centre mathematics computer science amsterdam 
appear symbolic computation 
knuth bendix 

simple word problems universal algebras 
computational problems algebra ed 
leech pergamon press 
kruskal 

quasi ordering tree theorem conjecture 
transactions ams 
kurihara 

modular term rewriting systems termination confluence strategies 
report university 
abridged version term rewriting systems modular term rewriting systems termination 
information processing letters 
lankford 

proving term rewriting systems noetherian 
memo mtp mathematical department louisiana technical university louisiana 
le ch 

canonical forms finitely algebras 
research notes theoretical computer science pitman london 
martelli montanari 

efficient unification algorithm 
transactions programming languages systems 
martelli rossi 

algorithm unification equational theories 
proceedings symposium logic programming 
meinke tucker 

universal algebra 
handbook logic computer science eds 
abramsky gabbay maibaum oxford university press volume 


rewriting systems produced knuth bendix completion algorithm 
information processing letters 
middeldorp 

modular aspects properties term rewriting systems related normal forms 
proceedings rd international conference rewriting techniques applications chapel hill springer lncs 
middeldorp 

sufficient condition termination direct sum term rewriting systems 
proceedings th ieee symposium logic computer science pacific grove 
middeldorp 

modular properties term rewriting systems 
ph thesis vrije universiteit amsterdam 
middeldorp 

modular properties conditional term rewriting properties 
appear information computation 
nash williams st 

quasi ordering finite trees 
proceedings cambridge philosophical society 
nederpelt 

strong normalization typed lambda calculus lambda structured types 
ph thesis technische eindhoven netherlands 
newman 

theories combinatorial definition equivalence 
annals math 

donnell 

computing systems described equations 
springer lncs 
donnell 

equational logic programming language 
mit press cambridge massachusetts 


church rosser property ground term rewriting systems decidable 
tcs 
peterson stickel 

complete sets reductions equational theories 
acm 
plaisted 

recursively defined ordering proving termination klop term rewriting systems 
report university illinois urbana illinois 
plaisted 

semantic confluence tests completion methods 
information control bf 


unavoidable sets trees generalize kruskal theorem 
symbolic computation 

vuillemin 

operational semantic equivalence recursive programs 
journal acm 
rosen 

tree manipulating systems church rosser theorems 
journal acm 
rusinowitch 

termination direct sum term rewriting systems information processing letters 
rusinowitch 

path subterms ordering recursive decomposition ordering revisited 
journal symbolic computation 
selman 

completeness axiomatically defined classes algebras 
algebra universalis 
shoenfield 

mathematical logic 
addison wesley reading massachusetts 
siekmann 

universal unification 
proceedings th international conference automated deduction ed 
shostak napa california springer lncs 
nski 

variety experience 
mathematical 
staples 

church rosser theorems replacement systems 
algebra logic ed 
springer lecture notes mathematics 
thatte 

refinement strong sequentiality term rewriting constructors 
information computation 
toyama 

counterexamples termination direct sum term rewriting systems 
information processing letters 
toyama 

church rosser property direct sum term rewriting systems 
journal acm 
toyama 

commutativity term rewriting systems 
programming generation computer ii eds 
northholland amsterdam 
toyama klop barendregt 

termination direct sum left linear term rewriting systems 
proceedings rd international conference rewriting techniques applications chapel hill springer lncs 
extended version report cs cwi amsterdam 
turner 

new implementation technique applicative languages 
software practice experience 
winkler buchberger 

criterion eliminating unnecessary reductions knuth bendix algorithm 
proceedings colloquium algebra combinatorics logic computer science hungary 
