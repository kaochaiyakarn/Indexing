randomized linear time algorithm find minimum spanning trees david karger mit philip klein brown university robert tarjan princeton university nec research institute july randomized linear time algorithm find minimum spanning tree connected graph edge weights 
algorithm uses random sampling combination discovered linear time algorithm verifying minimum spanning tree 
computational model unit cost random access machine restriction operations allowed edge weights binary comparisons 
consider problem finding minimum spanning tree connected graph real valued edge weights 
problem long rich history fully realized algorithm devised boruvka 
informative survey graham hell describes history problem 
decades faster fl association computing machinery permission digital hard copies part personal classroom granted fee provided copies distributed profit direct commercial advantage copies show notice page initial screen display full citation 
copyrights components owned acm honored 
abstracting credit permitted 
copy republish post servers redistribute lists component works requires prior specific permission fee 
permissions may requested publications dept acm broadway new york ny usa fax permissions acm org 
laboratory computer science mit technology square cambridge ma 
done stanford university supported hertz foundation graduate fellowship nsf ccr nsf young investigator award ccr matching ibm mitsubishi schlumberger foundation shell foundation xerox 
department computer science brown university providence ri 
research partially supported nsf pyi award ccr pyi matching funds thinking machines xerox honeywell 
additional support provided darpa contract 
arpa order nec research institute princeton nj 
department computer science princeton university princeton nj nec research institute princeton nj 
research princeton university partially supported national science foundation 
ccr office naval research contract 
dimacs center discrete mathematics theoretical computer science national science technology center 
nsf stc 
faster algorithms fastest algorithm gabow galil spencer see running time log fi graph vertices edges 
fi log ng 
earlier algorithms computational model sequential unit cost random access machine restriction operations allowed edge weights binary comparisons 
fredman willard considered powerful model allows bit manipulation binary representations edge weights 
model able devise linear time algorithm 
question linear time algorithm exists restricted random access model remained open 
problem related finding minimum spanning trees verifying spanning tree minimum 
tarjan gave verification algorithm running ff time ff functional inverse ackerman function 
koml os showed minimum spanning tree verified binary comparisons edge weights nonlinear overhead decide comparisons 
dixon rauch tarjan combined algorithms table lookup technique obtain time verification algorithm 
king obtained simpler time verification algorithm combines ideas boruvka koml os dixon rauch tarjan 
describe randomized algorithm finding minimum spanning tree 
runs time high probability restricted random access model 
algorithm modification proposed karger obtained time bound log 
time bound due klein tarjan 
revision includes tightened high probability complexity analysis 
section presents random sampling result key bound 
section presents algorithm section contains analysis 
section includes final remarks 
section ends preliminaries 
preliminaries algorithm solves slightly general problem finding minimum spanning forest possibly disconnected graph 
assume input graph isolated vertices vertices incident edges 
edge weights distinct distinct numbering edges breaking weight ties numbers 
assume simplicity edge weights distinct 
assumption ensures minimum spanning tree unique 
properties known correspond respectively red rule blue rule 
cycle property cycle graph heaviest edge appear minimum spanning forest 
cut property proper nonempty subset vertices lightest edge exactly endpoint belongs minimum spanning forest 
algorithms finding minimum spanning forest algorithm property fundamental way 
sampling lemma algorithm relies random sampling step discard edges minimum spanning tree 
effectiveness step shown lemma 
need little terminology 
graph weighted edges 
denote weight edge fx yg 
forest denote path connecting maximum weight edge convention connected say edge fx yg heavy light 
note edges light 
forest heavy edge minimum spanning forest consequence cycle property 
forest heavy edges computed time linear number edges adaptation verification algorithm dixon rauch tarjan page describes changes needed algorithm king 
lemma subgraph obtained including edge independently probability minimum spanning forest expected number light edges number vertices proof 
describe way construct sample graph minimum spanning tree simultaneously 
computation variant kruskal minimum spanning tree algorithm 
empty 
process edges increasing order weight 
process edge test endpoints connected component heavy edge currently lighter flip coin probability coming heads 
include edge coin comes heads 
light add forest forest produced computation forest produced kruskal algorithm applied edges exactly minimum spanning forest edge heavy processed remains heavy computation loses edges 
similarly edge light processed remains light edges heavier added processed 
goal show number light edges probably small 
processing edge know heavy flipping coin suppose purposes exposition flip penny heavy nickel 
penny flips irrelevant analysis corresponding edges heavy regardless included consider corresponding edges 
edge nickel comes heads edge placed size gamma 
gamma nickel tosses come heads computation 
imagine continue flipping gamma heads occured total number flipped 
upper bound number light edges 
distribution exactly negative binomial distribution parameters gamma 
expectation random variable negative binomial distribution gamma 
follows expected number light edges gamma 
proof shows number light edges stochastically dominated variable negative binomial distribution 

lemma directly generalizes matroids 
see 
algorithm minimum spanning forest algorithm steps boruvka algorithm called boruvka steps random sampling steps 
boruvka step reduces number vertices factor random sampling step discards edges reduce density ratio edges vertices fixed constant high probability 
algorithm recursive 
generates subproblems high probability total size subproblems constant fraction size original problem 
fact basis probabilistic linear bound running time algorithm 
describing boruvka step 
boruvka step 
vertex select minimum weight edge incident vertex 
contract selected edges replacing single vertex connected component defined selected edges deleting resulting isolated vertices loops edges endpoints lowest weight edge set multiple edges 
boruvka step reduces number vertices factor 
describe minimum spanning forest algorithm 
graph empty return empty forest 
proceed follows 
step 
apply successive boruvka steps graph reducing number vertices factor 
step 
contracted graph choose subgraph selecting edge independently probability 
apply algorithm recursively producing minimum spanning forest find heavy edges delete 
step 
apply algorithm recursively remaining graph compute spanning forest return edges contracted step edges prove correctness algorithm induction 
cut property edge contracted step minimum spanning forest 
remaining edges minimum spanning forest original graph form minimum spanning forest contracted graph 
remains show recursive call step finds minimum spanning forest contracted graph 
cycle property edges deleted step belong minimum spanning forest 
inductive hypothesis minimum spanning forest remaining graph correctly determined recursive call step 

algorithm viewed instance generalized greedy algorithm correctness follows immediately 
analysis algorithm analysis making observations worst case behavior algorithm 
show expected running time algorithm linear applying lemma linearity expectations 
show algorithm runs linear time exponentially small probability developing global version analysis proof lemma chernoff bound 
consider single invocation algorithm 
total time spent steps excluding time spent recursive subproblems linear number edges step just steps boruvka algorithm takes linear time straightforward techniques step takes linear time modified dixon rauch tarjan verification algorithm noted section 
total running time bounded constant factor times total number edges original problem recursive subproblems 
objective estimate total number edges 
suppose algorithm initially applied graph vertices edges 
graph contains isolated vertices 
invocation algorithm generates recursive subproblems 
consider entire binary tree recursive subproblems 
root initial problem 
particular problem call recursive subproblem occuring step left child parent problem second recursive subproblem occuring step right child 
depth tree subproblems nodes problem graph vertices 
depth tree log vertices total original problem subproblems 
theorem worst case running time minimum spanning forest algorithm minfn log ng bound boruvka algorithm 
proof 
estimate worst case total number edges different ways 
multiple edges subproblem subproblem depth contains edges 
summing subproblems gives bound total number edges 
second consider left right children parent problem 
suppose parent problem graph vertices 
edge parent problem ends exactly children left selected step right exception edges minimum spanning forest sample graph subproblems edges removed step subproblem 
number vertices graph step contains gamma edges 
edges removed step total number edges left right subproblems number edges parent problem 
follows total number edges subproblems single recursive depth number different depths log total number edges recursive subproblems log 
theorem expected running time minimum spanning forest algorithm 
proof 
analysis relies partition recursion tree left paths 
path consists root right child nodes reachable node path left children 
consider parent problem graph edges number edges left child 
edge parent problem removed step chance selected step jx 
follows linearity expectation 
expected number edges left subproblem half expected number edges parent 
follows expected number edges problem sum expected numbers edges subproblem left path descending problem 
expected total number edges bounded twice sum expected total number edges right subproblems 
lemma expected number edges right subproblem twice number vertices subproblem 
total number vertices right subproblems gamma expected number edges original problem subproblems theorem minimum spanning forest algorithm runs time probability gamma gamma omega gamma proof 
obtain high probability result applying global version analysis proof lemma 
bound total number edges right subproblems 
exactly edges light step parent problems 
referring back proof lemma consider nickel tosses corresponding edges 
nickel comes heads corresponds edge spanning forest right subproblem 
total number edges spanning forests right subproblems number vertices subproblems turn shown proof theorem 
upper bound total number heads nickel flips 
probability light edges probability fewer heads occur sequence nickel tosses 
chernoff bound probability gamma omega gamma 
consider edges left subproblems 
edges left subproblem obtained parent problem sampling coin tossed edge parent problem deleted step edge copied subproblem coin comes heads copied coin comes tails 
put way edge root right subproblem gives rise sequence copies left subproblems copy resulting coin flip coming heads 
sequence ends coin flip comes tails 
number occurrences tails number sequences turn number edges root problem right subproblems 
total number edges sequences equal total number heads turn total number coin tosses 
probability number edges exceeds probability tails occur sequence coin tosses 
probability gamma omega gamma chernoff bound 
combining previous high probability bound find total number edges original problem subproblems probability gamma gamma omega gamma remarks richard cole klein tarjan adapted randomized algorithm run parallel 
parallel algorithm linear expected runs log log expected time crcw pram 
parallel algorithm minimum spanning trees linear 
contrast karger gives algorithm running erew pram requires log time log ffl processors constant ffl 
cole vishkin give algorithm running crcw pram requires log time log log log processors 
remaining open problems note especially 
deterministic linear time minimum spanning tree algorithm restricted random access model 

randomization technique simplify linear time verification algorithm 

randomization fruitfully solve network optimization problems shortest path problem 
randomization proved valuable solving maximum flow minimum cut problems 
acknowledgments rajeev motwani satish rao david zuckerman fruitful discussions 
alon spencer probabilistic method john wiley sons new york 
boruvka em probl emu aln im pr aca pr pp 

czech 
hagerup mehlhorn maximum flow computed nm time proc 
th international colloquium automata languages programming published lecture notes computer science vol 
springerverlag new york pp 

chernoff measure asymptotic efficiency tests hypothesis sum observations annals mathematical statistics pp 

cole klein tarjan linear parallel algorithm finding minimum spanning trees appear proc th symposium parallel algorithms architectures 
cole vishkin approximate exact parallel scheduling applications list tree graph problems proc 
th annual ieee symp 
foundations computer science computer society press los alamitos ca pp 

dixon rauch tarjan verification sensitivity analysis minimum spanning trees linear time siam computing pp 

feller 
probability theory applications volume 
john wiley sons rd edition 
fredman willard trans dichotomous algorithms minimum spanning trees shortest paths proc 
st annual ieee symp 
foundations computer science ieee computer society press los alamitos ca pp 

gabow galil spencer efficient implementation graph algorithms contraction proc 
th annual ieee symp 
foundations computer science ieee computer society press los alamitos ca pp 

gabow galil spencer tarjan efficient algorithms finding minimum spanning trees undirected directed graphs combinatorica pp 

graham hell history minimum spanning tree problem annals history computing pp 

karger approximating verifying constructing minimum spanning forests manuscript 
karger global min cuts rnc ramifications simple mincut algorithm proc 
th annual acm siam symposium discrete algorithms association computing machinery new york ny society industrial applied mathematics philadelphia pa pp 

karger random sampling matroids applications graph connectivity minimum spanning trees proc 
st annual ieee symp 
foundations computer science ieee computer society press los alamitos ca pp 

karp ramachandran survey parallel algorithms shared memory machines chapter handbook theoretical computer science volume algorithms complexity van leeuwen ed mit press cambridge mass pp 

king simpler minimum spanning tree verification algorithm manuscript 
philip klein robert tarjan linear time algorithm finding minimum spanning trees proceedings th acm symposium theory computing pp 
koml os linear verification spanning trees combinatorica pp 

kruskal shortest spanning subtree graph traveling salesman problem proc 
amer 
math soc 
pp 

raghavan lecture notes randomized algorithms research report rc computer science mathematics ibm research division watson research center yorktown heights ny 
tarjan applications path compression balanced trees assoc 
comput 
mach 
pp 

tarjan data structures network algorithms chapter society industrial applied mathematics philadelphia 

