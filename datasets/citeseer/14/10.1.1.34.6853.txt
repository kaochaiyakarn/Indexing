new method solving hard satisfiability problems bart selman bell laboratories murray hill nj selman research att com hector levesque dept computer science university toronto toronto canada hector ai toronto edu david mitchell dept computing science simon fraser university burnaby canada mitchell cs sfu ca introduce greedy local search procedure called gsat solving propositional satisfiability problems 
experiments show procedure solve hard randomly generated problems order magnitude larger handled traditional approaches davis putnam procedure resolution 
show gsat solve structured satisfiability problems quickly 
particular solve encodings graph coloring problems queens boolean induction 
general application strategies limitations approach discussed 
gsat best viewed model finding procedure 
performance suggests may advantageous reformulate reasoning tasks traditionally viewed theorem proving problems model finding tasks 
property np hardness traditionally taken barrier separating tasks solved computationally realistic resources 
practice solve tasks np hard appears restrict range inputs allow erroneous outputs defaults outputs resources exhausted limit size inputs settle approximate outputs 
cases done way preserves essence original task 
example erroneous outputs occur extremely rarely class allowable inputs excludes large contrived cases approximate answers guaranteed close exact ones 
propose algorithm np hard problem believe definite advantages 
particular works quickly relative competition expense appears statistically minimal errors 
fellow canadian institute advanced research fellow natural sciences engineering research council canada 
computational task shown np hard cook propositional satisfiability sat formula propositional calculus decide assignment variables satisfies formula usual rules interpretation 
np hard tasks see garey johnson catalogue sat special concern ai direct connection reasoning 
deductive reasoning simply complement satisfiability collection base facts sigma sentence ff deduced iff sigma ffg satisfiable 
forms reasoning including default reasoning diagnosis planning image interpretation direct appeal satisfiability 
fact usually require propositional calculus simply highlights fact sat fundamental task major stumbling block effective reasoners 
proceedings tenth national conference artificial intelligence aaai san jose ca july 
sat originally formulated decision problem closely related search problems 
model finding find interpretation variables formula comes true report exists 
interpretation exists formula obviously satisfiable 

theorem proving find formal proof sound complete proof system negation formula question report proof 
proof exists negated formula valid original formula satisfiable 
reasoning ai favored theorem proving procedures resolution favored method investigate behaviour new model finding procedure called gsat 
explain think finding models may useful alternative ai reasoning problems 
original impetus success finding solutions large queens problems connectionist system johnston greedy local search minton 
results simply indicated queens easy problem 
felt techniques fail practice sat 
appears case 
issue fact care required randomly generate sat problems hard ordinary backtracking methods 
discovered see mitchell 
details gsat local search finding models hardest formulas generate 
model finding np hard expect gsat solve completely exactly tolerable resource bounds 
claim compromises quite reasonable 
particular compare gsat procedure dp essentially version resolution adapted model finding demonstrate gsat clear advantages 
free lunch construct satisfiable formulas gsat may take exponential amount time told earlier 
satisfiable counter examples appear extremely rare occur naturally applications examined 
section give detailed description gsat procedure 
test results gsat classes formulas 
followed discussion limitations gsat potential applications 
final section summarize main results 
gsat procedure gsat performs greedy local search satisfying assignment set propositional clauses 
procedure starts randomly generated truth assignment 
changes flips assignment variable leads largest increase total number satisfied clauses 
flips repeated satisfying assignment preset maximum number flips max flips reached 
process repeated needed maximum max tries times 
see 
gsat mimics standard local search procedures finding approximate solutions optimization problems papadimitriou steiglitz explores potential solutions close currently considered 
specifically explore set assignments differ current variable 
distinguishing feature gsat presence sideways moves dis current prepared publication surprised discover procedure similar developed independently claimed solve instances sat substantially larger discussed gu 
tempting discount large instances involved fact easy ones readily solvable backtracking procedures dp seconds 
clause disjunction literals 
literal propositional variable negation 
set clauses corresponds formula conjunctive normal form cnf conjunction disjunctions 
gsat handles cnf sat 
procedure gsat input set clauses ff max flips max tries output satisfying truth assignment ff max tries randomly generated truth assignment max flips satisfies ff return propositional variable change truth assignment gives largest increase total number clauses ff satisfied truth assignment reversed return satisfying assignment procedure gsat 
cussed 
feature gsat variable assignment changed chosen random give equally improvement 
non determinism algorithm sequence changes 
gsat procedure requires setting parameters max flips max tries determine respectively flips procedure attempt giving restarting times search restarted quitting 
rough guideline setting max flips equal times number variables sufficient 
setting max tries generally determined total amount time wants spend looking assignment turn depends application 
experience far generally setting parameters instances application 
fine tune procedure application experimenting various parameter settings 
clear gsat fail find assignment exists gsat incomplete 
discuss 
experimental results tested gsat classes formulas random formulas graph coloring encodings queens encodings boolean induction problems 
purposes comparison ran tests davis putnam procedure dp davis putnam 
dp procedure dp essence resolution procedure 
performs backtracking search space truth assignments incrementally assigning values formulas gsat dp vars clauses flips tries time choices depth time theta theta theta table results gsat dp hard random cnf formulas 
variables simplifying formula 
new variable assigned value producing empty clause backtracks 
performance basic dp procedure greatly improved unit propagation unit clauses arise variables occurring unit clauses immediately assigned truth value satisfies clause formula simplified may lead new unit clauses propagation process executed quite efficiently time linear total number literals 
dp combined unit propagation widely methods propositional satisfiability testing 
hard random formulas random instances cnf formulas evaluating satisfiability procedures easily generated lack underlying hidden structure hand crafted instances 
unfortunately care taken sampling formulas random satisfiability testing looking surprisingly easy 
example goldberg showed experimentally dp runs polynomial average time class random formulas 
franco demonstrated instances considered goldberg satisfiable algorithm simply guessed truth assignments find satisfying just quickly dp 
issue discussed detail mitchell 
formulas generated uniform distribution fixed clause length model 
class formulas choose number variables number literals clause number clauses instance obtained generating random clauses containing literals 
literals generated randomly selecting variables variables negated probability 
discussed mitchell 
difficulty formulas critically depends ratio unit clause clause contains single literal 
hardest formulas appear lie region chance randomly generated formula satisfiable 
cnf formulas experiments show case stress different ratios clauses variables formulas easy 
example dp solves variable clause sat instances seconds practice solve variable clause instances 
speak random formulas mean hardest region 
unsatisfiable formulas little interest testing gsat correctly return satisfying assignment time directly propositional max flips theta max tries 
dp select satisfiable formulas test cases 
approach feasible formulas containing clauses 
longer formulas dp simply takes time longer pre select satisfiable ones 
cases gsat tested satisfiable unsatisfiable instances 
table summarizes results number variables clauses formula statistics gsat dp 
formulas containing variables statistics averages satisfiable instances larger formulas average satisfiable formulas 
gsat report setting max flips header shortened flips tries gsat took assignment total time finding assignment 
fractional part number tries indicates flips took final successful 
example tries row means assignment variables formula ratio converge table ratio higher values exact ratio known theoretical derivation satisfiable point challenging open problem 
gsat dp written ran mips machine unix 
tries flips th try theta flips 
dp give number binary choices search average depth search tree ignoring unit propagation time took find assignment 
note satisfiable formula dp gsat trouble finding assignment 
quite remarkable expect hit local clauses remain unsatisfied 
apparently case 
clear table procedure substantially faster dp 
running time dp increases dramatically number variables critical increase occurring variables 
renders virtually useless formulas variables 
behavior gsat hand quite different variable formulas quite manageable variable formulas solved 
noted satisfiability status large test cases initially unknown 
gsat manage find assignments substantial number 
see selman 
details 
consider table total number flips gsat find assignment total number binary choices dp search tree 
see dramatic difference growth rates numbers methods 
shows difference running times simply due peculiarity implementation 
gsat appears suited finding satisfying assignments hard random formulas 
procedure handle larger formulas variables dp variables 
stress shown results hardest region distribution 
procedures gsat solves easy cases quickly selman 
graph coloring section briefly discuss performance gsat graph coloring 
consider problem coloring colors graph vertices nodes connected edge color 
create formula variables node graph variable corresponds assigning possible colors node 
clauses state node color adjacent nodes color 
implementation highly optimized variant dp incorporating special heuristics able handle hard random formulas variables crawford auton personal communication 
depth continues grow current rate dp search tree variable formulas nodes 
processing nodes second dp take years complete search 
johnson 
evaluate state art algorithms instances random graphs 
considered hardest instances discussed vertex graph results table ii johnson 

encoding allows colors consists clauses variables encoding allows colors consists clauses variables 
gsat managed find coloring approximately hours 
dp ran hours find assignment 
quite reasonable running times various specialized algorithms johnson ranged minutes hours 
unfortunately gsat find coloring optimal johnson 
surprising methods johnson couldn find took hours fastest took hours 
interestingly best graph coloring methods simulated annealing approach shares important features gsat 
fast specialized procedures gsat find near optimal colorings hard random graphs 
problem reformulation terms satisfiability result dramatic degradation performance contrary expect 
main drawback encoding appears inevitable polynomial increase problem size 
queens queens problem find placement queens theta chess board queen attacks 
generic solution problem known placing queens specific regularly repeated pattern board 
problem finding arbitrary solutions extensively test constraint satisfaction algorithms 
standard backtracking techniques problem appears quite hard 
minton 
show generate solutions starting random placement queens row subsequently moving queens rows searching solution 
method works remarkably method appears scale linearly number queens 
test gsat queens problem translate problem satisfiability question initial assignments completely random suggested geoff hinton able solve instance selman 
mentioned notable differences minton approaches 
sideways moves 
appears essential satisfiability testing discussed 
gsat chooses variable gives best possible improvement minton program selects arbitrary queen moves reduce conflicts 
formulas gsat queens vars clauses flips tries time theta table results gsat cnf encodings queens problem 
variable squares board intuitively variable true queen corresponding square 
encode queens problem disjunctions variables stating queen row large number binary disjunctions stating queens row column diagonal 
table shows performance gsat formulas 
larger solution try 
number flips roughly near optimal random truth assignment places queens board removed 
order flips needed starts approximately queens randomly placed board initial state selman 
interesting aspects approach natural constraints obvious queens maintained search 
solutions quickly 
boolean induction promising results obtained integer programming techniques solve satisfiability problems hooker kamath 
experimental evaluations methods constant density random clause model unfortunately represents hard instances mitchell 
compare gsat methods considered formulas studied kamath 
boolean induction 
boolean induction task derive induce logical circuit input output behavior 
kamath give translation problem satisfiability problem 
test results algorithm formulas 
considered formulas table kamath 

table shows results 
performance gsat comparable integer programming method somewhat surprising relative simplicity 
testing needed determine size propositional encodings prevented considering problems queens 
fewer queens may take second try 
happens rarely tries 
formula time id vars clauses int 
progr 
gsat table results gsat encodings boolean induction problems table kamath 

classes formulas methods behave differently 
limitations sideways moves far concentrated mainly strengths gsat 
important limitations 
conjunction clauses shows misled exploring wrong part search space numbers stand propositional variables note clauses contain negative occurrence variable formula satisfied variable assigned positively see clauses 
problem greedy approach steers search negative assignment satisfy clauses 
way gsat solve example starts search close satisfying assignment take exponential number tries 
consider sideways moves 
departure standard local search algorithms gsat continues flipping variables increase total number satisfied clauses 
show important re ran experiments allowing flips increase number satisfied clauses restarting 
table gives results 
formulas considered satisfiable 
tried instances random formulas 
solved column shows percentage instances solved 
note quite assignment despite large number tries 
comparison included previous data formulas 
clear finding assignment harder sideways moves 
seen cases assignment sequence flips containing decreased number satisfied clauses rare 
ignore flips 
type formulas tries moves moves vars clauses solved tries time solved tries time random random queens table comparing gsat moves 
max tries shortened tries 
applications noted gsat sound incomplete model finding procedure succeeds finding interpretation know correct negative answers suggestive conclusive 
practical value gsat purposes concern precisely unsatisfiability limited 
fortunately certain ai tasks naturally characterized tasks example visual interpretation task reiter mackworth 
addition possible reformulate tasks traditionally viewed theorem proving problems ones 
example formulation planning model finding task kautz selman suspect 
potential application gsat lies generation vivid representations levesque way dealing computational problems encountered knowledge representation reasoning systems 
determining deduced knowledge base intractable general knowledge vivid form 
relying general theorem proving knowledge system step operation model finding procedure gsat line generate vivid representations models known questions arise answer efficiently appealing vivid representations 
efficient model finding procedures gsat potential making vivid reasoning approach related model checking proposal halpern vardi workable 
introduced new method finding satisfying assignments propositional formulas 
gsat performs greedy local search satisfying assignment 
method simple surprisingly effective 
showed method outperforms davis putnam procedure order magnitude hard random formulas 
showed gsat performs graph applications gsat require formulas order logic 
herbrand universe question finite generalization straightforward 
approach intend investigate form iterative deepening searching models larger herbrand universes 
coloring problems queens encodings boolean induction problems 
price pay gsat incomplete 
currently explanation gsat performance 
results papadimitriou koutsoupias papadimitriou provide initial theoretical support approach 
sense crucial factor having notion crude approximate solution refined iteratively 
terms model finding clear advantage theorem proving may lead ai methods scale gracefully practice 
acknowledgments second author funded part natural sciences engineering research council canada institute robotics intelligent systems 
david johnson providing hard instances graph coloring anil kamath inductive inference problems 
larry auton ron brachman jim crawford matt ginsberg geoff hinton david johnson henry kautz david mcallester steve minton christos papadimitriou ray reiter peter weinberger yannakakis useful discussions 
johnston 

discrete stochastic neural network algorithm constraint satisfaction problems 
proc 
int 
joint conf 
neural networks san diego ca 
cook 

complexity theorem proving procedures 
proceedings rd annual acm symposium theory computing 
davis putnam 

computing procedure quantification theory 
assoc 
comput 
mach 
bernd jurgen schmitz lothar 
note queens problem 
information process 
lett 
franco 

probabilistic analysis davis putnam procedure solving satisfiability problem 
discrete applied math 

garey johnson 

computers intractability guide theory npcompleteness 
freeman new york ny 
goldberg 

complexity satisfiability problem 
courant computer science report 
new york university ny 
gu 

efficient local search large scale satisfiability problems 
sigart bulletin vol 

halpern vardi 
model checking vs theorem proving manifesto 
proceedings kr boston ma 
hooker 
resolution vs cutting plane solution inference problems computational experience 
operations research letter 
johnson 
personal communication 
johnson aragon mcgeoch schevon 
optimization simulated annealing experimental evaluation part ii graph coloring number 
operations research 
kamath karmarkar ramakrishnan resende 

continuous approach inductive inference 
submitted publication 
kautz selman 

planning satisfiability 
forthcoming 
koutsoupias papadimitriou 
greedy algorithm satisfiability 
forthcoming 
levesque 

making believers computers 
artificial intelligence 
minton johnston philips laird 
solving large scale constraint satisfaction scheduling problems heuristic repair method 
proceedings aaai 
mitchell selman levesque 

hard easy distributions sat problems 
forthcoming 
papadimitriou 

selecting satisfying truth assignment 
proc 
th conference foundations computer science 
papadimitriou steiglitz 

combinatorial optimization 
englewood cliffs nj prenticehall 
reiter mackworth 

logical framework depiction image interpretation 
artificial intelligence 
selman levesque mitchell 
gsat new method solving hard satisfiability problems 
technical report bell laboratories 

complexity automated reasoning 
ph thesis dept philosophy university toronto toronto canada 
