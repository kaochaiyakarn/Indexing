patterns property speci cations finite state veri cation matthew dwyer kansas state university department computing information sciences manhattan ks dwyer cis ksu edu george avrunin university massachusetts department mathematics statistics amherst ma avrunin math umass edu james corbett university hawai department information computer science honolulu hi corbett hawaii edu model checkers nite state veri cation tools allow developers detect certain kinds errors automatically 
transition technology research practice slow 
number potential causes reluctance adopt formal methods believe primary cause practitioners unfamiliar speci cation processes notations strategies 
proposed pattern approach presentation codi cation reuse property speci cations nite state veri cation 
carried survey available speci cations collecting examples property speci cations 
instances proposed patterns 
furthermore updated pattern system accommodate new patterns variations existing patterns encountered survey 
reports results survey current status pattern system 
keywords patterns nite state veri cation formal speci cation concurrent systems formal speci cation veri cation methods er practitioners signi cant advantages current state practice widely adopted 
partly due lack de nitive evidence support cost saving bene ts formal methods number pragmatic barriers adoption formal methods identi ed including lack things tool support appropriate expertise training materials pro partially supported nsf ccr ccr ccr ccr nasa nag 
cess support formal methods 
believe availability tool support nite state veri cation provides opportunity overcome barriers 
finite state veri cation refers set techniques proving properties nite state models computer systems 
properties typically speci ed temporal logics regular expressions systems speci ed nite state transition systems kind 
tool support available variety veri cation techniques including example techniques model checking bisimulation language containment ow analysis inequality necessary conditions 
contrast mechanical theorem proving requires guidance expert nite state veri cation techniques fully automated relieving user need understand inner workings veri cation process 
finite state veri cation techniques especially critical development concurrent systems non deterministic behavior testing especially problematic 
despite automation users nite state veri cation tools able specify system requirements speci cation language tool 
challenging rst appear 
example consider requirement elevator time elevator called oor time opens doors oor elevator arrive oor twice 
verify property linear temporal logic ltl model checker developer translate informal requirement ltl formula call open 
oor open open oor open open oor open open oor open open oor open formula dicult read understand dicult write correctly expertise idioms speci cation language 
contend acquiring level expertise represents substantial obstacle adoption automated nite state veri cation techniques providing ective way practitioners draw large experience base greatly reduce obstacle 
signi cant expertise dealing complexity speci cation daunting 
software development phases design coding complexity addressed de nition abstractions 
complex speci cation problems abstraction just important 
proposed capture experience base expert speci ers enable transfer experience practitioners way speci cation pattern system 
system essentially collection parameterizable high level formalism independent speci cation abstractions 
maximize coverage abstractions described variety techniques tuning semantics meet needs di erent users 
adopted pattern approach presenting speci cation abstractions focus matching problem characteristics solution strategies 
patterns originally developed capture recurring solutions design coding problems 
design coding languages rich expressive formalisms provide wide variety solutions problem full range possible solutions usually wider necessary useful 
patterns successful practitioners want solve naturally occurring domain problems 
don need full expressiveness languages prefer guidance best language features solve commonly occuring problems 
hypothesized pattern approach successful domain property speci cations nite state veri cation 
number expressive formalisms ctl speci cations knew fell relatively small number categories 
believed collection simple patterns de ned assist practitioners mapping descriptions system behavior formalism choice improve transition formal methods practice 
evaluate hypothesis surveyed sources property speci cations locate collected examples property speci cations veri cation tools 
expected vast majority instances patterns system 
subsequently updated pattern system accommodate new patterns variations existing patterns encountered survey 
gives overview updated pattern system reports results survey property speci cations study kind aware 
section describes speci cation pattern system nite state veri cation 
section presents results survey 
section compares approach related section concludes 
specification pattern system section describe pattern system 
giving background notion patterns 
describe idea applied domain property speci cations nite state veri cation 
describe set patterns organized give overview current state pattern system 
property speci cation patterns design patterns introduced means leveraging experience expert system designers 
patterns intended capture description recurring solutions software design problems requirements addressed solution means requirements satis ed examples solution 
information described form understood practitioners identify similar requirements systems select patterns address requirements instantiate solutions embody patterns 
nite state veri cation system modeled transition system nite number states set transitions possibly labeled events states 
property speci cation pattern generalized description commonly occurring requirement permissible state event sequences nite state model system 
property speci cation pattern describes essential structure aspect system behavior provides expressions behavior range common formalisms 
example property speci cation pattern variant gang pattern format 
pattern comprises name names precise statement pattern intent structure behavior described mappings common speci cation formalisms examples known uses relationships patterns 
speci cation formalisms quanti ed regular expressions event various temporal logics ltl computation tree logic ctl state 
patterns capital letters stand events disjunctions events event formalisms stand state formulas state formalisms 
pattern scope extent program execution pattern hold 
precedence intent describe relationships pair events states occurrence rst necessary pre condition occurrence second 
say occurrence second enabled occurrence rst 
known enables 
example mappings mappings enables occurrence ctl precedes globally ag ef ag ltl precedes globally 



quanti ed regular expressions set events denote expression matches symbol denote zero instance expression event precedes globally examples known uses precedence properties occur quite commonly speci cations concurrent systems 
example describing requirement resource lock granted response request 
precedence response properties go 
response property says occurs occurrence follow 
want restrict follow precedence property 
note properties guarantee correspondance occurrence occurrence additional constraints added constrained variations patterns 
mappings pattern describe precedence properties occur strictly precede 
relax constraint possibly empty variation pattern 
relationships generalization precedence properties allows multiple separate states events constitute called precedence chain pattern 
precedence pattern basic kinds scopes global entire program execution execution state event execution state event part execution state event state event designated part execution continues second state event occur 
scope determined specifying starting state event pattern 
state delimited scopes interval property evaluated closed left open right 
scope consists states starting state including global state sequence pattern scopes state 
chose closed left open right scopes relatively easy encode speci cations commonly encountered real property speci cations studied 
possible de ne scopes open left closed right explain construct variants mappings special part pattern system described 
event formalisms underlying model allow events coincide event delimited scopes open ends 
illustrates portions execution designated di erent kinds scopes 
note scope interpreted optional scope delimiters execution speci cation true 
scope operators speci cation formalisms interval logics exception 
experience indicates informal requirements speci ed properties segments program executions 
pattern system properties mirror view enhance usability 
note various speci cation formalisms di erent semantics expressive power property expressed easily formalism may unnatural impossible capture precisely di erent formalism 
instance statebased formalisms ltl ctl reasonable specify certain proposition hold scope universality pattern regard sense dual absence property stating proposition holds state scope 
event formalisms easy require certain events occur scope property proposition holds scope probably expressed terms appropriate occurrence event indicating proposition true absence event indicating false bear simple relation absence pattern 
similarly note formalisms express conditions involving nite executions limited nite sequences states events 
expect practice properties speci ed expressed commonly formalisms pattern system point di erences user 
system speci cation patterns developed system property speci cation patterns nite state veri cation tools 
pattern system set patterns organized hierarchies connections related patterns facilitate browsing 
user search appropriate pattern match requirement speci ed mapping section obtain template property formalism particular tool instantiate template plugging state formulas events speci requirement 
de ning speci cation formalism attempts give small set independent concepts large class interesting speci cations constructed 
collection speci cation patterns trying give smallest set generate useful speci cations complete listing speci cations 
patterns system appear frequently property speci cations 
hypothesize small fraction possible properties speci ed logics regular expressions commonly occur practice 
properties simple variants pattern system 
expect set patterns grow time developers encounter property speci cations real systems easily map existing patterns 
patterns space limitations prohibit description patterns full detail set web site 
full patterns contain additional examples explanation relationships patterns mappings various formalisms 
list set patterns short descriptions follows 
descriptions brevity phrase state event occurs mean state state formula true event disjunction events occurs 
absence state event occur scope 
existence state event occur scope 
bounded existence state event occur times scope 
variants pattern specify occurrences occurrences state event 
elevator property section instance pattern 
universality state event occurs scope 
precedence state event preceded state event scope 
gives key elements pattern 
response state event followed state event scope 
chain precedence sequence states events pn preceded sequence states events qm pattern generalization precedence pattern 
chain response sequence states events pn followed sequence states events qm pattern generalization response pattern 
express bounded fifo relationships 
organization believe useful way organize patterns hierarchy semantics 
example patterns require states events occur occur absence pattern patterns constrain order states events response pattern 
organization pattern system hierarchy illustrated 
hierarchy distinguishes properties deal occurrence ordering states events system execution 
addition patterns provide set pattern notes explain combine vary patterns 
example pattern templates typically parameterized individual events state formulae 
cases allow patterns states events substituted templates 
pattern notes give user guidance safe substitutions 
pattern notes describing construct known variants patterns left open right closed scopes speci states events absent segments pattern 
original pattern system described provided mappings formalisms ltl ctl 
added mappings additional formalisms graphical interval logic gil inca query language due space limitations show mappings 
survey property specifications rst proposed idea pattern system property speci cations nite state veri cation 
assumed speci cations people write fall small number categories gave little empirical evidence important assumption 
collected example speci cations fall small number familiar categories 
describe survey property speci cations section 
data collection collected example speci cations veri cation papers literature 
written collected speci cations 
particular contacted researchers built veri cation tools asked example speci cations 
sent request examples mailing lists newsgroups 
student projects rst author graduate course nite state veri cation 
collected speci cations di erent sources 
speci cations collected forms 
expression requirement speci speci cation formalism ltl 
informal prose description requirement 
speci cations came wide variety application domains including hardware protocols communication protocols guis control systems data types avionics operating systems object systems databases 
complete descriptions speci cations speci cation patterns web page citations published papers taken 
examined speci cation manually determined matched pattern scope property 
cases formal version speci cation instantiation template mapping speci pattern scope case classi cation trivial 
nd trivial match looked speci cation carefully counted match speci cation formally equivalent instantiation template mappings 
example ltl formula equivalent mapping global absence speci cation obtained property patterns occurrence absence universality existence order precedence response chain chain response bounded existence precedence pattern hierarchy patterns parameter substitution 
described section template mapping parameters logics usually state formulae boolean combinations propositions 
patterns scopes safe substitute temporal formulae template guidance correct pattern note 
encountered cases requirement nitely realized ctl formula ag af universal pattern instantiated parameter af 
speci cation known variant patterns 
noted section mappings scopes closed left open right 
nearly non global speci cations collected left closed right open left open right closed 
mentioned section pattern note explains open left scope close right 
variants mentioned pattern notes include chain patterns certain states events forbidden elements chains 
speci cation new variant patterns 
discovered interesting variants response pattern 
rst describes execution respond zs stimulus response second requires response state event 
instances constrained response variant instances response variant 
added pattern notes explaining adjust mappings obtain variants 
formal expression speci cation clearly error correct speci cation instance patterns 
speci cations collected clearly error formal expression match prose description formal expression sense 
intent speci cation clear intent matched patterns counted example match 
speci cation recorded information available requirement prose description requirement 
pattern pattern determined requirement instance 
scope scope pattern 
parameters notes parameters provided template arrays propositions nested temporal formulae 
mappings mappings property formal speci cation languages ltl ctl gil inca 
examples collected exactly mapping 
source source example person citation domain application domain example 
note additional information example 
sample entry speci cation requirement server requests registration rot eventually registered 
pattern response scope global parameters propositions boolean vector ltl note replicated modeled servers source gregory duval cite duval ri pp 
domain distributed object system noted speci cations available world wide web 
results data summarized table gives totals pattern scope combination graphs totals pattern scope examples matching pattern grouped unknown 
example speci cations collected matched patterns 
shown common pattern sample response common universality dual absence 
patterns accounted sample 
scope pattern bfr tot absence universality existence bound exist response precedence resp 
chain prec 
chain unknown total table totals patterns scopes data universality absence response unknown precedence existence resp 
chain prec 
chain bounded exist 
patterns global scopes total number instances patterns scopes instance pattern shows patterns cover majority sample 
fact frequencies patterns put order drop quickly 
raises issue size patterns pattern system 
patterns system match 
hand system small easily browsed 
adding patterns match real speci cations may worth slight increase pattern system size 
response universality precedence existence resp 
chain prec 
chain patterns bounded exist 
unknown absence global scopes percentage speci cations pattern scope vs seen examples global scope 
note examples non global scope instances absence universality existence 
patterns conceptually simplest global scopes map single operators temporal logics 
mentioned example speci cations collected researchers students connection 
see speci cations written including collaborators students di er signi cantly speci cations written separate data compare data sets response universality precedence existence resp 
chain prec 
chain patterns bounded exist 
unknown absence global scopes percentage speci cations pattern scope vs 
di erences data sets note ranking common patterns response universality absence unknown 
rankings remaining patterns di erent small number instances patterns data set fewer data noisy 
di erence wrote speci cations scopes vast majority speci cations global scope 
interestingly wrote speci cations fall outside pattern system 
interesting question having pattern system ects kind speci cations people write 
finite state veri cation check critical requirements exact choice requirements checked way requirements expressed terms model usually left analyst 
pattern system assist formulation property mappings analyst complex patterns scopes 
investigate took set speci cations written set divided speci cations written developed pattern system speci cations written 
comparison shown 
di erences case pronounced sample size smaller may noise 
complex patterns chains appear pattern system introduced 
speci cations created development pattern system non global scopes vs speci cations evenly uniformly spread di erent patterns 
note speci cations written pattern system matched patterns 
demonstrated pattern system property speci cations nite state veri cation potentially useful showing speci cations fall small number categories 
show system useful require answering dicult questions including patterns facilitate learning speci cation formalisms 
patterns allow speci cations written quickly 
speci cations generated patterns correct 
believe answer questions de nitive answers require experiments human subjects 
date evidence support claims largely rst author experience teaching nite state veri cation course masters level software engineering curriculum 
related traditionally speci cation formalisms terms minimal set operators order simplify semantics de nition 
additional operators de ned terms operators primitives need formally de ned 
users formalisms prefer write speci cations higher level formalisms provide built higher level operators abstractions 
classic example leads introduced owicki lamport plays critical role formalisms unity tla 
leadsto corresponds global response pattern system 
number formalisms designed allow de nition additional higher level derived operators 
example lustre property speci cations safety properties written linear time temporal logic written terms derived operators 
authors illustrate capability de ning operators terms basic lustre operators 
derived operators correspond existence scope absence global scope respectively 
pattern system supports common xed set speci cation abstractions formalisms lack explicit support de ning abstractions 
patterns interval logics provide user higher level mechanism de ning segments system execution property hold 
fact interval construction operators provided logics general scopes 
essentially taken commonly occuring intervals packaged patterns 
requirements engineering explored templates patterns construction requirements 
instance van lamsweerde authors suggested library re nements construct detailed requirements goals attempto controlled english project uses restricted subset natural language formulate requirements ers annotated templates guide users 
orts aimed development essentially complete requirements system pattern system concerned translation particular aspects requirements formal speci cations suitable veri cation tools 
little study classes speci cations developers may write 
manna pnueli address issue theoretical angle proposing syntactic classi cation ltl formula completely describes space possible speci cations may write ltl 
taxonomy speci cations includes categories broader patterns 
consequence patterns easily categorized classi cation precedence absence universal patterns global scopes safety properties existence patterns global scope guarantee properties response patterns global scope response properties 
bounded existence pattern similar bounded overtaking property safety property 
chain patterns complex scopes mapping syntactic categories dicult due nature canonical forms de ne categories 
contrast goal give constructive description classes speci cations occur frequently practice 
manna pnueli adopt pragmatic approach line intent pattern system 
claim little general theory temporal logic required handle important common correctness properties concurrent programs 
de ne restricted proof system handles invariance properties subsume universal absence patterns response properties subsume response patterns precedence properties subsume precedence bounded existence similar chain patterns 
precedence properties subsume scope versions universal absence patterns 
data support manna pnueli intuition common properties absence universal response patterns constitute bulk properties survey 
believe de nition high level abstractions writing formal speci cations important factor making automated formal methods speci cally nite state veri cation tools usable 
speci cation pattern system provides set commonly occuring high level speci cation abstractions formalisms support de nition abstractions directly 
described updated pattern system developed property speci cations nite state veri cation collected large sample speci cations suggests property speci cations people write instances patterns system 
survey described certainly exhaustive expect application nite state veri cation technology spreads types speci cations developers may change time 
view pattern system dynamic entity grow process dialog critical review community developers users nite state veri cation techniques welcome contributions community 
acknowledgments laura dillon hamid corina pasareanu making signi cant contributions pattern system 
people contributing speci cations directly indirectly holzmann yang van lamsweerde biere carr chan cimatti clarke cleaveland donahue du val gao giunchiglia gulla havelund hines isom jensen larsen ladkin lowry mcclelland mccune nakatani novak penix probst ryan skou srikanth traverso wing winter 
avrunin buy corbett dillon wileden 
automated analysis concurrent systems constrained expression toolset 
ieee transactions software engineering nov 
chandy misra 
parallel program design foundation 
addison wesley publishing reading massachusetts 
clarke emerson sistla 
automatic veri cation nite state concurrent systems temporal logic speci cations 
acm transactions programming languages systems apr 
cleaveland parrow ste en 
concurrency workbench semantics tool veri cation concurrent systems 
acm transactions programming languages systems jan 
corbett avrunin 
integer programming verify general safety liveness properties 
formal methods system design jan 
darimont van lamsweerde 
formal re nement patterns goal driven requirements elaboration 
garlan editor proceedings fourth acm sigsoft symposium foundations software engineering pages san francisco oct 
acm proceedings appeared software engineering notes 
dillon kutty moser ramakrishna 
graphical interval logic specifying concurrent systems 
acm transactions software engineering methodology apr 
dwyer avrunin corbett 
system speci cation patterns 
www cis ksu 
edu dwyer spec patterns html 
dwyer avrunin corbett 
property speci cation patterns nite state veri cation 
editor proceedings second workshop formal methods software practice pages mar 
dwyer clarke 
data ow analysis verifying properties concurrent programs 
software engineering notes dec 
proceedings second acm sigsoft symposium foundations software engineering 
fuchs 
attempto controlled english ace 
claw international workshop controlled language applications 
gamma helm johnson vlissides 
design patterns elements reusable objectoriented software 
addison wesley 
halbwachs caspi raymond pilaud 
synchronous programming language lustre 
proceedings ieee sept 
har el kurshan 
software analytical communication protocols 
technical journal 
lamport 
temporal logic actions 
acm transactions programming languages systems may 
manna pnueli 
tools rules practicing veri er 
technical report stan cs stanford university july 
appeared carnegie mellon computer science year acm press 
manna pnueli 
temporal logic reactive concurrent systems speci cation 
springer verlag 
massonet van lamsweerde 
analogical reuse requirements frameworks 
proceedings re third international conference requirements engineering 
mcmillan 
symbolic model checking 
kluwer academic publishers 
osterweil 
cecil sequencing constraint language automatic static analysis generation 
ieee transactions software engineering mar 
owicki lamport 
proving liveness properties concurrent systems 
acm transactions programming languages systems july 
rosenblum 
formal methods testing state art state practice issta panel summary 
acm sigsoft software engineering notes july 

