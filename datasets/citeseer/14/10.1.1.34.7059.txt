communicating reactive processes berry ecole des mines centre de math ematiques appliqu ees sophia antipolis france ramesh dept computer science engineering indian institute technology bombay india tata institute fundamental research road bombay india new programming paradigm called communicating reactive processes crp unifies capabilities asynchronous synchronous concurrent programming languages 
asynchronous languages csp occam ada suited distributed algorithms processes loosely coupled communication takes time 
esterel synchronous language dedicated reactive systems processes tightly coupled deterministic communication realized instantaneous broadcasting 
complex applications process robot control require couple forms concurrency object crp 
crp program consists independent locally reactive esterel nodes communicate csp rendezvous 
crp faithfully extends esterel csp adds new possibilities precise local watchdogs rendezvous 
design crp semantics translation classical process calculi program verification application example implementation issues 
supported french coordinated research projects indo french center promotion advanced research new delhi 
existing concurrent programming languages fall quite distinct classes shall call asynchronous class synchronous class 
goal provide unification asynchronous synchronous programming 
class asynchronous languages contains classical concurrent languages csp occam ada 
concurrent processes viewed loosely coupled independent execution units process evolving pace 
inter process communication done mechanisms message passing rendezvous 
communication asynchronous sense arbitrary amount time pass desire actual completion rendezvous communication called synchronous prefer call synchronizing actual rendezvous final act communication class synchronous languages contains mainly esterel lustre signal statecharts :10.1.1.34.5059:10.1.1.17.5606
synchronous languages program thought reacting instantaneously inputs producing required outputs 
concurrent statements evolve tightly coupled input driven way communication done instantaneous broadcasting receiver receiving message exactly time sent 
asynchronous synchronous languages deeply different nature applications implementations 
asynchronous languages relevant distributed algorithms support non determinism appropriate framework 
implementing networks processors natural linguistic page asynchronous communication mechanisms close actual communication mechanisms networks 
synchronous languages specifically designed reactive systems logical concurrency required programming style determinism think embedded controllers 
instantaneous reaction instantaneous broadcast communication possible marry concurrency determinism 
direct implementation feasible hardware 
software implementation concurrency compiled away example translating programs straight line code automata :10.1.1.34.5059:10.1.1.17.5606
presently language class unable handle problems class tailored 
asynchronous languages inappropriate truly reactive systems require deterministic synchronous communication argued 
hand existing synchronous languages lack support asynchronous distributed algorithms 
complex systems require abilities classes languages 
example robot driver specific reactive program control articulation global robot control may necessarily asynchronous limitations networking capabilities 
develops new unifying paradigm called communicating reactive processes set individually reactive synchronous processes linked asynchronous communication channels 
technically unify esterel csp languages 
unification requires minor addition esterel 
preserves spirit semantics esterel csp 
time provides rigorous semantics implementation constructs precise local watchdogs asynchronous communications indispensable practice properly supported existing languages 
section recalls esterel language introduces new exec asynchronous task execution primitive 
section show augment esterel rendezvous asynchronous task execution 
show constructs csp implemented constructs existing esterel 
new possibilities fine synchronous control asynchronous communication give application example 
section presents semantic model shows conservatively extends esterel csp 
section give translation crp meije process calculus translation gives operational view semantics possible automatically verify properties crp programs verification system auto 
section discusses implementation issues 
appendix presents formal semantics esterel exec 
simplicity deal formally pure esterel limited pure synchronization communication 
full esterel language supports data handling value passing :10.1.1.17.5606
extension crp value passing easy done informally illustrated example 
esterel language briefly original pure esterel language 
new exec asynchronous task execution primitive supported esterel compilers 
explain language giving purely intuitive non systematic semantics examples 
modules interfaces basic object pure esterel signal 
signals communication environment internal communication 
programming unit module 
module interface defines input output signals body executable statement module input output input relations statement module input relations restrict input events :10.1.1.17.5606
shall exclusions written interface part relation relation means input events contain 
assertion behavior asynchronous environment 
execution time module activated repeatedly giving input event consisting possibly empty set input signals assumed satisfying input relations 
module reacts executing body outputs emitted output signals 
assume reaction instantaneous perfectly synchronous sense outputs produced time 
necessary computations done time 
pure esterel computations signal emissions control transmissions statements full esterel value computations variable updates 
statements consume time ones explicitly requested 
reaction required deterministic state program input event exactly possible output event 
perfect synchrony discussed length 
perfectly synchronous languages reaction called instant 
page statements esterel kinds statements primitive kernel statements derived statements expanded primitive ones macro expansion language user friendly 
derived statements semantically meaningful 
list kernel statements halt emit stat stat loop stat stat stat stat watching stat stat trap stat exit signal stat kernel statements imperative nature classical appearance 
constructs form exception mechanism fully compatible parallelism 
traps lexically scoped 
local signal declaration signal stat declares lexically scoped signal internal broadcast communication stat 
parts optional statement 
omitted supposed 
intuitive semantics instant interface local signal consistently seen absent statements ensuring determinism 
default signals absent signal input signal emitted environment signal internally broadcast executing emit statement 
explain control propagates better give examples simplest derived statement takes time waiting statement await kernel expansion halt watching explained moment 
starts executing statement simply retains control instant 
instant exists await statement terminates immediately control released instantaneously instant exists await statements waits forever terminates 
await statements put sequence await await just waits sequence control transmission sequencing operator takes time 
parallel construct await await await statements started simultaneously right away parallel construct started 
parallel statement terminates exactly branches terminated occurs 
operator takes time 
instantaneous control transmission appears 
statement purely transparent terminates immediately started 
emit statement instantaneous broadcasts terminates right away making emission transient 
emit emit signals emitted simultaneously 
signal presence test 
presence tested right away branch immediately started accordingly 
loop stat statement body stat starts immediately loop statement starts stat terminates instantaneously restarted afresh avoid infinite instantaneous looping body loop required terminate instantaneously started 
watching trap exit statements deal behavior preemption important feature esterel 
watchdog statement stat watching statement stat executed normally proper termination occurrence signal called guard 
stat terminates strictly occurs watching statement guard action 
occurrence provokes immediate preemption body stat immediate termination watching statement 
consider example statement await emit watching emit watching occurs strictly internal await statement terminates normally emitted internal watching terminates body terminates emitted external watching terminates body 
occurs time strictly internal watching preempts await statement terminate emitted emitted external watching instantaneously terminates 
occurs time external watching preempts body terminates instantaneously signal emitted 
notice nesting watching statements provides priorities 
explain await defined halt watching 
semantics halt simple keeps control forever terminates 
occurs halt preempted construct terminates just expected 
notice halt kernel statement takes time 
page trap exit construct similar exception handling mechanism purely static scoping concurrency handling 
trap stat body stat run normally executes exit statement 
execution stat preempted trap construct terminates 
body trap statement contain parallel components trap exited soon components executes exit statement components preempted 
exit preemption weaker watching preemption sense concurrent components execute time exit occurs 
consider example statement trap await emit await exit occurs emitted waits terminate 
occurs branch preempted statement terminates instantaneously emitted 
occur simultaneously branches execute emitted 
preemption occurs execution concerned instant exiting trap statement preempt concurrent statement leave wills 
accept simultaneity define means exit traps simultaneously define priorities traps 
rule simple outermost trap matters ones discarded 
example trap trap exit exit emit traps exited simultaneously internal trap discarded emitted 
traps provide way breaking loops terminate trap loop exit value handling full esterel informally sequel briefly describe way values handled 
types predefined integer time types meant implemented host language program compiled ada example 
signal carry value type declared signal declaration 
valued signal unique value instant 
signal value may change signal received environment locally emitted new value executing emit exp 
current value signal accessed time expression 
declare local variables statement var stat variables deeply differ signals fact shared concurrent statements 
variables updated instantaneous assignments exp instantaneous side effecting procedure calls call 
procedure external piece code receives value arguments 
expressions may involve variables signal values external host language function calls external functions perform side effects 
computation expression instantaneous 
exp stat stat statement instantaneously tests truth exp occurrence counters added preemption statements stat watching 
exec statement mentioned full esterel external procedure calls assumed instantaneous 
appropriate long numerical computations dealing external actions move robot arm position 
new exec statement remedies defect original esterel language gateway asynchrony 
handles external asynchronous tasks homogeneous procedures 
pure esterel handle side effecting tasks 
asynchronous task declared task task execution controlled esterel statement exec starts waits completion terminate 
occurrences exec module task simultaneously active tasks having name coexist 
avoid confusion assign explicit label exec statement exec label name distinct labels input signal names 
implicit distinct label unlabeled exec statements 
page exec statement labeled asynchronous task execution esterel implicit signals sl kl 
output start signal sl sent environment exec statement starts 
requests start asynchronous incarnation task passing values full esterel 
input return signal sent environment task incarnation terminated provokes instantaneous termination esterel exec statement update parameters full esterel 
output kill signal kl emitted esterel exec statement preempted termination enclosing watching statement concurrent exit enclosing trap 
example case occurs termination exec watching assumed asynchronous environment provide instantaneous feedback exec statement terminate instantaneously started 
forgets kl exec simply emit sl await generation kl non local depends external preemption 
exec primitive 
practice kl signal essential garbage collect preempted computations external actions 
implementation csp play central role monitor communication 
notice task may restarted instantaneously termination time loop exec restarted instantaneously killed loop exec watching case signals kl sl emitted simultaneously 
course kl kills currently existing incarnation sl starts new incarnation 
situations task started killed immediately 
example consider trap exec exit exec statement starts parallel branch instantaneously preempted exit statement 
case start signal sl kill signal kl emitted asynchronous task started 
exec return signal declared incompatible input signal return signal writing incompatibility input relation exec label refer return signal name 
communicating reactive processes communicating reactive processes crp model 
consists network 
mn esterel reactive programs nodes having input output reactive signals notion instant 
network asynchronous nodes communicate asynchronous channels 
intuitively locally reactively driving part complex process handled globally network 
establish asynchronous communication nodes central idea extend basic exec primitive communication primitive 
usual send receive asynchronous operations represented particular tasks handle communication 
send receive interactions possible various types asynchronous communication 
instance send non blocking full asynchrony send receive synchronize csp rendezvous communication 
choices implemented esterel 
choose subtle 
sequel introduce rendezvous primitive esterel 
show capture full communication power csp 
show synchronous asynchronous constructs combined realize fine communication control way handled conventional asynchronous languages give application example 
rendezvous crp nodes linked channels 
start describing pure synchronization case channels symmetric 
pure channels declared crp nodes declaration channel channel shared exactly nodes 
channels handled esterel new statement rendezvous label optional implicit distinct label created absent 
example shall explicit channel names clarity 
page rendezvous statement particular instance exec statement defines implicit reactive signals node sl kl 
output signal sl requests rendezvous rendezvous completion signaled node signal signal kl signals abandoning rendezvous request 
channel perform rendezvous time 
node return signals rendezvous statements channel implicitly assumed incompatible 
full crp pass values unidirectional channels 
example declare input channel type output channel type send receive values writes rendezvous exp rendezvous value sent rendezvous simply handled value start signal sl 
value received second rendezvous simply current value return signal 
far implementation goes think implicit asynchronous layer handles rendezvous providing link asynchronous network events node reactive events 
implicit csp 
esterel program remains fully deterministic 
active rendezvous statements channel role asynchronous layer choose performed 
rendezvous chosen ones remain active completion preemption 
serialize rendezvous csp simply declares rendezvous labels incompatible necessary general crp language 
implementing csp briefly show translate csp nodes crp ones 
restrict communication part csp forbidding pure boolean guards guards usually non deterministic sequential programming definitely major issue application field 
ignore distributed termination issues 
assume knowledge csp syntax 
channels declared labels assigned csp rendezvous command 
labels declared incompatible model csp rendezvous serialization 
variables csp node declared toplevel translated module 
translation statements structural trivial 
skip csp statement translated 
assignments expressions kept unchanged 
boolean tests guards translated esterel statements 
iteration translated loop statement 
thing left guard selection 
explain translation example leave easy formal definition reader 
consider csp statement stat exp stat respective labels crp translation trap trap trap rendezvous exit rendezvous exp exit stat exit stat stat translation stat communications requested simultaneously rendezvous statements started 
assume done 
rendezvous provokes instantaneous termination rendezvous instantaneous exit abortion pending request rendezvous immediately sends kl signal cancel rendezvous selection appropriate continuation stat assignment received value conversely done exited kl sent stat starts expected 
exit statement necessary avoid executing stat 
reader familiar esterel recognize similarity translation expansion esterel await case derived statement 
statement form await case stat case stat waits occurrence start stat stat similar concrete syntax guard selection crp rendezvous case stat case exp stat notice need variable refer value received value simply 
page general crp csp processes translated crp modules interfaced incompatible channels proper esterel signals 
general crp signals channels freely mixed restriction rendezvous performed time channel 
particular concurrent rendezvous distinct channels performed simultaneously 
watchdogs imposed asynchronous communication done properly usual csp languages 
instance input reactive signal node say second cancel key require rendezvous request satisfied occurs aborted 
written rendezvous watching rendezvous return signal simultaneous node rendezvous considered completed parties local effect canceled watching statement 
avoid tricky situations convenient serialize rendezvous reactive events writing input relation relation example illustrate crp programming style particular respective local reactivity asynchronous rendezvous example simple minded banker teller machine 
machine crp node assumed connected node bank 
machine reads card checks code locally communicate rendezvous bank perform actual transaction 
process user cancel transaction pressing cancel key 
reactive interface self explanatory 
rendezvous interface consists valued channels 
output channels send card information transaction amount 
input channel authorization receive boolean telling transaction authorized 
rendezvous label necessary exactly rendezvous statement channel 
body repeatedly waits card performs transaction 
client code checking section purely local reactive 
valid code read things parallel waiting locally amount typed client sending card information bank rendezvous 
independent operations completed sends amount bank waits authorization 
return boolean true instantaneously delivers money returns card exactly authorization rendezvous completed ensure transaction atomicity 
full transaction user press cancel key case transaction gracefully abandoned including various rendezvous card returned 
bank considers transaction performed authorization rendezvous completed declare exclusion relation authorization cancel prevent events happen simultaneously 
outer trap handles abnormal cases transaction card kept code typed incorrectly times transaction authorized 
full esterel extension trap statement write trap handler activated trap exited 
extension easily derivable kernel statements 
semantics mathematical semantics steps 
semantics node individually defined classical esterel semantics 
cooperation nodes defined standard csp ready trace semantics 
node semantics formal semantics esterel :10.1.1.17.5606
consider behavioral semantics extended handle exec statements 
defines reaction module input event satisfying input relations transition gamma 
generated output event new module body perform reaction 
behavioral semantics rules appendix 
history sequence delta 
delta 
input output event pairs input events satisfy declared exclusion relations unexpected return signal exists sl kl cooperation semantics define nodes cooperate known csp ready trace technique slight complication concurrent communications take place simultaneously node 
need sets channels just channel names 
set channels declared node projection input event defined set channels having return signal notice return signal channel implicit label exclusions 
page module type type card information function integer boolean input card input code integer amount integer input cancel user cancel key output output integer output output channel output channel integer input channel authorization boolean relation cancel authorization loop trap await card read check code times watching cancel trap repeat times emit await code card code exit repeat exit failed times trap rendezvous card send card bank emit local dialogue await amount rendezvous amount send amount bank rendezvous authorization receive authorization boolean authorization emit amount exit watching cancel user explicit cancel time emit handle emit trap loop banker teller program page projection history delta 
delta 
sequence nonempty represents communication history formally ffl add element head list delta ffl ffl ifi execution set nodes fm ig set valid esterel histories node satisfying consistency condition expresses events match channel nodes 
formally distinct ij set common channels ij ij value passing handled just csp detailed 
ready sets extracted histories detect deadlocks csp 
crp obviously extends esterel nodes arbitrary esterel programs 
crp extends csp results theorem theorem csp program translation crp 
csp ready trace semantics coincides crp semantics proof extended version 
translation meije process calculus cooperation semantics really constructive sense tell execute programs 
give implementation pure crp boudol process calculus meije 
choose calculus able handle synchrony asynchrony possible powerful calculi ccs 
addition implementation crp classical process calculus meije translation provides automatic program verification environment meije accepted input verification systems auto 
full crp programs dealing values approximate translation meije feasible ignoring value handling retaining synchronization skeleton 
useful proving synchronization properties 
sequel assume reader familiar definition automata process calculi tail recursive processes 
meije actions consist free commutative group set elementary signals elements products positive negative elementary actions 


delta 
notations point esterel reactive input output directionality better usual 
prefixing meije 











label automaton written symbol delta reserved instantaneous action product 
things know meije behavior parallel restriction operators 
gamma 
gamma 
gamma 
gamma 
deltab gamma gamma 
gamma 
gamma 
provided 

appear reduced form start translating node esterel programs finite state esterel code readily translated meije automaton done standard esterel compiler 
exclusion relations taken care way input events satisfy relations appear automaton 
rendezvous return signals channel exclusive meije action appearing contains return signal channel may simultaneously active rendezvous channel source code 
compute ready sets auxiliary automaton rendezvous label channel assume links considered node node call automaton defined copy automaton renamings performed sl kl sl kl finish node translation put automata channel labels parallel automaton hide sl kl signals 
denote translation node sort contains esterel reactive input output signals channels 
channel links meije signal appears positively negatively 
translate full crp network put crp nodes translations parallel hide channels 
final translation nodes evolve asynchronously rendezvous share instant sense perform single compound meije transition 
page example consider rendezvous channel labels node automaton performs compound action form deltal may compound action involving reactive signals rendezvous label automaton performs action 
delta node automaton perform delta 
delta 
delta 
delta 
hidden 
symmetrically node performs action delta performs deltac performs delta 
hidden global network perform actions synchronously resulting action synchronous product delta delta 
delta delta 
local actions course rendezvous occur ready 
just computed auxiliary label automata 
general crp rendezvous happen time network nodes different channels correctly modeled meije instantaneous action products 
meije translation implements correctly crp semantics section precisely stated proved extended version 
implementation esterel compiler crp node independently compiled deterministic target code written example exactly realizes reactive behavior 
current esterel compiling process target code form tabulated deterministic automaton esterel concurrency compiled away see :10.1.1.17.5606
nodes compiled simply left set sequential programs communicating rendezvous known implementation techniques classical objects schedulers network implementation compared csp occam complications 
asynchronous layer node take care declared exclusion relations appropriate serialization events 
second rendezvous request locally canceled parties need elaborate rendezvous protocols 
developed protocol uses pair asynchronous fifo queues channel 
written esterel proved correctness auto 
description outside scope 
translating programs automata advantage excellent execution speed risk size explosion 
new compilation techniques translation esterel circuits produce slightly slower run time code avoid size explosion 
software engineering point view crp system development realize fully automatic implementation crp unix 
addition reactive nodes user provide system network configuration description describe nodes placed 
channels realized sockets aforementioned protocol 
crp framework unifies esterel csp 
bring new way handling complex parallel systems synchronous asynchronous approaches appropriate 
strongly believe crp paradigm prove useful application domains process control communication protocols robotics actual real size experimentation confirm view 
currently process implementing crp top existing esterel system 
semantical aspects synchrony asynchrony kept independent asynchronous communication policies synchronous nodes studied way 
translated meije calculus universal process calculi 
crp paradigm relies careful separation synchronous asynchronous layers 
deeper unifications synchrony asynchrony investigated 
time idea programming concepts appropriate purpose 
programming language ada manual 
ansi mil std lecture notes computer science springer verlag 
berry 
real time programming general purpose special purpose languages 
ritter editor information processing pages 
elsevier science publishers 
north holland 
berry 
esterel hardware 
philosophical transaction royal society london 
berry 
hardware implementation pure esterel 
academy proceedings engineering sciences indian academy sciences 
berry gonthier :10.1.1.17.5606
esterel synchronous programming language design semantics implementation 
rapport de recherche page inria 
appear science computer programming 
boudol 
notes algebraic calculi processes 
apt editor logic models concurrent systems 
nato asi series 
boudol roy de simone 
process calculi theory practice verification tools 
automatic verification methods finite state systems lncs pages 
springer verlag 
de simone 
higher level synchronising devices meije sccs 
theoretical computer science 
coste mani ere 
synchronous approach control sequencing robotics applications 
proc 
ieee international workshop intelligent motion pages 
le guernic le gauthier le 
programming real time applications signal 
look real time programming proceedings ieee special issue sept 
halbwachs caspi pilaud :10.1.1.34.5059
synchronous dataflow programming language lustre 
look real time programming proceedings ieee special issue sept 
harel 
statecharts visual approach complex systems 
science computer programming 
hoare 
communicating sequential processes 
prentice hall 
jones goldsmith 
programming occam 
hoare series computer science 
prentice hall international 

paris 
ex ecution de esterel 
th ese informatique universit de nice 
roy de simone 
auto 
kurshan editor proceedings workshop computer aided verification new brunswick june 
appendix behavioral semantics esterel behavioral semantics esterel semantical definition language 
extension needed handle exec statement equivalently rendezvous statement 
module input event behavioral semantics determines transition gamma 
generated output event derivative module suited perform reactions 
derivative interface differs body 
reaction sequence input events computed chaining elementary transitions 
inductive rules relation gamma 
defined auxiliary inductive relation stat gamma gamma gamma gamma 
stat statements current event stat reacts event emitted stat response set labels exec statements currently active stat termination level explained 
start kill signals exec appear return signals appear signals broadcast stat receives signals emits contained relation transitions systems follows gamma 
stat gamma gamma gamma gamma 
stat stat stat bodies assume harmless restriction stat internally emit input signals 
integer termination level determines control handled 
reaction statement behave ways terminate release control retain control wait events exit trap 
set proper termination waiting exit number traps declarations traverse stat reach declaration example exit exit statements level concern closest trap statement second exit level traverse declaration reach page trap exit trap exit exit exit levels determined statically assume exit statements labeled level 
coding synchronization performed statement amounts compute max levels returned branches parallel terminates branches terminated exit preempts waiting outermost exit matters exits done concurrently 
respect set active exec labels notation sl sl differs facts exec started current instant killed exec started current instant simply ignored killed right away 
comments rules rules halt emit exit obvious 
rule start exec statement 
label put set started exec statement rewritten auxiliary statement exist language proper convenient defining semantics 
rule expresses exec termination task return 
rule exec label put case nontermination correctly handle exec preemption enclosing statements 
rules seq seq handle sequencing 
seq notice statements receive current event broadcasting single result transition merge model instantaneous control transmission broadcast 
rule loop unfolds instantaneously loop 
rule parallel branches evolve current event sets generated branches merged perfect synchrony termination level max explained 
rule watching watching statement rewritten statement behave required guard instants 
remember exec killed preemption occurs presence signal instant decorate generated statement set decoration rule generate appropriate kill signals branch taken preemption time 
course source statement empty annotation 
rule trap expresses trap terminates body terminates exits trap 
rule trap expresses trap effect body waits exit enclosing trap propagated subtracting gamma 
rules signal signal express coherence requirement local signals local signal received emitted signal received emitted signal notice lexical scoping properly handled 
remarks resulting statement stat unused immaterial rule returning discarded exited trap 
rule returns returns resulting term worth 
intrinsic circular character local signal rules wind set rules yield straightforward algorithm compute transition classical structural operational semantics 
input guess right current event rules check correct transition 
solutions unique 
statement signal emit may consistently consider absent statement signal emit way consider consistently absent 
require correct program unique semantics 
correctness studied details constructive intricate semantics :10.1.1.17.5606
exec adds particular complication respect correctness 
page gamma gamma gamma 
halt gamma gamma gamma 
halt halt emit fsg gamma gamma gamma gamma gamma 
emit exec flg gamma gamma gamma gamma gamma gamma gamma gamma 
gamma gamma gamma 
flg gamma gamma gamma gamma gamma 
stat gamma gamma gamma gamma 
stat stat gamma gamma gamma gamma gamma gamma 
stat stat stat gamma gamma gamma gamma gamma gamma gamma gamma gamma 
stat seq stat gamma gamma gamma gamma gamma gamma 
stat stat stat gamma gamma gamma gamma gamma gamma 
stat stat seq stat gamma gamma gamma gamma 
stat loop stat gamma gamma gamma gamma 
stat loop stat loop stat gamma gamma gamma gamma gamma gamma 
stat stat gamma gamma gamma gamma gamma gamma 
stat stat stat max gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma 
stat stat parallel esterel semantic rules page stat gamma gamma gamma gamma 
stat stat watching gamma gamma gamma gamma 
stat watching watching stat gamma gamma gamma gamma gamma gamma 
stat stat stat gamma gamma gamma gamma gamma gamma gamma gamma 
stat stat gamma gamma gamma gamma gamma gamma 
stat stat stat gamma gamma gamma gamma gamma gamma 
stat stat gamma gamma gamma gamma 
stat trap stat gamma gamma gamma gamma gamma gamma 
trap stat gamma gamma gamma gamma 
stat gamma trap stat gamma gamma gamma gamma gamma 
trap stat trap exit gamma gamma gamma 
halt exit stat fsg gamma gamma gamma gamma gamma gamma gamma gamma 
fsg stat signal stat gamma gamma gamma gamma 
signal stat signal stat gamma gamma gamma gamma 
stat signal stat gamma gamma gamma gamma 
signal stat signal esterel semantic rules continued page 
