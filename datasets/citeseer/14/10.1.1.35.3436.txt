obbtree hierarchical structure rapid interference detection data structure algorithm efficient exact interference detection complex models undergoing rigid motion 
algorithm applicable general polygonal models 
pre computes hierarchical representation models tight fitting oriented bounding box trees 
runtime algorithm traverses trees tests overlaps oriented bounding boxes separating axis theorem takes operations practice 
implemented compare performance hierarchical data structures 
particular robustly accurately detect contacts large complex geometries composed hundreds thousands polygons interactive rates 
cr categories subject descriptors computer graphics computational geometry object modeling additional key words phrases hierarchical data structure collision detection shape approximation contacts physically modeling virtual prototyping 
problems interference detection geometric models static dynamic environments fundamental computer graphics 
considered important computational geometry solid modeling robotics molecular modeling manufacturing computer simulated environments 
generally speaking interested efficient cases real time algorithms applications characterizations 
model complexity input models composed hundreds thousands polygons 

unstructured representation input models represented collections polygons topology information 
models known boundaries may cracks joints may non manifold geometry 
robust techniques known cleaning models 
army research office gottschalk lin manocha department computer science university north carolina chapel hill nc lin cs unc edu www cs unc edu geom obb html 
close proximity actual applications models come close proximity multiple contacts 

accurate contact determination applications need know accurate contacts models models machine precision 
applications dynamic simulation modeling tolerance checking virtual prototyping simulation design large cad models characterizations 
currently fast interference detection applications major bottleneck 
main contribution efficient algorithms accurate interference detection applications 
assumptions model representation motion 
algorithms compute hierarchical representation oriented bounding boxes obbs 
rectangular bounding box arbitrary orientation space 
resulting hierarchical structure referred obbtree 
idea obbs new researchers extensively speed ray tracing interference detection computations 
major contributions 
new efficient algorithms hierarchical representation large models tight fitting obbs 

separating axis theorem check obbs space arbitrary orientation overlap 
theorem test obbs overlap operations average 
test order magnitude faster compared earlier algorithms checking overlap boxes 

comparison hierarchical representations sphere trees axis aligned aabbs 
show close proximity situations obbs asymptotically faster 

robust interactive implementation demonstration 
applied compute contacts complex geometries interactive rates 
rest organized manner provide comprehensive survey interference detection methods section 
brief overview algorithm section 
describe algorithms efficient computation section 
section presents separating axis theorem shows compute overlaps obbs efficiently 
compare performance hierarchical representations composed spheres aabbs section 
section discusses implementation performance algorithms complex models 
section discussion possible extensions 
previous interference collision detection problems extensively studied literature 
simplest algorithms collision detection bounding volumes spatial decomposition techniques hierarchical manner 
typical examples bounding volumes include axis aligned boxes cubes special case spheres chosen simplicity finding collision volumes 
hierarchical structures collision detection include cone trees trees octrees sphere trees variants trees bounds spatial representations bsp extensions multi space partitions spatial representations space time bounds dimensional testing :10.1.1.52.9953:10.1.1.52.4265
hierarchical methods performing rejection tests objects far apart 
objects close proximity multiple contacts algorithms check large number bounding volume pairs potential contacts 
cases performance slows considerably major bottleneck simulation stated 
computational geometry theoretically efficient algorithms proposed polyhedral objects 
restricted static environments convex objects polyhedral objects undergoing rigid motion 
practical utility clear implemented practice 
approaches linear programming computing closest pairs convex polytopes line stabbing convex differences general polyhedral models :10.1.1.139.265
algorithms utilizing spatial temporal coherence shown effective large environments represented union convex polytopes 
algorithms systems restrictive terms application general polygonal models unstructured representations 
algorithms interval arithmetic bounds functions described 
able find contacts accurately 
practical utility clear moment 
currently restricted objects motion expressed closed form function time rarely case applications 
furthermore performance slow interactive applications 
obbs extensively speed ray tracing interference computations 
terms application large models main issues arise compute tight fitting obb enclosing model quickly test boxes overlap 
polygonal models minimal volume enclosing bounding box computed time number vertices 
practical small models 
simple incremental algorithms linear time complexity known computing minimal enclosing ellipsoid set points 
axes minimal ellipsoid compute tight fitting obb 
constant factor front linear term algorithm high making impractical large models 
ray tracing algorithms structure editors modeling hierarchies construct hierarchies obbs 
directly applied compute tight fitting obbs large unstructured models 
simple algorithm finding overlap status obbs tests edges box intersection faces box vice versa 
obbs convex polytopes algorithms linear programming closest features computation 
general purpose interference detection test obbs convex polyhedron 
efficient algorithms known computing hierarchies tight fitting obbs large unstructured models efficient algorithms known rapidly checking overlap status 
hierarchical methods cost equation section framework evaluating hierarchical data structures interference detection give brief overview 
basic cost function taken analyzing hierarchical methods ray tracing 
large models hierarchical representation total cost function interference detection formulated cost equation nv cv np cp total cost function interference detection nv number bounding volume pair overlap tests cv cost testing pair bounding volumes overlap np number primitive pairs tested interference cp cost testing pair primitives interference 
cost function various hierarchical data structures characterized choice bounding volume choice governed conflicting constraints 
fit original model tightly possible lower nv np 

testing volumes overlap fast possible lower cv 
simple primitives spheres aabbs respect second constraint 
fit primitives long thin oriented polygons tightly 
hand minimal ellipsoids obbs provide tight fits checking overlap relatively expensive 
hierarchical decomposition large model tree bounding volumes may constructed bottom top 
furthermore different techniques known decomposing partitioning bounding volume sub volumes 
leaf nodes may correspond different primitives 
general polyhedral models may represented collection triangles convex polytopes 
decomposition affects values nv np 
clear hierarchical representation gives best performance times 
furthermore models total cost interference detection varies considerably relative placement models 
particular models far apart hierarchical representations spheres aabbs practice 
models close closest features number pair wise bounding volume tests nv increases leading increase number pair wise primitive contact tests np 
model nv np smaller compared trees spheres aabbs bounding volumes 
time best known earlier algorithms finding contact status obbs orders magnitude slower checking spheres aabbs overlap 
efficient algorithms computing tight fitting obbs set polygons constructing hierarchy obbs testing obbs contact 
algorithms able compute tight fitting hierarchies effectively overlap test obbs order magnitude faster best known earlier methods 
sufficiently large models interference detection algorithm faster compared sphere trees aabbs 
building obbtree section describe algorithms building obb tree 
tree construction components placement tight fitting obb collection polygons second grouping nested obb tree hierarchy 
want approximate collection polygons obb similar dimensions orientation 
triangulate polygons composed edges 
obb computation algorithm second order statistics summarizing vertex coordinates 
mean covariance matrix respectively 
vertices th triangle points andr mean covariance matrix expressed vector notation cjk nx nx pi qi ri number triangles andr vector pi pi tand cjk elements covariance matrix 
eigenvectors symmetric matrix mutually orthogonal 
basis 
find extremal vertices axis basis size bounding box oriented basis vectors bound extremal vertices 
eigenvectors covariance matrix axes maximum minimum variance tend align box geometry tube flat surface patch 
basic failing approach vertices interior model ought influence selection bounding box placement arbitrary impact eigenvectors 
example small dense planar patch vertices interior model cause bounding box align 
improve algorithm convex hull vertices triangles 
convex hull smallest convex set containing points efficient algorithms lg complexity robust implementations building obbtree recursively partition bounded polygons bound resulting groups 
available public domain packages :10.1.1.117.405
improvement suffers similar sampling problem small dense collection nearly collinear vertices convex hull cause bounding box align collection 
solution sample surface convex hull densely mean covariance sample points 
uniform sampling convex hull surface normalizes triangle size distribution 
sample convex hull infinitely densely integrating surface triangle allowing differential patch contribute covariance matrix 
resulting integral closed form solution 
area th triangle convex hull denoted pi surface area entire convex hull denoted centroid th convex hull triangle denoted centroid convex hull weighted average triangle centroids weights areas triangles denoted ai elements covariance matrix closed form cjk nx ci pi qi ri chk algorithm compute tight group polygons need represent hierarchically 
methods building hierarchies fall categories bottom top 
bottom methods bounding volume polygon merge volumes larger volumes tree complete 
topdown methods group polygons recursively subdivide leaf nodes indivisible 
current implementation simple topdown approach 
subdivision rule split longest axis box plane orthogonal axes partitioning polygons side plane center point lies analog shown 
subdivision coordinate axis chosen mean point vertices 
longest axis subdivided second longest axis chosen 
shortest 
group polygons partitioned axis criterion group considered indivisible 
choose partition coordinate median center point lies obtain balanced trees 
arguably results optimal worst case hierarchies collision detection 
extremely difficult evaluate average case behavior performance collision detection algorithms sensitive specific scenarios single algorithm performs optimally cases 
model triangles time build lg convex hulls lg don recursion similar quicksort 
fitting box group triangles subgroups takes lg convex hull 
applying process recursively creates tree leaf nodes lg levels deep 
fast overlap test obbs objects interference algorithm typically spends time testing pairs obbs overlap 
simple algorithm testing overlap status obb performs edge face tests 
practice expensive test 
algorithms linear programming closest features computation exist 
section new algorithm test boxes overlap 
trivial test disjointness project boxes axis necessarily coordinate axis space 
axial projection projection box forms interval axis 
intervals don overlap axis called separating axis boxes boxes disjoint 
intervals overlap boxes may may disjoint tests may required 
tests sufficient determine contact status obbs 
know disjoint convex polytopes space separated plane parallel face polytope parallel edge polytope 
consequence convex polytopes disjoint iff exists separating axis orthogonal face polytope orthogonal edge polytope 
proof basic theorem 
box unique face orientations unique edge directions 
leads potential separating axes test faces box faces box pairwise combinations edges 
polytopes disjoint separating axis exists axes mentioned separating axis 
polytopes overlapping clearly separating axis exists 
testing axes sufficient test determining overlap status obbs 
perform test strategy project centers boxes axis compute radii intervals 
distance box centers projected axis greater sum radii intervals boxes disjoint 

aa ra tl bb bb separating axis obbs disjoint intervals projection assume obbs placed relative rotation translation half dimensions radii ai bi 
denote axes unit vectors fori 
referred box axes 
note box axes basis columns vectors 
centers box projects midpoint interval 
projecting box radii axis summing length images obtain radius interval 
axis parallel unit vector radius box interval ra lj similar expression rb 
placement axis immaterial assume passes center box distance midpoints intervals jt lj 
intervals disjoint iff jt lj lj lj simplifies box axis cross product box axes 
example consider second term summation ja ja ja ja jr step due fact columns rotation matrix axes frame original term consisted dot product cross product reduced absolute value 
terms reduce zero eliminated 
simplifying terms axis test looks jt jr jr jr jr axis tests simplify similar fashion 
tests absolute value element times expressions computed axis tests 
operation tally axis tests shown table 
expressions satisfied boxes known disjoint remainder axis tests unnecessary 
permits early exit series tests operations absolute worst case fewer needed 
degenerate obbs obb bounds single polygon zero thickness rectangle 
cases box extent known zero expressions tests simplified 
operation counts overlap tests table including boxes degenerate rectangle 
reductions possible box degenerates line segment 
multiplies additions eliminated zero thickness 
obbs infinite extents extents known infinite fat ray plane certain axis tests require straight forward modification 
axis test infinite inequality possibly satisfied zero case test proceeds normal jr term removed 
test jt jr jr jr general expect zero short circuit cause expensive inequality test skipped 
operation box box box rect rect rect compare add sub mult abs table operation counts overlap tests comparisons implemented algorithm compared performance box overlap algorithms 
include efficient implementation closest features computation convex polytopes fast linear programming seidel algorithm 
note implementations optimized general convex polytopes boxes 
algorithms faster performing edge face intersections 
report average time checking overlap obbs table 
timings microseconds computed hp sep axis closest linear algorithm features programming table performance box overlap algorithms obb vs volumes primary motivation obbs virtue variable orientation bound geometry tightly sphere trees 
reason fewer levels obb tree need traversed process collision query objects close proximity 
section analysis asymptotic performance versus sphere trees experiment supports analysis 
fig 
show different levels hierarchies approximating torus 
number bounding volumes tree level 
smaller compared 
define tightness diameter ratio bounding volume respect geometry covers 
tightness bounding volume respect geometry covers isb hausdorff distance formally thinking closed point sets max min dist diameter bounding volume respect bounded geometry maximum distance pairs enclosed points bounded geometry max dist aspect ratio bounding volume respect bounded geometry aspect ratios parent volumes similar children bounding nearly flat geometry 
argue bounded surfaces low curvature sphere trees form fixed aspect ratio hierarchies sense aspect ratio node hierarchy aspect ratio similar children 
illustrated fig 
plane curves 
bounded geometry nearly flat children shapes similar parents smaller 
fig spheres aabbs halved go parents children approximately parent child 
fixed aspect ratio hierarchies linear dependence note aspect ratio aabbs dependent specific orientation bounded geometry geometry conveniently aligned aspect ratio close aligned close 
value aabb enclosing nearly flat geometry approximately children 
obb aligns geometry aspect ratio obb depend geometry orientation model space 
depends local curvature geometry 
sake analysis assuming nearly flat geometry 
suppose bounded geometry low constant curvature surface large sphere 
fig 
show plane curve fixed radius curvature bounded obb 
sin cos small angle obbs aspect ratio children half parent bounding surfaces low constant curvature bounding nearly flat geometry 
approximation eliminating obtain 
quadratic dependence halved aspect ratio halved 
conclude bounding low curvature surfaces spheres trees linear dependence quadratic dependence illustrated plane curves figures relationships hold surfaces space 
suppose sized bounding volumes cover surface patch area require volume cover surface area simplicity ignoring packing inefficiencies 
volumes 
aabbs spheres depends linearly 
obbs quadratic dependence 
cover surface patch volumes tightness obbs require bounding volumes aabbs spheres require bounding volumes 
contact scenarios require traversing trees nodes depth happen surfaces come parallel close proximity point surface close point surface 
common virtual prototyping tolerance analysis applications fitted machine parts tested mechanical consistency 
dynamic simulations generate paths object comes rest 
noted smooth highly tessellated surfaces come near contact region near contact locally resembles parallel close proximity scenario miniature sufficiently tessellated models expense processing region dominate collision query 
may special case parallel close proximity situation deserves consideration designing collision evaluating collision detection algorithms 
experiments performed experiments support analysis 
generated concentric spheres consisting triangles 
smaller sphere radius larger radius performed collision queries 
created process eigenvectors covariance matrix determine tests aabb obb separation aabbs upper curve obbs lower curve parallel close proximity log log plot box orientations identity matrix 
number bounding box overlap tests required process collision query shown fig 
tree types range values 
graph log log plot 
upper curve lower 
slopes linear portions upper curve lower curves approximately expected analysis 
differing slopes curves imply require asymptotically fewer box tests function experiment 
notice curve levels lowest values sufficiently small values lowest levels hierarchies inadequate separating surfaces nodes visited collision query resort testing triangles 
decreasing result tree extend depth previously reached 
curve level sufficiently small value shown graph 
furthermore trees binary number nodes obbtree curve level height graph curve 
second experiment size spheres placed separated distance call scenario point close proximity surfaces patches come close touching point 
think surfaces neighborhood closest points parallel close proximity approximation applies locally 
able analytically characterize performance rely empirical evidence claim scenario require asymptotically fewer bounding box overlap tests function 
results shown fig 

log log plot increasing gap upper lower curves show asymptotic difference number tests decreases 
see leveling small values analysis general analysis performance collision detection algorithms bounding volume hierarchies extremely difficult performance situation specific 
assumed geometry bounded locally low curvature finely tessellated 
enabled formulation simple relationships tests aabb obb separation aabbs upper curve obbs lower curve point close proximity 
log log plot assumed packing efficiency bounding volumes perfect formulate relationships area surface covered 
believe inaccuracies assumptions account deviations theory exhibited graph fig 

surface patches high curvature fractal may expect see asymptotic performance advantages obbs 
similarly coarse tessellation surface place natural limit number number volumes approximate surface 
coarse tessellation obb sphere may traverse entire hierarchies sufficiently close requiring approximately number bounding volume overlap tests 
furthermore scenarios parallel close proximity occur don expect quadratic convergence property obbs don expect see superior asymptotic performance 
implementation performance software collision detection library written 
primary data structure obb box class members contain rotation matrix translation vector defining placement relative parent pointers parent children box dimensions object holds list triangles box contains 
data structure box occupies bytes 
tree formed boxes nodes triangle list class compound data structures 
obbtree triangles contains leaf boxes internal node boxes 
terms memory requirements approximately boxes triangle 
triangle requires double precision numbers plus integer identification totaling bytes bit ieee arithmetic 
memory requirement totals bytes triangle model 
estimate include overhead may exist dynamic memory allocation mechanism runtime environment 
quaternions rotation matrices represent box orientations results substantial space savings need operations obb overlap test 
single precision arithmetic save memory 
robustness accuracy implementations applicable unstructured polygonal models 
polygons permitted degenerate unique vertex connectivity restrictions 
algorithm requires adjacency information 
degree robustness gives system wider applicability 
example space curves approximated degenerate triangles line segments system correctly find intersections curves curves surfaces 
obb overlap test robust compared obb overlap algorithms 
need check nongeneric conditions parallel faces edges special cases test need handled separately 
series comparisons linear combinations test numerically stable divisions square roots functions threaten domain errors create conditioning problems 
error margin guards missing intersections due arithmetic error 
value set user 
flow control overlap test simple number operations required small overlap test candidate implemented assembly 
test easily implemented hardware 
collision query time spent overlap tests optimization significantly improve running time 
qhull package optionally computing obb orientation :10.1.1.117.405
quite robust 
qhull ensure input qhull spans dimensions 
input rank deficient current implementation skips qhull uses triangles group 
complete solution project input lower dimensional space compute convex hull projection qhull works input arbitrary specified dimension input full rank 
issue propagation errors descend hierarchies performing overlap tests 
test boxes triangles placement relative result series transformations level hierarchy traversed 
errors due cascading transformation matrices theoretical source errors aware 
performance interference detection algorithm applied complex synthetic environments demonstrate efficiency highlighted table 
figures sgi reality engine mhz cpu mb 
simple dynamics engine exercised collision detection system 
time step contact polygons collision detection algorithm impulse applied object contact advancing clock 
scenario pipes model environment dynamic object shown fig 

object environment contain polygons 
scenario pipes torus environ size object size num steps num contacts num box box tests num tri tri tests time secs secs ave int 
detec 
time msecs msecs ave time box test ave contacts step table timings simulations object times smaller size environment 
simulated gravitational field directed center large cube pipes permitted smaller cube fall inward tumbling bouncing 
path contained discrete positions required seconds determine contacts path 
challenging scenario smaller object entirely embedded larger model 
models contain long thin triangles straight segments pipes efficiently approximated sphere trees octrees general 
obvious groups clusters typically spatial partitioning algorithms bsp scenario complex torus landscape 
different steps simulation shown fig 

spikes landscape prevent large bounding boxes touching floor landscape provide numerous shallow concavities object enter 
likewise wrinkles twisting torus impractical decompose convex polytopes difficult efficiently apply bounding volumes 
torus environment smooth come parallel close proximity increasing number bounding volume overlap tests 
notice average number box tests step torus scenario twice pipes number contacts lower 
applied algorithm detect collision moving pivot model shown fig 

parts storage handling room submarine 
model triangles 
pivot structure triangles 
multiple contacts length rests rollers 
typical collision query time scenario shown fig 
ms mhz cpu gb sgi reality engine 
comparison approaches number hierarchical structures known literature interference detection 
spheres aabbs 
applied number complex environments 
standard benchmarks available compare different algorithms implementations 
result non trivial compare algorithms implementations 
compared different algorithms line stabbing aabbs models composed tens thousands polygons 
sgi indigo extreme algorithms best performance able compute contacts models ofa second 
just model complexity able handle models composed hundreds thousands polygons multiple parallel contacts second 
compared algorithm implementation sphere tree algorithm :10.1.1.52.9953
preliminary comparison indicates order magnitude improvement 
comparisons experiments planned near 
rapid benchmarks implementation algorithms available software package called rapid rapid accurate polygon interference detection 
obtained www cs unc edu geom obb html 
models shown available precomputed motion sequences 
find large models close proximity cv nv cost equation cv order magnitude slower sphere trees aabbs 
nv asymptotically lower sphere trees aabbs 
likewise np asymptotically lower 
sufficiently large models sufficiently close proximity require process collision query sphere trees 
extensions previous sections described algorithm interference detection polygonal models undergoing rigid motion 
includes specialization extension applications 
include ray tracing interference detection curved surfaces view frustum culling deformable models 
far curve surface intersections concerned current approaches algebraic methods subdivision methods interval arithmetic 
algebraic methods restricted low degree intersections 
high degree curve intersections algorithms interval arithmetic fastest 
algorithms compute decomposition curve terms aabbs 
worthwhile try obbs 
involve subdividing curve computing tight fitting obbs segment checking overlaps 
terms view frustum culling applications hierarchies aabbs 
may enclose object obbtree test overlap view frustum 
overlap test section easily extended test overlap obb view frustum 
libraries benchmarks great need develop set libraries benchmarks compare different algorithms 
involve different models scenarios 
hierarchical data structure rapid exact interference detection polygonal models 
algorithm general purpose assumptions input model 
new algorithms efficient construction tight fitting obb trees overlap detection obbs new separating axis theorem 
compared performance hierarchies spheres aabbs find asymptotically faster close proximity situations 
algorithm implemented able detect contacts complex geometries composed polygons interactive rates 
greg jim ken fast electric boat model storage handling room 
supported part sloan foundation fellowship aro contract ma nsf ccr nsf ccr onr contract arpa contract dabt nsf arpa science technology center computer graphics scientific visualization nsf prime contract ford motor 
alonso serrano 
solving collision detection problem 
ieee computer graphics applications 
arvo kirk 
survey ray tracing acceleration techniques 
ray tracing pages 
baraff 
curved surfaces coherence non penetrating rigid body simulation 
acm computer graphics 
barber dobkin :10.1.1.117.405
quickhull algorithm convex hull 
technical report geometry center mn 
beckmann kriegel schneider seeger 
tree efficient robust access method points rectangles 
proc 
sigmod conf 
data pages 
cameron 
collision detection dimensional intersection testing 
proceedingsof robotics automation pages 
cameron 
approximation hierarchies bounds 
proceedings 
symposium solid modeling foundations cad cam applications pages austin tx 
canny 
collision detection moving polyhedra 
ieee trans 
pami 
chazelle dobkin 
intersection convex objects dimensions 
acm 
cohen lin manocha ponamgi 
collide interactive exact collision detection system large scale environments 
proc 
acm interactive graphics conference pages 
duda hart 
pattern classification scene analysis 
john wiley sons 
tom duff 
interval arithmetic recursive subdivision implicit functions constructive solid geometry 
acm computer graphics 
snyder interval methods multi point collisions time dependent curved surfaces 
proceedings acm siggraph pages 
gilbert johnson keerthi 
fast computing distance objects 
ieee automation vol ra 
gottschalk 
separating axis theorem 
technical report tr department computer science unc chapel hill 
greene 
detecting intersection rectangular solid convex polyhedron 
graphics gems iv pages 
academic press 
hahn 
realistic animation rigid bodies 
computer graphics pp 

held klosowski mitchell 
evaluation collision detection methods virtual reality fly throughs 
canadian conference 
herzen barr 
geometric collisions timedependent parametric surfaces 
computer graphics 
hubbard 
interactive collision detection 
proceedings ieee symposium research frontiers virtual reality october 
lin efficient collision detection robotics 
phd thesis department electrical engineering computer science university california berkeley december 
lin dinesh manocha 
fast geometric models 
visual computer 
moore wilhelms 
collision detection response computer animation 
computer graphics 
naylor thibault 
merging bsp trees yield polyhedral modeling results 
proc 
acm siggraph pages 
rourke 
finding minimal enclosing boxes 
internat 
comput 
inform 
sci 
ponamgi manocha lin 
incremental algorithms collision models 
proc 
acm solid modeling pages 
preparata shamos 
computational geometry 
springer verlag new york 
quinlan :10.1.1.52.9953
efficient distance computation non convex objects 
proceedings international conference robotics automation pages 

extended convex differences tree representation dimensional polyhedra 
international journal computational geometry applications 
rubin whitted 
dimensional representation fast rendering complex scenes 
proc 
acm siggraph pages 
samet 
spatial data structures quadtree octrees hierarchical methods 
addison wesley 
sederberg parry 
comparison curve intersection algorithms 
computer aided design 
seidel 
linear easy 
proc 
th ann 
acm conf 
pages berkeley california 
bouma collision detection analysis simulation 
simulation pages 
hooper greenberg 
ray tracing 
acm transactions graphics pages 
welzl 
smallest enclosing disks balls ellipsoids 
technical report fachbereich mathematik freie universitat berlin 
interactive interference detection shown yellow pivot structure shown green triangles pivot triangles average time perform collision query msec sgi reality engine mhz cpu interactive interference detection complex torus torus polygons environment polygons average time perform collision query msec sgi reality engine mhz cpu interactive interference detection complex pipeline polygons average time perform collision query msec sgi reality engine mhz cpu aabbs vs obbs approximation torus shows obbs converging shape torus rapidly aabbs 
