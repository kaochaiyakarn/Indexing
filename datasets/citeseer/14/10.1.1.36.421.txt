efficient persistent haskell tony davie kevin hammond juan division computer science university st andrews universidade da na 
persistent programming offers prospect seamless integration programs long lived data offering prospect constructing systems allow rapid program development simplifying process writing applications purpose handle long lived data 
previous attempts produce persistent functional languages majority interpreted performance generally seriously compromised 
persistence implemented efficiently purely functional language 
offers systematic study claim 
describes implementation orthogonal persistence compiled purely functional language existing st andrews persistent object store 
preliminary performance results show possible implement orthogonal persistence efficiently hope result efficient straightforward approaches binary clear symbiosis functional persistent programming models 
pure functional programming language haskell distinction data program functions values 
similarly persistent programming distinction programs data persist longer single session 
combination techniques lead simple elegant model programming long lived values functions 
similarities language level extend implementation level 
functional framework natural graph reduction exploit shared pointers order achieve efficient implementation lazy evaluation 
persistent world sharing preserved persistent store shared persistent identifiers create disk graph structures 
similarity extends techniques access persistent data programs 
describes design implementation orthogonally persistent version haskell functional language 
system constructed efficiency mind developed st andrews persistent object store basis implementation persistence integrated fastest implementation haskell currently available highly optimised glasgow haskell compiler 
allows study previously question persistence implemented efficiently purely functional language 
folklore results suggesting opposite interpreted implementations led construction number competing capable systems implementing variants binary contention possible achieve acceptable efficiency orthogonally persistent system efficiency greater general solutions binary contention examined section 
intend system developed number ways 
firstly underpin model program development 
secondly help development long lived applications bremen interface 
thirdly allow applications handle long lived data efficiently preserving sharing laziness 
remainder structured follows 
section considers design space outlining basic design monads 
section discusses implementation issues 
section examines performance resulting implementation 
section discusses related systems binary orthogonal persistence 
section concludes 
design order avoid unnecessary duplication effort system simple reliable persistent object store pos implement number persistent languages including napier galileo 
store provides number basic operations allow data read written persistent storage raw data persistent objects rudimentary support concurrent access 
intend build appropriate high level interface store better target apparently sophisticated design pjama store specialised handle java objects provides high level features hinder implementation 
exploiting memory mapping features operating system unnecessary disk accesses reduced eliminated store promises offer reasonable efficiency levels 
high level design premise explicit persistence 
having explicitly marked object persistent follows objects reachable persist automatically 
orthogonal persistence maintained retaining ability mark selected objects persistent explicitly 
helps avoid time space performance penalties arise implicit persistence saving unwanted intermediate values 
objective allow programmers implement persistent applications haskell interface provide persistent programming environment example 
environment constructed interface course long term aims modules wish constrain programmers environment 
haskell pos interface provide basic operations persistent store open close commit 
operations standard monadic interface permitting standard error handling mechanisms data open filename 
io close 
io commit 
io open operation creates handle named persistent store close closes store attached handle committing changes commit commits store closing associated handle 
operations similar provided persistent languages napier explicit handle implicit state potentially allows multiple persistent stores simultaneously 
accessing values operations provide access persistent values get persistent 


io persistent 



io persistent class doing dynamic typing described section 
get operation provides access value known persistent 
persistent identifier string name uniquely identifies persistent value 
persistent identifier persistent store error raised io monad 
operation store value persistent store retrieve persistent value 
third argument value object 
object persistent persistent id occur persistent store closure stored persistent id id refers object persistent previously stored value retrieved 
allows transparent access persistent store necessary know value persistent persistent store simply extension memory heap long term cache avoid costly re evaluation 
dynamic typing retrieving value persistent store get checked known static type value 
possibility typeof operator produce unique hash value type stored persistent value checked fetched value 
class persistent typeof hash 
sufficient polymorphic functions closures 
case necessary unify statically determined type type returned persistent store 
leroy mauny dynamic polymorphic types caml may help 
investigating problem moment believe insurmountable proves necessary incorporate simple unification algorithm runtime system 
operation may relatively expensive done object moved persistent store 
implementation implementation uses technology taken gum parallel runtime system glasgow parallel haskell 
parallel technology turn borrows heavily conventional object store implementations 
effectively standard techniques modified experience parallel system notably fetching code adapted suit glasgow haskell compiler 
low level implementation tailored suit stg machine implementation 
principal features implementation applicable systems 
st andrews pos lower level shadow paged napier pos modified improve efficiency 
disk accesses neighbouring words persistent store reduced memory mapping words disk page paged memory 
basic operations provided system pid sh create object pos int size create new persistent objects 
int sh read word pos pid pid int offset reads word persistent store offset offset persistent object pid 
int sh write word pos pid pid int offset int value writes word value offset offset persistent object pid 
pid sh read key pos pid pid int offset sh read word returns pid data word 
void sh write key pos pid pid int offset int value sh write word writes pid word 
problem resolve construct mapping haskell closures pos objects 
general format haskell closures 
closure comprises fixed length header structure closure types additional variable length header content depends closure type possibly empty list pointers possibly empty list non pointer data 
fh vh pointers non pointers fh fixed header vh variable header fig 

generic format haskell closures corresponding general format pos objects shown 
primary difference preceding haskell closure format pos object provision data haskell header 
contains pointers haskell heap simply prepend non pointer data pos object 
pointers sz sz size object number pointers object non pointers fig 

pos object format mapping shown 
necessary add word indicate size haskell header easily separated non pointer data 
basic values get operation introduces closure includes persistent id object persistent store 
name analogy gum runtime system closures pointers hs header non pointers sz sz size object number pointers object hs header size fig 

mapping haskell closure pos object globally addressed objects parallel machine 
format closure simple shown 
hash table pids addresses implicit pointer fig 

closure type closure evaluated replaced appropriate closure pos 
closure contains pointers persistent values represented additional new closures 
structured objects lists converted pos store format incrementally demand 
important note lazy conversion imply additional disk accesses take place pos memory mapped entire disk block pos objects cached local memory object fetched disk 
advantage incremental technique avoiding unnecessary conversion type checking reducing garbage collection overheads disk accesses part persistent object required 
shown 
preserving sharing preserve memory sharing maintain hash table mapping persistent ids 
local addresses 
constructing part get operation creating indirection introduced existing local copy persistent value may evaluated 
shown hash table needs fully integrated garbage collector hash table entries garbage collection roots need updated compacting collector moved eliminated garbage 
generational collector possible highly desirable optimise hash table update process new generation ptrs pm pm pm ptrs pm pm pm pm pm header ptrs pointers non pointers fig 

fetching closures lazily pm header ptrs pointers non pointers ptrs pm pm pm ptrs pm pm pm pm fig 

memory sharing persistent values entries checked minor garbage collection 
implemented 
hash table pids addresses implicit pointer fig 

closure format reflecting updates pos description process fact applies basic data values 
suspensions taken pos require slightly different mechanism result evaluation reflected changes pos 
order achieve effect introduced new type indirection closure closure type shown 
non normal form closures fetched persistent store replace original closure transformed closure points newly fetched value 
closure evaluated address recorded update frame happens stg machine conventional indirections 
embedded closure evaluated 
evaluation extracted update frame update code executed address new normal form argument 
effect twofold firstly overwritten new value turned normal indirection secondly new value written pos stored persistent id shown 
closure non evaluated whnf closure evaluation indirection fig 

updating closures important observe memory mapping acting disk cache pos 
write take place immediately happen high level commit operation 
point updated pages written back disk 
changed values inhabit page may considerably reduce amount disk traffic required 
functions partial applications functions partial applications suspensions require special conversion read 
need due fact program addresses code change reason need calculate actual address code time read function th pos 
solved fairly easy storing offset function code respect know address module recalculate time run program 
cost analysis clear performance trade value pos memory value 
investigated techniques avoid pos accesses cost recomputation cheap 
clearly cost analyses granularity analysis proposed parallel context important determining worthwhile persistent value preference functionally equivalent closure provided operation 
performance measurements section omitted draft time reasons 
initial performance results discussed workshop incorporated final version 
related binary binary non textual main purposes exchange information directly programs written languages overhead writing parsing routines improve space time efficiency reading writing data application 
binary systems usually necessarily sequential 
important degrades access update time 
generally support flat fully evaluated data structures handle sharing values 
done problem providing binary facilities haskell 
supported prototype haskell compiler built lml compiler glasgow subsequent compilers ignored standard binary class bin type extent removed haskell variants pending better design 
removing binary class standard haskell libraries successfully cleared field new experimental implementations possess number important advantages original design 
major deficiency original design failed support sharing particularly defined complicated compositional fashion 
failed support efficient compression inter language interfacing 
implementation binary builds pjama store 
allows pure data stored possible store functions suspensions 
access conventional sequential file reading direct access binary file completely rewritten updated 
wallace implementation contrast designed support efficient compression order reduce disk usage 
approach file access sequential binary files treated complete units possible update incrementally 
pil investigating class dynamic type dependent functions concurrent clean 
implementation preserve sharing allow suspensions functions stored persistently 
planned implement features clean shields sheard peyton jones working approach dynamic typing concept call staged computation extends type system types known run time persistent store supporting type inference polymorphism 
persistent functional languages number functional persistent languages investigated implemented 
oldest lazy persistent version developed undergraduate project st andrews 
allowed top level environment named stored retrieved 
quickly user friendly syntax early version subset haskell 
allowed retrieval combination modules persistent database form interactive user environment 
sharing state lazy evaluation preserved object store 
byte code interpreted 
new machine employed carry reduction 
interesting property free variables function calls top level functions treated uniformly storing heap object attached closure function defined 
amber caml strict functional languages support persistence providing functions export import values file system 
values wrapped dynamic type type check import 
caml exhibits loss referential integrity value read persistent store resulting values copies shared 
poly ml commercially available persistent functional system 
users store poly ml objects persistent databases 
run time system transparently loads objects persistent store physical memory demand 
databases may arranged linked hierarchy allowing number users share common data develop applications private working environments 
system non lazy sharing preserved 
reported implementation persistent lazy version haskell brought integrating back glasgow haskell compiler producing native code run time system running top st andrews persistent object store 
system allows users mark values explicit persistence 
identified implemented medium level interface allows open close commit persistent stores allows transparent access persistent values get 
system allows preservation sharing state evaluation persistent objects 
preliminary performance results hopeful reported full workshop versions 

albano cardelli orsini galileo strongly typed interactive conceptual language acm tods vol 
pp 


brown morrison generic persistent object store software engineering journal vol 
pp 


atkinson bailey chisholm cockshott morrison approach persistent programming computer journal vol 
pp 


cardelli amber bell labs report combinators functional programming languages ed 
cousineau 
curien robinet lncs springer verlag 

davie hammond functional proc 
glasgow workshop functional programming scotland phil trinder ed tr january 

davie persistent lazy version secd machine flat environment proc 
bombay india pp 
research report cs department mathematical computational sciences st andrews university 

atkinson main memory management support orthogonal persistence java second international workshop persistence java half moon bay california august 

dearle brown private communication 

hammond 
loidl partridge visualising granularity parallel programs graphical winnowing system haskell high perf 
functional computing pp 
denver 

hammond peyton jones wadler unpublished internal report university glasgow department computer science 

karlsen tool integration functional setting forthcoming phd thesis university bremen 

karlsen krieg system unified development framework nivat rattray rus scollo ed algebraic methodology software technology amast workshop computing springer verlag london pp 


leroy mauny dynamics ml functional programming vol 
pp 


matthews persistent storage system poly ml edinburgh university department computer science laboratory foundations computer science report ecs lfcs 

matthews progress persistence poly poly ml edinburgh university department computer science laboratory foundations computer science report ecs lfcs 

models persistence lazy functional programming systems ph thesis st andrews university department mathematical computational sciences research report cs 

morrison brown connor dearle napier manual university st andrews dept comp 
sci 
persistent programming research report 

peterson hammond report programming language haskell version technical report yale dcs rr department computing science yale university may available haskell cs yale edu haskell report 

peyton jones implementing lazy functional languages stock hardware spineless tagless machine functional programming vol 
pp 


pil class file proc 
th intl 
workshop implementation functional languages bonn lncs pp 
springer verlag 

pil dynamic types type dependent functions proceedings 
atkinson spence bailey design new persistent object store pjama second international workshop persistence java half moon bay california august 

personal communication 

shields sheard peyton jones dynamic typing staged type inference popl th acm sigplan sigact symposium principles programming languages pp 
san diego 

trinder hammond mattson jr partridge peyton jones gum portable parallel implementation haskell iin programming languages design implementation pldi pp 
philadelphia pa 

turner new implementation technique applicative languages 

van eekelen plasmeijer concurrent clean language report computing science institute university nijmegen www cs kun nl clean clean html 

wallace type checked message passing functional processes turner hammond sansom editors glasgow functional programming workshop pp 
bcs workshops computing springerverlag sept 

wallace runciman bits lambdas binary data lazy functional language appear acm international symposium memory management vancouver canada oct 
