madkit agent platform architecture olivier gutknecht lirmm fr jacques ferber ferber lirmm fr laboratoire informatique micro de montpellier universit montpellier ii rue ada montpellier cedex france madkit multi agent development kit generic multi agent platform 
toolkit organizational model 
uses concepts groups roles agents manage different agent models multi agent systems time keeping global structure 
discuss architecture madkit minimalist agent kernel decoupled specific agency models 
basic services distributed message passing migration monitoring provided platform agents maximal flexibility 
componential interface model allows variations platform appearance classes usage 
illustrate approach explaining consequences architecture describe motivation madkit design integration heterogeneous agent applications reuse agent social structure patterns versatility application platform 
summary madkit applications date 
heterogeneity issue major characteristic agent research applications high heterogeneity field 
heterogeneity mean agent model heterogeneity characterizing agents built described different models formalisms language heterogeneity agents different communication interaction schemes applicative heterogeneity multi agent systems various goals applicative domains 
successful theories applications proposed different fields multi agent research interface agents mobile agents information retrieval agents believe able take advantage diversity approaches simultaneously important build complex systems keeping heterogeneity manageable 
size fits interesting question establish conceptual models software toolkits facilitate integration 
advocates interoperability agent system envisaged agent level 
existing interoperability mechanisms software engineering corba xml 
interesting foundations universal answer preoccupation 
relationship underlying interoperability platform agent layer clearly defined identified 
madkit multi multi agent system took agent platform field example diversity approaches exists agent formalisms communication models architectures 
designed model called aalaadin structures multi agent systems implemented platform model 
platform realized take full advantage model 
particularly focus madkit platform 
see structural model multi agent systems level ease agent diversity integration platform qualification multi multi agent systems 
madkit toolkit motivated need provide generic highly customizable scalable agent platform 
goal building foundation layer various agent models essential making basic services provided completely extensible replaceable 
briefly introduce aalaadin conceptual model section 
section describes platform architecture 
presents concept agent micro kernel system services provided agents gives overview agent interface model 
section presents experiments systems built madkit 
section briefly talks concludes 
agent group role model madkit platform architecture rooted agr agent group role model developed context aalaadin project 
madkit implements uses management model 
just summarize refer general overview project detailed description formal operational semantics 
advocate considering organizational concepts groups roles structures dependencies class citizens key issue building large scale heterogeneous systems 
definition organization viewed framework activity interaction definition groups roles relationships 
avoiding agent oriented viewpoint organization regarded structural relationship collection agents 
organization described solely basis structure way groups roles arranged form concerned way agents behave multi agent systems analyzed outside set interaction modes 
specific architecture agents purposely addressed 
aalaadin model core concepts agent group role 
presents diagram model 
contains handles member group agent role core model agent model places constraints internal architecture agents 
agent specified active communicating entity plays roles groups 
agent definition intentionally general allow agent designers adopt accurate definition agent hood relative application 
agent designer responsible choosing appropriate agent model internal architecture 
group groups defined atomic sets agent aggregation 
agent part groups 
basic form group way tag set agents 
developed form conjunction role definition may represent usual multi agent system 
agent member groups time 
major point aalaadin groups freely overlap 
group founded agent 
role role representation agent function service identification group 
agent handle multiple roles role handled agent local group 
handling role group requested candidate agent necessarily awarded 
communication schemes defined roles 
model static description agent organization 
allows define rules specify part dynamics agent organization 
note particular mechanism role access group defined systematic acceptance refusal admission conditioned skills admission dialog relation group metrics 
discussion see overlapping groups trade flat world agents part structure models organizations agents considered atomic agents raises important problems coherence structure semantics 
model group necessary designed role representative group associated member act proxy group external world 
real world metaphor compared situation person negotiation 
part interaction individual representative dialog 
architecture madkit platform built model 
addition core concepts platform adds design principles micro kernel architecture services graphic component model madkit set packages java classes implements agent kernel various libraries messages probes agents 
includes graphical development environment standard agent models agent application agent application agent application system agent system agent java bean java bean synchronous engine local messaging graphical host application java bean group role manager agent micro kernel madkit architecture diagram basic philosophy madkit architecture possible platform management service assured micro kernel handled agents 
platform agent platform classical sense 
reduced size microkernel combined principle modular services managed agents enable range multiple scalable platforms construction libraries specialized agent models 
agent groups proposed architectures mechanism specific mobile agents lacks ability handle multiple groups multiple roles generic model 
agent micro kernel madkit micro kernel small kb optimized agent kernel 
term micro kernel role micro kernels domain os engineering 
directly translate incorporating number key facilities allow efficient deployment agent toolkits 
madkit kernel handles tasks control local groups roles interoperability extensibility possibilities madkit relies organizational layer mandatory group role handled lowest level platform provide functionality agent micro kernel responsible maintaining correct information group members roles handled 
checks requests groups roles structures correct evaluating delegating evaluation role functions 
agent life cycle management kernel launches eventually kills agents maintain tables agent instances module madkit owns direct actual agents 
handles agent personal information assigns globally unique identifier kernel address plus agent identification local kernel creation 
identifier redefined accept standardized agent naming schemes 
local message passing kernel manages routing distribution messages local agents 
basic mechanism relies copy write implementation avoid unnecessary operations 
kernel wrapped special agent created bootstrap 
permits control monitoring kernel agent model 
kernel hooks kernel fully extensible kernel hooks 
entitled agent agent allowed member system group request subscribe kernel hooks 
hooks generic subscribe publish scheme allowing extension core behavior platform 
core function kernel adding agent group launching agent sending message implements mechanisms 
monitor hooks number agents subscribe monitoring hook 
type hook invocation kernel operation send inform message agents requested monitor hook operation arguments operation content message 
instance written agents monitor population organization platform 
interceptor hooks hooks similar previous type agent hold interceptor hook give kernel operation 
furthermore interceptor hook prevents execution implemented kernel operation 
particularly useful write distributed messaging agents group synchronizers security control groups changing behavior basic operation 
reduced number kernel calls simple underlying model helps modification call preserving semantics 
kernel call having associated hooks invoked information transmitted message transmission 
kernel operation hooks enable monitoring change behavior system group defines additional interactions member allow actions kernel 
instance system communicator agent inject local kernel message received socket connection distant madkit platform 
agents generic agent madkit class defining basic lifecycle activation execution termination control life cycle 
main agent class madkit defines primitives related message passing plus group role management implement specific execution policy 
subclass adds support concurrent thread execution natural model coarse grained collaborative cognitive agent 
additional subclasses implements synchronous execution external scheduler focused reactive hybrid architectures finegrained agents 
communication achieved asynchronous message passing primitives directly send message agent represented higher level version send broadcast agents having role specific group 
group roles actions requests defined action level 
agent developer completely free define agent behavior organizational view 
message passing messages madkit platform defined inheritance generic message class 
specific messages defined intra group communication allows group specific communication attributes 
messages receivers senders identified 
madkit define interaction mechanism defined ad hoc basis built specific agent model library 
agent models specific agent libraries built infrastructure notably bindings scheme language agent model wraps jess rule engine 
various models artificial life reactive systems turtle kit mimics functions 
actor model implementation agent construction tools running agents platform 
tools running agents madkit cation services contrast architectures madkit uses agents achieve things distributed message passing migration control dynamic security aspect system management 
different services represented platform roles specific groups defined organizational structure 
allows high level customization service agents replaced hurdle 
instance external developers built new group synchronizer agent shared directory maintain group information distributed kernel relying provided madkit specific system 
agent uses hooks kernel achieve goal replaced provided group synchronizer agent requesting role system group 
agents notice change 
role delegation principle interesting effect allow easy scaling 
agent hold roles group group grows launches agents delegates roles 
communication distribution messaging groups roles management identifier identifier unique distant kernels madkit agents transparently distributed changing agent code 
groups spawn different kernels agents usually notice 
distribution agent platform relies roles system group communicator agent micro kernel route non local messages communicator agents kernel kernel message interception message insertion agent agent communication communication agent communication agent specific transport protocol sockets corba ir communication agents distant platforms injects messages kernel see group synchronizer agents allows groups roles distributed kernels sending groups roles changes synchronizers turn enter information local kernel 
note group synchronizers distributed group ease distributed group management 
communication mechanisms built regular agents platform communication migration tailored specific platform requirements changing communication agents instance disconnected mode laptop 
madkit platform run full local mode just launching communication agents 
services necessarily handled agent 
instance communicator agent representative group gathering agents specialized sockets corba communications delegate message appropriate agent componential graphical architecture madkit graphic model independent graphic components java beans specification standard version 
agent solely responsible graphical interface aspects rendering event processing actions 
agent interface simple label complex construction multiple widgets legacy bean software module 
graphic shell launches kernel setup interfaces various agents manage global gui instance agent window mapped global worksheet combined agent interface 
graphic shell classic software module wrapped agent maximum flexibility allowing control agent interfaces regular madkit agent part interaction scenario 
madkit running applet box console modes consequences discussion conjunction agent micro kernel decoupled agent guis modular set agent services allows important customizations madkit platform 
instance varieties platform developed complete graphical environment develop test multi agent systems called box 
allows graphical control agent life cycle launch termination pause dynamic loading agents uses introspection agent code discover runtime groups roles agents offer direct manipulation structures 
text mode running micro kernel instantiating graphical interfaces running agents 
platform useful keep small agent daemon running machine agents providing services brokering naming routing machines 
applet wrapper carries agent micro kernel application agents executes distant browser 
classic application embed madkit kernel hosts agents handles collaborative dynamic aspects 
instance implementation choice application described 
experimental version madkit tailored palm pilot 
kernel slightly prototype madkit kernel agents palm device tweaked set classes allowed java platform micro edition 
specific communicator handles infrared messaging 
applications madkit various research teams nearly year projects covering wide range applications simulation hybrid architectures control submarine robots evaluation social networks study multi agent control production line 
instance developed complex madkit application knowledge management applications 
federates information different data sources databases support tools web search engines current page browsed user parsed 
unified views highly heterogeneous knowledge sources 
users maintain shared ontologies domain 
agents implemented encapsulate various mechanisms retrieve transform information 
organizational structure defined various agents plugged adapt platform client specific needs 
agent toolkit organizational model argued large complex agent systems able cope heterogeneity models communications individual agent architectures 
plan extend directions 
plan continue underlying model especially context formal expression design methodologies 
secondly extend platform refining existing system agents proposing predefined agents groups libraries 
planning built additional layers models multi agent simulation 
joachim baumann 
agent groups mobile agent systems 
ifip wg international conference distributed applications interoperable systems 

functional scripting languages jvm 
rd annual european conference java object orientation denmark 
jacques ferber olivier gutknecht 
meta model analysis design organizations multiagent systems 
third international conference multi agent systems icmas proceedings pages 
ieee computer society 
jacques ferber olivier gutknecht 
operational semantics role agent architecture 
proceedings th int 
workshop agent theories architectures languages 
springer verlag 
ernest friedman hill 
jess java expert system shell 
distributed computing systems sandia national laboratories livermore ca 
sun microsystems virtual machine white 
technical report garcia avenue mountain view ca 
frederick 
overview mobile agent programming 
proceedings th workshop analysis verification multiple agent languages stockholm sweden june 
brenda laurel 
interface agents metaphors character 
brenda laurel editor art human computer interface design pages 
addisonwesley 
richard rashid robert baron alessandro forin david golub michael jones daniel douglas orr richard 
mach foundation open systems 
proceedings th computer society ithe second workshop workstation operating systems september 
mitchel resnick 
termites traffic jams explorations massively parallel 
mit press 
voorhees 
software agents information retrieval 
etzioni editor software agents papers spring symposium technical report ss pages march 
