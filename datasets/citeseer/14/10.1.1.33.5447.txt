free lunch theorems search david wolpert santafe edu william macready santafe edu santa fe institute hyde park rd santa fe nm usa february show algorithms search extremum cost function perform exactly averaged possible cost functions 
particular algorithm outperforms algorithm cost functions loosely speaking exist exactly functions outperforms starting analyze number priori characteristics search problem geometry information theoretic aspects 
analysis allows derive mathematical benchmarks assessing particular search algorithm performance 
investigate minimax aspects search problem validity characteristics partial search cost function predict behavior search algorithm cost function time varying cost functions 
conclude discussion biologically inspired search methods 
problems cast optimization cost function 
problem particular mapping set mappings 
seek set give rise particular seek implicitly assumed 
physical examples problem include free energy minimization spin configurations gamma bond angles 
theta theta examples abound combinatorial optimization ranging number partitioning graph coloring scheduling 
common approaches optimization problems 
systematic construction value sub solutions specifying part celebrated method type branch bound algorithm 
systematic exhaustive approach reasonable time effective heuristic representing quality sub solutions extensive theoretical linking cost function properties heuristic order search efficiently 
second approach optimization begins population complete solutions associated values tries iteratively improves values 
algorithms type including hill climbing simulated annealing genetic algorithms 
intuitively expect class algorithms effectively biases try improve population biases search match implicit cost function optimizing 
algorithms directly applied little modification cost function wide class cost functions concern particulars cost functions hand 
demonstrate matching intuition true blind faith algorithm search effectively broad class problems rarely justified 
expect pairs search algorithms performs better average outperforms example expect hill climbing usually outperforms goal find maximum cost function 
expect outperform random search 
point fact central result demonstrates case 
take account particular biases properties cost function expected performance algorithms function exactly 
short free effective optimization algorithm performs knowledge concerning cost function put cost algorithm 
reason dubbed central result free lunch nfl theorem 
prove nfl theorem framework developed addresses core aspects search 
framework constitutes skeleton optimization problem said concerning search explicit details particular real world search problem considered 
construction skeleton provides language ask answer formal questions search asked mind answered 
pose answer number questions 
addition skeleton indicates real meat optimization lies 
clarifies core issues underly effectiveness search process 
organized follows 
section presenting framework prove nfl theorem 
prove theorem deterministic stochastic search algorithms 
section gives geometric interpretation nfl theorem 
particular section provide geometric meaning means algorithm matched cost function 
may argued average behavior algorithms interesting quantity compare algorithms nfl results limited value 
address potential criticism section investigating minimax distinctions algorithms section begins exploring questions answers raised framework developed section 
answers lead naturally results concerning information theoretic aspects search 
results demonstrate importance nfl theorem analyzing optimization results derived nfl theorem 
myriad properties search may investigated techniques similar developed section 
list sample section 
section turn important problem assessing performance particular search algorithms 
derive benchmarks compare algorithm performance 
search problems static cases cost function changes time 
section extends analysis case time dependent cost functions 
section provide theorems valid single fixed cost function 
theorems state search algorithm behavior far particular cost function predict behavior function 
conclude section implications directions 
read stages 
reading highlight nfl theorem broad implications 
reading start section understanding nfl theorem eq 

section provides geometric understanding theorem 
section considers minimax distinctions algorithms addresses limitations nfl theorem 
section discusses broad implications nfl result 
second reading explore potential framework developed 
reading include section uses framework demonstrate information theoretic aspects search 
section uses framework provide useful benchmarks algorithms may compared 
final reading investigate extensions ideas 
reading include section extends nfl results class time dependent cost functions 
include section probes may learned limited amount search single specific cost function 
concluding section list directions extensions 
free lunch theorems search search algorithms rely extrapolating existing set points associated cost values theta new hopefully low cost point extrapolation may deterministic stochastic 
simplicity take finite 
define dm fdm fd dm set distinct search points associated cost values ordered way usually time generated ordering index call population size indicate single valued function note finite number jx jyj finite 
stage search algorithm new point chosen preceding members pair fx added procedure repeats 
search algorithm second type discussed probabilistic mapping population new point search space 
simplicity assume new search point visited 
discussed relaxing assumption affect results 
particular deterministic search algorithm mapping fx dg mdm particular contains empty set 
clarity exposition explicitly consider deterministic non retracing search algorithms discussed results apply stochastic retracing algorithms 
interested histogram cost values algorithm obtains particular cost function distinct cost evaluations 
note values population vector length jyj ith component number members population dm having cost assess quality search 
example searching minima take minimum value performance measure 
consequently interested conditional probability histogram obtained applications algorithm denote quantity 
major result independent average cost functions 
words theorem pair algorithms immediate consequence result expected histograms average identical pairs algorithms 
generally point search created population size performance algorithms measured example depth minimum average identical average possible cost functions 
particular better performance subset oe ae functions perform better set remaining functions oe 
example simulated annealing outperforms genetic algorithms set oe genetic algorithms outperform simulated annealing oe 
proof deterministic search show dependence conceptually proof involves steps reduce distribution values values 
induction establish independence distribution inductive step starts rearranging distributions question 
broken independent parts evaluated separately giving desired result 
expanding possible components population size see 
probability obtaining histogram depends values population dm prove expression eq 
independent suffices show independent independent prove induction write population fd set possible value ffi ffi kronecker delta function 
sum possible cost functions ffi functions cost point 
sum equals jyj jx gamma independent jyj jx gamma independent bases induction 
establish inductive step independent 
complete proof nfl result 
start writing fd dm dm dm dm new value depend new value 
expand possible values getting thetap ffi thetap note depend directly consequently expand remove dependence ffi dm thetap ffi dm theta fact dm ffi fact 
sum cost functions 
cost function defined points restricted points outside depend values defined points inside ffi depends values defined points outside 
recall theta ffi dm sum contributes constant jyj jx gammam gamma equal number functions defined points passing dm 
jyj jx gammam gamma jyj jyj hypothesis right hand side equation independent left hand side 
completes proof nfl result 
note free lunch result implies know probability obtain histogram distinct cost evaluations algorithm independent follows cost function doesn depend know equally jyj jx 
generally reflects prior knowledge concerning 
jyj jx independent free lunch theorem 
nfl theorem illustrates know specified don incorporate knowledge assurances effective simply relying fortuitous matching point formally established sections 
general kinds search restrictions definition search algorithms far find objectionable 
banning algorithms revisit points placing ii banning algorithms stochastically deterministically 
fortunately nfl result easily extended include algorithms revisit points algorithms stochastic 
loss generality definition search algorithm 
see say deterministic algorithm fx xg empty algorithm produce point call algorithm potentially retracing 
potentially retracing algorithm produce new algorithm skipping duplications sequence fx yg pairs produced potentially retracing algorithm 
formally defined value sequence fa contained long original algorithm get stuck forever subset produce 
find reason design algorithm escape mechanism ensures get stuck forever subset 
say compacted version compacted algorithms search algorithms sense term previous subsection 
obey nfl result subsection 
nfl result eq 
holds potentially retracing algorithms redefine equation number distinct points produced algorithms question redefine histogram corresponding distinct points 
real world cost algorithm usually set number distinct evaluations 
sense compare potentially retracing algorithms looking produce run number times looking produce sampling number times 
consistent redefined note potentially retracing algorithm breaks cycle stochastic simulated annealing 
case compacted version algorithm defined 
deterministic compacted algorithm stochastic 
brings general issue adapt analysis address stochastic search algorithms 
oe stochastic non potentially retracting algorithm 
formally means oe mapping dependent distribution equals zero oe viewed hyper parameter specifying function dm oe definition oe follow derivation nfl result deterministic algorithms just replaced oe 
doing holds 
nfl result holds stochastic search algorithms 
reasoning establish free lunch result potentially retracing deterministic algorithms free lunch result holds potentially retracing stochastic algorithms 
geometric interpretation give geometric interpretation free lunch theorem considering space possible cost functions 
probability obtaining histogram distinct cost evaluations algorithm prior probability optimization problem hand cost function view right hand side equality inner product theorem define space vectors 
delta important equation 
global knowledge properties cost function goes prior cost functions 
viewed fixed histogram want obtain usually low cost value constraints time run optimization algorithm 
optimal algorithm largest projection geometric view free lunch result independent simple interpretation particular algorithms projection diagonal delta cst 
deterministic algorithms components probabilities algorithm gives histogram cost function distinct cost evaluations free lunch result implies cst 
geometrically means length independent vectors length lie cone constant projection 
components binary view lying subset boolean hypercube having hamming distance 
section calculate quantities concerning distribution vertices hypercube 
minimax distinctions algorithms nfl theorem address minimax properties search 
example say re considering deterministic algorithms may exist cost functions histogram better appropriate quality measure cost functions reverse true 
nfl theorem obeyed scenario true algorithm better vice versa slightly better scenario certain sense better minimax behavior beats badly substantially worse appears analyzing minimax properties algorithms substantially difficult analyzing average behavior nfl theorem presently known minimax behavior involving stochastic algorithms 
particular known sense stochastic version deterministic algorithm better worse minimax behavior deterministic algorithm 
fact stick completely deterministic algorithms extremely preliminary understanding minimax issues reached 
know 
consider quantity deterministic algorithms quantity just number true produces population components produces population components appendix proven quantity need symmetric interchange theorem general means certain circumstances knowing components populations produced algorithms run unknown infer concerning algorithm produced population 
consider quantity pc deterministic algorithms quantity just number true produces histogram produces histogram need symmetric interchange see appendix 
stronger statement asymmetry statement particular histogram corresponds multiple populations 
things currently known big problem asymmetries 
asymmetries arise set values visited overlaps visited 
overlap certain properties algorithms generated overlap asymmetry arises 
precise specification certain properties hand 
known generic percentage pairs algorithms arise 
issues easy state see appendix clear best answer 
note results directly address issues histogram better vice versa 
answer involves looking pairs histograms relative quality histograms 
information theoretic aspects search calculate fraction cost functions give rise specific histogram algorithm distinct cost points 
calculation allows example answer question fraction cost functions give particular distribution cost values distinct cost evaluations chosen genetic algorithm 
may intractable question nfl result allows answer 
means fraction independent algorithm 
answer question algorithm calculation particularly easy 
algorithm visits points canonical order say xm recall histogram specified giving frequencies occurrence xm jyj possible cost values 
number giving desired histogram specified algorithm just multinomial giving number ways distributing cost values remaining jx gamma points cost assume jyj values 
convenient define ff note invariant contents bins scaled amount 
argument preceding paragraph fraction interested ae ff theorem algorithm fraction cost functions result histogram ff ae ff gamma delta delta delta jyj delta jyj jx gammam jyj jx gamma delta delta delta jyj delta jyj accordingly ae ff related entropy standard way stirling approximation order valid large ln delta delta delta jyj ln gamma jyj ln ln gamma jyj ln ms ff gamma gamma jyj delta ln gamma jyj ln ff ff gamma jyj ff ln ff entropy histogram large ae jyj fraction cost functions formula corollary ae ff jyj ff jyj ff jyj constant depending jyj 
ff eq 
holds redefined exclude corresponding zero valued ff defined normalization constant eq 
summing ff lying unit simplex 
details calculation 
turn related question vertex space cost function fraction algorithms give rise particular question salient feature histogram formed looking cost values 
specify histogram fi fi jx points th value 
call fraction interested ae alg ff fi 
turns ae alg ff fi depends leading order kullback liebler distance ff fi 
see start intuitively reasonable result formally proven appendix theorem histogram jx fi fraction algorithms give rise histogram ff ae alg ff fi jyj gamma delta gamma jx delta normalization factor denominator simply number ways selecting cost values determined identity ffi gamma delta gamma delta product approximated stirling equation large ln jyj jyj ln gamma ln gamma gamma ln gamma ln gamma ln gamma gamma ln assume reasonable jx expansion ln gamma gammaz gamma gamma second order ln jyj jyj ln gamma delta gamma ln gamma gamma gamma gamma delta delta delta delta terms ff fi obtain jx ln jyj ff fi jyj ln gamma jx delta gamma jyj ln ff jx gamma ff fi delta gamma ff delta delta delta dkl ff fi gamma ff ln fi ff liebler distance distributions ff fi 
fraction algorithms corollary ae alg ff fi jx jyj gammam dkl ff fi jyj ff constant depends jx jyj 
calculated summing ff unit simplex 
measures algorithm performance section calculate certain benchmark performance measures allow assess efficacy search algorithm 
consider case low cost preferable high cost 
general interested min ffl probability minimum cost algorithm finds distinct evaluations larger ffl cost function consider measures algorithm performance related conditional probability measure average probability cost functions 
ii second form conditional probability takes random algorithm behavior uncorrelated cost function 
iii third fraction algorithms particular result minimum exceeds ffl 
measures give benchmarks truly intelligent algorithms surpass real world algorithm doesn surpass doing poor job 
recall jyj distinct cost values 
loss generality assume th cost values equals cost values run minimum maximum jyj integer increments 
benchmarks measures min ffl min ffl jyj jx line marginalized values populations size noted min min 
consider 
summand equals deterministic particular equals conditions met ii iii dm restrictions fix value exactly points 
completely free points 
jyj jx gammam result eq 
find min ffl jyj min ffl jyj min ffl jyj jyj gamma ffl establishes theorem min ffl fl ffl fl ffl gamma ffl jyj fraction cost lying ffl 
real world scenario algorithm best cost far drop faster sense algorithm suited searching cost function hand 
algorithm doing better expect randomly chosen cost function 
calculate expected minimum cost values population function random algorithm picks points completely randomly information current population 
marginalizing histograms performance min ffl min ffl probability obtaining histogram random draws histogram function 
viewed definition 
probability calculated previously jyj jx min ffl gamma jx delta delta delta delta jyj ffi jyj min ffl theta jyj gamma jx delta ffl delta delta delta jyj ffi jyj ffl jyj ffl gamma jyj ffl delta gamma jx delta see footnote gamma gamma ffl jx delta gamma jx delta establishes theorem random algorithm min ffl gamma gamma ffl gamma jx gamma jx gamma ffl jyj ffl jx fraction points ffl 
order jx gives result corollary min ffl omega ffl gamma gamma gamma omega gamma ffl omega gamma ffl jx equation provides useful benchmark algorithm may compared 
note particular cost functions cost values distributed 
case mean variance gaussian oe respectively omega gamma ffl erfc ffl gamma oe erfc complimentary error function 
calculate third performance measure note fixed deterministic algorithm ffl 
fraction algorithms result minimum exceeds ffl min ffl expanding terms rewrite numerator ratio min ffl 
ratio quantity exactly calculated evaluated measure ii see argument deriving eq 

establishes theorem fixed fraction algorithms result minimum exceeds ffl quantity right hand sides eqs 

particular consider scenario evaluated ffl equal minimum produced particular run algorithm quantity eq 

scenario algorithm done worse half search algorithms hand 
time dependent cost functions establish set free lunch results certain class timedependent cost functions 
time dependent functions concerned start initial cost function sample value 
just subsequent iteration search algorithm cost function deformed new function specified mapping theta write function sampling ith point 
assume step bijection 
note mapping induced vary iteration number 
weren case evolution cost functions narrow region algorithm luck happens sample values lie near difficulty analyzing time dependent cost functions assess quality search algorithm 
general schemes involving different populations values 
population ordered set values corresponding values particular value matching particular value cost function sampled 
contrast population defined values cost function values formally fd delta delta delta ff delta delta delta tm gamma gamma similarly gamma gamma delta delta delta tm gamma gamma situations may members population live long time time scale evolution cost function 
situations may appropriate judge quality search algorithm histogram induced previous elements population alive current fitness interest 
hand members population live short time time scale evolution cost function may concerned things living member population track changing cost function 
kind situation may sense judge quality search algorithm histogram induced derive nfl results criteria 
analogy nfl theorem wish average possible ways cost function may time dependent wish nfl theorem 
consider sum initial cost function 
note kicks fixed priori distinctions algorithms far member population concerned 
consider histograms constructed elements population 
obvious restriction require doesn vary time mapping simply analysis limited way scope 
prove theorem algorithms initial cost functions show results holds constructed analogy proof nfl theorem establishing independence 
replacing sum set cost functions iteration algorithm 
start delta delta deltaf thetap delta delta delta fm delta delta deltaf theta delta delta delta fm indicated sequence cost functions vector delta delta delta fm 
decompose sum possible series sums 
sum series values take particular iteration algorithm 
formally write delta delta deltaf theta ffi delta delta delta tm gamma ffi tm gamma tm gamma delta delta delta note independent values ti gamma absorb values independent proportionality constant 
look innermost sum tm gamma fixed values outer sum indices tm gamma fixed values outer sum indices tm gamma tm gamma delta delta delta just fixed cost function 
accordingly innermost sum tm gamma simply number bijections map fixed cost function fm just constant jf gamma 
tm gamma sum arrive delta delta deltaf theta ffi delta delta delta tm gamma ffi gamma tm gamma gamma delta delta delta sum tm gamma exact manner just sum tm gamma fact sums done leaving delta delta deltaf delta delta deltaf delta delta delta gamma step exploited statistical independence fm proceed decide interested histograms formed analysis case 
case fm reflects cost values cost function fm plugging get delta delta deltaf gamma delta delta delta fm gamma fm fm final sum fm constant equal number ways generating histogram cost values drawn constant involve multinomial coefficient gamma delta delta deltac delta factors 
important point independent particular evaluate sum eliminate dependence 
delta delta deltaf gamma delta delta delta fm gamma completes proof eq 
case constructed turn case interested case considerably difficult simplify decouple sums nfl result holds 
see expanding eq 
possible values 
delta delta deltaf thetap delta delta delta gamma delta delta deltaf delta delta delta gamma theta ffi sum inner cost function effect ffi term 
contributes fm ffi fm 
constant equal jyj jx gamma left delta delta deltaf gamma delta delta delta fm gamma theta gamma ffi sum trivial delta delta delta gamma delta delta deltaf gamma gamma delta delta delta fm gamma theta gamma ffi note equation exact form eq 
remaining population size gamma consequently exactly analogous manner scheme evaluate sums fm existed eq 
evaluate sums gamma gamma 
doing simply generates independent proportionality constants 
continuing manner evaluate sums arrive ffi algorithm dependence result 
trivial dependence previously discussed arises completely algorithm selects point population 
consider points population generated subsequent result says distinctions algorithms 
alternatively consider points population get nfl result addition summing sum case interested nfl result stills hold subject minor caveats delineated 
way assessing quality search algorithm histograms example may wish consider histograms may judge quality search fitness member population 
similarly sums look example may wish characterize aspects relationship determine 
fact general priori distinctions algorithms far quantity concerned 
example distinctions say iterations search algorithm shift operator replacing gamma min gamma max implicitly taken contiguous set integers 
algorithm samples regardless values population histogram induced identical values 
accordingly containing counts value bin 
search algorithms shift restriction set allowed independent general 
consider shift different algorithm new algorithm looks value sample point value low samples exactly algorithm hand value high samples point 
general goal find minimal values expected outperform averages fixed cost function results obvious difficulty nfl results discussed argue oh real world uniform nfl results apply okay favorite search algorithm 
course premise follow proposition 
uniform typical 
uniform average uniform 
actual just easily algorithm poorly suited suited 
ultimately way justify search algorithm argue favor particular argue algorithm suited 

legitimate way defending particular search algorithm implications nfl theorems 
clearly interest derive nfl type results inde pendent 
certain results apply ways choosing search algorithms involve averaging search algorithms keeping cost function fixed 
sweeping nfl results results hold matter real world distribution cost functions search algorithms 
define choosing procedure examines populations produced respectively populations decides subsequent part search 
example choosing procedure choose cost element lower cost cost element example stupid choosing procedure choose cost element higher cost cost element point choosing procedure sampled cost function points accordingly refers samples cost function come choosing algorithm histogram user interested histogram histogram formed addition usual reasons assume search algorithm chosen choosing procedure return points loss generality theorem proven appendix tells priori justification particular choosing algorithm 
loosely speaking matter cost function observing algorithm done far tells continue cost function 
simplicity consider deterministic algorithms 
theorem fixed populations size generated algorithms respectively run cost function 
different choosing procedures 
number elements implicit theorem sum excludes algorithms result respectively run 
think preceding theorem misleading treats populations equally populations know avoid elements seen 
priori way avoid elements hasn seen vice versa 
definition depend elements gamma similarly deal problem defining set elements lie outside 
similar procedure developed deal potentially retracing algorithms 
formally means random variable function means may fewer elements histogram population 
weights populations probability occurrence true average choosing procedure uses effect established corollary 
conditions preceding theorem proof proc refer choosing procedure 
interested proc proc thetap proc pull sum outside sum consider term sum particular pair values 
term proc just result respectively run 
recall assuming deterministic 
means proc factor simply restricts sum considered theorem 
accordingly theorem tell summand sum choosing procedures full sum procedures 
qed 
results tell assumption justifies choosing procedure far subsequent search concerned 
intelligent choosing procedure take account search algorithms choosing 
fact things may worse 
supervised learning result related theorem 
translated current context result suggests restricts sums algorithms match stupid choosing procedures choosing algorithm desirable outperform smart ones ones uses practice 
investigation exactly set algorithms summed smart choosing procedure superior dumb scope 
clearly subtle issues disentangle 
discussion discussion framework investigating search 
framework serves skeleton search problem tells know search details particular real world search problem 
phrased differently provides language describe search algorithms ask answer questions 
ultimately course important question find solutions cost function 
proper answer question start determine certain salient features construct search algorithm specifically tailored match features 
inverse procedure far popular communities investigate specific algorithms perform different 
inverse procedure interest degree helps primary procedure going features concerning appropriate note salient features concerning stated terms distribution 
understand note fact know exactly 
time need know effectively unknown extrema 
partially unknown 
nature search process admit don know full 
result sense implicitly replace distribution 
search problem reduces finding particular exactly issue addressed section 
example known generic methods simulated annealing genetic algorithms unable compete carefully hand crafted solutions specific search problems 
traveling salesman tsp problem excellent example situation best search algorithms tsp problem hand tailored 
linear programming problems example simplex algorithm search algorithm specifically designed solve cost functions particular type 
situations procedure followed researcher identify salient aspects tsp problem linear programming problem throw away knowledge concerning effectively replace search algorithm explicitly known 
investigation search problem match perspective question addressed may algorithm performs better average 
answer question nfl theorem impossible 
important implication result 
genetic algorithm outperforms simulated annealing example class cost functions phi remaining cost functions phi simulated annealing outperform genetic algorithm 
noted applies considers adaptive search algorithms modify search strategy properties population gamma gammay pairs observed far search perform adaptation regard knowledge concerning salient features important bear mind exactly imply relationship natural selection biological world optimization genetic algorithms 
consider extremely simplified view natural selection viewed optimization cost fitness function 
simplify matters assuming fitness function static time 
measure algorithm performance values sampled began don allow algorithm resample points visited 
nfl theorem states algorithms equivalent measure 
consider different measures 
particular may interested evolution time generations consisting temporally contiguous subsets population generations updated search algorithm 
scenario sense resample points visited 
nfl theorem apply alternative kind performance measure 
example alternative performance measure algorithm resamples old points fit adds current generation better resamples old points fit 
examine biological world implicitly second kind measure see organisms current generation 
addition natural selection means essential characteristics points kept generation 
accordingly second kind performance measure expects average fitness generation improves time 
environment cost function didn change time tautology natural selection improves fitness members generation 
empirical evidence natural selection performs second measure mean concerning performance measure 
particular mean wish search able keep points sampled far reason believe natural selection effective search strategy 
mean natural selection works far tail measure entire population concerned 
precisely tail interest engineering world 
short empirical evidence biological world indicate sense natural selection effective search strategy biological world 
simply chance observe behavior alternative strategies 
know strategy breeding fit members population may done better job finding extrema cost function faced biological organisms 
experiment just done 
breed worst strategy general result worse generations strategy implies quality populations long term 
relax unrealistic assumption fitness function constant time possible may disadvantages breed worst policy 
summarize nfl theorem generation scheme keeps worst members population generation equivalent keeps best members average 
fitness members generations differ search algorithms 
raises obvious questions research averaged big expect difference 
fixed random search algorithms directed differently classify current generation big expect difference 
calculation compare calculation best member population random algorithm grows 
fitting effective search conclude brief listing research directions believe warrant investigation 
important continuation turn framework practical tool solve real problems 
involve steps 
need method incorporating broad kinds knowledge concerning analysis 
ways consider 
example clear encapsulate knowledge concerning cost function implicit heuristics branch bound strategies 
incorporate cost complete solution accrued assemblage sub solutions 
second step suggested program determine best convert knowledge concerning optimal goal broadest sense design system take knowledge concerning solve optimal knowledge 
search fullest sense program may involve years 
important questions related program analyzable tools developed 
text 
particularly suited help understand connection optimal fast cost histogram associated particular algorithm converge histogram cost values takes 
changes diagonal space uniform need hurt 
average improve 
diagonal algorithms equal 
particular algorithms algorithms performance algorithms equal 
particular uniform subset phi ae zero outside phi equivalence classes search algorithms identical expected behavior 
interesting series questions concerns differences stochastic deterministic algorithms 
potential advantages stochastic algorithms 
particular sense expand stochastic algorithm oe terms deterministic algorithms 
write oe oe expansion coefficients oe suggests moves diagonal performance oe improve degrade 
may stochastic algorithms certain minimax advantages deterministic ones 
acknowledgments reilly helpful conversation sfi funding 
txn funding 
garey johnson computers intractability freeman 
lawler wood operations research 
pearl heuristics intelligent search strategies computer problem solving addison wesley 
kirkpatrick gelatt jr vecchi science 
holland adaptation natural artificial systems university michigan press ann arbor 
adaptive simulated annealing software package documentation ftp caltech edu pub asa de la dynamic hill climbing overcoming limitations optimization techniques second turkish symposium artificial intelligence neural networks pp 
strauss wolpert wolf 
alpha evidence entropic prior maximum entropy bayesian methods ed 
ali mohammed pp 
cover thomas elements information theory john wiley sons 
example phi set correlated cost functions 
wolpert training set error priori distinctions learning algorithms technical report sfi tr santa fe institute 
wolpert overfitting avoidance bias technical report santa fe institute 
gerhard reinelt traveling salesman computational solutions tsp applications springer verlag berlin heidelberg 
stadler europhys 
lett 
pp 
proof related information theoretic aspects search want calculate proportion algorithms give particular particular proceed steps 
finite populations finite 
deterministic huge finite list 
list indexed possible aside extend entire input space 
entry list question outputs index 
consider particular unordered set gamma pairs pairs share value 
set unordered path 
loss generality implicitly restrict discussion unordered paths length 
particular particular unordered set pairs identical numerator right hand side eq 
number unordered paths give desired claim number unordered paths give desired numerator right hand side eq 
proportional number give desired 
proof claim constitute proof eq 

furthermore proportionality constant independent proof construct mapping oe 
oe takes gives desired produces gives desired show number algorithms oe constant independent proof completed showing oe single valued showing image mapping oe unordered path gives set 
different ordered paths obvious manner 
note value unordered path distinct 
ordered path ord turn provides set successive includes null indicate ord set provided ord 
note ord population avoid confusion avoid referring 
ordered path ord construct partial algorithm 
consists list ord entries list filled remaining entries blank 
say length partial algorithm 

distinct partial ordered path corresponding 
partially filled lists obvious manner talk particular partial algorithm consistent particular full algorithm 
allows define inverse oe gives oe gamma set consistent partial algorithm generated give run 
complete part proof show give oe gamma contains number elements regardless generate ordered paths induced associate ordered path distinct element partial algorithm 
question full algorithms lists consistent partial algorithm partial lists 
question answered core appendix 
answer question reorder entries partial algorithm lists permuting indices lists 
obviously reordering won change answer question 
perform permuting interchanging pairs indices 
interchange index form dy entry filled partial algorithm lists arbitrary constant value refers th element create arbitrary fixed ordering 
interchange index form entry filled new partial algorithm lists xm 
recall dx distinct 
construction resultant partial algorithm lists independent number lists 
number algorithms consistent partial algorithm list oe gamma independent completes part proof 
second part choose unordered paths differ ordered path ord constructed equals ordered path ord constructed choose ord ord disagree null know deterministic agrees 
agree null sampled single element disagree agrees 
agree double element continue manner gamma element ordered paths differ disagreed point agrees 
true ord ord see oe gamma oe gamma 
completes proof 
proof related minimax distinctions algorithms proofs example 
consider points points point visits point visits point sees jumps jumps point sees jumps sees jumps consider cost function values values fy respectively 
produce population function produce 
proof completed show cost function produces population containing produces population containing possible pairs populations consider ii iii iv 
point jumps starts point second point equal second point 
rules possibilities ii 
possibilities iii iv population know form fy variable case iii need equal due point population 
case second point sees value contrary hypothesis 
case iv know equal due point population 
mean jumps second point see contrary hypothesis 
accordingly cases possible 
case symmetry exchange symmetry exchange histograms 
qed 
proof related nfl results fixed cost functions deterministic search algorithm mapping ae ae search algorithm vector space components vector indexed possible populations value component algorithm produces associated population 
consider particular population size say population size greater ordered elements ordered elements 
set populations start way defines set components algorithm vector components indicated remaining components types 
populations equivalent elements values components vector algorithm indicated aed second type consists components corresponding remaining populations 
intuitively populations compatible examples populations populations contain elements element populations re order elements values components second type indicated proc interested proc aed aed proc summand independent values 
addition number values constant 
product populations consistent number possible population mapped 
constant independent proc sum equals aed aed aed aed proc definition implicitly restricting sum summand defined 
means allow value component aed value gives element similarly aed sum reduces proc note component lies true sum components sum fixed proc choice fixed 
accordingly loss generality rewrite sum implicit assumption set sum independent proc 
qed 

