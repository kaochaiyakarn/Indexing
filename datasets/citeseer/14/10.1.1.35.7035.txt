distributed operational semantics object paradigm malcolm corina oxford university computing laboratory wolfson building parks road oxford ox qd draft july development concurrent object oriented languages suffered lack established semantic foundation concurrent interacting objects 
attempts providing foundation fail capture hierarchical structure systems interacting models producing unwieldy complicated models difficult reason systems components algebraic categorical approaches comparing classes models promise improve situation see example :10.1.1.21.5791
approach call distributed operational semantics models systems concurrent interacting objects diagrams assign operational semantics object system 
behaviour system limit construction 
modelling behaviour limits follow earlier goguen categorical systems theory 
approach pays particular attention hierarchical structure systems provides means constructing systems component parts way captures complex objects parallel composition synchronisation 
operational semantics objects general example semantics object oriented specification language foops modelling objects unlabelled transition systems semantics summarised section full account 
shall examples systems labelled transition systems 
useful property examples readily translated specifications logic programming language provides simulator system logic reasoning systems 
sheaf semantics concurrent objects originating goguen investigated approach essentially constraint interactions objects constrain possible behaviours primarily synchronising shared subobjects 
constructing behaviour system limit corresponds solving constraints 
constraint nature translation natural 
provides short distributed operational semantics fuller account companion particular show certain operational semantics systems give rise topos internal language provides logic proving properties systems behaviours 
section introduces basic categorical concepts notations section gives brief survey key concepts distributed operational semantics section gives illustrative examples 
preliminaries order account reasonably self contained brief summaries technical notions sequel 
main concepts require categories functors limits 
introduced subsections readers familiar concepts skip section 
categories category theory allows treatment constructions mathematics computer science 
give basic definitions introductions 
category consists ffl class jcj objects ffl class kck morphisms called arrows ffl maps kck jcj give respectively source target morphism ffl jcj distinguished morphism called identity ffl partial operation kck kck called composition defined case 
required axioms satisfied ffl jcj kck compositions defined ffl composition associative kck sides defined 
kck write iff information pictorially gamma 
composite depicted gamma 
gamma 
equation depicted commuting diagram 
objects category different objects object orientation risk confusing refer category objects simply objects 
important example category set objects sets morphisms functions precisely triples sets map 
composition morphisms just composition functions write composition diagrammatic order direction arrows usual notation ffi 
example category arises partial order 
partial order construct category call objects elements morphisms pairs elements particular morphism iff composite category opposite category op obtained turning arrows specifically objects op objects morphisms op iff example category arising partial order op category arising partial order iff example artificial category category objects identity morphisms objects morphism 
category pictured diagram gamma gamma gamma gamma gamma psi identity morphisms omitted diagram 
sections discuss relationship category synchronisation call category sync 
think sync denoting system consisting objects synchronised common subobject 
fact strange example category thought pictorial representation system instance system obtained instantiating category objects objects instantiating arrows morphisms objects express relevant subobject relationship 
instantiations may achieved functors functors natural transformations categories functor pair jf kfk jf maps objects objects jf jcj jdj kfk maps morphisms morphisms way ffl kck kfk jf jf ffl kfk jf ffl morphisms kfk kfk kfk 
write denote functor functor write jf kfk fx object arrow example main features functors summarised concisely follows 
ffl kck ff fa fb ffl fa ffl morphisms ff fg 
functors natural transformation family morphisms indexed objects jcj morphisms diagram commutes 
fa ga gf gb ff ff gf note categories construct category objects functors arrows natural transformations functors 
limits objects category product object thetab morphisms thetab thetab pair morphisms exists unique morphism thetab diagram represents situation 
thetab phi phi phi phi hj delta delta delta delta delta delta delta deltaff au example category set products cartesian products standard projection functions 
category arising partial order products correspond greatest lower bounds 
generally limits defined follows 
diagram category functor ffi category called shape diagram 
cone diagram ffi object family morphisms ffi jxj ffi diagram 
ffi ffi gamma gamma gamma gamma psi ffi write ffi indicate family morphisms cone ffi 
limit diagram ffi cone ffi cone ae ffi unique morphism ae jxj 
example products category limits diagrams ffi category objects arrows identities 
product thetab projections limit diagram ffi maps object important example limits useful talking parallel composition synchronisation 
suppose morphisms category supposing diagram ffi sync sync category pictured section 
pullback object theta morphisms theta theta theta ffi universal property unique theta theta phi phi phi phi hj delta delta delta delta delta delta delta deltaff au gamma gamma gamma gamma psi call theta pullback object 
example set pullback object thetab pullbacks limits general thought combining objects diagram minimal way projections commute arrows diagram 
sections limits model parallel composition systems object specifications 
useful know arbitrary diagram specifications composed say category complete iff limit diagram ffi example set complete category 
see examples complete categories section 
distributed operational semantics section briefly outline technical definitions results support distributed operational semantics 
section gives examples section describes small system implements synchronous communication section describes distributed semantics object oriented specification language foops 
imperative programs simplest direct manifestation operational semantics describes program may transform state 
kind semantics captured unlabelled transition systems definition transition system consists set states transition relation morphism transition systems oe 
map oe maps related states related states oex oey defines category tr transition systems 
transition relation describes behaviour object saying states may reached state morphism transition systems viewed restricting object behaviour subobject generally imposing constraint target object behaviour 
example consider transition systems fs ft fu transition system behaviour starting state move state similarly start state move state hand start state move state state compose parallel product thetau set states product set pairs state state transition relation defined saying state move state iff move move product corresponds running parallel interaction 
consider morphism mapping morphism mapping morphisms impose restriction behaviours reflected behaviour words subobject shared behaviour synchronise 
behaviour synchronised product pullback states limit object triples transition relation says state go state iff goes toes goes follows transitions possible system go forcing go go forcing go words solutions constraints impose system 
example illustrates take limit diagram transition systems collection transition systems connected morphisms behaviour system 
doing follow behaviour limit slogan categorical systems theory 
important property category transition systems limit behaviour exists example behaviour empty 
proposition category tr complete 
model labelled transition systems set actions label transitions state 
find convenient assume idle transition action similar action milner ccs skip action csp 
definition gives notion set actions contains idle transition 
definition pointed set set distinguished element skip pointed sets function morphism pointed sets iff skip skip labelled transition systems defined follows 
definition labelled transition system consists pointed set actions set states transition relation skip iff morphism labelled transition systems oe 
pair oe morphism pointed sets function mapping related states related states gy defines category lts labelled transition systems 
unlabelled transition systems morphisms impose constraints behaviour 
system labelled transition systems functor ffi lts 
behaviour limit diagram 
proposition lts complete 
examples synchronous communication section simple example synchronous communication labelled transition systems 
transition system sends values transition system transition system definitions objects directly code 
obj pr nat sort action op skip 
action op 
action op write 
action sort state op nat nat 
state op 
state action state 
bool vars nat eq skip 
true eq 
true eq write 
true endo obj pr nat sort action op skip 
action op copy 
action op get 
action sort state op nat nat 
state op 
state action state 
bool vars nat eq skip 
true eq copy 
true eq get 
true endo obj pr nat sort action op skip 
action op port 
action sort state op nat 
state op 
state action state 
bool vars nat eq skip 
true eq port 
true endo note action port allows state change arbitrary value shall constrain resulting value defining morphism morphism ensure result value received morphisms connect objects module note projections capture fact state shared note force synchronisation actions write port get implement passing value obj connections pr op apa action 
action eq apa skip skip eq apa skip eq apa write port op bpa action 
action eq bpa skip skip eq bpa copy skip eq bpa get port op aps state 
state vars nat eq aps op bps state 
state eq bps endo limit behaviour system module 
strictly speaking states limit triples aps bps similarly actions 
constraints expressed conditions axiom defining ther transitions limiting object 
obj sys pr connections sort action op action action action 
action op skips 
action eq skips skip skip skip sort state op state state state 
state op 
state action state 
bool var aa action var ap action var ab action vars sa sa state vars sp sp state vars sb sb state cq sa sp sb aa ap ab 
sa sp sb true aps sa sp bps sb sp apa aa ap bpa ab ap sa aa 
sa true sp ap 
sp true sb ab 
sb true aps sa sp bps sb sp endo distributed semantics foops sketch 
full account 
distributed semantics foops limit functor category sketched category unlabelled transition systems 
ffifl fflfi oc tc delta delta delta deltaff delta delta delta oc tc 
sw oci tci 
foops represents method expression foops objects cooperate evaluating foops object represented object oc arrows allocate tasks subterms ready evaluated foops object 
arrows foops objects projections state foops object contains tasks allocated local attributes 
sections describe unlabelled transition systems assigned object 
describes functor limit gives semantics foops system 
foops expressions 
defined direct method axioms 
ff 
ff ff 











oe 

oe 
delta delta delta 
delta delta delta oe 

result applying equation specification 
tasks ffl tasks defined direct method axioms 
ffl ff ff tasks 
ffl task 
ffl phi task tasks 
phi associative commutative neutral element 
phi 
phi phi phi 
phi ff phi 
ff phi phi ff phi 
phi 
foops objects ff phi 
ff phi phi ff ff phi 
phi phi 
phi phi new attributes direct method axioms phi 
phi research sketched approach modelling systems interacting objects limits diagrams category operational semantic models 
simply illustrates approach means examples companion give fuller account technical background approach results applications 
interesting result small category functor category lts topos 
means topology system gives rise internal language topos logic properties systems expressed proved 
pleasant property logic compositional sense sentence logic states property system restricted subsystem 
property valid system iff restriction subsystems valid 
means reasoning system factored reasoning component parts 
respect logic similar compositional proof system reported 
michael barr charles wells 
category theory computing science 
prentice hall 
corina 
distributed semantics foops 
technical report prg tr programming research group university oxford 
hans dieter ehrich joseph goguen am sernadas 
categorial theory objects observed processes 
de bakker willem de roever rozenberg editors foundations object oriented languages 
springer verlag lecture notes computer science 
joseph goguen 
mathematical representation hierarchically organised systems 
editor global systems dynamics pages 
karger 
joseph goguen 
systems minimal realization 
proceedings ieee conf 
decision control pages 
joseph goguen 
objects 
international journal general systems 
joseph goguen 
categorical manifesto 
mathematical structures computer science 
joseph goguen 
sheaf semantics concurrent interacting objects 
mathematical structures computer science 
joseph goguen jos meseguer 
equality types generic modules logic programming 
douglas degroot gary lindstrom editors logic programming functions relations equations pages 
prentice hall 
earlier version appears journal logic programming volume number pages september 
joseph goguen jos meseguer 
unifying functional object oriented relational programming logical semantics 
bruce shriver peter wegner editors research directions object oriented programming pages 
mit 
hoare 
communicating sequential processes 
prentice hall 
joachim lambek philip scott 
higher order categorical logic 
cambridge university press 
cambridge studies advanced mathematics volume 
saunders mac lane 
categories working mathematician volume graduate texts mathematics 
springer verlag 
saunders mac lane moerdijk 
sheaves geometry logic 
springer verlag 
malcolm 
distributed operational 
preparation oxford university computing laboratory 
malcolm 
interconnection object specifications 
appear proc 
facs workshop formal aspects object orientated programming springer workshops computing 
jos meseguer 
conditional rewriting logic unified model concurrency 
theoretical computer science 
robin milner joachim parrow david walker 
calculus mobile processes parts ii 
technical report ecs lfcs department computer science edinburgh university 
benjamin pierce 
basic category theory computer science 
mit press 
winskel nielsen 
models concurrency 
technical report daimi pb computer science department aarhus university 
glynn winskel 
compositional proof system category labelled transition systems 
information computation 
david wolfram joseph goguen 
sheaf semantics foops expressions extended 
tokoro nierstrasz wegner yonezawa editors proceedings ecoop workshop object concurrent computing pages 
springer verlag lecture notes computer science 

