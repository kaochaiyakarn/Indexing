multimodel methodology qualitative model engineering paul fishwick university florida bernard zeigler university arizona qualitative models arising artificial intelligence domain concern real systems difficult represent traditional means 
promise dealing systems offered research simulation methodology 
research produces models combine continuous discrete event formalisms 
aims approaches ai simulation communities remain mutually ill understood 
consequently need bridge theory methodology order uniform language analyzing reasoning physical systems 
article introduces methodology formalism developing multiple cooperative models physical systems type studied qualitative physics 
formalism combines discrete event continuous models offers approach building intelligent machines capable physical modeling reasoning 
categories subject descriptors artificial intelligence knowledge representation formalisms methods representations simulation modeling simulation theory model classification systems theory simulation modeling model development modeling methodologies 
simulation modeling types simulation combined discrete event continuous 
general terms combined simulation systems theory qualitative simulation 
additional key words phrases abstraction levels homomorphism 
author fishwick grateful partial funding research national science foundation iri florida high technology industry council 
author zeigler acknowledges support nasa simulation environment laboratory management robotic organizations 
author addresses paul fishwick dept computer information sciences university florida bldg 
cse room gainesville fl bernard zeigler dept electrical computer engineering university arizona tucson az 
table ai simulation terminology 
artificial intelligence simulation process system envisionment reachability landmark discrete event ontology model specification humans appear qualitative models answering questions happens pot water caused water overflow pot 
qualitative models address 
address relationship qualitative quantitative modeling perspective systems simulation theory methodology 
prompted needs need bridge gaps artificial intelligence ai simulation communities representations system models need derive formal approaches development models systems typically studied ai qualitative modellers 
respect ai simulation communities groups terminology similar focus 
instance envisionment termed reachability tree finite state automaton systems literature landmark termed discrete event 
correlations name table 
complete discussion commonalities points controversy fishwick zeigler 
event similarities goals ai simulation research contend methods simulation modeling play strong role ai 
considerable amount research performed ai sub disciplines qualitative reasoning simulation qualitative physics model reasoning 
chief problems addressed ai researchers qualitative simulation instance revolve reducing explosive number states obtained envisionment applying constraints 
explosion result having model structure parameters ill defined 
simulation researchers dealt fuzzy parameters little simulation research problem studying systems structural parametric constraints uncertain knowing states joined structure finite state automaton 
ai researchers performed substantial research modeling qualitative behavior different abstraction aggregation levels 
interest concerned 
example ai literature demonstrate certain simulation methods extended help ai modellers goals 
consider forbus presents comprehensive overview field qualitative physics 
forbus notes device ontologies foam water heating element copper pot pot boiling water 
ral 
instance difficult model pot boiling water see fig 
bouncing ball expressed system dynamics 
system dynamics inadequate representing systems containing phase transitions complicated boundary conditions simulation methodology developed concepts model complex systems multiple levels abstraction 
oren developed concept multimodel formalize models containing submodels put effect time 
idea multimodel roots combined simulation modeling 
combined modeling traditionally referred integration discrete event continuous modeling system description 
implemented combined modeling modeling language 
cellier developed approach combined continuous discrete event models implemented language extension 
praehofer extended discrete event system specification devs provide formalism simulation environment specifying combined continuous discrete event models 
article build developments providing methodology formalism developing multiple cooperative models physical systems type studied qualitative physics 
formalism help build intelligent machines capable physical modeling reasoning 
approach similar goals forbus system graphs models approach supporting multiple models 
similar build multiple models fit aid question answering different levels 
method differs ai fundamental ways models canonical systems definition described section place strong emphasis behavior preservation models traversal 
canonical model definition base permits specify varieties models petri nets cellular automata system models systems theory science predicated canonical formulation 
emphasis behavior preservation homomorphic mapping insures maximal consistency dynamically mapping abstraction levels 
system boiling water illustrate methods 
glance appears simplistic boiling water system appropriate demonstrating wide range discrete continuous behaviors levels abstraction 
consider questions ask intelligent system autonomous robot systems relate heat transfer ffl hot water 
see robot understand natural language poses difficulties complete autonomy 
answering question incorporate intensional contextual knowledge 
question asked home pot hot water robot determine intend receive answer hot degrees celsius 
level answer clear depends personality knowledge human asking question 
kind system model necessary robot answer question 
clearly best detailed mathematical models heat transfer aggregated called lumped models 
lumped models serve purposes relatively reduced computational complexity enables obtain answers quickly serve form cognitive linguistic links different knowledge representation levels 
see need multiple models effective methods linking models behavior preserving morphisms 
behavior preserving aspect critical robot able maintain consistency various models model base 
advanced robot capable forming correct system analogies metaphors morphism concepts 
ffl long take pot water boil 
question requires detailed mathematical model answer human prefer accurate time 
ffl boil water happen 
initial priori physical knowledge fluids help answering question knowledge induced robot having visually sensed previous occurrences happens water 
robot prediction common situations boiling water inducing rules simple models multiple instances pattern recognition 
new simpler system models constructed robot manner 
new models linked existing models boiling water 
ffl put insulation walls money save 
assuming robot general knowledge heat transfer see question previous really similar heat transfer problems generalized dynamical features effort variables flow variables 
robot capability see room wall pot pot water generalized capacitances material generalized resistance 
generic knowledge robot system knowledge limited 
studying questions recognize need capabilities autonomous agent 
multiple models process geared answering different questions 

methodology formalisms create models 

priori knowledge base basic physical system properties 

ability deduce new knowledge 

ability induce new knowledge 

methods traversing levels abstraction 
deals items 
propose concepts events partitions formulated general systems theory support construction high autonomy systems 
conjecture partition system components linguistic cognitive pieces learn create qualitative models 
instance modeling evacuation procedure skyscraper forgo need model articulated figures humans moving real time features allow create simplified model consisting queuing network recognize humans encounter boundaries door wall humans line key events occur 
leave quantitative information focal point modeling analysis 
review formal definitions systems key system concepts essential abstraction level 
boiling water system illustration show models derived top approach 
start model expressed fsa finite state automaton perform homogeneous staying formalism refinement derive levels refinement 
final refinement heterogeneous automaton decomposed block networks representing continuous process heating cooling 
methodology number interesting features ffl result refinement set models different levels abstraction 
ffl models answer various questions relate proper level abstraction 
ffl models integrated multimodel simulated methods 
ffl semantics multimodel expressed devs formalism 
ffl devs representation lends abstraction supports efficient discrete event simulation 
review systems concepts discussion refinement process justify claims just 
introduce concept fsa controlled multimodel create formal specification devs concepts demonstrate answering symbolic dynamic questions system structure behavior 
defining system formal specification deterministic system omega ffi classical systems theory defined follows ffl time set 
continuous systems reals discrete time systems integers 
ffl input set containing possible values input system 
ffl output set 
ffl state set 
ffl omega set admissible acceptable input functions 
contains set input functions arise system operation 
due physical limitations omega subset set possible input functions 
ffl ffi transition function 
defined ffi theta theta theta omega ffl output function theta system said time invariant behavior depend absolute value time 
case transition function simplified form ffi theta theta omega ffi yields state results starting system applying input duration time units 
discrete event systems effect input captured resetting initial state 
shall see useful form transition function called input free input argument dropped ffi state reached starting state duration form transition function application devs formalism multimodel specification 
system formalism general 
instance figures show sample models represented block network state transition method respectively 
formalisms shown sub classes system formalism 
fig 
transfer functions represented boxes inputs outputs connected box 
termed block model systems engineering data flow graph software engineering 
state vector system cross product outputs specifically outputs connected boxes memory integrator delay system state represents algebraic cross product fy jffi fig 
displays system emphasizing state state transitions block network orientation 
important class state transition model finite state automaton fsa 
example outputs associated states input conditions involving provide determinism multiple branches state 
integrate block network orientation 
state transition orientation 
table simulation model types 
discrete state space continuous state space discrete time difference equations difference equations integer states real states cellular automata finite state automata continuous time queuing models differential equations digital logic models model types cross product time state space terms possible values discrete continuous suggests possible model types 
table displays combinations example model formalisms 
discrete event models localized table concept discrete event refers discrete updating process discrete continuous character time state see characterizations discrete event models 
discrete event simulations performed models discrete state space column table 
continuous events 
simulation literature finds discrete events 
continuous events defined terms start arbitrary numerical integration interval 
concept adequate depends simulation process intrinsic characteristic model 
appears events discussed greater detail section discrete map cognitive linguistic concepts connected processes model 
section attempt provide conceptual framework understanding discrete events 
combined model combines model types 
instance combined discrete event continuous model distinct model types discrete event model continuous model 
models coupled discrete events 
event identification event state 
components state vector specific time event form 
definition event physics defined systems theory page 
simulation literature term event usually associated linguistic cognitive mapping 
event legally occur time regardless linguistic association term event mean key event nominal event 
derive identify events segmentation partition criteria involves strong knowledge representation physical system studied 
study segmentation partitioning means trivial usually determined human domain expert 
instance arrivals departures key events determined single server queue possible choose events signifying person jumps line seconds get drink water person entering phase larger service process 
events defined points time relative level abstraction associated model events modeled activities events model defined lower abstraction level 
utilize heuristics help semi automating event identification procedure 
heuristics partitioning trajectories complex process ffl general event occur significant marked change occurs trajectories input output state 
consider input trajectory square wave 
leading trailing edges potential locations events 
continuous systems state variables specify orders derivatives 
sign change state variable denotes potential event location 
ffl form list questions asked model 
objects part question represented simulation model interaction objects possible events 
general actions applied objects possible locations events 
activity scanning world view discrete event simulation activities actions form basic primitives model expression 
ffl general consider boundary conditions 
respect collisions geometrical objects points collision indicate events 
example events projectile hits target articulated comes physical contact environment 
ffl just programs context switches subroutines models model context switches 
model deliberately composed separate sub models sub model seen phase events demarcate phase boundaries 
particular heuristic partition system boiling water discussed 
discussing identification discrete events ask basic philosophical questions kind situations seen events 
propose events associated definite cognitive associations 
instance spot air feet floor cognitive linguistic mapping normally specify event location object passes spot motion trajectory 
ball hits floor serves event strong cognitive mapping floor 
example system boiling water overview consider pot boiling water electric heating element 
initially pot filled predetermined level water 
small amount added simulate activity occurs naturally boiling certain foods 
system input control temperature knob 
knob considered states ffi ff ambient temperature 
assumptions connection physical system 
input knob turning change time 
input trajectories piecewise continuous possible values 

liquid level height increase liquid starts boil 

liquid starts boil layer foam increases height overflows pot knob turned 

liquid level decreases boiling overflow phases 
create mathematical model start data expert knowledge domain 
data gathered cost effective way model engineering process simplified rely solely heuristics identify model 
analyzing pot boiling water may derive simple causal models individual transitions may knob water getting hotter water getting hotter water boiling 
important facet system modeling choose certain modeling methods require categorization informally specified system components 
key components system model input output state event time parameter 
different modeling methods include components different ways 
instance fsa focuses state state transitions input labeled arc dataflow model hand focuses transfer function input output 
knowledge base large selection model formalisms choose fsas petri nets bond graphs block graphs models pulse processes differential equations difference equations name 
individual components chosen aid existing knowledge base created manually models necessary simulation 
knowledge base approach similar function system entity structure ses 
focus knowledge base schemata sort infrastructure needed form models different abstraction levels 
model knowledge provided human modeller automatically inferred 
knowledge base contains types semantic networks represent knowledge boiling water domain action object 
particular networks devoid cycles displayed tree form figures focus action hierarchy information model level model 
top part action tree resembles class hierarchy isa relations break higher level phase 
model relation points set differential equations model particular phase 
man relation specifies observable manifestations particular phases fig 
acronym kind 
foam man exception hyp man isa isa man isa isa isa model model model model model model smell burnt underflow overflow forming bubbles boiling heating cooling cold cold phase action hierarchy 
manifestation relations useful diagnosis 
hyp relation specifies reached hypothesis diagnosis causal reasoning 
create models review purpose goals simulation 
set questions deals classes instances refer object hierarchies fig 

purpose choose concentrate temporal phase information answer questions sort happen immediately pot boils long take water cool room temperature knob turned ffi 
sections discuss stepwise refinement process create multiple models boiling water system 
refinement procedure shown 
hierarchy representational nature 
define hierarchical organization question answering system facilitated maintaining structure 
question may require information specific layer regardless states layer represent lower level states lumped state carry information addition default information carries representing sub model 
want construct second level abstraction total system take topmost fsa include second level fsa form fsa 
level represents detailed representation state layer 
homogeneous refinements homogeneous refinement refinement model detailed models type 
instance consider printed circuit board 
levels modeled block formalism 
model defined having type block just model type petri net model 
chip level pc board model contain function blocks decomposed block networks 
way modeller build hierarchy models having represent attr attr attr attr attr attr part part attr attr isa isa isa isa max temp type material temp material temp height temp handle body knob burner pot water object part part part part part part part part part part oven counter disposal sink stove counter counter floor island kitchen object hierarchies 
graphs state state automaton block combined fsa fsa fsa refine refine refine state automaton state automaton state automaton model refinement procedure 
model lowest abstraction aggregation level 
displays levels finite state automata boiling water process 
note states levels chosen directly referring action hierarchy fig 
knowledge base 
level refinement corresponds level action hierarchy 
topmost fsa fig 
displays simple state automaton input 
label fsa 
input discretized knob control 
input occur time facilitate change state 
change input denoted arc fig 
defining state transition accomplished input 
knob turned state cold system moves state cold 
temperature reaches ambient temperature denoted ff system returns cold 
second level includes detailed representation state cold 
combining new fsa fsa create fsa complete model boiling process 
fsa constructed similarly 
note transition condition may refer detailed state specification available current level abstraction 
example transition exception boiling refers phase low 
model building conditions evidence state refinement necessary hierarchy useful model building facilitating question answering variety abstractions 
discussed sec 

alternatively modeller may decide terminate refinement process leaving transition non deterministically specified 
decision continue refinement modeling objectives accuracy required computational resources available 
heterogeneous refinement heterogeneous refinement takes homogeneous refinement step loosening restriction equivalent model types 
instance petri net high abstraction level may choose decompose transition block graph transition fires petri net may drop functional block level 
fsa fig 
choose represent state continuous model 
specifically state define state variables temperature hw height water height foam top water updated 
parameter height pot 
cases hw hw result eventually multimodel coordinated fsa 
continuous models contained states heating cooling require physical theory stating 
model heat conduction convection radiation play major roles system 
derive continuous model heating cooling define resistance 
thermal resistance ka height water surface area pot thermal conductivity water 
ignore resistance pot significant resistance water 
definition thermal capacitance flow heat heating element water 
capacitance metal pot capacitance water total capacitance 
newton law cooling states rq deltat gamma temperature source heating element temperature water 
state variable convenience 
boiling hw underflow overflow hw hf ht hf ht exception exception cold boiling overflow underflow boiling cooling heating cold cold cold cold boiling homogeneous fsa refinement 
cooling boiling cold cooling heating decomposition heating state 
combining newton law capacitance law law capacitors series arrive rc gamma equation order lag step input representing sudden change temperature effected control knob 
displays block diagram heating heating state 
proper coupling essential heterogeneous refinements 
clear components level match components higher level 
note fig 
transfer function input detected fsa converting input values temperature values block network 
specifically block labeled performs mapping real valued temperatures ff 
due latent heat effect water exceed water 
water turned steam temperature increases system passes underflow state hw 
low level continuous models defined follows 
cold ff hw 

heating gamma hw 

cooling ff gamma hw gammak models exhibit order exponential behaviors rough approximations actual boiling water system 
internal transition external transition legend generic phase graph 

boiling hw gammak 
overflow boiling constraint 
underflow undefined hw 
system phase denoted phi state variables ffl temperature water 
ffl hw height water 
ffl height foam 
note continuous models share common set state variables 
general state variables may different model 
constants height top pot starting height water poured pot rate constants 
initial conditions phi cold ff hw knob including functional block knowledge create large model called combined defined fsa state containing block model shown fig 

forming multimodel general case refinement graphs state automaton block graph lowest level 
form multimodel need specify set models defined coordinated exactly submodel active time 
multimodel created fig 
treating states phase associating model phase 
ease exposition considering general case consider example 
displays phase graph phases different model associated phase instance phase underlying model generate state trajectories 
external events denoted fig 
solid arc phase instance input received phase immediately moves model starting state determined state input occurred phase remains internal called state events occur state model satisfies specific transition conditions 
denoted dashed lines phase 
instance phase equal 
interpreted follows state variable reaches value phase note phase graph fsa augmented capability recognizing changes state events internal events input events external events 
phase graph means coordinating transitions activations submodels multimodel 
summarize example formulation fsa controlled multimodel 
fig 
variables ffl phases 
ffl input variable 
values assume input immediate effect phase 
ffl sample state variable continuous model level 
ffl arbitrary predicate true false value 
ffl lower level continuous model containing transition functions defined state variables fsa controlled multimodel simulated combined continuous discrete event environment cellier praehofer 
fully understand operation simulation formalization 
fsa controlled multimodel specified structure fsa models map transit ions ffl fsa finite state automaton states called phases 
input induced transitions phase input gamma phase form external events multimodel 
ffl models set models specified system general formalism earlier 
ffl map mapping states fsa models phase assigned model models intended active model multimodel phase 
ffl transit ions set conditions potentially transition pair phases fsa 
form internal transitions multimodel 
formally transition condition associated phase predicate state set model associated phase map 
set models boiling water fsa controlled multimodel 
step transform hierarchical system structure flat structure collapsing hierarchy 
phase graph notation create graph compressing levels fig 
single level graph 
graph provides fsa coordinator multimodel 
input induced external transitions shown solid arcs fsa 
models set continuous models earlier map shown labeling phases elements models transit ions shown set conditions attached dotted arcs fig 

formal interpretation structure fsa models map transit ions mapping devs dess formalism combined continuous discrete event models 
refrain giving mapping restrict comments ffl note zero transition conditions may associated phase 
case internal transitions phase multimodel remain phase forever external event send phase 
case transition condition emerging phase multimodel remain phase condition true immediately switch new phase indicated 
case transition conditions multimodel remain current phase conditions true immediately switch phase corresponding transition 
ffl multimodel switches phase due external internal event state model new phases determined relation model old phase 
general require set initialization specifications transition 
simplicity consider requirement 
assume models share common state set transition new model starts state old model time transition occurred 
devs abstraction fsa controlled classical system theory provides strong definitions individual systems system networks little concentration concept event 
events critical study systems classical theory 
simulation researchers zeigler nance extended classical theory formally specify discrete event models roles events state time simulation models 
brief review resulting devs formalism prelude mapping fsa controlled multimodel devs equivalent 
time discrete event systems assumed real valued 
devs structure ffi ta follows strictly true case models restricted continuous discrete time discrete event 
extension general case difficult 
tie breaking mechanism handling cases condition simultaneously true 
hw heating hw hf ht underflow overflow cold boiling cooling state automaton controller boiling water multimodel fsa 
ffl input event set 
ffl output set 
ffl sequential state set 
ffl ffi ext theta external transition function 
js ta total state set model represents state having sequential state elapsed time ffl ffi int internal transition function 
ffl output function 
ffl ta time advance function 
devs formalism stated title discrete event system specification shorthand means specifying general system formalized earlier 
think pictorially box containing process 
box accepts inputs produces outputs 
map fsa controlled multimodel fsa models map transit ions devs equivalent follows 
devs defined ffi ta ffl input set fsa 
ffl output set fsa interest 
ffl theta qm set phases fsa qm common state set models 
note typical element phase state qm typical element total state set 
ffl ffi ext theta defined ffi ext fsa ffi fsa phase fsa enters receives input phase ffi transition function model associated phase map 
formalizes earlier interpretation fsa receives input immediately switches phases state multimodel updated state corresponding elapsed time model control time 
ffl define ta recall set transition conditions associated phase gamma condition internal transition 
gamma time gamma true starts state gamma minimum time gamma ffi true 
ta minimum gamma ranges transitions transit ions 
note minimum conditions satisfied state trajectory starting model 
procedures best illustrated referring example fig 

consider continuous model definition direct solution differential equation calculate elapsed time starting condition occurs solve obtain ln gamma ln 
ffl ffi int defined ffi int ffi phase dictated winning condition phase gamma equal ta 
ffl output function defined terms output currently active submodel interest 
preceding formulation fsa controlled multimodel phases states fsa mapped models 
possible provide concrete representation phases associating subsets states common state space qm models 
input participates determining phase input phase jointly determine partitions qm partition blocks placed correspondence phases 
displays common dimensional state space hw models illustrates phase shaded region state space 
table provides formal correspondence phases input values partition blocks 
partition block corresponding pair input value phase 
mapping viewed labeling partition blocks input phase pairs 
case internal event transitions expressed terms boundary crossings partition blocks 
means condition form written membership state partition block input prevailing phase assume minimum defined continuous systems 
applying tie breaking rules necessary 
aa continuous state space boiling water system 
example boiling water example transition condition cheat ing boiling input specified entry boiling table 
transition corresponds reaching boundary plane 
summary important special case fsa controlled multimodel occurs component models share common state space partitioned block labeled phase region particular model active 
restricted case partition blocks continuous model non trivial leads devs representation model 
clear construction discrete event model system affords efficient simulation continuous implementation system 
continuous approach requires step step generation successive model states discrete event form computes state changes event times 
devs model employs time advance internal transition function predict time state internal event employs external transition function update state change input occurs 
zeigler showed devs representation general system homomorphic relation original system called system morphism 
morphism corre simplified formalization section prevailing input assumed stored state detailed formalization explicit component heating phase cooling phase boiling phase cold phase undefined aa underflow phase aa overflow phase phase partitions 
table partitioning boiling water state space 
phase hw cold oe oe oe cold ff heating ff heating oe oe oe cooling oe oe oe cooling ff boiling boiling overflow overflow oe oe oe underflow oe underflow oe states systems preserved corresponding transitions 
state behavior original system preserved form macrostate microstate transitions 
research rigorously establish morphism similar fsa controlled multimodel structure devs equivalent 
discrete event simulation devs equivalent fsa controlled multimodel provides basis discrete event simulation 
simulation multimodel carried simulation environments devs scheme 
provide concrete example simulation article algorithms represented simpack set simulation tools 
fsa controlled multimodel converted discrete event simulation translation graph core discrete event simulation event switch statement 
switch statement composed event statement blocks routines gain control simulation scheduled event event list initiated caused 
show routines appendices switch statements corresponding graphs figures respectively 
careful statement conditions required pseudo code appendices occurs state trajectory model approaches reaches threshold specified condition 
example heating model exponentially approaches boiling temperature model behavior 
cases tolerance limiting value set provide definite boundary crossing 
control boiling water system driven discrete event simulation fsa fig 

low level differential equation models simulated runge kutta integration performing boundary checks internal events 
question answering choice model specified automata levels functional block level devs specification models answer questions system 
query system implemented sample questions answers practically derived multimodel 
arbitrary question shown table model chosen base answer 
note acronyms ffl type means category question 
types questions specified pred prediction diag diagnostic exp explanation ref 
predictive question simulation required generate answer 
diagnostic question yields short answer specifying immediate cause explanation lengthy may involve summary information 
question involve analysis simulation material pot ffl model refers level abstraction specified models discussed far 
fsa state model 
fsa fsa state models respectively 
lowest level block model labeled comb combined 
ffl knowledge refers additional knowledge needed answer question 
knowledge base helps provide answers questions 
recall action object knowledge trees specified boiling water domain 
note questions require information possibly provided dynamical model 
instance burnt smell attributed overflow state manifestation link action tree fig 

relation qualitative modeling levels abstraction just discussed demonstrate causal models ai potentially mapped systems view 
resulting set formal models answer different classes questions system 
definition levels multi layer system similar causal modeling method ai 
questions asked high level models asked automata investigation necessary support claim 
predictive diagnostic power afforded system representations vital break informal system representations appropriate formal models automata block graphs petri nets extra knowledge system answer greater percentage questions asked models 
requirement suggests informal system descriptions boiling water pot need broken known entities state phase event 
entities defined variety graph oriented modeling methods devs specification language 
second requirement suggests need knowledge bases house models 
manner multimodel hierarchies created type questions answered 
system boiling water demonstrate create fsa controlled multimodel efficiently represents system multiple homogeneous heterogeneous models 
multimodel approach demonstrated ai problem represented challenge system modeling 
utilizing combined modeling heterogeneous inter level coupling homomorphic behavior preservation able create solution ai modeling problem permits reasoning variety levels 
instance multimodel potentially answer questions water start boil long cooling take knob turned time 
negative side focus formal structure ignored difficult problems associated question answering 
instance case question system warm cold manually warm cold fsa topmost level abstraction 
know perform procedures 
investigating possible answers question remains done regard implementing fully realizable natural language interface integrates knowledge base model hierarchy 
models represent combined simulation finite state automata levels functional block level 
individual fsa levels abstraction shown useful answering certain high level system questions 
combined continuous discrete event model divided total boiling water process distinct phases 
coordination models phases facilitated phase graph associated fsa final level abstraction 
addition devs specification provided formalize multimodel concept system theoretic manner 
devs formulation allowed casting multimodel form efficient discrete event simulation 
simulation provides answers questions concerning dynamical behavior system answered symbolic levels abstraction 
illustrates approaches ai simulation methodology combined achieve artificial systems capable modeling reasoning physical systems 
heuristic approaches event identification qualitative modeling suggested illustrated multimodel characterization boiling water example introduced forbus 
demonstrated multimodel approach system boiling water believe method applicable scenarios different levels abstraction coded model form appropriate levels 
started fsas utilized continuous system formalisms detailed simulation 
possible start functional block model link petri nets model formalisms 
problem semi automating process conceptual non executable object model system converting executable model remains hard problem taken form ai simulation software engineering 
completely solved problem method method suggests way designing executing multi models 
advantage suggested multi model approach complex system necessitate encoding single level abstraction alternatively modelled multi model allowing analyst create maintain integrated model base reason system behavior variety abstraction levels 
described conceptual foundation supporting design execution 
plan projects including constructing implementations knowledge representation natural language query schemes justifying heuristic approaches supporting theory tools 
penberthy reasoning assumptions graphs models 
eleventh international joint conference artificial intelligence august ijcai pp 

combining qualitative quantitative simulation brief 
second conference ai simulation planning high autonomy systems cocoa beach fl april pp 

bobrow qualitative reasoning physical systems 
mit press 
cellier combined continuous system simulation digital computers techniques tools 
phd thesis swiss federal institute technology zurich 
de kleer brown qualitative physics 
qualitative reasoning physical systems bobrow ed 
mit press pp 

fishwick hierarchical reasoning simulating complex processes multiple levels abstraction 
phd thesis university pennsylvania 
fishwick role process abstraction simulation 
ieee transactions systems man cybernetics january february 
fishwick abstraction level traversal hierarchical modeling 
modelling simulation methodology knowledge systems paradigms zeigler oren eds 
elsevier north holland pp 

fishwick extracting rules fuzzy simulation 
expert systems applications 
fishwick fuzzy simulation specifying identifying qualitative models 
international journal general systems 
fishwick heterogeneous decomposition coupling combined modeling 
winter simulation conference phoenix az december pp 

fishwick computer simulation modeling methodology algorithms programs 

published textbook 
fishwick eds 
qualitative simulation modeling analysis 
springer verlag 
fishwick eds 
knowledge simulation methodology application 
springer verlag 
fishwick zeigler qualitative physics automation systems problem solving 
journal theoretical experimental artificial intelligence 
forbus qualitative physics past 
exploring artificial intelligence shrobe ed 
morgan kaufmann pp 

forbus falkenhainer self explanatory simulations integration qualitative quantitative knowledge 
aaai pp 

kalman arbib topics mathematical systems theory 
mcgraw hill new york 
klir architecture systems problem solving 
plenum press 
system simulation programming styles languages 
addison wesley 
kuipers qualitative simulation 
artificial intelligence september 
kuipers chiu taming intractable branching qualitative simulation 
tenth international joint conference artificial intelligence milan pp 

nance time state relationships simulation modeling 
communications acm april 
nance conical methodology framework simulation model development 
conference methodology validation san diego ca april society computer simulation pp 

oren model activities paradigm shift 
simulation modelbased methodologies integrative view 
springer verlag pp 

oren simulation model symbolic processing taxonomy 
systems control encyclopedia 
press pp 

oren simulation taxonomy 
systems control encyclopedia 
press pp 

oren dynamic templates semantic rules simulation advisors 
knowledge simulation methodology application 
springer verlag pp 

arbib systems theory unified state space approach continuous discrete systems 
saunders philadelphia pa 
praehofer system theoretic foundations combined discrete continuous system simulation 
phd thesis johannes kepler university linz 
iv simulation language 
john wiley sons 
simulation slam ii 
press 
reichenbach philosophy space time 
dover 
published general publishing toronto ontario 
ed 
second aaai workshop model reasoning boston ma aaai conference 
murphy richardson system dynamics 
addison wesley 
struss global filters qualitative behaviors 
aaai pp 

weld combining discrete continuous process models 
ninth international joint conference artificial intelligence august ijcai pp 

weld aggregation causal simulation 
artificial intelligence october 
weld de kleer eds 
readings qualitative reasoning physical systems palo alto ca morgan kaufmann 
mathematical theory systems engineering elements 
krieger publishing 
zeigler theory modelling simulation 
john wiley sons 
zeigler multi modelling discrete event simulation 
academic press 
zeigler multifaceted systems modeling structure behavior multiplicity levels 
individual development social change explanatory analysis 
academic press pp 

zeigler devs representation dynamical systems event intelligent control 
proceedings ieee january 
zeigler object oriented simulation hierarchical modular models intelligent agents systems 
academic press 
appendices include background information simpack specify pseudo code simulating models figures 
simpack collection programs libraries simulation 
algorithms specified appendices require basic simulation approaches ability simulate finite state machine ability simulate set differential equations 
task may fsa simulator general discrete event approach 
runge kutta integration simulate equations heating cooling newton law 
list current features simpack toolkit 
combined combined modeling combined discrete event continuous simulation cashier moving belt combined difference differential equations delay differential equation gamma 
dec declarative modeling fsa finite state automata timed states markov markov model timed states pulse pulse process 
equation equational modeling difference difference equation modeling log logistic equation order ii 
log logistic equation second order iii 
diff circular queue simulation method log iv 
bifurcation analysis log differential differential equation modeling deq equation parser solver ii 
integrate sample euler rk integrations 
func functional modeling window interactive queuing network simulator clock discrete event model clock cpu disk discrete event simulation gas methods simulating gas molecule dynamics logic digital logic simulator nominal gate delays network communications network simulator petri timed petri net simulator general queuing network simulator slice block simulator ala ssq single server queue simulation graphical tracing 
mini compiler small subset 
queuing queuing library contains routines queuing list routines referenced pseudo code ffl event takes event front event list places ffl schedule schedules event occur placing event list 
event occur amount time elapse executing event ffl instantiate provides context switch continuous model controls system behavior 
instantiate causes new initial state simulation 
set state variables state variable relationships set differential equations 
ffl time state yields time elapsed model condition true 
ffl save state saves state model current phase 
ffl get state gets current state saved previously save state 
ffl time input yields time elapsed specific input enters system 
scheme presumes deterministic simulation input stream fed simulation produced known advance 
way difficult determine event comes specific input value state event occurrence 
appendix algorithm simulating model fig 
event event save state switch event external events list input values cases switch phase schedule break schedule break switch break phase schedule break internal events list phases graph cases phase instantiate get state time state time input schedule time state break phase instantiate get state break phase instantiate get state break switch appendix algorithm simulating model fig 
event event save state switch event external events list input values cases switch phase cold schedule heating break cooling schedule heating break switch break switch phase heating schedule cooling break boiling schedule cooling break overflow schedule boiling break switch break internal events list phases graph cases cold phase cold instantiate get state break heating phase heating instantiate get state time state equal time input schedule boiling time state equal break cooling phase cooling instantiate get state time state equal ff time input schedule cold time state equal ff break boiling phase boiling instantiate get state time state equal time input schedule overflow time state equal break overflow phase overflow instantiate get state time state equal time input schedule underflow time state equal break underflow phase underflow table question answering multimodel 
question type model knowledge answer happens turn pred fsa system moves cold knob water cold 
system warm diag fsa system cold cold 
water temperature equals ambient temperature 
water cooling 
diag fsa system heating happened 
knob turned boiling knob turned 
maximum ref object ffi temperature burner 
water heating pred comb minutes 
temperature ffi long take cool room temperature knob turned 
burnt smell 
exp fsa action water originally room happen 
temperature 
began heat knob turned 
eventually water foam reached top pot 
overflowing foam caused burnt smell 
water start diag fsa water heated boil 
temperature reached ffi caused water boil 

