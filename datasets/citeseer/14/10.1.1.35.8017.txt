software verification research centre department computer science university queensland queensland australia technical report classbench methodology framework automated class testing daniel hoffman paul april phone fax note technical reports available anonymous ftp ftp cs uq edu au directory pub techreports 
classbench methodology framework automated class testing daniel hoffman dept computer science univ victoria box ms victoria canada paul dept computer science univ queensland st lucia qld 
australia contrast explosion activity object oriented design programming little attention object testing 
novel approach automated testing designed especially collection classes 
classbench methodology testgraph partially models states transitions class test cut state transition graph 
determine expected behavior test cases generated testgraph tester develops oracle class providing essentially operations cut supporting testgraph states transitions 
surprisingly thorough testing achievable simple oracles 
classbench framework supports tester providing testgraph editor automated testgraph traversal variety utility classes 
test suites easily configured regression testing thousands test cases run debugging test cases selected isolate bug 
classbench methodology framework detail illustrated simple examples test suites commercial collection class libraries 
object oriented methods productivity reliability vastly improved primarily reuse 
reliability depends testing improvement realized effective class testing 
tests class repeated times initial version modification new environment new version operating system compiler 
requirement repeatability suggests test execution automated minimize cost test run 
automation test development important performed 
testing focuses collection classes providing sets queues trees graphical user interface classes 
focus programmatic testing little human interaction input generation output checking program control 
rely keyboard mouse capture playback file screen capture comparison 
techniques unsuitable automated testing collection classes interface function calls keyboard mouse screen file 
methodology methodology tester performs tasks 
develop testgraph 
testgraph nodes arcs correspond states transitions class test cut 
testgraph vastly smaller cut state transition graph 

develop oracle class 
oracle provides essentially operations cut supports testgraph states transitions 
result oracle usually significantly cheaper implement cut reliable 
oracle member functions invoked frequently output checking surprisingly input generation 

develop driver class 
driver class contains cut orc instances cut oracle 
driver provides public member functions reset places cut orc initial state arc generates transition cut orc associated testgraph arc traversed node checks node cut behavior consistent orc behavior 
framework classbench provides framework sense gamma page toolkit conventional subroutine library matter write main body application call code want reuse 
framework reuse main body write code calls main parts classbench framework graph editor graph traversal algorithm support code form skeletons demonstration test suites 
testgraph editor provides facilities commonly available today graph editors 
accessed disk nodes arcs added deleted 
testgraph traversal classes automatically traverse stored testgraph calling appropriate driver member functions reset called start path arc called time testgraph arc traversed node called time testgraph node visited 
substantial quantity code developed ease task classbench framework 
skeleton files provided oracle driver test documentation 
modest collection class library ccl developed including sophisticated test suites 
library heavily classbench software 
test suites played important role development useful starting point new test suite 
developing test suite new class typically suite ccl class similar new class 
classbench methodology basic techniques ieee standards define failure occurrence incorrect system behavior incorrect output fault defect source code 
const int maxsize class intset public intset void add int throw void remove int throw void int ismember int const int size const protected int maxsize int intset class declaration intset class test suite illustrate classbench methodology intset simple bounded integer class declaration shown 
constructor intset creates empty set 
assuming cut object type intset cut add adds cut throwing exception cut exception cut contains maxsize elements 
call cut remove removes cut throwing cut cut removes elements cut 
cut ismember returns true false cut cut size returns number elements cut 
class intset typically tested writing customized test driver 
test driver shown uses simple loop macro assert check behavior cut 
array test suite parameters parm control set size 
iteration outer loop intset instantiated assert test size ismember parm gamma 
set filled parm elements size ismember tested 
driver straightforward write problems 
error messages generated assert contain little information line number assertion failed printed 
element checked displayed hard locate fault cut 
addition test suite achieves poor code coverage functions remove called exception code tested 
improve code coverage require significantly longer driver intset simple class 
indicates customized drivers scale practical examples interested systematic thorough class testing 
testgraph directed graph nodes unique labels designated start node arcs testgraph labeled arc labels need unique 
shows simple testgraph intset 
diagrams arc source node indicate start node empty case 
testgraph partial model cut state transition graph 
testgraph node corre int parm maxsize test suite parameter const int int main int intset cut assert cut size check cut empty int parm assert cut ismember parm load cut cut add assert cut size parm check cut full parm assert cut ismember assertion test driver intset empty fg simple testgraph intset test suite parameter class driver public driver int parm void reset void arc int void node const private intset cut int declaration class driver sponds cut state start node initial state arc corresponds sequence cut state transitions 
node cut state represents 
cut state space normally large testgraph state space vastly smaller 
cut state space contains states reached testgraph state space contains states reached test suite 
add flexibility testgraph scheme associate test suite parameter test suite 
supplying value parameter tester selects particular mapping testgraph nodes cut states 
typically handful parameter values chosen suite run value selected 
intset testgraph test suite parameter size cut state corresponding testgraph node 
generate test cases repeatedly traversing testgraph start node test cases derived resulting paths 
interested paths sense cover testgraph 
consider types coverage node coverage arc coverage path coverage analogous statement branch path coverage structural testing 
structural testing arc coverage subsumes node coverage path coverage subsumes arc coverage difficult achieve impossible testgraph cyclic 
reasons testgraph traversal algorithm generates paths achieve arc coverage 
trivial testgraph shown arc coverage achieved single path alli testgraph traversal algorithm generates calls member functions class driver implemented tester 
declaration driver shown 
constructor takes value test suite parameter argument 
member function reset called time new path started arc called arc label traversed node called node testgraph visited 
private variables cut store cut current node testgraph current value test suite parameter 
driver implementation shown 
reset sets current node empty 
arc adds elements cut sets current node 
arc testgraph arc node checks return value cut size cut ismember gamma 
functions provided classbench framework generate appropriate error messages testing reveals failure 
driver driver int void driver reset empty void driver arc int int cut add void driver node const empty cut size int cut ismember cut size int cut ismember implementation class driver test suite parameter reset node empty value error file driver cpp 
line 
expected value actual value arc node value error file driver cpp 
line 
expected value actual value test suite parameter reset node empty value error file driver cpp 
line 
expected value actual value arc node value error file driver cpp 
line 
expected value actual value test suite parameter reset node empty value error file driver cpp 
line 
expected value actual value arc node summary statistics number failures total test cases test output code coverage testgraph simple customized driver shown 
fact calls executed cut identical test suites 
error messages generated testgraph test suite informative 
example suppose fault intset intset size returns maxsize regardless number elements set 
run test suite test suite parameter values output shown generated 
parameter value error message generated node maxsize correct return value size 
improve code coverage extend intset testgraph shown 
new nodes odd represent subsets consisting odd elements 
arcs delete odd elements remove arc clear empties set 
required changes driver straightforward arc node implemented way case statements 
extended testgraph normal case statement intset executed 
oracles test suites commercial classes driver implementation tends complex unmanageable 
driver complexity reduced moving code output checking empty odd clear clear fg full testgraph intset test suite parameter separate class oracle 
oracle similar cut handles states transitions testgraph 
oracle declaration intset shown 
provides member functions intset implemented array maxsize booleans 
add element set set true remove set false 
sets testgraph contain elements range maxsize gamma simple implementation sufficient 
oracle contains constructor creates oracle object testgraph node value test suite parameter 
example statement oracle orc odd initializes orc oracle object representing set 
oracle provides operator 
partial oracle implementation shown 
constructor creates empty set initializing entries false add sets true ismember returns maxsize gamma false 
implementations member functions straightforward 
version driver uses oracle shown 
member variable orc stores oracle object 
reset removes elements orc cut 
arc arc elements added orc cut 
arcs implemented similarly 
code node reduced cases single case oracle supplies expected values calls size ismember 
note checks performed nodes testgraph 
oracle class provides systematic approach checking cut behavior simplifying driver implementation 
exceptions intset implementation uses exceptions 
implementation detects occurrence exception signals exception operator throw 
class user handles exceptions try catch 
class oracle public oracle oracle const oracle orc oracle int node int parm void add int void remove int void int ismember int const int size const oracle operator const oracle orc private int maxsize declaration class oracle oracle oracle int maxsize void oracle add int maxsize int oracle ismember int const return maxsize partial implementation class oracle void driver reset cut orc void driver arc int switch case int orc add cut add break case case case clear void driver node orc size cut size int orc ismember cut ismember partial implementation class driver void driver node void driver int orc ismember int try cut add catch intset exception testing class intset test exception behavior cut add checks driver node 
shows implementation node includes exception testing 
testing size ismember moved new private member function 
functions test signaled correctly 
implementation node terms check functions node implementation rely 
element orc call cut add placed inside try block 
calls throw causes assignment inside catch block executed 
exception thrown value remain call report failure 
implementation similar 
implementation generates adding element node test suite parameter maxsize 
addition changes code check unexpected cut exceptions occur time testing 
provides systematic approach testing exceptions 
test suite provides statement coverage normal case exception code intset 
methodology summary section incrementally developed full test suite intset 
summary tester performs tasks 
develop testgraph 
testgraph nodes arcs correspond states transitions cut 

develop oracle class 
oracle provides essentially operations cut supports testgraph states transitions 

develop driver class 
driver class contains member variables cut orc instances cut oracle provides public member functions reset arc node 
systematic approach testing testing documented test implementation understood maintained 
associate test plan test suite 
purpose test plan determine feasibility test implementation adequacy test cases 
especially important test implementation written 
addition test plan serves documentation test implementation facilitates maintenance test implementation 
classbench methodology advanced techniques section introduces techniques proved useful applying classbench methodology commercial class libraries 
class experience testing commercial class libraries shown driver class tends get complex lengthy pays move code possible classes 
introduce new class provides shell cut 
shell typically provides operations modify cut match information oracle operations compare cut oracle 
declaration intset shown 
second constructor copy constructor creates cut oracle cut 
add remove member functions add remove elements cut belong oracle passed argument 
example call cut add orc adds cut elements belong orc 
operator compares cut oracle performing tests previously driver 
part modified driver implementation shown 
code creates temporary oracle initializes contain elements node 
adds elements belonging oracle cut instance calling add 
changes orc oracle operator 
providing shell cut driver simplified especially commercial classes 
intset simplified driver removing loops arc addition insulates test driver minor changes cut enhancing reuse driver variants class 
show simplifies testing template classes 
class public intset public const oracle orc void add const oracle orc void remove const oracle orc int operator const cut const oracle orc int operator const oracle orc const cut declaration class void driver arc int switch case oracle cut add orc break case case case clear 
partial implementation class driver void driver const int empty create initialize lhs cut oracle compute check result orc cut return value object state implementation testing binary operators collection classes provide binary operators operator operator 
testgraph models single instance cut introduce second instance cut test binary operators 
section test suite intset intset extended operator operator operator calculates union sets 
test intset testgraph intset 
extend oracle intset adding binary operators added cut 
oracle operates restricted state space operators straightforward implement 
extend driver adding check functions node 
shows implementation 
implementation loops testgraph states 
testgraph state creates temporary instance oracle cut corresponds testgraph state 
applies oracle cut version operator temporary instance testgraph instance 
cut version operator tests operator returns correct value lefthand side object 
tests operator changed state correctly comparing new cut object new oracle object operator provided 
implementations similar 
node reached testgraph traversal algorithm loop testgraph states know binary operator tested pairs objects testgraph 
method provides thorough coverage binary operators relatively little code 
support provided oracle driver code compact comprehensible 
iterator testing collection classes commonly provide iterators provide sequential access elements collection 
frequently performance requirements demand iterator implementor control order elements returned 
example intset class public const intset intset void reset int throw int const class declaration void driver const iter cut oracle orc iter int iter orc ismember remove size implementation implementation linked list hash table quite different iterator return orders 
iterators specify order elements collection returned 
shows declaration provides member functions iterate elements stored object type intset 
class constructor takes argument intset object iterate 
function reset re initializes iterator returns element sequence throwing elements returned returns true false elements returned 
testing poses problem tester call may correct return values 
test testgraph oracle intset 
change driver add functions 
shows implementation 
creates instance cut iterator copy orc 
uses loop elements cut element returned tests element belongs 
removes element reports error 
elements returned checks oracle empty ensure elements returned iterator 
function iterates elements set calls checking thrown 
template class element 
class set public set void add element throw void remove element throw void int ismember element const int size const protected element maxsize int set class declaration approach complete sense iterator return correct sequence elements failure reported 
alternative approach testing iterators partial oracle described 
testing class templates class libraries collection classes class templates instantiated store elements type 
example providing class intset libraries provide class template set shown 
set provides member functions intset storing integers type element stored set specified template parameter element 
statement set int 
defines set integers set instantiated type provides constructor operator operator 
problem testing class templates clear element types choose develop maintain test suite type 
certainly afford simply clone test suite new type want test produce maintenance nightmare 
fortunately type conversion mechanism allows easily test template classes different types 
method small change required testgraph oracle driver remain exactly 
define new class element create provide mapping int element type driver oracle type want test set 
example implementation element allows test set type string shown 
string user defined class stroustrup pg 

element provides constructor maps int char sprintf 
char copied string creating string string operator char 
time driver calls member function passes int type conversion mechanism automatically calls constructor converts int string 
important test template classes different types type conversion mechanism provides convenient method 
test new type need provide class element public string public element element int char sprintf string string implementation class element new class element constructor maps int practice test classes builtin user defined type 
example tested set types int string 
classbench framework described previous sections tester develops test suite consisting testgraph list test suite parameter values driver oracle implementations 
classbench framework supports test suite development execution 
features provided test suite debugging regression testing 
testgraph editor testgraph editor provides facilities commonly available today graph editors 
loaded stored disk 
nodes arcs added deleted node arc labels modified 
nodes arcs temporarily deactivated control testgraph traversal test run 
regression testing nodes arcs active debugging done single active arc test configuration classbench framework provides additional features control test suite execution 

test suite parameter file 
file contains parameter values traversal testgraph 
typically values generate cut states variety sizes 

mask file 
shown node simply calls list check functions 
check function mask file contains function name boolean flag 
mask file enhanced version node check function temporarily disabled invoked flag true 
enhanced version node complex automatically generated mask file classbench framework 

message level 
classbench test suites generate log messages integer priority macro int char 
tester supplies message level value parameter file path required arc coverage testgraph invoke reset node arc arc invoke arc node invoke node framework pseudocode test run 
invocations priority lower message level ignored 
simple scheme gives tester control message output 
example message level set lowest priority intset test suite described section generates lines message output 
testgraph editor features just described test suite reconfigured ways key strokes recompilation 
automated testgraph traversal testgraph traversal classes automatically traverse stored testgraph calling appropriate driver member functions 
pseudocode illustrates framework invokes driver code 
nested loops tester control 
outer loop controlled contents parameter file 
middle loop controlled activating deactivating testgraph arcs nodes 
inner loop check functions invoked node determined contents mask file 
loops log messages controlled message level 
classbench edit compile run cycle programmer familiar edit compile run cycle 
steps edit source code remove fault compile source code run executable 
programmer repeats steps failures observed 
classbench framework edit compile run cycle effective 
see examine cycle detail shown 
focus inner loop iterates select run steps 
run test programmer selects test cases typically modifying input file debugger 
programmer remains inner loop learned cut behavior return edit compile steps 
classbench flowchart exploit configuration features described earlier 
outer loop run test cases log messages suppressed failure messages appear 
inner loop isolate fault narrow test suite testgraph arcs nodes deactivated parameter values removed check functions disabled 
goal generate failure test cases possible 
message level set print log messages provide information failure possible 
classbench traditional edit compile run cycle enhanced 
outer loop test cases run single command 
inner loop easy select revealing compile run needed test cases edit information fault located passes select tests classbench edit compile run cycle test cases adjust message output recompilation 
experience features cycle effective enjoyable 
tedious aspects testing automated giving tester necessary control 
testing commercial collection class libraries previous section process classbench framework test debug class implementation 
section describes process develop test suites commercial libraries 
libraries large number classes affordable testing depends exploiting similarities classes 
studying variety libraries classes fall groups ffl unordered collections including set bag map relation 
ffl ordered collections including list vector stack queue 
ffl trees including binary ary trees 
ffl graphs including directed undirected graphs 
experience shown test suite class group converted easily test class group 
example little effort adapted test suite set class test bag class 
typically adaptation involves little change oracle testgraph modest changes driver substantial changes 
provide basis testing class ccl developed test suites representative class groups 
described set test suite previous sections 
briefly describe test suites developed sequence tree graph classes 
testing sequence classes consider sequence class providing member functions insert delete retrieve modify element position sequence 
assignment equality append provided pairs sequences 
cut adapt approach set class 
changes needed testgraph nodes interpreted differently node represents sequence integers set 
example set testing node parameter pair represents set 
sequence testing represents sequence 
append operation requires changes 
test append sequences various lengths 
example append yielding 
second operand represented node parameter pair 
problem overcome simple change represent sequence testgraph node integers low high value 
represents represents 
concatenation represented 
oracle implementation uses node high low triple directly simple fast specialized nodes transitions needed testing 
driver implementations straightforward techniques described sections 
complete tree patterns height testing tree classes trees complex sequences testing tree class complex testing sequence class 
consider bintree class store traverse binary tree 
member functions provided modify retrieve value stored node add delete left right child 
sequence test suite oracle represents testgraph states pattern empty odd 
bintree patterns complex shown 
complete nodes numbered breadth node number corresponding node complete 
oracle represents tree pair hp ni complete tree height 
driver arc cut generated orc simple routine recursively traverses tree represented orc issues add child calls cut 
driver node similar routine recursively traverses orc tree checking cut stores tree represented orc 
entire test suite designed easy add new tree patterns 
testing graph classes classbench framework contains testgraph class stores arcs nodes labels testgraph traverses testgraph returning sequence paths cover arc reachable start node 
test suite testgraph class similar bintree test suite 
graph patterns somewhat complex shown 
chain ring complete graphs straightforward star graph requires explanation 
star graph order label node permutation digits node connected gamma nodes labels obtained swapping digit label digits 
example shows star graph order 
node connected nodes swapped swapped swapped 
star graph easy generate produces tests radically different chain prototype set set sequence tree set sequence tree testgraph nodes testgraph arcs oracle loc driver loc table metrics cset test suites ring complete graphs 
oracle represents particular graph adjacency matrix dimensional matrix src dst contains label arc src dst undefined arc pattern write routine generate pattern oracle 
chain ring complete graphs routines short simple star graph lines required 
driver arc cut generated orc traversing adjacency matrix orc adding corresponding nodes arcs cut 
bintree testgraph suite designed easy add new graph patterns 
industrial experience past years applied classbench classes libraries developed vendors 
include ibm rational rogue wave borland 
repeatedly refined methodology framework resulting approach described 
concreteness briefly review experience testing cset collection class library ccl developed ibm 
commercial class libraries ccl large complex 
clarity discussion presents slightly simplified view ccl classes 
ccl provides classes 
testing purposes classes divided groups shown 
began selecting class groups 
developed implementations prototype versions classes 
prototype classes designed small possible exhibiting testing problems ccl classes 
example explained section testing binary operators poses special testing problems 
included union operation prototype set class 
intersection operation supplied intersection poses new testing challenges tested technique union 
wrote refined test suites prototype classes 
prototype classes developing testing strategies able inexpensively experiment strategies 
develop test suite ccl class adapted test suite prototype class 
simple metrics table show approach worked practice 
able quickly adapt prototype test suites ccl classes 
typically change oracles required modest enhancement 
ccl classes member functions prototype classes adaptation effort done driver node 
new member function new check function written 
check functions developed quickly similar check functions prototype test suites 

oe oe oe oe oe star complete ring chain testgraph patterns test suite parameter set classes set key set key sorted set sorted set bag key bag key sorted bag sorted bag map sorted map relation sorted relation heap sequence classes deque equality sequence priority queue queue stack sequence tree classes ary tree grouping cset classes able avoid scaling problems prevalent software engineering methodologies 
example prototype set class member functions ccl set class times 
shows ccl driver times large prototype driver 
failures important measure testing approach failures generated 
classbench extensively test classes generating failures 
typically develop class member function time implementing member function check function 
approach code faults easy find amount new code tested small frequently lines 
frequent testing feasible testing completely automated 
test suites developed commercial libraries run long development inhouse testing complete 
failures generated libraries rational rogue wave borland 
example testing borland library revealed memory management problem caused intermittent corruption class data structures 
testing revealed number deficiencies documentation library inconsistencies documentation observable behavior classes 
problems confusion objects identity object objects value possibly different objects ordering example element classes store unordered collections elements lack distinction single multiple occurrences element values bag class 
related testing classes similar testing software modules early regression testing fortran subroutines addresses issues 
protest systems automate testing modules test cases sequences calls 
object oriented testing frankl developed scheme class testing algebraic specifications 
fiedler describes small case study testing objects 
perry kaiser discuss testing derived classes show general functions inherited base class may need retesting context derived class 
harrold extend considering member functions retested class derived base class 
propose method testing derived classes reusing base class tests test code 
september issue cacm devoted object oriented testing 
articles address important issues articles provide techniques class testing opposed system testing 
ace tool enhancement supports testing eiffel classes seen substantial industrial 
arnold discuss class testing issues techniques 
binder describes classes designed reduce test cost 
text devotes chapters class testing focusing primarily test plans 
approach extensive test documentation developed class 
contrast approach minimizes need document test suite standardizing structure test suites 
words test framework documented reused test suite 
despite lack attention object oriented testing literature crucial area reuse depends reliability turn requires thorough automated class testing 
classbench methodology tester performs tasks 
define nodes arcs testgraph determine states transitions tested cut 
second executable oracles provide basis output checking input generation 
full oracles typically important design testgraph oracle 
third driver class loads testgraph provides calls implement state transitions checking cut behavior state 
classbench framework supports tester providing testgraph editor automated testgraph traversal precise control test configuration 
tool support test suite development easier test suite debugging regression testing 
developed test suites handling variety features common collection classes including exceptions binary operators iterators templates 
developed strategies test suites representative set collection classes 
experience commercial libraries shown collection classes tested quickly adapting test suites 
gamma helm johnson 
design patterns 
addison wesley 
soft 
eng 
tech 
comm 
ieee computer society 
ieee standard glossary software engineering terminology september 

reliability path analysis testing strategy 
ieee trans 
soft 
eng se september 
stroustrup 
programming language 
addison wesley publishing 
hoffman fang 
testing cset collection class library 
proc 
cascon pages 
ibm toronto laboratory october 
ibm 
cset aix collection class library 
rational 
booch components class catalog 
rogue wave software corvallis 
tools class library 
borland international 
container class libraries 

language specifying software tests 
proc 
afips natl 
comp 
conf pages 
afips 
gannon hamlet 
data abstraction implementation specification testing 
acm trans 
program lang 
syst july 
hoffman 
case study module testing 
proc 
conf 
software maintenance pages 
ieee computer society october 
hoffman 
automated module testing prolog 
ieee trans 
soft 
eng september 
frankl 
astoot approach testing object oriented programs 
acm trans 
software engineering methodology 
fiedler 
object oriented unit testing 
hewlett packard journal pages april 
perry kaiser 
adequate testing object oriented programming 
journal object oriented programming pages january 
harrold mcgregor fitzpatrick 
incremental testing object oriented class structures 
proc 
th int 
conf 
software engineering pages 
hoffman 
graph class testing 
proc 
th australian software engineering conf pages 
murphy townsend wong 
experiences cluster class testing 
commun 
acm 
hoffman 
software design automated testing maintenance practical approach 
international thomson computer press 
arnold 
testing perfect world 
commun 
acm 
binder 
design testability object oriented systems 
commun 
acm 

craft software testing 
prentice hall 

