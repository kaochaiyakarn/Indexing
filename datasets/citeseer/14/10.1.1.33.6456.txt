siddhartha method developing domain specific test driver generators arthur alexander reyes dept computer science engineering university texas arlington tx reyes cse uta edu debra richardson dept information computer science university california irvine ca ics uci edu siddhartha applies domain specific language dsl paradigm solve difficult problems testing sbt 
domain specific test case data specifications difficult test program design styles engender difficult sbt problems essential phenomena interest siddhartha 
difficult test program design styles explicitly represented domain specific unit test driver designs accommodate problematic program design styles 
dsls developed represent driver designs 
dsl language processing tool translator developed maps drivers 
developed prototype implementation siddhartha reasoning sdk known software refinery developed domain specific translators 
translator generated drivers revealed new failures real world digital flight control application program 

specification testing sbt exploits formal specifications specs unambiguous standards automatically check tested program behavior templates automatically generate test case data specifications 
computer program unit subjected testing referred unit test uut 
important class sbt tool encompasses generate refine unit test driver programs drivers 
examples sbt tools class astoot das boot vec 
drivers control observe uut behavior programmatic invocations 
drivers feature embedded oracle automatically check uut test outcomes respect 
sbt tools class modular tightly couple generation translation 
development translators marginalized sbt research literature translators required sbt tool class 
difficult translation problems ignored assumed away 
doing produces sbt tools applied bear strong resemblance specs 
uut design process balance software quality attributes correctness efficiency ease analysis maintainability testability prioritized domain specific business needs 
domain specific uut design styles emerge 
example run time efficiency high priority design style may characterized ubiquitous assignment global variables 
difficult test uut design style 
drivers generated sbt tool accommodate design styles sbt tool difficult impossible apply application domain 
application domain digital avionics flight control software example problem 
application domain long time characterized insufficient interface definition formal parameters ubiquitous global variables side effecting behavior hardware representation specifications data structures 
general purpose sbt tools difficult apply 
response digital avionics flight controls software vendors develop custom sbt tools respect uut design style 
unfortunately little guidance developing domain specific sbt tools sbt research literature 
describes siddhartha disciplined example driven iterative non intrusive alternative method developing domain specific translators 
domain specific translators provide essential automation support sbt new application domains 
generated drivers expressed design styles specifically accommodate domain specific difficult uut design styles 
section presents siddhartha conceptual model foundation 
section describes prototype implementation siddhartha reasoning sdk known software refinery 
section describes domain specific translators developed prototype implementation 
section describes results evaluating translators replicating tests performed nasa software independent verification validation iv facility realworld digital flight controls application program 

siddhartha conceptual model siddhartha applies domain specific language dsl paradigm solve difficult problems sbt 
dsl paradigm discover abstractions essential phenomena application domain represent abstractions dsls develop dsl processing tools parsers printers editors type checkers interpreters translators synthesizers provide essential automatic problem solving support 
domain specific representations difficult test uut design styles essential phenomena interest siddhartha 
expert test engineer applying siddhartha discovers abstractions representations difficult test uut design styles represents abstractions dsls develops translator provide essential automation support sbt 
activities supported predefined domain model process description library reusable tool components architecture 
siddhartha conceptual model comprised predefined domain model process description 
domain model provides starting point domain analysis 
process description tells develop domain specific translator 
presents siddhartha domain model diagram 
nodes represent classes software artifacts 
hyper edges edges potentially tail represent tools processes map artifacts tail edge artifact head edge 
indicated diagram siddhartha assumes existence computer program units test formal specifications uut intended behavior specs formal test specifications generated spec uut accordance test data selection criterion unit test drivers drivers reports test results 
siddhartha assumes existence tools generate compile drivers executables compile invoke drivers run 
depending application domain object classes associated tools processes optional interface mappings driver wrappers 
interface mappings permit representational flexibility corresponding spec uut data control structures 
driver wrappers invoke drivers selected test case input data 
goal applying siddhartha produce translator 
siddhartha method denoted hyper edge takes input general example manually coded driver produces output translator 
expert test engineer applying siddhartha follows process description phases domain analysis example selection translator development translator testing deployment 
domain analysis phase test engineer maps nodes hyper edges generic domain model real world software artifacts tools processes unit testing application domain 
doing encourages test engineer search representations tools exploited support automatic translation 
example selection phase test engineer finds small collection general example 
example test engineer manually codes drivers 
driver expressed different design 
design correctly implement accommodate domain specific uut programming difficult test uut design styles 
test engineer evaluates manually coded drivers selects drivers expressed promising design 
yields collection example driver pairs 
example pairs test compile spec siddhartha driver refinement spec formal specification uut unit test formal test specification driver test driver procedure spec uut interface mapping test data selection criterion driver exe driver executable functionality tests specs programs specification implementation compile implementation run generic domain model diagram cases translator development 
translator development test engineer designs preferably recursive translation function maps fragments corresponding driver design fragments 
siddhartha treats driver designs dsls design activity dsl driver design dsl grammar productions effectively optimizes representations dsl driver design dsl support efficient translation 
modularization imposed translator design test engineer designs implements grammars syntax tree ast models dsl driver design dsl 
dsls debugged test engineer compiles translation function 
translation function perform translation activity test engineer designs implements reuses interface reformulation mapping transformation rules rule application control function main program 
additional details artifacts activities section 
phase test engineer tests translator demonstrates deploys test developers application domain 

prototype siddhartha implementation developed prototype implementation siddhartha conceptual model reasoning sdk 
reasoning sdk commercial shelf cots programming environment developing program analysis tools program synthesis tools 
reasoning sdk provides refine dialect predefined models ada fortran cobol 
refine executable wide spectrum formal specification language 
dialect lalr grammar definition language 
refine dialect support development domain specific languages 
example code fragments section drawn implementation siddhartha reqt scr log ada domain specific translator developed supporting tm reasoning sdk software refinery refine dialect refine ada refine refine fortran refine cobol trademarks reasoning systems incorporated mountain view ca 
requirements testing ada procedures scr models 
represents prototype library organization 
nodes represent collections source code 
node linked nodes imports services provided linked nodes 
refine refine fortran refine cobol franz common lisp reasoning sdk refine dialect siddhartha utilities refine ada ada expansion rules ada workaround rules ada utilities siddhartha library siddhartha library organization structure reasoning sdk shown lower right 
siddhartha library shown upper left 
siddhartha utilities programming language independent test analyze translators development 
siddhartha library currently contains collection utilities transformation rules supporting ada 
developed architecture translators conform 
architecture translators domain independent distinct domain specific designs drivers 
depicts translator architecture 
rule application control main program transformation rules language models ast model grammar driver ast model translation function driver driver expansion rules driver driver workaround rules spec uut pair specific rules interface reformulation driver grammar driver translator architecture translator design comprised language models translation function transformation rules rule application control function interface reformulation mapping main program 
language models represent dsl driver design dsl 
language model comprised ast model grammar 
reasoning sdk predefined models ada fortran cobol explicit ast model grammar may needed dsl driver design dsl expressed ada fortran cobol 
discuss 
translation function maps drivers design 
structure translation functions 
function maps boolean refine expressions corresponding ada expressions required driver design 
function tr re program construct user object result object user object re program construct result ada tr tr result ada tr tr result ada tr result ada tr tr result ada tr tr result ada tr tr result ada tr tr result ada tr tr true result ada true false result ada false re literal integer op re integer result set attrs object integer literal integer literal value re literal real op re real result real real literal re binding ref re sym result set attrs object simple name simple name symbol sym result example recursive translation function interface reformulation mapping context free finite map identifiers appearing corresponding expressions statements appearing drivers 
example map 
maps identifiers appearing logs generated scr toolset simulator scr model digital research flight control system rfcs corresponding expressions rfcs ada library 
var psfcc build id map identifier mapping copy term ref ada dpr interface psfcc build 
copy term ada initialization done copy term ada initialization done cnt copy term ada cnt state count copy term ada state count engage position copy term ada engage position example interface reformulation mapping fragment transformation rules handle context sensitive unrestricted aspects translation 
expansion add syntactic details needed correct compilation kernel driver generated translation function 
presents example expansion transformation rule 
rule adds clause ada compilation unit needed 
rule add clause unit compilation unit ada compilation unit context clause context clauses unit content decl item ref descendants class decl item identifier ref id ref ref defined id unit id library unit id id id defined unit id term equal unit id ada identifier standard fa context clauses ex wc id wc descendants class clause wc ada id ref id unit id ada compilation unit context clause context clauses new unit id unit content decl item new unit id identifier ref unit id true example expansion rule workaround transformation rules correct faults introduced earlier driver generation activities 
example scr toolset simulator fault cause log state identifiers repeated 
developed translation function siddhartha reqt scr log ada maps log states ada block statements 
simulator fault engenders ada block statements repeated identifiers legal ada 
presents workaround transformation rule corrects drivers repeated block statement identifiers 
rule rename block statement statement sequence statement sequence statements middle block id declare state constant string block id string exception exception handler block id ref block id declare state constant string block id string exception exception handler block id ref term equal block id block id term equal block id string block id string term equal block id ref block id ref statement sequence statements middle block id declare state constant string block id string exception exception handler block id ref block id new declare state constant string block id string new exception exception handler block id ref new block id new set attrs copy term block id identifier name string symbol symbol string identifier name block id sid block id string new set attrs object string literal string literal value symbol string identifier name block id new block id ref new identifier ref block id new true example workaround rule spec uut pair specific transformation rules augment context free interface reformulation mapping 
presents example spec uut pair specific transformation rule 
rule maps equation featuring rfcs scr model variable 
rfcs scr model boolean type rfcs ada library bit vector 
translation contextsensitive depends value represented context free interface reformulation mapping 
rule psfcc fix equality equality ada blah dpr interface copy term ref ada expanded name dpr interface psfcc build simple name symbol blah false ada dpr interface simple name symbol blah true ada dpr interface example spec uut pair specific transformation rule name implies rule application control functions apply transformation rules 
presents example rule application control function 
functions built refine function postorder transform traverses ast provided argument postorder bottom 
named rules tested order listed 
argument true indicates rule application performed exhaustively rule application restarts root ast successful rule application 
function new expand compilation unit compilation unit postorder transform atomic name expanded name add type conversion equality rhs psfcc fix equality psfcc fix engage position equality psfcc delete invisible variables rename block statement add clause unit add clause true example rule application control function main program sequentially parses file ast applies translation function ast applies rule application control function generated kernel driver ast prints final driver ast source code file 

example driver translators section briefly describes domain specific translators developed 
scr log ada name translator maps logs generated scr toolset simulator drivers expressed ada procedures 
ada ada name translator synthesizes regression expressed ada procedure declarations maps drivers expressed ada procedure bodies 
translators generate drivers expressed designs accommodate ada procedure insufficiently defined interfaces 
siddhartha reqt scr log ada presents siddhartha reqt scr log ada domain model diagram ada main procedures specs scr models logs generated scr toolset simulator drivers ada procedure bodies interface mappings refine global variables mapping type kind shown 
targeted test data selection criterion cover scr model event table cell test influence development translator 
compile spec siddhartha siddhartha reqt scr log ada scr model spec ada procedure uut log ada procedure driver scr ada interface mapping cover event table cell driver exe driver executable functionality tests specs programs specification scr toolset simulator run siddhartha reqt scr log ada domain model diagram wanted drivers expressed ada programmatically control observe ada 
reasoning sdk provides predefined ada model refine ada 
faced choice represent driver design explicitly new dialect grammar represent implicitly translation function reusing refine ada model 
refine ada model resisted attempts reuse parts new grammar driver design 
chose implicitly represent driver design dsl translation function 
presents example log generated scr toolset simulator 
logs siddhartha reqt scr log ada 
presents example driver generated siddhartha reqt scr log ada log file shown 
careful inspection reveals corresponding control data structures 
start state aileron cmd 

chan 

start state aileron cmd 

chan 

state edit edited new value engage edited new value psfcc state parameter mod edited new value request state edit complete state request state table num mc psfcc state armed arm eng fail example requirements fragment shows fragment translation function siddhartha reqt scr log ada 
translation production maps log fragment state state ada block statement 
equation log state represents scr model input variable new value 
translates assignment statement ada library global variable represents 
assignment statement uut invoked 
subsequent equations log state indicate intermediate output scr model variables changed value response input event assignment 
transformation rules operate generated driver kernel 
sample transformation rules siddhartha reqt scr log ada figures 
rule application control function 
siddhartha regr ada ada presents siddhartha regr ada ada domain model diagram 
application domain ada procedures specs earlier version counterparts assumed functionally equivalent ada procedure declarations generated data flow analysis tool developed test engineer drivers ada procedure bodies generated siddhartha regr ada ada driver wrappers manually coded ada procedure bodies invoke drivers appropriate input data determined covering uut branches 
dpr interface dpr interface data types data types psfcc main psfcc main engage logic engage logic cl global variable response text io procedure task set rdy task task body set rdy task loop delay dpr interface rdy loop exception text io put line exception occured set rdy task set rdy task initial state declare state constant string initial text io put line state state dpr interface boolean image dpr interface data types real text io put line state state dpr interface boolean image dpr interface data types integer bit 
psfcc main psfcc ada claw exception text io put line exception raised initial state initial state 
state declare state constant string positive image cl global chan psfcc main psfcc ada claw exception text io put line exception raised state state state state declare state constant string positive image cl global chan psfcc main psfcc ada claw exception text io put line exception raised state state state state declare state constant string positive image variable response rec psfcc main psfcc ada claw exception text io put line exception raised state state state state declare state constant string positive image dpr interface request psfcc main psfcc ada claw text io put line state state psfcc main psfcc state disengaged boolean image psfcc main psfcc state disengaged text io put line state state engage logic engage table number boolean image engage logic engage table number text io put line state state engage position boolean image engage logic engage engage logic test list index type engage logic test list index type val positive text io put line state state dpr interface psfcc state mode id arm eng fail boolean image dpr interface psfcc state mode id arm eng fail data types integer exception text io put line exception raised state state state abort set rdy task text io put line test completed exception text io put line exception raised elaboration example generated regression driver state id ref expr equations result ada block id declare state constant string positive image int lit id map simple name symbol id ref expr uut lib id map copy term uut id ref image lambda uut lib id map equations exception copy term text io put line exception raised state state block id ref block id append string named identifier ada identifier state concat format false pp block id ref identifier ref block id true int lit set attrs object integer literal integer literal value siddhartha reqt scr log ada translation function fragment siddhartha siddhartha regr ada ada ada procedure spec ada procedure uut ada procedure declaration ada procedure body driver uut branches driver exe driver executable functionality tests specs programs compile implementation run siddhartha regr ada ada domain model diagram procedure ol chan calc data types uut real cl uut pv apk apk apk av abs cl uut pv cl uut yv apk cl uut rv apk apk apk av ol chan calc example regression uut presents example regression uut 
spec identical 
notice procedure takes formal parameters 
presents generated data flow analysis tool developed test engineer 
tool discovers approximate effective interfaces ada procedures global variables account 
matched global variables appearing approximate effective interfaces uut spec represented formal parameters 
immediately reveals interface mismatches uut spec provides functional abstraction uut spec 
data types uut data types spc procedure ol chan calc regression test img data types uut real yv img data types uut real apk imh data types uut real av imh data types uut real apk imh data types uut real apk imh data types uut real apk imh data types uut real apk imh data types uut real av imh data types uut real apk imh data types uut real pv omg uut data types uut real pv omg uut data types uut real rv omg uut data types uut real pv omg spc data types spc real pv omg spc data types spc real rv omg spc data types spc real test passed boolean example generated regression data types uut data types uut text io cl global uut cl global spc cl uut cl spc uut spc cl uut cl uut cl spc cl spc data types spc procedure ol chan calc regression test img data types uut real yv img data types uut real pv omg uut data types uut real pv omg uut data types uut real rv omg uut data types uut real pv omg spc data types spc real pv omg spc data types spc real rv omg spc data types spc real test passed boolean cl global uut data types uut real img cl global spc data types spc real img cl uut yv data types uut real yv img cl spc yv data types spc real yv img uut ol chan calc spc ol chan calc test passed true true cl uut pv cl spc pv cl uut pv cl spc pv cl uut rv cl spc rv pv omg uut cl uut pv pv omg uut cl uut pv rv omg uut cl uut rv pv omg spc cl spc pv pv omg spc cl spc pv rv omg spc cl spc rv exception text io put line exception raised ol chan calc regression test example generated regression driver presents driver generated siddhartha regr ada ada 
presents translation function siddhartha regr ada ada 
translation function different translation function siddhartha reqt scr log ada 
translation function recursive relies large number highly specialized translation functions 
translation function cross larger syntactic gap siddhartha reqt scr log ada translation function 
siddhartha regr ada ada declarative drivers fully operational 
siddhartha reqt scr log ada ada ada encodes driver design translation function 

evaluation evaluated domain specific translators respect subset tests performed nasa software iv facility production support flight control computer psfcc rfcs 
selected nasa test replicated twice generated drivers second manually coded drivers arguably equivalent drivers generated nasa custom unit test support tool 
designed factorial experiment shown table 
interested seeing interactions siddhartha vs manual requirements tests vs regression tests nasa fault test small large 
clearly shows interaction siddhartha manual regression requirements total driver development duration 
data point average experiments 
siddhartha provided reduction total development time requirements drivers siddhartha cases test developer manually operated scr toolset simulator manual cases test developer engaged roughly cognitive activity coding driver directly scr event table cell 
siddhartha provided significant reduction total development time regression drivers data flow analyzer discovered approximate effective uut spec interfaces faster manual discovery 
clearly shows interaction siddhartha manual regression requirements failures detected exceptions raised developed drivers 
data point average experiments 
generated regression drivers failure exception manual coded regression drivers data flow analyzer produced accurate manual analysis 
generated requirements drivers failure manually coded requirements drivers plus significantly failures logs generated scr toolset simulator contain considerably information scr event table cells 
function synthesize regression test driver oracle ts compilation unit compilation unit ts ada context clauses procedure ts id parameter specifications test passed boolean uut id ref identifier ref get identifier original subprogram specification identifier subprogram body specification compilation unit calls uut ts true spc id ref identifier ref get identifier original subprogram specification identifier subprogram body specification compilation unit calls spc ts true ts ada context clauses procedure ts id imf parameter specifications 
test passed boolean uut temp declarations spc temp declarations uut temp declarations spc temp declarations bmf temp declarations buf uut temp declarations buf spc temp declarations img assignment statements uut assignment statements spc assignment statements uut id ref imf uut parameter associations uut parameter associations bmf uut parameter associations spc id ref imf spc parameter associations spc parameter associations bmf spc parameter associations test passed temp equalities omg equalities omg uut assignment statements omg spc assignment statements exception text io put line exception raised ts id ref ts id ref identifier ref ts id true imf parameter specifications ps ps parameter specification ps parameter specifications named identifier ends 
singleton seq element parameter specification identifiers ps imf 
img assignment statements matched global assignment statements img parameter specifications 
text io put line copy term ref ada text io put line psfcc build uut ts siddhartha regr ada ada translation function fragment table factorial experiment design reyes type iv fault ts size method uut id nasa test id table id output vars tested row col reqt 
big manual psfcc ada claw arm eng fail reqt 
big siddhartha psfcc ada claw arm eng fail reqt 
small manual psfcc ada claw display count reqt 
small siddhartha psfcc ada claw display count reqt 
big manual psfcc ada claw reqt 
big siddhartha psfcc ada claw reqt 
small manual psfcc ada claw display count reqt 
small siddhartha psfcc ada claw display count regress 
big manual engage ib stored mode id engage na regress 
big siddhartha engage ib stored mode id engage na regress 
small manual df na na regress 
small siddhartha df na na regress 
big manual vars na na regress 
big siddhartha vars na na regress 
small manual ol chan del av lpv pv rv na na regress 
small siddhartha ol chan del av lpv pv rv na na factor interactions manual siddhartha method requirements tests regression tests factor interactions failures exceptions factor interactions manual siddhartha method requirements tests regression tests factor interactions failures exceptions 
siddhartha method developing domain specific translators 
translators provide essential automation support sbt novel application domains 
siddhartha applies dsl paradigm solve difficult problems sbt discovery development dsls representing difficult test uut design styles development language processing tool translator provide automation support dsls 
existence siddhartha reqt scr log ada means insufficient interface definition nontrivial interface reformulation longer valid rigorously testing safety critical ada main procedures scr models 
existence siddhartha regr ada ada means insufficient interface definition longer excuse performing rigorous regression unit testing safety critical ada procedures 

mark blackburn robert joseph fontaine automatic generation test vectors scr style specifications 
proceedings computer assurance making progress computer assurance ieee new york ny usa 
carter production support flight control computers research capability aircraft flight research center 
th 
aiaa ieee digital avionics systems conference 
reflections 
proceedings irvine ca usa oct 
new york ny usa ieee 
vol 
ko frankl astoot approach testing object oriented programs 
acm transactions software engineering methodology april vol 
gannon hamlet data abstraction implementation specification testing 
acm transactions programming languages systems july vol 
heitmeyer bull labaw scr toolset specifying analyzing requirements 
compass 
proceedings tenth annual conference computer assurance gaithersburg md usa june 
new york ny usa ieee 

specifying software requirements complex systems new techniques application 
ieee transactions software engineering jan vol se 
hughes stotts systematic algebraic testing oo programs presence side effects 
international symposium software testing analysis issta san diego ca usa jan 
sigsoft software engineering notes may vol 
erik marc graham domain specific software architecture program software engineering institute special report cmu sei sr june 
poston robert automating specification software testing robert poston 
los alamitos calif ieee computer society press 
prieto diaz guillermo domain analysis software systems modeling ieee computer society press 
refine user guide dialect user guide refine ada user guide reasoning systems mountain view ca 
das boot internet home page www ics uci edu das boot htm weber thelen srivastava krueger automated validation test generation 
aiaa ieee digital avionics systems conference 
th phoenix az usa oct nov 
new york ny usa ieee 

