educational technology society issn iru frank linton ed lead scientist mitre burlington road bedford ma usa tel fax linton mitre org deborah joy internet applications technician mitre hans peter schaefer senior artificial intelligence engineer mitre andrew charron senior information systems engineer mitre describe recommender system enable continuous knowledge acquisition individualized tutoring application software organization 
installing systems result capture evolving expertise organization wide learning owl 
results year long naturalistic inquiry application usage patterns logging users actions 
analyze data develop user models individualized expert models instructional indicators 
show information recommend learning tips users 
keywords recommender system organization wide learning owl individualized instruction agent instrumentation logging 
new workplace technologies enable new learning methods decade enormous change taken place workplace pc desk office performed medium software 
mastering software portion relevant job tasks key enabling skill skill performing job 
happens performed software easily observable automated processes 
observability provides new opportunities training provided software instrumented 
software instrumented making small code changes software adding code computing environment observes reports actions users take software interface 
user menu selection button click keyboard command observed reported 
new knowledge capture method instrumentation opens door new training methods 
methods include embedded training training application appears user perspective integral part application distance learning learning takes place user workplace classroom intelligent tutoring software observes user doing realistic job tasks doing training context provides coaching feedback collaborative learning students share software tools 
instrumentation enables embedded distributed intelligent collaborative training 
tools build methods include intelligent tutoring systems self checking checklists peer help systems mccalla recommender systems resnick varian 
mitre developed software tools instrument user actions unix java microsoft office 
tools freely available may obtained contacting author 
instrumentation serve capture experts actions job capture learners actions training 
logging captures data done automatically great detail large number experts 
instructional mode instrumentation captures student actions interpreted various ways methods mentioned 
owl organization wide learning software report combine knowledge capture instruction integrated process capturing expertise displays delivering instruction needs 
distinction expert novice blurs individuals prove experts areas novices 
recommender systems owl kind recommender system resnick varian 
recommender systems frequently electronic commerce recommend purchases consumers 
contrast recommender system recommend learning application users 
types recommender system review briefly 
type recommender system information retrieval ir systems recommends documents words recommends documents share attributes document user identifies desirable 
type recommender system targeted marketing recommends purchases people similar 
words recommends purchases desirable people share attributes demographic profile 
owl uses third type recommender system commerce web sites reel com 
products consumers attributes individuals patterns purchases owl case software users preferential selections functionality 
example consider group people movies dislike movies dislike 
members group undoubtedly seen liked movies seen 
reel com recommender system suggest movies 
similarly owl compares software user find share patterns command usage recommends new commands user learn pooled knowledge similar users 
relatively unstructured world real difficult infer user attempting situation certainty recommend best actions take microsoft office assistant represents valiant attempt direction 
contrast owl assume user knows ways example delete text choose appropriate occasion 
observation pool users owl determines relative utility command owl introduces individual users time needed individual relative utility user learning useful functionality 
issues considered discussion section 
functionality modern application microsoft word may consist distinct commands 
majority commands irrelevant job tasks user attempt master full functionality application counter productive 
hand users learn small part relevant functionality application formal training 
knowledge remaining relevant functionality acquired acquired slowly painfully years trial error conversations peers lack knowledge results reduced effectiveness efficiency 
recommender system help users acquire relevant functionality application quickly suggesting user functionality peers useful 
workplaces mastery short supply required kind collaborative bootstrapping expertise 
welch recommender systems learning owl gathering data users years implemented software recommendations owl users 
empirical evidence claim report owl recommender system successfully promotes new learning reasons expect 
know recommender systems commerce 
recommender systems acknowledged account large part amazon com success cause profound change marketing called taste goods 
second recommendations timely 
information user time appropriate learn fills gap knowledge extends boundaries knowledge 
third know functionality owl recommending relevant learner peers job context 
software applications large number functions applicable job tasks performed individual 
example data show word commands applied users owl monitors 
learning functions waste effort 
hand individuals learn small portion useful functionality application formal training 
individual left devices determine acquire productivity enhancing functions applications desktop 
fourth expect recommendations time saving 
learn application individual turn advanced courses self study materials peers user groups world wide web user faces difficult task 
perceive need perceive software having possibility fulfilling 
explore software find function set functions enables task software 
user software developer define task different terms explorations fruitless correctly seen high risk low return ventures 
come surprise new learning resulting perceptions explorations rare result productivity gain possible desktop software realized landauer 
owl provides solution problem 
owl pools knowledge users organization recording function 
function interpreted vote utility 
owl compares functions individual functions pooled group users 
finds gaps boundaries individual knowledge individualized learning recommendations fill gaps extend boundaries knowledge 
owl provides current peer answer question functionality application useful function learn 
owl provides users means learning better exploring owl discourage inhibit exploration user discovers begins added owl database appropriate time recommended users 
remainder describe logging process initial remarks modeling coaching software users 
analysis data logged process creating individual models expertise 
show individualized coaching feedback users 
discuss issues raised analysis closing remarks 
owl research research explores potential new sort user modeling summaries logged user data 
method user modeling enables observation large number users long period time enables concurrent development student models individualized expert models applies recommender system techniques job instruction 
earlier reported linton linton 
kay thomas thomas report related text editor academic environment 
owl captures evolving expertise community practice lave wenger supports members community acquiring expertise serves organizational memory expertise captures 
main goal approach taken continuously improve performance application users 
system described applicable situation number application users perform similar tasks networked computers 
owl logger practical standpoint crucial logging process reliable unobtrusive frugal resources observation takes place extended periods time kay thomas 
research reported logs microsoft word users 
owl logger written visual basic applications 
general difficult implement loggers access application source code 
available tool instrumenting unix applications 
similar tool available applications written java 
mentioned owl unix java loggers may obtained contacting author 
owl logger works follows 
time user issues word command cut paste command written log time stamp executed 
logging initiated user opens word separate log created file user edits user quits word logs sent server periodically loaded database analysis 
toolbar button labeled owl informs users owl state gives full control logging process 
lines log record general information logger version date time stamp author followed platform processor version word 
detailed logging begins 
time user enters word command logger adds line log file 
line contains time stamp command name possibly arguments 
example log entry recorded facts author command open file entitled notes 
entries record author performed minor editing copy paste printed file 
log record text user enters omits potentially useful information preserves users privacy logging acceptable 
logging captures detailed record user activities record may sketchy reasons 
individual may edit text systems loggers activity may captured 
second macro logger omitting text capture certain keyboard actions tab return capture certain mouse actions scrolling distinguish commands entered 
permitting user control logging means logging turned default owl 
summarize logged data census user actions random sample arbitrary selection 
modeling coaching users analysis section analyze synthesize software usage patterns group users create expert model individual show model coaching 
benefit recommender system approach need capture expertise installing system 
begins new command event captured eventually command recommended 
define characteristics model expertise number relative frequency commands 
individuals commands vary models expertise created observing interpreting data multiple individuals 
system intended continuously improve performance application users providing individualized coaching form owl tips skill meter see providing feedback users 
coaching comparison user logged data expert model 
tip system compares individual user model pooled performance peers recommendations learning 
system attempts time recommendation user felt need knowledge system offering teach better way don time look 
tips system provide interface permit users explore relationship current expert models skill meter 
applications frequently upgraded processes refined clever users discover better ways doing things expertise static evolves 
capture evolving expertise system update expert models monthly 
updating process begins analyzing user data 
analysis section presents method detecting anomalous commands 
users experts generally innovative practitioners user may apply command 
users discover apply new commands appear user models 
users expert models eventually reflect existence new command recommender mechanism recommend knowledge spread 
section described characteristics recommender system coaching software skills job logged user data 
section analysis data collected period 
analysis section presents analysis log data shows tutoring learners incrementally improve software skills 
summary statistics users log data show volume data logged influences appearance expertise 
describe relative frequencies different types commands 
table showing contribution command total give equation characterizing relationship 
consider implications facts user modeling describe means reasonably certain examined sufficient log data observed command 
describe way derive users expected behavior observed behavior comparing contrasting behaviors derive instructional indicators taken knowledge owl uses provide learning guidance users 
analysis exploratory nature 
method naturalistic inquiry paraphrase patton involves studying real world situations unfold naturally unobtrusive non controlling manner openness emerges lack predetermined constraints outcomes 
point understand naturally occurring phenomena naturally occurring states 
software users project obtained substantive logs users 
majority members section mitre advanced information systems center 
mitre federally funded profit doing research public interest 
users consisted group leader artificial intelligence engineers technical staff support staff 
males females 
users employed mitre years median years 
users worked different macintosh platforms versions macintosh operating system versions word macintosh 
period logging ranged months person 
project acquired total user months data 
time logged users group applied available word commands total times 
average person different commands period logged average months applying different commands times average month 
number distinct ms word commands observed user user id 
user data quantity observation data distinct volume data shows apparent skill level users varied factor commands 
ignoring extremes performance evident users skilled ample opportunity learning 
inspection reveals complication individual skill level correlated amount observation data person observed apparently knows 
phenomenon appears commands rarely observation continue long time command observed 
sufficient observe individual predetermined period time predetermined number log entries assess knowledge extra effort required determine skill level finite observation sample disambiguate effects observation learning 
command usage turn discussion commands 
descriptive view 
salient characteristics recorded data relative inequality type command 
example shown command type usage file commands various commands file word main menu nearly commands various help commands account commands logged 
command type file edit format view tools table insert window help command type usage percent 
command type usage table lists frequently occurring word commands sequenced frequency occurrence percentage occurrence cumulative percent usage commands point sequence 
command names preceded main menu type open command file menu 
commands account commands account chart presents command usage data frequently word commands 
horizontal axis represents commands names commands table 
command usage indicated percent line relating logarithmic scale left margin chart 
note command usage expressed percent varies orders magnitude 
plotted closely fits observed data power curve 
exponential curve provides close fit badly values contrast power curve values 
power curve equation describing word command frequency equation contrast exponential distribution reported thomas sam editing commands zipf distribution reported thomas unix domain 
sequence command percent cumulative percent table 
command sequences percentages line formed light colored triangles chart plots cumulative percent data axis right margin chart 
mentioned relatively commands account bulk commands 
command usage percent cumulative percent command sequence occurrence 
command percent 
percent view data turn specific question answered provide learning guidance users software applications 
want know specific command log length data confident drawing inferences user knowledge 
particular interested situation data user particular cumulative percent command 
data need order distinguish case user know command case individual knows command simply encountered opportunity 
data sample size contain better representation frequently occurring commands rarely occurring ones quantify intuition applying notion confidence interval described 
turns quite certain user know rarely command impractical details available linton 
owl quite sure recommendations respect gaps user knowledge may suggest user learn commands know making recommendations boundaries user knowledge 
empirical evaluation determine acceptable error rate 
note passing spelling checkers quite useful mistakenly call correctly spelled words attention 
individual models expertise illustrate recommendation generation algorithm analysis 
ease illustration limited analysis commands appearing word edit sub menu 
owl performs similar analysis command 
tables presents data users 
table column contains data user row contains data command edit commands omitted 
cell contains count number times individual command 
columns sorted person commands left person fewest right 
similarly rows sorted frequently command top row frequently command bottom row 
consequently cells largest values upper left corner smallest values lower right corner 
table shaded contours numbers visible largest numbers darkest shading smallest numbers shading shade indicates order magnitude 
inspection table reveals users tend acquire edit commands specific sequence know fewer commands know subset commands knowledgeable peers 
users acquired commands idiosyncratic order data sort 
acquired commands manner strongly reflected job tasks writing tasks subgroups users shared common commands 
readers may observe knowledgeable users replace commands learned early powerful commands keep adding new commands repertoire 
sequence command acquisition corresponds commands frequency 
point necessarily surprise 
peaks valleys data sorted fairly rough edge commands transition rarely 
peaks valleys rough edges may represent periods repetitive tasks lack data respectively may represent command powerful substitute ignorance command task sequence commands uses command 
words peaks valleys rough edges may represent opportunities learn effective software 
second table data smoothed 
observed value cell replaced expected value value cell method row column grand totals table howell 
case software row effect relative utility command users column effect usage related commands individual user 
expected value usage command individual manner consistent usage related commands consistent peers usage command 
expected values new kind expert model unique individual moment time expected value cell reflects individual related commands peers command 
reason differences observed expected values actual expert model explanations individual tasks preferences experiences hardware purpose making recommendation assume difference indicates lack knowledge skill 
third table cell contains symbols 
symbols indicators learning opportunities recommendation generation process 
indicators data combined domain curriculum knowledge result recommendations learning owl tips 
symbols underscore blank new alt new darkest shading followed alt underscore blank shading 
observed count command command expected count command command instruction count command command new new new alt alt alt alt alt new new new alt alt alt new alt new new new new new new new new new new new new new new alt alt new new new new new new alt new new new alt new new new 
computing tutorial intervention command expected value zero need learned ignored indicator blank 
command expected value individual command individual probably find useful learn indicator new command usage normal range expected value ignored 
example normal range determined empirically limit amount recommended learning average new commands command alt command 
similar process generating actual recommendations 
indicator command normal range expected value underscore 
command expected may component tasks unknown potentially valuable user indicator command expected may indicate ignorance powerful ways accomplishing tasks indicator alt notice expected values sense average owl urge learner skills average user owl urges learner pooled knowledge users 
knowledgeable individual learn pooled knowledge group 
example new recommendations 
indicators current log data saw earlier may data user log determine confidence command known user 
example take user indicators new alt commands respectively 
user logged commands 
calculate confidence intervals method referred earlier find usage confidence interval expected value confidence interval owl justified making suggestion teaching alternatives 
confidence intervals include zero value means lack observed necessarily signal lack knowledge part learner owl recommendation user learn commands manner user familiar 
owl currently recomputes recommendations monthly 
average user logs commands month 
intention new sets recommendations frequently possible new set tips significantly different previous collecting sufficient data observe changes individuals group software 
way automate process recompute individual tips daily available user changed significantly 
review owl compares actual expected values develop instructional indicators command person month 
expected values appear user behaving exactly peers taken aggregate 
significant differences user actual expected values taken instructional indicators indicators user know peers find sufficiently valuable utilize certain frequency 
owl uses command name frequency occurrence instructional indicator learning recommendations presents user form tips 
decision commands learn learn left user 
owl timing right users felt desire learn done tips 
sub section describes tip presenter skill meter 
providing feedback users mentioned new sets recommendations known tips computed monthly 
new tips computed send individual email message telling new set tips 
tip file individual resides server 
person decides want learn word click tip button owl toolbar tip viewer retrieves individual tip file containing top tips person server displays 
tip viewer presents tip name brief description relative ranking top tips 
users click tip learn command 
today instruction elementary clicking tip simply brings appropriate word help page 
field testing owl tip mechanism users months october scaling project goal having users remainder research 

owl tip viewer owl tips focus user learn 
just way saying owl tips focus user ignorance likes ignorance brought attention 
designed tool intended users complete view state knowledge skill meter 
anderson lesgold skill meter show users know don know 
owl skill meter show users know compared pooled knowledge demographic group users selects users particular job title particular department holding degree discussion file edit view insert format tools table window help skill meter compare owl users advanced average ok 
skill meter section discuss issues common thread comparing expertise knowledge appears owl recommendations familiar concepts expertise 
start expertise owl vs task expertise continue owl vs performance support systems owl vs microsoft office assistant close section considerations possible influences command frequency 
expertise owl vs traditional task expertise compare owl definition expertise expertise consists knowing number commands conventional ai definition koedinger anderson expertise consists knowing plans attaining goal plans ultimately decompose sequence actions 
example plan achieve goal opening file consist actions menu select file open list select path list select filetype list select filename button click open example knowledge plan indicated owl view command 
case text editing plans indicated single command 
furthermore editing plan common writing goals 
example general goal revising paragraph carried vast number editing goals sequence 
instructional situations example initial states paragraph student told specific set commands accomplish revision problem tractable 
instruction goal opening file located help command owl need point user instruction 
owl provide instruction moment moment context microsoft office assistant discussed necessary recognize user plans carried 
agree goals moving text achieved issuing sequence commands followed 
command part plan achieving goal user know plan lack knowledge may appear usage command 
reason owl recognize sequences commands find misconceptions 
example sequence copy cut paste required early editors replaced cut paste 
owl recognize misconception teach revised task plan action sequence 
similarly applications open new blank document longer necessary close blank document manually opening existing document 
reasons explore automated means detecting recommending meaningful sequences commands 
owl vs performance support performance support system helps user current job task 
assumes task sufficiently wellunderstood user define task find performance support system user system common name task organization devoted resources creating performance support materials task task changed time performance support materials created 
owl provide moment moment performance support gradual increase skill 
owl ambitious performance support focused software tasks job tasks 
organization gets owl performance support get return may higher 
owl requires little front task analysis nearly instructional design free 
necessary ensure pointers appropriate places help system command owl recommends 
added needed 
owl advice evolves users learn application 
conventional performance support requires knowledge transmitted learner exist 
owl transmits knowledge user user knowledge commands useful acquired organization 
soon finds function software useful owl captures knowledge 
pooled knowledge individuals greater knowledge individual knowledgeable 
individual ready learn useful function software current state knowledge owl computes transmits 
performance support systems obsolete changes organizational context individuals perform new tasks apply new skills 
contrast owl evolves second way automatically adapts changes organizational context users software different ways owl recommendations change 
owl vs microsoft office assistant scene typically comes mind discussing automated instruction software users goes user inefficiently deleting words deleting character time 
instructional system observes inefficient action suggests individual command deleting word time 
constructing system capable carrying scenario requires finding building useful logical advance observing user inferring plan real time 
current state art approach illustrated microsoft office assistant 
contrast owl simply observes user deletes word time peers suggests learn command find useful 
knowledge base office assistant required develop horvitz owl acquires knowledge base automatically 
office assistant knowledge base general static owl organization specific evolves knowledge users evolves 
user creates outline hand office assistant suggest view outline determine logical equivalence activities 
contrast owl suggest user try view outline peers useful 
office assistant provides instruction context user doing owl provides instruction context user learning 
possible influences command frequency may appear valid reasons people commands frequency 
reason differences differences tasks performing examples task related commands include 
reason different individual histories software divergent interaction models word users emacs experience may copy cut paste simpler cut paste 
third reason stylistic differences individual preferences users pay attention formatting text accept default settings 
observation users focused getting jobs done 
method accomplishing task 
methods usually choose appropriate appropriate depends immediate circumstances 
example person familiar tabs create table tabs person knows table command person knows tab table create table choosing effective method depending circumstances 
history preferences help explain user choice commands observations reveal users know ways accomplishing task believe perform unconscious cost benefit analysis generally choose appropriate method circumstances 
believe recommending commands peers useful empower individuals effective choices selection editing methods regardless task history preference 
concluding remarks owl recommender system means helping community practice pool share expertise community set people desire skilled users application software 
owl individualized learning recommendations comparison individual user skills pooled knowledge peers 
expertise evolves users continuously better ways accomplish tasks respond changes software changes environment 
owl provides continuous performance improvement complex job tasks application software 
system expert models serve organization memory expertise 
analysis user log data revealed command usage frequencies word text editor follow power law 
result power law usage careful required distinguish apparent user ignorance learning effects due solely amount information logged 
method proposed effects account 
discovered users tend acquire commands sequence 
combining power law usage acquisition sequence determine expected usage command individual individualized expert model take large deviations model indicators ineffective software learning opportunities 
described methods planned implemented communicating learning opportunities owl users 
anderson corbett hoffman 

general principles intelligent tutoring architecture 
eds 
cognitive approaches automated instruction nj erlbaum 
geier hyland linton schaefer 
embedded training complex information systems 
eds 
intelligent tutoring systems th international conference proceedings heidelberg springer verlag 
welch 

design collaborative learnability 
eds 
proceedings cscl international conference computer support collaborative learning nj erlbaum 


science sleeper information age blow away 
new october 
horvitz 

invited talk 
user modeling conference june sardinia italy 
howell 


statistical methods psychology boston duxbury press 
kay thomas 

studying long term system computers user training learning 
communications acm 
koedinger anderson 

reifying implicit planning geometry guidelines model intelligent tutoring system design 
eds 
computers cognitive tools hillsdale nj erlbaum 
landauer 
trouble computers usefulness usability productivity cambridge ma mit press 
lave wenger 

situated learning legitimate peripheral participation cambridge cambridge university press 
lesgold katz 
rao 

possibilities assessment computer apprenticeship environments 
eds 
cognitive approaches automated instruction nj erlbaum 
linton 

coach application software 
cbt directions march 
linton 

promoting organization wide learning application software 
acm bulletin 
linton joy charron 

owl recommender system organization wide learning 
mitre technical report mtr usa mitre 
mccalla greer kumar meagher collins parkinson 

peer help system workplace training 
du boulay mizoguchi eds 
artificial intelligence education knowledge media learning systems proceedings ai ed amsterdam ios press 
patton 

qualitative evaluation research methods nd ed london sage 
resnick varian 

special section recommender systems 
communications acm 


fifth discipline art practice learning organization new york currency doubleday 
thomas 

long term exploration text editor 
unpublished doctoral dissertation australia university western australia 
thomas 

long term human computer interaction exploratory perspective springer verlag new york 


elementary statistics nd ed menlo park ca benjamin cummings 

