architecture behavioral locomotion barry reich dissertation computer information science submitted department computer information science partial fulfillment requirements degree doctor philosophy 
dr norman badler dissertation supervisor dr mark steedman graduate group chairperson fl copyright barry reich acknowledgments parents brothers sister friends encouragement years 
possible support 
acknowledge ken noble help producing videos slides various presentations ko walking code increased realism 
group particularly chris geib mike moore drs 
norman badler bonnie webber guidance criticism project motivated large portion 
wish thesis committee drs 
richard paul benjamin kuipers dimitris metaxas mark steedman bonnie webber constructive criticism greatly improved quality dissertation 
harold sun help debugging locomotion engine testing locomotion control system discussions insights concerning theoretical formalism 
brett douville discussions suggestions help editing proposal document 
becket providing excellent environment countless hours help kinds years 
especially advisor dr norman badler years advice discussions encouragement opportunities motivation 
research partially supported aro daah darpa daah darpa darpa franklin institute daah japan nsf iri onr university houston air force depth hughes missile systems air force bbn 
iii architecture behavioral locomotion barry reich norman badler complete architecture behavioral control locomotion real simulated agents provide design methodology building locomotion control systems embody architecture 
low level locomotion engine controls agent actions directly intermediate level reactive behaviors attraction avoidance 
high level state machines schedule control reactive behaviors allowing intelligent decision processes agent model provides mechanism varying locomotion agent state personality attributes 
addition providing specifications locomotion engine address problem selecting organizing appropriate set behaviors 
selection criteria method partitioning behaviors aid implementation 
discuss challenges specific human locomotion explain overcome system design process 
introduce notion anticipation field behavioral control extensively system produce agents actions realistic 
iv contents acknowledgments iii iv list figures ix background behavioral control 
thesis overview motivation biology ethology computer graphics entertainment robotics history prior behavioral control advent behavioral control emergent behavior plans advice survey control strategies purely reactive strategies behavior strategies planner strategies hybrid strategies move layered architectures statement minimizing active behavior set anticipation scope ii architecture system requirements design methodology creating locomotion engine choosing behaviors selection criteria additional properties partitioning behaviors instantaneous behaviors memory reliant behaviors creating agent model system parameters attributes establishing correspondence degrees calculating results building state machine extensibility vi design summary iii concrete example human locomotion control system development environment locomotion engine simulation sense control act loop perception control action basic sensors object location line proximity control behaviors attract avoid behaviors level reflexive physics behaviors level goal behaviors state machines turning path chasing combining state machines agent model issues limited perception anticipation vii locomotion engine terrain awareness attraction avoidance planner results description adherence system requirements examples performance analysis iv discussion research summary appendices additional behaviors attraction deep spaces field view avoidance groups animals group 
group research bibliography viii list figures architecture behavior function template partitioning set behaviors partitioning set instantaneous behaviors memory reliant behavior template agent model sample agent model entries sample parameter value calculations initial conditions sample parameter value calculations results locomotion control system flow diagram behavioral simulation system central simulation loop calculating set possible foot positions sensor function template mathematics object sensor asymmetry caused bounding cylinders mathematics location sensor mathematics line sensor undetected wall mathematics proximity sensor proximity sensor simulated object control behavior function template object sensor attract control behavior combine form attraction behavior draws agent goal ix walking past goal orbital approach proximity sensor avoid control behavior combine form avoidance behavior 
attraction behavior draws agent goal avoidance behavior steers obstacles 
agents colliding behavior function template behavioral state machine function agent objects inertia behavior function slow agent fast agent attraction behavioral state machine sample pat net shown graphically turning behavioral state machine turning face goal vs turning path behavioral state machine initial conditions path example environment obstacle map expansion expanded obstacle map wave propagation weight map path goal waypoints waypoints drawn original obstacle map clarity necessary waypoints necessary waypoints drawn original obstacle map clarity agent path chasing behavioral state machine bsm preconditions locomotion control machine flow diagram agent model affects agent agent exhibiting drunk behavior agent model inertia behavior function agent enforcing limited perception policy environment agent view attraction attraction wall avoidance path agent arriving goal sawtooth path due potential field discontinuities better results anticipating state world agent taken step attraction avoidance terrain awareness behaviors combine draw agents goal upper left corner close view attract behavior terrain awareness behavior guide agent goal lower agent attracted upper agent traditional attraction behavior mathematics predictive attraction behavior attempt predictive attraction initial conditions predicting intersection second attempt predictive attraction visual comparison attraction behaviors results short wide avoidance sensor results long narrow avoidance sensor mathematics predictive avoidance behavior comparison traditional predictive avoidance behaviors start simulation middle simulation simulation locomotion control system locomotion control machine architecture interface user interface example sensor time complexity analysis control behavior time complexity analysis xi behavior time complexity analysis simulation time complexity analysis depth sensor bit range sensor range sensor weighting functions agent maneuvering maze depth sensor navigation attraction avoidance field view avoidance combine guide agent goal seen hostile agent hiding bottom xii part background chapter time delicate care balances correct 
frank herbert increase robots simulated agents motivated search better control strategies 
autonomous robots tasks factory automation exploration dangerous inaccessible environments 
autonomous simulated agents applications training simulations movie special effects video games 
controlling motion robots animating motion simulated agents challenging 
scripting motion animated agents difficult time consuming especially multiple agent simulations complex interactions agents 
mid trend away traditional ai control systems tasks automatic systems produce agents appear intelligent decisions minimal user interaction 
behavioral control established convenient way model generate interesting behavior little user input 
aim provide complete agent architecture employs behavioral control techniques locomotion design methodology system construction 
resulting locomotion control systems provide reactive robust control real simulated agents place place interacting environment 
thesis addresses problems 
providing design methodology complete locomotion control system 
selecting organizing appropriate set behaviors 
approaching challenges specific human locomotion 
anticipation behavioral control sloman poli observe early ai concerned architectural sub components vision language planning learning complete agent architectures 
interest complete architectures physical robots simulated agents grown exemplified bates georgeff hayes roth 
lead complete agent architecture behavioral locomotion 
behavioral control defined discussed section mathematical models behaviors attraction avoidance observed animals 
design methodology chapter chapter principles choosing appropriate set behaviors partitioning behaviors subsets 
behaviors classified architectural level best implemented behavioral level higher level 
behavioral level behaviors partitioned subsets reflexive instinctive behaviors typically goal behaviors typically attractions 
section explains limit number goal behaviors active time justifies restriction 
choosing effective set behaviors system depends primarily type agent controls 
different types agents require different types locomotion 
reynolds birds require general behaviors collision avoidance behaviors specific flocking matching velocity neighboring birds keeping center flock :10.1.1.48.7069:10.1.1.48.7069
wilhelms skinner jet motors propel geometric objects constrained behaviors may choose 
general preconceptions behavior flying tetrahedra difficult appear realistic unrealistic 
human agents require behaviors specific walking running rolling robots swimming fish flying birds 
locomotion engine advocate fully capable handling specific challenges posed human locomotion 
discussion relate domain simulated human locomotion ideas independent particular domain 
architecture supports general locomotion restrictions discussed section 
notion anticipation noticeably lacking field behavioral control 
regardless domain systems incorporate attraction avoidance models sense react immediate world little concern 
particularly unrealistic simulating human agents think ahead navigating 
introduce anticipation levels architecture 
locomotion control system embodying architecture controls locomotion levels 
lowest level locomotion engine controls agent locomotion directly 
set reactive behaviors associated agent final choices agent place feet step agent fly agent roll set reactive behaviors constitutes intermediate level 
reactive behaviors active inactive locomotion engine ignores inactive 
highest architectural level state machine implementation behavioral schemata controls agent locomotion indirectly activating deactivating parameterizing reactive behaviors state decision process 
addition main architectural levels agent model configure statemachine contribute parameterization behaviors locomotion engine 
resulting locomotion style reflects agent personality physical mental state 
just cremer state personality attributes velocity patience aggression parameterize virtual drivers giving different vehicles different observable behavioral characteristics attributes velocity inertia awareness caution parameterize agents resulting varied observed behavior 
locomotion engine becket behavioral simulation system communicates directly system calculates joint angles simulate walking choosing footstep agent set behaviors associated agent 
behaviors variations attraction avoidance parameterized attributes awareness curiosity fatigue 
agent observed behavior result choice behaviors parameters results choices higher levels 
limits low level reactive behaviors achieve 
desired complexity agent behavior increases limit higher level locomotion reasoning introduced 
locomotion reasoning determines characteristics agent locomotion types attractions choice parameters achieve goal 
effective implementation relatively complex behaviors requires multi level approach high level organizational structures atop low level locomotion engine 
state machine level provides high level organizational structure supports locomotion reasoning 
decisions necessary complex behaviors path section chasing section behaviors parameters change time 
addition changing behaviors parameters state machine structure allows evaluate arbitrary conditions passed arguments increasing system flexibility 
conditions achieved state machine takes appropriate action 
conditions allow agent interrupt current plan unexpected situation occurs interest enters agent field view 
appropriate message passed user calling system allowing replan potentially advantage opportunity 
design goals create cognitive research tool system testbed cognitive theories experimental algorithms heuristics 
emphasized modularity extensibility 
behaviors example hard wired added removed modified ease 
possible test new behaviors new implementations existing behaviors adding swapping appropriate modules 
true parts system state machines agent model 
path generation mechanism part path behavior section extrapolation exploration algorithm part chasing behavior section set agent attributes system parameters part agent model sections may modified removed replaced sake experimentation 
behavioral control 
behavioral control established fields robotics computer animation viable method controlling real simulated autonomous agents 
individual behaviors connect sensors effectors combine interact producing complex observed behavior desired properties brooks notion emergent behavior 
behavior agents reliable classical artificial intelligence agents adapting changing environment 
require computation little memory minimal resources 
behavioral control general term behavioral animation includes real agents robots simulated animated agents 
control strategy real simulated agents usually applied locomotion 
path planning explicit instructions drive agent locomotion agent control apparent behavioral complexity result interaction simple behaviors complex changing environment 
behavior section function mapping agent state environment stress state 
agent learns state environment network simulated sensors 
information gathered sensors path terrain computed incrementally allowing agent react unexpected events moving obstacles changing terrain moving goal effects limited perception 
simulated sensors detect environmental features terrain type obstacle agent locations 
locomotion engine section analyzes combined sensory input decides agent move 
decision step agent takes support dynamic environment 
brooks explains behavioral control central ideas relate robotics situatedness robots situated world deal descriptions environment directly influences behavior system 
embodiment robots bodies experience world directly actions part dynamic world actions immediate feedback robots sensations 
ideas apply equally simulated agents situated simulated world 
agents perceive world sensors mimic actions real sensors reporting information similar circumstances 
furthermore agents affect world way 
actions part dynamic simulated world 
see discussions chapters justification 
thesis overview thesis consists parts background information presentation architecture design methodology complete examples architecture thorough description parts 
chapter discusses motivations behavioral control techniques variety different fields artificial intelligence robotics 
chapter gives detailed history study locomotion nineteenth century simulations includes survey control strategies 
part background concludes statement 
part architecture presents architecture motivating system requirements chapter detailed design methodology building system chapter 
part concrete example build locomotion control system simulated human agents giving full description part system chapter 
chapter discusses limited perception anticipation important issues achieving realism 
part concludes results including examples system chapter performance analysis chapter 
conclude chapters discussion research summary including scientific contributions suggestions 
chapter motivation endowed interesting realistic behaviors autonomous agents appear intelligent decisions indistinguishable real agent situation 
additionally minimal user interaction process possible controlled system 
wilhelms skinner observe behavioral control conveniently generates interesting locomotion relatively little user input 
behavioral control techniques motivated biology ethology computer graphics entertainment robotics discussed subsequent sections 
biology ethology growing dissatisfaction classical ai control systems led autonomous agent research field biology specifically field ethology ecological psychology 
idea emulating nature enjoys long tradition scientific fields vital behavioral control 
researchers attempt understand mechanisms animals demonstrate successful adaptive behavior simulate utilize behaviors control systems 
robotics example study animals grasp manipulate objects led improved robotic versions tasks 
anderson donath detailed interesting review relevant research field animal behavior 
motivate architectural components low level accept behavioral control ultimate goal 
reflexive behaviors variety basic sensors behaviors state architectural level preconditions complex behaviors examining exhibited advantageous different animals 
system exhibits benefits components 
computer graphics field computer graphics specifically computer simulation motivates behavioral control combination fields right 
robotics researchers wish behavioral control techniques robots simulate robots 
simulations useful initial testing desirable properties ffl cheaper faster construct modify agent 
ffl execution faster 
goal develop control strategy robot simulations may lead better control strategy 
ffl designer limitations hardware speed running simulation time opposed real time 
boulic renault discuss synthetic vision animation approach simulated visual sense navigation synthetic actor 
vision channel information actor environment 
ullman steels explain despite enormous efforts extract general purpose symbolic descriptions visual data visual module expected arrive soon 
advantage simulation ability unavailability general machine perception 
agents embedded simulation supplied high level results perception directly 
behavioral control seen computer simulation domains 
animate analyze human motion create interesting autonomous agents simulators training purposes 
simulation autonomous agents 
simulations military training driving flight simulators 
cremer example working creation autonomous driving behavior interactive driving simulations 
maes discusses software agents proposed mechanism help computer users deal information overload 
possibly strongest motivation multiple agent animations 
multiple agents complex dynamic environments result interaction require careful choreography 
animator may series adjustments looks right 
reynolds explains scripting path large number individual objects traditional computer animation techniques tedious 
complex paths birds follow example doubtful specification error :10.1.1.48.7069
behavioral control obviates tedious time consuming animation technique 
entertainment behavioral control autonomous agents way realm entertainment 
examples include video games simulation rides movies animation theater toys party lines 
maes mentions researcher incorporated autonomous agent text multi user simulation environment muse system 
reynolds created animation called stanley breaking ice modeled flocks birds schools fish behavioral control system 
algorithms applied bats ii stampede lion king 
tu terzopoulos terzopoulos modeled realistic fish behavior producing entertaining short animated movies go fish 

chris crawford noted game designer complains artificial intelligence weakest part game design 
quest better monster ai resulted increasing behavioral control techniques game industry 
robotics robotics behavioral control systems control kinds robot locomotion rolling hopping walking running 
primary motivation autonomy 
goal develop realtime autonomous robots operate general unstructured unconstrained environments 
instances behavioral control successfully achieved goal 
motivation real time autonomous robots includes factory automation navigation retrieval tasks outdoor environments map building 
addition interest autonomous rovers robots surveillance exploration tasks environments inaccessible dangerous humans 
bonasso slack reactive system layered control modeled brooks subsumption architecture explained section find useful unpredictable partially unknown environment 
comparable miller efforts jpl rover combined firby raps gat alfa circuit language :10.1.1.17.9
chapter history locomotion active process moves place place 
locomotion attributes include starting stopping changes speed alterations direction modifications changes slope maneuvering obstacles 
type terrain slope effect energy cost walking 
humans tend minimize metabolic energy required get place walking running depending size speed 
example adults start running meters second children lower speeds 
known father motion pictures pioneered application photography study human animal locomotion 
took photo sequences projected screen device called resulting world illusion moving pictures 
information nice format start www linder com html world wide web 
animal locomotion subject serious study century 
early days computers computer science researchers trying apply observations attempt get simulated animals robots navigate automatically 
applied control strategies behavioral control planner techniques embedded simple layered architectures individual agents groups 
chapter discusses results 
prior behavioral control prior behavioral control researchers particularly field robotics treated problem obstacle avoidance statically 
analyzed environment plan assuming environment change 
best environmental change detected robot replan start operating assumption adams cites cox elfes examples 
previous techniques involved symbolic reasoning attempts construct plan achieve goal logical transformations symbols represent model world 
symbolic reasoning techniques began strips ended chapman proofs intractability general planning problem see discussion section 
abandoned reasons combinatorial expense brittleness replaced behavioral control techniques suffer problems 
advent behavioral control robotics computer animation motivated search automatic methods controlling motion 
describe revolution slow intensely computational sense model plan act architecture robotic systems sri shakey moravec cart current architectures remove model plan part loop replacing simple fast control 
traditional methods increasing willingness sacrifice complete control realism grew increasing popularity behavioral control 
previously computer animation animator responsible scripting agent path 
awarded absolute control locomotion components time consuming repetitive promote thinking locomotion natural qualitative terms 
behavioral control method designing autonomous agents derives ethology scientific study animal behavior 
agents endowed simple behaviors attraction avoidance 
behavioral engine implemented sense control act loop evaluates state environment generates motion certain rules behavior 
scripting agent exact movements user need choose appropriate set behaviors easy task 
system takes care details simulating behaviors agent discovers path environment 
emergent behavior key idea behavioral control systems emergent behavior 
brooks modern notion emergent behavior traced back far herbert pointed late complex observed agent behavior due feedback mechanism interacting complex environment complexity agent control system 
may observer ascribes complexity organism necessarily designer 
emergent behavior popularized braitenberg claimed simple networks produce complex motion observers infer intelligence 
braitenberg described vehicles seemingly intelligent emotional behavior results sensory stimuli passed network nodes eventually driving motors 
emergent behavior result interaction agent dynamic environment 
characterized manifestation global states patterns explicitly programmed result local interactions system components environment 
emergent phenomena definition observed global level depend existence observer :10.1.1.29.5356:10.1.1.29.5356:10.1.1.29.5356
observer attributes emotions intelligence resulting observed behavior 
relevant discussions topic see langton maturana varela steels 
plans advice important ways behavioral control differs planning behavioral control uses plans guide control action 
gat strongly advocate agre plans advice plans communication theory suggests influencing action controlling 
slack navigation templates mobile robot control example plans advice theory 
uses constraints bound robot motions dictating particular trajectory 
way plan adapts robot changing perceptions world 
similar gat atlantis architecture traditional planning system combined reactive control mechanism 
uses results planning guide robot actions control directly 
sequencer uses planner output advice takes consideration sensory information making decisions 
viewed concrete implementation agre chapman plans advice theory 
addition implicit utilization behavioral control plans advice theory explicitly see example path implementation discussed detail section 
survey control strategies autonomous agents simulated real controlled architecture embodying particular control strategy 
survey purely reactive behavior planner hybrid control strategies combine approaches 
excellent detailed discussion see mataric 
purely reactive strategies simplest control strategy conceptually purely reactive implemented set condition action pairs brooks connell agre chapman 
biggest advantage systems speed due minimal computation 
consist set purely reactive rules containing little internal state 
simply sensor readings index set selecting executing corresponding action 
direct coupling sensors actions results fast efficient operation 
number researchers including connell gat demonstrated purely reactive robots various degrees navigational ability 
prominent ground breaking researchers field brooks began publishing papers subsumption architecture mobile robots famous purely reactive control strategies 
brooks argues create artificial intelligence incrementally build capabilities intelligent systems having complete systems step way automatically ensure pieces interfaces valid :10.1.1.12.1680
brooks subsumption architecture layered control system higher level layers subsume roles lower levels suppressing outputs 
general lower levels continue function higher levels added :10.1.1.110.6657
lowest level collision avoidance level 
robots steer objects locally halt emergency situations behavior brooks finds necessary dynamic environment 
level goal oriented attraction allows robots go places 
opponents purely reactive control systems feel limited powerful behavior planner systems 
designer able predict relevant world states sensed corresponding actions relative agent goals 
agent goals defined design time significant limitation 
sufficiently general reactive systems prohibitively complex mataric 
example reactive systems agents internal models case goal achieved fixation 
time goal obstacle obscures agent view goal lost 
behavior chasing section times agent loses sight target implemented effectively purely reactive control system 
step evolution control systems clear 
researchers examined prospect combining reactive deliberative control including arkin georgeff kaelbling payton name 
discuss new direction section 
behavior strategies behavior control systems commonly viewed superset reactive systems 
opposed reactive approach uses condition action pairs behavior systems combinations behaviors 
combinations behaviors yield general powerful framework build control strategy 
behavioral control proven effective control strategy succeeding complex domains symbolic reasoning fails 
particularly domain collision free navigation behavior agents typically reliable classical agents requiring small fraction computational power 
behavioral control fast supporting real time implementations robust allowing wide range domains local incremental decisions allowing dynamic environment 
problems pure behavioral systems lack intelligence decision making capabilities difficult design produce highly non optimal solutions get stuck behavioral local minima cyclical behavioral patterns 
problems forced behavioral control systems evolve layered control systems discussed section way reactive systems evolved 
behavioral control combined deliberative state control resulting improvement operation high level mediation intervention 
planner strategies planner strategies employ centralized world model sensory information verification action generation chatila laumond moravec cho 
biggest difference planner strategies strategies planner uses information world model generate sequence actions complete plan nilsson opposed generation single action footstep 
result planners require large amount information world effective 
planners concert control systems promising results feeling pure planning systems unsuited autonomous agent control pervasive literature beer sterling brooks chapman ginsberg mataric :10.1.1.50.8134
real situations generally completely represented planning inherently combinatorially explosive making systems relying limited models brittle inflexible slow :10.1.1.12.1680
agre chapman observe real situations characteristically complex uncertain immediate requiring ability decide speed short term decision making important life fired point blank rock step pivots unexpectedly milliseconds react 
proving theorems question 
kaelbling stresses need intelligent systems operating complex unpredictable environments reactive robot blindly follows program plan verifying operations having intended effects reactive 
simple tasks carefully engineered domains non reactive behavior acceptable intelligent agents unconstrained domains 
gat agrees pointing unexpected changes environment invalidate stored information lead erroneous actions 
hybrid strategies hybrid architectures compromise purely reactive behavior approaches pure planner approaches 
include combining low level behavioral reactive system high level planner decision making 
low level responsible agent instinctive behavior collision avoidance goal oriented attraction behaviors 
high level introduces intelligence system allowing action selection increased control low level 
hybrid architectures increased popularity arkin payton connell 
successfully overcome limitations exhibited individual strategies discussed previous sections 
move layered architectures common complaints pure behavioral control users control behaviors high level abstraction selecting correcting behavioral parameters difficult hand coding needed laborious process 
limitations reactive behavioral control suggest intelligent behavior requires reactive behavior response stimuli certain amount stored information 
gat notes avoiding internal state tantamount assuming world usefully predicted 
clearly assumption invalid researchers pointed everyday activity routine predictable 
furthermore stored information layout building agent situated necessary non local navigation walking room 
task impossible local instantaneous sensor information places information available indicate direction destination 
state information world model required map prior knowledge layout halls 
added intelligence decision making capabilities achieved combination reactive behavioral control layer layer storing information 
systems decade kind layered control including ahmad cremer firby gat georgeff lansky kaelbling kuipers levitt wilhelms skinner :10.1.1.17.9:10.1.1.17.9
reactive behaviors configuring sense control act loop drive agent lowest level levels various kinds planning decision making structures highest level 
becket argues level approach wilhelms skinner combination high level low level techniques combined intelligent fashion distinguish animation systems 
wide range high level techniques encoding scheduling controlling low level reactive behaviors including programming languages planners hybrid architectures state machines 
gat alfa programming language reactive control mechanisms autonomous mobile robots similar kaelbling rex support subsumption architecture 
firby reactive action packages raps basic building blocks situation driven execution system 
rap completely describes execution task 
contains task goal satisfaction test methods achieve goal different situations :10.1.1.17.9
hide seek project demonstrated usefulness ai planner introducing reasoning behavioral control system :10.1.1.45.7696
motivated addition state machine layer architecture 
hide seek system required complex path chasing behaviors simulated pure behavioral control 
higher level organizational structure required 
lead researchers mataric chose popular state machine paradigm successfully introduced needed intelligence system 
hide seek project combines geib hierarchical planner moore search planner locomotion control system lcs chapter produce fully automatic simulation game hide seek 
system employs layered architecture control player locomotion 
lcs controls locomotion directly 
planner level achieves indirect control sending locomotion requests lcs 
lcs controls schedules coordinates reactive behaviors simulate requested locomotion 
chapter statement problem addresses synthesis control locomotion simulated agents robots 
synthesis includes complete navigation starting point goal decisions contributing agent locomotion choices 
control includes manipulation locomotion parameters affecting resulting observed agent behavior 
interface control system high level easy commands go location go object sufficient generate realistic reactive robust locomotion agent goal 
solution provide specifications locomotion control system combining behavioral control state reasoning agent model parameterize system 
complete layered locomotion control system discussion part system detailed design methodology facilitate construction 
set requirements system adhere design methodologies architectural layer keeping requirements mind 
explain build locomotion engine choose appropriate set behaviors task hand build state machine introduce high level decision making capabilities incorporate agent model parameterize system layers 
majority thesis generalized animal robot discussion motivated addresses issues specific human locomotion 
simulating humans differs simulating robots fish birds objects due unique locomotion 
system addressed differences adequately becket developed behavioral simulation system 
building becket extended system reflect human decision making process accurately retaining ability model animals robots 
sections discuss minimizing active behavior set notion anticipation behavioral control scope 
minimizing active behavior set common objection traditional approach behavioral control implementation requires unreasonable amount weight parameter tweaking 
emergent behavior overwhelmingly difficult control behavioral set large result combinatorial complexity specifying interactions behaviors finding reasonable behavior weights 
researchers pointed problem including brooks chapman maes mataric :10.1.1.18.4669
tried solve problem application learning algorithms 
unfortunately current learning algorithms tend general requiring domain specific knowledge effective particular domain 
solution parsimony 
claim small set avoidance behaviors combined active attraction behavior sufficient achieve realistic locomotion 
competing attraction behaviors cause agent wander back forth goals 
human agent example go post office bank unrealistic agent combine goals behavioral level 
clearly agent attracted weighted average locations 
better solution accurately reflects human decision making process higher level system resolve problem sequence single goal attractions configuring lower level appropriately generate locomotion 
prioritized queue goals active 
opportunity satisfy goal presents priorities changed possibly resulting queue reordering 
anderson donath agree necessary separate mechanism allows control agent behavior actual devices affect reflexive behavior 
assign task scheduling controlling low level behaviors high level statemachine 
minimize set active behaviors implicitly encoding behavioral hierarchy state machine reducing problem behavior interaction behavior choice 
anticipation mataric discusses implications homogeneous agents embodied similar abilities goal structures 
identical similar agents innate knowledge behavior implicitly explicitly predictable 
example attributed brooks driving lane road encounter oncoming car confident right behavior stay lane car follow strategy 
car elephant approaching clearly right behavior way predicting elephant 
humans understand way humans behave tend understanding consciously unconsciously locomotion choices 
humans anticipate 
significant contribution introduce notion anticipation field behavioral control 
scope limit scope allowing learning planning interagent communication 
approach differs example agents neural networks learn skills 
discussed section learning techniques behavioral weighting powerful domain 
solve problem behavioral weighting minimizing number active behaviors time 
architecture include planner supports high level interface 
discussed section hide seek project demonstrated capability 
discuss implementation terrain awareness behavior section attempt build map environment 
agents goal oriented interested getting 
system activates guides agent goal deactivates information retained activation 
choice attempt support dynamic environment including changing terrain 
mapping see elfes kuipers mataric miller slack 
brogan hodgins includes explicit communication message passing 
explicit interagent communication 
information acquired simulated sensors probe environment case computerized agents filtered limit agent perception real agent similar situation able sense section 
derives ethological concept stigmergic communication exhibited animals insects exchange information indirectly sensing external state 
architecture designed primarily support unaided discrete legged locomotion 
unaided mean attempted support locomotion skiing 
discrete mean tried model flying flying birds cycle flapping discrete unit 
legged mean attempted model swimming example 
locomotion types may simulated modified versions system leave 
existing system claims produce provably accurate realistic animal behavior indistinguishable real animal behavior system near claim 
system exception accuracy left designer 
goal provide layered architecture facilitates realism accuracy versatility modularity providing designer tools necessary model wide variety behaviors architectural structure design methodology suited experimentation quick intuitive adjustments 
part ii architecture chapter system requirements complete agent architecture behavioral locomotion design methodology constructing 
chapter presenting system requirements motivated design 
system aware fault tolerant purposeful dynamic flexible realistic easy modular robust efficient opportunistic extensible parameterizable aware agent aware environment 
achieving sort awareness easy problem solve typically network simulated real sensors 
polled sensors sense environment report results 
greatest challenge choose set sensors best reflects real agent sensory capabilities set provides robot useful information appropriate assigned tasks problem single clear solution 
dynamic agent able cope changing environment timely fashion 
subtly different achieving environmental awareness 
support dynamic environment agent remain aware environment times controlling architecture involved intense computation 
dangerous invoke timeconsuming systems planners vision systems providing mechanism awareness time 
example imagine chicken crossing road 
suddenly unexpectedly car turns corner heads chicken 
chicken aware surroundings able speed get side hit locomotion control system involved intense computation lucky 
clearly important chicken remain aware surroundings pondering 
problem supporting dynamic environment maintained awareness solved ways 
establish limit amount computation allowed phase loop assuming behavioral control implementation 
tighter loop decreases time successive environmental samples 
second solution parallelize system computationally intensive processes may performed parallel 
agent continues interact environment remains aware world 
easy major motivations behavioral control provide way generate reasonable animation robot control little user input 
motivation architectures behavioral control systems reduce user burden insulating system details 
architectures easy user inputs request agent operate autonomously 
animator operator choose system involving constant intervention doing hand easier 
systems versatile providing user options variety observed behaviors options hindrance 
default values provided 
furthermore request user system provide detailed information occurring internally facilitate generating desired results 
systems perfectly time 
efficient want system run quickly efficiently 
advocate simplicity stage design view shared agre chapman brooks :10.1.1.12.1680
algorithms constant time possible require minimal computation support real time implementation 
extensible system extensible level 
methods established adding system module take account effect new part existing system 
sufficient allow addition new behavior example putting careful thought interact existing set behaviors 
flexible architecture support wide variety behaviors possible 
trend maximizing flexibility combine control strategies hybrid architecture layer architecture employing form decision making atop low level reactive behavioral layer 
fault tolerant real world uncertainty 
actions fail produce desired effects unexpected events occur robotic sensor data noisy incomplete imprecise 
robot acting real world simulated agent acting simulated world anticipate problems may arise plan 
demonstrated firby known cognizant failure flexible plans discussed researchers including agre chapman gat slack :10.1.1.17.9
gat obtaining reliable sensor data problems mobile robot navigation 
problem resolved applying notion cognizant failure typically high level reasoning process 
problem solved technique getting 
agent stopped combination obstacles turn away obstacles proceed 
problem anticipated system detect situation resolve 
agent halt wander circle getting caught local minimum 
gat slack note choice turn right left avoid obstacles non trivial 
modular times unavailability certain parts system 
example computer graphics vision simulated ray casting buffering algorithms combined database queries lack sufficiently powerful efficient image processing techniques 
claim simplifications lose generality take modular approach system design replacements available plugged 
robotics applications sensors replaced better ones available 
kaelbling strongly advocates modularity pointing system easy implement understand 
opportunistic agent environment may single goal may multiple goals 
discussed section limit size active goal set time acknowledge possibility multiple goals 
opportunistic system maintains single goal considering reacts advantageous circumstances arise possibly switching goal 
agre chapman brooks webber badler advocate opportunistic agents :10.1.1.12.1680
imagine simulated elephant search bag 
part search pattern walk hallway 
goals walk hallway find bag 
system level goal active system takes elephant hallway 
imagine bag way 
opportunistic system mechanism interrupting elephant walked past take advantage situation immediately non opportunistic system wait elephant achieved current goal 
parameterizable design goals simplicity control agent locomotion style sacrificed 
system designer system parameterizable reasonably possible 
varying parameters result variable perceived agent behavior making possible simulate state personality attributes 
example imagine elephant walking field 
system providing single locomotion style limited uninteresting 
elephant walk look 
parameterized system providing access parameters locomotion speed agent inertia allow interesting varied behavior 
rushed elephant walk faster elephant drink local bar stagger result lowered inertia 
purposeful brooks creature world purpose :10.1.1.12.1680:10.1.1.12.1680
agent goal 
goal may survival oriented specific desired location foraging may concrete walking specific location agent object 
case agent locomotion motivated wander 
realistic agent exhibit correct observed behavior notion perceived realism correctness 
appear real human animal similar situation 
requirement applies gamut behaviors ranging penetration subtle foot placement 
obvious observer wrong agent walks wall 
physical simulation human walk incorrect small amount resulting animation look wrong observer spent entire life passively noticing humans walk 
people attuned subtleties human appearance motion demanding graphical representations human figures 
situations equally damaging final animation 
goal achieving realism enforce policy limiting agent perception section introduce notion anticipation section system 
limited perception prevents agent sensors potentially omniscient simulated environment reacting stimuli aware 
attraction object agent see reasonable attraction object hidden building 
anticipation extends system traditional approach reacting world moment sensed novel approach reacting state world predicted point 
robust nearly modern systems include robustness system requirement 
robust system agent behavior maintained despite minor changes environment 
furthermore agent behavior collapse moved completely new environment 
properly designed properly built system allow wide variety interesting environments 
careful consider requirements designing locomotion control architecture 
ready architecture design methodology 
chapter design methodology state machine behaviors locomotion engine agent model architecture chapter presents formal description architectural design methodology 
goal build behavior locomotion control system adheres system requirements laid chapter 
choice behavioral control advantage speed addressing system efficiency requirement 
illustrates architecture 
sections design methodologies locomotion engine behaviors state machine agent model 
lowest level locomotion engine acts liaison system environment controlling agent locomotion directly active behaviors insulating user system details 
highest level state machine capable discrete decision process responsible scheduling controlling set behaviors controlling agent locomotion indirectly 
adding agent model architecture contribute statemachine configuration behaviors locomotion engine parameterization allows locomotion style reflecting agent physical state personality 
creating locomotion engine state machine behaviors locomotion engine agent model effectively embodiment sense control act loop locomotion engine responsible controlling agent locomotion agent set active behaviors 
context model notion behavior function maps state world stress state 
specifically refer instantaneous behavior described section 
world state stress behavior function template define operation world mapping current world state new world state particular action occured 
case legged locomotion agent takes discrete step 
case action continuous flying bird rolling robot action discretized usually choosing small fixed time increment 
agent rolls flies amount time chosen velocity vector 
case choose small number operations corresponding actions consider agent time increment 
locomotion engine evaluates operations sense phase 
control phase selects corresponding stressful new world state applies selected operation action phase 
formal description locomotion engine central loop applies single agent 
current state world set operations world set behavior functions associated agent world wish calculate set possible states world associated stresses world state time operations fo behavior functions fb world states time ff stresses fs mn total stresses ft 
calculate set world states applying set operations current world state theta calculate set stresses applying set behavior functions set world states theta ij calculate set total stresses world state summing subset stresses associated state ij choose world state minimal total stress corresponding operation min achieve chosen world state apply operation current world state 
locomotion engine sense phase simply application behavior functions 
remaining calculations including choosing operation apply control phase application chosen operation occurs action phase 
choosing behaviors state machine behaviors locomotion engine agent model important step constructing type system selecting set behavioral competences 
set determines agent locomotion repertoire contributes design decisions remainder system 
address issue choose appropriate set behaviors including conditions selection properties behaviors enjoy 
discussion motivated mataric :10.1.1.29.5356:10.1.1.29.5356
selection criteria adopt mataric selection criteria postulate domain set behaviors basic required generating behaviors minimal set agent needs reach goal repertoire 
essentially choose set behaviors form basis mathematical sense universe agent responses 
behavior necessary complete set sufficient task hand 
necessity behavior choose particular domain necessary domain 
exist goal achieved basic behaviors combinations 
basic behavior reduced combination behaviors 
sufficiency entire set behaviors choose particular domain sufficient domain 
desired response expressible combination basic behaviors behaviors necessary 
additional properties addition necessity sufficiency propose additional properties behavior possess locality behavior obey principle limited perception discussed section 
simply put simulated agent access information unavailable real agent identical situation 
robustness reasonable conditions behavior induce intended results regardless changes environment 
agent moved environment exhibit similar observed behavior 
scalability behavior robust respect environment size 
simplicity implementation simple possible accurately simulating behavior 
complex behaviors difficult write debug apply 
partitioning behaviors discussed section approaches building control systems prevail traditional planner approaches purely reactive behavioral approaches combinations 
cases state decision process replaces combined planner 
advocate combined layered approach allowing reactive state control 
partition set behaviors subsets referring behaviors require stored information memoryless behaviors instantaneous behaviors consistent gat notion reactive behaviors continuously react environment require memory memory reliant behaviors 
types behaviors require different implementations provided architecture 
implement instantaneous behaviors combination locomotion engine behavior layers memory reliant behaviors state machine layer 
determine way behavior appropriately implemented system designer simply decide behavior requires memory 
behaviors instantaneous memory reliant partitioning set behaviors instantaneous behaviors instantaneous behavior system designer provide behavior function maps instantaneous current world state measure stress 
locomotion engine applies functions sense phase 
partition set instantaneous behaviors subsets level level behaviors 
behaviors instantaneous memory reliant reflexive goal partitioning set instantaneous behaviors level reflexive physics behaviors level behaviors named brooks subsumption architecture level :10.1.1.12.1680
set instinctive reflexes guarantee survival generally collision avoidance exhibiting fixed behavioral pattern response stimuli 
level behaviors active agent inhibited overridden entirely higher levels state machine agent model 
add physics behaviors set 
physics behaviors subset implement agent physical properties inertia affect perceived realism agent locomotion 
add level active affected higher levels 
level goal behaviors level behaviors named brooks subsumption architecture level 
set goal behaviors generally variations attraction allow agent go places 
previously discussed section novel approach goal behaviors allow active time 
agent walk bank post office example choose goals time combine average 
relegate goal arbitration opportunistic responses state machine level 
memory reliant behaviors memory reliant behaviors require mechanisms storing local information maintaining state 
choose state machine paradigm natural way implement behavior discrete decision processes 
chasing behavior example described detail section 
chasing alternates states attraction target visible attraction target known location occluded 
location attraction state requires remembering target seen observed velocity 
memory reliant behavior designer provide set preconditions applicability conditions set interruption conditions set termination conditions behavior state machine bsm behavior 
behavior state machine preconditions interruption conditions termination conditions memory reliant behavior template locomotion control system lcs executes bsm preconditions achieved 
set empty achieved vacuously 
sole precondition chasing system target visible agent 
agent know search target behavior path appropriate situation 
execution time set interruption conditions set termination conditions achieved lcs halts bsm 
case lcs chooses executes new bsm preconditions 
case lcs cleans exits 
interruption termination conditions required add system flexibility 
set arbitrarily complex expressions passed system optional parameter 
example interruption condition situation agent priorities changed newly acquired information 
condition arises appropriate agent change current behavior drastic change termination necessary 
seeker game hide seek chasing agent discover agent suddenly better target closer 
seeker target observed arriving safe home location chasing possible termination condition halt unnecessary chasing allow calling user system new plan 
bsm schedules controls set level goal behaviors simulate memory reliant behavior simulates memory form local variables 
information provided build single state machine combines behaviors activates deactivates instantaneous behaviors 
creating agent model state machine behaviors locomotion engine agent model behavioral control system composed behaviors state machines sufficient generating locomotion 
locomotion uninteresting 
mataric groups robots identical software behave differently due slightly varied physical properties 
case identical physical simulated agents needed differentiate agents 
aim design system includes agent model including state personality attributes user control 
agent model agents undesirable tendency look approaching challenge variation 
addition agent model architecture allows effects agent state personality 
part architecture uses agent model parameterization 
way able encode visual impression personality advocated badler perlin 
illustrates agent model 
system designer responsible choosing set system parameters set model attributes establishing correspondence sets 
user required choose degrees attributes affect system 
system calculates parameter values established correspondence chosen degrees adjust various aspects agent locomotion 
system parameters step designing agent model choose set system parameters adjusted observable effect agent locomotion style 
set include parameters affect locomotion physics speed inertia parameters affect cognitive choices state machine 
important restrict set parameters affected agent state personality 
environmental parameters gravity am dm attributes system parameters parameter values degrees system designer user calculated agent model potentially useful inappropriate 
attributes step choose set state personality attributes 
examples include state attributes fatigue personality attributes curiosity caution 
set may vary significantly domain implementation leave selection process design decision 
piece advice offer keep simple 
unnecessary keep set small long user limits choice active attributes reasonably small number 
establishing correspondence system designer final responsibility establish correspondence 
attribute affects parameter different way involves filling matrix illustrated 
matrix entry contains information necessary produce recommended parameter value user defined set degrees section 
describe parts matrix entry sections 
am attributes system parameters parameter values degrees sample agent model entries range values sake simplicity loss generality agent model treats system parameter values range default 
system maps range usually linearly actual implemented range keep mapping transparent agent model level 
range values numbers matrix entry specifies subrange valid parameter values entry 
exact value subrange attribute degree 
consider speed parameter rushed attribute entry example 
reasonable subrange combination slightly rushed agent travel rate agent big rush move rate 
proportional inversely proportional example consider speed parameter attribute entry 
reasonable subrange combination slightly agent travel rate linear mapping proven sufficiently general intuitive 
may interesting experiment non linear mappings 
extremely agent move rate slow 
example differs rushed example fatigue increases value decreases 
case call relationship inversely proportional specify opposed third datum appropriate entry 
combinatorial dominant final part entry specifies arbitrate recommended parameter values corresponding parameter column 
attribute may types effects parameter 
may effect combinatorial effect dominant effect 
entries column marked having effect parameter assigned predefined default value usually 
contributing values combinatorial simply averaged relative contributions having scaled degrees 
entries dominant value highest priority value figures taken entries values ignored 
degrees system parameters consistency choose limit degree range 
value represents degree agent exhibit attribute 
note set include zero 
reserve zero represent inactive attribute system ignores corresponding row entries parameter value calculations 
system presents user set attributes requests corresponding set degrees possibly interface including input boxes slider bars 
extent user exposed system 
remains insulated implementation details 
calculating results algorithm calculating results follows 
calculate recommended value mapping row degree specified range proportionally inversely proportionally 
low high recommended values proportional flag entry set degrees set low recommended values fl mn set high recommended values fh hmn set proportional flags fp mn set degrees fd wish calculate set recommended parameter values set recommended parameter values fr mn 
algorithm calculating ij follows 
ij indicating proportional correspondence ij gamma gamma ij gamma ij delta ij ij indicating inversely proportional correspondence ij gamma gamma ij gamma ij delta ij parameter examine contribution entries 
degree zero inactive set parameter value default value 
active dominant attribute set parameter value recommended value dominant entry highest priority 
set parameter value average active combinatorial attributes 
example see 
row ignored cases degree zero indicates inactive 
calculated follows gamma gamma gamma gamma sample parameter value calculations initial conditions shows recommended parameter values 
active dominant attribute highest priority parameters parameter values assigned respective recommended parameter values row 
note activating attribute affect parameter value sample parameter value calculations results building state machine previous sections methods creating locomotion engine agent model 
outlined methods choosing set behaviors partitioning state machine behaviors locomotion engine agent model subsets level reflexive physics behaviors level goal behaviors memory reliant behaviors 
explain build state machine combine parts implementing selected set behaviors embodying desired locomotion control system 
illustrates design 
system differ omit implementation details describing design abstractly 
start exit set parameters agent model select bsm preconditions call bsm activate level behaviors deactivate level behaviors locomotion control system flow diagram part initialization process lcs adjusts system parameters agent model give resulting locomotion appearance reflects selected state personality attributes 
example agent speed inertia decreased 
parts system include way adjust necessary parameters agent model 
part system initialization lcs activates set level behaviors remain active duration agent locomotion affected bsm 
lcs enters main loop highlighted selects executes 
selection process sets preconditions 
bsm preconditions evaluated current context predefined order 
bsm preconditions satisfied executed 
preconditions satisfied state machine deactivates level behaviors exits reporting failure status 
time execution bsm termination conditions achieved lcs halts execution deactivates level behaviors exits reporting success status 
bsm terminates normally interruption conditions achieved lcs halts execution necessary returns selection process 
cases level behavior achieve goal set level behaviors available lcs selection process 
consistency sets preconditions interruption conditions termination conditions simple memoryless bsm provided 
networks added lcs set executed appropriate 
extensibility architectural components system modified extended explain section 
lowest level locomotion engine modified ways support different locomotion styles different gaits 
footstep generation module modified changing shape region reflecting agent simulation step applying operation current world state current step 
example rolling robot may able move direction requiring circular region fan shaped region walking 
action module replaced action module supports different gait running hopping skipping 
integrating new behavior existing system depends type behavior added reflexive goal memory reliant 
case required behavioral elements written behavioral function behavioral state machine associated conditions 
add new reflexive behavior system sufficient add system state machine list level behaviors 
get executed pre existing level behaviors executed 
add new goal behavior need available execution 
system state machine responsible scheduling new behavior level behavior 
system designer examine existing behavioral state machine decide modified accommodate new level behavior 
add new memory reliant behavior system set preconditions inserted list bsm preconditions considered system state machine 
bsm selection phase preconditions evaluated proper order 
adding new system parameter requires inserting parameterizable code appropriate place system integrating new parameter agent model 
code part locomotion engine behaviors state machine part system long accessible parameter modified agent model 
integration agent model requires system designer establish correspondence existing attributes new system parameter 
adding new attribute simpler requiring system designer establish correspondence existing set system parameters 
design summary summarize design process consists steps 
locomotion engine implement loop 
behaviors choose set behaviors partition set behaviors instantaneous memory reliant subsets partition set instantaneous behaviors level level subsets write behavior functions state machines 
agent model choose set system parameters choose set attributes establish correspondence provide mechanism user interaction 
state machine build state machine chapters follow demonstrate design process designing building human locomotion control system presenting results 
part iii concrete example chapter human locomotion control system demonstrate design process building locomotion control system lcs simulated human agents 
agents reflexive avoidance goal attraction chasing path behaviors provides agent model allowing manipulation parameters agent speed inertia 
lcs adheres limited perception policy exhibits anticipation level architecture see issues chapter 
development environment running silicon graphics iris sgi workstations jack fl human modeling simulation program development center human modeling simulation university pennsylvania 
jack framework general object locomotion 
jack features reasonable human models general real time visually realistic dynamically sound locomotion 
additionally jack includes becket behavioral simulation system pat nets facility writing state machines run parallel simulations 
features combine produce realistic looking simulations 
jack registered trademark university pennsylvania locomotion engine becket simulation architecture exhibits features subsumption architecture nouvelle ai reactive planning situated agents computational neuro ethology behavioral control behavioral animation ffl bottom approach ffl motivated animal sciences ffl tightly coupled sensors effectors ffl integrated behaviors isolation observable beneficial effects ffl emergent behavior behavioral simulation system bss motivation locomotion engine provides general locomotion objects jack generate human locomotion :10.1.1.48.7069:10.1.1.110.6657
central bss sense control act loop 
sense phase simulated sensors sense environment 
information determines agent step control phase 
agent takes chosen step act phase 
behaviors determine agent acts 
bss sensor section control behavior attraction avoidance section combine form behavior section 
behavior maps potential new foot position stress stepping 
possible choices control phase leads agent take stressful step 
behavior activates bound agent 
active output contributes stress calculations 
behaviors may bound unbound time simulation activated deactivated 
locomotion performed indirectly binding behaviors humans 
bss constantly monitoring environment immediately initiates appropriate locomotion 
simulation sense control act loop webber badler discuss sense control act loops depth 
iteration bss loop includes perception control action phases 
stages compose perception phase generation possible footsteps polling active behaviors perception control action behavioral simulation system central simulation loop calculation stress 
stage determines set points agent step 
second stage behavior function evaluation determines stress values point stress proportional agent desire step point 
active behaviors sum stress values point determines stress point 
control phase selects stressful potential point directs action phase execute locomotion 
formally becket bss functions locomotion engine described section lowest level system 
simulating human locomotion operations consist footsteps 
time loop agent takes step 
perception perception includes generation possible steps active behavior evaluation calculation stress 
generation possible steps robotics employs pure potential field approach robot viewed point mass subject attractive repulsive forces 
robots objects move direction human locomotion generally limited small set possible footsteps 
part perception generates candidate foot positions 
parameters determine set possible positions ffl minimum step length min ffl maximum step length max ffl maximum turning angle agent position orientation parameters define fan shaped region front agent 
agent step region 
set agent possible new states corresponds set points agent step 
set points intersections concentric arcs uniformly spaced radii 
number arcs radii varied 
agent min max calculating set possible foot positions agent current location may added set 
point selected point step agent move 
care taken choosing option avoid situations agent may get stuck local minimum 
side stepping backing desired additional gait options fan shaped region modified include regions side agent 
point regions selected point step bss selects side stepping backing agent appropriate 
active behavior evaluation state system simulates polls behaviors 
way system anticipating state agent step 
behavior returns stress value proportional state 
stress value multiplied user defined scalar raised user defined power giving user control relative contributions behaviors 
behavior computes stress values agent position orientation 
requires sets user defined constants 
behaviors access entire environmental database effectively omniscient 
sake realism designer limit amount type knowledge extracted 
section addresses issue limited perception 
calculation stress stress particular state sum weighted stresses output active behavior weights user defined scalars powers 
control action computing state stress bss selects state lowest stress control step 
action step invocation locomotion system causes agent step appropriate point 
agent enters new state loop continues 
basic sensors angle distance sensor potential new state sensor function template sensors simulate perceptual part behavior sensing element environment 
functions return distance angle element agent potential new state 
sections discuss object location line proximity sensors 
object object sensor senses single object environment usually combines attract control behavior forming attraction behavior 
sensing global restrictions visibility limitations 
result care taken sensor agent walk walls objects get object bound proper realism may compromised attraction occluded object 
object sensor senses object current location chasing behaviors possible 
implementation agent object orientation mathematics object sensor ro ra radii object agents bounding cylinders 
object sensor outputs indicated 
distance agent object bounding cylinders angle object relative agent orientation 
discussion research led architecture required obstacles way 
authors choose omit implementation details feel responsibility order aid reader wishes build system 
pitfalls overcame 
people write papers things lot gets rug 
rug looks himalayas 
max mintz basing distance bounding cylinders speeds calculations approximation general introduces severe asymmetries objects 
agent agent goal object bounding cylinder error asymmetry caused bounding cylinders shows depending approach direction agent different distances object 
error distance clearly visible goal large 
agent walking car feet away car approaches side 
solution associate bounding cylinders bounding boxes object centered object centroid 
distance approximated bounding shape better fits object 
solution increases system accuracy far decreases speed 
location agent location orientation mathematics location sensor location sensor nearly identical object sensor usually forming part attraction behavior 
differs sensing fixed point space corresponding object 
location point location sensor suffer problems object sensor 
original implementation allow precise control agent final position 
agent guaranteed arrive half meter radius human bounding cylinder goal location 
useful improve location sensor accuracy basing sensor output distance forward foot goal location 
allows precise control agent final location little reduction system speed 
agent ends simulation standing goal near 
line line sensor senses single line segment associated object 
object moves line segment moves maintaining position relative object 
line sensors typically sense long narrow objects walls streets 
combined attract control behavior keep agent sidewalk path right side hallway combined avoid control behavior prevent agent walking busy street walking wall 
implementation agent orientation line segment fov fov mathematics line sensor distance agent bounding cylinder closest point line segment 
angle point fov sensor field view agent orientation sensor outputs 
output zero indicating segment specified field view 
discussion agent orientation fov fov wall line segment undetected wall agent approached wall angle greater fov wall normal vector wall remained undetected agent walked 
additionally discrete sensing agent bounding cylinder side segment step side step agent walked segment 
solution problem restrict fov greater 
prevented walls going undetected prevented agent walking parallel wall getting pushed away 
discovered better solution develop collision prevention behavior output infinite stress agent penetrated object 
combined line sensor solved second problem 
proximity proximity sensor senses predetermined set objects 
sensing local sensor sensitive objects intersect fan shaped region roughly corresponding agent field view 
intrusion distance ff calculated object sensed proximity sensor bounding cylinder intersects region sensitivity 
shown ff ff object intrusion distance distance outer radius region point object bounding cylinder nearest agent 
simulated object calculated weighted average agent orientation radius fov object object object undetected mathematics proximity sensor detected objects contribution object proportional ff agent sensitive closer objects 
sensor outputs simulated object identical object sensor sensing simulated object 
proximity sensors exclusively create avoid behaviors due local nature avoidance 
section contains analysis proximity sensors combined avoid control behaviors section contains analysis effects varying proximity sensor region sensitivity including pictorial examples 
control behaviors control behavior attract avoid function maps angle distance object location stress value 
attract attract control behavior combines sensor usually object location sensor form attraction behavior draws agent goal 
goal moves point attraction agent orientation radius fov proximity sensor simulated object angle distance control behavior stress control behavior function template moves appropriately distance angle output sensor change 
attract control behavior output stress value high angle distance high 
agent nears goal stress decreases 
object sensor attract control behavior combine form attraction behavior draws agent goal shows agent walking lower right corner image goal upper left 
object sensor attract control behavior constitute attraction behavior guides agent 
absence behaviors stressful step takes agent closer goal 
implementation transfer function converts angle distance stress value 
equations transfer functions angle distance respectively 
gamma min stress gamma gamma min stress sd gamma delta td gamma sd td min min user defined constants 
stress distance agent current location distance min away goal location goal object bounding cylinder 
stress drop zero agent tolerable distance min facing tolerable angle min goal 
sd td affect individual stress contribution stress agent potential new state 
agent attempts arrive min goal oriented min goal 
agent min goal oriented min goal control behavior output sum squares distance angle stress values zero 
stress stress stress summarize greater distance object greater angle agent orientation goal greater stress 
discussion control agent final position particularly attracted point low arrival threshold value necessary 
unfortunately low arrival threshold may cause agent step past goal circle back trying achieve goal due discrete nature bss choosing possible foot locations 
emphasized point chosen step 
arrival threshold distance agent new state goal agent arrived continue walking past goal 
ensuring min half maximum distance concentric arcs adjacent radii prevents agent passing goal 
alternatively adding goal location set possible foot locations fan shaped region agent agent min max goal walking past goal able step better solution 
solves problem sacrificing control agent final location 
condition determine agent arrived cause agent spiral goal especially agent maximum turning angle low due momentum example 
agent close faces away goal take step bring significantly closer 
may step away goal shown 
agent orbit goal approaches goal low angle 
goal goal agent min max step step step step orbital approach changing condition choosing min sufficiently large prevents agent orbiting goal solution reduces control agent final position orientation 
better solution interrupts formalism performing higher level appropriate response 
pat nets monitor attraction 
angle goal increases predefined threshold agent near goal pat net suspends agent controller turns agent goal resumes agent control system 
note problem occurs maximum turning angle step relatively low significantly degrees 
flexible animals robots suffer problem 
avoid avoid control behavior combines sensor usually line proximity sensor form avoidance behavior 
avoidance behaviors prevent agents colliding agents objects walls 
proximity sensor avoid control behavior combine form avoidance behavior 
attraction behavior draws agent goal avoidance behavior steers obstacles 
shows agent walking goal left image 
object sensor attract control behavior constitute attraction behavior guides agent goal 
proximity sensor avoid control behavior constitute avoidance behavior guides agent obstacles 
implementation implementation avoid control behavior similar attract control behavior 
equations transfer functions angle distance respectively 
signum gamma gamma delta signum jxj stress gamma delta gamma max gamma ra stress sd gamma delta td gamma ra ra agent bounding cylinder radius 
sd td affect individual stress contribution stress state way attract 
stress far object extends avoidance radius max extends greater stress 
stress greatest agent facing obstacle 
discussion adjusting fov angle changes agent reaction peripheral activity 
fov large agent react objects passes 
combining avoidance proximity sensor result unrealistic behavior 
agent attempt avoid objects passed objects avoided continued walk straight line 
coordinated behavior group walking agent want avoid agents side 
shows problem small fov 
agents oriented shown arrows unaware collide choose step shaded region 
predictive sensors behaviors anticipate described section suffer problems 
agent agent agents colliding behaviors sensor control behavior stress potential new state behavior function template behaviors influence agent actions specified circumstances reactions specified situations 
bss behavior combines sensor control behavior 
resulting function maps agent position orientation environment stress value lower values represent desirable states 
designing behaviors realism generality efficiency important considerations robustness control precision paramount 
control precision includes specifying exactly agent simulation 
bss originally allowed control precision order meter 
error agent final location unacceptable 
making changes discussed previous sections able increase control precision factor 
important agent goal location prerequisite accomplishing task location 
improperly positioned agent may able attempt task 
step creating behavior layer choose set behaviors 
choose set ffl various ffl ffl inertia ffl various attractions ffl turning ffl path ffl chasing second step partition set behaviors 
ffl instantaneous level reflexive various reflexive physics inertia level various attractions ffl memory reliant turning path chasing various include object avoidance walls tables trees agent avoidance anticipation discussed detail section 
various attractions include location object agent attraction anticipation described section 
practice set behaviors sufficient nearly human locomotion requirements 
necessity additional properties outlined section locality robustness scalability simplicity discussed subsequent sections 
level reflexive physics behaviors reflexive instinctive behaviors necessary collision prevention physics behaviors necessary added realism 
discuss various avoidance inertia behavior implementations section including behavioral functions examples behaviors 
avoidance treat avoidance default behavior active agent explores environment 
parallels brooks approach lowest layer control insures robots come contact objects achieve zero level competence 
discussion avoidance concerns techniques see reynolds 
agre wehner observe animals guaranteed general purpose collision avoidance strategies 
simple basic avoidance techniques effective time concert small set special purpose avoidance techniques specific cases 
avoidance fails collision prevention halts agent locomotion penetrate object 
provide general avoidance behaviors stationary moving objects including anticipating behaviors predict object agent steps 
practice behaviors effective 
special cases arise handled state machine level 
lcs uses avoidance behaviors general object avoidance proximity sensors object avoidance line sensors avoidance moving objects predictive avoidance 
avoidance behavioral functions maps state world corresponding sensor stress output avoid control behavior described previous sections predictive avoidance described section 
example zero level reflexive behavior include sake realism demonstrate architecture flexibility 
support behaviors directly locomotion serve enhance simulation perceived realism 
behavior prevents agent colliding low hanging objects tree branches door frames 
behavior differs contribute choice footstep 
implemented state machine running parallel lcs child process spawned level behaviors activated killed deactivated 
bsm monitors simulation postural changes appropriate 
agent ducks bending spine forward severe includes bending knees 
exit duck termination signal behavioral state machine function determines agent avoid particular object 
initially objects potentially tagged 
simulation cycle duck function applied object returns height agent duck 
function calculates distance agent object 
distance minimum threshold minimum height object minus clearance value returned 
distance greater maximum threshold infinity returned object requires 
distance minimum maximum thresholds return value calculated linear interpolation 
duck heights calculated object agent ducks minimum height returned functions 
linear interpolation allows agent duck smoothly time distance obstacle decreases 
reacts appropriately instantaneous distance object max amount min threshold max threshold function approaching object equally appropriately approaching object 
agent objects shows agent obstacles walking goal left 
fifth leftmost obstacle far agent right require 
site head traced show path 
inertia inertia example physics instantaneous behavior sake realism 
binding inertia behavior agent causes agent prefer move straight lines suppressing tendency 
stress proportional angle turned agent step multiplied function velocity 
faster agent moving difficult turn significantly single step 
figures show inertia functions slow fast agent respectively 
note similarity inertia behavior anderson donath forward left right angle degrees stress max left right angle degrees stress max inertia behavior function slow agent fast agent attraction behavior sustains agent forward motion regardless detected objects environment 
difference behaviors extent contribute agent observed behavior 
forward attraction tends dominant inertia 
level goal behaviors goal behaviors necessary giving agent purpose guiding agent goal 
lcs uses variants attraction goal behaviors general object attraction object sensors location attraction location sensors attraction moving humans predictive attraction 
attraction behavioral functions maps state world corresponding sensor stress output attract control behavior described previous sections predictive attraction described section 
discussed section cases level behavior suffice achieving goal available lcs selection process providing 
attraction bsm illustrated 
preconditions twofold 
goal visible path required goal stationary location object known fixed chasing required 
preconditions satisfied lcs selects executes attraction bsm binds appropriate attraction agent transitions monitoring state 
remains state agent arrives goal user defined interruption termination condition achieved attraction exits 
example generated attraction behavioral state machine 
activate attraction exit monitor agent progress deactivate attraction attraction behavioral state machine state machines modern systems include state machine implementation 
brooks implemented layer subsumption architecture lisp augmented finite state machine :10.1.1.110.6657
hodgins state machines enforce control laws simulated 
parallel transition nets pat nets introduce high level decision making agent architecture :10.1.1.45.7696
finite state machines run parallel simulation monitor loop thought modeling instinctive reflexive behavior decisions special circumstances 
observed behavior resulting combined different behaviors fail example agent may get caught local minimum 
actions fail unexpected events occur 
pat net recognize situations modify agent behavioral mode binding appropriate behaviors changing system parameters return monitoring state 
shows sample pat net 
pat nets comprise nodes representing states transitions states 
condition associated transition 
condition achieved associated transition 
time state entered pat net performs action associated state 
addition states transitions pat net may include monitors 
regardless current state monitor perform action general condition associated achieved 
state action state action exit monitor action default parameters 
locals 
net class class name sample pat net shown graphically actions performed pat nets arbitrary lisp expressions 
include spawning new nets killing communicating nets 
communication may accomplished semaphores priority queues waiting condition met 
example net may spawn net wait exit continuing acting effectively subroutine call 
scheduling behaviors state agent environment 
behaviors state nature behavioral state machines implemented pat nets natural structure providing high level interface underlying behaviors 
responsible locomotion reasoning decision procedures choosing parameterizing controlling appropriate reactive behaviors 
may instantiate running parallel waiting exit 
turning agent walks location side turning behavioral state machine turns face location attraction locomotion begins 
agent walk arc get goal due limited angle turn step 
associate conditions turning bsm implementation called child process state machines action considered atomic 
turning bsm rotates object human agent 
object human location face passed parameter angle rotate specified 
unspecified bsm calculates rotation angle 
rotation direction lesser clockwise counterclockwise may specified 
exit start human object spin object calculate left foot right foot left foot right foot left foot right foot exit ccw cw complete incomplete complete incomplete turning behavioral state machine turning bsm simply spins objects center mass rotation point specified human agents step 
human agent begins turn rotating foot right clockwise rotation left counterclockwise rotation 
leg body follow maintaining agent balance 
rotation angle foot research show motor actions including human turning preceded eye motion visual attention 
turn looking object direction want face 
turning occurs top lower body legs feet eyes head 
minimum agent follows foot foot bringing feet 
greater cycle repeats agent rotated 
optional argument specify agent follow foot final cycle 
looks natural final cycle completed locomotion follow turning 
turning face goal vs turning shows difference agent turns face goal walking agent simply starts walking 
turning necessary maneuvering restricted area narrow hallway 
path activate waypoint attraction exit monitor agent progress deactivate waypoint attraction calculate path path exists path exists path behavioral state machine path useful realistically guiding agent goal immediately visible 
path bsm generates segmented path agent location goal world 
set user defined constraints path may exist case machine exits reporting information 
attraction vertex intersection consecutive segments path binds agent agent begins path 
path important properties connects agent goal avoids obstacles obstacle clearance value chosen user path minimal length constraints 
agent approaches vertex attraction drawing attraction vertex path binds agent smoothly transitions 
process repeats agent arrives goal 
initial conditions path example shows sample environment demonstrate path algorithm 
agent large room bottom told walk goal location marked flag small room top 
lcs performs visibility test initially determines goal visible agent path required 
selects executes path bsm 
boundary resolution obstacle clearance values user defined default system casts rays generate obstacle map 
shows results 
boundary meters direction meters direction left right optimize ray casting take advantage fact rays cast parallel axis fact objects include axis aligned bounding boxes 
practice fast weak link system 
environment farthest extents making size path generation region meters meters 
resolution direction direction just ensure walls centimeters thick missed due floating point error 
obstacle clearance value centimeters path avoid obstacles distance 
satisfy constraint expanding obstacles obstacle clearance value direction reducing path generation problem simpler problem trying find minimal length path connecting agent goal avoids obstacles 
avoiding expanded obstacles equivalent avoiding obstacles expanded amount 
interesting note agent path take lower doorway upper doorway centimeters wide wide walk centimeter clearance constraint 
environment obstacle map expansion path generation accomplished wave propagation algorithm takes input expanded obstacle map agent goal locations 
algorithm understood easily analogy 
imagine goal location source viscous fluid expanding uniformly filling obstacle map 
fluid penetrate obstacles outer boundary 
fluid contacts agent stops flowing 
actual implementation begins discretizing space indicated figures marking goal explored associated weight shortest distance goal zero 
outer boundary explored region repeatedly expanded neighboring rectangular grid points grid points marked containing obstacles bounds 
expanded obstacle map wave propagation associated weight new grid point minimum weights neighbors plus neighbor horizontally vertically adjacent plus neighbor diagonally adjacent 
example small weight map 
goal center agent upper right corner dark xed grid points represent obstacles 
minimal length path agent goal starting agent necessary maintain sorted list boundary grid points choosing grid point minimal weight exploration 
heap data structure storage proved efficient log time complexity insertion deletion 
weight map grid point repeatedly moving direction neighbor minimal weight 
case tie previous direction preference producing long linear runs grid points 
choose waypoints ends runs 
shows waypoints original example current map original obstacle map clarity 
path goal note method produces extraneous waypoints due limited choice direction discretized intervals 
remove unnecessary waypoints doing visibility tests map space incremental line scan conversion algorithm efficiency 
consecutive waypoints third connected line intersect obstacle second removed 
resulting set waypoints forms path takes agent goal efficiently 
waypoints waypoints drawn original obstacle map clarity necessary waypoints necessary waypoints drawn original obstacle map clarity shows agent path calculated path bsm 
figures show agent path shows agent successfully arriving goal 
system accept user defined path optional parameter general responsible path generation 
way differs systems miller rocky iii operator designated set intermediate way points 
path poses questions reasonable agent behave way simply path planning 
argue reasonable generate path point provided agent knows area 
bsm take agent place area explored 
path conforms agre chapman plans advice paradigm 
differs path planning agent constrained path 
attraction path binds agent 
behavior competes bound behavior control agent black cat crossed path path agent stray path avoid cat 
chasing agent chasing behavior alternates object attraction location attraction behaviors 
target agent chased visible attraction binds chasing agent 
target occluded attraction target known location bound 
target immediately visible chasing bsm exits unsuccessfully 
agent turns face target attraction target binds agent 
agent walks target agent arrives target machine exits successfully target occluded target may walked corner building example 
case existing target attraction attraction target known location binds agent 
agent walks location arrives target visible 
case agent turns target chases 
case machine transitions extrapolation state 
agent arrives known location target seeing target exiting unsuccessfully agent guided direction target walking agent path object attraction monitor object attraction monitor location attraction location attraction extrapolate exit arrived lost target chasing behavioral state machine disappearing 
requires maintaining pieces information target known location vector velocity 
extrapolation optional may turned allow effective higher level implementation 
illustrate give example tom chasing jerry 
chasing bsm shown begins state 
attraction jerry binds tom 
tom begins run jerry bsm passes state monitoring state 
jerry longer visible tom jerry may run corner object bsm enters state 
attraction location jerry jerry known location binds tom 
tom begins run location bsm transitions state 
tom arrives location see jerry bsm transitions state tom searches direction jerry known heading 
eventually tom see jerry continue chasing tom give point chasing bsm exits 
section contains detailed example chasing 
combining state machines preconditions simple path turning attraction chasing combine single state machine locomotion control machine lcm described section 
examine preconditions determine conditions necessary implement lcm 
exit path turning attraction chasing bsm preconditions symbols left right indicate agent jack goal properly oriented see goal goal stationary duration currently requested locomotion 
jack goal properly oriented lcm exits 
goal see path required 
improperly oriented goal goal visible turning required 
jack goal properly oriented able see goal attraction chasing required depending goal stationary 
flow diagram clarifies decision making process 
lcm encompassing lcs described detail section 
agent model lcs includes agent model outlined section 
includes personality traits curiosity caution state information agent energy level 
personality traits state information affect system parameters architecture 
example fatigue affects agent speed locomotion engine layer anticipation affects attraction avoidance behavior layer curiosity affects condition evaluation state machine layer 
user sets high level locomotion goals agent system start exit attraction path chasing turning turning exit locomotion control machine flow diagram generates locomotion automatically shaping locomotion reflect convey observer chosen agent state personality 
example consider animator task modeling agents homer 
scene animated homer just left local bar way home 
moderately drunk minimally aware surroundings generally 
homer girlfriend having just received call way intercept homer 
hurry knowing homer propensity get trouble state 
animator opens agent model interface window configures agents homer 
clicks button mouse slider bar entitled appears 
chooses setting 
sets homer awareness surroundings 
animator wants model homer finds trait exists system 
clicks add new attribute answers questions appear 
defines lisp condition achieved homer see woman attracted 
probability reacting condition achieved relates homer awareness level 
animator configures similar way setting rushed value 
chooses locomotion goals instructing homer go home go bar 
addition adds interruption condition high level behavioral schema causing termination homer visible 
happens new schema adopted goal go homer followed schemata take homer home 
animator tests configurations starting locomotion control systems sees homer begins walking home 
walking relatively slowly speed varies staggering 
way bar 
walking rate faster stable 
homer passes woman sitting bench distract normal circumstances 
walks bench noticing fortunate moment comes corner view 
turns homer meet walk home 
animator shows animation colleague 
minutes discussion small amount parameter adjustment satisfied agents appear desired personalities 
locomotion system parameters affected attribute speed inertia anticipation condition probability laden rushed aware alert danger curious distracted agent model affects agent shows subset attributes agent model ways affects agent behavior 
speed walking rate factors regulated rushed attributes 
laden agent walks slowly agent rush walks quickly runs 
agent walks slowly inconsistent rate varying velocity amount proportional level 
shows effects model agent 
simulations identical agent left sober agent right drunk 
shows inertia behavior function drunk agent 
function encourages discuss agent states attributes claim fully modeled state attribute question 
approximated effects agent locomotion 
agent may thought exhibiting drunk behavior 
agent exhibiting drunk behavior agent model agent step side straight goal effectively causing agent stagger 
left right angle degrees stress max inertia behavior function agent combination behaviors necessary behavioral control typically yields excessively wandering paths 
attempt straighten locomotion paths realistically model effects inertia add inertia behavior agent behavior set attracts agent forward direction 
agent low inertia value tends result 
walk presence people attempt react current location guess steps 
consciously unconsciously anticipate potential locations near base locomotion reasoning prediction 
agent lower anticipation value normal agent particularly aware surroundings anticipate 
condition special system feature implemented state machine level 
hook effectively interruption allows user implement behaviors particularly involving sub goals decisions unsupported architecture 
way differs weighted summation implementation parameters 
arbitrary condition achieved state machine takes appropriate action possibly stopping agent exiting 
allows higher level system replan advantage opportunity 
condition example achieved enemy agent field view scenario 
see burglar walk past police officer 
burglar notices officer starts running sense urgency increases 
tries find hiding place officer pursues 
system capable simulating scenario 
burglar passes officer real life guarantee notice 
probability parameter reflects probability agent react condition achieved burglar notices officer vice versa 
probability high agent aware surroundings curious low distracted rushed example 
advantage agent model implementation modularity 
add new attribute done establish correspondence attribute system parameters described section 
system adapts automatically new attribute account calculating parameter values 
chapter issues chapter discuss issues limited perception anticipation required simulation realism 
limited perception realism goals concept limited perception important concern 
behaviors access entire environmental database 
behavior designer filters information way agent behavior depends reasonable information 
reasonable information real agent equivalent situation able perceive usually visually 
example tu terzopoulos fish controller object considered seen part enters fish view volume fully occluded object 
filtering performed behavior level higher state machine level 
behavior level avoidance combined proximity sensor approximates effects limited perception 
agent avoids nearby objects agent aware 
attraction combined object sensor produces behavior attracts agent object regardless distance visibility 
state machine level repairs behavior activating deactivating attraction simulate realistic path chasing behaviors described sections 
give example enforcing limited perception policy affected enforcing limited perception policy environment agent view attraction attraction wall avoidance path agent arriving goal system design 
environment shown figures wanted agent walk goal flag 
thought object sensor attract agent goal 
shows results test 
shows results adding 
agent dragged wall way goal clear 
analysis results revealed unrealistic agent dragging due attraction non local obscured object 
reasonable agent aware object see unreasonable agent walk directly object relying push away intervening walls 
alternatives approach adhere limited perception policy 
possibility simply disallow behavior requiring user planner level break navigation shorter local sub navigations 
second possibility consider similar situation add behavior system repertoire 
solution develop path behavior previously described section 
shows results path generation algorithm shows agent arriving goal path 
agent starting point path shown 
solution advantages increasing system realism flexibility ease 
anticipation lcs employs anticipation level supports planner anticipation condition evaluation system interruption locomotion engine bases calculations agent current location agent step 
behavioral level agent anticipates world sensor shape adjustments lookahead exhibited terrain awareness behavior explicit anticipating versions attraction avoidance behaviors 
state machine level includes anticipation chasing behavior extrapolation state 
locomotion engine velocity vector resulting blended output active behaviors determine footstep becket observes result severe instability threshold boundaries 
occurs thresholds sensors control behaviors create discontinuous potential field space 
discrete step instantaneous information may cross discontinuity field space 
example consider situation goal attracts agent avoids hot radiator threshold distance 
agent initially located position choose step directly goal 
threshold distance radiator agent step away wall outside threshold 
process repeats agent clears radiator producing extremely unrealistic sawtooth path true gradient potential field 
calculating stress values possible agent states relying instantaneous information system looks step 
anticipation results realistic locomotion shown particularly local environment static 
local environment dynamic necessary predict changes environment world states possible maintain reasonable realism section 
terrain awareness terrain awareness behavior evaluates agent position orientation environment local terrain 
weight proportional stress walking terrain particular type associated terrain type easily navigable terrain grass receives low weight difficult terrain mud receives high weight 
easily extended terrain changing elevation factoring stress calculations agent metabolic energy expenditure step 
terrain awareness behavior simply return stress proportional weight terrain agent stepping 
predicts agent steps assuming agent theoretically system benefit lookahead step 
limit time complexity lookahead number potential new states examined number steps lookahead 
consider example system possible footsteps examined 
looking step requires sets calculations looking steps requires 
due time required set calculations feasible look step 
hot radiator goal avoid field hot radiator goal avoid field sawtooth path due potential field discontinuities better results anticipating state world agent taken step continues walk straight line parameter 
terrain sampled steps associated weights multiplied function decreases step 
stress proportional sum values 
method advantage agent step region difficult terrain region easily navigable 
example real time terrain traversal simulated agents 
shows agents starting positions bottom image paths terrain 
attraction guides agents goal upper left corner avoidance prevents agents colliding obstacles terrain awareness causes agents avoid water dark patches possible 
effect terrain awareness behavior seen clearly rightmost agent chooses turn slightly cross stream walking straight goal 
shows effects terrain awareness behavior detail 
winding exhibited center agent resulted trying avoid leftmost agent slightly ahead 
observed behavior eliminated replacing avoidance attraction avoidance terrain awareness behaviors combine draw agents goal upper left corner close view attract behavior combining terrain awareness behavior guide agent goal predictive avoidance 
simulation leftmost agent standing tree upper left 
combination obstacle agent avoidance terrain sensor output resulted central agent walking tree 
attraction lower agent attracted upper agent traditional attraction behavior desire accurate predictive attraction behavior came dissatisfaction traditional techniques agent attracted target current location 
shows happens traditional attraction behavior bound chasing agent coming bottom 
chasing agent path curved degree eventually falls target agent 
example motivated replace nave object attraction behavior target moving 
implementation predictive attraction evolved traditional attraction stages 
experimented attraction location target predicted step 
object sensor attract control behavior compose object attraction behavior stress reduced agent binds turns approaches object 
predictive attraction replaces object sensor predictive object sensor differs reporting location object expected step 
previous current predicted location location location mathematics predictive attraction behavior illustrates implementation 
predicted location calculated red gamma rev rev red target previous current predicted locations respectively 
model assumes agent maintain current velocity attempt predictive attraction shows anticipating agent path better agent left approaching bottom agent anticipating target appropriately 
number steps predicting agent location 
considered case 
experiments encouraging 
problem anytime anticipating agent drawn point fixed relative position target regardless distance fixed point target anticipating agent trajectory curved 
optimum solution anticipating agent walks straight line 
best implementation obtained best results choosing direction agent brought threshhold distance target quickly possible assuming constant velocities 
effectively agent followed intercept course 
stress potential footstep calculated follows 
agent target agent initial position velocity 
assuming agents maintain velocities goal determine long take threshold distance 
step stress value proportional calculated time measured seconds 
consider cases agents come threshold distance diverging 
agent threshold agent distance initial conditions predicting intersection shows initial conditions 
want solve functions time distance formula dx dy distance want solve time agent target come threshold distance gamma gamma gamma gamma delta gamma gamma delta substituting equations get ii gamma jj ii gamma jj substituting ff gamma fi gamma fl gamma ffi gamma get ff flt fi ffi substitute fl ffi fffl ff fi gamma get quadratic equation bt solutions gammab sigma gamma ac discriminant gamma ac negative solution 
agents come threshhold distance 
case calculate minimum distance achieve value threshhold distance solve problem 
calculate time take agents achieve minimum distance 
discriminant positive zero solve values values negative agents diverging revert traditional attraction reporting stress value distance 
value negative positive zero agent achieved goal agents threshold distance stress zero 
values positive stress proportional minimum values 
second attempt predictive attraction shows final implementation yields realistic predictive attraction behavior 
compares approaches final implementation left traditional approach right 
note agent chased turn speed slow visual comparison attraction behaviors attempt evade chasing agent successfully adapt adjust pursuit recalculation leads footstep side effect sense control act loop architecture 
avoidance introduced anticipation avoidance behaviors ways 
making adjustments shape proximity sensor region sensitivity 
driven need realistic predictive avoidance took approach similar predictive attraction agent reacts objects expected locations steps 
proximity sensor adjustments object avoidance behavior typically combines proximity sensor avoid control behavior 
determining radius field view fov parameters proximity sensors difficult 
slight variations parameters dramatic effects 
shows path agent proximity sensor shape shown combined avoidance control behavior 
agent successfully arrives goal avoids obstacles path inefficient unrealistic 
shows path agent proximity sensor longer narrower region sensitivity 
path better agent 
increasing increases amount time agent react obstacle 
results short wide avoidance sensor results long narrow avoidance sensor small agent walk obstacle turning avoid near 
behavior realistic agent perception limited atmospheric conditions fog smoke due insufficient lighting 
increasing compensate causes problems moving obstacle crosses agent path far ahead agent danger collision agent turn avoid obstacle 
approach long narrow regions sensitivity proximity sensors improvement basic object avoidance exhibits features suggested reynolds results unrealistic behavior times motivating development predictive anticipating avoidance :10.1.1.48.7069
predictive previous current location location predicted location mathematics predictive avoidance behavior predictive avoidance outputs stress value proportional probability agent collide object current step 
probability distribution calculated 
shows probable location moving object agent 
darkest regions regions highest probability 
probability distribution determined bias values approximate likelihood object accelerating turning left turning right 
bias values approximated observation experience acquired learning algorithms 
stress value proportional agent point intersection highest probability 
refinement predictive avoidance behavior involves lookahead stresses associated predicted steps summed decreasing weights similar lookahead exhibited terrain awareness 
behavior output weighted sum stresses 
comparison traditional predictive avoidance behaviors start simulation give example agents cross opposite flags 
agent right walks straight attraction behavior 
agents starting bottom location attracted goal top avoid agent moving left traditional proximity sensor avoidance predictive avoidance 
shape proximity sensor region sensitivity illustrated 
shows avoiding agents diverge 
traditional agent left keep avoidance target proximity sensor region sensitivity anticipating agent predicting collision occur continues straight line 
shows traditional agent able cut avoidance target pushed significantly way 
confirms anticipation results shorter realistic path 
target predicted behavior may occur may moving suddenly agent may run 
prevent happening addition predictive avoidance behavior passive avoidance behavior halt forward motion object immediately front agent 
anderson donath equivalent freeze behavior observed animals 
attempts preventing collisions may fail wilhelms skinner point collision avoidance real life quite flawed need consider highway traffic people crowded hallway 
desirable objects unrealistically middle simulation simulation collision avoidance strategies fail 
added collision prevention locomotion engine reason 
chasing anticipation state machine level seen implementation chasing behavior 
agent arrives target known location find visible exiting unsuccessfully agent predicts target may gone known velocity 
target path explores direction 
planner planner standard part locomotion control system plugged just easily user configure system 
hide seek project exemplified capability combining planner lcs simulate games hide seek :10.1.1.45.7696
planner exhibited anticipation controlling seeker trying determine 
doing able reasonable decisions seeker 
anticipation state machine level generally constrained state reasoning anticipation planner level complex inferences accurately reflect complexities subtleties animal intelligence 
chapter results chapter describe human locomotion control system 
discuss adherence system requirements previously laid demonstrate system fully worked example analyze performance 
description locomotion control machine lcm diagrammed figures embodies locomotion control system 
agent goal lcm combines avoidance inertia attraction turning path chasing guide agent goal 
state diagram entire system functionality 
path goal immediately visible goal visible agent arrives 
agent chases goal exiting arrives loses goal 
system includes agent model parameter adjustment monitor condition evaluation 
detailed flow chart locomotion control machine 
machine exits immediately agent goal 
level behaviors bind agent lcm performs visibility test determine agent see goal 
lcm instantiates path machine calculate guide agent path goal 
path machine reports path exists agent arrived goal level behaviors unbind lcm exits 
attraction attraction object location exit start path agent model monitor exit condition true locomotion control system exit 
visible 
level bind turning machine path machine level unbind arrived 
start location attraction target attraction arrived 
visible 
visible 
arrived 
extrapolate success 
locomotion control machine instantiation turning machine begins lcm chasing phase entered goal immediately visible agent nearing path finds goal moved visible 
agent turns face goal attraction goal binds agent 
long goal visible agent walk goal 
arrival level behaviors unbind lcm exits 
goal occluded object attraction attraction goal known location binds place 
agent walks location goal visible arrives location 
case location attraction lcm transitions back turning machine state chase continues 
case location attraction agent walks direction goal known heading 
goal visible chase continues 
level behaviors unbind lcm exits 
adherence system requirements locomotion control system adheres system requirements laid chapter 
aware agent aware environment network simulated sensors 
lcs loop includes relatively little computation fast agent remains aware environment simulation 
dynamic major advantage behavioral architectures planner architectures able cope dynamic environment timely fashion 
environment resampled time loop agent aware react changes world 
easy illustrates system architecture addition high level user interface 
combination input boxes sliders buttons menu items user configures simulation matter minutes 
knowledge underlying architecture implementation unnecessary 
simulations utilize small fraction system capabilities reasonable defaults help speed process 
system includes verbose mode detailed debugging information behaviors locomotion engine agent model state machine user interface architecture interface displayed aid user reconfiguring simulation goes wrong unhappy resulting animation 
efficient satisfied efficiency requirement choosing behavioral control strategy keeping behaviors simple minimal computation exploiting efficiencies possible 
example interface provides stationary checkbox checked allows system take advantage fact goal albeit moveable object stationary duration simulation 
known goal stationary general computation required guide agent goal 
refer stationary objects conform sloman notion passive objects trees poles opposed active objects agents 
extensible lcs extensible level 
supports addition new sensors behaviors types new personality attributes state information 
way useful animation tool research tool 
fault tolerant arbitrary condition evaluation action execution provides agent ability anticipate prepare contingencies making system fault tolerant 
user may supply number condition action pairs 
conditions constantly evaluated user interface parallel monitor process 
conditions achieved simulation interrupted corresponding action executed simulation continues 
conditions prioritized achieved simultaneously order actions executed deterministic 
condition action executed case earlier action 
flexible flexibility achieved combination behavioral level state machine level 
support potential field reasoning state reasoning 
combination powerful simulate wide range behaviors 
complex reasoning required planner higher level module perform reasoning interface system required lisp interface power interactive user interface 
modular lcs designed modular support adding removing replacing pieces 
vision seen example 
lcs required simulating vision ray casting 
existing method ray casting sufficient simulations vision module replaced easily different vision simulation method desired 
true parts system path path generation module chasing extrapolation algorithm 
replaced order experiment cognitive theories 
opportunistic arbitrary condition evaluation provides agent ability take advantage opportunities 
approach incorporates cognizant failure user anticipates things go wrong opportunities may arise things may go right plans 
implemented set condition action pairs passed optional parameter 
monitor continually evaluates conditions 
achieved system executes associated action 
example agent follows path takes closed door condition checked achieved agent gets reaching distance door 
action passed condition cause agent reach open door passes doorway releasing door 
condition evaluation agent stuck local minimum common problem behavioral control systems 
parameterizable lcs includes parametric control agent speed inertia probability react opportunity effectively awareness 
purposeful agents goal goals chosen locations objects human figures 
agent purpose choose appropriate path environment appropriate locomotion style properly reflects attributes specified agent model 
realistic jack accurate human models combine ko locomotion control system produce extremely realistic looking simulations 
additionally strict enforcement limited perception policy anticipation system serve enhance realism 
robust robustness achieved generalization 
try design sensors detect entire class object just specific object reasonable 
example agent told avoid humans environment 
humans added removed agent continues behave properly avoiding nearby 
examples demonstrate complete system examples 
involves agents groups located side environment see figures pages 
agent goal flag opposite side field requiring behaviors achieve basic attraction goal predictive avoidance agents 
addition avoid symmetry agent rushed value adjusted unique multiple range 
images show agents successfully navigating goals colliding 
second example complete system involves agents 
agents exhibit attraction avoidance chasing path turning behaviors demonstrate system features limited perception anticipation agent model 
figures frames simulation 
simulation environment cylindrical obstacles cubical obstacles flag terrain human agents 
left right refer agents 
agents configured avoid cylinders boxes standard avoidance techniques avoid predictive avoidance anticipation 
path necessary agents plan path avoids boxes cylinders humans flag terrain considered obstacles purposes path planning 
systems told ignore cylinders visibility tests 
cylinders treated simplifications objects agents able see 
agent goal agent 
agent goal location right boxes 
arrival goal agent turn face west left 
agent goal flag known stationary allowing system simplify calculations reasoning 
furthermore agent rushed attribute set relatively high value walk quickly agents 
agents walk goals 
agent plans path flag begins follow 
note path avoids boxes cylinders expected 
agent having lost visual contact goal walking agent known location 
agents avoiding collision predictive avoidance 
agent slows agent pass agent slightly left attempt avoid collision 
agent see goal switches known location attraction back object attraction heads agent 
agent continues goal agent returning path 
agents approach obstacles 
note agent attracted agent cylinder obscures agent initial instructions system 
agent approaches goal 
agents cylinders agent arrives goal 
example agent continues chasing agent 
agent completes turn facing left 
agent arrives goal 
agents arrived goals 
simulation ends 
environment built took minute configure agent animation locomotion control system user interface described section 
simulation ran real time silicon graphics reality engine ii processor 
total elapsed time simulation seconds 
total elapsed time start configuration simulation including loading saving files overhead minutes 
times typical simulations 
performance analysis section contains time complexity analyses various parts system determine incremental cost adding agents obstacles behaviors simulation 
tables number agents simulation number obstacles number potential footsteps agent number behaviors bound agent number steps lookahead predictive avoidance behavior 
sensor time complexity weak link object line location proximity sensor time complexity analysis shows time complexity analysis system sensors 
object line location sensors probe perform calculations single part environment operate constant time 
object sensor example add overhead system obstacles 
proximity sensor performs calculations proportional number objects currently detects 
note proximity sensor theoretically detect obstacle environment time complexity practice typically detect small subset obstacles 
control behavior time complexity weak link attract avoid control behavior time complexity analysis attract avoid control behaviors fixed equations constants operate constant time combining sensors control behaviors behaviors sensors weak link 
behaviors time complexity weak link object attraction location attraction predictive attraction line avoidance proximity avoidance predictive avoidance inertia behavior time complexity analysis shows results combining basic sensors control behaviors analyzes complex behaviors 
object attraction location attraction line avoidance combine constant time sensor constant time control behavior resulting behavior 
predictive attraction inertia operate constant time 
proximity avoidance combines linear time sensor constant time control behavior linear time 
predictive avoidance agent involves calculations performed steps lookahead 
time complexity 
analyze time complexity simulation terms agents footsteps behaviors obstacles lookahead 
agent associated instance lcs includes instance locomotion engine phase includes term 
simulation run time linear relative number agents 
locomotion engine phase time complexity weak link footstep generation af sense afb control afb act simulation time complexity analysis footstep generation clearly proportional number footsteps 
control requires computing sum stresses output behaviors 
stress output behavior possible footstep agent 
action selected agent corresponding new state minimal stress action carried constant time 
analysis shows sensing system weak link 
linear number agents footsteps behaviors maximum number obstacles steps lookahead 
observe simulations parallelized executing lcs processor multiprocessor machine 
effect simulation time complexity reduce terms 
machine processors possible parallelize calculations reducing constant time complexity 
noted case data collection processors add logn time complexity parallelized calculation 
suggest experimenting parallelization research 
part iv chapter discussion current trend designing autonomous agents away deliberative thinking paradigm direct coupling perception action 
flexibility distributivity parallelization dynamic interaction environment emphasized 
approach exhibits features behavioral control animation robot locomotion increasingly popular decade 
locomotion reasoning behavioral control desirable properties 
iterative approach allows dynamically changing environment includes changing terrain obstacle goal locations 
local decisions need step technique fast implementable real time 
versatile 
new types behaviors may designed easily integrated additional layers behavioral control may overlaid architecture 
combined modularity extensibility useful cognitive research tool 
purely reactive systems limited realistic tasks require certain amount stored information 
state machines provide additional layer control mechanism introducing locomotion reasoning high level decision making architecture 
expand agent behavioral vocabulary allowing state memory reliant behaviors 
chasing illustrates point clearly requiring reasoning decision making scope loop pure potential field behaviors 
locomotion control architecture allows reasoning 
complete agent architectures design methodology theoretical formalism 
allows researcher understand system theoretical point view build system relative ease 
addressed concerns unique human locomotion done loss generality 
demonstrated walking locomotion control system designed support wide variety locomotion styles exhibited different types animals robots 
agent locomotion variable interesting basing agent model 
agent model maps agent state personality attributes system parameters 
different attribute settings result different locomotion styles 
agents goals achieve goals differently depending agent models 
enforced limited perception policy introduced anticipation enhance system realism 
agent access environmental database filtered prevent acquiring information able perceive visually 
furthermore agent bases actions current state world predicted state world steps 
chapter research summary thing world think inability human mind correlate contents 
call chapter summarizes research completed discusses contributions science field behavioral control 
provide complete structured architecture behavioral control locomotion design methodology required build behavioral locomotion systems 
explain system requirements architecture adheres give formal description locomotion engine supply behavior selection placement criteria provide agent model design integration specifications show put state framework 
validate architecture implementing human locomotion control system giving detailed descriptions results 
simulations fully articulated walking human models dimensional environment serve testbed objects robots creatures fly jet propulsion 
result address additional complexities specific human locomotion 
research includes variety implementations behaviors implemented locomotion engine state machine layer various basic turning predictive avoidance path attraction deep spaces inertia chasing field view avoidance various basic attractions predictive attraction terrain awareness discuss enforce limited perception policy introduce notion anticipation predictive sensing probabilistic model states environment influences locomotion decisions 
limited perception anticipation combine simulations animal behavior models realistic 
simulated agents acquire react information real agent equivalent situation able acquire 
furthermore simulated agents anticipate changes world movement agents making decisions prediction current state world 
way simulated agents closely approximate behaviors observed real animals 
achieve system requirements chapter notably 
architecture allows arbitrary condition interruption making opportunistic 
minimize set active behaviors solve behavior weighting problem easing burden system designer making system easier 
design methodology provides extending behavioral set state machine agent model 
agent model allows user modify agent state personality attributes reflected observed behavior 
system extensible modular design useful cognitive research tool 
modules swapped system extended easily allowing testing cognitive theories 
example independent user modified system include model visual attention 
agent turned head focused gaze direction goal 
locomotion gaze attractions avoidance factors 
system employs layered approach making versatile 
allows behavioral state reasoning supports higher level plug ins planner 
hide seek project system controlled planner exclusively 
user interaction whatsoever 
addition types behaviors parameterizable affected agent model 
system parameters agent speed agent inertia amount anticipation condition evaluated probability agent notice react certain condition achieved 
attributes fatigue level awareness 
researchers designed complete architectures different features tend gloss completely ignore implementation details issues required architectures 
biggest contribution field behavioral control detailed design methodology 
thesis contains theoretical background information full architectural description complete recipe building locomotion control system capable reasoning decision making necessary realistically real simulated agent arbitrary goal 
chapter hear people sing say hear distant drums 
bring tomorrow comes 
les hear people sing 
research motivated possible avenues research 
list interesting possibilities 
audio cues sound contribute locomotion decisions 
visible agent avoid agent blind intersection sound agent approaching 
behavior observed humans particularly blind intersections buildings 
behavioral modifications path intersects obstacles chosen agent 
case agent forced behavioral changes successfully navigate region 
modifications level reflexive behaviors implemented state machines running parallel locomotion control system similar 
situations occurs corresponding state machine appropriate change agent posture locomotion 
ffl low obstacles agent encounters low obstacle boulder fallen tree things happens agent climbs jumps steps obstacle depending size obstacle agent current behavior 
agent jumps current velocity predefined threshold 
ffl narrow widths agent encounters narrow width squeeze 
may require turning sideways side stepping 
better sensors line sensor described section required object sensor described section improved new sensor implemented return distance geometries bounding volumes 
properly implemented new sensor replace location proximity sensors 
designing greatest difficulty increase computational complexity machine sufficient speed algorithm sufficient efficiency overcome difficulty 
gait variability address issue variable gait system provides necessary flexibility parameterize control agent gait 
system state machine vary parameters agent changing state motivation 
agent model set parameters agent personality manner consistent bruderlin calvert model 
group locomotion control system modifications locomotion control system simulate group behavior 
single lcs instance control single agent agents group implementation requires addition grouping behaviors 
compiling results observations hodgins brogan kube zhang reynolds shaw suggest group behavior set collision avoidance group attraction velocity matching :10.1.1.48.7069:10.1.1.32.9106
collision avoidance simply non interference behavior collision avoidance prevents collisions members group 
best implemented level instinctive behavior combined standard obstacle avoidance 
group attraction group members attracted center flock attempt stay close nearby neighbors 
velocity matching member group attempts match velocity neighbors 
hodgins brogan algorithm computes desired velocity individual location velocity visible neighbors 
managing group system additional responsibilities 
requires mechanism determining agent group switching back forth group group state appropriate 
group behaviors applied agent group state 
additionally groups leaders followers 
group system applies group behaviors followers 
leader leaders controlled standard locomotion control system rest group naturally follows 
optical flow sensor optical flow sensor designed combined avoid control behavior attached fast moving agent bird 
optical flow behavior prevent agent colliding field view considering optical flow vectors 
path replanning existing system path generated agent follows path reaches interrupted 
path static generated change 
may realistic replan path times times 
experiments indicate times appropriate replan path constantly periodically agent deviation path exceeds threshold value particular condition achieved 
consistent limited perception policy may necessary assume goal place agent aware change 
simulated vision agent actual vision process simulated buffering hardware 
approach similar boulic thalmann renault thalmann thalmann prove successful vision channel information agent environment 
sensors rewritten simulated vision 
ffl infrared sensor simulated vision night vision simulated simply replacing visible light values infrared radiation values 
temporal constraints parameters vary simulation time remain constant 
desire achieve goal may eventually override desires agent may suffer increasing fatigue example 
simulation turned floating point time value passed 
default zero 
step fixed number seconds added simulation time 
parameters may constant functions time variable 
uncertainty object sensing currently object sensor provides exact location object sensing object visible agent 
approach introduce uncertainty simulation robotics researchers simulate robots building simulation begins random point chosen circle centered object radius equal uncertainty radius defined user 
agent thinks object point 
simulation step step taken agent perceived location object moved random amount equal user defined distance random direction 
distance change depending number type points local environment 
wandering open field agent perception location relative location vary agent thinks target object near tree visible distance agent head straight tree 
object visible agent distance size atmospheric effects considered perceived location set exact location 
introducing uncertainty allow realistic simulations realistic simulated robots 
part appendices appendix additional behaviors appendix research behaviors omitted sample locomotion control system attraction deep spaces field view avoidance 
include existing behavioral set sufficient examples additional behaviors potentially useful domains 
attraction deep spaces agents running flying crowded area dense forest tend move direction greatest depth 
depth sensor combined attract control behavior simulates behavior 
depth sensor detects direction greatest weighted depth similarly anderson donath open space attraction behavior depth width deciding factor 
depth sensor uses output array range sensors covering agents entire field view calculate direction greatest depth 
range sensor takes parameters ffl minimum detection threshold min ffl maximum detection threshold max ffl field view angle ffl orientation relative agent oe agent depth sensor agent orientation agent minimum detection threshold maximum detection threshold bit range sensor ffl resolution bits detects objects intersect fan shaped region defined minimum maximum detection threshold values 
similar sonar range sensor output distance nearest part nearest detected object 
sensor weight cos sensor weight cos bias bias range sensor weighting functions object detected code gamma returned number bits resolution number bits return value 
return value inversely proportional stress value range sensor 
stresses range sensors weighted cosine function cos cos summed yielding stress value depth sensor 
bias insures minimum weight sensor 
bias 
shows agent working way simple maze 
depth attraction behavior behavior bound agent 
eighteen range sensors degree field view deg compose depth sensor 
bit range sensors covering agent field view detect objects meters away agent 
simulation weighting function cos bias 
attraction deep spaces method obstacle avoidance realistic proximity sensor obstacle avoidance especially agent moving quickly region densely populated obstacles 
example animal running woods agent maneuvering maze depth sensor navigation avoid predator human running crowd benefit behavior 
field view avoidance finding covered concealed locations respect known opponent enemy applications military gaming 
implementation behavior agent attempts achieve goal avoiding gaze hostile agents 
views may obscured obstacles structures terrain attenuated distance atmospheric effects smoke fog 
field view avoidance behavior uses sensor determine agent visible specified set 
stress proportional number see agent inversely proportional distances agents 
field view sensor uses simple vision model 
rays cast point hostile eyes agent 
rays hit agent intersecting environment agent visible hostile 
casting rays improve visibility test accuracy ray casting computationally expensive operation system slow significantly result 
better vision model take advantage buffering hardware simulate analyze hostile view 
attraction avoidance field view avoidance combine guide agent goal seen hostile agent hiding bottom shows agent arriving goal having avoided walls field view stationary hostile bottom image 
able effectively implement behavior omit locomotion control system important reason 
violates principle limited perception 
agent guess hostile located environment unrealistic agent know visible hostile particular step 
analysis behavior realized realistic implementation involve user planner level 
agent moves world remains aware local environment vision simulated ray casting 
agent sees hostile system terminates agent locomotion sends message calling system user 
decision may level agent reaction 
appendix groups thousands fishes moved huge beast piercing water 
appeared united bound common fate 
comes unity 
anonymous th century generating reasonable agent behavior simulated real difficult problem 
generating reasonable group behavior complex 
combines single agent problem need form maintain coherent group relying explicit communication 
goal group behavior research agents group herd flock school form centralized coordination 
animals group 
nature grouping advantageous predators 
group profits larger effective search pattern quest food able hunt larger powerful animals animals individuals 
prey attempts evade leading animal group close animals back placed catch 
grouping advantageous prey 
safer group 
predators easily surprise large group 
animal detects predator alerts group evasive maneuvers 
grouping benefits average group member limiting average number encounters predators statistically improving survival shared gene pool attacks predators 
predators attack nearest prey usually edge group prey hereditary tendency push center group favored natural selection 
addition small energy savings result drafting running flying swimming 
savings may critical race 
part group improves chance social mating activities 
group research natural groups consist agents exhibit balanced opposing behaviors desire stay close group desire avoid collisions group 
fish density school observed roughly uniform fish sphere head wished contact sphere fish 
birds flock tend exhibit categories awareness nearest neighbors rest flock 
researchers gone single agent case attempt model groups robots simulated animals swarm intelligence beni wang deneubourg beckers mataric 
kube zhang common goal non interference behavior simple form cooperation :10.1.1.32.9106
non interference simply robot avoidance implementation 
steels describes simulation simple robots principles self organization perform gathering task 
brooks report set simulations similar domain fully decentralized collection non communicating robots :10.1.1.110.6657
arkin describes schema approach designing simple navigation behaviors extended multiple physical agents 
mataric cites various researchers study simulate ant colonies examples simulations simple organisms collectively producing complex behaviors emerging simple interactions including beni colorni dorigo maniezzo travers 
mataric proposed set basic behaviors basis set grouping behaviors ffl safe wandering minimizes collisions agents environment keeping agents moving maintaining minimum distance :10.1.1.29.5356:10.1.1.29.5356
ffl minimizes interference structuring movement agents achieving maintaining minimum angle position leader relative follower 
ffl aggregation gathers agents achieving maintaining maximum distance 
ffl dispersion dissipates agents achieving maintaining minimum distance 
ffl homing enables agent proceed particular location decreasing distance agent goal location called home 
mataric investigations emergent behavior group dynamics wheeled vehicles explicit communication demonstrate combinations simple behaviors attraction repulsion form basic behaviors produce complex relationships herding foraging gathering flocking 
architecture capable endowing agents basic behaviors capable simulating groups exhibit mataric grouping behaviors 
bibliography adams hu 
real time architecture obstacle avoidance path planning mobile robots 
proceedings ieee international conference robotics automation pages 
philip agre 
dynamic structure everyday life 
phd thesis mit artificial intelligence laboratory 
technical report 
philip agre david chapman 
pengi implementation theory activity 
proceedings aaai conference pages june 
philip agre david chapman 
plans 
pattie maes editor designing autonomous agents pages 
mit press 
omar ahmad james cremer joseph kearney peter stuart hansen 
hierarchical concurrent state machines behavior modeling scenario control 
proceedings conference ai simulation planning high autonomy systems gainesville fl dec 
mcneill alexander 
locomotion animals 
son limited 
tracy anderson max donath 
animal behavior paradigm developing robot autonomy 
pattie maes editor designing autonomous agents pages 
mit press 
andrews 
impedance control framework implementing obstacle avoidance manipulator 
thesis mit department mechanical engineering 
arkin 
cooperation communication multiagent schema robot navigation 
journal robotic systems 
ronald arkin 
unification navigational planning reactive control 
aaai spring symposium robot navigation working notes pages march 
ronald arkin 
integrating behavioral perceptual world knowledge reactive navigation 
pattie maes editor designing autonomous agents pages 
mit press 
badler webber becket geib moore pelachaud reich stone 
planning parallel transition networks animation new frontiers 
shin kunii editors computer graphics applications proc 
pacific graphics pages 
world scientific publishing river edge nj 
badler webber becket geib moore pelachaud reich stone 
planning animation 
magnenat thalmann thalmann editors interactive computer animation 
prentice hall 
norman badler cary phillips bonnie webber 
simulating humans computer graphics animation control chapter pages 
oxford university press 
norman badler bonnie webber barry reich 
personalities animated agents reactive planning behaviors 
robert trappl paolo petta editors creating personalities synthetic actors 
book chapter appear 
ballard li whitehead 
hand eye coordination sequential tasks 
philosophical transactions royal society london london march 
bates 
role emotion believable agents 
communications acm 
becket norman badler 
integrated behavioral agent architecture 
proceedings third conference computer generated forces behavior representation pages orlando florida march 
becket 
jack lisp api 
technical report ms cis university pennsylvania philadelphia pa 
becket 
discrete continuous learning behavioral control simulated autonomous agents 
phd thesis university pennsylvania 
randall beer hillel leon sterling 
biological perspective autonomous agent design 
pattie maes editor designing autonomous agents pages 
mit press 
beni 
maximum entropy principle sensing swarm intelligence 
varela bourgine editors practice autonomous systems proceedings european conference artificial life pages 
mit press 
beni wang 
swarm intelligence cellular robotic systems 
nato advanced workshop robots biological systems il italy 
peter bonasso james marc slack 
reactive robot system find fetch tasks outdoor environment 
proceedings th national conference artificial intelligence pages 
boulic thalmann 
automatic derivation curved human walking trajectories vision 
proceedings computer animation pages geneva switzerland may 
ieee computer society press 
braitenberg 
vehicles experiments synthetic psychology 
mit press 
brogan hodgins 
group behaviors systems significant dynamics 
proceedings ieee rsj international conference intelligent robot systems 
rodney brooks 
achieving artificial intelligence building robots 
memo mit ai lab 
rodney brooks 
robust layered control system mobile robot 
ieee journal robotics automation pages april 
rodney brooks :10.1.1.110.6657
elephants don play chess 
pattie maes editor designing autonomous agents pages 
mit press 
rodney brooks :10.1.1.18.4669
intelligence reason 
ijcai pages august 
rodney brooks :10.1.1.12.1680
intelligence representation 
ai journal 
rodney brooks 
new approaches robotics 
science 
rodney brooks jonathan connell 
asynchronous distributed control system mobile robot 
spie cambridge symposium optical electronic engineering proceedings volume pages october 
armin bruderlin tom calvert 
knowledge driven interactive animation human running 
graphics interface pages may 
david chapman 
planning conjunctive goals 
artificial intelligence 
david chapman 
penguins cake 
ai magazine winter 
david chapman 
vision instruction action 
mit press 
chatila laumond 
position referencing consistent world modeling mobile robots 
proceedings ieee conference robotics automation pages march 
colorni dorigo maniezzo 
distributed optimization ant colonies 
varela bourgine editors practice autonomous systems proceedings european conference artificial life pages 
mit press 
jonathan connell 
colony architecture artificial creature 
technical report mit ai lab june 
jonathan connell 
sss hybrid architecture applied robot navigation 
technical report ibm research report 
cox 
autonomous robot vehicle structured environments 
ieee journal robotics automation pages 
chris crawford 
evolutionary game design 
morph digital frontier pages april 
james cremer joseph kearney 
framework behavior scenario virtual environments 
acm transactions modeling computer simulation july 
james cremer joseph kearney peter 
vehicle behavior model virtual driving environments 
proceedings conference ai simulation planning high autonomy systems la jolla ca march 
cullen shaw baldwin 
methods measuring dimensional structure fish schools 
animal behavior 
deneubourg beckers 
swarm architectures 
varela bourgine editors practice autonomous systems proceedings european conference artificial life pages 
mit press 
brett douville 
theoretical description pat nets 
technical report department computer information science university pennsylvania 
ferber 
behavioral simulation model study emergent social structures 
varela bourgine editors practice autonomous systems proceedings european conference artificial life pages 
mit press 
andrew william warren leslie kaelbling 
ecological robotics controlling behavior optical flow 
proceedings seventeenth annual conference cognitive science society 
elfes 
sonar mapping navigation system 
proceedings ieee international conference robotics automation page 
richard fikes nils nilsson 
strips new approach application theorem proving problem solving 
artificial intelligence 
robert firby :10.1.1.17.9
adaptive execution complex dynamic worlds 
phd thesis yale university 
james foley andries van dam steven feiner john hughes 
computer graphics principles practice 
addison wesley publishing reading ma nd edition 
erann gat 
alfa language programming reactive robotic control systems 
proceedings ieee international conference robotics automation pages april 
erann gat 
robust low computation sensor driven control task directed navigation 
proceedings ieee international conference robotics automation pages april 
erann gat 
second left reliable goal directed reactive control real world autonomous robots 
phd thesis dept computer science vpi 
erann gat 
integrating planning reacting heterogeneous asynchronous architecture controlling real world mobile robots 
proceedings th national conference artificial intelligence pages 
erann gat 
role stored internal state control autonomous mobile robots 
ai magazine pages spring 
erann gat joe joe 
semi automated forces corps battle simulation 
proceedings third conference computer generated forces behavior representation pages orlando florida march 
erann gat david miller 
modular low computation robot control object acquisition retrieval 
jpl internal report 
erann gat marc slack david miller james firby 
path planning execution monitoring planetary rover 
proceedings ieee international conference robotics automation pages 
christopher geib 
intentional planning system 
phd thesis university pennsylvania 
georgeff 
agents plans 
proceedings th international joint conference artificial intelligence montreal 
invited lecture 
michael georgeff amy lansky 
reactive reasoning planning 
james allen james hendler austin tate editors readings planning pages 
morgan kaufmann publishers 
matthew ginsberg :10.1.1.50.8134
universal planning universally bad idea 
ai magazine winter 
chatila 
integrated navigation motion control system autonomous multisensory mobile robots 
brady paul editors international symposium robotics research pages 
mit press cambridge ma 
gould 
making computer character animation great unlimited possibility just tedious 
siggraph course notes character animation computer 
pages 
john becket barry reich jonathan crabtree norman badler 
behavioral control real time simulated human agents 
pat hanrahan jim editors symposium interactive graphics pages april 
david richard parent 
behavioral testbed obtaining complex behavior simple rules 
visual computer 
hayes roth 
agents stage advancing state art ai 
proceedings th international joint conference artificial intelligence pages montreal 
hodgins brogan 
robot herds group behaviors systems significant dynamics 
proceedings artificial life iv pages 
hodgins brogan brien 
animating human athletics 
computer graphics pages august 
jessica hodgins 
dimensional human running 
proceedings ieee conference robotics automation 
klaus colin beer 
dictionary ethology 
harvard university press 
inman henry ralston frank todd 
human locomotion 
jessica rose james gamble editors human walking pages 
williams wilkins 
leslie kaelbling 
rex symbolic language design parallel implementation embedded systems 
proceedings aiaa conference computers aerospace 
leslie kaelbling 
goals parallel program specifications 
proceedings aaai conference 
leslie kaelbling 
architecture intelligent reactive systems 
james allen james hendler austin tate editors readings planning pages 
morgan kaufmann publishers 
khatib 
real time obstacle avoidance manipulators mobile robots 
proceedings ieee international conference robotics automation 
ko 
kinematic dynamic techniques analyzing predicting animating human locomotion 
phd thesis university pennsylvania 
ko norman badler 
animating human locomotion real time inverse dynamics balance comfort control 
ieee computer graphics applications march 
ko james cremer 
real time human locomotion positional input streams 
presence fall 
ko barry reich becket norman badler 
terrain navigation skills reasoning 
proceedings fourth conference computer generated forces behavioral representation pages orlando florida may 
ronald kube hong zhang :10.1.1.32.9106
collective robotic intelligence 
proceedings second international conference simulation adaptive behaviors pages honolulu hawaii december 
benjamin kuipers tod levitt 
navigation mapping large scale space 
ai magazine summer 
langton 
artificial life 
addison wesley 
langton 
computation edge chaos phase transitions emergent computation 
physica 
jean claude latombe 
robot motion planning 
kluwer academic publishers 
michael longtin 
cover concealment modsaf 
proceedings fourth conference computer generated forces behavioral representation pages orlando florida may 
tom lozano erez michael wesley 
algorithm planning collision free paths polyhedral obstacles 
communications acm october 
pattie maes 
dynamics action selection 
ijcai pages detroit mi 
pattie maes 
designing autonomous agents theory practice biology engineering back 
pattie maes editor designing autonomous agents pages 
mit press 
pattie maes 
situated agents goals 
pattie maes editor designing autonomous agents pages 
mit press 
pattie maes 
agents reduce information overload 
communications acm july 
pattie maes 
artificial life meets entertainment lifelike autonomous agents 
communications acm 
sang mah thomas calvert william 
constraint reasoning framework behavioural animation 
computer graphics forum 
marr 
vision 
freeman san francisco 
maja mataric 
distributed model mobile robot environment learning navigation 
technical report ai tr mit ai lab 
maja mataric 
behavior control main properties implications 
proceedings ieee international conference robotics automation workshop architectures intelligent control systems pages nice france may 
maja mataric 
designing emergent behaviors local interactions collective intelligence 
meyer roitblat wilson editors proceedings animals animats second international conference simulation adaptive behavior sab pages 
mit press 
maja mataric 
minimizing complexity controlling mobile robot population 
proceedings ieee international conference robotics automation pages 
maja mataric 
kin recognition similarity group behavior 
proceedings fifteenth annual cognitive science society conference pages boulder colorado june 
lawrence erlbaum associates 
maja mataric :10.1.1.29.5356
interaction intelligent behavior 
phd thesis massachusetts institute technology may 
maturana varela 
tree knowledge biological roots human understanding 
new science library boston ma 
michael mauldin 
chatterbots turing test entering prize competition 
proceedings aaai conference pages 
mit press 
mcfarland editor 
oxford companion animal behavior 
oxford university press 
miller slack 
global symbolic maps local navigation 
proceedings ninth national conference artificial intelligence anaheim california july 
aaai press 
david miller rajiv desai erann gat robert john 
reactive navigation rough terrain experimental results 
proceedings th national conference artificial intelligence pages 
michael moore 
search plans 
technical report ms cis linc lab ircs department computer information science university pennsylvania 
michael moore christopher geib barry reich 
planning terrain reasoning 
aaai spring symposium integrated planning applications stanford ca 
university pennsylvania cis department technical report ms cis linc lab 
michael moore christopher geib barry reich 
planning reactive behaviors hide seek 
proc 
th conference computer generated forces behavioral representation orlando fl may 
institute simulation training 
moravec 
rover visual obstacle avoidance 
proceedings th international joint conference artificial intelligence pages 
moravec cho 
bayesian method certainty grids 
aaai spring symposium robot navigation pages march 

descriptive science animal locomotion popular 
press chicago 

human motion 
dover publications new york 

animal locomotion university pennsylvania 
arno press new york 

complete human animal locomotion 
dover publications new york 

male female motion 
dover publications new york 
nils nilsson 
principles artificial intelligence 
morgan kaufmann san mateo california 
nils nilsson 
shakey robot 
sri international technical note 
partridge 
structure function fish schools 
scientific american pages june 
david payton 
architecture reflexive autonomous vehicle control 
ieee robotics automation conference 
david payton 
internalized plans representation action resources 
pattie maes editor designing autonomous agents pages 
mit press 
ken perlin 

siggraph video review 
ken perlin 
real time responsive animation personality 
ieee transactions visualization computer graphics march 
barry reich ko becket norman badler 
terrain reasoning human locomotion 
proceedings computer animation pages geneva switzerland may 
ieee computer society press 
olivier renault nadia magnenat thalmann daniel thalmann 
vision approach behavioral animation 
journal computer animation 
craig reynolds :10.1.1.48.7069
flocks herds schools distributed behavioral model 
computer graphics 
craig reynolds 
stanley breaking ice 
siggraph video review 
craig reynolds 
bumping things 
siggraph course notes developments physically modeling 
pages 
gary 
connectionist modelling skill dynamics 
journal visualization computer animation 
jessica rose henry ralston james gamble 
walking 
jessica rose james gamble editors human walking pages 
williams wilkins 
shaw 
schooling fishes critique review 
aronson rosenblatt editors development evolution behavior pages 
shaw 
fish schools 
natural history 
herbert simon 
sciences artificial 
mit press cambridge massachusetts 
marc slack 
driven local navigation mobile robots april 
jpl publication california institute technology jet propulsion laboratory 
marc slack 
navigation templates mediating qualitative guidance quantitative control mobile robots 
ieee transactions systems man cybernetics march april 
aaron sloman riccardo poli 
sim agent toolkit exploring agent designs 
wooldridge muller tambe editors intelligent agents ii lnai pages 
springer verlag heidelberg germany 

reactive control mobile robot 
proceedings ieee international conference robotics automation pages 
luc steels 
cooperation distributed agents self organization 
workshop multi agent cooperation 
north holland cambridge uk 
luc steels 
exploiting analogical representations 
pattie maes editor designing autonomous agents pages 
mit press 
luc steels 
emergent functionality robotic agents line evolution 
rodney brooks pattie maes editors proceedings th international workshop synthesis simulation living systems pages cambridge ma july 
mit press 
arthur 
human body normal pathological conditions 
charles thomas publisher 
demetri terzopoulos tu grzeszczuk 
artificial fishes autonomous locomotion perception behavior learning physical world 
pattie maes rodney brooks editors proceedings artificial life iv cambridge ma 
mit press 
robert 
local obstacle avoidance mobile robots method artificial potentials 
proceedings ieee international conference robotics automation pages 
travers 
animal construction kits 
langton editor artificial life 
addison wesley 
thomas chopra barry reich michael moore norman badler bonnie webber christopher geib 
decision networks integrating behaviors virtual agents avatars 
ieee vrais 
tu demetri terzopoulos 
artificial fishes physics locomotion perception behavior 
computer graphics 
toby 
computational mechanisms action selection 
phd thesis university edinburgh 

visual routines 
cognition 

handbook behavioral neurobiology volume social behavior communication 

eds 
bonnie webber norman badler 
animation reactions transition nets plans 
proc 
int workshop human interface technology aizu japan october 
wehner 
matched filters neural models external world 
journal computational physiology 
jane wilhelms 
automatic control 
ieee computer graphics applications april 
jane wilhelms robert skinner 
notion interactive behavioral animation control 
ieee computer graphics applications may 

