touringmachines architecture dynamic rational mobile agents andrew ferguson clare hall dissertation submitted degree doctor philosophy university cambridge october summary computer controlled operating environments facilities automated factories nuclear power plants telecommunications centres space stations continually complex 
complexity grows increasingly difficult control environments centralised management scheduling policies robust face unexpected events flexible dealing operational environmental changes occur time 
solution problem growing appeal distribute control operations number intelligent task achieving computational agents 
real world domains populated multiple agents 
domains agents typically perform number complex tasks requiring degree attention paid environmental change temporal constraints computational resource bounds impact agents shorter term actions longer term goals 
operating real world means having deal unexpected events levels granularity time space 
agents remain reactive order survive amount strategic predictive decision making required agents coordinate actions agents handle complex tasks effective manner 
dissertation presents new integrated agent architecture designed provide rational autonomous mobile agents diverse range behaviours normally required carry complex resource constrained tasks dynamic real time multi agent domains 
surveying collection existing architectures due consideration requirements producing effective robust flexible behaviours particular class domains resulting software control architecture touringmachine agent architecture designed integrating number deliberative non deliberative control functions 
arranged layered fashion combination functions endows agents rich collection reactive goal oriented reflective predictive capabilities 
recognition complex relationship exists agent internal configuration task environment ensuing behavioural repertoire agent architecture implemented conjunction feature rich instrumented simulation testbed 
testbed permits creation diverse set single multi agent navigation task scenarios evaluate utility architecture identify main strengths weaknesses 
touringmachines architecture dynamic rational mobile agents ferguson declaration declare dissertation result explicitly stated text contains outcome done collaboration 
part dissertation currently submitted degree diploma qualification university 
ferguson october related publications selected aspects research described dissertation earlier related documented published ferguson 
touringmachines autonomous agents attitudes 
ieee computer may 
ferguson 
touringmachines autonomous agents attitudes 
technical report computer laboratory university cambridge uk april 
appear ed 
readings computer architectures intelligent systems ieee computer society press los alamitos ca 
published 
ferguson 
architecture adaptive rational mobile agents 
werner demazeau eds 
decentralized ai elsevier science north holland amsterdam 
appears proc 
third european workshop modelling autonomous agents multi agent worlds kaiserslautern germany august 
ferguson 
intelligent robotic control 
ai engineers ai applications institute university edinburgh scotland uk september 
ferguson 
architecture adaptive rational mobile agents extended 
georgeff rao eds 
proc 
ijcai workshop theoretical practical design rational agents sydney australia august 
appears galliers ed technical report computer laboratory university cambridge uk august 
ferguson 
touring machines rational planners open worlds 
proc 
belief representation agent architecture workshop cambridge uk march 
appears galliers ed technical report computer laboratory university cambridge uk may 
supervisor william clocksin invaluable guidance early days research continued assistance stay computer laboratory 
give special julia galliers continued encouragement interest life lab fruitful interesting enjoyable 
want various colleagues friends suggestions comments criticisms went change believe improve ideas outlook 
include jane dunlop colin ferguson julia galliers raj gor feng huang george kiss barney pell han reichgelt thomas vogel 
am grateful steve pulman allowing attend vehicle rationality group discussions sri cambridge university computing service cus 
shen helpful matters concerning sicstus prolog mats carlsson ted kim regarding 
johnson graham chris hadley provided needed systems support lewis paola bishop great assistance hours spent library 
suspect extra cups coffee sheila cathy helped way 
go wife jane dunlop feel put mention dragged atlantic study cambridge 
acknowledge continued support years ferguson carson nancy ferguson chris fagan ferguson ome martinez bill westwood dick norrie 
large amount financial assistance clearly possible 
bell northern research committee vice principals universities united kingdom clare hall ijcai computer laboratory cambridge philosophical society definitely wife jane 
madre si pero es para 
contents intelligent agent design outline dissertation intelligent agent design history evolution deliberative architectures irma bratman wood behaviour hierarchies durfee montgomery agent oriented programming shoham homer vere bickmore non deliberative architectures subsumption architecture brooks situated automata rosenschein kaelbling pengi agre chapman reactive action packages firby universal plans schoppers dynamic action selection maes hybrid architectures procedural reasoning system georgeff adaptive intelligent systems hayes roth dynamic reaction hendler phoenix cohen decision theoretic control intelligent agency issues touringmachines overview control framework perception action subsystems control rules inter layer message passing touringmachines layered approach touringmachines resource boundedness rationality touringmachines real time activity touringmachines reactive layer operation layer reacting touringworld touringmachines planning layer overview layer focus attention operation planner overview operation planning touringworld touringmachines modelling layer overview layer focus attention explanation reasoning models handling model discrepancies theory formation selection prediction overview projecting models handling goal conflicts generating expectations closing loop modelling touringworld touringworld testbed overview touringworld testbed touringworld domain vi touringworld testbed scenario level processes environment level processes entity level processes evaluating touringmachines purpose experimentation behavioural ecology touringmachines methodological issues single agent scenarios reflective goal monitoring sensitivity model discrepancies predicting possible goal conflicts efficiency versus reliability emergent behaviour choosing right configuration multi agent scenarios counterfactual reasoning modelling agents intentions useful monitoring environment sensitivity versus efficiency discussion summary summary ideas explaining behaviours controlling inference adaptive behaviour social agency touringworld scenario grammar scenario level declarations environment level declarations entity level declarations bibliography vii moved middle activity machines robots train cars rushing quickly 
stepped path rushing vehicles wanting pull back 
expected accidents took place robots machines gauging actions reacting perfectly 
concept deliberation clear 
movement needed deliberate constant forward momentum 
judgement idea movement steady avoided gauged 
erratic movement dangerous abrupt jump back movements fatal 
understood concept easier walk path rushing vehicles 
mike isaac asimov robot city dissertation concerned provision integrated control architecture autonomous agents associated simulation testbed aimed facilitating specification analysis agents wide range complex multi agent task scenarios 
intention provide implementation software control architecture competent functionally rich behaviourally diverse encourages readily facilitates extensive experimental evaluation 
desire motivated observation large scale computer controlled systems facilities increasingly decentralised potentially stand benefit incorporation distributed task achieving autonomous agent processes intelligent robust flexible predominantly centralised computational processes 
type agent process concern includes autonomous mobile agents expected operate dynamic real time domain example automated factory floor traffic environment required carry reasonably complex time constrained tasks presence similarly goal directed agents 
dynamic real time nature chosen task domain poses problems agents 
particular agents assumed limited internal computational resources limited knowledge agents intended tasks limited means acquiring information environment agents required respond quickly number immediate external threats time dealing host equally unexpected intra inter agent goal conflicts 
dissertation presents new integrated control architecture touringmachine agent architecture designed provide autonomous resource bounded agents diverse range reactive goal oriented reflective predictive behaviours typically required order carry complex time constrained navigational tasks dynamic real time multi agent environments 
analyse performance touringmachines facilitate study behavioural ecology relationship agent internal configuration task environment behavioural repertoire architecture designed implemented conjunction feature rich instrumented simulation testbed 
intelligent agent design computer controlled operating environments facilities automated factories nuclear power plants telecommunications centres space stations continually complex 
complexity grows increasingly difficult control environments centralised management scheduling policies robust face unexpected events flexible dealing operational environmental changes occur time 
solution problem growing appeal distribute dimensions space function control scheduling operations number intelligent task achieving computational robotic agents 
dissertation agent shall considered goal directed computational process capable robust flexible interaction environment 
henceforth avoid adjectival overload partially structured dynamic realtime multi agent environments touringmachines just described complex 
today computational robotic agents limited performing relatively small range defined pre programmed human assisted tasks 
order survive thrive complex domains agents need considerably robust flexible skilled dealing exceptional events 
domains agents typically perform complex tasks requiring degree attention paid environmental change temporal deadlines computational resource bounds impact agents shorter term actions having longer term goals 
hand time slow deliberate possible courses action world state 
intelligent resource bounded agents require range skills monitor respond promptly unexpected events simultaneously able carry pre programmed tasks resolve recover unexpected conflicts timely efficient manner 
real world domains populated multiple agents pursuing number tasks 
agents incomplete knowledge world compete limited shared resources inevitable time goals conflict 
attempts construct complex large scale systems envisaged conflicts foreseen catered advance expensive complex impossible undertake effort uncertainty involved accounting possible equipment design management operational changes lee pages 
clearly ongoing evolution intelligent functions autonomous control systems 
antsaklis suggest characteristics separate intelligent systems distinction tends clear intelligent systems evolve 
systems considered intelligent example james watt governor steam engines see chapter subsequently evolve gain character considered non intelligent numeric algorithmic systems 
control theory control systems engineering dw pages instance provide various numeric algorithmic methods example finite difference equations differential equations analysing synthesising control systems wide variety applications 
applications control systems constrained operate substantial uncertainty including execution environmental epistemic uncertainty systems reason temporal causal structure environments access richer powerful set representation reasoning methods prove useful artificial intelligence ai provides methods 
date emphasis ai research placed studying isolated functions capabilities perception planning natural language understanding belief modelling learning 
general little attention paid problem integrate deploy capabilities autonomous machines systems capable operating effectively complex environments 
motivated belief research integrated agent architectures serve main platforms development tomorrow intelligent robots researchers ai interested challenges building integrated ai systems interact surroundings operate robustly flexibly presence real time environmental change uncertainty 
dissertation concerned design implementation ai software architecture suitable controlling coordinating actions rational autonomous resource bounded agent embedded dynamic multi agent world 
research dissertation involved complementary efforts understanding functional behavioural requirements intelligent rational autonomous mobile agents particular class real time multi agent domain ii realising particular design implementation integrated agent architecture satisfying requirements identified iii designing implementing highly instrumented parametrized multi agent simulation testbed observe analyse various aspects agent level problem solving coordination behavioural ecology 
operating real world means having deal multiple events levels granularity time space 
agents remain reactive order say survive amount strategic predictive decision making required agents coordinate ai methods research vehicle help understanding complex problems help organising synthesising new approaches problem solving 
come surprise solutions control problems develop purely algorithmic approaches desirable implementation characteristics control systems engineering eventually substitute ai techniques 
definition rational behaviour borrowed bratman bip page corresponds production actions goals agent conception world 
entity considered autonomous suggested lindsay cl page perceived goals able select variety goals attempting achieve addition entity includes measure complexity interaction movement preferably fluid variety behaviours robustness differential responsiveness variety environmental conditions selective attention independent existence detailed knowledgeable intervention 
cl page 
actions agents handle complex time constrained goals keeping long term options open 
agents expected model surroundings detail simply events consider large number little relevance anyway 
required effect architecture cope uncertainty react unforeseen events recover dynamically poor decisions 
course top accomplishing tasks originally assigned 
surprisingly widely accepted purely deliberative purely non deliberative control techniques capable producing range effective robust flexible behaviours desired intelligent agents 
thesis dissertation desirable feasible combine non deliberative suitably designed integrated deliberative control functions single architecture order obtain effective robust flexible behaviours rational autonomous resource bounded agents carry tasks class challenging domains partially structured dynamic real time inhabited intentional agents central authority 
secondary hypothesis investigated dissertation claim establishing appropriate balance reasoning acting depends heavily characteristics task environments agents intended operate 
address fundamental trade offs involved agent architecture design exists agent representational power words generality flexibility behaviour ease designer program test debug run time efficiency resulting touringmachine architecture designed integrating collection deliberative non deliberative agent control capabilities 
capabilities include situated action focus attention planning various forms commonsense reasoning agents mental states beliefs desires intentions 
architecture centred number modular independent task achieving control layers aimed ensuring high degree operational concurrency 
real time constraints imposed agents embedded dynamic environments account taken touringmachines limited computational resources order guarantee upper bound latency opera term deliberative implies agent possesses reasonably explicit representations beliefs plans goals uses deciding action select time 
conversely non deliberative implies agent beliefs plans goals implicitly embedded pre compiled agent structure designer 
examples agent architectures classified deliberative non deliberative hybrid combining aspects approach chapter 
tions sensing attention focussing planning world modelling 
result architecture produce number reactive goaldirected reflective predictive behaviours dictated agent mental state environmental context 
research dissertation adopts fairly pragmatic approach understanding complex environments constrain design agents conversely different navigational task constraints functional capabilities agents combine produce different behaviours 
evaluate touringmachines highly instrumented parametrized multi agent simulation testbed implemented conjunction touringmachine control architecture 
enabling user specify observe analyse number user customised agents variety single multi agent settings testbed provides powerful platform empirical study touringmachine behaviour 
worth pointing stage focus research functional behavioural requirements individual agents carry non shared tasks heterarchical multi agent environments 
particular dissertation concerned requirements agents operate framework hierarchical organisation joint collective tasks 
addition restriction architecture dissertation ignores obvious requirement agents capable adapting new environments learning past experiences 
clear skills able interact coordinate social context able improve task performance form machine learning highly desirable essential intelligent autonomous agents operating multi agent domains 
concerns lie outside scope dissertation remain candidates see chapter 
outline dissertation chapter gives brief overview past intelligently controlled systems fields engineering cybernetics artificial intelligence robotics distributed artificial intelligence 
comprehensive review examples integrated agent architectures discussion major requirements challenges desiderata vis vis design construction intelligent autonomous agents 
touringmachine agent control architecture introduced chapter 
overview architecture capabilities structure including concurrent task achieving layers enveloping control framework perception action subsystem interfaces 
touringmachines resource boundedness real time operational characteristics addressed 
chapters expand major design operational implementational issues relating control layers constitute core touringmachine architecture reactive planning modelling control layers respectively 
chapter describes touringworld testbed instrumented multiagent simulation testbed enables controlled empirical investigations dynamic behaviour user customised touringmachine agents range user specified environmental conditions 
chapter provides detailed characterisation particular multi agent navigation domain chosen platform implementing evaluating touringmachine architecture 
experimentation touringmachine agent architecture touringworld testbed described chapter 
various aspects touringmachine performance behavioural ecology studied discussed number single multi agent scenarios 
issues ideas evaluation 
chapter provides summary dissertation major contributions research 
limitations ideas enhancing agent architecture concluding remarks dissertation 
appendix gives complete extended bnf grammar defining testbed user level language touringmachine agents touringworld scenarios environments 
intelligent agent design law ought trust people care interest local situations generally able judge better 
adam smith inquiry nature causes wealth nations history evolution quest design intelligent control artificial systems dates back long time 
electronic computers invented instance engineer james watt mechanical feedback control way automatically regulating velocity rotation steam engines controlling energy intake 
feedback control devices known governors designed refine actions produce stability dynamical systems process called negative feedback words feeding output system back input means comparing actual intended performance compensatory changes input undertaken gre pages 
centuries concept feedback prove fundamental development field cybernetics 
highly field cybernetics launched likes norbert weiner ross ashby grey walter principal aim unify mathematically disparate studies control communication animals machines 
inspiration term cybernetics derives greek meaning governor 
intelligent agent design came deployment world war ii analog electronic computers machines simulated physical systems representing changing quantities analogous moves shafts voltages tasks navigating aircraft controlling anti aircraft guns precision target bombing 
developers early analog computers struck apparent similarity internal operations computers regulatory systems living beings example homeostatic control body temperature blood glucose levels humans inspired build machines learn act alive mor pages 
due combination representational technological difficulties field cybernetics thrive decades 
arrival substantially powerful digital computers ability perform problem solving unprecedented complexity field artificial intelligence ai continue pursuit developing intelligent artificial systems 
inspired pioneering research people john von neumann alan turing claude shannon hope ability think rationally day performed machine early ai adopt view problem solving formal theorem proving heuristic search space goal subgoal structures 
foundational researchers alan newell herbert simon john mccarthy marvin minsky field ai seen appearance host artificial systems specialised successfully game playing mathematical discovery diagnosis planning natural language understanding 
biologically inspired artifacts produced ai researchers large tended concentrate building narrowly defined competence oriented systems formalisation simulation human intellectual reasoning processes 
alan turing suggested ways goal creating intelligent machine 
way brooks calls path bro page concentrate programming intellectual activities playing chess second embodied characterisation ai research admittedly describes systems class identified physical symbol system hypothesis class systems embodies essential nature symbols necessary sufficient condition generally intelligent agent new page 
non symbolic approaches ai example embodied connectionist artificial neural networks genetic algorithms omitted discussion read rk pages 
intelligent agent design path provide machine best sense organs money buy teach understand speak english 
tur page 
ai exclusively followed path relative ai robotics emerge mid sixties follow second paths 
influenced minsky seminal massachusetts institute technology involving coupling sophisticated computer control programs television cameras mechanical robot arms number mobile robotics projects soon emerge institutions notably shakey project led charles rosen nils nilsson stanford research institute cart project john mccarthy les hans moravec stanford artificial intelligence laboratory mor pages 
industrial robots way number reasonably defined typically non mobile niches progress robotics creating highly versatile programmable intelligent machines systematically extract manipulate information environments carry complex tasks faster appear achieved date ai 
construction intelligent artificial systems agents commonly called goal researchers distributed artificial intelligence dai branch ai concerned concurrency distribution ai computations 
evident subfield dai known multi agent ma systems deals coordination intelligent behaviour collection autonomous intelligent agents 
advance earlier ai sense deals agent level coordination problem solving multiple agents initial dai restricted considering strictly benevolent len fully knowledgeable rg resource unbounded agents working defined shared tasks geo operating highly wilson wil refers approach animat artificial animal approach holistic focussing complete systems animals exist realistic environments cope varied problems 
term robotics fact appeared science fiction story isaac asimov asi 
term derives czech word worker appear english language translation karel play rossum universal robots 
widespread popularity play helped replace term time automaton commonly term robot 
interested reader excellent overview major problem areas dai example task description decomposition inter agent communication coordination global coherence agent modelling resolving inter agent disparities historical antecedents current research dai bond gasser bg pages 
intelligent agent design structured task environments inter agent conflict programmed away tmc 
researchers dai begun consider realistic structured domains comprising groups decentralised autonomous agents constrained limited resources capabilities bounded rationality virtue inherent complexity unpredictability environments best expected behave respect goals decision methods produce optimal behaviour sim page 
number researchers fields ai dai robotics started turn attention problem designing implementing integrated control architectures intelligent agents known integrated agent architectures 
integrated agent architecture drummond kaelbling dk suggest theory paradigm may design program intelligent agents 
typically targeted dynamic unpredictable multi agent environments intelligent agent regarded structured collection sensors computers effectors structure sensors measure conditions world computers process sensory information effectors take action world 
changes world realised agent effectors close loop agent sensors agent described embedded environment 
number different integrated architectures proposed aimed providing agents particular level intelligent autonomous control 
broadly speaking different approaches classified mechanism action selection agent uses determining 
particular agent selects actions explicitly various options example internal symbolic world model search plan space considering expected utility available execution methods agent considered deliberative 
alternatively agent choice action determined words pre programmed way hardwired execute occurrence particular set environmental conditions described non deliberative 
agent bounded rationality required operate situations complexity environment immensely greater computational powers agent 
sim page 
genesereth nilsson prefer describe agents deliberate gn pages 
distinction deliberative non deliberative agents similar distinction simon sim pages systems exhibiting procedural rationality intelligent agent design interest architectures choice action realised combination deliberative non deliberative techniques 
agent architectures called hybrid 
subject dissertation falls area integrated agent architecture design 
expect integrated agent architecture research shares roots research fields mentioned 
example architecture dissertation touringmachine agent control architecture seen borrow techniques control systems engineering example self regulation negative feedback ai example planning causal reasoning robotics example mobile domain collision detection avoidance dai example task coordination modelling agents actions plans recognising reconciling conflicting intentions collection agents 
design principles control architecture appropriately reflect certain requirements different tasks environments developed 
true touringmachine control architecture 
discussing particular criteria arriving touringmachine architecture useful primarily characterise various strengths weaknesses different extant design approaches review representative examples deliberative non deliberative hybrid agent architectures 
fairly surge interest integrated agent architecture research consequent proliferation proposed designs quite difficult review existing agent architectures dissertation 
result sections limited focussing architectures relatively mature arguably influential largest impact field 
deliberative architectures deliberative agent architectures roots sense plan act problem solving paradigm classical ai planning systems strips fn noah sac 
aim planning systems generate provably correct action sequences plans separate execution effect achieving desired goal state 
success planners systems compute rational thing systems exhibiting substantive rationality simply rational thing 
interested reader acm sigart bulletin vol 
lai includes special section integrated cognitive architectures containing discussion papers number architectures reviewed 
intelligent agent design number important assumptions system complete date knowledge state world effects actions represented plan operators correct known advance state world remain unchanged explicitly acted planner 
deal uncertainty generating plans complex dynamic worlds number planning systems developed interleave plan formation execution example mcd monitor execution planned actions initiate form plan modification replanning actions achieve desired effect example autopilot tmc domain independent planners sipe wil ais 
plans generated systems typically contain explicit descriptions conditions required hold correct plan execution conditions periodically checked planner execution time 
planners interleave generation execution typically susceptible errors caused changes environment able cope degree execution uncertainty 
planning techniques typically employed systems time consuming suited domains replanning frequently necessary planner initial goals intentions may need modifying stage time available planning action varies depending planner situational circumstances geo 
number sophisticated planning systems developed greater lesser degree able meet requirements 
described 
irma bratman intelligent resource bounded machine architecture irma bip practical reasoning system system agent forms plans aimed producing rational behaviour resource bounded agents including number mechanisms limit amount computation performed 
irma belief desire intention bdi architecture includes fairly direct representations agent beliefs desires intentions 
agents intentions viewed structured larger plans bratman bip notes replanning modules planners typically drawbacks planning modules operating assumption world fixed execution usually require complete correct information possible unexpected events 
intelligent agent design functional role producing actions plans irma viewed having role constraining agent options reasoning 
architecture incorporates number modules including intention structure time ordered set partial tree structured plans means reasoner opportunity analyser filtering process deliberation process 
means reasoner suggests options action considering agent partial plans 
options suggested opportunity analyser monitors agent environment pertinent dynamic events 
options passed filtering process tested compatibility filter consistency agent existing plans 
surviving options passed deliberation process due consideration decide new intention adopt 
addition compatibility filter filtering process contains filter override mechanism effectively user level control knob determines agent environmental sensitivity controlling number new options agent consider deliberation 
single agent experiments irma architecture number different meta level reasoning deliberation filtering strategies range different environmental conditions studied tileworld simulation testbed pr 
wood motivated desire address different human task requirements involved vehicle driving architecture woo enables agents plan routes simulated multi agent traffic environment 
architecture centred planner integrates traditional problem solving generation hierarchical temporally ordered route plans process called dynamic goal creation continual run time creation modification planning subgoals aiming address planner changing situational constraints simultaneously strives bring agent nearer goal 
style plan generation notion isolating planner high level goal stability example fixed unchanging route plan subgoal lower level action instability example encounter red light 
order identify potentially relevant subgoals situational constraints incorporating plan run time agent planner extended various modules performing dynamic world modelling perception heuristic focus attention plan intention recognition 
recognising agents plans agents able associate observationally derived informa intelligent agent design tion inferred abstractly 
enables dynamic changes plans predictions possible conflicts interactions 
behaviour hierarchies durfee montgomery durfee montgomery dm experimented number blackboard agents autonomously flexibly coordinate activities exchanging information intended task related behaviours 
agents set prior knowledge tasks employ hierarchical negotiation protocol exchange iteratively differing levels abstraction information anticipated behaviours 
protocol centred notion behaviour hierarchy agents represent behaviours comparison behaviour descriptions received agents agent discover potential task interactions 
behaviour hierarchies subsume traditional notions plan goal hierarchies represent composition decomposition dimensions agent behaviour agent trying achieve trying achieve task intends carry task going carry task doing doing 
agents map received behaviours dimensional local behaviour representations proceed identify interacting behaviours arisen particular resource conflicts 
agents unique authority levels resolve conflicts decide continue alternate non interacting behaviour example differs terms space time exchange increasingly detailed information order identify specific terms behaviours interact 
scenarios involving mobile agents attempting plan collision free paths common area shared access points analysed mice testbed dm :10.1.1.16.8714
agent oriented programming shoham shoham sho proposed computational framework called agentoriented programming aop specification programming artificial agents 
agents defined entities possessing formal versions mental state formal versions knowledge belief 
current form aop agents considered purely deliberative 
ad intelligent agent design dition aop agents assumed operating non physical environments time pressure 
engineering point view aop regarded specialisation object oriented programming objects case agents possess various mental states 
formal point view aop regarded specialisation formal language epistemic logic belief augmented various modal operators commitment choice commitment oneself capability 
aop framework includes components restricted formal language describing agent mental state specifically explicit time point temporal logic basic modalities belief standard kd operator commitment ternary kd operator cmt oe signifying agent committed oe ii unimplemented interpreted programming language semantics derived directly semantics agent mental state iii compiler rosenschein kaelbling compiler situated automata see section agent level language model processes 
homer vere bickmore homer vb integrated ai artifact embedded simulated single agent object cluttered marine environment called 
homer integrates number deliberative capabilities including limited natural language generation recognition word english vocabulary medium coverage grammar temporal planning reasoning acting perceiving environment ability reflect experiences 
homer operations centred temporal planner uses synthesise plans response human user natural language goal commands 
goal commands typically include time constraints achievement preservation 
planner imposes goal protection conditions constantly monitored order detect plan violations plan time execution 
associated planner set declarative activity models precondition postcondition format describing actions inferences events agent knows 
homer employs actions go action plan collision free trajectories desired locations 
able form retain compound plans homer planner capable limited replanning order accommodate additional goals 
intelligent agent design homer sets limited knowledge world eventually gaining new information different objects world perceiving told directly user 
homer time stamps records events life placing episodic memory 
homer events include perceptions goal commands questions previously received user actions taken 
temporal planner various reflective processes monitoring processing personal memory homer able inferences provide answers range questions past experiences activities perceptions intentions 
non deliberative architectures number new architectures proposed compared deliberative architectures described adopt radically different stance vis vis select actions take 
non deliberative architectures including referred reactive situated behaviour typically necessary control decisions run time basis limited amounts information usually currently sensors limited internal state minimal amount inference hf 
traditional planners required produce optimal correct actions non deliberative architectures designed produce robust actions 
typically built relatively simple control mechanisms example finite state machines fsms domain specific stimulus response rules design architectures motivated part simon hypothesis complex behaviour agent need necessarily product complex internal design complexity agent behaviour may simply reflection complexity environment operates sim page 
common emphasis systems put things fairly direct coupling perception action control dynamic interaction environment characteristics environment exploited serve functioning agent intrinsic mecha extreme case agent internal state activity determined entirely current environment referred agent gn pages 
existing non deliberative architectures internal state avoid need store maintain complete correct internal models worlds 
intelligent agent design nisms dealing innate resource limitations incomplete knowledge mae 
gain better understanding systems number non deliberative agent architectures described 
subsumption architecture brooks brooks developed methodology architecture subsumption architecture controlling number mobile robots known artificial beings bro creatures bro 
subsumption architecture layered controlled system layer implementing control function perception memory attention judgement realises particular task achieving behaviour domain specific competence example obstacle avoidance random wandering 
way dividing agent faculties referred vertical decomposition contrast conventional horizontal method faculty decomposition pages things traditional planning systems 
layer subsumption architecture composed fixed topology network fsms data registers internal timing units 
layers communicate fixed length messages low bandwidth channels wires 
fsms layer change state arrival messages layers expiration designated time periods 
layers operate asynchronously parallel employ shared global memory 
control layered non hierarchically higher level layers subsuming roles lower level layers wish take control 
particular layers able finite pre programmed time periods substitute suppress inputs remove inhibit outputs lower level layers affect normal flow data layers 
careful programming inter layer control effect biasing agent actions achieving higher level goals attending lower level critical goals 
robots controlled subsumption approach successfully deployed tasks indoor room exploration map building simple route planning bro 
situated automata rosenschein kaelbling rosenschein kaelbling developed architecture real time operation foundations situated automata theory kae kae 
situated automata theory formal semantics embedded computation intelligent agent design gives specification information content internal states machine terms external states environment machine embedded 
specification described machine state said carry information iff machine state proposition holds environment situation machine said know 
theory computation lead programming methodology embedded agents agent viewed performing transduction stream perceptual inputs receives environment stream actions effects environment 
computation agent modelled finite state machine expressed sequential circuit guaranteed perform computations constant time bounded steps 
situated automata approach designed allow automatic compilation high level task environment descriptions low level reactive control mechanisms 
assist task authors developed high level goal reduction language facilitates programming agent action component automatically generating appropriate combinational logic networks condition action rules rex lisp hardware description language generating low level executable sequential circuits 
pengi agre chapman pengi ac autonomous agent penguin operates simulated world real time video game number hostile predator agents killer bees 
pengi design inspired investigations dynamics routine activity results suggest agre chapman activity derives simple sorts machinery interacting agent immediate situation 
pengi activity notion routine pattern interaction agent world 
routines opportunistic typically represented agent 
agent engaging routine driven preconceived notion happen situation changes responses simply applicable 
agent said actions 
addition pengi activity guided focussing relevant properties immediate environment 
agre chapman call properties agent indexical functional aspects 
framework agent accesses world terms ontology example block pushing traditional computationally expensive objective ontology intelligent agent design order logic require instantiation variables 
agent architecture composed central system peripheral system 
central system implemented combinational network situation action rules responsible selecting actions appropriate agent situational circumstances 
peripheral system responsible processing perceptions effector control 
guided central network set domain tailored visual routines peripheral system charged identifying marking indexing aspects intrinsic features properties particular local objects environment deemed relevant agent goal 
reactive action packages firby firby developed reactive planner notion reactive action packages raps fir 
raps effectively autonomous processes pursue planning goal goal achieved 
planner goals correspondingly independent raps trying achieve particular goal 
reactive planner composed rap execution queue rap interpreter constantly updated current world model hardware interface robot sensors effectors provides feedback planner world model action execution failures successes 
raps consist predefined set methods achieving particular goal 
methods annotated suitable applicability constraints primitive commands actions sent robot hardware interface consist task net partially ordered network subtasks 
raps sit planner execution queue wait selected rap interpreter 
raps selected basis planner approaching temporal deadlines ordering constraints reside raps task nets 
selected rap consult world model solely current situational information finds issue command hardware interface interpreted processing task net 
processing effect placing rap task net subgoal commands execution queue subsequent processing 
raps returned execution queue waiting subgoal execute point rap may selected rap execution effectively interleaved 
rap control execution queue cycle time inferences current world model tightly constrained intelligent agent design example backward inferences performed queries predictions agent state planner guarantee high degree reactivity 
universal plans schoppers universal plans sch representation agent behaviours specify appropriate actions reactions situations classified perceived particular domain 
universal plan effectively highly conditional linearised plan decision tree initial starting state environment map possible world state specific action taken agent 
actions plans traditional planners actions universal plan selected classification actual situation encountered execution time 
order universal plan explicitly identify world state predicates need monitored execution time 
universal plans compiled advance nonlinear planner process backchaining goal reduction set state space operator schemas 
decision tree results compilation process embodies agent top goal condition root node tree plus various subgoals remaining nodes top goal 
execution compiled plan interpreted order find time instant action appropriate current state world 
initially agent top goal achieved backchaining precondition subgoal arcs looking node operator conditions false identifying actions need taken particular node preconditions true 
appropriate action executed continuously truth value state predicate changes tree traversed order find appropriate action 
world cooperative long planner actions intended effect behaviour long run goal directed 
hand action fails achieve desired effect replanning traditional planning sense necessary selection new initial point execute plan 
dynamic action selection maes maes mae proposes action selection algorithm views autonomous agent collection competence modules 
modules resemble intelligent agent design operators classical planning system words specify preconditions necessary active expected effects expressed strips add delete list representation 
addition module associated activation level 
situation action rules agent pengi described maes modules eschew variables making agent indexical functional aspects 
competence modules inter linked network types links successor predecessor indicate modules information resides precondition lists execution add delete lists 
modules links activate inhibit time activation energy accumulates modules represent best actions take 
modules selected execution activation levels reach pre defined threshold 
input activation energy comes currently observed situation represented set propositions global goals agent 
carried goals agent achieved need subsequently protected 
global behaviour action selection algorithm mediated collection user level parameters set things module activation threshold activation energy levels injected network observed propositions oe goals fl activation energy consumed protected goals ffi 
maes algorithm control structure regulates particular action gets activated emergent dynamics interaction actions modules establishes sequence selected actions completely distributed way 
hybrid architectures critical problem facing non deliberative agent environment diverge originally designed agent may producing inappropriate behaviours 
agent robust avoid producing harmful fatal behaviours extended periods time clear capable behaving way able carry intended long term tasks effective manner 
address problem number architectures proposed greater lesser degree aim provide agents appropriate reactive capabilities time permitting high level deliberative predictive reasoning plans goals 
number hybrid architectures intelligent agent design described 
procedural reasoning system georgeff procedural reasoning system prs gi kg system controlling carrying high level reasoning robot combines traditional means reasoning abilities react unanticipated events change goals intentions situations warrant 
prs control movements real robot operating indoor navigation domain gls 
prs agent comprises set changing beliefs facts world set current goals desires set procedural plan schemas knowledge areas kas describe achieve goals react particular events interpreter manipulating components process stack currently active kas intentions 
prs operates partial hierarchical planner interpreter permitting interleaving planning execution 
ka interpretation time bounded guaranteed level responsiveness maintained 
set kas includes metalevel kas 
interpreted manner regular kas metalevel routines contain application specific instruct agent manipulate beliefs desires intentions prioritise select conflicting kas best available resources system changing realtime constraints 
agent beliefs goals determine kas considered execution kas executed new subgoals posted new beliefs derived 
adaptive intelligent systems hayes roth adaptive intelligent system ais knowledge system reasons interacts dynamic entities real time hr hr 
ais effective capable perception action cognition attentional focus 
hayes roth developed ais called guardian intensive care patient monitoring application 
guardian comprises cognitive component set asynchronous subsystems set dynamic channels satisficing reasoning cycle 
implemented parallel blackboard system cognitive component performs general purpose reasoning engaging dynamic control planning 
process incrementally constructing modifying control plans temporally ordered patterns intelligent agent design control decisions describes class operations agent intends perform particular period time 
operations cognitive component cyclically processed turn agenda manager operations scheduler operations executor 
guardian asynchronous subsystems integrate perception cognition relaying intended actions agent effectors 
dynamic channels integrate agent sensors effectors cognitive component implementing range pre processing heuristic selective attention functions 
guardian employs satisficing reasoning cycle order provide guaranteed latency required real time operation 
achieved heuristic operations control policy role limit total number operations processed cognitive component 
policy defined set cycle parameters feedback channels fine tuned run time improved system performance 
dynamic reaction hendler hendler developed collection agent architecture designs notion dynamic reaction set techniques managing observation action dynamic domains sh 
techniques extended interact planning system called abstraction partitioned evaluator ape architecture tested simulated single agent indoor navigation domain sh 
ape architecture composed number concurrent hierarchically action control layers representing reasoning particular aspect agent task domain 
implemented parallel blackboard planner layers sensor motor spatial temporal causal conventional general knowledge effectively partition agent data processing duties number dimensions including temporal granularity information resource functional abstraction 
perceptual information flows strictly agent sensors connected sensor motor level higher levels command goal achievement information flows strictly downward agent effectors connected sensor motor level 
mechanisms communicating layers layer ape architecture comprises number modules include planner capable interleaving plan generation execution collection noah plan operators carrying various reactive deliberative tasks state affairs soa structure intelligent agent design contains date model agent world records agent current goals 
plan operators contain number monitors independent information gathering components duties include sending reports soa model significant observed events plan constraint violations initiating replanning action light predicted exceptions 
phoenix cohen phoenix project hhc hc investigation realtime agent behavioural ecology functional relationships designs agents environments operate resulting behaviours 
phoenix real time adaptive planning architecture controlling variety different autonomous agents embedded simulated forest fire domain 
phoenix agents composed parallel nearly independent mechanisms generating actions 
reflexive component designed generate immediate reactions range different environmental situations 
second mechanism cognitive component charged performing longer term computationally expensive planning 
component independently connected agent sensors action effectors 
cognitive component ultimate control agent actions 
main duty instantiate execute stored plans method deferred commitment called lazy skeletal refinement 
addition cognitive component responsible responding interrupt flags set agent reflexive component handling communications agents performing functions plan selection scheduling error recovery replanning monitoring agent plans activities 
activity monitoring accomplished envelopes plan predictive processes assess expectations progress generate recovery actions plans expectations met 
decision theoretic control developed mobile robot control system navigating map building simulated environment containing number fixed moving obstacles 
architecture composed set task oriented subsumption behavioural modules tasks performed agent avoid obstacles get goal build map 
architecture comprises centralised world model structure arbi intelligent agent design procedure mediating selecting agent competing behaviours 
behavioural module access number problem solving strategies differing terms computational cost solution accuracy 
behavioural modules store local module decision theoretic formulations utilities specific outcome states example hitting wall probabilities problem solving strategy yielding particular action sequence output 
computed behavioural modules send utilities probabilities arbitration module application multiattribute utility estimation function ultimately determine agent optimal problem solving strategy information action base level motor action 
intelligent agency issues autonomous agent operating complex environment constantly faced problem deciding action take 
hanks firby hf point formulating problem precisely difficult necessitates consideration number informational categories difficult ascertain example benefits costs agent executing particular actions sequences demonstrated previous research problematic represent example models agents beliefs desires world complex unpredictable 
control problem agent problem deciding manage various sources information way agent act competent effective manner 
problem hanks firby hf suggest amounts balancing reasonable approaches acting world deliberation involves making decisions possible far ahead time possible second approach reaction delay making decisions long possible acting possible moment 
glance approach perfectly reasonable clearly agent think ahead able consider options informed deciding action take 
hand information notoriously unreliable real world situations difficult impossible obtain agents changing time constraints reasonable acting moment preferred 
fact small number special case task domains reasonable assume approach deliberation reaction carried full exclusion 
intelligent agent design described previous chapter dissertation concerned design implementation integrated software control architecture touringmachine architecture suitable controlling actions autonomous agent operating complex environments 
particular interest dissertation integrated control autonomous mobile agent capable rationally carrying number routine tasks complex multi agent traffic domain touringworld tasks duties carried agent touringworld prioritised advance agent designer include goals avoiding collisions mobile agents fixed obstacles obeying commonly accepted set traffic regulations relocating initial location target destination certain time bounds spatial constraints 
limited terms internal computational resources touringmachine start limited knowledge world particular touringmachine possesses topological map various paths junctions defining navigable routes world prior knowledge regarding agents locations goals obstacles encounter en route 
addition touringmachine limited means monitoring acquiring information surroundings restricted capacity communicate agents intentions turn overtake communicated primitive signalling human driver car 
aim dissertation produce integrated control architecture enable touringmachines carry tasks act environments autonomously accordance set domain specific evaluation criteria effectiveness robustness flexibility 
criteria suggest broad range behavioural functional capacities touringmachine need possess ffl touringmachine capable autonomous operation 
operational autonomy requires agent goals able select required 
addition lindsay cl argue agent things capable interacting environment able move preferably fluidly environment selective attention desirable touringmachines limited computational resources varied behavioural repertoire differential responsiveness variety environmental conditions 
ffl touringmachine carry goals effective manner 
effective goal achievement requires agent capable carrying intelligent agent design multiple tasks efficient timely manner 
various tasks touringmachine navigate route pre specified time limit agent able reason predictively temporal extent actions 
touringmachines operate partially structured multi agent world order complete tasks able coordinate activities agents encounter capable cooperation 
ffl touringmachine robust unexpected events 
successful operation real time dynamic environment require touringmachines able identify handle timely manner host unexpected events execution time 
events sudden appearance path blocking obstacle agent little time consider full extent benefits consideration number different evasive bring 
order cope events touringmachines need operate guaranteed responsiveness example latency bounded computational execution techniques fairly closely coupled environments times 
time location events unpredictable touringmachines need monitor surroundings continually course goals 
ffl touringmachine flexible way carries tasks 
due dynamic unpredictable nature touringworld environment fact multiple inhabitants operate real time limited world knowledge touringmachines inevitably faced various belief goal conflict situations arising unforeseen interactions agents 
agents operating cooperatively complex domains understanding nature cooperation 
galliers gal argues involves understanding nature role multi agent conflict 
behave flexibly bond gasser bg page cooperation touringworld viewed simply special case coordination non antagonistic agents 
touringmachines benevolent selfish respect goals ability drop adopt different intentions preferences situational needs antagonistic intentionally try deceive thwart efforts touringmachines touringmachines operate multi agent environment perform actions purely purposes cooperate common plan interactions described merely contingent dav page 
intelligent agent design adjust appropriately changing unpredicted circumstance touringmachines designed recognise resolve unexpected conflicts avoid 
purposes control coordination touringmachines able reason agents activities 
respect touringmachine capacity particular aspects world construct deploy internal models agents see fits coordinated process outcomes actions bg page 
functionality described deliberative example reasoning temporal extent actions conflict resolution reflexive modelling unclear strictly deliberative control approach traditional planning techniques adequate successful operation touringworld domain 
classical planners number important simplifying assumptions domains touringworld environments remain static arbitrarily long plans generated executed changes world caused planner actions environments represented correctly complete detail 
touringworld dynamic multiagent touringmachines inherently limited physical computational means acquiring information surroundings clear strictly traditional planning approach controlling touringmachines unsuitable 
true planning systems capable execution monitoring interleaved planning execution represent significant advance earlier traditional planners usefulness highly dynamic real time domain touringworld questionable particularly reservations expressed section echoed georgeff geo bratman bip concerning computational efficiency inability cope varying time constraints 
similarly inclusion degree non deliberative control touringmachines essential particularly agents need closely coupled environment robust unexpected events able react quickly unforeseen events operate guaranteed levels responsiveness questionable non deliberative control techniques sufficient providing touringmachines complete behavioural repertoire necessary successful operation touringworld environment 
argument deserves closer consideration 
strength purely non deliberative architectures lies ability intelligent agent design identify exploit local patterns activity current surroundings order generate hardwired action responses memory predictive reasoning minimal state information set environmental stimuli 
successful operation method control presupposes complete set environmental stimuli required unambiguously determining subsequent action sequences readily identifiable words agent activity strictly determined ii agent global task constraints example explicit temporal deadlines need reasoned run time iii agent goal desire system capable represented implicitly agent structure fixed pre compiled ranking scheme 
determined behaviour succeed sufficient local constraint agent environment determine actions irreversibly detrimental long term effects 
kirsh argues agent able avoid representing alternative courses actions determine ones lead dead ends loops local minima generally undesirable outcomes 
follows agent task requires knowledge environment immediately available perception obtained form inference recall truly considered determined 
kirsh considers tasks number pertinent touringworld domain activities involving agents require making predictions behaviour reasoning plans goals dav page activities require responding events actions agent current sensory limits precautions tracking sequences behaviours take place extended periods time activities require amount reasoning problem solving calculating shortest route navigation 
common defining feature tasks requiring reliable robust local control carried possess non local global structure need addressed agent 
instance carry navigation task successfully touringworld agent need coordinate various locally constrained re actions slowing avoid obstacle slower moving agent globally constrained actions arriving target destination pre specified deadline 
kirsh considers set non determined tasks carried touringworld domain reflect key aspects intelligent behaviour 
include activities creative stimulus free language musical performance mime self amusement page 
intelligent agent design non deliberative control techniques ensure fast responses changing events environment enable agent action choices influenced deliberative reasoning 
non deliberative architectures agent goals represented implicitly effect embedded agent structure behavioural rule set 
goals represented explicitly hanks firby hf argue able changed dynamically way reason alternative plans carrying 
maes mae argues explicit goals clear agents able learn improve performance 
complex agents need complex goal desire systems particular need handle number goals vary time different priorities vary agent situational needs 
implications kirsh argues agents desire systems increase size need form desire management deliberation weighing competing benefits costs 
undoubtedly number real world domains suitable strictly non deliberative agent control architectures 
exist realistic non trivial domains equally suited purely deliberative agents 
majority real world domains require intelligent autonomous agents capable wide range behaviours including basic ones perception driven reaction including complex deliberative ones flexible task planning strategic decisionmaking complex goal handling predictive reasoning beliefs intentions agents 
thesis dissertation desirable feasible combine suitably designed deliberative non deliberative control functions obtain effective robust flexible behaviour autonomous agents operating complex environments 
arguments put forward far attempted outline broader functional behavioural requirements intelligent agency complex task domains touringworld justify hybrid control approach integrates number deliberative non deliberative action control mechanisms 
remaining issues particular requirements approached designed design solutions realised framework practical integrated architecture note criticisms apply equally systems goals hardwired directly designer example pengi ac creatures bro goals obtained automatic compilation example kaelbling situated automata kae 
intelligent agent design main focus chapters 
addition addressing conjecture concerning suitability hybrid control approach proposed control architecture intended address importance need extensive empirical evaluation integrated agent architectures merely terms agent task oriented criteria identified earlier section effectiveness robustness flexibility terms controlled agents behavioural ecology terms functional relationships agent design agents internal structures processes agent behaviour choice tasks solved manner solved environmental characteristics 
address issues highly parametrized instrumented multi agent simulation testbed implemented conjunction touringmachine control architecture 
enabling controlled repeatable experimentation facilitating creation diverse single multi agent task scenarios touringworld testbed described detail chapter 
preliminary experimentation analysis touringmachine architecture chapter 
touringmachines see works don 
sort danger centering pool 
increases approaches certain distance rule potential unusually high start exactly balances rule potential unusually low start 
donovan rose feet excitement 
strikes equilibrium 
see 
rule drives back rule drives forward follows circle pool staying locus points potential equilibrium 
ll stay circle forever giving old 
isaac asimov operating real world domains means having deal multiple events levels granularity time space 
domains agent need perform complex tasks requiring pay degree attention environmental change temporal deadlines computational resource bounds impact agent shorter term actions having longer term goals 
agent expected model surroundings detail simply events consider large number little relevance anyway 
operate successfully chosen touringworld domain autonomous resource bounded mobile agent robust flexible capable carrying intended goals presence dynamic unpredictable events 
agent capable exhibiting range different skills behaviours 
need reactive deal events may sufficient time resources touringmachines consider time slow agent deliberate possible courses action world state remain reactive survive long complete various tasks 
secondly agent main tasks touringworld get starting location target destination specified time capable rational goal directed behaviour 
thirdly inhabit world populated complex intentional entities little known advance able reason events place determine effect events goals real time constraints imposed task environment select timely appropriate action sequences enable coordinate agents may 
required effect agent architecture cope uncertainty react unforeseen events recover dynamically poor decisions 
course top accomplishing tasks agent originally assigned 
skills needed operate touringworld disparate characteristics requirements sensible way realising argued separate activity producing behaviours layered control framework 
approach adopted designing implementing touringmachines overview touringmachine agent architecture comprises separate control layers reactive layer planning layer modelling layer layers see concurrently operating independently motivated activity producing independently connected agent sensory apparatus agent perception subsystem see section internal computational mechanisms processing appropriate aspects received perceptual information individually connected agent apparatus agent action subsystem send required appropriate motor control communicative action commands 
mediated enveloping control framework see section touringmachine activity producing layers designed model agent world different level spatio temporal abstraction endowed different task oriented capabilities 
reactive layer instance intended provide agent fast reactive capabilities coping immediate short term events agent higher layers unaware suf touringmachines modelling layer planning layer reactive layer control framework perception subsystem action action subsystem action subsystem sensory input output touringmachine agent control architecture 
ficient time computational resources compute suitable responses 
typical event handled layer example sudden appearance nearby hitherto unseen agent obstacle 
described detail chapter layer designed compute hardwired domain specific action responses particular sets environmental stimuli provide agent immediate feedback various unexpected potentially life threatening events take place world 
main purpose layer hand generate execute plans action help achieve agent primary long term domain task relocating target location certain prespecified spatio temporal constraints 
starting topological map various paths path junctions world initial knowledge regarding obstacles agents whereabouts intended actions layer planner main functional component layer library partially elaborated procedural plan structures construct single agent linear route plans agent desired destination 
cope fact ideal plans fail agent subsequently encounters obstructing entities en route layer planner described fully chapter realised hierarchical partial planning system interleave plan formation execution defer touringmachines committing specific subplan execution methods absolutely necessary 
adopting measures layer help minimise need corrective run time replanning called transformational planning situations arise agent initial plans fail achieve intended effect viable course action alter dispose existing plans generate new ones address agent newly acquired tasks identified opportunities 
situations called goal conflict situations arise touringworld domain result unexpected spatio temporal interactions entities example space time trajectories agents intersect common point 
targeted levels intra inter agent goal coordination main purpose touringmachine layer detect foresee potential goal conflict situations execution monitoring observation abductive inference explanation temporal counterfactual reasoning prediction propose suitable courses action hopefully preclude conflicts 
described chapter layer agent facilities incrementally building saving mental causal models world entities enable answer questions entity actions dispositions motives min page example entity current intentions entity goals threatened current conflict situation entity resolve pressing goal conflict entity doing units time 
collectively control layers aimed providing touringmachine agent variety deliberative non deliberative task achieving behaviours include behaviours determined reactive goal directed reflective predictive 
layers operate concurrently activity producing layer independently send action commands agent action subsystem designed addresses different limited aspect agent necessary behavioural repertoire inevitable time time layer proposed actions conflict 
layers effect approximate machines result need mediated enveloping control framework agent single behave appropriately different world situation 
control framework behaviours employed agent architectures kaelbling kae brooks bro control components entropy touringmachines reduction engine ere architecture bd touringmachine control layers exhibits independent ability carry assigned tasks 
touringworld domain particular includes reacting immediate threats short term events layer planning routes specified locations layer detecting resolving ongoing conflicts agent current goal set layer 
bresina drummond bd point independent ability guarantee appropriate performance layer operating isolation typically exhibit fairly poor performance touringmachine layer approximate machine dealing subset agent complete goal set performance improve suitably designed interactions agent layers 
interactions form basis touringmachine control framework 
primary purpose touringmachine control framework ensure agent behaves appropriately different world situation 
attempts account agent changing situational task related needs 
shown touringmachine internal control framework consists major functional components perception action subsystems layer interfaces external environment facility inter layer message passing enabling layers run time exchange certain types control information set context activated control rules effecting modifications inputs outputs agent layers resolve action conflicts arise result limited functional behavioural scope agent control layers 
aspects control framework described detail 
perception action subsystems planning agents touringmachines able construct predictive models number different world states potential effects planned actions carried full states 
ability predict prove useful asset times agent operating rapidly changing world agent limited initial knowledge task environment predictions ultimately prove unreliable 
dean wellman dw pages suggest way agent overcome partially offset effects imprecise predictive models rely models short term predictions supplement agent control function feedback obtained frequent sensing environment correct potential touringmachines modelling layer planning layer reactive layer context activated control rules clock perception subsystem sensory input action action subsystem output touringmachine mediating control framework incorporating perception action subsystems inter layer message passing context activated control rules 
errors longer term predictions 
perception action subsystems aimed providing touringmachines necessary input output sensorimotor control capabilities sensing acting dynamically changing world 
touringworld domain control capabilities include perception entities initially unknown world example touringmachines traffic lights obstacles effecting various throttle change speed steering change orientation communicative action commands example signal left horn flash 
similar approach kaelbling agent design kae inputs outputs touringmachine generated cyclically synchronous fashion start finish times synchronous input output processing cycle timeslice established internal agent clock see 
timeslice regarded basic unit agent processing activity start timeslice agent receives sensory input perception subsystem timeslice agent clocks synchronising input output processing internal touringmachine agent fact initialised clock global entire touringworld environment 
described section common world clock operated maintained touringworld simulator process called 
touringmachines entity brake agent name location location velocity acceleration orientation communications size type world entities perception buffer control layers symbolic sensors speed touringmachine perception subsystem example sensory item stored subsystem perception buffer 
effects required actions world action subsystem stages agent precisely agent independent concurrently operating control layers charged task processing information produced perception subsystem required submitting suitable action commands agent action subsystem 
specific computational mechanisms layer uses processing sensory input generating action commands important point detailed chapters 
operations perception action subsystems deserve description 
shown touringmachine perception subsystem comprises main components set symbolic sensors acquire items information describing current environmental layout perception buffer storing perceptual information items received sensors 
touringmachines intended simulated environment touringworld regarded discrete symbolic entity 
sensors touringmachine considered capable uniquely identifying different world entity considered ca length timeslice expressed positive real number simulated world seconds defined touringworld testbed parameter called 
concept simulated world clock notions timeslice timeslice length described fully section 
touringmachines assigning unique symbolic name separately perceived entity able recognise certain physical properties entity current location speed acceleration orientation observable communicated signals dimensions type enabling distinguish instance entity touringmachine obstacle traffic light path junction wall lane marking path side information sign 
respect touringmachines sensory capabilities resemble agents deployed simulated environments dm pr sh vb woo 
time world entity fully identified touringmachine sensors multi attribute information record created submitted storage agent perception buffer 
stored information record see example regarded snapshot current physical extent particular world entity perception buffer entire collection records consequently regarded momentary snapshot touringmachine external observable environment 
course resource bounded agents touringmachines expected perceive entity world 
fact touringmachines intended real time environments important ensure combined latencies internal functional operations guaranteed constant bounded see section 
far touringmachine sensing operations concerned effectively means placing limit total number entities may sensed timeslice 
touringmachines approximated placing upper bound agent spatial sensing range 
touringmachine action subsystem shown 
consists limited capacity action buffer receiving motor control communicative action commands sent agent control layers set effectors capable translating commands corresponding physical actions agent world 
entity locations touringworld treated real valued element points global cartesian coordinate grid see section 
fact described fully section illustrated page range merely user level properties parameters customise touringmachines sensors 
parameters include frequency agent senses world specific sensing algorithm uses gorithm dictating example agent sense occluded objects sense objects front 
purposes parameters ignored returned describing touringworld simulator chapter 
course touringmachines operate simulated environment physical touringmachines action commands action buffer effectors actions control layers control layers touringmachine action subsystem 
complete set touringmachine action commands 
touringmachine control layers designed submit action commands response agent changing situational task related needs 
needs layer decide respond ultimately depend layer internal programming 
instance touringmachine reactive layer submit orientation changing action command agent sensors detected presence obstacle considered layer close ignore time touringmachine planning layer submit different action command example route plan layer currently executing stipulates agent change direction upcoming path junction 
regardless particular layer choose submit action command understood timeslice layer capable doing 
simplify programming touringmachine action subsystem importantly ensure agent remains responsive important events take place environment agent processing sensory input touringmachine architecture constrained ways 
firstly activity producing control layer designed submit action command input output processing cycle words timeslice layer decides submit action command action buffer immediately suspend operations start timeslice 
secondly touringmachine effectors constrained effect action zero action command happens reside action buffer actions fact mimicked touringworld simulator processes designed maintain date physically plausible model agents world see section 
touringmachines change speed float change orientation orientation signal left sl sl status signal right sr sr status flash fh fh status horn hh hh status hazard lights hl hl status fog lights fl fl status status fon orientation 
motor control communicative action commands available touringmachines operating touringworld timeslice 
course layers independently submit action command may effected timeslice obviously raises question action command selected 
fact area touringmachine control rules come play 
discussing final comments regarding touringmachine actions effectors 
sake creating realistic simulation mobile agent control possible number physical kinematic control constraints imposed touringmachine agents include limits maximum speed rates acceleration deceleration rate able change orientation words maximum angle able turn single timeslice 
touringmachine effectors faced executing new action command control constraints determine corresponding action carried full intended prompt touringmachine effectors send message appropriate control layer words layer originally submitted offending action command explaining problem just occurred 
fact regardless fact constraints implemented touringworld testbed parameters respectively re visited chapter 
problems identified touringmachines execution time attempting effect change speed action causes agent exceed maximum speed effecting action completed single processing cycle requires iteration processing 
touringmachines action deemed problematic time action executed touringmachine effectors automatically send message whichever layer submitted action command selected essentially confirm fact command accepted execution 
purpose feedback primarily enable agent control layers distinguish planned actions submitted layers unplanned actions submitted layer 
discussed chapter useful layer decide re try failed action attempts 
control rules consequence touringmachines employing concurrently operating activity producing control layers independent access agent sensors effectors function partial views agent external surroundings time time actions taken layers conflict 
touringmachine architecture types inter layer conflicts identified result layers perceiving addressing common event environment example layer layer propose separate actions avoid obstacle ii result layers addressing different events environment example layer suggests action move direction agent target destination layer suggests evasive maneuver avoid colliding nearby obstacle 
resolution conflicts requires form mediation 
touringmachine architecture achieved context activated control rules 
acting filters agent sensors control layers agent control layers effectors control rules applied parallel input output processing timeslice see 
fact rules applied synchronisation points 
types control rules applied exclusively timeslice applied exclusively timeslice 
rules applied timeslice called censor rules effect filtering censoring selected information sensory items inputs control layers 
rules applied timeslice called suppressor rules effect filtering suppressing selected information action commands outputs control layers 
types control rules condition action type 
discussed detail chapters 
touringmachines censor rule entity obstacle perception buffer remove sensory record layer entity obstacle suppressor rule action command layer rule change orientation action buffer current intention start overtake remove action command layer change orientation remove action command layer layer rule reactive layer rule invoked order avoid crossing path lane marking see section 
denotes don care anonymous variable cm see comment prolog unification section 
example control rules censor rule suppressor rule 
case censor rules conditional parts conjunctions statements test presence particular sensory records agent perception buffer 
censor rules action parts consist operations prevent particular sensory records fed input selected control layers 
example censor rule censor rule prevent layer perceiving reacting particular obstacle instance layer programmed deal 
case suppressor control rules conditional parts conjunctions statements testing presence particular action commands agent action buffer test truth values various items agent current internal state 
suppressor rules action parts consist operations prevent particular action commands fed agent effectors 
example suppressor rule suppressor rule prevent layer reacting steering away lane marking object agent current intention overtake agent front 
internal touringmachine state discussed chapter comprises statements agent current timeslice beliefs desires intentions 
touringmachines number censor control rules fire remove selected control layer input applied timeslice 
suppressor control rules hand assumed crafted agent designer way fire situational context agent situational context taken combination perceptual input set current internal state ii action command remain action buffer appropriate suppressor rule action part executed 
example remove action command operations action part suppressor control rule suppressor rule ensure action command case sent layer remain agent action buffer 
crafting suppressor control rules way touringmachine effectors guaranteed receive action command timeslice 
principle touringmachine suppressor censor control rules seen operate manner similar minsky suppressor agents respectively 
minsky society mind framework wait get bad idea case touringmachines equivalent submitting bad action command prevent corresponding action 
censor agents hand wait certain bad idea bad action command occurs intercept states mind case touringmachines perceptual inputs usually precede idea min page 
application touringmachine suppressor censor control rules approximates output signal inhibition input signal suppression respectively brooks subsumption architecture bro see section 
inter layer message passing main attraction touringmachine control rule framework just described operation transparent agent control layers layer essentially act controlling agent activities remaining largely unaware interference control layers censor suppressor rules control framework inputs outputs 
potential advantages control scheme include increased operational concurrency robustness enhanced programmability testability gained highly modular design components topic 
touringmachine control layers approximate machines touringmachines addressing isolated aspects agent full behavioural repertoire result layers invariably ill equipped deal agent evolving task demands 
way overcome isolation problem enabling layers assist operations exchange control information concerning relevant aspects agent changing task related requirements situational context 
purpose inter layer messaging scheme included touringmachine control framework 
messages exchanged control layers agree simple format sender ime receiver sender layer layer mg time time agent internal clock message originally sent body content message application pattern interpreted subsequently acted receiving control layer 
messages classified types passive way simply convey potentially relevant information layer example layer suggestions layer world entities want focus attention see section active way alter layer control decisions example layer sends instructions layer outlining new task generate plan see sections 
precisely purpose particular messages exchanged layers tied lower level operations individual agent control layers 
discussion touringmachine inter layer message passing mechanism deferred chapters 
touringmachines layered approach principal feature touringmachine agent architecture integrates variety deliberative non deliberative control functions 
main reason advocating hybrid control approach attempt combine single framework advantages associated purely deliberative architectures reasoned action choice flexible long term goal handling typical purely non deliberative ones particular operational robustness distribution control real time responsiveness closer coupling perception action 
touringmachines broad categories hybrid agent control architectures distinguished uniform architectures employ single representation control structure action deliberation layered architectures different representations algorithms perform functions number different layers 
hanks firby hf page argue division uniform layered approaches reflects bias problems architectures implementors wish address 
uniform architectures prs gls gi guardian hr hr example assumption action deliberation closely related usefully handled separately 
design uniform architectures easily bring deliberation machinery bear individual action decision considerable computational cost doing agents controlled way soon fail react guaranteed timely manner 
cope problem responsiveness uniform architectures need provide means making explicit control decisions agent act versus deliberate 
uniform architectures addressed problem allowing agents include control decisions explicitly internal plan representation allowing reason reasoning methods meta kas prs gls control plans guardian hr example care needs taken ensure control frameworks avoid infinite regress metareasoning 
layered architectures hand example ape sh ere bd phoenix basic assumption agent reaction time critical deliberation slow agent need act resorting deliberation 
timescale mismatches deliberation action layered architectures separated distinct modules different control methods possibly different world models plan representations hf page 
agent operating touringworld domain number events levels spatio temporal granularity take place point time example sudden appearance obstacle immediate collision range observed changing colour upcoming traffic light projected failure arrive observed target destination agent pre specified time bounds 
successful operation touringworld require agents capable fact particular systems specific commitments deliberation action interleaved hanks firby hf page prefer refer systems simply frameworks encoding agent architectures actual agent architectures 
touringmachines fulfilling number pre specified goals simultaneously responding number dynamic events making timely appropriate short long term control adjustments pre specified goals appear threatened 
hanks firby hf design methodology adopted agent control architecture proposed dissertation reflects belief short term acting driven primarily urgency longer term deliberation requires substantial amounts time order consider alternative action choices possible consequences different reasoning methods representations appropriate acting 
touringmachine architecture adopts layered approach agent control problem 
non deliberative architectures brooks bro kaelbling kae control touringmachine architecture divided number vertical layers designed achieve particular level task oriented competence 
brooks subsumption levels touringmachine control layers designed higher layer example ceases function lower layers example continue provide agent degree competence albeit considerably limited 
possible ensuring control layers continuous independent access agent perceptual machinery 
behaviour modules brooks subsumption levels bro higher level touringmachine control layers need necessarily subsume operations agent lower level layers 
touringmachine layers designed independently cooperatively complementary aspects agent task load layer designed handle short term events immediate threats layer designed handle basic task planning duties layer mis intended deal plan conflicts arising unforeseen multi agent conflicts 
touringmachine architecture individual layer capable addressing number reasons advocating layered control approach including increased behavioural robustness operational concurrency improved program comprehensibility system testability 
points argued notably brooks bro bro spector sh davis dav page 
true certain amount horizontal functional takes place touringmachine layers evident looking internal workings layer see chapter primary decomposition agent control problem vertical words divided activity producing task achieving modules basis desired external manifestations agent control system 
bro page 
touringmachines agent situational task related needs task level intelligence attributed particular touringmachine simply result carefully programmed combination component control layers 
respect touringmachine control layers quite similar principle proto specialist agencies minsky society mind framework separate sub agencies sharing common set sensory organs proto specialist addressing different basic need super agent min page 
possible division labour touringmachine activity producing control layers intended reflect different levels spatio temporal granularity characterise touringworld task environment 
sense touringmachine control layers described constituting hierarchy representations world modelling layers appear increasingly moves layer similar characterisation readily flow control layers 
brooks subsumption architecture bro spector hendler ape design sh strict hierarchical prioritised flow control different layers touringmachine architecture 
consisting set high level layers try account big picture issuing general advice faster low level layers dw page calling lower level layers mere subroutines touringmachine layers operate concurrently proposing actions independently operational activities 
case touringmachine layer favoured layer layer favoured layer whichever action agent ends ultimately depends agent situational context defined terms current observations beliefs desires intentions taken consideration execution time application agent suppressor control rules 
touringmachines essentially described planning agents layered control framework employed touringmachines acknowledges potential unreliability predictive plans ensuring plans treated simply resources action strict recipes controlling aspect agent behaviour 
issue touched chapter 
touringmachines touringmachines resource boundedness rationality perfectly rational agent bring information memory environment bear various perception decision making execution tasks 
ideally wish agent control architecture hand capable generating rational minimal provably correct action sequences capable flexibly robustly dealing real time pressures characteristic dynamic multi agent domains 
toy domains blocks worlds classical ai planning fame may possible single agent guarantee generation execution optimal action sequences 
realistic domains requirements behave correctly flexibly robustly conflict agents having rely heuristic satisficing methods decision making ensure successful completion tasks 
simon puts agent choice optimal decisions imaginary simplified world decisions world approximating complex real closely 
sim page 
touringmachine architecture aimed supporting development real time embedded agents 
agents time computational power available knowledge task related activity 
cope constraints touringmachines designed latency bounded heuristic functions simplify decision making processes 
example touringmachines respect planning employing limited search directed stored heuristic knowledge 
touringmachines layers mare designed process sensory input collected perception subsystems selective attention mechanism helps focus environmental features deemed relevant agent situational task related needs 
consequence times instance sufficiently situations touringmachines may generate plans optimal failing achieve initially intended tasks appropriately repaired 
complication arises vis vis guaranteeing rational behaviour fact touringmachines multiple goals occasion conflict 
example act slowing avoid colliding agent conflict agent main time constrained navigational task especially task deadline touringmachines reasonably tight 
similarly agent waiting red light determines hit entity touringmachine design reactively move avoid collision results driving red light 
touringmachine able attend goals simultaneously actions may occasionally inconsistent goals 
note actions typically serve protective purpose agent regarded undesirable 
contrary dynamic domains agent robustness survival usually considered important correctness protective actions perfectly rational surely considered indispensable 
bratman bip rational agent committed doing plans exceptional circumstances example explicit impediment detected task delay foreseen agent undertake alter plans 
knowing reconsider committed plans simple minsky min page points commitment leads doing single thing little concern produces wandering 
suggests fact existence tension stability agent plans order provide focus agent deliberative reasoning processes plans exhibit conceived partial information agent past states 
long term rational behaviour appear result continually balancing tension plan stability goal orientedness hand plan reactivity flexibility 
maes mae suggests obtaining right balance behavioural characteristics depend particular aspects agent task environment example precision task carried time available making control decisions degree predictability agent surrounding environment 
fact shown chapter confirmed investigations agency bip sh hhc pr production rational behaviour seen depend characteristics agent internal design configuration example agent degree sensitivity unanticipated environmental change 
explained chapter touringmachine builds executes run time plans red lights order satisfy obey regulations layer 
example action going red light conflict agent goal obey regulations 
touringmachines touringmachines real time activity successful operation dynamic environment touringworld require real time responses range unanticipated events planning exceptions 
real time response required example agent avoid missing important task deadline importantly prevent catastrophic consequences colliding agent obstacle 
fact case operating complex environments agents typically carry mixture different tasks characterised terms hard deadlines time critical met costs characterised soft deadlines met result compromise agent integrity 
conventional real time systems designed meet individual timing requirements set system tasks way logically predictable temporally predictable particularly operating peak time worst case conditions 
real time systems successful systems fast predictable capable scheduling tasks way highly critical tasks guaranteed meet pre specified timing constraints 
occur system ensure advance sufficient resources pre allocated achieving time critical tasks sr 
resource bounded agent operating dynamic multi agent inherently unpredictable world touringworld conception real time needs revised somewhat 
conventional real time systems usually defined terms statically determined control sequence programmed fixed decision tree touringworld agents order interact robustly agents world capable dealing hard soft aperiodic real time events occur unexpected times period operation 
cope aperiodic events example sudden appearance agent nearby side path touringmachines opportunistic control strategy embodied primarily reactive control layer see chapter attention focussing modules see chapters gives ability direct choice actions dynamically response unanticipated real time events 
strategy virtually guarantee timely responses number localised hard real time aperiodic events start times occur irregular points time words asynchronously respect agent internal operations 
touringmachines events means touringmachines precise action sequences long term goal behaviours longer pre determined absolute certainty 
touringmachines resource bounded systems operating unpredictable world expected argued just correctness touringmachine behaviours need traded robustness long term predictability task level activities 
touringmachines best strive satisfy long term task requirements possess number design features described considered detail chapters viewed necessary highly desirable embedded real time system operate successfully complex environments 
include ffl continuous monitoring outside world provide agent immediate feedback dynamic events place ffl guaranteed constant bounded operational latency agent main functional behavioural modules ensure minimum level responsiveness agent modules include perception subsystem layer layer layer action subsystem ffl context dependent priority scheduling action execution events implicit domain specific programming agent mediating suppressor control rule set ffl embedded reactive control component layer ensures behavioural robustness virtue operating parallel agent slower non real time deliberative components kae page example touringmachine travel fast quite possible situation agent progress impeded long outside force example agent unable meet original navigational task deadline 
suggests touringmachine architecture satisfies kaelbling definition real time system guarantees constant bound length time system receiving specific input system generating response depended input kae pages 
parlance real time systems sr touringmachine control rules viewed implementing scheduler static control rules fixed agent operation online rules deal processes occur world including aperiodic ones preemptive action commands high priority able preempt lower priority opportunistic agent resulting activity occurs responding dynamic events real time 
touringmachines guarantees time critical responses agent hard realtime task constraints ffl multi tasking control control layers operate concurrently different aspects agent task set ffl context dependent selectivity perceptual input protect agent possible perceptual overload achieved primarily heuristic focus attention mechanisms layers ffl facility explicit temporal reasoning long term task deadlines agent soft real time constraints mechanism detecting resolving goal conflicts arise result threatened goal deadlines 
touringmachines constantly state perceptual cognitive action overload generally able perform potential operations timely manner 
noted precisely fast touringmachines operate fact inherently rationally bounded 
hayes roth philosophy aim designing touringmachines create agents optimised performance single pre determined task design control architecture capable satisficing performance range tasks potentially differing terms required functionality knowledge sources associated time constraints hr 
touringmachine framework achieving real time performance really viewed agent objectives able achieve greater lesser extent depending prevailing environmental conditions availability necessary resources 
considering issues chapter detailed descriptions touringmachine control layers follow 
fact sufficiently time constrained fast paced densely cluttered environments possible agent hard deadline collide 
elaborated chapters results touringmachine control layers requiring minimum constant amount time process respond external stimulus 
touringmachines reactive layer reason perish act act perish reason 
operate complex domains autonomous agent capable executing timely responses unexpected critical events 
realistic domains agent sufficient time computational resources choose best action situation find 
ensure agent take appropriate action particularly situations detailed planning decision making regarded expensive vital provide agent suitable non deliberative reactive capability 
critical events faced agent threaten agent simply responded strict time limits 
example touringworld domain sudden appearance obstacle agent sensing range constitute critical event requiring immediate attention 
words reactive layer responsible dealing timely appropriate manner agent hard deadlines afford ignore reasonable circumstances 
touringmachines reactive layer touringmachine reactive capability embodied control module independently connected agent sensors effectors main component set domain specific situation action rules 
guarantee suitable degree reactivity layer uses search inference determining rule select time 
level description explicit model world employed agent concern 
rules agent current physical state see layer essentially myopic holds infers knowledge consequences actions proposes 
touringmachine reactive capability somewhat inflexible agent reactions hardwired situational input layer provides agent high degree robustness minimising amount time needed determine action proposed 
situation action rules layer close coupling perception action reasonable level dynamic interaction agent environment 
level operation touringmachine considered situated environment attribute widely considered desirable critical successful operation dynamic multi agent environments ac kae hc mae 
operation layer independent control layer operates concurrently layers layers receives input agent perception buffer sends output agent action buffer see 
operations performed synchronous fashion input received timeslice output generated timeslice 
perceptual input form symbolic multi attribute information records see representing physical configurations perceived entities including agent received passed layer situation action rule set consideration 
situation action rule consists parts condition set action 
condition set composed conditions arithmetic test received perceptual input example speed agent domain specific typed predicate example front agent agent satisfied part contour agent entity type agent falls frontal sensing arc agent 
predicate date agent agent touringmachines reactive layer situation action rule set action filtering mechanism focus attention layer clock action buffer buffer perception top level view reactive control layer action part situation action rule corresponds reactive command intended control sequence agent effectors 
touringworld domain reactive command change speed accelerate positive negative amount change orientation turn agent steering wheel clockwise counterclockwise angle 
rules operate daemons sensitive certain environmental stimuli independently trigger action command conditions satisfied current perceptual input 
rules operate parallel rule trigger timeslice 
consequently action filtering mechanism current timeslice layer left action submit agent action buffer see 
filtering mechanism single heuristic determine rule action chosen triggered environmental stimulus spatially nearest agent 
terms purpose level abstraction layer rules similar kaelbling reactive behaviours kae reflexes phoenix architecture hc situation action rules pengi ac 
agre chapman pengi agent touring satisfied part contour agent agent falls rear sensing arc agent agent 
addition reactive rules touringworld domain number arithmetic trigonometric functions example separation entity entity returns distance cartesian locations named entities see section touringmachines reactive layer machine reactive behaviour arises interaction reactive rules agent current environmental situation 
example touringmachine controlled rule causes flee approaching agent doing agent alters speed falls outside area touringmachine rule triggered 
touringmachine reactive behaviour controlled rule gets stimulated action 
words level control touringmachine driven preconceived idea event occur 
behaviour layer opportunistic provides touringmachine high degree robustness uncertainty 
principle layer ris similar behaviour type cognitive system fodor calls input process modular non intellectual domain specific quasi reflexive informationally encapsulated process may run contrary reasoning dictate 
vertical processes fodor calls buy speed price 
contrast calls central processes exploit information outside process example memory order decisions 
sense layers considered central 
suggests input processes compute representations layout environmental stimuli basis information environment agent computations need subsequent corrections light agent background knowledge light decisions processes 
described previous chapter precisely touringmachine control layers particularly layer require mediation global control framework produce effective behaviour 
final operational detail layer mentioned second output generated layer shown 
specifically situation action rule triggers action chosen action filtering mechanism message sent layer focus attention module modelling layer mof type entity caused rule trigger 
implicit assumption agent just reacted entity agent modelling layer possess model entity model probably avoided near 
limited way ensures agent modelling layer kept date certain aspects agent changing surroundings 
detail agents focus attention capabilities chapters 
quasi reflexive process computationally elaborate true reflex 
encapsulation relates range information process needs access deciding result produce 
touringmachines reactive layer reacting touringworld illustrate range reactive behaviours available touringmachine operating touringworld complete set situation action rules comprises layer pseudo code form 
set bold terms example user defined parameters configure agent reactive layer 
parameters configure touringmachines different touringworld scenarios described detail chapter appendix rules rule avoidance front observer speed observer separation observer change orientation enables agent observer avoid hitting 
example values touringworld metres gamma orientation observer making agent angle deflection respect equal size angle approach 
rule wall avoidance front wall observer speed observer separation wall observer change speed enables agent avoid hitting wall 
example values metre theta speed observer bring observer full short wall 
noted walls reacted differently touringworld merely sake behavioural variety 
rule front agent avoidance front observer speed speed observer separation observer change speed touringmachines reactive layer agent react approached closely 
left hand frame shaped agent starts stationary round shaped agent rear falls collision avoidance range right hand frame agent starts pull away avoid collision 
example agent effectively non reactive setting parameter 
enables agent avoid hitting agent 
example values metres speed speed observer lower observer 
rule rear agent avoidance observer speed speed observer separation observer change speed enables agent avoid hit agent 
example values metres speed speed observer 
rule illustrated 
worth pointing graphical figures illustrated figures bear window system logo title bar fact actual outputs generated touringworld testbed program 
capabilities touring touringmachines reactive layer rule obstacle avoidance front obstacle observer speed observer separation obstacle observer change orientation enables agent avoid hitting obstacle wall agent 
example values metre ffi sign depending size obstacle gap side obstacle 
rule lane marking avoidance front observer speed observer separation observer change orientation enables agent avoid lane marking 
example values metres gamma orientation observer rule direction normalising speed observer orientation observer ffi ffi ffi ffi change orientation nearest normal angle observer enables agent change orientation normal angle ffi ffi ffi ffi nearest current orientation 
note improves agent efficiency touringworld domain path orientations orthogonal normal angle values see section 
effects rules illustrated 
purpose implicit set rules prevent agent colliding world entities 
exceptional rule rule purpose aesthetic practical 
importantly rule differs rules triggers absence environmental stimuli world entity condition set 
trigger priority world testbed described chapter 
window system trademark massachusetts institute technology 
touringmachines reactive layer appropriate situation action rules enable agent avoid obstacles prevent lane markings events require attention adjust agent orientation orthogonal directions 
action filtering mechanism rules 
selected rules trigger timeslice 
apart behaviour avoid hit agent rule rules control touringmachine reducing speed changing orientation 
large behaviours effective keeping agent colliding world entities 
situation action rules maintain history past events inferences events clearly limited certain task domains 
example reacting avoid obstacle drive agent obstacles close 
useful particular set rules described situation depends factors including agent speed density obstacles agent path sensitivity thresholds agent rules 
issues examined detail chapter 
additionally important remember layer layers controlling touringmachines usefulness layer fully appreciated understanding roles played touringmachines planning modelling layers 
subjects chapters 
touringmachines planning layer search truth certain questions important 
material universe constructed 
universe eternal 
limits universe 
ideal form organisation human society 
man postpone search practice questions solved die path 
buddha sophisticated agent operating real world domain capable accomplishing complex tasks 
task considered complex reasons 
instance carried long period time 
task fact composite smaller tasks requiring agent attention distinct times spatially distant locations 
additionally task incompletely specified specify certain prior restrictions way agent allowed tackle 
oldest problems field ai design computational systems initial description goal task produce sequence actions plan successful execution result agent having accomplished assigned task 
past research shows constructing sophisticated general purpose planner capable solving complex tasks non trivial requiring consideration deep complex issues example represent reason touringmachines planning layer plans actions control search agent plan space generate optimal plans collection simultaneous conjunctive tasks geo htd 
touringmachines primarily task oriented agents capable generating executing sequences actions achieve tasks assigned 
skills required varied 
include ability decompose large composite tasks simpler subtasks ability reason plans adopted actions taken achieve tasks ability reason strategically predictively outcome plan effects plan environment ability monitor progress plans take appropriate action intended effects plans realised 
furthermore touringmachines intended realistic domains capable carrying assigned tasks real time pressure limited computational resources presence agents external events 
realistic environments agents need handle dynamic events levels granularity 
result decision implement agent necessary operating skills separate distributed activity producing layers adopted principal tenet touringmachine architecture 
mind required set skills carrying planned tasks usefully divided classes pertaining construction execution basic single agent plans handle initial tasks assigned agent addressing best called agent requirements reasoning interactions different tasks plans monitoring execution plans applying techniques repair failed plans reasoning interactions goals plans agents 
division planning functions layers comprising touringmachines defined layer handles skills discussed chapter layer handles agent primary planning skills 
important distinguish notion addressed individual agents multiagent world generating plans purely dai notions multi agent planning single agent generates plans multiple agents distributed planning single common plan produced cooperation multiple agents 
notions addressed dissertation 
see bond gasser bg pages details 
touringmachines planning layer clock action buffer buffer perception planner focus attention mechanism tasks top level view planning control layer overview layer main objective layer build execute plans carry agent assigned tasks goals 
precisely layer deals specific class agent goals called achievement goals 
achievement goal defined set start final states agent state space arriving final state goal considered achieved able terminated 
touringworld domain example navigating location landmark achievement goal 
class goals contrasts agent preservation homeostatic goals achieved continuously agent defined final states cl 
touringmachines goals handled modelling layer treatment deferred chapter 
layer layers rand operates independent control module 
synchronous fashion receives input agent perception buffer start timeslice sends output agent action buffer timeslice see 
touringworld domain input takes form symbolic multi attribute information records see example describe physical configurations perceived world entities including agent particular records include information entity current cartesian location speed acceleration orientation plus information entity communicating example brake lights 
output takes form control commands agent effectors discussed detail 
touringmachines planning layer functionality layer shown shared major components focus attention mechanism planner 
layer operations sufficiently fast justify direct manipulation agent perceptual input layer planning operations include potentially lengthy searches agent plan space relatively computationally intensive 
touringmachines intended dynamic worlds order guarantee suitable degree reactivity agent inter operation latency planning activities bounded 
way achieve limit amount information layer required store manipulate 
described section main purpose focus attention mechanism 
planner charged high level description achievement goal task constructing executing plan carried result goal accomplished 
noted functional requirements optimal general purpose planner numerous 
case functional requirements conflict touringmachine behavioural requirements limited computational resources capable operating successfully complex environments 
hendler argued general way dynamic environments capture relevant aspects domain may relevant agent planner sh 
mcdermott similarly argued general worth special effort sure foreseeable interaction ones dealt 
mcd page 
goal attainment may possible agent environment sufficiently hostile 
fact foolproof way know agent plans correct execute find 
suggests construct practical planner need tradeoff generality optimality planning process side flexibility responsiveness operation 
solution tradeoff come consideration agent domain application 
touringmachines required navigate assigned location time bounds 
intuitively sense perform certain amount forward planning example constructing path 
latombe argued agent initial planned path turns motion plan due built un plan generation fairly simple static domains shown exponentially hard cha hendler shown analogous problem dynamic domains fact undecidable sh page 
hendler refer trading precision decision making time responding events htd page 
touringmachines planning layer planner world model plan remain essential piece information instance provide agent important navigational landmarks execution time lat 
amount forward planning useful dynamic unpredictable nature touringworld domain intuitively suggest large detailed plans fail successful completion 
described fully section resulting touringmachine planner viewed pragmatic solution aimed coping task domain imposed constraints 
incorporating features hierarchical decomposition interleaved generation execution time bounded operation deferred choice execution method planner enables touringmachines behave purposive goal driven agents despite operating dynamic environments 
going operational details planner description layer attention focussing capabilities prove useful 
focus attention touringmachines definition computationally resource bounded 
particular built limit amount available resources acquiring representing processing information surroundings 
words touringmachines limited attentional capacity expending computational resources particular event necessarily decrease resources available consider events gre pages 
ensure touringmachine planning layer provides timely appropriate responses variety changing conditions agent able reduce set perceived world events set containing events considers relevant 
layer needs control perceptual intake focussing attention important events ignoring lesser importance 
designing attention focussing capability issues need addressed 
important ensuring events focussed remain relevant agent changing context 
important ensure mechanism provides agent appropriate level sensitivity vis vis changes place world 
agent generally require information events related assigned task noticing unexpected event example nearby agent coming sudden halt prove catastrophic 
focussing selected events implies events ignored touringmachines planning layer resource monitor buffer perception prioritised focussing current focus set previous focus set planner planner rules focus attention mechanism 
outright modelled thoroughly increasing agent degree uncertainty surroundings 
agent occasionally focus inappropriate events issue cope bad judgements addressed 
matters looked section section 
operation main component focus attention mechanism set user specified prioritised focussing rules selectively filter information agent perception buffer produce output form current focus set see 
current focus set contains perceptual information world entities considered relevant heuristic selection criteria expressed focussing rules 
information contained current focus set planner remainder current timeslice 
focussing rules rules conditional parts conjunctions horn clause predicates express domain specific relations different entities agent world see predicates touringworld domain 
predicates applied perspective agent doing focussing relative world time 
example focussing agent touringmachines planning layer perceived start timeslice agent satisfy predicate part contour falls circular arc corresponding range rear sensors 
entities alter behaviours move time space relationships focussing agent entities change 
relationships change different focussing rules satisfied different entities focussed time progresses 
attention mechanism possesses finite number user ordered focussing rules applied sequentially entities appearing current perceptual input 
entity satisfies conditions particular rule applied deemed relevant placed current focus set 
number perceived entities number focussing rules applied potentially large total number entities get placed current focus set controlled inter operation latency layer guaranteed 
focussing mechanism done charging entity focussed initial pool resources available focussing start timeslice deductions pool total resources time entity selected placing current focus set 
focussing stops available resources run focussing rules considered new entities selected 
predicates appearing focussing rules express types relations world entities physical relate aspect perceived entity spatial physical configuration example stopped identity relate entity type identity example agent temporal example novel 
temporal predicates differ slightly types relating events perceived timeslice making comparisons entity current configuration exhibited previous timeslice 
example entity satisfy novel perceived current timeslice record having perceived previous timeslice 
handle predicates copy current focus set taken timeslice placed buffer called previous focus set see 
contents buffer focussing rules timeslice historical record focussed immediate past 
temporal predicates touringworld domain listed 
touringmachine focus attention mechanism functionally approx total focussing resources unit costs focussing world entities touringworld testbed parameters described fully chapter 
touringmachines planning layer physical relations front distance stopped travelling speed communicating signal identity relations entity agent object self temporal relations novel disappeared changed speed changed direction started communicating signal distance speed signalling variables respectively 
focussing predicates touringworld attention director wood agents woo filtering capability perception subsystems hayes roth blackboard architecture hr 
effective generating upto date context sensitive focus set somewhat robust errors touringmachines constantly monitor world able react times unexpected events temporary focussing errors need prove fatal 
touringmachine mechanism means considered complete general purpose focussing capability 
instance contents rule set change explicit requests planner currently part agent plan refers entity agent information planner flag focussing mechanism see demand relevant entity entity type focussed timeslice effect appropriate focussing rule gets added ordered rule set 
touringmachines planning layer bulk rules static need specified ordered user advance 
way increase touringmachines adaptiveness enable focussing mechanism run time historical information example number type rule firings previous scenarios establish improved statistical ordering focussing rules russell rw refers post hoc inductive metalearning 
capability implemented possible candidate involving learning see chapter 
planner overview planner generates executes plans means achieving initially assigned task agent 
described chapter layer planner intended general purpose planning capability 
designed practical generating effective goal oriented behaviours multi agent dynamic world time operating independent control module conjunction dissimilar ones layers rand planner exhibits characteristics considered necessary practical operation complex domains 
particular lengthy detailed plans fail worlds planner interleaves plan generation execution 
early planning systems strips fn noah sac touringmachine planner start complete picture world 
knowledge limited currently perceives focussed relied produce complete correct plans different situation 
approach interleaving adopted similar mcd method lazy skeletal expansion phoenix agents hc plan generation execution mixed choosing step plan time executing 
advantage planner susceptible unexpected events environment potentially help minimise wasted planning effort 
hand hendler htd point approach susceptible subplan interaction errors commit prematurely particular subplan temporal orderings prove incorrect 
alleviate problem planner designed defer committing touringmachines planning layer specific choices plan execution methods absolutely necessary 
touringmachines able reaction rand execution monitoring keep changes world take corrective actions necessary reasonably prepared deal eventualities arise sub optimal planning 
widely recognised complex domains planning done hierarchically different levels abstraction allow planner manipulate simpler computationally tractable theory world wil 
abstraction levels distinguished granularity discriminations world 
touringmachine planner employs levels plan generation process producing partially elaborated hierarchical subgoaling structure description environment 
particular plans different abstraction levels describe aspects world pertinent current situation 
touringworld domain instance reasoning things absolute world coordinates done level concerned route level navigation target landmark 
navigation domain touringworld particularly useful facilitates planning tasks full details initially available subsequently obtained execution task example precise cartesian location landmark 
similar view taken design navigation oriented planners woo 
independent synchronously timed control layer inter operation latency guaranteed 
computational demands planning glance incompatible requirement certain design constraints imposed planning process 
result planner designed incrementally kaelbling describes doing computation steps timeslice storing state timeslice kae 
planner real action effect world simply execute time planner output interpreted saying planner complete solution 
advantage embedded design kaelbling points allows agent programmer specify hierarchical action map separates enables concurrent execution actions specified terms planner level operators actions easily expressed reflexive reactions kae 
course precisely relationship exists layers tenets touringmachine architecture minimise amount control layer perform worth touringmachines planning layer message task handler task stack schema library world map attention mechanism effectors layer action buffer resource monitor focus plan processor planner 
lining planner design simplified act single agent device words designed act blindly agents world 
planner effect assumes existence idealised exception free environment burdened functions temporal projection plan execution monitoring 
capabilities performed agent modelling layer mand described chapter 
considering operational details planner 
operation touringmachine planner comprises main components message task handler plan processor see 
message task handler charged handling messages requesting planner task 
task requests received agent modelling layer effectors 
receives agent initial task example plan route extra tasks dynamically generated deal certain exceptional events example stopping give way agent effectors receives requests iterate certain actions require timeslice execute see plan execution 
new task requests taken start timeslice planner activities generally relied reflect touringmachines planning layer agent changing task related needs 
plan processor constructs plans task requests passed message task handler 
plans built retrieving suitable plan templates schemata schema library retrieval combined plan processor form plan structure subsequent processing 
similar function skeletal plans phoenix hc procedural kas prs gls schemata general representations task related activity performed plan processor 
activities involve library retrievals decompose process schema constituent plan sub steps body see plan generation involve execution low level action 
bodies schemata decomposed constituent sub steps incrementally placed appropriate points plan processor plan structure hierarchical temporally constrained tree representing planner working solution task 
eventually due position temporally constrained structure low level actions get selected processing subsequent submission agent effectors 
plan processor operation terminates entire generated plan structure fully processed task requests received planner message task handler 
just focus attention mechanism operational costs monitored guarantee upper bound computational latency planner 
particular costs operations handling task request messages retrieving schemata library placing plan structure executing low level actions plan structure continuously tallied deducted planner resource allowance 
resources eventually run planner suspends plan processing inactive timeslice 
incremental behaviour guarantees time bounded responsiveness required planner particular layer 
making stored plan templates residing schema library planner access information sources focus attention mechanism topological world map see 
retrieved schemata things agent location entity speed planner uses current focus fact just operation suspended timeslice plan processor performs third activity instructs layer message task handler send layer ma message content specifies name current plan schema processed 
described chapter information layer maintain model agent current intentions 
touringmachines planning layer set produced layer focus attention mechanism fill appropriate gaps uninstantiated variables generated plan structure see planner access database uses long term static storage medium touringworld domain database embodies topological world map containing names locations various paths path junctions agent world 
information likewise instantiate unbound variables generated plan structure 
plan generation plan generation starts retrieval appropriate plan template schema matching agent initially assigned task 
tasks received messages layer represented task name argument list pairs 
touringworld domain example initial task description plan route agent agent final destination travel time distance interpreted planner touringmachine agent instruction generate execute route location called take units time getting units distance final target 
schemata frame structures defined set tribute value pairs shown 
schema retrieval performed searching schema library schema name arguments attribute values match name argument list respectively planner assigned task 
suitable match chosen schema selected variables unified corresponding values assigned task description 
example initial plan route task corresponding schema destination replaced 
instantiated schema start construction plan processor hierarchical plan structure instantiated schema typically plan route touringworld domain root node structure root node name argument matching done standard prolog unification cm 
schema entries starting lower case letter example final destination treated ground terms entries starting upper case letter example destination treated variables 
denotes anonymous don care variable 
touringmachines planning layer name plan route type composite version cost arguments agent agent final destination destination travel time distance applicability conditions time par lt time par time par lt time par preconditions body get route time par agent agent final destination destination route route route length get route speed time par agent agent route route route length travel time travel speed follow route time par agent agent route route travel speed postconditions composite schema top schema generating route target destination time 
touringmachines planning layer plan processor current plan current plan instantiated schema considered subsequent processing 
plan processor processes instantiated schemata words plan nodes plan structure type 
type schema primarily dictates plan processor interpret executable core body 
schema types composite primitive 
composite schema see body slot contains list body steps 
body steps interpreted subtasks initial schema processing composite schema result plan processor performing retrievals schema library 
primitive schema see body contains executable routine code fragment triggering library searches performs numerical computation result agent plan structure example agent estimated stopping distance effects low level action world see plan execution 
processing composite schema amounts primarily decomposing body subtasks retrieving suitable library schemata subtasks placing instantiated child schemata plans appropriate points plan processor plan structure 
decide structure place child plans original composite parent schema applicability conditions considered 
applicability conditions schema set constraints establish temporal ordering schema body steps 
constraints triples form ime starttime expresses particular temporal relational ordering processing start times starttime starttime pair body steps appearing schema body slot 
example plan route schema constraint time par lt time par denote fact body step get route argument time par processed body step get route speed argument time par 
similarly constraint time par lt time par indicates body step get route speed processed follow route 
relational ordering operator lt interpreted plan processor words occurring earlier time 
ordering operators include le equal gt greater ge greater equal 
comparing pairs ordered starting times body step corresponding earliest starting time determined corresponding schema selected library placed plan processor plan structure left child current parent node 
repeated touringmachines planning layer name calculate stopping distance type primitive version cost arguments speed rate period stopping distance distance applicability conditions preconditions body temp speed period rate period period truncate location temp distance postconditions primitive schema calculates stopping distance agent travelling speed rate unit time 
body step original parent schema new child schema located right sibling nodes placed plan structure 
having established complete ordering original schema body steps children plan processor proceeds processing schema left placed child schemata 
processing schema carried manner parent schema 
schemata processed strict earliest postorder children parents manner 
far schema processing described solely terms schema body processing secondary schema processing activities addressed 
fact takes place schema body processed involves processing schema preconditions 
second activities takes place immediately body processed involves processing schema postconditions 
essentially schema precondition slot specify conditions agent external world true processing schema body commence 
postconditions slot hand specify external world conditions true planner complete processing current schema move process schema plan structure 
touringworld domain example schema poll traffic light selected processing agent comes red traffic light postconditions slot test check touringmachines planning layer traffic light question changed colour green 
conditions appearing preconditions postconditions schema match currently true world plan processor suspends activity planner exited timeslice point schema reconsidered 
example poll traffic light schema processed repeatedly timeslice appropriate traffic light turns green 
applicability conditions state conditions events internal planner order different subplans processed preconditions postconditions state conditions events outside planner direct control may may take place 
conceivable planner get stuck processing schema indefinitely example particular traffic light turns green occurrence considered exceptional handled touringmachine layer describing execution phase plan processing final aspect concerning schema retrieval requires addressing 
agent planner achieve assigned task way schema library contain corresponding number schema templates name particular task distinguished unique identifier version number 
library searched schema turns matching versions plan processor decide schema type composite primitive ones select 
particular schema retrieved composite retrieved selected version number fact arbitrary 
reflects view similar adopted mcdermott planner plan execution generation interleaved maintaining backtracking points possible ways achieving planned task done strips fn example simply unsuitable 
mcdermott puts plan fails state world general changed attempt alternative plans date mcd page 
schema primitive hand schema retrieved case alternative schema version numbers considered potential backtracking points recorded possible note current schema suspended entity referred preconditions postconditions slot part agent current focus set 
mentioned section side effect occurs planner non focussed entity flag gets sent layer focus attention mechanism instructing focus entity 
quite entity part current focus set timeslice 
course entity presently sensing range current schema remain current schema repeatedly processed suspended entity sighted 
touringmachines planning layer plan structure alongside retrieved schema 
approach reflects view exhaustive backtracking typically unsuitable ability defer commitment particular primitive schema particular execution method potentially help minimise extra required planner preferred execution method failed reason 
discussed detail shortly 
plan execution repeating decomposition retrieval placement procedure described far results creation temporally constrained hierarchical action ordering plan structure 
starting original task retrieved schema root structure generative procedure continues schema process primitive schema 
composite schemata effect considered nodes plan structure primitive schemata regarded leaves 
primitive schemata composites decomposable bodies 
bodies consist routine code fragment directly executed plan processor 
types operations performed primitive schema body 
involves computing values unbound argument variables referred plan structure 
example get route speed appears body step composite schema plan route primitive schema 
computes agent ideal average travelling speed argument travel speed shares computed result nodes generated plan structure travel speed argument example sibling node follow route 
arguments primitive schemata divided logically input output arguments composite schemata input arguments 
computations shared schemata plan structure propagating computed results appropriate output arguments 
example schema calculate stopping distance shares result output argument stopping distance distance 
results propagated schema siblings structure repeatedly schema ancestors possessing appropriate argument 
second type operation primitive schema perform precisely composite schemata considered nodes described backtracking points alternative versions schemata recorded 
code fragments written sicstus prolog see example 
touringmachines planning layer submitting action command agent action buffer 
touringworld domain set action commands planner submit include performed layer change speed change orientation variety communicative action plans signal left horn 
mentioned previously planner executes action time 
precisely submits action command agent action buffer timeslice suspends operation timeslice 
course actions submitted planner effectors may take execute full 
instance planner instructs agent effectors execute change orientation say ffi agent capable turning ffi timeslice take particular action complete 
permit single touringmachine control layer tie effectors arbitrarily long periods time effectors programmed execute possibly timeslice ffi turn say resubmit remainder action task planner 
timeslice planner message task handler pass new task plan processor processing corresponding action partially executed procedure repeated action ultimately completed 
touringmachine planner resource bounded executing actions realistically resources sort schemata provided cost attribute see figures inform planner minimum number timeslice resources particular schema processed 
cost associated composite schema intended cover operations retrieval subsequent subplan decomposition calculated factor number body steps schema cost primitive schema intended cover expense processing executable body 
cost attribute schema deciding suspend planner operations insufficient resources exist retrieve schema library process schema body planner operations suspended timeslice resource pool 
precisely current schema processed composite resources sufficiently depleted planner suspension takes place immediately 
current schema primitive plan pro course happens iterated actions non exceptional circumstances 
actions submitted control layers iterated actions potential candidates suppression see section may terminated prematurely 
touringmachines planning layer test preconditions current plan preconditions satisfied current plan goto planner current plan active body steps expand place schema selected body step goto process current place schema body step determine plan goto process current test postconditions current plan postconditions satisfied current plan determine plan goto process current current plan goto planner algorithm process composite schema pseudocode 
current plan schema plan processor plan structure currently processed 
plan active suspended previous timeslice 
statement goto process current plan iterative call process current plan algorithm shown depending type 
cessor consider schema recorded alternative versions current schema suitably low cost attribute warrant processing current timeslice 
idea having different versions primitive schema having access execution methods differing computational requirements solve common task example different distance ranging schemata varying degrees accuracy 
touringmachines heuristically programmed maximise timeslice resource utilisation consider different schema versions order decreasing cost 
suitable schema remaining discarded chosen schema executed processing suspended continued timeslice 
executable bodies primitive schemata composite counterparts possess preconditions processed schema body postconditions processed immediately body 
primitive schema fully processed removed plan touringmachines planning layer test preconditions current plan preconditions satisfied current plan goto planner current plan active sufficient resources execute current plan body propagate appropriate variable bindings dequeue current plan determine plan goto process current suitable exists place schema selected current plan goto process current current plan goto planner test postconditions current plan postconditions satisfied current plan determine plan goto process current current plan goto planner algorithm process primitive schema pseudocode 
structure 
plan processor decide node plan structure process 
strategy described process siblings removed schema time selecting earliest words postorder search plan structure 
sibling schemata processed plan processor moves level plan structure removes parent schema processed commences process siblings latest 
process repeated root plan structure schema corresponding planner original task current plan point planner suspends activities 
full pseudocode algorithms processing child goals parent node considering parent siblings implies interactions assumed occur different goals subgoals plan 
words planner linearity assumption htd 
touringworld task domain solutions different subgoals example separate stages route fairly easily decoupled reasonable simplifying assumption 
clearly decision reconsidered touringmachines tasks suited linear planning methods 
touringmachines planning layer processing schemata figures composite schemata primitive schemata 
planning touringworld touringmachine planner charged building initial single agent plan executed accomplish agent main goal reaching target destination spatio temporal bounds 
library template schemata topological world map containing locations known paths path junctions planner generates shortest length route target location computing suitable cruising speed satisfy deadline 
generating initial ordered list component path names planner proceeds tackle sequence intermediate stage route 
handle individual paths planner generate plans help determine things agent currently direction head reach path route 
ultimately planner submit necessary actions physically move agent right direction right speed intermediate path comprising route see 
level individual paths planner external landmarks example particular objects information signs establish certain actions need taken 
landmarks listed topological world map associated different paths path junctions example mark transition path note visible 
exact locations external landmarks topological map planner explicitly look particular objects signs correct path path transitions 
processing sensory input creates extra planner landmarks explicitly tested schemas preconditions postconditions slots closely coupling planner agent sensors advantage making dependent detailed prior information potentially brittle execution time 
single agent device planner usually concern see appendix page syntactical description agent topological world map appendix page complete list touringworld schema template names 
algorithm calculate shortest length route sterling shapiro best search algorithm ss pages appropriately modified favour routes fewest hops case junction 
touringmachines planning layer single agent exception free environment obstacles obstructions sort touringmachine initially generated route plan sufficient accomplish initially assigned navigation task 
agents activities whereabouts 
example planner prior knowledge regarding whereabouts traffic lights signs recorded topological world map touringmachines planned stops changing direction leaving path joining 
planner intended operate complex environments able cope degree world change capable new tasks prompted agent changing context 
mentioned planner takes extra tasks appropriate task request messages received agent modelling layer new task requests example yielding agent junction stopping red traffic light considered high priority touringworld domain placed earliest planner plan structure 
schema retrieved new task composite primitive handled accordingly simply part agent original task 
mechanics process dynamically generated tasks chapter hopefully demonstrated essentially quite straightforward steps required generate tasks involved topic chapter 
touringmachines modelling layer sat room drew plan plans fall time 
accept real world domains touringworld populated multiple autonomous entities involve dynamic processes control particular agent 
planner generally agent useful domains number special skills required 
ability monitor execution actions ability reason actions outside sphere control ability deal actions negatively interfere goals ability form contingency plans overcome interference 
georgeff geo argues require agent capable coordinating plans action reasoning mental state beliefs goals intentions entities world knowledge entities motivations limited communication entities way restricted agent able infer mental state observations entity behaviour 
kirsh addition argues touringmachines modelling layer survival real world human style environments agents require ability frame test hypotheses agents behavior page 
behavioural repertoire needed operating complex dynamic environments available number different reactive layer planning layer control functions situations arise touringmachine initial goals plans generated achieve goals longer carried success 
minsky min page puts matter neutral rational goal may eventually conflict goals persists long 
exceptional situations noted chapter called goal conflict situations arise touringworld domain result unexpected interference entities example space time trajectories agents intersect common point 
situations viable effective course action agent alter dispose existing goals plans generate new ones address agent new requirements opportunities 
exceptional situations demand agents fairly sophisticated level autonomous control control providing high degree goal flexibility adds enriched spatio temporal dimension agent decision making capabilities 
words control difficult achieve solely kind hardwired pre planned responses produced touringmachine reactive planning layers 
overview layer main objective layer mis provide agent reflective predictive see page capabilities necessary strongly desirable effective operation complex multi agent environments 
precisely provides agent range tools functions building maintaining mental causal models world entities including agent example identifying entity behaviours world events expected causally explaining observed behaviours events detecting re certain types goal conflict occur sooner reasonably interesting multi agent touringworld scenario 
described previous chapter touringmachine ignorant agents objects navigable paths lead destination initially set traffic lights give way agents uncontrolled junctions conflicts occur environment populated entities agent obey certain traffic regulations avoid colliding entities 

touringmachines modelling layer module clock action buffer buffer perception focus attention mechanism module explanation prediction top level view modelling control layer solving goal conflicts arisen events conflicts occur agent set goals goals different world entities making short long term spatio temporal predictions entities possible behaviours possible outcomes observed world events 
layer layers rand operates independent control module 
synchronous fashion input agent perception buffer start timeslice sends output agent action buffer timeslice see 
touringworld domain input takes form symbolic multi attribute information records see describe physical configurations perceived world entities including agent 
output takes form physical communicative action commands agent effectors discussed detail 
functionality layer shown shared major components focus attention mechanism explanation module prediction module 
layer operations include potentially lengthy searches agent plan space deliberative operations layer computationally expensive certainly relative layer order touringmachines capable operating dynamic real time environments inter operation latency various deliberative modelling functions bounded 
step achieving limit amount information layer reason 
described section main purpose focus attention mechanism 
touringmachines modelling layer explanation module responsible generating plausible inferred explanations entity behaviours observed 
specifically explanation module responsible building maintaining models observed entities including detecting discrepancies entities current behaviours anticipated predicted occur previous encounters see 
behavioural discrepancies detected task explanation module infer plausible explanations occurrence 
model discrepancies identified causes inferred prediction module responsible constructing space time projections simulations entities modelled 
agent detect potential interference conflicts modelled entities anticipated case model desired actions 
conflicts intra inter agent identified task prediction module determine conflicts best resolved entities responsible carrying resolutions 
order agent able comparisons observed anticipated entity behaviours prediction module construct appropriate expectations subsequent explanation module mentioned 
potential gain having kind explanatory predictive powers layer having better understanding causes various entity behaviours observed able successful predictions entities ensuing courses action touringmachine able detect resolve potential goal conflicts early irreversible 
enable touringmachine changes plans effective manner wait conflicts 
going operational details layer explanation prediction functions description layer attention focussing capabilities prove useful 
focus attention purpose general operational characteristics layer focus attention mechanism identical layer counterpart see section 
aim focus attention mechanism filter layer perceptual intake reducing set perceived world events set containing events agent agent touringmachines modelling layer resource monitor buffer perception prioritised focussing current focus set previous focus set explanation module rules layer layer focus attention mechanism designer considers relevant task related needs 
carried ensure layer layer computationally resource bounded capable timely responses variety real time changing world conditions 
layer attentional mechanism layer see consists set user specified prioritised focussing rules heuristically selectively filter information agent perception buffer produce output form current focus set collection relevant perceptual information records see example subsequent layer explanation module 
applied point view agent doing focussing relative current world time focussing rules express domain specific relations different entities satisfied entities form part agent current focus set 
complete set focussing rule predicates touringworld domain 
entities alter behaviours move space time relationships focussing agent world entities change 
relationships change different focussing rules satisfied different entities focussed time progresses 
precise number entities focussed time established layer charging mechanism timeslice bounded computational resource pool entity brought current focus set 
touringmachines modelling layer focussing rules layer selected agent designer advance mechanism exists automatically altering contents rule set run time 
allowing agent layer rto inform layer various entities reacting mechanism alluded chapter enables layer take account include model set types entities hitherto chosen focus 
implicit assumption agent just reacted entity agent modelling layer possess model entity deal entity reasoned competent manner 
presence rule changing mechanism provides main reason maintaining separate attentional mechanisms layer layer individual focussing requirements agent planner explanation module differ control layers different model agent world important ensure current focus set layer biased run time focussing alterations 
providing layer focus attention mechanism requirement easily satisfied 
explanation explanation module comprises main components message handler model building mechanism model discrepancy handler theory formation selection mechanism see 
message handler receives processes messages convey information status agent components 
particular messages received agent effectors agent planning control layer receives information describing layer responsible agent action explained useful informing layer unplanned layer action just taken place possibly layer longer term interests agent planning layer receives date statement agent current intentions described required part agent mental model 
model building mechanism constructs maintains mental causal models entity corresponding information record presently resides touringmachines modelling layer handler message model building mechanism attention mechanism focus effectors layer discrepancy model handler model library resource monitor attention mechanism focus module prediction module prediction conflict library theorist theory formation selection mechanism explanation module agent modelling layer current focus set 
fact timeslice subset entities focussed selected modelling precise number established process focus attention mechanism charging timeslice resource pool entity consideration 
note choice entities model basis contents importantly specific ordering entities agent current focus set model building mechanism effectively driven heuristic selection rules focus attention mechanism 
model described fully section structure agent representing reasoning physical logical behaviour observed world entity 
purpose control coordination agents mentioned chapter able reason entities activities 
words agents capacity particular aspects environment able construct deploy internal models entities 
reasoning models intended allow agents meaningful interpretations entities behaviours described fully chapter timeslice resource totals separately available focussing modelling entities defined appropriate touringworld testbed parameters 
touringmachines modelling layer situational context behaviours observed 
idea making correct interpretations agent provided useful insights entities behaviours changes behaviour 
agent model entity data structure posing answering certain questions example current intentions goals threatened current conflict situation resolve pressing goal conflict doing units time 
model regarded source knowledge contains assumptions aspects entity modelling agent deems important explaining entity behaviour 
common model structure touringmachines time indexed tuple form hc ii entity configuration location speed acceleration orientation signalled communications set beliefs ascribed entity ascribed list prioritised goals desires ascribed plan intentions structure 
referred variables components model specific values taken components specific connections causally link components inferences entity behaviour see 
models noted permanent structures agent store maintain duration operation 
agent deliberately chooses discard model world entity typically done agent failed observe entity considerable period time models held agent persist timeslice updated required 
sections 
process constructing model entity cases need considered case occurs entity modelled just observed agent time second case arises exists record entity having observed time past 
entity just observed time initial model built retrieving suitable model template model library see 
model templates partially instantiated data structures serve basis constructing models individual world entities various types example touringmachines traffic lights precise length time established testbed parameter called see chapter 
touringmachines modelling layer obstacles 
discussed detail section model templates provide number default values components constitute entity model 
example model template touringmachine entity contain things default desire avoid collisions 
model retrieved new entity operations take place 
involves time stamping model current value agent internal clock clearer necessary 
second operation update retrieved model date information held entity 
things model updated relevant information entity current physical configuration location speed acceleration orientation set communicated signals information extracted directly appropriate information record agent current focus set 
second case entity consideration previously observed importantly previously modelled agent library template retrieval takes place 
agent existing model entity time stamp gamma agent internal clock currently time simply updated case appropriate configurational information obtained agent current focus set 
far descriptions agent timeslice collection models determined model configurational information gets filled purposely omitted number operational details 
concerns fact times layer current focus set empty 
situation arises model building mechanism decide entities model considering entity models stored previous selecting whichever entities selected entity names obtained current focus set 
done simply applying focus attention mechanisms heuristic focussing rules set stored modelled entities 
second operational detail concerns situations selecting appropriate entity names current focus set assuming non empty start model building mechanism left extra resources modelling entities 
situations procedure possible admittedly useful common configure touringmachine sense world timeslice agent precise rate sensing established testbed parameter see section appendix models reflects surroundings times touringmachine rate modelling similarly established testbed parameter described chapter 
agent sense timeslice understandably focus attention reflect occurrence agent current focus set flushed empty sensing performed 
touringmachines modelling layer consider selecting resources permitting additional entities appear current focus set modelled agent past 
ties third final operational detail retrieving updating models update configuration component entity model location speed orientation required information available current focus set 
solution straightforward modelling agent assume entity current configuration anticipated projected agent prediction module time particular entity modelled 
information may incorrect agent means knowing entities presently serve viable default certainly agent senses updates current focus set 
agent entire collection stored entity models updated relevant configurational model component information agent position exploit models remaining processing stages explanation module reasoning entities observed behavioural discrepancies forming theories explain causes discrepancies 
proceeding give detail processing stages worth mentioning points role resource monitoring modelling layer 
just focus attention mechanism operational costs monitored guarantee upper bound computational latency explanation module see 
particular costs operations message handling model building updating continuously tallied deducted layer timeslice resource allowance 
resources run model building mechanism ceases select items focus attention mechanism current focus set effectively limiting timeslice set entities handled remaining processing stages modelling layer model discrepancy handling theory formation selection goal conflict detection resolution model expectation generation pertaining prediction module discussed section 
limiting number entities processed ensuring precise number entities able processed time constraints imposed agent constant sized processing cycle done ensuring worst case time demands remaining layer stages taken account resource tallying deduction functions just referred time bounded responsiveness explanation module particular layer touringmachines modelling layer guaranteed 
reasoning models model reasoning mbr ai methodology reasoning diagnosing complex physical artifacts hydraulic mechanical controllers electronic circuits 
generally mbr reasoning principles commonsense reasoning known umbrella term studies covering different aspects advanced knowledge representation reasoning lee 
particular concerns concepts causality intention order reason way artifacts systems agents perform 
basic paradigm model reasoning diagnosis best understood interaction observation prediction dh page artifact model artifact predictions artifact desired expected behaviour observation indicate artifact doing prediction indicate supposed 
interesting event context surely difference discrepancy occurs 
model artifact diagnostic reasoning seen process assigning credit blame parts components model behavioural discrepancies observed 
situations model presumed correct model artifact discrepancies regarded indicating component malfunctions artifact diagnostic reasoning task typically referred troubleshooting 
hand artifact presumed correct conversely model artifact discrepancies regarded indications malfunctions required changes model artifact reasoning task known theory formation 
task formation theories artifacts entities behaviours concern modelling layer touringmachine elaborated shortly 
useful provide detail structure touringmachines model templates 
tuple definition model template purposely simplified give preliminary high level description basic structure purpose 
fact models touringmachines number components described 
model templates alluded frame structures defined touringmachine plan schemata set component value pairs shown 
model retrieval performed searching model li touringmachines modelling layer see template type component value matches type entity currently investigation agent 
entity types touringworld domain include mobile agents touring machine environment agents traffic light rain fog various objects example obstacle wall types described chapter 
process touringmachines model touringworld entities type touring machine entities non mobile non intentional considered special admittedly interesting case describe 
cases discussed section remaining discussion focus process touringmachines model touringmachines includes course case touringmachine modelling 
suitable type match resource check carried determine template identified afforded agent 
value associated template cost component inform model building mechanism minimum number timeslice resources particular template processed purpose resource charging explained previous section 
particular constraint satisfied model building mechanism continue search suitable cheaper template type 
mechanism simply cease model entities current timeslice 
hand cost constraint satisfied model template selected number variables unified appropriate data values supplied agent particular name component name entity described model timestamp component current value agent internal clock 
interesting components model introduced 
configuration beliefs desires intentions components 
configuration component model storing information modelled entity observed physical configuration known location speed acceleration orientation set communicated signals record example entity observed braking horn indicating turn 
information mentioned obtained modelling agent current focus set 
beliefs component storing agent considers entity set beliefs words agent beliefs plan schema attributes model template components values matched retrieval time standard prolog unification cm 
touringmachines modelling layer type touring machine cost name timestamp configuration location speed speed acceleration acceleration orientation orientation communications communications beliefs size size self physical capabilities physical capabilities self sensing parameters sensing parameters self focussing parameters focussing parameters self layer parameters layer parameters self layer parameters layer parameters self layer parameters layer parameters self current focus set current focus set self rain factor fog factor inter agent distance running light boundary rights way rights way standard uk desires avoid collisions obey regulations reach destination destination destination travel time lt deadline distance proximity intentions plan route arguments defeasible components intentions expectations location speed acceleration orientation communications touring machine model template 
touringmachines modelling layer entity beliefs 
belief beliefs component realised simple grounded attribute value pair 
template example pair inter agent distance represent modelled entity presumed belief recommended safety distance agents motion spatial units 
similarly template pair physical capabilities physical capabilities self represent agent belief entity physical capabilities example maximum speed acceleration rate agent possesses argument self words refers agent doing modelling entity modelled 
desires component model consists prioritised list desires goals modelled entity considered possess 
mentioned previous chapter touringmachine may number maintenance homeostatic goals example avoid collisions obey regulations single achievement goal touringworld domain reach destination 
intentions component model storing entity presumed intention structure words hierarchical plan structure agent believes entity past generated processing order accomplish sole reach destination achievement goal 
fact simplify matters somewhat entities considered initial intention plan route identical schema libraries decomposing initial intention modelled entity intention structure represented solely terms entity presumed current intention terms hierarchical plan structure node entity planner currently presumed processing 

mentioned common model template touringmachines modelling touringmachines modelling worth mentioning concrete difference self non self models reside level uncertainty information store 
arises fact touringmachine models entity know certainty entity precise desires intentions 
entities assumed common set prioritised desires initial plan route intention precise arguments taken model components defining things entity particular target destination task deadline remain unknown entity modelling agent beliefs regarded simply agent beliefs beliefs beliefs 
touringmachines modelling layer observers typically duration task scenario 
distinguishing feature touringmachine model entity typically complete detailed model holds presence non self models unbound component member values see example destination deadline non self model template 
process associating initial partially instantiated model template entity essentially ascribing entity default causal description explanation behaviour 
nature touringmachines computationally informationally resource bounded agents suggest ascribe entities completely correct 
apart information possess ascribe models words physical configurations beliefs desires intentions plus physical configuration information acquire entities sensory focussing mechanisms rest touringmachines observe entities directly may incorrect 
models useful appear agent times willing revise disagree agent current observations world 
undertaking revision model number model components considered culprits observed model entity discrepancies potentially worth revising 
different orders component revisions worth considering 
precisely sort information stored defeasible components attribute model see ordered list model components detection model entity discrepancies agent consider revising 
general attempting explain complex entity behaviour question assumptions need revised assumptions means straightforward answer 
aspects question addressed chapter scope dissertation provide general theory modelling complex intentional behaviour autonomous agents 
simplify matters respect dissertation concerned solely modelling agents best described mentally structurally homogeneous touringworld domain means agents touringmachines assumed universally similar physical configurations beliefs desires 
words touringmachines assumed differ respect intentions 
deal heterogeneous agents may may share goals beliefs entity environ touringmachines modelling layer ment raised avenue chapter 
subsections develop notions model entity discrepancy intention ascription theory formation 
handling model discrepancies philosophy ascribing default models world entities similar lies default rule system wilks ballim wb page assume view entity view explicit evidence contrary 
agent modelling environment evidence entity behaving expected manifest form model entity difference discrepancy 
course raises questions behavioural expectations get formed 
discussed briefly start chapter expectations entities behaviours generated agent prediction module 
precise mechanism generation expectations section 
sufficient note things behavioural expectations expectations held agent time stored model information time gamma words information obtained appropriate models displaying timestamp component gamma ii framed context entity presumed beliefs desires intentions expectations entity refer solely entity projected physical configuration expected location speed acceleration orientation communicated signals iii projected physical configurations stored models expectations components see 
discrepancies entity behaviour detected direct comparison values current configuration values projected expectations components entity model 
particular discrepancy exist entity current location speed acceleration orientation parameter values differ previously projected entity current set communicated signals identical previous set 
envelopes phoenix agent hhc monitors dynamic reaction architecture sh see section expectations act constraints outcomes actions outcomes case agent modelling desired agent occur case agent modelling entity predicted occur 
respect model discrepancy regarded indication model entity consideration sense faulty revised 
note agent detects touringmachines modelling layer discrepancies model holds need revise self model agent knows beliefs desires intentions absolute certainty checking discrepancy result agent actions executing intended indication agent goals threat 

pointed stage detecting discrepancy actual predicted desired behaviours need occasion force agent wholesale revision faulty model 
associated parameters model expectations component upper lower bounds deviations permitted model revision necessary 
deviation tolerance bounds implemented testbed parameters set size user chapter 
different settings tolerance bounds affect amount environmental change agent perceive amount time agent need spend revising models 
issue environmental sensitivity important investigated closely chapter 
checking models discrepancies agent situations discrepancies models 
cope fact touringmachines resource bounded dynamic multi agent world probably important respond potential conflicts entities minor adjustments travel speeds satisfy pre imposed deadlines touringmachine agent architecture designed favour dealing discrepancies models entities arisen agent self model 
words touringmachines designed favour re explaining entities behaviours checking goals threat 
types situations considered detail starting situation agent finds discrepancies 
situations model discrepancies agent effect takes opportunity check prioritised goals desires threat longer term 
agent detect self model discrepancies words agent appears moving predicted redundant agent check goals danger met 
situations touringmachines modelling layer reasonably wide tolerance bounds expected orientation example ffi self model goal checking disabled possible long individual deviation causes agent move original heading ffi agent fail notice orientation discrepancies eventually seriously course see left hand frame 
hand agent able carry self goal checking assumes agent reach destination goal suitably constraining distance argument attached see agent stray course extent see right hand frame 
goal checks prove crucial agent long term success 
consider example agent reasonably wide tolerance bounds placed expected orientation say ffi parametrised agent reacting example presence obstacle path easily heading away goal noticing long term problem long individual reaction causes orientation swing greater ffi side original heading see 
goal conflicts type detected considering turn agent prioritised goals set member desires component agent self model see running appropriate conflict resolution rules residing agent conflict library see 
purpose rules enable agent project goals space time touringmachines modelling layer determine exist potential conflicts long term vis vis eventual achievement 
detailed description rules explanation deferred section agent goal conflict detector discussed 
purposes sufficient point application various conflict resolution rules agent goals considered threat record fact agent goal conflict detector subsequently take appropriate action 

situations agent detected model discrepancies cases distinguished 
involves special type discrepancy occurs exactly agent decides model 
discrepancy arise virtue fact expectations component agent self model empty model processed prediction module expectations generated far 
discrepancy fact interpreted flag instructing explanation module send message agent layer setting initial task taken planner task plan route plus associated arguments obtained intentions component agent self model messaging procedure described earlier section 
second discrepancy detection case involves detection self model discrepancy time arises agent model new deviation configuration expectations components 
far attempting explain self model discrepancies little done stage record discrepancies occurred defer treatment goal conflict detector invoked see section 
final case involves detection discrepancy model entity 
require agent revise model particular errant entity attempt explain entity new unexpected behaviour 
model revision process subject subsection 
theory formation selection agent deciding revise model world entity consider model components need changed 
mentioned section problem simplified somewhat dissertation restricting defeasible components entity model consist solely entity presumed intentions words plan structure modelling agent believes entity processing order accomplish single achievement goal reach destination 
touringmachines modelling layer context process revising model usefully viewed diagnostic reasoning theory formation identification model malfunctions observations modelled entity 
turns suitable practical system carry diagnostic reasoning exists called theorist 
theorist pga logic programming system constructing scientific theories constructing explanations observations terms various facts hypotheses 
theorist system representation reasoning 
theorist knowledge base consists collection order clausal form logic formulae classified closed set consistent formulae facts known true world ii possible hypotheses delta accepted part explanation iii set observations explained 
theorist reasoning strategy attempts accumulate consistent sets facts instances hypotheses explanations observations logical consequences 
explanation theory subset possible hypotheses consistent imply observations 
formally said explainable subset delta consistent 
said theory explains seen scientific theory pga page 
theorist described theory implementation default abductive reasoning poo 
ways theorist performing abductive diagnosis finding set causes example diseases imply observed effects example patients symptoms 
system artifact diagnosed entity agent modelling re interpreting symptoms entity observed actions causes entity actions physical communicative regarded entity intentions 
emphasise touringmachines beliefs desires accepted common considered theory formation process 
note context touringmachines process finding intentions cause entity actions effectively performing plan inference recognition car 
brief description theorist applied intention ascription plan recognition touringworld domain follows 
davis refers task inferring agent goals plans actions motivation analysis dav page 
touringmachines modelling layer theorist invoked agent entity models displays model entity expectation observation discrepancy 
particular theorist called supplying name agent doing modelling name entity modelled agent observations entity relevant details entity current configuration modelled agent current value agent internal clock 
theorist reasoning strategy tries accumulate consistent sets facts instances hypotheses defaults explanations observations logical consequences 
facts defaults reside theorist see knowledge base containing domain model touringworld expressed terms various faults explain entities errant behaviours 
context faults viewed causes intentions certain events certain observed actions entity occurred world 
causal knowledge touringworld domain represented theorist implications form intention observations 
gives selection touringmachines touringworld domain 
syntax representing facts defaults differs slightly poole pga fact default order clausal form logic formula 
statements means clause member set facts defined second means instance name clause member set possible hypotheses defaults delta 
name exists primarily way referring default theory explain observations observations entity processed theorist modelling agent find possible states vis vis able explain modelled entity intentions 
comes agent fails produce explanation entity behaviour words theorist fails generate theory account entity observed actions 
occur instance domain model described theorist incomplete 
approach adopted case agent ascribe intention explain observed entity 
entity ascribed names follow path start overtake exactly names schemas reside touringmachine schema library described previous chapter 
full list names appendix page 
touringmachines modelling layer fact intends follow path fact intends start overtake signal right fact intends finish overtake signal left fact intends light braking fact intends junction braking fact intends turn target signal right fact intends turn target signal left default follow path intends follow path default start overtake intends start overtake default finish overtake intends finish overtake default light intends light default junction intends junction default turn target intends turn target values associated respectively speed acceleration configuration component modelled entity 
selection theorist entries touringworld domain 
intention treated agent special care specifically subsequent agent treat presence explain value intentions slot model entity reminder theory previously explained entity behaviour result theory formation attempted hope entity behaviour recognisable 
procedure fact repeated entity behaviour properly explained 
second state comes theorist exactly theory intention name adequately explains entity behaviour 
case intention name copied intentions slot agent model entity model ready agent prediction module see section 
third state agent find occurs plausible consistent theories explain entity observed behaviour 
occur instance existed insufficient sensory information observations disambiguate potential causes modelled entity actions 
example agent domain model observed stationary entity brake lights currently hard pressed certainly touringmachines modelling layer sufficient resources exist process pending input messages sufficient resources exist current focus set entity current focus set sufficient resources exist entity gamma discard date models entities remaining gamma foreach entity entity gamma model library appropriate template retrieve template create model entity sensing performed current timeslice update entity modelled configuration observations update entity modelled configuration expectations gamma identify discrepancies observations expectations foreach discrepancy identified explain discrepancy discrepancies identified check self goals algorithm perform model explanations entity behaviour pseudocode agent collection stored entity models time information know entity intention light junction 
current implementation touringmachine explanation module little account taken fact single final theory chosen randomly cases generated 
strategy agent ascribe entity wrong intention possibly leading agent new increasingly threatening conflict situations entity behaviour unambiguously explained 
situations touringmachine reactive capabilities probably save agent terminal damage general agent expected benefit greatly able ascribe intentions correctly time 
number specific enhancements respect instance improved theory selection mechanism designed take account entities previous actions intentions differentially represent reason disparate sources evidence deriving explanatory theories example observed actions communicated intentions default assumptions rights way touringmachines modelling layer traffic regulations consider expected utility entity different possible outcome states calculate probabilities intention enables entity achieve states 
fact number possible solutions problem reported ai literature include uncertainty reasoning symbolic endorsements sc dempster shafer evidential reasoning car probability theory gn pages decision theory dw pages 
consideration techniques remain possible avenue 
conclude subsection full pseudocode algorithm implementing various processes explanation module 
prediction prediction process reasoning anticipated relations system environment order determine course action system follow 
feedback processes monitor behavioural discrepancies order refine system actions touringmachine explanation module example feedback process process making predictions feedforward prediction involves monitoring system environment directly applying appropriate compensatory signals system waiting receive feedback system performance affected particular disturbances changes environment 
advantage feedforward gregory gre page argues speed environmental changes compensated noticeable effect controlled system behaviour 
price paid added controller complexity controller reasonably accurate models various effects environmental changes events system 
models needed touringmachine making predic fact addition researching issues theory selection number issues concerning theory formation plan recognition ignored dissertation worthy study example deal entity multiple intentions executing sequences possibly simultaneous actions interleaved actions plans recognise flaws plans observed entities deal entities plan spaces differ deal entity knowledge plans partial beliefs plans differ held entities 
number issues currently addressed researchers field carberry car provides excellent review analysis research 
touringmachines modelling layer tions world precisely kinds entity models described 
making predictions dynamic multi agent world dawkins daw pages argues endeavour decisions agent survival machine result predictions degree prove gamble 
short possessing capacity learn past behaviours associate current situational contexts expected outcomes touringmachine set stored causal models different entities inhabiting world able predictions process event simulation 
touringmachine prediction module designed realise process described 
overview agent prediction module comprises main components message handler goal conflict detector model expectation generator see 
message handler receives processes messages convey information potential conflict status agent components 
particular messages received agent effectors agent planning control layer receives warnings agent attempted execute action caused physical capability conflict occur example agent attempted execute change speed action carried full cause agent exceed maximum speed capability 
layer receives warnings planner failed operations example decomposing composite schema planner may attempted process child schema match layer schema library 
warnings treated indicators agent goals threatened state possible conflict example failing carry change speed action full failing retrieve required schema may subsequent impact agent ability reach target destination time 
warning messages forwarded goal conflict detector consideration 
touringmachine agent ultimately motivated act need accomplish satisfy goals resides desires component self model 
agent goals homeostatic type achieved continuously agent operational existence achievement type explicitly planned goes eventually terminated touringmachines modelling layer handler message effectors layer model module action buffer goal conflict detector expectation generator module library conflict layer explanation explanation library spacetime prediction module successful completion goal conflict detector task ensure protection exceptional events just taken place agent process generating modelbased projections world events predicted take place 
exceptional events conflicts goal conflict detector deal originate number sources agent result certain unexpected interactions entities world 
resolving intra inter agent conflicts require form action change plans part agent entities 

existing predicted goal conflicts agent identified model expectation generator account actions change plans proposed possible resolutions identified conflicts responsible generating description agent world entities expected trajectories 
described section descriptions entities predicted physical configurations agent explanation module detect discrepancies models possesses entities corresponding observations subsequently 
model expectations generated basic model projection techniques employed goal conflict detector looking potential goal conflicts 
description techniques prove useful discussing touringmachines modelling layer handling goal conflicts generation model expectations 
projecting models touringmachine constructs spatio temporal projections agent behaviour performing cognitive knowledge level simulation agent mental state consequent action sequences words role agent assuming agent goals attending common external environment actions determines agent take 
new page 
purpose touringmachine making projections determine light state world agent touringmachine destined conflict entities world 
conflicts question affect successful completion continued satisfaction touringmachine agent various goals avoid collisions obey regulations reach destination 
spatio temporal projection entity projection entity expected movements space period time 
touringmachines know construct models entities things storing descriptions entities current physical configurations 
models disposal relatively easy touringmachine construct projections entities model set entities assumed see chapter move uniform acceleration trajectories appropriately constrained quadratic motion equations simple way agent project entity movements time time say take modelled entity configuration values feed appropriate kinematic equations setting gamma computing entity new configuration location speed acceleration orientation communicated signals time called making inertial assumption 
argued making predictions activity information potentially risky endeavour especially dynamic domain touringworld fact possible predictions degree certainty predictions relied extended periods time 
length predictions issues degree speed environmental change affect long term reliability predictions agent touringmachines modelling layer ensure predictions prove useful possible agent making relevant information world particular set modelled world entities possibly 
touringworld domain turns number information sources readily suggest modelled entity current configuration entity ascribed beliefs desires intentions information relevant environmental constraints impact entity possible behaviours example presence information signs path junctions walls importantly mobile intentional agents 
various information sources come play projecting entities actions detecting resolving potential goal conflicts elaborated 
projecting potential actions modelled entity touringmachine addition considering entity current physical configuration takes account entity ascribed intention 
projections inertial assumption readily computed simple application appropriate kinematic equations consideration entity intention require slightly sophisticated spatio temporal projection capabilities 
assist process touringmachine space time library see access number spatio temporal projection functions 
functions form project configuration intention configuration vector form describes projected entity current location speed acceleration orientation communicated signals set respectively intention projected entity ascribed intention period time projection computed path entity expected follow time period 
path followed entity moving explained determined simply computing period projection single quadratic motion trajectory starting entity initial location 
computing path followed entity complex intention slightly involved 
particular project entity currently ascribed intention expected cause entity take action time period projection 
issue trading reliability efficiency predictions considered closely chapter 
length time projections defined testbed parameter see chapter 
touringmachines modelling layer paths computed touringmachine words results generated touringmachine spatio temporal projection functions fact handled composite trajectories specifically lists number distinctive temporally bounded sub trajectories modelled entity expected follow 
best illustrated example 
consider entity ascribed agent intention light 
means point view agent order protect goals case obey regulations see entity adopted stage past intention set traffic lights currently approaching 
assume agent constructs entity model projections cover period time agent current clock time say agent projecting entity movements anticipates entity come near identified traffic lights time contained time interval agent build accurate prediction entity behaviour time need view entity new separate motion sub trajectory reaching traffic lights example agent time predict entity remain stationary projection period time path computed agent entity set agent expects modelled entity follow sub trajectory having specific duration implicit start times corresponding change typically resulting entity having taken action physical configuration entity modelled 
noted precision complexity touringmachines space time projection functions chosen agents designer functions provided user suitable declarations creating particular touringworld environment investigated see chapter 
worth stressing point providing functions endow touringmachines fully accurate temporal reasoning capabilities allow take account extra information entities intentions constructing projections 
belief extra information potentially predictive rely inertial projections 
possession projected paths modelled entity agent proceed search number different intra inter agent experiment reported section certainly lends weight supposition 
touringmachines modelling layer goal conflicts occur projected time period 
handling goal conflicts motivated mentioned need satisfy goals touringmachine goal conflict detector attempt identify events threaten conflict goals necessary take action resolve conflicts carrying suitable action recovery procedures 
identify goal conflicts touringmachine contents conflict library see 
conflict library contains collection domain dependent conflict resolution triples rules form goal permits agent associate specific instance threat conf particular desire goal threatens recommended recovery procedure resolution followed agent goal protected 
instance touringworld domain rule exists associates collision type conflict occur example agents simultaneously approach uncontrolled junction particular goal affected case avoid collisions specific recovery procedure followed example adopting intention junction 
rules supplied library user suitable declarations see chapter appendix 

different types conflict identified agent goal conflict detector touringworld domain number referred 
particular conflicts identified agent attempts execute action causes physical capability conflict example trying exceed maximum speed agent planner attempts retrieve schema reside schema library goal conflict detector aware conflicts reception appropriate warning messages prediction module message handler see section ii agent detects discrepancies self model actual expected physical configuration goal conflict detector aware accessing appropriate records earlier created explanation module model discrepancy handler see section iii having taken opportunity explanation stage check goals threat agent identified possible problem goal conflict detector aware accessing appropriate records touringmachines modelling layer created explanation module model discrepancy handler see section 
fourth type conflict described result projected paths entities seen intersect space time 
touringworld domain conflicts called collisions 
having computed described projected path modelled world entity including agent goal conflict detector identify potential collisions performing pair wise intersections space time trajectories selecting valid collision points seen occur 
valid collision points occur point inside time period established agent computed spatio temporal projections 
important note agent goal conflict detector intersect projected paths entities currently modelled possible agent detect potential conflicts entities goal sets 
timeslice entity goals may involved number identified conflicts 
example addition noticing decrease desired travel speed agent projected shortly hit obstacle continues trajectory goals agent threatened reach destination assuming suitably constraining travel time argument avoid collisions respectively 
cases multiple goal conflicts identified particular agent choose resolve ultimately depend number factors 
foremost priority goal threat goals agent desires set prioritised domain specific manner ordering observed choosing multiple conflicts 
goal ordering examples dissertation highest lowest priority avoid collisions obey regulations reach destination 
second factor consider space time urgency conflict low high priority goal threatened conflict involving low priority goal occurs earlier space time advisable agent resolve lower priority 
example illustrating case 
third factor consider environmental constraints affecting agent possible behaviours particular presence obstacles goal conflict detector uses precisely quadratic motion projection collision detection functions employed touringworld testbed process responsible creating plausible simulations touringmachines physical actions 
details functions deferred section 
note entities projected paths represented lists possibly multiple sub trajectories path intersections performed spatio temporal sub trajectory time 
touringmachines modelling layer entities may constrain possible actions agent take resolve goal conflicts 
example agent travelling lane path approaches lane slower moving agent eventually projecting motion trajectories involved detect threat avoid collisions goal 
deciding resolve conflict agent faced choice overtake slower agent front slow match agent speed 
typically choice preferable adequate resolving agent original avoid collisions goal conflict agent operating temporal constraints certainly trigger subsequent reach destination conflict 
hand overtaking may preferable may possible instance passing lane agent move may presently blocked obstruction 
fourth factor consider set conventions rights way force accepted common knowledge beliefs agent domain 
world agents similar goals beliefs predicting agents resolve particular goal conflicts lead infinite regress agent considers effect having agents decisions agents currently affect conflict resolution choices 
rights way necessary ensure predictions eventually bottom 
addition effect cancelling certain goal conflicts overtaking example slower moving agent detect avoid collisions conflict agents affected crash consideration rights way force domain simply choose take action 
similar aim contextual analysis behaviour performed wood plan recogniser woo consideration factors combined enables agent decide possible behavioural outcomes identified entity model set responses expected particular set intra inter agent goal conflicts identified 
factors noted involved agent having detected conflicts goal set entity faced deciding identified conflicts entity choose resolve 
agent certain assumptions particular entity similar goals wood woo fact concentrates primarily analysis environmental constraints physical agent object agent agent situational constraints legal driving speeds plan recogniser appears pay attention motivational force constraining influence agent prioritised goals exercise agent matter entities choices action 
touringmachines modelling layer goal priorities entity identified set goal conflicts environmental constraints entity beliefs regarding rights way entity rationally committed just agent resolving conflicts knew affect 
terms simulating entities knowledge level notion introduced start section newell new pages refers applying extended principle rationality 
states certain requisite initial boundary conditions entity goals intentions initial acquired knowledge beliefs knowledge regarding entity goal preferences physical plausibility different action choices agent certain conditions able calculate trajectory modelled entity 
having performed necessary projections entities model set having subsequently performed application prioritised conflict resolution rules appropriate contextual analysis entities current predicted behaviours agent position determine entity goal conflict identified pressing response conflict specific resolution method adopted counter 
conflict resolution methods solicit response types entity concerned entity need adopt new intention example junction start overtake need effect primitive physical action example change speed change orientation 
agent consider adopting new intention situations decides current intention intention currently ascribes entity causing entity behave manner gives rise conflict example going junction having right way going red light stopping hitting slower moving agent 
case agent adopt new intention agent goal conflict detector send appropriate task intention command message agent planner layer 
turns entity expected adopt new intention agent simply suitable alteration intentions component model entity reflecting new task entity expected plan 
type conflict resolution procedure incidentally regarded simple form plan modification replanning 
sophisticated implementations sort procedure proposed number researchers including wilkins wil steel ais wood woo 
touringmachines modelling layer intention changes primitive physical action responses considered modelling agent involved conflict type identified self model discrepancy example result loss speed directional deviation intended target 
described earlier section section conflicts come agent current intention fault simple discrepancy occurred agent desired actual configurations 
conflicts simple self tuning actions considered appropriate 
giving examples illustrating various prediction processes detailed necessary point describe remaining important operational characteristic prediction module 
description far ignored fact touringmachines making predictions entities trajectories conflict resolution behaviours capable time carrying simple powerful form hypothetical counterfactual reasoning 
particular touringmachines able number counterfactual levels number set agent user testbed parameter see chapter project reason modelled entities behaviours level reasoning account actions resulting entities earlier attempts resolve goal conflicts 
words constructing entity model projections counterfactual reasoning level say agent able take account conflicts plus actions resulting anticipated resolutions conflicts previously detected level gamma 
setting parameter value greater agent ability take account number nested levels modelling entity responses entity responses predicted conflicts 
potential impact kind reasoning agent ability perform timely effective predictions analysed closely experiment chapter 
examples agents general modelling capabilities follow 
touringmachine mentioned previous chapter initially sets achieve goals prior knowledge agents whereabouts knowing agents exist 
approaching uncontrolled junction established alter direction touringmachine plan advance give way agents 
simply plan middle junction turn appropriate direction proceed destination 
scenario agents round agent shaped agent seen approaching uncontrolled junction time upper left hand frame 
time touringmachines modelling layer upper right hand frame agents sense construct models time agent sensing arc displayed illustrative purposes 
agents subsequently project expected trajectories notice impending avoid collisions conflict 
common beliefs rights way agent predict agent resolve conflict subsequently intention junction 
conversely agent predict correctly agent continue trajectory intersection see lower left hand frame 
agent leaves junction agent polling agent progress junction drop adopted conflict resolution intention proceed junction original task lower right hand frame 
slightly different conflict situation illustrated 
scenario agents shaped agent round agent seen approaching light controlled junction time upper lefthand frame 
time upper right hand frame agents sense construct models time number events take place 
agents previous example projection respective trajectories predict impending collision involving words mutual avoid collisions conflict 
time event occurs triggers additional conflict agent goal set traffic light agent approaching turned green amber 
agent obey regulations goal threat running red amber lights permitted touringworld domain 
obey regulations generally considered certainly viewed terms touringmachine static goal preferences desires model component lower priority avoid collisions agent goal currently threat agent agent matter application respective conflict resolution rules ultimately identify conflict involving agent traffic light constraining current situational context 
result agent proceed required predicted carry suitable resolution procedure protects obey regulations goal case adopting intention light lower left hand frame 
agent light changes green lower right hand frame traffic light agent represented graphically touringworld rectangle divided squares black circle appears bottom squares light communicating colour green circle appears top square light red squares display black circles light amber 
terms bottom closest top farthest relative agent light applies 
touringmachines modelling layer process pending input messages foreach entity nil foreach entity conf downto project anticipated space time trajectory considering determine intersections entities trajectories entity involved type goal conflict pressing goal conflict contextually appropriate conflict resolution nil foreach entity project anticipated space time trajectory considering create store expectations timeslice entity self nil submit processing action intention algorithm perform model predictions entity behaviour pseudocode agent collection stored entity models time proceed original target destination 
note result unplanned agent subsequently detect conflict presumably time constrained reach destination goal 
conflict arise agent take resolving suitably gauged change speed action 
generating expectations closing loop conflicts detected respective resolutions identified operations remain carried prediction module 
generate expected configuration entity agent model set 
carried making projection entity anticipated trajectory account final conflict resolution action intention change agent expects entity carry 
considering projection time period interval touringmachines modelling layer agent successive model updating operations entity expected configuration computed stored expectations component agent respective entity model 
expectations modelled entity noted reflect entity expected physical configuration 
implicit assumption model updating process entity modelled mental states beliefs desires intentions stage processing assumed correct persist timeslice explicit evidence mental states entity changed 
modelled intentions get revised addressed 
touringworld domain specifically touringworld environments populated homogeneous agents considered dissertation assumption reasonable 
hand richer constrained environments agents required represent substantially complex beliefs changing surroundings necessitating result suitably powerful belief maintenance revision capabilities 
related issues example agents commitment goals re visited chapter 
step taken prediction module process conflict resolution proposal determined goal conflict detector applies agent 
particular proposed conflict resolution primitive action appropriate action command sent agent effectors subsequent consideration 
proposed resolution suggested intention change appropriate command message sent agent planner layer process handling messages described section 
full cycle touringmachine modelling functions comes 
conclude subsection full pseudocode algorithm implementing various processes prediction module 
modelling touringworld touringmachine modelling layer charged constructing causal models agent behaviour 
models touringmachine order monitor explain predict behaviours exhibited different agents appear model set 
library model templates touringmachine able assign resources permitting default models agents encountered environment 
subsequent established testbed parameter see chapter 
touringmachines modelling layer observations agents discrepancies respective models detected abductive reasoning process invoked order explain discrepancies 
having settled suitable theories explain observed behaviours models generating predictions potential intra inter agent goal conflicts creating expectations agent behaviours 
addition modelling mobile agents touringmachine agent build models touringworld entity types agents objects alike long suitable templates available agent model library 
purpose usefulness modelling entities illustrated instance considering scenario described 
scenario agent able detect reason conflicts running red traffic lights possesses models traffic lights environment 
particular agent able detect pertinent obey regulations goal conflicts takes place scenario projecting configuration whichever entity currently modelling intersecting resulting space time trajectory projected configuration appropriate traffic light 
types possible collision type conflicts distinguished 
addition physical collision occur modelled entity projected hit traffic light concerned case entity goal threat avoid collisions possibility virtual collision occur entity projected pass traffic light line lines graphically illustrated figures dissertation time light communicating colours red amber 
traffic lights modelled agents concerned conflicts go undetected 
modelling immobile agents traffic lights touringmachine necessary maintain models immobile objects obstacles walls lane markings static entity types described chapter 
inert lacking interesting mental states sort objects modelled reasoned fairly trivially surprisingly high degree predictive accuracy described chapter touringmachine respond unexpected interactions immobile objects making various hardwired situation action rules reside reactive layer extremely simple behaviour objects probably able handled adequately agent reactive layer 
traffic light configuration calculated light permanently stationary touringmachine touringmachines modelling layer obvious advantage allowing touringmachine model static entities enable agent construct earlier possibly reasoned accounts conflicts entities give rise 
conjecture explored dissertation 
touringmachines modelling layer resolving goal conflicts uncontrolled junction 
touringmachines modelling layer resolving goal conflicts light controlled junction 
touringworld testbed control proof civilization 
repeating maintaining true test 
paul coast contrast early ai planning systems growing belief researchers involved agent architecture design appropriateness different agent designs configurations particular skills capabilities depends characteristics environments agents intended operate dm hhc pr kg 
touringmachines intended fairly complex domains 
particular domains dynamic events occur control individual agents unpredictable agents omniscient real time pace world change reality agents respond bounded time limits ongoing single defined problem solved 
touringmachines capable integrating diverse range reactive deliberative behaviours expect principle touringmachines able carry success types tasks intended 
touringmachines fairly complex sophisticated machines rich different skills capabilities 
operate complex environments precise relationship touringmachine particular configuration behaviours exhibits environmental touringworld testbed conditions influence behaviours outset entirely clear 
touringmachine performance robust ultimately predictable range different task domains sound understanding agent behavioural ecology relationship agent structure configuration environment resulting behaviours crucial 
attempting define agent behavioural ecology term borrowed cohen building causal model describes relationship agent performance environment 
function model enable empirical investigation explanation agent observed behaviours testing prediction hypothesised behaviours 
order gain fuller understanding behavioural ecology touringmachines feature rich multi agent testbed touringworld testbed designed implemented touringmachines 
testbed provides platform performing empirical investigations agent behaviour wide range user controlled environmental conditions 
area particular interest instance understanding influence different environmental conditions touringmachine ability coordinate activity agents time trying accomplish whichever initial tasks assigned 
results preliminary investigations touringworld testbed chapter 
overview touringworld testbed testbed see instrumented system building analysing simulated environments inhabited task achieving touringmachines 
testbed centred deterministic discrete event simulator realistically mimics environmental dynamics touringworld particular multi agent domain chosen studying touringmachines 
specific real world application touringworld regarded reasonably faithful approximation particular class domains partially structured comprise number agents acting real time example automated factory floor traffic environment 
important remember choice domain arrived participation discussions vehicle rationality held sri cambridge april may 
am particularly indebted ben mac ann copestake john levine steve pulman julia galliers input assistance matter 
touringworld testbed graphics scenario specification text windows trace files control files user commands touringworld multi agent simulator top level view touringworld multi agent testbed 
focus interest issues pertaining agent level performance agents coordinate tasks presence agents certain aspects real world domains appropriately abstracted primarily minimise processing complexity simulation reduce knowledge engineering effort involved describing domains 
touringworld domain described detail 
multi agent simulator testbed comprises series user level tools define view control record alter analyse behaviours characteristics touringmachines study 
allowing user change various features capabilities agents example assigned tasks timeslice resource limits tools facilitate altering various characteristics agents environment example density type obstacles rate passing time enable user study range agent configurations wide range different environmental conditions 
user interact testbed range different facilities including window line oriented textual displays selected scenario information graphical display changing scenario events plotted graphs various agent environmental statistics interactive function driving user controlled agent file window output tracing information events took place running scenario 
order permit extensive experimentation touringworld agents environments earliest stages design implemented customisable user means rich collection entity touringworld testbed environment level parameters 
parametrized testbed facilitates investigations aimed understanding behavioural ecology touringmachines making relatively fast easy user experiment different agent environment descriptions 
decision parametrize testbed reflects opinion shared growing number researchers dai distributed problem solving dps extensive experimentation initially conceived developed primary goal system design difficult carry system complete lc dm 
user supplies specific values entity agent object parameters scenario specification file see 
parameter definitions expressed declarative language called touringworld scenario specification language ssl complete extended bnf grammar appendix 
containing initial data parameter values describing particular touringworld environment entity set studied scenario specification contains number ssl statements define things times scenario iterated parameter values automatically changed iterations user terminal screen various windows appear 
various scenario environment entity level touringworld parameters described section 
proceeding give details touringworld domain testbed worth mentioning empirical approach studying touringmachines favoured formal analytical 
essentially author opinion despite fairly proliferation different proposals integrated agent architectures new ai subfield infancy lend easily formal analysis 
pertinent theoretical example cohen levesque formalising role intentions agents cl bratman examining trade reaction deliberation bip kinny georgeff rightly argued kg general says little specific real time reasoning strategies effect agent behaviour 
true theoretical including dean boddy time dependent planning db russell wefald utility deliberation rw 
absence comprehensive theory explaining behaviour realtime computational agents controlled environment parametrized artificial world practical avenue measuring touringworld testbed studying agent performance 
emphasizing relatively immature state research respective subfields similar arguments researchers dps systems lc dm dai systems planning systems ld machine learning systems lan 
interesting researchers having noticing urgent need set common benchmark tasks environments compare different agent architectures increasingly started promote simulators providing precise computational descriptions different task environments facilitate direct comparison different architectures dk pr favour possibility transfer techniques different applications dm 
touringworld domain touringworld dynamic ongoing real time domain populated number entities 
entity type object type agent 
objects static structures example obstacle wall information sign non example entry exit lane marking 
agents hand dynamic task achieving entities mobile touringmachines type environment example traffic light rain fog 
number entity types illustrated 
objects remain fixed initial locations entire scenario agents execution assigned tasks able change location touringmachines state touringmachines environment agents 
order standardise treatment agents agent types mobile environment assigned initial tasks carry building executing plans 
traffic lights example assigned task light causes repeatedly change colour red green amber rate 
likewise fog agent scenario assigned task fog causes change specified time period value scenario parameter simulator determine touringmachine field range vision 
rain agent similar effect scenario emphasis thesis design cognitive level agent processes functions low level navigation real world testing ruled viable platform studying touringmachines 
simulations perfect substitute real thing ideally done conjunction real world testing 
time remain potential avenue research 
precise argument lists specification environment agents tasks defined appendix page syntax rule planner task 
touringworld testbed snapshot particular touringworld scenario showing various types labelled objects agents 
parameter simulator calculate touringmachine braking distance see 
mobile agents touringmachines words autonomous vehicles attempt deadline relocate location specified arguments respective plan route tasks 
addition single achievement goal touringmachine homeostatic goals avoid colliding entities obey various traffic regulations 
touringmachine starts geographical knowledge world topological database contains locations paths path junctions certain landmarks associated junctions prior knowledge whereabouts agents obstacles 
touringmachines move independently real time specific knowledge regarding ultimate destinations paths invariably cross touringmachines invariably enter touringworld testbed states conflict 
additionally agent resource bounded limited capabilities sense monitor world touringmachines limited time take actions may time time errors judgement resulting terminal collisions 
aspects touringworld pose considerable challenges agents particular touringmachines limited computational resources limited physical reasoning capabilities upper bounds speed acceleration steering rate limited knowledge entities tasks whereabouts 
fair describe touringworld reasonably faithful approximation certain types real world multi agent domains example highly automated factory floors traffic environments number simplifications reduce processing complexity testbed minimise knowledge engineering effort involved simulating realistic task domains 
specifically major simplifications touringworld testbed include ffl environment represented dimensional grid parametrized spatial resolution value chosen user 
extra dimension comes fact certain entities walls obstacles agents nominal height component point view agent sensing environment occlude smaller distant entity 
ffl simplify calculation agents simulated perception fields computation contact points entities collide touringmachines certain entity types obstacles information signs environment agents modelled circles 
additionally entities touringmachines obstacles modelled solid massless 
means entities collide come complete halt point contact 
aim simplifying simulator computational load remaining touringworld entity types traffic lights walls paths path entries exits lane markings rectilinear placed orthogonally respect simulated world global orientation system right hand side screen window ffi top ffi left hand side ffi bottom ffi 
ffl collisions occur entities attempt occupy physical space time 
particular testbed implement forms collision handling possibly certain predator prey environments touringworld testbed example entities linked entities bouncing see durfee montgomery dm :10.1.1.16.8714
ffl touringmachine car mobile robot moves degrees freedom translational displacement major dimensions space plus rotation centroid 
car touringmachine subject called nonholonomic kinematic constraints move sideways turning radius lower bounded lat 
simplify calculations agents need perform planning motion trajectories paths path junctions rectilinear 
turn junctions agents come complete changing orientation 
path surfaces assumed smooth issues wheel slippage ignored 
ffl touringmachines sense act environment discrete time intervals 
particular touringmachine effects action particular interval timeslice action suitable portion assumed occur instantaneously timeslice 
timeslice size defined scenario parameter value chosen user see 
ffl sensing environment touringmachines able identify ambiguity error entities physical properties cartesian locations speeds acceleration rates orientations communicated information example brake lights indicators 
agents believe see precisely believe sensors focus attention mechanisms happen registered start timeslice 
entity visible agent point entity contour happens fall inside agent forward rear sensing range 
touringmachines assumed able distinguish entity uniqueness 
physical properties entity internal properties example beliefs desires intentions immediately recognisable agents inferred abduction 
despite differences values internal properties mobile agent assumed touringmachine basic layered control architecture described chapters 
described chapter page actions take timeslice complete iterated agent effectors planner 
fact entity completely occluded large obstacle agent see entity sensors programmed detect occluded entities 
touringmachines sensors programmed parameter described section 
touringworld testbed ffl terms resource limitations touringmachines bounded computationally perform parametrized maximum number processing steps timeslice assumed unlimited consumable resources example fuel 
ffl touringmachines communicate common error free protocol left right indicators turn overtake brake lights braking horn fog lights flashing convey specific warnings 
explicit communication plays minor role far inter agent coordination considered agents relying principally self built models explaining predicting agents behaviours 
case need consider inter agent communication errors delays done example lc mice dm testbeds pressing :10.1.1.16.8714
note point view agent sensing world room ambiguous interpretation certain communications 
particular agent observes agent signalling right second agent overtake third ahead simply second agent turn right path 
ffl right way protocols dealing junction scenarios overtaking situations assumed common knowledge embedded agents model template default belief sets 
agents belonging described general open systems example hierarchical organisations touringmachines deal reconciling disparate viewpoints negotiations resolve conflict situations gas 
agents belong different levels organisational authority mace terminology touringmachine described equal worker 
true touringmachines exercised tasks require particularly deep knowledge detailed domain specific expertise touringworld interesting domain challenges number commonsense skills touringmachines particular ability sense move complex world carry tasks degree uncertainty happen 
abilities perceive explore environment generally regarded prerequisites agent autonomy mor cl touringworld domain prove suitable domain evaluating number important issues concerning rational autonomous agency 
touringworld testbed 
environment level process scenario level process entity level process entity entity entity process scheduler queue 
touringworld multi agent testbed implemented series scenario environment entity level processes scheduled central processing queue executed round robin fashion 
touringworld testbed mentioned illustrated main components touringworld testbed include multi agent simulator series user interface tools recording analysing viewing controlling behaviour group touringmachines aim section describe details relating design implementation components 
fact various simulator tool functions implemented prolog set system program modules processes scheduled central processing queue process scheduler queue executed round robin fashion 
types system processes im sicstus prolog running sunos 
sunos registered trademark sun microsystems touringworld testbed mixture simulation user interface functions 
type see called scenario level processes responsible functions initialising testbed reading processing scenario specification file figuring entities involved scenario collecting computing various statistics behaviour performance agents administering user level textual graphical facilities 
second type comprises environment level process responsible providing central simulation functions collating processing agents actions state changes various kinematic dynamic constraints updating simulated world clock maintaining date world state fact base describing entities current physical configurations 
third type processes called entity processes 
expected implement activities performed various instances environment mobile agents touringworld scenario 
different system processes collectively implement touringworld testbed parametrized enable high degree customisation user 
parameters customise processes precisely supplied user scenario specification file see 
mentioned testbed parameters specified user declarative language called touringworld scenario specification language ssl full extended bnf grammar appears appendix order describe various parameters interface tools scenario environment agent level processes combine implement touringworld testbed repeated grammar remaining sections chapter 
scenario level processes process provides level interface user testbed 
invocation touringworld testbed user process charged loading initialising prolog program files collectively implement testbed 
having done prompts user select menu stored scenarios name particular scenario run 
name scenario menu associated stored scenario spec window graphics capabilities provided interface window system prolog kim 
touringworld testbed ification file created user earlier date 
scenario specification file contains ssl parameter declarations customise various scenario environment entity level processes touringworld testbed 
user selected scenario name reads corresponding file translates ssl declarations appropriate prolog facts rules loads alongside system code executable prolog statements 
responsible setting channels may required various scenario level processes interface tools 
particular channels may needed displaying certain items text drawing graphics displaying statistical graph plots receiving user commands suspend restart terminate testbed operation 
associated scenario level processes optional see appendix page details relevant declarations defines things dimensions location particular screen window displaying receiving process scenario process associated window definition simply routed default screen ensuring touringworld testbed remains usable line oriented window terminals 
number scenario level windows touringworld agent agent graph plot actions scenario parameters agents traffic lights seen 
enable study things behaviour touringmachine range differing environmental conditions touringworld testbed provides built facility iteratively running scenario number iterations specified parameter automatically effecting iterations changes number entity environment level parameter values appear initial scenario specification 
parameters automatically altered iterations specified declarations state name parameter changed example world time increment max resources planner forward sensing horizon scope change agents changes apply change increment decrement parameter value amount parameter value changed 
full set parameter declarations defined parameter appendix page 
parameter declarations pertaining process include 
scenario specification files simply ascii files created text editor 
touringworld testbed indicate testbed operation suspended touringworld testbed testbed user interface showing various types input output windows textual trace touringworld agent agent plotted graph graph plot agent control actions scenario parameter display scenario parameters graphics agents traffic lights 
touringworld testbed instance user take stock displayed screen testbed resume operation user clicks mouse appropriate window titled touringworld see 
declaration allows user specify condition current scenario iteration automatically ended 
termination specified take place collision occurring agent terminating colliding arriving goal agents terminating passing length simulated world time 
main function process initialise administer various entity processes scenario 
particular keeps constant check simulated world clock determine agents listed initial scenario specification corresponding entity processes activated placed testbed process scheduler queue see 
entity process activated starting time corresponding entity specification see section matches current simulated world time 
likewise charged monitoring entity processes terminated simulation cycle determine agents terminated remove corresponding entity processes process scheduler queue 
main administrative duties performed includes setting appropriate channels entity process 
specifically called set textual output windows processes see example windows agent agent 
additionally scenario agents identified user see section need set suitably defined actions input window see example regularly poll window user mouse clicked agent control commands 
scenario agent process type defined external words entity process executed forked unix process running separate prolog session see responsible setting necessary collection files link external processes various centralised scenario processes 
process charged administration user driven agents unix trademark bell laboratories 
touringworld testbed responsible providing facility user automatically record save file descriptions actions effected user driven agent current testbed session 
additionally saved action descriptions time stamped precise value simulated world clock see section displayed action originally effected saved file scenarios played back user user agent executes precisely actions past 
facility controlled parameter arguments specify facility currently recording current playing back previous user agent actions 
parameter declarations fall scope process include set optional declarations instruct output certain items program trace appropriate scenario entity level windows full list traceable items defined trace parameter appendix page zero declarations indicate testbed parameter name value pairs displayed scenario parameters window see example indicates program trace information generated presence particular declarations saved file user 
process provides facility collecting computing statistics certain aspects scenario user currently happens running 
particular enables automatic gathering number important statistics regarding environment example agents collided agents successfully achieved tasks individual agent example utilisation resources particular control layer total number goal conflicts detected resolved total number reactive rule firings agent average speed travel 
illustrated invoked various entity environment level processes finished running 
statistics get collected computed determined optional presence declarations scenario specification file 
declaration specifies name particular testbed statistic computed full list defined appendix page scope scenario agents touringworld testbed collection statistics applies style 
style specification indicates statistic incremental value re computed timeslice non incremental value computed scenario iteration 
addition provides facility displaying graphical plot collected statistics 
particular user define set ssl declarations number attributes pertaining window graphical plot variables testbed parameters plotted graph updated timeslice scenario iteration origin range unit increment size coordinate axis textual labels axes graph curve 
example graph plot window show course particular scenario iteration agent planner computational resource usage varies timeslice 
full set declarations defining graphical plot defined graph appendix page 
responsible maintaining date graphical image entity level activities take place running scenario 
facility particularly useful testing debugging different agent configurations provides user immediate visual feedback concerning various actions state changes place environment 
associates entity type particular graphical image object types associated built images example obstacles appear solid circles lane markings appear dashed lines shape agent circle triangle enterprise shaped defined declaration 
simulation cycle testbed processes run outputs appropriate image entity scenario 
output written dedicated graphics window see example set process session 
initial set entities displayed determined inspection various object agent definitions appear scenario specification file 
scenario way world state fact base produced process output ignored testbed run line oriented terminal 
touringworld testbed see contains date description current environmental layout including agents new whereabouts state descriptions 
state descriptions indicate instance agent collided left scenario 
testbed parameters fall scope process include specifies initial dimensional area environment displayed specifies frequency possibly zero amount graphics window vertically scrolled set zero declarations specify named agents sensing arcs visibly displayed graphics window see example shaped agent appears graphics window 
environment level processes environment level process considered main simulator process included responsibilities creation maintenance world state fact base containing date descriptions touringworld entity changing state physical configuration 
world state fact base created testbed session copies certain pieces information definitions entities appearing scenario specification file 
particular world state fact base records created scenario entity contain information entity name physical dimensions initial cartesian location 
addition entity mobile agent record initial speed acceleration orientation plus communicated information initially associated example agent signalling horn 
scenario gets way main function plausibly simulating scenario agent different actions 
implemented entity level processes see agents send messages process opted effect physical communicative action 
timeslice entire collection entity processes suspended executing proceeds deal various agent action messages single batch 
simulation actions achieved making appropriate updates world state fact base 
particular account agents configurations recorded current world state plus actions touringworld testbed submitted timeslice compute respective quadratic motion trajectories agents move uniform acceleration standard equations motion space time trajectories determine record agents new configurations consideration timeslice 
environmental concurrency readily mimicked round robin scheduling processes implementation agents processes regularly suspended timeslice see need ensure actions taken scenario agents physically plausible 
touringworld testbed achieved account agent agent agent object collisions occur agent move particular motion trajectory calculated 
collisions detected performing pair wise intersections agent space time trajectories selecting valid intersection collision points 
collision point valid occurs simulator timeslice occurs timeslice ignored timeslice 
collision points involving agent occurs earliest time selected agent trajectory may intersect trajectories agents number different points agents come halt collision earliest considered valid 
eventually trajectory intersections performed appropriate collision participants determined necessary updates world state fact base 
addition inform process terminated agents corresponding entity processes removed process scheduler queue 
parameters pertaining process include starting value simulated world clock discrete time quanta world clock advanced process scheduler cycle real number altered fog agent described section increase reduce sensing range agent happens fall fog agent zone application see similar parameter altered rain agent increase reduce effective braking distance agent happens braking rain agent zone application 
number parameters exist enable user specify granularity precision certain testbed calculations performed 
particular dec touringworld testbed specify precision process compute new values agents cartesian location coordinates speeds accelerations orientations respectively 
required dimensional space touringworld chessboard factor chosen rounded distance calculations number units distance factor chosen forced angle calculation normal angles ffi ffi ffi ffi facilitate comparisons grid agent testbeds example lc mice dm :10.1.1.16.8714
entity level processes entities various objects agents inhabit touringworld environment 
object specified object definition see appendix page comprises parameter declarations example obstacle wall cartesian coordinates touringworld environment radius size obstacle linear length wall lane marking number optional example vertical horizontal object wall dashed solid lane marking 
objects remain inactive duration scenario agents implemented separate system processes 
physical presence simply noted world state fact base subsequent various entity processes example perform simulated sensing handle collisions 
entity processes implement touringworld agents 
noted section agents mobile standard user driven touringmachines environmental traffic lights fog rain 
agent type slightly different set defining parameters 
simplest environment agents task achieving devoid components sensors focussing mechanisms reactive modelling control layers 
parameters specifying environment agents defined appendix page include internal external see stating start time time cartesian location optional example size orientation traffic light radius size agent fog rain plus various planning layer declarations common environment mobile touringworld scenarios may contain fog agent rain agent 
touringworld testbed agent types see 
parameters describing standard mobile agents divided groups corresponding various physical components go making touringmachines 
addition top level entity parameters agentname see host parameters see appendix pages provided describing touringmachines including ffl various physical kinematic control parameters maximum rate agent steering wheel turned specifying agent indicators brake lights operational set declarations control rules implementing agent control framework ffl sensor definitions different algorithms simulating form restricted see unrestricted sensing world state fact base frequently world state fact base sensed ffl focus attention definitions common layers initial set focussing rules computational resource cost focus single entity extra resource cost handle dynamic focussing requests layers ffl layer definitions set initial reactive control rules value declarations different parameters referred rules example plus various described section ffl layer definitions pointer code implementing agent layer functions specification task carried resource cost retrieve single schema schema library resource cost place retrieved schema code hooks provided various points scenario specification order easier experiment different implementations certain touringmachine components example planner simpler add new instances existing components example sensing algorithms focussing predicates reactive rules 
touringworld testbed occluded obstacle rsa fsa fsr rsr agent obstacle sensing arc illustration agent sensory field shaded grey area sensors programmed algorithm occluded 
specifically means agent able sense entities rear front able detect entities occluded 
testbed sensing algorithms listed appendix page 
illustrated agent sensor parameters fsr fsa rsr rsa 
planner plan structure set schemas contained agent schema library topological world map number declarations ffl layer definitions pointer code implementing agent layer functions resource cost retrieve model model library resource cost process conflict detection flags agent effectors layer temporal range expressed number look potential goal conflicts number levels counterfactual reasoning agent undertake looking goal conflicts frequency agent models updated fresh sensory input length time maintain model entity touringworld testbed longer registered agent sensors gamma value bounds placed expected location agent ditto agent expected speed ditto agent expected rate acceleration ditto agent expected orientation set model templates contained agent model library set declarations causal rules agent ascribing intentions world entities set declarations functions agent projecting entities movements space time set declarations rules agent identifying resolving different intra inter agent goal conflicts 
touringmachine user driven 
mentioned user controls agent clicking mouse particular testbed window titled actions see 
actions window divided quadrants acting active button selected mouse send specific physical action command user driven agent action buffer 
available actions include accelerate decelerate turn left counterclockwise turn right clockwise associated actions series parameters defining specific scalar values respectively 
user driven agents see appendix page completely controlled user lack capabilities focussing attention planning modelling 
described user driven agents alternatively controlled playing back file time stamped action descriptions user opted record earlier testbed session 
mentioned description process types entity processes internal external defined parameter 
internal entity process implemented prolog program module part main testbed process unix process running prolog session various scenario environment level processes 
external process hand separate unix process forked main testbed process runs independently communicates main process running scenario environment internal entity level processes set files 
files external entity receives necessary input complete copy current world state fact base determine whereabouts physical extent touringworld testbed testbed user control specified touringmachine acceleration orientation clicking mouse appropriate sections actions window 
addition precise sequence control commands automatically recorded played back verbatim subsequent scenarios 
scenario entities sends corresponding output including effected actions sent tracing information sent plus relevant statistical information sent 
advantage external processes implement touringworld entities help speed operations testbed increasing throughput external processes sent input internal processes considered output collected internal processes executed 
hand overhead associated file external entity processes main testbed process entity processes best defined internal number entities scenario small 
entity processes representing touringmachines executed sequential machine running sequential language prolog couple design features included ensure testbed provides plausible touringworld testbed simulation touringmachine concurrent activities 
feature aimed providing plausible simulation concurrent flow messages control layers regularly takes place touringmachine 
achieve effect words ensure messages sent timeslice processed receiver timeslice messages time stamped sent layer 
time stamps receiving layers test input message currently considered sent prior timeslice 
message removed message input queue processed message left queue re considered timeslice 
second design feature aims ensure entity process gets fair share cpu ownership timeslice cycle process scheduler queue 
guaranteeing upper bound entity timeslice inter operation latency described achieved explicit computational resource units monitoring costs operations performed touringmachines particular entity process representing touringmachine forced relinquish cpu control suspended timeslice scheduler cycle limited timeslice resources applied process sensing focussing planning modelling operations entity submitted physical communicative action process 
scenario environment level processes statically defined runtime entity level processes created terminated dynamically scenario started 
specifically processes representing various entities defined scenario specification file created entity start time arguments parameter declaration coincides time displayed simulated world clock 
described process responsible initialising entity process particular adding process scheduler queue terminating entity process removing queue corresponding entity collides successfully achieves task assigned 
principles applied design implementation testbed promote maintain reasonably clean interface touringworld entities environment necessary testbed running testing alternative implementations agents effort part programmer 
fact providing clean interface needed anyway order able support external entity process facility described 
touringworld testbed terms range richness simulator userlevel features touringworld testbed compared quite favourably dai integrated agent testbeds example lc phoenix mice dm vb tileworld pr clear intended fully general agent programming environment :10.1.1.16.8714
touringworld testbed regarded primarily vehicle evaluating touringmachines 
describing evaluations focus chapter 
evaluating touringmachines ordinarily computer user construct problem feed wait machine calculate solution problem solution 
chaos researchers needed 
needed lorenz done create miniature universes observe evolution 
change feature observe changed paths result 
armed new conviction tiny changes certain features lead remarkable changes behavior 
james chaos purpose experimentation years proliferation intelligent agent architectures offering different perspective problem integrate variety intelligent control functions single autonomous computational system 
ways agent architecture considered better drummond dk argues clear 
result growing realisation characteristics positive negative particular agent architecture evident experimental evaluation performed 
argued number researchers agent design related ai subfields dk ld coh progress science develop rigorous experimental methods 
unfortunately ai cohen coh page experimental sciences provide editorial guidance university courses experiment design analysis 
common evaluating touringmachines language frame describing assessing different agent architecture designs performances 
ai subfield planning agent architecture design experimental science entering initial stages evolution 
langley ld page argue researchers satisfied identifying qualitative regularities show method better certain conditions show environmental factor devastating system performance 
stages evolution researchers focus experiments determine quantitative laws predict agent architecture performance 
primary aim experimenting touringmachine agent architecture test substantiate main hypothesis thesis stated dissertation desirable feasible combine non deliberative suitably designed integrated deliberative control functions single hybrid architecture order obtain effective robust flexible behaviours rational autonomous resource bounded agents carry tasks complex domains 
aim experimentation investigate secondary hypothesis establishing appropriate balance reasoning deliberative control acting non deliberative control depends heavily characteristics task environments agents intended operate 
investigate claim argued seek obtain improved understanding touringmachine behavioural ecology 
behavioural ecology touringmachines useful approach understanding reasons behaviours exhibited touringmachine agent design specifically identifying conditions configuration architecture performs better vary environment operates 
simplest approach issue langley ld argues involves designing set benchmark problems purposes scientific comparison purposes enabling independent variation different task environment attributes involve artificial domains 
touringworld environment domain examples mentioned previous chapters include phoenix environment tileworld pr mice dm 
power touringworld testbed domain artificial domains general arises insights provide improved un evaluating touringmachines agent case touringmachine behavioural ecology words understanding functional relationships exist designs agents internal structures processes behaviours tasks solve ways solve tasks environments ultimately intended operate 
characterisation touringmachines study agent behavioural ecology exemplifies research methodology emphasises complete autonomous agents complex dynamic task environments 
methodological context focus evaluation centred particular research tasks 
cohen refer environmental analysis words understanding characteristics environment significantly constrain agent design design task words understanding agent design configuration produces desired behaviours expected range environmental conditions 
tasks fact stages complete research methodology cohen coh refers mad methodology modelling analysis design 
methodology aims justify system design re design decisions predictive models system behaviours environmental factors affect system behaviours 
irma agents tileworld domain pr touringmachine agents viewed having developed incremental version mad causal model touringmachine behaviour developed incrementally time agent design 
words agent design part design implemented early possible order provide empirical data feedback flesh model basis subsequent redesign coh 
implications adopting design method roles played method environmental behavioural analyses referred considered detail section 
methodological issues evaluation touringmachines realised series interesting task scenarios involving zero agents zero obstacles traffic lights 
scenarios selected remaining design activities predicting system agent behave particular situations explaining agent behaves generalising agent designs different classes systems environments behaviours scope dissertation 
see cohen coh pages details 
evaluating touringmachines aim evaluating different capabilities behaviours touringmachines require complete tasks competent effective manner example reacting unexpected events effecting goal directed actions reflective predictive goal monitoring spatio temporal reasoning plan repair coping limited computational informational resources dealing real time environmental change 
scenarios considered interesting succinctly exercise agents abilities carry time constrained tasks complex partially structured dynamic real time multi agent environments 
chosen scenarios simplified deal mentally structurally homogeneous agents possessing noiseless sensors perfect actuators approximately similar non shared relocation tasks simplifying assumptions discussed full section number non trivial challenges touringmachine agents 
aim evaluation show touringmachine architecture sense optimal 
argued section optimal rational behaviour general impossible agent resource bounded goals operate real time multi agent environment events able take place levels space time granularity 
realistically expect touringmachine behave times example extreme real time pressure fail satisfy outstanding goals 
really interest understanding different configurations agents different environmental characteristics configurations subjected affect positively negatively ability agents satisfy goals 
aim evaluation show touringmachines better integrated agent architectures performing various tasks 
rarely case actual intended task domains different agent architectures described sufficient detail permit direct comparisons agent performance 
lack common benchmark tasks universally agreed criteria assessing agent performance previous evaluations relied single performance criterion example total point score earned filling holes specific single agent tileworld environments pr kg small number performance criteria interpreted respect particular architecture measured example total number behaviours communicated agents selected mice environments dm combine detailed quantitative comparisons architectures extremely difficult altogether impossible 
evaluating touringmachines due relatively large number parameters touringworld testbed provides specifying different agent configurations performance evaluation criteria example task completion time resource utilisation agent task environmental characteristics see appendix evaluation necessarily partial main focus placed studying selected qualitative aspects touringmachine behavioural ecology effects agent behaviour task environment occur varying individual agent configuration parameters effects agent behaviour agent configuration occur varying certain aspects agent environment 
tileworld experiments described pollack ringuette pr page number touringworld knobs example world clock timeslice size total timeslice resources available agent agent size agent speed acceleration deceleration rate limits agent sensing algorithm initial attention focussing heuristics reactive rule thresholds plan schema model template library entries set provide baseline environments dynamic somewhat unpredictable moderately paced 
environments competent suitably configured agent able complete goals schedule certain environmental conditions agent parametrizations number analysed case 
order simplify analysis agents behaviours multi agent settings touringmachine configurations mental physical presumed identical stated 
single agent scenarios reflective goal monitoring sensitivity model discrepancies monitoring state particular determining model maintains current physical configuration location speed orientation satisfies expectations computed projected self model space time touringmachine various tolerance bounds decide model discrepancies fact exist 
identification self model discrepancy typically requires investigation determine possible cause 
reasoning process result agent layer resolving conflict submitting appropriate corrective action command agent effectors 
example discrepancy agent current evaluating touringmachines sensitivity self model orientation discrepancies varied layer 
expected speeds indicative unforeseen slowdown due presence agent obstacle potentially threaten agent time constrained goals suitable contextually appropriate action taken 
see effect agent behaviour ability carry relocation task reach effective robust manner modifying value self model tolerance bounds constrain allowable deviations agent current heading desired heading 
fairly wide bounds example ffi agent fails notice changes current orientation scenario caused agent layer reacting obstacles lane markings take corrective re orientation actions left hand frame 
result compared situation agent configured ffi extremely sensitive orientation discrepancies right hand evaluating touringmachines frame agent wide orientation bounds covers distance arrives target destination slightly specifically total seconds 
course suggest agents configured tight orientation bounds 
factors need considered importance agent deadline example small delay tolerable number resources spent time corrective action taken obviously physical structure environment agent operating example navigating narrow paths little wandering possible regardless orientation tolerance bounds paths wide important prevent minimise wandering 
predicting possible goal conflicts efficiency versus reliability construct time expectations physical configuration time touringmachine projects self model models currently maintains world entities point time cdh determine goal conflicts occur 
predicted conflicts instance include physical collision world entity agent goal conflict case avoid collisions virtual collision occur example agent run red traffic light goal conflict obey regulations 
length time jt cdh gamma agent predictions controlled layer 
fact value parameter expressed integer number processing cycles equivalent length jt cdh gamma 
see effect agent behaviour ability respond flexibly change colour traffic light modifying value parameter 
upper frames show snapshots left hand time seconds right hand seconds agent configured 
lower frames show traffic lights agents plans albeit simple ones example really seen multi agent scenario discussed section 
emphasis analysis behavioural characteristics sole touringmachine scenario usefully viewed single agent 
evaluating touringmachines snapshots left hand time seconds right hand seconds agent configured 
case traffic light rectangular entity half contains black circle changes red circle upper half rectangle green circle lower half time 
agent parameter set detects possible virtual conflict time exactly timeslice agent start drive past physical location light conflict deemed exist take place 
light mentioned changes green conflict fact predicted occur agent simply proceed light ultimate destination upper right hand frame 
hand agent configured agent detect definite virtual conflict time point time traffic light red turn green seconds 
resolve impending obey regulations conflict agent layer propose agent layer pto adopt new intention light 
interesting thing situation time agent comes halt lower right hand frame traffic light changed back green exactly timeslice agent committed stopping making actions taken agent resolve initial conflict completely worthless 
predictive configuration agent clearly behaves effectively predictive self 
scenario illustrative general problem confronted predictive agents shoham mcdermott sm refer extended prediction problem choosing length time intervals predictions refer 
problem involves tradeoff efficiency reliability conservative predictions example refer relatively short intervals time definition hard reason lengthy time periods hand ambitious predictions example unreliable cover larger intervals time world change potentially invalidating predictions 
scenario ideal value agent parameter appear described cause agent take unnecessary actions 
evaluating touringmachines possible effects varying agent parameter part 
general value may effective environmental contexts 
example depicts agent time heading straight wall blocking path 
case configuration lefthand frame right hand frame best able deal agent impending avoid collisions goal conflict occur time action taken 
agent requires timeslice seconds come halt detecting impending conflict time happens agent configured opposed time happens simply late avoid collision 
indicate effectiveness particular agent configuration depend extent characteristics environment agent operating 
evaluating touringmachines emergent behaviour choosing right configuration absence knowledge regarding whereabouts agents static obstacles touringmachine layer construct shortest length route target destination junction turn agent route comprises path 
agent encounters obstructions en route example encounters obstacle provided appropriate layer rule avoid hitting obstructions effecting suitably robust changes orientation magnitude changes set agent parameter 
response directional changes provided agent layer suitably sensitive orientation discrepancies arising self model described set parameter agent flexibly counteract subsequent re orientation actions order adjust heading back direction target destination 
action command originating agent layer chosen action command originating layer ultimately depends programming agent control rules 
touringworld domain scenarios chapter layer nearby obstacles favoured corrective actions proposed layer words short term robustness favoured longer term flexibility 
observe progress agent target destination marked happens lie far side fairly big obstacle 
configurations tested see upper left hand frame physical capability parameter set ffi explanation parameter section second see upper right hand frame ffi case agent combination robust reactions obstacle corrective re orientations target ends describing circular path effectively contour obstacle 
case narrower forward sensing arc agent ends rectilinear path eventually colliding obstacle motion 
scenario demonstrates particular combinations primitive behaviours example obstacle avoidance effected layer corrective goal re orientation effected layer exploit certain structural characteristics regularities environment consequence produce desirable effective emergent behaviours contour wall observed upper left hand frame 
evaluating touringmachines seen upper right hand frame appear aspects agent physical configuration example particular sensing capabilities affect emergent behaviours ultimately arise 
easily explained lower frames show agent configurations described corresponding forward sensing arcs 
wider sensing arc lower left hand frame agent ends reacting away obstacle re orients goal simple reason senses obstacle 
mentioned reactions favoured goal re orientations agent reacting environmental context avoid colliding obstacle 
narrower sensing arc see lower right hand frame agent see obstacle reaction away obstacle falls outside area described sensing arc re orient back target goal 
fact case agent configured ffi agent ends goal exactly reacts away illustrated follow rectilinear path direction obstacle 
multi agent scenarios counterfactual reasoning modelling agents intentions useful constructing projecting models world entities touringmachine constrain modelling activities number dimensions 
implemented user definable parameters layer constraints described earlier chapters example addressed chapter 
layer parameter mentioned chapter parameter fixes number levels counterfactual reasoning agent undertake projecting entities models discover possible goal conflicts 
general constructing model projections counterfactual reasoning level agent take account conflicts plus actions resulting anticipated resolutions conflicts previously detected level gamma 
values greater evaluating touringmachines give agents flexibility take account fixed number nested levels modelling agent responses agent responses predicted conflict 
scenario touringmachine agents seen independent routes destination 
interesting agent focus configuration varied agent round 
upper left hand frame simply shows state world time seconds 
scenario agent continually updates projects models hold checking see conflicts lurking 
upper right hand frame agent detects conflict obey regulations conflict occur agent shaped traffic light currently red 
assuming agent just far away traffic light parametrized conflict detection horizon see conflict traffic light agent configured predict impending conflict agent traffic light event agent altering intention light come halt 
hand agent configured predict conflict agent traffic light resolution realised entity world state conflict resolution realised predict impending conflict second involving soon stationary agent 
observable effects parameter difference quite remarkable 
agent configured detect second conflict agent timeslice time 
due proximity agents relatively high speed agent inevitable delay associated change intention momentum second delay proves sufficiently large agent realise late agent going inevitable rear collision occurs lower left hand frame 
configured lower right hand frame agent ends having time extra seconds adopt realise appropriate intention agent avoiding collision fact collision need inevitable scenario agent agent configured fairly insensitive robust layer reactions primarily emphasise different behaviours result different parametrizations agents modelling capabilities 
evaluating touringmachines occurred 
having flexibility reason interactions world entities example agent traffic light take account intentions entities example light enable touringmachines agent timely effective predictions changes place take place world 
general knowing deeply agents model clear number layer required model world entities proportional number entities modelled counterfactual reasoning depth modelled agents ultimately strike balance breadth coverage entities modelled little detail depth coverage entities detail 
issue re visited section 
monitoring environment sensitivity versus efficiency monitoring state world entity particular determining model maintains entity current physical configuration location speed orientation satisfies expectations projected entity model space time touringmachine various tolerance bounds decide discrepancies fact exist 
discrepancies detected agent self model see section identification discrepancy model entity typically requires investigation determine cause 
reasoning process results having re explain entity current behaviour ascribing new intention 
example discrepancy modelled entity current expected speeds indicative entity change intention say drive path junction 
upper frames see different time points seconds seconds agents pursuit respective goals agent round agent shaped agent triangular top 
furthermore see effect agent behaviour ability carry homeostatic goal avoid collisions modifying value parameter modelling entity constrain allowable deviations entity currently observed speed speed predicted entity observed 
scenario agent contend numerous unexpected speed changes effected agent user evaluating touringmachines driven agent 
fairly bounds example ms gamma agent detects speed discrepancies agent greater equal ms gamma discrepancies detected agent result agent deceleration just prior coming halt junction time lower left hand frame 
result compared situation agent configured ms gamma particular scenario unable detect respond fast agent actions right hand frame configuration tighter speed bounds robust able detect important events example agent front coming halt able carry timely effective intention changes example drive path agent 
course suggest agents configured tight speed bounds 
sensitivity robustness environmental change come price terms increased resource consumption time agent detects model discrepancy forced design try explain discrepancy relatively expensive process abductive intention ascription 
small changes physical configuration modelled entity need result entity having changed intentions 
scenario example agent speed changes due entirely actions effected user 
ignorant agent configured ms gamma continually attempt re explain agent changing behaviour despite fact reasoning process case agent stops junction return explanation drive path 
important remember touringmachine may monitor state layer goals exactly zero discrepancies attend entire current model set 
environmentally sensitive agent opportunities monitor progress potentially achieve goals effectively 
discussion number issues arise directly evaluation touringmachine agent architecture ffl balance goal orientedness effectiveness reactivity robustness agent affected number factors including length depth level detail predictions agent evaluating touringmachines see section size model discrepancy tolerance bounds configured see section certain aspects physical capabilities example scope sensing apparatus see section 
factors include certain environmental characteristics example rate change events degree clutter sensitivity threshold bounds agent reactive rules proportion total resources available constructing plans building maintaining mental models agents 
ffl predicting world states flexible modelling agents mental states certain situations prove useful promoting effective coordination agents see example section 
especially appears case particular entity modelled possesses complex intentions subsequently cause entity effect series complex actions space time example period time coming temporary halt red traffic light 
consideration entities intentions causal relationship intentions assumed goals predictions possible events example impending collisions inevitably shallower prove useful promoting effective behaviour 
ffl trade reliability efficiency predictions agent 
knowing precisely consider making predictions entities model aspects entities model deeply model aspects far predictions appear depend certainly extent selected aspects agent environment compare scenarios section 
ffl distinguishing contextually relevant irrelevant events generally achieving right balance robustness unexpected events example coping sudden appearance entity obstacle flexibility environmental change example establishing observed agent behaving predicted effected action carried intended appear touringworld depend number factors include physical structure environment temporal criticality agent task see section example availability adequate computational resources flexibly reasoning different world events see section 
identifying optimal level sensitivity environmental change evaluating touringmachines recognised critical issue hendler traffic world system sh plan monitoring envelopes phoenix agent project 
ffl new possibly effective behavioural patterns example emerge differing primitive behaviours example obstacle avoidance corrective goal re orientation allowed operate concurrently see section example 
precise manifestation importantly ultimate usefulness vis avis successful completion agent goals appear depend structural characteristics environment certain physical capabilities agent example sensing properties 
ffl certain conditions touringmachine fail accomplish goals 
failure may outright resulting example collision partial example measured terms agent task effectiveness timeliness 
seen due number factors including sensitivity environmental change see section short term limited see section section excessive see section possessing inadequate physical capabilities see section 
important note matter robust finely tuned touringmachine reactive control layer take certain amount time respond particular threats 
brooks bro suggests agent presence sufficiently fast moving entity cluttered environment may result agent colliding 
apart matters arising directly evaluation number experiential implementational issues bear applicability appropriateness touringmachine architecture merit addressing point 
mentioned earlier section stage designing touringmachine architecture involved analysis intended touringmachine task environment characterisation aspects intended environment significantly constrain touringmachine agent design 
shall see main purpose analysis differentiate establish cohen coh terms system fixed design decisions 
fixed design decisions reviewed anytime soon coh page 
touringmachine architecture design decisions established close examination intended touringworld evaluating touringmachines domain 
instance decision divide control multiple independent concurrent layers influenced fact touringmachines deal flexibly robustly number simultaneous events occurring potentially different level space time granularity 
differences event granularity need carrying long term deadline constrained tasks short term reactions unexpected events ultimately played part decision combine deliberative non deliberative control functions single hybrid architecture 
turn need ensure non realtime deliberative functions suitable real time domain touringworld words efficient effective hand flexible robust suggested deliberative functions latency bounded order provide guaranteed system responsiveness turn demands fairly strict control internal computational resource ii operate incrementally words capable suspending operation state regular arbitrarily small periods processing time iii serve merely resources action strict recipes agent control 
requirement main motivating force decision employ context sensitive control policy establishing control layer priorities 
design decisions worth mentioning include incorporation functions reasoning modelling agents actions mental states identifying flexibly resolving conflicts agents necessary touringworld domain populated multiple intentional agents limited computational informational resources mechanisms constantly sensing monitoring external world needed touringworld domain dynamic unpredictable 
identification isolation second type design decisions decisions name suggests reviewed implemented coh page 
purpose differentiating fixed design decisions enable basic fixed design implemented run early possible provide empirical environment develop iteratively basic agent model test hypotheses model behave review subsequently particular design decisions light observed performance 
providing addition touringmachine agent architecture highly parametrized controllable testbed environment tour justification basic touringmachine design chapter section chapters 
described regarded simply summary main design decisions 
evaluating touringmachines effective productive framework carry design activities established 
examples touringmachine design decisions established empirical feedback gained touringworld testbed include particular set reactive rules initially available agent contents various domain specific libraries plan schemas model templates conflict resolution methods space time projection functions initial set heuristics program agent focus attention mechanisms precise set inhibitory control rules mediate actions agent control layers 
summarise experimentation certainly required strong claims concerning general applicability appropriateness touringmachine design appear evaluation sufficient albeit tentative evidence reasonably confident validity claims dissertation 
particular evaluation touringmachines appears support claim desirable feasible combine non deliberative suitable designed integrated deliberative control function single hybrid autonomous agent architecture 
shown resulting architecture suitably configured capable effective robust flexible behaviours reasonably wide range complex single multi agent task scenarios 
seen behavioural repertoire touringmachines wide varied including behaviours reactive goal oriented reflective predictive 
furthermore evaluation suggests establishing appropriate balance reasoning acting appropriate degrees deliberative non deliberative control appear depend characteristics task environment particular touringmachine operating 
generally line experiences maes mae pollack pr evidence suggest environmental factors invariably play important role determining agent configuration parametrization appropriate situational context 
underestimate importance deploying earliest stages design concrete measures carrying extensive experimentation 
respect touringworld testbed domain proved viable useful system evaluating agent performance 
lending weight main claim concerning desirability feasibility hybrid agent design approach evaluation provide useful insights important aspects behavioural ecology mobile autonomous agents 
addition evaluation help lay foundations experimentation evaluating touringmachines touringmachine architecture importantly architectures agent researchers 
hopes growing interest activity establishing common benchmark tasks agents see drummond kaelbling dk example defining formal taxonomies agent environments see wilson wil provide reassuring belief day possible 
evaluating touringmachines possible effects varying agent parameter part 
evaluating touringmachines wall behaviour emerge appropriate combination primitive behaviours obstacle avoidance orientation discrepancy correcting provided agent suitable physical capabilities wide width sensory field 
evaluating touringmachines altering value agent parameter affect timeliness effectiveness predictions 
evaluating touringmachines varying value agent parameter affect agent level sensitivity environmental change 
summary machine expected intelligent 
alan turing summary research dissertation aimed design implementation ai software architecture suitable controlling coordinating actions rational resource bounded autonomous agent embedded complex world 
research involved complementary efforts ffl understanding functional behavioural requirements intelligent rational autonomous mobile agents particular class dynamic partially structured real time multi agent domain 
ffl realising particular design implementation integrated agent architecture satisfying requirements identified 
ffl designing implementing highly instrumented parametrized multi agent simulation testbed observe analyse various aspects agent level problem solving coordination behavioural ecology 
resulting architecture touringmachine agent architecture integrates novel way set deliberative non deliberative agent control capabilities 
capabilities include situated action attention focussing planning causal reasoning belief desire intention modelling summary distributed independent concurrent task achieving control layers combination enables agent produce range reactive goal oriented reflective predictive behaviours 
actions generated control layers mediated enveloping control framework designed select actions considered contextually appropriate 
combination fast control functions preemptible resource bounded deliberative ones layered control framework provides touringmachines guaranteed level responsiveness ii degree robustness cope variety exceptional events iii flexibility adapt ongoing plans required changing circumstances environment iv ability cope events levels spatio temporal granularity ability carry resource constrained goals time coordinating actions complex intentional agents 
ideas potential weaknesses pointed earlier dissertation example layers focus attention mechanism relies relatively static focussing rule set page assumption linearity layer planner page assumption noiseless sensory input page number different ways touringmachine architecture extended hopefully improved 
addressed 
explaining behaviours modelling agent beliefs desires intentions touringmachines capable generating explanations predictions agents behaviours 
current study modelling restricted domains occupied homogeneous agents agents identical physical capabilities essentially identical beliefs desires travel destination deadline may differ agents hold set prioritised goals 
words behaviour explanation touringmachines centred recognition agents intentions assumption beliefs desires universally similar 
clearly complex environments populated heterogeneous agents touringmachines explanatory powers enhanced cope wider range exceptional events 
particular failure explain agent behaviour solely consideration intentions summary may due fact observed agent possesses different beliefs goals dissimilar physical capabilities structure 
example sophisticated observer able explain agent behaviour running red traffic light inferring agent possess obey regulations homeostatic goals 
alternatively explain behaviour inferring possess said goal observed agent point view obey regulations lower priority main achievement goal reach destination 
sophisticated reasoning agent behaviour certainly benefit sophisticated treatment agent beliefs particular representation kon default ascription wb revision dw agent desires example values likes kr hedonic states gre page goal commitment cl 
modelling capabilities extended agents faced choices comes explaining agents behaviour 
touringmachines resource bounded operate real time care need taken appropriate level responsiveness guaranteed 
completeness models agents complex issue complete models agents may ineffective may require agent duplicate processing node bg page 
agent achieve complex goals internal higher level behavioural modules attempt model detail regarding lower level modules min page 
likewise agent attempt model detail agent order explain predict behaviours 
knowing quite model accurately selected events entities modelled environment task related hofstadter puts intuition required knowing sense blur distinctions retry descriptions backtrack shift levels forth probably comes experience thought general 
hard define heuristics crucial aspects program 
hof page 
empirical evaluation touringmachines help shed modelling agents abstractly words solely terms inferred propositional beliefs desires intentions touringmachines said modelling knowledge level new gn pages approximately physical details structure 
probably appropriate domains may highly detailed predictions needed order coordinate agent activity 
summary light matters 
controlling inference order guarantee appropriate level responsiveness touringmachines strict limits placed amount deliberation allowed perform execution cycle timeslice 
described previous chapters operations focussing planning modelling performed incrementally designed manner preempted appropriate timeslice agent timeslice computational resources exhausted whichever occurs 
distribution computational resources control operations basis static compile time allocation scheme touringmachines times fail best limited resources 
particular touringmachines means assessing situation deliberation subsequent consumption resources favoured immediate execution action 
particular interest number decision theoretic approaches dealing twin problems trading deliberation versus execution characterising quality inferred solutions vis vis time resources available arriving solutions 
notable examples possible consideration include incremental anytime algorithms applied deliberation scheduling time dependent planning schemes db bd dw pages utility metareasoning formal basis selecting alternative action choices reasoning expected value performing deliberative computations rw 
doyle wellman propose interesting approach incremental belief plan revision rational distributed takes account utilities different deliberative computations involved dw 
note hanks firby hf argued may ultimately impossible run time principled way decide act deliberate largely problem characterising negligible amount time costs agent ensuing benefits lost opportunities 
authors raise interesting questions possibility having deliberation action take place simultaneously agent option considered decision theoretic architectures hf page 
summary adaptive behaviour hofstadter flexibility intelligence comes having enormous number rules levels rules 
reason suggests real life agents deal countless situations completely different types 
depending type situation agent find suggests hof page case stereotyped responses just plain rules appropriate 
situations mixtures combinations stereotyped situations agent probably require rules deciding just plain rules apply 
situations readily classified novel may need exist rules inventing learning new rules 
key ingredient intelligent behaviour agent surely include ability adapt novel situations learn new behaviours 
learning requires agent able changes internal structure improve metric long term performance fixed performance criterion rus 
particular sense touringmachines considered pre intelligent response environmental change touringmachines changing intentions dynamically alter internal control structure regard metric long term performance 
touringmachine agent currently programmed set internal behavioural parameters 
virtue able sense environment monitor effects actions touringmachine effectively possesses feedback loop surroundings 
touringmachine considered adaptive require secondary feedback loop form fourth control layer see enable agent analyse performance exhibited existing control layers appropriate parameter value changes optimise performance particular performance criterion 
movement agent parameter space achieved standard gradient descent search dw page 
possible criteria assessing agent performance include temporal delay accomplishing planned task utilisation computational resources various control layers frequency modelling discrepancies arise rate near collisions involving agent occur 
compare touringmachine reactive layer rules 
compare touringmachine planning layer modelling layer functions 
performance criteria simultaneously combined summary action subsystem perception subsystem clock modelling layer planning layer reactive layer context activated control rules learning layer sensory input action output touringmachine architecture benefit addition fourth control module learning layer module charged assessing agent performance pre specified criterion fine tuning layers internal parameters agent performance improve time 
addition learning adjusting internal parameters known reinforcement learning dw page touringmachines benefit second style learning referred performance learning 
take form line knowledge compilation plans situation action rules dr symbolic goal reduction rules executable condition action pairs kae 
similarly various approaches integrating explanation learning capabilities agents classified performance learning 
example chunking compile impasse resolution procedures soar lr derivational analogy acquire domain specific control rules prodigy caching stimulus response rules theo mit 
russell rus proposes decision theoretic framework knowledge compilation approaches formally described 
potential making agents reactive run time efficient performance learning help overcome restriction agent weighted vector sum 
summary stimulus response pairs specified programmer advance example required architectures agre chapman ac schoppers sch 
social agency ai research carried date concerned issues knowledge reasoning acting individual systems agents groups organisations societies 
touringmachines similarly emphasis research architectural requirements individual agents carry tasks domains group shared tasks individual cooperation rationality common inter agent semantics assumed 
technology develop integrated agent architectures matures intelligent systems increasingly embedded complex organisations comprising humans intelligent computational agents 
increasingly growing incentive study closely social organisational dimensions intelligent agency 
particular gasser gas points requirement treat existence multiple agents fundamental category address tension local perspectives knowledge action social counterparts example common knowledge dav ethics asi assume agents employ multiple representations knowledge hold multiple disparate perspectives shared tasks account joint courses action robust time failure inconsistency 
important ideas concerning intelligent agency begun emerge fields economics sociology cognitive science ecology ethology 
particularly interesting avenues research include investigation sophisticated behaviours emerge interactions groups relatively simple behaviours ad agents min role joint intention inter agent communication establishing joint commitments common goals market systems example computational ecologies hh open systems md enabling robust integration flexible resource allocation asynchronous heterogeneous resource bounded computational agents 
summary thesis dissertation desirable feasible combine deliberative non deliberative control functions order obtain effective robust flexible behaviour autonomous task achieving agents intended operate complex domains 
secondary hypothesis investigated dissertation claim establishing appropriate balance reasoning deliberative control acting non deliberative control depends heavily characteristics task environments agents intended operate 
survey existing intelligent agent architectures chapter indicates approaches addressed isolated behavioural requirements agents example need react unforeseen events need plan complex tasks 
consideration fundamental design trade agent representational power generality flexibility behaviour ease designer program test debug computational tractability run time efficiency analysis numerous functional behavioural requirements autonomous agency chosen complex domain suggests employing hybrid architecture combining selection deliberative non deliberative functions prove promising approach 
touringmachine agent architecture possible solution hybrid control approach number existing traditional nontraditional ai techniques suitably modified integrated novel manner 
architecture grows modification extension rejection classical ai techniques planning model reasoning 
dissertation help improve understanding key functional behavioural requirements faced planning agents operate complex environments 
touringmachine architecture centred number modular independent task achieving control layers apart ensuring high degree operational concurrency enable agents handle multiple goals carry resource constrained tasks coordinate activities rational agents effective manner cope range events differing levels granularity 
real time constraints typically imposed agents embedded dynamic environments account taken touringmachines limited computational resources order guarantee upper bound latency operations sensing attention focussing planning world modelling 
result architecture pro summary duce number reactive goal directed reflective predictive behaviours dictated agent mental state environmental context 
inherent complexity integrated agent architectures combined relative immaturity field evaluation different agent designs difficult drawn process 
approach taken dissertation construct complete prototype implementation time resources permit evaluate feasibility architecture order identify various strengths weaknesses 
done number empirical evaluations purpose built feature rich instrumented simulation testbed 
complete evaluation particular construction detailed causal model accounting touringmachine full behavioural ecology wide range task domains take far greater amount time available dissertation 
results evaluations chapter show touringmachine architecture feasible suitably configured endow rational autonomous agents appropriate levels effective robust flexible control handling number pre programmed dynamic hypothetical events 
touringmachine architecture inherently capable producing range deliberative non deliberative behaviours results show establishing ideal agent parametrization intended produce particular type desired behaviour depends strongly agent particular task constraints environmental circumstances 
addition need react quickly unexpected events universally considered desirable behaviour autonomous agents evaluation touringmachines suggests circumstances ability perform amount causal reasoning agents intentions desires prove useful promoting effective task coordination agents 
experience designing implementing testing touringmachine architecture shows dividing control modular layers facilitate incremental testing debugging different agent configurations 
particular touringmachines control layers independently connected sensors effectors agents tested early course research soon reactive layers implemented 
control layers completed put place possible analyse debug touringmachines incrementally able handle complex tasks exhibit wider range behaviours 
strengths touringmachine architecture implementation lie ability produce means carefully designed integrated summary collection deliberative non deliberative control techniques diverse range intelligent autonomous behaviours 
having empirical evaluation high priority outset design touringmachines extensively parametrized order facilitate detailed study simulation testbed 
enabling rapid effective analysis range different agent environment configurations combination touringmachine architecture testbed prove powerful platform studying number important issues concerning autonomous agency particularly research integrated agent architecture matures suitable benchmark tests emerge 
form architecture exhibits number weaknesses 
particular inability reason sophisticated way utilisation distribution computational resources various control layers prevents touringmachines explicitly addressing run time tradeoffs needing deliberate needing act 
similarly inability reason explicitly internal parameter settings different parameter settings promote hinder certain behaviours different environmental contexts prevents touringmachines learning past mistakes intelligently adapting changing world conditions 
limitations discussed detail previous sections 
result novel architectural design successfully produce range useful behaviours required embedded rational autonomous agents operating complex multi agent domains 
implemented evaluated richly parametrized multi agent testbed touringmachines serve advance understanding wider issues concerning practical construction intelligent autonomous integrated systems systems doubt necessarily play vital role forging tomorrow large scale evolving computational networks decentralised information processing systems 
appendix touringworld scenario grammar syntax touringworld scenario specification language ssl extended backus naur form 
non terminals appear terms example scenario level declarations 
terminals include scenario parameter names example base programming language types example positive float quoted strings 
various syntax rules split sections corresponding non terminals appearing body top rule scenario specification scenario level declarations environment level declarations entity level declarations scenario level declarations scenario level declarations scenario name scenario iterations start time suspension rate termination criterion save script status save script file playback status playback file window definitions graph plot declarations touringworld scenario grammar graphics declarations parameter declarations parameter declarations parameter window declarations trace declarations window definitions window definition window definition graph plot declarations plot mode plot style plot label plot parameter plot label plot origin plot range plot display increment plot axis marker increment plot axis marker size plot parameter plot label plot origin plot range plot display increment plot axis marker increment plot axis marker size graphics declarations graphics window coordinates scroll graphics agent shape declarations front sensing arc declarations rear sensing arc declarations parameter declarations parameter declaration parameter declaration parameter declarations parameter declaration parameter declaration parameters window declarations parameters window declaration parameters window declaration trace declarations trace declaration trace declaration window definition window name touringworld scenario grammar window process window screen window screen window height window width window max lines window contrast window cursor scroll graphics rate graphics increment rate amount graphics increment amount agent shape declarations agent shape declaration agent shape declaration front sensing arc declarations front sensing arc declaration front sensing arc declaration rear sensing arc declarations rear sensing arc declaration rear sensing arc declaration parameter declaration parameter scope parameter scope style parameter style parameter declaration parameter scope parameter scope change parameter change amount parameter change amount limit parameter bound parameters window declaration window entry trace declaration trace parameter parameter scope agent shape declaration agent name agent shape front sensing arc declaration agent name start time rear sensing arc declaration agent name start time parameter parameter user code pointer parameter parameter user code pointer scenario name identifier scenario iterations natural number start time world time suspension rate positive integer touringworld scenario grammar termination criterion collision terminated agent name duration positive float terminated save script status save script file file identifier playback status record playback playback file file identifier window name identifier window process environment graphics graph plot user agent parameters agent name window screen positive integer window screen positive integer window height positive integer window width positive integer window max lines natural number window contrast positive negative window cursor font cursor plot mode incremental non incremental plot style dot cross circle plot label natural number natural number label string plot parameter parameter plot origin positive float plot range natural number plot display increment natural number plot axis marker increment natural number plot axis marker size natural number graphics window coordinates natural number natural number natural number natural number graphics increment rate positive float graphics increment amount natural number agent shape circle triangle enterprise parameter scope environment agent name parameter style incremental non incremental available cursor shapes listed appendix manual kim page 
touringworld scenario grammar parameter schemas retrieved schemas discarded completed subtasks total actions effected reactive rules fired entities sensed focussed entities focussing predicates entities modelled resources spent sensing resources spent focussing resources spent planner resources spent modeller conflicts detected conflicts resolved total agents total objects layer layer task delay failed tasks successful tasks average speed agent collisions final distance target average resources sensing average resources focussing average resources planner average resources modeller average utilisation sensing average utilisation focussing average utilisation planner average utilisation modeller average focussed entities average sensed entities average modelled entities actions effected layer actions effected layer actions effected layer user code pointer prolog clause parameter change increment decrement parameter change amount float parameter bound float parameter world time increment entity size environment factor task travel time task light rate schema retrieval cost schema placing cost max resources sensing max resources focussing max resources planner max resources modeller reaction threshold reaction frontal agent threshold reaction rear agent threshold reaction obstacle threshold reaction lane marking threshold forward sensing range rear sensing range forward sensing arc rear sensing arc sensing rate modelling rate model discard time model bounds location model bounds speed model bounds acceleration model bounds orientation conflict detection horizon conflict resolution depth window entry parameter touringworld scenario grammar trace parameter time final collisions final agents agent environment agent terminated effectors message buffer sensors visible entities occluded entities focus attention focussed entities reactive layer planning layer task handler planner step planner operation modelling layer model retrieval model discrepancy model resolution model expectation messages sent messages received layer suppression layer censoring environment level declarations environment level declarations world time world time increment environment factor environment factor calculation calculation truncation factor truncation factor truncation factor truncation factor world time positive float world time increment positive float environment factor positive float truncation factor positive float entity level declarations entity level declarations entity definition entity definition entity definition agent definition environment agent definition touringworld scenario grammar user agent definition object definition agent definition agentname agent name agent process type agent vector entity radius agent capability declarations control rule declarations sensor declarations focus attention declarations layer declarations layer declarations layer declarations environment agent definition agent name agent process type environment agent vector environment agent attributes entity radius layer declarations user agent definition user agent increment user agent decrement user agent decrement user agent increment agent vector agent capability declarations object definition object name object type world location world location object attributes entity radius agent vector start time world location world location agent speed agent acceleration agent orientation agent communications agent capability declarations agent speed agent acceleration touringworld scenario grammar agent deceleration agent orientation device status control rule declarations censor control rule censor control rule suppressor control rule suppressor control rule sensor declarations sensing algorithm cost resources sensing range sensing range sensing arc sensing arc sensing rate focus attention declarations focussing rules resources resources resources layer declarations initial reactive rules separation agent orientation separation agent speed separation agent speed separation agent speed separation agent angle separation agent angle layer declarations planner algorithm resources planner task resources resources schema names topological world map layer declarations touringworld scenario grammar modeller algorithm resources resources resources conflict detection horizon conflict resolution depth modelling rate model discard time model bounds model bounds model bounds model bounds model template names theorist rules space time projection functions conflict resolution rules environment agent vector start time world location world location environment agent type time environment communication environment agent attributes traffic light attributes object attributes wall attributes lane marking attributes sign attributes agent communications agent communication agent communication censor control rule rule name censor condition censor condition censor action censor action suppressor control rule rule name suppressor condition suppressor condition suppressor action suppressor action focussing rules focussing rule focussing rule initial reactive rules reactive rule reactive rule planner task plan route task light task rain task fog task schema names schema name schema name topological world map touringworld scenario grammar path definitions junction definitions model template names model template name model template name theorist rules theorist rule theorist rule space time projection functions space time projection function space time projection function conflict resolution rules conflict resolution rule conflict resolution rule traffic light attributes size positive float orientation traffic light orientation wall attributes length positive float type wall type lane marking attributes path path name type lane marking type sign attributes text string path path name junction junction name censor condition entity entity name perception buffer censor action remove sensory record layer name entity entity name suppressor condition action command spec agent state spec suppressor action remove action command layer name agent action focussing rule focussing predicate focussing predicate plan route task plan route agent agent name final destination destination travel time travel time distance distance light task light agent agent name interval time interval amber time time interval colours colour colour colour fog task fog visibility factor environment factor rain task rain friction factor environment factor path definitions path definition path definition junction definitions junction definition junction definition touringworld scenario grammar theorist rule theorist entry space time projection function configuration intention projection conflict resolution rule conflict type conflict goal conflict resolution path definition path name path width junction name junction name junction definition junction name world location world location configuration world location world location agent speed agent acceleration agent orientation agent communications intention schema name projection agent path agent path conflict goal conflicting goal self model conflicting goal conflict resolution action specification task specification agent name identifier agent process type internal external agent speed positive float agent acceleration positive float agent orientation positive float entity radius positive float agent deceleration negative float agent communication signal left signal right flash horn braking hazard lights fog lights device status ok faulty rule name identifier entity name agent name object name layer name layer layer layer action command spec action command action source agent action action buffer touringworld scenario grammar agent state spec current intention intention sensing algorithm covered ahead covered ahead occluded covered occluded ahead occluded ahead covered occluded user code pointer resources natural number sensing range positive float sensing arc positive float sensing rate natural number focussing predicate focussing predicate user code pointer reactive rule rule avoidance rule wall avoidance rule front agent avoidance rule rear agent avoidance rule obstacle avoidance rule lane marking avoidance rule direction zeroing user code pointer separation positive float planner algorithm layer user code pointer schema name plan route determine route determine cruise speed follow route attain speed go location query speed turn target distance query current location query object location find nearest follow path find nearest lane marking query path select shortest route calculate route distance get junction follow path repeat follow route query junction location calculate speed accelerate determine speed acceleration choose acceleration rate decelerate choose deceleration rate determine acceleration period calculate stopping distance calculate turning angle turn angle drive path signal left signal right flash horn hazard lights fog lights light traffic light poll traffic light wait change small accelerate junction poll junction agent nearest entry agent halt distance poll stopped agent start overtake finish overtake light light times light status rain rain rain fog fog fog user code pointer touringworld focussing predicates listed chapter 
touringworld scenario grammar destination object name junction name travel time eq positive float positive float positive float lt positive float gt positive float distance positive float time interval positive float colour red green amber path name identifier path width positive float junction name identifier world location positive float world location positive float modeller algorithm layer user code pointer conflict detection horizon natural number conflict resolution depth natural number modelling rate natural number model discard time positive float model bounds positive float model template name self touring machine traffic lights fog rain user code pointer theorist entry fact clause default schema name clause agent path configuration positive float conflict type junction collision right way junction collision right way frontal collision way clear frontal collision way clear red traffic light traffic light colour unexpected signalling unexpected braking unexpected speed unexpected orientation new entity user code pointer conflicting goal avoid collisions obey regulations self model conflicting goal self model conflicting goal reach destination action specification agent action action arguments task specification intention intention arguments clause formula order clausal form logic pga 
touringworld scenario grammar environment agent type fog rain traffic light time positive float environment communication rain fog colour traffic light orientation bottom top top bottom left right right left user agent increment positive float user agent decrement negative float object name identifier object type obstacle wall information sign entry exit lane marking wall type vertical horizontal lane marking type dashed solid action source layer layer layer rule identifier agent action change speed change orientation signal left signal right flash horn hazard lights fog lights action arguments prolog list structure intention arguments prolog list structure bibliography ac philip agre david chapman 
pengi implementation theory activity 
proceedings conference american association artificial intelligence pages 
ad tracy anderson max donath 
animal behaviour paradigm developing robot autonomy 
robotics autonomous systems 
ais jose sam steel 
integrating planning execution monitoring 
james allen james hendler austin tate editors readings planning pages 
morgan kaufmann san mateo ca 
panos antsaklis kevin wang 
autonomous control systems 
proceedings fifth ieee international symposium intelligent control philadelphia pa 
asi isaac asimov 
robot 
doubleday new york ny 
bd john bresina mark drummond 
integrating planning reaction preliminary report 
james hendler editor proceedings aaai spring symposium planning uncertain unpredictable changing environments systems research center university maryland md 
bg alan bond les gasser editors 
readings distributed artificial intelligence 
morgan kaufmann palo alto ca 
bip michael bratman david israel martha pollack 
plans resource bounded practical reasoning 
computational intelligence november 
bro rodney brooks 
robust layered control system mobile robot 
ieee journal robotics automation 
bibliography bro rodney brooks 
intelligence reason 
proceedings international joint conference artificial intelligence pages 
bro rodney brooks 
intelligence representation 
artificial intelligence 
car sandra carberry 
incorporating default inferences plan recognition 
proceedings conference american association artificial intelligence pages 
car sandra carberry 
plan recognition natural language dialogue 
mit press cambridge ma 
jaime carbonell oren etzioni yolanda gil robert joseph craig knoblock steve minton manuela veloso 
prodigy integrated architecture planning learning 
acm sigart bulletin 
paul cohen michael greenberg 
hart adele howe 
trial fire understanding design requirements agents complex environments 
ai magazine 
cha david chapman 
planning conjunctive goals 
james allen james hendler austin tate editors readings planning pages 
morgan kaufmann san mateo ca 
cl philip cohen hector levesque 
persistence intention commitment 
georgeff lansky editors reasoning actions plans proceedings workshop pages 
morgan kaufmann los altos ca 
cl arie robert lindsay 
deterministic autonomous agents 
ai magazine 
cm william clocksin christopher mellish 
programming prolog 
springer verlag berlin germany 
coh paul cohen 
survey eighth national conference artificial intelligence pulling pulling apart 
ai magazine 
dav ernest davis 
representations commonsense knowledge 
morgan kaufmann san mateo ca 
bibliography daw richard dawkins 
selfish gene 
oxford university press oxford uk 
db thomas dean mark boddy 
analysis time dependent planning 
proceedings conference american association artificial intelligence pages 
dh randall davis walter hamscher 
model reasoning troubleshooting 
howard shrobe aaai editors exploring artificial intelligence pages 
morgan kaufmann san mateo ca 
dk mark drummond leslie pack kaelbling 
integrated agent architectures benchmark tasks evaluation metrics 
proceedings darpa workshop innovative approaches planning scheduling control pages 
morgan kaufmann san mateo ca 
johan de kleer brian williams 
reasoning multiple faults 
proceedings conference american association artificial intelligence pages 
dm edmund durfee thomas montgomery :10.1.1.16.8714
mice flexible testbed intelligent coordination experiments 
proceedings ninth workshop distributed artificial intelligence rosario resort wa 
dm edmund durfee thomas montgomery 
hierarchical protocol coordinating multiagent behaviours 
proceedings conference american association artificial intelligence pages 
dr joseph downs han reichgelt 
integrating classical reactive planning architecture autonomous agents 
proceedings european workshop planning birlinghoven germany 
dw jon doyle michael wellman 
rational distributed reason maintenance planning replanning large scale activities preliminary report 
proceedings darpa workshop innovative approaches planning scheduling control pages 
morgan kaufmann san mateo ca 
dw thomas dean michael wellman 
planning control 
morgan kaufmann san mateo ca 
bibliography fir james firby 
investigation reactive planning complex domains 
proceedings conference american association artificial intelligence pages 
fn richard fikes nils nilsson 
strips new approach application theorem proving problem solving 
james allen james hendler austin tate editors readings planning pages 
morgan kaufmann san mateo ca 
jerry fodor 
modularity mind 
mit press cambridge ma 
gal julia galliers 
positive role conflict cooperative multiagent systems 
jean pierre uller yves demazeau editors decentralized elsevier north holland amsterdam nl 
gas les gasser 
social conceptions knowledge action dai foundations open systems semantics 
artificial intelligence 
les gasser carl herman 
mace flexible testbed distributed ai research 
michael huhns editor distributed artificial intelligence pages 
morgan kaufmann los altos ca 
geo michael georgeff 
communication interaction multiagent planning 
proceedings conference american association artificial intelligence pages 
geo michael georgeff 
planning 
james allen james hendler austin tate editors readings planning pages 
morgan kaufmann san mateo ca 
gi michael georgeff francois felix ingrand 
decision making embedded reasoning systems 
proceedings international joint conference artificial intelligence pages 
gls michael georgeff amy lansky marcel schoppers 
reasoning planning dynamic domains experiment mobile robot 
technical note sri international menlo park ca april 
gn michael genesereth nils nilsson 
logical foundations artificial intelligence 
morgan kaufmann los altos ca 
bibliography gre richard gregory editor 
oxford companion mind 
oxford university press oxford uk 
hc adele howe paul cohen 
responding environmental change 
proceedings darpa workshop innovative approaches planning scheduling control pages 
morgan kaufmann san mateo ca 
hf steve hanks james firby 
issues architectures planning execution 
proceedings darpa workshop innovative approaches planning scheduling control pages 
morgan kaufmann san mateo ca 
hh bernardo huberman tad hogg 
behaviour computational ecologies 
bernardo huberman editor ecology computation pages 
elsevier north holland amsterdam nl 
hhc adele howe david hart paul cohen 
addressing real time constraints design autonomous agents 
coins technical report department computer information science university massachusetts amherst ma 
hof douglas hofstadter 
godel escher bach eternal golden braid 
penguin books london uk 
hr barbara hayes roth 
making intelligent systems adaptive 
report stan cs stanford university stanford ca october 
hr barbara hayes roth 
architectural foundations real time performance intelligent agents 
journal real time systems 
htd james hendler austin tate mark drummond 
ai planning systems techniques 
ai magazine 
kae leslie pack kaelbling 
architecture intelligent reactive systems 
georgeff lansky editors reasoning actions plans proceedings workshop pages 
morgan kaufmann los altos ca 
kae leslie pack kaelbling 
specifying complex behaviours computer agents 
luc steels barbara smith editors proceedings eighth conference artificial intelligence simulation behaviour 
springer verlag london uk 
bibliography kg david kinny michael georgeff 
commitment effectiveness situated agents 
technical note australian artificial intelligence institute carlton australia april 
kim ted kim 
manual version 
technical report university california los angeles ca 
david kirsh 
today tomorrow man artificial intelligence 
kon kurt konolige 
deductive model belief 
proceedings international joint conference artificial intelligence pages 
kr george kiss han reichgelt 
semantics desires 
eric werner yves demazeau editors decentralized 
elsevier north holland amsterdam nl 
lai john laird editor 
special section integrated cognitive architectures 
acm sigart bulletin 
lan pat langley 
machine learning experimental science 
machine learning 
lat jean claude latombe 
fast path planner car indoor mobile robot 
proceedings conference american association artificial intelligence pages 
lc victor lesser daniel corkill 
distributed vehicle monitoring testbed tool investigating distribution 
ai magazine 
hector levesque philip cohen jos nunes 
acting 
proceedings conference american association artificial intelligence pages 
ld pat langley mark drummond 
experimental science planning 
proceedings darpa workshop innovative approaches planning scheduling control pages 
morgan kaufmann san mateo ca 
lee mark lee 
intelligent robotics 
open university press milton keynes uk 
bibliography len douglas lenat 
beings knowledge interacting experts 
proceedings international joint conference artificial intelligence pages 
lr john laird paul rosenbloom 
integrating execution planning learning soar external environments 
proceedings conference american association artificial intelligence pages 
mae pattie maes 
situated agents goals 
robotics autonomous systems 
mcd drew mcdermott 
planning acting 
james allen james hendler austin tate editors readings planning pages 
morgan kaufmann san mateo ca 
md mark miller eric drexler 
markets computation open systems 
bernardo huberman editor ecology computation pages 
elsevier north holland amsterdam nl 
mil milne 
pu 
methuen london uk 
translated alexander 
min marvin minsky 
society mind 
simon schuster new york ny 
mit tom mitchell 
increasingly reactive 
proceedings conference american association artificial intelligence pages 
mor hans moravec 
mind children robot human intelligence 
harvard university press cambridge ma 
gordon mccalla larry reid peter schneider 
plan creation plan execution knowledge acquisition dynamic microworld 
international journal man machine studies 
new allen newell 
knowledge level 
artificial intelligence 
gary 
distributed decision theoretic control system mobile robot 
acm sigart bulletin 
bibliography pga david poole randy goebel aleliunas 
theorist logical reasoning system defaults diagnosis 
research report cs university waterloo waterloo ont february 
poo david poole 
representing knowledge logic diagnosis 
proceedings international conference fifth generation computer systems pages 
pr martha pollack marc ringuette 
introducing tileworld experimentally evaluating agent architectures 
proceedings conference american association artificial intelligence pages 
rg jeffery rosenschein michael genesereth 
deals rational agents 
proceedings international joint conference artificial intelligence pages 
rk elaine rich kevin knight 
artificial intelligence 
mcgrawhill new york ny nd edition 
rus stuart russell 
execution architectures compilation 
proceedings international joint conference artificial intelligence pages 
rw stuart russell eric wefald 
principles metareasoning 
proceedings international conference principles knowledge representation reasoning pages 
sac earl sacerdoti 
nonlinear nature plans 
james allen james hendler austin tate editors readings planning pages 
morgan kaufmann san mateo ca 
sc michael sullivan paul cohen 
endorsement plan recognition program 
proceedings international joint conference artificial intelligence pages 
sch schoppers 
universal plans reactive robots unpredictable environments 
proceedings international joint conference artificial intelligence pages 
sh hendler 
model reaction planning dynamic environments 
international journal artificial intelligence engineering 
bibliography sh lee spector james hendler 
knowledge strata reactive planning multi level architecture 
technical report cs tr computer science dept university maryland college park md 
sho yoav shoham 
agent oriented programming 
technical report stan cs computer science dept stanford university palo alto ca 
sim herbert simon 
sciences artificial 
mit press cambridge ma nd edition 
sm yoav shoham drew mcdermott 
problems formal temporal reasoning 
james allen james hendler austin tate editors readings planning pages 
morgan kaufmann san mateo ca 
sr john stankovic editors 
hard realtime systems chapter pages 
computer society ieee washington dc 
ss leon sterling ehud shapiro 
art prolog 
mit press cambridge ma 
tmc perry thorndyke dave mcarthur stephanie cammarata 
autopilot distributed planner air fleet control 
proceedings international joint conference artificial intelligence pages 
tur turing 
computing machinery intelligence 
mind lix 
vb steven vere timothy bickmore 
basic agent 
computational intelligence 
wb yorick wilks ballim 
multiple agents heuristic ascription belief 
proceedings international joint conference artificial intelligence pages 
wil david wilkins 
recovering execution errors sipe 
computational intelligence november 
wil david wilkins 
high level planning mobile robot domain 
technical note sri international menlo park ca 
bibliography wil stewart wilson 
animat path ai 
meyer wilson editors animals animats proceedings international conference simulation adaptive behaviour 
mit press cambridge ma 
woo sharon wood 
planning rapidly changing environment 
phd thesis school cognitive computing sciences university sussex brighton uk 
