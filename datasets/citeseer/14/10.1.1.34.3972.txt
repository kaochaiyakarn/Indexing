published practical application prolog april 
institute electrical engineers london prolog developing new programming language armstrong virding williams computer science laboratory telecommunications systems laboratory box sweden joe ericsson se january describes prolog development new concurrent realtime symbolic programming language called erlang 
erlang developed building prototype prolog prototype user group test reactions language 
time passed features added removed interpreter eventually language reached level maturity decided try significant problem 
years lines erlang performance issue wrote prolog cross compilers erlang various concurrent logic programing languages followed direct implementation erlang 
direct implementation erlang loosely wam writing prolog compiler erlang new machine emulator machine 
instruction set machine prototyped prolog compiler re written erlang totally removing dependency prolog 
describes key events lay simple prototype current version language 
describes development erlang programming language ar 
know time unwittingly advice brooks br argued software systems incrementally grown designed conventional manner rapid prototyping design methodology 
intention develop new programming language 
erlang emerged side effect attempt find elegant way program private automatic branch exchange simple telephony applications 
ground described da initial programming experiments ar 
writing followed advice parnas clements pa development language result rational design process fact real design process virtually impossible describe 
success development large measure due prolog prolog doubtful language erlang emerged 
prolog provided kind interactive environment accommodate rapid changes direction occurred development process 
finer level detail implementation prolog provided inspiration necessary efficient version erlang 
errors prolog things done differently provided inspiration certain things 
erlang supports number mechanisms prolog 
erlang concurrent realtime distributed functional language suitable building large embedded real time systems 
modules support programming large code changed running system fly sophisticated error trapping mechanisms allow construction highly robust software systems 
details available ar ar 
language started simple meta interpreter added notions concurrency various error handling mechanisms top prolog 
finished programming language right 
ideas erlang interpreter described section 
having built simple interpreter erlang keen real problems 
group application programmers started prototyping real telephony applications 
results described pe 
influence user group development language described section 
language developed obtained syntax relation prolog weakened development language described section 
development highly informal interpreter changed daily definition language 
interpreter matured changes frequent proper documentation necessary 
change described section 
years user group satisfied resultant language 
study approximately lines erlang implemented various features telecommunications switching system 
features previously implemented conventional languages 
program design erlang required times 
performance language primary concern 
satisfied expressive power language users required implementation times faster original interpreter 
section describes attempts speed implementation language 
attempt cross compile erlang prolog strand 
inspiration stage development came wam wa erlang grown prolog natural techniques fast prolog systems applicable erlang 
describe fast implementation erlang 
section describes current status language 
interpreter start discussion simple prolog interpreter extremely restricted subset erlang 
interpreter simple prolog meta interpreter added notion process prolog 
interpreter starting point series experiments try find features included language suitable programming robust concurrent real time applications 
interpreter rapidly modified re written include functionality identified series detailed studies performed establish desirable characteristics language programming telephony applications 
stage entire interpreter rewritten matter days simple extensions hours 
sections describe basic techniques interpreter 
suspending computation step program computation 
want write meta interpreter suspended point time possible resume computation 
consider vanilla interpreter solve written follows solve solve solve 
solve builtin call 
solve rule solve 
intermediate stages computation inaccessible programmer 
goal solve terminates solution obtained possible suspend computation place 
simplest way provide computation keep unsolved goals list successively take goal head list solve solve goals remaining tail list new goals may generated solving goal head list 
achieved follows reduce 
reduce call reduce 
reduce lhs eqn lhs rhs append rhs reduce 
reduces list items item item 
assumed items contained curly braces prolog goals items user defined rules 
example show known naive reverse factorial functions written terms eqn eqn nrev nrev concat 
eqn nrev 
eqn concat concat 
eqn concat 
eqn fact 
eqn fact fact 
reduce works expected reduce fact write result nl 
result 
reduce nrev write result nl 
result 
trace successive iterations reduce factorial example obtained reduce fact write result nl 
reduce fact write result nl 
reduce fact write result nl 
reduce fact write result nl 
reduce fact write result nl 
reduce fact write result nl 
reduce fact write result nl 
reduce write result nl 
reduce write result nl 
reduce write result nl 
reduce write result nl 
reduce 
list goals remains reduced particular point computation normal prolog data structure manipulated way required user particular may decide suspend computation fixed number reductions 
suspending computation fixed number reductions predicate reduce similar reduce difference terminate fixed number reductions performed 
goal reduce reductions result reduces list goals binding result terminated continuation 
terminated means computation completed reductions continuation returned reductions performed outstanding goals goal list reductions count reductions occurred reduce terminated 
reduce goals continuation goals 
reduce result call reduce result 
reduce lhs result eqn lhs rhs append rhs reduce result 
example reduce nrev write result nl result write reduce result 
result reduce terminated result terminated 
reduce nrev write result nl result write reduce result 
reduce continuation concat write result nl result continuation concat write result nl 
course restart computation represented continuation solving reduce result 
multi task scheduler reduction mechanism previous section basis simple round robin scheduler takes list tasks form job goals 
scheduler allows job run reductions goes task tasks remain 
name task goals goal list representing task 

job goals write starting nl reduce goals result result 
terminated write terminating nl 
continuation goals write suspending nl append job goals 
added write statements observe happens job nrev write job nl job nrev write job nl job fact fact write job fact nl 
starting suspending starting suspending starting suspending starting suspending starting job terminating starting job terminating starting job terminating see goals nrev nrev fact fact executed concurrently 
form pseudo concurrency processor 
maximum number reductions allowed task suspended analogous time slice process swapping tasks context switch 
single thread computation analogous process 
interpreter functional style programming ignore moment context switching return basic reduction cycle define reduce supports functional style programming reduce 
reduce var rhs reduce rhs bind var 
reduce return value bind var var value reduce 
reduce call reduce 
reduce write write reduce 
reduce nl nl reduce 
reduce lhs eqn lhs rhs append rhs reduce 
note version interpreter write nl primitive functions meta language written directly enclosed curly braces adding new primitives meta language easily achieved write nl 
returning factorial naive reverse example written eqn fact return 
eqn fact fact result return result 
eqn nrev nrev result concat return result 
eqn nrev return 
eqn concat concat return 
eqn concat return 
behaves expected reduce fact write nl 

reduce nrev write nl 
functional language processes message passing final complex example combine ideas previous sections form interpreter reduce supports functional style programming allows process creation simple message passing processes 
process represented data structure form job id goals mailbox id name process goals list unsolved goals representing computation mailbox list messages sent received process 
goal reduce goals id mailbox jobs represents current state simple multi tasking operating system 
goals id mailbox represents currently executing process jobs list suspended processes 
list processes call environment reduce write stopped nl 
reduce myid job id goals msgs write terminating myid nl write resuming id nl reduce goals id msgs 
reduce spawn id goals myid env write spawning id nl append env job id goals env reduce myid env 
reduce send id msg myid env send id msg env env reduce myid env 
reduce receive myid message env reduce return message myid env 
reduce receive myid env write suspending myid nl append env job myid receive env reduce env 
reduce var rhs myid env reduce rhs bind var myid env 
reduce return value bind var myid env var value reduce myid env 
reduce myid env call reduce myid env 
reduce lhs myid env eqn lhs rhs append rhs reduce myid env 
send id msg job id goals messages job id goals messages append messages msg messages 
send id msg send id msg 
meta language primitive spawn id goals schedules new process name id goal list goals 
send id message sends message message process id receive function returns message mailbox process 
scheduling algorithm interpreter extremely simple processes proceed terminate try receive message messages sent process 
reality sophisticated scheduling algorithm combined time slices context switching process longer proceed 
relations eqn define new meta language simple program terms meta language eqn go spawn sender sender spawn catcher catch 
eqn sender send catcher 
eqn sender write sending pip nl send catcher pip sender 
eqn catch receive write received nl catch 
eqn catch 
eqn catch catch 
creates process called sender catcher 
sender sends messages catcher terminates 
catcher receives messages terminates receives termination message reduce go startup 
spawning sender spawning catcher terminating startup resuming sender sending pip sending pip sending pip sending pip sending pip terminating sender resuming catcher received pip received pip received pip received pip received pip received stopped properties interpreter interpreters previous sections show establish processed model computation prolog 
things wrong interpreters meta languages user hostile mistakes user meta language programs crash interpreters number bizarre ways 
interpreters written lack concern efficiency actual interpreter difference lists eliminate appends program somewhat efficient clear 
versions 
early stages languages features implemented hours invariably discussions preceding language change took longer time taken implement change 
development period language interpreter underwent large number small changes large changes required total re writes 
interpreter proved extremely robust highly portable 
version nu prolog version running vax 
ported quintus prolog machine 
user group access pc ported als prolog running pc 
ported sicstus prolog changed vax sun sicstus prolog running sparc 
changes prolog system computer caused momentary easily solved problems 
far problems due incompatibility operating systems especially ms dos unix different prolog systems despite fact prolog standardized language 
techniques described sections syntax described section wrote usable interpreter concurrent language language characteristics ffl concurrent processes ffl selective message passing ffl process groups ffl error signaling trapping mechanism process groups ffl line prolog code ffl time slices ffl round robin scheduling ffl tracing interprocess messages ffl debugging individual processes ffl virtual channels ports took approximately lines prolog code 
interpreter experiment different language constructs scheduling mechanisms programming styles aimed finding convenient elegant way solving simple telephony programming problems 
experiments ericsson md md private automatic branch exchange controlled prolog interpreter 
period experimentation rapid daily changes interpreter meta language programs meta language style programming version interpreter emerged felt wider context 
user group interpreter stabilized user group formed 
group application programmers outside computer science laboratory csl interested experimenting new architectures ways programming small 
formation user group forced measure stability development process 
csl members obliged deliver ideas time schedule produce working documented versions software 
year csl user group members met twice week attempt understand problems process invaluable users long experience applications programming suggested valuable changes language easily incorporated interpreter csl members able convince applications programmers certain imperative styles programming led problems consequently avoided 
process times somewhat frustrating retrospect key factors lead subsequent acceptance language 
interesting note user group started language language started changing despite fact language converged prior releasing 
appears language converged twice firstly fulfill internal need csl developers secondly feedback obtained users 
development language syntactic development take naive reverse factorial examples 
syntax section eqn fact return 
eqn fact fact result return result 
eqn nrev nrev result concat return result 
eqn nrev return 
defining infix operator 
write valid prolog data structures omit functor symbol eqn fact 
return 
fact 
fact result return result 
nrev 
nrev result concat return result 
nrev 
return 
syntax syntax real users subject 
disadvantage syntax error messages run time diagnostics terms prolog data structures erlang 
language year reached relative stability wrote parser erlang gave language syntax allowed invent syntaxes structures valid prolog 
new syntax nrev 
nrev concat 
nrev 
fact 

fact 
fact 
short time new syntax adopted purely functional notation avoided need superfluous temporary variables current syntax write nrev 
concat nrev nrev 
fact 
fact 
fact 
effort involved syntaxes seen ffl original prolog clauses lines prolog code ffl infix operator 
plus code read convert erlang functions normalized form lines prolog code ffl parser prolog lines prolog lines parser pretty printer 
parser written prolog dcg idea dcg rapidly discarded due problems concerned providing meaningful precise error diagnostics 
solution completely flatten erlang grammar ll grammar write conventional recursive descent parser language 
time removed possibility users define infix operators 
language changes suggested new syntax moving fully parsed version language suggested features ffl tuples written item item item 
storing fixed numbers items 
ffl functions zero arity denoted func atoms name parentheses 
ffl module system ffl function guards semantic embedding changing prolog new syntax cosmetic effect 
longer prolog forced think terms meaning language construct just rely meaning statement translated equivalent prolog 
semantics erlang expression result conscious design decision accidental result implementation prolog call phenomena semantic embedding semantics prolog accidentally embedded erlang 
aware phenomena wrote erlang parser stage writing compiler forced completely remove remaining dependencies prolog 
example consider erlang expression 

interpreter translated prolog 

meaning arithmetic expression erlang defined meaning corresponding expression prolog 
wrote parser erlang define grammar arithmetic expressions defining grammar forced think wanted follow prolog grammar arithmetic expressions grammar 
accidental consequence interpreter written prolog original version erlang variables erlang represented prolog logical variables 
eventually decided logical variables prolog certain undesirable properties erlang 
sending message containing logical variable processes allows processes communicate invisible mechanism binding variable message passing wanted acts interprocess communication explicitly achieved message passing 
defining documents erlang appeared simple prolog meta interpreter 
particular point time interpreter language definition 
language defining documents defined totally terms interpreter 
eventually started writing manuals guides described language 
language undergoing rapid change interpreter manuals phase 
early stages development interpreter manual differed interpreter correct manual wrong allowed answer question language try see 
language matured came point approach usefulness reversed policy language manual differed manual correct implementation wrong 
stage took lot care ensure manual correct difficult prolog system provided careful proof reading interpreter help help get manual right 
exactly opposite supposed conventional practice supposed write defining documents implementation way easier easier describe exists imagine properties exist 
shift emphasis interpreter manual defining document reflected achievement new level maturity language 
performance decision concentrate performance represented milestone development 
entered period interested performance language leave semantics unchanged concentrating implementation 
idea cross compile erlang concurrent logic programming language natural effort directed adding notion concurrency prolog concurrency logic programming language concurrency free 
implementations loosely wam wa descendants 
cross compilation concurrent logic programming languages attempts write cross compilers prolog erlang parlog cl strand fo resulting strand implementation order magnitude faster prolog interpreter fast meet requirements 
cross compilation process described detail chapter fo turned erlang functions arity strand goals arity 
resulting programs achieve kind performance required 
encountered certain problems compilation languages strand 
models concurrency different erlang provides concurrency process level strand finer grain concurrency strategy error handling different problems forced think terms implementation 
compiler wam machine stage development concerned building high performance erlang machine 
strand parlog implementations neatly side stepped nasty implementation issues bounded time garbage collection real time scheduling compiled version forced think issues 
inspiration compiled version erlang came wam erlang grow prolog natural techniques fast prolog systems applicable erlang 
major difficulty understanding wam time easily understandable descriptions wam things better see ha 
turning point came having read chapter ma lucid description wam machine gave understanding machine 
compiler erlang machine jam emulator jam machine written 
initially compiler emulator written prolog 
resulting machine slow 
erps erlang reductions second erps tracing instructions served debug instruction set structure call frames primary advantage prolog underlying memory management write emulator 
having worked instruction set architecture machine compiler re written erlang emulator 
version total re writes runs times faster original prolog interpreter 
detailed description implementation language ar details jam instruction registers virtual machine implementation concurrency 
current status erlang established language writing real time software 
complete implementations exist prolog stand wam implementations 
art time writing erlang sites spreading rate sites month number prototypes small number internal projects 
language freely available non commercial information requests erlang ericsson se development erlang language operating system part going research program computer science laboratory 
head csl bjarne help support project users developing language fun suggested valuable improvements language accepted non backwards compatible changes language 
ar armstrong virding philosopher problem logic programming telecommunications applications 
third ieee symposium logic programming september salt lake city utah 
ar armstrong williams prolog rapid prototyping telecommunications systems 
th int conf 
software engineering telecommunication switching systems july 
ar armstrong virding erlang experimental telephony programming language 
xiii international switching symposium stockholm sweden 
may june 
ar armstrong virding williams implementing functional language highly parallel real time applications 
th int conf 
software engineering telecommunication switching systems florence march april 
br brooks 
silver bullet essence accidents software engineering 
information processing 
ed 
elsevier science publishers 
north holland 
cl clark gregory 
parlog parallel programming logic 
research report doc department computing imperial college 
london 
april revised june 

williams experiments programming languages techniques telecommunication applications 
proc 
th int conf 
software engineering telecommunication switching systems eindhoven netherlands april 
fo strand new concepts parallel processing 
ian foster steven taylor 
prentice hall 
ha hassan warren machine tutorial reconstruction 
mit press logic programming series 
cambridge ma 
ma maier david warren computing logic benjamin cummings publishing inv 

md reprint ericsson review articles md nos pa parnas clements rational design process fake 
ieee transactions software engineering vol se february 
pe pbx software prototype real time declarative language persson mats ericsson preparation wa warren david prolog instruction set 
technical note sri international menlo ca october 

