effects asymmetry tcp performance hari balakrishnan venkata padmanabhan randy katz study effects network asymmetry endto tcp performance suggest techniques improve 
networks investigated study include wireless cable modem network packet radio network form important part mobile ad hoc network 
literature asymmetry considered terms mismatch bandwidths directions data transfer 
generalize notion bandwidth asymmetry aspects asymmetry latency media access packet error rate common wide area wireless networks 
combination experiments real networks simulation analyze tcp performance networks throughput achieved solely function link traffic characteristics direction data transfer forward direction depends significantly reverse direction 
focus bandwidth latency asymmetries propose evaluate techniques improve performance 
include techniques decrease rate acknowledgments constrained reverse channel ack congestion control ack filtering techniques reduce source burstiness acknowledgments infrequent tcp sender adaptation algorithms reverse bottleneck router schedule data acks differently fifo acks scheduling 
keywords tcp asymmetry cable modem wireless networks 
transmission control protocol tcp widely internet reliable unicast communications 
robustness tcp wide variety networking environments primary reason widespread usage 
emerging networking technologies pose new challenges tcp terms performance motivate development new tcp algorithms 
focus challenges tcp performance arise due network asymmetry including context wide area wireless networks 
increased interest asymmetric networks motivated technological economic considerations popularity applications web access involve substantially larger data flow client forward direction reverse direction 
examples networks exhibit asymmetry include cable modem networks wireline wireless direct broadcast satellite networks asymmetric digital subscriber loop adsl networks bandwidth forward direction 
detailed treatment material appears theses 

presently mit lab computer science eecs dept 
presently microsoft research 
orders magnitude larger reverse 
asymmetry accentuated channel unidirectional necessitating different low bandwidth channel dialup line bandwidth constrained lossy wireless channel communication reverse direction 
study limited networks asymmetry explicit mismatched bandwidths study tcp dynamics packet radio networks traffic flowing simultaneously different directions adversely affect performance 
packet radio networks half duplex radio units transmit receive data frames time 
addition combine wireless technologies wireless cable packet radio study understand problems arise situations different types asymmetry tied 
asymmetry inherent wireless networks case central transmitter base station transmit high power receiving portable mobile units 
reduce power consumption units transmit base station relatively low power 
addition contend mobile units gain access channel 
asymmetric networks mobile ad hoc environments 
example consider detachment soldiers battlefield communicate packet radio network exhibits latency media access asymmetry link outside world asymmetric bandwidth satellite wireless cable modem network 
tcp connection mobile nodes soldier computer host wired internet database server command center contend forms asymmetry 
important consider aspect asymmetry analyzing tcp performance mobile ad hoc networks 
generalize various phenomena examples described definition asymmetry network said exhibit network asymmetry respect tcp performance throughput achieved solely function link traffic characteristics forward direction depends significantly reverse direction 
addition bandwidth asymmetry described definition extends types asymmetry latency media access packet error rate 
study bandwidth latency media access asymmetries individually combination 
measurements real testbed simulations experiments different choices topology workload identify performance problems 
results propose evaluate techniques improve performance 
wireless networks serve basis include wireless cable modem network packet radio network 
fundamentally network asymmetry affects performance reliable transport protocols tcp protocols rely feedback form cumulative acknowledgments receiver ensure reliability 
addition tcp ack clocked hari randy cs berkeley edu computer science division department eecs university california berkeley berkeley ca 
relying timely arrival acknowledgments steady progress fully utilize available bandwidth path 
disruption feedback process potentially impair performance forward data transfer 
example low bandwidth acknowledgment path significantly slow growth tcp sender window slow start independent link bandwidth direction data transfer 
second example packet radio networks variable latencies presence bidirectional traffic caused instance flowing direction opposite data packets causes sender round trip time estimate highly variable 
inflates tcp retransmission timeout value impairing loss recovery 
major results slip header compression alleviates performance problems due bandwidth asymmetry completely eliminate problems especially arise presence bidirectional traffic 
connections traversing packet radio networks suffer large variations round trip time caused half duplex nature radios asymmetries media access protocol 
adversely affects tcp loss recovery mechanism results degraded performance 
various router techniques propose help improve performance significantly asymmetric situations simulations experiments real testbed 
include decreasing frequency acknowledgments acks constrained reverse channel ack congestion control ack filtering reducing source burstiness acknowledgments infrequent tcp sender adaptation scheduling data acks intelligently reverse bottleneck router 
addition improving throughput individual connections proposed modifications help improve fairness scaling properties connections contend scarce resources network 
demonstrate simulations bulk web transfers 
rest organized follows 
section describes related section discusses details experimental testbed methodology 
analyze problems arise due bandwidth asymmetry section latency media access asymmetry section measurements packet traces network testbed 
section router techniques alleviate problems due asymmetry 
evaluation techniques simulation appears section 
implemented techniques promising simulation experiments testbed 
implementation described section performance evaluation implementation confirms trends observed simulation section 
section plans section 

related researchers identified proposed solutions transport protocol problems arise single hop wireless networks 
main issue considered papers impact packet losses due reasons congestion wireless error handoff tcp performance 
view natural progression research goal understanding improving performance reliable transport protocols tcp face increasing heterogeneity network technologies characteristics 
specific measurements reported taken wireless cable modem network packet radio network 
previous understanding effects way traffic tcp performance 
authors demonstrate way traffic lead ack compression closely bunched acknowledgments disrupt smooth ack clocked transmission sender 
interest asymmetric bandwidth networks exacerbate problem 
authors model network bandwidth asymmetry derive analytical expressions throughput terms packet loss probability normalized asymmetry ratio certain ideal assumptions 
propose drop front strategy dropping acknowledgments bandwidth constrained reverse link 
authors demonstrate bidirectional traffic asymmetric links leads ack compression consequently degraded performance 
investigate backpressure mechanism limit data flow reverse direction conclude performance 
studies bandwidth asymmetry context satellite networks 
main distinction network wireless cable modem network consider study larger bandwidth delay product dominating factor performance 
basic performance measurements metricom ricochet packet radio network 
results analysis useful set problems far understood solved 
addition proposing evaluating schemes alleviate adverse effects bandwidth asymmetry characterize types asymmetry occur wide area wireless networks 
evaluate solutions networks terms connection throughput fairness scaling behavior 

experimental simulation methodology section describe experimental testbed simulation setup traffic workloads study 
experimental testbed combination simulation actual experimentation heterogeneous network testbed evaluate performance tcp understand reasons observed performance design host router techniques improve performance 
simulation topologies parameters derived networks testbed wireless cable modem network wireless cable modem network technology developed hybrid networks 
www hybrid com 
aggregate bandwidth unidirectional forward channel mbps way link latency ms 
topology testbed shown 
downstream channel data operates ghz range converted receiving standard television channel frequencies 
reverse channel dialup line isdn line wireless channel wide area packet radio network packet radio network packet radio network metricom ricochet network www metricom com 

mbps way wireless cable system currently development system exhibits bandwidth asymmetry 
topology network shown 
packet radios operate mhz ism band raw link speed kbps 
units typically range meters 
wireless cable modem testbed example network bandwidth asymmetry depending return path dialup phone line kbps kbps wireless channel 
installation wireless cable modem network bit error rate forward channel negligible 
focus effects bit errors forward channel 
packet radio network study example network explicit bandwidth asymmetry characteristic flow traffic tcp data direction affected flow traffic tcp acks opposite direction 
arises half duplex nature radio units simultaneously send receive packets having incur significant overhead turning mode 
studying impact type asymmetry independently combine networks different asymmetric characteristics study performance characteristics tcp connections 
describe details simulation setup workloads performance metrics 
simulation setup performance metrics ns event driven packet level network simulator berkeley lbnl 
developed extensions simulator model networks interest 
added notion shared link lan simulator ability incorporate arbitrary link layer media access protocols 
simulations packet radio network mac protocol loosely ricochet protocol 
details additions described section 
simulation parameters link bandwidth latency packet radio turn time topologies derived characteristics networks experimental testbed 
validated simulated performance standard tcp constant rate udp traffic actual measurements real networks 
experiment kinds workloads large bulk transfers short web transfers 
consider simultaneous transfers opposite directions 
main performance metrics throughput measured receiver metric fairness called fairness index 
fairness index defined follows concurrent connections network throughput achieved connection equal fairness index lies throughput non negative explained equal connections receive equal throughput remaining 
network connections 
fairness index understand analyze scaling properties network multiple connections simultaneously active 

bandwidth asymmetry section discuss network topology performance problems arise due bandwidth asymmetry 
include slowdown increased burstiness tcp sender due disruption ack clocking highly variable performance simultaneous tcp transfers forward reverse directions 
network topology network topology wireless cable system shown 
bandwidth forward channel mbps 

network topology wireless cable modem network illustrates bandwidth asymmetry 
hosts client subnet receive data internet mbps wireless cable link forward channel send data low bandwidth dialup link reverse channel 
internet wireless transmitter internet server client subnet modem relay tower ethernet dialup line reverse channel slower instance kbps dialup phone line 
experiments considered ethernet reverse channel 
configuration possibly unrealistic serves useful data point comparison 
sub sections discuss performance problems observed experiments conducted real testbed simulator 
analysis performance problems discuss problems arise due limited bandwidth reverse channel asymmetric bandwidth network 
way transfers discuss case tcp transfers happen forward direction 
common example user downloading data server 
simplicity initially restrict case single tcp transfer forward direction 
define normalized bandwidth ratio defined forward reverse paths ratio raw bandwidths divided ratio packet sizes directions 
example mbps forward channel kbps reverse channel raw bandwidth ratio 
byte data packets byte acks ratio packet sizes 

implies ack data packets reverse bottleneck link get saturated forward bottleneck link possibly limiting throughput achieved forward direction 
main effect bandwidth asymmetry case tcp ack clocking break 
consider data packets transmitted sender quick succession 
transit receiver packets get spaced apart bottleneck link bandwidth forward direction 
principle ack clocking acks generated response packets preserve spacing time way back sender enabling sender clock new data packets spacing 
limited reverse bandwidth consequent queuing effects alter inter ack spacing 
acks arrive bottleneck link reverse direction faster rate link support happens assuming data packet acknowledged get queued 
spacing emerge link dilated respect original spacing 
contrast ack compression happens acks get queued fast link 
sender clocks new data slower rate queuing acks 
furthermore sender window growth slowed 
part reason measured throughput dialup reverse channel slip header compression low 
slip header compression reduces sizes acks decreases improving performance 
example consider case mbps forward kbps reverse channel data packet size kb 
tcp timestamp option enabled ack size bytes slip bytes 
slip 
tcp delayed acks ack data packets throughput limited mbps mbps slip respectively 
numbers closely match measured throughputs shown 
comparison performance ethernet return channel better absence bandwidth asymmetry smaller link delay dialup lines 
aside throughput shows dip socket buffer size kb larger socket buffer sizes lead overflow router queue forward path 
practice reverse bottleneck link finite amount buffer space 
tcp transfer lasts long buffer fill cause acks get dropped 
receiver acknowledges packet average acks get dropped reverse channel buffer 
effect ack traverses reverse bottleneck link data packets acks may directly limit forward throughput 
situation leads problems sender receives fewer acks 
sender bursty 
sender receives ack ends sending data bursts packets 
increases chance data packet loss especially large 
second conventional tcp senders base window increase counting number acks actual data acknowledged fewer acks imply slower rate growth congestion window 
third receipt fewer acks disrupt sender fast retransmission algorithm data packet loss 
sender may receive threshold number duplicate acks receiver may sent required number 
loss infrequent acks path sender cause long idle periods sender waits subsequent acks arrive 
way transfers consider case tcp transfers simultaneously occur forward reverse directions 
example user sending data example mail message simultaneously receiving data example web pages 
restrict discussion case connection direction 
scenario effects discussed section pronounced reverse direction bandwidth 
measured performance hybrid wireless cable network different return channels range socket buffer sizes 
run experiment involved transfer mb data forward direction bsd os hosts 
socket buffer size kbytes throughput mbps mbps ethernet kbps slip kbps kbps kbps slip reverse transfer 
increases degree bandwidth asymmetry forward transfer 
addition effects arise due interaction data packets reverse transfer acks forward transfer 
suppose reverse connection initiated saturated reverse channel buffer data packets time forward connection initiated 
high probability acks newly initiated forward connection encounter full reverse channel buffer get dropped 
initial problems acks forward connection get queued large data packets reverse connection long transmission times takes ms transmit kb data packet kbps line 
causes forward transfer stall long periods time 
show concurrent reverse forward connections measured wireless cable modem network 
reverse connection initiated 
discussed forward connection starts slowly 
clearly shows large idle times seconds transfer 
times reverse connection loses packets due buffer overflow intermediate router slows forward connection gets opportunity rapid progress quickly build window 
evident sharp forward connection data rate just times reverse connection retransmits packets marked circles 
latency asymmetry section discuss effects latency media access asymmetry tcp performance 
combination measurements simulations obtain results 
focus tcp connections packet radio network example situation type asymmetry 
start describing topology network media access link layer protocols 
discuss results experiments solutions observed problems 
discuss scaling fairness issues network 
network topology underlying protocols topology topology packet radio network shown 
maximum link speed nodes wireless cloud kbps 
packets fixed host fh internet routed metricom gateway gw radios pt mobile host mh 
number wireless hops typically 
radio radio units network means simultaneously transmit receive data 
moving transmitting receiving mode takes non trivial amount time called transmit receive turnaround time tr similarly going receiving transmitting mode takes time equal receive transmit turnaround time rt mac protocol radios frequency hopping spread spectrum units operating mhz ism band 
details frequency hopping protocol relevant predominant reason variability mac protocol 
mac protocol polling scheme similar identical rts cts request send clear send protocol ieee standard 
station wishing communicate called peer sends rts message 
peer currently communicating station sends cts message acknowledging rts 
received initiator data communication link established 
data frame sent peer 
peer currently communicate sender communicating peer send cts causes sender backoff random amount time schedule 
measurements reverse connection operating kbps dialup line 
circles indicate times reverse connection retransmits packets 
time seconds 
measurements forward connection operating mbps hybrid wireless cable network 
sharp data rate occur reverse connection suffers loss slows 
time seconds sequence number kb 
topology ricochet packet radio network 
mobile host mh modem attached communicates fixed host fh internet radios pt ethernet radios er 
gateway gw routes packets packet radio network internet 
gw internet mh er er er fh pt pt pt pt pt transmission 
send nack cts sender achieves effect 
care taken stations ensure messages data frames lost peer wrong mode waiting time peer change modes 
station maintains value turnaround times neighbors network 
link layer protocol reliable link layer protocol network simple frame frame protocol window size 
frame successfully received receiver sends link level ack sender 
frame received successfully sender retransmits timeout 
simple link layer protocols norm packet radio networks see 
analysis problems discuss results measurements simulations various network topologies traffic workloads 
start simplest case bulk tcp transfer wireless hop running mac link layer protocols described 
particular measurements phase ricochet modems observed similar effects measurements newer phase modems 
variable delays need communicating peers synchronize rts cts protocol significant turnaround time radios result high packet overhead 
rts cts exchange needs back polled radio busy example engaged conversation different peer overhead variable 
main reason large variable latency packet radio networks 
clear increase interfering traffic tcp acks significantly impact flow tcp data packets 
shows packet sequence trace measured kb tcp transfer wired wireless hop ricochet network 
clearly shows effect radio increased variability affecting performance 
connection idle duration result coarse timeouts losses recovered tcp fast retransmission mechanism 
ideally round trip time data transfer relatively constant low deviation 
unfortunately true connections network shown 
plots individual round trip time estimate samples tcp connection actual ricochet network 
mean value samples seconds standard deviation seconds 
high variation individual samples retransmission timer set srtt order seconds causing long idle periods 
general correct retransmission timer trigger segment retransmission amount time dependent round trip time linear standard deviation avoids spurious retransmissions 
techniques needed alleviate problems caused large deviations tcp round trip times loss recovery process 
problems exacerbated presence way traffic competing traffic 

solutions problems discussed preceding sections arise contention bottleneck resources reverse direction link bandwidth buffer space interaction traffic data acks flowing opposite directions network 
observation serves starting point solutions discussed 
techniques ack congestion control ack filtering reducing frequency ack packets reverse channel 
discuss changes tcp sender enable adapt situation acks received infrequently 
simple scheduling algorithm data ack packets reverse channel router improve performance way transfers 
ack congestion control acc idea extend congestion control tcp acks non negligible demands resources bottleneck link reverse direction 
acks occupy slots reverse channel buffer capacity limited certain number packets bytes case bsd os systems 
approach red random early detection algorithm gateway reverse link aid congestion control :10.1.1.128.5092
gateway detects incipient congestion tracking average queue size time window past 
time sequence number 
packet ack sequence trace kb tcp bulk transfer measured wireless hop ricochet network 
pauses sender timeouts lasting seconds large round trip time variations cause retransmission timeout estimate long 
round trip time samples collected connection shown 
samples mean standard deviation coarse timeouts data acks sample number round trip time average exceeds threshold gateway selects packet random marks sets explicit congestion notification ecn bit red algorithm notification reflected sender packet receiver 
receiving packet ecn set sender reduces sending rate 
important point note acc data packets tcp acks candidates marked 
tcp receiver maintains dynamically varying delayed ack factor sends ack data packets 
receives packet ecn bit set increases multiplicatively decreasing frequency acks multiplicatively 
subsequent round trip time determined tcp timestamp option receive ecn linearly decreases factor increasing frequency acks 
receiver mimics standard congestion control behavior tcp senders manner sends acks 
bounds delayed ack factor obviously minimum value ack sent data packet 
maximum value determined sender window size conveyed receiver new tcp option 
receiver send ack preferably window data sender 
cause sender stall receiver delayed ack timer usually set ms kicks forces ack sent 
reverse red gateway gets full needs drop packet 
gateway choose variety schemes pick packet drop particular drop tail acc drop packet enqueued random acc 
experimented policies experiments choice drop policy difference performance cases 
ack filtering af acc mechanism described modifies tcp stack receiver order decrease frequency acks constrained reverse link 
ack filtering idea suggested karn gateway technique decreases number tcp acks sent constrained channel advantage fact tcp acks cumulative 
ack receiver enqueued router host routing layer host directly connected constrained link traverses queue check previous acks belonging connection queue 
removes fraction possibly depending full queue removal redundant acks frees space data ack packets 
policy filter uses drop packets configurable deterministic random similar random drop gateway semantics items queue consideration 
need connection state maintained router information necessary implement drop policy implicitly packets queue 
experiments reported af deterministically clears preceding acks belonging connection new ack connection larger cumulative ack value enters queue 

gateway configured drop selected packet random early drop chose mark 
tcp sender adaptation sa acc af alleviate problem congestion reverse bottleneck link decreasing frequency acks ack potentially acknowledging data packets 
discussed section cause problems sender burstiness slowdown window growth decrease effectiveness fast retransmission algorithm 
combat sender burstiness placing upper bound number packets sender transmit back back window allows transmission data 
necessary bursts data scheduled points time computed connection data rate 
data rate estimated ratio cwnd srtt cwnd tcp congestion window size srtt smoothed rtt estimate 
large bursts data get broken smaller bursts spread time 
sender avoid slowdown window growth simply account amount data acknowledged ack number acks 
ack acknowledges segments window grown separate acks received 
policy works window growth tied available bandwidth forward direction number acks irrelevant 
solve fast retransmission problem requiring sender count number duplicate acks 
acc receiver observers threshold number packets marks subsequent duplicate acks bit indicate fast retransmission requested 
af reverse channel router takes similar action filtered threshold number duplicate acks 
receipt marked packet causes sender fast retransmission 
ack reconstruction ar ack reconstruction technique reconstruct ack stream traversed reverse direction bottleneck link 
ar local technique designed prevent reduced ack frequency adversely affecting performance standard tcp sender implementations implement sender adaptation enables schemes acc af having modify sources perform sender adaptation asymmetric network providers may able locally deploy 
main idea reconstructor fill gaps ack sequence smooth ack stream seen sender 
suppose acks arrive reconstructor traversing constrained reverse link times respectively 
da 
reaches sender da packets sent sender flow control window large congestion window increases independent da 
ar remedies situation acks provide sender larger number acks consistent rate reduces degree burstiness causes congestion window increase faster 
configurable parameters reconstructor da ack threshold determines spacing interspersed acks 
typically set da follows tcp standard delayed ack policy 
successive acks arrive reconstructor separated da interpose ceil da da acks ceil ceiling operator 
parameter needed reconstructor dt determines temporal spacing reconstructed acks 
order measure rate acks arrive input reconstructor rate depends output rate constrained reverse channel presence traffic link 
exponentially weighted moving average estimator monitor rate output estimator dt average rate acks arriving reconstructor average rate acks reach sender losses delays 
set dt equal dt essentially operate rate governed reverse bottleneck link resulting performance determined rate unfiltered acks arrive reverse bottleneck link 
sender adaptation done sender behaves rate acks arrive da dt 
method deciding temporal spacing reconstructed acks dt equate rates increments ack sequence happen cases 
reconstructor sets dt da dt da dt implies dt da da dt 
ack held back time roughly equal dt 
carefully controlling number spacing acks unmodified senders increase congestion window right rate avoid bursty behavior 
ar implemented maintaining soft state reconstructor easily regenerated 
note spurious acks generated reconstructor semantics connection completely preserved 
trade ar obtaining bursty performance better rate congestion window increase versus modest increase roundtrip time estimate sender 
believe tradeoff asymmetric environments concerned 
scheduling data acks case way transfers data ack packets compete resources reverse direction section 
case single fifo queue data acks cause problems 
example reverse channel kbps dialup line transmission kb sized data packet take ms data packets get queued ahead ack packets uncommon occurrence data packets sent pairs slow start shut acks half second 
data packets queued ahead ack acks delayed 
alleviate problem configure router schedule data ack packets differently fifo 
particular scheduling algorithm consider gives higher priority acks data packets acks scheduling 
motivation techniques header compression transmission time acks small affects subsequent data packets little packet overhead reverse channel large case packet radio networks time minimizes idle time forward connection minimizing amount time acks remain queued data packets 
note acc scheduling scheme require gateway explicitly identify maintain state individual tcp connections 
summary acc af schemes reduce frequency acks reverse channel sa ar schemes overcome adverse effects reduced ack feedback 
experiments acc conjunction sa af conjunction sa ar 
acks scheduling scheme designed prevent forward transfer starved data packets reverse transfer 

simulation results bandwidth asymmetry section results simulations oneway way tcp transfers network exhibits bandwidth asymmetry 
simulation topology investigate effects bandwidth asymmetry shown 
parameters forward channel measurements hybrid wireless cable network 
experimented reverse channels different bandwidths fixed delay 
reverse channels ranging slow high speed dialup lines isdn different latencies reality keeping delay constant ms simulation experiments helps focus bandwidth asymmetry aspect 
single way transfers conducted sets experiments involving second transfer forward direction 
traffic reverse direction acks forward transfer cases 
set experiments sufficient buffering ensure data losses forward direction 
second set experiments designed investigate 
simulation topology model network bandwidth asymmetry 
bandwidth delay parameters chosen closely model hybrid wireless cable modem network 
server client router router mbps ms mbps ms mbps ms kbps ms 
throughputs simulation single way transfer forward direction data losses case 
indicates slip header compression 
reverse channel bandwidth kbps throughput mbps reno acc sa af sa af ar different protocols performed losses occurred forward direction due insufficient forward buffer capacity particular highlight benefits sa ar ack stream lossy 
lossless transfers shows throughputs obtained protocol configurations tcp reno reno acc sa reno af sa reno af ar different types return channels case 
socket buffer size sender receiver set kb data packet kb size 
buffer size reverse bottleneck router set packets routers packets 
ack size set bytes bytes respectively header compression 
motivation understand bandwidth queue length characteristics return channel affect forward throughput data loss 
main observation transfers long reverse buffer fills early reno 
point ack gets average causing sender send bursts packets 
long exceed bottleneck buffer size forward direction increased burstiness sender lead losses 
factor normalized bandwidth ratio defined section exceeds cases slip header compression resulting bursts larger size buffers forward direction 
explains poor throughput tcp reno cases mbps 
sender adaptation ack reconstruction employed conjunction acc af breaks potential bursts avoiding performance degradation suffered vanilla tcp reno 
kbps reverse channel header compression 
throughput obtained tcp reno mbps worse schemes 
happens reverse channel buffer gets filled acks totalling bytes adds significant delay ms connections round trip time rtt 
effect explains performance acc somewhat worse af kbps kbps cases 
tries ensure reverse channel queue get completely filled 
ensures ack connection queue minimizes effect queuing round trip time 
key results set experiments 
slip big win cases losses forward direction eliminates problem entirely 

af acc lead significant improvements reverse buffer small especially large 

large reverse buffers cause reno performance severely degrade cause acc perform poorer reno progresses rate acks leave reverse queue takes acc kick number reverse acks large fraction reverse queue 
lossy transfers discuss results second set experiments designed study effects forward losses performance investigate reno acc af alter 
rest sa implicitly bundled acc af explicitly stated ar sa excluded 
inter ack spacing sa ar prevent burst transmissions 
table shows results experiments different protocols 
maximum window size set packets queue sizes set packets 
kbps header compressed reverse channel 
af ar af sa perform best achieving throughputs better reno 
acc sa performs better reno configuration 
important point note degree burstiness reduced significantly reverse router queue longer perpetually full af acc 
seen shows time evolution congestion windows different protocols 
table shows time averaged tcp congestion window round trip times different protocols 
clear table reducing frequency acks sufficient techniques sa ar need 
note ar results larger round trip time protocols leads best performance setting parameters reduces number losses packet transmissions source spread longer duration acc sa red gateway mark packets acks drop packets queue full 
random drop policy superior dropping tail ack dropped 
tail drops lead long consecutive sequences acks dropped leading increased sender burstiness 
metric reno acc sa af sa af ar af throughput mbps average cwnd pkts average rtt ms table 
performance different protocols presence losses forward direction 
highlighted fields show benefits sa ar demonstrate af 

congestion window evolution different schemes 
acc af sa af ar don fluctuate reno achieving better performance 
time segments acc af sa reno af ar summary results show sa ar important overcome burstiness results lossy ack stream random drop policy red gateway better performance 
simultaneous way transfers consider simultaneous way transfers topology section reverse channel fixed kbps dialup line header compression 
transfer initiated time continues seconds 
second transfer starts randomly picked time seconds ends time equal seconds 
runs conducted configuration 
goal see connections share reverse channel bandwidth buffer impacts throughput 
table summarizes results obtained terms aggregate throughput connections fairness index defined section computed period connections active 
see unmodified tcp reno yields best aggregate throughput worse fairness index value 
high degree unfairness tcp reno arises acks connection quickly fill reverse channel buffer 
second connection starts suffers ack losses early leading timeouts lack progress 
acks second connection lost growth window slow start phase slowed large queuing delay acks encounter 
decreasing frequency acks acc af keep reverse channel queue small new connection face problems ones happen unmodified tcp reno 
consequently fairness indices cases close maximum value 
way transfers consider case simultaneous transfers simultaneously active forward reverse directions 
fix reverse channel header compressed kbps dialup line ms latency buffer size packets 
forward transfer initiated time 
reverse transfer initiated randomly picked time seconds 
transfers continue time equal seconds 
forward direction buffer size set packets eliminating packet losses forward direction 
table shows results sets experiments 
forward reverse throughputs computed period transfers directions active averaged runs 
interesting observations 
unmodified tcp reno acks forward connection completely fill reverse channel buffer 
experiments forward losses happened time times 
consequently packets reverse connection get dropped high probability 
happens times succession retransmission timer reverse connection backs extent connection progress resulting zero throughput 
scenario quite different remaining runs 
reverse channel buffer tend fill acks reverse connection full times packets dequeued regularly transmission 
fact average queue size packets opposed buffer capacity 
possible data packets reverse connection get queue 
happens acks forward connection suddenly experience longer delay queued byte packets causing forward connection time cut congestion window data packet lost 
point reverse connection progress experiences loss forward connection takes 
connections take turns making progress bursts simultaneous manner 
af achieves relatively poor throughput forward transfer close optimal throughput reverse transfer 
reason happens reverse transfer starts kb sized data packets start entering reverse channel queue 
transmission time data packet kbps line ms fifo scheduling acks forward transfer get queued data packets entire duration causing sender forward transfer stall 
acks lost period 
may cause sender time waiting acks 
reverse connection continues building window time progresses ack packets get queued data packets 
result forward connection progress short bursts interspersed idle times 
illustrates simulation experiment af 
metric reno acc af total throughput fairness index table 
aggregate throughput mbps fairness index simulation way transfers forward direction 
reverse channel kbps dialup line header compression 
protocol combination forward throughput mbps reverse throughput kbps tcp reno tcp reno acc sa acc sa acks af sa af sa acks af ar af ar acks table 
throughput simulation simultaneous forward reverse transfers 
reverse channel kbps dialup line tcp header compression 
forward direction buffer size reverse direction buffer size packets 
large forward direction buffer ensures packet loss due buffer overflow 
acc reverse channel router employing red algorithm throughput reverse transfer reasonably kbps maximum possible kbps 
time throughput forward transfer mbps better af sa configuration 
reason feedback red gateway prevents reverse transfer filling reverse gateway data packets 
reverse connection sustain optimal throughput having grow window packets 
assuming large rtt ms reverse connection bandwidth delay product kbps ms kb kb packets 
reverse connection decrease impact data packets ack packets forward transfer sustaining optimal throughput 
red algorithm operation ack packets get queued data packet decreases forward throughput 
acks scheduling scheme section avoids prioritizing acks data 
assumption scheduling add significantly queuing delay data packets 
acc decreases frequency acks header compression small size data packets affected significantly 
shown table acc acks scheduling achieves forward throughput mbps maintaining close optimal reverse throughput kbps 
simple calculation shows parameters chosen better mbps maintaining optimal reverse throughput 
data packet reverse connection undergoing transmission kbps link lasting ms forward connection sender receive new acks 
illustrates effect simulation 
send window worth data ms socket buffer size kb chosen maximum sender throughput works mbps 
contrast acc combining acks scheduling af leads starvation data packets reverse transfer 
ack packets arrive queue rate faster drained ack waiting sent queue 
note ack undergoing transmission longer queue considered ack filtering algorithm 
point benefits red feedback acc consider case feedback red gateway applied data reverse connection acks effect disables acc 
forward throughput higher mbps reverse throughput kbps numbers shown table 
acks subject congestion control data cause reverse connection lose packets time periodically 
idle periods reverse connection forward transfer rapid progress resulting higher forward throughput 
latency asymmetry section perform detailed analysis problems caused latency asymmetry solutions alleviate adverse effects increased round trip time variability 
experimental measurements ricochet network modeled system ns simulator 
extended point point link abstraction ns general shared lan added support arbitrary mac link layer protocols 
simulation parameters obtain results described section shown table 
consider impact wireless bit errors simulations isolate impact variability due mac protocol performance 
practice link layer retransmissions corrupted packets add variability network 
set experiments single way transfers network including wireless cloud number wireless hops varying similar topology commercial ricochet network 
experiment multiple simultaneous tcp transfers wireless cloud highlight issues fairness scale wireless network 

simulation results showing portion sequence number trace forward transfer reverse transfer started 
reverse channel router uses ack filtering 
multi second idle times caused acks getting queued multiple kb data packets belonging reverse transfer 
time seconds sequence number kb parameter value link bandwidth kbps fixed link latency ms tr ms rt ms radio queue size packets receiver buffer size kbytes table 
simulation parameters multi hop packet radio network 
number wireless hops varies 

simulation results showing portion ack trace forward transfer reverse transfer started 
acc conjunction acks scheduling 
idle time ms bursts acks kb data packets belonging reverse transfer 
time seconds sequence number kb start discussing optimization underlying link layer protocol 
piggybacking link layer acks data scheme motivated observation radios turnaround data frames link layer acks 
presence traffic directions caused tcp acknowledgments causes happen 
link layer acks piggybacked data frames avoiding extra radio 
basic reliable link layer protocols systems piggyback acks data 
releases radio software ricochet network attempt possible 
simulations multi hop wireless network assume radio units piggyback link layer acks data 
despite optimization fundamental problem additional traffic underlying protocols affecting round trip time estimates causing variabilities performance persists 
connections traversing multiple hops wireless network vulnerable effect radio units may engaged conversation peers 
single way transfers vary number wireless hops simulated network measure performance bulk tcp transfers 
workload consists second tcp transfer competing traffic maximum receiver window size kbytes 
congestion losses occur result buffer overflow lead sender timeouts multiple packets lost transmission window 
protocols investigated include unmodified tcp reno reno acc sa reno af sa 
shows results experiments function number wireless hops 
performance af acc sa better reno af sa better acc sa 
performance improvement af sa reno shown table degree improvement throughput varies hop hops 
main reasons improvement reduced number packets reduced round trip variability enhanced protocols compared reno 
shows round trip times simulations tcp reno connection tcp connection af wireless hops chain topology sender receiver 
reno mean round trip time seconds standard deviation second 
af reduces mean round trip time seconds corresponding standard deviation seconds 
number packets traversing node drops reducing amount contention 
factors result improvement toend throughput kbps reno kbps wireless hops 
similar improvement performance seen connections traversing wireless hops throughput improves average kbps reno kbps af improvement 
exact values round trip time deviation strong function window size amount competing traffic trends improvement observed configurations 
note af outperforms acc completely eliminates redundant acks reduces amount interfering traffic caused tcp acknowledgments greater extent 
hops reno kbps reno acc sa kbps age reno af sa kbps age table 
performance reno acc sa af sa function number wireless hops simulated multihop wireless network 
throughputs kbps numbers parentheses percentage improvements compared reno configuration 
number wireless hops throughput kbps 
tcp throughputs simulations reno acc af function number wireless hops 
acc af acc acc af af reno af ack filtering acc ack cong ctrl 
round trip times obtained simulations tcp reno tcp af sa connection wireless hops 
round trip times reno connection variable mean secs standard deviation sec af reduces mean secs standard deviation secs 
round trip time time reno reno af sa multiple simultaneous transfers experiment multiple simultaneous transfers multihop wireless network order understand performance function number connections traversing network 
concurrent connections compete resources network 
simplicity focus results connections wireless hop section best performing protocol reno af sa compare reno 
important metrics consider studying impact increasing number connections network utilization fairness 
network utilization defined ratio aggregate throughput connections maximum achievable throughput network 
fairness quantified fairness index defined section 
interested obtained large values network utilization fairness index configuration 
table shows simulated aggregate throughput achieved connections network function number competing connections reno af sa 
table shows standard deviation resulting performance shows degree variation throughputs seen different concurrent connections 
aggregate performance varies kbps tcp reno kbps af sa number connections varies implying little change utilization function number connections 
standard deviation performance calculated concurrent connections higher reno reno af sa 
suggests distribution throughputs spread equal set connections especially number increases 
quantify effect fairness index throughput plotted function number simultaneous connections 
tcp reno grossly unfair distribution throughput reaching value low exceeding 
contrast af sa substantially improves fairness index throughput distribution improving utilization network 
reasons improvements fairness reduced number interfering competing packets network 
see enhancements tcp router algorithms help improve utilization fairness number connections increases 
section revisit investigate scaling issues simulating web workload network high bandwidth forward channel packet radio return channel 
combining wireless technologies wireless cable packet radio section investigate effects combining different types asymmetry tcp performance 
focus network topology high bandwidth forward path modeled hybrid wireless cable channel low bandwidth packet radio reverse path modeled ricochet network 
composite network topologies relevant application scenarios 
example disaster relief vehicle ambulance unidirectional high bandwidth link wide area wireless network reverse channel 
shows measured performance mb tcp transfers function receiver socket buffer size hybrid networks wireless cable forward path hop wireless ricochet return path 
error bars show standard deviation simultaneous connections reno throughput kbps std dev reno af sa kbps std dev table 
throughputs tcp reno reno af sa function number connections wireless hop 
numbers brackets standard deviations throughputs calculated simultaneous connections 
number connections fairness index tcp reno tcp af sa 
simulation results fairness index tcp reno tcp af function number connections traversing hop packet radio network 

measured performance mbyte tcp transfer hybrid wireless cable downlink ricochet return channel 
large error bars consequence inherent variability ricochet return channel 
socket buffer size kbytes throughput kbps slip compression enabled measured performance runs 
controlled measurements performed absence cross traffic inherent variability return path manifests significant error bars graph 
focus web benchmark simulations study performance network number hosts connections increases 
investigate various modifications transport router protocols help reduce average completion time web request networks 
model web micro benchmark byte web request followed set concurrent tcp transfers kb client 
intended accurate model reality understand effects small concurrent connections competing interacting users performance 
latency critical factor impacts performance packet radio network implicitly assume web requests pipelining byte request results downloads 
vary number hosts simulations 
hosts requests independent time uniformly distributed seconds 
measure mean standard deviation completion time entire web transaction connections 
shows mean completion time transaction number hosts varies tcp reno reno acc section reno af section 
curves shown af case sender adaptation enabled round trip time congestion window section 
results indicate af beneficial reducing response time improving throughput network system scales 
reason acc beneficial cases investigated section shorter transfer lengths benchmark 
connection exceeds packets sender window large limits extent acc performed 
reason larger number acks traversing network acc compared af 
critical factor network latency variability associated packet wireless network 
af results significant gains redundant acks queue independent state congestion reducing number packets wireless cloud 
note lack sender adaptation significantly hurt performance connection small 
maximum possible burst network automatically limited short length slow start process starting segment 

implementation having analyzed various solution techniques simulation step implementation evaluation promising techniques network testbed 
pentium pc platform running bsd os operating system host router implementations 
algorithms implemented ack congestion control acc ack filtering af sender adaptation sa acks scheduling 
practical problem encountered experimenting modem reverse channel packets getting queued board memory modem operating system interface queue 
poses problem ack filtering requires access queue 
ideally af algorithm implemented modem firmware access queue 
difficult 
evaluate ack filtering chose emulate modem link software queuing occurs software 
describing link emulation module 
link emulation link emulation module emulates link certain bandwidth delay software 
code part device independent driver ethernet class devices wide variety physical channels including base base ethernet wavelan 

persistent connection recommended connections tend longer 
help acc 
number hosts mean transaction completion time seconds 
simulated scaling behavior tcp reno af acc function number connections web micro benchmark packet radio return path 
graph shows average completion time vs number hosts concurrent connections host 
ack filtering protocol performs best increases 
tcp reno ack congestion control ack filtering ack filtering sender adaptation 
structure link emulation module 
note delay emulation queue organized callout queue enable emulation overlapping propagation delays 
ip device independent driver device specific driver bandwidth emulation queue delay emulation queue interface queue introduce non overlapping delay packet size bandwidth introduce overlapping delay equal link propagation delay packet link emulation code structured shown 
operates stages bandwidth emulation delay emulation 
reason separation transmission individual packets happens succession packets overlap propagation happen concurrently 
emulate bandwidth transmission time packet head input queue computed 
timer set expire time transmission packet supposed 
packets arriving mean time queued bandwidth emulation queue algorithms ack filtering red packet marking operate 
timer expires designated packet moved delay emulation queue 
second queue callout queue data structure operates strictly fifo order 
purpose queue insert delay corresponding propagation delay emulated link outgoing data path 
done setting timers corresponding propagation delay 
time timer expires packet head queue dequeued handed device dependent driver actual transmission 
callout queue packets fresh timer set corresponding remaining propagation delay new packet head queue 
issues need considered context link emulation algorithm 
transmission propagation due underlying physical channel considered 
believe simplification appropriate emulating slow link fast physical channel modem link base ethernet precisely goal 
second granularity software clock operating system ms limits accuracy schedule packets 
fortunately slow links relatively large transmission propagation delays ms scheduling granularity significant 
furthermore packets tend get queued input queue emulated link increased possibility scheduling inaccuracies cancel successive packets packet may bit may overshoot bit 
ack congestion control basic objective acc receiver decrease frequency acks order alleviate congestion reverse channel 
general modes receiver operate 

decrease frequency acks minimum possible preset limits information sender explained 
response explicit congestion notifications reverse channel router 
addition changing tcp algorithm receiving sending sides supporting modes operation require changes wire protocol ecn bit tcp ipv headers designated field explicit congestion notification routers hosts 
unused bits tcp header ecn bit 
note bit needed receiver operates second mode mentioned 
sender window option acc algorithm requires tcp receiver knowledge sender window size sure receiver decrease frequency acks extent sender stalls 
convey information sender receiver added tcp option 
sender computes byte quantity minimum congestion window size amount data socket buffer multiple maximum segment size mss inserts option 
bytes overhead total length option bytes 
option added packets traversing high bandwidth forward path believe byte overhead significant 
implementation receiver operates mode mentioned ecn bit required 
tcp receiver maintains additional variables protocol control block acc delayed ack factor 
receiver sends back ack segments received 
max upper bound 
set user level configuration program 
size peer window expressed multiple mss 
updated time segment option enabled received sender 
sender fills option computing minimum congestion window size amount data socket buffer min acks win minimum number acks send window data sender 
clearly set 
may set somewhat larger value alleviate ill effects sender stalls due delays losses acks experience travel receiver sender 
implementation tcp receiver sends ack time receiving application reads data clearing space receive socket buffer segments worth additional flow control window advertised sender 
acc receiver checks segments space segments 
receiver dynamically computes shown 
computes sender effective window size minimum receive socket buffer size expressed multiple mss 
receiver send min acks win acks window set divided sender algorithm data send socket buffer byte quantity send tcp option receiver receiver algorithm update variable tcp option received receiver socket buffer size window data send ack segments segments done standard tcp delayed acks 
sender receiver algorithms dynamically computing ack congestion control min acks win 
receiver sure exceed preset limit max 
standard delayed ack timer just 
receiver forces ack timer expires 
happens infrequently forced acks significant addition reverse direction traffic 
summarize implementation ack congestion control operates purely mode special role played routers 
simplifies implementation requires user system administrator configure min acks win parameters hosts expect see asymmetric connectivity 
sender adaptation goal sender adaptation enable tcp sender operate successfully frequency acks decreased result ack congestion control ack filtering 
aspects sender adaptation 
tying congestion window growth amount data acknowledged number ack packets received 

avoiding large bursts data ack acknowledge new data segments 
sender adaptation algorithm shown 
order satisfy requirement mentioned sender computes acked number bytes newly acknowledged ack 
quantity acked scaled mss determine number window increase operations performed slow start phase linear increase phase 
reason scaling mss equivalent tcp reno standard delayed acks involves window increase operation data segments acked 
avoid large bursts data sender limits maximum number segment sent back back maxburst 
segments remain sent software timer scheduled time 
wait time timer computed dividing maxburst ratio congestion window size cwnd round trip time cwnd rtt equals rate connection underlying principle scheduling bursts size maxburst match rate connection 
expiry timer burst data transmitted 
order compute rate need measure round trip time far accurately done timestamp option standard tcp ms granularity 
solve problem having sender insert current time microsecond granularity timestamp option echoed receiver 
bytes represent time value don run wrap problems long rtt seconds certainly true practice 
quantity exact srtt computed rate calculation mentioned 
translated ms granularity quantity srtt compute retransmission timeout value standard tcp 
ack filtering goal ack filtering remove redundant acks queue reverse router newer cumulative ack arrives 
describe experiences implementing scheme experiments mention practical problems especially context packet radio network working overcome 
reverse connection bandwidth asymmetry case network connectivity latency asymmetry case hayes compatible modems running ppp implemented scheme ppp layer bsd os kernel 
basic idea quite straightforward new ack arrives go queue packets remove redundant acks connection care remove acks data associated 
connection uniquely identified tuple port 
practice packets ppp queue header compressed algorithm described hard offset header obtain necessary fields 
alternative approaches solving problem 
decompress compressed packets queue time new ack arrives compare fields 
requires maintaining extensive decompression state compressor ack filter expensive hard implement 

maintain queues explicitly ppp layer header compressed packets tcp ip headers 
enqueue dequeue packet queue corresponding header enqueued dequeued header queue 
chose adopt method packets done variety underlying disciplines importantly need maintain consistency queue data structures 

modify ppp queue data structure maintain just pointers kernel mbufs corresponding packets pointer structure containing relevant fields packet header kernel mbuf 
simplest alternative isn inefficient implemented 
acks purged sequence numbers smaller newly arrived ack new ack advertises different window enqueued window updates subsume earlier ones 
currently filter duplicate acks trigger fast retransmission 
sender adaptation algorithm tying window growth amount data acknowledged acked unacknowledged byte incr count slow start phase cwnd incr count mss cong 
avoidance phase cwnd incr count mss cwnd scheduling data bursts burst timer pending return send maxburst timeout maxburst cwnd srtt exact schedule burst send maxburst transmit send segments sender 
adding tcp option specified number purged duplicate acks propagating sender router modifying sender recognize react option 
implemented mechanism deployed queueing packets occurs inside modem kernel ppp queue ricochet standard telephone modems 
experiments bandwidth asymmetry af emulated modem link software 
case packets compressed offset tcp ip headers purge redundant acks 
experiments latency asymmetry currently working metricom obtain research modems ability control queues modem cause queueing happen kernel ppp queue 
able measure benefits proposed enhancements happens 

implementation results section experimental results implementation described section 
results bandwidth asymmetry experiments 
currently process evaluating improvements latency asymmetry experimental ricochet network 
expect performance results network weeks 
bandwidth asymmetry experiments time conducted experiments hybrid wireless cable modem network section unfortunately unavailable 
ethernet characteristics network mbps raw bandwidth ms latency negligible error rate decided substitute ethernet segment forward channel 
kbps dialup reverse channel experiments involving ack filtering 
reasons mentioned section emulated dialup link kbps bandwidth ms way latency software ack filtering experiments 
size reverse channel buffer set packets default ppp dialup interface 
standard header compression enabled dialup reverse channel 
tracing code discovered compression code invoked stands deal tcp headers include options timestamp option change value segment 
possible principle change compression algorithm accommodate tcp options 
feasible situation control terminal server dialing 
observe situation feasible deploy link local scheme af ar possible deploy new header compression algorithm 
experiment described involves tcp data transfer forward direction reverse direction 
length forward transfer mb sender receiver socket buffer sizes set kb 
length reverse transfer kb sender receiver socket buffer sizes set kb 
tcp maximum segment size mss set bytes transfers directions 
sender adaptation effect maxburst parameter maxburst determines size largest burst sequence back back packets sender transmit 
parameter significance sender receives acks infrequently case ack congestion control ack filtering 
run experiment involved mb data transfer forward direction 
runs value maxburst ranging 
conducted set runs maxburst set infinity corresponds limit burst size 
plots throughput forward direction data transfer versus maxburst acc af 
throughput increases steadily levels drops 
initial increase corresponds situation throughput limited ms granularity software timer schedule bursts 
example maxburst set maximum possible throughput obtained sending segments ms byte segments works throughput mbps 
explains maxburst increased average throughput increases linearly 
drop average throughput significant increase variability evidenced longer vertical bars happen maxburst gets large large bursts result buffer overflow ethernet network interface card time 
poor throughput runs involve packet loss pulls average increases variability 
data best set maxburst 
standard tcp delayed acks send bursts size slow start 
setting maxburst conservative result bursts larger happen internet today 

throughput mb forward transfer versus maxburst 
acc min acks win max 
maxburst inf infinity means limit burst size 
data points show average runs vertical bars correspond standard deviation 
maxburst segments throughput mbps inf acc af reno acc effect max acc parameter max determines minimum frequency acks receiver 
max upper bound receiver send ack max segments data receives 
conducted set mb data transfers similar ones discussed varied max different sets runs 
throughput obtained plotted max 
max increased throughput increases initially 
reason decreasing frequency acks alleviates congestion acks reverse channel 
max equal little increase throughput presumably congestion reverse channel eliminated 
effect way traffic experiment consider situation simultaneous transfers forward reverse directions 
observed simulation experiments section situations data transfer direction shuts opposite direction 
run experiment initiated mb data transfer forward direction seconds initiated kb reverse transfer 
forward direction connection maxburst set 
acc max set 
report throughputs forward reverse transfers computed time transfers active 
trends observe conformance simulation results reported section 
standard fifo scheduling reverse channel large data packets reverse transfer tend starve acks forward transfer resulting poor forward throughput mbps reno mbps acc mbps af 
decreased frequency acks acc af increases chances sender forward transfer stalls waiting acks arrive explains worse forward throughput cases compared reno 
reason reverse throughputs show opposite trend throughput kbps link speed cases acc af 
acks scheduling reverse channel helps improve forward throughput substantially 
acks standard tcp reno hurts reverse throughput significantly bringing kbps 
acks conjunction forward transfer ack filtering reverse transfer completely shut achieving zero throughput forward transfer achieves high throughput nearly mbps equivalent way transfer case 
reason poor performance reverse transfer cases acks forward transfer queued reverse channel buffer time 
acks data packets reverse transfer served acks higher priority 
ack filtering allows ack reside reverse buffer help long new ack arrives current completed transmission data packets reverse transfer get served 
acks acc forward reverse transfers achieve relatively throughput nearly mbps kbps respectively 
repeat calculation done section best possible forward throughput reverse throughput close reverse link speed kbps 
kb socket buffers byte segments works mbps 
throughput achieved mbps half 
suspect shortfall due combination factors including time takes forward connection congestion window grow large value non negligible transmission time acks 
investigating matter determine reason sure 

investigated effects network asymmetry tcp performance context wide area wireless networks 
studied impact reverse path primarily acknowledgments data requests performance forward direction 
distinguished bandwidth asymmetry latency media access asymmetry loss asymmetry focused types 

throughput mb forward transfer versus max 
parameter min acks win maxburst 
data points show average runs vertical bars correspond standard deviation 
max segments maxburst maxburst reno 
throughput mb forward transfer kb reverse 
reverse transfer initiated seconds forward transfer 
time transfers active considered computing throughput 
note reverse throughput af case 
throughput mbps reno acc reno acc af af forward reverse methodology involved major steps 
measured various asymmetric networks including hybrid wireless cable network ricochet packet radio network identify performance bottlenecks 
modeled networks ns simulator experimented techniques improve performance 
implemented promising techniques experimental testbed confirmed performance trends observed simulations 
main results slip header compression alleviates problems due bandwidth asymmetry completely eliminate problems especially arise presence bidirectional traffic 
connections traversing packet radio networks suffer large variations round trip times caused half duplex nature radios asymmetries media access protocol lead variable latencies 
adversely affects tcp loss recovery mechanism results degraded performance 
various router techniques propose help improve performance significantly asymmetric situations 
verified simulations experiments real testbed 
include decreasing frequency acks constrained reverse channel ack congestion control ack filtering reducing source burstiness acks infrequent tcp sender adaptation ack reconstruction scheduling data acks intelligently reverse bottleneck router acks scheduling addition improving throughput individual connections proposed modifications help improve fairness scaling properties connections contend scarce resources network 
demonstrated simulations bulk web transfers 
note asymmetric networks increasingly important mass market internet access home cable modems specialized situations battlefield communications mobile ad hoc networks 
believe findings reported relevant wide context 

areas plan investigate 
asymmetry loss error rates especially context wireless return channels poses new challenges 
current packet radio networks link layer protocols local error recovery results increased latency variability latency 
plan extend explicit loss notification eln schemes proposed context single hop cellular networks multi hop wireless networks goal reducing variability sacrificing local error recovery 
cellular digital packet data cdpd networks exhibit asymmetry 
communication base station stations stations contend channel access reverse direction 
informative useful study impact asymmetry reliable transport performance 

acknowledgments grateful people help setting debugging various networks experimental testbed mike ritter mike cunningham bob david metricom ed moura hybrid networks andrew nestor ken lutz steve fred archibald uc berkeley 
appreciate time assistance 
mary baker sally floyd tom henderson mike ritter srinivasan seshan andrew swan anonymous mobicom reviewers comments suggestions helped improve quality 
special nguyen contributions ns greatly facilitated 
supported darpa contract cd state california micro program hughes aircraft metricom fuji xerox daimler benz hybrid networks ibm 
hari partially supported research foundation 

badrinath 
handoff system support indirect tcp ip 
proc 
second usenix symp 
mobile location independent computing april 
balakrishnan 
challenges reliable data transport heterogeneous wireless networks 
phd thesis university california berkeley august 
available technical report ucb csd 
balakrishnan padmanabhan seshan katz 
comparing performance transport protocols wireless networks 
proc 
acm sigcomm august 
balakrishnan seshan katz 
improving reliable transport handoff performance cellular wireless networks 
acm wireless networks december 
berkeley software design www com 
caceres iftode 
improving performance reliable transport protocols mobile computing environments 
ieee journal selected areas communications june 
cheshire baker 
wireless network 
ieee micro feb 

chiu jain 
analysis increase decrease algorithms congestion avoidance computer networks 
computer networks isdn systems 
miller travis 
tcp extensions space communications 
proc 
acm mobicom conference november 
fielding gettys mogul frystyk berners lee 
hypertext transfer protocol 
rfc jan 
rfc 
floyd jacobson :10.1.1.128.5092
random early detection gateways congestion avoidance 
ieee acm transactions networking august 
jacobson 
congestion avoidance control 
proc 
acm sigcomm august 
jacobson 
compressing tcp ip headers serial links february 
rfc 
jain 
art computer systems performance analysis 
john wiley sons 
varma ramakrishnan 
performance way tcp traffic asymmetric access links 
proc 
interop engineers conference may 
karn 
maca new channel access method packet radio 
proc 
th arrl computer networking conference 
karn 
dropping tcp acks 
mail mailing list february 
lakshman madhow 
error recovery flow control slow channel study tcp ip performance 
proc 
infocom april 
mckusick bostic karels quarterman 
design implementation bsd operating system 
addison wesley reading ma 
ucb lbnl vint network simulator ns version 
www mash cs berkeley edu ns 
padmanabhan 
addressing challenges web data transport 
phd thesis university california berkeley september 
available technical report ucb csd 
padmanabhan balakrishnan amir katz 
networking direct broadcast satellite 
proc 
workshop information systems november 
padmanabhan mogul 
improving latency 
proc 
second international world wide web conference october 
zhang shenker clark 
observations dynamics congestion control algorithm effects way traffic 
proc 
acm sigcomm pages 
author biographies hari balakrishnan assistant professor eecs member laboratory computer science massachusetts institute technology 
received ph degrees computer science university california berkeley respectively tech 
computer science engineering indian institute technology madras 
hari research interests areas computer networks protocol architectures wireless networks mobile systems adaptive network applications large scale communication systems 
received awards papers acm ieee mobicom conference usenix technical conference 
recipient ramamoorthy award distinguished graduate research berkeley winner research foundation 
member acm ieee 
email address hari lcs mit edu www url www sds lcs mit edu hari venkata padmanabhan acm ieee researcher systems networking group microsoft research 
received tech 
degree computer science engineering indian institute technology delhi ph degrees computer science university california berkeley respectively 
venkat research interests areas computer networks mobile computing operating systems 
focus ph dissertation developing network protocols efficient web access effective data transport asymmetric networks 
persistent connection adopted standard 
awards received national talent scholarship india charles fish fellowship berkeley best student award usenix conference 
venkat may reached mail microsoft com web www research microsoft com 
randy katz acm ieee professor computer science university california berkeley principal investigator bay area research wireless access network project 
taught berkeley exception program manager deputy director computing systems technology office defense department advanced research projects agency 
written technical publications cad database management multiprocessor architectures high performance storage systems video server architectures computer networks 
dr katz received degree cornell university ph university california berkeley computer science 
mail address randy cs berkeley edu www home page www cs berkeley edu randy 
