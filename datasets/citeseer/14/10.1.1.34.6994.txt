describes reasoning system temporal logic solve planning problems lines traditional planning systems 
cast inference general representation ranges problems described considerably greater traditional planning systems 
addition modes plan reasoning plan recognition plan monitoring formalized framework 
strong interest currently designing planning systems reason realistic worlds 
moving toy world domains characterized early researchers looking wide range issues including reasoning uncertain worlds interacting processes events agent direct control controlling mechanisms real time robotics 
problems faced extending existing frameworks weak expressiveness representation actions events external world 
describes reasoning system temporal logic solve planning problems lines traditional planning systems 
cast inference general representation ranges problems described considerably greater traditional planning systems 
key observations motivating development actions take time actions instantaneous action may occur time complex plans activity may involve complex ordering constraints actions may interact external events agent direct control 
problems central dealing simultaneous action 
simultaneous action range problems reprinted proc 
second international conference principles knowledge representation reasoning cambridge ma april planning temporal reasoning james allen department computer science university rochester rochester ny addressed limited mainly restricted specialized situations computer programming game playing 
little sense study planning dynamic changing world planner act natural event occurring 
problems arise action external event occur simultaneously exactly parallel problems simultaneous action 
understand problem difficult important look assumptions underlying world representation current planning systems 
examined detail section 
background actions state change predominant approach modeling action artificial intelligence computer science view action state change 
view underlies state planning systems strips successors formal models planning situation calculus mccarthy hayes dynamic logic semantics programs harel rosenschein 
view world modelled succession states state representing instantaneous snapshot world 
actions defined functions state 
propositions models relative states 
notion proposition independent state modelled function states truth values 
situation calculus mccarthy hayes functions called fluents 
example fluent applied state proposition true state state change models strips actions instantaneous provision asserting true action execution 
state descriptions include information action occurrences systems represent situation action occurs event action occurring 
reasoning models searching different possible action sequences 
non linear planners suffer deficiencies tate vere wilkins allow simultaneous actions actions independent 
cases effect acts performed simple union individual effects acts done isolation 
problem solution excludes common situations interest realistic domains 
particular interesting cases interaction occur effect actions done different sum individual effects 
particular actions may additional effects performed may partially interfere effects 
example concerning door computer science building rochester 
door designed requires hands open annoying put carrying 
spring lock held open hand door pulled open hand 
try formalize strips system find way assert lock held open snap shut 
approach problem systems vere 
interaction actions encoded special state 
ll call technique state encoding 
particular example introduce fluent true agent holding lock open 
action holding lock transformed actions start holding lock release 
pulling door simply precondition agent holding lock open 
fluent holding lock open asserted turn lock action remains true release lock action deletes 
solve particular problem potential disadvantages approach 
objection ad hoc 
may case invent predicates cover specific example proposes done fact individual case case basis 
clear technique generalized additional complexities involving simultaneous actions 
importantly holding lock open intuitively action may take effort part agent maintain explicitly part plan 
reflected representation holding lock open simply fluent remain true agent 
certain applications detailed causal theory known state encoding approaches powerful 
specify complete causal theory simply don know situation able causal theory reasoning techniques explored 
claim problems arise everyday planning situations detailed causal theory world second know values parameters theory theory known 
times events actions space extensive discussion time 
interval temporal logic developed allen allen hayes 
logic time constructed primitive object time period primitive relation called meets 
periods meets precedes time 
meets primitive different temporal relations defined 
uses period contained period disjoint overlap way starts period initial subsegment finishes final subsegment periods time 
overlaps starts overlaps time periods divided non decomposable periods called moments decomposable periods called intervals 
attach times predicates adding extra argument predicate bacchus tenenberg 
example proposition green frog true object named frog green time named 
allowing time intervals arguments open possibility proposition involving predicate true false interval particular consider predicate true subinterval false subinterval case ways interpret proposition 
weak interpretation true iff case true interval true changes truth values strong interpretation negation true iff true true situation 
logic strong negation truth gaps 
weak interpretation negation shoham bacchus tenenberg preserve simple valued logic 
course assertions equivalent strong negation 
fact false expressed follows true temporal argument contained second 
logic insufficient conveniently capture situations need reason 
particular need introduce events objects logic 
davidson argued potentially unbounded qualifications included event description 
example event jack lifting particular ball asserted occur time predicate lift follows lift jack ball 
problem arises representing event jack lifted ball table 
need add argument lift predicate need introduce new predicate represents variant lifting includes extra argument 
unsatisfactory 
davidson suggested solution reifying events additional modifiers simply additional predications event 
event jack lifting ball table represented lift jack ball dest table instrument 
represent knowledge action ways 
defining necessary conditions event consisting action occurring allen example consider action stack involves stacking block block action define predication stack true event consisting stack occurring time period event variable plays central role parameters defined terms event variable 
example instance stacking event uniquely defines blocks involves times relevant properties define 
convention denote times properties corresponding preconditions functions pre pre corresponding effects eff eff corresponding conditions hold event occurring con con 
stacking action typical strips style system defined preconditions blocks clear transition function delete formula clear add formula 
strips definition motivate conditions world necessarily true stacking event occurs 
particular event type defines set temporal functions define structure temporal intervals involved event 
example class stacking events uses functions produce times corresponding properties involved action preconditions effects 
define structure stacking event follows see stacking axiom temporal structure stack overlaps pre finishes con meets pre con meets eff pre meets eff 
temporal structure defined stacking event axiom defining necessary conditions event occurrence expressed stacking axiom necessary conditions stack clear pre holding con clear eff clear pre eff 
axiom asserts true stacking event occurs independent situation 
knowledge action relevant certain situations 
instance block moved stacking action initially block block clear momentarily 
easily expressed logic axiom states block initially block clear moved stacking axiom conditional effects stack overlaps clear eff meets eff meets con 
axiom applies situation blocks say originally block conditions action stack shown graphically 
note definition assert block clear stacking event 
particular stacking events overlap time say stack stack may case may placed placed subtleties represented easily representation 
development far captured sense causality 
particular axioms state properties caused stacking action properties simply true action succeeds 
distinction strips preconditions effects 
intuitively clear stacking action causes block block situations blocks clear start action 
furthermore stacking action causes block clear doesn affect condition block clear 
clear pre encode knowledge need able reason action attempts cf 
mcdermott 
logic developed far express fact certain event occurred agent attempted action 
predicate try defined try true action attempted agent time order event occurs 
course conditions right action succeed event occur 
example try stack necessarily imply stack 
relationship defined axioms corresponding precondition assertions particular assert agent tries stack starting initial situation clear stacking event occurs stacking axiom prerequisites try stack clear overlaps clear stack pre pre planning formalism planning system specified temporal logic developed 
system reason certain classes interacting simultaneous events limited capability reasoning 
particular plan change external events predicted occur construct plans take events account reason interactions events 
allen extended logic represent possibilities 
order construct plans agent needs predict states world 
strips problem solvers stack clear pre eff holding con clear eff clear eff necessary conditions stack situation originally stacking axioms add delete lists transform current state state 
representation explicit temporal logic complicated 
particular proposition asserted hold time action occurs false true held time 
representation world contain assertion 
changed new action introduced prediction holds 
example known agent predicted holds 
action expected prediction change 
predictions expectations change agent plans 
agent may change mind actions 
suggests form nonmonotonic reasoning necessary order maintain world model models atms useful 
simpler route model outlined views predictions conditional statements agent assumes including actions 
initial world description goal statement plan set assumptions 
course ai inconsistent statement vacuously true add condition consistent 
want avoid assuming problem away 
instance simply equivalent goal statement conditions true say solved problem 
handled restricting form assumptions planner described 
analysis view planning problem consisting types reasoning prediction world set assumptions planning assumptions agent behavior world 
types reasoning explored detail remainder section 
predicting agent full knowledge world predicting relatively defined task 
agent simply simulate course events starting state 
practice agent detailed knowledge world agent knowledge state partial world understood precise predictions 
qualitative models discussed bobrow assume level knowledge state world processes change realizable situations 
develop conservative model prediction maintaining limited consistency agent beliefs world 
essentially set beliefs predictions simply inferable beliefs agent knowledge structure world definitions actions 
particular system specify uses forward chaining strategy horn clauses coupled constraint propagation techniques time allen predictions 
drive predictor need knowledge actions defined section general knowledge domain 
instance reason door latch problem start know door open shut time 
motivates forward chaining rule guarantees occur domain constraint dooropen disjoint 
similarly latch open shut domain constraint disjoint 
allen show prediction algorithm action definitions domain constraints similar capture important aspects non linear planning systems 
making assumptions main classes assumptions planner 
decide actions attempt perform assumptions external world behave 
planner may assume attempt action time action succeed appropriate conditions hold 
ll see implemented allowing planner add assertion form try proof 
assumptions external world limited persistence assumptions dean mcdermott property established tends remain true explicitly changed 
precisely literal proven persistence literal database form possible 
definition allows persistence allows persistence past 
examined basic planning algorithm 
note constant time method heuristically checking possible network representation temporal information system simply checks disjuncts arc connecting node node see allen 
planning system approximation planning algorithm simply backwards chaining proof strategy driven goal statement assumptions action attempts persistence proof 
simple planner similar power regression planners waldinger 
distinguish logic developed far system involves heuristic reasoning restricted formalism different notation 
literal consists predicate name list arguments enclosed square brackets 
literal corresponding formula 
knowledge actions captured set planning rules modified notation horn clauses prefix indicate variables 
general planning rule form 
dn ak interpreted formally horn clause consequent literal true provable antecedent literals dn true constraints ak true 
system treat antecedents constraints differently produce efficient inference strategy 
planning rules action pulling door open follows pulling door latch open results door open dooropen eq eff 
second may open door time try closed latch unlocked pre pre try pull temporal structure action defined system 
details summarize information axiom original logic defines precondition intervals latch open door shut effect interval door open axiom temporal structure pre meets pre starts eff planning rules system forwards antecedent consequent backwards consequent antecedent chaining manner 
apply rule backwards chaining manner rule consequent unified goal 
constraints added database antecedent literals dn introduced subgoals 
apply rule forward manner literal added database unifies antecedent literal di dj constraints database assert consequent instance rule suggest goal dooropen accomplished event prove constraint eff 
rule predict consequence event occurring time added add dooropen eff 
simple example illustrates basic technique generating plans planning rules backward chain suggested actions forward manner compute consequences actions 
addition domain prediction rules forward chaining manner compute additional consequences action 
example domain constraint asserted forward chaining rule disjoint forward dooropen 
domain constraints expressed similarly 
additional issues consider final algorithm specified 
planner able create event structures needed appropriate events generally known occur advance planning 
accomplished backwards chaining phase literal containing unbound event variable introduced goal new event constant generated temporal structure associated event added database constraints specified planning rule 
example goal dooropen rule suggests subgoal proving 
considered new event say new time say created constraints added database definition temporal structure stack events pre meets pre start eff 
done create temporal structure event accomplish goal clause 
asserted event occurs 
require chaining prove 
process creating event temporal constants replace unbound variables called instantiating planning rule 
algorithm algorithm defines planner commit persistence assumptions entire plan complete 
uses simple backwards chaining technique goals described informally forward chaining compute consequences assumptions persistence action attempts 
temporal aspects plan independent planning algorithm simple back chaining strategy restrict plans produced 
consists main parts plan generator creates particular plan assumption verifier takes suggested plan evaluates persistence assumptions support appear consistent 
gs goal stack initialized initial set goals algorithm invoked 
output algorithm set actions attempted agent action list set assumptions world assumption list world state generated prediction reasoner 
persistence assumption consists literal true time period equality relation involving captures persistence assumption 
plan generation non deterministic version planning algorithm 
prolog style search strategy iterate possible proof paths added obvious way 
gs empty go verification stage remove top element gs call choose formula unifying database bind variables necessary proven persistence assumption pass prediction reasoner add equality assertion justifies assumption assumption list form try action add action list pass prediction reasoner find planning rule consequent unifies instantiate rule defined binding event temporal variables adding constraints push antecedents gs 
verifying assumptions algorithm uses temporal reasoner check persistence assumptions appear globally consistent 
re checking temporal constraints assumption individually see possible 
adds assumptions see appear globally consistent temporal reasoning algorithm 
assumptions longer consistent planning stage re activated 
check persistence assumption individually see possible current temporal network generated prediction reasoner 
add literal associated assumption impossible gs restart step 
step succeeded add persistence assumptions prediction reasoner 
prediction reasoner returns inconsistency done 
inconsistency select assumption retract 
designing strategy left 
simply select assumption random 
remember assumptions consist literal equality assertion 
selected assumption add prediction reasoner add gs restart step 
door latch problem major goals allowing plans necessarily required simultaneous actions 
door latch problem posed simplest example type situation 
section show domain formalized plan constructed principles open door 
planning axioms define actions give overview solution 
remember complication example agent realize continue hold latch open pulling door 
actions needed turning latch holding latch open pulling door 
latch held open snaps shut 
planner uses persistence assumptions world technique introduced prevent planner technique infer latch stays open 
best handled adding causal reasoning predictor simpler technique class situations 
define turn latch action effect holds exactly moment non decomposable period 
action requires latch open extended period time accomplish persistence moment equal interval definition 
action defined requires latch open time action starts may moment effect latch stays open duration action 
specifically planning rules predictor maintain world representation 
temporal structures event axiomatized shown graphically 
action defined earlier 
events precondition interval latch closed effect moment latch open axiom temporal structure finishes pre moment eff meets eff 
events define single precondition period latch open effect interval simultaneous event interval pre axiom temporal structure meets pre eq eff planning rules actions follows turning latch effect latch momentarily open moment eq eff 
turning latch accomplished trying latch shut pre try 
latch remains open held open 
particular note effect action rule simultaneous interval pre dc ls eff pre pre dooropen eff temporal structure events door problem eq eff 
holding latch open succeeds latch open start holding act pre try assuming situation agent near door initial world description follows current time time goal hold ls ls dc dc 
goal simply door open time dooropen 
initial planning situation shown 
brief sketch planner operation 
goal dooropen rule applies introduces subgoals instantiation door latch problem gs eff eq eff temporal dooropen dc ls constraints new event pre meets pre starts eff added database subgoal proven rule producing new set subgoals gs pre pre try pull 
subgoal proven persistence initial state assumption pre dc 
second subgoal pre requires planning 
rule apply requires interval pre moment 
rule apply introduces subgoal pre note planning rule pre eff turn equals time event definition 
rule applies subgoal introduces subgoals instantiation gs pre try pre try pull 
time rule apply pre moment action introduced 
rule reduce goal subgoals remain gs pre try try pre try pull 
subgoals proven persistence possible pre ls remaining subgoals trivially proven control planner 
assumed added database triggering forward chaining prediction rules 
result door predicted open time 
persistence assumptions verified added predictor producing final plan shown persistence assumptions pre pre pre solution door latch problem dooropen shown grey 
note pull action start time action occurs desired 
case final effect door open predicted prediction mechanism 
shown planner find correct plan accept faulty plan arise planner naive persistence mechanism 

planning external events simple example interest shows planner ordinate external events knows occur 
example consider different initial situation planner knows door unlocked automatically am pm day goal get door open am am 
situation shown times day represented moments 
initial database consists assertions ls ls meets ls lo lo meets ls am dc dc am am am am am am am moment am moment am moment am 
initial goal accomplish dooropen 
rule get subgoal eff 
rule gives preconditions action pre pre 
case proven persistence 
pre true pre dc pre true pre lo 
adding assumptions creates plan involves pulling door am latch open am satisfy dc goal conditions 
constructed plan takes advantage automatic latch known event scheduling actions take advantage latch open 
hand goal open door am constrained am plan suggested persistence assumption pre lo consistent database 
discussion extensions persistence assumptions ls am critical techniques construct plans assumptions equality times 
essence technique allows time period extend far possible constraints periods 
proposition known true interval contains time known prevent remaining true assumption may true needed plan 
similarly prevents true assumption true time capability extend forwards backwards time strange quite useful tasks require plan recognition planning worlds information acquired 
allen show technique corresponds technique dean mcdermott persistence 
differences arise cases uncertainty starting time property second property proven extending backwards 
interval persistence rule considerably liberal rule dean mcdermott 
handle cases dean introduces mechanism abduction 
different cases reflect interactions single uniform method handling preferable 
addition interval persistence rule considerably simpler describe analyze 
situations requiring general rule appear frequently everyday situations 
am am lo door problem automatic latch system example told airline tickets office tuesday suggests earlier depends unknown information delivered 
similarly suggests tickets long depends unknown information picked 
single agent domain high degree confidence tickets remain office pick agent exists pick 
note course single agent domain wouldn agent deliver tickets office place tickets need office initial situation 
single agent completely defined initial world strong bias persistence 
multi agent worlds partially defined situations extension past equally important technique 
course simple persistence technique problems 
logical consistency weak measure plausibility persistence assumptions 
better evaluate likelihood persistence causal theory probabilistic method dean kanazawa 
note assumptions explicitly part final plan techniques introduced framework produce likelihood plan succeed attempted 
hierarchical planning algorithm representation algorithm easily extended include reasoning action decomposition hierarchical planners nonlin tate sipe wilkins dean firby miller 
introducing axioms allow prove formulae form try assuming 
turns algorithm easier specify introduce new predicate decomp actions 
relation decomp try try action performing decompositions 
decomp try 
example stacking action accomplished moving arm block desired opening hand lowering hand block grasping block raising arm moving desired destination lowering arm opening hand 
shows decomposition stack action necessary persistence assumptions required decomposition effective 
particular effect picking holding eff extend satisfy precondition putdown action 
addition effect identical constraint originally defined stacking action 
capture information adding planning rule specifies way decompose action stack decomposition axiom decomp stack pickup putdown meets meets starts finishes eq eff pre eq eff con 
stack pickup putdown complication initial algorithm second stage verify persistence assumptions plan consistent 
leave second stage entire plan decomposed line traditional hierarchical planners verify assumptions decomposition level level constructed 
accomplished simply new algorithm adding dummy goal bottom goal stack invokes consistency checking algorithm 
goal rises top stack complete level decomposition completed 
constraints checked dummy goal added bottom goal stack signal level decomposition 
call dummy goal 
precise specification algorithm follows algorithm slight variation earlier algorithm 
differs action attempts treated holding eff time assumptions verified 
non deterministic version algorithm goal stack gs initialized goal statement 
gs empty remove top element gs call choose eff pre con decomposition stack action formula unifying database bind variables necessary 
proven persistence assumption pass prediction reasoner add equality assertion justifies assumption assumption list 
form try action add action list pass prediction reasoner 
axioms consequence form decomp database add decomp gs 
invoke assumption verifier 
note verifying assumptions fails achieved algorithm backtracks 
gs empty add new goal gs 
find planning rule antecedent unifies instantiates rule defined push antecedents gs 
algorithm expands plan level level decomposition hierarchy validating consistency plan level level addressed 
constraints imposed higher levels accomplishment actions lower levels considerably easier 
showed traditional planning systems recast fairly directly specialized inference process temporal logic 
doing produced framework easier understand extend 
separating temporal aspects plan procedural aspects plan construction example simplest backwards chaining planning algorithm generate non linear plans 
similarly hierarchical planner generated changing set assumptions action attempts system willing time 
provides uniform framework examining different planning frameworks developed date 
actual system described duplicated abilities traditional planning algorithms situations represented reasoned general represented state model 
particular reason plans involving complex interactions overlapping actions 
reason effects simultaneous actions effect actions individually 
representation limited representing partial interference actions 
current representation explicitly capture notion possibility branching time models simple technique generating persistence assumptions 
separating domain reasoning plan construction algorithm developed general representation reasoning action independent particular application driving 
plan recognition system action definitions representation 
plan recognition viewed just specialized inference process world representation 
details allen 
george ferguson nat martin comments draft 
supported part air force systems command radc rome laboratory air force office scientific research contract 
nsf 
allen maintaining knowledge temporal intervals cacm 
allen general theory action time artificial intelligence 
allen hayes 
common sense theory time proc 
ijcai los angeles ca 
allen planning temporal world model proc 
ijcai karlsruhe germany 
allen kautz tenenberg reasoning plans morgan kaufmann 
bacchus tenenberg temporal logic proc 
int conf 
principles knowledge representation reasoning morgan kaufmann 
davidson logical form action sentences rescher ed 
logic decision action 
pittsburgh press 
assumption tms artificial intelligence 
dean firby miller 
hierarchical planning involving deadlines travel time resources computational intelligence 
fikes nilsson 
strips new approach application theorem proving problem solving artificial intelligence 
harel dynamic logic handbook philosophical logic vol 
ii 
reidel 
localizing temporal constrain propagation proc 
int conf 
principles knowledge representation reasoning morgan kaufmann 
mccarthy hayes philosophical problems standpoint artificial intelligence machine intelligence 
edinburgh university press 
mcdermott temporal logic reasoning processes plans cognitive science 
mcdermott reasoning plans hobbs moore eds 
formal theories commonsense world ablex 
formal approach planning concurrent actions external events tr computer science dept rochester 
plan synthesis logical perspective proc 
ijcai 
vancouver british columbia 
sacerdoti structure plans behavior 
new york american elsevier 
shoham temporal logics ai semantical ontological considerations artificial intelligence 
tate generating project networks proc 
ijcai cambridge ma 
vere planning time windows durations activities goals ieee trans 
pattern analysis mach 
intell 

waldinger achieving goals simultaneously michie eds machine intelligence ellis horwood pp 
wilkins practical planning morgan kaufmann 
