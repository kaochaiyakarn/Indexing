overview mshn management system heterogeneous networks debra hensgen taylor kidd david st john matthew howard jay siegel tracy braun maheswaran ali jong kim cynthia irvine tim levin richard freund matt michael godfrey paul shirley kidd viktor prasanna bhat ammar department computer science naval postgraduate school monterey ca usa san diego ca usa management system heterogeneous networks mshn resource management system heterogeneous environments 
describes goals mshn architecture completed ongoing research experiments 
mshn main goal determine best way support execution different applications quality service qos requirements distributed heterogeneous environment 
mshn architecture consists distributed potentially replicated components communicate corba common object request broker architecture 
mshn experimental investigations include accurate transparent determination status resources identification optimization criteria non determinism granularity models affect performance various scheduling heuristics optimize criteria determination security incorporated components account security qos attribute identification problems inherent application system characterization 
research supported part darpa ito quorum program 
school electrical computer engineering purdue university west lafayette usa department computer science university manitoba canada 
electrical computer engineering university southern california los angeles ca usa monterey ca usa management system heterogeneous networks mshn project seeks determine effective design resource management system rms deliver possible required quality service qos individual processes contending set distributed heterogeneous resources 
factors influencing qos requirements include security user preferences different versions application deadlines 
set qos requirements considered resource availability determine processes requirements met 
rms called meta computing system similar distributed operating system views set machines manages single virtual machine 
distributed operating system attempts give user location transparent view virtual machine 
case distributed operating system rms provides users improved performance location resources hidden 
set users system consists local remote resources managed rms able attain higher level availability fault tolerance available local system 
pronounced mission rms differs distributed operating system micro manage resources computer 
computer runs native operating system 
similarly router executes protocol file server executes native distributed file system 
rms responsible identifying large grained resources compute servers data repositories process choice 
may responsible issuing command execution processes comprise application 
may monitor status resources system progress applications responsible 
unclear request execute application submitted operating system machines distributed system controlled rms 
requests controlled rms allocation policies attempt optimize throughput set understood applications perform better 
users wish maintain control resources application 
active going research projects addition mshn area resource management major research problems solved 
problem mshn addressing best way system interact human users obtain qos preferences requirements way 
simply identifying syntax semantics required express qos preferences requirements difficult problem 
mshn address problem designers mshn expect leverage results research area 
assume example request execute application accompanied list deadlines preferences various versions application security requirements restrictions variance time request completed 
leaving general topic rmss imperative address topic packaging mshn researchers see fruits rms research large monolithic piece software require separate installation maintenance 
best way package eventual outcomes rms projects may incorporate middleware level standard similar common object request broker architecture corba domain name services resource location services 
way rms need separately maintained consolidated services distributed applications 
worthwhile separate research rmss research aspects distributed object computation needed versions standards order isolate solve difficult resource management problems 

background mshn evolved part scheduling framework called smartnet 
smartnet goal able wisely schedule sets compute intensive jobs may require execution multiple processes members suite heterogeneous computers 
smartnet provides sophisticated scheduling module successfully integrated rmss distributed computing environments 
users need execute compute intensive jobs access shared heterogeneous environment achieve superior performance continuing environment grown accustomed 
additionally users installed smartnet provided basic rms sophisticated scheduling capabilities 
smartnet major research contributions include ability predict expected run time job machine concept compute characteristics information collected previous executions job 
ability leverage heterogeneity inherent collection jobs collection computers 
smartnet successfully dod national institutes health scheduling jobs nasa system determining resources adequate process data ways desired scientists 
smartnet scheduling algorithms tuned attempt minimize time job completes designers smartnet recognized similar algorithms may useful optimizing criteria 
course minimizing time job set jobs completes general np complete problem smartnet employs heuristics searches near optimal mapping jobs machines job execution schedule 
heuristics uses known previously documented previously practical heterogeneous computing system 
previously actual systems system designers tried estimate average process runtimes previously recognized exact run times helpful necessary 

overview mshn goals mshn differs smartnet major ways 
smartnet expected system production 
reason smartnet developers time spent ensuring smartnet sei level 
despite smartnet able significant research contributions 
mshn intended research system facilitating experiments investigators determine rmss somewhat broader goals smartnet built 
mshn research goals expanded smartnet areas 
mshn needs consider overhead jobs sharing resources networks file servers significant impact mapping scheduling decisions 
ii mshn support adaptive applications defined 
iii mshn deliver qos different sets simultaneous users may executing interactive jobs jobs real time requirements 
smartnet model applications consist distinct phases 
phase short compared second phase acquire data data repository 
second phase compute results data obtained phase 
third phase short compared second phase write result back possibly different repository 
third phases short smartnet heuristics assume contention network data repositories 
account time required access resources assuming application sole user resources 
model applications mshn meant manage complex permitting applications transition phases variable length requiring sharing compute resources sharing network data repository resources 
discuss briefly elaborate problem modeling application accounting lower level policies govern sharing resources 
mshn assume control network routing file server memory allocation models necessary lower level operating systems protocols 
doing assignment processes resources account sharing resources correct way 
second major difference smartnet mshn research goals mshn attempts provide support adaptive adaptation aware applications 
adaptive applications mean idempotent applications exist different versions 
different versions may different values user due factors precision computation input data 
additionally different versions may different communication computation needs 
version may execute windows nt version executable linux 
mshn goal support adaptive applications able terminate version application mshn perceives currently executing version meet users qos expectations 
case mshn terminate executing version start version sufficient resources execute version 
requirement adaptive applications idempotent permits application safely restarted corrupting resource database 
similarly may times mshn determines delivery better qos possible user changing version better meets user preferences 
adaptation aware application differs adaptive application ways 
terminated new version need restarted 
different version terminated may started information previous state obtained execution previous version 
second adaptation aware application may able adapt resource usage execution restarting 
mshn goals differ smartnet mshn seeks determine meet multiple different qos requirements multiple different applications simultaneously 
really issues bound difference 
way incorporate dynamically mixture qos requirements single measure determined 
second assignment applications resources determined optimizes identified measure 
resolving second issue strongly leverage smartnet emphasis separation optimization criteria search algorithms recognition similar algorithms search different types spaces optimal values 
elaborate 

related research groups examining issues important building rms darpa quorum project 
look projects related mshn 
groups engaged research complementary mshn goals 
sake brevity short synopsis project relates mshn 
desiderata 
university texas arlington project called desiderata qos management tools dynamic scalable dependable real time note version application may terminated mshn detects user application meet qos expectations 
phenomenon occur due priorities 
systems desiderata focusing qos specification qos metrics dynamic qos management benchmarking specific computing environments distributed anti air warfare system naval surface warfare center division 
unique concept come desiderata project application path 
globus 
globus large joint project argonne national laboratory university southern california information sciences institute 
parts globus project devoted resource management issues 
globus architecture depends advance immediate resource reservation protocol layer standard exist 
rt arm 
honeywell developing real time adaptive resource management system aimed primarily high real time military embedded systems navy surface ship sc 
specific issues concentrating include modeling embedded systems finding practical techniques predictable real time performance 

project university illinois urbana champaign building infrastructure providing guaranteed qos features rmss may built 
part infrastructure involves building runtime environment 
erdos 
sri international running project called erdos resource management distributed systems developing architecture adaptive qos driven resource management 
erdos project emphasizes comprehensive definition qos development models capture information required making resource management decisions 

quality specification adaptive resource management distributed systems project oregon graduate institute science technology investigating techniques specifying utilizing qos adaptive distributed systems 
concentrating translation qos specifications application level resource reservation resource management primarily multimedia domain 
assert 
assert system university oregon eugene focusing dynamic distributed realtime environments 
core project estimates monitors relevant qos parameters running applications 
assert rms rms framework assert project looking specific issue rmss qos monitoring estimation 
quo 
quality objects quo project bbn systems technologies attempting add qos specification delivery corba 
provide absolute qos guarantees quo seeks combine knowledge resource application conditions order reserve resources predictable execution distributed applications 
mol 
mol metacomputing online project paderborn center parallel computing goal utilization multiple high performance systems solving problems large single supercomputer 
mol approach assume absolute control resources management 
mol project addressing issues key resource management including qos specification 

organization section motivate discuss mshn architecture 
smartnet successful achieving functionality smartnet architecture exactly mshn architecture lessons learned smartnet mshn goals substantially different 
particular clearly delineated certain smartnet modules separate components 
delineation easier experiment different designs components 
section discuss research issues mshn investigators studying highlight results 
additionally section provides numerous articles describe research detail 
conclude summarizing status mshn project 

mshn architecture section describe concepts went mshn architectural design 
description motivates need various major components explains replicated varying degrees 
architectural design driven need support rms research discuss section aided previous experience smartnet 
mshn current architecture detail 

motivation motivate need major components mshn architecture discuss components interact 
recall previous section rms needs transparently locate resources execution application requested 
aware request user application start executing application 
early rmss required user explicitly log system start job 
application started application fork exec system calls application request required specially designed embed requests function call rms library 
restriction required applications specifically written modified particular rms 
mshn designers want force user explicitly log rms modify existing programs 
mshn transparently intercepts calls system libraries initiate execution new process calls mshn client library 
mshn decides newly requested application execute mshn client library uses mechanisms available resource site initiate execution remote process 
environments mshn designed contain different types computers possibly executing different version operating system 
requiring client library linked mshn application contain substantial amount code specific computers chose mshn daemon 
computer added system mshn daemon started computer 
client library needs start process remote machine simply contacts mshn daemon machine requests daemon start process client library behalf 
course general mechanism daemon new research issue 
remote process needs communicate initiating process contacts client library passes information initiating process just remote process started locally 
able transparently provide service applications command interpreters requires client library intercept pre process divert system library calls addition previously mentioned exec call 
example socket calls calls open close read write files intercepted replaced pre post processed 
mshn project required mechanism intercepting calls requiring source modification 
initially turned condor project help problem 
condor project university wisconsin performs transparent migration processes unix environment 
perform migration condor intercept calls system libraries 
techniques similar condor able intercept calls requiring source code modification 
mechanism described detail 
techniques require object code files linked mshn client library require object code files 
tool executable editing library eel addition providing mechanism transparently executing remote processes client library unique position passively determine status resources assumed linked application executing environment managed mshn 
mshn client library pre post process system calls intercepting calls operating system executed process needs hardware resource 
doing determine low level qos application receiving particular resource 
discuss functionality client library section 
mshn client library intercepts call execute new process way determining resources new process computer primarily responsible executing new process 
requiring decision independently client library linked application chose client library check request list applications managed mshn 
requested application list mshn client library simply passes requested application directly local operating system 
requested application list passes request mshn scheduling advisor 
scheduling advisor job determine set resources newly requested process 
mshn scheduling advisor complex package associated different research issues discuss fully section 
primary research issues criteria optimized choice resources 
ii optimizing criteria np complete problem large heuristic search optimum resource assignment 
iii granularity scheduling advisor model policies protocols associated allocation lower level resources granularity model define resource requirements process 
scheduling advisor determine assignment resources process know resources resource required process execute meet qos requirements preferences 
assist scheduling advisor making decision evolved university wisconsin paradyn project link executable mshn client library 
modern systems choice computer responsible executing process carries implicitly choice file servers distributed resources networks 
say mshn chooses computer responsible executing process choice resources external computer may implicit assignment 
assignment resources designed mshn resource requirements database mshn resource status server 
resource status server quickly changing repository maintains information concerning current availability resources 
information stored resource status server result updates mshn client library mshn scheduling advisor 
client library update resource status server currently perceived status resources takes account resource loads due processes managed mshn 
scheduling advisor provide expected resource status resources expects applications assigns 
additionally resource status server statistically process historic knowledge predictions resource status 
compared resource status server information maintained mshn resource requirements database changes slowly 
resource requirements database responsible maintaining information resources required execute particular application 
initial mshn prototype implements single source information stored database statistically analyzed historical information envision going research projects serve sources information 
mshn current source information maintained resource requirements database comes data collected mshn client library application previously executed 
patterned smartnet way leveraging concept compute characteristics smartnet pioneered mshn collect information smartnet collects 
smartnet information coarsegrained maintains total amount wallclock time required execute program particular machine 
measure sufficient smartnet needs due requirements intended applications phases expected environment job exclusive access resources 
mshn resources shared applications phases maintaining coarse grain information insufficient 
resource requirements database ability maintain fine grain information collected mshn client library 
eventually hoped resource requirements database populated information smart compilers possibly advice application writers 
applications course needed test system 
unfortunately executables different platforms needed test mshn ability manage distributed heterogeneous environment 
producing actual applications require tremendous effort obtain source code numerous applications may classified proprietary port source code different platforms compile link 
decided effort better spent research system looked viable solution 
solution considered benchmarks ported different platforms 
wanted sure system manage wide variety applications 
settled writing generalpurpose application emulator parameters specified cause imitate wide variety applications 
discuss problem deciding best construct emulator research topics section 
client library linked executing mshn application informs resource status server current perceived status resources applications 
scheduling advisor informs resource status server load expects processes scheduled place certain resources 
class information indicates condition resources mshn application currently planning 
mshn application emulator linked client library obtain information condition resources 
daemon request start client library update start resource requirements database application emulator query response update call back query response call back resource status server call back scheduling advisor query response mshn conceptual architecture 
mshn conceptual architecture shown 
seen application running mshn mshn client library intercepts application operating system calls 
client library intercepts request execute new application application requires mshn scheduling advisor consulted determine resources application client library invokes scheduling request scheduling advisor 
scheduling advisor queries resource requirements database resource status server 
uses information receives appropriate search heuristic determine newly requested process execute 
determining resources host new process scheduling advisor returns decision client library turn requests execution process appropriate mshn daemon 
mshn daemon invokes application machine 
process executes client library updates resource status server resource requirements database current status resources requirements process 
scheduling advisor establishes callbacks resource requirements database resource status server 
callbacks scheduling advisor notified event status resources significantly changed actual resource requirements substantially different initially returned resource requirements database 
case longer appears assigned resources deliver required qos application adapted terminated 
receipt callback scheduling advisor require applications adapt receive requested desired qos 
middleware middleware application daemon operating system machine application daemon application emulator operating system machine emulator rrd middleware middleware application daemon rss operating system machine application daemon application emulator scheduling advisor operating system machine emulator physical instantiation mshn architecture 
mshn components run machine distributed replicated different computers tools isis horus ensemble 
results control theory useful ensuring process replicating merging components stable result oscillation 
additionally results control theory incorporated replicated scheduling advisor ensure modifications requested adaptive adaptation aware applications unstable 
mshn components replicate needed 
illustrates simple instantiation mshn system 
addition components discussed convenient add mshn visualizer enabled examine functional performance debugging purposes current states various mshn components 
mshn visualizer captures significant events core mshn components real time post mortem analysis 
security mshn architecture considered 
policies interest component authentication 
includes authentication mshn core components authentication resource clients mshn core authentication applications selected mshn components 
hierarchical privilege 
mshn context core components privileged user applications privileged 
communications integrity confidentiality 
communications protected unauthorized modification disclosure 
access control 
access mshn core databases job histories may mediated 
security architecture creates keyed domains supporting privilege authentication confidentiality integrity common data security architecture facilities security services key management 

current mshn architecture 
high level description current mshn architecture 
detailed description refer reader publications 
high level diagrams mshn component arrows indicating direction communication action 
addition diagrams short description component functions 
description mshn architecture represent mshn components external components unified modeling language uml actors 
symbols representation shown 
core mshn components include scheduling advisor sa client library cl resource status server rss resource requirements database rrd daemon application emulator ae 
rms assurance mshn security properties built limited effectiveness security environment provided underlying operating system hardware base 
sa scheduling advisor application cl client library ae application emulator rss resource status server am mshn aware application rrd resource requirements database resource daemon vis visualizer symbols representing actors mshn architecture 
scheduling advisor sa functionality 
primary responsibility sa determine best assignment resources set applications optimization global measure describe section 
sa depends rrd rss order identify operating point optimizes global measure 
responds resource assignment requests cl appropriate sa requests application adaptations cl sa responsible establishing callback criteria thresholds rss rrd 
mshn components update mshn visualizer significant display analysis events 
cl rrd sa rss vis client library cl functionality 
cl linked adaptive adaptation aware applications 
provides transparent interface mshn components 
cl intercepts system calls collect resource usage status information forwarded rrd rss 
cl intercepts calls initiate new processes exec consults sa best place start process 
requests possibly remote daemons execute applications sa advice 
cl invokes adaptation adaptation aware applications notified sa callbacks 
invocation special case setting emulator parameters 
am ae cl vis rrd rss sa resource status server rss functionality 
role rss maintain repository types information resources available mshn relatively static long term moderately dynamic medium term highly dynamic long term information 
rss updated current data cl system administrator 
rss responds sa requests estimates currently available resources 
sa sets callbacks rss resource availability thresholds cl update frequency requirements 
cl rss vis sa resource requirements database rrd functionality 
rrd repository information pertaining resource usage applications 
rrd provides information sa 
callbacks sa occurrence threshold violation update frequency requirements 
updated cl cl rrd vis sa daemon functionality 
mshn daemon executes compute resources available sa 
sole purpose start applications requested cl capability responsibility initiating default application emulator start determine resource status information 
ae am cl vis application emulator ae functionality 
ae emulates running application stressing particular resources way real application 
ae serves purposes run simulated applications statistically leave resource usage footprint real applications overhead uncertainty installing maintaining running particular application 
second monitor absence mshn scheduled applications 
determine status resources mshn scheduled applications monitored existing cl daemon starts instance ae default startup 
instances may started time command interpreter application 
ae 
mshn research issues cl section describe major issues investigated mshn team members 
briefly summarize results date 
course sufficient space completely describe issues results detail reader referred relevant papers topic 
attempted associate issues component mshn architecture strongly affect 
certainly issues affect scheduling advisor affect resource status server resource requirements database 
additionally non orthogonal research done investigators outside mshn team examining issues qos requirements derived smart compilers best expressed 

scheduling advisor research issues section discuss issues strongly affect scheduling advisor 
examine quantify needs processes require resource allocation scheduling advisor 
consider ramifications precisely knowing resource requirements consequently exact status resources 
discuss class heuristics far implemented mshn need variety heuristics 

optimization criteria 
optimal resource allocation involves attempting solve optimization problem usually np complete 
smartnet primary optimization criterion minimize time application completes assuming applications particular form 
versions smartnet accounted priorities 
mshn maximizes weighted sum values represents benefits costs delivering required desired qos including security priorities preferences versions specified deadlines 
discuss effect attributes optimization criteria 
mshn consideration security optimization criterion allows trade security qos constraints insufficient resources complete requests 
done fashion similar projects 
mshn associates cost security levels varies depending resources obtain level security details security viewed qos parameter see section 
mshn attempts account preferences various versions priorities 
impossible deliver preferred information specified deadlines due insufficient resources mshn optimization criteria designed favor delivering preferred version highest priority applications 
mshn optimization criteria deadlines simple complex 
user satisfied result received specific time 
times user associate general benefit function indicate information different values received 
information mshn optimization criteria 
addition cost function optimized optimization problems usually set constraints met order solution viable 
constraints resource allocation optimization problem resources allocated meet needs processes equal available resources point time 
actual inequalities required depend qos constraints sharing policies local operating systems network protocols granularity policies resource usage known see granularity issues section 

inexact knowledge job resource usage 
possible find perfect solution optimization problem posed instantiating constraints optimization criteria current situation expected resource usage application estimate 
real time systems worst case estimate assign resources processes systems mean expected resource usage 
analysis revealed mean cause actual run time generally underestimated better assignment mean distribution expected resource usage accounted appropriate 
leads question concerning extra complexity involved sophisticated heuristic yield better schedule simple heuristic actual variance run times large scheduling done mean mean distribution 
results area shown cases complex heuristics determine schedules executed perform better schedules derived simple heuristics variance large 
simple heuristics perform just complex ones 
difference quality schedules produced various heuristics closely correlated type heterogeneity system 
example machine application heterogeneity low simple heuristic performs just complex ones 
papers described results concerning research 

performance search algorithms 
smartnet organization leveraged idea independence search algorithms optimization criteria 
heuristics searching space mappings modified search solutions different optimizations space 
example dantzig simplex method useful problems optimization criteria constraint inequalities stated linear combinations variables 
different heuristics depending characteristics problem certain heuristics may preferable 
example mshn team obtained extensive results identifying regions heterogeneity certain heuristics perform better maximizing throughput minimizing time application set applications complete 
re targeting heuristics optimization criteria currently underway 
additionally mshn team members performed extensive research accounting dependencies applications processes single application 
includes promising results investigating data dependencies mapping iterative applications 

resource status server resource requirements database research issues part mshn team investigation aimed determining information stored resource requirements database maintained resource status server 
taxonomy types information stored required 
discuss taxonomy 
discuss impact viewing security qos mshn components 
important issues designing effective rmss determining level granularity information maintained concerning status resources requirements applications 
discuss issues somewhat detail refer interested reader relevant publications 

taxonomy 
mshn team formulated part taxonomy classifying systems 
different components include methods describing applications computing environment mapping strategy 
relevant characteristics need instantiated concerning application include size number tasks sub tasks associated 
ii sub tasks independent dependent types dependencies 
iii distributions application sources performs input output performed continually lifetime processes input data obtained interacting person source highly variable response times 
iv deadlines qos requirements including security associated applications subtasks comprise application 
similarly computing environments mapping strategies numerous hierarchically characterizable attributes fully documented publications 

security quality service 
security context qos current research area 
security capabilities resources security requirements applications influence assignment applications resources 
obtain information concerning user security requirements resource requirements database information concerning security capabilities resource resource status server 
example output application encrypted particular algorithm key size chosen particular range requirement stored resource requirements database amount data encrypted 
resource status server know particular computing resource capable performing required cryptographic algorithm cost terms run time byte example encrypting data 
members mshn team developed initial framework currently refining characterizing security attributes network determining cost benefit value providing required preferred security application 

granularity issues 
important question concerns resource requirements database resource status server detail maintained concerning status resources requirements applications 
obviously accurate detailed set information prove quite useful scheduling algorithms expensive difficult collect expensive process algorithm 
mshn team obtained initial estimates overhead capturing system calls determine cost collecting various granularities information 
members team currently technique record fine grained information program analyzes air tasking orders report information concerning resources overhead involved collecting resource usage information 
addition cost associated collecting finegrained information concerning applications resources question information sufficient 
current experiments mshn team focus determining fairly simple models predict relative performance application resource assignments 
perform realistic experiments team built initial application emulator see executing different parameters different systems possible configurations compare actual received qos predicted qos 
far determined resource status server directly indirectly contain information concerning native threads supported operating system 
information maintained scheduling algorithm choose platforms identical operating system version execute may assign process handled better platform 
similarly resource requirements database indicate application multi threaded number nature threads uses 
information concerning results publications 

application emulator research issues mshn team designing implementing application emulator different reasons 
reason needed mshn architecture monitor status resources 
reason able easily construct large suite application emulators place loads resources way actual applications 
conjunction resource usage measurements linking actual applications mshn client library mshn application emulator emulate execution actual applications requiring applications ported different platforms 
obvious advantage application emulator porting applications enable mshn researchers test architecture quickly different situations 
meet purpose mshn application emulator define meaning loading resources various resources 
percentages transferable computing platforms network media 
category resource identified units easily translated different platforms flops bytes sec chosen quantify resource 
recognized stage need multi threaded non multi threaded application emulator capability 
single application comprised multiple threads comprised multiple heavy weight processes 
designing application emulator meet requirements recognized distributions reflecting communication computation insufficient conditional probabilities required 
times purpose process sending message process receiving process perform behalf sending process 
designed general emulator capability sending bearing messages 
completed initial implementation application emulator granularity research testing general application emulator 
documentation concerning application emulators 

client library research issues research issues having client library component involve mechanism policy 
mechanism issues transparently link client library applications 
previous research areas process migration tools debugging parallel distributed programs provide easy solutions mentioned earlier 
issue remains best transparently determine availability resources 
simply determining client library perform functionality better providing functionality external applications important contribution 
determining average availability network resource trivial problem 
mshn team initial progress area detailed 

summary summarized purpose resource management system rms general research goals particular experimental rms management system heterogeneous networks mshn 
motivation provided major components mshn architecture contains components explained 
research questions mshn researchers seeking answers described 
provided enable reader better understand mshn learn mshn experiments 
interesting rms research projects progress today space permitted survey 
addition continuing going experiments described mshn investigation focus reaching better understanding level granularity obtainable applications level required perform sufficiently resource assignment ii detailed characterization security costing metrics iii determining best search algorithms mshn optimization criteria various conditions 
acknowledgments authors st john wayne porter comments 
prasanna raghavendra unified resource scheduling framework heterogeneous computing environments proc 
th ieee heterogeneous computing workshop april 
armstrong investigation effect different run time distributions smartnet performance thesis department computer science naval postgraduate school monterey ca sept 
armstrong hensgen kidd relative performance various mapping algorithms independent sizable variances run time predictions proc 
th ieee heterogeneous computing workshop march pp 

bhat prasanna raghavendra adaptive communication algorithms distributed heterogeneous systems proc 
ieee intl 
symp 
high performance distributed computing july pp 

bhat prasanna raghavendra redistribution heterogeneous networks proc 
isca intl 
conf 
parallel distributed computing systems sept pp 

bhat prasanna raghavendra efficient collective communication distributed heterogeneous systems proc 
ieee intl 
conf 
distributed computing systems appear 
birman replication fault tolerance isis system th acm symposium operating systems principles dec pp 

booch rumbaugh jacobson unified modeling language user guide addison wesley reading ma 
braun siegel beck maheswaran robertson yao taxonomy describing matching scheduling heuristics mixed machine heterogeneous computing systems proc 
ieee workshop advances parallel distributed systems october pp 
included proceedings th ieee symposium reliable distributed systems 
braun siegel beck maheswaran robertson yao hensgen freund comparison study static mapping heuristics class meta tasks heterogeneous computing systems proc 
th ieee heterogeneous computing workshop april appear 
ramanujan siegel method line line derived iterative automatic target recognition tasks particular class heterogeneous parallel platforms journal supercomputing vol 
oct pp 

granularity thesis department computer science naval postgraduate school monterey ca march 
chandra fisher ng steenkiste takahashi zhang darwin resource management value added customizable network service proc 
th ieee international conference network protocols october pp 

czajkowski foster kesselman karonis martin smith tuecke resource management architecture metacomputing systems proc 
workshop job scheduling strategies parallel processing pp 

drake load emulator toolkit analysis hiper resource requirements thesis department computer science naval postgraduate school monterey ca june 
fickas feather requirements monitoring dynamic environments proc 
nd ieee intl 
symposium requirements march pp 

fitzgerald foster kesselman von laszewski smith tuecke directory service configuring high performance distributed computations proc 
th ieee symp 
high performance distributed computing pp 

foster kesselman globus project status report proc 
th ieee computing workshop pp 

freund campbell hensgen kidd lima moore rust siegel scheduling resources multi user heterogeneous computing environments smartnet proc 
th ieee heterogeneous computing workshop march pp 

hensgen server groups dynamically adapt improve performance ph 
dissertation department computer science university kentucky 
hensgen finkel dynamic server proc 
workshop experiences building distributed multiprocessor systems oct pp 

hensgen kidd siegel kim st john irvine levin prasanna freund performance measure distributed heterogeneous networks priorities deadlines versions security technical report school electrical computer engineering purdue university west lafayette feb 
hensgen moore kidd freund keith lima campbell adding rescheduling integrating condor smartnet proc 
th ieee heterogeneous computing workshop april pp 

huang jha schwan zhao rt arm real time adaptive resource management system distributed mission critical applications workshop middleware distributed real time systems pp 

ibarra kim heuristic algorithms scheduling independent tasks non identical processors journal acm vol 
pp 

irvine levin note mapping user oriented security policies complex mechanisms services technical report department computer science naval postgraduate school monterey ca progress 
irvine levin taxonomy costing method security metrics technical report department computer science naval postgraduate school monterey ca progress 
kidd hensgen mean inadequate making scheduling decisions technical report department computer science naval postgraduate school monterey ca jan 
kidd hensgen freund moore smartnet scheduling framework heterogeneous computing proc 
nd intl 
symposium parallel architectures algorithms networks june pp 

quality network load information improves performance adaptive applications thesis department computer science naval postgraduate school monterey ca sept 
hensgen kidd xie determining accuracy required resource load prediction successfully support application agility proc 
nd iasted intl 
conf 
european parallel distributed systems july pp 

larus schnarr eel machine independent executable editing sigplan pldi pp 

levin irvine approach characterizing resource usage user preferences benefit functions technical report department computer science naval postgraduate school monterey ca progress 
levin irvine quality security service resource management system benefit function technical report department computer science naval postgraduate school monterey ca progress 
liu nahrstedt hull chen li qos characterization draft version july cs uiuc edu files qos pdf livny litzkow tannenbaum checkpoint migration unix processes condor distributed processing system dr journal feb pp 

loyall schantz zinky bakken specifying measuring quality service distributed object systems proc 
st intl 
symposium object oriented real time distributed computing april pp 

maheswaran ali siegel hensgen freund dynamic matching scheduling class independent tasks heterogeneous computing systems proc 
th ieee heterogeneous computing workshop april appear 
maheswaran braun siegel heterogeneous distributed computing encyclopedia electrical electronics engineering webster ed john wiley sons new york ny appear 
maheswaran siegel dynamic matching scheduling algorithm heterogeneous computing systems proc 
th ieee heterogeneous computing workshop mar pp 

porter resource requirement analysis modules determination adaptivity requirements thesis department computer science naval postgraduate school monterey ca june 
decker simon mol project open extensible proc 
th ieee heterogenous computing workshop april pp 

st john kidd hensgen kidd shing experiences semi formal methods mshn technical report department computer science naval postgraduate school monterey ca feb 
design implementation testing mshn application resource monitoring library thesis department computer science naval postgraduate school monterey ca dec 
schwan 
dynamic authentication high performance networked applications proc 
th ieee ifip intl 
workshop quality service may pp 

chatterjee qos middleware generation internet position proc 
nasa quality service workshop aug pp 

tan siegel stochastic model heterogeneous computing application data relocation scheme development ieee transactions parallel distributed systems vol 
nov pp 

tan siegel antonio li minimizing application execution time scheduling subtasks communication traffic heterogeneous computing system ieee transactions parallel distributed systems vol 
aug pp 

van renesse birman hayden karr building adaptive systems ensemble cornell university technical report tr july 
van renesse birman maffeis horus flexible group communication system communications acm april pp 

van renesse tanenbaum distributed operating systems acm computing surveys vol 
dec pp 

zinky loyall karr schantz bakken 
quo runtime support quality service distributed objects proc 
ifip intl 
conf 
distributed systems platforms open distributed processing sept pp 

walpole liu maier pu mcnamee steere quality service semantics multimedia database systems proc 
data semantics semantic issues multimedia systems ifip tc working conference jan pp 

wang siegel roychowdhury task matching scheduling heterogeneous computing environments approach journal parallel distributed computing vol 
nov pp 

welch ravindran shirazi bruggeman specification modeling dynamic distributed real time systems technical report number tr cse department computer science engineering university texas arlington arlington tx sept 
welch ravindran shirazi bruggeman desiderata qos management technology dynamic scalable dependable real time systems proc 
th ifac workshop distribute computer control systems sept pp 

wright management system heterogeneous networks security services thesis academic group naval postgraduate school monterey ca june 
wright irvine security virtual heterogeneous machine proc 
th computer security applications conference dec pp 

biographies debra hensgen received phd area distributed operating systems university kentucky 
associate professor cs department naval postgraduate school 
authored numerous papers toolkit automatically generating safe efficient concurrent code graze parallel processing performance debugger saam path information base smartnet mshn resource management systems 
taylor kidd obtained phd university california san diego 
interests include theoretical applied distributed computing 
led research component smartnet team number important advances smartnet scheduling framework 
pi darpa sponsored mshn project darpa sponsored saam project 
david st john head staff heterogeneous network computing laboratory naval postgraduate school 
years experience object oriented software development areas distributed computing process control sensor collection internet transaction processing systems 
member ieee ieee computer society 
received high honors university florida mse university california irvine 
matt earned professional engineering license serving 
received ms computer science department naval postgraduate school 
currently major working battle management command control communication component national missile defense program 
siegel professor school electrical computer engineering purdue university 
ieee fellow acm fellow 
received bs degrees mit ma mse phd degrees princeton university 
coauthored technical papers chief journal parallel distributed computing editor ieee transactions parallel distributed systems 
tracy braun phd student research assistant purdue university 
received honors high distinction university iowa 
received school electrical computer engineering purdue 
member ieee ieee computer society eta kappa nu society 
research interests include parallel algorithms heterogeneous computing computer security software design 
maheswaran assistant professor department computer science university manitoba canada 
received bsc degree university sri phd degrees purdue university 
received fulbright scholarship pursue degree purdue university 
research interests include computer architecture distributed computing heterogeneous computing resource management systems metacomputing 
ali student school electrical computer engineering purdue university 
main research topic dynamic mapping meta tasks heterogeneous computing systems 
held teaching positions aitchison college institute management sciences pakistan 
received bs degree university engineering technology pakistan 
research interests include computer architecture parallel computing heterogeneous computing 
jong kim student research assistant school electrical computer engineering purdue university currently working darpa iso sponsored program 
received korea university korea 
served army working army theater automated command control information management system received army medal 
research interests include heterogeneous computing performance measures distributed systems 
cynthia irvine director naval postgraduate school center studies research assistant professor computer science naval postgraduate school 
dr irvine holds phd case western reserve university 
twelve years experience computer security research development 
current research centers architectural issues associated applications high assurance trusted systems security architectures combining popular commercial specialized multilevel components design multilevel secure operating systems 
timothy levin currently doing research naval postgraduate school 
received bs computer information science university california santa cruz 
secure system includes design security features formal verification formal covert channel analysis operating system enterprise security features commercial relational database system 
certified nsa vendor security analyst participation trusted product evaluation program 
richard freund founder ceo san diego startup distributed computing technology 
freund early pioneers field distributed computing written authored number papers 
addition founder heterogeneous computing workshop held year conjunction ipps spdp 
freund won civilian service award career government scientist 
matt years experience software development research design process analysis project management 
currently holds position vice president product development 
extensive experience designing developing software high performance computing parallel algorithms network computing database systems 
michael godfrey ucsd java certified years software research design development experience high performance computing secure world wide web health care data base systems science applications international saic developed systems level applications variety unix win platforms 
turkish navy 
graduated turkish naval academy bs operations research honors 
received mscs degree area systems design architecture naval postgraduate school 
currently systems engineer turkish navy software development center working corba communication infrastructure command control systems 
paul lt navy masters student computer science department naval postgraduate school working management system heterogenous systems mshn 
received bs engineering physics santa clara university 
prior coming naval postgraduate school lt served years nuclear power officer aboard uss salt lake city ssn 
shirley kidd supporting staff heterogeneous network computing laboratory 
years experience aerospace industry years commercial marketing worked industries programmer analyst 
bs applied mathematics university california san diego 
viktor prasanna prasanna kumar professor department electrical engineering systems university southern california los angeles 
obtained phd computer science pennsylvania state university 
published consulted industries parallel computation computer architecture vlsi computations high performance computing signal image processing vision 
serves editorial boards journal parallel distributed computing ieee transactions computers 
founding chair ieee computer society technical committee parallel processing fellow ieee 
bhat phd candidate computer engineering university southern california los angeles 
received tech 
degree computer engineering regional engineering college india 
received degree computer science engineering indian institute science bangalore 
research interests include scheduling techniques parallel distributed systems high performance computing parallel computer architecture 
summer research intern hewlett packard laboratories palo alto 
ammar phd student electrical engineering department university southern california 
main research interest task scheduling heterogeneous environments 
received ms degree computer engineering university southern california 
member ieee ieee computer society acm 
