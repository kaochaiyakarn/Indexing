haskell workshop pattern guards transformational patterns martin erwig oregon state university erwig cs orst edu simon peyton jones microsoft research cambridge simonpj microsoft com propose extensions patterns pattern matching haskell 
rst pattern guards allows guards guarded equation match patterns bind variables test boolean condition 
introduce natural generalisation guard expressions guard quali ers 
frequently occurring special case function applied matched value result matched pattern 
introduce syntactic abbreviation transformational patterns particularly useful dealing views 
proposals implemented modest syntactic implementation cost 
upward compatible haskell existing programs continue 
er third speculative proposal provides transformational pattern construct additional power explicitly catch pattern match failure 
demonstrate usefulness proposed extension examples particular compare proposal views discuss new patterns combination equational reasoning 
pattern matching appreciated feature languages ml haskell greatly simpli es task inspecting values structured data types facilitates succinct function de nitions easy understand 
basic form pattern matching tries identify certain structure value processed function 
structure speci ed pattern recovered value corresponding parts value usually bound variables 
bindings exploited right hand side de nition 
numerous proposals extending capabilities patterns pattern matching particular problems pattern matching data types stimulated lot research :10.1.1.14.3532
aspects subject extensions generalisations pattern matching :10.1.1.37.7006
approaches di er syntax properties impossible di erent approaches time 
di erent approaches clear winner called views prominent favourite extension 
consolidation pattern matching fundamental level deserves attention 
extension simple prohibited complex syntax powerful express existing approaches 
proposal elementary extension patterns pattern matching naturally extends haskell current pattern matching capabilities 
design uenced goals conservative extension 
programs new feature need changed unchanged semantics 
simplicity 
shall introduce complex sub language specifying new kinds patterns introducing pattern de nitions 
minor extension syntax simple semantics aimed 
expressiveness 
possible express pattern matching data types 
particular views kinds active patterns covered :10.1.1.14.3532
ecient simple implementation 
new patterns penalised longer running times 
minimal changes existing language needed 
facilitates easy integration new concept existing language implementations supports broad evaluation concept 
remainder structured follows motivate need powerful pattern matching section proposal sections 
syntax semantics de ned section implementation discussed section 
detailed comparison views performed section 
section discuss new patterns equational reasoning 
extension expressiveness proposal described section 
related discussed section nally section 
need powerful pattern matching current version haskell pattern matching just straight step process guards constrain selection function equations 
additional bindings produced second step 
somewhat non orthogonal design extension propose essentially generalises aspect 
consider haskell function de nition 
filter filter ys filter ys filter ys decision right hand side choose stages rst pattern matching selects guarded group second boolean valued guards select right hand sides group 
stages pattern matching stage bind variables guards call functions 
known design gives rise direct con ict pattern matching abstraction discuss 
data types consider data type sequences ers access ends sequence see example nil seq seq seq lview seq seq seq seq rview seq seq sequences realized date type representation known prohibits pattern matching 
functions lview rview provide views sequence left oriented list right oriented list reveal degree representation sequences di erent actual implementation 
means pattern matching representation principally possible 
generally leads clearer de nitions 
example function lter sequence case expression result say lview filtseq bool seq seq filtseq xs case lview xs nil just ys filtseq ys filtseq ys satisfactory list version filter pattern matching directly 
possible write filtseq equational way filtseq bool seq seq filtseq xs lv filtseq ys lv filtseq ys nil lv lview xs just ys lv auxiliary function taken standard library bool just true false idea guard lv checks lview returns just value lazily matched pattern just ys matched ys demanded 
filtseq equational hardly clearer 
known approach reconcile pattern matching data types views proposal consider views detail section 
matching involves arguments example suppose data type nite maps lookup operation lookup int int lookup returns supplied key domain mapping just value key maps 
consider de nition env var var ok ok val val var var lookup env var lookup env var ok ok just val just val filtseq guard ok ok checks lookups succeed convert types booleans 
lazily matched just patterns extract values results lookups bind returned values val val respectively 
lookup fails takes case returns sum arguments 
certainly legal haskell tremendously verbose un obvious way achieve desired ect 
better case expressions 
env var var case lookup env var fail just val case lookup env var fail just val val val fail var var bit shorter hardly better 
worse just equation follow thing 
suppose env var var vars ok ok val val lookup env var env var stu env stu lookups fail want fall second third equations 
write de nition form case expression forced equations separate de nition call right hand side fail 
precisely haskell provides guards relying expressions guard fails fall equation conditional 
frustrating solution near hand 
want result lookup 
env vars var var help lookup env var lookup env var vars help just just vars help var stu help stu get equations right hand side 
big set equations hard remember just pattern corresponds 
worse lookup 
example suppose function env var var ok ok val var var lookup env var lookup env var val ok ok just val just val notice second lookup uses val result rst lookup 
express help function requires second helper function nested inside rst 
dire stu summary section shown haskell pattern matching capabilities unsatisfactory certain situations 
rst example relates known tension patternmatching abstraction 
example little di erent matching involved arguments env var arise directly data abstraction 
fundamental issue expressiveness rewrite set pattern matching guarded equations case expressions 
precisely compiler compiling equations 
worry 

reason haskell provides guarded equations allow write cases want consider time independently equational style 
structure hidden case version 
case right hand sides really fail 
furthermore nested case expressions scale badly expression tends indented 
contrast equational albeit verbose de nition merit scale nicely accommodate multiple equations 
seek way accommodate equational style despite degree abstraction 
proposal pattern guards initial proposal simple boolean expression guard list quali ers exactly list comprehension 
syntax change replace exp quals syntax guarded equations 
write env var var just val just val val val equations semantics clear 
quali ers matched order 
quali er call pattern guard right hand side evaluated matched pattern left 
match fails guard fails equation tried 
succeeds appropriate binding quali er matched augmented environment 
list comprehensions type expression right type pattern left 
bindings introduced pattern guards scope remaining guard quali ers righthand side equation 
clause bindings scope guards just haskell 
just list comprehensions boolean expressions freely mixed pattern guards 
example just 
haskell current guards emerge special case quali er list just element boolean expression 
just list comprehensions quali er introduce binding 
possible pattern guards simple variable pattern exp quali er little powerful introduce recursive mutually recursive binding 
clear power particularly useful uniform exactly syntax list comprehensions 
argue notation misleading suggesting idea drawn list comprehension 
nice reuse precisely list comprehension syntax 
furthermore viable alternative lead parsing diculties rely herald arrival right hand side equation 
consider 
pattern guards filtseq exposes small de ciency filtseq bool seq seq filtseq xs just ys just ys nil annoying repeated call lview xs shared putting clause plus annoying repeated pattern match 
kind nested guards filtseq bool seq seq filtseq xs just ys filtseq ys filtseq ys nil extension perfect sense hard implement power weight ratio signi cantly lower main proposal useful power requires new syntax greater weight 
possible write filtseq auxiliary function filtseq filtseq bool seq seq filtseq filtseq lview filtseq bool seq seq filtseq nil filtseq just ys filtseq ys filtseq ys introduces indirection de nition solution ered approach problem pattern matching data types simply avoid 
proposal transformational patterns pattern guards allow programmer call arbitrary function pattern match result 
important special case addressed views calls take stylised form motivates propose special syntax transformational patterns support 
write filtseq transformational pattern filtseq bool seq seq filtseq just ys lview filtseq ys filtseq ys filtseq lview nil transformational pattern just ys lview means informally apply lview match just ys 
expression right called pattern action 
transformational patterns simply syntactic sugar equivalent form pattern guards notationally little concise 
furthermore quite views match just ys lview view argument 
function transformational pattern refer variables scope bound clause write env just val lookup env just val lookup env val val equations gives transformational patterns just little power views cost somewhat ad hoc 
summarise transformational patterns help keep function equations single lined greatly enhances readability understanding function de nitions containing equations 
transformational patterns particularly useful simulating views see section equational reasoning see section 
syntax semantics haskell report need small changes syntax integrate pattern guards transformational patterns rst guard just anymore expression list quali ers atomic pattern pattern extended expression gd qual qual pattern guard aexp transformational pattern de ne semantics pattern guards transformational patterns series equations relate ordinary case expressions haskell 
start reduction pattern guards nested case expressions 
rst unfold multiple guards matches nested case expressions 
done keep translation manageable guards lists quali ers 
replace rule case gn en decls case case decls case case gn en completely new variable construction case indicates case expressions pattern matching just look guards 
expand list quali ers guard nested case expression 
case qn case case case qn completely new variable equations explain quali ers resolved boolean guards transformed conditionals local declaration just moved body generators transformed case expressions generating expression matched binding pattern 
case case decls decls case case remains reduce transformational patterns pattern guards 
done equation case case completely new variable implementation standard technology compilers generating ecient matching trees sets equations adapted straightforwardly accommodate pattern guards transformational patterns 
currently pattern guards fully implemented ghc transformational patterns implemented 
eciency issue little pressing pure pattern matching access functions called transformational pattern pattern guard may arbitrarily expensive 
example consider data absint pos int neg int absint int absint absint pos neg int int pos absint neg absint reasonably concise 
times absint called 
case pretty clear need called 
pos absint pos absint bs neg absint neg absint bs 
gets harder tell 
general may necessary know pattern match compilation algorithm compiler order reason precisely times absint called 
dicult expand pattern matching algorithm knowledge transformational patterns cases function complex expression pattern action ensure translation nested case expressions argument position pattern action invoked 
changes pattern matching algorithm pattern guards allow express sharing explicitly cases pos neg abs absint common de nition abs clear call absint 
clause 
example consider silly function absint view explanation views see section view absint int pos int neg int absint pos pos pos neg bit silly write pos pos abs absint share rst call absint second scope clause 
rely knowledge pattern compilation algorithm common subexpression elimination justify hopes calls absint 
transformational pattern form shared computations easier spot ensured extension pattern matching algorithm pos pos absint absint pos neg absint absint comparison views discussed pattern guards transformational patterns seen addressing similar goal views reconciling pattern matching data abstraction 
views proposed wadler ages ago subject concrete proposal haskell language extension :10.1.1.14.3532
consider example cartesian representation complex numbers polar view 
data complex cart float float view polar complex polar float float polar cart polar sqrt atan pole polar view function de nitions written polar representation patterns relying automatic application view transformation polar 
means possible assume particular representation data types function de nitions exposing knowing representation implementation 
note addition view transformation polar need function pole construct values view type 
views de ne view type ordinary data type view transformation function 
data polar polar float float polar cart polar sqrt atan natural ask views subsume pattern guards vice versa 
answer 
views subsume pattern guards 
views proposal points views simulate guards saw views similar purpose functionality applications pattern guards 
views give view single value guards allow arbitrary function calls combine scope values 
example matches just val lookup env var 
want view env var combination lookup 
views simply help 
views capable dealing data abstraction issue course 
conditional selector require view complete view type 
heavyweight 
example haskell compiler ghc data type called type 
type module ers function type type type function mixture predicate function type view argument result type 
views say view type type type fun arg res arg res type bit heavyweight new names compared re existing type 
reuse save de ning new types allows existing library functions types applied directly result 
quite unclear function regarded view 
example ghc function type type tyvar returns free type variables type 
regard specifying view type free variables type view type tyvar ty 
write type int length type int ty length ty view program simpler claim reverse 
point continuum functions regard views type functions predicates selectors 
extending language views undesirably forces programmer choose particular function best regarded view 
pattern guards force choice 
access function example ordinary expressions pattern guards 
pattern guards subsume views 
views allow treatment data type concrete data type far pattern matching concerned 
particular notation pattern matching concrete data types 
contrast transformational patterns extend patterns pattern actions 
views notationally little concise transformational patterns argue small notational di erence presents usage barrier views better suited promote data abstraction retaining pattern matching 
regard polar example views simply polar constructor pattern knowing view transformation applied automatically transformational patterns call polar function explicitly 
prefer write views polar polar pole transformational patterns polar polar polar polar polar argue accurately indicates may involved matching view compared ordinary pattern matching 
transformational patterns safely polar constructor see section 
summary believe pattern guard proposal simpler specify implement views gets expressiveness simply inaccessible views successfully reconciles pattern matching data abstraction albeit slightly compact notation views heavyweight de ning information extraction functions adt conceal computation takes place 
equational reasoning transformational patterns problems reasoning miranda laws views arise constructor type view pattern expression 
particular expression problematic 
suppose example constructor half int half view type half de ned divide argument 
view half int half int half half div de ne function half int half try reason replacing equals equals half true half due computational part half 
solution proposed burton cameron forbid view constructors half expressions 
works aware status constructor view constructor 
transformational patterns de ne plain data type function performing desired computation constructor half 
data half half int half half div half equations harmful happen computation explicit 
example valid conclude half half just data type constructor performing computation argument 
de nition essentially view original sense 
view computations give di erent de nition half int half half evident just equation half half half half expression 
additional requirement burton cameron implicitly approach just syntax transformational patterns 
hand possible transformational patterns equational reasoning 
explain helpful recall patterns example transformation expression happens steps rst structure examined obvious application constructor precondition current transformation example xs 
equation matches structure determined say xs substituted 
transformational patterns scheme follows 
suppose contains equation 
assumption proof replace expression 
course patterns choose rst possible match get sound transformation 
illustrate small example 
suppose de ned selection sort help function min ord extracts minimum list 
sort ord sort sort min sort prove correctness sort 
prelude function de ne predicate sorted lists follows 
sorted true sorted xs suppose know property min 
lemma min xs true easily prove lemma sorted sort true proof 
perform case analysis list argument sorted sort sorted true min select second equation sort sorted sort sorted sort induction sorted assumed true true due lemma 
pattern match failure rst class entity 
haskell pattern match failure considered local event dealt case expression dealt results unrecoverable error 
alternative general view failing pattern match raises exception say fail caught case expression 
treatment pattern match failure nicely exploited transformational patterns pattern matching failure pattern action caught able reach function equation 
section sketch possible extension lines 
regard section speculative rest 
rst example give de nition view version function power :10.1.1.14.3532
power int int int power power power power power functions halve argument match odd numbers mod div mod div partial de nitions application say number de ned yield program error propagates top level extended fail semantics pattern match failure raised caught power causes third equation tried 
example show transformational patterns possible pattern matching successfully graphs 
graph algorithms traditionally consider graphs monolithic blocks view re ected clumsy de nitions 
alternative proposed inductive view graphs recursive de nitions graph algorithms feasible graph empty constructed adding node edges predecessors successors 
node type node values graph type unlabelled graphs 
node context node list successors third tuple component list predecessors rst component type context node node node de ne empty graph constant function successively adding node contexts empty graph embed context graph graph note embed yields runtime error node inserted graph predecessor successor nodes exist graph 
function match locates context particular node graph 
match node graph context graph match de ned nodes contained law holds embed match function suc simply projects third component context give highly concise de nition depth rst search dfs node graph node dfs dfs vs match dfs suc vs dfs vs dfs vs arguments dfs list nodes visited graph searched result list nodes depth rst order 
note need data structure remembering nodes seen repeatedly removing contexts graph forget graph nodes visited far 
try revisit node leads match match failure causing dfs try third equation simply ignores current node 
semantics note catching pattern matching failure possible transformational patterns just reduced pattern guards 
provide independent semantics de nition 
possible way go de ne pattern matching haskell version accounts exceptions 
proposal exceptions giving precise semantics ecient implementation 
pattern match failure de ned context raise fail exception pattern matching catch fail exceptions select function equations 
proposal catching exceptions leads general non determinism 
see consider expression assume result di erent exceptions 
result 
avoid evaluation order de ne non deterministic choice return set exceptions raised 
proposal 
dealing exception sets checking particular exception re introduces non determinism 
framework fail exception think just checking exception occurred 
eliminates non determinism large degree case program diverge depending example platform larger context compiled 
consider expressions bot fail 
possibility de ne general behaviour transformational patterns current haskell framework 
problem face pattern match failure pattern action yield caught case expression containing transformational pattern 
cope performing source code transformation pattern actions wrap possible results just add default case returns 
perform pattern matching case rule dealing transformational patterns 
corresponding case equation easy give case case case just case completely new variables remains shown pattern actions lifted type 
give de nition follows structure expressions 
case expressions source possible pattern match failure wrapping just adding happens just 
cases lifting just recursively passed ignored 
particular constants constructors variables remain unchanged 
application abstraction case expressions obtain case fp case fp just problem approach separate compilation particular precompiled libraries general access de nition function pattern action lives separately compiled module 
case scheme breaks know function source code apply source code transformation 
summary section sketched speculative development pattern matching idea 
regard debatable additional power extended transformational patterns worth cost terms semantic complications loss separate compilation 
rst class pattern matching failure obviate need pattern guards fail step back function pattern matching process 
earlier proposals pattern guards transformational patterns described sections involve semantic compilation complications 
related rst extensions pattern matching types miranda approach programmer allowed add equations data type de nition act rewrite rules transform data type values canonical representation 
approach main problems rst applications di erent representations needed data types pattern matching conveniently see example polar vs cartesian representation complex values di erently rooted trees represent sets miranda laws prevent 
second laws cause problems equational reasoning 
prominent widely accepted extension pattern matching view mechanism rst proposed phil wadler adapted :10.1.1.14.3532
views di erent representations data type needed 
representation called view functions de ned map main data type view type vice versa 
views su er rst restriction miranda laws view transformations inverses leads partial de nitions causes problems equational reasoning due ambiguities 
reasoning problems rst solved burton cameron restrict view constructors patterns 
function needed anymore function need injective 
adopted view proposals 
okasaki de ned view concept proposal standard ml 
pays special attention interaction view transformations stateful computations possible ml 
demonstrated views easily simulated transformational patterns 
active destructors introduced allow de nition patterns called active patterns perform computations produce bindings match de nes active destructor pattern place matching process evaluated bindings produced producing new bindings nally active destructors extend capabilities views require syntactic overhead 
particular new notation needed typing patterns 
active destructors degree perform computations pattern guards transformational patterns access variables bound function equation consider highly useful feature 
active destructors simulated pattern guards transformational patterns 
example de ne function transformational pattern place active destructor construction introduced similar transformational patterns pattern matching function converted pattern composed patterns 
express pattern matching union types 
goal active patterns introduced enable matching speci representations data type values 
views map value view type canonical representation active patterns allow selection arbitrary 
idea specialised constructors data type values matched 
reorganisation intended yield representation suits current function de nition best 
regard preprocessing capabilities active patterns similar transformational patterns active destructors 
active patterns general active destructors allow limited ad hoc way passing additional parameters pattern functions described haskell speci arithmetic patterns requires extension typing notation 
performed independently leading 
active destructors computing functions access bindings pattern active patterns general active destructors pattern guards transformational patterns argument result type 
just views laws approaches mentioned far motivated combining pattern matching adts limited approaches driven speci applications context patterns give direct access arbitrary deeply nested sub parts terms similar tree transforming languages example 
particular algebraic free data types computations matched values possible 
value constructors provide facility abbreviate terms allow abbreviations expressions patterns 
computations possible matched values 
contrast pattern abstractions allow limited form computation aim generalise pattern matching far static analyses checking overlapping patterns exhaustiveness decidable 
di erent route pattern matching taken tullsen considers patterns functions type allows treatment patterns rst class objects particular possible write pattern combinators 
semantics patterns simpli ed considerably approach patterns language clumsy syntactic sugar called pattern binders 
nally compare described extensions proposal general point view 
quite easy straightforward pattern guard transformational pattern function de nition just put active destructor view proposal requires de nition pattern place 
cases prohibitive adding additional declaration justi ed say application just faster shorter concept 
example de nition function reverse view lists see requires ort de ne view type view transformations immediately written pattern guards xs transformational patterns reverse situation comparable function de nitions vs anonymous functions useful anonymous functions syntactically nicer apply de ned function :10.1.1.14.3532
aspect pattern de nitions pattern matching function pattern guard pattern action expressions 
di erence stressed proposal explicit computations take place patterns information hidden views active destructors 
far programming adts concerned hiding cases appropriate cases convenient explicit information computations de ning learning remembering di erent views 
introduced pattern guards transformational patterns er possibility preprocessing values matched patterns 
proposal covers generalises previous approaches pattern matching data types 
extension allows useful class programs written elegantly current version haskell 
required extensions existing languages minimal 
applies syntax implementation haskell easy 
fact pattern guards fully implemented ghc transformational patterns implemented 
syntax neat views computations happen explicit 
argued advantage patterns understanding programs equational reasoning 
proposal attractive general language design point view formulating recursive function de nitions design decisions arguments needed form recursive function application right hand side ii parameters left hand side brought required form 
traditional patterns closely related design decisions separated moving ii possibly distant block 
transformational patterns activities brought closer facilitates programmer focus view essential parts recursive de nitions 
ahndrich boyland call pattern matching extension pattern abstractions 
approach require naming pattern abstractions 
needed approach pattern guards transformational patterns viewed complementing landscape pattern matching extensions anonymous pattern abstractions 
chris okasaki anonymous reviewers helpful comments 
aitken reppy 
value constructors 
acm workshop ml applications pages 
buneman pierce 
union types semistructured data 
technical report ms cis university pennsylvania 
burton cameron 
pattern matching data types 
journal functional programming 
burton meijer sansom thompson wadler 
views extension haskell pattern matching 
haskell org development views html 
erwig 
inductive graphs functional graph algorithms 
journal functional programming 
appear 
erwig 
active patterns 
th int 
workshop implementation functional languages lncs pages 
ahndrich boyland 
statically checkable pattern abstractions 
nd acm int 
conf 
functional programming pages 
heckmann 
functional language speci cation complex tree transformations 
european symp 
programming pages 

context patterns haskell 
th int 
workshop implementation functional languages lncs pages 
okasaki 
simple ecient purely functional queues deques 
journal functional programming 
okasaki 
views standard ml 
acm workshop ml applications pages 
pe na nez 
new look pattern matching data types 
st acm int 
conf 
functional programming pages 
peyton jones reid hoare marlow henderson 
semantics imprecise exceptions 
acm conf 
programming languages design implementation pages 
peyton jones hughes report programming language haskell 

queinnec 
compilation non linear second order patterns expressions 
nd int 
symp 
programming language implementation logic programming lncs pages 
thompson 
functions program veri cation miranda 
science computer programming 
tullsen 
class patterns 
nd int 
workshop practical aspects declarative languages lncs pages 
turner 
miranda non strict functional language polymorphic types 
conf 
functional programming computer architecture lncs pages 
wadler :10.1.1.14.3532
views way pattern matching cohabit data abstraction 
th acm symp 
principles programming languages pages 

