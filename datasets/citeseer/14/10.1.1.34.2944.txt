design patterns development multi agent systems kostas matthew hunter hu department computer science university essex park colchester sq uk email essex ac uk essex ac uk essex ac uk 
developers ai software normally faced design challenges involving robustness efficiency extensibility 
challenges higher level independent application specific requirements 
design patterns successfully adopted tackle issues rarely documented 
consequently knowledge remains hidden minds developers buried complex system source code 
primary contribution describe design methodology applied single multi agent systems 
mainly illustrates design patterns ease development increase efficiency systems 
example essex wizards multiagent system won third prize robocup simulator league competition 
keywords multi agent systems agent architecture design patterns robot world cup 

research ai multi agent systems mas advances complexity development systems grows rapidly developers normally faced software design challenges involving robustness efficiency extensibility 
challenges higher level independent application specific requirements 
similarities different forms ai software general focus mas software inherent accidental complexities 
inherent complexities stem fundamental challenges developing mas software 
instance mas prohibitively complex handcrafted decision making approaches 
cases machine learning techniques greatly improve decision making process agent 
addition operation agents important challenge mas tambe 
operation introduces challenges communication stone role variation coradeschi agents 
adversarial domains additional challenge opponent modelling riley 
accidental complexities associated mas software come limitations conventional tools techniques 
example low level application programming interfaces apis sockets tedious error prone 
source accidental complexity arises widespread algorithmic design develop mas software 
algorithmic design yields software architectures customised rapidly meet changing application requirements schmidt 
object oriented oo techniques provide principles methods tools significantly reduce complexity cost developing software 
main benefits oo arise emphasis modularity reusability extensibility 
design pattern represents recurring solution software development problem particular context gamma 
patterns capture designs software architectures systematic format readily comprehended developers schmidt 
oo techniques design patterns adopted design mas software robotic soccer team essex wizards order reduce development time achieve stable efficient system 
creation robotic soccer robot world cup initiative robocup attempt foster ai intelligent robotics research providing standard problem wide range technologies integrated examined kitano kitano 
fields covered include multi agent collaboration strategy acquisition real time planning reasoning sensor fusion strategic decision making intelligent robot control machine learning 
complex real time environment presence teammates adversaries provides numerous challenges development successful multi agent system 
remainder organised follows section briefly describes difficulties designing multi agent system shows proposed agent architecture 
section illustrates multi threaded mediator pattern 
experimental results section 
designing multi agent system agent system viewed perceiving environment sensors acting environment effectors russell 
multi agent system collection team agents 
order create coherent team agents entire design process agent architecture built team mind 
collaboration designed systems start patched grosz 
design process issues robustness reusability extensibility considered 
shown gamma design patterns help potential developer deal number problems including decomposing system objects determining granularity specifying interfaces implementation 
explaining design patterns essex wizards multi agent system brief description proposed agent architecture required 
detailed description agent 
mentioned earlier robotic soccer domain provides real time environment agent required bounded response times order achieve acceptable levels performance 
achieve performance essex wizards multithreaded approach stages sense think act cycle executed concurrently 
shown form concurrent execution guarantees bounded response times improves performance agent 
level agent contains different modules agent sensors actuators set predefined parameters affect thinking process decision module representation world model shown 
agent receives information regarding environment sensors decides best action depending current state sends action actuators back environment 
solid arrows represent dependence relationships modules 
specifically sensors responsible receiving newest input environment updating agent world model 
newest sensory input affects behaviours module 
world model holds probabilistic representation environment 
significant importance hidden state sensors provide complete representation current state environment 
parameters hold information regarding agent role team certain features specific particular agent stamina home position 
modules directly affect decision process environment agent agent architecture sensors behaviours parameters world model actuators execution threads shared data constants behaviours module agent 
behaviours module responsible deciding best course action sending action actuators 
actuators turn send action back environment 
due perception action asynchronous robocup domain action sent behaviours module internally updates world model predicted effects action 
helps agent maintain todate representation environment case sensory data delayed missing 
addition complexity building module normally multiple people involved implementation 
circumstances integration testing challenging task 
proposed design modular highly flexible scalable 
modules described represented various objects fully object oriented design 
due tight coupling independent components agent design allow easy modification addition removal various modules provide flexible interface inter communication objects 
finding acceptable solution problem trivial task 

multi threaded mediator pattern known mediator design pattern gamma tackle problem 
idea mediator pattern define module encapsulates sets modules interact 
mediator promotes loose coupling modules agent communicate explicitly referring 
multi threaded nature essex wizards team extension known mediator pattern 
shared data world model protected accidental reads writes communication links synchronised 
section briefly describes mediator pattern presents extensions added order build design pattern operate multi threaded environment 
breaking agent individual modules encourages distribution behaviour modules 
distribution result structure connections various modules 
partitioning system objects modules normally enhances reusability having interconnections tend reduce 
numerous inter connections difficult module support 
addition making significant changes behaviour system unnecessarily difficult behaviour distributed modules 
problems avoided encapsulating collective behaviour separate mediator module shown 
mediator controls ordinates interactions various modules agent 
mediator acts communication hub modules keeping referring reducing number interconnections 
module required know mediator communication modules done indirectly channel 
additional benefit comes localisation behaviour module 
system easily change behaviour modifying replacing just mediator module 
mediator design pattern promotes loose coupling reduces inter connections modules tends control system 
words trade complexity module interaction complexity mediator 
object encapsulate communication modules mediator complex individual component agent 
potential developer careful order prevent mediator monolithic hard maintain 
mentioned earlier essex wizards multiagent system multi threaded implementation 
traditional mediator pattern capable behaving intended environment 
assume instance sensors module just received new information started updating world model 
update place behaviours module operates different thread try read contents world model 
update completed world model contains date information part environment older information rest environment 
cases result sub optimal incorrect actions taken 
needless say synchronisation protocol needs integrated current mediator pattern 
common general way synchronise data access threads ensure read write operations shared data mutually exclusive 
posix threads api essex wizards implementation provides mutual exclusion special form edsger dijkstra semaphore called mutex 
mutexes allow thread lock specific data items thread operate time 
example mentioned sensors module lock contents world model update place 
result behaviours module put halt update finished sensors unlocked specified mutex 
schematic representation seen 
enable mediator pattern function correctly multi threaded environment similar synchronisation integrated various communication channels mediator specified modules 
trade successful synchronisation protocols real time responsiveness 
various threads halted important lock mutexes minimum time required read write operation complete occur absolutely necessary 
current implementation synchronisation takes place mainly mediator just control passed module 
way operations modules atomic synchronisation transparent individual components agent 
needless say cases mediator involved operation synchronisation shared data needs applied 
cases rare occur certain operations need take place single module need communication modules 
cases mediator directly involved synchronisation take place module 
agent mediator module module module mediator pattern 

results years significant progress fields ai multi agent systems 
hardware better faster advanced complex systems developed 
growth hardware ai software experienced rapid growth terms complexity functionality performance 
developers ai software face similar design challenges involving robustness efficiency extensibility 
challenges higher level independent application specific requirements 
shown objectoriented techniques design patterns order reduce complexity cost developing multi agent system software 
main benefits approach arise emphasis modularity reusability extensibility 
numerous patterns implementation essex wizards multi agent system illustrated mediator pattern multithreaded environment 
mediator pattern results reduction inter connections various modules agent provides simpler highly flexible communication interface 
multi threaded mediator multi agent system development enhanced variety design patterns 
fully utilise benefits object oriented techniques design patterns complex simulated environment chosen robotic soccer domain 
proposed architecture design successfully implemented essex wizards multi agent system 
essex wizards participated robocup competition international event participants universities world 
wizards achieved combined score opponents finished third place 
university essex financial support project providing research promotion fund ddp 
programming posix threads harlow addison wesley coradeschi coradeschi karlsson role decision mechanism teams reactive coordinating agents robocup robot world cup soccer games conferences springer verlag lecture notes ai lnai 
schmidt object oriented application frameworks communications acm vol 
october 
world model mutex time thread behaviours world model mutex operation thread sensors thread locks thread unlocks thread locks thread unlocks thread waits gamma gamma helm johnson vlissides design patterns elements reusable object oriented software reading ma addison wesley 
grosz grosz collaborative systems ai magazine 
kitano kitano robocup robot world cup initiative proceedings st int 
conf 
autonomous agent agents marina del ray acm press 
kitano kitano tambe stone veloso coradeschi osawa matsubara noda asada robocup synthetic agent challenge proc 
international joint conference artificial intelligence ijcai 
hu reinforcement learning operation simulated multi agent system proc 
international conference intelligent robots systems iros korea october 
hu multi threaded approach simulated soccer agents robocup competition international joint conference artificial intelligence ijcai workshop robocup 
riley riley classifying adversarial behaviours dynamic inaccessible multiagent environment undergraduate senior thesis carnegie mellon university 
russell russell norvig artificial intelligence modern approach prentice hall series ai new jersey prentice hall 
schmidt schmidt handbook programming languages vol 
edited peter macmillan computer publishing 
stone stone veloso task decomposition dynamic role assignment low bandwidth communication real time strategic teamwork appear journal artificial intelligence 
tambe tambe flexible teamwork journal artificial intelligence research vol 
pp 

