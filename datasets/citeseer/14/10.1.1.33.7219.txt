journal software testing veri cation reliability 
appear wiley copyright test data generation genetic algorithms roy department computer science clemson university clemson sc usa cs clemson edu mary jean harrold department computer information science ohio state university columbus oh usa harrold cis ohio state edu robert peck department computer science clemson university clemson sc usa cs clemson edu presents technique uses genetic algorithm automatic test data generation 
genetic algorithm heuristic mimics evolution natural species searching optimal solution problem 
test data generation application solution sought genetic algorithm test data causes execution statement branch path de nition pair program test 
test data generation technique implemented tool called tgen parallel processing improve performance search 
experiment tgen random test data generator called random implemented 
tgen random experiment generation test data statement branch coverage programs 
keywords 
software testing test data generation genetic algorithms 
software testing expensive component software development maintenance 
particularly labor intensive component testing process generation test data satisfy testing requirements 
testing requirement input cause execution particular statement generation techniques attempt nd program input satisfy testing requirement 
automation test data generation important step reducing cost software development maintenance 
number test data generation techniques automated 
random test data generators select random inputs test data distribution 
structural path oriented generators typically program control ow graph select particular path technique symbolic evaluation generate test data path 
goal oriented test data generators select inputs execute selected goal statement irrespective path taken 
intelligent test data generators rely sophisticated analyses code guide search new test data 
weaknesses techniques inhibited widespread generation test data 
random test data generator may create test data information test requirement incorporated generation process test data generator may fail nd test data satisfy requirement 
path oriented test data generator rst identi es path test data generated path may infeasible test data generator may fail nd input traverse path 
intelligent approach may analysis accurate generate new test data quickly analysis required success variety programs may quite complex may require great insight part designer test data generator anticipate di erent programming situations 
presents goal oriented technique automatic test data generation uses genetic algorithm guided control dependencies program search test data satisfy test requirements 
genetic algorithm conducts search constructing new test data previously generated test data evaluated candidates 
algorithm evaluates candidate test data guides direction search program control dependence graph 
reduce execution time potentially lengthy search prototype implementation uses multiple processors balances load automatically prevent processors getting locked time consuming loops 
main bene approach combines salient features random goal oriented intelligent test data generators generate test data quickly focus direction 
new test cases generated applying simple operations existing test cases judged potential satisfy test requirements 
operations simple new test cases generated quickly eciently 
existing test data judged having potential search focused random 
success approach depends heavily way existing test data measured empirical results suggest control dependence graph provides ective way perform measurement 
bene approach potential scale large software systems 
approach handle test data generation programs multiple procedures 
evaluation test data weighted manner encourages generation test data cover test requirements embedded nested procedure calls 
approach designed parallel execution 
test requirements distributed processors user available 
approach automatically load balances continue nitely searching test data infeasible path processor unsuccessfully met test requirement predetermined time period instructed abort search start new search di erent test requirement 
features user conduct simultaneously independent searches test data satisfy di erent test requirements 
technique useful regression testing regression test suite 
regression test suite may part initial set test data 
additionally approach focused speci test requirements test requirements part new source code need targeted 
section background genetic algorithms control dependence graphs 
section genetic algorithm test data generation 
implementation algorithm results empirical study implementation discussed 
technique compared related 

background section gives overview genetic algorithms control dependence graphs 
genetic algorithms genetic algorithm optimization heuristic mimics natural processes selection mutation natural evolution evolve solutions problems solution spaces impractical traditional search techniques branch bound optimization techniques linear programming 
rst described holland genetic algorithms applied variety learning optimization problems 
genetic algorithm typically begins random population solutions chromosomes recombination process mutation operations gradually evolves population optimal solution 
obtaining optimal solution guaranteed challenge design process maximize probability obtaining solution 
rst step selection solutions current population serve parents generation solutions 
selection requires solutions evaluated tness parents solutions closer optimal solution judged higher 
solutions evaluated selected manner biased solutions higher tness values 
reason bias solution assumed composed components genes 
selecting solutions parents increases chances spring inherit genes selection biased better solutions worst members population chance selected parents poor solution may genes may bene population 
selection parents recombined mutated produce spring 
resulting solutions form new population cycle repeated 
evaluation selection recombination mutation may performed times genetic algorithm simple possible 
selection recombination mutation generic operations genetic algorithm studied literature 
evaluation problem dependent relates directly structure solutions 
major design decisions development genetic algorithm involve structure solutions method evaluation 
design decisions include size population frequency recombination relative mutation dynamic nature frequencies type population replacement 
decisions small trial runs initial genetic algorithm 
control dependence graphs control dependence program de ned terms program control ow graph postdominance relation exists nodes control ow graph 
control ow graph nodes represent statements edges represent ow control statements edge control ow graph means program control ow facilitate analysis control ow graph augmented unique entry exit nodes 
control ow graph nodes goldberg gives theory genetic algorithms davis provides clear guide handbook gives comparative study genetic algorithms optimization heuristic called simulated annealing 
entry entry 



program example integer 
read endif endif example 
print exit program example left control ow graph cfg center control dependence graph cdg right 
graph directed path exit including exit contains statements nodes control ow graph control dependent exists directed path excluding control dependence graph nodes represent statements edges represent control dependencies statements edge control dependence graph means control dependent example depicts program example left control ow graph center control dependence graph right nodes graphs labeled statement number corresponding statement 
control ow graph node postdominates nodes exit nodes postdominate nodes graph node postdominates nodes entry node postdominates entry 
node control dependent node control dependent nodes control dependent entering program 
acyclic path control dependence graph root graph node graph contains set predicates satis ed input causes statement associated node executed path called control dependence predicate path 
example set predicates tg constitutes control dependence predicate path statement 
unstructured transfers control goto continue break cause occurrence control dependence predicate path statements transfers 
number control dependence predicate paths generally small 
genetic algorithm test data generation shows generatedata algorithm automatic test data generation 
generatedata uses genetic algorithm search test cases satisfy desired testing requirements 
solution chromosome set test data list input values 
algorithm evaluates test data executing program test data input recording predicates program execute test data 
list predicates compared set predicates control dependence predicate paths node representing current test requirement target search 
test data algorithm generatedata input program instrumented version program tested cdg control dependence graph program initial initial population test cases list test requirements mark output final set test cases list test requirements mark declare set predicate paths cdg scoreboard record satis ed test requirements set test cases target test requirement test case generated function returns true maximum number attempts single target exceeded function returns true time limit exceeded false step initialization set create create initialize scoreboard generate step generate test cases unmarked select unmarked target target marked compute tness values sort tness select parents generate selected members execute program member update scoreboard mark re ect test requirements satis ed endwhile endwhile step clean return final test cases satisfy return final algorithm automatically generate test cases program 
tness evaluation depends number predicates common predicates control dependence predicate path target solution covers greatest number predicates highest tness evaluation 
generatedata biases selection parents generation test cases tness evaluation uses recombination mutation generate new population test cases 
genetic algorithm generatedata atypical algorithm search single optimal solution 
generatedata multiple goals test requirement target search goal 
search goal generatedata changes test requirements satis ed 
evaluation function remains unchanged set test data re evaluated new test requirement covered 
tness evaluation set test data changes test requirement changes test data may valuable attempting cover test requirement may poor candidate attempting cover test requirement 
generatedata takes input program instrumented version program tested cdg control dependence graph program initial initial set test data possibly empty set test requirements satis ed 
local variables scoreboard target functions generatedata outputs final set test data list satis ed marked test requirements 
step generatedata rst step generatedata lines initialization preprocessing step includes computation initialization scoreboard initialization 
statement program generatedata generates acyclic paths contain predicate nodes lie statement node entry node cdg 
generatedata creates scoreboard records satis ed 
statement branch coverage example scoreboard may bit vector bit initially false set corresponding statement branch satis ed test data 
second example execution frequency statements branches desired scoreboard may integer vector element initially zero incremented corresponding statement branch satis ed test case 
generatedata generates rst adding initial 
additional test cases required provide greater diversity algorithm randomly generates test cases subject constraints imposed user adds 
diversity population gives generatedata wider variety test cases select diversity population typically translates better performance genetic algorithms 
step generatedata second step generatedata lines outer loop generates test cases 
account possibility infeasible test requirements statements branches loop iterates test requirements marked returns true 
reaching time limit search test case prove unmarked requirements infeasible suggest possibility 
execution generatedata unmarked testing requirements manually inspected 
test requirement marked test case generated covers test requirement test requirement identi ed infeasible 
inner loop lines focuses single unmarked target selected unmarked test requirements 
loop iterates target satis ed test case returns true 
generatedata evaluates test case relative target line computes tness value test case test contains predicates target test generatedata assigns test higher tness value test algorithm sorts tness values line 
control dependence graph evaluation tness test cases bears discussion 
intelligence genetic algorithm seeking cover target derived control dependence graph 
premise developing test case cover target better statement branch path infeasible input exists cause execution statement branch path 
done test cases come close covering target random test cases test cases near target 
generatedata test case comes close satisfying target high number predicates common target 
test case high number predicates common target satis es conditions required execution target 
test case comes close covering target portions test case caused execution near target 
recombining test cases algorithm better chance random approach producing test case covers target 
believed control dependence graph reason generatedata signi cantly outperforms random programs case study study discussed section 
evaluations compare generatedata test data generation strategies needed evaluate ectiveness approach 
computing tness test case generatedata selects test cases parents line generatedata biases selection test cases highest tness values 
test case high tness value high probability selected may selected multiple times test case low tness value small possibly zero probability selected may selected 
generatedata assigns probabilities tests algorithm 
test case tness value probability assigned number test cases population 
note 
generatedata generates random number selects test case probability selecting arbitrary test case exactly algorithm repeats selection process parents generate 
parents required recombination produces spring 
parent required mutation produces spring 
number parents required operation equals number spring produced total number parents required size 
selection process generatedata generates pairing selected parents recombination considering individually mutation line 
recombination rst method generating new test cases takes parent test cases produces children primary method producing new test cases 
speci recombination method study point crossover 
represent input values selected test cases generatedata selects random integer inclusive 
integer generated children produced am am am 
children added new population 
initial implementation generatedata described section point crossover recombination 
mutation second method generating new test cases lets new chromosomes introduced population necessary prevent stagnation freezing population 
mutation values test cases limited values generated setup 
mutation takes selected test cases generates number replaces value input variable am randomly generated value 
mutation process creates new single child test case generatedata adds 
relative frequency mutation usually lower recombination 
current implementation described section frequencies table test cases statement traces example test case input data statement trace mutation recombination respectively 
point crossover mutation simple operations characteristic genetic algorithms 
strategy employ fast inexpensive operations focused covering target 
operations fast simple performed times increasing chances target covered 
nal step inner loop generatedata executes program member line updates scoreboard accordingly 
test case satis es target algorithm marks target inner loop terminates algorithm attempts nd new target 
assigned algorithm attempt satisfy target 
generatedata fails nd test case satisfy target algorithm temporarily abandons target selects test requirement new target 
entire search continues test requirements met time limit exceeded time outer loop terminates 
step generatedata step algorithm assigns union test cases satis ed final line returns final line 
example illustrate operation generatedata consider program example cdg shown 
suppose point processing generatedata contains test cases shown table 
inspection statement traces test cases reveals covers statements statement 
generatedata selects statement fg search 
loop algorithm rst computes tness values test cases 
tness values test cases respectively entry ignored predicate paths predicates common target share predicates target 
tness values ought higher paths associated test cases predicates common target test cases 
test cases stand better chance contributing parents generation test cases technique described assigning probabilities algorithm assigns probabilities respectively test cases 
generatedata selects parents 
suppose algorithm selects test cases order recall test case may selected multiple times 
recombining rst parents crossover yields mutating selected test cases yields 
ft satisfy target 
analysis major components contribute complexity generatedata time complexity random approach discussed 
variables analyses number statements original program population size execution time instrumented program depth nesting conditionals loops source code number testing requirements maximum attempts process allowed generate test cases target length bytes test 
time complexity generatedata dominated initialization set lines loop generates tests lines 
initialization set consists generation requires control dependence graph program generation scoreboard generation initial population 
rst step time complexity max 
loop generates tests evaluates test tness generates updates scoreboard time complexity 
loop sorts log executes instrumented program test 
iteration inner loop max log 
number times inner loop executed ranges maximum total execution time inner loop complexity max log 
outer loop lines executes test requirements marked time limit exceeded 
means outer loop iterate zero times exact number varies run run 
time limit set user serves upper bound execution time step 
generatedata random approach requires set sorting population 
execution time random takes execution instrumented program determine test requirements met 
generatedata user may set upper bound execution time 
space complexity generatedata depends major structures uses 
space may considered constant rarely greater structure grows 
scoreboard 
statement coverage number statements branch coverage number branches 
statement branch coverage scoreboard grows 
path coverage number paths covered 
path coverage growth scoreboard depends number paths generated 
case study determine potential ectiveness generatedata random approach prototype generatedata provides statement branch coverage implemented discussion describes test data generation statement coverage 
prototype experiment involving small set programs performed 
section describes implementation experiments 
initial scoreboard tests user map vector target population initial scoreboard host setup program source map program execution dependence control graph node coverage vector instrumented executable source program program source instrumented source program executable instrumented multiple node processes parallel 
system call test aristotle compiler tgen data ow diagram implementation tgen 
prototype implementation gives data ow diagram architecture implementation generatedata called tgen 
tgen speci processes shown inside large circle gure 
tgen prototype implementation generatedata aristotle analysis system generate program map graph instrumented version program instrumented program compiled executable instrumented version program stored le system 
tgen contains major types components setup initializes system host manages dispatching test data generation jobs node components node implements tgen algorithm generate new tests execution executes program test cases generated associated node 
particular implementation tgen contains single setup host component may multiple nodes executing processor 
setup component tgen inputs program map information generates initial scoreboard map vector charts locations relationships variables predicates program 
setup component inputs control dependence graph program computes statement nodes program 
user provides initial set test cases setup reads test cases passes initial population node component 
host component tgen acts manager test generation 
component inputs map vector initial scoreboard identi es outputs targets satis ed 
node component inputs initial population setup target host 
node component works covering target receives host 
node performs task executing tgen creating evolving populations constantly striving cover target 
version tgen generate test cases statement branch coverage 
node returns results host target covered maximum number attempts allowed exceeded 
node outputs results form scoreboard summarizes attempts satisfying target 
host collects merges gets node processes targets covered time limit exceeded 
targets remain nodes receive additional targets cycle repeats 
node process issues operating system call cause execution executing instrumented program 
communication node executing program accomplished unix named pipes 
node process passes system call test case execution loads instrumented executable source program executes program returns information regarding source program statements covered 
tgen achieves parallelism running multiple node processes simultaneously network sun workstations running sunos solaris operating systems 
user determines number workstations system number limited number workstations available local network 
node process runs separate workstation software package called parallel virtual machines pvm provides communication synchronization software tools required allow host nodes 
parallel execution tgen convenience essential 
advantage parallelism reduction execution time may factor equal number workstations allowing user run multiple runs batch mode network usage low 
tgen depicted just easily implemented single processor 
tgen currently handles statement branch coverage minor modi cations provide path de nition coverage 
path coverage target speci path predicates program 
facilitate path coverage scoreboard tgen altered entry represents set statements single statement 
entry scoreboard represents sets statements new objective tgen target statement sets individual statements 
approach de nition coverage similar path coverage approach 
tgen extended handle automatic generation test data programs multiple procedures 
suppose procedure calls procedure procedure calls procedure statements procedure covered 
tgen proceeds original algorithm slight modi cation evaluation function 
test case evaluation tness algorithm nds test case covers call site statement increases test case evaluation obtained control dependence graph predetermined value multiplied number marked statements covers 
change method evaluation test case causes test cases execute call site higher evaluation 
furthermore test cases execute call sites evaluated higher 
higher evaluations test cases translate greater probability selection 
population test cases tend contain test cases execute letting tgen statements interest empirical results determine potential ectiveness tgen random approach case study performed programs table gives information programs 
subject program table lists number lines code cyclomatic complexity short description program 
table subject programs study 
lines cyclomatic programs code complexity description program bub array integers bubble sorts array find array index places elements equal left elements greater equal right mid integers determines middle value bisect epsilon computes sqrt epsilon bisection method integers representing weights balls determines weights balls relative integers representing possible lengths triangle sides determine type triangle table results tgen random runs programs bisect program generator runs mean median mode stddev min max range bisect tgen random tgen random tgen statement random tgen branch random subject program tgen runs random runs performed 
generate test cases statement coverage branch coverage remaining programs generate test cases statement coverage 
results experiments subject programs bub find mid virtually identical tgen random statement coverage achieved immediately 
code involve nested conditionals predicates conditionals loops easily satis ed code programs straight line 
tgen achieved statement coverage initial population 
random achieved similar results 
results experiments programs bisect di erent table summarizes results 
tgen achieved statement coverage bisect iterating average times equivalent generating 
random achieved statement coverage bisect iterating average times 
produce fair comparison random designed randomly generate sets test cases iteration size population tgen 
median mode random higher tgen 
summarizes graphically results experiment bisect tgen top random bottom 
graph horizontal axis gives number iterations required run 
left vertical axis gives frequency run occurred 
sum heights vertical bars equals 
right vertical axis gives cumulative frequency percentage runs 
total runs tgen required iterations achieve coverage bisect reading right vertical axis runs required fewer iterations 
tgen bisect random bisect runs tgen random bisect comparison random achieve coverage fewer iterations 
half random runs required iterations achieve full coverage 
cumulative curve random shifted right indicating takes greater ort random achieve goal coverage 
di erences results greater 
table shows tgen required average iterations achieve coverage compared iterations random 
median mode values similar 
horizontal axes identical graph tgen ranges graph random ranges 
tgen runs completed iterations 
contrast best random run required iterations runs requiring iterations 
random runs completed fewer iterations 
di erences results greater 
table shows tgen required average iterations compared iterations random 
shows random tgen random runs tgen random runs completed iterations rest required iterations greater requiring iterations 
contrast tgen runs completed iterations 
table shows results tgen random runs attempting branch coverage results similar statement coverage runs tgen requiring average iterations random requiring average iterations 
results show source programs complexity tgen outperforms random number runs times dramatically 
source programs little complexity tgen random perform identically achieving coverage immediately 
tgen performs better random source code contains nested conditionals nested loops predicates dicult satisfy 
tgen random runs tgen random related researchers investigated optimization techniques test data generation 
jones developed genetic algorithm test data generation branch coverage 
control ow graph represents iterations loop representation loop speci ed number times control ow graphs acyclic 
program instrumented executes test case records branches reaches tness test case 
tness function uses branch value value branch condition determine tness test case 
authors implemented approach performed experiments number small programs 
approach uses branch information evaluate tness function uses control dependence graph tness evaluation precise tness evaluation jones approach 
see consider control ow graph 
suppose test cases path control ow graph 
furthermore suppose node target search 
approach higher tness predicate common predicate path target node 
jones approach low tness test case executes target siblings control ow graph fact closer target incorporated tness calculation 
michael approach implementation korel function minimization approach test data generation genetic algorithm 
korel applied gradient descent nd test data caused branch function take negative value branch functions developed value negative correct branch selected path particular target 
ferguson korel added chaining algorithm handle cases function minimization applied branches booleans non arithmetic conditions gradient descent method minimization fails 
goal test data generation approach stated authors cover branches program means code locations ultimately reached infeasible 
delay attempts satisfy certain condition test cases reach condition 
technique advantages michael technique 
control dependence graph identify predicate paths target test case lets algorithm quickly eciently applying function minimization compute tness test case 
second approach require coverage test requirements program 
approach generate test data single multiple sets targets useful applications regression testing 
tracey optimization technique simulated annealing generate test data performed small experiments 
state compare approach genetic algorithms require implementation genetic algorithm approach 
approaches implemented 
data compare eciency ectiveness simulated annealing approaches genetic algorithm approaches 
develop implementations experiment simulated annealing genetic algorithm approaches test data generation 
presents generatedata algorithm automatic generation test data program 
generatedata uses search heuristic called genetic algorithm directed control dependence graph program 
simplicity genetic algorithm direction provided graph combine produce ective tool test data generation 
parallel processing employed implementation generatedata additional computational power speed possibly lengthy search 
currently prototype tgen implemented statement branch coverage 
results experiments tgen implementation algorithm generatedata study show programs little complexity tgen random provide statement branch coverage immediately 
programs complexity tgen outperforms random times signi cantly 
heart success tgen control dependence graph direct search test cases 
di erent points time execution implementation targets di erent test requirements currently statements branches eventually paths de nition pairs uses control dependence graph help form new test cases 
procedure may superior random methods generating test cases possibly goaldirected methods require time consuming analyses source code generate new test cases 
parallel processing improved execution time linearly 
tgen designed distribute time consuming task executing instrumented program single test case processors available 
manner distribution round robin automatically balances total load 
tgen useful regression testing particularly original test suite available 
tgen allows user target coverage new modi ed sections code instructing tgen ignore sections tested 
targeting code concentrates tgen full attention computing power section code interest 
furthermore original test suite may part initial population bene cial original test suite contains variety test cases cover requirements original program 
test suite genetic material tgen 
outlined ways extend tgen provide path de nition coverage 
path de nition coverage restated problems covering sets statements tgen approach applied 
outlined straightforward way tgen programs multiple procedures 
possible ease tgen focus speci sections code 
tgen evaluation function modi ed give greater weight test cases cover calls procedures interest 
tgen ignore majority code test cases execute procedure analyzed 
generatedata represents potentially powerful approach area automatic test data generation 
power lies fact generation new test cases simple goal directed 
results preliminary 
generatedata tested programs results promising experimentation done conclusive statements 
learned strengths weaknesses tgen metric applied program predict success application tgen program developed 
probable generatedata real potential generating test data small programs described 
tgen real strength working large programs particularly programs multiple procedures 
programs guided search capability tgen approach fully utilized 
possibility couple tgen possibly exhaustive search techniques see cooperation di erent search algorithms possible 
implementation tgen extended handle test data generation multiple procedures 
implementation extended allow path de nition coverage 
boyer levitt 
select formal system testing debugging programs symbolic execution 
proceedings international conference reliable software june 

chang cross carlisle brown 
framework intelligent test data generators 
journal intelligent robotic systems theory applications july 
clarke 
system generate test data symbolically execute programs 
ieee transactions software engineering september 
davis 
genetic algorithms simulated annealing 
morgan kaufmann 
davis 
handbook genetic algorithms 
van nostrand reinhold new york 
demillo utt 
constraint automatic test data generation 
ieee transactions software engineering september 
ferguson korel 
chaining approach software test data generation 
acm vol 
pages january 
ferrante ottenstein warren 
program dependence graph optimization 
toplas vol 
pages july 
jones sthamer 
automatic structural testing genetic algorithms 
software engineering journal september pp 

geist beguelin dongarra jiang manchek sunderam 
pvm parallel virtual machine users guide tutorial networked parallel computing 
mit press cambridge ma 
ghezzi jazayeri mandrioli 
fundamentals software engineering 
prentice hall englewood cli nj 
goldberg 
genetic algorithms search optimization machine learning 
addison wesley reading massachusetts 
harrold rothermel 
aristotle system research development program analysis tools osu tr ohio state university march 
holland 
adaptation natural arti cial systems 
ann arbor university michigan press 

symbolic testing dissect symbolic evaluation system 
ieee transactions software engineering july 
korel 
automated software test data generation 
ieee transactions software engineering august 
michael mcgraw schatz walton 
genetic algorithms dynamic test data generations 
technical report may 
mills dyer linger 
cleanroom software engineering 
ieee software september 
ramamoorthy ho chen 
automated generation program test data 
ieee transactions software engineering december 
th 
statemate statistical software testing 
acm sigsoft proceedings international symposium software testing analysis software notes pp 
june 
tracey clark mander 
automated program flaw finding simulated annealing 
acm sigsoft proceedings international symposium software testing analysis march 
voas miller 
predicting faults hide testing 
ieee software march 

