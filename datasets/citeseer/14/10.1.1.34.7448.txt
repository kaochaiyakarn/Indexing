representing action change logic programs michael gelfond department computer science university texas el paso el paso tx vladimir lifschitz department computer sciences department philosophy university texas austin austin tx represent properties actions logic programming language uses classical negation negation failure 
method applicable temporal projection problems incomplete information reasoning past 
proved sound relative semantics action states transition functions 
extends eshghi kowalski evans apt bezem representing properties actions logic programming languages negation failure 
goal overcome limitations earlier 
existing formalizations action logic programming adequate simplest kind temporal reasoning temporal projection 
temporal projection problem description initial state world properties actions determine world look series actions performed 
existing formalizations temporal projection cases description initial state complete 
reason formalizations semantics logic programming automatically apply closed world assumption predicate 
interested temporal reasoning general kind values fluents situations goal derive facts values fluents 
temporal projection class reasoning problems includes instance cases want information current state world fluent may depend situation instance location moveable object :10.1.1.85.5082
particular propositional fluents assertions true false depending situation 
answering questions past 
view logic programming accepted strictly declarative 
adequacy representation body knowledge logic programming language means adequacy respect declarative semantics language 
fact language extended logic programs subset system default logic viewed development approach temporal reasoning nonnormal defaults 
possibility logic programs proposed automation temporal reasoning program transformations demonstrated forthcoming 
parts may general interest 
introduce simple declarative language describing actions called traditionally ideas representing properties actions classical logic nonmonotonic formalisms explained specific examples yale shooting problem 
competing approaches evaluated compared terms ability handle examples 
propose supplement examples different method 
particular methodology representing action formally described translation subset superset possible way represent reasoning past treat fundamentally different temporal projection interpret explanation abduction 
approach symmetric treat forms reasoning deductive 
target language instance language classical logic circumscription logic programming language 
method describing properties actions logic programming translation language extended logic programs soundness main technical result 
counterexample showing translation incomplete 
possible way achieving completeness discussed section 
second proof main theorem depends relationship stable models may interesting part general theory logic programming :10.1.1.24.6050
language introduced section section brief review extended logic programs 
translation logic programming defined section soundness theorem stated section 
section contains lemmas relate stable models section proof soundness theorem 
language describing actions description action domain language consists propositions kinds 
value proposition specifies value fluent particular situation initial situation performing sequence actions 
effect proposition describes effect action fluent 
disjoint nonempty sets symbols called fluent names action names 
fluent expression fluent name possibly preceded 
value proposition expression form am fluent expression action names 
write initially effect proposition expression form causes action name fluent expression 
proposition say describes effect preconditions 
drop write simply causes proposition value proposition effect proposition 
domain description simply domain set propositions necessarily finite 
example 
fragile object domain motivated example fluent names holding fragile broken action drop 
consists effect propositions drop causes holding holding drop causes broken holding fragile example 
yale shooting domain motivated example mentioned defined follows 
fluent names loaded alive action names load shoot wait domain characterized propositions initially loaded initially alive load causes loaded shoot causes alive loaded shoot causes loaded example 
murder mystery domain motivated example obtained yale shooting domain substituting alive shoot wait proposition initially loaded 
example 
stolen car domain motivated example fluent name stolen action name wait characterized propositions initially stolen stolen wait wait wait describe semantics define models domain description value proposition entailed domain description 
state set fluent names 
fluent name state oe say holds oe oe holds oe oe 
transition function mapping set pairs oe action name oe state set states 
structure pair oe oe state initial state structure transition function 
structure action names am denote state am am oe transition function oe initial state say value proposition true structure holds state false 
particular proposition form initially true iff holds initial state structure oe model domain description value proposition true oe action name fluent name state oe conditions satisfied includes effect proposition describing effect preconditions hold oe oe ii includes effect proposition describing effect preconditions hold oe oe iii include effect propositions oe iff oe 
clear transition function satisfying conditions iii 
consequently different models domain description differ initial states 
instance fragile object domain example models initial states subsets fragile model transition function defined equation drop oe ae oe holding fragile oe oe 
domain description consistent model complete exactly model 
fragile object domain consistent incomplete 
yale shooting domain example complete model defined equations oe load oe oe shoot oe ae oe loaded oe oe wait oe oe murder mystery domain example complete transition function yale shooting initial state 
stolen car domain example inconsistent 
value proposition entailed domain description true model instance yale shooting entails alive load wait shoot murder mystery entails propositions initially loaded alive wait shoot note proposition differs order actions executed 
example illustrates possibility reasoning alternative possible futures initial situation 
language adequate formalizing interesting domains 
note domains examples simple proposed literature counterexamples demonstrating inadequacy limitations earlier approaches formalizing action 
respects expressive power limited 
ways extending mentioned section 
entailment relation nonmonotonic sense adding effect proposition domain description may change set propositions entailed 
happen value proposition added 
reason modular translation declarative language translation processes propositions reasonably adequate language nonmonotonic 
extended logic programs representing incomplete information traditional logic programming languages difficult 
ground query traditional valued logic programming system produce answers tell truth value query determined basis information included program 
extended logic programs introduced sense different :10.1.1.49.9332
language extended programs distinguishes negation failure classical negation 
expression atom means intuitively false expression interpreted evidence true 
clear difference assertions program gives information truth value general form extended rule lm lm literal atom possibly preceded 
extended program set rules 
example intuitively rules say true false true true false true false evidence true true evidence false 
answers implementation language supposed give ground queries unknown unknown semantics extended logic programs defines set ground literals answer set program 
rule variables treated shorthand set ground instances 
extended programs variables answer sets defined steps 
extended program variables doesn contain answer set smallest set ground literals rule lm lm ii contains pair complementary literals set ground literals 
extended program variables 
set ground literals extended program obtained deleting rule expression body ii expressions form bodies remaining rules 
clearly doesn contain answer set defined 
answer set coincides say answer set 
easy check instance program answer set fp ug 
answer sets program easily characterized terms default logic 
identify rule default lm lm stands literal complementary 
extended program viewed default theory 
answer sets program simply extensions sense default logic intersected set ground literals proposition 
approaches semantics logic programs kinds negation proposed 
context shown lead result answer set semantics 
describing actions logic programs ready define translation language extended programs 
different effect propositions say similar differ preconditions 
translation method defined domain description contain similar effect propositions 
condition prohibits instance combining domain propositions shoot causes alive loaded shoot causes alive refers victim course gun 
domain description similar effect propositions 
corresponding logic program uses variables sorts situation variables fluent variables action variables 
situation constant fluent constants action constants respectively fluent names action names predicate function symbols sorts arguments values clear rules 
program consist translations individual propositions standard rules holds result holds noninertial holds result holds noninertial holds holds result noninertial holds holds result noninertial rules motivated commonsense law inertia value fluent performing action normally 
rules allow apply law inertia reasoning sorted language implies atoms rules program formed accordance syntax sorted predicate logic 
speak instance rule assumed terms substituted variables appropriate sorts 
past fluent known true past second known false 
rules play role reasoning past 
auxiliary predicate noninertial essentially abnormality predicate 
define translates value propositions effect propositions 
notation useful fluent name jf situation term holds stands holds 
convention allows write holds fluent name preceded 
furthermore action names am stands term result am result am result clear situation term variables represented form 
translation value proposition holds am instance initially alive holds alive alive shoot holds alive result shoot translation effect proposition consists rules 
holds result holds holds allows prove hold preconditions satisfied 
second rule noninertial jf holds holds holds literal complementary holds 
disables inertia rules cases affected rule program contradictory prove rule form unloaded gun loaded action load second rules remains unloaded 
note 
want disable inertia rules preconditions change value known hold evidence hold 
instance know loaded currently holds want conclude inertia value alive remain shoot draw new value alive replaced body holds holds translation unsound 
translation contains rules holds holds holds result holds holds result holds holds holds holds rules justify form reasoning value changed performing conclude preconditions satisfied performed 
rules unsound presence similar propositions 
rules allow conclude precondition false fact performing action lead result described effect axiom preconditions true 
illustrate translation process applying yale shooting example 
translation domain includes addition rules 
holds loaded 

holds alive 

holds loaded result load 

noninertial loaded load 

holds alive result shoot holds loaded 

noninertial alive shoot holds loaded 

holds loaded holds alive holds alive result shoot 

holds loaded holds alive result shoot 

holds loaded result shoot 

noninertial loaded shoot 
instructive compare set rules formalization yale shooting apt bezem interested temporal projection problems classical negation 
inertia rules corresponding rules 
addition program includes counterparts 
tell loaded holds initial situation negative answer question follows closed world assumption 
rule corresponding head course new fluent dead 
counterpart combination missing lead difficulties closed world assumption implicitly postulated 
soundness theorem say ground literal entailed extended logic program belongs answer sets equivalently extensions sense default logic 
notion entailment entailment relation language introduced section state result expressing soundness translation soundness theorem 
domain description similar effect propositions 
value proposition entails entails inconsistent statement soundness theorem trivial entails value proposition 
consistent domain descriptions statement theorem immediate consequence lemma proved section soundness lemma 
consistent domain description similar effect propositions 
exists answer set value proposition entails note lemma asserts possibility selecting uniformly required soundness theorem 
set statement lemma obviously consistent consistent domain description entail complementary value propositions 
consequently consistent include similar value propositions consistent answer set 
converse soundness theorem hold translation incomplete 
simple counterexample belongs thomas woo personal communication 
domain fluent name action name characterized propositions causes clear entails initially translation proposition holds entailed easy verify set positive ground literals holds answer set answer sets prove soundness lemma need definition 
general logic program extended program contain classical negation 
signing set ground atoms ground instance bm bm rule bm bm bm bm example fpg signing program slightly different original definition 
section show answer sets general program signing characterized terms fixpoints monotone operator 
specifically set ground atoms symmetric difference obviously 
clear involution sg fs define monotone operator oe answer set fixpoint oe 
recall general logic programs notion answer set stable model defined means construction :10.1.1.24.6050
general logic program rule replaced ground instances 
reduct relative set ground atoms obtained deleting rule expression form body ii expressions form bodies remaining rules 
clearly positive program consider minimal model smallest set ground atoms closed rules 
set coincides answer set 
condition expressed equation ff ff operator maps positive program minimal model 
signing 
operator oe defined equation oex ff lemma 
set ground atoms answer set iff fixpoint oe 
proof 
definition oe fixpoint oe iff ff involution equivalent ff note involution lemma stated follows answer set iff fixpoint oe 
lemma 
operator oe monotone 
proof 
set rules heads belong set remaining rules 
clearly signing atoms occurring belong atoms occurring belong complement consequently disjoint ff ff ff furthermore expression form occurring belong consequently similarly expression form occurring belongs consequently ff ff ff particular ff ff ff clear definition conclude ff ff ff choice ff contained ff disjoint consequently ff ff ff ff oex ff ff ff ff ff ff monotone reduct operators 
antimonotone follows oe monotone 
having proved lemmas properties fixpoints monotone operators knaster tarski theorem study answer sets program signing 
knaster tarski theorem asserts instance monotone operator fixpoint gives new direct proof fact general program signing answer set 
asserts monotone operator fixpoint pre fixpoint 
pre fixpoint oe set oex ae 
characterization fixpoint oe proof soundness lemma 
existence answer sets programs programs general types established phan minh dung francois fages 
proof soundness lemma results previous section directly applicable programs classical negation 
known extended program converted closely related program classical negation follows 
predicate occurring select new predicate arity 
atom positive form negative literal positive literal definition positive form 
positive form literal denoted set literals stands set positive forms elements program positive form program obtained replacing rule proposition consistent set ground literals answer set answer set positive form 
particular positive form predicate symbols holds holds noninertial 
noninertial predicate noninertial occur 
rules obtained rules substituting holds holds 
instance inertia rules holds result holds noninertial holds result holds noninertial holds holds result noninertial holds holds result noninertial rules turn noninertial jf holds holds predicate symbol atom holds holds holds depending includes negation sign 
rest section consistent domain description similar value propositions disjoint stands positive form set ground atoms contain predicate symbol noninertial easy see signing 
oe denote operators defined previous section 
recall goal find answer set value proposition entails set defined condition fixpoint oe 
easy understand reasonable choice 
lemma tells answer set follows answer set provided consistent 
hand fixpoint oe includes atoms holds holds clear atom belongs iff belongs 
reason includes literals predicate symbol holds assumption statement soundness lemma strong 
model stand set atoms form value proposition true clear predicate symbols atoms holds holds denote set atoms form noninertial am fluent name am action names value propositions am am true false define xm note xm xm xm goal show xm pre fixpoint oe oex ae xm lemma 
check xm contains oex oex lemma 
model oex ae xm proof 
assume oex means form noninertial fluent name action names tuple am action names 
assume xm atoms true false 
expressed saying holds exactly states transition function possible includes effect proposition describing effect preconditions hold consider rule type corresponding effect proposition noninertial holds holds ground instance rule obtained substituting written holds holds preconditions hold value propositions true follows atoms holds belong 
conclude belong xm 
consequently reduct xm includes rule obtained removing expressions holds xm ff xm belongs follows ff xm oex contrary assumption oex lemma 
model ff xm ae proof 
sufficient verify closed rules xm rules kinds program atom belongs atom belongs complement consequently need check closed rules kind closed rules second kind 
rules kind simply ground atoms noninertial claim trivial 
rule second kind 
obtained instance positive form rules deleting expressions form body 
consider cases depending form rule case obtained rules 
positive form rule rules 
ground instances rules forms holds holds noninertial holds holds noninertial holds holds noninertial holds holds noninertial tuple am action names 
consequently forms holds holds holds holds holds holds holds holds noninertial xm rules included reduct xm noninertial follows noninertial xm xm definition means value propositions true false follows body rules belongs head 
case obtained translation value propositions model true 
remains consider cases obtained rules corresponding effect proposition 
rules obtained belong kind discussed proof 
denote transition function case obtained 
form holds holds holds atoms body belong preconditions hold state consequently holds state means head belongs 
case obtained rule 
assume definiteness fluent name preceded 
form holds holds holds assume atoms body belong 
hold state holds state 
follows includes effect proposition describing effect preconditions hold effect proposition generated describes effect 
contain similar effect propositions follows consequently preconditions hold state head belongs 
case obtained rule 
assume definiteness fluent names preceded 
form holds holds holds holds holds holds assume atoms body belong 
holds state 
possible preconditions hold state preconditions hold state consequently hold means head belongs 
lemma 
model oex ae xm proof 
definitions oe lemma oex ff xm ff xm ae ae ae xm inclusion lemma oex oex oex ae xm lemma 
fixpoint oe 
value proposition entails proof 
assume take model knaster tarski theorem pre fixpoint oe lemma xm pre fixpoint oe 
consequently ae xm choice consequently ns ns ny ns ns ae ae xm predicate symbol holds holds follows true ready prove soundness lemma 
assume consistent 
consider set literals fixpoint oe 
lemma answer set 
case consistent 
answer set positive form conclude answer set entails consequently lemma follows entails case inconsistent 
means contains pair complementary literals contain noninertial answer set contain noninertial contain noninertial consequently predicate symbol holds literals obtained applying complementary value propositions 
choice value propositions entailed impossible view consistency step development high level languages designed specifically representing actions 
syntax semantics precisely describe class action domains consideration intended ontology action 
representation particular domain viewed high level specification task formalizing domain logic programming logic formalism 
soundness completeness formalization precisely stated mathematical questions 
possibilities limitations different representation methods compared precise fashion 
instance approach prove equivalence methods formalizing actions proposed earlier pednault reiter baker domains representable hand experiments extended logic programs representing knowledge 
known mathematical properties extended programs 
reason initial experiment source language deliberately quite simple try translation complete 
seen soundness theorem limited class domains turns nontrivial 
step translation complete applicable domain descriptions containing similar propositions 
appears goals achieved expressive language disjunctive programs target language translation 
head disjunctive rule list literals separated occurrences epistemic disjunction symbol example rules replaced powerful disjunctive rule holds holds holds result apparently eliminate cases incompleteness similar counterexample section 
similarly rules replaced intuitive disjunctive rule holds holds holds result useful extension possible disjunctive rules disjunctive information initial situation 
dialect allows represent information value proposition may include disjunction fluent expressions generally arbitrary propositional combination fluent names place single fluent expression 
instance russian roulette version shooting example guns described fluents loaded loaded initial condition initially loaded loaded corresponding logic program represented disjunctive rule holds loaded holds loaded extending semantics dialect straightforward 
generalizing soundness theorem disjunctive value propositions requires mathematics disjunctive programs 
shooting domain guns cases firstorder notation natural propositional notation write initially loaded gun loaded gun express main property shooting schema shoot causes alive loaded metavariable expressions gun gun viewed shorthand collection ground instances propositions extension semantics needed 
proposition translated logic programming directly rules holds alive result shoot holds loaded variable guns 
ground instances rule identical ground instances rules holds alive result shoot gun holds loaded gun holds alive result shoot gun holds loaded gun corresponding instances 
working developing extensions capable expressing richer ontologies actions 
striking limitation inability express domain constraints 
fluents represented presumed independent sense semantics treats assignment truth values fluent constants valid state 
syntactically constraints expressed propositions form formula instance express object occupy locations proposition semantically including constraints require state defined truth assignment fluent constants constraint formulas true 
necessary change semantics due fact presence constraints action may indirect effects 
instance consider action moving explicitly effect action true able conclude false constraint violated 
plan design investigate dialects nondeterministic actions described 
fact nondeterminism closely related idea ramifications indirect effects action nondeterministic 
currently known frame problem presence nondeterminism 
way include nondeterminism allow effect propositions contain disjunctions instance causes heads tails semantically case nondeterministic transition functions 
corresponding logic program effect expressed disjunctive rule 
extension introduced describe concurrent execution actions 
extension performing actions concurrently represented set action names single action name proposition instance alive gun load gun semantics generalized accordingly 
translation logic programming extended concurrent spirit 
inconsistency stolen car domain example illustrates fact representing causal anomalies 
plan address issue 
preferred approach causal anomalies view evidence unknown events occur concurrently actions contribute properties new situation 
dialect described 
symbols temporal intervals actions may occur 
referee pointed simple elegant translation form abductive logic programming integrity constraints method handles forms temporal reasoning uniform way 
interesting extend translation expressive dialects 
kartha norman mccain comments draft kenneth kunen directing thomas woo counterexample reproduced section referees valuable criticisms 
research supported part nsf cda iri iri 
krzysztof apt marc bezem 
acyclic programs 
david warren peter szeredi editors logic programming proc 
seventh int conf pages 
andrew baker 
nonmonotonic reasoning framework situation calculus 
artificial intelligence 
baral michael gelfond 
representing concurrent actions extended logic programming 
manuscript 
chen david warren 
goal oriented approach computing founded semantics 
krzysztof apt editor proc 
joint int conf 
symp 
logic programming pages 
phan minh dung 
relations stable founded semantics logic programs 
theoretical computer science 
appear 
eshghi robert kowalski 
abduction compared negation failure 
giorgio levi maurizio martelli editors logic programming proc 
sixth int conf pages 
chris evans 
negation failure approach hanks mcdermott problem 
proc 
second int symp 
artificial intelligence 
francois fages 
consistency clark completion existence stable models 
journal methods logic computer science 
appear 
michael gelfond 
stratified autoepistemic theories 
proc 
aaai pages 
michael gelfond 
logic programming reasoning incomplete information 
annals mathematics artificial intelligence 
appear 
michael gelfond vladimir lifschitz :10.1.1.24.6050
stable model semantics logic programming 
robert kowalski kenneth bowen editors logic programming proc 
fifth int conf 
symp pages 
michael gelfond vladimir lifschitz 
classical negation logic programs disjunctive databases 
new generation computing 
michael gelfond vladimir lifschitz 
limitations situation calculus 
robert boyer editor automated reasoning essays honor woody bledsoe pages 
kluwer academic dordrecht 
steve hanks drew mcdermott 
nonmonotonic logic temporal projection 
artificial intelligence 
kartha 
soundness completeness theorems formalizations action 
working papers second symposium logical formalizations commonsense reasoning 
henry kautz 
logic persistence 
proc 
aaai pages 
robert kowalski sadri 
logic programs exceptions 
david warren peter szeredi editors logic programming proc 
seventh int conf pages 
kenneth kunen 
signed data dependencies logic programs 
journal logic programming 
vladimir lifschitz 
language describing actions 
working papers second symposium logical formalizations commonsense reasoning 
vladimir lifschitz norman mccain hudson turner 
automation reasoning action logic programming approach 
preparation 
vladimir lifschitz 
formal theories actions 
artificial intelligence 
john mccarthy 
applications circumscription formalizing common sense knowledge 
artificial intelligence 
reproduced 
john mccarthy 
formalizing common sense papers john mccarthy 
ablex norwood nj 
john mccarthy patrick hayes :10.1.1.85.5082
philosophical problems standpoint artificial intelligence 
meltzer michie editors machine intelligence volume pages 
edinburgh university press edinburgh 
reproduced 
paul morris 
anomalous extension problem default reasoning 
artificial intelligence 
edwin pednault 
adl exploring middle ground strips situation calculus 
ronald brachman hector levesque raymond reiter editors proc 
int conf 
principles knowledge representation reasoning pages 
luis pereira jose alferes 
non monotonic reasoning founded semantics 
proc 
international logic programming conference pages 
luis pereira jose 
founded semantics logic programs explicit negation 
proc 
tenth european conf 
artificial intelligence pages 
przymusinski 
extended stable semantics normal disjunctive programs 
david warren peter szeredi editors logic programming proc 
seventh int conf pages 
raymond reiter 
logic default reasoning 
artificial intelligence 
raymond reiter 
frame problem situation calculus simple solution completeness result goal regression 
vladimir lifschitz editor artificial intelligence mathematical theory computation papers honor john mccarthy pages 
academic press 
schubert 
monotonic solution frame problem situation calculus efficient method worlds fully specified actions 
kyburg loui carlson editors knowledge representation defeasible reasoning pages 
kluwer 
murray shanahan 
prediction deduction explanation abduction 
proc 
ijcai pages 
alfred tarski 
lattice theoretical fixpoint theorem applications 
pacific journal mathematics 

