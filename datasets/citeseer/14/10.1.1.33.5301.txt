text compression random access ji jiri cz compression method nite 
simple algorithm construction nite automaton regular expression shown 
best advantage algorithm possibility random access compressed text 
compression ratio achieved fairly 
method independent source alphabet algorithm character word 
keywords word compression text databases information retrieval hu word data compression important part implementation full text retrieval systems 
compression reduce space occupied indexes text documents 
popular algorithms compress text perform direct access compressed text 
article presents algorithm nite automaton allows type access 
de nition nite automata rst section 
compression algorithm described second section third section shows experimental results 

finite automata de nition 
deterministic nite automaton dfa quintuple nite set states nite set input symbols input alphabet state transition function initial state set nal states 
de nition 
regular expression alphabet de ned follows 
regular expression 
regular expression 
regular expression de nition 
value regular expression de ned fag 

computer science department university czech republic de nition 
derivation du dx regular expression de ned 
du 
holds da da db da da du da dv da 
da du da 
dv da da dv da 

holds dv dx dv da dv da dv da dv da derivation regular expression string equivalent dv dx fy xy words derivation expression contains strings arise strings cutting pre example 

dv da 
construction dfa regular expression theorem 
dfa accepts state language de ned accepts state language de ned dv da see 
regular expression construct dfa set regular expressions alphabet dq da fq qj qg example 
construct automaton 
words 
see table 
final state 

dv dv 








tab 
construction dfa 
random access compression fa document length written sequence dm position able nd symbol position save property create compressed document random access 
set position fi mg written set binary words fb xed length 
set considered language alphabet 
easy shown language regular possible construct dfa accepts language 
dfa created example algorithm section 
regular expression formed 
compression document consists creating corresponding dfa 
decompression impossible 
dfa document decide binary word belongs language 
dfa say symbol appears position inorder de nition dfa extended 
de nition 
deterministic nite automaton output tuple nite set states nite set input symbols input alphabet nite set output symbols output alphabet state transition function initial state output function set nal states 
type automaton able determine accepted words symbol lies position create automaton type algorithm mentioned section extended 
regular expression input algorithm consists words carry output symbol regular expression formed 
dm example 
example document 
regular expression constructed 
construction see table 
state dv dv fq fa rg fq constructed automaton properties 
transitions nal states 
jqj length words appropriate regular expression 
jq jq words state transition function contain forward transitions 
cycles 
set states automaton divided disjunct subsets called layers 
transitions done adjacent layers 
states numbered locally layer 
final automaton example drawn gure 
final automaton stored disk construction 
particular layers stored sequentially 
methods storing layers available raw layer stored sequence integer numbers bytes 
appropriate short layers 
bitwise maximum number max layer 
layer stored sequence dlog binary words 
linear linear prediction transitions 
parameters founded line correction table stored 
algorithm construction automaton independent respect output alphabet 
possibilities 
rst classic character version 
algorithm pass output alphabet standard ascii 
text retrieval systems word version second possibility advantageous character natural languages 
layer layer layer layer layer fig 
automaton expression example experimental results allow practical comparison algorithm experiments performed compression corpus 
test canterbury compression corpus large les especially king james bible bible txt le bytes long 
tokens distinct 
word version algorithm test 
compression algorithm tested di erent input size 
length input tokens number states resulting automaton size compressed le compression ratio observed 
results table 
tests done pentium ii mhz mb ram 
program compiled ms visual bit console application ms windows 
works advanced techniques store layers sequences numbers adopted di erential encoding compression ratio worse algorithm achieve directly access compressed text 
compression methods suitable textual databases certain special properties methods fast decompression information necessary decompression usable text searching 
nt lt ns lcf cr tab 
experimental results le bible txt nt number tokens lt length tokens bytes ns number states lcf length compressed text bytes automaton memory size cr compression ratio lcf lt 
compression utility compressed text bytes ratio method gzip unix jar word lzw tab 
comparison compression utilities important realise method depend text encoding 
means performs successfully text encoded unicode 
word compression algorithms developed text retrieval systems 
known hu word version word phase lzw 
bibliography 
sn sel word compression methods text retrieval systems 
proc 
brno 
sn sel word compression methods large text documents 
data compression dcc snowbird utah usa 

rozenberg salomaa ed 
handbook formal language 
springer verlag vol 
iii 

witten mo bell managing gigabytes compressing indexing documents images 
van nostrand reinhold 
