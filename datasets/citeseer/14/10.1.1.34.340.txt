evolution open source software case study michael godfrey qiang tu software architecture group department computer science university waterloo email uwaterloo ca studies software evolution performed systems developed single traditional management techniques 
widespread availability large software systems developed open source development approach chance examine systems detail see evolutionary narratives significantly different commercially developed systems 
summarizes preliminary investigations evolution best known open source system linux operating system kernel 
linux large lines code version development model tightly planned managed industrial software processes expected find linux growing slowly got bigger complex 
linux growing super linear rate years 
explore evolution linux kernel system level major subsystems discuss think linux continues exhibit strong growth 
large software systems evolve risk losing market share competitors 
maintaining system extraordinarily difficult complicated time consuming 
tasks adding new features adding support new hardware devices platforms system tuning defect fixing difficult system ages grows 
published studies software evolution performed systems developed house single traditional development management techniques 
case study evolution linux operating system 
system developed open source development approach quite different way industrial software created 
related lehman built largest best known body research evolution large long lived software systems 
lehman laws software evolution case studies large software systems suggest systems grow size increasingly difficult add new code explicit steps taken reorganize design 
statistical analysis case studies suggests system growth measured terms numbers source modules number modules changed usually sub linear slowing system gets larger complex 
gall examined evolution large telecom switching system system level top level subsystems done linux 
noted system level evolution system conform traditionally observed trend reduced change rates time noted major subsystems may behave quite differently system 
case study major subsystems exhibited interesting evolutionary behaviours behaviours cancelled full system viewed top level 
argue consider evolution topmost level concerned 
investigations strongly support view 
kemerer slaughter excellent survey research software evolution 
note relatively little research empirical studies software evolution 
parnas metaphor decay describe software increasingly brittle time 
eick extend ideas suggested parnas characterizing software decay ways detected measured 
large telephone switching system case study 
suggest example common defect fixes require changes large numbers source files software system probably poorly designed 
metrics predicated availability detailed defect tracking logs allow example user determine defects resulted modifications particular module 
note detailed change logs available study linux 
perry evidence evolution software system depends size age factors nature system application domain previous experience system processes technologies organizational frameworks employed developed software 
open source software development term open source relatively fundamental ideas 
single important requirement open source software system source code freely available wishes examine change purposes 
user able look hood allowed tune adapt evolve system personal needs 
development open source software oss highly collaborative geographically distributed strict requirement 
corporations individuals developed source code house proprietary project release open source license allows great freedom personal system 
examples include netscape web browser mozilla project jikes java compiler ibm sun java development kit 
kind open source system developed early days highly collaborative project done open systems follow open source development osd model 
usually project begins single developer personal goal vision 
typically person system scratch extant older system 
example linux creator linus torvalds started version operating system creator began older clone text editor 
eric raymond written informative book open source development called cathedral bazaar 
open source development vs traditional processes originator ready invite project code base available development proceeds 
typically may contribute development system originator owner free decide contributions may may part official release 
open source development osd model different traditional house commercial development processes fundamental ways 
usual goal open source project create system useful interesting working fill commercial void 
developers volunteers contribute project hobby return receive peer recognition personal satisfaction efforts bring 
means effort osd project concentrates part time programmers find interesting essential 
difficult direct development particular goals project owner holds little power contributing developers 
freedom means difficult convince developers perform essential tasks systematic testing code restructuring exciting writing new code 
notable features open source development include scheduling usually little commercial pressure keep hard schedule osd developers day jobs take time 
may entail longer development cycles advantage osd projects largely immune time market pressures system need released project owners satisfied system mature stable 
code quality standards vary widely 
code contributed hard insist particular standards projects official guidelines 
unstable code common developers eager submit bleeding edge contributions project 
osd projects including linux address issue maintaining concurrent development paths development release path contains new experimental features stable release contains open source projects forked distinct development streams developers unhappy route taken official branch 
open source license agreements splitting explicitly permitted 
freebsd netbsd openbsd systems example phenomenon 
updates bug fixes relative previous stable release 
addition new development features considered stable migrated current stable release waiting major baseline established 
planned evolution testing preventive maintenance may suffer osd encourages active participation necessarily careful reflection reorganization 
code quality maintained largely massively parallel debugging developers code systematic testing planned prescriptive approaches 
evolution osd systems examining growth evolution patterns osd projects see compare previous studies evolution large proprietary software systems developed traditional house processes 
large osd systems existence number years achieved widespread including investigated detail linux operating system kernel lines code text editor lines code 
naively expected evolution osd software usually structured carefully planned traditional house development lehman laws apply system grew rate growth slow system growth approximating inverse square curve 
maintainers perl project undertaken massive redesign restructuring core system project owners felt current system 
explain linux 
development model freebsd operating system rival linux cross traditional closely managed development relatively unstructured approach osd projects 
freebsd system accepts contributions outsiders contributions carefully scrutinized accepted main source tree 
freebsd development team performs stringent testing code linux 
result freebsd tends support fewer devices development proceeds slowly linux 
preliminary analysis shows growing super linear rate number years 
core developers chip said current version perl really need mysteries magic structures really hope significant changes perl core breaking things re adding linux operating system kernel linux unix operating system originally written linus torvalds subsequently worked hundreds developers 
originally written run intel architecture ported numerous platforms including powerpc dec alpha sun sparc sparc mainframes pdas 
official release kernel version occurred march 
release contained source code files comprising lines code including comment blanks lines 
linux kernel maintained parallel paths development release containing experimental relatively untested code stable release containing updates bug fixes relative previous stable release 
convention middle number kernel version identifies path belongs odd number denotes development kernel number denotes stable kernel 
time writing january stable kernel version development kernel version 
development kernel releases main threads stable kernel releases main threads 
methodology measured various aspects growth linux variety tools assumptions describe 
examined kernel versions total including stable kernel releases development kernel releases 
decided measure relatively stable kernels released frequently 
size full distribution measured tar file compressed gzip file included source artifacts kernel including documentation scripts utilities binary files 
tar files versions available linux kernel archives website 
term source file mean file name ends appeared original tar file 
ignored source artifacts configuration files makefiles 
explicitly ignored kernel version released january lists names credits file having significant contributions development linux kernel 
performing system build creates additional source files depending options chosen 
ignored additional files interest uniformity simplicity 
source files appeared directory felt part kernel code se 
counted lines code loc approaches unix command wc gave raw count included blanks lines comments totals second script causes blank lines comments ignored 
program ctags count number global functions variables macros 
considering major subsystems linux directory structure source release definition subsystem hierarchy 
created customized subsystem hierarchies source software architectures detailed analyses particular versions linux 
chose follow route reasons creating customized subsystem hierarchies versions linux kernel contains source files daunting task clear benefit second analyses subsystems evolution peculiar ideas software architecture ought look conform mental model linux developers 
lehman suggests number modules best way measure size large software system 
decided number lines code loc measurements reasons 
discussed total system loc grow roughly rate number source files shown difference average median file size great variation file size parts system 
decided number source files mean losing full story evolution linux especially subsystem level 
observations evolution linux examined evolution linux kernel system level major subsystems system exhibited strong rate growth investigation major subsystems appropriate 
discuss observations 
plotted difference counts percentage source file lines comments blank stayed constant percent 
consider constancy healthy sign 
decrease amount commenting indicates poorly maintained code significant increase commenting indicates system difficult understand requires extra explanation 
system level growth examined system grown common metrics 
example fig 
shows growth size compressed tar files full kernel release fig 
shows growth number lines code loc 
measured growth number source files growth number global functions variables macros omitted graphs measurements sake brevity growth patterns show similar fig 
fig 

interesting measurements tell story 
clearly show development releases growing super linear rate time contradicts lehman inverse square growth rate hypothesis 
early stable kernel paths versions seen graphs starting march july respectively growing slower rate corresponding development release paths expect 
stable release path version started january shown remarkable growth stable path 
subsequent investigation determined growth addition new features support new architectures defect fixing 
rapid rise popularity linux resulted large amount contributed stable code third parties ibm mainframe external pressure fast track integration code stable release path 
plotted growth time version number lehman suggest approach 
sense plot stable development paths parallel real time sequential led apparent dips kind release path finished began 
behaviour kinds paths understandably different development kernels released great frequency varied greatly size early stable kernel releases varied frequency version relatively small size 
note linux appear obey lehman third law software evolution states incremental effort spent release remains constant system lifetime example update patch files release path statistical analysis shows growth rate loc development release paths fits quadratic model 
number days version released size linux kernel loc function model growth calculated squares approximation efficient determination model 
size bytes development releases stable releases jan jun oct mar jul dec apr 
growth compressed tar file full linux kernel source release 
total loc total loc wc development releases total loc wc stable releases total loc development releases total loc stable releases jan jun oct mar jul dec apr 
growth number lines code measured methods unix command wc script removes comments blanks lines 
varied size bytes megabytes 
hypothesize direct consequence osd process model reasons stated 
growth patterns similar metrics tried dividing measure see resulting curve straight line 
plotted average file sizes total loc divided number source files median sizes dot implementation dot header source files 
fig 
show median file sizes fairly stable slight growth size dot files average file sizes showed definite growth time 
indicates dot files quite large 
subsequent investigation showed largest files drivers complicated hardware devices 
consider flatness median dot file size curve sign suggests new features added indiscriminately dot files 
investigation rise average size dot files revealed small number large dot files device drivers contained data large dot files tended skew average file size 
interesting trend arises mid stable release parallel development release shown fig 
fig 

release path see average dot file size increased release path value decreased eventually increase 
time average dot file size release path increased slowly steadily average dot file size increased significantly dominated stable release path 
cross referencing graph growth number files note number source files grew slowly stable release larger steady increase number source files significant jump point average dot file size 
suggests stable release path increase average file size due bug fixes simple enhancements added code existing files expect stable release path 
development release path new small files created due new features added causing average dot file size decrease 
consider healthy sign new develop example development kernel largest dot files drivers scsi cards largest dot files network card drivers 
led initial conjectures scsi cards complicated logic network cards complicated interfaces 
turned scsi cards complicated logic content network card dot files simply data 
time ratio number dot files dot files remained constant paths 
large jump average dot file size occurred release ment result additional infrastructure new small files filled time 
growth major subsystems investigating growth linux system wide level decided investigate growth major subsystems defined source directory hierarchy 
major source subsystems drivers contains large collection drivers various hardware devices arch contains kernel code specific particular hardware architectures cpus including support memory management libraries include contains system include files net contains main networking code support sockets tcp ip code particular networking cards contained net subsystem fs contains support various kinds file systems init contains initialization code kernel ipc contains code inter process communications kernel contains main kernel code architecture independent lib contains architecture independent library code mm contains architecture independent memory management code 
shows growth major kernel subsystem 
see immediately subsystem largest subsystem fastest growing lines code latest release 
shows subsystem grown steadily relative rest system point comprises percent total system 
size growth rate subsystem difficult see happened rest system fig 

fig shows relative size subsystems percentage total system 
see arch include net fs subsystems significantly larger remaining january due addition large device driver dot file network card 
loc loc average file size dev releases average file size stable releases median file size dev releases median file size stable releases jan jun oct mar jul dec apr 
median average size implementation files 
average file size dev releases average file size stable releases median file size dev releases median file size stable releases jan jun oct mar jul dec apr 
median average size header files 
total loc drivers arch include net fs kernel mm ipc lib init jan jun oct mar jul dec apr 
growth major subsystems development releases 
percentage total system loc drivers arch include net fs kernel mm ipc lib init jan jun oct mar jul dec apr 
percentage total system loc major subsystem development releases 
percentage total system loc arch include net fs kernel mm ipc lib init jan jun oct mar jul dec apr 
percentage total system loc major subsystems ignoring subsystem development releases 
continued grow rate appears linear better 
shows fs subsystem grown slowly relative size percentage total kernel size significantly decreased time 
shows growth rate smallest subsystems 
see growing steadily subsystems comprise small amount code 
subsystems part core kernel code subsystems included kernel compilations regardless target hardware 
additionally operating system kernels usually designed small compact possible undue growth core subsystems probably regarded unhealthy sign 
shows growth development releases sub subsystems 
largest fastest growing drivers net contains driver code network devices ethernet cards 
growth subsystem reflection number network devices supported linux relative complexity creating drivers fact lot device specific data stored source files 
note average size source file drivers subsystem development kernel lines code highest average major subsystems 
sub subsystems drivers showed significant growth sign growing acceptance linux users desire run different devices 
note growth size subsystem distorts idea large complicated linux system nature device driver translates common understood request task particular hardware device execute efficiently 
device drivers quite large complicated relatively self contained independent rest system 
second note old hardware may die old drivers tend live long lives just case users need 
consequently large number relatively unused relatively legacy drivers distributed kernel version 
note current device drivers users tend require range possible drivers 
example largest drivers sub subsystems vast majority pcs sold today network scsi cards 
shows shows growth development releases sub subsystems rep total loc kernel mm ipc lib init jan jun oct mar jul dec apr 
growth smaller core subsystems development releases 
total loc drivers net drivers scsi drivers char drivers video drivers isdn drivers sound drivers drivers block drivers cdrom drivers usb drivers jan jun oct mar jul dec apr 
growth subsystem development releases 
total loc arch ppc arch sparc arch sparc arch arch mips arch arch alpha arch arm arch sh arch jan jun oct mar jul dec apr 
growth subsystem development releases 
resents major cpu hardware architecture supported linux 
interesting sudden upward leaps subsystems 
leap occurred early decided incorporate support alpha sparc mips architectures linux led code specific intel architecture moved main kernel subsystem 
subsequent leaps arch sub subsystems resulted externally developed code added large lump 
cases architecture support developed maintained separately main linux development kernel release relatively independent teams developers corporations 
common growth pattern subsystem large jumps major new revisions added followed periods relative stability involving minor revisions bug fixes 
linux operating system kernel successful example large software system widespread developed open source development osd model 
examined growth linux year lifespan metrics system level growth superlinear 
strong growth rate surprising large size lines code including comments blank lines development model highly collaborative geographically distributed set developers contributing time effort free previously published research suggests growth large software systems tends slow systems larger 
previously suggested gall useful examine growth patterns subsystems gain better understanding system able evolve successfully 
suggest black box examination investigate nature subsystems explore evolutionary patterns gain understanding system evolved 
entire source tree linux quite large half code consists device drivers relatively independent large part remaining system consists parallel features specific particular cpus small core kernel subsystems comprise small part full source tree 
say linux operating system kernel large experiments compiled version include fifteen percent source files full source tree 
consider case study important data point study large software system evolution 
hope encourage investigation evolution osd software systems comparisons systems developed traditional approaches 
acknowledgments david toman providing useful comments freebsd operating system hugh chipman dale schuurmans help statistical modelling 
bowman holt 
reconstructing ownership architectures help understand software systems 
proc 
ieee workshop program comprehension iwpc pittsburgh pa may 
bowman holt brewster 
linux case study extracted software architecture 
proc 
intl 
conf 
software engineering icse los angeles ca may 
eick graves karr marron 
code decay 
assessing evidence change management data 
appear ieee trans 
software engineering 
gall jazayeri 
software evolution observations product release history 
proc 
intl 
conf 
software maintenance icsm bari italy oct 

ctags homepage 
website 
home net darren ctags 
www freebsd org 
freebsd homepage 
website 
www org 
org official website linux kernel information 
website 
www kernel org 
linux kernel archives 
website 
www linux org 
linux homepage 
website 
www opensource org 
open source homepage 
website 
www org 
homepage 
website 
kemerer slaughter 
empirical approach studying software evolution 
ieee trans 
software engineering july august 
lehman belady 
program evolution processes software change 
academic press 
lehman perry 
implications evolution metrics software maintenance 
proc 
intl 
conf 
software maintenance icsm bethesda maryland nov 
lehman perry 
metrics laws software evolution nineties view 
proc 
fourth intl 
software metrics symposium metrics albuquerque nm 
parnas 
software aging 
proc 
intl 
conf 
software engineering icse sorrento italy may 
perry 
dimensions software evolution 
proc 
intl 
conf 
software maintenance icsm 
raymond 
cathedral bazaar linux open source accidental revolutionary 
reilly associates oct 

linux kernel 
website 
www com guides html 

topaz perl nd century 
www perl com pub topaz html 
tran godfrey lee holt 
architecture analysis repair open source software 
proc 
intl 
workshop program comprehension iwpc limerick ireland june 
tran holt 
forward reverse repair software architecture 
proc 
cascon toronto nov 

model smooth growth software systems 
ieee trans 
software engineering aug 

linux ibm esa mainframe architecture 
website 
org linux html 
