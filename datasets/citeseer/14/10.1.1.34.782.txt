transforming heterogeneous data database middleware integration haas miller roth schwarz wimmers schwarz almaden ibm com miller cs toronto edu applications today need information diverse data sources related data may represented quite differently 
common scenario dba wants add data new source existing warehouse 
data new source may match existing warehouse schema 
new data may partially redundant existing warehouse formatted differently 
applications may need integrate data dynamically response user queries 
applications data single source want form stored 
example user may want publish information particular xml dtd data stored form 
scenarios data sets mapped single target representation 
needed transformations may include schema transformations changing structure data rr data transformation cleansing changing format vocabulary data eliminating reducing duplicates errors val eti hs 
area broad range possible transformations simple complex 
schema data transformation typically studied separately 
believe need handled uniform mechanism 
database middleware systems pgmw acps bon integrate data multiple sources 
effective systems provide integrated schemas able transform data different sources answer queries schema 
power query engines ability connect information sources natural base doing complex transformations 
look database middleware systems engines discuss data transformed provide users information need 
architecture db middleware system successful data transformation engine scenarios database middleware system features 
data days comes diverse systems provide access broad range data sources transparently 
sufficient query processing power handle complex operations compensate limitations sophisticated sources 
transformation operations especially complex ones require data different sources interrelated single query 
garlic illustrate ideas 
shows garlic architecture typical database middleware systems pgmw acps 
garlic primarily query processor copyright ieee 
personal material permitted 
permission reprint republish material advertising promotional purposes creating new collective works resale redistribution servers lists reuse copyrighted component works obtained ieee 
bulletin ieee computer society technical committee data engineering integrated schema query compilation query execution data sources clients persistent metadata store clio wrapper interface wrapper wrapper wrapper wrapper garlic architecture optimizes executes queries diverse data sources posed object extended sql 
garlic powerful query engine capable executing extended sql operation data source 
planning executing query communicates wrappers various data sources involved query 
systems type opportunities transform data wrapper data mapped source model middleware model section second queries views middleware schema sections 
understanding data needs transformed simple 
target representation defined implicitly existing data 
data integration tool clio shown detail help users understand source data target representation assist creating mapping 
data transformation wrapper basic tasks wrapper describe data repository provide mechanisms users garlic middleware engine may retrieve data rs 
data source conform garlic data model data format tasks imply wrapper perform level schema data transformation 
task writing wrapper easy possible garlic wrapper architecture tries minimize required transformations wrappers desired 
schemas individual repositories merged global schema wrapper registration step 
step wrappers model data garlic objects provide interface definition describes behavior objects 
interface described garlic definition language gdl variant odmg object description language cat 
interface definition provides opportunity wrapper rename objects attributes change types define relationships data source stores 
example relational wrapper model foreign keys relationships 
developing interface files typically hard 
simple data sources may best generate manually simple sources tend object types usually fairly simple attributes behavior 
sophisticated sources process generating interface file automated 
example relational wrapper decide common mapping relational model garlic data model tuple object column attribute provide tool automatically generates interface file probing relational database schema 
wrappers provide implementation interface represents concrete realization interface 
implementation cooperates garlic assign garlic object id oid objects maps gdl base types specified interface file native types underlying data source 
oracle database wrapper relational schema garlic schema create table countries name varchar null climate varchar number primary key name interface country type attribute string name attribute string climate attribute long highest peak create table cities name varchar null country varchar null population number elevation number area number primary key name foreign key country countries interface city type attribute string name attribute type country attribute long population attribute double elevation attribute double area hotel web site wrapper interface hotel type attribute string name attribute string street attribute string city attribute string country attribute long postal code attribute string phone attribute string fax attribute short number rooms attribute float avg room price attribute short class void display location example wrapper schemas hypothetical travel agency application illustrates kinds simple schema data transformations wrappers perform 
agency integrate oracle database information countries cities arranges tours web site contains date booking information hotels world 
shows table definitions new interface definitions relational tables interface file web site 
relational wrapper renamed field highest peak exposed foreign key country cities table explicit country object integrated database 
wrapper able map requests attribute integrated database oid format format expected relational database string vice versa 
addition population elevation area columns stored type number population type long interface file elevation area doubles 
hotel listing web site contains html tagged fields describing hotel url map location particular hotel key 
interface definition file html fields represented attributes hotel object appropriate data type web site returns data string format 
map capability exposed display location method 
wrapper responsibility map names fields html page convert data strings appropriate types 
data transformation middleware views important means reformatting data especially middleware data resides data sources user little control 
views provide full power sql type unit conversions anticipated wrapper merging splitting attributes aggregations complex functions 
garlic object views allow restructuring data 
frequently case information particular conceptual entity part objects stored various data sources 
users want see single object 
object view creates new virtual object 
virtual object requires storage attributes specified query stored base data 
virtual object garlic object virtual object 
garlic uses oid base object basis virtual object oid provides function lift map base oid virtual object oid 
important reason virtual objects allow new behavior new methods defined objects 
methods views lift methods base objects virtual objects retain base object functionality 
method virtual object defined sql query 
query access oid virtual object method invoked keyword self find oid base object needed 
methods return item run time error results 
interface city listing type attribute string name attribute string country attribute float population millions attribute float elevation meters attribute type hotels string find best hotel long budget create view city listing name country population millions elevation meters hotels self select name country population elevation makeset oid lift city listing oid cities hotels name city country name country group name country population elevation oid create method find best hotel long budget return select name unnest self hotels class select rating unnest self hotels name name avg room price budget avg room price budget sample view definition method register object view garlic user provide interface implementation definitions view methods illustrated 
view city objects defined section creates city listing objects attributes city omit example area associated set hotels 
view definition shows objects created 
uses garlic object extensions sql including path expression get name city country new aggregate function makeset creates set 
note lift function compute oid new virtual object 
attributes virtual object included select list 
view definition simple unit conversions arithmetic functions uses uppercase function map country names oracle database names countries web source 
complex mappings translation tables user defined functions example possible 
method finds best hotel certain budget city invoked 
budget argument method 
note self identify correct set hotels 
data mapping integration described components garlic provide important data transformation facilities 
wrappers provide transformations required individual data sources including data model translation simple schema data transformations 
object views enhance wrapper transformations general view mechanism integrating schemas 
object views support integrated cooperative different legacy databases query language transformations horizontal vertical decomposition composition classes 
transformations required integrate overlapping portions heterogeneous databases 
addition working provide powerful suite schema data transformations permit integration schemas exhibit schematic discrepancies matching data objects represent real world entity 
heterogeneous data sources different assumptions may data time invariant appropriate include metadata data 
data schema may represented metadata example attribute class names 
heterogeneity referred schematic heterogeneity 
traditional query languages powerful restructure data metadata mil lss 
likewise heterogeneous systems different representations entity different sources common 
object may identified different name sources different key 
different entities may bear similar names different sources 
identifying equivalent objects merging requires new powerful transformations hs coh 
tasks requiring data translation form translated data schema fixed constrained 
data warehouse warehouse schema may determined data analysis business support tasks warehouse support 
new data sources added warehouse schemas mapped warehouse schema equivalent objects converged 
integrated view merge view generator correspondence generator validity check graphic user interface source schema target schema schema readers correspondence engine mapping generator meta query engine input schemas output view definitions tool architecture view longer synthesized set transformations local individual source databases 
possible discover source schema components data correspond fixed target schema existing data 
traditional schema data integration mapping process may require non local transformations source schemas data objects 
example consider hotel type defined 
imagine new source hotel data available data redundant original web source 
new source data collection country france china wish incorporate new source way user sees collection hotels 
obstacles goal 
schematic new source country name metadata attribute value 
second system needs able identify hotels sources 
hotel may identified different name sources st claire vs st claire different hotels may name holiday inn downtown exists cities 
metadata transformations higher order query language operators ros needed dynamic cleansing operations joins similarity coh 
building integrated schema converting data representation time consuming labor intensive tools available ease task 
building tool clio create mappings data representations semi automatically user input 
clio moves state art ways 
tools deal schema integration data transformation tackles integrated fashion 
second employs full database middleware engine giving significantly leverage ad hoc collections tools available today lightweight agents proposed 
third exploit notion target schema exists target data integration problem tractable 
fourth middleware engine enhanced powerful transformation capabilities section allow complex transformations schema data 
data mining techniques help discover characterize relationships source target schema data 
tool major components set schema readers read schema translate internal representation possibly xml correspondence engine ce finds matching parts schemas databases mapping generator generate view definitions map data named muse history deal legacy data 
source schema data target schema 
ce major subcomponents gui graphical display schemas relevant data items correspondence generator component test correspondences validity 
initially ce expect user identify possible correspondences graphical interface provide appropriate data source target meta query engine verifying correspondences identifying nature relationship initially relying user 
iterative process 
time anticipate increasing intelligence tool mining techniques propose correspondences eventually verify 
clio general flexible extensible 
expect library code modules java beans transformation operators middleware engine able apply internally 
open research issues include set transformations useful transformations particularly data cleansing done efficiently fly 
believe clio modular design provides flexibility required experiment wide range transformation operators allowing serve test bed research area 
acps candan papakonstantinou subrahmanian 
query caching optimization distributed mediator systems 
proc 
acm sigmod montreal canada june 
batini lenzerini navathe 
comparative analysis methodologies database schema integration 
acm computing surveys 
bon 
aix 
ibm 
carey heterogeneous multimedia information systems 
proc 
intl 
workshop research issues data engineering march 
cat cattell 
object database standard odmg 
morgan kaufmann san mateo ca 
coh cohen 
integration heterogeneous databases common domains queries textual similarity 
proc 
acm sigmod seattle wa june 
eti eti evolutionary technologies international 
www com 
hs hernandez stolfo 
merge purge problem large databases 
proc 
acm sigmod san jose ca may 
lss sadri subramanian 
language interoperability relational multi database systems 
proc 
conf 
large data bases vldb bombay india 
monge elkan 
efficient domain independent algorithm detecting approximately duplicate database records 
proc 
sigmod workshop data mining knowledge discovery may 
mil miller 
schematically heterogeneous structures 
proc 
acm sigmod seattle wa june 
pgmw papakonstantinou garcia molina widom 
object exchange heterogeneous information sources 
proc 
ieee conf 
data engineering pages taiwan 
ros ross 
relations relation names arguments algebra calculus 
proc 
acm pods pages san diego ca june 
rr ram ramesh 
schema integration past 
elmagarmid rusinkiewicz sheth editors management heterogeneous autonomous database systems 
san mateo ca 
rs roth schwarz 
don scrap wrap 
wrapper architecture legacy data sources 
proc 
conf 
large data bases vldb pages athens greece august 
tomasic raschid valduriez 
scaling heterogeneous databases design disco 
proc 
icdcs 
val technology incorporated 
www com 

