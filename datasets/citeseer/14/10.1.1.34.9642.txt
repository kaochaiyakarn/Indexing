key agreement ad hoc networks asokan philip communication systems laboratory nokia research center box fin nokia group finland fn asokan philip nokia com encounter new types security problems ad hoc networks networks little support infrastructure 
consider problem group people meeting room access public key infrastructure third party key management service share prior electronic context 
set secure session computers 
examine various alternatives propose new protocols password multi party key agreement scenario 
protocols may applicable scenarios 
fault tolerant version multiparty die hellman key agreement protocol independent interest 
keywords ad hoc network key agreement password authentication 
new key agreement scenario consider small group people conference coming room ad hoc meeting 
set wireless network session laptop computers duration meeting 
want share information securely outside room eavesdrop session 
people physically room know trust personally 
priori means digitally identifying authenticating shared secrets expanded version talk workshop kista sweden november 
preprint submitted elsevier preprint february mutually veri able public key certi cate chains access trusted key distribution centers 
attacker monitor modify trac wireless communication channel may attempt send messages come inside room 
secure communication channel connect computers 
problem group set secure session computers conditions 
rst obvious solution comes mind participants pick new shared secret encryption key secure communications 
shall see section unsatisfactory involves trade security ease 
ad hoc networks network scenario described example ad hoc network entities construct communication network little support infrastructure 
types infrastructure relevant 
rst type routing infrastructure form xed routers stable links 
second type server infrastructure line servers provide various services name service directory services trusted third party services 
third type organizational administrative support registration users issuing certi cates cross certi cation agreements di erent user domains 
lack infrastructure introduces problems routing name resolution service discovery security typically encountered networks full support infrastructure 
case security second source diculty 
example consider usual form con dentiality requirement 
participant requires read messages send label name space meaningful participants 
trusts certi cation authority ca correctly certify public encryption keys entities 
participant achieves con dentiality requirement encrypting messages public key certi ed ca 
process started certain prior context consisting de ned name space con dentiality requirement trust ca 
providing security services starts context 
scenario encounter new type prior context 
security requirement expressed terms location name space people meeting room read messages send 
usual con dentiality techniques public keys certi ed belong certain name relevant 
security techniques help transforming transferring trust assumptions prior context 
create trust 
simple way implement location key agreement map location set labels identity mechanisms key agreement 
example participants write ip addresses sheet pass 
certi cate key agreement mechanism internet key exchange 
public key certi cates allow participants verify binding ip addresses keys participants 
procedure reasonable solution location key agreement access line servers problems 
know certi cate participant revoked 
second participants may divided certi cation hierarchies cross certi cation agreements 
obvious solutions problem additional assumptions 
example trusted third party capable determining locations players system 
support may available ad hoc networks 
strong assumption general 
solution physically secure channel limited room example infrared channels ad hoc wired ethernet negotiate session key switching insecure wireless channel 
summary features ad hoc networks prevent straight forward application standard techniques key agreement problem lack infrastructure possibility new types prior context scenario described section 
goal nd solution key agreement scenario general ad hoc network environment making additional assumptions availability support infrastructure 
password authenticated key exchange capture existing shared context choosing fresh password sharing room writing blackboard 
password suciently long random string directly set security association 
practice people nd dicult long random strings 
user friendly password string people recognize easily natural language phrase 
natural language phrases weak secrets drawn limited set possibilities susceptible dictionary attacks attacker records encrypted trac attempts trial decryptions candidate passwords nds correct 
need protocol derive strong shared session key weak shared password 
examine concrete protocols summarize desirable properties 
secrecy basic secrecy requirement players know initial password learn resulting session key 
observers able learn information session key 
perfect forward secrecy requires attacker succeeds compromising players time learns permanent secret information known player unable discover session keys resulting previous runs protocol 
contributory key agreement resulting session key composed contributions players protocol said contributory 
motivation requirement contributory protocols designed assure correctly behaving player contribution chosen randomly certain key space coalition players able force choice eventual session key limited smaller key space 
tolerance disruption attempts strongest attacker disrupt protocol jamming radio channel modifying communication legitimate participants 
slightly weaker attacker insert messages modify delete messages sent interest scenario 
consider disruption tolerance type disruption attacks 
rest explore various alternatives designing protocol 
section describe known party protocol password authenticated key exchange examine extended multiple parties 
section look password authentication added multi party die hellman key exchange protocols 
particular fault tolerant version multi party die hellman key exchange protocol independent interest 
section take brief look related problem elect leader agree ordering ad hoc networks nodes 
section step back discuss security issues general ad hoc networks 
section conclude summary 
term player refer participates protocol legitimate participant attacker 
generic protocol password authenticated key exchange landmark bellovin described protocol called encrypted key exchange eke parties derive strong shared key starting weak shared key 
signi cant subsequent especially variant eke die hellman key exchange 
basic form generic protocol remains 
parties share weak secret random key pair ea da encryption decryption respectively suitable asymmetric key cryptosystem 
goal protocol mutually authenticate agree strong session key way attacker watching trac able learn mount dictionary attack basic protocol described section additional safeguard described section 
protocol generates random strings challenge sa generates random strings challenge sb suitable symmetric key encryption scheme key assumed 
lengths random strings speci ed concrete instantiation protocol 
public function 
public way function 
assumed 
protocol proceeds follows ea ea challenge sa challenge challenge sb challenge step sends ea encrypted weak secret sends label identifying 
assume message establishes pair wise communication channel identi cation labels included subsequent steps 
extracts ea generates randomly encrypts ea returns step 
extracts message generates challenge sa encrypts key sends result step 
extracts challenge message computes challenge 
generates random strings challenge sb encrypts challenge key sends result step 
extracts quantities message veri es rst quantity challenge 
point convinced able extract challenge message sent step 
turn implies knows correctly constructed message step extracted encrypt message step 
computes challenge encrypts key returns result step 
decrypts message veri es plaintext challenge 
certain able extract challenge message step turn implies knew able extract correctly message step 
point player compute session key sa sb 
obvious way extend protocol multi party case elect leader 
leader broadcast message step 
rest messages point point ows similar protocol playing role leader 
protocol run player shares key leader 
additional round needed leader pick common session key distribute members group pairwise session keys shares 
main drawback version common session key chosen unilaterally leader key agreement scheme non contributory 
slightly modify generic party protocol easily extended contributory multi party protocol 
challenges challenge challenge respectively con rm player fact know password 
player generates random quantity viz 
sa sb separate challenges 
quantities generate sucient con rm knowledge modi ed protocol proceeds follows ea ea sb sa sa sa sb sb sa sb steps receiving party con rm sending party knows 
steps 
public hash function 
messages steps sent ow 
extending version multi party case straight forward 
set players fm ng leader 
random share contributed eventual session key 
key pair suitable asymmetric encryption scheme 
fs ng session key computed 
input way function 
way hash function serve input way function concatenating inputs result input way hash function 
preferable way hash functions hide input bits 
commonly way hash functions property practice 
step key con rmation 
player con rm player knows key 
step completed successfully player received key con rmation player sucient randomly picks players ask carry step 
rest section summarize proofs extent requirements listed section met 
multi party protocol party version provides perfect forward secrecy parties knows decryption key decryption key destroyed protocol run 
attacker able decipher transcript past session 
key agreement contributory player receives contributions relayed constructs combining contributions 
protocol tolerant disruption attempts attacker know attempt send garbage step 
result legitimate players agree session key contribution attacker 
attacker determine key 
note making protocol contributory price wait long step gather contributions players start sending messages step 
non contributory version respond message step delay 
protocol drawbacks 
quantity encrypted step random 
means wellknown long term public encryption key preferable fresh keypair generated run protocol 
generating new keypair time computationally expensive 
parts encryption key may special properties product large prime numbers rsa help attacker attempting dictionary attack 
care taken encrypt unpredictable parts asymmetric key cryptosystems may possible send encryption key unencrypted step 
implies receiving message step know sent legitimate leader attacker 
particular depending cryptosystem attacker may chosen way random random leaving step vulnerable dictionary attacks 
message step may accompanied followed additional protocol convince correctly formed encryption key chosen asymmetric key cryptosystem 
issues discussed detail 
look password authenticated die hellman key exchange protocols avoid diculties generic protocol mentioned 
password authenticated die hellman key exchange party version die hellman key exchange dh classic party key agreement protocol proposed launched era modern cryptography 
basic dh protocol players agree prime generator multiplicative group zz set 

randomly choose secrets sa sb sa sb 
generally zz order cyclic group randomly chosen secrets drawn zz 
version password authenticated dh key exchange original follows sa sb step computes sa encrypts sends extracts sa message computes sb computes session key sa sb 
chooses random challenge encrypts key encrypts sb key sends encryptions step 
extract sb compute sb sa decrypt second part message extract picks challenge encrypts key sends result step 
decrypt check second part plaintext convince able correctly decrypt message step knew encrypts key sends result step 
decrypt see plaintext convince knew order correctly compute known decrypt message step 
convince knew multi party version unpublished protocol steiner achieves authenticated dh group key distribution multi party scenario slightly di erent 
considered group players want agree session key player shared di erent password authentication server 
protocol scenario 
scenario players share password player generates random quantity player share eventual session key 
goal protocol players knew shared session key random share contributed protocol divided parts 
rst part stages description construct intermediate key steps 
messages point sent clear 
note compute session key stage raising sn second part stages engage separate exchange players sucient information compute rst stage second part consists messages encrypted key 
third part stage players perform key con rmation 

stage public function key con rmation message 
players share password player veri es player computed session key 
sequence broadcast parallel blinding factor randomly chosen 
sn parallel broadcast stage contains steps 
rst step player computes sends step player raises quantity received previous step sends stage received raise obtain stage broadcasts 
removes contribution raises inserts randomly chosen blinding factor raises blinding factor 
resulting quantity encrypted key 
stage parallel send encryption decrypt received messages extract raises stage returns result parallel players point compute session key sn follows 
raises sn quantity received re inserts original contribution construct session key sn sn stage di erent players broadcast key con rmation message allows player verify player decided key quantity helps verify members view composition group 
scenarios labels members meaningless omitted 
blinding necessary reasons 
blinding quantity encrypted sent stage received stage 
second compelling reason active attacker feed attacker observe stage stage broadcast message 
unsuspecting uses quantity construct message stage resulting message message received stage 
thwart dictionary attacks message stage blinded 
protocol provides perfect forward secrecy players 
partially resilient disruptions leader disrupt protocol completely 
player may attempt disrupt protocol sending random quantity stage unrelated received 
able compute session key 
compute common session key 
fault tolerant die hellman key exchange cube becker wille showed multi party die hellman key exchange done eciently terms number communication rounds arranging players dimensional hypercube 
dimensional hypercube called cube graph form cube vertices connected vertices 
vertex assigned unique bit address drawn set zz addresses vertices connected edge th dimension cube di er th bit 
section describe basic becker wille approach show extended handle failures 
die hellman exchange cube basic idea proposed becker wille illustrated players want agree key 
bit addresses respectively 
suppose sa sb sc sd respectively random shares party dh 
rst round run party dh compute sab engage parallel run party dh resulting scd sc sd round runs party dh runs party dh player uses key computed round round pairwise exchanges ab round pairwise exchanges abcd ab cd abcd ab cd cd ab cd ab cd fig 

party dh key exchange 
gray edges connect players perform party dh key exchange 
quantities circles indicates secret known player round 
quantities near edges indicates shared secret computed round 
secret share round 
round players key imagine players vertices square exchanges round consisted edges square dimension 
suppose players 
player assigned vertex hypercube 
player unique bit address drawn set zz imagine players arranged dimensional hypercube 
protocol proceeds rounds consider player address th round player performs party dh node address words pointed general dh setting order subgroup zz mapped zz means suitable function round party dh exchange 
th round neighbors th dimension hypercube participate party dh protocol run 
rounds players key 
induction number players easiest way see becker wille protocol works 
basic case players agree shared key rounds illustrated 
suppose know multi party dh key agreement integer greater wish extend protocol case groups size inductive assumption members group multi party dh rounds independently group 
rounds group shared key 
members agree single shared key round member group perform party exchange player knows key group 
fastest way pair member group di erent member perform party key exchanges parallel independently pairs 
time needed party key exchange 
cube just right connectivity allow parallel key exchange groups 
notice round pairs groups group consisting single member exchange keys independently pairs 
round pairs groups group consisting members exchange keys independently pairs 
round pairs groups group size doing key exchange parallel 
adding password authentication obvious authentication single shared password incorporated cube protocol password authenticated party dh achieved simply move party password authenticated dh protocol section pair wise exchanges round cube protocol 
left questions number players power party key exchange fails parties faulty parties attacker tries prevent honest players reaching key agreement 
case power becker wille protocol call octopus optimize number rounds 
rst players play role central controllers 
remaining players distributed central controllers wards controller 
rst stage controllers execute party dh ward 
controllers engage round cube protocol run information gathered rst stage 
third stage key derived second stage distributed wards 
see details 
setting player may discover round key exchange chosen partner failed 
happens player needs nd alternate partner exchange 
clear becker wille optimization adapted take exchange failures account 
dealing faults node nds chosen partner round faulty need algorithm select potential partners non faulty 
consider partner selection algorithm number potential partners round bounded sub rounds 
denote node address partner suggested node round sub round see requirements match nodes partner sub round 
unique 
select partner twice node 
unique think algorithms satisfy requirements 
distributed algorithm player nd suitable partner partner exists party exchange current round 
algorithm works power attackers attempt participate protocol 
algorithm best illustrated example 
consider 
players bit addresses labeled 
contributions key represented corresponding lower case letters 
labels arrows indicate players contributed directly indirectly key resulting exchange indicated arrows 
suppose player address unsuitable unavailable know password 
round player start partner nding procedure candidate address mask 
exchange attempt fails mask 
round 
round start candidate address mask 
rst recursive call try candidate address mask fail 
second recursive call try candidate address mask succeed 
similarly round node starts partner nding candidate 
shows sequence partner choices examined node node algorithm round procedure round round number mask initialize mask bits setting significant bit mask mask round number bit positions partner self address mask indicates xor operation new mask mask right shift mask bit position party exchange partner new mask recursive sub algorithm nding partner performing exchange procedure party exchange candidate mask mask reached leaf node attempt running party dh key exchange return success failure endif non leaf try left side new mask mask right shift mask bit position result party exchange candidate new mask result success return success left side invocation succeed try right side new candidate candidate mask return party exchange new candidate new mask fig 

distributed algorithm nding partners fault tolerant party key exchange 
analysis algorithm suggests closer partners distant ones terms euclidean distance node addresses 
useful property underlying network hypercube 
round pairwise exchanges round pairwise exchanges round pairwise exchanges ab cd ab cd ef ef abcd efh abcd efh abcd efh abcd efh failed party key exchange successful party key exchange fig 

fault tolerant party key exchange 
round di erent neighbor node discover doesn know password happens neighbor algorithm pick partner 
candidate candidate candidate mask mask mask candidate candidate candidate candidate fig 

selection partner round node 
compare faults case protocol octopus protocol 
described protocol terms rounds 
round may consist sub rounds party key exchange default partners done 
operation player sub round consists phases rst computes outgoing messages sends reads waiting messages changes state accordingly 
intuitively sub round lasts long perform party die hellman key exchange 
measure communication complexity total number sub rounds 
number players power octopus protocol take rounds total round consisting 
protocol number rounds limited number sub rounds round big 
labeling players di erently worst case complexity protocol brought rounds 
starting keep assigning numbered node addresses missing players accounted 
rest addresses assigned sequence remaining actual participants 
round player default partner missing player guaranteed nd active partner player numbered node address 
example players assign addresses missing players actual players receive addresses 
modi cation worst case complexity sub rounds 
look number communication rounds required faulttolerant multi party dh key exchange cube partner selection algorithm satis es requirements listed section 
suppose need run rounds total number players assume players faulty including missing players really faulty players 
consider pathological layout faulty players 
located single cube remaining located cube participate round exchange 
number sub rounds required rounds round 
rounds sub cube faulty players 
non faulty player may select faulty players sequence able complete round exchange resulting rounds 
requirement section follows maximum number sub rounds required player 
sub cube faults maximum number sub rounds required 
round number faulty players cube 
player cube may try faulty players nding nonfaulty player 
maximum number sub rounds required round round non faulty player try possible partners giving cost sub rounds 
total rst rounds 
total number communication rounds required complete exchange scenario second term occur 
show upper bound number communication rounds faults regardless layout faults 
suppose faults distributed differently sub cubes number faults sub cubes strictly number sub rounds required round 
pathological example incurs maximum possible number sub rounds worst case rounds 
attackers protocol retains nice property long attackers remove modify messages sent honest players attackers send spurious messages denial service attack 
perfect forward secrecy contributory nature party dh retained 
implementation considerations partner selection algorithm section described terms rounds 
synchronous rounds implemented nodes loosely synchronized clocks 
possible allow node proceed independently 
node initiates pair wise exchange chosen partner indicate round number reached round reply try status message causing block round 
cause cascade blocked nodes 
replies times nds partner round cascade unblocked 
hand completed round presumably partner reply correctly sa quantity received previously completed round exchange 
signal error 
way di erent players di erent rounds moment time 
algorithm assumption pair wise exchange attempt faulty player fail 
case faulty player attacker 
practice need consider resilience face benign failures 
simplicity assume rounds proceed synchronous fashion 
node participates successfully rst rounds crashes round rest nodes continue protocol successfully 
rounds independent crashed nodes recover successfully complete protocol 
general benign failure model allow node crashes middle round 
small modi cation algorithm section resilient type faults 
subset nodes having signi cant bits addresses de ned set round peer set round peers 
suppose round members round peer set crash middle 
result members partner peer set may nished round exchanges successfully 
change algorithm simple player nd suitable partner round check members round peer set see failed nd partner 
member round peer set succeeded simply provide result round exchange set 
deciding leaders ordering protocols required electing leader choosing ordering players 
designed protocols leader occupying particular position ordering appear clear advantage uencing choice session key 
possibility overruled example password multiparty dh key exchange protocol section leader greater say nal session key players example try values nding leads particular type 
clear translated tangible advantage 
ad hoc networks may natural leader ordering 
protocols particular assumption leader ordering 
priori leader ordering natural question devise leader election order nding process uenced party 
electing leader special case determining order 
consider 
general approach randomized order nding simple player commits random number revealing number commitments received acknowledged players random numbers revealed 
public function applied input random numbers compute value 
computation car independently player 
ordering determined sorting numbers distance value 
security issues ad hoc networks examined problem arises speci ad hoc network scenario 
believe scenario captures primary distinguishing features ad hoc networks point view security security protocols form prior context players 
di erent ad hoc networks encounter new types prior context typically networking scenarios 
stajano anderson discuss security issues speci ad hoc networking scenarios 
identify denial service goals authentication problems naming issues ad hoc networks di er conventional systems 
security problems satisfactory solutions standard contexts security services visualized novice user easily con gure 
trust management policies expressed enforced 
security policies various levels organizational personal combined 
possibly problems need solved secure ad hoc networking reality 
initial focus security research ad hoc network ought problems understood standard network scenarios dicult solve characterize ad hoc network scenarios 
key agreement fundamental building block various security services problem 
ad hoc networks de ned infrastructure 
extreme case 
networks partial infrastructure possibly common 
availability infrastructure easier provide routing security services 
rst step types partial infrastructure common ad hoc networks identi ed characterized 
introduced new key agreement scenario examined various solutions key agreement problem scenario 
showed generic party encrypted key exchange extended multi party case 
addition introduced variation generic protocol extending achieve contributory multi party key agreement 
described previously known protocols password authenticated multi party die hellman key exchange improvements cube protocol resilient malicious benign failures 
password key agreement meets basic requirement set section solves problem requiring additional infrastructure physically secure communication channels 
password key agreement applicable scenarios 
example consider group people happened meet person rst time go back home set secure channel 
employ solutions modi cations 
second application may personal networking home networking devices owned user need share key 
example bluetooth industrial consortium developing speci cations ad hoc networking short range radio communication 
key management bluetooth bootstrapped pin code typically consists decimal digits 
bluetooth speci cations version section suggest party die hellman key agreement utilized keys derived short pin sucient 
multiple nodes involved home bluetooth network protocols may applicable 
lines possible 
formal security analyses protocols necessary missing step 
number password key agreement protocols proposed 
protocols improve original eke protocol 
example open key exchange protocol stefan avoids need encrypt public keys 
useful see protocols extended multi party scenario considered 
assumed composition group change session 
groups dynamic session key needs updated composition group changes 
described section implementation multi party key agreement need address issues synchronization resilience face benign faults 
acknowledgments hannu jan erik michael steiner feedback previous versions 
usual pleasure michael steiner interesting discussion sessions subject 

internet key exchange ike 
ietf network working group request comments november 
rfc 
roy want andy hopper veronica ao jonathan gibbons 
active badge location system 
acm transactions information systems january 
giuseppe ateniese michael steiner gene tsudik 
authenticated group key agreement friends 
th acm conference computer communications security pages 
steven bellovin michael 
encrypted key exchange protocols secure dictionary attacks 
proceedings ieee symposium research security privacy may 
patel 
number theoretic attacks secure password schemes 
proceedings ieee symposium research security privacy research security privacy pages oakland ca may 
ieee computer society press 
eld die martin hellman 
new directions cryptography 
ieee transactions information theory november 
michael steiner gene tsudik michael waidner 
re nement extension encrypted key exchange 
acm operating systems review july 
michael steiner gene tsudik michael waidner 
private communication 
unpublished described slides presentation third acm ccs conference march 
klaus becker uta wille 
communication complexity group key distribution 
th acm conference computer communications security pages 
frank stajano ross anderson 
resurrecting duckling security issues ad hoc wireless networks 
proceedings th international workshop security protocols lecture notes computer science 
springer verlag berlin germany april 
available www cl cam ac uk fms duckling 
bluetooth 
speci cation bluetooth system 
bluetooth consortium 
stefan 
open key exchange defeat dictionary attacks encrypting public keys 
security protocol workshop ecole normale paris april 
david 
extended password key exchange protocols immune dictionary attack 
proceedings workshop enterprise security cambridge ma usa june 
thomas wu 
secure remote password protocol 
symposium network distributed systems security ndss pages san diego california march 
internet society 
th acm conference computer communications security san francisco california november 
acm press 

