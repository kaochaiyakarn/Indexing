inquery retrieval system james callan bruce croft stephen harding department computer science university massachusetts amherst massachusetts usa croft cs umass edu larger heterogeneous text databases available information retrieval research depend development powerful efficient flexible retrieval engines 
describe retrieval system inquery probabilistic retrieval model provides support sophisticated indexing complex query formulation 
inquery successfully databases containing nearly documents 
increasing interest sophisticated information retrieval ir techniques led number large text databases available research 
size databases terms number documents length documents typically full text significant challenges ir researchers experimenting document abstracts 
order carry research different types text representations retrieval models learning techniques interfaces new generation powerful flexible efficient retrieval engines needs implemented 
information retrieval laboratory university massachusetts developing system past years 
inquery system form probabilistic retrieval model called inference net 
model powerful sense represent approaches ir combine single framework 
provides ability specify complex representations information needs compare document representations 
focus architecture implementation inquery system designed experiments large databases 
start giving brief description underlying inference net model section 
overview inquery architecture followed detailed descriptions important system components 
description give timing figures experiences gigabyte database contains nearly documents varying length short abstracts page reports 
conclude discussing current research development issues 
inference network model bayesian inference networks probabilistic models evidential reasoning widely years 
bayesian inference network bayes net directed acyclic graph dag nodes represent propositional variables arcs represent dependencies 
node value function values nodes depends 
leaf nodes typically represent propositions values determined observation 
nodes typically represent propositions values determined inference 
notable feature bayes nets dependencies necessarily absolute 
certainty probability represented weights arcs 
inquery type bayes net called document retrieval inference network 
document retrieval inference network inference net consists component networks documents queries see 
nodes inference net true false 
values assigned arcs range interpreted belief 
document network document network represent set documents different representation techniques varying levels abstraction 
shows simple document network levels abstraction document text level content representation level additional levels abstraction possible example audio video representations currently needed inquery 
document node represents proposition document satisfies user query 
document nodes assigned value true 
value arc document text node content representation node conditional probability jd 
document prior probability number documents 
content representation node represents proposition concept observed 
node may true false 
value arc content representation node query concept node belief proposition 
inquery uses types content representation nodes 
simplest corresponds single word document text complex concepts include numbers dates names 
section describes detail types content representation nodes created methods create 
query network query network represents need information 
shows network query levels abstraction query level concept level additional levels abstraction possible currently needed inquery 
query nodes represent proposition information need met 
query nodes true 
concept nodes represent proposition concept observed document 
concept nodes may true false 
query network attached document network arcs concept nodes content representation nodes 
mapping concept nodes may define concepts explicitly represented document network 
example inquery phrase operator define concept represented explicitly document network 
ability specify query concepts run time characteristics distinguishes intelligent information retrieval database retrieval 
link matrix document retrieval inference networks bayes networks derived enable specify arbitrarily complex functions compute belief proposition beliefs parent nodes 
functions called link matrices 
belief combination evidence specified directly link matrix node parents size delta problem avoided restricting ways evidence combined 
inquery uses small set operators described section closed form expressions 
overview architecture major tasks performed inquery system creation document network creation query network networks retrieve documents 
document network created automatically mapping documents content representation nodes storing nodes inverted file efficient retrieval 
query networks specified user user interface 
document retrieval performed recursive inference propagate belief values inference net retrieving documents ranked high ff omega phi psi ff omega phi psi ff omega phi psi gamma gamma gamma gamma gamma gamma psi ff omega phi psi document network upsilon sigma xi pi upsilon sigma xi pi upsilon sigma xi pi gamma gamma gamma gamma gamma psi hj upsilon sigma xi pi upsilon sigma xi pi hj upsilon sigma xi pi upsilon sigma xi pi upsilon sigma xi pi phi phi phi phi phi phi phi phi phi phi phi query network upsilon sigma xi pi simple document retrieval inference network 
est 
shows major components inquery system information flows 
sections discuss component detail 
parsing subsystem task building document network map document set content representation nodes 
mapping process referred parsing document consists components lexical analysis syntactic analysis concept identification dictionary storage transaction generation 
important components efficient construction document network time consuming parts building inference nets 
current set inquery parsers high level concept recognition require cpu hours sun mbytes memory parse gbyte document collection 
subsections describe parsing components implemented 
lexical syntactic analysis distinct uses lexical analysis inquery 
parser lexical analyzer provides lexical tokens usually words field markers syntactic analyzer 
database builder stores document text database user interface 
concept analyzers identify higher level concepts example dates names occur text 
activities lexical analyzers loosely coordinated lexical analysis manager 
reason desirable lexical analyzers inquery currently contains parsers different document formats 
burden supporting document formats minimized keeping database builder concept analyzers ignorant document format 
lexical analysis manager enforces ignorance controlling access input stream 
manager reads large blocks text internal buffer lexical analyzers read 
new document encountered parser analyzer exclusive access document shown 
parser analyzer responsible converting canonical format field markers document 
parser analyzer reaches document analyzers access document shown 
parser analyzer important duties converting document canonical documents document parser document database concept dictionary transactions file inversion queries inverted file query query oe document rankings user interface text processing retrieval subsystem relevant documents architecture inquery information retrieval system 
mat 
responsible providing tokens usually words numbers field markers syntactic analyzer 
responsible converting words lower case discarding user specified words optionally removing word endings ed ing notifying transaction manager discussed occurrence word 
principal syntactic analysis inquery ensure document expected format provide error recovery 
inquery syntactic analyzers created yacc 
concept recognizers inquery currently capable recognizing transforming canonical format types concepts numbers dates person names names 
inquery contains concept recognizer recognize record locations sentence paragraph boundaries 
concept recognizers tend complex desirable implement efficiently possible 
inquery concept recognizers currently finite state automata created lex 
principal possible combine recognizers single finite state automaton lex create automata required size 
number date recognizers grammars similar mauldin 
major difference inquery string arithmetic avoid roundoff errors number recognizer 
recognizers map different expressions concept canonical format 
name recognizer similar sophisticated rau 
looks strings capitalized words legal identifiers accompany names spa 
name occurs legal identifier recognizer usually recognize occurrences name document 
strategy performs reasonably test collections 
person name recognizer uses strategy similar name recognizer looks occupation titles titles 
strategy performs poorly test collections 
contemplating replacing current algorithm relies heavily large database known names 
sentence paragraph boundary recognizer currently able recognize boundaries explicitly tagged field markers 
locations boundaries saved file planned project sentence level retrieval large documents document document gamma gamma delta delta concept recognizers database builder parser lexical analyzer document document gamma gamma delta delta concept recognizers database builder parser lexical analyzer parser lexical analyzer converts field markers canonical form provides tokens syntactic analyzer 
parser analyzer reaches document database builder concept recognizers allowed read document time 
collections 
principle limit number complexity concept recognizers added inquery 
example investigating stochastic tagging automatically identify phrases 
main consequence additional concept recognizers overhead add parsing process 
current set recognizers slows parsing 
concept storage lexical analyzers designed efficiently strings characters rest inquery 
decision index document word higher level concept string characters replaced entry number term dictionary 
entry number take space manipulated efficiently string characters 
word exists number existing entry returned new entry created 
inquery originally stored dictionary tree data structure 
performance analysis showed dictionary bottleneck 
current version inquery stores dictionary hash table 
change reduced time required parse mbyte document collection cpu hours cpu hours 
transaction generation time term identified parser lexical analyzer concept recognizer location reported transaction manager 
document reached transaction manager writes disk set indexing transactions record term frequency locations occurrence document 
transactions currently stored text files suboptimal encoding method 
experiments large collections produced transactions fit disks 
transaction manager copes problem creating new transaction file time inquery document parser invoked 
invocation parser may parse documents 
periodic creation new transaction files enables scatter disks 
file inversion transaction represents link document node content representation node 
entire document network represented set transaction files produced parsing 
task addressed parsing organize network evidence may propagated rapidly efficiently 
value internal network node function values assigned parents 
inquery avoids instantiating entire document network retrieval recursive inference determine node value 
speed recursive inference depends fast information node links obtained 
inquery provides fast access information storing inverted file tree data structure 
inverted file constructed efficiently transactions term processed 
transaction files sorted inverted file constructed 
sorting procedure involves steps efficiency transactions may stored multiple files fit disk 
unix sort program sort transaction file term document identifiers 
transactions fit single disk merge sort sorted transaction files 
partition sorted transaction files term th merge sort partitions covering ranges terms 
sorting time consuming tasks building document network 
tests gbyte document collection sorting partitioning merge sorting gbytes transactions required cpu hours sun 
transactions sorted inverted file constructed time 
keys inverted file term ids 
records inverted file store term collection frequency number documents term occurs transactions term occurs 
inverted file stored binary format smaller transaction files assembled 
gbytes transactions referred converted mbyte inverted file cpu hours 
retrieval subsystem retrieval subsystem converts query text query network evaluates query network context previously constructed document network 
building query network queries inquery natural language structured query language 
natural language queries converted structured query language applying sum operator terms query 
table describes sum operators inquery query language 
query operators permit user provide structural information query including phrase proximity requirements 
query text converted lower case possibly checked stopwords stemmed canonical word form compared concept dictionary converted query net 
query net nodes correspond structured language operators query terms 
information contained node varies depending type 
attachment query net preexisting document net occurs term nodes 
retrieval engine inquery retrieval engine accepts root node query net evaluates returning single node containing belief list 
belief list structure containing documents corresponding beliefs probabilities meeting information need defined query 
retrieval engine instantiating proximity lists term nodes converting lists belief lists required structure query net methods defined 
list may sorted produce ranked list documents user see 
inference net evaluated recursive calls main evaluation routine turn calls possible node specific evaluation routines 
routines represent canonical form evaluating simplified link matrix node 
closed form expressions computing belief node bel gamma bel gamma gamma delta delta gamma bel delta delta delta bel max max bel bel sum basic structures computations document node belief derived proximity lists belief lists 
proximity list contains statistical proximity term position information document term specific basis 
belief list list documents associated operator action terms scope operator 
terms scope operator 
negate term scope operator 
sum value mean beliefs arguments 
value sum weighted beliefs arguments scaled sum weights 
additional scale factor may supplied user 
max belief maximum beliefs arguments 
match occurs arguments order words separating adjacent arguments 
example matches 
phrase value function beliefs returned sum operators 
intent rely full phrase occurrences rely individual words full phrases rare absent 
syn argument terms considered synonymous 
table operators inquery query language 
belief values node default beliefs weights combining belief lists different nodes 
belief list contain cumulative probability documents relevance query values parents 
belief lists may computed proximity lists reverse derivation possible 
limitation imposes restrictions query form 
query form produce proximity list type resultant node acted routine expecting belief list type 
proximity lists transformed belief values information list combined weighting scoring functions 
node belief scores calculated combination term frequency tf inverse document frequency idf weights 
values normalized remain modified tf belief default values user may define program invocation 
calculation belief node dependent type node number belief parents equations 
probability combinations achieved belief list merges negation 
retrieval performance typical query processing time seconds gbyte document collection 
processing time varies query complexity number terms query frequency collection 
terms high collection frequencies add processing time due length associated proximity lists 
retrieval performance improved boolean conventional probabilistic retrieval 
reader referred details 
interfaces inquery offers batch interactive methods query processing application programmers interface api support development customized front ends retrieval engine 
interfaces discussed 
application programmers interface inquery application programmers interface api set routines allow programmers develop interfaces inquery retrieval engine 
api functions open close inquery databases files convert query text query nets evaluate query nets retrieve documents 
batch interface batch program takes command line arguments form input file names switches 
output program ranked list documents weight calculated probability relevance file format readable evaluation program produce standard recall precision tables retrieval performance 
file relevance judgments submitted queries required input batch program 
arrangement allows queries run repeatedly changes system may evaluated 
user interface interactive user interface supports queries natural language structured form produced routines api 
query results displayed screen form ranked document list 
user may browse retrieved documents determine relevance query 
file containing session results may produced 
current status inquery system tested standard information retrieval collections heterogeneous gbyte collection 
continue conduct research intelligent information retrieval inquery system encourage 
inquery version described distributed technology transfer agency university massachusetts nominal fee 
current inquery addresses software engineering research issues 
improvement addition encoding methods reduce sizes inverted file user interface indices 
inverted file index reduced previous size user interface index reduced previous size 
improvement enable install gbyte document collection current hardware summer 
studying relevance feedback inquery 
relevance feedback enables user identify retrieved documents relevant user information need 
system analyzes documents produces revised query analysis retrieves new set documents 
colleague developing japanese version inquery called 
differences inquery lexical syntactic analyzers user interface 
japanese documents particularly challenging word boundaries implicit 
currently indexes documents characters words 
segmenter divides stream characters words tested 
research underway provide better support queries expressed natural language 
inquery currently handle natural language summing beliefs contributed individual query words 
believe improvements automatically identifying phrases incorporating words running concept recognizers queries performing types morphological processing 
research supported part air force office scientific research contract afosr 
eugene charniak 
baysian networks tears 
ai magazine winter 
kenneth church 
stochastic parts program noun phrase parser unrestricted text 
proceedings nd conference applied natural language processing pages 
stephen johnson 
yacc compiler compiler 
unix programmer manual 
bell telephone laboratories murray hill nj 
lesk schmidt 
lex lexical analyzer generator 
unix programmer manual 
bell telephone laboratories murray hill nj 
michael mauldin 
information retrieval text skimming 
phd thesis school computer science carnegie mellon university pittsburg pa 
judea pearl 
probabilistic reasoning intelligent systems networks plausible inference 
morgan kaufmann san mateo ca 
lisa rau 
extracting names text 
proceedings sixth ieee conference artificial intelligence applications 
howard turtle bruce croft 
evaluation inference network retrieval model 
acm transactions information systems july 
howard turtle bruce croft 
efficient probabilistic inference text retrieval 
riao conference proceedings pages barcelona spain april 
