specifying verifying fault tolerant systems leslie lamport lamport src dec com stephan merz merz src dec com digital equipment systems research center july minor correction october appear proceedings third international symposium formal techniques real time fault tolerant systems held september germany 
specifying verifying fault tolerant systems leslie lamport stephan merz digital equipment systems research center 
formally specify known solution byzantine generals problem give rigorous hierarchically structured proof correctness 
demonstrate engineering exercise requiring new scientific ideas 
assertional verification concurrent systems began years ago ashcroft 
early basic principles formal specification verification concurrent systems known 
precisely learned specify verify aspects system expressed correctness individual execution 
faulttolerant systems just class concurrent systems require special techniques 
important problems remain realm engineering science 
scientific ideas translated engineering practice 
describe believe suitable framework engineering discipline formal specification verification 
limited space provided proceedings limited time patience authors forced choose simple example specification hierarchical verification known fault tolerant algorithm 
example om traitor oral message solution byzantine generals problem 
problem collection generals commander set lieutenants communicate message 
generals including commander may traitor 
commander send order lieutenants loyal lieutenants agree order ii commander loyal order issued 
algorithm om satisfies conditions generals traitor 
augment traditional statement problem requiring loyal generals choose order fixed time start algorithm 
solution byzantine generals problem lies heart fault tolerant system faulty processors exhibit completely arbitrary behavior 
algorithm formally specified verified appendix final report 
considered straightforward exercise worth writing separately publication 
specification verification fault tolerant algorithms rocket science standard engineering practice 
literature verification concentrates underlying formalism ignores problem defining language specifying real systems 
literature specification languages generally ignores problem reasoning formally specifications real systems 
address practical issues existing tools precisely defined specification language hierarchical proof method 
section contains formal specifications problem algorithm 
specifications high level problem specification mid level specification algorithm roughly level detail provided low level specification realistically models message passing 
section proves specification implements higher level 
correctness property high level specification proved 
section discusses specifications proofs 
formal specifications specifications written tla complete specification language tla temporal logic actions 
semantics tla defined terms states behaviors 
state assignment values variables behavior infinite sequence states 
tla formula interpreted boolean function behaviors 
tla system modeled choosing variables values describe system state execution system represented behavior 
system specified tla formula true behavior behavior represents correct execution system 
specification mathematical formula precisely defined semantics 
correspondence real system mathematical formula lies interpretation formula variables 
free variables specification represent system interface part system specified 
description tla proof rules 
try explain meaning tla formulas specification read prior knowledge tla 
formalisms describe systems terms events called actions states 
event formalism corresponds change value interface variable tla specification 
basic method writing reasoning specifications event state formalisms 
tla provides language writing tla specifications 
addition operators tla contains operators defining manipulating data structures syntactic structures handling large specifications 
published description tla 
changes language explicit specification sorts longer required definitions ii construct described replaced earlier syntax operator iii single square brackets replaced double square brackets record operators 
record operators 
changes preceded particular example 
formulas specifications annotated boxed numbers boxed number refers corresponding number margin text line marks point formula explained 
specifications provide crash course tla basic syntactic features language predefined operators 
figures list syntactic constructs predefined operators tla ones specifications annotated pointers places text explained 
high level specification high level specification appears 
begins module named module basic unit tla specification 
col lection declarations definitions assumptions theorems 
import statement imports contents modules reals statement ect inserting text modules module di erence module imports includes module obtain definitions imported modules reals module defines equal true finite set 
module reals defines set real real numbers zero element usual operators real numbers 
specification understood knowing precisely imported operators defined 
reader wants see formal definitions include module explanation 
omit module reals 
starting predefined module naturals defines natural numbers takes fewer lines define set real operators real numbers specification 
returning module encounter parameters state ment declares module parameters 
parameters free symbols module 
formulas defined module expressed terms parameters built operators tla classes module parameters constants variables 
constants rigid variables temporal logic represent quantities unchanged behavior 
variables flexible variables temporal logic represent quantities change course behavior 
constant parameters specification cmdr commander 
lt set lieutenants 
order set possible orders 
time algorithm starts 
maximum length time take loyal generals decide values 
module import reals parameters cmdr lt order constant status ord variable assumption lt cmdr lt order real real gen lt cmdr loyal status loyal module import reals realtime status loyal traitor loyal ord status cmdr loyal traitor loyal cmdr ord cmdr order fail status traitor choose loyal ord ord order gen loyal ord ord ord unchanged status var ord status cspec fail cmdr var cmdr lspec choose fail var loyal ord spec cspec lt lspec rt ord status theorem spec gen loyal ord order gen loyal ord ord fig 

high level specification 
variable parameters status general value status string loyal traitor denoting general loyal 
strings denoted expressions form 
predefined data type tla byzantine generals problem expressed terms generals loyal 
formal specification state describe generals loyal 
introduce variable status ord general value ord denotes order chosen general string chosen order 
variable real number denotes current time 
informal discussion describe values variables behavior satisfies specification 
tla typeless logic means variable assume value 
precisely value variable state value say value status string mean value string state behavior satisfies specification describe 
lines primarily decorative second serves delimit assumption section 
assumption section asserts assumptions constant parameters 
module single assumption named defined expression right general symbol denotes identifier left defined equal expression right 
formula conjunction assertions 
lt set lieutenants finite set contain cmdr 
possible order 

real number 

positive real number 
tla uses notation list expressions denotes conjunction list expressions denotes disjunction 
indentation eliminate parentheses 
assumption section section consisting definitions 
constant operator gen defined set generals lieutenants commander 
boolean operator loyal defined loyal equals true status equals loyal 
care value loyal element gen round parentheses denote application operator argument arguments 
symbol loyal argument syntactically complete expression 
square brackets denote function application 
status status syntactically complete expressions denote values expression line ends module 
actual specification contained module comes 
module imports modules reals realtime 
realtime module express real time properties 
essentially module turn definitions 
specifying real time properties engineering problem solved applying standard methods 
explain operators realtime module appear specification 
module 
importing provides module specification parameters definitions gen loyal importing import modules reals turn imports 
reading module sequence examine temporal formula cspec specifies commander 
formula canonical form init process specification init predicate boolean expression constants variables 
describes initial state process variables 
action boolean expression constants variables primed variables 
describes steps pairs successive states change process variables 
action unprimed variables denote values starting state primed variables denote values second final state 
state function expression constants variables 
usually tuple describes components process state 
formula denotes represents step step leaves variables tuple unchanged 
temporal operator means init true behavior infinite sequence states state satisfies init successive pair states step leaves unchanged 
commander state described ord cmdr status cmdr components tuple var cmdr 
tla tuples enclosed angle brackets 
initial condition asserts 
commander status loyal traitor 

status loyal order element order symbol denotes logical implication 
lower precedence binds loosely boolean operator 
commander state relation fail cmdr asserts new value status cmdr traitor 
allows step ends state status cmdr equal traitor 
step change ord cmdr value 
formula cspec satisfied behavior consists infinite number states status cmdr loyal ord order ii starts finite possibly empty sequence definition realtime module contains typographical error correct definition appears 
real time conditions specify progress fairness conditions processes 
states ends infinite sequence states status cmdr equals traitor ord cmdr assumes completely arbitrary values 
formula cspec describes values assumed ord cmdr status cmdr 
assertion part state value variable ord di erent cmdr variable foo introduced 
formula lspec specification lieutenant conjunction formulas 
asserts holds initially step choose step fail step step leaves lieutenant state unchanged 
initial predicate asserts status correct value ii loyal ord equals denoting chosen order 
choose step 
starting state loyal chosen order 
step taken general interpreted fail step 

final state chosen order 

general final state loyal chosen order order chosen chosen 

status change implies loyal final state 
formula unchanged abbreviation second conjunct lspec form predicate formula asserts behavior true state 
case formula asserts loyal chosen order 
words asserts greater loyal chosen order 
interpret current time second conjunct lspec asserts loyal choose order time 
formula spec complete high level specification 
asserts 
commander specification cspec 

specification lspec lieutenant 
means current time initially start algorithm equals 
formula rt ord status 
module realtime defines formula rt monotonically nondecreasing real number steps change leave unchanged 
rt ord status asserts changes way expect time change ord status change 
steps change ord status value initial final state 
intuitively means considering changes ord status happen instantaneously 
formula spec high level specification 
means consider behavior represent correct execution algorithm satisfies spec 
specification definition definition right wrong 
specifications fail capture intent 
gain confidence specification prove theorems 
theorems usually form spec prop asserts behavior satisfying specification spec satisfies property prop 
module asserts theorem named theorem states behavior satisfying spec case general loyal time chosen order order loyal general 
words loyal general chooses order time order loyal general order 
theorems proved section 
mid level specification mid level specification describes algorithm om oral message byzantine agreement algorithm works presence traitor 
round algorithm 
round commander sends message lieutenants 
second round lieutenant relays message received lieutenants 
lieutenant chooses order applying majority function values received 
requirements majority function order received generals chosen ii lieutenants majority function 
informal description essentially 
contains tacit assumptions example lieutenant receives value round commander traitor 
formal specification assumptions explicit 
module declares new parameters mid level specification 
rcvd lieutenant order receives directly commander recorded rcvd relayed order receives lieutenant recorded rcvd 
lieutenant value rcvd function domain set lt lieutenants 
lieutenant loyal orders sent rcvd equal lieutenants majority majority function 
precisely majority operator single argument 
care value majority function lt set order orders 
maximum delay order sent received 
delay applies sending orders commander relaying orders lieutenants 
delay includes time needed decide send order 
maximum time takes lieutenant decision 
specification decision choose order received relayed orders 
assumption assertion constant pa rameters 
module import reals export reals parameters rcvd variable majority constant assumption real real lt order majority order order lt lt majority fig 

module 

real numbers 

function maps lieutenants orders 
majority order 

order equals lieutenant lieutenant majority equals expression lt order denotes set functions domain lt order lt export statement causes named definitions imported mod ule imports module name stands definitions module 
omitting export statement equivalent writing export module defines formula spec mid level specification 
imports modules 
importing imports parameters including ones imported include statement incorporates definitions module defined symbols prefixed hi example definition hi var included hi var equal ord status 
parameters included module instantiated expressions 
absence explicit instantiation described parameter instantiated symbol name 
parameter cmdr instantiated cmdr parameter obtained import statement parameter ord instantiated ord module included assumptions appropriate instantiations provable assumptions definitions including module 
assumption hi assumption included module provable assumptions definitions module assumption follows trivially assumption imported module turn imports module module import realtime include hi hi loyal rcvd lt issue loyal rcvd order rcvd rcvd loyal cmdr ord cmdr unchanged ord status relay loyal rcvd order rcvd rcvd loyal rcvd unchanged ord status choose loyal ord lt rcvd ord majority rcvd unchanged rcvd status issue lt relay choose hi fail var ord rcvd status lspec var loyal rcvd lt loyal rcvd choose var spec hi cspec lt lspec rt ord rcvd status gen gen loyal theorem spec hi spec fig 

module formula spec specification mid level algorithm 
similar specification spec module consisting conjunction formulas assert specification hi cspec commander included module ii formula lspec lieutenant iii initially equal iv formula rt ord rcvd status 
explained section rt ord rcvd status asserts behaves way expect ord rcvd status change instantaneously 
rest specification involves definition lspec specification lieutenant formula lspec conjunction formulas describe turn 
conjunct lspec canonical form init ex section 
initial predicate asserts initial condition hi status ord ii rcvd function domain lt rcvd equals lt general construct exp denotes function domain exp state relation disjunction actions issue represents sending order commander lieutenant enabled loyal rcvd equals denoting received order commander 
action sets rcvd order commander loyal order 
notation exp denotes function equals exp lt relay asserts relay step occurs lieu step represents relaying order loyal relayed order rcvd 
hi fail described action taken traitor 
allows arbitrary changes ord rcvd variables status 
choose action chooses order applying majority array rcvd relayed values 
final conjuncts lspec place timing bounds actions occur 
second conjunct asserts true loyal rcvd equals 
loyal rcvd equals issue step occurred 
conjunct asserts loyal issue step occur time 
similarly third conjunct asserts loyal relay step occur time 
final conjunct lspec places timing bound choose action temporal formulas defined module realtime 
formulas introduced general method specifying real time bounds 
action state function step changes variable occur formula asserts enabled time units step occurs 
temporal existential quantifier essentially hides variable fourth conjunct lspec asserts lieutenant loyal choose step occur time units received order commander lieutenants 
module asserts correctness mid level algorithm 
predicate asserts state general 
theorem asserts behavior general ii formula spec holds formula hi spec holds 
words theorem asserts presence traitor mid level specification implements high level specification 
low level specification mid level specification value transferred commander lieutenant single step relayed lieutenant single step 
low level specification model way values transmitted communication channels 
requires adding timeouts detect general fails send message 
specification uses module provides generic definitions describing transmission values channel 
module imports module sequences define operators sequences 
tla tuple 
function domain set 
nat ural numbers 
equals sequences module represents sequences tuples 
module explanation 
defines usual operators head tail concatenation sequences 
module variable parameters src interface sender channel 
pair element sequence values second element 
dest interface receiver channel 
pair element sequence values second element 
purpose second components src dest explained 
module single constant parameter real number represents maximum time required transmit value 
sending value initiated send step appends tail src complements src changing value vice versa 
receipt value occurs rcv step enabled head sequence dest 
rcv step removes head dest complements dest 
transmission value channel modeled tmt step moves element head src tail dest 
module import sequences reals realtime parameters src dest variable constant assumption assump real send src src src rcv dest head dest dest tail dest dest tmt src src tail src src dest dest head src dest ext src dest spec src tmt send src dest tmt rcv dest tmt src dest fig 

module formula spec specification timed channel 
behavior satisfies formula variables src dest behave way timed channel 
formula conjuncts 
describes sequence values assumed src 
initially src empty sequence src equals step changes src tmt step send step second conjunct similarly describes sequence values assumed dest third conjunct asserts real time requirement 
explained section conjunct asserts tmt remain enabled time units tmt step occurs 
conjunct asserts src nonempty values moved dest rate time units 
come ext pair consisting second components src dest explanation second components 
channel specification spec allows arbitrary values sent spontaneously allows values received arbitrary times 
specification conjoining specifications sender receiver constrain send rcv actions occur 
sender specification describe send actions occur values send receiver specification describe rcv actions occur 
sender receiver specifications allow channel internal tmt steps 
allow steps allowing step leave ext unchanged spec implies step tmt step 
module begins specification low level module import reals export reals hi mid tc parameters sent variable constant assumption real include hi include mid include tc src dest func lt func sent ext lt tc ext fig 

module 
algorithm 
module imports higher level 
params modules declares new variable parameters state function represents receiver dest chan nel state function represents sender src channel sent value sent records general sent value lieutenant general sent function domain lt constant parameter meaning module module asserts assumption relates 
module asserts assumptions imported modules respectively 
module includes modules includes parameterized copy module include statement incorporates definitions module prefixed tc indicated instantiations parameters src dest example includes definition tc tmt tail head export statement exports included definitions ones imported modules definitions module 
module definitions 
func function domain lt func restriction func domain lt set lieutenants state function ext array ext tuples channel interface lieutenant step leaves ext unchanged allows tmt steps channels allows send rcv actions channels 
definitions predicates actions final specification appear module 
normally combine module module lowlevel split specification keep module page long 
section import statement specifies initial predicate state action commander 
heading comment distinguished upright font 
commander hi fail step step ends status cmdr traitor send order lieutenant step 
step enabled commander loyal sent order sends order changes sent indicate order sent 
section defines initial condition normal actions lieutenant 
issue relay actions represent receipt order commander lieutenant respectively 
send action lieutenant sends order channel 
section gives definitions lieutenant timeout ac tions 
step occur lieutenant received order commander time 
step occur received relayed order lieutenant time 
timeouts needed ensure progress general fails send order 
action state action lieutenant module lowlevel imports preceding modules defines complete low level specification spec 
state functions cvar lvar tuples variables com mander lieutenant respectively 
formula emax asserts action enabled time units step occurs assuming step changes lvar 
formula cspec commander specification 
second conjunct asserts lieutenant step occur seconds enabled 
commander loyal action enabled initially remains enabled sends order 
second conjunct asserts loyal commander send order lieutenant time units start algorithm 
formula lspec specification lieutenant conjuncts express requirements loyal execute actions module import realtime hi loyal cmdr sent cmdr lt commander 
loyal cmdr cmdr tc cmdr send ord cmdr sent cmdr sent cmdr unchanged cmdr cmdr ord cmdr status cmdr hi fail cmdr lt mid loyal sent lt lieutenant issue loyal rcvd order tc cmdr rcv rcvd rcvd unchanged ord cmdr status sent send loyal rcvd tc send rcvd sent sent unchanged ord rcvd status relay loyal rcvd order tc rcv rcvd rcvd unchanged ord status sent choose mid choose unchanged loyal rcvd order rcvd rcvd unchanged ord status sent timeout actions 
loyal rcvd order rcvd rcvd unchanged ord status issue choose lt send relay hi fail fig 

module 
module lowlevel import cvar ord cmdr ext cmdr status cmdr sent cmdr state functions 
lvar ord rcvd ext status sent emax lvar temporal formulas 
cspec cvar lt emax cmdr lspec lvar emax issue emax emax choose lt emax send emax relay emax spec cspec lt lspec gen tc spec rt ord rcvd status sent theorem spec mid spec fig 

module lowlevel time units 
complete specification spec conjuncts specifica tion commander ii specifications lieutenants iii specifications communication channels iv specification starting time usual rt formula 
proofs describe theorems asserted specifications proved 
key moving proofs realm mathematics engineering practice hierarchical structuring 
method structuring proofs introduced 
conventions method described appear 
hierarchically structured proof sequence steps proof 
proof step short paragraph calculation hierarchically structured proof 
idea unstructured leaf proofs su ciently easy check highly wrong 
indicate proofs theorems carried level leaf proof consists simple expansion definitions propositional logic 
simple proofs easy check mechanically steps proofs checked tlp verification system 
proof theorem high level proof theorem consisting level steps proof final step 
construct introduces definitions local proof 
hierarchical numbering convention denoting parts formulas adding numbers lists conjuncts disjuncts 
inv formula loyal ord 
extend convention quantified formulas formula denotes formula 
convention formulas defined specifications conjuncts disjuncts explicitly numbered 
definition issue module issue denotes formula rcvd rcvd 
theorem form spec state predicate spec canonical form init completely standard proof method described ashcroft find state predicate invariant init implies ii implies iii implies 
tla formulation proof method transparent original description method reasoning programs 
spec written conjunction formulas canonical form formulas form proof involves simple generalization ashcroft method 
step stands goal proved case theorem 
proof curly braces enclose justification implication equivalence 
step chain implications equivalence follows simple substitution application standard rules 
loyal ord order gen loyal ord ord theorem spec gen inv loyal ord order loyal loyal ord ord ord ord loyal ord loyal cmdr ord cmdr order 
assume lt prove lspec lspec inv 
assume lt prove lspec cspec inv cmdr 
cspec 
lt gen inv gen 
proof spec definition spec 
cspec lt lspec lspec lt inv inv cmdr temporal logic rule distributes conjunction 
lt inv inv cmdr definition gen temporal logic rule 
gen fig 

high level structure proof theorem finish proof prove statements 
proof involves simple predicate logic discussed 
proofs similar consider 
level proof appears 
rule underlies proof proving allows infer predicate action 
rule logic tla formula action just actions form temporal quantification operator applied tla formula arbitrary formula 
tla proof rules valid 
complete proof prove 
step follows definitions simple predicate logic 
proof shown 
proof goal transformed assume prove form new goal simply inv inside proof assumptions referred assumption 
inv conjunction formulas inv inv inv level proof steps immediate 

assume lt prove lspec lspec inv loyal ord 
inv 
inv choose fail var choose fail var inv 
proof lspec lspec definition lspec choose fail var choose fail var rule predicate choose fail var choose fail var inv choose fail var choose fail var rule distributes 
inv choose fail var choose fail var rule predicate action 
inv fig 

high level structure proof step 

inv choose fail var choose fail var inv proof propositional logic su ces assume 
inv 
choose fail var 
choose fail var 
prove inv 
inv proof definition inv propositional logic su ces assume loyal prove ord order 
case unchanged var proof assumption case assumption definition inv unchanged var implies ord ord 

case choose proof case assumption choose ord order 
case fail proof case assumption assumption lead contradiction fail implies loyal definition fail loyal 
proof propositional logic assumption unchanged 

inv 
inv 
proof definition inv fig 

proof step 
proof proofs analogous 
goal inv deduced assumptions 
assumption disjunction proof cases 
statement case equivalent assume prove proof theorem theorem asserts spec implies hi spec 
trivial prove spec implies hi spec hi spec problem proving hi spec hi spec 
proving hi spec requires proving hi lspec hi lspec lieutenant high level structure proof theorem appears 
steps prove hi lspec hi lspec respectively proves hi spec 
steps establish useful invariants 
theorem spec hi spec inv loyal domain rcvd lt rcvd rcvd order loyal cmdr rcvd order rcvd ord cmdr loyal rcvd order rcvd rcvd ord ord majority rcvd lt rcvd real loyal ord lt rcvd 
assume lt prove hi cspec lspec lspec inv 
assume lt prove lspec lt inv hi lspec 
assume lt prove rt ord rcvd status lspec lt inv 
assume lt prove lspec hi lspec 
rt ord rcvd status rt ord status 

spec hi spec proof trivial spec hi spec 

spec hi spec proof definitions spec hi spec spec equals lt lspec hi spec equals lt hi lspec 

spec hi spec proof trivial spec hi spec 

spec hi spec proof definitions spec hi spec 

proof definition hi spec 
fig 

high level structure proof theorem 
assume lt prove lspec lt inv hi lspec 
hi proof definition 

lt inv inv var hi choose hi fail hi var 

proof lspec lt inv definition lspec 
var lt inv simple reasoning 
lt inv inv var simple reasoning 
hi hi choose hi fail hi var definition hi lspec hi lspec 
fig 

proof step proof elided 
step invariance proof kind seen proof theorem proof omitted 
consider proof appears 
key step proof 
hi var var obvious unchanged var implies unchanged hi var 
proof demonstrates step mid level specification step hi choose hi fail hi var step step allowed high level specification 
called proving step simulation 
formally level proof case split disjuncts var hard case choose prove implies hi choose 
words prove mid level choose step implements high level hi choose step 
level proof case obtained separately proving hi choose 
hi choose 
hard parts steps 
proof proof omitted 
step property form theorem temporal quantifier lspec 
indicates quantifier handled 
define lspec quantifier removed define invariant 
heart proof step asserts ordinary invariance property temporal quantifiers proof omitted 
steps show quantifier put back elements real means real 

lt inv inv var hi choose hi fail hi var proof propositional logic su ces assume 

lt inv inv 
var prove hi choose hi fail hi var 
case issue proof definition issue equals unchanged hi var 

case lt relay proof propositional logic su ces prove lt relay implies unchanged hi var follows definitions relay hi var 

case choose 
loyal ord proof choose holds case assumption 

ord order 

gen loyal ord ord ord 

unchanged status proof choose holds case assumption 

proof imply hi choose 

case hi fail proof immediate 

case unchanged var proof definition hi var subsequence var 

proof definition 
fig 

proof step proofs elided 

ord order 
rcvd lt order 
domain rcvd lt proof inv holds assumption assumption 

lt rcvd proof choose holds assumption 

lt rcvd order proof inv holds assumption assumption 

proof 

proof choose holds assumption assumption 
fig 

proof step 
formula simple reasoning 
formally rules valid occur free proof strategy familiar done rigorous proofs ordinary order logic 
proof step simple matter deducing lspec lspec respectively 
proof step uses basic strategy proof simpler 
formal proofs steps omitted 
proof theorem high level proof theorem appears 
proof theorem prove implication quantifiers removed hypothesis add quantifiers final step 
proof final step shown 
prove step reasoning add quantifiers 
proof step tla proof rule analogous rule higher order logic 
formalism tla includes set theory functions ordinary values rule stated order logic 
assume lt prove rt ord rcvd status lspec lt inv lspec lspec lspec lspec real loyal ord lt rcvd 
rt ord rcvd status lt inv 

rt ord rcvd status lt inv proof simple temporal reasoning implies 

rt ord rcvd status lt inv proof occur free 

proof rt ord rcvd status lt inv definition rt ord rcvd status lspec lspec lspec lspec lt inv occurs free 
rt ord rcvd status lspec lspec lspec lspec lt inv definition lspec 
rt ord rcvd status lspec lt inv fig 

proof proof elided 
theorem spec mid spec qt ct variable lvar cvar lt ct cmdr lvar issue choose lt send relay tc spec tc spec tc spec qt 


cspec mid hi cspec 
assume lt prove cmdr rt ord rcvd status sent 
assume 
lt 
prove rt ord rcvd status sent 
assume lt prove lspec lt mid lspec 
rt ord rcvd status rt ord rcvd status 
fig 

high level proof theorem 
range needed domain function set 
ordinary existential quantifier replaced temporal quantifier rule remains sound general finite 
return high level proof theorem 
proof step simple omitted 
proofs straightforward rule unsound infinite set defined invariant stuttering 
sound operator manna pnueli preserve invariance stuttering 


cspec lt gen rt ord rcvd status sent mid spec proof definition mid spec 

cspec ct lt qt gen rt ord rcvd status sent mid spec proof ct occurs occur qt occurs 


ct cspec 
lt lt lspec 
qt gen gen tc spec proof lt finite assumption module imported module equivalent finite set temporal operator 

proof definition spec 
fig 

proof step 
invariance arguments 
invariants defined 
invariants bit long proofs tedious omitted 
step introduces new problem proving implication contains examine proof outlined 
step implication form seen 
major part proof consists proving step simulation 
proof straightforward tedious pages 
steps form proved showing implies proofs easy 
step appears 
order logic proves implies instantiating finding expression implies 
technique temporal quantifier instantiation called refinement mapping 
prove instantiate timer variable express timing constraint mid choose 
instantiation simple instantiate timer variable low level choose action 
step rcvd rcvd cord cmdr lord loyal cmdr loyal cord cmdr cord ord cmdr cmdr loyal rcvd lt loyal cmdr cmdr ct loyal loyal cmdr cmdr qt cmdr loyal loyal cmdr cmdr loyal rcvd real loyal loyal lord lord rcvd loyal rcvd loyal loyal qt loyal loyal loyal rcvd fig 

invariants proof theorem 

assume lt prove lspec lt mid lspec 
lspec lt mid init mid mid var 

loyal rcvd 

loyal rcvd 

lvar emax choose mid choose mid var 
lvar choose lvar mid choose mid var 

lvar choose lvar mid choose mid var proof 

lvar choose lvar mid choose mid var proof occur free lvar 

proof definition emax choose 

proof definition mid lspec 
fig 

proof step steps elided 
familiar form 
form init proof simple 
remaining step high level proof theorem 
easy omitted 
discussion algorithm informal specification understood writing formal specifications straightforward exercise 
expected discovered small mistakes initial versions writing proofs 
specifications subject mechanical checking probably contain typographical errors 
say errors minor modern text editors typesetting systems careless keystroke produce major mistakes 
specification style di erent customary 
usually write interleaving specifications events di erent processes represented separate steps 
written specifications allow individual steps represent actions processes 
example formula spec module allows behaviors single step issue step lieutenant relay step di erent lieutenant writing specifications introduced new problems 
writing proofs straightforward exercise 
typical reasoning real time specifications safety properties liveness properties 
proving safety properties creativity required finding invariants 
practice writing invariants second nature 
rest proof standard process applying simple tla proof rules structure formulas decompose resulting proof obligations 
writing kind proof exercise organizing complex structure 
programming completely di erent mathematicians write proofs 
steps proof mathematically trivial 
hierarchically structured proofs long tedious kind hand proofs trusted 
shortcuts 
short proofs short gloss details checked avoid errors 
proofs amenable mechanical verification 
steps checked tlp verification system 
type reasoning checked finite state methods mechanical theorem proving considerably writing hand proof 
hierarchical proof style possible reduce probability errors hand proofs acceptable level 
specifications written tla flexibility tla indicated ease real time properties expressed language special primitives time 
realtime module specifying byzantine generals specifying gas burner 
kind flexibility modularity characteristic engineering discipline 
proofs logic tla 
completely formal 
lower level steps omitted parts detail show proofs carried level simple propositional reasoning 
proofs seamless 
theorems proved mathematical formulas step proving mathematical formula 
switching programs logic appeal semantic understanding 
hierarchically decomposing large problem smaller ones simple mathematical rules characteristic engineering discipline 
believe formal specification proof feasible high level designs real systems 
feasible reasoning level executable code special applications small parts system 
may appear di cult reason code specifications logical formulas programs 
primary issue language complexity 
hard reason real programs complicated 
formal reasoning generally applied concurrent programs written toy languages csp unity 
program toy language closer real program tla formula 
needed formal reasoning executable code routine 

martn abadi leslie lamport 
existence refinement mappings 
theoretical computer science may 

martn abadi leslie lamport 
old fashioned recipe real time 
research report digital equipment systems research center 
earlier version proofs appeared pages 

martn abadi leslie lamport 
conjoining specifications 
research report digital equipment systems research center 
appear acm transactions programming languages systems 

ashcroft 
proving assertions parallel programs 
journal computer system sciences february 

mani chandy misra 
parallel program design 
addison wesley reading massachusetts 

de bakker huizing de roever rozenberg editors 
realtime theory practice volume lecture notes computer science 
springer verlag berlin 
proceedings rex real time workshop held netherlands june 

urban engberg peter leslie lamport 
mechanical verification concurrent systems tla 
computer aided verification lecture notes computer science berlin heidelberg new york june 
springer verlag 
proceedings fourth international conference cav 

hoare 
communicating sequential processes 
series computer science 
prentice hall international london 

kurki 
operational specification joint actions serializable databases 
distributed computing 

simon lam shankar 
protocol verification projections 
ieee transactions software engineering se july 

simon lam shankar 
specifying modules satisfy interfaces state transition system approach 
distributed computing 

leslie lamport 
specifying concurrent program modules 
acm transactions programming languages systems april 

leslie lamport 
temporal logic actions 
research report digital equipment systems research center december 
appear acm transactions programming languages systems 

leslie lamport 
write proof 
research report digital equipment systems research center february 
appear american mathematical monthly 

leslie lamport 
hybrid systems tla robert grossman anil nerode anders ravn hans rischel editors hybrid systems volume lecture notes computer science pages berlin heidelberg 
springerverlag 

leslie lamport robert shostak marshall pease 
byzantine generals problem 
acm transactions programming languages systems july 

nancy lynch mark tuttle 
hierarchical correctness proofs distributed algorithms 
proceedings sixth symposium principles distributed computing pages 
acm august 

zohar manna amir pnueli 
temporal logic reactive concurrent systems 
springer verlag new york 

misra mani chandy 
proofs networks processes 
ieee transactions software engineering se july 

peter neumann leslie lamport 
highly dependable distributed systems 
technical report sri international june 
contract number sri project 
module import naturals nat nat nat module sequences import naturals oneto nat len choose nat domain oneto head tail oneto len oneto len len len len module realtime import reals parameters variable constant assumption real rt real real enabled enabled enabled fig 

modules sequences realtime 
assumption begins sequence assumptions true constant parameters module included module 
constant specifies parameter sort 
definitions begins sequence definitions 
keyword may omitted replaced keywords action boolean constant predicate state function temporal transition function denote sort symbols defined 
export specifies definitions visible importing including modules 
import appends parameters assumptions definitions theorems module 
include 

appends definitions assumptions theorems theorems module instantiations parameters 
module begins module 
parameters declares free parameters module 
theorem begins sequence theorems 
provable module assumptions rules order logic set theory tla 
variable specifies parameter sort 
defines operator 
meaningless decoration ends scope assumption theorem section 
marks module 
fig 

syntactic keywords symbols tla predicate action operators true final state step enabled step possible unchanged composition actions temporal operators true eventually weak fairness enabled strong fairness enabled leads temporal existential quantification hiding 
fig 

nonconstant operators tla logic true false choose equals satisfying sets set di erence 
en set consisting elements set elements satisfying set elements subset set subsets union union elements functions function application domain domain function function set functions function equal set functions equal records component record 
en record component 
set records component record equal set records equal tuples th component tuple 
en tuple th component 
set tuples th component miscellaneous 
cn literal string characters equals true case 
pn en equals true 
en equals context definitions 
pn conjunction 
pn 
pn disjunction 
pn fig 

constant operators tla 
