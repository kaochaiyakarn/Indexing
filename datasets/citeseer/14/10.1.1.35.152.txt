implementation rotation latency sensitive disk scheduler lan huang tzi cker chiueh computer science department state university new york stony brook stony brook ny cs sunysb edu may processor speed memory capacity increasing times faster disk speed 
disk performance important bottleneck due disparity 
disk head seeking overhead reduced faster rotational overhead rotational overhead signi cant part overhead disk operation 
traditional disk scheduling methods targeted reducing seeking overhead due reasons device driver lack disk head information rotational overhead signi cant part overhead early years 
scheduling algorithms rotation delay concern promising modern disks single rotation sensitive algorithm implemented due lack knowledge hard drive physical parameters disk head position 
pure software disk head prediction mechanism predict current disk head position 
describe certain heuristics estimate disk service time request 
mechanisms implemented rst best knowledge rotation sensitive disk scheduling algorithm real disk storage systems 
show stability accuracy head prediction mechanism 
rotation sensitive scheduler able provide real time guarantee time critical applications full knowledge disk head service time 
performance results various rotation sensitive disk scheduling algorithms real synthetic traces 
processor speed memory capacity increasing year 
contrast disk speed growing year 
disk subsystem carefully managed compensate growing performance disparity processing storage components 
past years various disk scheduling algorithms researched improve disk bandwidth utilization minimize response time reduce starvation 
known disk scheduling algorithms seek time optimized ones ssf shortest seek time rst scan cscan cyclical scan rotation sensitive ones stf shortest service time rst gstf grouped stf wstf weighted stf :10.1.1.152.5459
scan restricts search minimum seek time request direction 
improves fairness problem ssf 
disk head reaches disk merely reverses direction begins scanning disk 
shortcoming scan algorithm requests disks worse response time middle disk 
cscan alleviates paying seek disk move disk head 
disk head moving direction maximum observed response time improved compared scan ssf 
stf searches request minimum disk service time including seek time rotation time media access time 
gstf algorithm groups requests groups 
proceeds group requests current serviced group serviced 
gstf better maximum response time stf 
wstf similar stf wstf predicted disk service takes ect waiting time request 
advances disk technology reduced seek time rotational latency 
trend continues expect rotation sensitive disk scheduling algorithms useful 
disk remains black box disk driver sense physical disk parameters unknown disk drivers disk head position logical physical mapping board cache properties seek curves 
previous disk scheduling research demonstrate performance disk simulation 
example widely disk scheduling algorithms linux disk driver fcfs rst come rst serve algorithm 
best knowledge existing disk controller exposes current disk head position device driver 
disk head information infeasible build rotation sensitive disk scheduler practice 
accomplish goal comprehensive disk scheduling introduce simple pure disk head prediction scheme demonstrate validity accuracy 
adjust disk access time model improve accuracy access time estimation context real disk 
illustrated disk physical parameters extracted micro benchmark interrogative disk commands 
extracted physical parameters implemented rotation sensitive disk scheduling algorithms real disks 
full knowledge servicing time disk requests provides possibility real time scheduling time critical applications 
show performance results various rotation sensitive scheduling algorithms synthetic real system traces 
rest organized follows 
section give brief background disk physical parameters extraction existing disk scheduling algorithms 
section shows software disk head prediction accuracy stability scheme 
describe heuristics developed estimating disk access time section 
section presents various rotation sensitive scheduling algorithms implemented 
show performance results section section concludes 
related main streams disk scheduling algorithms seek time rotation sensitive ones 
fcfs illustrated sub optimal disk scheduling literature 
early years history movable head disk full stroke seek time long ms ibm full rotational delay eighth 
wide range seek time optimized algorithms studied 
shows main drawback ssf shortest seek time rst larger variance response time 
scan algorithm restricts search minimum seek time request radial direction 
scan causes long waiting times requests extreme disks 
addresses freezing queue scan starts 
man ryan extensive analysis performance fcfs scan sstf 
geist daniel described continuum algorithms ssf scan di ering importance maintaining current scanning direction 
cpu power memory capacity computer systems increases dramatically rotational delay reduced slower seeking overhead rotation sensitive disk scheduling give better performance 
seltzer evaluated performance rotation sensitive scheduling algorithm seek optimizing algorithms rotation algorithms performs better seeking ones :10.1.1.152.5459
reduce starvation variations rotation sensitive scheduling schemes pursued 
similar discussion rotation sensitive scheduling algorithms jacobson wilkes 
bender andrews zhang presents algorithm services requests opt rotations opt number rotations taken optimal algorithm 
disk scheduling problem np hard practical look optimum algorithm 
give chain algorithm potentially implemented online algorithm disk scheduler 
chain tries nd longest sequence requests disk head service rotation current disk head position 
due lack detailed hard drive physical parameters rotation scheduling algorithms evaluated theoretical analyses simulation 
software disk head prediction disk access time prediction mechanisms believed extremely useful write type le system proposed 
known eager writing write near disk head position cases requires knowledge disk head position time 
ganger wilkes illustrated disk physical parameters extracted micro benchmark interrogative disk commands 
physical geometry data permanent won changed disk manufactured 
rotation speed seek time ected thermal variation conditions xed period time stable 
possible develop software mechanisms estimate behavior disk head 
disk head prediction disk head position critical information write near disk head cases 
chiueh designed track logging disk writes log record predicted nearest position disk head log disk 
wang presents virtual log programmable disk presumption eager writing available 
le system passes target logical address low level driver driver maps received logical address nearest physical disk address shortest disk service overhead achieved 
best knowledge existing disk controller exposes information users 
software prediction mechanism needed 
disk physical parameters extracted micro benchmark interrogative disk commands 
rotation speed determined performing sequence writes location 
mean time request completions average rotation period 
experience rotation speed pretty stable xed temperature 
interrogative disk commands mode sense translate address retrieve mapping logical address physical address 
hard drives interrogative commands implemented microbenchmark needed extract data sector number track test shown 
total sectors tested drive constant dest dest dest perform write address dest algorithm 
algorithm perform sets sequential write tested drive 
number sectors hard drive passes command processing period 
write away guarantees overhead write minimal containing full rotation overhead 
destination sector crossing track boundary cylinder boundary expects see longer delay due head switch cylinder switch overhead 
extra overhead re ects regular jumping pattern extracted overhead curve tell data sectors track accurately 
algorithm tested st part curve shown 
case 
rst point jump starting point track cylinder 
curve proves sectors cylinder spared defect management track cylinder spt number tracks 
order estimate disk head position driver takes timestamp disk access interrupt handler code stores timestamp variable logical block address disk head moves variable lba cache hit reads timestamp address updated disk head move destination disk board cache able service 
disk physical geometry information logical block address lba converted chs cylinder head sector address disk driver predicts disk head position lba time formula mod spt mod spt lba lba spt number sectors current track disk rotation period 
empirical value compensate command processing overhead unknown xed mechanical overhead side ect embedded servo system 
value obtained performing series single sector predicted write operations drive di erent set tests measured overhead write operation half full rotation time considered predicted correctly 
values correct tests choose minimum empirical value prediction formula 
value smaller extracted minimum empirical value prediction wrong note zone number data sectors di track may di erent usually cylinder sectors spared defect management 
lba address write destination head switch cylinder switch resulting curve applying st 
full rotation overhead seen measured overhead write operation 
prediction module uses little larger value prediction accuracy won ected 
dedicated servo system side platter hold servo information extra compensation needed formula cover servo sectors 
prediction module involve intensive computation microsecond needed get timestamp compute prediction formula 
accuracy critical correctness head prediction 
pretty stable value observed need re measure value weekly longer 
invention modern disks called wear leveling idea remove amount time heads spend spinning physical area disk 
fteen seconds drive controller moves heads track traversing entire disk area area disk heads sitting long 
built servo control mechanism automatically adjusts shifts position media due temperature variations 
drives implemented additional thermal adjustment called thermal re calibration 
minutes heads moved distance tracks measured 
information recorded aid positioning heads reading writing needs done 
periodic behavior potentially ects accuracy disk head prediction 
long point lba updated disk access normal access pattern disk prediction ones 
verify accuracy prediction scheme performed series writes predicted address measure physical elapsed time command sent driver command done 
prediction inaccurate expect see average physical elapsed time longer delay media access time write operation 
expect see physical elapsed time media access time proportional number sectors read written disk 
tests st scsi disk con rm prediction formula works accurately 
due periodic thermal re calibration wear leveling minor uctuation rotation speed disk head prediction needs periodical re calibration update point guarantee accuracy 
re calibration goes disk idle unnecessary re calibration point updated anyway current disk operation 
micro benchmark able tell long disk head prediction sustain needs re calibration 
measurements perform write address wait unit interval time perform write address stability algorithm 
basic algorithm performs disk write predicted position named time interval unit interval previous disk access 
raw disk avoid le system optimization 
flush bit turned scsi command avoid board cache ect 
module disk position prediction returns predicted value 
apply stability algorithm st disk get stability curve 
duration correct prediction re calibration seconds 
result sustaining period longer seconds ected periodic behavior hard drive 
value 
long re calibration period module longer average inter arrival time disk head prediction accurate 
pointed disk access usually falls bursty pattern 
bursty period point updated frequently 
sparse period re calibration updates point timely head prediction goes 
conclude module works cases 
module needs full knowledge properties board disk cache skip cache hit ones updating point memory 
properties retrieved mode page 
veri ed performing series read write operations certain speci position 
measurements shows st track caching cache size kbytes 
cache property data st appendix 
estimation disk access time criteria rotation sensitive disk scheduler disk access time current disk position long take move disk head destination 
service ow disk read requests contains cpu prepares command data cpu sends command disk disk actuator seeks destination cylinder disk control system switches right head disk head waits platter rotates destination sector disk head accesses media data transfered kernel bu er 
steps summarized service access time estimation formulas access time service time size request size sectors seek seek time duration recalibration ms stability disk head prediction st 
drive dedicated servo system 
physical parameters 
head switch overhead rotate extra rotation time needed positioning disk head destination sector size spt seek rotate omitted disks dedicated servo system head switching fast overlapped seek time distance zero 
seek estimated widely disk seek time model 
short seeks disk arm accelerates halfway point settles destination cylinder 
long seeks disk control system accelerates disk arm full speed back zero desired cylinder 
seek threshhold threshhold seek time parameters tests st appendix 
rotate decided seek time physical sector distance source destination 
disk head arrives destination track number sectors passing seeking period larger destination sector disk head wait full rotation period destination sector comes back 
due track skew cylinder skew sectors track minimal lba address aligned 
rotate de ned number sectors pass arrival destination track meeting destination sector 
skew ect added formula rotate 
rotate skew spt mod spt don accurate skew factors experimental disk 
order predict disk access time accurately perform extensive micro benchmark disk extract approximation curves help decide access time 
set algorithm summarizes extracts arrival destination track sectors offset disk head away starting point measurements measurements write sector track write sector measurements track return measurements minimal overhead second write set algorithm 
algorithm nds set arrival point destination track starting point 
set re ects combined ect track cylinder skew seek time 
set algorithm applied zone cylinders 
rotate computed offset way rotate rotate rotate offset spt mod spt unit time time disk head pass sector current track 
certain boundary cases arrival point close destination point deviation exists offset estimation rotate deviates real value far away di erence close spt 
safe possibility prediction module chooses maximum value rotate spt mod spt rotate estimated value rotate prede ned compensation value 
typical value 
gives graphical view formula represents 
alternative saves lack accurate track cylinder skew data 
approach requires exhaustively performing set disk 
disk format approach accurate results 
data stored table disk scheduler look needed 
improve space eciency data set starting cylinder multiple linear curves 
slope starting value curves stored main memory table 
adjacent cylinder curve feature merged reduce memory space needed 
disk scheduler needs predict access time source destination address compute offset rst curve slopes starting values stored look table applies formulas get rotate fortunately slope starting value pair remains roughly zone 
experiments show get accuracy single slope zone comprehensive slope starting value table 
con rms needs perform set algorithm small local areas zone extract slope starting value pair 
rest represent starting point position destination point offset disk rotate direction skew rotate offset disk head moves destination track disk platter passes sectors seek period plus ect track cylinder skew disk head meet sector offset skew away starting point 
disk head wait remaining rotate sectors passing access media 
disk scheduling algorithms scheduling algorithm provide performance terms response time fairness avoid starvation 
real time applications real time guarantee storage system necessary 
seek optimized algorithms traditional seek optimized algorithms include scan cscan cscan disk scheduler gives higher service priority request minimal seek time current disk head moving direction 
cscan scheduling decision cylinder number candidate requests cylinder position current disk head 
potentially disk scheduler know exactly long request takes decides potentially shortest 
inde niteness comes extra rotation time disk head wait destination sector meets disk head 
accurate disk head position accurate access time prediction cscan won able serve real time applications 
rotation sensitive scheduling algorithms motivation rotation sensitive disk scheduler trend modern disks 
seek time reduced faster rotation time 
rotation sensitive disk scheduler ective servicing requests seek time scheduler 
argue nowadays hardware fast software waste time complex scheduling 
real time application necessitates 
rotation sensitive disk scheduler full knowledge current disk head position predicted servicing time request 
integrate real time restrictions scheduling criteria achieve real timing high performance 
basic version rotation sensitive scheduling algorithm stf shortest time rst 
stf request yields shortest time including rotation time seek time chosen request service 
stf expected give best throughput fairness compromised due greedy algorithm 
algorithm gstf try serve group request rst move disk head area disk 
group stf algorithm applied 
gstf give fast throughput fairness 
similar aging process scheduling freebsd wstf applies aging access time computed candidate request queue 
estimated physical time multiplied aging factor longer request waits queue smaller chance gets serviced :10.1.1.152.5459
formula compute weighted disk access time tw weighted time real actual time maximum response time allowed empirical value waiting time queue tw real prototype implementation performance evaluation prototype implementation prototype rotation sensitive scheduler implemented linux kernel scsi general interface 
shows architecture prototype 
rotation sensitive scheduler searches request service communicates general scsi interface 
rotation sensitive scheduler contains disk head prediction module disk service time prediction module 
performance evaluation test rotation sensitive scheduler synthetic workload real disk traces 
synthetic workload read write rate number reported 
disk queue full test nishing length requests left queue 
model rst :10.1.1.152.5459
real traces collected pc boxes experimental computer system lab suny stony brook 
machine tested single pentium ii cpu mega bytes dram memory st disk data disk ac drive log disk trace data 
logging data put dedicated disk disk data ect data disk accesses test system 
system running linux kernel version 
machine shared persons lab 
collected traces machine month 
due regular schedule persons machine daily disk traces distinguished clearly heavy load traces light load traces di erent days 
busy period people run tests compilation 
light load traces mainly contributed web browsing email editing le system periodic writing back queue length determines far disk scheduler look ahead search request service 
shows queue length distribution typical days traces picked trace data set 
light load period requests arrive idle disk 
queue length large heavy load case 
measured read write rate cases 
light load day disk totally heavy load contains disk requests 
file system disk queue rotation general scsi interface scheduler scsi disk prototype rotation sensitive disk scheduler 
queue length fraction light workload heavy workload queue length distribution days workload 
mean queue length light load case heavy load case 
scheduling performance serve veri cation correctness disk head prediction heuristics introduced 
memorize expected access time real access time run compare 
misprediction rate measured way 
trace driven tests performed st scsi disk host machine pii mhz single cpu memory 
disk scheduler keeps board cache concern making scheduling decision 
read write size disk kbytes sectors le system block size 
real traces run wstf gstf stf fcfs cscan algorithms 
disk bandwidth utilization determines fraction time disks transferring data 
disk spinning rpm yields rotation time ms sectors byte providing transfer rate ms 
disk utilization sectors write operation takes ms 
maximum response time re ects degree request starvation 
shows result real traces 
rotation sensitive disk scheduler brings larger performance di erence cscan fcfs heavy load case light load case 
reason light load case average queue length smaller heavy load case 
gstf wstf reduce maximum response time ectively 
shows result synthetic traces 
run contains times number queued items proved able get stable result variance 
gstf wstf eciently solve starvation stf shown gure compromising performance 
synthetic trace real trace rotation sensitive scheduler improvement disk utilization cscan fcfs 
heavy load trace light load trace disk utilization fcfs cscan stf wstf gstf heavy load trace light load trace maximum response time seconds fcfs cscan stf wstf gstf performance di erence heavy load case larger light load case due smaller queue length light load case 
gstf wstf reduces starvation ectively 
heavy load case disk utilization stf class schedulers disk utilization improvement 
note test requests sent disk unit byte 
larger size requests cover consecutive tracks distance requests far space left rotation sensitive scheduler improve seek time ones 
experiments proves thoughts 
computation cost complicated disk scheduling algorithms discussed issue medium queue length 
mhz cpu average overhead predict access queue length disk bandwidth utilization fcfs cscan stf gstf wstf queue length cscan fcfs stf gstf wstf wstf gstf stf improvement disk utilization 
stf greedy algorithm gives worst starvation 
wstf gstf brings maximum response time 
stf class schedulers disk utilization increases queue length point decreases due extra overhead pay longer queue analysis 
maximum response time increases queue length waiting necessary longer queue 
gstf uses group size optimal value measured 
time scheduler microseconds 
describe implementation rotation sensitive disk scheduler 
disks remained black box upper level modules device driver le systems 
disk head prediction mechanism disk access time model bring full knowledge disks upper level modules advanced optimization application possible complex disk scheduler illustrated real time storage system discuss 
disk scheduling case study prove usage approaches 
project includes extending technique real time le systems 
working building general tools extract detailed disk parameters track skew cylinder skew defect sector position 
technique potentially embedded piece customized ic chip disk board disk transparent informative programmers 
chiueh 
trail track logging disk architecture zero overhead writes 
proceedings ieee international conference computer design iccd pages 
cambridge ma usa oct 
man jr 
expected performance scanning disks 
siam journal computing february 
man ryan 
analysis scanning policies reducing disk seek times 
siam journal computing september 
english stepanov loge self organizing disk controller 
proc 
winter usenix january 
frank 
analysis optimization disk storage devices time sharing systems 
journal acm pages october 
geist daniel 
continuum disk scheduling algorithms 
acm transactions systems pages february 
hagmann 
low latency logging 
technical report csl xerox 
palo alto ca february 

disk scheduling fcfs vs sstf revisited 
communications acm pages november 
jacobson wilkes 
disk scheduling algorithms rotational position 
technical report hpl csp hewlett packard lab palo alto ca feb 
ramakrishnan biswas ramakrishna 
analysis le traces commercial computing environments 
proceedings acm sigmetrics performance pages june 
andrews bender zhang 
new algorithms disk scheduling problem 
proceedings th annual symposium foundations computer science focs pages october 
seltzer chen ousterhout :10.1.1.152.5459
disk scheduling revisited 
proceedings winter usenix conference pages 
washington dc usa jan 
wang anderson patterson 
virtual log le systems programmable disk 
proc 
third symposium operating systems design implementation february 
ruemmler wilkes 
disk drive modeling 
ieee computer pages march 
chris ruemmler john wilkes 
unix disk access patterns 
technical report hpl computer systems lab 
hp lab 
palo alto ca december 
worthington ganger patt wilkes line extraction scsi disk drive parameters 
performance evaluation review pages vol may 
extracted parameters seagate st zone cylinder cylinder spt logical track cylinder sector skew skew table zone speci cations 
spt denotes numbers sectors track 
cited 
seek distance mean maximum st disk seek curve 
seek distance cylinders delay ms table seek parameters st 
values contain scsi command processing overhead 
parameters rows approximated tting curves numerical square analyses 

