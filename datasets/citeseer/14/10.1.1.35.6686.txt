implementation ficus replicated file system richard guy john heidemann wai mak thomas page jr gerald popek dieter page popek cs ucla edu department computer science university california los angeles approach nation wide integration computer systems clear file replication play key role improve data availability face failures improve performance locating data near 
expect file systems extensible modular structure features replication slipped transparent layer stackable layered architecture 
introduce ficus replicated file system nfs show layered top existing file systems 
ficus file system differs previous file replication services permits update network partition copy file accessible 
file directory updates automatically propagated accessible replicas 
conflicting updates directories detected automatically repaired conflicting updates ordinary files detected reported owner 
frequency communications outages rendering inaccessible replicas large scale network relative rarity conflicting updates optimistic scheme attractive 
stackable layers facilitate addition new features existing file system reimplementing existing functions 
done manner analogous object oriented programming inheritance 
structuring file sponsored darpa contract number 
author associated locus computing 
system stack modules interface modules augment existing services added transparently 
describes implementation ficus file system layered architecture 
ficus project ucla investigating large scale distributed file systems 
envision transparent reliable distributed file system encompassing hosts geographically dispersed continent globe 
host able access file distributed system ease local files accessed 
large scale distributed system displays critical characteristics subject continual partial operation global state information difficult maintain heterogeneity exists levels 
successful large scale distributed file system minimize difficulties characteristics imply 
scale distributed system implies system fully operational time 
variety technical economic administrative reasons various system components hosts network links gateways times unusable 
partial operation normal exceptional status environment new approaches needed provide highly available services system clients 
large scale prevents nodes attempting maintain information global state system 
imagine filesystem table millions entries 
hosts sufficient storage resources effectively track changes occur distributed system changes rapid communication unreliable source change monitor 
large scale implies high degree hardware software administrative heterogeneity exists 
software provide desired availability easily utilized wide variety existing host environments tunable meet technical administrative concerns 
new tools sufficiently modular allow easy attachment existing services provide acceptable performance 
issues led explore application integration concepts large scale file systems stackable layers file usage locality data replication non serializable consistency dynamic volume locating grafting 
stackable layers stackable layers paradigm ritchie model implementing stream service system unix 
stackable layer module symmetric interfaces syntactic interface export services provided particular module interface module access services provided modules stack 
stack modules interface constructed dynamically particular set services desired specific calling sequence 
model useful designing constructing file systems allows easy insertion additional layers providing new services 
provide file distribution replication expect performance monitoring user authentication encryption 
file usage locality importance modularity portability implied replication service build top existing unix file system interface 
previous attempt adopt philosophy abandoned face poor performance 
studies general purpose university unix file usage unix trademark indicate strong degree file locality appropriate caching methodologies exploit behavior reduce file access overhead 
ficus file system design takes advantage locality observations avoid overhead previously encountered building top existing unix file system implementation 
replication data replication combat partial operation behavior tends degrade availability large scale file systems 
host may store physical replicas logical file clients generally unaware replica services file request 
replication techniques ficus intellectual descendants locus distributed operating system 
non serializable consistency data replication management policies proposed literature adopt form serializability definition correctness 
requisite mutual exclusion techniques enforce serializability typically display inverse relationship update availability read availability ensuring high read availability forces low update availability 
ficus incorporates novel non serializable correctness policy copy availability allows update copy data requiring particular copy copies accessible 
copy availability conjunction automatic update propagation directory reconciliation mechanisms 
copy availability provides strictly greater availability primary copy voting weighted voting quorum consensus 
directory reconciliation mechanism tolerates larger class concurrent non serializable updates replicated dictionaries 
replicated directory techniques quorum consensus lower availability 
deceit file system allows partitioned update quorum mechanism reconciling concurrent updates replicas single directory 
volume locating grafting locating particular file large scale distributed system requires robust distributed mechanism 
dynamic movement files supported requiring sort advance global agreement 
ficus incorporates volume mechanism segmented distributed replicated graft table 
remainder describes key architectural details ficus file system april 
discussion ideas touched 
ficus layered design ficus layered file system model comprises separate layers constructed vnode interface 
nfs employed transport mechanism remotely located ficus layers means non ficus hosts access ficus file systems 
shows general organization ficus layers nfs layer omitted layers resident 
ficus physical system calls ficus logical ufs nfs ficus stack layers vnode interface single important design decision stackable layers paradigm definition interface layers 
ideally interface general allow extensibility unplanned directions 
streams interface example remarkably simple general messages may placed input queue processing layer 
layer dequeues processes messages types recognizes unrecognized message types passed layer sequence 
interface definitions closely tailored particular application area case vnode interface sunos file system management 
vnode interface defined set dozen services calling syntax parameters 
sunos vnode interface hide details particular file system implementations including location local remote actual file storage 
adopted vnode interface stackable layers ficus 
leveraging existing interface file system modules clearly beneficial getting started 
vnode interface widespread add ficus modules existing implementations easier introducing entirely new interface 
hand vnode interface quite rigid adding services desired new layers encountered variety difficulties mentioned 
vnode interface allows ficus utilize existing ufs unix file system nfs network file system services sunos critical ways 
example ficus ufs underlying nonvolatile storage service means ficus burdened details best physically organize disk storage 
ficus able nfs remote access transport mechanism relieving ficus substantial 
ficus layers conceptually organized implemented new virtual file system type indicated 
server nfs client ufs vnode ficus ficus logical physical vnode system calls nfs layered architecture vnodes nfs transport layer nfs essentially host host transport service vnode interface 
generally speaking layer uses vnode interface unaware immediately adjacent functional layers local remote accessed intervening nfs layer 
ficus replication service layers able nfs transparent access remote layers having build transport service 
unfortunately nfs implementation sunos fully preserve vnode semantics 
stateless philosophy nfs clashes occasionally vnode semantics resulting nfs implementation simply host transport service vnode interface 
example vnode services open close supported nfs definition ignored layer intending receive open get nfs 
nfs incorporates optimizations intended reduce communications improve performance 
file block caching directory name lookup caching fully controllable user level way disable caching results unexpected behavior layers able adopt assumptions inherent nfs cache management policies 
adding new vnode services ficus replication service employs functionality anticipated understandably vnode interface design 
add new services outside vnode framework deceit chose overload existing vnode services 
maximizes portability slight expense interpreting overloaded service limiting way 
example ficus able effectively open close information nfs intercepts ignores new service required 
overloaded lookup service encoding open close request null terminated ascii string sufficient length passed nfs interpretation interference 
cooperating layers layers added stackable design singly groups 
layers inserted group may stacked separated existing reduction maximum length file name component significant loss seen component length 
layers 
example ficus replication service composed layers logical file layer physical replica layer 
layers separated nfs layer logical physical layers different hosts 
ficus logical layer ficus logical layer presents clients normally unix system call family abstraction file single copy may physical replicas 
logical layer performs concurrency control logical files implements replica selection algorithm accordance consistency policy effect 
default policy availability select copy available 
logical layer update propagation notification automatic reconciliation directory replicas 
logical layer requests physical layer update file directory asynchronous multicast datagram sent available replicas informing new version file may obtained replica receiving update 
physical layer reacts update notification sees fit may propagate new version immediately wait convenient time 
periodically logical layer invokes file directory reconciliation mechanism compare file replica subtrees 
details reconciliation algorithms scope see information 
ficus files organized general dag directories unix ficus directories may name 
logical layer maps client supplied name ficus file handle contains set fields uniquely identify file ficus systems 
ficus file handle communicate file identity logical physical layers 
characteristic consequence ability change name directory copies unavailable 
non communicating directory replicas concurrently new names necessary retain multiple names 
ficus physical layer ficus physical layer implements concept file replica 
ficus file replica stored ufs file additional replication related attributes stored auxiliary file 
attributes placed inode modify ufs 
ficus uses version vector technique detect concurrent unsynchronized updates files 
ficus directories stored ufs files ufs directories 
ficus directory entry maps client specified name ficus file handle mapped inode ufs 
second mapping implemented encoding ficus file handle hexadecimal string ufs pathname 
dual mapping nature current ficus implementation difficult implement efficiently inherently expensive 
disk file organization closely parallels logical ficus name space topology allows existing ufs caching mechanisms continue exploit strong directory file locality observed 
believe unacceptable performance observed similar dual mapping scheme prototype andrew file system occurred lower level name mapping incompatible locality displayed higher levels 
replication ficus incorporates data replication primary technique achieving high degree availability environment characterized communications interruptions 
file directory ficus file system may replicated replicas placed set ficus hosts 
basics logical file represented set physical replicas 
replica bears file identifier globally uniquely identifies logical file replica identifier uniquely identifies particular replica 
logical layer uses file handle composed part file identifier replica identifier communicate physical layers file 
number placement file replicas effectively unbounded 
client may change location quantity file replicas file replica available 
associated file replica version vector encodes update history replica 
version vectors support concurrent unsynchronized updates file replicas managed physical layers 
update notification propagation updates initially applied single physical replica 
invoking logical layer notifies physical layers managing replicas updated file newer version exists updated replica 
physical layer receives update notification entry file new version cache 
update propagation daemon consults cache see new replica versions propagated performs propagation deems appropriate expend effort 
rapid propagation enhances availability new version file delayed propagation may reduce propagation cost updates bursty 
regular files update propagation simply matter atomically replacing contents local replica newer version remote replica 
ficus contains single file atomic commit service support file update propagation 
shadow file replica hold new version completely propagated shadow atomically replaces original changing low level directory 
crash occurs shadow substitution original replica retained recovery shadow discarded 
update propagation directories difficult side effects directory current limit replicas file logical layers 
note commit service necessary correct operation general ficus functionality 
performance impact usually small significant effect client updating points large file 
avoid alteration ufs rewriting entire file necessary 
cost course avoided putting commit function storage layer 
date files may allocated counts adjusted 
simply copying directory contents incorrect sense directory operation needs replayed replica 
ficus directory reconciliation algorithm purpose 
reconciliation reconciliation algorithm examines state replicas determines operations performed selects set operations perform local replica reflect previously unseen activity remote replica applies operations local replica 
ficus directory reconciliation algorithm determines entries added deleted remote replica applies appropriate entry insertion deletion operations local replica 
standard set unix directory operations supported 
directory reconciliation algorithm update propagation basic file update propagation service incorporated general ficus file system reconciliation protocol 
protocol executed periodically traverse entire subgraph just single node reconcile local replica remote replica 
execution proceeds concurrently respect normal file activity client service blocked impeded 
volumes ficus uses volumes basic structuring tool managing disjoint portions file system 
ficus volume replicas dynamically located grafted mounted needed global searching broadcasting 
tables locating volume replicas replicated objects similar directories managed reconciliation algorithms directory replicas 
ficus volumes similar andrew volumes decouple logical concept subtree physical storage details order support flexible volume replica placement 
ficus require replicated volume location database 
basics ficus file system organized directed acyclic graph volumes 
volume logical collection files managed collectively 
files volume typically share replication characteristics replica location number replicas 
volume represented set volume replicas function containers file replicas may placed 
set volume replicas forms maximal extensible collection containers file replicas 
volume replica may contain replica file need store replica particular file 
volume replica stored entirely unix disk partition 
mapping volume replicas disk partitions determined host providing storage 
volume replicas may stored single partition relationship volume replicas implied placement disk partitions 
volume self contained rooted directed acyclic graph files directories 
volume boundaries root node top volume graft points bottom 
volume root normally directory graft point special kind directory explained 
volume replica store replica root node storage file directory replicas optional 
identifiers volume uniquely named internally pair identifiers allocator id volume id issued allocator 
prior system installation ficus host issued unique value allocator id example internet host address suffice 
individual volume replicas identified replica id volume replica globally uniquely identified triple id volume id replica idi 
context particular volume logical file uniquely identified file id file system words refer particular type file service unix file system vms file system 
filesystem word self contained portion unix file system normally mapped single disk partition 
directory cross volume boundaries 
particular file replica identified appending replica id containing volume replica file id id replica idi 
fully specified identifier file replica id volume id file id replica idi identifier unique ficus hosts existence 
volume replica assigns file identifiers new files independently 
ensure file ids uniquely issued file id prefixed issuing volume replica replica id file id tuple id unique idi 
graft points graft point special file type indicate specific volume transparently grafted point name space 
grafting similar unix filesystem mounting number important differences 
particular volume grafted graft point fixed graft point created number placement volume replicas may dynamically changed 
graft point similar regular directory 
renamed multiple names 
graft point replicated graft point replica contained particular volume replica 
graft points particular volume may exist single volume 
resulting organization volumes directed acyclic graph simply tree 
graft point contains unique volume identifier list volume replica storage site address pairs 
mapping exists graft point replica volume replicas grafted 
graft point replica may volume replicas grafted time 
list volume replicas internet addresses managing ficus physical layers conveniently maintained directory entries 
overloading directory concept way allows implicit ficus directory reconciliation mechanism manage replicated object graft point similar semantics syntactic details 
ficus logical layer encounters graft point translating pathname check see appropriate volume replica grafted 
information graft point locate graft volume replica interest 
ficus graft dynamic graft implicitly maintained long file grafted volume replica 
graft longer needed quietly pruned time 
development methodology stackable layers paradigm extends development methodology 
vnode interface normally accessible inside kernel exposed application level set vnode system calls functional layer execute application level 
standard nfs server provides channel kernel layer utilize vnode layer address space customized copy nfs server daemon code run outside kernel interface ficus layers 
approach allows application level software engineering tools develop test outside kernel ultimately kernel level service layers 
performance penalty crossing address space boundaries complicates performance measurements analysis methodology proven sound 
goal provide programming environment application level kernel module experience 
today ficus layers may compiled application level kernel resident execution merely setting switch 
hope application level debugging complete correct kernel execution automatic 
achieved part single threaded application environment set minor differences 
ability operate outside kernel easy stackable architecture exposure vnode services markedly shortened development testing time 
performance notes ficus ucla normal operation 
perceived performance extensive evaluation way 
major potential performance costs observed result considerations execution overhead crossing multiple formal layer boundaries monolithic structure additional os maintenance needed attribute information 
actual cost crossing layer boundary low additional procedure call pointer indirection storage vnode block 
current implementation increased cost noticeable 
ficus physical layer design implementation accrues additional overhead opening file non accessed directory 
os normal unix overhead occur inode data page underlying unix directory auxiliary replication data file loaded disk ficus directory inode data page 
correspond normal unix overhead 
opening accessed file directory involves overhead incurred normal unix file system 
experience approach described quite positive 
modularity provided stackable layers simplicity design implementation afforded optimistic reconciliation approach especially significant 
stackable architecture appears quite layers transparently inserted layers surround layers 
replication service added stack vnode layers modifying existing layers perform 
vnode interface ideal extensible interface desired 
inode level interface files extensible directory entries allow avoid implementing ficus directories top unix directory service extensible inodes allow dispense auxiliary files store replication data 
changes virtually additional overhead standard unix nfs eliminated 
availability general reconciliation service useful 
usually deal boundary error conditions occur distributed program considerable variety cleanup management code system software 
ficus failures may occur freely special handling ensure integrity consistency data structures environment 
reconciliation service cleans 
example volume grafting considerably easier easy transformation necessarily replicated data structures ficus directory entries 
special code needed maintain consistency 
sum optimistic services provided ficus substantial utility generally easy include contribution user system 
james 
suite robust algorithms maintaining replicated data weak consistency conditions 
proceedings third ieee symposium reliability distributed software database systems october 
day 
principle resilient sharing distributed resources 
proceedings second international conference software engineering pages october 
joshua bloch dean daniels alfred spector 
weighted voting directories comprehensive study 
technical report cmu cs carnegie mellon university pittsburgh pa 
michael fischer alan michael 
sacrificing serializability attain high availability data unreliable network 
proceedings acm symposium principles database systems march 
rick floyd 
directory patterns unix environment 
technical report tr university rochester august 
rick floyd 
short term file patterns unix environment 
technical report tr university rochester march 
gifford 
weighted voting replicated data 
proceedings seventh symposium operating systems principles 
acm december 
richard guy 
ficus large scale reliable distributed file system 
ph dissertation university california los angeles 
preparation 
richard guy gerald popek 
reconciling partially replicated name spaces 
technical report csd university california los angeles april 
submitted concurrently publication 
maurice herlihy 
quorum consensus replication method data types 
acm transactions computer systems february 
john howard michael kazar menees david nichols satyanarayanan robert sidebotham michael west 
scale performance distributed file system 
acm transactions computer systems february 
kleiman 
vnodes architecture multiple file system types sun unix 
usenix conference proceedings pages atlanta ga summer 
usenix 
thomas page jr gerald popek richard guy john heidemann 
ficus distributed file system replication stackable layers 
technical report csd university california los angeles april 
submitted concurrently publication 
parker jr gerald popek gerard allen stoughton bruce walker evelyn walton johanna chow david edwards stephen charles kline 
detection mutual inconsistency distributed systems 
ieee transactions software engineering may 
gerald popek bruce walker 
locus distributed system architecture 
computer science series mit press 
ritchie 
stream input output system 
bell laboratories technical journal october 
russel sandberg david goldberg steve kleiman dan walsh bob lyon 
design implementation sun network file system 
usenix conference proceedings pages 
usenix june 
sarin richard floyd 
flexible algorithm replicated directory management 
proceedings ninth international conference distributed computing systems pages 
ieee june 
satyanarayanan itc distributed file system principles design 
operating system review december 
alex siegel kenneth birman keith marzullo 
deceit flexible distributed file system 
technical report tr cornell university november 
thomas 
solution concurrency control problem multiple copy databases 
proceedings th ieee computer society international conference 
ieee spring 
gene wuu arthur bernstein 
efficient solutions replicated log dictionary problems 
acm symposium principles distributed computing august 

