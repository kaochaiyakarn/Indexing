practical loss resilient codes michael luby michael mitzenmacher amin shokrollahi daniel spielman volker randomized construction linear time encodable decodable codes transmit lossy channels rates extremely close capacity 
encoding decoding algorithms codes fast simple software implementations 
partial implementations algorithms faster orders magnitude best software implementations previous algorithm problem 
expect codes extremely useful applications real time audio video transmission internet lossy channels common fast decoding requirement 
despite simplicity algorithms design analysis mathematically intricate 
design requires careful choice random irregular bipartite graph structure irregular graph extremely important 
model progress decoding algorithm set differential equations 
solution equations expressed polynomials variable coefficients determined graph structure 
polynomials design graph structure guarantees successful decoding high probability 
international computer science institute berkeley california 
portions research done digital equipment systems research center palo alto ca 
research supported part national science foundation operating ncr united states israel binational science foundation 
digital equipment systems research center palo alto ca 
substantial portion research done computer science department uc berkeley national science foundation 
ccr 
international computer science institute berkeley institut fur informatik der universitat bonn germany 
research supported deutsche forschungsgemeinschaft sh 
department mathematics supported nsf mathematical sciences 
substantial portion research done visiting berkeley 
research done international computer science institute 
communication situations data lost transit 
standard response problem request retransmission data received 
retransmission lost request 
communication protocols lead delays due need rounds communication sender receiver 
alternative solution called forward error correction networking literature desirable suppose application sends real time stream data symbols partitioned transmitted logical units blocks 
furthermore suppose network experiences transient unpredictable losses fraction symbols block 
insurance policy tradeoff effects uncontrollable losses receiver controllable degradation quality 
suppose originally particular block consists data symbols 
sending message data symbols send message gamma data symbols selecting important parts original data stream omitting remainder generating slightly lower quality stream gamma fraction original rate 
fill block original length pn redundant check symbols 
scheme provides optimal loss protection gamma symbols message recovered set gamma received symbols block 
scheme basic building block robust general protection scheme described 
problem design fast encoding decoding algorithms solution feasible 
codes encoded decoded linear time providing near optimal loss protection 
linear time algorithms implemented run quickly software 
results hold symbol single bit packet bits 
assume receiver knows position received symbol stream encoding symbols 
appropriate internet packets indexed 
adopt model losses erasure channel introduced elias encoding symbol lost fixed constant probability transit independent symbols 
assumption appropriate internet losses highly correlated bursty 
losses internet general sensitive actual contents packet place encoding packets random order independent loss assumption valid 
elias showed capacity erasure channel gamma random linear code transmit erasure channel rate gamma means random linear code convert message length rn transmission length message recovered portions length greater rn 
linear code quadratic time encoding algorithms cubic time decoding algorithms 
hope better information recovery example mpeg stream group pictures constitute block symbol corresponds contents packet block 
latency incurred application proportional time takes packet block sent plus way travel time network 
faster encoding decoding times desirable especially real time applications 
reed solomon codes transmit capacity erasure channel order log encoding time quadratic decoding time 
codes customized compensate internet packet loss real time transmission video 
optimized implementation required dedicated workstations 
transmission significantly higher quality video requires faster coding algorithms 
theory possible decode reed solomon codes time log log log see chapter 
small values quadratic time algorithms faster fast algorithms reed solomon codes larger values log log log multiplicative overhead running time fast algorithms moderate sized constant hidden big oh notation large hundreds larger 
obtain fast linear time algorithms transmitting just channel capacity 
produce rate gamma ffl codes decoding algorithms recover random loss fraction transmitted symbols time proportional ln ffl high probability 
encoded time proportional ln ffl 
section ffl 
fastest previously known encoding decoding algorithms performance guarantee run times proportional ln ffl ffl 
see related 
structure codes related codes introduced 
explain general construction encoding decoding algorithms section 
encoding decoding algorithms symmetrical 
extremely simple computing exactly xor operation edge randomly chosen bipartite graph 
similar applications graph chosen sparse immediately implies encoding decoding algorithms fast 
similar applications graph regular quite irregular carefully chosen degree sequence 
describe decoding algorithm process graph section 
main tool model characterizes exactly performance decoding algorithm function degree sequence graph 
section tool model progress decoding algorithm set differential equations 
shown lemma solution equations expressed polynomials variable coefficients determined degree sequence 
positivity polynomials interval respect parameter ffi guarantees high probability decoding algorithm recover message symbols loss ffi fraction encoding symbols 
complete success decoding algorithm demonstrated combinatorial arguments lemma 
analytical tools allow exactly characterize performance decoding algorithm degree sequence 
tools analyze regular graphs section conclude yield codes close optimal 
irregular graphs necessary component design 
tools allow analyze degree sequence help design irregular degree sequences 
section describe parameter ffl degree sequence decoding successful high probability loss fraction ffi ffl gamma graphs irregular nodes degree ffl average degree nodes ln ffl 
main result code encoding decoding times proportional ln ffl recover loss fraction ffl optimal 
section show linear programming techniques find degree sequences nodes right degree sequence left nodes 
demonstrate techniques finding right degree sequences optimal series example left degree sequences 
terminology block length code number symbols transmission 
systematic code transmitted symbols divided message symbols check symbols 
take symbols elements gf arithmetic operations field addition equivalent exclusive elements 
message symbols chosen freely check symbols computed message symbols 
rate code ratio number message symbols block length 
example code block length rate encoder takes input rn message symbols produces symbols transmitted 
constructions assume symbols bits 
easy extend constructions symbols packets bits take sum bits just take bit wise sum packets 
codes section explain construction encoding decoding algorithms 
defining code message bits fin check bits associating bits bipartite graph graph left nodes fin right nodes corresponding message bits check bits respectively 
encoding consists computing check bit sum bits neighbors see 
encoding time proportional number edges main contribution design analysis bipartite graph repetition simplistic decoding operation recovers missing message bits 
knows value check bit message bits depends value missing message bit computing sum check bit known message bits 
see example operation 
advantage relying solely recovery operation total decoding time proportional number edges graph 
main technical innovation design sparse random neighbors modulo computes sum message bits check bits bn graph defines mapping message bits check bits 
bits solve graphs repetition operation guaranteed usually recover message bits gamma ffl fin message bits lost 
produce codes recover losses regardless location cascade codes form produce fin check bits original message bits similar code produce fi check bits fin check bits see 
level conventional loss resilient code 
formally sequence graphs bm fi left nodes fi right nodes construct sequence codes bm 
select fi roughly cascade loss resilient code rate gamma fi fi message bits know recover random loss fi fraction bits high probability 
define code bm code message bits fi fi gamma fi nfi gamma fi check bits formed produce fin check bits message bits form fi check bits fi bits produced gamma produce additional nfi gamma fi check bits fi bits output bm 
bm message bits nfi gamma fi check bits code rate gamma fi 
assuming code encoded decoded quadratic time code candidate code low density parity check version codes send messages cause check bits zero 
codes decoded linear time encoded quadratic time constants 
final version show replaced simpler code encoded decoded linear time worse decoding guarantee 
cascade roughly ffln nodes message bits check bits conventional code code levels 
bm encoded decoded time linear decoding algorithm recover losses occur corresponding bits 
recovers losses algorithm knows check bits produced bm recover losses inputs bm 
inputs check bits gamma way back recursion check bits produced recover losses original message bits 
show recover random loss fi gamma ffl fraction bits high probability recover random loss fi gamma ffl fraction message bits high probability shown bm rate gamma fi code recover random loss fi gamma ffl fraction bits high probability 
remainder concern finding graphs decoding algorithm recover fi gamma ffl fraction losses message bits check bits 
graph process degree sequences relate decoding process process subgraph simpler terminology describing process 
subgraph consists nodes left decoded far nodes right edges nodes 
recall decoding process requires finding check bit right adjacent message bit missing adjacent bit recovered 
terms subgraph equivalent finding node degree right removing neighbor edges adjacent neighbor subgraph 
refer entire sequence events step decoding process 
repeat step nodes degree available right 
entire process successful halt nodes left removed equivalently edges removed 
graphs chosen random carefully chosen degree sequence sparse bipartite graphs 
contrast applications random graphs computer science graphs regular 
analysis section shows possible approach channel capacity regular graphs 
refer edges adjacent node degree left right edges degree left right 
degree sequences specified pair vectors ae ae fraction edges left degree ae fraction edges right degree note graphs specified terms fractions edges nodes degree form convenient 
choose appropriate random bipartite graph edges nodes left fin nodes right bipartite graph nodes left right hand sides node representing edge slot 
node left hand side associated node left side distribution degrees similarly right 
choose random matching random permutation sets nodes induces random bipartite graph obvious manner desired degree structure 
note corresponding subgraph remaining step matching remaining corresponds random permutation 
conditioned degree sequence remaining subgraph step subgraph remains uniform subgraphs degree sequence 
evolution degree sequence markov process fact 
sections develop techniques analysis process general degree sequences 
techniques section analyze regular graphs describe degree sequences result codes approach capacity erasure channel section 
differential equations description analyze behavior process subgraph described previous section establishing set differential equations describes behavior limiting case block length goes infinity 
alternatively may think equations describing expected behavior associated random variables 
differential equations provide key insight behavior decoding process additional required justify relationship limiting finite cases 
initial random graph left nodes fin right nodes 
consider vectors ae ae fractions edges degree left respectively right respect total number edges original graph 
average node degree left initially satisfies gamma similarly average node degree right initially satisfies gamma ae scale passage time time unit length deltat corresponds step decoding process 
ffi fraction losses message 
initially just prior time node left removed probability gamma ffi corresponding message bit successfully received initial subgraph contains ffin nodes left 
process terminates successfully runs time ffin ffi represent fraction edges terms degree left right respectively time denote fraction edges remaining 
recall step random node degree right chosen corresponding node left adjacent edges deleted 
node process necessarily stops 
probability edge adjacent node degree right degree left case lose edges degree gives rise difference equation deltat gamma gamma expected change number edges degree left 
noting deltat see limit solution difference equation described differential equation dt gamma remove node degree left remove edge degree right gamma edges adjacent node 
expected number edges deleted gamma 
right endpoints gamma edges right hand side randomly distributed 
edges degree right lose edges degree gain gamma edges degree gamma 
probability edge degree right just 
difference equation deltat gamma gamma gamma describes expected change number edges degree right 
corresponding differential equations dr dt gamma gamma assume defined positive sufficiently large 
case plays special role take account step edge degree right removed 
differential equation dr dt gamma gamma gamma key interest progression function long node degree right process continues process stops 
nodes left deleted process terminates successfully 
differential equations easily solved defining dx dt 
value terms exp gamma 
substituting dx dt equation dx gammai integrating yields note ffi ffi ffi goes zero goes ffi runs interval 
solving involved 
main goal show process halt completion 
details solving particular appendix proposition presents solution 
result expressed generating functions gamma ae ae gamma generating functions play important role remainder presentation 
lemma solution differential equation ffi gamma ae gamma ffi find requires condition ae gamma ffi gamma condition shall play central role remainder 
differential equations build codes recall differential equations describe limiting behavior process block length goes infinity 
derive violated ae gamma ffi gamma process fails large block lengths high probability 
proving process progresses completion satisfied possible relating differential equations underlying random process see 
proving process runs completion handled separate combinatorial argument 
cases requires small modifications graph construction 
lemma bipartite graph chosen random edge degrees specified ae 
ffi fixed ae gamma ffi gamma message bits lost independently probability ffi decoding algorithm terminates jn message bits recovered exponentially small probability block length grows large 
combinatorial tail arguments useful showing process terminates successfully nodes left degree 
arguments required similar situations see example 
lemma bipartite graph chosen random edge degrees specified ae 
probability gamma choice fraction nodes left remain process terminates successfully 
proof sketch set nodes left size jn 
average degree nodes 
number nodes right neighbors greater nodes neighbor jsj process continue 
need show initial graph expander small sets 
degree node left standard proofs see suffice show expansion condition holds high probability sets containing fraction left nodes 
lemmas show codes section high probability 
asymptotic results general codes graphs degree nodes left extend construction careful arguments prove process completes described section 
analysis regular graphs demonstrate techniques developed previous section simple setting analyze behavior process random regular graphs 
random regular graphs similar situations natural consider give rise codes close optimal 

lemma proves weak form behavior 
explicitly solved largest value ffi satisfies condition codes regular graphs rate values 
case small degree value achieves maximum value ffi far optimal maximal achievable value ffi decreases degree increases 
lemma bipartite regular graph chosen random edges having left degree right degree fi 
condition holds ffi gamma gamma fi gamma maximum acceptable loss rate goes 
proof gamma ae fi gamma condition acceptable loss rate ffi gamma ffi gamma fi gamma gamma 
plug gamma gamma fact gamma gamma gamma yields requirement gamma ffi fi gamma gamma simplifies inequality statement lemma 
easy check right hand side equation goes concludes lemma 
fixed fi achieves maximum value ffi possible regular graphs ffi far optimal 
example case fi best solution left nodes degree right nodes degree 
case code handle ffi fraction losses high probability long gamma ffi gamma 
inequality fails ffi 
rate code ratio ffi gamma far optimal value 
simulation runs code turn match value ffi accurately demonstrating techniques provide sharp analysis actual behavior process 
asymptotically optimal codes section construct codes transmit rates arbitrarily close capacity erasure channel 
finding infinite sequence solutions differential equations section ffi approaches degree sequences degree nodes left hand side appeal lemma show high probability 
codes require additional structure 
bipartite graph left nodes fin right nodes 
describe choice left right degree sequences satisfy condition 
positive integer trade average degree decoding process works close ffi fi gamma process finish successfully time 
left degree sequence described truncated heavy tail distribution 
harmonic sum truncated ln 
fraction edges degree left gamma 
average left degree equals recall require average right degree satisfy fi 
right degree sequence defined poisson distribution mean fraction edges degree right equals ae gammaff ff gamma gamma 
ff chosen guarantee average degree right words ff satisfies ffe ff ff gamma note allow ae ae truly polynomial power series 
truncating power series ae sufficiently high term gives finite distribution edge degrees lemma valid 
show ffi fi condition satisfied ae gamma ffi gamma gamma ae ae gamma note expansion gamma ln gamma truncated dth term scaled 
ae ff gamma lemma choices ae ae gamma ffi gamma ffi fi 
proof recall ae ff gamma ae increases monotonically result ae gamma ffi ae ffi ln gamma gamma fi obtain gamma gammaff ffi fi ffi fi shows right hand side inequality larger gamma 
problem lemma apply system nodes degree left 
simulations demonstrate small number nodes remain 
overcome problem small change structure graph split fin right nodes distinct sets set consisting fi gamma fl nodes second set consisting fln nodes fl small constant determined 
graph formed union graphs formed described point left nodes set fi gamma fl right nodes 
formed left nodes second set fln right nodes left nodes degree edges connected randomly fln right nodes 
lemma bipartite graph just described 
high probability process terminates successfully started subgraph induced ffi left nodes fin right nodes ffi fi 
proof sketch analysis process may think held reserve handle nodes dealt combining lemma lemma show constant high probability jn nodes left remain process runs induced graph remaining jn left nodes fln right nodes random bipartite graph nodes left degree 
choose fl larger small constant factor high probability process terminates successfully subgraph lemma note lemma applies nodes left degree 
choosing sufficiently small may fl arbitrarily small decrease value ffi stated lemma arbitrarily small 
note degree left node modified construction bigger average degree left node construction described section 
observation lemma immediately prove main theorem 
theorem positive ffl sufficiently large block length loss resilient code high probability able recover random loss gamma gamma ffl fraction bits time proportional ln ffl 
proof sketch set ffl get level code properties described lemma 
cascade versions codes described section get entire code 
proof follows level cascade fails recover message bits check bits small probability 
linear algebraic interpretation fin check bits code described section computed multiplying vector message bits fin theta matrix th entry edge left node right node multiplication field elements 
choose graphs sparse resulting matrix sparse multiplication performed quickly 
efficiency decoding algorithm related ease perform gaussian elimination submatrices 
knows check bits ffin message bits possible recover missing message bits ffin columns indexed message bits full rank 
bits recovered gaussian elimination 
section distribution graphs bits recovered simple brute force gaussian elimination ffl distribution graphs subsets fi ffl columns full rank placed lower triangular form merely permuting rows matrix 
average number row ln ffl gaussian elimination performed time ln ffl 
contrast constructions loss resilient codes observe sets fin gamma columns random fin theta matrix full rank 
fact probability fin gamma columns fail full rank small know algorithm solves resulting elimination problem time takes general matrix multiplication 
ideally matrices set fin columns full rank matrices exist constant size field 
field size grow classical matrices solve problem 
example subsets fin columns fin theta vandermonde matrix linearly independent 
finding degree sequences linear programming section describe heuristic approach proven effective practice find right degree sequence specific left degree sequence 
method uses linear programming differential equation analysis section 
recall differential equations necessary condition process complete ae gamma ffi gamma 
describe heuristic determining finite vector representing left degree sequence value ffi appropriate finite vector ae representing right degree sequence satisfying condition 
choosing set positive integers want contain degrees right hand side 
find appropriate ae condition lemma generate linear constraints ae satisfy considering different values example examining condition obtain constraint ae gamma ffi linear ae generate constraints choosing multiples integer include constraints ae linear programming determine suitable ae exist satisfy derived constraints 
note choice function wish optimize choice works minimize sum ae gamma ffi gamma values chosen generate constraints 
best value ffi binary search 
solution linear programming problem check ae computed satisfy condition ae gamma ffi gamma 
due discretization usually conflict subintervals solution satisfy inequality 
choosing large values tradeoff parameter results smaller conflict intervals requires time solve linear program 
reason small values binary search phase 
value ffi larger values specific ffi obtain small conflict intervals 
step get rid conflict intervals appropriately decreasing value ffi 
works ae gamma ffi decreasing function ffi ran linear programming approach degree sequences left form gamma rates rates 
loss probability ffi average left degrees graphs obtained 
right hand degree sequences polynomials ae appendix graphs nodes degree left lemma lemma imply high probability corresponding codes recover losses occurring probability ffi provided block length large 
demonstrated novel technique design analysis loss resilient codes random bipartite graphs 
differential equations derived underlying random process obtained approximations behavior process closely match actual simulations 
tools designed codes simple fast linear time encoding decoding algorithms transmit lossy channels rates extremely close capacity 
specifically constant ffl sufficiently long block lengths constructed codes rate encoding decoding algorithms run time proportional ln ffl recover patterns ffi ffi gamma average degree close optimal codes different rates gamma gamma ffl losses 
expect codes practical applications 
encoding decoding speeds orders magnitude faster previous software schemes fast suitable high bandwidth real time applications high fidelity video 
example preliminary implementation sustain encoding decoding speeds mbits second alpha ev mhz machine packets length kbit bits packets message block length rate 
implemented error correcting codes novel graph constructions decode belief propogation techniques 
experiments constructions yield dramatic improvements error recovery rate 
report results separate 
preliminary stages research johannes helped design test handcrafted degree sequences gave strong evidence irregular degree sequences better regular degree sequences 
johannes david zuckerman worked preliminary combinatorial analysis decoding algorithm 
contributions 
edmonds luby sudan priority encoding transmission ieee transactions information theory special issue devoted coding theory vol 
november pp 

alon edmonds luby linear time erasure codes nearly optimal recovery proc 
th annual symp 
foundations computer science pp 

alon luby linear time erasure resilient code nearly optimal recovery ieee transactions information theory special issue devoted coding theory vol 
november pp 

blahut theory practice error control codes addison wesley reading ma 
broder frieze upfal satisfiability maximum satisfiability random cnf formulas proc 
th acm siam symp 
discrete algorithms pp 

elias coding noisy channels information theory third london symposium september scientific publications pp 

gallager 
low density parity check codes 
mit press cambridge ma 
kurtz approximation population processes cbms nsf regional conf 
series applied math siam 
sloane theory error correcting codes north holland amsterdam 
shwartz weiss large deviations performance analysis chapman hall 
sipser spielman expander codes ieee transactions information theory special issue devoted coding theory vol 
november pp 

spielman linear time encodable decodable error correcting codes ieee transactions information theory special issue devoted coding theory vol 
november pp 

appendix section give explicit solution system differential equations 
start substitution dx dt gives exp gamma 
transforms equation gamma gamma prime stands derivative respect variable note average degree equals terms function written 
obtain gamma equations solved recursively starting highest nonzero 
case highest nonzero equations valid stronger analysis tools required show solution unique 
explicit solution gammai gammai dx constants determined initial conditions straightforward check ji gamma gamma gamma verifies directly ji gamma gamma note corresponds process 
proceed determination expected value node left deleted randomly just prior time probability gamma ffi graph random graph degree sequence nodes right edge deleted probability gamma ffi 
edge right incident node degree deletion stage remains graph degree probability gamma gamma gamma delta ffi gamma ffi gammai mj ae gamma gamma ffi gamma ffi gammaj plugging formula see mi gamma gamma ae ffi identity gamma gamma gamma delta gamma gamma gamma delta gamma gamma gamma delta gamma gammaj gammai delta obtain gamma gamma gamma gamma gamma ae ffi obtain formula lemma note gamma 
sum right hand side equals mj gamma gamma gamma gamma ae ffi ij gamma gamma gamma gamma ffi inner sum equals zero 
gamma ffi ffi ae jm gamma gamma gamma gamma ffi gamma xffi gamma ffi ffi ae gamma ffi gamma ffi gamma ae gamma ffi proves lemma 
appendix section exhibit different rates examples degree sequences linear programming approach 
example 
fi case set best value ffi optimal value 
corresponding polynomial ae ae graph ffi gamma ae gamma ffi 
example 
fi previous case 
value ffi optimal value 
polynomial ae ae example 
fi graph example examples 
best value ffi optimal 
polynomial ae ae example fi previous cases 
best value ffi optimal value 
polynomial ae ae example fi case chose smallest degree left previous examples 
best value ffi optimal value 
ae ae graph 
example 
fi graph example previous case best value ffi ae ae 
