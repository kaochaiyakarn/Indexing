calculus mobile processes part ii robin milner university edinburgh scotland joachim parrow swedish institute computer science kista sweden david walker university technology sydney australia june revised october running title calculus mobile processes part ii address proofs joachim parrow sics box kista sweden 
special symbols copy mathematically type set obvious symbols listed 
boldface zero empty set ff fi oe greek letters ff def various relation symbols set names 
bisimulation symbols ff gamma 
gamma 
xy gamma 
gamma 
gamma 
transition arrows arrows 
indexed union note greek omega theta operations sets replacement symbol syntax definition symbol 
sge boldface names axioms input act par close 
small caps names inference rules second papers calculus calculus mobile processes 
provide detailed presentation theory calculus developed date particular establish results stated companion 
second papers calculus calculus mobile processes 
companion contains calculus sequence examples statements results 
purpose provide detailed presentation theory calculus developed date particular establish results stated companion 
motivation intuition calculus understood help serves self contained development theory 
achieve necessary repeat material companion 
section contains description syntax agents presentation transitional semantics 
section motivate definitions strong bisimulation strong bisimilarity strong equivalence useful family indexed equivalences 
section contains series properties strong bisimilarity properties strong equivalence indexed equivalences developed section 
complete axiomatization finite agents section 
points interest detailed development theory 
order reduce length avoid giving impression theory generally complicated surprising fact include complete proofs results 
appendix contains extracts giving taste techniques 
complete proofs may 
agents transitional semantics agents recapitulate definitions notation companion 
assume infinite set names metavariables names 
assume set agent identifiers 
agent identifier nonnegative arity 
definition set agents defined follows metavariables agents xy 
nullary operator xy unary operators binary operators arity order precedence operators order listed 
description intended interpretation agents see 
general summation operator sigma satisfied nullary binary summation regard general summation derived operator 
definition agent forms occurrence parentheses binding occurrence case scope occurrence occurrence agent said free lie scope binding occurrence set names occurring free denoted fn 
write fn 

abbreviation fn fn 
fx definition defining equation agent identifier arity form 
def pairwise distinct fn fx 
assume agent identifier unique defining equation 
definition occurrence name agent said bound free 
assume set bound names bn defined way contains names occur bound def bn bn 
write set fn bn names avoid pathological technical difficulties assume family defining equations agent identifiers identifier bn finite 
definition substitution function oe identity 
oe xoe names write 
xg oe 
definition oe denotes agent obtained simultaneously substituting zoe free occurrence change bound names avoid captures 
particular hold denotes syntactic identity oe xoe pf fn oe oe oe pf fn oe oe definition symbol ff denotes relation alpha convertibility agents defined standard way 
subscript ff bears relation actions ff defined 
actions precisely ccs transition calculus form ff gamma 
intuitively transition means evolve doing perform action ff 
calculus kinds action ff follows 
silent action ccs gamma 
means evolve doing requires interaction environment 
silent actions naturally arise agents form communications agent 

free output action xy 
transition xy gamma 
implies emit free name port free output actions arise output prefix form xy 
input action 
intuitively gamma 
means receive name port evolve qf yg 
note departs slightly ccs input action contains actual received value 
represents place received name go enclosed brackets order stress fact 
input actions arise input prefix form ff kind free bound polarity fn ff bn ff silent xy free output gamma fx yg input fxg fyg bound output gamma fxg fyg table actions 

bound output action 
kind action counterpart ccs 
intuitively gamma 
means emits private name name bound port private name occurs 
input action enclosed brackets emphasize represent free name 
bound output actions arise free output actions carry names scope agent xy silent action free output actions collectively called free actions input actions bound output actions called bound actions 
bound actions carry values form names brackets 
free output bound output actions collectively called output actions negative actions actions negative polarity 
similarly input actions called positive actions actions positive polarity 
actions opposite polarity order combine internal communication 
output input actions mentioned subject object parameter 
object said bound bound actions free free actions 
set bound names bn ff action ff empty set ff free action contains just bound object ff 
set free names fn ff ff contains subject free object ff names ff ff union bn ff fn ff 
note 
summary definitions appears table 
transitions proceed define transition relations ff gamma 
agents 
definition transition relations smallest relations satisfying rules action table 
definition structure corresponding definition ccs 
details differ considerable extent 
briefly stated differences ccs calculus emanate restriction tau act gamma gamma 
output act gamma xy xy gamma 
input act gamma gamma 
pf zg fn sum ff gamma 
ff gamma 
match ff gamma 
ff gamma 
ide pf xg ff gamma 
ff gamma 
def par ff gamma 
ff gamma 
bn ff fn com xy gamma 
gamma 
gamma 
zg close gamma 
gamma 
gamma 
res ff gamma 
ff gamma 
ff open xy gamma 
gamma 
yg fn table rules action 
rules involving binary operators additionally symmetric forms 
operator calculus restricts scope action subjects action objects 
worth noting complication ccs comes ability restrict scope action objects primarily fusion port names data values 
explain issue 
communicating free names consider usual ccs rules deriving internal communication 
gamma av av gamma 
gamma av gamma 
pf xg av gamma 
av gamma 
gamma 
ccs value variable instantiated value inferring action rule admits instantiation value agent combine output transition communication rule 
call scheme early instantiation variables instantiated time inferring input transition 
rules representing early instantiation calculus adopt scheme late instantiation input actions contain bound objects instantiated inferring internal communication 
reason simply admit notion equivalence algebraic theory appears somewhat simpler defer treatment early instantiation forthcoming 
late instantiation scheme calculus represented rules output act input act com table 
explored number alternative rules essentially equivalent 
notice scope intrusions resulting com occurs bound properly taken care bound renamed substitution zg cf 
definition 
bound objects require careful treatment bound object essentially locations agent important maintained rules action 
problematic rule respect usual ccs rules parallel composition ff gamma 
ff gamma 
corresponding rule calculus par table different side condition bn ff fn 
see condition needed consider transition gamma 
locations intuition subsequent communication name received substituted occurs free bound object refer additional locations subsequent communication substitute free example input act com derive obviously incorrect transition xy gamma 
zg transition incorrect free name accidentally bound name reason require par applied name bound ff occur free explains input act simplified rule gamma gamma 
simpler rule side condition par prevent input transitions change bound name input act harmless bound names represent places agent 
clearly occur free refers places pf zg refers allow stand incorrect correctly infer xy gamma 
pf zg wg side condition input act ensures fn side condition par ensures fn 
agent gamma 
simplified pf zg expected result communication 
communicating bound names rules calculus accommodate scope extrusions example xy gamma 
qf zg note expect transition correct free restriction qf zg bind occurrences names accidentally related extrusion 
requirement fulfilled expect alpha conversion bound resulting agent xy gamma 
yg qf zg fresh name 
achieve desired effect additional rules action open close counterparts ccs 
scope opening rule open transforms free output action bound output action removes restriction operator 
fact bound represented action contains places bound occurred 
objects bound output actions represent obey side condition rule par bound object may occur free rule 
allow renaming open just input prefix rule particular name representing unimportant long refers locations note side condition ensures subject output action restricted name 
scope closing rule close bound output action combines input action 
intuitively rule means bound object received restriction bound name reappear name private scope grown 
note input act open allow arbitrary choice bound names premises close bound name loss generality 
example deriving scope extrusion consider 
open xy gamma 
pf yg fn 
input act gamma 
qf zg fn 
applying scope closing rule get xy gamma 
pf yg qf zg satisfying side conditions 
additionally occur free satisfies accumulated conditions choose derivation final agent qf zg precisely agent 
free side condition closing rule prevents derivation choose fresh name place obtain precisely transition 
strong bisimilarity equivalence strong bisimilarity motivate definition strong bisimilarity calculus 
helpful recapitulate ordinary ccs strong equivalence may defined simulations binary relation simulation psq implies ff gamma 
ff gamma 
sq words transition simulated transition derivatives remain simulation 
binary relation bisimulation inverse simulations 
strong equivalence agents defined largest bisimulation 
apply idea calculus 
main modification take special account actions bound objects 
example fn obviously want agents bisimilar input transition gamma 
simulate exactly 
reason difference unimportant transitions gamma 
differ choice bound name bound object merely locations agent particular name unimportant external observer observe identity bound name 
purpose defining bisimilarity consider bound objects completely fresh occur agents compared 
recalling rules previous section limitation fresh bound objects harmless transition bound object corresponding transition object suitably fresh cf 
lemma section 
important point order simulate input action sufficient derivatives continue simulate 
intuitively object input action placeholder received instantiated arbitrary name 
require continue simulate instantiations object input action 
considerations lead definition definition binary relation agents strong simulation satisfies requirements table 
relation strong bisimulation simulation psq implies 
ff gamma 
ff free action ff gamma 
sq 
gamma 
gamma 
yg 
gamma 
gamma 
sq table definition strong simulation 
inverse simulations 
relation strong bisimilarity agents defined exists bisimulation psq 
straightforward verify bisimulation largest bisimulation 
note requirement applies free actions ff clause requirements associated bound actions 
note clauses input bound output actions different 
order simulate input transition clause requires similar transition derivatives continue simulate instantiations bound objects 
hand bound output transition clause intuitively means emit private name refers places private name occur 
order simulate transition similarly emit private name continue simulate sufficient bound object instantiated interaction environment 
example consider equation abbreviate xv omit trailing equation true transition left hand side simulated transition right hand side vice versa 
hand left hand side additional transition 
follows general preserved substitutions names 
surprising ccs strong equivalence general preserved substitution port names reason 
follows equation zy zy true bound output transition left hand side simulated bound output transition right hand side vice versa 
note bound objects transitions occurs sides equation 
contrast clause requires derivatives leading input transitions similar instances similar instantiated follows strong bisimilarity preserved input prefix 
strong equivalence distinctions strong bisimilarity preserved substitution free names refer strong ground equivalence thought equivalence assumption different names identified names behave constants 
natural consider finer equivalence obtained bisimilarity substitutions names definition strongly equivalent written oe qoe substitutions oe 
hold strong equivalence general sense purpose strong equivalence names behave variables equivalence hold instantiations free names 
pointed companion spectrum equivalences depending names may assumed distinct definition distinction symmetric irreflexive relation names 
shall range distinctions 
substitution oe respects distinction xoe 
definition strongly equivalent written oe qoe substitutions oe respecting note immediate consequence definition implies simple example fx yg natural abbreviation allowing write set mean distinction thetaa gamma id keeps members distinct 
clearly extreme cases late early bisimilarity close section discussion interesting alternative definition bisimulation obtained commuting quantifiers clause table gamma 
gamma 
yg write ground equivalence obtained modification 
strictly weaker corresponding non ground equivalence strictly weaker agents equivalent clause adopted 
reason clause requires simulating input transition instances object 
contrast clause requires instance object exists simulating transition simulating transitions may different different instances 
purpose instantiation object regarded happening simultaneously input transition instantiation may regarded happening transition 
reason call early bisimilarity late bisimilarity 
example consider agents holds true general 
see consider transition gamma 
transition simulates instantiations instantiation simulating transition gamma 
ug rf ug names gamma 
ug ug 
similar slightly longer example involving matching operator exists 
interesting note early instantiation scheme mentioned section natural concept bisimilarity coincide early bisimilarity late bisimilarity hard define 
late instantiation scheme advantage versions bisimilarity easily treated 
early bisimilarity closer original idea equivalence ccs equational theory complicated defer treatment forthcoming 
properties strong bisimilarity main contribution develop properties strong bisimilarity equivalence 
equivalence interesting turns congruence necessary derive properties bisimilarity 
transitions alpha conversion subsection give series fundamental lemmas underpin results 
results unexpected proofs straightforward require careful attention detail 
care required finding correct order presentation proofs lemmas rely properties established earlier series 
lemma describes relationships free names agent names possible actions free names immediate derivatives 
lemma ff gamma 
fn ff fn ii fn fn bn ff 
proof induction depth inference 
see appendix 
definition lemmas phrase ff gamma 
equally ff gamma 
means ff gamma 
may inferred transition rules inference greater depth may ff gamma 
reason introducing notion including statements lemmas follow facilitates proofs properties interest 
series lemmas 
discussed preceding sections lemma content may paraphrased saying object bound action may name utmost importance 
lemma suppose gamma 

equally ff yg gamma 
proof induction depth inference 
lemmas concerned relationship action substitution 
define result applying substitution action 
definition ff action oe substitution defined follows xy oe oe oe aoe lemma asserts agent may perform action ff evolve alpha equivalence oe may perform evolve oe 
case ff side condition necessary 
general oe may admit actions bound object may occur free lemma ff gamma 
bn ff fn oe ff id equally ff oe oe gamma 
proof induction depth inference 
full converse preceding lemma hold 
simple illustration point suppose xy oe xg 
oe gamma 
perform action 
partial converse hold 
general statement possible suffices development 
lemma pf zg ff gamma 
fn bn ff fn equally fi qf zg ff ff fi gamma 
proof induction depth inference 
stating preceding lemmas careful relation alpha convertibility agents 
content theorem alpha convertibility strong bisimulation agents strongly bisimilar 
prove require lemma describes relationship actions agents 
lemma suppose ff 
ff free action ff gamma 
equally ff ff gamma 

gamma 
equally yg ff gamma 
proof induction depth inference 
theorem ff strong bisimulation 
proof straightforward preceding lemma 
having established theorem follows shall freely identify alpha convertible agents writing ff bisimilarity equivalence saw section strong bisimilarity general preserved substitution 
important result holds 
lemma fn pf zg qf zg 
proof relation 
strong bisimulation pf zg qf zg ps fn see appendix 
objective establish equivalence relation preserved operators 
prove preservation case composition scope restriction operators necessary construct suitable bisimulation 
turns construction useful contexts isolate definition 
definition relation strong simulation restriction iff psq 
fn pf zg 
xy gamma 
xy gamma 
sq gamma 
gamma 
yg gamma 
gamma 
sq gamma 
gamma 
sq sq relation strong bisimulation restriction iff gamma strong simulations restriction 
import result order establish suffices find strong bisimulation restriction containing 
lemma strong bisimulation restriction proof show 
strong bisimulation ps ng see appendix 
combining preceding results prove 
theorem equivalence relation 
ff ff ff free action jr qjr fn pf yg qf yg proof details see appendix 
proof ideas reflexivity symmetry obvious transitivity 
general case strong bisimulations case strong bisimulation 
assertions easily verified 
proved showing jr qjr qg strong bisimulation restriction observing lemma strong bisimulation restriction 
straightforward lemma 
theorem establishes bisimilarity congruence preserved operators input prefix 
follow established section follows stronger assumption bisimilar instances algebraic laws bisimilarity proceed investigate theory stating proving collection algebraic laws 
obvious laws summation ccs establish zero summation summation idempotent commutative associative theorem proof relations easily seen strong bisimulations id id id id id identity agents 
simple laws agent identifiers matching theorem def pf xg 
proof straightforward show relation pf xg id bisimulation theorem proof prove relations strong bisimulations agent yg id laws correspond dynamic laws ccs course matching ccs qualifies dynamic operator disappears derivative transition 
static laws ccs related relabelling restriction parallel operators 
calculus relabelling operator 
restriction operator quite static operator may disappear application open rule reappear different place close rule 
satisfies natural laws theorem fn ff ff ff ff subject ff proof prove relations strong bisimulations agent fn id id ff ff agent ff id ff agent subject ffg include id restrictions may disappear open rule 
theorem just says vacuous restrictions removed theorem restrictions commute 
theorem implies restriction distributes summation parts theorem relate restriction prefix 
worth noting theorem theorem immediately applicable object ff 
bound object alpha conversion application theorem possible 
free object ff xy restriction propagated prefix operator 
contrast situation ccs restriction operators eliminated preserving equivalence 
calculus agents type xy contain irreducible restriction operator type agent importance completeness proof define definition means xy prefix called derived prefix 
theorem restriction operator propagated prefix form derived prefix 
useful treat derived prefixes ordinary prefixes 
situations important theorem holds derived prefixes theorem theorem valid ff ranges derived prefixes 
proof directly theorem xz xz xz yz yz proceed expected laws parallel composition 
theorem fn proof see appendix 
note order prove theorem establish parallel composition may generate restriction operator close rule 
prove show certain relations strong bisimulations restriction 
concept strong bisimulation obvious analogue similar concept ccs 
differs strong bisimulation transition need simulated strong bisimilarity 
prove combine idea bisimulation restriction introduced earlier 
theorem assert unit parallel parallel commutative associative 
part scope extension law says restriction safely extend scope agents contain free occurrences restricted name 
thought generalization theorem fact easy consequence theorem fn scope extension law related ccs law says restriction distributes parallel composition components interact means restricted port 
calculus agents communicate name agent name positive subject position agent name negative subject position 
absence refined notion sort say agents name free formulation law theorem fn fn proof fn fn free assume free theorems situation free similar 
conversely theorem easy consequence theorems 
counterpart expansion law ccs 
calculus expansion law covers derived prefixes ff fi range ordinary derived prefixes 
theorem ff fi bn ff fn bn fi fn ff fi ff comp fi ij relation ff comp fi ff complements fi holds cases define ij 
ff xu fi ij vg 

ff fi ij ug vg free 
ff fi xu ij vg 
ff fi ij vg ug free proof assume premises lemma write right hand side equation 
define relation id show bisimulation 
note side conditions bn ff fn bn fi fn important bound object ff fi bind names right hand side left hand side 
properties strong equivalence algebraic properties equivalence properties established strong bisimilarity carry strong equivalence theorem distinction holds equivalence relation 
ff ff ff free action jr qjr fn holds pf yg qf yg proof directly definition theorem 
immediate consequence theorem strong equivalence congruence 
proof put theorem 
particular implies theorem theorems section theorems hold distinctions proof immediately definition theorems section 
see theorem invalid strong equivalence note yg yg 
failure expansion law theorem strong equivalence demonstrated section 
theorems theorem fx yg proof immediately definition theorem 
theorem ff fi ff resp 
fi binds name free resp 
ff fi ff opp fi ij relation ff opp fi ff opposes fi holds cases 
ff fi ij vg 

ff fi ij ug vg free 
ff fi ij vg 
ff fi ij vg ug free proof straightforward check theorems applying substitution oe sides equation yields strongly bisimilar agents 
theorems combined expansion laws equivalence arbitrary believe useful working laws 
laws additionally relate equivalences different throw light forms name binding calculus 
define operations distinctions definition def gamma fxg theta theta fxg removes constraint substitution definition set names dj def theta theorem fn dj proof oe respects fn oe qoe oe oe oe oe qoe oe 
oe respects oe qoe oe qoe 
oe oe 
suppose oe respects fn oe qoe oe oe pf oe qf 
fn qf respects pf qf oe oe 
note oe respects dj oe respecting oej oe strong equivalence recursion record properties expect recursive definitions analogy ccs 
transform right hand sides definitions respecting agent defined second agents satisfy recursive equation provided equation satisfies standard condition 
properties hold strong equivalence fail strong bisimilarity 
order state results need preliminaries 
assume set schematic identifiers having nonnegative arity 
range schematic identifiers 
agent expression agent may contain schematic identifiers way identifiers range agent expressions 
definition arity 
distinct names assume fn fx 
replacement written efx pg means result replacing subterm pf xg 
extends obvious way simultaneous replacement schematic identifiers efx 
xm xm pmg 
example xy fx uw xy xx xy follows assume indexing set 
mg 
write sequence 
indexed similarly range sequence schematic identifiers implied context associated name sequence convenient write efx 
xm xm pmg simply 
pm 
write 

natural define strong equivalence agent expressions equivalence replacements schematic identifiers agents definition agent expressions containing schematic identifiers 
xm associated name sequences 
xm means fn state result recursive definition preserves strong equivalence theorem assume agent expressions containing schematic identifiers associated name sequence assume identifiers arities equal 
assume def def proof see appendix 
definition term identifier weakly guarded lies subterm ff weakly guarded intuitively definition def unfold behaviour uniquely 
result precise general case theorem assume agent expressions containing schematic identifiers associated name sequence weakly guarded assume agents fn fn assume proof proof follows lines proof proposition 
uses idea bisimulation defined appendix definition 
omit details 
algebraic theory section establish axiomatization strong ground equivalence show axiomatization easily extended non ground equivalence equivalences 
theories complete finite agents agents containing agent identifiers incomplete agents necessarily recursively enumerable 
shall state rules standard equality symbol 
omit usual rules equivalence relation 
note assumed stand congruence relation congruence substitutive properties explicitly mentioned 
definition theory sge strong ground equivalence consists axioms inference rules alpha conversion infer congruence infer xy xy pf yg qf yg names fn infer summation restriction fn ff ff ff ff subject ff match expansion assume ff fi ff resp 
fi binds name free resp 
infer ff fi ff comp fi ij relation ff comp fi ff complements fi holds cases 
ff xu fi ij vg 

ff fi ij ug vg free 
ff fi xu ij vg 
ff fi ij vg ug free identifier def infer pf xg completes definition sge 
proved sge write sge just theorem soundness sge proof soundness laws sge established section 
prove sge admits natural head normal form complete finite agents 
definition agent identifier weakly defined agent identifier weakly guarded right hand side definition definition agent head normal form sum prefixes ff shows importance head normal form lemma agent identifier weakly defined agent head normal form sge proof assumption agent identifier weakly defined may induction structure case agent identifier follows prefix form head normal form 
head normal forms result follows 
head normal form result follows 
head normal form result follows 
hard show sge complete strong ground equivalence finite agents 
theorem completeness finite agents finite agents sge proof preceding results suffices establish claim head normal form 
sigma ff head normal form depth kg 
prove result induction 
result immediate 
suppose 
ff summand ff free action ff gamma 
head normal form summand ff induction hypothesis ff ff suppose summand choosing gamma 
mf yg 
summand zg zg nf wg 
induction hypothesis zg zg 
suppose summand choosing gamma 
mf yg 
summand nf wg 
induction hypothesis similarly summand ff summand fi fi ff result follows 
result easily obtain complete axiomatization strong equivalence adding law oe qoe oe respecting infer refined formulation rule confines hypothesis finitely distinct oe 
theorem sge fdg sound complete finite agents interpreted respectively 
proof directly definition theorem 
strong equivalence pleasant property congruence indirect axiomatization terms strong bisimilarity preserved positive prefix 
leave problem axiomatizing strong equivalence directly topic investigation 
appear direct axiomatization obtained sge omitting valid adding appropriate laws section 
unfortunately case 
equations involving matching presently unable derive milner communication concurrency prentice hall 
milner parrow walker calculus mobile processes part report ecs lfcs laboratory foundations computer science computer science department edinburgh university 
appear information computation 
milner parrow walker calculus mobile processes part ii report ecs lfcs laboratory foundations computer science computer science department edinburgh university 
appendix appendix outline proofs results stated text proofs case analysis give argument crucial typical cases 
full proofs may 
proof lemma proof induction depth inference 
consider turn transition rule rule applied inference antecedent ff gamma 
give cases 
input act ff fn zg holds ii fn fn gamma fzg fyg fn fyg 
close ff gamma 
gamma 
holds fn fn fyg fn fn fyg fn fn fn gamma fyg fn 
lemmas similarly proved induction depth inference 
theorem follows easily lemmas 
proof lemma 
pf zg qf zg ps fn show strong bisimulation showing induction ps 
ff free action ff gamma 
ff gamma 
sq 
fn gamma 
gamma 
yg 
fn gamma 
gamma 
sq hold suppose oes qoe ps gamma oe zg fn 
consider 
suppose oe gamma 
fn oe qoe 
choose 
oe gamma 
yg 
lemma oe oe gamma 
ps gamma gamma 
sq qoe gamma 
oe qoe gamma 
fn zg zg proof lemma 
ps ng proof involves showing strong bisimulation 
note induction ps fn pf qf zg 
immediate definition 
suppose ps ps gamma fn 
zg pf zg zg qf zg fn uf zg pf qf zg 
show induction ps 
ff free action ff gamma 
ff gamma 

gamma 
gamma 
yg 
gamma 
gamma 
immediate fact strong bisimulation restriction definition remaining details omitted 
proof theorem reflexive symmetric clear 
transitivity suffices show strong bisimulation 
proof uses lemma 
give case 
suppose gamma 
choose 
gamma 
yg gamma 
zg zg 
gamma 
zg zg 
gamma 
zg yg yg 
congruence properties note ff ff qg strong bisimulation 
qg strong bisimulation 
qg strong bisimulation 
jr qjr qg 
suffices lemma show strong bisimulation restriction 
see note fn lemma pf zg qf zg jr qjr zg 
routine check clauses concerning transitions hold 
rules applicable par com close 
follows lemma strong bisimulation restriction 
proof lemma 
note fn pf yg qf strong bisimulation 
follows easily lemma 
proof theorem proofs theorem theorem straightforward 
contrast proofs theorem short 
proof theorem proof idea strong bisimulation restriction 
completeness introduce concept 
definition relation strong simulation iff psq 
ff free action ff gamma 
ff gamma 

gamma 
gamma 
yg yg 
gamma 
gamma 
strong bisimulation iff gamma strong simulations lemma strong bisimulation proof 
pf zg qf zg ps fn argument similar proof lemma shown strong bisimulation 
omit details 
combining concept strong bisimulation restriction obtain 
definition relation strong simulation restriction iff psq 
fn pf zg 
xy gamma 
xy gamma 

gamma 
gamma 
yg yg 
gamma 
gamma 

gamma 
gamma 
sq strong bisimulation restriction iff gamma strong simulations restriction 
result 
lemma strong bisimulation restriction proof 
ps ng argument similar proof lemma may shown strong bisimulation 
omit details 
returning main proof theorem prove relation agents fn id strong bisimulation restriction 
psq transition ff gamma 
find simulating transition ff gamma 
satisfying requirements strong simulation restriction equivalence vice versa 
clearly trivial assume fn 
proof exists appropriate transition ff gamma 
case analysis transition ff gamma 
derived vice versa 
sixteen cases draw sample 
case derivations transitions way 
ff gamma 

ff gamma 
prove things premises upper derivation imply premises lower derivation conversely premises lower derivation imply premises upper derivation derivatives satisfy requirement strong bisimulation restriction 
note definition strong simulation consider ff bn ff occurs agents case com res gamma 
gamma 
xv gamma 
gamma 
zg res com gamma 
xv gamma 
gamma 
zg gamma 
zg trivial 
fn lemma get prove fresh get simulating transition follows lemma get gamma 
yg 
simulating transition gamma 
yg follows zg zg lemma fn gives fn zg zg required 
simulating transition know holds chosen fresh yg yg yg case com res xv gamma 
xv gamma 
gamma 
gamma 
zg res com xv gamma 
gamma 
gamma 
zg gamma 
zg trivial 
lemma fn get situation treated case see 
lemma fn get fn follows fn zg 
proves required zg zg proof theorem proof involves showing relation strong bisimulation restriction 
psq transition ff gamma 
find simulating transition ff gamma 
satisfying requirements strong simulation restriction vice versa 
proof exists appropriate transition ff gamma 
case analysis transition ff gamma 
derived vice versa 
cases total 
sample case style proof theorem 
case par close gamma 
gamma 
gamma 
gamma 
close par gamma 
zg fn gamma 
zg gamma 
zg gamma 
zg zg lemma exists fresh gamma 
zg gamma 
zg 
note fresh name 
alpha converting applying theorem get zg zg zg zg condition simulation restriction satisfied zg zg zg zg proof theorem state immediate consequences definition replacement 
agent expression oe substitution names eoe defined agent expression obtained way analogous definition 
substitutions names expected commute replacements way 
oe eoe 

replacement clearly distributes operators theorem generalizes agent expressions 
facts freely follows 
prove theorem 
proof general case similar notationally cumbersome 
write assuming premises theorem define relation schematic identifier xg show strong bisimulation lemma follows choosing get holds names implies oe oe oe amounts 
prove strong bisimulation clearly prove properties call 
ff gamma 
ff free action bound output action bn ff ff gamma 

gamma 
gamma 
yg 
assume ff gamma 
prove induction depth inference transition 
argue cases step transition inferred 
give sample cases 
case transition ff gamma 
inferred rule ide 
identifier subcases 
subcase immediate 
consider second subcase 
ff gamma 
shorter inference xg ef xg ff gamma 
consider ff free action bound output action 
consider ff bn ff 
definition bn ff ef xg ef xg induction ef xg ff gamma 
follows ef xg ff xg ff xg ff gamma 
ide rule ff gamma 
transitive required 
consider ff input action 
consider 
definition ef xg ef xg induction ef xg ff gamma 
yg follows ef xg ff xg ff xg ff gamma 
yg yg 
ide rule ff gamma 
transitive yg required 
case transition ff gamma 
inferred rule par 
shorter inference ff gamma 
assume case symmetric 
bn ff fn 
consider subcase ff free action bound output action 
consider ff bn ff 
induction ff gamma 
exists 
par remember fn fn get ff gamma 

required 
consider subcase ff input action 
consider 
induction ff gamma 
yg exist yg yg 
par remember fn fn get ff gamma 

yg yg yg yg yg yg required 

