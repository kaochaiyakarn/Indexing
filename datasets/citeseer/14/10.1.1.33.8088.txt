software watermarking models dynamic embeddings christian collberg clark thomborson department computer science university auckland private bag auckland new zealand 
cs auckland ac nz watermarking embeds secret message cover message 
media watermarking secret usually copyright notice cover digital image 
watermarking object discourages intellectual property theft theft occurred allows prove ownership 
software watermarking problem described follows 
embed structure program reliably located extracted subjected code transformations translation optimization obfuscation stealthy high data rate embedding adversely affect performance mathematical property allows argue presence result deliberate actions 
part construct informal taxonomy software watermarking techniques 
second part formalize results 
propose new software watermarking technique dynamic graphic watermark stored execution state program 
apart grover patents little publicly available information exist software watermarking copyright notice customer identification number embedded program 
contrast media watermarking active area research 
try bring little information exist form taxonomy software watermarking techniques provide formalization software watermarking new results dynamic data structure watermarking 
author address department computer science university arizona tucson az 
email collberg cs arizona edu attacks watermarking systems strength steganographic system function data rate stealth resilience 
data rate expresses quantity hidden data embedded cover message stealth expresses imperceptible embedded data observer resilience expresses hidden message degree immunity attack adversary 
steganographic systems exhibit trade metrics high data rate implies low stealth resilience 
example resilience watermark easily increased exploiting redundancy including times host message result reduction bandwidth 
evaluate quality watermarking scheme know stands different types attacks 
general steganographic scheme immune attacks techniques employed simultaneously attain required degree resilience 
bender writes media watermarking proposed methods limitations 
goal achieving protection large amounts embedded data intentional attempts removal may unobtainable 
illustrate concepts assume scenario 
alice watermarks host object watermark key sells bob 
bob sell douglas ensure watermark rendered useless alice able prove intellectual property rights violated 
shows principal kinds attacks bob launch watermark subtractive attack bob detect presence approximate location may try crop effective subtractive attack cropped object retained original content value bob 
attack bob locate willing accept degradation quality apply transformations uniformly object watermark may contain 
effective attack alice longer detect degraded watermark degraded object value bob 
additive attack bob augment inserting watermark marks 
effective additive attack bob mark completely overrides alice original mark longer extracted impossible detect alice mark temporally precedes bob 
alice fl charles fl fl alice creates watermarked object adding watermark key original object fl bob steals copy charles extracts watermark show owned alice 
alice charles bob fl fl fl fl fl fl shows effective subtractive attack bob successfully removes fl shows effective additive attack bob adds new watermarks hard charles prove alice original watermark 
fl shows effective attack bob transforms difficult charles detect extract fl charles attempts extract distorted object fails completely gets distorted watermark 
alice bob fl fl fl fl alice adds watermark 
fl shows ineffective subtractive attack bob tries remove due tamper proofing rendered useless 
bob fl alice fl fl alice creates versions different fingerprint serial number fl shows collusive attack bob able remove fingerprint comparing attacks watermarks counter measures attacks 
alice cases able object attacks bob 
technique alice specifically render de watermarking attacks ineffective 
media watermarking schemes vulnerable attack distortion 
example image transforms cropping lossy compression distort image render watermarks unrecoverable 
attacks fingerprinting systems fingerprinting similar watermarking different secret message embedded distributed cover message 
may allow detect theft occurred trace copyright 
typical fingerprint include vendor product customer identification numbers 
fingerprinting objects vulnerable collusion attacks 
shown adversary attempt gain access copies object compare determine location fingerprints result able reconstruct original object 
software watermarking interest watermarking fingerprinting software 
written protection software piracy software watermarking area received little attention 
unfortunate software piracy estimated dollar year business 
main issues stake designing software watermarking technique required data rate large watermark fingerprint compared size program 
form cover program program distributed typed architecture neutral virtual machine code untyped native binary code 
expected threat model kinds de watermarking attacks expect bob 
logistic issues need addressed 
example generate distribute large number uniquely programs handle bug reports 
ignore complications 
assume alice object application distributed bob collection java class files 
shall see watermarking java class files time easier harder watermarking stripped native object code 
harder class files simple adversary decompile analyze 
easier java strong typing allows rely integrity heap allocated data structures 
furthermore assume watermark fingerprint encoded bits 
smaller fingerprints sufficient cases 
bit fingerprint example allow encode bit customer number bits vendor product identification 
assume threat model consisting primarily attacks form various types semantics preserving code transformations 
ideally watermarks survive translation compilation decompilation binary translation optimization obfuscation 
assumptions examine various software watermarking techniques attempt answer questions ffl kind language structure watermark embedded 
ffl extract watermark prove 
ffl prevent bob distorting watermark 
ffl watermark affect performance program 
remainder structured follows 
section discuss static watermarking marks stored directly data code sections native executable class file 
section turn dynamic watermarking marks stored run time structures program 
section construct formal model software watermarking 
section new dynamic watermarking technique encodes watermarks dynamic linked data structures 
show method properly resilient types de watermarking attacks 
section discuss implications results section summarize 
static software watermarking static watermarks stored application executable 
unix environment typically initialized data section static strings stored text section executable code symbol section debugging information executable 
case java information hidden sections class file format constant pool table method table line number table software watermark taxonomy distinguish basic types static watermarks see code watermarks stored section executable contains instructions data watermarks stored section including headers string sections debugging information sections static data watermarks data watermarks fl common easy construct recognize 
example jpeg group copyright notice easily extracted netscape binary strings usr local bin netscape grep copyright copyright thomas lane moskowitz describes data watermarking method watermark embedded image digital media audio video media watermarking algorithms 
image stored static data section program 
unfortunately static data watermarks highly susceptible attacks obfuscation 
simplest case automatic obfuscator break strings push push char case case case case case switch push push push push push push push push 
display const copyright 
string input input fl fl fl fl fl static fl fl dynamic fl fl fl watermarks 
fl alice embeds watermark initialized data string section program 
fl watermark embedded text code section program 
fl watermark embedded unexpected behavior easter egg program run input fl watermark gets embedded global variable program run input fl watermark embedded execution trace program run input 
static data substrings scattered executable 
watermark recognition nearly impossible 
sophisticated de watermarking attack convert static data program produces data 
code watermarks media watermarks commonly embedded redundant bits bits detect due imperfection human perception 
code watermarks constructed similar way object code contains redundant information 
example data control dependencies adjacent statements flipped order 
watermarking bit encoded lexicographic order 
variations technique 
software pirates copied pc rom ibm argued order registers pushed popped constituted signature software 
similarly reordering branches branch encode log log log watermarking bits 
davidson describes similar code watermark software serial number encoded basic block sequence program control flow graphs 
code watermarks susceptible simple de watermarking attacks 
example davidson method easily destroyed locality improving optimizations described davidson 
method provides protection additive attacks reorganize basic block structure encode watermark clear original watermark longer retrieved 
code obfuscation techniques successfully thwart recognition code watermarks 
example davidson method relies able reliably recognize individual basic blocks control flow graph 
easy break basic block inserting true predicated branch void delta delta delta void delta delta delta construction strong opaque predicates discussed 
static watermarks experience obfuscation tells static structures program successfully scrambled obfuscating transformations 
cases obfuscation deemed expensive inlining outlining various forms loop transformations code motion known optimization techniques easily destroy static code watermarks 
moskowitz describes software watermarking method embeds watermark image included application 
idea embed essential piece code image 
code occasionally extracted executed making program fail image watermark tampered 
unfortunately generating executing code fly unusual behavior applications 
complication difficulty code watermarks types semantics preserving transformations 
particularly true java security reasons java programs able inspect code 
words java write pif instruction add die languages possible code highly unusual examines code data segment executing program 
result spite simplicity popularity believe static watermarks inherently flawed 
dynamic software watermarking seen static watermarks suffer easily attacked semantics preserving transformations 
turn dynamic watermarks received attention static ones 
dynamic watermarks stored program execution state program code 
shall see easier obfuscating transformations 
kinds dynamic watermarks 
case application run predetermined input sequence delta delta deltai application enter state represents watermark 
methods differ part program state watermark stored way extracted 
taxonomy distinguish dynamic watermarking techniques see easter egg watermarks data structure watermarks execution trace watermarks 
easter egg watermarks popular published accounts data structure execution trace watermarks 
easter egg watermark fl shows watermark encoded easter egg piece code gets activated highly unusual input application 
defining characteristic easter egg watermark performs action immediately perceptible user making watermark extraction trivial 
typically code display copyright message unexpected image screen 
example entering url netscape fire breathing creature appear 
main problem easter egg watermarks easy locate 
website repositories watermarks 
effects easter egg really subtle case hard argue constitute watermark consequence bugs random programmer choices immediately clear watermark 
right input sequence discovered standard debugging techniques allow trace location watermark executable remove disable completely 
dynamic data structure watermark fl shows watermark embedded state global heap stack data program run particular input watermark extracted examining current values held variables input sequence reached 
done dedicated watermark extraction routine linked executing program running program debugger 
data structure watermarks nice properties 
particular output produced immediately evident adversary special input sequence entered 
contrast easter egg watermarks theory possible generate input sequences random wait unexpected output produced 
furthermore recognition routine shipped application linked watermark extraction little information executable watermark may located 
unfortunately data structure watermarks susceptible attacks obfuscation 
obfuscating transformations devised effectively destroy dynamic state watermark recognition impossible 
show variable split variables 
transformation requires provide functions gamma converting original split data representations functions phi implement built operator phi new split representation main delta delta delta phi main delta delta delta gamma phi example split boolean variable short variables hx bool short true false 
furthermore provide new implementations built operators bool ig bool ig bool gamma short short return ig 
similar manner variables merged 
provide functions fk gamma insert extract original variable merged data representation functions phi implement builtin operator phi variable new representation main delta delta delta phi main delta delta delta gamma phi example merge bit integers bit integer unsigned int unsigned int provide new implementations built operators merged type xg gamma gamma gamma transformations merge split arrays modify inheritance hierarchy object oriented program dynamic execution trace watermark fl watermark embedded trace instructions addresses program run particular input watermark extracted monitoring possibly statistical property address trace sequence operators executed 
obfuscating transformations optimizing translating transformations effectively structure embedded instruction trace 
potent expensive transformation convert section code java bytecode case different virtual machine code 
new code executed virtual machine interpreter included obfuscated application specialized handle particular virtual machine code void 
sn void stack sp pc hop op op delta delta deltai switch pc op top break op top break delta delta delta behavior new virtual machine running obfuscated program original program delta delta delta delta delta delta execution trace completely different 
cases practical attack extra overhead interpretation 
formal model software watermarking section constructing new techniques resilient variety semantics preserving attacks 
formalize notion watermark means recognize watermark program 
order able legally argue ownership watermarked program able show recognition watermark chance occurrence definition software watermark set mathematical structures predicate 
choose probability random small 
seen watermarks embedded program text state program run particular set inputs 
furthermore attacks launched program text state 
definition programs set programs 
pw embedding watermark dom set input sequences accepted output input internal state program drawn set states having processed input js size state accessible words 
technique similar proebsting superoperators 
watermark recognition resilience watermark program pw defined terms de watermarking attacks launched pw attacks program transformations semantics preserving preserve inputoutput behavior state preserving internal state preserved cropping input output behavior preserved definition program transformations set transformations programs programs 
sem ae set semantics preserving transformations stat ae set state preserving transformations crop ae set transformations preserve semantics ft dom dom dom stat ft dom crop ft dom dom state preservation implies semantics preservation transformations code optimizing transformations preserve semantics state stat ae sem writes problem watermarking inserting marks recognizing 
strength watermark defined respect set transformations watermark recognized definition watermark recognition watermark program pw recognizable wrt set transformations ae exists recognizer rt theta input rt pw pw definition allows distinguish useful subclasses recognizers ffl pw pw trivial recognizer guaranteed recognize transformations performed pw ffl rt sem pw pw strong recognizer resilient semantics preserving transformation 
ffl rt pw pw ideal recognizer resilient transformation 
ffl rt pw static recognizer examine text pw execution state 
ffl rt pw pure dynamic recognizer examine execution state pw text 
watermark resilience particularly interested evaluating strength watermark written dynamically state program 
watermarks may attacked adversaries write information state 
watermark adversaries increase size program dynamic state factor say watermark space resilient definition watermark space resilience watermark program program pw space resilient wrt set transformations ae exists recognizer rt input rt pw pw js pw js pw note space resilient watermark strong recognizer 
parameter measure weakness watermarking system 
watermarks written program text static data susceptible attacks increase static size code definition watermark size resilience watermark program program pw size resilient wrt set transformations ae exists recognizer rt input rt pw pw jt pw attacks watermarked program pw increase runtime runtime increased input domain attack particularly definition watermark runtime resilience watermark program pw runtime resilient wrt set transformations ae exists recognizer rt input rt pw pw dom time pw time pw watermark stealth certain types watermarks vulnerable attack statistical analysis 
static dynamic instruction mix pw radically different expect program pw type may suspect watermark hidden frequently occurring instructions 
definition watermark stealth watermark statically stealthy program wrt statistical measure gamma pw insignificant 
similarly watermark dynamically stealthy gamma pw insignificant 
watermark data rate essential watermark encodes information possible time increasing size program text working set size executing program 
definition watermark coding efficiency log jw entropy bits drawn uniform probability jp size words expressed encoding 
js max dom js upper bound size internal state 
embedding pw high static data rate max gamma jp embedding pw high dynamic data rate max js pw gamma js note data rate measured hidden bits extra word added watermarking process 
dynamic graph watermarking seen previous discussion software watermarking techniques exception easter egg watermarks susceptible attacks semantics preserving transformations 
similar situation media watermarking 
section discuss detail new techniques embedding software watermarks dynamic data structures 
belief techniques promising de watermarking attacks 
particular see possible exactly describe types attacks possible method devise counter measures protect reasonable levels attack 
overview central idea dynamic graph watermarking embed watermark topology dynamically built graph structure 
pointer aliasing effects code manipulates dynamic graph structures hard analyze 
result semantics preserving transformations fundamental changes graph hard construct 
easier structures code scalar data 
illustrates technique 
signature property propose embed graph watermark topology graph represents product large primes prove legal origin pw recognizer extracts pw factors similar signature property public key cryptography proposed samson static watermarking scheme 
obviously hard graph problems lattice problems described 
main problem watermarking recognizing extracting mark 
extract pw recognizer rt pw primarily examine runtime object heap program run watermark key input sequence sequence new node fl prime prime theta new node 
fl fl fl alice selects product large primes fl embedded topology graph fl program builds constructed 
fl new node fl new node new node new node tampered die new node new node tampered die fl fl embedded original program run input built 
recognizer identify heap constructed 
fl added prevent attacks 
fl application including watermark code recognizer obfuscated prevent attacks pattern matching 
new node new node die new node new node die fl fl tampered tampered fl theta fl recognizer removed application version alice sells 
fl charles links fl run input recognizer produces charles proves ownership factoring overview proposed dynamic graph watermarking scheme 
reached know possibly linked object structures heap represent main difficulty recognize graph structures heap 
sections discuss issues detail 
embedding watermark section show ways embedding number topology graph obviously ways doing fact watermarking tool library techniques choose prevent attacks pattern matching 
radix encoding illustrates radix encoding circular linked list 
extra pointer field encodes base digit length path node back 
null pointer encodes self pointer pointer node encodes list length encode integer range gamma 
list requires extra words assume overhead heap cells 
dynamic bit rate log log 
hide theta bits words storage hidden bits word 
static data rate harder determine depend heavily encoding 
example consider java bytecode 
allocating node initializing pointer fields requires byte bytecode sequence 
hide bit watermark build element list requires theta bytes straight line bytecode static bit rate hidden bits byte 
theta delta delta delta delta delta radix encoding 
right pointer field holds field left pointer encodes base digit 
enumeration encoding 
st nd nd th trees enumeration oriented trees vertices 
enumeration encoding planted plane cubic tree nodes 
graphic embeddings watermarks 
enumeration encoding second embedding method uses results graph enumeration 
idea watermark number represented index watermark graph convenient enumeration 
requires able 
generate th graph enumeration 
extract index enumeration 
operations efficient expect large 
rules classes graphs due intractability sub graph isomorphism 
restricted classes graphs allow efficient enumeration indexing 
example oriented parent pointer tree case enumerable techniques described knuth section 
number am oriented trees nodes asymptotically am ff gamma ff ff 
encode arbitrary bit integer graphic watermark log extra words 
dynamic bitrate hidden bits word 
construct index enumerable graph usual way ordering operations enumeration 
example index node trees largest subtree order case path length gamma assigned index 
indices am gamma assigned trees single subtree connected root node 
indices am gamma am gamma am gamma assigned trees exactly subtrees connected root node subtrees exactly gamma nodes 
am gamma am gamma indices assigned trees exactly subtrees connected root node subtrees exactly gamma nodes 
see example 
assumes graph stored untraced heap 
languages traced heaps extra pointers necessary avoid leaves collected 
recognizing watermark select length input sequence separate components delta delta delta gk code build components delta delta delta wk inserted application input sequence delta delta deltai reached graph components built assembled complete watermark 
order identify need examine reachable heap objects course intractable 
fact shows better 
assume distinguished node case embeddings previous section root node part gk examine nodes built processing ik attacks watermark nice consequence approach translating optimizing obfuscating transformations discussed sections effect heap allocated structures built 
techniques obfuscate dynamic data particularly languages typed object code java 
types obfuscating transformations need 
adversary 
add extra pointers nodes linked structures 
hard recognizer identify real graph edges lot extra bogus pointer fields 

rename reorder fields node making hard recognize real watermark 

add levels indirection example splitting nodes linked parts 

add extra bogus nodes pointing graph preventing finding root 
illustrates combination attacks 
exception renaming reordering attacks serious consequences memory requirement adversary de watermarked program 
input delta delta delta input delta delta delta input phi delta delta delta delta delta delta input ik phi phi delta delta delta code build watermark graph 
input key sequence builds graph component 
ik processed entire graph built 
complete watermark graph components 
root node colored black built processing key input ik building recognizing watermark graph 
example splitting node costs pointer cell plus usual object overhead words java 
furthermore assuming adversary know dynamic structure watermark hidden going apply transformations uniformly entire program order certain watermark 
words programs high allocation rate resilient types attacks de watermarked program higher memory requirement original 
watermark variety techniques protect watermark graph attack 
attractive methods structure graph renders certain types attacks ineffective 
parent pointer representation example resilient renaming reordering attacks node pointer 
shows representation expense lower data rate increase graphic watermark resilience node splitting attacks 
reflection reflection capabilities java languages modula icon give simple way graph watermark types attack 
assume graph node node class node int public node car cdr java reflection class lets check integrity type runtime field node class length die gettype node class die prevent reordering renaming attacks access watermark pointers reflection 
example po car vq car represented relevant pointer node field node class int int length gettype node class set break obviously type code program reflection 
cropping attacks far assumed attacks preserve semantics pw reasonable adversary knowledge location hope apply semantics preserving transformations uniformly pw adversary locate code builds watermarking graph easily destroy adding extra nodes edges 
thwart kind attack pw occasionally check integrity example consider class gm planted plane cubic trees leaf nodes vm enumerated illustrated 
trees gamma internal nodes root node nodes gp represent objects object holds pointers data structure requires words 
leaf node recognizable self loop root node leaf node links 
furthermore leaf node indices discoverable cycle links mod watermark bit rate log gm gj gamma log 
planarity restriction may tested internal node confirming left child right subtree linked right child left subtree 
discussion software watermarking new field fundamental issues resolved 
practical point view important question constitutes class int car cdr class int car bogus cdr bogus car cdr car cdr bogus car cdr bogus bogus car cdr bogus add bogus pointer fields nodes type class int car cdr class int cdr car cdr car rename reorder fields nodes type class int car cdr new class int bogus class car cdr new bogus new bogus bogus car cdr car cdr car cdr car cdr add level indirection splitting nodes type 
fl fl fl fl fl example obfuscation attack watermark graph fl 
adversary renames reorders node pointer fields fl adds bogus pointer field fl splits nodes adding bogus pointer field fl 
fl bogus pointers graph obscure root node 
obfuscation attacks graphic watermarks 
fl fl fl node splitting 
fl expand node original watermark tree cycle 
fl adversary splits nodes 
structure graph ensures nodes fall cycle 
fl recognizer shrinks biconnected components underlying undirected graph 
result graph isomorphic original watermark 
reasonable threat model 
identified types threats 
attacks semantics preserving transformations translation optimization obfuscation 

statistical attacks attempt locate watermark identifying anomalies distribution instructions computations 

collusive attacks attempt locate fingerprint comparing differently copies program 

cropping attacks remove located watermark extract individual module watermarked application 

additive attacks insert new bogus watermarks watermarked program 
methods immune types attacks 
easter egg watermarks dynamic graph watermarks highly resilient attacks nature watermark complete applications individual modules 
cropping particularly valuable module application illegal reuse successful attack methods 
static watermarks hand easily duplicated times application protect individual modules parts modules 
unfortunately static watermarks highly susceptible attacks 
statistical attack successful depend nature watermark nature application 
dynamic graph watermarks stealthy typical object oriented programs tend create large complex heap structures 
susceptible statistical attacks programs primarily numerical nature 
davidson method serial number encoded order basic blocks prone statistical attacks resulting control flow graphs tend appear convoluted sub optimal 
interesting note problems face software watermarking quite different arise watermarking media 
reason fluidity software allows quite sweeping changes text program changing behavior 
example quite difficult protect collusive attack image fingerprint nature copies appear identical 
software watermarks face problem 
easily protect collusive attacks applying different set obfuscating transformations distributed copy application 
comparing copies application reveal location fingerprint text distributed copy appear completely different 
similar reasons attacks serious threat media watermarks software watermarks 
attack media object restricted making imperceptible changes obfuscation attack program restricted preserving semantics 
aware media software watermarking technique immune additive attacks 
software watermarking process embedding large number program number reliably retrieved program subjected program transformations embedding imperceptible adversary embedding degrade performance program 
challenging problem best knowledge previously addressed academic literature 
published accounts aware software patents describe schemes watermarks fingerprints embedded object code program 
static techniques susceptible attacks translation optimization obfuscation 
constructed taxonomy software watermarking techniques marks embedded retrieved attacked 
furthermore provided formalization software watermarking believe form basis research field 
interesting result new family software watermarking techniques marks embedded topology dynamic heap data structures 
acknowledgment gibbons cheng members star lab moskowitz anonymous referees valuable input 
ajtai 
generating hard instances lattice problems 
proceedings eighth annual acm symposium theory computing stoc pages new york usa may 
acm press 
albert morse 
combating software piracy encryption key management 
ieee computer april 
business software alliance 
cost software piracy bsa global enforcement policy 
www rad 
net id bsa piracy html 
ross anderson fabien 
limits steganography 
ieee sac may 
david bacon susan graham oliver sharp 
compiler transformations high performance computing 
acm computing surveys december 
www acm org pubs toc abstracts html 
bender gruhl morimoto lu 
techniques data hiding 
ibm systems journal 
christian collberg clark thomborson douglas low 
taxonomy obfuscating transformations 
technical report department computer science university auckland july 
www cs auckland ac nz collberg research publications 
christian collberg clark thomborson douglas low 
breaking abstractions data structures 
ieee international conference computer languages iccl chicago il may 
www cs auckland ac nz collberg research publications 
christian collberg clark thomborson douglas low 
manufacturing cheap resilient stealthy opaque constructs 
principles programming languages popl san diego ca january 
www cs auckland ac nz collberg research publications 
robert davidson nathan 
method system generating auditing signature computer program 
patent september 
assignee microsoft 
robert davidson nathan keith vogel gideon andreas yuval richard norman eugene 
method system improving locality memory execution computer program 
patent september 
assignee microsoft 
compaq digital 
express 
www 
digital com amt index html 
council ibm 
software 
talk bcs technology software protection special interest group 
reported 
oded goldreich shafi goldwasser shai halevi 
public key cryptosystems lattice reduction systems 
electronic colloquium computational complexity technical reports 
jackson 
combinatorial enumeration 
wiley new york 
derrick grover 
program identification 
protection computer software technology applications british computer society monographs informatics 
cambridge university press nd edition 
isbn 
frank harary palmer 
graphical enumeration 
academic press new york 
ralf hauser 
internet decrease software piracy anonymous receipts anonymous id cards anonymous 
inet th annual conference internet society internet global information infrastructure volume pages honolulu hawaii usa june 
herzberg 
software protection 
th jerusalem conference information technology jerusalem israel april 
amir herzberg pinter 
public protection software 
acm transactions computer systems november 
keith holmes 
computer software protection 
patent february 
assignee international business machines 
neil johnson sushil jajodia 
computing practices exploring steganography seeing unseen 
computer february 
www 
gmu edu pub pdf 
donald knuth 
fundamental algorithms volume art computer programming 
addison wesley reading ma usa third edition 
malhotra 
controlling copyright intellectual property case computer software 
syst 
manage 
usa june 
part part jul pp 

martin 
pursuing pirates unauthorized software copying 
datamation august 
tim maude maude 
hardware protection software piracy 
communications acm september 
mori kawahara 
concept architecture 
technical report inst 
inf 
sci 
electron japan tsukuba univ japan july 
www site gmu edu html 
scott moskowitz marc 
method cipher protection computer code 
patent january 
assignee dice 
david nagy farkas 
easter egg archive 
www com lr html 
fabien ross anderson markus kuhn 
attacks copyright marking systems 
second workshop information hiding portland oregon april 
todd proebsting 
optimizing ansi superoperators 
popl 
acm press january 
todd proebsting scott 
krakatoa decompilation java bytecode reveal source 
third usenix conference object oriented technologies systems coots june 
peter samson 
apparatus method serializing validating copies computer software 
patent february 
assignee ivan 
metering licensing resources general purpose approach 
technological strategies protecting intellectual property networked multimedia environment journal interactive multimedia association intellectual property project coalition networked information pages mit program digital open high resolution systems january 
interactive multimedia association john kennedy school government 
seymour goodman 
international software piracy 
computer november 
