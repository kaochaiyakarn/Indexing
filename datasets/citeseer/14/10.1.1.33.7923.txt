bridging algorithm gap linear time functional program paragraph formatting oege de moor programming research group oxford university oege comlab ox ac uk jeremy gibbons school computing math 
sciences oxford brookes university brookes ac uk august constructive programming community commonplace see formal developments textbook algorithms 
algorithm design community hand may known textbook solution problem efficient possible 
presenting efficient solution algorithm designer usually omit implementation details creating algorithm gap algorithm concrete implementation 
contrast formal development usually presents complete concrete implementation efficient solution 
claim algorithm designer forced omit details relative expressive poverty pascal languages typically solution greater expressiveness provided functional language allows story told reasonable amount space 
hope bridge algorithm gap concrete implementations facilitate communication communities 
paragraph formatting problem favourite example demonstrating effectiveness formal methods particularly convincing derivations 
algorithms derived applications dynamic programming time complexity min wn maximum number words line number words formatted 
algorithm designers known solve paragraph problem time independent 
presentations linear algorithms technical report cms tr school computing mathematical sciences oxford brookes university 
currently submitted publication 
ignore details instance white space line count creating algorithm gap algorithm concrete implementation 
contrasts formal developments cited concrete code albeit efficient solution 
experiment bringing formal methods algorithm design closer medium functional programming 
presents linear time algorithm paragraph formatting semi formal style 
algorithm executable code fact file produce executable gofer program 
writing hope convince reader functional style suitable communicating non trivial algorithms sacrificing rigour clarity introducing algorithm gap 
course exist algorithms difficult express functionally 
fact came surprise algorithm implemented resorting non functional language features 
odm attempted explain algorithm similar years ago implemented modula program discussed oxford problem solving club met lot disappointment need destructive updates 
realised algorithm expressed functionally 
contribution ongoing effort determining done efficiently purely functional style 
preliminaries assume reader expert functional programming explain necessary syntax standard functions gofer go 
course familiarity modern lazy functional language gofer haskell miranda hope helpful hope notation fairly self evident 
addition standard functions gofer number primitives explained section 
fold function fold related standard function foldr operates non empty lists 
informally fold step start step step 
step start denotes list writing binary function inside backwards quotes allows infix operator 
words fold traverses list right left applying start element summing right left stage applying function step 
formal definition fold fold fold fold miranda trademark research software binary operator cons prepending element list 
definition fold pattern matching equation matches argument applies 
scan 
function scan records intermediate results computation fold list scan fold head function head returns element non empty list 
example function tails returns non empty suffixes argument defined tails scan second argument scan binary operator supplied second argument case empty list function results function element singleton list containing just element 
relationship fold scan succinctly expressed called accumulation lemma scan map fold tails higher order function map applies function argument element list second argument binary operator function composition 
accumulation lemma useful 
single 
operator single tests argument singleton list single true single false pattern matches argument acting kind clause 
similar standard gofer function null tests emptiness 

function takes list returns element value minimal 
formally defined terms fold fold choice id choice paragraph formatting paragraph problem aim lay text paragraph visually pleasing way 
text list words word sequence characters type txt word type word string paragraph sequence lines sequence words type paragraph line type line word width line defined total length words printed space character consecutive pair words width line 
int width fold plus length plus length line definition type declaration specifying function width takes line returns int 
function length returns number elements list notion width appropriate displaying paragraphs device character width 
programs easily modified deal proportional spacing character individual width 
case need constant time access arrays available functional languages 
define global constant maxw maximum line width 
maxw int maxw course flexibility functions develop parameterized maxw global constant presentation algorithm cluttered 
straightforward maxw parameter 
function fits checks line fits maximum line width 
fits line 
bool fits xs width xs maxw laying text paragraph maximum line width exceeded 
programs halt run time error individual word exceeds maximum line width practical applications need deal pathological inputs graciously 
addition maximum line width maxw assume existence optimum line width global constant 
int optimum line width course maximum line width 
define notion visually pleasing requirement width line paragraph close optimum line width possible 
formally wish minimise total waste paragraph measure deviation optimum line width waste paragraph 
int waste fold plus const plus width note line gets treated special case count total waste paragraph 
achieved function const satisfies equation const function pars takes text returns possible layouts list paragraphs pars txt 
paragraph pars fold ps map new ps map glue ps new ls ls glue ls ls binary operator list concatenation 
word option putting new line existing paragraph glue front line existing paragraph 
problem seek solve specified par txt 
paragraph par waste filter fits pars function filter takes list returns exactly elements satisfy predicate predicate holds list precisely elements list satisfy predicate 
specification executable program solves problem execution takes exponential time 
standard algorithm obtain efficient solution observe new monotonic waste ls waste ls waste new ls waste new ls furthermore glue monotonic weaker sense waste ls waste ls waste glue ls waste glue ls note properties depends precise definition waste individual lines returned function matters total waste sum waste individual lines 
monotonicity properties may conclude dynamic programming algorithm valid solution specification par 
par waste fold step start step ps filter fith new waste ps map glue ps start filter fith fith fits head note par equal par particular optimal paragraph par par may return different optimal paragraphs 
express refinement property formally generalize functional programming relational programming step scope 
efficiency represent paragraph ls triple ls width waste ls ls may empty stipulate waste 
program resulting data refinement follows 
par waste fold step start step ps filter fith new waste ps map glue ps start filter fith length new length new ls length waste ls glue ls ls length ls ls ls ls waste waste fith maxw standard dynamic programming solution paragraph problem time complexity min wn maximum number words line number words paragraph 
computational experiments confirm accurate estimate program behaviour 
linear algorithm standard algorithm special properties function returns waste individual line 
fact known possible improve standard algorithm preceding section noted 
shall show particular choice substantial improvements possible 
exploiting concavity observe function concave sense consequently monotonicity property glue strengthened waste ls waste ms waste glue ls waste glue ls words implication says paragraph shorter line better paragraph remain better words glued lines paragraphs 
kind implication known dominance criterion dominance criteria basis improvements straightforward dynamic programming 
exploit dominance criterion arrive improved definition step 
note step maintains property strictly increasing order length line list candidate solutions 
suppose formats order list candidate solutions line longer line suppose waste waste monotonicity property new stronger property glue follows may safely discarded candidate solution generated beaten candidate solution generated way may define step ps trim filter fith new waste ps map glue ps function trim discards superfluous candidate solutions trim trim trim ps trim ps waste waste trim ps valid definition gofer patterns involving allowed trim easily terms standard functions init return element remainder list respectively omit details 
note trim back front 
see trimming back better choice criterion stopping early 
note result trim strictly decreasing order waste wasteful candidate solution list improve definition step step ps trim filter fith new ps map glue ps resulting algorithm improvement standard solution linear stage list intermediate solutions traversed 
forecasting remedy source inefficiency observe stage algorithm keep list paragraphs shape list strictly decreasing order cost 
say element bumped predecessor eliminated computation trim 
tell gluing needed particular paragraph bumped predecessor 
introduce function paragraph 
int 
int length waste glue suitable definition ls width waste ls words total waste paragraph sequence words width glued line note check maximum line width exceeded notion waste may meaningless terms paragraphs 
allow negative values arguments function forecast paragraph better paragraph process gluing words paragraphs 
define function min maxw width head gofer definition gofer sets quantification potentially infinite set completely determine 
gluing width paragraph furthermore glue paragraph concavity discarded 
second term definition reflects fact gluing maxw width head paragraph better paragraph line exceeds maximum line width 
happen returns negative number better start 
formalise observations properties glue 
starting glue length consequently satisfies glue glue length glue glue glue glue define predicate better better waste glue waste glue fith glue binary operator boolean disjunction boolean conjunction 
words better states gluing word paragraph better paragraph grounds waste line long 
suppose ls ls ls property better better better words property says gets better gluing word better follows useful triple list candidate solutions safely discarded 
shall exploit observation maintaining list candidate solutions 
lengths lines strictly increasing order 
costs candidate solutions strictly decreasing order 
values consecutive adjacent pairs candidate solutions strictly decreasing order 
list candidate solutions said tight 
see keep list candidate solutions tight recall definition step previous section step ps trim filter fith new ps map glue ps argued section step maintains property 
show properties maintained 
notice properties preserved subsequence deleting elements list candidate solutions 
properties obvious 
property follows fact provided strictly increasing order length line fact hard establish 
suppose ps satisfies property 
glue respects order list map glue ps satisfies property 
necessarily case new ps map glue ps satisfies property presence new element may require initial elements map glue ps removed 
cons operator expression replaced operator add required pruning reasoning earlier consecutive candidate solutions solution discarded 
add add add rs add rs rs list candidate solutions new ps add map glue ps satisfies property 
note add ps subsequence ps property maintained reason properties maintained filter fith 
third component tightness property achieved function trim earlier 
trim returns subsequence argument properties maintained 
property permits optimization trim trimming early 
reason introducing function place 
suppose ps satisfies property claim trim ps written trim trim trim ps trim ps waste waste ps justification 
suppose adjacent candidate solutions ps adjacent candidate solutions ps list 
property 
suppose waste waste word just processed short bump short bump ordering waste waste initial segment list candidate solutions solution satisfies property 
trim ps ps second recursive call trim omitted ps satisfies property waste waste manipulating list candidate solutions ends profitable symmetric set list operations head get treated footing 
implementation lists summarized appendix 
symmetric lists familiar list operations written dash head init type symmetric lists written point touched efficiently implemented 
exercise high school mathematics 
note appear order list candidate solutions singleton just way formatting paragraph single line line fits candidate solution longest line 
just cases consider computing singleton 
note second term rq maxw width head greater zero 
case singleton zero value zero happen width head waste tail 
case splits subcases waste tail zero smaller rq width head suitable values simply rq 
case singleton note non singleton waste width head precisely waste waste width head width head note divisor non zero ordering lengths lines 
term ceiling fraction right hand side inequation smaller rq 
implement follows wp min rq single waste rq single waste waste wq wp min rq wp width wq width rq maxw wq returns ceiling fraction outline program par fold step start step ps trim filter fith new ps add map glue ps note fact tight list paragraphs strictly decreasing order waste replacing waste par 
new program fact quite efficient computational experiments show stage computation small number candidate solutions kept 
candidate solutions get inspected time step evaluated remains source inefficiency 
progress shall remove subexpressions filter fith map glue definition step 
filtering list candidate paragraphs kept increasing order length line filter easily disposed subsumed definition trim 
introduce function trim filter fith observation transform definition fith ps ps waste waste fith ps section get rid map definition step making change representation glue identity function 
assume list operations head tail init take amortized constant time gives amortized linear time algorithm paragraph formatting 
word paragraph contributes new candidate solution amount performed add list candidate solutions proportional number candidate solutions discarded 
differencing suggested change representation avoids notion gluing altogether eliminate occurrence map definition step 
elimination glue achieved computing tail paragraph 
long original text available concatenation paragraph necessary quantities computed terms tail length head length concat length concat tail width head width concat width concat tail waste single width head waste tail recall stipulated waste 
exploitation type equation known differencing 
shall represent paragraph triple rep rep width concat tail waste tail length concat tail useful type synonym new representation paragraphs type par width waste length type width int type waste int type length int fst snd functions fst snd return second third components triple respectively 
representation function glue identity function required 
go details implementation operators paragraphs outline structure final program 
program fact solution par returned par par txt 
paragraph par ws tile ws map length concat tail par tails ws length ws function tile xs produces required solution exploiting differencing equation length head tile txt 
length length 
paragraph tile ws tile ws ms ws tile ws drop ms 
ws ws splitat ws splitat pair lists element pair elements second element remainder drop second component splitat 
proof works induction tails argument detailed exposition 
interesting note program involving tile starting point papers hirschberg part final optimisation 
adapting algorithm developed previous sections new representation paragraphs find functions data refinements step start fold map length ws map rep fold step start ws width ws length ws accumulation lemma introductory section showed computation fold tails written terms scan scan map length ws zip map map rep fold step start tails ws map width tails ws map length tails ws function zip zips triple lists length list triples obvious way 
zs scan map length ws 
length ws head zs map length concat tail par tails ws rep map rep par tails ws par fold step start map map rep fold step start tails ws map fst zs resulting program par txt 
paragraph par ws tile ws map fst zs head zs zs scan map length ws remains give appropriate definitions 
definition length 
par width length cons nil maxw definition mirrors preceding section operations paragraphs data refined new representation paragraphs 
modifications justified differencing equations stated definitions immediate consequences identities length 
par waste length 
par waste length ps tw tl new ps add ps single waste single tw tl operator new adds new line front paragraph 
important computing waste tail newly created paragraph old width head new word account new tw tl single tw tl tw definition changed needs new implementation width head width hd 
recall dashed list operations operations symmetric lists defined appendix 
null nil single maxw single psp waste waste maxw psp init psp definition add similarly unaffected 
intuitive level duality ways add operate unable bring code partly performs filtering operation 
add cons single null add rrs cons rrs tail head head rrs data refined version wp min rq single rq single waste waste wq wp min rq wp wq rq maxw wq div hard check program par amortised linear time complexity 
theoretical bound confirmed computational experiments smallest inputs par outperforms standard algorithm par 
haskell vs modula vs ingredients writing program functionality unix utility fmt output far superior fmt uses naive greedy strategy resulting paragraphs visually pleasing 
shall functions parse string 
paragraph paragraph 
string known text processing primitives functional programming 
definitions included appendix 
primitives implementation fmt takes single line fmt map par concat parse joe programmer may happy implementation high quality fmt 
algorithm gap expect performance gap gofer program implementation algorithm conventional language 
measure performance gap translated gofer program fmt haskell compiled 
haskell program compared hand coded modula implementations close correspondence gofer program 
conventional programs modula extensive destructive updates implementation symmetric lists replaced standard circular array code queues 
data structures conventional programs fixed size 
appropriate size bounds determined experimentation 
conventional programs especially modula program course longer haskell program due unwieldy syntax difference factor half 
personally conventional code harder write uses lot indexing arrays opposed standard list processing functions haskell 
programs compiled sun sparc workstation 
haskell glasgow compiler ghc produces best code haskell compilers available 
modula sun compiler gnu compiler 
haskell executable expected vastly larger modula code differ factor haskell executables comparable size 
cases switched optimizers 
spectacular effect haskell program ran times faster switch 
compare performance executables formatted full text thomas hardy far crowd ascii file approximately kb 
programs run format file maximum line width characters 
cpu time memory usage measured time command provided unix shell 
modula program half times faster haskell program encouraging program nearly times faster probably reflects effort put respective compilers 
expect haskell program memory fact run standard heap size provided ghc mb 
memory usage increase larger input files 
table summarises comparison columns compare programs respect textual length lines characters third column size executable kbytes columns show execution time cpu seconds experiment memory kbytes 
lines chars size kb time memory kb haskell modula haskell modula haskell summary performance gap great furthermore advances compiler technology cancel remaining advantages languages modula haskell years 
discussion experiment functional language presenting non trivial algorithm semi formal style 
personally believe large class problems style presentation adequate closing algorithm gap reconciling algorithm design formal methods 
comparison hand coded conventional implementations indicates non trivial algorithms performance gap small 
unsatisfactory aspects material ffl entirely satisfied semi formal style 
trim program derivation absolutely standard invention involved synthesizing program 
part easily cast calculational form right machinery 
invention role forecasting ad hoc escapes elegant calculational treatment 
unsatisfactory especially technique generally applicable 
ffl second dissatisfied way program differencing functional language 
sense interesting part programming process quite error prone 
differencing destroys elegance characterises functional expression standard algorithm 
meta programming features spirit paige invariant construct circumvent problem unfortunately know modern functional language supports ideas 
algorithm representative large class ingenious algorithms collectively known name sparse dynamic programming 
nice see generic treatment class algorithms possible style 
generic approach reach investigated depth 
bird 
transformational programming paragraph problem 
science computer programming 
bird 
calculus functions program derivation 
turner editor research topics functional programming university texas austin year programming series pages 
addison wesley 
bird de moor 
list partitions 
formal aspects computing 
bird de moor 
algebra programming 
international series computer science 
prentice hall 
bird wadler 
functional programming 
international series computer science 
prentice hall 
de moor 
generic program sequential decision processes 
hermenegildo swierstra editors programming languages implementations logics programs volume lecture notes computer science 
springer verlag 
eppstein galil giancarlo italiano 
sparse dynamic programming ii convex concave cost functions 
journal acm 
galil giancarlo 
speeding dynamic programming applications molecular biology 
theoretical computer science 
hirschberg 
weight subsequence problem 
siam journal computing 
hirschberg 
new applications failure functions 
journal association computing machinery 

symmetric set efficient list operations 
journal functional programming 
knuth 
breaking paragraphs lines 
software practice experience 
morgan 
programming specifications 
international series computer science 
nd edition prentice hall 
paige 
programming invariants 
ieee software 
gutenberg project 
original texts ascii files 
available ftp cso uiuc edu 
appendix symmetric lists implementation symmetric lists explained depth 
briefly list represented pair lists abs abstraction function abs defined abs reverse invariant maintained lists empty empty singleton 
operations implement non symmetric counterparts sense head head abs abs tail tail abs 
implementation operation takes amortised constant time 
type single null single single null null true null false nil head head null head head null head cons null snoc null tail null reverse single tail splitat length init null reverse single tail splitat length appendix text processing text processing package explained 
provides primitives converting strings lines lines words paragraphs lines 
case forward direction programmed generic solution backward conversion undo 
definitions lines words commented defined standard gofer prelude 
function id identity function 
undo 

undo fold insert id insert xs ys xs ys eq 


fold break start break xs xs head xs tail xs start break undo lines undo words filter string 
string undo paras string 
string paras filter parse paras map words lines map 
