ufo personal global file system user level extensions operating system albert alexandrov klaus schauser chris university california santa barbara article show extend wide range functionality standard operating systems completely user level 
approach works intercepting selected system calls user level tracing facilities proc file system provided unix operating systems 
behavior intercepted system calls modified implement new functionality 
approach require relinking recompilation existing applications 
fact extensions dynamically installed running processes 
extensions completely user level install system administrator assistance 
individual users choose extensions run effect creating personalized operating system view 
approach implement global file system called ufo allows users treat remote files exactly local 
currently ufo supports file access ftp protocols allows new protocols plugged 
projects implemented global file system abstractions require changes operating system modifications standard libraries 
article gives detailed performance analysis approach extending os establishes ufo introduces acceptable overhead common applications intercepting individual system calls incurs high cost 
categories subject descriptors operating systems file systems management access methods distributed file systems general terms performance additional key words phrases file caching global name space proc file system user level operating system extensions supported national science foundation nsf career award ccr nsf postdoctoral award asc 
computational resources provided nsf instrumentation cda sun microsystems 
software available line www cs ucsb edu research ufo 
authors address department computer science university california santa barbara santa barbara ca email schauser cs ucsb edu 
permission digital hard copy part personal classroom granted fee provided copies distributed profit commercial advantage copyright notice title publication date appear notice copying permission acm copy republish post servers redistribute lists requires prior specific permission fee 
acm acm transactions computer systems vol 
august pages 
alexandrov 
extensibility important issue modern operating systems 
extensible operating systems easily adapt satisfy requirements new emerging applications 
growing importance extensibility evidenced numerous projects focusing designing new extensible operating systems bershad engler ford seltzer extensibility existing ones 
article new method extending existing operating systems entirely user level 
achieve benefits extensible operating system having modify existing os designing new 
approach extensions installed run individual user help system administrator affecting users 
advantage method extensions simple install 
major benefit user choose extensions run effect creating personalized operating system view 
demonstrate method operating system extension building significant extension ufo global file system extension installs works completely user level 
original motivation extension came explosive growth internet gave increasing number users including access multiple computers geographically distributed 
desire transparent file access local unix machines personal accounts remote sites 
addition wanted resources large number existing anonymous ftp servers local allow applications transparently access remote files 
ufo catcher tool extending standard unix operating system solaris completely user level 
catcher extension approach similar interposition agents jones uses standard tracing facilities intercept selected system calls 
behavior intercepted system calls modified implement new functionality 
article focuses extending file system services approach provides general way expanding operating system 
main advantages approach extensions install completely user level require modifications kernel require recompilation relinking existing applications require modification standard shared libraries dynamically installed running processes ufo stands user level file organizer 
acm transactions computer systems vol 
august 
ufo personal global file system added user process basis developed user level access os source code 
user level extension methods approach certain limitations 
os extensions possible implement due fact hidden kernel state inaccessible user level 
second performance overhead associated system call interception may big extensions 
extensions setuid programs due security policy enforced operating system 
article aim examine benefits method extending os evaluate performance implemented extensions context remote file systems 
give insight range possible extensions implementing large os extension remote file access ufo suggesting possible extensions 
remainder article structured follows 
section discusses significance user level approach ufo gives high level overview os extension mechanism 
section reviews related compares method operating system extension alternative approaches 
section gives detailed description catcher explains intercepts system calls user level 
section discusses design decisions ufo user level global file system 
section presents experimental results variety microbenchmarks standard unix file system benchmarks full application programs 
section concludes article offers outlook research directions 

ufo overview ufo implements global file system allows local applications transparently access files remote machines 
user level process runs unix systems connects remote machines authenticated anonymous ftp protocols 
provides read write caching weak cache consistency policy 
user level motivation important file system run user level user installing require root access 
example assume obtains new account nsf supercomputer center 
log account transparently see remote files way accessing telnet ftp rlogin nfs having ask system administrator install 
necessarily easy task unix environment current file system software installed system administrator 
example systems nfs afs allow sharing files internet require root access mount export new file partitions 
system administrator may acm transactions computer systems vol 
august 
alexandrov time due security concerns may willing install new piece software export file system resource 
user file system problems 
users install introduce additional security holes underlying operating system network protocol 
guarantee file system installed user rely functionality provided standard unmodified operating systems 
personalizing operating system catcher approach order provide global file system extend operating system handle file accesses related functions properly 
modifying behavior system calls add new functionality operating system 
approach modify system call behavior inserting user level layer catcher application operating system 
catcher user level process attaches application intercepts selected system calls issued application 
user perspective catcher provides user level layer user application processes original operating system shown 
extra layer change existing os allows control user environment modifying function parameters issuing additional service requests 
catcher operates follows 
initially connects user process tells operating system system calls intercept 
implementation runs sun solaris uses system proc interface originally developed debugging purposes faulkner gomes 
just tracing system calls change user level semantics implement global file system 
system call interest begins completes operating system stops subject process notifies catcher 
catcher calls appropriate extension function needed resumes system call 
global file system intercept open close stat system calls operate files 
intercept system call accesses remote file ensure date copy available locally 
patch system call refer local copy allow proceed 
system calls access local files allowed proceed unmodified systems calls related files intercepted 
application binaries changed approach works transparently existing executable exception programs requiring setuid 
potential concern approach performance overhead 
cost intercepting system calls significant performance analy similar functionality provided digital unix irix bsd linux 
mechanism system call tracing applications truss 
acm transactions computer systems vol 
august 
user process user process user specific os layer user specific os layer ufo personal global file system user process user process standard operating system fig 

new view operating system 
user process user specific os layer sis shows ufo introduces acceptable overhead common applications 
ufo runs fully user level user runs performance penalty user 
furthermore user run ufo selected applications impacting applications dynamically install attach detach ufo applications running 
ufo ufo installed user root assistance 
simplest way start ufo explicitly start processes control ufo csh csh grep ucsb www cs ucsb edu index html csh cd ftp schauser cheetah cs ucsb edu csh emacs papers ufo tex example new shell running ufo global file system services 
ufo automatically attaches child shell spawns grep cd emacs processes 
alternatively ufo instructed dynamically attach running process providing pid 
emacs ufo pid 
related presenting implementation details catcher section put context comparing approach alternative ways extending operating system functionality 
eager reader skip directly discussion implementation section 
introduce classification different approaches extending operating acm transactions computer systems vol 
august 
alexandrov system 
discuss relevant research projects extending operating system file system functionality detail 
approaches extending operating system considerable amount extending operating systems new functionality 
divide research main groups designing new extensible operating systems adding extensibility existing operating systems 
multiple research projects designing new extensible operating systems mentioned section 
discuss approaches extending mainstream monolithic operating systems 
classify approaches categories change operating system straightforward approach just modify operating system incorporate desired functionality 
requires access os sources privileges install new kernel 
device driver changing kernel modifications limited new device driver implements desired functionality 
root access required install device drivers 
network server clean solution minimal intrusion operating system install network server provides additional services existing standardized interface 
installing server mounting remote directories requires root capabilities 
want reiterate approaches require superuser intervention affect everybody system everybody see modifications operating system 
bug security hole newly installed software system integrity security compromised 
user level approach avoids problem 
user level plug ins time modification operating system tolerated flexible strategy add hooks operating system system calls trigger additional functions extend functionality 
approach especially appropriate os designed flexible support extensions 
user level libraries static dynamic linking applications directly access operating system library functions embedded standard libraries 
modifying binaries os kernel suffices changes libraries 
superuser privileges necessary original libraries binaries need replaced 
application specific modifications incorporating modifications library incorporate directly application avoiding operating system altogether 
acm transactions computer systems vol 
august 
ufo personal global file system table different methods extending operating system functionality examples method examples change os sprite nelson plan pike device driver afs morris nfs sandberg slic webfs vahdat network server ftp nfs alex cate user level plug ins extended os slic flexible extensible os spin bershad exokernel engler statically linked library newcastle connection prospero neuman condor tannenbaum litzkow dynamically linked library jade rao peterson ifs eggert parker application specific ftp norman intercept system calls interposition agents jones confinement goldberg ufo table ii 
different methods extending operating system functionality limitations modify needs recompile relink range perfor os root appli appli appli mance method source access cations cations cations overhead change os low device driver low network server medium user level plug ins low high statically linked library user low dynamically linked dyn 
low library linked application specific single low intercept system calls setuid high intercept system calls modern operating systems provide functionality intercepting system calls user level 
process notified process enters exits selected system calls 
original motivation functionality debugging tracing system calls mechanism alter behavior 
mechanism context mach implement interposition agents jones forms basis ufo implementation 
table lists examples approaches table ii summarizes acm transactions computer systems vol 
august 
alexandrov limitations identifies context applied 
wanted approach works existing applications need recompiling importantly requiring root access 
decided mechanism intercepting system calls 
related os extensions project closest interposition agents jones mechanism intercepting system calls 
interposition agents provide general system call tracing toolbox allows different system calls intercepted handled alternate ways ufo 
example agent applications implemented spoofing time day tracing system calls truss transparently merging contents separate directories 
interposition agents mach 
mach unix variant designed flexible extensible 
particular calls intercepted mach redirected process address space 
interposition agents run user process memory 
approaches standard unix constrained complicated implement harder access user process state outside process address space 
research project uses unix trace mechanism implementing os extension janus goldberg provides secure confined environment running untrusted applications safely intercepting selectively denying system calls 
janus implementation designed solaris 
lot current research deals designing operating systems allow easier efficient user level extension 
microkernel approach remove functionality kernel place user level servers 
reduces complexity kernel allows easier extensibility changes user level servers affect kernel 
engler propose implement operating system set untrusted application libraries 
approach kernel reduced small exokernel responsible securely exporting hardware resources library operating system 
fluke ford combines microkernel approach recursive virtual machines goldberg 
produces modular extensible operating system decomposed horizontally microkernel os vertically stackable virtual machine monitors 
approach taken vino seltzer spin bershad allow injection user written kernel extensions kernel domain 
discussion issues involved seltzer small 
slic project os extension solaris allows plug ins user kernel level 
lastly extend os functionality interposing userlevel os boundary interposition possible places 
acm transactions computer systems vol 
august 
ufo personal global file system example disco bugnion interposes virtual machine monitor layer os machine hardware 
layer allows multiple independent operating systems run concurrently single large scale shared memory multiprocessor large implementation overhead 
discuss operating system extensions specific particular application remote file transfer 
os extensions remote file systems number systems provide transparent access remote resources internet successful 
examples include nfs network file system sandberg afs andrew file system morris coda plan pike linux sprite welch nelson webfs vahdat alex cate prospero neumann jade rao peterson 
significant drawback require root access modifications existing operating system applications libraries 
ufo distinct requires modifications existing code runs entirely user level 
systems global file access run entirely user level user 
similar ufo extend local file system provide uniform transparent access heterogeneous remote file servers 
prospero neumann jade rao peterson provide access nfs afs file systems ftp servers 
prospero runs user level replacing standard statically linked libraries 
avoids changes operating system requires relinking existing binaries 
jade rao peterson uses dynamic libraries allows dynamically linked binaries run unmodified 
changing application libraries works applications especially combined dynamic linking 
drawback approach statically linked applications owned user applications circumvent standard libraries execute system call instructions directly 
global file systems run user level require extensions operating system turn requires root access 
example webfs vahdat global user level file system protocol 
run user level webfs relies os extensions provided slic implements call back mechanism user process 
webfs requires server extended set cgi scripts service requests 
similar slic os extension enables user level file systems written linux 
installing requires kernel recompilation installing new file modules 
plan pike includes ftp file system called 
acm transactions computer systems vol 
august 
alexandrov projects provide access ftp servers implementing nfs server functions ftp nfs gateway 
alex cate supports read access anonymous ftp servers ftp nfs additionally allows read write access authenticated ftp servers 
web browsers netscape internet explorer universally access global files ftp protocols 
view browsers implementing global files system 
file system application specific providing services single application browser 
ufo hand provides file system services application 

catcher implementation section discuss details implementation catcher inside ufo 
start describing high level architecture role catcher ufo 
ufo architecture ufo user level process provides file system services user level processes attaching 
attached subject process intercepts system calls services operate remote files 
application unaware existence ufo ufo help operate remote files local 
ufo implemented modules catcher ufo module 
catcher responsible intercepting system calls forwarding ufo module 
ufo module implements remote file system consists layers file services layer identifies remote files caching layer protocol layer containing different plug modules implementing actual file transfer protocols 
shows steps involved servicing remote file request 
application issues system call go directly kernel file related get intercepted catcher 
intercepted calls ufo determines system call operates remote local file possibly kernel services 
file local request proceeds unmodified 
file remote ufo creates local cached copy patches system call modifying parameters lets request proceed kernel 
request serviced kernel result returned application 
return system call may intercepted patched ufo show 
catcher implementation details solaris implementation catcher monitors user processes proc virtual file system faulkner gomes 
method monitoring programs truss available number unix platforms including digital acm transactions computer systems vol 
august 
application ufo personal global file system standard operating system catcher file services caching fig 

general architecture ufo 
ftp nfs ufo unix irix bsd linux 
system proc interface allows monitor modify individual process operating file associated user process 
particular catcher attaches subject process having process identifier pid opening proc pid file 
attached catcher uses ioctl system calls open file descriptor control process 
instruct operating system subject process variety events interest 
ufo events interest system call entry kernel system call exit kernel 
subject process stopped event interest catcher read write registers read write address space process 
catcher uses examine modify parameters result system calls open stat 
proc interface allows restart execution stopped process 
eventually subject process terminates killed catcher detects stops tracing process 
summarizes discussed functionality catcher 
conceptually ufo implements system calls intercepted catcher practice ufo service directly 
proc interface requires intercepted system calls go kernel 
possible abort system call entry kernel intercept exit form kernel ufo service call 
chose acm transactions computer systems vol 
august 
alexandrov fig 

outline catcher algorithm 
ufo order avoid reimplementing existing os functionality 
patch system calls modifying call parameters changing file system state fetching file remote server modifying result returned operating system 
example actions open system call 
entry open call may modify file name string point locally cached copy 
allowing system call continue catcher may wait ufo download file remote site 
implementing name change somewhat complicated modify user address space 
just change file name place new file name longer old 
file name segment read shared threads 
currently solve problems writing new file name unused portion application stack changing system call argument point new string 
open system call needs intercepted exit kernel 
returned result modified ufo remember returned file handle needed file closed 
file related system calls intercepted 
example track child processes intercept fork system call 
child pid open associated proc file monitor 
system allows set trapped system calls automatically inherited parent child setup needed initial process 
catcher discussion catcher mechanism allows create personalized operating system 
reinterpret requests kernel allowing individual users run private os 
user new os having modify original operating system needing root access 
current catcher intercepts system calls system allows intercept act signals hardware faults 
acm transactions computer systems vol 
august 
ufo personal global file system allows wider range extended os functionality implemented catcher mechanism 
user level approach limitations range possible extensions 
considerable amount hidden kernel state inaccessible user level 
second intercepting system calls introduces overhead 
remainder section assert limitations negligible catcher valuable flexible tool small overhead applications 
lack access internal kernel state prevents implementing certain time critical extensions modified scheduler 
wide range extensions catcher approach great implementation alternative 
sample applications encrypted compressed file systems confined execution environments running untrusted binaries goldberg virtual memory paging dahlin feeley process migration tannenbaum litzkow 
surprisingly catcher overhead proved relatively small amortized execution application 
saw significant performance drops specialized file service benchmarks ufo experience slowdown times real life applications disk intensive ones latex run moderate overhead 
believe applications catcher amortize cost intercepting systems calls page faults total running time process typical applications issue relatively system calls extensions system calls need intercepted 
potential concerns catcher mechanism execution setuid programs dealing premature demise catcher process 
practice limitations posing additional burden user 
setuid programs run identity owner executable file identity user starts 
catcher control setuid processes security policy operating system disallows user level processes attaching users processes 
practice problem programs installed setuid rlogin really require file system extensions ufo 
current implementation catcher detects subject process execute setuid program simply stops tracing process 
regular user level process catcher protect signal 
graceful way handle situation subject processes running catcher continue working remote files 
current ufo implementation subject process trapped intercepted system call stay trapped killed 
newly introduced limitation example process nfs mounted volume bound block nfs daemon remote server goes 
acm transactions computer systems vol 
august 
alexandrov issue concern portability catcher mechanism extensions built top 
fortunately unix operating systems provide core solaris proc functionality port catcher functionality 
full proc functionality available port catcher extensions albeit slightly reduced range functionality 
example current ufo implementation requires certain amount functionality catcher proc interface equivalent 
functionality includes ability intercept entry exit system calls read modify system call arguments return values read write subject process address space 
solaris proc interface provides functionality operating systems may restrictions 
important catcher needs change system call arguments file name strings ufo 
port catcher operating systems allow writing subject process able implement feature 
port basic functionality ufo restrictions 
features url naming scheme root directory require changing string arguments system calls possible implement see section 
resulting ufo somewhat convenient fully functional 
summary catcher limitations 
certainly come number applications catcher wise choice 
catcher flexible excellent implementation tool wide range applications 

ufo global file system module ufo provides read write access ftp servers read access servers 
remote file access functionality implemented ufo file system module responsible resolving remote file names transferring files caching 
naming strategies ufo supports ways specifying names remote files url regular file name implicitly containing remote host user name access mode mount points 
way specify remote file url syntax 
unfortunately applications handle url names 
handle colon url emacs considers root file system discards left 
alleviate problems support specifying remote file regular file name 
general syntax protocol user host file name protocol file transfer protocol ftp 
acm transactions computer systems vol 
august 
ufo personal global file system lastly ufo allows user specify explicit remote servers access protocols file 
example line local remote machine ftp cs ucsb edu method ftp specifies accesses relative refer root directory anonymous ftp server ftp cs ucsb edu 
user specify mount points access methods 
fact second naming scheme implemented user explicitly specify mount point method example ufo uses implicit mount point local method similarly sprite nelson implemented mount points prefix table file name searches longest matching prefix list mount points 
ufo supports symbolic links 
user create links frequently accessed remote directories 
links simplify accesses remote files quite implementation challenge require link components determine true name file 
increases complexity performance cost file name resolution ufo 
accessing remote files directories similarly file systems afs morris ufo transfers files remote file system 
ufo intercepts open system call remote file ensures local copy file exists cache redirects system call local copy 
read write system calls intercepted operate file descriptors returned open correctly access local copy cache 
close system call ufo checks file modified stores file back server store may delayed write back caching effect 
ufo uses file transfers reasons minimizes number system calls need intercepted protocols ftp support file transfers 
application requests information remote file stat lstat system call ufo services request creating local file stub redirecting system call 
file stub correct modification date size remote file contains actual data 
approach ufo reimplement stat system call download file 
application wants open file stub ufo download remote file 
similarly system call get directory entries issued remote directory ufo creates copy directory local cache puts file creating stub done seeking desired position newly created file writing single byte 
file systems created stub occupies small amount disk space independent reported file size 
acm transactions computer systems vol 
august 
alexandrov stubs 
redirects system call created skeleton directory 
caching cache consistency remote data transfers quite slow ufo implements caching remote files achieve reasonable performance 
downloading file time user opens reading ufo keeps local copies previously accessed files 
ufo reuse local copy subsequent access long date 
similarly write back caching delays writing modified file back remote server 
files primary objects cached ufo caches directory information directory contents file information size modification time permissions 
ftp module additionally caches open control connections 
establishing new connection remote server transfer expensive reuse open control connections keeping alive period time transfer completed 
cache consistency policy governs allowed local copy open delay write back modified file close 
efficiently support wide range usage patterns ufo provides adjustable consistency policy timeouts read write delay 
policy guarantees file opened seconds date changes file written back server seconds file closed 
verify local file date stale ufo checks file remote site changed validate open 
zero value 
case files opened reading stale modified files written back server immediately closed 
write timeout file seconds 
read timeout optionally specified percentage file age alex cate 
method observation older files change newer files 
older files need validated 
files individual timeouts ufo provides mechanisms user define default timeouts files files server 
allows user adjust trade performance consistency known usage patterns 
example mounting read binaries large read timeouts files change rarely 
authentication security ufo relies underlying access protocols authentication 
currently passwords required authenticated ftp servers needed anonymous ftp accesses 
ufo allows passwords stored files alternatively ufo asks password access remote server 
acm transactions computer systems vol 
august 
ufo personal global file system ufo running entirely user level access permissions owner introduce new security problems system 
potential security concern protection cached files 
ufo user distinct private cache 
ensure gain undesired access user cached files ufo creates topmost cache directory read write permissions owner 
implementation trade offs implementing ufo tried minimize amount operating system functionality reimplement 
attempted minimize number intercepted system calls order minimize execution overhead ufo introduces 
lead file caching policy 
second wanted minimize implementation effort modifying reimplementing system calls possible 
lead decision create file stubs skeleton directories stat calls 
course trade execution overhead implementation effort 
example advantage creating file stubs skeleton directories reimplement stat system calls 
disadvantages creating file stubs may high overhead 
efficiency rely support holey files local file system 
example machines tmp file system support holey files tmp ufo cache stubs large files disk space indicated size 
file systems site support holey files stub creation order magnitude slower tmp 
reasons considering implementing stat system calls completely inside version ufo improve performance 
fact partially implementing patching system call order support ufo mount points user areas root directory 
transferring files introduces known problems extremely large files cate 
small fraction file accessed lot unnecessary data may transferred 
second file fit local disk 
practice expect problems occur frequently 
exception databases applications tend access files nearly entirety baker 
furthermore ufo allows local file system file transfers reducing danger insufficient local disk space 
third problem comes decision intercept read write system calls 
approach open call blocks file transferred 
possible intercept handle read write system calls ufo 
benefit open block reads operate part file executed waiting completion transfer see alex cate 
drawback system calls intercepted 
acm transactions computer systems vol 
august 
alexandrov table iii 
run times various system calls accessing files tmp 
numbers arithmetic mean runs executing iterations 
standard os numbers microseconds remaining columns show times relative standard os means times slower 
catcher ufo ufo remote ufo remote system call standard os local file cached cache open sec 
close sec 
stat sec 
getpid sec 
write byte sec 
read byte sec 
write sec 
read sec 
intercepting read write calls incurs high overhead requires extra implementation effort 

performance measurements main goal performance analysis measure overhead introduced catcher mechanism ufo 
information necessary determine usability method operating system extension 
results microbenchmarks measure overhead intercepting individual unix system calls 
demonstrate impact overhead applications measurements set file system benchmarks set real life applications 
microbenchmarks show intercepting system calls expensive real life applications exhibit lower overhead 
tests run mhz sun ultra workstation mb main memory running solaris 
microbenchmarks microbenchmark results user perceived run times measured wall clock times open close stat read write getpid system calls 
results shown table iii 
columns show numbers normal user program catcher monitored program catcher calls ufo functions ufo program catcher ufo functionality 
case examine run times local file cached remote file remote file cached 
catcher ufo local file numbers special significance 
show cost running process catcher ufo process accesses local files require extended os functionality 
fundamental overhead introduced method extending os 
numbers remote files measure combined effect remote file system implementation acm transactions computer systems vol 
august 
ufo personal global file system caching policy efficiency underlying access protocol ftp case quality network connection 
order measure cost solaris system calls network speed nfs overhead local tmp file system 
accesses tmp fast involve disk network traffic protocol overhead 
result microbenchmarks catcher ufo overhead worst case scenario 
relative catcher ufo overhead accessing nfs files example lower 
microbenchmarks run lightly loaded workstation wall clock time just just system call 
timing done high resolution timer resolution microseconds workstation 
individual system calls fast normal system activity interrupts context switches distorts measurements 
produces small percentage outliers times larger rest measurements 
ensure include unrelated system activity measurements test run recorded measurements discarded highest 
remaining times averaged 
numbers table arithmetic mean runs 
standard deviation runs tests getpid standard deviation 
catcher numbers show cost intercepting system calls 
results obtained running benchmark program control catcher 
catcher simply intercepts open close stat system calls executed benchmark program lets continue immediately modifying 
open system call intercepted entry exit kernel close intercepted exit stat intercepted entry 
explains open incurs twice overhead close stat 
read write getpid system calls intercepted 
may expect system calls affected incur small overhead single intercepted system call process operating system takes different execution path system calls process independent intercepted 
results demonstrate read write byte blocks overhead small blocks negligible 
getpid fast substantial relative overhead sec 
total 
hand system calls trapped catcher incur factor overhead 
extra time control passed program catcher performs ioctl calls read information proc file system back 
ufo local file column shows extra overhead introduced ufo addition catcher 
benchmark program running ufo accessing local files 
files located tmp system name components 
remote files acm transactions computer systems vol 
august 
alexandrov accessed ufo introduces overhead addition catcher overhead 
extra overhead comes analysis parameters intercepted system calls bookkeeping tasks open files 
system calls file open stat ufo determines file local remote 
system call necessarily take absolute path name argument ufo responsibility determining 
determining true file name involve number stat system calls similar flavor pwd command add noticeable overhead 
addition open close stat system calls update ufo internal table open files 
remaining columns measure overhead ufo working remote files 
numbers measured ufo local file accesses remote files 
ufo remote cached tests locally cached copy remote file accessed 
note case cached uncached read write system calls operate locally cached copy file 
numbers consistent tests 
hand open stat calls uncached remote files require remote accesses overhead increases dramatically ufo uses ftp protocol retrieve file 
overhead entirely determined quality network connection ftp protocol 
measurements accessed files located uc berkeley 
uc santa barbara machine opening remote file size bytes residing uc berkeley host requires msec 
ftp 
closing remote file modifying takes msec file written back remote server 
file cached open close stat overhead smaller roughly times overhead compared local file 
due reasons additional manage cache remaining inefficiencies prototype implementation corrected versions ufo 
file system benchmarks table iv reports absolute execution times seconds file system benchmarks run local file system ufo remote ftp mounted file system caching 
local tests run tmp file system order factor overhead nfs file system provide fastest possible execution times 
ftp host machine local mbit ethernet network 
remote tests caching warm cache read write delays set infinity 
measurements represent best case scenario remote files 
remote tests caching read write delays set zero forcing open close stat system call go remote site 
tests worst case scenario accessing remote files ufo 
iostone andrew standard file system benchmarks 
chose examples applications execute lot file system calls ufo intercepts handles 
iostone benchmark park becker acm transactions computer systems vol 
august 
ufo personal global file system table iv 
run times iostone andrew file system benchmark programs ufo 
standard os numbers seconds 
remaining columns show times relative standard os means times slower 
columns show total number system calls executed application system calls intercepted ufo 
number system calls second parentheses 
system calls system calls intercepted standard ufo ufo ufo os local remote remote benchmark total calls sec 
total calls sec 
sec 
file cached cache iostone andrew copy read total andrew benchmark reports timing results resolution second 
seconds table indicate measurement second 
performs thousands file accesses opening reading writing 
large amount file opens closes ufo runs times slower local file system 
andrew benchmark howard measures stages generation software tree 
stages create directory tree copy source code tree scan files tree read files compile source code number libraries 
benchmark ufo overhead local files factor lower overhead iostone 
andrew iostone results uncached remote tests orders magnitude worse local tmp file system 
surprising network latency ftp protocol overhead quite large compared fast accesses tmp 
application programs tested ufo number larger unix applications latex spell latex html ufo ghostscript integer applications spec benchmark suite 
results table graphically shows results subset benchmarks 
file system benchmarks test run ufo ufo local files ufo remote files caching 
set benchmarks programs run frequently 
latex test measures time latex times page consisting tex files produce postscript dvi file spell checks spelling latex files latex html converts latex document html format 
compiles ufo 
ghostscript test displays page postscript document 
table shows latex spell acm transactions computer systems vol 
august 
alexandrov table run times larger unix applications 
standard os numbers seconds remaining columns show times relative standard os means times slower 
columns show total number system calls executed application system calls intercepted ufo 
number system calls second parentheses 
system calls system calls intercepted standard ufo ufo ufo os local remote remote application total calls sec 
total calls sec 
sec 
file cached cache latex spell latex html ghostscript go ksim gcc compress li ijpeg perl vortex latex html perform relatively large number system calls ufo intercepts mainly open close stat 
results ufo overheads run locally higher overheads run remotely 
remote overheads large acceptable user accessing remote files expected cost extra time 
local overheads hand incurred application running ufo functionality 
avoid unnecessary overhead user may choose run part applications ufo 
example authors achieve configuring windows environment start terminal window ufo ufo 
applications started ufo enabled terminal window access remote file system services applications terminal window ufo incur overhead 
ufo provides option user manually detach running applications need arise 
ghostscript test hand performs calls ufo intercepts writes remote server result ufo overhead low remote test 
sort overhead unnoticeable user 
tests integer applications spec benchmark suite 
chosen examples compute intensive applications perform extensive file system operations 
applications observed overhead small local remote tests 
small perceived overheads expected interactive applications text editors user acm transactions computer systems vol 
august 
overhead ufo personal global file system standard os ufo local file ufo remote cached ufo remote cache andrew latex ghostscript go vortex fig 

performance overhead benchmarks 
notice difference sec 
sec 
opening local file 
summary experimental results expected find intercepting system calls expensive remote accesses orders magnitude higher local accesses 
programs iostone benchmark table iv performs open close stat calls ufo overhead local files large ignored 
clearly programs run ufo access local files incur large overhead program utilize extended functionality 
remote files need accessed programs iostone run slow mainly due network latency access protocol overhead far outweighs catcher ufo overhead shown table iii 
case ufo proves convenient tool 
furthermore user choose run portion applications ufo setting windows environment explained 
applications need access remote files remaining processes incur overhead 
additional benefit fact ufo uses system call interposition user ufo dynamically attach running process detach 
gives user extra flexibility acm transactions computer systems vol 
august 
alexandrov user emacs split user level os layer berkeley ucsb vi simul gcc user level os layer mit user processor memory disk fig 

personalized user level os extensions accessing variety remote resources 
unavailable alternative methods user level os extension modified standard libraries 
applications latex incur overhead local files noticeable acceptable user functionality ufo required 
remote files applications incur overheads best case worst case depending kind file caching 
cases user expects working remote files slower extra functionality provided ufo worth additional overhead especially alternative manually transfer files ftp 
applications compute intensive programs text editors infrequent system calls trapped ufo may calls read write 
applications user perceived delays smaller order percent 
case running applications ufo appreciable difference 
observations draw catcher tool implementing operating system extensions require interception relatively infrequent system calls 
example extension ufo file system running real life applications 
hand method ideal extensions intercept frequently occurring system calls 
acm transactions computer systems vol 
august 
ufo personal global file system mention aware opportunities improving current catcher prototype opportunities improving ufo 
example optimizing file name check ufo determine file local remote result significant reduction running time 
example expect reduce overhead open system call microseconds 

article general way extending operating systems functionality debugging tracing facilities provided unix operating systems 
selected system calls intercepted user level augmented obtain desired functionality 
mechanism forms basis ufo file system providing transparent access remote files ftp servers 
ufo proved useful tool daily basis 
experimental results show overhead quite large intercepted system calls acceptable applications 
believe approach promising way individual users develop experiment operating system extensions done completely user level 
essentially user sees personalized version operating system extensions affect users compatible existing applications need recompiled relinked 
past operating systems research hard time carry general public 
approach researchers extensions easily available users run relying system administrator installation 
plenty avenues research 
example ideas improve performance catcher ufo 
plan implement new protocol modules ufo nfs rlogin protocols 
experimented os extensions suitable cluster workstation environments 
example developed prototype attaches process checkpoints restart time migrate processor 
similarly prototype catcher intercepts forks decides execute processes workstations 
tools crude stage seen potential benefits 
similar benefits expected paging virtual memory memory idle processors slow local disk 
combining extensions build personalized os layer provides transparent access variety remote resources cpu time memory file systems 
catcher method different users choose different personalized views operating system running different os extensions 
interesting research area protected computing 
system calls define capabilities process resources obtain acm transactions computer systems vol 
august 
alexandrov 
memory disk access cpu time 
catcher limit resources process access obtain 
approach implemented janus goldberg especially interesting current development global computing user may run untrusted binary fetched internet 
intend generalize design catcher intercept system calls signals hardware traps delivered application 
intend build catcher toolbox os courses research projects 
acknowledgments urs lzle insightful discussion article helping test early versions ufo 
dave chad yoshikawa roger faulkner arvind krishnamurthy valuable feedback 
baker hartmann kupfer ousterhout 
measurement distributed file system 
proceedings th acm symposium operating systems principles sosp pacific grove ca oct 
acm press new york ny 
bershad savage pardyak sirer fiuczynski becker chambers eggers 
extensibility safety performance spin operating system 
acm sigops oper 
syst 
rev dec 
marshall 
newcastle connection world unite 
softw 
pract 
exper 

bugnion devine rosenblum 
disco running commodity operating systems scalable multiprocessors 
proceedings th symposium operating systems principles sosp saint malo france 
acm press new york ny 
cate 
alex global file system 
proceedings usenix file system workshop ann arbor mi may 
usenix assoc berkeley ca 
dahlin wang anderson patterson 
cooperative caching remote client memory improve file system performance 
proceedings st usenix symposium operating systems design implementation monterey ca may 
usenix assoc berkeley ca 
eggert parker 
file systems user space 
proceedings usenix winter technical conference berkeley ca 
usenix assoc berkeley ca 
engler kaashoek toole 
exokernel operating system architecture application level resource management 
acm sigops oper 
syst 
rev dec 
faulkner gomes 
process file system process model unix system proceedings winter usenix conference 
usenix assoc berkeley ca 
feeley morgan karlin levy thekkath 
implementing global memory management workstation cluster 
acm sigops oper 
syst 
rev dec 

file system linux 
ftp sunsite unc edu pub linux alpha tar gz 
ford hibler lepreau back 
microkernels meet recursive virtual machines 
proceedings nd symposium operating systems design implementation osdi seattle wa oct 
acm press new york ny 
acm transactions computer systems vol 
august 
ufo personal global file system petrou anderson 
slic secure loadable interposition code 
tech 
rep csd 
computer science department university california berkeley berkeley ca 
goldberg wagner thomas brewer 
secure environment untrusted helper applications confining hacker 
proceedings usenix security symposium 
usenix assoc berkeley ca 
goldberg 
survey virtual machine research 
computer june 

ftp access user defined file system 
acm sigops oper 
syst 
rev apr 
howard kazar menees nichols satyanarayanan sidebotham west 
scale performance distributed file system 
acm trans 
comput 
syst 
feb 
jones 
interposition agents transparently interposing user code system interface 
acm sigops oper 
syst 
rev dec 
morris satyanarayanan conner howard rosenthal smith 
andrew distributed personal computing environment 
commun 
acm mar 
nelson welch ousterhout 
caching sprite network file system 
acm trans 
comput 
syst 
feb 
neumann 
prospero support integrated location independent computing 
proceedings usenix mobile location independent computing symposium 
usenix assoc berkeley ca 
norman 
ftp manual 
free software foundation cambridge ma 
ftp alpha gnu ai mit edu ftp ftp tar gz park becker 
iostone synthetic file system benchmark 
sigarch comput 
arch 
news june 
pike presotto thompson trickey 
plan bell labs 
proceedings uk unix users group 
rao peterson 
accessing files internet jade file system 
ieee trans 
softw 
eng 
june 
sandberg goldberg kleiman walsh lyon 
design sun network file system 
proceedings summer usenix conference 
usenix assoc berkeley ca 
satyanarayanan kistler kumar okasaki siegel steere 
coda highly available file system distributed workstation environment 
ieee trans 
comput 
apr 
seltzer small 
comparison os extension technologies 
proceedings usenix technical conference san diego ca jan 
usenix assoc berkeley ca 
seltzer endo small smith 
vino architecture 
tech 
rep tr 
harvard univ cambridge ma 
tannenbaum litzkow 
condor distributed processing system 
dr dobb feb 
vahdat dahlin anderson 
turning web computer 
tech 
rep computer science department university california berkeley berkeley ca 
welch 
measured performance caching sprite network file system 
comput 
syst 

received may revised january accepted march acm transactions computer systems vol 
august 
