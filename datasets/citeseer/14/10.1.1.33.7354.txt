ntree tools neural trees alois heinz christoph ntree library tools construction training evaluation neural trees 
contains improved version cart algorithm construction binary decision trees incorporate splits respect fuzzy sets 
trees regarded translated neural trees 
training ntree library implements afln algorithm 
algorithms able learn functions kind theta delta delta delta theta ir set training data ng may ir unordered set symbolic attribute values 
document mainly describes usage ntree library 
institut fur informatik universitat freiburg am geb 
freiburg germany 
mail heinz informatik uni freiburg de contents afln algorithm attributes symbolic type writing applications ntree library ntree construct ntree void ntree train void ntree store ntree ntree load void ntree print parameter ntree parameter load eval ntree eval void ntree free tset tset tset load void tset store void test parameter file parameters concerning routines parameters concerning construct parameters concerning ntree train example applications monk problems minimum function spirals problem ntree sample parameter file ntree software developed research special kind artificial neural network called lazy neural tree adaptive fuzzy logic network afln 
software document available address ftp ftp informatik uni freiburg de pub neural ntree tar gz copying software agree ntree license gives legal permission copy software distribute unmodified copies modify purpose 
protection want certain understands warranty kind ntree software 
afln algorithm presume reader familiar decision trees classification trees regression trees described 
briefly outline basic idea afln algorithm 
detailed coverage see 
training set evaluated attribute vectors dimensional regression problem real valued attributes 
binary regression tree axis parallel split questions obtained cart algorithm 
denote corresponding function ir ir 
piecewise constant axis parallel hyper rectangles ir recursive evaluation procedure pseudo stated follows 
inner node fields node dimension node split value node left child node right child 
leaf field node evaluation 
order evaluate attribute vector vector function evaluate called root node 
evaluate node vector node leaf return node evaluation vector node dimension node split value return evaluate node left child vector return evaluate node right child vector order smooth function represented hard split questions inner nodes replaced fuzzy split questions 
ir ir transition function gamma gamma jxj gamma transformed introducing new real valued positive parameter node softness radius inner node new evaluation procedure follows evaluate node vector node leaf return node evaluation vector node dimension node split value node softness radius return evaluate node left child vector vector node dimension node split value node softness radius return evaluate node right child vector transition case node split value vector node dimension node softness radius return evaluate node left child vector evaluate node right child vector ir ir smooth choose softness radii small identical smooth function mean square error new set training vectors partially differentiable respect free parameters split values softness radii leaf evaluations 
retrained applying appropriate gradient descent method 
regarded artificial neural network attribute values inputs evaluation output connection 
easily translated layer neural network 
cart algorithm provides topology initial values network afln learning algorithm optimizes parameter settings 
attributes symbolic type additional feature attributes symbolic non ordered type introduced 
symbolic attribute set possible values finite size known 
inner node regression tree split respect symbolic attribute divides set possible attribute values subsets left successor node right successor 
symbolic attribute feature space jaj number possible values 
version cart algorithm looks best split node respect jaj gamma gamma possible splits investigated jaj gamma search strategy 
calculate average evaluation training vectors attribute value 
sort respect average evaluation 

scan new sort order consider splits divide connected subsets 
complexity applying strategy order complexity looking best split ordered attribute 
complexity cart increased symbolic attributes 
regression tree modified introducing new field node set inner nodes split respect symbolic attribute 
field contains array 
jaj encodes division subsets 

set ith attribute value belongs left subset 
evaluation procedure evaluate node vector node leaf return node evaluation node splits respect ordered attribute node splits respect symbolic attribute node set vector node dimension return evaluate node left child vector return evaluate node right child vector transforming afln allow 
carry value real interval 
node set regarded fuzzy set 
evaluation procedure evaluate node vector node leaf return node evaluation node splits respect ordered attribute 
node splits respect symbolic attribute node set vector node dimension return evaluate node left child vector return evaluate node right child vector return evaluate node left child vector evaluate node right child vector components node set sets regarded free parameters incorporated afln training process 
initial values training take values interval 
writing applications ntree suppose files evaluated feature vectors training data test data 
code builds regression classification tree training data checks performance test data trains corresponding afln checks performance test data 
domain specific parameters file parameters include ntree include tree tset parameters load parameters parameters parameters load training test set training data parameters tset test data parameters construct classification regression tree tree parameters check performance tree tset parameters save tree cart train afln tree tset parameters check performance trained tree tree tset parameters save tree afln ntree distribution package contains programs construct constructs neural tree train trains neural tree constructs trains neural tree ntree print transforms neural tree human readable form tree maple transforms neural tree format maple program define evaluate plot tree different formats 
purpose maple initialized definitions ntree maple package included file ntree maple 
example parameter file appendix library ntree library consists source files ntree tset include files ntree external inter module 
routines permit construction classification regression trees data training trees adaptive fuzzy logic networks input output parameters control functionality routines collected single parameter file 
maple language system symbolic numeric mathematical calculation 
copyrighted university waterloo authors maple waterloo maple software 
information obtained url daisy uwaterloo ca ntree construct tset parameter parameters routine implements cart algorithm 
arguments 
training vectors loaded tset load 
parameters parameters loaded ntree parameter load 
return value pointer constructed tree 
functionality controlled parameters see section 
ntree void ntree train ntree ntree tset tset tset parameter parameters main routine training adaptive fuzzy logic tree 
arguments 
ntree tree trained loaded file ntree load constructed construct 
training vectors loaded tset load 
tset vectors check performance afln training epoch 
parameter file includes line test epoch true null may tset 
parameters parameters loaded ntree parameter load 
functionality controlled parameters see section 
void ntree store ntree ntree char filename save tree file format preorder line node leaf read ntree load 
arguments 
ntree tree saved 
filename name file 
ntree ntree load char filename parameter parameters load tree file written ntree store 
arguments 
filename name file 
parameters pointer parameter structure loaded ntree parameter load 
return value pointer tree 
void ntree print ntree ntree char filename parameter parameters save tree file human readable format inorder line node leaf indentation 
arguments 
ntree tree saved 
filename name file 
parameters pointer parameter structure loaded ntree parameter load 
parameter ntree parameter load char filename load parameters file 
arguments 
filename name file 
return value pointer parameters 
eval ntree eval ntree ntree vec vec calculate value tree returns attribute vector 
data type classification regression tree afln 
classification regression tree simply afln softness radii zero 
arguments 
ntree tree 
vec vector 
return value calculated value 
void ntree free ntree ntree free memory allocated building loading tree 
arguments 
ntree tree freed 
tset tset tset load char filename parameter parameters load evaluated attribute vectors file 
arguments 
filename name file 
parameters pointer parameter structure loaded ntree parameter load 
contains dimension attribute space 
return value pointer structure contains evaluated attribute vectors 
format file follows line contains evaluated attribute vector consisting digital numbers real integer attribute values digital number evaluation 
lines ignored strings don digit gamma 
void tset store char filename tset tset save set evaluated attribute vectors file format read tset load 
arguments 
filename name file 
tset pointer structure contains vectors 
void test ntree ntree tset tset parameter parameters check classification regression performance tree 
performance measured percentage correctly classified vectors mean square mean absolute error 
arguments 
ntree tree 
tset pointer structure contains vectors 
parameters pointer parameter structure loaded ntree parameter load 
parameter file parameter file contains domain specific information controls functionality construct ntree train 
parameters concerning routines dimension attribute space specified parameter file including dimension parameter default value set 
default task assumed regression problem dimensional space real valued attribute values 
attribute symbolic type include line form type parameter file 
indicates ith dimension symbolic type set possible values consists 
gamma 
dimensions count upwards 
task classification problem include line regression false case specify evaluations corresponding classes class second class smaller default values 
parameters concerning construct classification error measure construct percentage falsely classified vectors mean square error 
regression impurity measure construct mean square error samples node relation median value 
classification impurity measure gini index node median value defined corresponds gamma gamma specify parameter file integer value purity gain split multiplied delta number training vectors node split number vectors belong left side split number vectors belong right side 
bigger splits dividing set nearly equal parts preferred 
default value 
default construct performs fold cross validation 
choose cross validation factor including line cross validation performed simple cost complexity pruning cent training vectors construction maximal tree cent pruning 
include line prune false pruning doesn take place construct just constructs maximal tree training vectors 
cost complexity pruning cross validation nesting chains trees constructed 
main chain constructed learning data 
extra chains constructed part learning data estimate error trees main chain 
include true obtain information error size trees main chain true obtain information chains 
default construct constructs afln softness radii just maximally big evaluation regression classification tree returns values corresponding afln vectors training set 
include line softness radii multiplied positive real value 
set pure classification regression tree softness radii set zero obtained 
default construct cost complexity pruning chooses smallest tree minimal error 
error reduced neural adaptation afln algorithm actual version construct forced choose smaller trees 
line smallest tree error factor bigger times minimal error constructed 
small error factor produces larger trees large returns smaller trees 
default value error factor 
parameters concerning ntree train choose parameters afln regarded free parameters remain fixed 
default parameter regarded free 
include lines train radius train train set train evaluation inner node split respect ordered attribute value train radius declares softness radius train split value split value free parameter 
inner node split respect symbolic attribute value train set declares parameters encode division attribute set fuzzy subsets free 
leaf train evaluation declares evaluation free 
default ntree train applies backpropagation algorithm afln 
include algorithm quickprop parameter file applied 
faster backpropagation stable 
maximal number epochs training set including epochs training earlier mean square error decreased zero didn decrease factor epochs real integer value 
default 
set values including epoch training backpropagation algorithm calculates gradient error function respect free parameters 
step width euclidean parameter space parameters adapted epsilon parameter highly domain specific try values order get optimal results 
defaults 
step width adapted automatically heuristic 
increase step width factor mean square error decreased epochs 
decrease step width factor mean square error increased times alternated times 
include line false step width adapted 
order avoid oscillation epoch momentum term added adaptation step 
momentum term defaults times previous step 
set including alpha calculating partial derivatives respect softness radii split values softness radii appear denominator 
order avoid division zero nearly zero values set minimal value softness radii appear denominator defaults 
derivative error function respect softness radii split values zero attribute value outside softness radius node small value added order give values chance change 
value added set defaults 
algorithm calculates gradient error function 
difference backpropagation lies amount change individual free parameters 
idea assume parabolic form partial derivative error function calculate minimum quadratic estimate 
algorithm faster backpropagation stable 
give stability factor current step may exceed previous limited 
include set factor value include test epoch true afln tested training epoch 
testing done second set evaluated attribute vectors handed ntree train 
example applications section selection benchmark problems applied software 
monk problems problem second european summer school machine learning 
attribute space consists finite universe robots defined symbolic attribute values head shape square body shape square smiles nog holds balloon jacket colour fred yellow green wears tie nog classification tasks boolean expressions divide universe classes ffl problem head shape body shape jacket colour red 
problem training set correctly classified robots 
ffl problem exactly attributes value 
problem training set correctly classified robots 
ffl problem jacket colour green holds sword jacket colour blue body shape 
problem training set robots incorrectly classified 
problem number nodes number epochs cart afln table results applying afln algorithm monk problems column labeled cart contains classification performance untrained trees column labeled afln trained trees 
task problems induce training data measure performance universe 
results applying afln algorithm problems table 
afln algorithm ability change inner structure decision tree cost complexity pruning 
tree generated applying cart implementation training set monk problem 
classifies test set correctly 
close look see split node sense regarding definition classes 
vectors go left child node classified correctly vectors go right side classified falsely contribute misclassification rate 
node replaced left descendant resulting correct classifier minimal problem 
achieved pruning pruning change node leaf result correct classifier 
afln algorithm hand able achieve effect 
clear declared set parameters free trained classification tree training set constructed 
training vectors pass node directed left side resulting classifier correct 
cutting right subtree node minimal size classification tree problem achieved 
hs bs theta theta theta theta theta bs delta delta delta delta delta gf bs hs theta theta theta theta theta omega omega omega omega omega hs theta theta theta theta theta hol gf tie la hs theta theta theta theta theta bs theta theta theta theta theta delta delta delta delta delta gamma gamma gamma gamma gamma hs bs theta theta theta theta theta tree monk problem right side inner nodes encoded division attribute fuzzy subsets 
instance interpreted jacket colour red go right child value colours go left child colours 
leaf evaluations center leaf nodes 
tree trained subsets free parameters 
values changed training second set values right side inner nodes 
construction afln min function 
upper center randomly chosen training set 
lower left function resulting cart decision tree 
lower right function represented trained afln 
minimum function task learn minimum function min theta 
randomly chosen function values constructing regression tree training values testing performance 
applied fold cross validation constructing regression tree nodes 
trained epochs algorithm 
results illustrated 
mean square error original regression tree delta gamma decreased training delta gamma example demonstrates smoothing properties afln algorithm 
spirals problem problem due wieland revolving spirals representing elements classes 
task learn classes 
test training points spiral 
constructing original classification tree didn apply cross validation training vectors building original tree pruning 
softness construction afln spirals problem 
upper center training set 
lower left function resulting cart decision tree 
lower right function represented trained afln 
radii initialized zero 
trained classification tree epochs training vectors 
results illustrated 
classification performance measured criterion increased initially epochs 
hard problem cart algorithm regions attribute plane belonging class easily approximated axis parallel rectangles 
afln algorithm interpolates spirals 
ntree listing include file ntree defines interface library type definitions typedef double compt type attribute typedef double type vector evaluation typedef int true false unevaluated error typedef compt vect type unevaluated attribute vector typedef struct tset type training set evaluated vectors int number vectors int dimension number components vector vect vectors field vectors evaluations field evaluations sum sum evaluations sum squared evaluations typedef struct structure contain extra information intern 
typedef struct structure contain extra information intern 
typedef union ntree node type afln regression trees union union free list management struct tag leaf inner node deltas additional variables training int dimension dimension node split int type type dimension ordered size set type cardinal attributes ordered type compt split value compt radius softness radius attributes symbolic type compt set array encoding subsets node split union ntree child pointer successor nodes data node union union free list management struct tag leaf leaf deltas additional variables training evaluation evaluation leaf data leaf typedef struct parameter type contain parameters int regression compt compt compt alpha compt epsilon int algorithm int compt compt threshold compt eta int compt int int dimension int types compt int prune int criterion compt compt char names typedef union typedef union prototypes public routines void tree void tree char filename parameters tree vect vec void tree tset parameters void tree char filename char filename parameters char filename parameters void char filename tset void tree tset parameters char filename parameters sample parameter file order give reader example parameter file looks list parameter file monk problem see parameter file lines ignored decide values printed loading default true false set dimension feature space 
value set 
default value 
dimension default attributes ordered real type 
attributes symbolic type specify size set 
symbolic values denoted 
instance attribute takes values specify type type type type type type type specify names attributes 
name head shape name body shape name name holds name jacket name tie decide algorithm backpropagation default algorithm backprop algorithm backprop algorithm quickprop decide epochs tree trained default epochs epochs training stopped epochs epochs mean square error didn decrease default don epochs decide parameters tree shall trained default free parameters train radius train train evaluation train set parameters training process epsilon step width true false set true epsilon lowered training stability alpha momentum term minimal softness radius divisions amount added transfer function maximal factor current step may exceed previous step threshold settings concerning performance tests test epoch true test epoch false default regression tree constructed classification tree constructed specify regression false values vectors classified instance class second class testing trees criterion applied tree values regarded class values regarded class values undecided 
regression true regression false settings concerning tree construction bigger splits divide set subsets nearly equal size favoured 
default choose best split regardless size subsets choose cross validation factor cross validation fold cross validation default fold cross validation true print information main chain trees constructed cost complexity pruning 
true print information chains constructed cost complexity pruning cross validation default false false false false default cost complexity pruning chooses smallest tree minimal error 
set smallest tree chosen error bigger times minimal error default breiman friedman olshen stone 
classification regression trees 
wadsworth belmont california 
fahlman 
empirical study learning speed back propagation networks 
technical report cmu cs computer science department carnegie mellon university pittsburgh june 
heinz 
efficient implementation neural net ff fi evaluator 
technical report isbn department computer science university helsinki helsinki finland 
heinz 
efficient neural net ff fi evaluators 
morasso editors proceedings international conference artificial neural networks pages sorrento italy may 
springer verlag 
heinz 
fast bounded smooth regression lazy neural trees 
proceedings ieee international conference neural networks volume iii pages orlando florida june 
heinz 
learning generalization adaptive fuzzy logic networks 

zimmermann editor proceedings second european congress intelligent techniques soft computing volume iii pages aachen germany sept 
elite verlag der 
rumelhart hinton williams 
learning internal representations error propagation 
rumelhart mcclelland editors parallel distributed processing explorations cognition vol 
chapter 
mit press ma 
thrun bala bloedorn bratko cestnik cheng de jong dzeroski fahlman fisher hamann kaufman keller kononenko michalski mitchell reich vafaie van de wenzel zhang 
monk problems performance comparision different learning algorithms 
technical report cmu cs school computer science carnegie mellon university pittsburgh pa dec 

