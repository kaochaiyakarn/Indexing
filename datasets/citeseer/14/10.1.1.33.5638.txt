writing macros continuation passing style erik hilsdale daniel friedman computer science department indiana university bloomington indiana cs indiana edu scheme programming language standard mechanism syntactic extension little perceived expressive power 
useful transformations standard mechanism possible create powerful portable syntactic extensions writing syntax transformers continuationpassing style 
introduce style show may perform arbitrary turing complete computation expression shapes expansion process 
conclude real world technique evaluate loss clarity necessitated standard mechanism 
revised report algorithmic language scheme includes high level language defining syntactic extensions syntax rules form 
traditional syntactic extension lisp systems involves representing syntax lisp data allowing full lisp runtime system process data expansion done scheme community pattern rewriting systems concept hygiene syntactic extension tractable enforce cleaner separation expansion evaluation 
restrictions pattern language viewed inadequate complex language extension 
implementations scheme language include mechanism 
discusses computational power scheme macro system functional language considers limitations expressiveness relates technique writing macros continuation passing style serious practitioners time provides way get limitations 
syntactic extension mechanisms described revised report keywords bound syntax transformers traditional quasiquotation systems transformers pattern 
viewed functions domain codomain character sequences syntax objects 
operations allowed syntax objects matching binding pattern language construction related template language 
supported part national science foundation ccr 
means large amount functionality lisp world takes granted simply available 
apply procedures run time environment syntax objects 
create syntax objects consing lists reading external files 
syntax expander simply access run time system 
declarative nature syntax expanders difficult build syntax objects pieces normal recursive fashion 
get turing complete computation restricted system syntax transformer construct syntax objects expansion system operator newly constructed syntax object 
operator keyword syntax transformer bound new syntax object transformed 
importantly computational power write syntax expanders continuation passing style allowing ability build expressions separate pieces 
section give short standard scheme macro system syntax rules introduce limitations 
section derive continuation passing macros continuation passing functions derivation choose appropriate representation continuations 
section show uses style macros expansion inspector structural equivalence checker syntax reducer callby name lambda calculus robust implementation disjoint sums 
discuss related section section 
syntactic extension scheme keywords scheme bound syntax transformers globally define syntax form locally syntax letrec syntax forms 
specified syntax rules form 
form lists number patterns match pattern gives template construct new syntax 
example binding scheme expression define syntax syntax rules exp exp exp exp 
exp exp 
define syntax form gives global binding keyword 
syntax rules form specifies expands boolean true ff expands ff ff fi expands ff fi 
output safe expand instance expression inner subsequently expanded 
case definition keyword necessary expression bound letrec syntax form 
expression letrec syntax syntax rules exp exp exp exp 
exp exp 
alpha beta expands alpha beta exporting macro surrounding scope 
syntax form expander keyword need expand keyword 
syntax rules transformers may kinds patterns templates vectors limit consideration list patterns 
important realize patterns patterns equality 
pattern test certain expression literal test literal identifier eventually bound number 
means partially expand resulting template syntax form 
way expand portion syntax expanded code decide expand 
syntax expanders difficult primitive notion recursive call build portion output expression 
problem continuation passing style macros solve 
defining style order accumulator style macros common way processing data expansion define syntax syn reverse syntax rules syn reverse acc acc syn reverse 
acc syn reverse 
acc 
technique example generate temporary identifiers expansion letrec 
style writing tail recursive syntax expanders handle linear problems faced tree recursive problems need power technique provides 
continuation passing style key insight gives power need recurring computation done transforming shape operator resulting shape determines happens 
familiar 
happens sounds lot continuation fact key realization continuation passing style maps directly syntactic extension 
useful derive continuation passing style syntactic transformers continuation passing style ordinary programs 
definition reverse procedure accepts possibly deep list reverses list sublists define reverse lambda cond null 
list 
car snoc reverse cdr reverse car snoc reverse cdr car helper snoc defined define snoc lambda ls append ls list convert continuation passing style uses closures represent continuations 
find helpful define apply cont procedure applying continuations directly 
define apply cont lambda definition continuation passing style versions reverse snoc look define reverse cps lambda cond null 
apply cont list 
car reverse cps cdr lambda reverse cps car lambda snoc cps reverse cps cdr lambda snoc cps car define snoc cps lambda ls apply cont append ls list procedures form transform macros 
wrong turn natural way transform procedures macros assume existence macros behave lambda apply 
syntactic lambda create continuations syn cont take formal argument expression body freeze expansion body syn cont applied apply syn cont expression 
assuming macros defined write define syntax syn reverse syntax rules syn reverse apply syn cont syn reverse head 
tail syn reverse tail syn cont syn reverse head 
syn cont syn snoc syn reverse head tail syn reverse tail syn cont syn snoc head define syntax syn snoc syntax rules syn snoc 
apply syn cont 
leaving syn apply syn cont 
easier applying continuation value general case involves making value available continuation transferring control continuation 
macros way transfer control form expand way syntactic values available include values expansion 
apply syn cont defined define syntax apply syn cont syntax rules apply syn cont op arg 
value 
op arg 
value apply syn cont macro expanded splices second arguments argument expansion continues newly spliced expression 
syn cont accept extra values passed apply syn cont values available body transfer control body 
rs supports syntax think form bind helper macro expanded substitute expressions continuation formals body expand directly form 
define syntax syn cont syntax rules syn cont formal 
body val 
syntax syntax rules formal 
body val seen peculiar way regain lambda 
unfortunately doesn hygiene 
consider macro defined syntax syntax rules formal 
body rs macro system guarantees introduced formal identifiers captured body hopes general syn cont macro 
worked substitution argument naively standard macro template substitution mechanism rs macro system 
mechanism unaware intended scopes substitutes values occurrences formals body occurrence shadowed syn cont 
unfortunately worse substitute value place formal parameter contained syn cont allowed apply syn cont syn cont context syn cont context expand context syn cont context write macro express syntactic continuations 
lost 
representing continuations seen lexical closures represent syntactic continuations 
continuation passing style transformation step abstracting representation continuations avoid problems completely 
scheme write reverse cps name constructor continuation leaving anonymous procedures define reverse cps lambda cond null 
apply cont list 
car reverse cps cdr deep tail cont car reverse cps cdr shallow tail cont car define snoc cps lambda ls apply cont append ls list define deep tail cont lambda head lambda reverse cps head deep head cont define deep head cont lambda lambda snoc cps define shallow tail cont lambda head lambda snoc cps head write syn reverse syntactic extension syn cont 
represent continuation creators individual macros 
continuation free pattern variables form passed expansion continuation accepting macro 
continuation applied apply syn cont splices bound pattern variables define syntax syn reverse syntax rules syn reverse apply syn cont syn reverse head 
tail syn reverse tail syn deep tail cont head 
syn reverse head tail syn reverse tail syn shallow tail cont head define syntax syn snoc syntax rules syn snoc 
apply syn cont 
define syntax syn deep tail cont syntax rules syn deep tail cont head syn reverse head syn deep head cont define syntax syn deep head cont syntax rules syn deep head cont syn snoc define syntax syn shallow head cont syntax rules syn shallow head cont head syn snoc head dispense helper macro syn snoc completely defining continuations separately pattern matching facilities syntax rules append values 
define syntax syn deep head cont syntax rules syn deep head cont 
apply syn cont 
define syntax syn shallow head cont syntax rules syn shallow head cont head apply syn cont 
head admittedly places large burden programmer maintainer code 
akin programming assembly language macros control structure pattern selection lexical closures 
style allow effort expression fairly complex systems 
style examples continuation passing macros 
show trivial example style implementing expansion inspector 
show write expansion time structural equality tester expressions 
part tester implement beta reducer lambda calculus 
show technique write portable disjoint sum package safety considerations 
order save space aid readability take advantage fact applying nullary continuation involves simply expanding 
remainder elide creating separate continuation macro nullary continuations forgo apply syn cont macro preference direct expansion 
inspection procedure syntax expand procedure inspecting expanded expressions lisp scheme systems standard 
defined form set forms continuationpassing style pass simple continuation expands output literal datum define syntax inspect cont syntax rules inspect cont value value may syntactic continuations accept multiple values may better idea inspect cont accept 
define syntax inspect cont syntax rules inspect cont value 
values value test syn reverse 
syn reverse inspect cont values course inspector works macros helper macros written explicitly continuationpassing style 
equality testing macro check equality shapes fairly easy define success failure continuations define syntax syn shape equal syntax rules syn shape equal head tail head tail sk fk syn shape equal head head syn shape equal tail tail sk fk fk syn shape equal head tail sk fk apply syn cont fk syn shape equal head tail sk fk apply syn cont fk syn shape equal sk fk apply syn cont sk checking equality identifiers requires trick macro system 
syntax rules form allows specify number literals match exactly pattern containing literals match 
identifiers success continuation failure continuation expand expression locally binds syntax rules form literal local expander dispatches argument success failure continuation 
applying keyword bound local expander completes test 
define syntax syn eq syntax rules syn eq sk fk syntax syntax rules sk fk apply syn cont sk sk fk apply syn cont fk sk fk lambda calculi ability check identifier equality implement substitution pass simple lambda calculus abstraction application variables 
exp lambda id exp exp exp id implement substitution 
define syntax lc subst syntax rules lambda lc subst new old lambda formal body syn eq old formal apply syn cont lambda formal body lc subst temp formal body lc subst new old temp lc subst new old op arg lc subst new old op lc subst new old arg lc subst new old var syn eq old var apply syn cont new apply syn cont var define syntax lc subst syntax rules lc subst new old temp lc subst new old lc subst temp define syntax lc subst syntax rules lc subst temp apply syn cont lambda temp define syntax lc subst syntax rules lc subst new old arg lc subst new old arg lc subst rand define syntax lc subst rand syntax rules lc subst rand apply syn cont taken advantage hygiene generate fresh variable temp substitute lambda contours eventually introduced variable binding form lambda temp identifier guaranteed fresh expansion lc subst macro 
implementation substitution implement single step reducer takes continuations success continuation argument applied pending reduction nullary failure continuation expression normal form 
chosen normal order reduction strategy obtain simple rewrite included comment 
define syntax beta syntax rules lambda beta lambda formal body sk fk beta body beta lambda sk formal fk beta lambda formal body arg sk fk applicative order beta arg beta applicative sk formal body lc subst arg formal body sk lc subst arg formal body sk beta op arg sk fk beta op beta op sk arg beta arg beta arg sk op fk beta sk fk apply syn cont fk define syntax beta lambda syntax rules beta lambda sk formal apply syn cont sk lambda formal define syntax beta applicative syntax rules beta applicative sk formal body apply syn cont sk lambda formal body define syntax beta op syntax rules beta op sk arg apply syn cont sk arg define syntax beta arg syntax rules beta arg sk op apply syn cont sk op general beta reducer simply applies beta reductions 
define syntax beta syntax rules beta exp beta exp beta apply syn cont exp define syntax beta syntax rules beta cont beta slight 
final continuation inspect cont quotes result temp introduced variable binding form 
literal symbol rs require literal symbols fresh 
feel main purpose macros generate programs data allowed inconsistency 
inspect cont view reductions see 
beta lambda lambda inspect cont values facility may taken proof scheme macros constrained capable performing arbitrary computations 
disjoint sums serious problem writing scheme macro packages straightforward fashion handling non local constraints 
example naive implementation sum form kind thing implement ml style products datatypes 
scheme implementation sums include definition form define sum sum type variant 
form dispatch variant particular sum sum case sum type expression variant expression 
example define sum direction north south east west define move point lambda point dir car point cdr point sum case direction dir north cons south cons east cons west cons define move point north lambda point move point point north provide package recourse continuation passing style simple macros define syntax define sum syntax rules define sum name variant 
define variant cons variant define syntax sum case syntax rules sum case name variant name exp 
cond eqv 
variant name exp solution lacks security 
expect sum case expression expecting variant sum syntactically valid variants listed duplicate entries variants covered 
means need transfer information expansion define sum form expansion sum case form information seen expansion process 
transfer information define sum define macro continuationpassing style simply passes defined variant names continuation 
define syntax define sum syntax rules define sum name variant 
define variant cons variant 
define syntax name syntax rules apply syn cont variant sum case macro generated macro name get variant names wish match 
sum case form coverage cases duplication simply expands binds object cond performs run time dispatch 
expands non expression 
define syntax sum case syntax rules sum case name variant name exp 
name sum case name variant name exp 
define syntax sum case syntax rules sum case name variant name exp 
real variants check coverage variant name 
real variants cond eqv 
variant name exp 
syn error sum case name variant name exp 
code check coverage uses simple helpers syn member 
syn remove 
define syntax check coverage syntax rules check coverage sk fk apply syn cont sk check coverage head tail 
xs sk fk syn member 
head xs syn remove head xs check coverage tail 
sk fk fk check coverage xs sk fk apply syn cont fk define syntax check coverage syntax rules check coverage tail 
sk fk check coverage tail 
sk fk define syntax syn member 
syntax rules syn member 
sk fk apply syn cont fk syn member 

sk fk syn equal 
sk syn member 

sk fk define syntax syn remove syntax rules syn remove apply syn cont syn remove 
syn remove 
syn remove define syntax syn remove syntax rules syn remove syn equal 
apply syn cont apply syn cont need expand want signal failure 
cause failure expansion time 
expand lambda elegant define keyword patterns 
define syntax syn error syntax rules check coverage completely expansion time allowing earlier detection coverage errors 
related attempts expanding generality expressiveness special forms 
typically approached problem removal unnecessary features redesign 
kent pitman recognized macros need 
result macros emerged central focus research 
eugene kohlbecker recognized quasiquotation ties run time system unnecessary express macros 
addition pioneering hygiene freed macro writers thinking inadvertent variable capture 
revised report algorithmic language scheme extended kohlbecker model writing macros 
dybvig friedman haynes took alternate route giving macro writer control function particular expansion 
expansion passing style expected quasiquotation model macros 
notion expanders corresponds expansion continuation continuation control run time expansion machinery access run time 
model expansion violates central premise symbolic character 
paul graham book lisp chapter continuation passing macros 
macros specifically designed give lisp user expressiveness call current continuation 
confused notion writing macros continuationpassing style 
powerful technique writing programs functional language happens macro specification language scheme 
technique derived directly continuation passing style writing procedures gives control syntax expansion direct style macro definitions allow 
control show computational power scheme macro system implementing beta reducer lambda calculus deal non local constraints fairly simple pair macros intended implement sum package 
power came great cost clarity expressiveness 
continuation passing style necessary syntax rules lacks control mechanisms apart pattern matching 
due hygiene continuations represented convenient form represented sort records description behavior separated loci creation 
thing exercise validate decision scheme implementors provide lowerlevel macro systems extensions syntax rules system 
consensus shape direct system writing macros continuationpassing style powerful benefit schemes adhere revised report portable way creating complex scheme extensions 
gratefully acknowledge jonathan sobel kevin critical comments enthusiasm earlier drafts 
addition grateful mitch wand spontaneous encouragement 
kent dybvig 
scheme programming language 
prentice hall second edition 
kent dybvig daniel friedman christopher haynes 
expansion passing style general macro mechanism 
lisp symbolic computation june 
paul graham 
lisp 
prentice hall 
richard kelsey william clinger jonathan rees editors 
revised report algorithmic language scheme 
acm sigplan notices september 
eugene kohlbecker 
syntactic extensions programming language lisp 
indiana university 
eugene kohlbecker mitchell wand 
macro deriving syntactic transformations specifications 
proceedings acm symposium principles programming languages page 
acm press 
kent pitman 
special forms lisp 
acm conference lisp functional programming stanford california pages stanford ca august 
acm press 
