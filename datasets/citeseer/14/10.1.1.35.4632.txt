graphical interval logic specifying concurrent systems dillon kutty moser melliar smith ramakrishna departments computer science electrical computer engineering university california santa barbara describes graphical interval logic foundation toolset supporting formal specification verification concurrent software systems 
experience shown software engineers find standard temporal logics difficult understand 
objective enable software engineers specify reason temporal properties concurrent systems easily providing logic intuitive graphical representation tools support 
illustrate graphical logic provides specifications elevator system proves properties specifications 
describes toolset implementation 
great challenges facing today software engineers development correct programs real applications 
advances hardware reliability fault tolerance technology assure extremely low hardware failure rates devices 
unfortunately technologies digital hardware design software engineering matched advance 
computers critical applications primarily limited reliability system designs implementations 
critical real applications involve concurrency increases difficulty system development validation 
modern methods structured programming quite research partially supported nsf ccr cooperation darpa 
early version th inter 
conf 
software engineering may institution engineers australia ieee computer society association computing machinery institution radio electronic engineers australia australian computer society 
effective sequential programs notoriously inadequate concurrent ones 
nondeterminism inherent applications involve concurrency reactive character applications hard test 
problems need explore large spaces possible executions grow exponentially number independent threads control 
formal methods specifying verifying systems principle offer greater assurance correctness informal design code checks testing 
formal verification methods demonstrate high level design meets formally specified correctness requirements reducing risk faulty designs basis system development 
formal specifications valuable defining interfaces independently developed software modules establishing software interface standards 
provide succinct unambiguous statement system requirements formal specifications potentially analyzed consistency particularly difficult important problem concurrent systems 
formal specifications selection test data suggest behaviors tested determine execution test case correct erroneous 
system developers formal specifications system lifecycle guide development maintenance enhancement 
practice system developers seldom significant formal specification verification methods 
believe due large part reliance methods mathematical formalisms difficult understand 
formal specification analysis methods accessible system designers software engineers development real world systems 
users able express properties systems wish reason naturally possible confirm mechanically specifications designs testing criteria sample executions required properties 
temporal logics suited specifying temporal properties concurrent systems 
experience shown specifications moderate sized systems complex readily understood 
complexity stems chiefly need establish temporal context properties bounded liveness invariance hold 
interval logics address problem defining temporal intervals represent contexts 
example express requirement process releases lock database signal intends enter database obtaining new lock interval represent activity system time process releases lock acquires new process required signal intension restricted context represented interval bounded liveness 
stylized pictures show complex timing relationships dependencies clearly linear textual representations information 
diagrams correspond closely common conceptualizations linear text 
software engineers draw timing diagrams denote signal levels hardware designs describing reasoning properties systems 
logicians fluent temporal logic find timing diagrams helpful explain meanings temporal logic formulas motivate lines reasoning see example 
timing diagrams lack formal semantics rigorous analysis system properties 
pictorial documentation ad hoc liable ambiguous interpretation 
describes visual temporal logic formulas resemble informal timing diagrams familiar designers hardware systems software engineers 
graphical interval logic gil formal model theoretic semantics expressive propositional temporal logic 
provides intuitive natural visual notation express system specifications sacrificing benefits formal notation 
visual editor allows gil specifications easily constructed stored retrieved files 
editor provides visual interface proof checker model generator permit verification temporal inferences 
provides overview gil section 
presents sample specifications elevator system section shows section designer uses specifications reason properties system 
section describes gil toolset section provides high level overview implementation 
related discussed section section 
appendices provide model theoretic semantics logic details proofs section 
graphical interval logic reasoning temporal properties exhibited concurrent system computation convenient regard system passing sequence states 
model nonterminating computation state sequence infinite 
terminating computation modeled infinite state sequence repeating stuttering final state 
permits concurrent system identified set infinite state sequences represent potential computations 
gil specifications system describe properties legal state sequences 
specifications hold state infinite state sequence represents computation system 
adopt total order model computation partial order model advantages representing causality concurrent systems total orders readily abstracted meaningful intervals represented pictorially appropriately high level 
gil formula evaluated state infinite sequence states 
infinite state sequences provide contexts formulas evaluated 
formula holds state context describes property state context infinite tail sequence begins state extends context 
reflexive interpretation includes allows semantics insensitive finite stuttering 
facilitates hierarchical abstraction refinement reasoning concurrency 
intervals permit specification contexts properties hold 
denote interval left closed right open line segment interval shows individual states context points line segment horizontal dimension showing progression context time progresses left right 
suggested representation interval initial point state 
contexts infinite regard interval having final point 
interval formulas heart graphical interval logic 
basic interval formula asserts formula holds state designated context interval 
derived operators possible assert formula holds point context arbitrary point context 
gil provides usual temporal eventually henceforth operators 
logic provides search primitives specifying intervals 
ffl search target formula represented ffl search right context represented search target formula locates point target holds 
dot represents point search starts 
search fails target hold point inclusive context 
search context permits specification tail intervals 
viewed locating right context fails 
searches composed sequentially successive search starting point located previous search 
example locates point holds point locates point holds 
allow shorthand notation target search state formula involve temporal operators 
shorthand produces compact formulas extensively examples 
search equivalent provided holds point search fails fails 
tail search appears search search pattern 
extent interval specified means pair search patterns designate searches needed locate left right ends interval 
searches point 
draw beneath start points horizontally aligned 
interval determined searches drawn directly beneath searches left horizontally aligned point located search pattern right horizontally aligned point located second search pattern 
example interval starts point located search left extends include point located search right 
diagram represents interval starts point holds ends just prior point holds 
interval constructed search fails interval empty meaning point specified search pattern precede specified second search pattern 
result examples slightly general sequence searches drawn line 
easily converted general examples drawing primitive search new line 
illustrates conventions simplify representation different types intervals occur frequently specifications concurrent systems 
abbreviation single search specifies extent interval permitted search interval left prefix search right 
interval example begins point holds extends include point holds 
interval constructed hold point hold point point holds holds point located search second example special case target search true 
search true succeeds immediately locating point search begins 
interval example begins point specification evaluated extends point exclusive holds 
interval constructed hold point holds point 
intervals specify finite prefixes larger contexts 
triangle third example called point operator 
illustrated example point operator appears directly point located final search sequence searches constructs tail interval starts point located 
point operator locate point context point located assert property holds point 
point located searches fails 
final example shows interval line represents full context 
assert formula holds initial point interval drawn left justified left delimiter 
example asserts holds point designated interval 
formula holds vacuously point interval constructed 
holds point holds precede point holds holds default 
right brace helps visually delimit formula 
subformulas appear interval formula formula may general graphical interval logic formulas 
gil provides usual logical operators conjunction disjunction implication true examples derived intervals left column definitions right column 
equivalence negation 
formulas composed subformulas contain intervals drawn vertical layout 
vertical layout operands binary operator left justified operand second operator formula negated drawn left justified negation sign 
conjunction default vertical layout operator omitted example 
layout precedence rules determine grouping operations 
gil formulas obey variation landin offside rule requires token formula lie lower right quadrant determined upper left corner smallest rectangle contains token 
token obey rule called offside token terminates parse formula 
precedence operators high low negation conjunction disjunction implication equivalence 
binary operators associate left right 
right braces delimit interval formulas permit explicit grouping operations 
weak operator propositional temporal logic ptl expressed gil follows 
formula asserts holds point hold hold point located 
case holds points 
words holds holds usual semantics gil provides special syntax expressing invariants eventualities 
assert formula holds point interval formula drawn indented directly interval 
assert formula holds point interval formula drawn left justified directly diamond drawn interval 
shows conventions definitions 
definition top right invariant notation top left understood follows 
false hold point context point formula holds precisely search fails precisely holds points 
definition consistent usual temporal identity false gil formula formula defines eventuality notation holds precisely search succeeds precisely holds point 
false false representation invariants top left eventualities bottom left definitions right column 
noted interval formula holds vacuously search performed locating ends interval fails interval empty 
interval formula implicitly predicated locating search targets locating left interval locating right 
reason refer search interval operators described weak operators 
gil provides strong versions operators useful specifications expressing negations interval formulas 
strong search denoted double arrowhead asserts search succeeds prior weak search fails 
strong interval denoted double line asserts point located search interval left precedes located search right search fails 
instance holds default search fails 
search succeeds formula requires subsequent searches succeed interval empty hold point located second search holds state interval 
appendix gives formal definitions strong intervals strong searches 
dual interval formula obtained changing senses strong weak weak strong interval modality searches ends interval 
dual relationship implies negation moved interval formula changing senses interval searches 
instance negation equivalent tail interval constructed point operator affected sense interval modality 
negation moved point formula changing senses searches 
negation example equivalent example specification gil specification elevator system illustrate ideas previous section 
example includes specifications basic safety liveness requirements complex fairness requirements 
simplicity consider elevator floors 
specification state predicates 
predicate true elevator floor false 
predicate models physical switch setting elevator leaves floor determines direction travel true false 
predicate open true doors elevator open floor req true outstanding request service floor elevator second floor indicates going arrived 
specifications read top bottom left right 
convention specification context line represents legal execution system 
specification expresses initial requirements remaining specifications describe system invariants 
associate labels shown bold specifications purposes 
init 
elevator begins operation floor doors closed requests service 
req req req open open open 
elevator different floors simultaneously 

elevator goes departs floor arriving second floor visiting floors 
invariant formula predicated locating point elevator just left floor 
specification asserts elevator going point reaches second floor floors 
strong search requires elevator eventually arrives second floor strong interval requires arrive immediately leaving floor takes time 

elevator goes departs second floor precisely goes directly third floor 

elevator goes departs second floor precisely goes directly floor 

elevator goes departs third floor arriving second floor visiting floors 

doors open floor elevator floor 
open open 
elevator departs floor doors floor closed 
open 
doors open floor response request service floor 
req open req 
request service floor canceled floor serviced doors open 
req req open 
doors remain open indefinitely requests service current floor canceled close 
open open req 
elevator arrives second floor floor true remains true elevator departs second floor 

elevator arrives second floor third floor false remains false elevator departs second floor 

elevator going arrives second floor continues going departs second floor precisely requires service third floor time elevator departs 
req 
elevator going arrives second floor continues going departs second floor precisely requires service floor requires service third floor time elevator departs 
req req require elevator starts traveling direction changes directions requires service floor direction 
disjunction permits require floor act home floor elevator return idle 

passenger requests service floor time elevator reaches floor elevator opens doors departing floor 
req open 
passenger needs service floor elevator floor needs service floor elevator opens doors departing floor 
req req req open remaining specifications denote floors 
elevator floor passenger requires service different floor doors open current floor elevator departs floor opening doors 
req req open open 
elevator departs floor opening doors passenger requires service floor doors closed needs service floor 
req open req req open specifications ensure elevator progress services floors timely fashion 
passenger requests service floor time elevator arrives appropriate specification guarantees elevator stops floor traveling floors 
similarly specifications ensure elevator services request elevator floor needing service waiting service floor 
passenger requires elevator floor appropriate specification ensures current floor serviced elevator departs floor servicing additional requests service current floor may interim 
specifications prevent elevator sitting floor floors require service 
specifications show graphical representation intervals facilitates representation contexts properties hold 
nested operations typically required achieve effect ptl 
example expressed ptl follows 
horizontal alignment help visually understanding gil specifications 
instance antecedent invariant holds alignment search arrow antecedent provides visual reminder holds point search commences 
search succeeds locates point just false 
holds point evident positioning predicate 
similarly holds strict point hold point evident positioning strong search corresponding strong interval 
graphical proofs system properties important benefit formal specifications analyzed potential consequences 
analysis demonstrate specification correctly expresses higher level system requirements help designer learn system development 
analysis reveals specification admits computations violate requisite properties indicates specification incomplete error 
hand desired properties proved specification designer gains confidence specification provides complete accurate description system built 
examples properties required elevator system 
requirement safety properties designer wish establish 
second expresses minimal fairness requirement 
safe 
elevator floor doors open 
open service 
elevator eventually responds request service 
req open space permit complete account proof service give part proof body 
remaining proof appears appendix form intermediate lemmas annotated proof trees 
specifications system express temporal constraints legal computations 
means system satisfies requirement conjunction specifications implies equivalently implication valid 
theory suffices check validity inference gil proof checker show requirement met 
practice theorem proving requires human assistance computationally feasible 
designer provides assistance proof method breaking complex proof inferences small gil proof checker validate 
major advantage visual logic gil pictures implications representing inferences proof requirement show temporal flow argument 
graphical representation timeline allows align appropriate points picture 
alignment helps reader see points invariants instantiated intervals points aligned establish bounded liveness invariance conditions relationships different points intervals 
visual cues extremely helpful constructing proofs discovering potential 
syntactic sugar semantic content proofs investigating technique permit designer alignment specify orderings points specification 
alignment ordering points timeline uses 
instance gil toolset provides model generation facility producing counterexample case inference invalid 
counterexample displayed sequence states timing diagram 
aligning states implication appropriately counterexample help illustrate fallacy inference 
proof safe uses alignment highlight underlying correctness argument 
annotations alongside picture show specifications proof 
shown annotations safe proved ffl init asserts doors open floor system starts ffl asserts elevator floor doors open floor ffl asserts doors closed time elevator departs floor aligning invariant point located search open highlights fact invariant evaluated point guarantees holds continuously arbitrary point open true open false 
init safe open open open open open proof safe 
proof service complex accomplished single step 
shows step proof 
shown annotations alongside final deduction specifications intermediate result arrive established independently step proof 
reasoning illustrated picture understood follows 
req holds point computation false point ensures invariant service holds point 
highlight reasoning align invariants service align points open asserted hold 
remaining premises establish service case req holds continuously point computation 
arrive deduce point 
point purposely positioned span search arrow remind reader interested case true req false 
premises represent case split 
invariant establishes invariant service case req req false point 
invariant establishes service case req req true point holds 
invariant instantiated point establishes required invariant case req req true point point false 
shows complex proof split manageable steps case analysis 
arrive service req req open req req req req open req req open open req open req open final deduction proof service safe arrive arrive arrive req req open open req req req final deduction proof arrive represents step proof arrive style previous example safe establish required invariant req false point 
remaining premises required req holds continuously point computation 
represents progress requirement needed ensure elevator remain transit indefinitely eventually arrives floor 
permits proof reduced cases represented arrive arrive assert respectively elevator eventually arrives floor floor eventually arrives floor floor requirement proved directly specifications init 
temporal flow argument readily apparent proof broken steps final step verification deduction 
premises follow trivially specifications init 
proofs arrive arrive required complete proof service high level strategy proofs show specifications ensure elevator remain floor indefinitely needed different floor 
departure results guarantees elevator eventually arrives second floor leaves ensure arrive 
similarly departure results imply arrive 
proof arrive arrive departure results specifications show elevator traveling arrives second floor eventually arrives floor 
arrive follows easily departure results specifications 
arrive departure results specifications show elevator eventually arrives floor traveling reaches second 
proofs arrive arrive parallel arrive arrive 
departure results established straightforward tedious case analysis 
details proofs appear appendix graphical interval logic toolset built prototype toolset demonstrate proof concept permit experiments logic 
prototype includes visual editor allows specifications easily constructed stored retrieved files proof checker mechanically checks validity final deduction proof 
user interface 
temporal inferences model generator exhibits state sequences formulas hold 
section provides brief overview gil toolset 
shows appearance interface gil editor 
formulas edited canvas comprises main region display 
canvas contains template creating new specification 
template consists outer context interval box automatically positioned start interval represents formula defined 
designer uses mouse editing select formulas canvas editing operations box selected indicated shading example 
scroll bars permit canvas scrolled viewing large formulas 
buttons panel lower left side display correspond gil primitives 
text button allows box replaced state predicate 
remaining buttons lower left panel specify gil operators apply appropriate formulas 
buttons corresponding temporal operators interval eventuality invariant point operators 
buttons correspond propositional operators disjunction conjunction negation implication equivalence buttons upper left panel provide language independent editing operations 
commands override default layout formulas commands storing retrieving formulas edit file menus 
proof checker invoked models displayed commands provided misc pull menu models displayed graphically accompanying window shown 
briefly build formula designer selecting new button produces template shown 
buttons automatically indent box context line expand implication 
produces template invariant implication 
selects box expand default designer may override default selection time mouse 
selecting second box button converts consequent point formula 
requirement designer uses mouse position single search arrow produces point symbol box represent search target shown 
noted section eventuality invariant point operators derived interval operator 
correspond common conceptualizations distinguished graphical syntax visualization purposes 
new button current implementation automatically generate right parenthesis 
rectified version 
designer continue fashion produce template required structure 
interval template created expanding box appropriate interval template mouse position interval search arrow 
button produces weak search arrows weak intervals default designer clicks mouse appropriate search arrow interval obtain strong counterparts 
convert template designer selects pending boxes turn clicks text button types state predicates 
addition editing operations illustrated provides capabilities cutting pasting formulas resizing intervals search arrows repositioning invariants eventualities 
formula fit space indicates error highlights oversized formula 
designer correct error resizing contexts searches repositioning formulas 
editor automatically affected sub formulas scale 
interfaces gil proof checker model generator allowing designer entirely graphical formula 
functions access tools components provided misc pull menu labels check proof determines formula canvas follows premises designated designer prove checks formula canvas validity construct models determines formula canvas satisfiable 
check proof keeps track structure proof checks circular reasoning 
verified requirement need designer modifies premises directly indirectly proof designer wishes modify proof structure 
situations proof fails formula proved valid counterexample displayed separate window 
alternatively generate models permits model infinite state sequence satisfies formula canvas displayed 
req open req open req open req generated safe omitted proof arrive shown 
example verify safe follows specifications elevator system designer create requirement safe created saved earlier session load file 
designer invoke check proof construction proof safe verified previously determine proof date learn premises proof 
current proof exists designer opt see proof implication automatically constructed validate inference 
new proof attempted prompts designer premises proof 
case designer designate init premises construct proof similar shown check valid 
designer prove safe directly invoking check proof building implication representing inference invoking prove determine implication valid 
attempt verify requirement fails designer request see counterexample 
consider example proof arrive shown 
designer overlooks premise safe attempts prove arrive follows premises generates counterexample shown 
model consists infinite sequence states state predicates having values shown rectangles shaded state infinitely repeated 
absence state predicate indicates predicate value 
displays timing diagrams beneath state sequence aid visualization 
designer invoke construct models directly generate model satisfies formula canvas 
implementation toolset shows organization gil tools 
rounded rectangles depict tool components functions square rectangles depict data structures manipulated tools 
designer interacts tools mouse driven interface provided 
described helps designer create new graphical formulas retrieve modify existing ones 
stores formulas unix files syntax trees sufficient representational information recreate layout specified designer creating 
provides interface proof checker model generator intermediate representation formula semantic tableau 
procedure constructs tableau requires syntax trees productions reflect semantics merely representational variations formula 
proof checker model generator communicate results back displays designer 
tools run window system written common lisp garnet graphics toolkit 
syntax directed editor visual language attribute grammar specifies picture represented annotated syntax tree attributes provide information relating layout 
attribute grammar implementation resembles picture layout grammar inherited synthesized attributes 
similar regard grammar specifications 
node syntax tree representation gil formula corresponds fits rectangular box 
illustrated placing rectangular boxes main syntactic units sample gil formula 
attributes associated nodes syntax tree specify dimensions ordinates corresponding boxes 
attributes satisfy certain constraints picture represent legal gil formula 
example constraints require subformulas conjunction start point invariant indented gil editor model generator representation level syntax trees semantic level syntax trees tableau procedure proof checker semantic tableau gil tools 
structure sample gil formula 
interval modifies 
attribute relationships specified defining certain attributes functions attributes syntax tree 
value attribute changes instance result editing operation values attributes may need re computed 
implementation constraint maintenance system garnet maintaining relationships attributes 
adds node syntax tree initializes attributes node constraints describe attribute dependencies 
garnet maintains constraints lazily re computing value attribute value required evaluation attributes current value stale 
method results reasonably efficient implementation 
detailed description design appears 
semantics gil formally defined translation textual logic minimal set modal operators model theoretic semantics 
see appendix 
textual representation facilitates definitions semantics decision procedure 
tableau procedure operates semantic level syntax tree syntax representation textual formula 
semantic level syntax trees internal form tools manipulate system designer inspect directly alter 
translation gil formula semantic level syntax tree carried traversing syntax tree graphical formula ignoring nodes productions semantic significance converting derived operators equivalent interval operators 
gil proof checker decision procedure propositional form textual logic 
decision procedure reduces formula equivalent buchi automaton accepting runs precisely satisfying models formula checks emptiness language resulting automaton 
details automaton construction shows complexity construction formula size depth interval nesting 
automata theoretic method refined traditional tableau procedure lower average case time space requirements 
determine formula valid proof checker negates formula applies tableau construction produce semantic tableau encodes buchi automaton negated formula 
checks accepting runs 
original formula valid precisely language automaton empty 
model generator invoked language automaton determined nonempty 
model generator extracts accepting run automaton extracted run small sense sum lengths initial section infinitely repeating section minimized 
related graphical representations computer systems common software engineering practice lacked rigorous formal basis tended illustrative documentary integral part software development process 
notable exceptions include statechart visual formalism harel pictorial version milner ccs called automata manna pnueli 
environments supporting specification verification concurrent systems built statecharts 
languages oriented depiction states state transitions gil focuses showing evolution properties time 
timing diagrams graphical notation expressing precedence causality relationships events computation 
gil timing diagrams created graphical editor checked validity 
semantics timing diagrams defined translation subset temporal logic decided efficiently 
allen logic expressing temporal relationships intervals time foundation temporal reasoning system 
logic textual graphical representations show relationships intervals clearly 
moszkowski interval temporal logic provides interval chop operator informally cg true context exists point partitions context prefix subcontext satisfying suffix subcontext satisfying intuitive semantics chop appealing decision problem formulas chop non elementary depth nested alternations chop negation 
contrast intervals gil operational semantics increase complexity decision problem severely 
gil express stronger version chop suffices expressing properties interest systems considered 
gil closest interval logic il largely inspired 
presentational semantic differences logics discuss briefly 
il gil provide explicit construction intervals search operations 
differ way construct intervals composition searches 
il search restricts context intervals obtained nesting searches yielding increasingly narrower contexts 
gil start interval located independently means sequential composition searches 
searches il intervals states formulas hold gil 
loss gain expressiveness approach state semantics gil easier define understand 
searching intervals requires event intervals representing positive transitions formulas operators indicate intervals located searching restrict context 
il permits searches past 
allowing unrestricted searches past decision procedure gil non elementary 
major difference il presence past searches affect complexity decision procedure 
plaisted demonstrated decision procedure il obtained translation regular expression language non elementary decision problem 
pspace completeness il established give translation il elementary fragment non elementary logic 
reduction tedious unnatural points need simpler semantics retains advantages able reason intervals 
experiment graphical representation il specification alternating bit protocol demonstrated visual representation results intuitive natural specifications 
semantics logic amenable il clean graphical representation 
described visual logic specifying concurrent software systems aids formal reasoning temporal properties systems 
experiments logic produced graphical specifications sliding window protocol readers writers database system protocol commit transactions shared database fair mutual exclusion algorithm addition elevator system 
prototype toolset supporting analysis gil specifications developed 
current research addressing issues relating display gil formulas specification temporal properties 
particular experimenting vertical spacing scaling size operator symbols improve visual appearance complex formulas structure visually evident 
investigating issues relating alignment formulas reflect known constraints partial ordering points 
extension allows designer specify constraints ordering points specification 
heuristics recognizing search patterns commonly occur specifications impose ordering points specifications investigated 
cases aid designer aligning points accordingly 
methods counterexample points graphical formulas constitute invalid proof explored 
assist designer revising correcting proof specifications 
gil general certainly admits formulas lack immediate visualization sample specifications section 
example semantics searching formula nested intervals subtle difficult visualize search represented graphically 
need searches specifications concurrent systems considered 
experiments indicate temporal properties interest concurrent systems specified natural visually appealing manner derived operators introduced 
going research attempting identify syntactic restrictions permit inferences checked efficiently allow natural specifications concurrent systems 
real time extension gil provides primitives bounding duration intervals 
modified gil proof checker validate deductions extended logic currently experimenting 
investigating integration gil decision procedure automated reasoning system provides decision procedures useful theories linear inequalities presburger arithmetic provides better support management proofs 
gil toolset prototype 
developed demonstrate proof concept facilitate experiments logic graphical representation 
logic display formulas evolved experience tools 
expect process experimentation revision continue refine current toolset working environment specification validation design concurrent software systems 
robust user friendly environment permit empirical studies needed determine software designers find visual logic gil easier textual logic 

propositional temporal interval logic pspace complete 
proc 
th inter 
conf 
automated deduction pp 
argonne il may 
lncs springer verlag 
barringer kuiper pnueli 
may compose temporal logic specifications 
proc 
th acm symp 
theory computing pp 
washington apr 
dillon kutty melliar smith moser ramakrishna 
visual specifications temporal reasoning 
submitted may 
dillon kutty moser melliar smith ramakrishna 
graphical specifications concurrent software systems 
proc 
th ieee inter 
conf 
software engineering pp 
melbourne may 

attribute specifications graphical interface specifications 
ritter ed information processing pp 

ifip elsevier science publishers north holland 
gabbay 
declarative past imperative 
proc 
colloq 
temporal logic specification pp 

lncs springer verlag 
smolka 
integrated environments formally founded design simulation systems 
ieee trans 
software engineering june 
kimura 
parsing dimensional languages 
proc 
ieee th inter 
computer software applications conf pp 
chicago oct 
golin reiss 
specification visual language syntax 
proc 
ieee 
visual languages pp 
rome oct 
halpern manna moszkowski 
hardware semantics temporal intervals 
proc 
th inter 
conf 
automata languages programming pp 
barcelona 
halpern shoham 
propositional modal logic time intervals 
acm oct 
harel 
statecharts visual formalism complex systems 
science computer programming june 
harel naamad pnueli sherman trakhtenbrot 
statemate working environment development complex reactive systems 
ieee trans 
software engineering apr 

temporal reasoning system 
tech 
rep dept computer science university rochester ny nov 
revised march 
kutty 
tool interactive generation graphical interval logic formulas 
tech 
rep dept electrical computer engineering university california santa barbara mar 
kutty ramakrishna dillon moser melliar smith 
specification communication protocol graphical interval logic 
proc 
iee inter 
conf 
information engineering pp 
singapore dec 
kutty ramakrishna moser dillon melliar smith 
graphical interval logic verifying concurrent systems 
proc 
th conf 
computer aided verification pp 
greece july 
lncs springer verlag 
lamport 
temporal logic 
proc 
ifip congress pp 
paris 
lamport 
temporal logic actions 
tech 
rep dec systems research center palo alto ca apr 
landin 
programming languages 
communications acm mar 
manna pnueli 
verification concurrent programs temporal framework 
boyer moore eds correctness problem computer science pp 

academic press 
manna pnueli 
specification verification concurrent programs automata 
proc 
conf 
temporal logic specification pp 
england apr 
lncs springer verlag 
melliar smith 
graphical representation interval logic 
proc 
inter 
conf 
concurrency pp 
hamburg frg oct 
lncs springer verlag 
myers guise dannenberg vander zanden marchal 
garnet comprehensive support graphical highly interactive user interfaces 
ieee computer nov 
plaisted 
low level language obtaining decision procedures classes temporal logics 
schwartz ed interval logic higher level temporal reasoning pp 

nasa contractor report sept 
pratt 
modeling concurrency partial orders 
international journal parallel programming 
ramakrishna 
interval logics temporal specification verification 
phd thesis dept computer electrical engineering university california santa barbara 
preparation 
ramakrishna dillon moser melliar smith kutty 
real time interval logic decision procedure 
submitted 
ramakrishna dillon moser melliar smith kutty 
automata theoretic decision procedure interval logic 
proc 
th conf 
foundations software technology theoretical computer science pp 
new delhi dec 
lncs springer verlag 
damm 
specification system level hardware designs timing diagrams 
proc 
europ 
conf 
design automation europ 
event asic design pp 
paris feb 
ieee computer society press 
schwartz melliar smith vogt 
interval logic higher level temporal reasoning 
proc 
nd acm symp 
principles distributed computing pp 
montreal canada aug 
wolper 
relation programs computations models temporal logic 
proc 
conf 
temporal logic specification pp 
england apr 
lncs springer verlag 
proof structure intermediate lemmas proofs arrive listed 
proof trees lemmas arrival requirements arrive departure lemmas depart req req depart req req open req depart req req req req depart req open open req proof tree departure lemmas depart req req depart req open cancel safe safe depart req depart req arrival lemmas arrive req arrive req proof trees arrival lemmas proof trees arrive arrive arrive depart req depart req arrive proof tree arrive arrive arrive depart req safe arrive arrive see proof tree see proof tree arrive proof tree arrive arrive arrive depart req arrive safe arrive dep req proof tree arrive arrive arrive depart req safe arrive arrive see proof tree see proof tree arrive proof tree arrive arrive arrive depart req arrive safe arrive dep req semantics model theoretic semantics interval logic 
convenience semantics linear version logic called interval logic fil 
semantics gil formulas assert properties state context 
obtained translation gil fil 
syntax fil language fil gil defined relative set state predicates 
definition generic symbols 
state predicates primitive search patterns general search patterns intervals formulas linear syntax fil defined follows 
jq convenience extend fil abbreviations 
usual 
temporal henceforth eventually operations defined fj false fj false shorthand denotes trivial search true 
brackets signify strong interval defined jq jq false false jq false define strong search target denoted follows fq jq gg fq jq gg fq jq gg fq jq gg false brackets may replaced pair interval bracket delimiters 
rules define strong searches strong intervals shown semantically confluent strong searches strong intervals expanded order 
semantics fil model fil formula consists context index context infinite sequence states null context 
state non null context assigns valuations state predicates identify state collection state predicates true state 
index model finite nonnegative integer 
denote value formula model 
definitions extend set nonnegative integers infinite element satisfying 
finite define addition subtraction nonnegative integers including usual manner 
non null state sequence indices satisfying define sequence hl ri follows 
hl ri gamma gamma 
hl ri denotes context obtained extracting subsequence state state stuttering final state 
rules provide inductive definition truth value fil formula 
function construct constructing subcontext specified interval 
assuming define ffl true 
ffl pj true 
ffl true true true 
ffl true false 
ffl true true 
ffl true true construct 
definition construct function locate locating state specified search pattern 
locate defined follows 
ffl locate ffl locate min ffl 
true special error value ffl signifies failed search ffl locate locate locate locate ffl ffl context index interval construct produces subcontext represented interval ffl construct jq ffl ffl hl ri locate locate gamma ffl gamma ffl 
formal syntax gil translation rules syntax gil specified generalization attributed multiset grammar model described 
multiset grammar differs context free grammar productions rules impose order symbols right hand sides 
multiset grammar defines set multisets unordered collections terminal symbols possibly containing repeated elements set strings 
attributed multiset grammar augments multiset grammar ffl set attributes play integral role parsing input ffl semantic functions define values attributes ffl constraints indicate production applied 
attributed multiset grammar model parsing attributes restricted synthesized attributes 
defining syntax gil require general grammar model permits synthesized inherited attributes parsing 
grammar viewed belonging index set grammar model described 
sequel attributed multiset grammar consists ffl finite set terminal symbols ffl finite set nonterminal symbols ffl finite set attributes ffl mapping associates sets attributes terminal nonterminal symbols ffl finite set productions 
attributes classified synthesized inherited attributes associated terminal symbols restricted synthesized attributes 
production specifies rewrite rule expand nonterminal lhs multiset symbols rhs associates finite set semantic functions finite set constraints rule 
semantic function defines attribute rule nonterminal symbols function values attributes symbols rule 
production provides semantic functions synthesized attribute nonterminal rule lhs inherited attribute nonterminals rule rhs 
customary rewrite rules semantic functions grammar admit derivations attribute values defined circularly 
constraints associated rule defined inherited attributes nonterminal rule lhs synthesized attributes symbols rule rhs 
constraints specify conditions satisfied order apply rule 
terminal symbols grammar gil correspond gil operators search arrows interval symbols brackets described section state formulas denote special terminal symbol state form 
nonterminals defined follows 
ffl representing gil formulas ffl qq representing pair search patterns ffl representing single search pattern ffl qv representing continuation search pattern ffl representing line segment denoting interval ffl ai representing search arrow begins search pattern ffl av representing search arrow embedded search pattern 
state formulas parsed context free grammar 
omit details standard 
simplicity permit horizontal shorthand composing searches section 
qq lm rm qv ai av nonterminal symbols attributes 
regard instance terminal nonterminal symbol enclosed bounding box 
synthesized attributes associated symbols give position dimensions box ffl gives coordinate top box 
ffl gives coordinate bottom box 
ffl gives coordinate left side 
ffl gives coordinate right side 
additional synthesized attribute associated interval symbols denote eventualities ffl gives coordinate center diamond 
remaining attributes inherited 
inherited attributes associated nonterminal qq representing pair search patterns ffl lm gives coordinate point search pattern locates 
ffl rm gives coordinate point second search pattern locates grammar associates inherited attribute nonterminals qv ffl gives coordinate point search pattern qv locates gives coordinate formula modifies interval illustrates relationships attributes nonterminal symbols 
illustrates conventions drawing nonterminals 
lines show order relations attribute values vertical lines coordinates horizontal lines coordinates strict ordering denoted solid lines nonstrict ordering denoted broken lines 
example attributes associated qq subject constraints lm lm rm rm productions shown tables 
column tables defines translation gil fil 
table gives sample productions translation scheme root nonterminal row table represents production corresponding translation rule 
second column shows rhs rewrite rules named column purposes 
rewrite rules shown graphically dimensional format relationships attribute values formally expressed semantic functions constraints visually apparent 
broken line right side box right side need coincide right side box enclosing lhs nonterminal 
third fourth columns give constraints semantic functions respectively 
attribute names refer attributes lhs nonterminal subscripted attribute names refer attributes symbols rhs 
fifth column table defines translation string representing fil formula 
simplicity give fully parenthesized translation 
tables provide productions translation rules qq qv respectively 
shown qv differ type arrow instance begins 
table defines translation functions line segments lt generates left interval delimiter rt generates right interval delimiter md generates henceforth eventually symbol formula modifies interval positioned state interval empty string 
table gives productions translations types search arrows 
rewrite rules kinds arrows require constraints semantic functions translations identical 
shows parse tree formula specification elevator system 
attribute values shown table parse tree 
top part table represents input terminal symbols 
show steps translation brevity omitted productions propositional operators 
productions translations missing operators similar implication 
rule constraints sem 
functions maxf maxf qq lm rm lt qq rt md md maxf 
state form state form table translation rules gil formula rule qq constraints sem 
functions qq qq lm rm maxf lm rm qq qv lm rm maxf lm rm qv qq lm rm rm table translation rules search pair qq rule constraints sem 
functions ai qv maxf ai qv ai ai table translation rules search pattern vertical layout rule qv constraints sem 
functions qv qv av qv maxf av qv qv av av qv table translation rules continuation qv search pattern vertical layout rule constraints sem 
functions lt rt md table translation rules line segment rule ai rule av sem 
functions ai av ai av ai av table translation rules arrows ai av 
annotations derivation arrow indicate translation rules step 
gamma 
md gamma 
gamma 
gamma 
lt qq rt md gamma 
qq qq gamma 
qv ai gamma 
qv qv av gamma 
gil toolset include parser 
formulas constructed syntax directed editor 
currently investigating effects characteristics attributed multiset grammars efficiency parsing 
phi phi phi phi phi phi theta theta theta theta thetafl pq ae ae ae ae ae ae ae ae jj ae ae ae gamma gamma gamma psi qq delta delta qv ai av delta delta ai av qv qq lm rm parse tree 
