formal refinement proof small java program tony clark department computing university bradford uk bd dp clark scm brad ac uk 
main components formal technique specifying refining proving properties object oriented programs 
technique notation semantics standard categorical constructs 
example formal development small java program 
aim provide rigorous framework step wise objectoriented software development supports specification refinement proof implementation 
framework takes form categorical semantics object oriented system behaviour design language notation 
gives overview main components framework simple system requirements producing java program 
possible give full analysis approach length reader directed author area oo systems cla cla cla cla cla cla cla related ken ken eva eva bic lan rui formal methods object oriented development 
reader directed bar ehr gog gog gog pie related category theory systems development 
development framework object state ff ae 
ff object type object identity ae partial function mapping attribute names values 
message identity source object identity target object data value 
object oriented system computation occurs terms state transitions resulting message passing gamma 
sigma gamma 
sigma gamma 
set object states sigma receives set input messages producing transition states sigma output messages behaviour system design may non deterministic represented graph nodes labelled sets object states edges labelled pairs sets messages 
leads category obj objects graphs arrows graph homomorphisms 
system construction described standard categorical constructions obj 
behaviours obj product theta exhibits behaviour subject structural consistency constraints 
coproduct exhibits behaviour 
equalizers pull backs push outs express constraints behaviours consistent 
computational category theory provides algorithm computing behaviour system inter related components limits 
behaviour viewed category objects behaviour states arrows sequences message pairs 
category hood follows object sigma identity arrow pair arrows sigma sigma sigma sigma arrow ffi sigma sigma constructed associativity ffi follows associativity 
refinement expressed adjoint functors diagram states performing computation source object translating source state performing computation target object translating target state 
sigma refinement sound exists complete sab 
sigma sigma sigma sigma object oriented designs expressed notation lan semantics obj 
behaviour denoted functions supplied type identity attribute message information ff replacement behaviours corresponding output messages 
approach essentially actor theory agh agh 
basic model message handling asynchronous syntactic sugar express synchronous message passing 
example shows behaviour function left synchronously sends message translated behaviour function right uses replacement wait letrec agent ff oe case letrec agent ff oe case 
agent ff oe wait wait case wait development java program requirements library system defined 
initial object oriented design constructed 
single refinement step performed verified 
simple system property established 
design analysed prior translating implementation java appendix 
software control library required 
library readers may borrow copies books 
time reader number books loan 
new readers may join library time 
library number copies books 
book unique title 
copy shelf library borrowed reader 
libraries operate shares readership policy joining library permits readers borrow books participating libraries 
library system consists single object state consisting readers books reader pair name set borrowed copies 
book pair name number copies 
initially treat lookup tables 
table keys dom lookup ffl extension 

adding table values defined follows removing similarly defined phi ae 
ffl fvg ffl 
ffl isint ffl initial system behaviour decomposed success failure modes 
design operator allows define modes separately combine 
success mode defined follows letrec ff case 
ff 
dom 
ff 
dom 
ff phi dom borrow 
ff phi psi dom dom return ff psi phi dom dom ff state source behaviour refinement acts identity transforms fn 

set object identifiers introduces new objects 

system state 
book behaviour follows letrec book ff case getname 
book ff borrow 
book ff gamma 
book ff book ff successful library behaviour modified take account book objects 
initial design uses set membership test existence book 
implemented private method library 
ff fog 
getname 
ff book ff 
library receives message name exist new book object created 
assume new object identifier fi type tag books 
ff theta book fi verify refinement step source state 
set readers set fn 

corresponding target state 
set object identifiers state 

refinement sound complete diagram commutes see diagram 





proof induction size set length computation refinement identifies class behaviours reader adds private method library 
design language formal semantics terms standard constructions obj 
design language proof theory provides framework establishing program properties 
proof theory views behaviour function mapping input messages states output messages states 
proofs typically induction length messages stream 
refinement formally defined possible show properties preserved refinement transformations 
consider theorem 
library book borrowed reader dom 
proof induction length input message stream 
theorem holds library empty stream 
assume induction theorem holds library messages ms show case analysis theorem holds messages ms 
conclude theorem holds 
consider behaviours book reader 
provide state component index collections behavioural instances message getname 
indicates common behaviour named projection morphisms 
implementation named occur super class book reader 
named book gamma gamma gamma reader consider behaviour functor acts system states projecting book objects equivalent named objects forgetting copy count 
acts identity arrows replaced find book replaced replaced notfound 
order valid sound complete respect indexing collections books 
system state sigma diagram right commute 
similarly behaviour functor defined project states calculations involving indexing readers 
leads replace behaviours single behaviour find 
sigma sigma sigma sigma find shared readership policy expressed pull back diagram showing libraries project behaviour cell containing readers 
pull back ensures libraries readers 
number implementation choices shared readership policy behaviour defined programming language supports shared data class instances static java component library class may shared 
gamma gamma gamma psi lib fl lib gamma gamma gamma psi fl cell agh agha actors model concurrent computation distributed systems 
mit press 
agh agha structure semantics actor languages 
proceedings rex school workshop foundations object oriented languages lncs springer verlag 
bar barr wells category theory computing science 
prentice hall international series computer science 
bic lano maibaum compositional interpretation object diagrams 
technical report department computing imperial college 
cla clark layered object oriented programming language 
journal research general electric pp 
cla clark semantic primitives object oriented programming languages 
phd thesis qmw university london 
cla clark evans semantic foundations unified modelling language 
proceedings workshop rigorous object oriented methods room imperial college june 
cla clark type checking ocl expressions 
technical report 
cla clark semantics object oriented systems 
third northern formal methods workshop 
september 
appear bcs facs electronic workshops computing 
cla clark semantics object oriented design notations 
technical report submitted bcs facs journal 
cla clark semantic framework object oriented development 
technical report submitted objet journal special issue formal objectoriented development 
ehr ehrich goguen sernadas categorical model objects observed processes 
proceedings rex school workshop foundations object oriented languages lncs springer verlag 
eva evans reasoning uml class diagrams 
ieee press 
eva evans lano rigorous development uml 
appear proceedings etaps fase workshop 
gog goguen objects 
int 
journal general systems 
gog goguen categorical manifesto 
technical report prg programming research group oxford university march 
gog goguen sheaf semantics concurrent interacting objects 
mathematical structures computer science 
ken kent gil visualising action contracts object oriented modelling 
appear iee software journal 
ken kent constraint diagrams visualising invariants object oriented models 
proceedings oopsla acm press 
lan landin programming languages 
communication acm pp 
lan lano uml refinement abstraction transformations 
proceedings second workshop rigorous object oriented methods room bradford may 
pie categorical semantics object oriented data specifications 
formal methods object technology eds 
kent springer verlag pp 
rui ruiz delgado pitt review object oriented approaches formal specification 
computer journal 
rydeheard burstall computational category theory 
prentice hall international series computer science 
sab sabry wadler reflection call value 
acm transactions programming languages systems pp 
library implementation java independent behaviour defined java class 
state components behaviour defined fields message handlers defined methods 
common behaviour defined inheritance 
main features class named defines common behaviour readers books attribute readers library declared static libraries implement shared readership policy class library defines method find index readers books 
class named private string name public named string name name name public string getname return name class book extends named private int copies public book string name super name public void borrow copies copies copies throw new error copies left public void copies copies class reader extends named private vector copies new vector public reader string name vector copies super name copies copies public void borrow string name copies addelement name public void ret string name copies name class library private static vector readers new vector private vector books new vector public void string name readers addelement new reader name new vector public void string name books addelement new book name public void string bookname book book book find bookname books book null book throw new error find book private named find string name vector table named named null int named null table size named named table elementat getname equals name named return named public void borrow string string bookname reader reader reader find readers book book book find bookname books reader null book null reader borrow bookname book borrow throw new error illegal name borrow public void ret string string bookname reader reader reader find readers book book book find bookname books reader null book null reader ret bookname book throw new error illegal name ret 
