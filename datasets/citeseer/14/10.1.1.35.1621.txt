appear proceedings icmas combinatorial auction collaborative planning luke division engineering applied sciences harvard university cambridge ma luke eecs harvard edu barbara grosz division engineering applied sciences harvard university cambridge ma grosz eecs harvard edu rational utility maximizing agents encounter opportunity collaborate group activity determine commit activity 
refer problem initial commitment decision problem 
describes mechanism agents may solve 
mechanism combinatorial auction agents bid sets roles group activity role comprising constituent subtasks done agent 
bid may specify constraints execution times subtasks covers 
mechanism permits agents keep details individual schedules prior commitments private 
reports results experiments testing performance mechanism 
results demonstrate significant improvement performance constituent subtasks grouped roles 
show number time constraints bids increases probability solution decreases cost optimal solution exists increases time required find optimal solution exists decreases 
describes strategies agents employ mechanism 

rational autonomous agents encounter opportunity collaborate group activity decide commit doing activity 
refer problem initial commitment decision problem 
assume new opportunity collaborative action arises context agent may existing com fl ieee 
personal material permitted 
permission reprint republish material promotional purposes creating new collective works resale redistribution servers lists reuse copyrighted component works obtained ieee 
individual group activities 
assume agents utility maximizers 
horty pollack initiated research individual agent may evaluate new opportunities action context existing commitments 
initial commitment decision problem addressed generalization problem group context introduces significant complications 
single agent complete information existing commitments agents group background context distributed 
second approach choice method distribution tasks best group may best individual agent 
agent participating multi agent planning incurs significant costs including time computational resources devoted group decision making processes opportunity costs commitments doing share tasks group activity supporting actions costs doing actions commits 
decide join proposed collaboration agent needs assess impact collaboration ability 
planning decision making opportunity costs substantial preferable agents determine upper bound impact prior committing planning 
deciding commit new group activity agent estimate factors potential contributions group activity constituent subacts participate costs contributions possibilities remaining tasks assigned group members individually rational manner 
factor requires agents examine information individual background contexts commitments 
agents may unwilling unable share complete information individual contexts factor best computed locally individual agents 
second factor requires global computation takes account potential contributions agents 
presents mechanism group agents solve initial commitment decision problem 
mechanism refer mechanism uses combinatorial auction coordinate sorts local global computations described :10.1.1.19.2028
potential contribution group activity stated terms locally computed bid specifies set tasks cost doing tasks set constraints execution times tasks 
global computation determines best combination bids potential contributions 
existing algorithm combinatorial auctions modified enable handle time constraints :10.1.1.19.2028
distributing computational burden way mechanism allows agents maintain privacy existing commitments focus computational efforts potential contributing proposed collaboration 
furthermore able condition bids time constraints allows agents protect feasibility existing commitments 
global computation may carried centrally done empirical investigations may carried distributed fashion agents searching different portions highly structured search space 
section describes representation actions recipes 
section briefly reviews standard combinatorial auctions 
section defines auction mechanism 
section presents empirical results implications system design 
results demonstrate significant improvement performance constituent subtasks grouped roles 
show number time constraints bids increases probability solution decreases cost optimal solution exists increases time required find optimal solution exists decreases 
remaining sections discuss related 

actions act types recipes roles representation actions act types recipes follows grosz kraus sharedplans theory collaborative planning extends representation act types recipes include roles 
experiments described section show roles allows mechanism scale larger problem instances 
actions act types recipes sharedplans 
actions basic complex 
basic action action may executed individual agent appropriate conditions complex action executed indirectly recipe 
basic complex actions classified act types 
recipe complex act type set subacts constraints doing subacts constraints constitutes doing action type 
typically recipe constraints agent prep pipe agent weld pipe agent lay pipe agent load junk agent dig ditch agent fill ditch prep pipe dig ditch lay pipe fill ditch weld pipe plant grass load junk recipe lay pipeline subacts precedence constraints additional constraints 
sample recipe include precedence constraints execution times various subacts may include constraints certain subacts executed agent subgroup 
shows sample recipe rec specifies way doing lay pipeline action 
precedence constraints indicated arrows weld pipe subact done fill ditch subact 
shown allow precedence constraints include offsets 
load junk subact constrained occur minutes lay pipe subact 
recipes may contain complex subacts recursively choosing recipes subacts gives rise multi level recipe hierarchy 
assume recipes fully expanded agents need consider basic subacts 
adding roles act types recipes 
value roles may illustrated example representation transaction act type electronic commerce 
matter protocol recipe govern transaction tasks done buyer seller 
addition various preconditions postconditions application constraints may succinctly stated terms buyer seller roles seller object sold prior start transaction 
despite buyer seller roles naturally associated transaction act type tasks covered role determined protocol chosen govern transaction 
example protocol buyer list objects purchased buyer go complex set steps 
addition specifying tasks covered act type roles protocols may introduce standard planning act type definitions specify preconditions application constraints necessary effects action type parameters required doing action 
font names act types recipes roles 
loader roles subacts precedence constraints prep pipe dig ditch lay pipe fill ditch weld pipe load junk plant grass recipe lay pipeline additional roles grass act type lay pipeline 
act type recipe roles additional protocol specific roles 
example protocol require additional monitor role responsible carrying variety transaction monitoring tasks 
extend representation act types recipes include roles 
ff rec denote roles associated act type ff recipe rec respectively 
recipe specify set subacts covered act type role recipe role 
require subact covered role 
agent filling role responsible doing subacts covered role 
shows roles incorporated example 
act type roles loader lay pipeline act type 
addition recipe rec modified separately specify set subacts covered role agent filling loader role lay pipe load junk subacts 
rec modified include additional recipe specific role arises recipe particular way subdividing lay pipeline action 
recipe specifies responsibilities additional role agent assigned grass recipe role responsible executing plant grass subact 
roles reduce computational burden ways 
particular agent finds unable subacts covered role agent may immediately move considering roles 
second needing identify agents subacts group need identify agents fill various act type recipe roles fewer roles subacts fewer decisions 
items sale 
combinatorial auction 
combinatorial auctions combinatorial auction multiple items sale participants may place bids arbitrary subsets items auctioneer determine combination bids maximizes revenue :10.1.1.19.2028
shows combinatorial auction items sale participants bids fa bg fa dg 
general fi set items auctioned set received bids 
bid items denote subset items covered bid amount denote amount bid 
bid set collection bids called disjoint item auctioned covered bid set covering item covered bid set disjoint covering 
bid set called solution 
disjoint bid set bs revenue bs awarded generate auctioneer value bs bs amount 
winning bid set bid set maximizes revenue bs argmax bs abs value bs abs set bid sets 
revenue generated winning bid set value bs 
winning bid set called optimal solution 
auction bid sets fag fbg fc dg fag fb dg fcg fa bg fc dg fa dg fcg fa dg fbg fcg yield maximum revenue may chosen winning bid set 

existing winner determination algorithms general winner determination wd problem combinatorial auctions np complete 
sandholm independently wd algorithms scale problems involving scores items thousands bids :10.1.1.19.2028
main insight bids practice necessarily sparsely populate space possible bids search winning restricted space bid sets composed actual possible bids 
core algorithm depth search space disjoint bid sets 
depthfirst path search disjoint bid set incrementally constructed successively appending individual bids 
path may covering bid set may reach dead non covering bid set compatible bids append 
algorithm keeps track best revenue maximizing covering bid set far may anytime algorithm 
algorithm uses item indexing scheme ensure disjoint bid set generated search 
sandholm organizes received bids auxiliary data structure called enable efficient generation bids compatible current partial bid set 
partition received bids bins corresponds subtree sandholm bid tree 
addition algorithm uses admissible heuristic estimates revenue items covered bring heuristic speeds search enabling pruning partial bid sets certain bring revenue best solution far 
differences approaches sandholm lie proposed improvements basic algorithms 
discuss improvements sacrifices optimality auctions involving time constraints application described agents time constraints protect feasibility existing commitments 

mechanism initial commitment decision problem initial commitment decision problem arises group agents encounter opportunity collaborative activity 
assume opportunity form request specifies time interval action done payment group receive doing action 
agents bins coarser sandholm bid tree additional checks required avoid redundant search 
find way doing action cost profit doing 
section describe mechanism agents may solve 
mechanism combinatorial auction agents bid roles group activity 
having agents bid roles subacts reduces number items bid enables mechanism scale problems involving larger numbers subacts 
reduces computational burden bid generation agent finds unable carry subacts covered role may immediately move considering roles 
mechanism allows agents condition bids various time constraints choice recipe group activity 
allowing time constraints bids essential application 
allows agents protect feasibility private schedules existing commitments having reveal details commitments agents 
addition able condition bids choice recipe enables agents generate wider variety bids increasing likelihood finding low cost way doing group activity 
example agent require small payment cover particular set roles rec unable cover roles different recipe 
agent unable condition bid choice recipe unable place bid set roles 
winner determination mechanism handled algorithm sandholm wd algorithm modified able deal time constraints bids described section 
rec recipes available doing group action 
mechanism involves separate auctions recipe group 
implementation bids conditioned choice recipe split multiple recipe specific bids henceforth assume bid pertains single recipe 
example sample bid pertaining recipe rec shown roles grass amount prep pipe bid bidder proposes role grass recipe role payment conditions lay pipeline group activity done prep pipe subact subacts covered role done 
define density bid constraints dbc follows 
set roles bid set subacts covered roles bid may constrain execution time subact covered bid subact providing lower upper bounds bid may include jsj constraints 
dbc defined jsj number actual constraints bid 
example dbc sample bid bid contains single subact execution time constraint contained subacts covered bid see 
section density bid constraints shown dramatic impact performance mechanism 
auction corresponding recipe rec ff rec set roles items auctioned 
set bids received 
bid roles subset roles covered bid amount amount bid bidder constraints starting times group activity bidder constraints execution times subacts covered bid 
disjoint covering bid sets defined standard combinatorial auction bid sets defined differently 
bid set bs called respect recipe rec addition disjoint covering exists set execution times subacts rec satisfy rec precedence constraints time constraints bids bs 
cost bid set cost bs bs amount 
winning bid set auction corresponding recipe rec bs argmin bs abs cost bs abs set bid sets 
associated cost cost bs 
auctions winning bid set recipe pair element bs rec bs rec minimum cost 

modified wd algorithm determine winner combinatorial auction involving bids include time constraints modified sandholm basic winner determination wd algorithm described section 
modifications included adding consistency check bid set construction process minimizing cost maximizing revenue 
modified wd algorithm follows depth path cost current bid set greater best bid set far current bid set chose sandholm algorithm bid tree structure ensures non redundant search 
inconsistent current bid set covering compatible bids append current bid set 
cases current bid set pruned case current bid set best far 
consistency check 
precedence constraints recipe determine partial order recipe subacts shown 
constraint imposed bid directly constraining execution time subact may indirectly constrain execution times numerous subacts precedence related directly constrained subact 
example bid constraint weld pipe subact occur indirectly constrains fill ditch plant grass subacts 
bid set construction process algorithm maintains greatest lower bound glb upper bound lub execution time subact recipe precedence constraints constraints current bid set 
new bid appended current bid set effects new constraint glbs lubs propagated partial order network 
incorporating new constraints necessary check glb greater corresponding lub 
constraints extended bid set consistent precedence constraints recipe search backtrack 
minimizing cost 
moving maximizing revenue minimizing cost requires minor changes algorithm significantly impacts performance algorithm enables high cost bid sets pruned requiring sort heuristic described section 
cost current bid set exceeds cost best bid set far current bid set may pruned immediately 

experiments section report studies modified wd algorithm 
experiment quantifies performance improvement arises roles bundle subacts 
remaining experiments clarify tradeoffs arise allowing bids include time constraints group activity 
inclusion time constraints results fewer consistent bid combinations tends increase cost optimal solution cost extreme cases time constraints result solution 
examine number bids affects relationship time constraints bids likelihood yielding solution 
explore additional computational benefits arise heuristic described section 
relative cost cost solution cost optimal solution time seconds find sol 
relative cost nr number roles mean times shown confidence nr nr nr 
varying number roles nr experiment group action constrained occur time interval 
recipes generated randomly recipe number precedence constraints number subacts subacts assigned roles equal probability 
bid generation process simulated randomly generating bids various parameters described experiment 
cost bid randomly generated cost subact uniformly distributed 
experiment 
goal experiment determine improvement performance generated bundling subacts roles 
number subacts fixed number roles covering subacts data collected case 
winner determination combinatorial auctions exponential number items auctioned expected performance improve number roles decreased number subacts covered role increased :10.1.1.19.2028
results experiment plotted 
point plot shows time averaged runs required reach solution particular relative cost relative cost solution defined follows cost solution cost optimal solution 
relative cost optimal solution far right horizontal axis suboptimal solutions greater 
bids run bid covering roles uniformly distributed 
bids contain time constraints experiment 
results clearly indicate substantial improvement performance number roles covering subacts decreases 
roles number items number subacts resulting poorer performance 
results experiment indicate solu runs roles solution 
case results averaged remaining runs 
density bid constraints dbc nb nb nb nb nb nb nb nb nb number bids 
varying number bids density bid constraints tions low relative costs typically relatively short period time 
initial commitment decision problem near optimal solutions may suffice 
agents commit group activity nearoptimal solution may solution baseline continuing search lower cost solutions 
experiment 
goal second experiment show likelihood set bids yielding solution depends number bids received number constraints bid 
experiment recipe contained subacts covered roles 
data point corresponds runs number bids nb density bid constraints dbc fixed 
dbc value represents bid contained subact execution time constraints value represents bid constrained lower upper bounds execution time subact covered bid roles 
data point indicates number runs yielded solution 
results plotted 
clearly show likelihood bids yielding solution falls sharply density bid constraints increases 
results indicate bids required ensure certain likelihood finding solution density bid constraints 
results directly apply settings agents focused minimizing expected costs provide guidance agent design 
time constraints bids determined follows 
random order execution times consistent recipe precedence constraints selected subacts covered bid subact time point ts randomly chosen uniformly distributed subact glb lub effects assignment propagated partial order network precedence constraints described section 
second subact time constraints simulating interactions agent schedule existing commitments form time ts time ts gamma generated 
time constraint included bid probability equal dbc 
settings agents want identify solutions individually rational 
results indicate fewer constraints place bids fewer bids need submit group find solution 
experiment 
goal third experiment determine density bid constraints affects cost optimal solution time required find optimal solution time required exhaust search space necessary determine optimality 
parameters chosen solutions generated runs dbc value 
number subacts number roles number bids number roles covered bid ranged uniformly distributed 
results experiment shown 
plot shows cost optimal solution rises density bid constraints rises plot shows time required find optimal solution exhaust search space decreases density bid constraints rises 
cases reason presence bid constraints effectively shrinks pool bid sets 
optimal solution absence constraints inconsistent non bid set presence constraints 
implications results 
results experiments suggest possible strategies agents employ mechanism 
example suppose individual contexts agents agent choose making higher cost bids maximally constrained lower cost bids 
case adding constraints ensure low cost methods various tasks 
early iterations mechanism agents encouraged generate lower cost bids examined quickly determine yielded solution sufficiently low cost 
agents generate additional bids involving fewer constraints enlarging pool bid sets 
pool bid sets grows time carry exhaustive search grows 
results experiment show modified wd algorithm tends find near optimal solutions quickly exhausting search space tends provide minimal reduction solution cost 
iteration modified wd algorithm run solution cost threshold time limit reached 

related collins customer agent selects recipe issues call bids set supplier agents 
cost optimal solution density bid constraints dbc mean costs shown confidence intervals time find optimal solution exhaust search space density bid constraints dbc time exhaust search space mean times shown confidence intervals time find optimal solution 
plots experiment bid set tasks specifies price doing set tasks price task awarded separately 
bids may constrain task execution times 
customer agent uses generalized search heuristics cost risk feasibility task coverage 
primary differences follows 
bundle tasks roles lose corresponding computational advantage 
second allow customer agent pieces bids construct bid sets bid items split pieces 
furthermore cost piece covering fewer items summing individual costs corresponding subacts ignores sub additivity superadditivity relationships existing 
main purposes combinatorial auction take advantage relationships 
heuristic combination risk cost feasibility algorithm may explore vast regions search space involving infeasible solutions restrict search space feasible bid sets 
walsh wellman wu market oriented solutions range combinatorial problems 
approach involves iterative auctions 
walsh wellman decentralized asynchronous protocol allocating scheduling tasks 
approach representing physical resource service provided agent auctioned separate st price auction 
separate agent dedicated production single unit 
auctions run reach quiescence conditions quiescence necessarily yields valid solution 
handle time form subset cross product discrete time line set goods resulting proliferation goods auctions introduce special bundling agents responsible goods various time intervals 
approach handles time constraints adverse computational impact 
wu iterative auction approach single auction solve distributed problem set jobs performed consisting set operations operation requiring particular machine duration 
associate agent job set items set discrete machine time slot pairs pair having associated price 
auction iteration agent generates single bid auctioneer examines bids updates prices attempt reduce resource conflicts 
procedure stops auctioneer finds bids compatible 
primary differences wu map agents jobs fashion auction find sets machine timeslot pairs satisfy needs job auction find mapping agents jobs items machine time slot pairs items roles comparatively 
virtual simultaneous auction alternative winner determination algorithm combinatorial auction described earlier section 
original bid create virtual bidder tries secure items bid 
simultaneous auction repeated 
optimal allocation pre set time deadline reached 
virtual bidders follow simple strategy incrementing bids previous bids insufficient acquire desired goods 
experimental results showed approach competitive basic algorithm quite fast 

mechanism combinatorial auction group agents may solve initial commitment decision problem 
mechanism computationally feasible larger class problems stipulated agents bid roles recipe specific bundles subacts 
enable agents tailor bids schedules existing commitments mechanism allows agents condition bids various time constraints requiring modified combinatorial auction winner determination algorithm mechanism distributes computational burden making individual agents responsible generating bids global computation find optimal combination bids 
plan focus bid generation process required mechanism 
horty pollack initiated research individual agent may evaluate new opportunities single agent action context existing commitments 
generating bids mechanism requires similar sorts reasoning 
plan explore distributing global computation mechanism 
acknowledgments 
research reported supported part national science foundation iri iis iri cda 
authors wish martha pollack helpful discussions 
collins gini mobasher 
search strategies bid selection multiagent contracting 
proceedings ijcai workshop agent mediated electronic commerce 

leyton brown shoham 
taming computational complexity combinatorial auctions optimal approximate approaches 
sixteenth international joint conference artificial intelligence ijcai 

grosz kraus 
collaborative plans complex group action 
artificial intelligence 
horty pollack 
evaluating options context 
th conference theoretical aspects rationality knowledge tark 


making sharedplans concise easier reason 
agent architectures theories languages volume lnai pages 
wu 
combinatorial auction lagrangean relaxation distributed resource scheduling 
technical report lehigh university 
smith 
combinatorial auction mechanism airport time slot allocation 
bell journal economics 

efficient negotiation mechanisms collaboration student 
th national conference artificial intelligence aaai 
appear 
sandholm :10.1.1.19.2028
algorithm optimal winner determination combinatorial auctions 
sixteenth international joint conference artificial intelligence ijcai 

walsh wellman 
market protocol decentralized task allocation scheduling hierarchical dependencies 
third international conference multiagent systems icmas pages 
