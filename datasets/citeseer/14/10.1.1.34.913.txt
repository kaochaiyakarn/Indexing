new algorithmic approach general lov asz local lemma applications scheduling satisfiability problems extended dept computer information science new jersey institute technology university heights newark nj usa cis njit edu christian scheideler dept mathematics computer science heinz institute paderborn university paderborn germany uni paderborn de lov asz local lemma lll powerful tool increasingly playing valuable role computer science 
led solutions numerous problems di erent areas reaching problems pure combinatorics problems routing scheduling approximation theory 
original lemma non constructive solutions rst purely existential 
breakthrough result beck generalizations led polynomial time algorithms problems 
methods applied simple symmetric form lll 
provide novel approach design polynomial time algorithms problems require lll general form 
apply techniques nd approximate solutions large class np hard problems called minimax integer programs mips 
method nds approximate solutions especially problems non uniform character signi cantly better methods 
demonstrate applicability approach apply transform important results area job shop scheduling far existential due fact general lll algorithms nd predicted solutions small loss polynomial time 
furthermore partly done author heinz institute department mathematics computer science paderborn university germany 
research partially supported dfg massive algorithmen anwendungen see www de cs html full version 
demonstrate results solve satis ability problems 

probabilistic method prove existence objects desirable properties showing randomly chosen object appropriate probability distribution desired properties positive probability 
applications probability positive high frequently tends parameters problem tend nity 
cases proof usually supplies ecient randomized algorithm producing structure desired type 
certain examples prove existence required combinatorial structure probabilistic arguments deal rare events events hold positive probability exponentially small size input 
happens lov asz local lemma lll 
lemma general form 
lemma lov asz local lemma 
set bad events arbitrary probability space dependency graph events 
independent subset events 
assume exist pr positive probability bad event occurs 
symmetric form lll de ned follows 
lemma symmetric lll 
set bad events pr mutually independent events ep positive probability bad event occurs 
applications lll literature see 
turn proofs lll ecient algorithms random ones proved dicult applications 
breakthrough beck method converting applications lll polynomial time algorithms sacri ces regards constants original application 
alon provided parallel variant algorithm simpli ed arguments 
method generalized molloy reed yield ecient algorithms number applications symmetric form lll 
cases polynomial time algorithms applications general lll requiring reduction symmetric lll 
molloy reed methods problems frugal coloring acyclic edge coloring possibly applied problems require general lll pointed authors may require prove possibly dicult concentration properties problem consideration 
authors able design analyze polynomialtime algorithm problem coloring non uniform hypergraphs related coloring problems 
section constructive form general lll proved signi cant modi cations method 
demonstrate section result construct ecient approximation algorithms called minimax integer programs mips 
represent set kg 
de nition 
mip variables fx integers denote dimensional vector variables mip seeks minimize real subject 
system linear inequalities ax dimensional vector variable component 


mips represent general framework choice problems see properties 
applications area routing scheduling formulated mips examples see 
general mips np hard 
common strategy nd approximate solutions mips rst solve linear relaxation randomized rounding 
approach pioneered raghavan thompson extended re ned mips srinivasan lu leighton rao srinivasan 
papers apply symmetric form lll construct rounding strategies 
leighton give high level application mips hypergraph partitioning problem set system fs sm 
positive integer problem partition parts sets split want minimizes max jfi 
cost function drawback seeks minimize absolute split size 
applications desirable minimize relative split size nd function minimizes max jfi js problems kind instance feige scheideler 
solution heavily uses general lll allowed prove upper bounds makespan job shop schedules signi cantly improved previously best results see section 
solving problems techniques gives approximation ratio large log log log problem size approximation ratio partly low required proofs 
method achieve goal 
new results main technical contribution novel approach design polynomial time algorithms problems require general lll see section 
apply approach nd approximation algorithms mips consider mip 
strategy start optimal solution fx lp relaxation mip integrality constraints de nition removed 
resulting lp optimum clearly lower bound optimum integral form mip 
randomized rounding algorithm exploits dependencies rows matrix nd approximate solution dependencies de ned follows 
de nition 
mip instance de ned dependency graph gi consist node set edge set contains edge note gi may contain self loops 
simpli es proofs 
possible avoid 
lll techniques prove main result 
theorem 
mip instance optimal fractional solution vector ax consider random experiment setting probability vector ir pr min maxc ar 
pr cherno bound pr ax 
constant chosen max furthermore qr ln zr suciently small positive constant 
holds qr zr zs algorithm nds vector polynomial time ax main feature result great exibility allows exploit local dependencies rows achieve approximate solutions allow distinguish rows require just rough approximation 
important mips may especially real world applications composed di erent classes restrictions di erent dependency structures require di erent approximation ratios 
maximum dependency row rows 
demonstrate section property able exploit local dependencies having di erent approximation ratios vital job shop scheduling results 
show apply method obtain rst approximation algorithm max sat problems able exploit local dependencies 
note factor exponent brought arbitrarily close zs suciently small 

local lemma algorithm start presenting general approach design polynomial time algorithms problems require general lll 
denote set consisting independent random variables called trials 
trial denote set possible outcomes 
set bad events event determined outcome trials ta fta ag 
events said neighbors ta ta 
denote set neighbors clearly event mutually independent subset events 
assume event set ta event restricted written ajs de ned 
pr ajs denote probability ajs true assumption outcome chosen independently random trial suppose natural assumptions valid trial random outcome generated polynomial time decided polynomial time event set ta ajs true 
theorem holds 
theorem 
constant 

holds am set bad events set independent random trials jv trial set outcomes size polylogarithmic constant away 
suppose ta holds jsj pr jsj pr 
furthermore assume ln holds randomized algorithm nds outcomes random trials polynomial time event set ta partitioned constant number subsets sk ajs false 
rst describe algorithm underlying theorem 
analysis section 
description algorithm consider set events ful lls conditions theorem 
algorithm consists steps 
step choose random outcome trial describe step rst introduce notation provide ideas step 
events theorem called basic events event de ned basic event restricted subset trials called reduced event 
theorem assume basic events numbered consecutively am event representing event reduced event denote index basic event called bad trial set decomposed constant number subsets ajs false 
clearly step basic events left bad 
case redo certain trials covered events 
aim step nd partition bad events trial disjoint groups 
key feature partitioning procedure consider trials covered bad events 
course algorithm shall partition basic events reduced events assigned di erent groups 
step perform substeps step step 
step set denotes set remaining trials true call build component algorithm build component set fbg set tb repeat set set 
basic events events increasing set ta trials selected true true jsj jt set add set consider xed set possibly reduced events built algorithm build component 
basic event said participate trials covered 
clearly holds events reduced event set participating events restricted trials covered called component 
component bc denote set core events 
core events play important role process shall show sucient trials covered core events order nd selection possibly reduced events performing step think components solved independently 
happen basic event partitioned reduced events belong di erent components 
theorem requires event provide decomposition ta constant number sets ajs false 
coordination components theorem hold 
step takes care events combining components component necessary 
see trials covered components constructed step independently theorem ensured hold 
de ne set components 
recall denotes set basic events 
second substep works follows 
step set denotes set remaining events set denotes set remaining components taken components increasing index initial events call build component algorithm build component set bc repeat set 
basic events set events increasing set set trials covered outside components jt comp 
overlap ta set bc remove remove set basic event called dangerous condition holds 
union components built algorithm build component called component 
component bc denote union sets bc components consists vc set trials covered events bc basic event participating components said participate single event combining reduced events di erent components event 

notice important properties shall frequently analysis follow immediately construction 
component events bc true 

component trial sets covered core events bc disjoint size corresponding basic event 
basic event reduced event core event 

basic event part covered components false 
step properties 
lemma 
component outcomes trials vc events participating false 

basic event participates component 

basic event part participating component bad trials covered components redone 
proof 
prove observe component basic event participates possibly reduced event easily verify probability bounds theorem lll imply outcomes trials vc events participating false 
assume basic event participates di erent components 
case dangerous viewpoint component 
caused combining trials covered components single component contradicting assumption 
order prove notice part event covered components false 
furthermore part event covered components participate small divided parts true 
step true 
part event participating component bad trials covered components redone 
lemma imply vital property 
corollary 
components considered independently order ful ll theorem 
ready step 
step component apply independently step components resulting suciently small 
section follows identify suciently small components covering ln ln trials 
theorem trial set outcomes polylogarithmic step 
step find exhaustive search outcomes trials component events false 
analysis algorithm lemma implies runtime algorithm polynomial lemma 
chosen theorem 

probability constant number trials covered component step ln 
component step size ln probability ln constant number trials covered component applying step 
ln ln 
order prove lemma intend bound expected number possibilities choosing sets core events able establish component 
counting possible sets basic events represent core events component 
main problems solved counting 
counting provide ordering basic events 
ordering able uniquely determine component constructed algorithm 

unique way establishing component uniquely determine core events happen core event component basic event trials covered components 
problems main reasons analysis apply 
problem consideration require provide ordering basic events basic event corresponding core event trials belonging di erent components 
proof signi cantly easier 
order solve problems introduce structures 
component witness assume component set core events bc consists initial core event represents set core events added round build component 
graph bt called component witness directed tree property node set bt set consisting basic events core events bc basic events core events event smallest index core event overlaps component witness furthermore assume component consisting set components sd consists initial component represents set components added round build component 
graph bt dt called component witness tree directed edges property node set bt contains basic events core events node set dt contains basic events dangerous events considered see build component may include basic events bt basic events bt edge component witness component basic events bt dt trial sets overlap core events single component cases holds 
bt dt event smallest index basic events core event discovered dangerous 
dt bt event smallest index component intersecting added due edge set called set component edges edge set called set component edges 
due property basic event core event see component witnesses guaranteed trees 
obviously component unique component witness 
hand component witness implies component unique concerning 
decomposition components 
order events added components build component 
order components constructed 
round component added build component 
item follows fact component witnesses separated component edges 
furthermore item holds build component ensures order new events added component round determined indices 
item true step ensures order components constructed determined indices initial events 
item holds step ensures initial component represented component witness initial event minimum index round component added determined number component witnesses passed initial component witness component witness representing component witness may result component uniquely determined trial sets core events 
reason happen basic event core event component say overlap trials component say 
happen constructed case single component witness able uniquely specify trials covered core events component 
introduce component witnesses 
component witness component component witness directed tree bt dt iteratively constructed follows initially equal component witness long component neighborhood event bt add component edge arbitrary pair intersecting basic events having core event add component witness component witness vt denote set trials covered basic events bt component witnesses important property 
lemma 
component witness uniquely determines component initial component witness 
proof 
noted component witness completely speci es component trial sets covered core events 
component witness provides complete time ordering events added components witnessing time core event added component trials basic event taken covered components components overlap events component witness ensures unique determination trials covered core events component corresponding initial component witness witnessed components 
implies result 
corollary 
component constructed algorithm component witness uniquely determines core events corollary implies component witness including set basic events form core component 
signi cantly help bound size components counting combinatorial structures core events allowed count combinatorial structures basic events easier 
introduce notation 
basic event called order reduced events 
recall probability event reduced events true pa see theorem 
order set events de ned furthermore event component witness de ne witness order order short equal bt value 
leave exact de nition extended 
order component witness sum orders events bt dt intend count expected number component witnesses order 
sum orders core events component represented initial component witness holds lemma 
component corresponding component witness ensures bc order bound expected number components order suces bound expected number component witnesses order 
enable prove lemma 
order count component witnesses start basic event represents initial event initial component set basic events count possibilities forming component edges basic events neighboring basic events 
count component witnesses level wise 
set basic events forming level call set basic events forming level witness extension 
recall trial sets covered core events component disjoint 
probability basic event true restricted trial set core event independent events 
allows bound expected number number witness extensions order 
vital claims follow conditions theorem 
claim 
event holds 
claim 
event ful lls shown standard calculations expected number component witnesses order hand know follows lemma facts prove lemma 
mip algorithm section algorithm ful lls theorem 
give high level description algorithm 
arbitrary mip start nding optimal solution fx lp relaxation mip integrality constraints de nition removed 
resulting lp optimum clearly lower bound optimum integral form mip 
algorithm works steps 
structure similar algorithm techniques completely di erent 
step rounds multiples number ln 
step contains main novel contribution rounds constant 
step nally rounds values 
step initial rounding mg wr maxc ar scale matrix multiplying row ensures maxc vector equal remaining steps assume approximation vector ful lls property see theorem max ln min min 
ln simply randomized rounding strategy raghavan thompson transform integral vector set variable probability case pr min min ln row high probability obtain integral solution proposed theorem 
case select matrix uniformly random set jfk gj 
consider system bad events em er true quite easy see probabilities values negatively correlated independent apply cherno bounds obtain pr er min ln high probability bad events occurs 
assume random experiment successful avoiding bad events repeat 
replace vector order simplify calculations assume worst case step step intermediate rounding rst step requires lll consideration dependency graph may signi cantly reduced previous step 
perform rounding rst transform vector values simply done expanding 

matrix expanded similar way 
aim step round values values constant 
done phases starting phase 
initially set equal equal 
outcome vector phase de ned nal vector step set task phase round vector values vector values ln done follows 
simplicity set random experiment applying lll select vector sets size uniformly random jn contains 
vector set rest 
consider system bad events em er true ax min ln 
ax dependency graph er de ned definition 
clearly event er mutually independent events connected assume approximation vector chosen inequality theorem holds 
shown subsection case theorem predicts vector provided polynomial time ax 
min ln 
ax constant 
step ends rst phase phase 
case ln general holds ln case constant 
phases step holds enables bound approximation factor obtained step 
distinguish cases 
row 
ln obtain approximation ratio ln constant 
applying theorem step aim show phase step match requirements theorem 
chosen represent matrix order avoid dealing events non uniform weights strategy 
minimum value blog cg row set contain ar 
clearly jm 
ax matrix bk represent zeroes entries ar furthermore chosen bk 
set yr de ne event true min ln 
yr assume events false 
follows ax min ln 
yr min ln yr desired 
choice bk factor 
value cherno bounds yr pr exp min ln 
yr 
exp 
min yr recall jm 
yr assumption yr 
allowed obtain yr min yr jm 
clearly inequality holds 
pr jm hand minimum number nonzero necessary obtain value min ln 
yr 
min yr jm show transform inequality theorem condition matches requirements theorem 
de ne dependency graph 
suppose dealing mip instance de ne dependency graph contain edge gi 
fact gi may self loops 
easy check covers dependencies events 
pr qr zr de ned theorem 
pr min qr ln zr set exp min yr 
assumed step yr holds ln ln ln zr theorem zr zr 
zr 
zr hand 
zr furthermore due holds qr zr obtain inequality theorem de ne trials events theorem 
represent trials tn represent events am obviously event determined outcome trials represented furthermore represent set counting shown jm restricted set applied event de ne true bk 
min ln 
yr ensures assumption event decomposed constant number events false claimed theorem obtain desired asymptotic approximation ratio 
showed jsj jm de nition yields pr set pr jm trials needed violate deviation bound 
aspect application directly match requirements theorem 
demand event bad lll algorithm counting added component 
regard insertion event set trials considered changes number trials covered component jm jt jm size nal components changes ln ln 
log may possible nd nal solution exhaustive search 
event participating component probability true 
furthermore follows claim component nodes 

events order events probability true 
expected constant number random experiments suce component obtain nal solution 
step mip algorithm done polynomial time 
step final rounding recall vector resulting step 
bk yr de ned previous step 
step works phase step di erence random experiment simply consists rounding integral vector way set probability assuming yr holds pr 
min ln yr exp 
min yr ln constant 
step apply theorem obtain altogether approximation ratio row concludes proof theorem 
applications section applications method job shop scheduling max sat 
job shop scheduling acyclic job shop scheduling problems jobs machines 
job composed sequence operations performed di erent machines 
legal schedule job operations carried order machine performs operation unit time 
denotes length longest job denotes number time units requested jobs loaded machine clearly lb max lower bound length shortest legal schedule 
denote longest operation job machine 
best constructive upper bounds known acyclic jss lb log lb log log lb shmoys stein wein improved log log lb factor goldberg paterson srinivasan 
nonconstructive results shown makespan job shop schedules 
techniques results small loss obtain exponent terms 
particular show result holds 
theorem 
polynomial time acyclic job shop schedules computed upper bounds makespan constant 
acyclic jss problem log log log log min log log implying lb log lb log log lb 
observe 
constant 

operation lengths depend machine operation performed log log 

preemption log log 
order prove theorem existence proof intermediate schedule 
help theorem re ning length multiple log log rest proof omitted extended 
satisfiability approaches provide approximation algorithms max sat problems 
pioneered johnson raghavan thompson improved yannakakis goemans williamson asano :10.1.1.3.9509
approaches simple randomized rounding strategy 
approach may help improve step consider boolean formula cnf 
give example express max sat problem formula reverse form mip called maximin integer program mip de ned follows 
de nition 
mip variables fx integers denote dimensional vector variables mip seeks maximize real subject 
system linear inequalities ax dimensional vector variable component 


dependency graph mips result holds mips 
theorem 
mip instance optimal fractional solution consider random experiment setting probability case 
vector pr maxc ar 
pr cherno bound pr ax 
constant chosen min furthermore qr ln zr suciently small positive constant 
holds qr zr zs algorithm nds vector polynomial time ax proof 
proof theorem identical proof theorem 
random variables considered cherno bounds section weakly negatively correlated techniques applied 
furthermore change rule jm set set mips ect deviation bound instance max sat de ned set boolean clauses clause disjunction literals positive weight 
fx xng set boolean variables clauses means true means false 
literal variable negation de ne assume literals variable appear clause clause denoted nd optimal solution integer program maximize subject replace conditions optimal solution lp polynomial time 
order express solution mip variables inequality represented row property ax obviously best possible obtained lp relaxation mip value objective function case randomized rounding technique aim nd integral vector ax chosen probabilities satisfy conditions theorem techniques exploit non uniform properties mip corresponding max sat problem nd approximate solutions polynomial time 

powerful technique exploit non uniform properties mips order nd approximate solutions 
applied technique job shop scheduling max sat 
upper bounds obtained job shop scheduling problems signi cantly improve previously known upper bounds 
expect techniques applications types integer programs combinatorial optimization problems 

alon 
parallel algorithmic version local lemma 
random structures algorithms 
alon bar noy linial peleg 
lower bound radio broadcast 
journal computer system science 
alon mcdiarmid reed 
acyclic coloring graphs 
random structures algorithms 
alon spencer erd os 
probabilistic method 
john wiley sons new york 
asano hori ono hirata 
theoretical framework hybrid approaches max sat 
proc 
th symp 
algorithms computation isaac pages 
asano williamson 
improved approximation algorithms max sat 
proc 
th acm symp 
discrete algorithms soda pages 
beck 
algorithmic approach lov asz local lemma 
random structures algorithms 
broder frieze upfal 
static dynamic path selection expander graphs random walk approach 
proc 
th acm symp 
theory computing stoc pages 
scheideler 
coloring non uniform hypergraphs new algorithmic approach general lov asz local lemma 
proc 
th acm symp 
discrete algorithms soda pages 
erd os lov asz 
problems results chromatic hypergraphs related questions 
hajnal os editors nite finite sets paul erd os th birthday pages 
north holland amsterdam 
erd os spencer 
lov asz local lemma latin transversals 
discrete applied mathematics 
feige scheideler 
improved bounds acyclic job shop scheduling 
proc 
th acm symp 
theory computing stoc pages 
kahn 
dimensions ordered sets bounded degree 
order 
goemans williamson 
new approximation algorithms maximum satis ability problem 
siam journal computing 
goemans williamson 
improved approximation algorithms maximum cut satis ability problems semide nite programming 
journal acm 
goldberg paterson srinivasan 
better approximation guarantees jobshop scheduling 
proc 
th acm symp 
discrete algorithms soda pages 
hind molloy reed 
colouring graph 
combinatorica 
johnson 
approximation algorithms combinatorial problems 
journal computer system science 
leighton maggs rao 
packet routing job shop scheduling congestion dilation steps 
combinatorica 
leighton maggs richa 
fast algorithms nding congestion dilation packet routing schedules 
technical report cmu cs school computer science carnegie mellon university pittsburgh pa usa 
leighton rao srinivasan 
new algorithmic aspects local lemma applications routing partitioning 
proc 
th acm symp 
discrete algorithms soda pages 

lu 
deterministic approximation algorithm minmax integer programming problem 
proc 
th acm symp 
discrete algorithms soda pages 
molloy reed 
algorithmic aspects local lemma 
proc 
th acm symp 
theory computing stoc pages 
radhakrishnan srinivasan 
improved bounds algorithms hypergraph coloring 
proc 
th ieee symp 
foundations computer science focs pages 
raghavan thompson 
randomized rounding technique provably algorithms algorithmic proofs 
combinatorica 
reed 

journal graph theory 
schmidt siegel srinivasan 
cherno hoe ding bounds applications limited independence 
siam journal discrete mathematics 
shmoys stein wein 
improved approximation algorithms shop scheduling problems 
siam journal computing 
spencer 
probabilistic methods 
graham gr lov asz editors handbook combinatorics chapter 
elsevier science amsterdam 
srinivasan 
extension lov asz local lemma applications integer programming 
proc 
th acm symp 
discrete algorithms soda pages 
yannakakis 
approximation maximum satis ability 
journal algorithms 
