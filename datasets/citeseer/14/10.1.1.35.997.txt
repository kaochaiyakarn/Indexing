taxonomy computer program security flaws examples carl landwehr alan bull john mcdermott william choi information technology division code naval research laboratory washington organized record actual flaws useful computer system designers programmers analysts administrators users 
provides taxonomy computer program security flaws appendix carefully documents actual security flaws 
flaws described previously open literature widely separated places 
new field computer security provide characteristics security flaws arise 
flaws randomly selected valid statistical sample flaws strong claims concerning distribution actual security flaws taxonomy 
method organizing security flaw data help custody representative samples organize focus efforts remove eventually prevent security flaws 
categories subject descriptors operating systems security protection access controls authentication information flow controls invasive software management computing information systems security protection authentication invasive software software engineering general protection mechanisms software engineering management life cycle software configuration management management computing information systems software management software development software maintenance general terms security additional keywords phrases security flaw error defect classification taxonomy 
revised publication acm computing surveys sept 
version prepared electronic distribution reflects final revisions authors incorporate computing surveys copy editing 
resembles differs minor details published version 
figures redrawn electronic distribution slightly precise differs table adjusted reflect 
knowing systems failed help build systems resist failure 
point context engineering design software failures may visible bridges describes equally damaging 
history software failures apart highly visible ones leveson turner spafford relatively undocumented 
collects organizes number actual security flaws caused failures designers programmers analysts may precise knowledge gone 
computer security flaws conditions circumstances result denial service unauthorized disclosure unauthorized destruction data unauthorized modification data landwehr 
taxonomy attempts organize information flaws new flaws added readers gain fuller understanding parts systems parts system life cycle generating security flaws 
information useful designers faced difficult task assessing security system built 
accurately assess security computer system analyst find vulnerabilities 
analyst understand system thoroughly recognize taxonomy computer program security flaws landwehr bull mcdermott choi appear acm computing surverys sept computer security flaws threaten system security may exist system 
legitimate concern kind information assist attack computer systems 
partly reason limited cases described publicly documented relatively old 
suggest assembled representative random sample known computer security flaws tried include wide variety 
offer taxonomy presently responsible repelling attacks correcting flaws 
data organized way abstracted focus efforts remove security flaws prevent 
taxonomies carl chillarege developed organizing data software defects anomalies kinds 
primarily oriented collecting data software development process purpose improving 
primarily concerned security flaws detected software released operational taxonomy incompatible efforts reflects perspective 
security flaw program 
question akin bug 
fact inadvertently introduced security flaw program bug 
generally security flaw part program cause system violate security requirements 
finding security flaws demands knowledge system security requirements 
requirements vary system application address detail 
usually concern identification authentication users authorization particular actions accountability actions taken 
tried keep term flaw intuitive conflicting standard terminology 
ieee standard glossary software engineering terminology ieee computer society includes definitions error human action produces incorrect result software containing fault fault incorrect step process data definition computer program failure inability system component perform required functions specified performance requirements 
failure may produced fault encountered 
glossary lists bug synonym error fault 
flaw synonym bug ieee terms synonym fault include flaws inserted system intentionally accidental ones 
ifip wg published taxonomy definitions terms laprie area 
define faults cause errors may lead failures 
system fails delivered service longer complies specification 
definition error consistent error detection correction applied noisy communication channels unreliable memory components ieee 
notion flaw corresponds fault possibility fault may introduced accidentally maliciously 
look security flaws computer programs 
early computer security penetrate patch paradigm analysts searched security flaws attempted remove 
unfortunately task cases flaws appear neumann schell 
fix flaw introduced new flaws flaws repaired system operation depended cases appendix 
experience led researchers seek better ways building systems meet security requirements place attempting flawed systems installed 
success attained identifying better strategies building contents 
previous 
taxonomy genesis time location 
discussion limitations inferences acknowledgments appendix selected security flaws taxonomy computer program security flaws landwehr bull mcdermott choi appear acm computing surverys sept systems department defense landwehr techniques universally applied 
importantly eliminate need test newly built modified system example sure flaws avoided initial specification haven introduced implementation 

previous serious efforts locate security flaws computer programs penetration exercises flaw hypothesis methodology developed early linde 
method requires system developers familiar details way system works control structure generate hypotheses flaws exist system system documentation tests confirm presence flaw generalize confirmed flaws information guide efforts 
linde provides lists generic system functional flaws generic operating system attacks provide systematic organization security flaws 
mid research secured operating systems risos project conducted lawrence livermore laboratories protection analysis project conducted information sciences institute university southern california usc isi attempted characterize operating system security flaws 
risos final report abbott describes categories operating system security flaws incomplete parameter validation inconsistent parameter validation implicit sharing privileged confidential data asynchronous validation inadequate serialization inadequate identification authentication authorization prohibition limit exploitable logic error 
report describes generic examples flaw category provides reasonably detailed accounts actual flaws operating systems ibm os series 
flaw assigned categories 
goal protection analysis pa project collect error examples patterns hoped useful automating search flaws 
final report errors permit system penetrations recorded different operating systems multics unix addition investigated risos 
unfortunately error database published longer exists 
researchers publish examples develop classification scheme errors 
initially hypothesized error categories eventually reorganized global categories domain errors including errors exposed representation incomplete destruction data deallocated object incomplete destruction context validation errors including failure validate operands handle boundary conditions properly queue management naming errors including aliasing incomplete revocation access deallocated object serialization errors including multiple errors interrupted atomic operations 
researchers felt developed successful method finding errors operating systems technique resisted automation 
research attention shifted finding flaws systems developing methods building systems free errors 
goals limited earlier efforts seek primarily provide understandable record security flaws occurred 
ambitious seek categorize details flaw genesis flaw time place entered system 

taxonomy taxonomy simply neutral structure categorizing specimens 
implicitly embodies theory universe specimens drawn 
defines data recorded specimens distinguished 
creating taxonomy computer program security flaws way creating theory flaws seek answers particular questions collection flaw instances organize taxonomy accordingly 
fundamentally concerned problems building operating systems enforce security policies ask basic questions observed flaw enter system 
enter system 
system manifest 
questions motivates subsection taxonomy flaw recorded subsection 
taxonomy computer program security flaws landwehr bull mcdermott choi appear acm computing surverys sept reading case histories reviewing distribution flaws answers questions designers programmers analysts administrators users hope better able focus respective efforts avoid introducing security flaws system design implementation find residual flaws system evaluation certification administer operate systems securely 
figures display details taxonomy genesis time location 
note flaw appear categories 
divisions subdivisions provided categories motivation described detail 
feasible subdivisions define sets mutually exclusive collectively exhaustive categories 
especially finer levels partitioning infeasible completeness set categories assured 
general tried include categories help analyst searching flaws developer seeking prevent 
description flaw category refers applicable cases listed appendix 
open literature reports security flaws fail provide realistic view system vulnerabilities 
studies provide examples actual vulnerabilities existing systems sketchy incomplete lest hackers abuse information 
criteria selecting cases case particular type vulnerability clearly scenario program threatens system security understood classifier potential damage resulting vulnerability described superficial 
case includes name author investigator type system involved description flaw 
case may reveal kinds security flaws 
example system programmer inserts trojan horse exploits covert channel disclose sensitive information trojan horse 
trojan horse program useful service exploits rights program user possessed author trojan horse way user intend 

covert channel communication path computer system intended system designers 
vert channel flaws operational system probably introduced maliciously inadvertently 
course system permits user invoke program vulnerable trojan horses 
fact system permits users install programs represents security flaw interesting question 
answer depend context question asked 
permitting users say air traffic control system airline reservation system install programs intuitively unsafe flaw 
hand preventing owners pcs installing programs restrictive 
cases selected appendix small sample caution unsupported generalizations flaws exhibit 
particular readers interpret flaws recorded appendix indications systems occurred necessarily secure 
cases absence system appendix simply reflects fact tested thoroughly flaws documented openly cited 
readers encouraged communicate additional cases authors better understand security flaws really occur 
balance section describes taxonomy detail 
case histories read prior details taxonomy readers may wish read appendix point 
particularly new computer security issues case descriptions intended illustrate subtlety variety security flaws occurred appreciation may help grasp taxonomic categories 
genesis security flaw find way program 
may introduced intentionally inadvertently 
different strategies avoid detect compensate accidental flaws opposed intentionally inserted 
example security flaws turn accidentally introduced increasing resources devoted code reviews testing may reasonably effective reducing number flaws 
significant security flaws introduced maliciously techniques help may productive take measures hire trustworthy programmers devote effort penetration testing invest virus detection packages 
goal recording distinction ultimately collect data taxonomy computer program security flaws landwehr bull mcdermott choi appear acm computing surverys sept count case id genesis intentional malicious trojan horse replicating virus inadvertent trapdoor logic time bomb covert channel storage timing validation error incomplete inconsistent domain error including object re residuals exposed representation errors serialization aliasing including tocttou errors identification authentication inadequate boundary condition violation including resource exhaustion constraint errors exploitable logic error pc pc pc pc ma ma ca mt mu mu mu dt mt mt mu un mu mt mu mu mu mu fig 

security flaw taxonomy flaws genesis 
parenthesized entries indicate secondary assignments 
time development operation maintenance requirement specification design source code object code mt mt mu mu un mt mt mu mu mu mu mu dt mu mu pc pc pc pc ma ma ca count case id fig 

security flaw taxonomy flaws time taxonomy computer program security flaws landwehr bull mcdermott choi appear acm computing surverys sept provide basis deciding strategies particular context 
characterizing intention tricky features intentionally placed programs time inadvertently introduce security flaws feature facilitates remote debugging system maintenance may time provide trapdoor system 
cases distinguished categorized intentional non malicious 
wishing endow programs intentions terms malicious flaw malicious code shorthand flaws code introduced system individual malicious intent 
malicious flaws disguised inadvertent flaws distinction possible practice inadvertently created trojan horse programs hardly 
inadvertent flaws requirements specifications ultimately manifest implementation flaws may introduced inadvertently maintenance 
malicious flaws non malicious flaws difficult detect intentionally hidden residual flaws may occur rarely invoked parts software 
may expect malicious code attempt cause significant damage system inadvertent flaw exploited malicious intruder equally dangerous 
malicious flaws malicious flaws acquired colorful names including trojan horse trapdoor time bomb logic bomb 
term trojan horse introduced dan edwards recorded james anderson anderson characterize particular computer security threat redefined times anderson landwehr denning gasser 
generally refers program useful service exploits rights program user rights possessed author trojan horse way user intend 
author malicious code needs disguise invoked non malicious user author means invoke code case presumably possesses authorization perform intended sabotage malicious code called trojan horse 
trojan horse replicates copying code program files see case ma commonly referred virus cohen pfleeger 
replicates creating new processes files contain code modifying existing storage entities called worm 
denning provides general discussion terms differences opinion term applicable particular flaw occur cohen spafford 
location software operating system support hardware system initialization memory management process management scheduling device management including networking file management identification authentication unknown privileged utilities unprivileged utilities application count case id pc pc ma ma ca mt mu mt mt mu mu mu mu mu un mu mu dt mt pc pc mu fig 

security flaw taxonomy flaws location taxonomy computer program security flaws landwehr bull mcdermott choi appear acm computing surverys sept trapdoor hidden piece code responds special input allowing user access resources passing normal security enforcement mechanism see case 
example programmer automated teller machines atms required check personal identification number pin read card number keyed user 
numbers match user permitted enter transactions 
adding disjunct condition implements test programmer provide trapdoor shown italics permit transactions example universal pin bank card submitted atm 
course code example easy code reviewer atm user spot malicious programmer need take additional steps hide code implements trapdoor 
passwords stored system file user supplied card special password known intruder mixed file legitimate ones difficult reviewers find 
argued login program trapdoor really trojan horse sense defined terms usually distinguished denning 
thompson describes method building trojan horse compiler install trapdoor unix password checking routine versions unix system 
time bomb logic bomb piece code remains dormant host system certain detonation time event occurs see case 
triggered time bomb may deny service crashing system deleting files degrading system 
time bomb placed replicating non replicating trojan horse 
intentional non malicious flaws trojan horse program may convey sensitive information penetrator covert channels 
covert channel simply path transfer information way intended system designers lampson 
covert channels definition channels placed intentionally appear category inadvertent flaws 
categorize intentional non malicious flaws frequently arise resource sharing services intentionally part system 
difficult ones eliminate arise fulfillment essential system requirements 
creation exploitation malicious 
exploitation covert channel usually involves service program trojan horse 
program generally access confidential data encode data transmission covert channel 
contain receiver program listens chosen covert channel decodes message penetrator 
service program communicate confidential data directly penetrator monitored course need covert channel 
covert channels frequently classified storage timing channels 
storage channel transfers information setting bits program reading bits 
distinguishes case ordinary operation bits convey encoded information 
examples include file intended hold audit information convey user passwords name file status bits associated read users signal contents file 
timing channels convey information modulating aspect system behavior time program receiving information observe system behavior system paging rate time certain transaction requires execute time takes gain access shared bus infer protected information 
distinction storage timing channels sharp 
exploitation kind channel requires degree synchronization sender receiver 
requires ability modulate behavior shared resource 
practice covert channels distinguished basis detected detectable information flow analysis specifications code considered storage channels 
kinds intentional non malicious security flaws possible 
functional requirements written regard security requirements lead flaws flaws exploited internet worm spafford case placed category 
flaws inadvertent flaws may occur requirements may find way software specification coding 
detected removed testing flaws remain undetected cause problems operation maintenance software system 
software system composed modules involving programmers flaws difficult find correct taxonomy computer program security flaws landwehr bull mcdermott choi appear acm computing surverys sept module interfaces inadequately documented global variables 
lack documentation especially troublesome maintenance attempts fix existing flaws generate new flaws maintainers lack understanding system 
inadvertent flaws may pose immediate threat security system weakness resulting flaw may exploited intruder see case 
possible ways organize flaws category 
chillarege sullivan chillarege published classifications defects necessarily security flaws commercial operating systems databases 
framework supports counting problems defects attempt characterize defect types 
efforts abbott reviewed section provide classifications specifically security flaws 
goals part taxonomy primarily descriptive seek classification provides reasonable map terrain computer program security flaws permitting group intuitively similar kinds flaws separate different ones 
providing secure operation computer corresponds building fences different pieces software different instantiations piece software building gates fences building mechanisms control monitor traffic gates 
taxonomy draws primarily abbott reflects view 
knowing types distribution actual inadvertent flaws kinds mechanisms provide information help designers programmers analysts focus activities 
inadvertent flaws classified flaws related validation errors domain errors serialization aliasing errors errors inadequate identification authentication boundary condition errors exploitable logic errors 
validation flaws may likened lazy gatekeeper fails check credentials traveler seeking pass gate 
occur program fails check parameters supplied returned conform assumptions checks misplaced 
assumptions may include number parameters provided type location maximum length buffer access permissions file 
lump cases incomplete validation parameters checked inconsistent validation different interface routines common data structure fail apply set checks 
domain flaws correspond holes fences occur intended boundaries protection environments porous 
example user creates new file discovers contains information file deleted different user discovered domain flaw 
kind error referred problem object reuse residuals 
include category flaws exposed representation lower level representation object intended hidden current domain fact exposed see cases dt 
errors classed abbott implicit sharing privileged confidential data generally fall category 
serialization flaw permits asynchronous behavior different system components exploited cause security violation 
terms fences gates metaphor reflect forgetful gatekeeper checks credentials gets distracted forgets result 
flaws particularly difficult discover 
security critical program may appear correctly validate parameters flaw permits asynchronous behavior program change parameters checked 
time time tocttou flaws fall category may classed validation errors asynchrony involved 
include category aliasing flaws fact names exist object cause contents change unexpectedly consequently invalidate checks applied 
identification authentication flaw permits protected operation invoked sufficiently checking identity authority invoking agent 
flaws counted validation flaws presumably routine failing validate authorizations properly 
sufficiently large number cases occurred checking identity authority user initiating operation fact neglected keep separate category 
boundary condition flaws typically reflect omission checks assure constraints table size file allocation resource consumption exceeded 
flaws may lead system crashes degraded service may cause unpredictable behavior 
gatekeeper queue full decides lock gate go home represent situation 
taxonomy computer program security flaws landwehr bull mcdermott choi appear acm computing surverys sept include category exploitable logic errors 
bugs invoked users cause system crashes don involve boundary conditions placed category example 
time software engineering literature includes variety studies weiss basili chillarege investigated general question errors introduced software 
part motivation studies improve process software developed parts software development cycle produce errors identified efforts improve software development process focused prevent remove 
distribution life cycle security flaws introduced distribution errors generally 
classifying identified security flaws intentional inadvertent phase system life cycle introduced help find 
models system life cycle software development process years 
permit categorize security flaws wide variety systems need relatively simple structure accommodate variety models 
consequently highest level distinguish different phases system life cycle security flaws may introduced development phase covers activities release initial operational version software maintenance phase covers activities leading changes software performed configuration control initial release operational phase covers activities patch software operation including unauthorized modifications virus periods operational maintenance phases overlap coincide reflect distinct activities distinction fit best part taxonomy 
development iteration phases software development recognized fact life different phases comprise distinguishable activities 
requirements defined specifications developed new changed requirements source code developed specifications object code generated source code 
iteration phases explicit software process models activities recognized separate categories effort appropriate categorize flaws introduced software development originating requirements specifications source code object code 
requirements specifications ideally software requirements describe particular program system programs 
program system organized meet requirements software design typically recorded variety documents referred collectively specifications 
distinguish flaws arising faulty requirements introduced specifications information lacking cases report ignore distinction 
major flaw requirement unusual large software system 
flaw affects security correction deemed cost effective system flaw may remain 
example early multiprogramming operating system performed related functions having supervisor program execute code located user memory supervisor state full system privileges 
time recognized security flaw removal caused major incompatibilities software fixed 
case reports related flaw 
requirements specifications relatively contain maliciously introduced flaws 
normally reviewed extensively specification trapdoor trojan horse disguised avoid detection 
flaws arise competition security requirements functional requirements see case 
example security concerns dictate programs modified operational site 
delay repairing errors detected system operation perceived great pressure provide mechanisms specification permit site reprogramming testing see case 
mechanisms provide built security loopholes 
possible inadvertent flaws arise missing requirements undetected conflicts requirements 
source code source code implements design software system specifications 
flaws source code inadvertent intentional detected careful examination 
classes inadvertent flaws described previously apply source code 
inadvertent flaws source code frequently byproduct inadequately defined module process inter taxonomy computer program security flaws landwehr bull mcdermott choi appear acm computing surverys sept faces 
programmers attempting build system inadequate specifications misunderstand meaning type parameters passed interface requirements synchronizing concurrent processes 
misunderstandings manifest source code flaws 
source code clearly implemented specified assign flaw specification cases mu example flaw manifest code confirm corresponds specification assign flaw source code see cases mu 
readers aware difficulty making assignments 
intentional non malicious flaws introduced source code reasons 
programmer may introduce mechanisms included specification intended help debugging testing normal operation code 
test scaffolding circumvents security controls left place operational system provides security flaw 
efforts efficient lead intentional non malicious source code flaws case dt 
programmers may decide provide undocumented facilities simplify maintenance provide security loopholes inclusion patch area facilitates reprogramming outside scope configuration management system fall category 
technically sophisticated malicious flaws introduced source code level 
programmer working source code level authorized member development team intruder invoke specific operations compromise system security 
malicious source code detected manual review software software developed review source code frequently provided software packages supplied purchaser resources necessary review malicious code 
programmer aware review process may able disguise flaws introduces 
malicious source code flaw may introduced directly individual gains write access source code files source code flaws introduced indirectly 
example programmer authorized write source code files unwittingly invokes trojan horse editor compiler linker loader trojan horse programmer privileges modify source code files 
instances subtle indirect tampering source code difficult document trojan horse programs grossly modify user files source code files created see cases pc pc 
object code object code programs generated compilers assemblers represent machine readable form source code 
compilers assemblers subjected extensive testing formal validation procedures release inadvertent flaws object programs simply translation source code flaws rare particularly compiler assembler mature widely 
errors occur result errors compiler assembler typically show incorrect behavior programs unusual cases quite difficult track remove 
kind flaw rare primary security concern object code level malicious flaws 
object code difficult human sense software companies different policies selling source code object code products hiding place malicious security flaws see case thompson 
lacking system source code documentation intruder hard time patching source code introduce security flaw simultaneously altering visible behavior program 
insertion malicious object code module replacement existing object module version incorporates trojan horse common threat 
writers trojan horses viruses pfleeger typically taken approach bogus object module prepared inserted initial target system 
invoked system boot running substitute version existing utility search disks mounted system copy finds insert 
finds related uninfected version program replace infected copy user unwittingly moves infected program different system executes virus gets chance propagate 
replacing entire program virus may append existing object program segment executed see cases pc ca 
creating virus generally requires knowledge operating system programming conventions target system viruses especially introduced object code typically propagate different host hardware operating systems 
maintenance inadvertent flaws introduced maintenance attributable maintenance programmer failure taxonomy computer program security flaws landwehr bull mcdermott choi appear acm computing surverys sept understand system 
software production facilities high personnel turnover rate system documentation inadequate maintenance actions unpredictable side effects 
flaw fixed ad hoc basis performing backtracking analysis determine origin flaw tend induce flaws cycle continue 
software modified maintenance subjected review newly developed software subject kinds flaws 
case graphically shows system upgrades performed controlled environment best intentions introduce new flaws 
case flaw inadvertently introduced subsequent release dec operating system successful evaluation level trusted computer system evaluation criteria department defense 
system analysts aware possibility malicious intrusion maintenance stage 
fact viruses maintenance stage viruses definition spread infection executable codes 
operation publicized instances virus programs denning dewitt need security analyst consider possibilities unauthorized modification operational software operational 
viruses means modifications occur depending controls place system ordinary users may able modify system software install replacements stolen password intruder may able thing 
furthermore software brought host contaminated source software public bulletin board unknown author altered may able modify host software authorization see case ma 
location security flaw classified system introduced 
computer security flaws occur software flaws affecting security may occur hardware 
taxonomy principally addresses software flaws programs increasing facility cast hardware 
fact possibility malicious software may exploit hardware flaws motivates brief section addressing 
flaw program frozen silicon program flaw placed appropriate category operating system hardware 
reserve category cases hardware exhibits security flaws originate errors programs 
software flaws classifying place software flaw introduced adopt view security analyst searching flaws 
look 
operating system typically defines enforces basic security architecture system fences gates flaws security critical portions operating system far reaching effects best place 
search needs focused 
taxonomy area suggests particular system functions scrutinized closely 
cases implementation functions may extend outside operating system perimeter support application software case software reviewed 
software flaws occur operating system programs support software application user software 
coarse division boundaries clear 
operating system programs operating system functions normally include memory processor allocation process management device handling file management accounting standard definition 
operating system determines underlying hardware define separate protection domains authenticate users control access coordinate sharing system resources 
addition functions may invoked user calls traps interrupts operating systems include programs processes operate behalf users 
programs provide network access mail service schedule invocation user tasks perform miscellaneous services 
systems privileges utilities deny individual users 
operating system large role play system initialization 
strict sense initialization may involve programs processes outside operating system boundary software usually intended run highly controlled circumstances may special privileges appropriate include category 
categorize operating system security flaws occur functions taxonomy computer program security flaws landwehr bull mcdermott choi appear acm computing surverys sept system initialization memory management process management device management including networking file management identification authentication 
include unknown category flaws fall preceding classes 
possible orient portion taxonomy strongly specific security related functions operating system access checking domain definition separation object reuse 
chosen categorization partly comes closer reflecting actual layout typical operating systems correspond closely physical structure code reviewer examines 
code single security related function distributed separate parts operating system regardless ought 
practice reviewer able draw single circle process management code discretionary access control code 
second reason choice taxonomy genesis provides subarea inadvertent flaws structure reflects security functions repeating structure redundant 
system initialization may handled routinely complex 
flaws area occur operating system fails establish initial protection domains specified example may set ownership access control information improperly system administrator specified secure initial configuration system 
case improperly set permissions mail directory led security breach 
viruses commonly try attach system initialization code provides earliest predictable opportunity gain control system see cases pc example memory management process management functions operating system provides control storage space cpu time 
errors functions may permit process gain access improperly case deny service case mu 
device management includes complex programs operate parallel cpu 
factors writing device handling programs challenging prone subtle errors lead security flaws see case 
errors occur routines fail respect parameters provided case validate parameters provided storage locations altered directly indirectly user programs checks case 
file systems typically process memory device management functions create long term storage structures 
exceptions operating system boundary includes file system implements access controls permit users share protect files 
errors controls management underlying files easily result security flaws see cases mu 
identification authentication functions operating system usually maintain special files user ids passwords provide functions check update files appropriate 
important functions possible ports entry system ensure functions invoked user permitted consume control system resources 
support software support software comprises compilers editors debuggers subroutine macro libraries database management systems programs properly operating system boundary users share 
operating system may special privileges programs call privileged utilities 
unix example setuid program owned root effectively runs access checking controls disabled 
means program need scrutinized security flaws execution fundamental security checking mechanisms disabled 
privileged utilities complex provide functions anticipated operating system built 
characteristics difficult develop flaws granted privileges compromise security 
example daemons may act behalf sequence users behalf system may privileges reading writing special system files devices communication lines device queues mail queues files belonging individual users mailboxes 
frequently heavy operating system facilities privileges may turn simple programming error penetration path 
flaws daemons providing remote access restricted system capabilities exploited permit unauthenticated users execute arbitrary system commands case gain system privileges writing system authorization file case 
taxonomy computer program security flaws landwehr bull mcdermott choi appear acm computing surverys sept unprivileged software represent significant vulnerability programs widely shared users tend rely implicitly 
damage inflicted flawed unprivileged support software embedded trojan horse normally limited user invokes software 
cases may compile new release system support software sabotage operating system integrity case 
inadvertent flaws support software cause security flaws case intentional non malicious flaws support software recorded case 
application software categorize programs special system privileges widely shared application software 
damage caused inadvertent software flaws application level usually restricted executing process operating systems prevent process damaging 
mean application software significant damage user stored files victims trojan horse virus programs painfully aware 
application program generally executes privileges user invokes including ability modify permissions read write delete files user owns 
context personal computers means errant malicious application program fact destroy information attached hard disk writeable floppy disk 
inadvertent flaws application software cause program termination incorrect output generate undesirable conditions infinite looping discussed previously 
malicious intrusion application software level usually requires access source code virus conceivably attach application object code accomplished various ways discussed section 
hardware issues concern hardware level include design implementation processor hardware supporting chips hardware firmware functions realize machine instruction set architecture 
uncommon widely distributed processor chips incompletely specified deviate specifications special cases include undocumented features 
inadvertent flaws hardware level cause problems improper synchronization execution bit loss data transfer incorrect results execution arithmetic logical instructions see case mu 
intentional non malicious flaws occur hardware particularly manufacturer includes undocumented features example assist testing quality control 
hardware mechanisms resolving resource contention efficiently introduce covert channels see case 
malicious modification installed hardware installing bogus replacement chip board generally requires physical access hardware components microcode flaws exploited physical access 
intrusion hardware level may result improper execution programs system shutdown conceivably subtle flaws exploitable software 

discussion suggested taxonomy defines theory field taxonomy teaches little 
reason security flaw examples documented appendix important taxonomy 
reviewing examples help readers understand distinctions various categories apply distinctions new examples 
section comment briefly limitations taxonomy set examples suggest techniques summarizing flaw data help answer questions section motivate taxonomy 
limitations development taxonomy focused largely exclusively flaws operating systems 
tried distinguish categorize kinds security flaws occur application programs database management word processing electronic mail 
suggest useful structures defined areas encourage identify document 
operating systems tend responsible enforcing fundamental system security boundaries detailed application dependent access control policies required particular environment practice left application enforce 
case application system security policies compromised operating system policies 
hope taxonomy stimulate collect report flaw data readers recognize approach evaluating problems systems built 
intelligently information collected organized way taxonomy computer program security flaws landwehr bull mcdermott choi appear acm computing surverys sept help build stronger systems factors affect security system captured approach 
example system great deal software trusted contain security flaws relatively small amount code conceivably cause security breaches 
security failures accidents triggered unexpected combination events 
cases assignment flaw category may rest relatively fine distinctions 
avoid drawing strong distribution relatively small number flaw reports 
flaws reported appendix selected random comprehensive 
flaws networks applications increasingly important distribution flaws categories defined may stationary 
strictly flaws captured appendix remain tentative 
inferences despite limitations important consider kinds inferences draw set flaw data organized taxonomy 
probably straightforward way display data illustrated figs 

listing case identifiers counts category frequency flaws categories roughly apparent display give approximate answers questions motivated taxonomy security flaws occur 
straightforward approach difficult perceive relationships taxonomies determining relationship time flaw introduced location system example relatively difficult 
provide informative views collected data propose set scatter plots shown figs 

captures position case taxonomies genesis time location 
flaw location genesis plotted axes respectively symbol plotted reflects time flaw introduced 
choosing appropriate set symbols possible distinguish cases differ single parameter 
cases categorized identically points coincide exactly single symbol appear plot 
distinguish combinations categories occur information relative frequency cases obscured 
figures remedy problem 
figures categories plotted axes number observations corresponding pair categories controls diameter circle plot point 
large circle indicates different flaws category small circle indicates single occurrence 
set flaw data reveals large diameter circles efforts flaw removal prevention targeted problems circles reflect 
suppose moment data plotted figures fact valid basis inferring origins security flaws generally 
actions indicated 
large circles lower left corner fig 
example taken signal emphasis placed domain definition parameter validation early stages software development 
claim selection security flaws statistically representative plots draw strong security flaws introduced 
believe kinds plots shown effective way information extensive sensitive data sets 
observations experiences creating taxonomy applying examples 
clear security breaches accidents typically causes 
unwarranted assumptions aspect system behavior lead security flaws 
problems arising asynchronous modification previously checked parameter illustrate point person coded check assumed cause parameter change asynchronously operating process fact 
dangerous assumption security need addressed environment fundamentally benign security added 
unix personal computer operating systems clearly illustrate cost assumption 
surprised systems designed particular regard security requirements exhibit security flaws 
systems live world potentially painful surprises 
appendix selected security flaws case studies exemplify security flaws 
making claims completeness representativeness set examples believe help designers know pitfalls avoid security analysts know look examining taxonomy computer program security flaws landwehr bull mcdermott choi appear acm computing surverys sept intentional covert timing chan 
covert storage chan 
time logic bomb trapdoor virus trojan horse inadvertent bd 
condition viol 
identification auth 
serialization alias 
domain validation system memory mgmt process mgmt init device mgmt file mgmt ident auth 
unknown priv 
utilities 
utilities applica tions hardware intentional covert timing chan 
covert storage chan 
time logic bomb trapdoor virus trojan horse inadvertent bd 
condition viol 
identification auth 
serialization alias 
domain validation system memory mgmt process mgmt init device mgmt file mgmt ident auth 
unknown priv 
utilities 
utilities applica tions hardware flaw location flaw genesis fig 
example flaws genesis vs location life cycle flaw location fig 
example flaws genesis vs location number examples appendix flaw genesis spec design source code object code maintenance operation taxonomy computer program security flaws landwehr bull mcdermott choi appear acm computing surverys sept hardware applications utilities priv 
utilities unknown ident auth 
file mgmt 
device mgmt 
process mgmt 
memory mgmt 
system init 
spec design source code object code maintenance operation time life cycle flaw introduced fig 
example flaws location vs time number examples appendix flaw location intentional covert timing chan 
covert storage chan 
time logic bomb trapdoor virus trojan horse inadvertent bd 
condition viol 
identification auth 
serialization alias 
domain validation spec design source code object code maintenance operation time life cycle flaw introduced fig 
example flaws genesis vs time introduced number examples appendix flaw genesis taxonomy computer program security flaws landwehr bull mcdermott choi appear acm computing surverys sept code specifications operational guidance security flaws 
cases documented possibly reflect actual flaws released software hardware 
case source usually publication cited software hardware system flaw occurred identified flaw effects briefly described flaw categorized taxonomy 
difficult determine certainty time place flaw introduced probable category judgment authors chosen uncertainty indicated annotation 
cases flaw fully categorized 
example flaw introduced requirements specification phase place code flaw located may omitted 
cases grouped systems occurred unix accounts third flaws reported considered single system systems ordered roughly chronologically 
readers may familiar details architectures included brief introductory discussions relevant details provided appropriate 
table lists code refer specific flaw number page flaw described 
ibm systems ibm system architecture program status word psw defines key components system state 
include current machine state problem state supervisor state current storage key 
instruction subsets defined problem state instruction set excludes privileged instructions loading psw initiating operations supervisor state instruction set includes instructions 
attempting execute privileged operation problem state causes interrupt 
problem state program wishes invoke privileged operation normally issuing supervisor call svc instruction causes interrupt 
main storage divided byte pages page associated bit storage key 
typically user memory pages assigned storage key system storage page assigned storage key 
task executing nonzero key permitted unlimited access pages storage keys match table 
codes refer systems flaw code system page flaw code system page flaw code system page ibm os mu multics unix ibm vm mu multics unix ibm vm mu multics unix ibm vm mu multics unix ibm mvs mu multics unix ibm mvs burroughs dec vms ibm mvs un dec ibm dt dec intel ibm kvm unix pc ibm pc mt mts unix pc ibm pc mt mts unix pc ibm pc mt mts unix pc ibm pc mt mts unix ma apple macintosh mu multics unix ma apple macintosh mu multics unix ca mu multics unix mu multics unix taxonomy computer program security flaws landwehr bull mcdermott choi appear acm computing surverys sept 
read pages storage keys marked fetch protected 
attempt write page key causes interrupt 
task executing storage key zero allowed unrestricted access pages regardless key fetch protect status 
operating system functions execute storage key zero 
subsystem includes variety channels effect separate special purpose computers programmed perform data transfers main storage auxiliary devices tapes disks 
channel programs created dynamically device driver programs executed cpu 
channel started issuing special cpu instruction provides channel address main storage fetching instructions 
channel operates parallel cpu independent unrestricted access main storage 
controls portions main storage channel read write embedded channel programs 
parallelism fact channel programs intentionally self modifying provides complexity carefully controlled security flaws avoided 
os mvs multiple virtual storages multiprogramming operating systems developed ibm hardware architecture 
time sharing option tso mvs permits users submit commands mvs interactive terminals 
vm virtual machine monitor operating system hardware developed ibm 
kvm system developed department defense high security version vm 
mts michigan terminal system developed university michigan operating system designed especially support batch interactive hardware 
mvs supports category privileged non mvs programs authorized program facility apf 
apf programs operate storage key permitted invoke operations changing supervisor mode prohibited ordinary user programs 
effect apf programs assumed trustworthy act extensions operating system 
installation control programs included apf 
resource access control facility top secret security packages designed operate apf programs mvs 
case source andrew tanenbaum operating systems design implementation prentice hall englewood cliffs nj 
system ibm os description os systems file access checking mechanism subverted 
password required access file filename read user supplied password checked 
correct file name re read file opened 
possible user arrange filename altered second readings 
user initiate separate background process read data tape storage location store filename 
user request access file known password 
system verify correctness password 
password checked tape process replaced original filename file user password file opened 
flaw user cause parameters altered checked kind flaw called time check time tocttou flaw 
probably corrected copying parameters operating system storage user cause altered 
genesis inadvertent serialization time development requirement specification design place operating system file management case source attanasio markstein phillips penetrating operating system study vm integrity ibm systems journal pp 

system ibm vm description carefully exploiting oversight condition code checking retrofit basic vm design fact cpu channel programs execute simultaneously penetrator gain control system 
details flaw provided cited source appears logic error oversight condition code checking partly blame 
taxonomy computer program security flaws landwehr bull mcdermott choi appear acm computing surverys sept genesis inadvertent serialization time development requirement specification design place operating system device management case source attanasio markstein phillips penetrating operating system study vm integrity ibm systems journal pp 

system ibm vm description virtual machine monitor vm required provide services operating systems executing individual domains management routines operate running bare ibm hardware 
os operating system specifically indexed sequential access method routines exploited ability channel programs modify execution vm included arrangement portions channel programs executed user virtual machine storage vm storage 
permitted penetrator mimicking os channel program modify commands user storage executed channel overwrite arbitrary portions vm 
genesis inadvertent domain 
flaw classed intentional non malicious considered reflect conscious compromise security efficiency channel program execution compatibility existing operating system 
time development requirement specification design place operating system device management case source attanasio markstein phillips penetrating operating system study vm integrity ibm systems journal pp 

system ibm vm description performing static analysis channel program issued client operating system purpose translating issuing channel vm assumed meaning multi word channel command remained constant execution channel program 
fact channel commands vary length word execution channel program act separate command extension earlier command channel program contain backward branch middle previous multi word channel command 
careful construction channel programs exploit blind spot analysis user deny service users constructing nonterminating channel program read restricted files gain complete control system 
genesis inadvertent validation 
flaw reflect omission channel program analysis logic 
additional analysis techniques devised limit specific set channel commands permitted determining arbitrary channel program halts appears equivalent solving turing machine halting problem 
basis argued design flaw 
time development requirement specification design place operating system device management case source walter security loophole mvs operating system computer fraud security bulletin may elsevier science publishers oxford pp 

system ibm mvs tso description time sharing option tso interactive development system runs top mvs 
input output operations allowed allocated files 
files allocated tso allocate function reasons data integrity requesting user program gains exclusive file 
flaw user allowed allocate files access files 
user allocate function files system monitoring facility records tso log procedure lists user profiles production test program libraries deny service users 
genesis inadvertent validation 
flaw apparently reflects omission access permission check program logic 
taxonomy computer program security flaws landwehr bull mcdermott choi appear acm computing surverys sept time development requirement specification design 
access design information certain postulated omission occurred coding phase prior 
place operating system file management case source surreptitious security violation mvs operating system security ifip sec ed north holland pp 

system ibm mvs tso description tso attempted prevent users issuing commands operate concurrently possible program invoked tso invoke multitasking 
achieved tso command issued invoke program executed authorized program facility apf 
concurrent user task detect apf program began authorized execution storage key entire user address space including tasks effectively privileged task issue privileged operations subvert system 
flaw task gained apf privilege task able domains tasks insufficiently separated 
genesis inadvertent domain time development requirement specification design place operating system process management case source surreptitious security violation mvs operating system security ifip sec ed north holland pp 

system ibm mvs description commercial software packages database management systems installed execute authorized program facility 
effect programs operate extensions operating system operating system permits invoke operations forbidden ordinary programs 
software package trusted privileges violate protection requirements 
cases referenced source cites examples database system routines supplied cambridge systems group servicing supervisor call svc interrupts package may operations available users permit protection violated 
problem similar problem faulty unix programs run suid programs owned root see case class privileged programs developed maintained separately operating system proper subvert operating system protection mechanisms 
similar general problem permitting trusted applications 
difficult point specific flaws examining particular apf program detail 
source cites svc provided trusted application permits address space switched non apf apf status subsequently code executed address space subvert system protection 
example characterize kind flaw 
genesis intentional non malicious 
evidently svc performed function intentionally purpose subverting system protection effect 
classed inadvertent domain 
time development requirement specification design 
development trusted application place support privileged utilities case source john burgess searching better computer shield washington post nov 
system ibm description employee created number programs month intended destroy large portions data copy places disk 
triggered program fired job act 
certainly example malicious code introduced system clear technical flaw led violation 
included simply provide example time bomb 
genesis intentional malicious logic time bomb taxonomy computer program security flaws landwehr bull mcdermott choi appear acm computing surverys sept time operation place application 
case source schaefer gold linde program confinement kvm proc 
acm national conf oct 
system kvm description virtual machines shared common cpu round robin scheduling discipline access time day clock possible virtual machine detect rate received service cpu 
virtual machine signal relinquishing cpu immediately full quantum virtual machines operated different security levels information passed way 
straightforward costly way close channel scheduler wait quantum expired dispatch process 
genesis intentional covert timing channel 
time development requirements specification design 
channel occurs design choice scheduler algorithm 
place operating system process management scheduling case mt source penetration analysis michigan terminal system acm sigops operating system review jan pp 

system michigan terminal system description user trick system subroutines changing bits system segment turn protection checking gain complete control system 
flaw parameter checking method system subroutines 
subroutines retrieved parameters indirect addressing 
subroutine check indirect parameter addresses lay user storage area 
call rejected subroutine proceeded 
user defeat check constructing parameter pointed parameter list storage area 
parameter system subroutine store returned values previously checked parameters altered subsequent parameters invocation cause system modify areas system storage user lacked write permission 
flaw exploited finding subroutines return controllable values modify address second stored second alter sensitive system variable 
instance time check time problem 
genesis inadvertent validation time development source code 
access design information sure parameter checking mechanisms adequate designed place operating system process management case mt source penetration analysis michigan terminal system acm sigops operating system review jan pp 

system michigan terminal system description user direct operating system place data specifically addresses subsequent unprotected location 
altering addresses user cause system modify sensitive variables user gain control operating system 
genesis inadvertent domain time development requirement specification design place operating system process management case mt source penetration analysis michigan terminal system acm sigops operating system review jan pp 

system michigan terminal system description certain sections memory readable contained sensitive information including passwords tape identification 
details flaw provided source cited possibly represents failure clear taxonomy computer program security flaws landwehr bull mcdermott choi appear acm computing surverys sept shared input output areas reused 
genesis inadvertent 
domain 
time development requirement specification design 
place operating system memory management possibly device management case mt source penetration analysis michigan terminal system acm sigops operating system review jan pp 

system michigan terminal system description bug mts supervisor cause loop indefinitely response rare instruction sequence user issue 
details bug provided source cited 
genesis inadvertent boundary condition violation time development source code 
place operating system unknown multics ge successors multics operating system developed general purpose information utility successor mit compatible time sharing system ctss supplier interactive computing services 
initial hardware system specially designed general electric ge computer 
subsequently honeywell acquired ge computing division developed successors support multics 
hardware supported master mode instructions legal slave mode certain instructions modify machine registers control memory mapping prohibited 
addition hardware supported rings protection implemented software ge permit greater flexibility organizing programs privileges required 
ring privileged ring expected operating system code execute ring 
multics included hierarchical scheme files directories similar familiar users unix system multics file structures integrated storage hierarchy files essentially segments 
segments currently recorded active segment table ast 
denial service flaws ones listed multics probably current systems 
case mu source andrew tanenbaum operating systems design implementation prentice hall englewood cliffs nj 
system multics description designed interactive primary consideration multics initially permitted batch jobs read card decks file system requiring user authentication 
possible insert file user directory batch stream 
search path locating system commands utility programs normally began user local directories trojan horse version example text editor inserted executed victim unaware change 
trojan horse simply copy file edited change permissions invoking standard system text editor 
genesis inadvertent inadequate identification authentication 
designers initial design called virtual card deck placed protected directory mail sent recipient announcing file available copying space 
implementer mechanism complex decided omit protection 
simply error omission authentication checks mode system access 
time development source code place operating system identification authentication case mu source paul karger schell multics security evaluation vulnerability analysis esd tr vol ii june 
system multics description program executing ring passes parameters executing privileged ring program sure caller required read write access parameters begins manipulate caller behalf 
ring taxonomy computer program security flaws landwehr bull mcdermott choi appear acm computing surverys sept crossing implemented software ge routine perform kind argument validation required 
unfortunately program failed anticipate subtleties indirect addressing modes available multics hardware argument validation routine spoofed 
genesis inadvertent validation 
failed check arguments completely 
time development source code place operating system process management case mu source paul karger schell multics security evaluation vulnerability analysis esd tr vol ii june 
system multics description early designs multics stack base sb register modified master mode 
multics released users restriction unacceptable changes allow sb register modified modes 
code remained place assumed sb register changed master mode 
possible exploit flaw insert trap door 
effect interface master mode modes changed code depended interface updated 
genesis inadvertent domain 
characterization domain changed code relied definition modified needed 
time maintenance source code place operating system process management case mu source paul karger schell multics security evaluation vulnerability analysis est tr vol ii june 
system multics description originally multics designers planned processes executing ring permitted operate master mode 
ge code signaler module responsible processing faults signaled user required master mode privileges permitted run user ring reasons efficiency 
entered signaler checked parameter check failed transferred linkage register routine intended bring system 
transfer executing master mode assumed linkage register set properly 
signaler executing user ring possible penetrator set register chosen value invalid call signaler 
detecting invalid call signaler transfer location chosen penetrator master mode permitting penetrator gain control system 
genesis inadvertent validation time development requirement specification design place operating system process management case mu source gligor thoughts denial ofservice problems university maryland college park md sept 
system multics description problem active segment table ast multics version caused system crash certain circumstances 
required segment active directories superior segment active 
user created directory tree deeper ast size ast overflow entries 
cause system crash 
genesis inadvertent boundary condition violation resource exhaustion 
apparently programmers omitted check determine ast size limit reached 
time development source code place operating system memory management case mu source gligor thoughts denial ofservice problems university maryland college park md sept 
system multics description multics originally imposed global limit total number login processes restriction individual login processes possible single user login repeatedly block logins authorized users 
simple restrictive solution taxonomy computer program security flaws landwehr bull mcdermott choi appear acm computing surverys sept problem place limit individual logins 
genesis inadvertent boundary condition violation resource exhaustion time development requirement specification design place operating system process management case mu source gligor thoughts denial ofservice problems university maryland college park md sept 
system multics description early versions multics user generated storage process directory exception signaled 
flaw signaler wrong stack crashing system 
genesis inadvertent exploitable logic error time development source code place operating system process management case mu source gligor thoughts denial ofservice problems university maryland college park md sept 
system multics description early versions multics directory contained entry segment name deletion directory cause system crash 
specific flaw caused crash known effect system depended user avoid blank segment names 
genesis inadvertent validation time development source code place operating system file management multics segments equivalent files case mu source paul karger schell multics security evaluation vulnerability analysis esd tr vol ii june 
system multics description piece software written test multics hardware protection mechanisms called authors hardware flaw ge execute instruction segment target instruction location zero different segment target instruction index register base register modifications target instruction executed protection checking disabled 
judiciously choosing target instruction user exploit flaw gain control machine 
informed problem hardware vendor field service change fix problem machine inadvertently added flaw 
change introduced flaw fact installed machines type 
genesis inadvertent time maintenance hardware place hardware burroughs burroughs advocated philosophy users systems expected write assembly language programs architecture burroughs computers strongly influenced idea primarily execute programs compiled especially algol programs 
case source wilkinson penetration analysis burroughs large system acm sigops operating systems review jan pp 

system burroughs description hardware burroughs controlled memory access bounds registers program set 
user write programs set registers arbitrarily effectively gain control machine 
prevent system implemented scheme designed assure object programs generated authorized compilers sure include code set bounds registers properly executed 
scheme required file system associated type 
loader check type file submitted order sure type code file type assigned files produced authorized compilers 
possible user create arbitrary file contained malicious object code reset bounds registers assumed control machine taxonomy computer program security flaws landwehr bull mcdermott choi appear acm computing surverys sept type code assigned code file loaded executed 
normal file handling routines prevented utility routines supported writing files tape reading back file system 
flaw occurred routines manipulating tapes possible modify type label file tape code file 
accomplished file retrieved tape executed valid program 
genesis intentional non malicious 
system support tape drives generally requires functions permit users write arbitrary tapes 
system providing functions security 
time development requirement specification design place support privileged utilities large scale mainframe provided timesharing computing resources laboratories universities 
main storage divided banks integral multiple words length 
programs normally banks instruction bank data bank 
bank containing re entrant program expected modify bank writable 
hardware storage protection organized program write permission bank bank 
case un source subversion secure operating system nrl memorandum report june 
system exec description exec operating system provided mechanism users share re entrant versions system utilities editors compilers database systems outside operating system proper 
routines organized reentrant processors reps user supply data rep bank current users rep share common bank 
exec included error recovery scheme permitted program trap errors regain control specified error divide zero bounds memory occurs 
designated error handling program gained control access context error occurred 
gaining control operating system call coded rep immediately establish context trapping errors 
reps 
possible malicious user establish error handling context prepare bounds bank victim rep invoke rep immediately caused error 
malicious code regained control point read write access rep banks 
alter rep code adding trojan horse code copy subsequent user files place accessible malicious user 
trojan horse remained effective long modified copy rep shared users remained main storage 
rep supposed reentrant modified version written back file storage occupied modified rep reclaimed evidence vanish 
flaws case failure rep establish error handling hardware restriction banks 
flaws exploitable copy rep shared users 
fix available relaxed hardware restriction 
genesis inadvertent domain 
possible user error handler gain access rep domain 
time development requirements specification design place operating system process management 
alternatively viewed hardware design flaw 
dec pdp dec pdp medium scale computer standard supplier interactive computing facilities research laboratories 
dec offered tops operating system operating system developed bolt beranek newman 
bbn operate conjunction paging box minor modifications pdp processor developed bbn 
taxonomy computer program security flaws landwehr bull mcdermott choi appear acm computing surverys sept case dt source andrew tanenbaum operating systems design implementation prentice hall englewood cliffs nj abbott security analysis enhancements computer operating systems final report risos project national bureau standards april ntis pb pp 

system description systems passwords control access files 
exploiting details storage allocation mechanisms password checking algorithm possible guess password file 
operating system checked passwords character stopping soon incorrect character encountered 
furthermore retrieved characters checked sequentially storage locations chosen user 
guess password user placed trial password memory unknown character password occupied final byte page virtual storage resident main memory page virtual storage currently main memory 
response attempt gain access file question operating system check password supplied 
character page boundary incorrect password checking terminated page referenced page fault occurred 
character just page boundary correct system attempt retrieve character page fault occur 
checking system provided count number page faults process incurred just just password check user deduce page fault occurred check guess character password correct 
technique effectively reduces search space character password alphabet size sup nm 
flaw password checked character character user storage 
exploitation required user able position string known location respect physical page boundary program able determine discover pages currently memory 
genesis intentional non malicious covert storage channel classed inadvertent domain exposed representation time development source code place operating system identification authentication unix unix operating system originally developed bell laboratories single user multics run dec pdp successors 
original goals provide useful small scale interactive computing single user cooperative laboratory environment security strong concern initial design 
unix includes hierarchical file system access controls including designated owner file user userid root known superuser access controls turned 
unix supports feature known setuid suid 
file program loaded execution marked setuid execute privileges owner file privileges user invoked program 
program stored file owned root marked setuid highly privileged programs referred setuid root 
flaws reported occurred programs setuid root failed include sufficient internal controls prevent exploited 
say setuid feature concern root owns file question user cause setuid bit set files creates 
user permits execute programs file exercising due caution may unpleasant surprise 
case source thompson reflections trusting trust comm acm august pp 

system unix description ken thompson acm turing award lecture describes procedure uses virus install trapdoor unix login program 
virus placed compiler performs tasks 
detects compiling new version compiler virus incorporates object version new compiler 
ensures virus propagates new versions compiler 
virus determines compiling login program taxonomy computer program security flaws landwehr bull mcdermott choi appear acm computing surverys sept adds trapdoor object version login program 
object version login program contains trapdoor allows specified password specific account 
virus installed described revealed 
classify virus compiler trapdoor counted separately 
genesis intentional replicating trojan horse virus time development object code place support unprivileged utilities compiler case source andrew tanenbaum operating systems design implementation prentice hall englewood cliffs nj 
system unix description lpr program unix utility enters file printed appropriate print queue 
option lpr causes file removed entered print queue 
early versions unix option adequately check user invoking lpr required permissions remove specified file possible user remove instance password file prevent logging system 
genesis inadvertent identification authentication 
apparently lpr setuid suid program owned root executed access controls permitted delete file system 
missing improper access check probably led flaw 
time development source code place operating system file management case source andrew tanenbaum operating systems design implementation prentice hall englewood cliffs nj 
system unix description versions unix mkdir suid program owned root 
creation directory required steps 
storage directory allocated system call 
directory created owned root 
second step mkdir change owner newly created directory root id user invoked mkdir 
steps atomic possible user gain ownership file system including password file 
done follows mkdir command initiated background process complete step creating directory suspended 
process user remove newly created directory suspended process issue chown command create link system password file name directory just deleted 
time original mkdir process resume execution complete mkdir invocation issuing chown command 
command effect changing owner password file user invoked mkdir 
owner password file user remove password root gain superuser status 
genesis intentional 
classified inadvertent serialization 
developer probably realized need lack atomicity mkdir find way provide version unix working 
versions unix berkeley unix introduced system call achieve 
time development source code place operating system file management 
flaw really lack needed facility system call interface 
case source bsd unix security computer science department university california santa barbara april 
system unix description unix command sendmail possible display file system 
sendmail option allows user specify configuration file 
lines file match required syntax configuration file sendmail displayed offending lines 
apparently sendmail check see user permission read file question view file permission proper syntax configuration file user taxonomy computer program security flaws landwehr bull mcdermott choi appear acm computing surverys sept give simply command sendmail name 
genesis inadvertent identification authentication 
probable cause flaw missing access check combination fact sendmail program suid program owned root allowed bypass access checks 
time development source code place support privileged utilities case source bishop security problems unix operating system computer science dept purdue university west lafayette indiana march 
system unix description improper suid program improper setting permissions mail directory led flaw permitted user gain full system privileges 
versions unix mail program changed owner mail file recipient mail 
flaw mail program remove pre existing suid permissions file changed owner 
systems set mail directory writable users 
consequently possible user remove user mail file 
user wishing superuser privileges remove mail file belonging root replace file containing copy bin csh command interpreter shell 
file owned change permissions file suid executable users 
send mail message root 
mail message received mail program place root current mail file containing copy bin csh owned change owner root mail file root unix command chown 
change owner command alter permissions file existed suid program owned root executed user 
user invoke suid program root mail file privileges superuser 
genesis inadvertent identification authentication 
flaw placed programmer failed check permissions file relation requester identity 
flaws contribute having mail directory writeable users questionable approach 
blame placed developer chown function 
idea allow suid program owner changed chown applied suid program unix systems automatically remove suid permissions file 
time development source code place operating system system initialization case source bishop security problems unix operating system computer science dept purdue university west lafayette indiana march 
system unix version description su command unix permits logged user change userid provided user authenticate entering password new userid 
version unix su program open password file create shell real effective uid gid set root providing caller full system privileges 
unix limits number files individual user open time su prevented opening password file running program opened files user limit reached 
invoking su point user gained root privileges 
genesis intentional 
designers su may considered system state password file opened best option initiate highly privileged shell allow problem fixed 
check default actions uncovered flaw 
system fails default secure state 
time development design place operating system identification authentication case source bishop security problems unix operating system computer science dept purdue university west lafayette indiana march 
system unix taxonomy computer program security flaws landwehr bull mcdermott choi appear acm computing surverys sept description unix support software program permits remote execution limited set unix programs 
command line executed received program remote system parsed checked see commands line set permitted execute new process spawned userid uucp execute commands 
flaws parsing command line permitted unchecked commands executed 
effectively read word command line checked skipped characters input line encountered signifying command 
word delimiter read checked process continue way command line reached 
unfortunately set delimiters incomplete omitted command ignored delimiters checked legality 
flaw permitted user invoke arbitrary commands remote system user uucp 
example command remote computer rest command command execute commands remote system checked legality 
genesis inadvertent validation 
flaw simply error implementation argued lack standard command line parser unix lack standard shared set command termination delimiters referred contributed flaw 
time development requirement specification design 
determining specification flaw flaw programming difficult examination specification specification existed interview programmer 
place support privileged utilities case source bishop security problems unix operating system computer science dept purdue university west lafayette indiana march 
system unix description unix systems possible forge mail 
issuing command mail user device user creates message addressed user contents taken message file field containing login name owner device user user receive message apparently user 
flaw code implementing mail program 
uses unix system call determine sender mail message situation returns login name associated current standard output device redefined command device user login name user invoked mail 
flaw permit user violate access controls gain system privileges significant security problem wishes rely authenticity unix mail messages 
flaw repaired place great trust field mail message simple mail transfer protocol smtp transmit email internet intended secure spoofing 
genesis inadvertent exploitable logic error 
flaw apparently resulted incomplete understanding interface provided function 
functions correctly values provides represent information desired caller 
time development source code place support privileged utilities case source unix programmer manual seventh edition vol 
bell telephone laboratories 
system unix description resource exhaustion flaws parts unix possible user deny service 
example creating file unix requires creation node system node table 
straightforward compose script puts system loop creating new files eventually filling node table making impossible user create files 
taxonomy computer program security flaws landwehr bull mcdermott choi appear acm computing surverys sept genesis inadvertent boundary condition violation resource exhaustion intentional 
flaw attributed design philosophy develop unix system users benign respect abuse system 
lack resource quotas deliberate choice unix relatively free constraints users consume resources user may create directories files objects needed 
design decision correct environments leaves system open abuse original assumption hold 
possible place restrictions user example limiting amount storage may rarely done practice 
time development requirement specification design place operating system file management case source spafford crisis comm 
acm june pp 

system unix description unix systems sendmail program distributed debug option enabled allowing unauthorized users gain access system 
user opened connection system sendmail port invoked debug option send messages addressed set commands user mailbox 
judiciously constructed message addressed way cause commands executed remote system behalf unauthenticated user ultimately unix shell created circumventing normal login procedures 
genesis intentional non malicious 
malicious trapdoor intentionally left distribution 
feature deliberately inserted code presumably debugging aid 
appeared distributions system intended operational provided trapdoor 
evidence operational versions having noticed removed 
time development requirement specification design place support privileged utilities case source unix wizards digest vol 
nov 
system unix description unix function permits user change full name associated userid 
information kept password file change user full name entails writing file 
apparently failed check length input buffer received merely attempted re write appropriate place password file 
buffer long write password file fail way blank line inserted password file 
line subsequently replaced line containing corresponds account password root privileges 
penetrator log null userid password gain root privileges 
genesis inadvertent validation time development source code place operating system identification authentication 
view flaw routine ultimately permitted unauthorized user log 
flaw considered routine altered blank line password file appeared valid login routine 
highest level flaw lack specification prohibits blank null passwords lack proper interface modifying passwd 
case source microscope worm mit perspective comm 
acm june pp 

system unix bsd vax description fingerd daemon unix accepts requests user information remote systems 
flaw program permitted users execute code remote machines bypassing normal access checking 
fingerd read taxonomy computer program security flaws landwehr bull mcdermott choi appear acm computing surverys sept input line failed check record returned overrun input buffer 
input buffer predictably allocated just prior stack frame held return address calling routine input line fingerd constructed system stack permitting attacker create new unix shell execute commands behalf 
case represents mis unix gets function 
genesis inadvertent validation 
time development source code place support privileged utilities case source robertson security distribution list vol 
june 
system unix description unix network utility allows user send message users remote system 
file contains list currently logged users 
uses information remote system determine users message sent proper functioning unix systems requires users permitted write file 
case malicious user edit file target system contain entry passwd user creates password file replace current password file account system privileges 
step issue command hostname daemon having root privileges reads determine users receive message 
contains entry passwd writes message new password file file overwriting previous version 
genesis inadvertent validation time development requirement specification design 
flaw occurs users allowed alter file privileged program relied 
place operating system system initialization 
flaw considered system initialization proper setting permissions system initialization eliminate problem 
case source risks forum digest vol 
june 
system unix sunos description program rpc daemon accepts requests remote workstations execute programs 
flaw occurs authentication section program appears base decision userid uid 
request received daemon determines request originated superuser uid 
request rejected 
uid checked see valid workstation 
request processed permissions uid 
user root access machine network possible create requests arbitrary uid 
example user computer uid computer root generates request uid sends computer 
computer receives request determines valid uid executes request 
designers assumed locally valid uid accompanies request request came authorized user 
stronger authentication scheme require user supply additional information password 
alternatively scheme exploit unix concept trusted host 
host issuing request list trusted hosts maintained receiver request honored rejected 
genesis inadvertent identification authentication time development requirement specification design place support privileged utilities dec vax computers dec vax series computers operated vms operating system unix system called ultrix dec products 
vms system authorization file records privileges associated userid 
user alter file arbitrarily effectively controls system 
dec developed high security operating system vax virtual machine monitor approach 
results effort marketed hardware covert timing channels taxonomy computer program security flaws landwehr bull mcdermott choi appear acm computing surverys sept discovered course development documented clearly literature included 
case source vms code patch eliminates security breach digital review june system dec vms description flaw particular interest system occurred new release system previously closely scrutinized security flaws 
new release added system calls intended permit authorized users modify system authorization file 
determine caller permission modify system authorization file file consulted 
consequently system calls invoked open system authorization file determine user authorized perform requested operation 
user authorized perform requested operation call return error message 
flaw certain second parameters provided system call error message returned system authorization file inadvertently left open 
possible knowledgeable unauthorized user alter system authorization file eventually gain control entire machine 
genesis inadvertent domain residuals 
case described access authorization file represents residual 
time maintenance source code place operating system identification authentication case source hu reducing timing channels fuzzy time proc 
ieee computer society symposium research security privacy oakland ca pp 

system description cpus share common bus bus demands cpu block 
cpu access clock kind detect requests delayed immediately satisfied 
case interference permitted process executing virtual machine security level send information process executing different virtual machine potentially executing lower security level 
cited source describes technique developed applied limit kind channel 
genesis intentional covert timing channel time development requirement specification design 
flaw arises hardware design decision 
place hardware intel processor coprocessor set case source ee tools toys ieee spectrum aug pp 

system systems intel processor coprocessor 
description reported systems processor coprocessor may halt coprocessor sends certain signal processor processor paging mode 
hardware firmware flaw cause denial service 
cited provide details flaw evoked software 
included simply example hardware flaw widely marketed commercial system 
genesis inadvertent exploitable logic error 
time development requirement specification design 
place hardware personal computers ibm pcs apple macintosh class computers poses interesting classification problem computer said security flaw security policy 
personal computers delivered restrict identify individuals 
way distinguish authorized user unauthorized discriminate authorized access request program unauthorized 
respects personal computer individual single user domain conventional time shared interactive system domain user may invoke programs desired 
program user invokes full privileges taxonomy computer program security flaws landwehr bull mcdermott choi appear acm computing surverys sept user read modify delete data domain 
personal computers don explicit security policies implicit ones 
users normally expect certain properties machines example running new piece commercially produced software cause files deleted 
reason include examples viruses trojan horses exploit weaknesses ibm pcs non ibm equivalents apple computers 
fundamental flaw systems fact operating system application packages user provided software user programs inhabit protection domain privileges information available 
user written program goes astray accidentally maliciously may possible operating system protect programs data system consequences 
effective attempts remedy situation generally require hardware modifications modifications marketed 
addition software packages capable detecting presence certain kinds malicious software marketed virus detection prevention mechanisms 
software provide complete protection environment effective specific threats 
fact pcs normally provide single protection domain instructions available programs probably attributable lack hardware support multiple domains early pcs culture led production pcs environments intended 
today processors pcs support multiple domains frequently software reasons compatibility older versions doesn exploit hardware mechanisms available 
powered typical pc running ms dos loads boots operating system pre defined sectors disk floppy hard 
cases listed malicious code strives alter boot sectors automatically activated time system rebooted gives opportunity survey status system decide execute particular malicious act 
typical malicious act code execute destroy file allocation table delete filenames pointers data contained data files may remain intact 
alternatively code initiate operation reformat disk case file structures data lost 
ms dos files part names filename usually limited characters extension limited characters normally indicate type file 
example files containing executable code typically names exe 
basic ms dos command interpreter normally kept file named command com 
trojan horse may try install file files contain executables common ms dos commands may invoked user 
see case mu related attack multics 
readers understand difficult certain complete behavior malicious code 
cases listed author malicious code identified nature code determined example read object code attempted disassemble 
accuracy completeness descriptions guaranteed 
ibm pcs case pc source richardson risks forum digest vol 
feb 
system ibm pc compatible description modified version word processing program pc write version contain trojan horse having circulated number users 
modified version contained trojan horse destroyed file allocation table user hard disk initiated low level format destroying data hard disk 
genesis malicious non replicating trojan horse time operation place support privileged utilities case pc source joyce software viruses pc health enemy number datamation publishing newton ma oct pp 

system ibm pc compatible description virus places stack space file command com 
infected disk taxonomy computer program security flaws landwehr bull mcdermott choi appear acm computing surverys sept booted command type copy dir issued virus gain control 
checks see disk contains command com file copies counter infected disk incremented 
counter equals disk pc erased 
boot tracks file access tables 
genesis malicious replicating trojan horse virus time operation 
place operating system system initialization case pc source risks forum digest vol 
aug 
system ibm pc compatible description trojan horse program described program enhance graphics ibm programs 
fact destroyed data user disks printed message arf 
arf 
got 
genesis malicious trojan horse time operation place support privileged utilities 
case pc source info ibm pc digest vol 
feb acm sigsoft software engineering notes apr pp system ibm pc compatible description called israeli virus infects com exe files 
infected file executed time virus inserts code memory interrupt occurs virus activated 
activation virus checks currently running com exe file 
file infected virus copies currently running program 
virus memory things may slow execution programs system date obtains system friday th supposed delete com exe file executed date 
genesis malicious replicating trojan horse virus time operation place operating system system initialization apple macintosh apple macintosh application presents quite different user interface typical application pc macintosh operating system share primary vulnerabilities pc running ms dos 
macintosh file forks data fork resource fork fact invisible users 
resource fork type effect name identification number 
application occupies file store auxiliary information icon associated file menus uses error messages generates resources appropriate types resource fork application file 
object code application reside resources file resource fork 
macintosh operating system provides utility routines permit programs create remove modify resources 
program runs macintosh capable creating new resources applications altering existing ones just program running ms dos create remove alter existing files 
macintosh powered rebooted initialization may differ ms dos initialization detail kind macintosh vulnerable malicious modifications routines called initialization 
case ma source beware trojan bearing gifts magazine denver pp 

system macintosh description stk macintosh program posted commercial bulletin board include virus 
program modifies system program located disk include init called dr system booted infected disk new system infected 
virus activated date system march 
date virus print message richard publisher entire staff take opportunity convey universal message peace macintosh users world 
genesis malicious replicating trojan horse virus time operation place operating system system initialization taxonomy computer program security flaws landwehr bull mcdermott choi appear acm computing surverys sept case ma source mad macs nov pcw communications san francisco ca pp 

system macintosh description macintosh virus commonly called scores attack application programs eric resources 
infected scores virus stays dormant days begins affect programs eric resources causing attempts write disk fail 
signs infection virus include extra code resource size existence invisible files titled desktop scores system folder added resources note pad file file 
genesis malicious replicating trojan horse virus time operation place operating system system initialization 
case ca source risks forum digest vol 
dec acm sigsoft software engineering notes jan pp 

system personal computer description virus uses boot block propagate 
booted infected disk virus copied memory 
virus initiates warm start routine 
performing normal warm start virus code activated 
warm start occurs virus code checks determine disk drive infected 
virus copies boot block disk 
certain number disks infected message printed revealing infection normal warm start occurs 
genesis malicious replicating trojan horse virus time operation place operating system system initialization case source unlocking secrets computer viruses explorer oct pp 

system description virus infects boot block floppy disks 
system booted infected floppy disk virus copied boot block memory 
attaches function time called virus executed 
executed virus checks see disk drive infected 
virus copies memory boot sector uninfected disk initializes counter 
disk infected counter incremented 
counter reaches certain value root directory file access tables disk overwritten making disk unusable 
genesis malicious replicating trojan horse virus time operation place operating system system initialization acknowledgments idea conceived years ago considering provide automated assistance detecting security flaws 
lacked characterization things looking 
long assisted delivery 
grateful participation mark weiser university maryland philip myers space naval warfare combat systems command early phase 
national computer security center continuing financial support 
authors gratefully acknowledge assistance provided reviewers earlier drafts 
comments helped refine taxonomy clarify presentation distinguish true computer security flaws mythical ones place accurately taxonomy 
comments gene spafford matt bishop paul karger steve robert morris peter neumann philip porras james anderson preston mullen particularly extensive helpful 
landwehr suggested form fig 

thomas beth richard ii hoover dennis ritchie mike andrew tanenbaum clark weissman provided useful comments encouragement apologize reviewers inadvertently omitted 
anonymous computing surveys referees asked questions helped focus presentation 
remaining errors course responsibility 
abbott chin ford webb 
security analysis enhancements computer operating systems 
national bureau standards april 
taxonomy computer program security flaws landwehr bull mcdermott choi appear acm computing surverys sept anderson 
computer security technology planning study 
esd tr vols ii ntis ad field bedford ma october 
ieee computer society 
standard glossary software engineering terminology 
ansi ieee standard 
ieee press new york 
ii 
private communication 
july 
ii 
protection analysis project final report 
isi rr ad usc information sciences institute may 
carl 
incorporating ieee standard anomaly tracking process 
crosstalk defense software engineering jan 
chillarege day ray wong 

orthogonal defect classification concept process measurements 
ieee trans 
software engineering nov 
cohen 
computer viruses theory experiments th dod nbs computer security conference gaithersburg md sept 
department defense 
trusted computer system evaluation criteria dod std december 
denning 
cryptography data security 
addison wesley publishing reading ma 
denning 
computer viruses 
american scientist may june 
dewitt 
invasion data time magazine sept 

pathology computer viruses 
springer verlag new york 

software quality measurement framework counting problems defects 
cmu sei tr software engineering institute pittsburgh pa sept 
gasser 
building secure computer system 
van nostrand reinhold new york 
lampson 
note confinement problem comm 
acm october 
landwehr 
best available technologies computer security 
ieee computer july 
landwehr 
formal models computer security 
acm computing surveys september 
laprie ed 
dependability basic concepts terminology 
vol 
springer verlag series dependable computing fault tolerant systems new york 
leveson turner 
investigation accidents 
uci tr inf 
comp 
sci 
dept univ cal irvine irvine ca 
linde 
operating system penetration 
afips national computer conference 
mcdermott 
technique removing important class trojan horses high order languages proc 
th national computer security conference nbs ncsc gaithersburg md october 
neumann 
computer security evaluation national computer conference afips conf 
proceedings arlington va 

engineer human role failure successful design 
vintage books new york ny 
pfleeger 
security computing 
prentice hall englewood cliffs nj 

microscope worm mit perspective 
comm 
acm june 
schell 
computer security achilles heel electronic air force air university review jan feb 

worm programs early experience distributed computation 
comm 
acm march 
spafford 
crisis 
comm 
acm june 
sullivan chillarege 
comparison software defects database management systems operating systems 
proc 
nd int 
symp 
fault tolerant computer systems ftcs boston ma ieee cs press 
thompson 
reflections trusting trust comm 
acm august 
weiss basili 
evaluating software development analysis changes data software engineering laboratory 
ieee trans 
software engineering se february 
