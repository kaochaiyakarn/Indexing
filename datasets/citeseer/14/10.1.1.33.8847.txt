applied artificial intelligence 
received december revised may 
animated agents procedural training virtual reality perception cognition motor control jeff rickel lewis johnson information sciences institute computer science department university southern california admiralty way marina del rey ca rickel isi edu johnson isi edu www isi edu isd vet vet html describes steve animated agent helps students learn perform physical procedural tasks 
student steve cohabit dimensional simulated mock student environment 
steve demonstrate perform tasks monitor students practice tasks providing assistance needed 
describes steve architecture detail including perception cognition motor control 
perception module monitors state virtual world maintains coherent representation provides information cognition motor control modules 
cognition module interprets perceptual input chooses appropriate goals constructs executes plans achieve goals sends motor commands 
motor control module implements motor commands controlling steve voice locomotion gaze gestures allowing steve manipulate objects virtual world 
master complex tasks operating complicated machinery people need hands experience facing wide range situations 
need mentor demonstrate procedures answer questions monitor performance may need teammates task requires multiple people 
impractical provide training real equipment exploring virtual reality training takes place dimensional interactive simulated mock student environment 
mentors teammates unavailable student needs developing autonomous animated agent play roles 
agent name steve soar training expert virtual environments 
steve integrates methods primary research areas intelligent tutoring systems computer graphics agent architectures 
novel combination results unique set capabilities 
steve pedagogical capabilities expect intelligent tutoring system 
example answer questions 
animated body virtual world students provide human assistance previous disembodied tutors 
example demonstrate actions gaze gestures direct student attention guide student virtual world 
virtual reality important application area artificial intelligence allows human interactions synthetic agents humans desktop interfaces 
steve agent architecture allows robustly handle dynamic virtual world potentially populated people agents continually monitors state virtual world maintaining plan completing current task revising plan handle unexpected events 
steve consists set domain independent capabilities utilize declarative representation domain knowledge 
teach students tasks new domain provide appropriate domain knowledge 
assume person course author person domain knowledge create course teaching 
importantly assume person programming skills 
ensuring steve relies types knowledge course author provide imposes strong constraints steve design 
steve designed coexist people agents virtual world 
goal support team training teams people possibly different locations inhabit virtual world learn perform tasks team 
agents steve play roles training serve tutors individual team members play role missing team members 
extended steve understand team tasks function team member 
address issues focus primarily steve ability single student person task 
clear ensuring steve function environment people agents placed important constraints steve design 
describes steve architecture detail including perception cognition motor control 
section illustrates steve capabilities example steve student working task 
background section briefly describes larger software architecture virtual worlds steve part detail available earlier johnson 
section gives overview steve architecture remainder provides details 
steve capabilities illustrate steve capabilities suppose steve demonstrating inspect air compressor aboard ship 
student head mounted display gives dimensional view surroundings include compressor front steve side 
moves turns head view changes accordingly 
head mounted display equipped microphone allow speak steve 
introducing task steve begins demonstration 
check oil level steve says moves dipstick 
steve looks dipstick points looks back student says pull dipstick 
steve pulls see 
pointing level indicator steve says check oil level dipstick 
see oil level normal 
finish subtask steve says insert dipstick pushes back 
continuing demonstration steve says sure cut valves open 
looking cut valves steve sees open 
pointing says open cut valve opens 
steve says perform functional test drain alarm light 
steve pulling dipstick steve describing power light check drain monitor 
see power light illuminated monitor see 
student realizing seen procedure says finish 
steve acknowledges finish task shifts monitoring performance 
student steps forward relevant part compressor unsure 
asks 
steve replies suggest press function test button 
student asks 
steve replies action relevant want drain monitor test mode 
student wondering drain monitor test mode asks 
steve replies goal relevant allow check alarm light 
student understands unsure button function test button 
show requests 
steve moves function test button pushes see 
alarm light comes indicating steve student functioning properly 
student recalls extinguish alarm light pushes wrong button causing different alarm light illuminate 
asks steve 
steve pressing button steve responds suggest press reset button temperature monitor 
presses reset button extinguish second alarm light presses correct button extinguish alarm light 
steve looks says completes task 
questions 
student question 
asks steve opened cut valve 
action relevant wanted dampen oscillation stage gauge replies 
example illustrates number steve capabilities 
generate recognize speech demonstrate actions gaze gestures answer questions adapt domain procedures unexpected events remember past actions 
remainder describes technical details capabilities 
action review questions posed desktop menu speech 
steve generates menu items actions performed student simply selects 
speech interface action review require sophisticated speech understanding 
human interface simulator steve speech recognition message dispatcher visual interface speech generation audio effects architecture virtual worlds 
shows components agent human agents humans added simply connecting message dispatcher way 
creating virtual worlds people agents discuss steve architecture introduce software architecture creating virtual worlds people agents cohabit 
colleagues lockheed martin usc behavioral technologies laboratory designed implemented architecture johnson 
purposes modularity efficiency architecture consists separate components running parallel separate processes possibly different machines 
components communicate exchanging messages 
current architecture includes types components simulator behavior virtual world controlled simulator 
current implementation uses simulation engine munro developed usc behavioral technologies laboratory 
visual interface human participant visual interface component allows view manipulate virtual world 
person connected component hardware devices view world provided head mounted display movements tracked position sensors head hands interact world touching virtual objects data glove 
pinch objects pinch glove click objects mouse actions treated visual interface component supports alternative devices 
visual interface component plays primary roles ffl receives messages components primarily simulator describing changes appearance world outputs dimensional descendant rides systems mentioned earlier papers 
graphical representation person head mounted display 
ffl informs components person interacts objects 
current implementation uses lockheed martin vista viewer stiles mccarthy visual interface component 
audio human participant audio component 
component receives messages simulator describing location audible radius various sounds broadcasts appropriate sounds headphones person head mounted display 
speech generation human participant speech generation component receives text messages components primarily agents converts text speech broadcasts speech person headphones 
current implementation uses entropic tm text speech product 
speech recognition human participant speech recognition component receives speech signals person microphone recognizes speech path grammar outputs semantic token representing speech components 
steve agents natural language understanding capabilities need recognized sentence 
current implementation uses entropic tm product 
agent steve agent runs separate component 
remainder focuses architecture agents communicate components 
various components communicate directly 
messages sent central message dispatcher 
component tells dispatcher types messages interested 
message arrives dispatcher forwards interested components 
example visual interface component registers interest messages specify changes appearance virtual world change color location object 
simulator sends message dispatcher broadcasts visual interface component 
approach increases modularity component need know interface components 
increases extensibility new components added affecting existing ones 
current implementation uses sun tm message dispatcher 
overview steve architecture perception cognition motor control steve consists main modules perception cognition motor control 
perception module monitors messages message dispatcher identifies events relevant steve actions taken virtual world people agents changes state virtual world 
cognition module interprets input receives perception module chooses appropriate goals constructs executes plans achieve goals sends motor commands control agent body 
motor control module decomposes motor commands sequence lower level commands sent components message dispatcher 
example message dispatcher motor control cognition perception spatial information perception snapshot important events relevant events motor commands detailed motor commands steve main modules steve types information send receive 
receiving motor command push button virtual world motor control module send animation primitives cause steve graphical finger move button send message simulator simulate effects button pressed 
current implementation cognition runs process perception motor control run separate process 
split advantages 
allows module implemented suitable language 
cognition module built top soar laird newell rosenbloom newell intended general architecture cognition steve cognitive capabilities implemented soar production rules 
contrast perception motor control modules implemented procedural languages tcl tk second advantage split cognition run parallel perception motor control 
especially important high volume message traffic arriving perception module case highly dynamic world want perceptual processing slow cognition 
motor control module computationally expensive pay run perception motor control separate parallel processes case far 
perception cognition motor control modules communicate directly message dispatcher 
cognition module communicates message passing 
sends message perception module ready update state virtual world perception module responds snapshot state world set important events occurred snapshot sent actions taken people agents 
cognition module sends motor command messages motor control module 
motor control module resides process perception module accesses perceptual information freely procedure calls shared variables 
domain knowledge allow steve operate variety domains architecture clean separation domain independent capabilities domain specific knowledge 
code perception cognition motor control modules provides set general capabilities independent particular domain 
allow steve operate new domain course author simply specifies appropriate domain knowledge declarative language 
declarative language designed people domain expertise necessarily programming skills 
steve general capabilities draw knowledge teach students 
domain knowledge steve requires falls categories perceptual knowledge knowledge tells steve objects virtual world relevant simulator attributes spatial properties 
resides perception module discussed section 
task knowledge knowledge tells steve procedures accomplishing domain tasks provides text fragments talk 
resides cognition module discussed section 
perception role perception module receive messages components message dispatcher messages maintain coherent representation state virtual world provide information cognition motor control modules 
section describes representation perception module maintains obtains information illustrating types information available agent virtual reality 
representing state virtual world representing simulator state information state virtual world maintained simulator 
perception module represents simulator state set attribute value pairs 
attribute represents state variable simulator attribute value represents value variable 
example state indicator light say light represented attribute light state possible values 
simple representation chosen allow steve operate variety simulators simulators allow sophisticated object oriented representations nearly support simple attribute value representation 
perception module tracks simulator state listening messages simulator message dispatcher 
perceptual knowledge provided steve course author includes list relevant attributes 
steve starts perception module asks simulator current value 
informs message dispatcher interested messages describing changes attributes 
simulator broadcasts messages simulation state changes 
message specifies name attribute changed new value 
perception module uses messages maintain snapshot simulation state 
cognition module periodically asks snapshot perception module ready sent 
perception module initializes snapshot simply update receives message simulator complication groups messages simulator represent simultaneous changes 
example suppose light illuminated button depressed 
button pressed simulator send messages specifying button depressed specifying light 
perception module update simulation snapshot message cognition module ask snapshot messages received processed receive inconsistent state world 
situation analogous database transaction korth silberschatz cognition module see effects simultaneous changes see effects 
avoid possibility simulator start messages delimit messages representing simultaneous changes 
receiving start message perception module stores subsequent simulator messages queue 
message arrives perception module updates simulation snapshot processing queued messages 
update atomic cognition module ask snapshot update 
cognition module asks snapshot message arrives sees changes asks snapshot message arrives sees 
representing spatial properties objects agents order control steve body virtual world steve needs know spatial properties objects position orientation spatial extent 
principle simulator maintain properties provide perception module described previous section 
practice inconvenient 
simulator controls appearance virtual world instructing visual interface components load graphical models objects sending messages change properties objects location color 
simulator may representation geometric properties objects details graphical models typically created course author modeling tool stored files 
simulator may simple information location objects 
graphics objects typically organized hierarchy object coordinate system relative parent 
example simulator know move button relative graphical parent console may know global world coordinates button steve needs 
fortunately visual interface components provide information 
currently perception module queries visual interface component information needed 
motor control module needs interact object point asks perception module location bounding sphere 
location specifies origin object cartesian coordinates point 
bounding sphere specified smallest radius origin encompasses object 
perception module get properties agents 
agent graphical body virtual world 
visual interface components bodies different graphical object perception module query location bounding spheres agent 
addition keeping track location agents cartesian coordinates perception module keeps track steve location terms objects 
move object cognition component sends motor command effect 
motor control module converts request location cartesian coordinates sends message move steve 
steve arrives perception module receives message visual interface component records location desired object 
cognition module works level abstraction ignoring actual cartesian coordinates 
interact objects steve needs spatial information provided visual interface components 
require course author provide perceptual knowledge object front vector interact object steve know front side interacting object steve knowledge position front object 
course author specifies front object vector plane points front object origin 
currently assume vector change dynamically 
grasp vector steve may need grasp object needs know appropriate orientation hand 
course author specifies vector space pointing object origin direction steve pull object 
steve reason pull object provides orientation grasp 
press vector steve may need press object button needs appropriate orientation hand doing 
course author specifies vector space pointing object origin direction steve press object 
agent location interacting object steve stands front slightly right avoid blocking student view 
object location bounding sphere front vector steve choose location 
typically approach works ensures steve student way student standing front object 
object irregular shape bounding sphere lead steve stand unnecessarily far 
objects surrounding desired object steve need adjust position avoid colliding 
steve default location appropriate course author specify appropriate location specifying far front right object steve stand 
negative numbers force steve stand left necessary 
representing properties human participants perception module keeps track human participants 
visual interface component person uses position sensor head mounted display track location cartesian coordinates specifically point eyes line sight perception module request information needed motor control module look person 
steve working student task perception module keeps track student field view 
specifically keeps track objects virtual world lie student field view 
object perception module asks student visual interface component object student field view 
subsequently visual interface component broadcasts message object enters leaves student field view perception module maintain snapshot objects student see 
representing perceptual knowledge path planning steve navigate virtual world object object avoiding collisions 
approaches collision free navigation originally developed robotics researchers adapted graphical worlds 
steve follows standard approach virtual world graph nodes graph places edge nodes steve move directly places colliding 
set places steve uses objects virtual world specifically places stands interacting object 
currently focuses relatively static environments assume graph change time 
default edge nodes places 
blocking path objects wall course author specify direct path objects effectively removing edge graph 
sparse graphs subgraphs author alternatively just specify permissible edges 
resulting adjacency graph serves steve perceptual knowledge navigation motor control module plan path nodes described section 
representing handling events perception module passes snapshot state world cognition module passes list important events occurred snapshot 
cognition module see periodic snapshots state world events 
example button pressed released snapshots cognition module know pressed 
receiving snapshot world list important events occurred snapshot cognition module gets complete view world changes 
perception module receives forwards cognition module types events state changes described earlier simulator sends messages state virtual world changes 
cognition module need summarized snapshot receives 
perception module passes select cognition module specifically provide feedback steve object manipulations 
important state changes specified steve perceptual knowledge 
actions objects human participant interacts object touches data glove participant visual interface component broadcasts message specifying name participant object touched 
meaning interaction depends object 
example touching button causes button pressed touching valve allows human participant turn 
result action determined simulator message visual interface component specifies participant object 
visual interface component sends message person stops touching object 
agents interact objects sending messages listing participant 
human speech steve receives messages speech recognition component human participant begins talking finish 
message simply specifies person speaking additionally includes semantic token represents sentence recognized 
speech recognizer understand sentence returns unknown token 
agent speech steve agents tell agents talking 
agent sends message speech generation components generate speech 
agent listen messages detect agents speaking 
speech generation component finishes producing speech human participant sends message effect 
agent tell agents finished speaking 
agent messages detect utterance complete 
currently messages include semantic token corresponding messages representing human speech 
agents send separate messages representing semantic content speech messages loosely speech acts kqml labrou finin 
cognition layers steve cognition cognition module organized main layers ffl domain specific task knowledge ffl domain independent pedagogical capabilities ffl soar steve built top soar architecture laird newell rosenbloom newell 
soar designed general model human cognition provides number features support construction intelligent agents 
focus soar understanding steve require understanding soar 
steve design influenced features soar architecture 
soar general cognitive architecture provide built support particular cognitive skills demonstration explanation question answering 
main task building steve design set domain independent pedagogical capabilities layer top soar architecture 
capabilities implemented soar production rules discussed section 
teach students perform procedural tasks particular domain steve needs representation tasks 
course author provide knowledge steve 
appropriate task knowledge particular domain steve uses general pedagogical capabilities teach knowledge students 
layered approach steve cognition module allows steve variety domains new domain requires new task knowledge modification steve abilities teacher 
domain task knowledge intelligent tutoring systems typically represent procedural knowledge ways 
notably anderson colleagues anderson detailed cognitive models built production rules 
systems perform domain tasks directly executing rules 
systems declarative representation knowledge usually variant procedural network representation sacerdoti specifying steps procedure ordering 
systems perform tasks domainindependent interpreter execute procedural network walk steps 
production rule models provide flexible ontology price laborious build 
labor may justified domains algebra geometry tutor built years people 
contrast procedural network representations practical domains operation maintenance equipment procedures may change frequently domains easy domain experts course authors represent procedures examine change necessary 
reasons steve uses procedural network plan representation domain tasks 
steve represents domain tasks hierarchical plans relatively standard representation russell norvig 
task consists set steps primitive action press button composite action task 
composite actions give tasks hierarchical structure 
second may ordering constraints steps specifying step precede 
task functional test steps press function test check alarm light extinguish alarm causal links press function test achieves test mode check alarm light check alarm light achieves know alarm functional task extinguish alarm achieves alarm task ordering constraints press function test check alarm light check alarm light extinguish alarm example task definition constraints define partial order steps 
role steps task represented set causal links mcallester rosenblitt 
causal link specifies step achieves goal precondition step termination task 
example pulling dipstick achieves goal exposing level indicator precondition checking oil level 
shows example task definition task performing functional test subsystems high pressure air compressor aboard ship 
consists steps press function test compressor operator presses test button control panel check alarm light operator examines light sure functional burned extinguish alarm operator presses reset button reset light 
addition task dummy steps task precedes steps task follows steps 
causal links exist steps 
example press function test puts device test mode illuminates alarm light precondition check alarm light 
order task complete operator know alarm light functional alarm light goals shown preconditions task 
similarly task depended conditions established prior starting task conditions represented effects task 
plan representation defines structure task terms goals steps 
complete description course author define goals primitive actions 
goal defined attribute value pair 
steve represent types goals attributes virtual world attributes mental state 
attribute appear steve perception light state value desired value 
goal satisfied attributevalue pair part steve current perceptual snapshot 
attribute appear steve mental state 
attributes stored result certain primitive actions steve executes sensing actions russell norvig 
sensing actions record state attribute virtual world particular point task 
instance functional test example check alarm light sensing action causes steve record resulting state light value attribute mental state 
mental state goal optionally specify attribute specific value example goal specified satisfied steve knows result test regardless particular result 
steve represent types goals goals require putting virtual world desired state steve evaluate perception goals acquiring information steve evaluate checking mental state 
primitive actions require steve interact virtual world typically motor commands 
simplify course author job describing primitive actions task developing library primitive actions appropriate virtual world course author defines primitive action task instance library 
library organized hierarchy general actions specializations 
example general action library 
define task step instance course author specify name object virtual world manipulated button name motor command perform manipulation press perceptual attribute value pair indicate manipulation finished button state depressed 
actions library defined specializations general actions provide shorthand course authors 
example library includes specialization course author define previous example instance merely specifying name button 
relatively easy extend action library require writing simple soar productions expect course authors extend 
complete task knowledge course author provide text fragments steve natural language generation 
steve currently include sophisticated capabilities natural language generation speech utterances constructed plugging domain specific text fragments text templates 
steve currently requires types text fragments ffl requires fragment goal form complete sentence want 
ffl requires fragments task step 
simple imperative description step press power button 
second form purpose may include elaboration 
steve uses second fragment verbose description step appropriate 
ffl sensing actions requires fragment possible result oil level low oil level normal 
steve uses fragments describing results sensing actions student 
representation domain task knowledge provides information steve needs requiring declarative knowledge course author provide 
contrast simple partial order plans hierarchical plan representation provides benefits allows course author chunk complex procedures subtasks may reused multiple tasks provides structure steve demonstrations allowing chunk complex procedures subtasks aid students comprehension 
inclusion causal links task representation differs previous tutoring systems previous systems declarative representation procedural knowledge burton munro 
rickel included steps ordering constraints 
discuss shortly steve knowledge causal links allows automatically generate explanations adapt procedures unexpected circumstances making robust previous systems 
central purpose steve task knowledge allow create task model required demonstrate task monitor student performing task 
creates task model simple top task decomposition sacerdoti 
initializes task model contain name task 
adds task representation steps ordering constraints causal links task 
steve recursively repeats process composite step task representation task fully decomposed primitive actions 
result full hierarchical representation task 
task model includes steps required complete task necessary current state world 
described shortly task model important resource steve plan construction 
steve decision cycle cognition module operates continually looping decision cycle 
current implementation steve executes decision cycles second 
steve task created task model described previous section decision cycle goes phases 
input phase get latest perceptual information perception module 

goal assessment perceptual information determine goals current task satisfied 
includes goals task intermediate goals preconditions task steps 

plan construction results goal assessment construct plan complete task 

operator selection select operator 
operator represented set production rules implement steve capabilities answering question demonstrating action 
steve operators serve building blocks behavior 

operator execution execute selected operator 
cases cause cognition module output motor commands 
general notions decision cycle input phase operator selection execution provided soar 
particulars steve decision cycle unique steve 
input phase cognition module asks perception module state virtual world 
discussed section cognition module receives pieces information ffl state simulator represented set attribute value pairs described section ffl set important events occurred snapshot described section soar executes phase concurrently phases decision cycle 
ffl student field view represented set objects lie described section remainder section discusses rest decision cycle 
discuss goal assessment section plan construction section 
discuss steve operators individual capabilities 
discussion operators organized primary modes demonstrating task student section monitoring student performance providing help section answering questions past actions section 
goal assessment order construct plan complete current task steve know task goals satisfied 
described section goal task model associated attribute value pair 
steve assess goal simply determining associated attribute value pair satisfied current perceptual input mental state 
implementation process exploits soar truth maintenance system 
course author defines goal associated soar production rule created 
rule simply checks current perceptual input mental state whichever appropriate 
goal satisfied rule fires marking goal satisfied 
long goal satisfied result remain processing required 
goal unsatisfied soar retracts rule result 
steve need evaluate goal decision cycle rule automatically fires retracts status goal changes 
plan construction demonstrating task student monitoring student performance task steve maintain plan completing task 
plan allows steve identify appropriate action asked explain role action completing task 
teacher steve ability rationalize action just important ability choose 
faced conflicting design criteria designing steve planner 
handle dynamic environments containing people agents steve able adapt procedures unexpected events 
argues rote execution domain procedures favor general planning replanning capability 
encode domain actions strips operators russell norvig standard partial order planner weld construct plans 
want steve follow standard procedures possible 
augment partial order planner substantial control knowledge discourage unusual plans 
steve able construct revise plans quickly student collaborating tasks real time 
problem general partial order planners require exponential search 
require task knowledge course authors easily provide formulating strips operators control knowledge partial order planner difficult ai researchers 
satisfy criteria steve uses task model described section guide plan construction revision 
recall task demonstrate monitor steve uses top task decomposition construct task model 
task model includes steps required complete task necessary current state world 
decision cycle steve gets new perceptual snapshot assesses goals task model constructs plan completing task 
marking elements task model relevant completing task follows ffl goal task relevant 
ffl primitive step task model relevant achieves relevant unsatisfied goal 
ffl precondition relevant step relevant goal 
steve starts marking goals relevant plan 
satisfied finds step task model achieves adds step plan 
step added may unsatisfied preconditions precondition new goal likewise achieved 
exactly general partial order planner operates 
steve task model eliminates complexity partial order planner handle ffl partial order planner may multiple actions achieve goal search alternative plans 
contrast steve uses task model oracle choosing appropriate action achieve relevant unsatisfied goal search 
steve plan construction predictably fast 
ffl partial order planner identify threats unordered steps interact undesirably executed wrong order add appropriate ordering constraints 
contrast steve simply uses ordering constraints task model steps plan ordering constraint task model ordering constraint added plan 
long unresolved threats task model unresolved threats plan 
ffl partial order planner create steps plan instantiating strips operators 
maintain set binding constraints may search alternatives 
contrast steps task model instances actions action library variables 
steve need reason binding constraints 
approach satisfies design criteria 
efficient forces steve follow standard procedures possible allows adapt unexpected events steve re executes parts plan get unexpectedly undone skips parts task unnecessary goals achieved 
videos scripted demonstrations steve adapt domain procedures state virtual world efficiently 
execute plan evaluate student actions steve determine steps 
plan step ready execution applicable preconditions satisfied precluded plan step necessarily comes 
note may single step may multiple steps partially ordered plan may steps subset task model get steve current state task completion 
steve plan construction exploits soar truth maintenance system making efficient 
rules determining relevance listed implemented production rule 
depending goals task model satisfied instances production rules fire marking appropriate parts task model relevant current plan 
goals satisfied unsatisfied affected instances production rules fire retract parts plan affected changes current state revised 
demonstration demonstrate task student steve perform task explaining doing way 
creates task model 
decision cycle updates plan completing task determines appropriate steps discussed previous section 
determining appropriate steps choose demonstrate 
discuss chooses discuss demonstrates 
choosing task step demonstrate point task may multiple steps executed 
steps may applicable preconditions satisfied precluded step plan necessarily come 
standpoint completing task steps chosen 
standpoint communicating student may equally appropriate 
students easily follow demonstration steve follows certain human conventions 
example easier follow demonstration focuses subtask time 
subtasks interleaved arbitrarily steve alternately execute step subtask complete unnecessarily confusing 
example suppose steve demonstrating subtask configuring console unrelated higher priority task step suddenly relevant acknowledging alarm 
acknowledging alarm steve move unrelated subtask student expect resume interrupted subtask configuring console 
researchers computational linguistics studied problem discourse focus years identified common conventions types discourse different rhetorical persuasion dialogues regarding tasks 
ensure coherent demonstrations steve obey conventions 
grosz sidner represent discourse focus stack 
steve begins executing step plan primitive composite pushes stack 
bottom element stack main task student steve collaborating topmost element demonstration currently focused 
step top focus stack complete steve pops stack 
primitive action complete longer current plan composite step complete goals satisfied 
steve uses focus stack help choose step demonstrate 
multiple plan steps ready execution prefers maintain current focus shift subtask current focus 
operationalize intuition steve list candidates demonstration ffl step current plan ready execution candidate 
primitive action plan includes composite steps 
ffl step primitive composite candidate parent composite step task model focus stack parent step candidate 
ffl previous rule applied recursively 
composite step added candidate parent task model focus stack parent added candidate 
having enumerated candidates steve chooses follows ffl executing parent step preferable executing children 
intuitively means steve shift focus sub task introduce begins demonstrating steps 
ffl task step parent current focus topmost element focus stack preferable parent 
ffl remaining candidates unordered preferences steve chooses randomly 
illustrate rules examples ffl suppose steve new demonstration 
focus stack empty 
suppose task start compressor subtask check oil step subtask pull dipstick 
step plan pull dipstick 
step parent check oil focus stack candidate demonstration preferable pull dipstick 
parent check oil start compressor focus stack candidate demonstration preferable check oil 
start compressor added focus stack steve executes introducing task student 
steve push check oil stack execute introducing subtask 
steve push pull dipstick stack demonstrate student point steve introduced appropriate hierarchical context performing action 
ffl suppose steve perform subtasks order check oil check randomly chooses check oil 
check oil current focus prefer pull dipstick check steps push focus stack demonstrate 
dipstick removed plan popped focus stack making check oil current focus 
process repeat step check oil subtask completed popped focus stack 
ffl suppose steve performing subtask configure console unrelated higher priority ordering constraints task step suddenly relevant acknowledge alarm 
steve add acknowledge alarm plan step ready execution precludes remaining steps configure console steve push focus stack demonstrate 
alarm acknowledged removed plan popped focus stack steve resume configure console 
demonstrating task step steve chooses task step pushes focus stack demonstrates student 
step composite step steve simply introduces sub task associated text fragment 
primitive action steve demonstrates follows 
steve moves location object needs manipulate sending locomotion motor command object wants move 
waits perceptual information indicate arrived 
typically takes multiple decision cycles period steve repeatedly executes simple wait operator 

steve arrives desired object explains going 
involves describing step pointing object manipulated 
describe step steve outputs speech specification pieces information ffl name step retrieve associated text fragment ffl steve demonstrated step allows acknowledge repetition ffl rhetorical relation indicating relation task model step steve demonstrated generate appropriate cue phrase research shown human speakers cue phrases indicate rhetorical relation utterance grosz sidner moore 
steve currently uses cue phrases mark types rhetorical relations ffl step introduce composite step current step child step steve says 
ffl previous step achieved precondition current step steve says 
ffl ordering constraint task model specifying step precede current step steve says 
previous cue phrase apply 
ffl current step precedes step task model represents interruption steve says oh need 
cue phrases help structure demonstration hopefully aiding student comprehension 
steve sends motor command generate speech waits event perception module indicating speech complete 

speech complete performs task step 
done sending appropriate motor command waiting evidence perception command executed 
example sends motor command press button waits perception snapshot include button state depressed 

appropriate explains results action appropriate text fragments 
sequence events demonstrating primitive action hardwired steve 
item sequence independent capability action type action library associated appropriate suite items 
suite essentially finite state machine represented soar productions 
representing suite finite state machine fixed sequence steve demonstration action reactive adaptive 
actions current action library sequence approach gives steve flexibility demonstrate different types primitive actions differently 
steve sensitive student demonstrating 
example steve object points checks object student field view 
says look waits student looking proceeding demonstration 
finish steve demonstrations ways 
typically completes task announces completion 
allow student request finish 
case steve acknowledges student finish task shifts monitoring student 
monitoring student steve role monitor student performing task providing assistance needed 
example steve demonstrate task suggest student try 
described previous section student interrupt steve demonstration ask finish task 
case steve role monitoring student maintain plan completing task assess student actions answer questions 
steve ability adapt unexpected events especially useful monitoring student 
tutoring systems require student follow tutor plan tutor unable adapt unexpected deviations 
contrast want give student flexibility deviate standard procedure mistakes learn recover 
flexibility prime advantage simulation training allows students gain exposure wide variety situations encourages learn mistakes 
steve approach repeatedly re evaluating possibly revising plan supports flexibility typically provide assistance student student took unexpected actions landed unusual state world 
steve approach goal assessment plan construction monitoring demonstration 
main difference monitoring demonstration monitoring steve allows student take actions 
exception steve perform sensing actions plan checking light comes 
sensing actions cause observable changes virtual world change mental state student 
order update plan steve recognize goals sensing action achieved 
sensing action appropriate step steve plan student looking appropriate object student field view steve performs sensing action records result assumes student 
remainder section outline steve capabilities relevant monitoring student 
details capabilities important additional sophistication added 
important point show steve domain knowledge abilities knowledge allow assist student variety ways 
evaluating student actions assessment task goals plan completing task steve evaluate student actions 
student performs action steve identify steps task model match action 
matching steps appropriate step student action incorrect 
case steve provide feedback student ranging simple shake head look disapproval explanation action incorrect precondition satisfied step precluded step 
currently steve simply says shakes head experimenting different forms feedback soon 
student action correct steve nods head agreement 
student ask steve 
answer question steve simply suggests step plan 
tutoring systems steve suggest appropriate steps student deviates standard procedure mentioned earlier 
direct consequence steve ability adapt procedure unexpected events case student unexpected actions 
multiple possible steps steve currently enumerates 
cases appropriate 
cases steve provide focused answer knew student current focus subtask student currently working 
plan recognition algorithms infer information maintain discourse focus stack monitoring 
steve plan representation provides information plan recognition algorithms require added capability 
possible steve know 
happen subset task model sufficient completing task 
example student may permanently damaged virtual equipment 
domains tested steve simulator supported irreversible actions 
steve currently handles situations simply explaining know 
extend steve explain flaws plan know resolve preconditions know achieve 
show student may understand 
case student tell steve show 
steve responds questions demonstrating step described previous section 
clearly capability traditional disembodied tutors provide 
multiple possible steps steve currently chooses randomly 
mentioned plan recognition provide information student current focus leading informed choice 
steve suggest press function test button 
student 
steve action relevant want drain monitor test mode 
student 
steve goal relevant allow check alarm light 
student 
steve action relevant want know alarm light functional 
example explanations generated steve explaining relevance step goal steve suggests student perform action want allow student ask role action task 
understanding rationale step procedure students forced simply memorize steps 
contrast understanding causal structure task help students remember procedure adapt necessary apply knowledge related tasks 
shows steve ability rationalize suggestions 
example steve monitoring student suggests student press function test button 
student asks steve explains goal action put drain monitor test mode 
example illustrates steve ability answer follow questions student asks goal relevant steve explains enable relevant action 
student continue asking follow questions ultimately initial suggestion related goal task student 
steve generates explanations causal links plan 
recall section step goal relevant current plan reasons 
goal top level task 

precondition relevant primitive plan step 

primitive plan step achieves relevant unsatisfied goal 
connections steps goals specified causal links plan 
advantage having steve maintain plan rationalize suggestions 
current approach explanation simply follows causal links driven follow questions plan representation supports explanation strategies 
example model student knowledge steve skip causal links student presumed understand 
similarly steve purposely skip causal links order motivate action terms distant goal forcing student relate action goal 
plans represented hierarchically steve provide suggestions explanations various levels detail student knowledge steve pedagogical style 
providing rich foundation explanation prime motivation choosing hierarchical plans representation tasks 
episodic memory action review previous section described steve ability rationalize suggestions 
case steve explain relevance step goal completing task inspecting current plan 
addition wanted steve able rationalize actions action review 
steve completes demonstration asks student questions 
point ask rationalize actions demonstration ask follow questions described previous section 
answer questions steve rely current plan task complete step question longer relevant 
support questions steve employs episodic memory capability system johnson 
includes set production rules enable soar agents remember actions situations occurred 
uses soar chunking capability laird newell rosenbloom represent recall situations efficiently 
student asks steve performed action steve triggers productions recall situation action performed steve perception snapshot mental state 
recalled situation steve uses standard methods goal assessment plan construction reconstruct plan 
past plan steve action answers follow questions described previous section 
motor control overview motor control module receives motor commands cognition module decomposes sequence lower level commands sent components message dispatcher 
module controls steve appearance voice allows steve cause changes virtual world 
motor control module accepts variety motor commands ffl speak text string person agent ffl send speech act agent allows agent understand associated spoken text ffl move object ffl look object agent person ffl nod head agreement shake disagreement ffl point object ffl move hand neutral position manipulating pointing ffl manipulate object 
primitive action cognition module action library corresponding motor command motor control module accepts 
easy add built top steve lower level body control capabilities discussed 
currently steve press objects buttons flip switches turn valves move objects short distances distances require steve move pull push objects dipstick 
motor control module maps commands messages sends message dispatcher cause changes virtual world 
messages sends fall categories actions messages inform simulator steve actions 
steve takes actions sending messages sent visual interface component person took action touch release objects 
addition manipulate objects person touch drag throttle steve sends message specifying desired endpoint manipulation set throttle rpm simulator responds messages moving object gradually specified endpoint 
speech cognition module sends motor command generate speech motor control module sends corresponding message message dispatcher cause appropriate speech generation components generate speech 
starting steve user configure voice gender speaking rate vocal tract size pitch voice speaks 
body animation steve supports set primitive body control commands 
motor control module converts motor commands cognition module combination primitive commands 
primitive command causes steve broadcast low level messages visual interface components move rotate steve body parts 
create new body steve redefine primitive commands include ffl move object ffl look object agent person turn head ffl look object agent person focus body ffl nod head agreement shake head disagreement ffl point object ffl press object ffl grasp object ffl move hand neutral position ffl switch speaking facial expression ffl switch neutral non speaking facial expression currently extending set include wider variety facial expressions 
ability completely replace steve body reimplementing small set body primitives allows experiment different bodies 
steve teaches physical tasks variant human form appropriate 
question detail needed 
simply demonstrating actions hand sufficient 
adding head opens additional channels communication example allows student track steve gaze 
simple representations head hand better full human respects 
example full human visually obtrusive disadvantage current head mounted displays offer relatively narrow field view 
full human representation offers exciting possibilities allows realistic demonstrations physical tasks richer gestures types nonverbal communication 
architecture easy plug different bodies evaluate trade offs 
experimented bodies steve 
simple spectrum tried hand hand head 
complex tried full human jack software badler phillips webber developed university pennsylvania 
long run jack exciting prospect 
jack limited jack comes visual interface run 
visual interface support architecture creating virtual worlds jack awkward send movement commands query resulting position orientation body parts update graphical representation jack body 
body steve shown section 
includes upper half full human head includes movable eyes eyelids eyebrows lips 
regardless body approach animation motor control module sends messages move rotate graphical models steve body parts 
contrast researchers stone lester andre 
create library animation sequences dynamically string control agent behavior 
approach provides finer granularity behavior allows steve interact new virtual worlds requiring course author build domain specific library animation clips 
remainder section discuss control steve body detail specifically locomotion gaze hand control 
locomotion control steve locomotion cognition module sends motor command move steve specified object 
implement command motor control module performs steps 
plans collision free path steve current location specified object 
recall section perception module maintains adjacency graph objects virtual world 
edge objects graph indicates steve move colliding objects wall 
steve current location object specified destination object motor control module uses dijkstra shortest path algorithm cormen leiserson rivest compute path 
motor control module moves steve path leg time 
leg path movement object 
determines location cartesian coordinates steve 
asks bounding sphere destination object perception module 
starting object origin uses object radius front vector determine point front right corner object 
uses default offset move slightly farther front object right 
course author specified agent location offset object default 

sends message visual interface components cause steve body gaze focus destination object 

waiting half second steve shift gaze complete sends message move steve path current location specified location 
steve arrives desired location visual interface components send message 
point perception module updates steve location motor control module sends leg path 
gaze steve shifts gaze different situations 
shifts triggered explicitly cognition module 
triggered motor control module performing motor command 
rare cases gaze shifts triggered directly perception module sort knee jerk reaction 
gaze shifts occur situations ffl moving location location looks going triggered motor control module 
ffl looks object manipulating triggered motor control module 
ffl looks object pointing triggered motor control module 
ffl looks person agent talking triggered motor control module 
ffl interacts object looks object triggered perception module 
ffl waiting looks triggered cognition module 
ffl monitoring student performing task looks triggered cognition module 
ffl executing sensing action looks object sensed triggered cognition module 
ffl informs looks nods triggered cognition module 
code control steve gaze autonomous 
previously movement head required perception module query visual interface components position gaze target 
receiving information motor control module sent command visual interface components rotate head target 
visual interface components accept command steve gaze track object person agent animating shift head rotated automatically frame remain looking target 
visual interface components recognize steve limits motion example object moving steve track left shoulder moves directly point track right shoulder 
hand control animate steve hands defined possible poses resting pointing pressing grasping 
steve doing hands resting sides 
manipulate point object motor control module gets bounding sphere object 
sends commands animate movement hand object 
pressing grasping hands placed front side object specified object front vector orientation determined press grasp vectors object whichever appropriate 
pointing hand placed point object bounding sphere closest steve corresponding shoulder oriented points object origin 
visual interface components animate movement hand initial position target position controlling corresponding movements arms needed 
steve hand proper position motor control module sends command tether object sustain constant position orientation relative object 
serves purposes 
allows steve turn body speak student causing undesired change hand position relative object 
second supports hand animation steve object manipulations 
example steve finger button motor control module sends command simulator simulate button pressed 
simulator animates movement button steve finger hand arm tracks movement button providing illusion pushing 
approach works object movement flexibility steve arms hands case far 
status evaluation steve tested variety naval operating procedures 
perform tasks consoles control gas turbine engines propel naval ships check manipulate valves surround engines perform handful procedures high pressure air compressors part engines 
continuing extend capabilities areas 
planning set evaluations usc collaboration air force armstrong laboratory 
plan investigate experimentally factors contribute effectiveness agent instruction 
particular interested determining factors critical agents cohabit virtual world students type embodiment graphical realization agent agents pedagogical capabilities degree fidelity believability agent behavior 
focuses training single student perform person task extended steve support team training 
required extensions steve task knowledge represent various team members task steps responsible extensions allow steve knowledge extensions allow steve generate understand task specific communication teammates 
short johnson 
provides brief overview details appear 
complicated team scenario date team members handle loss fuel oil pressure ship gas turbine engines 
task involves number subtasks individual tasks involve sub teams 
task consists dozen actions various team members 
tested scenario students agents agents serve students team members agents serve tutors 
related closely related pedagogical agent virtual reality developed colleagues savage 
agent inhabits dimensional simulated nasal cavity providing assistance surgery medical students 
agent demonstrate surgical steps monitor students performing surgery intervene student skips step tell student asked 
agent animated form communicates students disembodied voice demonstrates surgical steps moving virtual instruments controlling student viewpoint 
steve agent capable natural language understanding gesture recognition 
agent represents domain tasks hierarchical scripts schank abelson similar steve hierarchical plans 
steve continually re evaluates plans current state virtual world agent merely keeps track steps executed adapt unexpected events allow student flexibility performing tasks steve 
lester colleagues developing animated pedagogical agents herman bug stone lester cosmo lester 
agents inhabit dimensional virtual worlds appear dimensional characters floating top dimensional image simulated world 
agents notable approach behavior control control behavior dynamically selecting audio visual segments large domain specific library 
approach quite requiring considerable effort artists animators building library results high quality animation 
steve herman cosmo interact simulator abilities plan replan procedural tasks 
people developed animated agents generate presentations 
ppp persona andre rist andre rist mueller animated agent combines speech gestures describe procedures operating physical devices 
agent body controlled flipping different bitmap images agent different poses 
agent interact simulation pedagogical capabilities ability describe procedure 
notable ability plan schedule sequence presentation acts speech gestures 
agent presenter jack noma badler full human uses speech gestures short range locomotion give presentations 
human animation provided jack software badler phillips webber 
steve presentations interactive scripted human 
notable full human analysis gestures gaze presentations 
variety researchers studied control animated human figures 
projects university pennsylvania relevant 
projects focused pedagogical presentation capabilities notable sophisticated control animated humans 

developed agent play hide seek virtual agents 
agent uses hierarchical planner complex actions incorporates separate search planner finding objects environment move virtual environment 
geib 
developed agent integrates high level planner search planner finding objects planner manipulating objects 
ability realistically grasp objects task dependent manner described douville 
especially valuable extension steve 
cassell 
developed agent integrates speech gestures facial expressions context dialogue 
agent uses greater variety nonverbal communicative acts steve acts tightly integrated spoken utterances close coupling verbal nonverbal communication crucial achieving human conversational abilities steve 
addition improving steve conversational abilities improve student ability communicate steve 
critical problem steve capable understanding natural language student limited prespecified speech utterances 
trains system allen ferguson allen miller supports robust spoken dialogue computer agent person working task 
agent animated form cohabit virtual world users 
trains steve carry similar types dialogues users focus different aspects conversations combination systems promising 
ultimately allow students full range nonverbal communicative acts people employ face face communication 
example gandalf agent cassell supports full multi modal conversation human computer 
systems gandalf combines speech gesture intonation facial expression 
systems gandalf perceives communicative signals humans people talking gandalf wear suit tracks upper body movement eye tracker tracks gaze microphone allows gandalf hear words intonation 
may time technology gandalf practical system points way exciting human computer interaction 
steve illustrates enormous potential combining agent architectures intelligent tutoring graphics 
steve draws agent architectures sensing state world assessing task goals constructing revising plans sending motor commands control virtual world decision cycle executed multiple times second 
draws intelligent tutoring explaining tasks monitoring students answering questions 
draws computer graphics control animated body including locomotion gaze gestures demonstrations actions 
combined technologies result new breed computer tutor human agent interact students virtual world help learn 
acknowledgments funded office naval research 
grateful contributions collaborators randy stiles colleagues lockheed martin developed visual interface component allen munro colleagues behavioral technologies laboratory developed simulator richard ben moore erin shaw marcus isi contributed steve 
especially grateful marcus developed model steve current body code visual interface component controls animation 
allen miller sikorski 
robust understanding dialogue system 
proceedings th annual meeting association computational linguistics 
anderson corbett koedinger pelletier 
cognitive tutors lessons learned 
journal learning sciences 
andre rist 
coping temporal constraints multimedia presentation planning 
proceedings thirteenth national conference artificial intelligence aaai 
menlo park ca aaai press mit press 
andre rist mueller 
employing ai methods control behavior animated interface agents 
applied artificial intelligence 
issue 
badler phillips webber 
simulating humans 
new york oxford university press 
savage 
adding intelligence interface 
proceedings ieee virtual reality annual international symposium vrais 
los alamitos ca ieee computer society press 
savage oppenheimer edmond 
expert surgical assistant intelligent virtual environment multimodal input 
proceedings medicine meets virtual reality iv 
burton 
diagnosing bugs simple procedural skill 
sleeman brown eds intelligent tutoring systems 
cambridge ma academic press 

cassell 
power nod glance envelope vs emotion animated conversational agents 
applied artificial intelligence 
issue 
cassell pelachaud badler steedman becket douville prevost stone 
animated conversation rule generation facial expression gesture spoken intonation multiple conversational agents 
proceedings acm siggraph 
cormen leiserson rivest 
algorithms 
new york mcgraw hill 
douville badler 
task level object grasping simulated agents 
presence teleoperators virtual environments 
ferguson allen miller 
trains mixed initiative planning assistant 
proceedings third conference ai planning systems 
geib moore 
architecture agents search manipulate objects 
technical report ms cis linc lab department computer information science university pennsylvania 
grosz sidner 
attention intentions structure discourse 
computational 
johnson rickel stiles munro 
integrating pedagogical agents virtual environments 
presence teleoperators virtual environments 
johnson marsella rickel 
pedagogical agents virtual team training 
proceedings virtual worlds simulation conference volume simulation series 
san diego ca society computer simulation international 
johnson 
agents learn explain 
proceedings twelfth national conference artificial intelligence aaai 
menlo park ca aaai press 
korth silberschatz 
database system concepts 
new york mcgrawhill 
labrou finin 
semantics approach kqml general purpose communication language software agents 
proceedings third international conference information knowledge management 
acm press 
laird newell rosenbloom 
soar architecture general intelligence 
artificial intelligence 
lester towns callaway 
deictic believability coordinating gesture locomotion speech lifelike pedagogical agents 
applied artificial intelligence 
issue 
mcallester rosenblitt 
systematic nonlinear planning 
proceedings ninth national conference artificial intelligence aaai 
menlo park ca aaai press 
moore 
human explanations effective 
proceedings th annual conference cognitive science society 
munro 
primitive simulation centered tutor services 
proceedings ai ed workshop architectures intelligent simulation learning environments 
munro johnson 
attribute centered simulation authoring instruction 
proceedings world conference artificial intelligence education ai ed 
association advancement computing education 
newell 
unified theories cognition 
cambridge ma harvard university press 
noma badler 
virtual human presenter 
proceedings ijcai workshop animated interface agents making intelligent 
rickel 
intelligent tutoring framework task oriented domains 
proceedings international conference intelligent tutoring systems 
russell norvig 
artificial intelligence modern approach 
englewood cliffs nj prentice hall 
sacerdoti 
structure plans behavior 
new york elsevier northholland 
schank abelson 
scripts plans goals understanding 
hillsdale nj lawrence erlbaum associates 
stiles mccarthy 
training studio virtual environment training 
workshop simulation interaction virtual environments sive iowa city iw acm press 
stone lester 
dynamically sequencing animated pedagogical agent 
proceedings thirteenth national conference artificial intelligence aaai 
menlo park ca aaai press mit press 

communicative humanoids computational model psychosocial dialogue skills 
ph dissertation massachusetts institute technology 
chopra reich moore badler webber geib 
decision networks integrating behaviors virtual agents avatars 
proceedings ieee virtual reality annual international symposium vrais 
los alamitos ca ieee computer society press 
weld 
commitment planning 
ai magazine 

