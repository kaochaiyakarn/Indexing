rc computer science ibm research report mockingbird system compiler approach maximally interoperable distributed programming joshua auerbach mark chu carroll ibm research division watson research center yorktown heights new york limited distribution notice report submitted publication outside ibm probably copyrighted accepted publication 
issued research report early dissemination contents 
view transfer copyright outside publisher distribution outside ibm prior publication limited peer communications specific requests 
outside publication requests filled reprints legally obtained copies article payment 
ibm research division almaden delta watson delta tokyo delta zurich programmers wishing write distributed applications face painful choice 
best available distributed programming languages programming relatively easy able publish interfaces languages 
technology separate interface definition language idl get coverage multiple languages reasons detailed programming task harder 
mockingbird system solution problem 
set experimental tools enables interoperation languages avoiding complexities idl programming 
programmers prepare multilanguage interoperation enhancing existing programming language declarations annotations idl yielding advantages demonstrate example 
improvement enabled appropriate criterion correctness translation values different type systems restrictive criterion previous systems 
empowered change tools compiler technology generate automated communication support higher level abstraction previous tools 
reasons intrinsic approach mockingbird programs able interoperate preexisting programs require adopt mockingbird techniques 
section show example idl tools harder solutions 
section example show mockingbird programmer able get nearly best worlds 
section introduce mockingbird criterion correctness interlanguage value transmission contrast type preservation criterion systems 
section introduce mockingbird signature language mocksl internal notation captures property retains information needed mockingbird emitter generate communication stubs show interfaces example translated mocksl 
section briefly detail communication stubs generated mocksl 
section describe status mockingbird prototype suggest directions summarize conclude 
distributed programming languages versus idl programming tools support distributed programming marshaling subsystem consisting compile time facilities analyze interface declarations generate marshaling stubs runtime facilities support stubs 
marshaling stubs gather values program variables form messages parse incoming messages update program variables 
tools employ marshaling stubs fall categories 
distributed programming languages pls programmer gets automated marshaling free compiler language analyzes type interface definitions language 
research distributed languages emerald argus hermes sr see 
proposed distributed extensions pre existing languages java rmi compositional concert :10.1.1.52.176
solutions single set declaration terms data interfaces local computation remote interoperation 
feature languages easy 
protocol messages exchanged processes encode language type system hard publish interfaces different languages 
idl tools programmer declares interfaces data remote interoperation specialized language type system 
idl compiler translates declarations equivalent declarations pl generates marshaling stubs 
tools include research results courier matchmaker competing proposals various companies sun onc osf dce microsoft distributed com omg corba 
idl type system translation language multi language interoperation achieved 
declarations imposed idl don full expressiveness pl may convenient local computation 
programmer adopts idl derived types program program public class point private float private float methods public class extends vector public class line private point start private point methods interface extends remote proxy public line points implementation run server remotely invoked client line fitting distributed java style compromised 
isolates types communicating parts program ends moving values set computation types set idl derived communication types 
illustrate contrast example 
problem involves remote computation set points transmitted line fitted points returned 
show problem depicts solved distributed version java similar sun java rmi proposal 
notice data types point line public methods shown important local computation relevant points lines transmitted 
notice collect multiple points implemented trivially conveniently terms java standard vector class 
implicitly contains point objects declaration states constraint explicitly 
notice clause extends remote proxy interface declaration 
indication form necessary practical distributed java method invocations interface may remote 
assert argument writing easy 
writing thing distributed form shown easy 
version differs java version order illustrate key points 
assumed computational parts application prefer representation collections points paired arrays coordinates collections distinct point objects 
preference exhibited concrete form taken class 
natural formulation interface operation function class shown 
addition uses pointers uninitialized variables way obtain outputs done example 
annotation shown concert syntax indication form needed practical distributed parameters transmitted callee caller function invoked remotely :10.1.1.52.176
course java implementations individually easy write interoperate programmers working distributed languages way create interoperable declarations 
look interface appears omg corba idl 
show idl declaration 
declaration just easy write corba idl java 
types declared ones judged programmer appropriate local computation 
corba single heterogeneous aggregate constructor struct class point float float public methods class int len float xs float ys public methods class line point start point public methods typedef void func points line fit line fitting distributed struct float float struct typedef sequence interface pts line fitting corba idl class public default constructor max maximum constructor max length value boolean release false const operator const maximum const void length length const operator index const operator index const realization corba sequence constructor defines data methods 
point line programmers wanted local computation 
corba dynamic homogeneous aggregate constructor sequence induces specific single representation pl shows idl compiler supposed translate corba standard 
translations idl types java natural proposals java lacks obvious mapping idl constructs unions parameters 
show detail complex primarily semantically specific unrelated needs local computation 
exactly behavior corba dictates application specific behavior programmer wanted ability extract values separate arrays 
mockingbird approach aim allow programming java examples imposing arbitrary abstractions separate idl permitting java interfaces interoperate 
line fitting example goal achievable mockingbird techniques 
cost programmer add slightly information existing declarations 
done perturbing semantics declarations affect local computation 
mockingbird java programmer provide information contain point objects arbitrary objects 
altered declaration follows 
public class extends vector point note assertion simply accurate refinement specification change actual semantics 
mockingbird programmer provide information class 
class int len float required length len xs float required length len ys public methods java source program extractor analyzer mocksl declarations java pragmatics synthesizer mocksl declarations pragmatics mocksl declarations corba idl pragmatics emitter emitter corba iiop stubs java corba iiop stubs compiler compiler compiler java compiler client executable server executable declarations source example mockingbird compilation process required annotation says pointer follows null 
length annotation says pointer addresses array length integer value 
note java extended order support distribution extends remote proxy convention java annotation 
additional extensions modest context 
mockingbird lexically unambiguous delimiters mark annotations 
allows filtered prior compilation simple lexical process 
stylized comments find syntax readable 
stubs necessary produce interoperation java programs shown generated automatically mockingbird 
addition mockingbird implementations programs interoperate standard omg corba program idl illustration communicating corba standards 
actual mockingbird toolset organized elements appear 
shown mockingbird system built composition types tools 
extractors extract relevant datatype definitions source language programming language idl 
analyzers generate intermediate notation mocksl output extractors 
synthesizers generate pl idl declarations mocksl 
emitter generates marshaling stubs mocksl 
illustrates possible real world development scenario earlier examples 
java programmer wrote interface 
added additional mockingbird annotation discussed fed result mockingbird java extractor mockingbird analyzer 
result internal form called mocksl discuss 
programmer interacted synthesizer help finalize preferred interface 
synthesizer determined interface interoperable java version 
result interaction mocksl specification 
programmers stopped simply asked emitter build stubs programs interoperate 
recognizing programmers mockingbird programmers decided prudent corba idl version interface corba clients servers interoperate theirs 
interacted corba idl synthesizer determine idl specification interoperate 
mocksl step captures idl detailed formats messages corba mandated iiop protocol transmitted 
emitter took appropriate pairs mocksl specifications generated stubs java iiop iiop 
programs communicate way allows corba programs communicate 
slightly different version scenario corba idl may pre existed mockingbird programmers simply fed appropriate extractor analyzer produce mocksl 
mockingbird synthesizers find preferred mappings java 
remainder show mockingbird able achieve ambitious goal flexible interoperation 
process suggest limitations approach 
new criterion correctness previous distributed languages idl tools type value preservation criterion correctness marshaling subsystems 
value type leaves process arrives process type value 
criterion correctness easy understand easy marshaling subsystems achieve main obstacle providing tools support multiple languages remaining easy 
processes employ different type systems clear marshaling types impossible type exist language process idl systems defining type system fixed narrow set translations pl fixed narrow translations guarantee type preservation achievable 
mockingbird approach problem begins observation type preservation necessary condition interoperation 
matter notation declare interface interface ultimately dictate information flow 
side interface capable observing happens side 
partner know exact types values preserved 
course numerous semantic constraints interface met system useful type preservation doesn guarantee constraints met 
multilanguage environment additional strictness type preservation may simply irrelevant meeting real application level constraints 
usual definition correctness mockingbird substitutes liberal definition terms 
types interconvertible invertible mapping values type values 
java definitions interconvertible sense 
possible representations homogeneous collection pairs floating point numbers interconvertible collection formed linked list system may need perform fairly extensive conversions values cross interface 
addition isolated data values concept extends readily actions remote method call remote procedure call 
act invoking method java interface produces pair messages request response interconvertible messages produced invoking func interface turn interconvertible pair request response messages sent received explicitly 
example java variable type interconvertible variable type func 
mockingbird marshaling system guarantees stubs perform invertible value mappings preserve exact type 
guarantees actions method invocations communicate interconvertible messages necessarily similar method invoked remote process 
liberal rules able provide better tradeoff needs interoperability needs individual languages 
distributed system opportunities convert values processes communicate typically separated protocol system defined terms messages 
stub wire converts type system process message type system stub converts message type system type process transitive types inside interconvertible interconvertible message type 
separation provides expanded opportunities exploiting relaxed notion marshaling correctness 
process employs older marshaling technology believes preserving exact type reconstruction process process may newer mockingbird constructs interconvertible type 
process need changed meaning mockingbird assisted programmer communicate 
conversions typically intervene processes able important guarantee 
type systems define type type preserved long mapping function interconvertible message type interconvertible implies invertible 
consequently mockingbird loses weaker criterion homogeneous single language case gains lot attempting multi language interoperation 
mockingbird signature language mocksl mockingbird analyzer translates programming language declarations types signatures intermediate representation called mocksl 
mocksl designed things 
describes set types type interconvertible 
preserves concrete detail necessary generate conversion stubs interconvertible types 
goals approximated conservatively goals unachievable 
converting defined general way possible conversion turing complete problem automated stub generation impossible 
defined mocksl capture computable conservative subset applying principles 

define mocksl type system right 
call types types 

define types mocksl differentiated value sets ignoring characterizing operations strictly necessary define sets 
mapping pl idl types types typically widening different pl idl types corresponding type 

translation pl idl types mocksl attempts put type definitions canonical form possible interconvertible pl idl types yield types mocksl 
properties satisfied property mocksl types reduces structural equivalence mocksl type system 
intuitively types interconvertible mocksl reduced sets primitive values correspondance elements sets 
types defined contain information original pl idl types generated 
information characterizing operations object oriented class discarded stub generation 
kinds information particularly information describing layout structures memory preserved order generate stubs 
mocksl information preserved form pragmatic annotations applied type describe representation particular programming language communication protocol 
structure mocksl representations particular type constructors generate representations 
types mocksl reflect semantics pls idls designed support 
integer real character primitive types type 
type encodes types mockingbird expected leave 
capability type model character repertoire rep name record member type member type choice member type member type sequence range spec type capability special repertoire name integer range range spec real exponent range spec miscellaneous primitive types structuring types communication channels type typeref name type name string precision precision spec ref mocksl type ref mocksl type mocksl type constructors remote 
typeref type express recursion type inclusion type completely included definition 
record type constructs heterogeneous aggregates sequence type constructs homogeneous aggregates 
choice type constructs alternative types variant union types pascal 
mocksl type system composed familiar concepts conservative definition just type preservation new name 
primitive types defined ignore detail essential defining value set 
similarly constructors capture issues quantity choice ordering strictly necessary put constituents 
pointer local type mocksl analysis pointers reduces type 
requires annotation required annotation example 
analyzing compound applications type constructors mockingbird analyzers apply various rewritings reduce incidence obviously interconvertible cases structurally equivalent 
example structure nested structure analysis absorb members inner structure outer 
declaration calls values type values type communication calls tuples tuple member member mockingbird analyzes internal form resembling second declaration 
example transformation illustrated implicit fact mockingbird finds java earlier examples interconvertible 
declaration employs recursion fashion homogeneous aggregate equivalent purposes rewritten homogeneous aggregate 
simple linked list sequence analyzed mockingbird 
representing types value sets ignore details declaration order nonessential names order maximize 
transformations employ invertible manifestly correct implementations criterion 
attempted prove properties set transformations taken 
set chosen sequence range signed integer member float precision exponent sequence member record float precision exponent member range signed integer member record sequence example rewriting mockingbird analysis heuristically maximize data structures observed typical important 
long property implementation mockingbird remains conservative decidable improve coverage gradually adding transformations 
representing types mocksl describe mocksl represents types signatures illustrating examples earlier 
mocksl representation mockingbird example pragmatic annotations shown 
example illustrates features representations types 
type described mocksl tree 
trees rooted type constructors real record children specifying details type 
type constructors divided number families shown discussed previous section 
example see examples primitive types structuring types type capability type 
primitive type illustrated real taken example primitive types represented mocksl 
real type detailed information specifying specific properties particular target compiler 
details completely qualify exact range values represented instance type 
primitive types dealt similarly 
example shows structuring types record sequence 
records build types original example 
record consists unordered collection member trees contains mocksl type particular member structure 
instance representation point type record members fields original point type 
members contains real type describing allowable range values float 
sequence represent type original program 
sequence type components specification length specification element type sequence 
case element type pair real values 
demonstrates transformations mocksl 
original example arrays floating point values virtue length annotations original declarations know length 
direct representation structure mocksl record containing sequences 
share identical length constraint member typeref member typeref record line member typeref member capability record record member real exponent precision member real exponent precision point special repertoire ieee special repertoire ieee real member real member record sequence unsigned func mocksl representation example record capability member record member real member real 
sequence member member real member real member real member real 
record typeref mocksl form corba example mocksl merges sequences single sequence pairs 
func type arises follows 
mocksl represent remote procedure calls pair messages 
message contains input parameters call capability represent caller expectation receiving particular type reply 
reply called message example type line 
message func included reply capability addition input parameters type declaration exactly corresponded mockingbird generated record type 
illustrate meaningful sections mocksl represents corba idl version example 
typeref nodes replaced structures trees structurally equivalent interconvertible mockingbird 
mocksl java version explicitly illustrated look version level detail pragmatic annotations different 
structurally equivalent interconvertible 
align align expr size size expr string string location program integer field specs location location clauses applied primitive fields representation clauses applied primitive label fields applied non meaningful tag field encoding encoding name dynamic ref runtime proc reveal reveal ref mocksl type applied toplevel songs song modifier clauses refinement clauses pragmatic annotations mocksl pragmatic annotations meaningful parts mocksl illustrated allow mockingbird determine signatures interconvertible 
contain information allow emitter generate conversion stubs lack details particular value set mocksl type represented pl idl type 
information provided form pragmatic annotations attached type constructor nodes 
basic set pragmatic annotations illustrated 
briefly illustrate pragmatic annotations preserve representation details 
return earlier example illustrate pragmatic annotations generated mocksl types 
mockingbird analyzes particular target machine compiler 
illustration chose ibm rs workstation running aix compiler 
selected portions example shown 
pragmatic annotations divided classes regular annotations attached type constructor leaf annotations disallowed structuring types record choice sequence 
regular annotations contain information alignment constraints entire type particular architecture size type information relate type back original type definition generated 
leaf annotations include location clauses representation clauses 
location clauses specify procedure locate part structuring type 
location clauses contain information needed allocate storage construct objects 
syntax location mini language body location clause specified 
representation clauses contain data emit details marshaling code discussed section 
seen location clauses leaf nodes reflect semantics enclosing structuring nodes 
example location clause elements sequence uses operator form loop visiting element turn 
location clauses placed leaf nodes structuring nodes transformations rewrite reorder structuring nodes preserving leaf nodes leave intact 
offset indirect operators correctly describe concrete representation pair arrays type sequence records 
generating code mocksl mockingbird code generation works mocksl specifications 
specifications type may differ pragmatic annotations 
example mocksl specification may describe object appears memory process 
may describe structure appears protocol message 
mocksl specifications example record types certain set member nodes 
record member member real exponent precision size align point real exponent precision point encoding location location encoding unsigned real member real member record sequence location location integer integer indirect xs len offset offset offset offset range signed location xs len encoding big range signed location xs len encoding big index index indirect xs len mocksl types pragmatic annotations expr eval expr exists value size index integer unary op expr expr binary op expr mocksl integer type location expressions location statements offset distance indirect num pl id song id expr stmt meaning id stage num syntax location clauses stub generator walks mocksl trees parallel finds corresponding type nodes 
algorithm succeeds definition interconvertible mocksl types structurally equivalent 
location node attached leaf node transformed machine instructions compute address value described type node 
address may program memory communication buffer 
values contiguous related simple pointer relationships code locate common subexpressions 
recognized eliminated standard techniques leading efficient stubs 
additional complications introduced process conditionals iteration sequence members cases handled simply standard code generation techniques 
status constructed prototype version mockingbird extractor analyzer support java corba idl 
emitter runtime support mockingbird programming java 
interoperability languages iteratively improved details system 
full interoperability standard corba components planned milestone 
prototype runs pcs windows nt windows os ibm rs workstations aix 
readily portable platforms 
mockingbird languages develop applications 
mockingbird java fellow research group develop java framework collaborative objects 
mockingbird prototype semi automated authenticated system distributing binary code world wide web 
evaluating candidate applications emphasis ones significantly exploit multilanguage interoperability 
accomplished 

defined new criterion stub correctness distributed programming 
showed better criterion multi language interoperation restrictive type preservation criterion 

showed system interoperate older systems restrictive criteria mockingbird adopted order useful 

described mocksl intermediate representation describes type signatures terms interconvertible value sets 
described type signatures java corba idl analyzed mocksl 

finding possible interconvertible types achievable showed goal approximated conservatively type system extensible set transformations 

showed code automatically generated mocksl 
mockingbird project builds insights experiences concert project particularly idea specialized internal representation interfaces 
mockingbird organized compilation system explicitly problem interoperation 
addition mockingbird tools implemented avoid nonstandard compilers preprocessing making cleaner faster adapt new languages 
expect mockingbird project continue refining ideas measuring results 
includes formalizing analysis process completing initial interoperation demonstration java completing corba support optimizing stubs expanding regularizing annotations applied java types considering transformations designing synthesizers components help programmer find declaration language match extending mockingbird languages smalltalk cobol extending mockingbird idl technologies distributed com 
java remote method invocation specification 
technical report sun microsystems 
gregory andrews 
synchronizing resources 
acm transactions programming languages systems october 
joshua auerbach arthur goldberg germ goldszmidt gopal mark kennedy rao james russell :10.1.1.52.176
concert language distributed programming 
winter usenix conference january 
joshua auerbach gopal mark kennedy james russell 
concert supporting distributed programming language extensions portable runtime 
th international conference distributed computing systems june 
joshua auerbach james russell 
concert signature representation idl intermediate language 
proceedings acm sigplan workshop interface definition languages january 
bal steiner tanenbaum 
programming languages distributed computing systems 
acm computing surveys september 
black hutchinson jul levy carter 
distribution types emerald 
ieee transactions software engineering january 
chandy kesselman 
cc declarative concurrent object oriented programming language 
technical report cs tr california institute technology 
michael jones richard rashid 
mach matchmaker kernel language support object oriented distributed systems 
technical report cmu cs cs department cmu september 
liskov 
distributed programming argus 
comm 
acm march 
microsoft digital equipment 
component object model specification 
microsoft 
object management group 
common object request broker architecture specification edition 
open software foundation cambridge mass osf dce release developer kit documentation set february 
robert strom david bacon arthur goldberg andy lowry daniel yellin alexander yemini 
hermes language distributed computing 
prentice hall january 
sun microsystems 
sun network programming 
sun microsystems mapping idl java alpha edition may 
xerox 
courier remote procedure call protocol december 
technical report 
yemini goldszmidt wei 
concert high approach heterogeneous distributed systems 
ninth international conference distributed computing systems pages 
ieee computer society june 

