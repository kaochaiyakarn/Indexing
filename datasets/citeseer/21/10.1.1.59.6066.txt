scientific workflow management kepler system bertram lud scher chad berkley dan higgins efrat jaeger matthew jones edward lee jing tao yang zhao scientific disciplines data information driven new scientific knowledge gained scientists putting data analysis knowledge discovery pipelines 
related trend scientific communities realize benefits sharing data computational services contributing distributed data computational community infrastructure grid 
infrastructure means scientists ideally bothered little existence 
goal scientists focus development call scientific workflows 
networks analytical steps may involve database access querying steps data analysis mining steps steps including computationally intensive jobs high performance cluster computers 
describe characteristics requirements scientific workflows identified number application projects 
elaborate kepler particular scientific workflow system currently development number scientific data management projects 
describe key features kepler underlying ptolemy ii system planned extensions areas research 
kepler open source project welcome related projects new contributors join 
supported nsf itr seek doe sci dac de fc er sdm nsf itr ccr chess nsf itr geon nih rr biomedical informatics research network coordinating center cc nsf itr nsf dbi resurgence san diego supercomputer center uc san diego dept computer science genome center uc davis national center ecological analysis synthesis uc santa barbara department electrical engineering computer sciences uc berkeley september revised march contents scientific workflows example workflows 
promoter identification 
mineral classification 
job scheduling 
requirements desiderata 
differences business workflows 
highlights kepler web service extensions 
grid extensions 
actor oriented modeling 
research issues higher order constructs 
third party transfers 
research issues 
related 
diversity phenomena nature great hidden rich precisely order human mind shall lacking fresh johannes kepler information technology way sciences conducted witnessed new techniques results discoveries quickly evolving multi disciplinary fields bioinformatics biomedical informatics advance new data information driven science advanced infrastructure large investments uk science programme nsf initiative initiatives nih biomedical informatics research network doe scidac scientific discovery advanced computing genomes life just mention 
efforts focus underlying middleware infrastructure known grid scientists ultimately interested tools bring power distributed databases computational grid resources desktop allow conveniently put run scientific workflows 
mean process networks typically data analysis pipelines comparing observed predicted data include wide range components querying databases data transformation data mining steps execution simulation codes high performance computers ideally scientist able plug scientific data resource computational service scientific workflow inspect visualize data fly computed parameter changes necessary re run affected downstream components capture sufficient metadata final products runs scientific workflow considered computational experiments help explain results reproducible computational scientist 
scientific workflow system scientific problem solving environment tuned increasingly distributed service oriented grid infrastructure 
grand vision reality number significant challenges addressed 
example current grid software complex average scientist fast changing versions evolving standards require details hidden user scientific workflow system 
web services provide simple basis loosely coupled distributed systems core web service standards wsdl wsd provide simple solutions simple problems harder problems web service orchestration rd party transfer service directly circumventing transfer back workflow control engine transactional semantics service workflows remain subject emerging web service standards 
complexity underlying technical issues resulting overly complex standards widely adopted core standards xml wsdl 
set challenges arises inherent complexity scientific data 
example capture semantics scientific data simple metadata meant human consumption inform system data sets suitable input specific analytical pipeline 
similarly define potentially meaningful conceptual level compose independently designed web services analysis pipeline included subworkflow scientific workflow 
knowledge representation techniques including formal ontologies corresponding semantic web standards web ontology language owl promising directions 
case grid middleware goal hide underlying complexity possible user scientific workflow system 
organized follows section introduce scientific workflows means real world examples different domains 
examples illustrate characteristic features requirements scientific workflows compare business workflows 
section specific features kepler underlying ptolemy ii system 
turns ptolemy ii provides user friendly graphical user interface called ready extended open source platform 
main advantage system lies modeling design paradigm called actor oriented modeling proven essential deal complex design issues scientific workflows 
section presents ongoing research issues 
section briefly summarize findings 
wsdl mainly provides xml notation function signatures types inputs outputs web services 
scientific workflows conceptual napkin drawing view promoter identification workflow abb scientific workflows growing interest scientific workflows seen number events scientific data management workshop sdm science workflow services workshop esc science grid environments workshop esc virtual observatory service composition workshop gri science link workshop workflow interoperability semantic extensions lin various activities part global grid forum ggf just name 
scientific workflows play important role number ongoing large research projects dealing scientific data management including funded nsf itr griphyn geon lead seek nih doe sci dac sdm similar efforts funded uk science initiative mygrid 
example seek project see developing analysis modeling system ams allows design execute scientific workflows 
ams workflow component employs semantic mediation system sms facilitate workflow design data discovery semantic typing bl 
seek example community driven project need system allows users seamlessly access data sources services put reusable workflows 
seek main projects contributing cross project kepler initiative workflow system discussed 
aspects types workflows 
scientific workflows exhibit particular traits data intensive compute intensive analysis intensive visualization intensive workflows sections exhibit different features service orientation data analysis re engineering user interaction highperformance computing respectively 
depending intended user group want hide emphasize particular aspects technical capabilities scientific workflows 
example grid engineer interested low level workflow aspects data movement remote job control 
having workflow components actors operate level beneficial grid engineer 
conversely scientific workflow system hide aspects analytical scientists say studying species richness productivity 
kepler system aims supporting different kinds workflows ranging low level plumbing workflows interest grid engineers analytical knowledge discovery workflows scientists conceptual level design workflows executable result subsequent refinement steps bl 
introduce scientific workflows means examples taken different projects implemented ptolemy kepler system 
discuss typical features scientific workflows derive general requirements desiderata scientific workflow systems 
take closer look underlying technical issues challenges section 
example workflows promoter identification shows high level conceptual view typical scientific knowledge discovery workflow scientific workflows links genomic biology techniques microarrays bioinformatics tools blast identify characterize eukaryotic promoters call promoter identification workflow see wer abb starting microarray data cluster analysis algorithms identify genes share similar patterns gene expression profiles predicted part interactive biochemical pathway 
gene ids gene sequences retrieved remote database genbank fed tool blast finds similar sequences 
subsequent steps transcription factor binding sites promoters identified create promoter model iteratively refined 
leaves details open features scientific workflows identified number existing databases genbank computational tools blast need combined certain ways create desired workflow 
past accessing remote resources meant implementing wrapper mimics human entering input interest submitting html form result returned page 
today tools databases accessible web services greatly simplifying task 
trend web portals ncbi integrate tools databases provide scientist workbench environment 
depicts snapshots early implementation kepler 
kepler extension ptolemy ii system pto scientific workflows 
topmost window includes loop body expanded performs steps gene ids ncbi web service access genbank data 
subsequently blast step performed identify similar sequences retrieved genbank 
second inner loop executed bottom window transcription factor binding site analysis 
ptolemy ii terminology call individual steps actors act independent components communicate channels indicated 
execution workflow orchestrated director green box see section details 
early implementation kepler abb illustrates number features actual wiring scientific workflow complicated conceptual view sug promoter subsequence chromosome sits close gene regulates activity 
implemented kepler abb 
composite actors subworkflows expanded 

mechanism collapsing details subworkflow component called composite actor ptolemy ii essential tame complexity windows defined input output ports correspond sub workflows collapsed composite actor indicated 
resulting workflow fairly complex need introduce additional mechanisms simplify design particular loops see section 
mineral classification second example domain illustrates scientific workflow system automation manual procedure alternatively reengineering existing custom tool generic extensible environment 
upper left window shows top level workflow samples selected database holding experimentally determined mineral compositions rocks 
data set classification diagrams fed classifier subworkflow bottom left 
manual process classifying samples involves determining position sample values series diagrams shown right location sample point non terminal diagram order determined scientific workflows bottom right corresponding diagram order consulted point located 
process iterated terminal level diagrams reached shown upper right classification result 
traditionally manual process automated commercial custom tools kepler workflow shown 
workflows shown graphical form ptolemy ii user interface bll 
note workflows annotated user comments 
subworkflows bottom left visible right clicking composite actor classifier upper left selecting look inside resulting pop menu 
features simple vcr control buttons play pause resume workflow execution red icons top left toolbar right triangle play 
kepler specific features workflow include searchable library actors data sources actor data tabs close upper left numerous reusable kepler actors 
example browser actor bottom right classifier subworkflow launches user default browser powerful generic input output device workflow 
example classification diagrams generated client side interactive svg displays browser windows right 
moving mouse diagram highlights specific region displays rock name classification particular region 
browser actor proven useful workflows device display results previous step selection tool passes user choices html forms check boxes subsequent workflow steps 
job scheduling final example workflow depicted domain involves running thousands jobs quantum chemical code sbb control nimrod grid distribution tool 
example workflow employing high performance computing hpc resources coordinated manner achieve computationally hard task case variant hybrid quantum mechanics molecular mechanics qm mm technique see gt sba details 
interestingly workflow domain neutral illustrates features typical high performance computational experiments main window shows composite actors workflow scheduling hpc jobs 
corresponding depicted subworkflows 
creates list input files subsequent jobs 
files create plan file nimrod step 
subworkflow takes plan file generates experiment run files actors 
shown icon indicate command shell proven useful tool existing local applications part workflow simply providing suitable command line expression corresponding command line arguments 
subworkflow create new processes run jobs subsequently add experiments new server processes 
example workflow highlights possibility incremental design development time writing components workflow operational 
due clearly defined input output interfaces subworkflows feature inherited ptolemy ii designed implemented tested separately 
current version workflow relies heavily invoking external applications actor 
applications promoted custom actors native java implementations 
changes encapsulated containing subworkflow require changes parts workflow 
scientific workflows mineral classification workflow left generated interactive result displays right 
requirements desiderata section summarize number common requirements desiderata scientific workflows exhibited examples workflows encountered various application oriented research projects including geon seek geo see sdm bir roa 
seamless access resources services common requirement see example workflows section web services provide simple mechanism remote service execution remote database access service calls 
mentioned web services simple solution simple problem 
harder problems web service orchestration rd party transfer solved vanilla web services 
service composition reuse workflow design web services emerge basic building blocks distributed grid applications workflows problem service composition compose simple services perform complex tasks elaborate important challenges data integration see hal survey query rewriting techniques nl lgm bll related issues query capabilities semantics respectively 
hot research topic ica 
different approaches view service composition ai planning problem bdg query planning problem lag ln general design programming problem 
related issue design components easily reusable geared specific applications may driven original development 
see service composition reuse addressed employing actor oriented approach design level section require flexible means data transformations plumbing level section 
scalability workflows involve large volumes data require high computational resources running large number parallel jobs cluster computer workflow section 
support data intensive compute intensive workflows suitable interfaces grid middleware components called compute grid data grid respectively necessary 
detached execution long running workflows require execution mode allows workflow control engine run background remote server necessarily staying connected user client application scientific workflows started controlling workflow execution gui kepler 
reliability fault tolerance computational environments reliable 
example workflow incorporates new web service easily break fail change interface just unacceptably slow popular 
workflow resilient inherently unreliable environment contingency actions specifiable fail strategies alternate web services 
user interaction scientific workflows require user decisions interactions various steps 
example improved version section allows user inspect intermediate results select re rank feeding subsequent steps 
interesting challenge need user interaction detached execution 
notification mechanism user asked reconnect running instance decision paused sub workflow resume 
smart re runs special kind user interaction change parameter workflow actor 
example visualization pipeline long running workflow user decide change parameters inspecting intermediate final results 
smart rerun execute workflow scratch parts affected parameter change 
dataflow oriented systems visualization pipeline systems avs kepler system easier realize control oriented systems business workflow systems data actor dependencies explicit system 
useful technique context checkpointing allows backtrack case parameter change system failure cf 
previously saved state starting scratch 
smart semantic links scientific workflow system assist workflow design data binding phases suggesting actor components possibly fit aspect service composition fact workflow management called office automation humans main processors tasks workflow system just book keeping cf 
section 
indicating data sets fed actors workflows 
semantics data actors captured 
capturing data semantics hard problem scientific disciplines measurement contexts experimental protocols assumptions adequately represented 
corresponding metadata available clear best useable system 
clear ontologies provide useful semantic type system scientific workflows addition current structural type systems bl 
data provenance just results conventional wet lab experiment reproducible computational experiments runs scientific workflows reproducible indicate specific data products tools create derived data product 
conventional capture metadata scientific workflow system able automatically log sequence applied steps parameter settings persistent identifiers intermediate data products 
related desiderata automatic report generation system allow user generate reports relevant provenance runtime information xml format archival exchange purposes html generated xslt script human consumption 
data provenance seen prerequisite order provide semantic information derived data product suitable provenance information needed 
list requirements desiderata scientific workflow systems means complete sufficient capture core characteristics 
requirements include intuitive gui allow user compose workflow visually smaller components drill subworkflows animate workflow execution inspect intermediate results scientific workflow system support combination different workflow granularities 
example coarse grained workflows akin unix pipelines web service workflows consist mainly black box actors contents unknown system 
scientific workflows may fine grained include fine grained subworkflows 
case components white boxes containing visual programming equivalent highlights kepler algorithm system differential equations solved words detailed specification known system 
differences business workflows characteristics requirements scientific workflows partially overlapping business workflows 
term scientific workflows indicate close relationship detailed comparison reveals number significant differences 
historically business workflows roots going back office automation systems gained momentum different names including business process modeling business process engineering see am zm 
today see influence business workflow standards web services arena specifically standards web service choreography 
example business process execution language web services bpel ws cgk merger earlier standards ibm wsfl microsoft xlang received attention 
analyzing underlying design principles execution models business workflow approaches focus control flow patterns events apparent dataflow secondary issue 
example describe large number workflow design patterns analyze compare business workflow standards products terms control features expressiveness 
scientific workflow systems hand tend execution models dataflow oriented 
true academic systems including kepler tav tri commercial systems pipeline pilot 
respect modeling paradigm execution models systems closer avs scientific data services control flow task oriented business workflow systems early scientific workflow predecessors cm ail 
difference dataflow orientation control flow orientation observed underlying formalisms 
example visualizations business workflows resemble flowcharts state transition diagrams uml activity diagrams emphasize events control flow despite long history business workflows surprising short lived called standards die mature 
dataflow 
formal analysis workflows usually involves studying control flow patterns kie conducted petri nets 
conversely underlying execution model current scientific workflow systems usually resembles directly implemented dataflow process network km lp having traditional application areas digital signal processing 
approaches applicable different levels granularity low level cpu operations certain processor architectures high level programming paradigms flow programming mor 
scientific workflow systems visualization pipeline systems seen dataflow oriented problem solving environments scientists analyze visualize data 
close relationship dataflow oriented approaches pure functional languages including non strict variants haskell cf 
section 
highlights kepler section discuss highlights current kepler system upcoming extensions 
features directly address requirements desiderata section 
extensions described section 
web service extensions basic requirement scientific workflows seamless access remote resources services see section examples section 
web services emerging standard means remote service execution loosely coupled systems extended kepler early handle web services 
url web service description wsd generic webservice actor kepler instantiated particular operation specified service description 
instantiation web service actor incorporated scientific workflow local component 
particular wsdl defined inputs outputs service explicit instantiated actor input output ports 
shows screenshots extended web service harvesting feature implemented special web service harvester component 
case generic webservice actor url provided see time individual wsdl description web service inspiration came similar feature 
highlights kepler kepler web service harvester action repository access harvesting 
web service repository 
repository url point uddi repository simply web page listing multiple wsdl urls shown 
harvester retrieves analyzes wsdl files repository creating instantiations web service actors user local actor library see 
example harvested services blast web service comprises service operations imported corresponding subdirectory 
user drag drop service operations workflow canvas scientific workflow 
harvester feature facilitates rapid prototyping development web service applications workflows matter minutes provided web services alive needed ii wired directly perform desired complex task 
problem harvested web services look local components runtime failure easily break scientific workflow reminding user service interface harvested actual code 
currently extending kepler workflows web services reliable 
simple approach avoid association service operation fixed url 
list alternate services provided workflow launched service failure compensated invocation alternate services 
option insert special control tokens data stream indicating course point web services 
downstream actors absence certain results 
long running workflows may gracefully react web service failures produce partial results 
idea developed collection oriented functional programming sense workflows called actors invalid due failures data collections filtered data stream valid subcollections pass unaffected mcp 
interesting research question extend ptolemy ii pause resume model full transaction model handle service failures 
problem ii fundamental different aspects design level challenge devise actors reused easily 
section give brief actor oriented modeling underlying paradigm ptolemy ii discuss facilitates component composition reuse 
plumbing level necessary apply data transformations consecutive web services called 
data transformations supported various actors kepler xslt xquery actors apply transformations xml data perl python actors text transformations 
grid extensions depicts number kepler actors facilitate scientific workflows including workflows grid 
upper left previously discussed generic webservice actor highlights kepler instantiations shown 
note specialize actor interface input output ports blast input ports output port search arguments result respectively 
naming scheme wsn op wsn name web service op specific web service operation 
grid actors kepler extensions 
upper right shows grid actors called respectively 
actors gridftp pro retrieve files put files remote locations grid 
actor grid actor case running globus job glo 
bottom small workflow shown takes globus proxy input files staging files job run fetching results remote location displaying client side 
green box specifies workflow executed sdf synchronous data flow director 
director analyzes dataflow dependencies token consumption production rates actors token file schedules execution actors accordingly 
right number actors sdsc storage resource broker srb shown connect disconnect srb get put files srb space respectively 
currently process providing commonly srb commands actors 
allow kepler user design execute grid workflows involving number different tools srb data handling aspects globus nimrod tools computational aspects job scheduling 
center left various kepler actors shown actor incorporate application workflow provided accessed command line 
icon reminiscent shell prompt 
actor parameterized arguments shell command making easy create generic specialized command line invocations 
browser actor shown directly cf 
section 
takes input html file url displays user default browser 
actor ideal output device displaying intermediate final workflow results ways known users 
extremely useful application actor input device user interactions 
result file upstream actor transformed html file xslt actor augmented html forms check boxes input forms user standard web browser 
executing desired user interaction post request sent special kepler web server acting listener workflow resumed 
email actor center provides simple notification mechanism inform user specific situations workflow 
email browser actors address core issues requirement section 
pause actor red triangle pauses workflow execution specific points allowing user inspect intermediate results possibly changing parameter values resuming workflow subsequently addressing section 
actors accessing real time data streams sensor networks roa added 
actors source integrated easily kepler underlying ptolemy ii directors support streaming execution 
actor oriented modeling arguably unique feature kepler comes underlying ptolemy ii system focus ptolemy project assembly concurrent components 
key underlying principle defined mod kepler workflows include data analysis steps calls 
come surprise dataflow process networks defined token streams place 
highlights kepler els computation govern interaction components focus actor oriented modeling paradigm ptolemy ii ideal starting point tackling breadth challenges scientific workflow design execution 
ptolemy system model thereof case scientific workflow viewed composition independent components called actors 
communication actors happens interfaces called ports 
distinguish input ports output ports 
addition ports actors parameters configure customize behavior 
example generic filter actor consume stream input tokens input port letting output port tokens satisfy condition specified parameter 
director producer actor io ports receiver consumer actor semantics component interaction determined director controls execution supplies objects called receivers implement communication 
actors precisely ports connected channels 
interconnection actors possible execution semantics assign diagram 
example actors thread control execution triggered availability new inputs 
key property ptolemy ii execution semantics specified diagram object called director see 
director defines actors executed communicate 
consequently execution model emergent side effect various interconnected actors possibly ad hoc orchestration prescribed concurrent semantics find defined concurrent programming language 
execution model defined director called model computation 
patterns concurrent interaction factored design directors individually ptolemy eecs berkeley edu objectives htm 
parameters usually shown figures 
constructed designer workflow 
depicts producer consumer actor ports connected unidirectional channel 
diagram annotated director example execute producer prior consumer respect data precedences 
communication actors mediated object called receiver provided director actors 
example communication buffered synchronous determined designer director designer actor 
improves reusability actor designs 
process networks 
process network pn director popular choice designers scientific workflows 
gives diagram semantics dataflow process networks km lp 
semantics actors independent processes execute concurrently thread control communicate sending tokens unidirectional channels principle unbounded buffering capacity 
writing channel nonblocking operation reading channel block sufficient input data available 
model computation similar provided unix pipes example unix command line composition processes cat foo txt bar baz example shows independently executing processes cat bar baz connected unidirectional pipes 
stream tokens flowing processes synchronizes necessary 
example bar baz filter operations working single line text time grep xyz unix process executing bar block line text provided process executing cat foo txt 
unix pipes pn director ptolemy feedback loops forking merging data streams 
performs deadlock detection manages buffers keep memory requirements bounded possible 
pn director example large number directors available ptolemy ii 
example sdf synchronous data flow director specialized process networks fixed token production consumption rates firing see 
sdf director performs static analysis workflow guarantees absence deadlocks determines required buffer sizes optimizes scheduling actor execution 
directors constructed modeling highlights kepler discrete event systems de continuous time models ct solve ordinary differential equations communication sequential processes csp mention just bll 
relieving actors details component interaction actors reusable cf 
section 
behavior actor adapts execution communication semantics provided director 
feature actor oriented modeling called behavioral polymorphism 
example single ptolemy ii actor implementation arithmetic operation say plus connected number input operands reused different models computation control different directors 
sdf director schedules actor invocation firing soon inputs data knows actors declare fixed token consumption production rates sdf domain 
contrast plus actor governed de director additions happen input data corresponding different execution model discrete event domain 
addition behavioral polymorphism ptolemy ii type system supports data polymorphism increasing reusability actors 
example plus actor implemented way dynamically chooses correct numeric addition integer float double complex depending types inputs receives 
data types strings vectors matrices user defined types plus actor execute appropriate actions string concatenation vector matrix addition actor oriented programming interface 
actor oriented modeling addresses challenges design complex systems 
mentioned improved component reusability due behavioral data polymorphism 
aspect hierarchical modeling 
illustrated examples section subworkflows abstracted composite actors see classifier actor subworkflow arbitrarily nested 
give simplified implementation aspects ptolemy ii actor oriented approach 
adapted context scientific workflows distributed service oriented environments leading structured approach service composition workflow design 
structure propose various phases methods ptolemy ii actor oriented actor called ptolemy ii 
execution type check run run initialize iteration iteration fire execution phases actor methods 
programming interface see 
methods director orchestrate execution 
symbols boldface denote actual methods actor implementations provide remaining symbols describe phases execution 
director starts workflow execution invokes method actors 
method invoked lifetime execution multiple runs prior activities time put place receiver components actors actors advertise supported port data types transport protocols director type checks connections ports 
includes checking port data types previously advertised type constraints validity port types connected channels 
type inference algorithm determine general types satisfying constraints 
scientific workflows modify directors type check transport protocol check producer consumer actors exchange data directly handles example actor declares output port handle type ftp connected actor declares input port handle type type checking establish connection valid provided output port handles 
information passed actor invocation initialize method 
possible actions execution initialize web service actors ping web services represent signal failure initialize corresponding service alive 
fail director information replace defective web service equivalent alive see section 
workflow execution consist run workflow re run initialize called 
run usually includes multiple iterations includes call fire possibly called repeat correspond methods ptolemy ii entities director methods manager methods bll 
handle mean unique identifier retrieve data url 
research issues special directors call 
main actor operation happens fire method web service actor actual remote service call 
actor oriented scientific workflows 
idea actor oriented scientific workflows apply principles actor orientation hierarchical modeling underlying ptolemy approach bll modeling design scientific workflows 
particular web service operations provide building blocks loosely coupled workflows structured different parts corresponding different phases methods actor oriented modeling 
example implement web service wa service developer think specific web service operations wa initialize wa addition main worker method wa fire 
case ptolemy actors lead generic reusable components facilitate complex extensions stateful web services 
research issues section briefly discuss technical issues begun addressing kepler mature require additional research 
higher order constructs early implementation promoter identification workflow depicted demonstrated feasibility advantages implementing scientific workflows kepler extension ptolemy ii abb 
highlighted inherent challenges programming paradigm la 
argued section current scientific workflow systems dataflow oriented business workflow systems approaches tend emphasize event control flow dataflow 
designing real world scientific workflows necessary handle complex control flows dataflow oriented setting 
known control flow constructs require thought order handle properly 
fairly intricate network topology includes backward directed dataflow channels having sole purpose sending control tokens established concept actor oriented modeling dataflow networks represented explicitly feedback loops 
variant map iterator 
initiate iteration subworkflow 
complicated structures achieve desired effect special kind loop hard understand design maintain 
ad hoc constructions increase complexity workflow design diminishing reusability workflow components see section 
fortunately better ways incorporate structured control dataflow oriented system directly supporting workflow design required 
la illustrated higher order functional programming constructs improve design 
particular higherorder function map proven useful implement certain type iteration 
takes function list elements type applies list element returning list result elements type 
map defined map 
xn 
xn example map shows improved version workflow section higher order map function 
note flows control tokens avoided 
iterations realized nested subworkflows inside higher order map actor 
example implement look list gene sequences genbank web service accept gene time simply create higher order construct map shown stack icon indicates contained workflow applied multiple times 
higher order functional programming constructs foldr fold right similarly provide modular iteration control constructs dataflow setting plan add kepler 
research issues utility declarative functional programming methods dataflow oriented systems coincidence see ree close links dataflow functional visual programming na interesting applications implicit parallel programming 
give simple illustration core subworkflow haskell specification see la details gid input gene id get gene sequence find candidates similar seqs map get promoter sequences map compute regions map compute 
factor sites zip create list promoter id region pairs map gpr str accumulate string list concat create single file putstr output subsequent steps input output ports workflow respectively 
note map iterate lists available services handle item time 
note equations establish simple forward dataflow process network di representing named channels expressions right equation representing processes actors 
merge parallel branches happens function zip creates single stream pairs promoter id promoter region channel streams 
third party transfers scientific workflows involve large volumes data see section 
web service setting creates problem called rd party transfers currently supported web services consider web services wa wb located sites respectively 
wa takes input produces data pass wb produces final output data depict follows wa wb assume execution workflow wf coordinated controlled workflow engine kepler running site 
current web service implementations allow engine call wa telling route directly wb 
web service invocations input output dataflows go go 
pseudo code means wf wa wb execute remote assignments shown 
execute wf workflow engine sends request message containing wa 
completion wa replies back result wf proceed forwards wb 
final result sent back 
simple call return execution quite desirable modeling design point view control flow dataflow go hand hand control engine worry status direct rd party transfers data wa wb 
downside data moved necessary 
trace data 
ship part request wa 
execute wa execute wa 
ship 
ship part reply wa part request wb 
execute wb execute wb 
ship part reply wb large executing steps wasteful sent workflow engine runs sent step 
sending wire twice direct rd party transfer wa wb moves mentioned currently supported web services 
question avoid unnecessary transfers achieve efficiency rd party transfer retaining simple call return execution model 
handle oriented approach 
simple solution problem wa send actual data handle hd 
handle corresponds logic pointer represented globally unique uri may url indicate protocol accessed ftp gridftp scp srb 
replace data occurrences handles hx hd hy respectively obtain 
ship hx hx request wa control flow dataflow resulting complex execution models 
research issues 
execute hd wa hx execute wa 
ship hd hd 
ship hd hd reply wa request wb 
execute hy wb hd execute wb 
ship hy hy reply wb sending possibly large wire twice constant size handle hd 
hope reduce reply message wa new request wb necessary control workflow execution 
order implement handle solution need slightly extend web services steps wa wb need process handles dereferencing creating new ones 
happens web service acts consumer data wa consumes needed role data producer wa produces 
consider case handles represented urls transport protocol 
step wa needs dereference hx execute function 
hx foobar com 
dereferenced get yields actual data properly process handles data consumer operation receive replaced receive hx followed dereference get operation get hx 
subsequent read operations operate 
role data producer reverse situation 
want avoid shipping actual result data send handle hd 
need create handle creating new file accessed hd baz edu 
subsequent write access proceed unchanged provided file name need replace send send hd 
currently working extensions kepler system handle aware lud 
example type checking phase handle aware director determine web service actors invoke web services wa wb respectively support compatible handle types 
seamlessly web services offer actor oriented programming interface section 
note handle hx sent step reside 
research issues higher order constructs handle approach rd party transfers number pressing research issues scientific workflows 
example detached execution reliability faulttolerance semantic links data provenance scientific workflow requirements need attention 
example bl presents initial ontologies semantic types help generate data transformation mappings consecutive workflow steps 
kinds semantic extensions help levels plumbing level create data transformations bl design level create reusable components support smart links workflows 
related section described features kepler underlying ptolemy ii system kepler 
ptolemy ii aims modeling design heterogeneous concurrent systems 
contrast kepler aims design execution scientific workflows 
consequently kepler extensions ptolemy ii include numerous actors capabilities facilitate scientific workflows web service actors harvester gridftp srb database actors command line secure shell actors additional components constantly added support statistics packages gis functionality grass couplings scientific data analysis visualization capabilities wps 
research development kepler benefits interactions collaborations groups 
hand development driven application scientists ultimate customers scientific workflow system hand related projects influences kepler developments 
example tav system focuses web service bioinformatics workflows 
contrast tri cgh provides mechanisms coupling workflows tightly grid middleware tools 
projects happened science link workshops lin meetings workshops ggf ggf scientific workflow tools include pegasus dbg chimera job scheduling tools condor dtl nimrod 
taxonomy workflow management addressing respectively 
systems grid computing comparison systems see yb 
address various outstanding research issues workflows requirements fully met 
example projects contributing kepler plan provide couplings highly interactive visualization tools wps tg 
provided overview scientific workflow management issues motivated real world examples encountered number projects 
spectrum called scientific workflow wide includes scientific discovery workflows section workflows automate manual procedures reengineer custom tools section data compute intensive workflows section 
scientific workflow support needed practically information oriented scientific disciplines including bioinformatics physics identified number common requirements desiderata scientific workflows section contrasted business workflows 
kepler system addresses core requirements section provides support web service workflows grid extensions 
source code kepler freely available alpha release distributed earlier year 
unique feature kepler inherited underlying ptolemy ii system actor oriented modeling approach 
approach facilitates modeling design complex systems provides promising direction pressing problems web service composition orchestration 
way data polymorphism behavioral polymorphism supported actor oriented approach concentrates component interaction separate director entity shed light efforts create reusable component architectures cca agg 
areas research include modeling issues higher order functional constructs workflow design section optimization issues virtual data handles facilitate data intensive web service workflows section 

kepler open source cross project collaboration exist contributions team members 
current past contributors ptolemy ii kepler systems possible 
kepler members contributions particular implementing actors access wonderful world real time data streams steve christopher brooks sharing insights ptolemy ii rod spears qbe facilities xin contributions including workflow cheng providing web service actors werner krebs eol extensions steve mock globus actors shawn bowers semantic types kepler scientists pis provide direct indirect support effort bill baru kim mark miller arie shoshani terence 
abb chandra cheng coleman gupta han liu lud scher pu moore shoshani 
modeling execution environment distributed scientific workflows 
th intl 
conf 
scientific statistical database management ssdbm boston massachussets 
agg armstrong gannon geist keahey kohn parker 
common component architecture high performance scientific computing 
th ieee intl 
symposium high performance distributed computation august 
abramson giddy 
high performance parametric modeling nimrod killer application global grid 
intl 
parallel distributed processing symposium ipdps cancun mexico may 
www 
monash edu au nimrod 
ail ailamaki ioannidis livny 
scientific workflow management database management 
th intl 
conf 
scientific statistical database management ssdbm capri italy 
am alonso mohan 
workflow management systems generation distributed processing tools 
jajodia kerschberg editors advanced transaction models architectures 

bdg blythe deelman gil 
planning workflow construction maintenance grid 
ica 
bir biomedical informatics research network coordinating center cc university california san diego 
net 
bl bowers lud scher 
ontology driven framework data transformation scientific workflows 
international workshop data integration life sciences lncs leipzig germany march 
bl bowers lud scher 
actor oriented design scientific workflows 
submitted publication 
bll bowers lin lud scher 
integrating scientific resources semantic registration 
th intl 
conf 
scientific statistical database management ssdbm santorini island greece 
bll brooks lee liu zhao zheng 
heterogeneous concurrent modeling design java volumes 
technical report dept eecs university california berkeley 
technical memoranda ucb erl 
cgh churches harrison maassen robinson shields taylor wang 
programming scientific distributed workflow services 
concurrency computation practice experience 
special issue scientific workflows 
cgk curbera goland klein roller thatte weerawarana 
business process execution language web services bpel ws version 
www ibm com developerworks library ws bpel 
cm chen markowitz 
object protocol model design implementation scientific applications 
acm transactions information systems 
dbg deelman blythe gil kesselman mehta blackburn 
mapping complex workflows grid environments 
journal grid computing 
dtl douglas thain livny 
distributed computing practice condor experience 
concurrency computation practice experience 
eker lee liu liu sachs xiong 
taming heterogeneity ptolemy approach 
proceedings ieee volume january 
esc science workflow services workshop science institute edinburgh scotland december 
www nesc ac uk esi events index html 
esc science grid environments workshop science institute edinburgh scotland may 
www nesc ac uk esi events 
geo nsf itr geon research project create geosciences 
www org 
ggf workflow grid systems workshop ggf berlin germany march 
www extreme indiana edu groc call html 
glo globus alliance 
www globus org 
gri workshop service composition data exploration virtual observatory california institute technology july 
caltech edu sc devo 
gt gao thompson editors 
combined quantum mechanical molecular mechanical methods 
american chemical society 
hal halevy 
answering queries views survey 
vldb journal 
ica proceedings workshop planning web services trento italy june 
kepler system scientific workflows 
kepler project org 
kie kiepuszewski 
expressiveness suitability languages control flow modelling workflows 
phd thesis queensland university technology 
km kahn macqueen 
coroutines networks parallel processes 
editor proc 
ifip congress pp 

la lud scher 
providing declarative design programming constructs scientific workflows process networks 
technical report scidac spa tn san diego supercomputer center 
sdsc edu scidac sdm scidac tn map constructs pdf 
lag lud scher gupta 
compiling scientific workflows web service workflows 
th intl 
conf 
scientific statistical database management ss dbm boston massachussets 
sdsc edu scidac sdm compiling pdf 
lgm lud scher gupta 
model mediator system scientific data management 
lacroix editors bioinformatics managing scientific data 
morgan kaufmann 
lin link workshop scientific workflows san diego supercomputer center october 
sdsc edu events link 
ln lud scher nash 
web service composition declarative queries case conjunctive queries union negation 
th intl 
conf 
data engineering icde 
lp lee parks 
dataflow process networks 
proceedings ieee may 
citeseer nj nec com html 
liu pu han 
xml enabled data extraction tool web sources 
intl 
journal information systems special issue data extraction cleaning reconciliation 
lud lud scher 
actor oriented web service scientific workflows handle handles 
technical report san diego supercomputer center september 
beach jones lud scher pennington pereira rajasekar 
knowledge environment biodiversity ecological sciences 
journal intelligent information systems 
appear 
mcp 
pipelined scientific workflows inferring evolutionary relationships 
natural diversity discovery project 
manuscript 
mor morrison 
flow programming new approach application development 
van nostrand reinhold 
vossen weske 
workflow management dna sequencing 
intl 
conf 
cooperative information systems coopis 
na nikhil arvind 
implicit parallel programming ph 
morgan kaufmann 
national center biotechnology information ncbi 
www ncbi nlm 
nih gov 
nl nash lud scher 
processing unions conjunctive queries negation limited access patterns 
th intl 
conf 
extending database technology edbt lncs pp 
heraklion crete greece 
ferris marvin greenwood carver glover li 
tool composition enactment bioinformatics workflows 
bioinformatics journal 
owl owl web ontology language proposed recommendation december 
www org tr owl ref 
pro project 
gridftp universal data transfer grid 
see www globus org datagrid gridftp html 
pto ptolemy ii project system 
department eecs uc berkeley 
ptolemy eecs berkeley edu 
peterson yin nelson lud scher coleman 
mining frequency distribution transcription factor binding sites radiation responsive genes 
new horizons genomics doe sc santa fe new mexico march april 
statistical data analysis 
www project org 
ree reekie 
realtime signal processing dataflow visual functional programming 
phd thesis school electrical engineering university technology sydney 
roa real time applications data management network 
ucsd edu 
sba abramson 
parameter scan effective group difference grid computing 
new generation computing 
sbb schmidt gordon jensen nguyen su montgomery 
general atomic molecular electronic structure system 
journal computational chemistry 
cf 
www msg gov html 
sdm scientific data management center sdm 
sdm lbl gov see www npaci 
edu online scidac html 
sdm scientific data management framework workshop argonne national labs august 
sdm lbl gov arie sdm sdm framework htm 
see nsf itr enabling science environment ecological knowledge seek 
seek org 
sheth 
changing focus interoperability information systems system syntax structure semantics 
goodchild egenhofer editors interoperating geographic information systems pp 

kluwer 
srb sdsc storage resource broker 
www npaci edu dice srb 
tav project 

sf net 
tg 
geo vista studio visual programming environment data analysis visualization 
computers geosciences 
tri project 
www 
org 
van der aalst 
don go flow web services composition standards exposed 
ieee intelligent systems 
web services done 
trends controversies jan feb 
tm tue nl research patterns download pdf 
van der aalst ter hofstede kiepuszewski barros 
workflow patterns 
distributed parallel databases july 
van der aalst van hee 
workflow management models methods systems cooperative information systems 
mit press 
wright brown 
dataflow visualization pipeline problem solving environment 
bel david van wijk editors virtual environments scientific visualization pp 

springer 
wer werner 
target gene identification expression array data promoter analysis 
biomolecular engineering 
wps weinstein parker simpson zimmerman jones 
visualization problem solving environment 
hansen johnson editors visualization handbook pp 

elsevier 
wsd web services description language wsdl version 
www org tr wsdl june 
yb yu buyya 
taxonomy workflow management systems grid computing 
technical report grids tr grid computing distributed systems laboratory university melbourne 
www gridbus org reports pdf 
zm zur 
workflow process controlling 
logos verlag berlin 
