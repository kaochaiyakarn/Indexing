meta model hierarchy framework information systems concepts techniques oei cs kun nl van hemmen cs kun nl ef cs kun nl cs utwente nl july numerous information systems design methods specification techniques proposed compared basis different criteria 
framework ordering information systems modelling techniques meta models proposed 
framework called meta model hierarchy positions technique analysis distinctions basic concepts set constraints defined concepts 
relations meta models distinguished partitioning restriction degeneration 
modelling technique positioned meta model hierarchy order relations 
positioning entity relationship modelling niam petri nets meta model hierarchy discussed illustration approach 
investigations partly supported foundation computing science netherlands sion financial support netherlands organization scientific research nwo 
department information systems university nijmegen toernooiveld nl ed nijmegen netherlands 
department computer science university twente box nl ae enschede netherlands 
decades hundreds information system design development methods proposed 
necessary essential parts method modelling techniques provide possibility model aspects reality relevant information system developed 
teachers information system field time growing number modelling techniques 
currently field appears outside unsettled chaotic suffering particular syndrome 
syndrome due widespread attitude researchers field create modelling approach addressing question justification scientific added value sufficient way 
differences numerous modelling techniques 
simplest differences ones 
concept different researchers different synonyms 
famous example entity vs object 
tricky example different researchers term entity different concepts 
problem worse term object 
part modelling technique language specifying model developed specific application area application model specifying operations performed application model 
language system concepts independent application case called meta model 
meta model set basic concepts related called concept structure set constraints determining set possible application models set possible transitions application models 
meta model language allows specify application models manipulate application models contains set specifications types operations possible application model 
choice different basic concepts meta model critical aspect 
differences due different classifications views phenomena things issues world 
world classified entities relationships entities attributes relationships entities events attributes relationships states transitions actors actions objects action events changed items 
aspects modelling technique constraining axioms meta model specifications types operators constructs specification languages dependent choices 
choice concept structure meta model differences dependent aspects result different dialects meta model 
example dialects entity relationship meta models differ numbers entities allowed relationships different symbols denote entities relationships differently boxes diamonds vs circles boxes 
bad reasons mentioned differences 
competition companies developing methods tools information system development 
attitude researchers field leading mentioned syndrome 
reasons non terminological differences 
different designers users information system may view world differently 
important context different kinds information systems different modelling techniques may suitable 
example simple information system snapshot database dialect entity relationship meta model may convenient 
case sophisticated information system history handling trigger mechanisms feedback mechanisms entity relationship meta model suitable 
may aspects specified inconvenient cumbersome way 
kind application case meta models time oriented event oriented oriented meta models may better suited 
hand meta models simple snapshot data base applications overkill 
circumstances hope researchers day unified universal modelling technique information systems emerge probably come true 
unified terminology achievable difficult 
universal meta model specification language probably achievable desirable 
complaints teachers information system field justified 
due probably unnecessarily large variety modelling techniques due large numbers unjustified differences lot energy wasted new applications suitable modelling techniques selected reengineering existing applications translations modelling techniques provided teachers teach students learn modelling techniques 
various comparisons frameworks concepts proposed informal nature ess 
comparison reports information systems development methods laboratory experiments emphasis practical applicability methods flo analysis method manuals 
framework cris ifip wg ohm presents overview various specification techniques structured dimension development phase planning analysis design versus modelling perspective data process behaviour 
normative meta models provided blue print general purpose system concepts constructs systems development 
notation meta models allow formal comparisons 
conferences ifip wg fl fre lin continue concentrate need clear defined concepts information systems area intermediate results indicate commonly accepted conceptual terminology emerged 
urgent need get order chaos modelling techniques formal basis 
try tackle challenge 
organised follows 
section elaborates criteria comparison modelling languages distinguishing expressive power practicality 
furthermore meta model hierarchy introduced recognizing comparison criteria 
meta model hierarchy formally defined section distinguishing construction operators meta models partitioning restriction degeneration 
section illustrates approach positioning known modelling techniques meta model hierarchy 
conclude final remarks discussion research options section 
comparison modelling techniques section discussed modelling techniques compared meta models role play relating modelling techniques described form basis framework understanding comparing modelling techniques called meta model hierarchy 
criteria comparison information systems development methods consist set modelling techniques 
modelling techniques specification various aspects information system 
method include technique 
method isac lgn instance uses modelling techniques graphs describing activities graphs describing precedence relations information sets graphs describing contents structure information sets 
method information engineering mar applies things entity relationship diagrams che data modelling data flow diagrams gs process modelling structure charts yc structure programs 
technique includes modelling procedure 
procedures specify steps algorithms heuristic guidelines modelling process 
procedural part technique 
number modelling techniques coexist information systems field growing extent easy get lost jungle modelling techniques 
reason need emerges framework basis understanding comparing modelling techniques 
modelling techniques compared basis different criteria ho 
may interested expressed expressive power expressiveness technique 
hand may interested certain aspects universe discourse form style technique 
technique formulate aspect application different ways different techniques formulations differ 
technique determines practicality technique 
practicality involves pragmatics dependent aspect taken consideration 
technique involves set concepts syntax set sensory symbols concrete syntax represents concepts 
examples concepts objects constraints operators 
concrete syntax concepts graphical oriented 
circles boxes arrows textual oriented meant communication medium 
techniques expressive power differ practicality respect certain aspect 
expressive power technique depends primitive concepts technique inter relationships derived concepts defined terms primitive concepts 
technique depends concepts symbols 
expressive power practicality technique determine suitability technique particular application 
technique meta model 
meta model technique model describes aspects independent domain universe discourse described technique specific case 
description domain dependent specific case called application model 
time application model instantiation meta model technique describing application model fop fop 
comparison methods techniques related done 
ohm 
approach differs restrict sort checklist global characteristics 
expressive power practicality techniques respect convenience discussed detail 
expressive power expressive power modelling technique measurement described 
possible universes discourse described 
formal definition expressive power see 
hw 
show equal expressive power notion equivalence comes picture 
models equivalent exists isomorphism models 
techniques expressive power model described technique equivalent model vice versa 
examples techniques differ expressive power dialect model binary relationships allowed dialect object role model allows ary relationships 
dialects expressive power exists mapping binary model ary model vice versa hal fal 
expressive power techniques compared application level meta level 
expressive power compared defining transformations application level 
particular application model described technique transformations defined equivalent application model technique vice versa 
ho shown possible compare expressive power different techniques defining appropriate transformations meta level 
compare expressive power techniques transformations defined meta models techniques common meta technique 
practicality compare techniques basis universes discourse described techniques 
question interesting pragmatic reasons 
different contexts question put forward convenience techniques particular domain modelled techniques implemented learnability techniques communicated 
restrict practicality modelling techniques respect convenience modelling different kinds universes discourse 
expressive power determined absolute terms 
convenience hand relative notion depending kind domain modelled extent preferences background user technique 
example may special purpose technique highly convenient special purpose specialist special field low expressive power 
may general purpose technique high expressive power moderately convenient purposes 
trade expressive power convenience required 
technique convenient particular application reasons 
reasons special purpose technique specific concepts general purpose technique 
techniques differ meta models specific domain techniques differ aspects domain specified explicitly application model aspects incorporated set concepts meta model 
example usage entity relationship modelling erm technique distinguish time concept distinct concept time oriented erm technique distinction 
technique time modelled particular entity application model technique need describe concept time application model existence distinct meta concept time meta model 
techniques differ set domains described influencing expressive power differ extent specified explicitly application model influencing convenience 
case speak principle conservation information 
illustrated different modelling techniques having expressive power describe domain different way 
extent relevant elements phenomena specified application model explicitly depends meta model modelling technique 
principle conservation information ordering modelling techniques meta model hierarchy meta model hierarchy framework proposed orders modelling techniques basis meta models see fig 
expressive power convenience play crucial role meta model hierarchy 
order meta models certain elementary relations defined meta models viz 
partitioning restriction degeneration concept structure meta models 
relation corresponding constructive operator resp 
partitions restricts degenerates meta model inverse destructive operator creates partitioned restricted degenerated model original 
relations defined meta models corresponding operations formally introduced section 
elementary operators partitions concept meta model specialized concepts 
meta model resulting operation child meta model original 
obvious partitioning operation influences convenience modelling certain aspects certain application domains 
note conform principle conservation information expressive power necessarily influenced operation 
respect expressive power said operators defined meta models constitute meta model hierarchy guarantee expressed technique specific meta model expressed technique parent meta models meta model hierarchy 
property called upward compatibility meta models meta model hierarchy 
noted framework provide solution comparison expressive power arbitrary set techniques semantical transformations techniques 
incorporating manipulation operators technique comparison framework extended 
cases useful drawn meta model hierarchy respect notion expressive power convenience techniques 
relating techniques ordering meta models nowadays meta modelling commonly accepted means information systems research 
overview applications bri tl 
ordering meta models meta model hierarchy allows utilize mutual dependencies meta models 
things meta model hierarchy purposes selection suitable modelling techniques characteristics application domain meta model hierarchy may serve select proper modelling technique 
characteristics domain matched properties techniques 
properties different techniques identified positioning comparing considered techniques meta model hierarchy 
transfer modelling techniques multi specification project project models projects reused need transformation specifications denoted modelling technique apparent 
meta model hierarchy defines relation techniques taken core transformation procedure 
support second order evolution order evolution characterized systems meta model corresponding specification language stable aspect application model change including application specific types laws rules schema evolution need install new system interrupt primary processes organization 
framework information systems allowing order evolution described fop fop 
second order evolvability important large organizations various sorts applications new sorts applications necessary time time 
organization applies meta model hierarchy meta models underlying applications specific operations performed existing meta model hierarchy cater new sort application new aspects existing application model 
old application models old parts application models operations thereon continue organization interrupted 
method engineering construction project specific methods called method engineering requires meta models development methods modelling techniques available method base 
meta model hierarchy provides structuring mechanism method base allows method engineer navigate space techniques select techniques inclusion method project 
meta models structure meta model specifying application models manipulating composed concept structure set constraints 
meta model particular application model conform concept structure satisfy set constraints 
concept structure composed set meta concepts set relationships meta concepts turn meta concepts specialization subtype hierarchy meta concepts explained 
concepts concept structure meta model called meta concepts distinguish concepts application model 
take data modelling technique niam nh win example 
concept structure meta model niam includes meta concepts object role entity label fact sample elements 
example relationship meta concepts object role relationship predicator represents objects play certain roles 
set object role relationships composed object called composed object called relationship 
composed object fact 
dichotomy reflected specialization hierarchy gives information object composed object simple object entity label 
concept structure niam plus constraints denoted graphical notation niam 
concept structure part meta model modelling technique frame particular application model described technique 
state application model corresponds called population concept structure vice versa 
approach population concept structure value assignment meta concepts conforming structure defined relationships meta concepts respecting specialization hierarchy 
meta model niam take ifip case concerning conferences specific case application 
possible description part case graphical niam notation fig 

application model niam shown application model instantiation meta model niam represented fig 

population concept structure niam represents application model ifip case fig 
follows note simplicity example simple objects considered entities composed objects facts 
labels omitted example 
object type object instance conf isco inst ifip wg org conf inst org isco ifip wg object plays role role played conf organized inst organizes isco organized ifip wg organizes object composed predicator involved org conf inst conf organized org conf inst inst organizes org isco ifip wg isco organized org isco ifip wg ifip wg organizes set constraints part meta model modelling technique exclude populations correspond correct application model described modelling technique 
niam example populations concept structure excluded assign values meta concept object values involved value assignment meta concept fact 
ifip case means objects conference institution involved fact 
constraint due fact object types may unconnected datamodel niam 
denote meta models languages 
chosen set language denote meta models allows compact comprehensible definitions 
predicate calculus 
meta language adjusted version predicator model technique modelling technique object role models 
essential difference language defined describing meta models predicator model technique specification application models schema vs instance dichotomy 
words language defined situated level meta level hierarchy bf called meta language 
note constructs meta language prefixed meta distinguish constructs meta model specific modelling technique 
definition mm set possible meta models mm mm structure spec base meta concept structure finite set meta set meta object types partition set elements called meta fact types 
spec order meta object types capturing specialisation set meta atomic objects 
base function 
base meta predicator meta object part meta predicator 
set meta constraints set possible meta constraints population pop instantiation meta model mm mm constituting particular application model conform meta concept structure satisfy set meta constraints mm mm pop pop pop pop powerset set possible instances axioms structure refer 
note meta language speak specialization general meta model hierarchy specializations restricted additional constraints 
mutually exclusive collectively exhaustive 
case speak partitioning 
order simplify definitions section auxiliary functions defined definition struct constr pred spec base object spec base fact spec base spec spec base spec base spec base base illustrate language describing meta models meta model niam graphically denoted fig 
described meta language 
meta model niam struct constr struct pred object fact spec base pred plays role role involved composed type instance entity object object role simple object composed object entity label fact predicator composition typing fact predicator composition typing spec simple object object composed object object entity simple object label simple object fact composed object composed object base object plays role role role object base predicator involved object composed object instance simple object entity constr unique played unique involved unique instance total simple object composed object total entity label total fact exclusion simple object composed object exclusion entity label exclusion fact section meta language defined define meta model hierarchy 
meta model hierarchy section meta model hierarchy 
subsection relations corresponding operators meta models defined constitute hierarchy meta models 
section alternative procedures construction meta model hierarchy 
ordering meta models meta model hierarchy relations corresponding operators meta models 
relations meta models defined partitioning part restriction restr degeneration deg explained coming subsections 
easily proved relations defined irreflexive asymmetric transitive 
furthermore intersection relations empty 
properties concluded relations constitute directed acyclic graph meta models 
practical cases root considered directed acyclic graph meta models called meta model hierarchy 
definition meta model hierarchy directed acyclic graph structure part restr deg set possible meta models part relation meta models capturing partitioning restr relation meta models capturing restriction deg relation meta models capturing degeneration relation meta models defined follows iff part restr deg 
meta model hierarchy relations elementary constructive destructive operators meta model partitioning meta concepts addition constraints elimination meta concepts inverse counterpart 
partitioning applied meta models different modelling techniques convenient modelling different kinds application domains 
reason modelling techniques differ specialization meta concepts concept structure caused fact different modelling techniques apply different set subdivisions basic concepts 
restrict subdivisions mutually exclusive collectively exhaustive specializations partitionings 
set partitionings distinguished meta model superset set partitionings distinguished meta model meta model said partitioned 
recall section concept structure meta model contains set meta concepts consisting meta fact types meta atomic object types specialization hierarchy meta concepts 
basic operator corresponds construction partitioning meta model addition subdivision 
addition subdivision performed partitioning possible set instantiations meta concepts concept structure 
subdivision parts called subdivision parts dichotomy 
note treated sequence dichotomies 
lose generality treating dichotomies examples 
niam example dichotomies applied distinction simple objects entities labels 
result meta model niam partitions meta concept simple object meta concepts entity label 
meta model niam seen partitioning object role model distinction entities labels 
definition partitioning relationship defined irreflexive asymmetric transitive relation part meta models part convention part interpreted partitioning part part part part part spec spec object object constr constr total object object exclusion object object total exclusion defined 
meta model said partitioning meta model iff concept structure meta model derived concept structure meta model partitioning concepts 
partitioning mutually exclusive collectively exhaustive subdivision instance population partitioned concept population precisely parts 
imposed total exclusion constraint added specialization 
example see fig partitioning meta concept meta concepts meta model results meta model partitioning meta model note addition meta fact type meta model derivable partitionings general meta fact type meta concept 
partitioning meta fact types illustrated section restriction applied meta models partitioning modelling techniques constrained 
binary dialect niam example vb allows facts objects ary dialect niam nh restrict number objects involved fact 
say meta model binary dialect niam restriction ary dialect 
restriction restricts possible population meta model possible application models 
note restriction necessarily imply expressive power influenced 
example just shown application model ary niam dialect transformed binary variant losing information vice versa 
restriction definition restriction relationship defined irreflexive asymmetric transitive relation restr meta models restr convention restr interpreted restriction restr pop pop restriction meta models obtained adding constraints set constraints meta model 
note restriction considers addition constraints necessarily constrain possible population meta model 
degeneration applied meta models meta concepts concept structure technique defined grace existence meta concepts 
defining meta concepts need explicitly meta model technique 
example meta concept transition petri nets derived relationships represents time birth time death certain objects 
petri nets meta concept time modelled explicitly 
meta model petri nets considered degeneration meta model include meta concept time 
note meta concepts derivable derived anymore degeneration essential meta concepts 
example petri nets derivable meta concept transition essential degeneration meta concept time 
discussion degeneration time petri nets see section definition degeneration relationship defined irreflexive asymmetric transitive relation deg meta models deg convention deg interpreted degeneration weak strong variant degeneration 
deg deg weak variant degeneration meta concepts generalizations meta concepts eliminated 
note partitionings introducing new meta concepts collectively exhaustive possible populations meta concepts leaves specialization hierarchy meta concepts changed weak degeneration 
definition weak degeneration defined follows deg object object object object leaf leaf object spec weak degeneration meta model obtained meta model eliminating meta concept partitioned meta model non leaf meta concepts removed meta model said strong degeneration meta model example specializations meta concept meta model eliminated results meta model strong degeneration meta model elimination time concept petri nets example strong degeneration 
definition strong degeneration deg defined follows deg object object object object leaf leaf object spec strong degeneration constructing meta model hierarchy meta model hierarchy relates meta models modelling techniques 
due amount coexisting techniques nowadays construct complete meta model hierarchy 
practice interested relating comparing specific small set techniques 
section top procedure construct part meta model hierarchy sufficient position modelling techniques relation 
procedure step analysis considered techniques step construction meta models techniques step analysis meta models similarities concept structure constraint set identification homonyms synonyms generalisation concepts step construction intermediate meta models derived existing set meta models appropriate constructive destructive operators adding removing partitionings adding removing constraints concepts 
step relating meta models step meta model hierarchy applying partitionings restrictions basis 
step repeat step meta models step related 
procedure meta models techniques considered taken starting point 
intermediate meta models constructed meta models part meta model hierarchy constructed meta models connected related 
top hierarchy called root meta model 
result steps connected part meta model hierarchy having root meta models step derived sequence partitioning restriction degeneration operations 
priori specific root meta model meta model hierarchy assumed top procedure adopted 
procedure hierarchy constructed deriving intermediate meta models root meta model 
extension hierarchy moment meta models positioned part hierarchy 
top procedure step choice root meta model part meta model hierarchy constructed 
step analysis considered techniques step construction meta models techniques step analysis root meta model meta models similarities concept structure constraint set identification homonyms synonyms partitioning concepts adding dichotomies step construction intermediate meta models constructed root partitioning restriction degeneration operations 
step relating root meta model meta models step meta model hierarchy 
step repeat step meta models step related 
words connected part meta model hierarchy constructed having root meta models step derived sequence partitioning restriction degeneration operations 
basic difference procedures top procedure starts chosen root meta model partitions meta concepts meta concepts meta models considered techniques reached procedure take meta models techniques starting point construct new meta models generalizing meta concepts common meta model reached 
choice procedure may depend presence suitable root meta model number meta concepts distinguished set techniques considered 
case large number meta concepts preferable look generalizations meta concepts procedure 
case limited number distinct meta concepts top procedure taken 
section known modelling techniques positioned meta model hierarchy 
simplified meta models considered limited number meta concepts top procedure chosen assuming simple object role model root meta model 
meta model hierarchy illustrative example intention section illustrate practical meta model hierarchy 
techniques entity relationship modelling erm niam petri nets positioned meta model hierarchy top approach subsection 
part meta model hierarchy stepwise constructed section illustrated 
note intermediate meta models marked asterisk constructed relate simplified meta models erm niam petri nets 
node hierarchy corresponds meta model plus set meta models derived 
meta models path hierarchy upward compatible 
section meta models denoted graphical notation niam 
note give complete description meta models relationships expressive language taken 
meta language subsection order predicate calculus 
intention section just illustrative graphical niam notation suffices purpose 
choice root meta model meta model hierarchy relating erd niam petri nets construct part meta model hierarchy relates meta models techniques considered particular meta model chosen root part hierarchy 
choice root meta model possible target meta models appropriate set partitionings restrictions 
note root meta model hierarchy meta model expressive power meta models hierarchy 
example root chosen simple object role model able describe relationships facts 
described composed objects objects composed object role pair 
objects composed 
root suffices relate simplified meta models techniques taken consideration example 
consider complete meta models kind constraints richer meta model chosen 
meta model extended 
predicate calculus 
root meta model analysis techniques considered construction meta models results thorough analysis techniques meta modelled 
responsibility meta modeller construct meta models quality meta models determines value outcome meta model hierarchy 
section simplified meta models techniques related 
note type instance dichotomy identify meta models ignored 
meta model niam niam object role data modelling technique elementary sentences 
characteristics niam distinguishes objects entities non lexical concrete objects labels 
furthermore different dialects technique allow disallow relationships treated objects 
dialects constrained binary fact types vb allow ary fact types nijssen 
example dialect niam chosen allows 
simplified meta model niam seen 
note meta model allows nary fact types constraint added restricts possible objects involved composed object 
meta model niam meta model entity relationship modelling erm popular data modelling technique entity relationship modelling 
technique distinguishes entities relationships attributes 
entity relationship modelling dialects extensions 
consider original che requires binary relationships disallow objectified relationships relationships entities 
metamodel erm simplification meta model bri 
considered meta model abstracts cardinality constraints identification structures 
meta model petri nets meta model binary erd petri nets state transition oriented modelling technique able model activities inter relationships particular concurrency 
meta model petri nets considered example 
note constraints 
firing rules firing transitions 
meta model petri nets constructing meta model hierarchy order relate meta models niam erm petri nets meta model hierarchy procedure chosen 
meta model niam related root meta model sequence partitionings restrictions 
process intermediate meta models constructed 
construction path meta model erm connected applying meta model hierarchy operators intermediate meta models path 
meta model petri nets incorporated meta model hierarchy set appropriate meta model hierarchy operations 
incorporating niam niam modelling techniques distinctions types instances 
dichotomy added root meta model partitioning meta concept object object type object instance 
resulting meta model called pm see closely related predicator model defined 
relationship introduced object type object instance derived additional partitionings meta concepts role composed object identifying role instances composed object 
subtype defining rules defined terms role instances 
representation partitionings meta concept role composed object time reduce complexity figures 
added partitioning meta concept object represented relationship new concepts 
stated relationships derivable partitioning meta concepts role composed object 
intermediate meta model pm stated niam distinction entities labels refer entities 
relationships entities labels called relationships entities called facts 
distinctions introduced partitioning meta concept simple object entity label partitioning meta concept composed object relationship meta concepts fact 
meta model resulting partitionings seen simplified notation 
meta model niam weak degeneration meta concepts object type object instance meta model niam represented derived 
note restriction meta model adding constraint objects involved composed object results meta model binary dialect niam 
incorporating entity relationship modelling contrast niam entity relationship modelling distinguishes attributes 
attributes considered relationships characterizing important objects 
note different dichotomy entity vs label niam 
intermediate meta model pm meta model erm constructed partitioning composed object attribute relationship 
meta model erm allows ary relationships 
restricting meta model adding constraints meta model obtained disallows allows binary relationships 
weak degeneration concepts target meta model derived 
incorporating petri nets meta model erm petri nets transitions take place changing tokens place 
death birth tokens place sequence transitions suggest implicit existence notion time 
partitioning meta concept object time object non time object performed resulting meta model tpm 
relationships new meta concepts derived partitionings meta concepts role composed object representing birth death non time object 
intermediate meta model tpm birth death relationships transitions non time composed object instances derived 
thorough analysis petri nets shown token petri net set non time composed object instances 
token instance place set corresponding non time object types 
transition petri net set elementary transitions non time composed object instances token 
resulting meta model derivations 
meta model petri nets petri net concept time explicitly 
concept time object strongly degenerated 
set weak meta model petri nets derived 
concludes illustrative example meta model hierarchy 
part meta model hierarchy constructed section illustrated 
note sample population meta models meta model hierarchy taken checking mechanism constructed meta model hierarchy 
information meta model technique meta model hierarchy modelled explicitly application model hierarchy 
result principle conservation information described section 
concluding remarks research framework information systems concepts modelling techniques 
framework called meta model hierarchy provides ordering meta models techniques 
relations viz 
partitioning restriction degeneration meta models defined formulated terms constructive destructive operations meta models 
perform constructive destructive operations meta model means essentially shift borderline meta model possible set application models 
principle conservation information means facts laws rules reality part application model part meta model 
expressive power technique meta model may may affected 
goes root meta model hierarchy downwards expressive power stays may diminish due degeneration may increase 
performing operations meta model pragmatically adequate way convenience resulting meta model corresponding specification technique may increase significantly specific scope applications 
hand breadth convenience may diminish 
specific sort application may meta model convenience regarded optimal 
partitioning restriction degeneration may diminish convenience due large generality may diminish convenience due overkill effects 
probably important benefit meta model hierarchy meta models corresponding specification techniques feature upward compatibility 
due application models formulated basis meta model meta model hierarchy automatically translatable equivalent application models formulated basis meta model closer root meta model hierarchy 
general downward compatibility lead automatic downward application models operators 
downward translations done manually supported suitable modelling discipline 
important benefit meta model hierarchy approach possibility achieve evolvability second order 
second order evolution means application model meta model corresponding specification language change need install new system interrupt organization 
second order evolvability important large organizations various sorts applications new sorts applications necessary time time 
course realized meta model hierarchy stage extended support transformations meta models different techniques 
ultimate framework incorporate means compare concrete syntax syntax semantics technique 
requires rich meta language 
meta language may convenient purpose may revised 
possibly new operators meta models defined 
incorporate operators techniques comparison relationships operators investigated 
themes research field firstly root meta model meta model hierarchy developed aim able reach meta models suitable kinds information systems means meta model operations 
important meta models specified positioned meta model hierarchy 
secondly question addressed characteristics kind information system require meta model optimally suited kind 
final option research currently addressing related manipulation meta models method engineering purposes see 
meta model hierarchy structures method base 
open issue creation links standard method descriptions product standards established certain level abstraction 
incorporation manipulation rules meta model generation diagram editors means meta case tools investigated 
terry halpin members phd consortium axis constructive remarks earlier versions 
van ter hofstede th van der weide semantics verification object role models information systems 
van de kamp formal approach methodology information planning 
proceedings dutch conference information systems maes ed november netherlands 
bri formalisation information systems modelling 
doctoral dissertation university nijmegen june netherlands 
bf dichotomies information system methodology 
bots sol eds information systems move kluwer 
che chen entity relationship model unified view data 
acm transactions database systems vol 
nr 
pp 

ess modelling approach information system development 
information system design methodologies improving practice olle sol stuart eds north holland 
th 
comparison requirements engineering methods metamodels 
technical report institute fuer wirtschaftsinformatik hochschule st switzerland 
fal deterministic entity relationship modelling technical report university nijmegen netherlands 
fl eds information system concepts indepth analysis 
proceedings ifip tc wg working conference information system concepts depth analysis north holland 
fop oei proper conceptual framework evolving information systems 
proceedings second international working conference dynamic modelling information systems washington july 
fop oei proper evolving information systems temporal information systems technical report department information systems university nijmegen netherlands 
appear proceedings dexa valencia spain fre rolland el eds information system concepts improving understanding 
proceedings ifip tc wg working conference information system concepts improving understanding north holland 
flo floyd comparative evaluation system development methods 
information system design methodologies improving practice olle sol stuart eds north holland 
gs structured systems analysis tools techniques 
prentice hall englewood cliffs 
hal halpin logical analysis information systems static aspects data oriented perspective phd thesis university queensland 
ho halpin oei framework comparing conceptual modelling languages university nijmegen netherlands preparation 
hw ter hofstede th van der weide expressiveness data modeling 
serc software engineering research centrum utrecht netherlands july 
published data knowledge engineering 
lin 
editor framework information system concepts interim report ifip wg task group 
lgn nilsson information systems development systematic approach 
prentice hall englewood cliffs 
mar martin information engineering 
volume research studies 
nh nijssen halpin conceptual schema relational database design fact approach prentice hall 
olle sol stuart eds information systems design methodologies comparative review 
proceedings cris conference north holland amsterdam 
ohm olle macdonald rolland sol van stuart information systems design methodologies framework understanding 
pet peterson petri net theory modelling systems prentice hall 
tl lyytinen lecture notes international meta modelling method engineering university finland june 
vb van niam information analysis method 
olle sol stuart eds information systems design methodologies comparative review 
proceedings cris conference north holland amsterdam 
wasserman characteristics software development methodologies 
information system design methodologies feature analysis olle sol eds north holland 
win niam information analysis method theory practice 
kluwer academic publishers 
yc yourdon constantine structured design fundamentals discipline computer program systems design prentice hall englewood cliffs 

