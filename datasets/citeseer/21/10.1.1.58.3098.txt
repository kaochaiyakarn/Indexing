trust preserving set operations bobby bhattacharjee jonathan katz pete keleher department computer science university maryland college park maryland usa bobby keleher cs umd edu describe method performing set operations untrusted parties 
motivation problem securely reusing content search results peer peer networks 
model search results indexes data sets 
sets value answering new query trusted 
absence system wide security mechanism data set trusted node generated node trusted main contributions formal definition problem efficient scheme solves problem allowing untrusted peers perform set operations trusted data sets producing unforgeable proofs correctness 
accomplished requiring trusted nodes sign digests generated sets digest consists rsa accumulator bloom filter 
scheme general applications 
give analysis demonstrating low overhead scheme include experimental data confirm analysis 
describes method performing computations sets 
party performing computation need trusted result set trusted extent original input 
properties allow scheme distributed environments untrusted hosts 
motivation addressing issue problem securely reusing content search results peer peer networks 
techniques range potential applications 
purposes network large distributed decentralized structure allows autonomous peers cooperatively provide access potentially large set data 
number approaches providing lookup services data proposed 
distributed hash tables dhts chord tapestry pastry cryptographic hashes provide near random association objects sites publish object rest system 
objects looked hash object name route corresponding peer usually log hops 
dhts provide excellent balance routing load paths node vary widely path origin related objects slightly different names randomly distributed system 
random distribution strength approach destroys object locality 
set objects chosen supported part nsf award ani 
common attributes characteristics necessarily include members mapped peers system 
distribution sheer scale diversity source data impractical consider approaches providing content searches periodically flood network order satisfy queries 
similarly flooding network considered practical primitive creating indexes satisfying queries 
searches rely attribute indexes incrementally created maintained 
attribute index records nodes having particular attribute attribute value 
nature applications indexes distributed decentralized underlying system 
straightforward distributed indexes potentially quite expensive 
simple conjunction indexes usually require contents indexes sent network 
indexes may large size potentially grows linearly number system peers 
costs satisfying queries reduced caching query results system 
locality query streams object attributes exploited prior results help satisfy subsequent queries 
example conjunctions attributes stored 
results typically smaller original attribute indexes reduce cost satisfying multi item queries orders magnitude 
views efficiently non trivial addressed 
previous assumes system peers cooperate constructing updating indexes 
contrast avoid assumption motivation problem making cached results secure 
main contribution show efficient scheme allowing untrusted peer perform set operations trusted data sets additionally supply unforgeable proof correctness result 
approach take reduce trustworthiness derived value cached result function trustworthiness sources original attribute values 
easily secured long lived fairly heavyweight 
cached results light weight ephemeral may stored arbitrary possibly untrusted nodes 
mentioned model indexes cached query sets 
trusted operations wish perform standard set operations union difference intersection 
may viewed extending concept ieee ieee infocom trusted untrusted 
trusted fig 

problem untrusted node computes intersection sets obtained trusted nodes 
digests respectively 
resp 
iss resp 
signature resp 

intersection 
authenticated data structures 
briefly allow untrusted host answer queries single trusted data set trustworthy way set generated trusted source allow untrusted directory answer queries form 
focuses challenging case answering queries multiple data sets efficient way intersection problem cast query give 
briefly introduce example problem trying solve terminology 
trusted source nodes 
assume respectively stores set respectively cf 
fig 

untrusted directory caches result set operation example assume stores intersection 
assume computation performed need necessarily case 
problem analyze construct scheme allows arbitrary client verify falsify result query 
verification performed obtain cached result evaluation new query includes expression 
assume possess private public key pair signature scheme knows public keys 
necessarily require existence public key infrastructure public key tied concept identity system 
fact knows trusts implies knows public keys 
idea exploit sends copy appends digest signature digest produced signing key 
source supplies similar information 
sends digest signature digest 
queried intersection sets sends intersection digests information derived intersection evaluation 
information sufficient prove result accurate 
note malicious directory insert extraneous elements reply include elements intersection call insertion attack 
alternately fail include elements intersection inserting bogus elements call deletion attack 
generally insert delete elements 
trivial solution set sources simply signing respective sets 
directory provide original sets response query signatures 
clearly secure client verify authenticity original sets compute intersection 
unfortunately original sets bigger intersection communication overhead response may excessive 
show schemes perform significantly better trivial solution 
rest organized follows 
section ii give formal definition intersection scheme solves sample intersection problem described 
section iii summarize existing techniques construction 
section iv introduce initial scheme solve intersection problem discuss limitations 
section give secure efficient intersection scheme avoids limitations 
section show scheme composable securely compute intersections sets intersections performed untrusted nodes 
section vi show scheme easily extended include set union set difference operations 
section vi discuss implementation details followed experimental results demonstrating efficiency scheme section vii 
ii 
defining intersection scheme provide formal definition secure intersection scheme 
straightforward extend definition set operations support multiple set operations simultaneously 
definition intersection scheme intersection scheme triple efficient algorithms cv digest check value verify algorithms respectively properties takes input set elements universe outputs bit string call digest cv takes input sets digests outputs bit string cv call check value quadruple inputs 
takes input set digests check value produces boolean value ieee ieee infocom 
correctness 
cv 
security 
computationally infeasible adversary input find set value 
intersection scheme follows adapting terminology 
source computes signature computed signing key source computes analogously 
directory signatures cf 
fig 

client queries honest computes cv sends values 
node response query receives 
note malicious different 
signature scheme prevents changing 
client checks signatures valid runs ifd acted correctly evaluate correctness property hand evaluate security property 
iii 
background briefly summarize existing techniques construct secure intersection scheme 
rsa accumulator allows untrusted directory securely prove membership elements set 
second counting bloom filter 
rsa accumulator previous shown cryptographic accumulators solve related problem source entity generates set copy set stored untrusted directory entity entity queries directory asking element xi belongs set 
directory replies affirmative answer able prove xi set 
note contrast authenticated data structures accumulators allow proofs non membership 
allow computes cryptographic accumulator acc set signs result sends copy signature wants prove xi computes value wi called witness xi fromthe inputs xi sends acc wi signature acc client 
client verifying signature verify acc wi xi answer correct 
algorithm randomized denote output input 
deterministic denote process 
rsa accumulator important property size acc depend size wenow describe detail 
source chooses random rsa modulus random publishes values 
assume efficient algorithm input bit string produces odd integer called representative require implements division intractable function 
say infeasible adversary find elements xn divides product xn 
constructions common cryptographic assumptions known 
xn set xi represented bits 
order compute accumulator source computes representatives en xn outputs acc en mod 
witness wi xi computed wi ei ei en mod order verify correctness answer acc wi xi client verifies ei acc mod note scheme easily extended prove set size 
proved strong rsa assumption infeasible adversary fool client believing fact infeasible adversary find wr acc modn 
counting bloom filters assume reader basic familiarity bloom filters 
protocol employs generalization bloom filters called counting bloom filters 
counting bloom filter data structure characterized parameters uses independent hash functions denoted hk range 
set counting bloom filter denoted bl vector non negative integers counters jth element vector denoted bl number pairs hi iv 
attempt suppose bloom filter digest intersection scheme 
suppose directory answers intersection query claimed intersection bloom filters original sets 
client verify element appears original sets bloom filters 
note prevent malicious directory returning subset set integers relatively prime ieee ieee infocom cat cat dog dog monkey cat cat whale chicken whale monkey chicken bl bl cat dog cat chicken monkey whale fig 

counting bloom filters sets real intersection 
bloom filter need prohibitively large order ensure adversary able falsely insert element 
generalize approach counting bloom filters 
discuss scheme secure efficient useful understanding main idea correct secure intersection scheme section 
consider sets fig 
corresponding counting bloom filters hash functions counters 
label side bloom filter counter list items set hash index counter bl element dog appears label fourth sixth counters meaning example dog dog 
client receives signed copy bloom filters supposed intersection malicious directory different real intersection 
verify correctness client computes bloom filter bl obtained element element minimum bl bl bloom filter bl returned intersection fig 

note condition bl 
holds correct intersection element belongs 
example general insertion attack say attack superset detected counters bloom filter fig 
right greater corresponding counter bl left 
test prevent attacker performing deletion attack returning subset 
example directory claim intersection empty effect removing elements decrease counters 
ideally bl bl equal know certain deletion attack performed 
problem legitimate intersection counters bloom filter gap bl bl cat fig 

elementwise minimum bloom filter intersection gap example fig 
strictly corresponding counter bl 
example counter index bl corresponding bl due fact element dog set element whale monkey second set hash index 
say index gap meaning gap counters question 
definition gap index called gap bl strictly 
deletion attack create gaps perceived client 
require directory justify gap 
example directory returns correct intersection justify gap including answer elements sets map index dog set whale monkey second set say check elements response 
directory tries return empty intersection justify gaps example finding strings hash indexes adding check elements 
attack restricted feasible 
formally untrusted directory include answer intersection query check value consists pair sets respectively set check elements receiving answer bl bl client computes bloom filter bl obtained element element minimum bl bl 
client checks condition holds check bl cat cat bl bl bl bl bl bl reject satisfied 
condition enforces gap check element set contain elements collectively hash bl times index say bl bl analogously condition states contain elements hash bl times index ieee ieee infocom stress scheme sketched completely secure 
see discussion 
serve useful building block 
subsection state results estimate number check elements needed scheme result section iv estimate security efficiency scheme 
section show extend approach construct efficient secure scheme 
number check elements definition load filter load counting bloom filter bl set elements hash functions counters expected value counter filter kn consider counting bloom filter intersection scheme sets respectively elements intersection elements 
maximum set size allowed scheme 
kn kn loads bl bl kn maximum load scheme 
assume randomly generate distinct objects xn universe distribution interest values hi xa independent random variables uniformly distributed 
theorem expected number check elements sets satisfies ml ml ml ml proof appendix 
security efficiency considerations intersection scheme described suffers kinds attacks 
example attacker insert element intersection original sets long indices maps gaps shown making probability attack negligible done cost bloom filters prohibitively large number counters probability need 
independently security considerations load bloom filters small keep number check elements small 
implies bigger making size bloom filters bigger size encoding original sets 
address problem 
order improve efficiency counting bloom filter scheme compressed counting bloom filters size counting bloom filter reduced applying compression algorithm 
sufficient intersection scheme secure efficient step solution problem 
section introduce notation results compressed counting bloom filters need section set elements consider counting bloom filter bl counters hash functions 
apply data compressor filter obtaining compressed filter size claim upper bound size compressed counting bloom filter assuming optimal compression mh entropy poisson distribution mean proof appears 
cryptographically secure intersection scheme section describe full solution intersection problem 
section analyze scheme determine optimal values parameters resulting overhead 
scheme works follows produce digest set si generate compressed counting bloom filter bl si rsa accumulator acc si signature 
directory receives query returns intersection bloom filters bl bl rsa accumulators acc acc check element sets computed exactly described section iv rsa accumulator witnesses 
witnesses prove respectively 
signatures 
client verifies answer checking signatures correct checking witnesses correct checking disjoint checking gap check elements cf 
conditions 
note cryptographic accumulator scheme chose rsa scheme acc independent set rsa accumulators prevent attack inserts elements intersection adversary prove element belongs sets cf 
section iii 
malicious directory resp check element set 
consequence holds claim attacker return incorrect intersection break security rsa accumulators signature scheme 
hi uniformly distributed counters bloom filter binomial random variable 
proof claim poisson distribution approximation binomial distribution 
ieee ieee infocom proof suppose attacker return incorrect intersection potentially incorrect check value verification algorithm outputs 
security rsa accumulators acc acc guarantees 
implies attack deletion attack 
exist values xd value xi consider counter hl xi hk hash functions bloom filter 
bl bl bl bl bl bl bl bl due definition counting bloom filter fact consequence fact bl equations 
follow fact conditions hold client verification succeeds 
fact bl bl implies contain value xi removed intersection 
reason contains xi 
contradiction verification algorithm checks disjoint 
illustrate scheme example figs 

client asks intersection directory returns cat check element sets dog whale monkey proof rsa accumulators cat dog proof cat whale monkey 
directory maliciously attempts return empty intersection extra gaps created bloom filters 
order justify gap directory find check element set maps index 
check element belong won possible find witness rsa accumulator 
option cat 
directory find check element 
option cat 
client detect attack noticing check element returned sets 
hashing check elements show reduce size check elements hashing 
general set elements may belong arbitrary domain arbitrary length bit strings 
intersection scheme propose directory include reply query check elements significantly large 
client really care check elements long exist 
mind choose cryptographic hash function sha run intersection scheme hashed values original elements 
bloom filter rsa accumulator computed set computed set hashes elements elements 
directory replies client real elements intersection provides hashes individual check elements 
secure long hash function collision resistant attacker may find elements map value substitute set containing 
letting output length hash function think scheme operating bit elements 
collision resistance property requires large hand cost check elements proportional believe output length sha reasonable value numerical examples experiments 
course analysis holds value choosing parameters bloom filters consider overhead terms size response query 
recall response addition intersection contains cv acc bl acc bl 
elements acc acc rsa values 
size signatures depends signature scheme considered assume rsa scheme compression rsa values 
example employ bit rsa total overhead values bytes 
note independent size sets intersection 
analysis section iv size compressed bloom filter mh 
encoded size check element set bits element upper bound theorem estimate number check elements ml 
total overhead protocol size response ul kf leave terms 
overhead measured fraction worst case total number elements original sets 
optimal parameters choice minimizes 
note counting bloom filter counting hash table bucket replaced number elements bucket 
plotting numerically shows minimum takes value 
means overhead protocol worst case approximately bits element original sets 
careful analysis see shows overhead decreases significantly size intersection ieee ieee infocom large compared original sets sizes different overhead bits element 
may compared overhead trivial scheme directory returns client entire sets incurs overhead bits element 
example original sets contain elements intersection contains elements worst case scenario scheme directory needs send kbytes intersection kbytes accumulators bloom filters saves factor compared trivial scheme require mbytes offers arbitrarily high level security example bit rsa security 
better scenario example scheme requires bytes intersection kbytes overhead compared mbytes trivial scheme 
optimal configuration bloom filter uses counters element original set 
cost counters terms storage uncompressed bloom filter processing time considered excessively high suboptimal larger value load 
example get away counters overhead increases bits element plus constant overhead due accumulators signatures 
composability section show scheme composable untrusted directory perform trust preserving intersection sets sets obtained untrusted directory 
consider example involving source nodes untrusted directories cf 
fig 

source nodes generate sets respectively 
directory copy certificates cert cert sets respectively certificate set described previous sections includes digest counting bloom filter plus rsa accumulator signature digest source 
second directory analogously copy corresponding certificates 
third directory queries directory intersection 
answer contain certificate set consisting certificates base sets check value cv turn consists check element sets witnesses 
analogously obtains certificate 
client queries third directory composability property scheme means directory construct certificate proving computed correctly inputs sets certificates seeing original sets having send client 
cert cert cert cert cert cv cv cert cert cert cert cert cv cert cv cert cert cert cert cv cert cert fig 

trusted nodes untrusted directories involved level intersection computation 
illustrate algorithm producing certificates second level intersection example fig 
specific sets bloom filters fig 

directory knows things check values cv cv 
cv dog whale monkey check elements corresponding witnesses witness cat mouse horse dog 
analogously cv empty 
directory computes bloom filters bl bl sets computes check elements intersection algorithm described section intersecting basic sets check element sets obtained 
example mouse sheep 
check value returned cv 
witness 
directory compute knows proves construction 
remaining analogously defined 
specifically properties rsa accumulator 
note client perform verification scheme inherits security guarantee claim 
claim performance scheme degrade 
equation shows size certificate set sum sizes certificates intermediate intersections plus second level check element sets represent problem worst case overhead happens exactly ieee ieee infocom cat dog mouse horse gap bl bl cat dog horse mouse cat chicken horse monkey mouse whale cat mouse horse bl gap bl cat horse mouse cat sheep goat cat whale monkey mouse chicken horse cat sheep goat cat dog sheep chicken goat cat bl bl cat bl cat sheep cow goat cat chicken dog goat sheep cat cow goat sheep fig 

example scheme intersection intersections 
shows original sets intermediate intersections final intersection corresponding bloom filters case size negligible 
justify 
ifs negligible size compared load bloom filter low elements 
cases progressively larger compared original sets size increases size decreases accordingly making total size response smaller 
vi 
secure intersection secure full set algebra sections ii solution problem secure intersection 
particular shown recursive scheme sets accompanied suitable certificate generate certificate intersection 
section describe construct suitable certificate union difference 
extension proposed scheme allows untrusted directories perform arbitrarily complex set operations data trusted nodes prove correctness result 
described scheme satisfies important property certificate set possible construct bl knowing 
note case intersection true certificate includes bloom filter information reconstruct includes check element sets intersection 
bloom filter obtained elementwise minimum vectors bl bl bl bl 
performing set difference show perform set difference modified version example described figs 

suppose query asks 
answer query horse mouse 
prove correctness answer directory needs compute check element sets set difference 
check element set set consists elements intersection 
case cat 
note client verification reconstruct bl bl 
notice counter index equal bloom filters fig 

showing cat maps index proving cat intersection directory assures client delete element happened map index difference 
check element set second set consists elements opposite set difference map gap 
case sheep 
showing element prove client mouse set difference intersection 
note proof required horse map gap 
check sets known answer query form fig 
check value form 
time witness analogously witness analogously 
performing set union suppose directory queried directory certificate simply provide sets certificates 
note result union operand subsequent operations property longer holds 
fix add rules certificate includes check element sets computed exactly intersection case addition certificates 
additionally operand intersection difference element appears final result check element set carry information belongs 
standard bloom filter sizes source computes digest set know size sets intersected 
practical matter introduce set standard ieee ieee infocom set sizes 
corresponding standard bloom filter sizes property mi ni desired value load example optimal 
example suggest standard set sizes maximum set size source generates digest generates different bloom filter standard size 
suggested configuration generate bloom filters counters 
source signs bloom filters individually provides signatures directory 
directory computes intersection sets choose standard bloom filter size minimizes communication overhead client 
example sets contain elements choice bloom filter counters corresponds load overhead filter counters corresponds load overhead second choice obviously better 
extend analysis overhead ov element cf 
section case sizes original sets different 
obtain ov ul interestingly intersecting set size set size smaller set choosing standard bloom filter size leads ov bits element filter size leads better ov bits element 
maximum overhead scheme numerical unconstrained optimization matlab happens ni ni value ov bits element 
vii 
experimental results implemented prototype scheme algorithms digest check value verification test performance scheme 
simplicity tested separately rsa accumulator computation remaining components scheme 
experiments concentrate intersection base sets believe intersection challenging operations 
cost rsa accumulator implemented program takes input rsa modulus base set outputs corresponding rsa accumulator 
library big number computation 
observe principals scheme need computation source compute accumulator original set directory compute accumulators witnesses sets client compute accumulator operation sets witnesses table time required compute rsa accumulator set size source time directory client time sec sec base 
note practice source may know prime factors chinese speed computation 
computed accumulators sets different sizes 
employed bit rsa modulus bit representatives accumulator scheme generated sha see details 
ran experiments ghz intel gbytes ram 
table shows effective cpu time required computation accumulator set function set size 
set size repeated experiment randomly generated sets strings times averaged 
columns source employ optimization mentioned second directory client 
expected cost grows linearly set size 
note computation source efficient 
note practice costs client lower client performs computations sets usually smaller source sets 
cost bloom filters check elements created unoptimized perl implementation algorithms comprise intersection scheme digest check value verification measure communication overhead encoded size bloom filters check elements computation overhead cpu time perform algorithm 
perl program calls arith coder perform bloom filter compression 
ran set experiments host described previous paragraph 
experiment runs steps scheme digests intersection check value computation verification pair random sets sizes intersection size experiment run times different pairs sets results averaged 
experiment number counters bloom filters chosen order obtain value load bl table ii value minimizes value 
runs size intersection 
table iii shows values running time computation including time compute rsa accumulators column digest digest operations performed directory intersection check elements verification 
third column table iv report absolute overhead scheme accumulators excluded total number bytes required encode compressed ieee ieee infocom table ii optimal bloom filter load different ratios sizes source sets table iii execution times scheme algorithms accumulator excluded seconds dig 
dig 


bloom filters source sets hashes check elements 
fourth column show relative overhead ov defined section absolute overhead divided expressed bits element 
note bigger set large measured overhead essentially yielded analysis 
slightly larger overhead due non optimality compression algorithm evident small input sizes 
ran experiments reported tables different values noticed parameter little influence computation times scheme overhead 
overhead complex queries ran simple experiment test complete scheme including extensions sections vi 
generated random sets sizes resp 
table iv communication overhead accumulator excluded absolute relative overhead bytes overhead bits table overhead complex queries absolute saving query overhead bytes factor universe elements small integers executed scheme sample queries perl implementation 
results shown table second column shows measured absolute overhead scheme third column shows ratio absolute overhead trivial scheme value second column 
note cases scheme offers significant savings 
viii 
formally defined notion secure set operations 
secure set operations allow principal perform set operation pair trusted sets provide proof result validity 
extends authenticated data structures limited considering secure operations isolated sets 
show efficient construction set operation scheme recursively allows secure operations certified results 
demonstrate analysis experiments scheme produces certificates factor smaller trivial scheme signed copy original sets certificate 
best knowledge scheme solves problem known 
exhaustive description algorithms 
believe scheme important application context efficient searches systems 
clients systems profit reusing results previous queries cached untrusted peers 
secure set operation scheme client retrieve result untrusted peer corresponding certificate verify data polluted computation 
client trusts sources trust retrieved data 
note results specific result caching 
results hold type set may applications 
ion stoica robert morris david karger frans kaashoek hari balakrishnan chord scalable peer peer lookup service internet applications proceedings acm sigcomm conference san diego california august 
sylvia ratnasamy paul francis mark handley richard karp scott shenker scalable content addressable network proceedings acm sigcomm 
zhao kubiatowicz joseph tapestry infrastructure fault tolerant wide area location routing tech 
rep ucb csd uc berkeley apr 
ieee ieee infocom antony rowstron peter druschel pastry scalable decentralized object location routing large scale peer peer systems ifip acm international conference distributed systems platforms middleware pp 

bobby bhattacharjee sudarshan chawathe vijay gopalakrishnan pete keleher efficient peer peer searches nd international workshop peer peer systems iptps february 
birgit pfitzmann collision free accumulators signature schemes trees eurocrypt pp 

devanbu gertz martel stubblebine authentic data publication ifip conf 
database security 
goodrich tamassia efficient dynamic distributed cryptographic accumulator tech 
rep johns hopkins information security institute 
goodrich tamassia efficient authenticated dictionaries skip lists commutative hashing tech 
rep johns hopkins information security institute 
goodrich tamassia cohen authenticated data structures graph geometric searching ct rsa 
jan camenisch anna lysyanskaya dynamic accumulators application efficient revocation anonymous credentials crypto 
rosario gennaro shai halevi tal rabin secure hash sign signatures random oracle eurocrypt pp 

burton bloom space time trade offs hash coding allowable errors communications acm vol 
pp 

li fan pei cao almeida andrei broder summary cache scalable wide area web cache sharing protocol ieee acm transactions networking ton vol 
pp 

mitzenmacher compressed bloom filters th annual acm symposium principles distributed computing pp 
appear ieee acm trans 
networking 
bhattacharjee jonathan katz pete keleher trust preserving set operations tech 
rep cs tr university maryland college park july 
group bordeaux gp version available www home de 
john arith coder word character integer bit compression arithmetic coding www cs mu oz au alistair arith coder 
appendix proof theorem fix counter index probability contains gap 
assume sets randomly generated sets elements respectively ifwe call maximum set size scheme supports pr gap pr bl bl pr bl pr bl fact elements distinct events independent 
pr bl kn kn 
gap requires bl check elements bl check elements 
worst case check element useful cover gap 
expected number check elements needed index pr gap bl gap index pr bl pr bl bl bl pr bl pr bl bl pr bl pr bl bl 
claim follows linearity expectation 
ieee ieee infocom 
