infinite tape read write head control device 
turing machine closed noninteractive system shutting external world computes 
folk wisdom marriage contracts reduced sales contracts precise showing interaction expressed algorithms 
contracts time include algorithms instantaneously transform inputs outputs special cases 
interactive tasks driving home realized algorithms 
algorithms execute automatically notice surroundings handle traffic interactive events 
algorithms surprisingly versatile problems difficult solve 
ant path reflects complexity beach 
interaction precluded closed book exams difficult open book exams 
interaction simplify tasks algorithms exist game town inherently interactive tasks driving reserving seat airline 
smart bombs interactively check observations terrain stored map routes smart enhance algorithms interaction 
mechanical devices realized interaction enhances dumb algorithms smart agents 
algorithms metaphorically dumb blind adapt interactively compute 
autistic performing tasks rules interaction 
contrast interactive systems grounded external reality demanding richer behavior rulebased world noninteractive algorithms 
objects remember past interact clients interface operations share hidden state 
object operations algorithms response messages depends may vol 
communications acm shared state accessed nonlocal variables operations 
effect bank account check balancing operation uniquely determined operation depends changes state deposit withdraw operations predicted controlled 
object operations return results depend changes state controlled unpredictable external actions 
growing pains software technology due fact programming large inherently interactive expressed reduced programming small 
behavior airline reservation systems embedded systems expressed algorithms 
fred brooks persuasive argument silver bullet specifying complex systems consequence irreducibility interactive systems algorithms 
silver bullets interpreted formal algorithmic system specifications nonexistence silver bullets proved 
artificial intelligence undergone paradigm shift logic interactive agent oriented models paralleling software engineering 
interactive models provide common framework agent oriented ai software engineering system architecture 
object programming dominant practical technology conceptual framework theoretical foundations unsatisfactory fashionable say talks knows knowing proved elusive implicit assumption explanations specify terms algorithms 
accepting irreducibility fact life effect naturally defined terms interactive models 
turing machines interaction machines british mathematician computer pioneer world war ii code breaker alan turing showed algorithms programming language transformation power turing machines 
call class functions computable algorithms turing machines computable functions precise characterization computed established computer science discipline 
inability compute computable functions adding new primi tives proved frustrating limitation turing machines called turing interactive computing lets escape confines turing 
turing machines transform strings input symbols tape output strings sequences state transitions see 
step reads symbol tape performs state transition writes symbol tape moves reading head 
turing machines accept external input compute shut external world unable model passage external time 
hypothesis aka church thesis formal notion computability turing machines corresponds intuitive notion computable accepted obviously true years 
itive notion computable broadened include interactive computations church thesis breaks 
thesis valid narrow sense turing machines express behavior algorithms broader assertion algorithms capture intuitive notion computers compute invalid 
turing machines extended addition input output actions support dynamic interaction external environment called interaction machines interaction machines simple obvious extension turing machines small change increases expressiveness rich nice mathematical models 
interaction machines may single multiple input streams synchronous asynchronous actions differ dimensions 
distinctions interaction machines examined forms interaction transform closed systems open systems express behavior computable algorithms indicated informal argument claim interaction machine behavior reducible turing machine behavior 
informal evidence richer behavior turing machines handle passage time interactive events occur process computation 
formal evidence irreducibility input streams interaction machines expressible finite tapes finite representation dynamically extended uncontrollable adversaries 
radical view turing machines powerful computing mechanisms distin pedigree 
accepted turing showed turing machines oracles oracle delphi powerful turing machines oracles 
milner noticed early concurrent processes expressed sequential algorithms manna pnueli showed nonterminating reactive processes operating systems modeled algorithms 
del discovery integers described completely logic demonstrating limitations formalism mathematics may adapted show interaction machines completely described firstorder logic 
input output actions logical sensors effectors affect external data physical effect 
objects robots similar interactive models computation robots differ objects sensors effectors physical logical effects 
interaction machines model objects software engineering applications robots intelligent agents distributed systems networks internet world wide web 
observable behavior interaction machines specified interaction histories describing behavior systems time 
case simple objects bank accounts deposit withdraw operations histories described streams operations called traces 
operations effects depend time occurrence interest bearing bank accounts require time stamped traces 
objects inherently nonsequential interfaces joint bank accounts accessed multiple automatic teller machines inherently nonsequential interaction histories 
interaction histories distributed systems history history books consist nonsequential events may duration may interfere 
interaction histories express external unfolding events time instruction execution histories express ordering inner events algorithm relation actual passage time 
algorithmic time intentionally measured number instructions executed actual time taken execution order provide hardware independent measure logical complexity 
contrast duration time execution operations may interactively significant 
operation sequences interactive streams temporal func communications acm may vol 
tional properties instruction sequences describe inner state transition semantics 
pure interaction management paradigm raw interactive power captured machines output input immediately transforming 
simple transducers realize nonalgorithmic behavior harnessing computing power environment may described number equivalent programming language notations loop input message output message loop true echo input message message employ principle weight adversaries cooperating agents achieve desired effect 
realize management paradigm coordinating delegating tasks necessarily understanding technical details 
inherently intelligent behave intelligently replicating intelligent inputs environment claim interactive identity machines richer behavior turing machines 
evidence iim mimic turing machine input stream environment 
interaction machines simply theoretical trick 
embody behavior managers rely subordinates perform substantive problem solving tasks 
person ignorant chess win half games simultaneous chess match masters echoing moves opponent board 
chess machine intelligent input actions interface deliver intelligent outputs interface harnesses intelligence player respond intelligently second player 
clients player unaware interactive help receives interface point view van th century chess machine magical mastery chess due hidden human chess master con may vol 
communications acm inner compartment 
viewpoint actions hidden interface indistinguishable daemon hidden inside machine 
simon known example irregular behavior ant beach finding way home ant colony illustrates complex environments cause simple interactive agents exhibit complex behavior see 
computing mechanism ant presumed simple ant behavior reflects complexity beach nonalgorithmic topography causes ant traverse nonalgorithmic path 
behavior ants described algorithms set possible described 
interaction opens limitless possibilities harnessing environment entirely dependent external resources machines built algorithmic cleverness 
high achievement machines people realized self sufficient inner cleverness harnessing environment 
achievements presidents large corporations president dependent effective supporting environmental infrastructure 
interaction scales large prob interactive external inputs traditional sequential algorithms parallel simultaneous time interaction nonalgorithmic identity machines 
noninteractive parallelism distribution algorithmic 

design space interactive computing 
distributed separated space lems better inner cleverness expresses delegation coordination 
interaction parallelism distribution openness interaction parallelism distribution conceptually distinct concepts interactive systems interact external environment control 
pragmatics user view interface including observation control prediction design description management modeled world syntax representation expresses static properties including languages machine formulas programs semantics meaning captures properties objects modeled world 
user view computational modeling representation express multiple meanings 
parallelism concurrency occurs computations system overlap time 
distribution occurs components system separated geographically logically 
parallel distributed computation absence interaction expressed algorithms 
parallel algorithms studied textbooks university courses necessarily noninteractive 
distributed algorithms textbooks distributed computing likewise noninteractive 
insight interaction parallelism distribution key element providing greater interactive systems grounded external reality demanding richer behavior rule world noninteractive algorithms 
behavioral richness nontrivial requiring fundamental roles parallelism distribution complex systems 
horizontal base plane includes interesting important algorithmic systems systems base plane nonalgorithmic simple interactive identity machine 
agents environment interact cooperative neutral malicious way interaction machine 
adversaries interfering algorithmic goals provide measure limits interaction machine behavior 
synchronous adversaries control inputs agent receives asynchronous adversaries additional power input received 
asynchronous adversaries decide zap interaction machine interactively powerful synchronous adversaries 
provides natural precise definition notion open closed systems 
open systems modeled interaction machines closed systems modeled algorithms 
interaction machines provide precise definition open systems fuzzy concepts empirical computer science programming large 
robustly capture alternative notions interactive computing just turing machines capture algorithmic computing 
open systems rich behavior handle possible clients individual interface demands clients quite simple 
open systems unconstrained behavior nonalgorithmic algorithmic strongly constraining interactive behavior summarized supplied behavior interactive system demanded behavior interface 
interfaces primitive building block interactive systems playing role primitive instructions 
interactive programmers compose plug interfaces just algorithmic programmers compose instructions 
interactive software technology interoperability patterns coordination expressed terms relations interfaces 
frameworks constrain interface behavior constituent components realize goal directed behavior graphical user interfaces 
interfaces express mode pragmatics interactive system complementing syntax semantics see 
closed systems algorithmic behavior open subsystems nonalgorithmic behavior 
example engine car may behave unpredictably spark plug removed 
animals people established behavior routine may behave unfamiliar environments 
subsystems predictable communications acm may vol 
mic constrained behavior unpredictable nonalgorithmic behavior constraint removed greater range possible behaviors considered situations 
openness nonmonotonic decomposition systems may create interactive unpredictable subsystems equivalently composition interactive systems may produce noninteractive algorithms 
contrast concurrency distribution monotonic system concurrent distributed subsystems property 
nonmonotonicity formal property interaction implies noninteractive systems algorithmic behavior may interactive subsystems behavior nonalgorithmic 
interfaces behavior specifications negative result interaction expressible algorithms leads positive new approaches system modeling terms interfaces 
giving goal complete behavior specification requires psychological adjustment respectable software engineering methods incomplete partial system specification interfaces 
complete elephant specified focus shifts specifying parts forms behavior trunk mode eating 
complete specification replaced partial specification interfaces views modes 
airline reservation systems partially specified multiple interfaces travel agents making reservations behalf clients passengers making direct reservations airline desk employees making inquiries behalf clients checking tickets flight aiding passengers flight auditing checking financial transactions system builders developing modifying systems airline reservation systems large number geographically distributed interfaces normal mode may break abnormal overload conditions 
requirements airline reservation system may specified set interfaces modes support 
description systems modes may vol 
communications acm starting point system design interfaces play practical conceptual role interactive system technology 
satisfies requirements supports specified modes correct behavior mode guaranteed complete system behavior possible modes 
correctness programs carefully qualified conditions proved result checking needed execution verify results obtained valid 
techniques systematic online result checking play increasingly important practical formal role supplement line testing verification 
result checking performed automatically people tasks driving visual feedback performed instruments programs safeguards airplane crashes costly embedded system failures 
interface descriptions called harnesses serve constrain system behavior harness horse harness behavior useful purposes 
harnesses negative connotation constraints positive connotation specifications useful behavior interfaces focus primarily positive connotation 
distinguish open harnesses permit interaction harnesses exogenous events closed harnesses cause system harness closed algorithmic 
airline reservation systems naturally described collection open harnesses 
microsoft component object model com describes components interfaces support 
key property possessed com component interface directory complete set interfaces may accessed 
component interface unknown operation checking existence interface 
industrial strength object models suggest components open harness multiple interfaces flexible framework inheritance interface functionality modeling complex objects 
interaction machines conform closely industrial models com inheritance models 
goal proving correctness algorithms replaced interactive systems modest goal showing components collections interfaces harnesses corresponding desired forms useful behavior 
interaction machines specifying software systems described multiple interfaces expressing functionality different purposes 
people likewise better described collections interfaces behavioral effect thinking better modeled interaction machines multiple interfaces turing machines 
empiricism plato cave comparing humans cave observe shadows reality cave walls actual objects outside world shows observation completely specify inner structure behavior observed objects 
example person spending entire life blue sea cave capri italy imagine outside world blue 
projections light retinas serve incomplete cues constructing world solid tables chairs 
plato concluded ideas perfect real physical objects tables chairs 
skepticism concerning empirical science contributed year evolution empiricism 
accept view perceptions reflections reality disagree plato nature reality believing physical world outside cave real 
fortunately complete knowledge unnecessary empirical models physics achieve pragmatic goals prediction control dealing entirely incomplete observable reflections 
modern empirical science rejects plato belief incomplete knowledge worthless partial descriptions shadows control predict understand objects shadows represent 
differential equations capture quantitative properties phenomena model requiring complete description 
similarly computing systems specified interfaces describing properties judged relevant ignoring properties judged irrelevant 
plato cave properly interpreted metaphor empirical abstraction natural science computer science 
turing machines correspond platonic ideals focusing mathematical models expense empirical models 
realize logical completeness sacrifice ability model external interaction real time 
extension turing interaction machines procedure oriented object systems computational analog liberation platonic world view led development empirical science 
interaction machines computing turing algorithmic computation providing conceptual model software engineering ai agents real physical world 
contrast algorithmic interactive models parallels interdisciplinary distinctions domains modeling arising purest form philosophy argument central years 
descartes quest certainty led ergo sum succinctly asserting thinking basis existence implying certain knowledge physical world possible inner processes algorithmic thinking 
hume called empiricist showed inductive inference causality deductive models world inadequate 
kant dogmatic hume wrote critique pure reason show pure reasoning necessarily true knowledge inadequate express contingently true knowledge real world 
continued great appeal spite triumph empiricism modern science 
dialectical logic extended reason legitimate domain influenced political philosophers marx mathematical russell 
george boole treatise laws thought demonstrated influence equating logic thought 
mathematical thought early th century dominated russell hilbert reductions mathematics logic 
del incompleteness result showed flaws mathematics logicians mathematicians fully appreciated limitations formalism implied del 
term fundamental fundamental particles foundations mathematics code word reductionist models physics computing 
presence code word terms religious suggests social scientific common roots deep seated human desire certainty 
philosophy dis guises 
communications acm may vol 
empiricism displaced sciences turing machines reflect reasoning paradigms logic empirical paradigms physics 
algorithms turing machines cartesian shut world process problem solving 
turing born matured time del delivered coup de grace mathematics 
effects del incompleteness result slow manifest logicians church curry turing shaped foundations computer science 
abstraction key tool simplifying systems focusing subsets relevant attributes ignoring irrelevant ones 
incompleteness key distinguishing mechanism algorithmic abstraction empiricist interactive abstraction 
comfortable completeness predictability algorithms inherently inadequate modeling interactive computing tasks physical systems 
sacrifice completeness theorists formal models turing machines just plato descartes 
incomplete behavior comfortably familiar physicists empirical model builders 
incompleteness essential ingredient distinguishing interactive algorithmic models computing empirical models physical world 
models logic computation models logic computation aim capture semantic properties domain discourse modeled world syntactic representations pragmatic benefit users 
express properties physical mathematical modeled worlds form pragmatically useful 
model representation modeled world interpreted human mechanical interpreter determines semantic properties terms syntactic expressions determine respectively syntax semantics pragmatics model 
interactive models multiple pragmatic modes algorithms single intended pragmatic interpretation determined syntax 
goal expressing semantics syntax replaced interactive goal expressing semantics multiple pragmatic modes 
goal complete behavior specification replaced may vol 
communications acm goal harnessing useful forms partial behavior interfaces 
logical proof involves step step progress starting point result logical system programming language formed formulae programs theorem proved initial input rules inference nondeterministic rules computation proofs sequential algorithmic computations reasoning weaker interactive computing physics modeling problem solving 
hobbes correct saying reasoning reckoning converse assertion reckoning reasoning false interactive reckoning richer reasoning 
inherent incompleteness interactive systems practical consequence maximal goals logic functional programming formal methods achieved 
result logic programming weak model interactive systems author closing session fifth generation computing project tokyo showed project achieved software engineering goals tenfold increase effort year extension 
algorithms logical formulae take meanings semantic world computable functions logic purer paradigm expresses relation syntax semantics fewer distractions 
formed formulae semantically interpreted assertions modeled world may true false 
formulae true interpretations called tautologies 
logic sound syntactically provable formulae tautologies complete tautologies provable 
soundness completeness measure adequacy syntactic proofs expressing semantic meaning 
relate syntactic representation logical model semantic modeled world soundness implies syntactically proved theorems express meaning modeled world 
completeness implies meanings syntactically captured theorems 
soundness ensures representations correctly model behavior modeled worlds completeness ensures possible behavior modeled 
soundness completeness ensure model representation correct captures behavior world modeled 
completeness restricts kinds modeled worlds completely expressible representation 
completeness constrains modeling modeled worlds semantics completely expressible syntax expressed 
soundness ensures proofs semantically correct completeness measures comprehensiveness proof system expressing semantic meaning 
soundness completeness imply reducible isomorphic abstractions 
reducibility implies completeness expressing properties incompleteness implies irreducibility 
soundness completeness desirable formal properties abandoned practical reasons 
example logics finding errors programs sound generate error messages program error complete discover errors soundness error message error completeness error error message case insisting soundness conservatively excludes useful error messages wrong complete logics generate spurious error messages quest completeness 
practical logics sound complete generating erroneous messages missing errors strike balance caution aggressiveness 
goal error analysis check syntactically defined error detection system captures independent semantic notion error 
semantic notion error dynamically executed programs statically defined error detection completely formalized semantic notion error syntactically approximated 
choosing approximation extreme conservatism soundness extreme completeness avoided compromising bad senses word conservatism 
del incompleteness result particular mathematical domain arithmetic integers analog computing 
key property incomplete domains irreducibility 
completeness possible restricted class relatively trivial logics semantic domains reducible syntax 
completeness restricts behavior behavior describable algorithmic proof rules 
models real world integers sacrifice completeness order express autonomous external meanings 
incompleteness necessary price modeling independent domains discourse semantic properties richer syntactic notation modeled summarized open empirical falsifiable interactive systems necessarily incomplete 
mathematically set true statements sound complete logic enumerated set theorems recursively enumerable 
del showed incompleteness integers showing set true statements integers recursively enumerable diagonalization argument 
incompleteness interaction machines proved showing set computations interaction machine enumerated 
incompleteness follows fact dynamically generated input streams mathematically modeled infinite sequences 
set inputs interactive input stream cardinality set infinite sequences finite alphabet enumerable 
proof incompleteness interaction machine simpler del incompleteness proof interaction machines strongly incomplete integers 
incompleteness follows infinite sequences finite alphabet require diagonalization 
del conventional wisdom computer scientists assumed proving correctness possible principle simply needed greater effort better theorem provers 
incompleteness implies proving correctness interactive models merely difficult impossible 
impossibility result parallels impossibility realizing russell hilbert programs reducing mathematics logic 
goals research formal methods modified acknowledge impossibility 
proofs existence correct behavior type correctness communications acm may vol 
cases possible proofs nonexistence incorrect behavior type correctness generally impossible 
interactive turing test turing proposed behavioral test called turing test answers question machines think affirmatively machine responses indistinguishable human responses broad range questions 
unexpectedly equated machines turing machines assuming machines answer questions sequentially 
turing permits machines delay answer games chess mimic slower response time humans consider machines may inherently slower humans interact hidden interfaces answering questions 
agents receive help oracles experts natural processes greater question answering ability turing machines 
thinking power clever algorithms range potential behaviors dominates turing machines 
interaction machines external inner resources solve problems quickly disembodied machines 
expressive solving inherently nonalgorithmic problems solve certain algorithmic problems efficiently interactive techniques 
play chess perform scene analysis complex photographs plan business trip partial help expert efficiently expressively turing machines 
outside help generally obtained knowledge client 
turing test constrains interaction exam conditions interaction machines support open book exams expect superior performance 
open book exams allow access computer library congress web amplify exam power interactive access open evolving body knowledge 
note real open book exams allow students add fixed set textbooks closed exams augmented closed body knowledge exams access email web truly open interactive allow larger nonalgorithmic set questions answered 
interaction machines solve problems may vol 
communications acm combination algorithmic interactive techniques human approach problem solving turing machines plausible equate interactive problem solving thinking 
believe machines think divided classes intensional believe machines simulate thinking think 
machine behavior capture inner awareness understanding 
extensional believe machines inherently weaker behavior humans 
machines inherently model physics consciousness 
searle argued passing test constitute thinking competence imply inner understanding penrose asserted turing machines expressive physical models 
agree penrose turing machines model real world disagree implies extensional skepticism interaction machines model physical mental behavior 
penrose builds elaborate house cards physics turing machines 
cards collapse accept interactive computing model physics 
penrose error equating turing machines intuitive notion computing similar plato identification reflections walls cave intuitive richness real world 
penrose platonic arguments acceptance church thesis disguised forms denying class status empirical models computation 
penrose argument physical systems subject elusive noncomputable laws discovered unnecessary interaction sufficiently expressive describe physical phenomena action distance nondeterminism chaos penrose cites examples physical behavior expressible computers 
penrose dichotomy computing hand physics cognition misconception concerning nature computing shared church turing historical roots plato descartes 
insights empiricism dichotomy corresponds algorithms interactions machines model physics cognition interaction allow computing classified empirical physics cognition 
identifying interaction key ingredient distinguishing empiricism showing interaction machines express empirical computer science show arguments plato penrose church turing rooted common fallacy concerning role noninteractive algorithmic abstractions modeling real world 
paradigm shift algorithms interaction consequence converging changes system architecture software engineering humancomputer interface technology 
interactive models provide unifying framework understanding evolution computing technology interdisciplinary connections physics philosophy 
irreducibility interaction algorithms enhances intellectual legitimacy computer science discipline distinct mathematics clarifying nature empirical models computation provides technical rationale calling computer science science 
interfaces computing systems computational analog shadows walls plato cave providing framework system description expressive algorithms captures essence empirical computer science 
trade offs expressiveness arise disciplines especially significant computer models 
expense expressiveness early models computing evident principles go considered harmful sweeping assignment considered harmful functional programming 
functional programming beneficial harmful expressiveness 
forms programming merely certain kinds programs difficult write reducing algorithmic problem solving power 
restriction models computation turing machines serious harmful consequence formalization reducing problem solving power algorithms behavior objects pcs network architec tures fully expressed 
computer science lingua franca modeling allowing applications variety disciplines uniformly expressed common form 
interaction machines provide unifying framework modeling practical applications talking precisely conceptual foundations model building fuzzy philosophical distinctions empiricism concretely expressed computational terms 
crisp characterization vs empiricist models algorithms vs interaction expresses philosophical distinctions concepts computation allowing interdisciplinary intuition empirical models expressive models precisely stated proved 
insight interactive models empirical computer science observably richer behavior algorithms challenges accepted beliefs concerning algorithmic nature computing allowing escape turing develop unifying interactive framework models software engineering ai computer architecture 

brooks mythical man month essays software engineering 
ed 
addison wesley reading mass 

manna pnueli temporal logic reactive concurrent systems 
springer verlag new york 

milner elements interaction 
commun 
acm jan 

penrose emperor new mind 
oxford university press oxford england 

simon sciences artificial 
ed 
mit press cambridge mass 

turing computing machinery intelligence 
mind 

wegner trade offs reasoning modeling 
research directions concurrent object oriented programming 
agha wegner yonezawa eds 
mit press cambridge mass pp 


wegner interactive foundations object programming 
ieee comput 


wegner interactive foundations computing 
appear theoretical computer science 
wegner interactive software technology 
handbook computer science engineering tucker ed 
crc press boca raton fla 

wegner frameworks active compound documents 
brown univ tech 
rep cs 
www cs brown edu people pw 
peter wegner pw cs brown edu professor computer science brown university 
permission digital hard copy part personal classroom granted fee provided copies distributed profit commercial advantage copyright notice title publication date appear notice copying permission acm copy republish post servers redistribute lists requires prior specific permission fee 
acm communications acm may vol 

