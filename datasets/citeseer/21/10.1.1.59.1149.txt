workflow pattern support event driven process chains epc jan mendling neumann markus ttgens vienna university economics ba wien austria firstname lastname wu wien ac hamburg university economics politics von park hamburg germany hamburg de workflow patterns proposed van der aalst provide comprehensive benchmark comparing process modelling languages 
workflow pattern analysis event driven process chains epcs novel degree detailing 
building analysis propose extensions epcs order provide workflow pattern support 
called empty connector inclusion multiple instantiation concepts cancellation construct 
inspired yawl 
furthermore describe extensions represented epc markup language 
workflow patterns gathered van der aalst ter hofstede kiepuszewski barros suited analyzing different workflow languages workflow researchers control flow patterns order compare different process modelling techniques 
special importance considering heterogeneity process modelling languages see mnn 
building pattern analysis insight language provides support patterns van der aalst ter hofstede defined new workflow language called yawl ah 
yawl takes workflow nets aa starting point adds non petri nets constructs order support pattern implicit termination intuitive manner 
petri nets event driven process chains epc popular technique business process modelling 
focus related semi formal process documentation formal process specification sap model defined epc business process models km 
debate epc semantics see ri nr inspired definition mathematical framework formalization epcs ki 
consequence argue workflow pattern support achieved starting epcs petri nets 
presents detailed workflow pattern analysis epcs section 
particular highlight non local semantics xor join implications workflow pattern support 
consequence findings differ workflow pattern analysis epcs reported ah 
furthermore illustrate extensions epcs sufficient provide direct support workflow patterns reported section 
findings informal manner business process models 
represent requirements extended version epcs refer 
letter tribute yawl stresses workflow pattern support 
epcs frequently business process modelling expect extension epcs interesting research community useful modelling practice 
discuss epc markup language extended order capture syntactically section 
survey related section give outlook research section 
workflow pattern analysis epcs section consider epc control flow semantics ki 
basically reflect ideas ttgens rump nr keller ttgens scheer 
semantics implemented simulation tool epc tools ck 
presenting formal way discuss epcs model workflow patterns wp 
formal definition refer ki 
workflow pattern sequence epc representation wp shows epc model workflow pattern sequence 
epcs activity task modelled called function 
functions symbolized rounded rectangles 
functions connected called events symbolized hexagons 
events represent pre requisites subsequent function event occurred function may executed 
furthermore completed functions trigger events may pre requisite functions 
alternation events functions defines business process explains name event driven process chain epc 
function triggers event pre requisite function defining sequence activities described workflow pattern 
workflow pattern parallel split synchronization epc representation wp split wp join epcs define restriction number incoming outgoing arcs events functions 
function exactly incoming outgoing arc event incoming outgoing arc order allow complex routing control flow called connectors introduced 
connector may incoming multiple outgoing arcs split multiple incoming outgoing arc join 
furthermore connector mapped connector types xor 
connectors define partial order functions 
illustrates application split connector achieve control flow behavior defined workflow pattern parallel split 
means function subsequent functions activated executed concurrently 
connector represented circle 
symbol indicates type 
connectors influence alternation events functions see nr mn 
means example event followed function matter connectors 
shows connector join 
functions completed executed 
join synchronizes parallel threads execution just described workflow pattern synchronization 
symbols split join 
distinguished cardinality incoming outgoing arcs 
workflow pattern exclusive choice simple merge workflow pattern exclusive choice describes point process decision continue multiple alternative branches 
situation modelled xor split connector epcs compare 
function completed decision taken continue functions shows xor join connector epc 
debate non local semantics xor join 
ri proposes local interpretation research epc community agrees non local semantics see epc representation wp xor split epc non local xor join nr ki ck 
means xor join allowed continue functions finished possible functions executed 
accordingly epc xor join works similar synchronizing merge see workflow pattern difference blocks concurrent process paths activated 
contrast workflow pattern simple merge defines merge synchronization 
xor join yawl ah exactly reflects behavior parallel activities completed activity xor join started 
parallel activities finished activity xor join activated time forth 
observation allows 
fundamental difference semantics xor join epcs yawl xor join epcs non local semantics blocks multiple paths activated xor join yawl local semantics propagates incoming process token blocking 
second xor join epcs non local semantics mechanism available model workflow pattern epcs 
table ah reflect non local semantics epc xor join described nr ki 
workflow pattern multiple choice synchronizing merge gives epc model workflow pattern multiple choice split connector 
connector activates multiple branches conditions 
join connector depicted synchronizes multiple paths execution described workflow pattern synchronizing merge 
join epcs yawl non local semantics 
means function executed concurrently activated branches completed 
different workflow pattern synchronization branches complete matter activated 
accordingly join needs consider functions completed chance potentially activated 
case join wait execution functions longer possible completed 
epc representation wp split wp join workflow pattern arbitrary cycles implicit termination workflow patterns epcs provide direct support workflow patterns 
arbitrary cycles workflow pattern explicitly allowed epcs 
needs aware arbitrary cycles conjunction join xor join connectors may lead epc process models called semantics ki 
furthermore allowed cycles composed connectors nr 
workflow pattern implicit termination said supported epcs ah 
gives example epc process fragment multiple events 
model equivalent model synchronizes events join connector new event 
altogether workflow patterns supported epcs 
workflow patterns simple merge multiple merge discriminator multiple instantiation deferred choice interleaved parallel routing milestone cancellation supported 
consequence business processes including control flow behavior related unsupported workflow patterns represented appropriately 
epc representation wp implicit termination epc alignment workflow patterns order align epcs direct support workflow patterns different modifications extensions 
section propose measures suffice provide direct modelling support workflow patterns epcs 
measures include called empty connector inclusion multiple instantiation concepts cancellation concept 
differs petri net extensions needed define yawl ah petri nets extended multiple instantiation cancellation concepts lacked advanced synchronization patterns 
epcs contrast lack state representation 
furthermore mentioned modifications impact validity existing epc models means valid epcs definitions nr ki valid respect new class epcs 
refer extended class letter stemming yawl workflow language inspired research 
empty connector mentioned epcs represent state workflow patterns 
shortcoming resolved introducing new connector type refer empty connector 
connector represented cycle just connectors symbol inside 
semantically empty connector represents join split imposing rule 
illustrate behavior giving epcs empty connector model workflow patterns 
interpret events similar states 
note association epc events states follows research contributions epc formalization see ru ri nr 
uses arcs represent states epcs ki mentions choice motivated straight forward presentation ideas semantical considerations 
tokens capture state epc called process folders just folder ru nr 
workflow pattern deferred choice simple merge multiple merge illustrates application empty split connector represent workflow pattern deferred choice function completed folder added subsequent event 
empty split represents folder may picked subsequent function 
accordingly input pre conditions functions satisfied 
functions activated consumes folder means deactivates functions 
shows process model workflow pattern simple merge 
argued section support epcs simple merge pattern due non local semantics epc xor join representation wp deferred choice wp simple merge connector 
empty join connector fix problem 
represents completion new folder added pre condition event needs mentioned design choice multiset state representation described nr simple set representation specified ki 
multi set variant consume folders executed started 
simple set semantics block incoming folders execution consumed folder event 
mechanism implement workflow pattern multiple merge 
workflow pattern interleaved parallel routing pre post mutex pre post representation wp interleaved parallel routing empty connectors state workflow patterns 
shows process model pattern interleaved parallel routing ideas 
event center model manages sequential execution functions arbitrary order 
corresponds mutual exclusion place mutex introduced 
split function adds folder mutex event empty connector 
joins functions consume folder put back mutex event 
furthermore consume individual folders pre pre respectively 
events control function executed 
executed folders post post mutex 
accordingly started 
ro sequential split join operators proposed describe control flow behavior workflow pattern 
clear formal semantics operators operators pairwise 
workflow pattern milestone shows application empty connectors modelling workflow pattern 
event serves milestone means executed completed started 
model exploits newly introduced empty connector model behavior started milestone expired longer executed 
started folder put subsequent event implies started 
empty connector allows straight forward modelling workflow patterns 
milestone multiple instantiation representation wp milestone lack support multiple instantiation discussed epcs see ro 
stick multiple instantiation defined yawl 
related topic see gc msn 
context multiple instantiation helpful define sub processes order model complex blocks activities executed multiple times 
traditionally different kinds subprocesses epcs functions called hierarchy relation represent link sub process nr mn process interfaces kt mn 
hierarchical function interpreted synchronous call sub process 
sub process completed navigation continues function subsequent hierarchical function 
bpml sub processes modelled call activity ar 
process interface regarded asynchronous spawning subprocess 
synchronization sub process completes 
bpml behavior modelled activity 
workflow pattern multiple instantiation synchronization shows model fragment including process interface 
process interfaces may regarded short hand notation hierarchical function followed event 
illustrates workflow pattern multiple instantiation synchronization modelled process interface 
double lines indicate function may instantiated multiple times 
variables min max define minimum maximum cardinality instances may created 
required parameter specifies integer number instances need finished order complete multiple instance function 
variable may take values static specify instances may created run time dynamic static 
min max required creation representation wp workflow pattern multiple instantiation synchronization gives model fragment simple function may instantiated multiple times indicated doubled lines 
shows hierarchical function supports multiple instantiation 
contrast process interface multiple instances synchronized subsequent event triggered instances completed 
min max required creation min max required creation representation wp cancellation workflow pattern cancel activity cancel case cancellation related workflow patterns 
adopt concept yawl workflow language 
shows modelling notation cancellation concept 
specifies function completed function event cancelled 
concept implement workflow pattern cancellation case 
workflow pattern epc representation wp cancellation concept combined deferred choice model discriminator workflow pattern 
shows respective model fragment 
functions may executed concurrently 
completed subsequent event triggered 
allows function start 
completion leads cancellation functions cancellation context active 
epc representation wp requirements argued section support workflow patterns achieved extending epcs different ways 
introducing empty connectors order address state workflow patterns 
second multiple instantiation added epcs 
adopted parameters yawl doubled line notation 
multiple instances generated single functions hierarchical functions multiple instantiation synchronization process interfaces multiple instantiation synchronization 
third cancellation concept adopted yawl 
extensions permit relation petri nets epcs general 
include extensions multiple instantiation cancellation 
addition petri nets extended advanced synchronization concepts order capture workflow patterns 
hand epcs modified order address state workflow patterns 
consequence yawl quite similar concerning modelling primitives 
xor join major difference 
need formalized 
works ki van der aalst ter hofstede ah starting point 
alignment section discuss far proposed extensions may impact representation 
epc markup language xml interchange format epc business process models proposed mn mn mn 
section particularly want identify syntax elements need added order represent 
empty connector easily represented schema 
gives example empty connector id 
arc indicates follows function id 
second dedicated elements needed multiple instantiation 
gives illustration required elements 
subelement indicates parent function process interface instantiated multiple times 
attributes capture semantics parameter described section defined ah 
third second function shows elements attached function process interface 
cancel element carries attribute referencing function event process interface cancelled 
slight extensions show easily aligned syntactical requirements 

epc name example function id multiple minimum maximum required creation static function arc flow source target arc empty id function id cancel id cancel id cancel id function 
epc representation multiple instantiation cancellation related workflow patterns proposed provide comprehensive benchmark comparing different process modelling languages 
short workflow pattern analysis epcs reported ah 
analysis reflect non local semantics epcs xor join 
highlighted semantics major difference yawl epcs 
accordingly propose empty connector order capture workflow pattern simple merge 
research discussing notational extensions epcs 
ri called connector proposed partially resolve semantical problems xor join connector 
motivated space limitations book pages keller introduce process interfaces link epc models different pages km 
adopt process interfaces model spawning sub processes 
ro proposes sequential split join operators order capture semantics workflow pattern interleaved parallel routing 
informal meaning pair sequential split join operators clear formal semantics single operator far intuitive 
consequence propose state representation interleaved parallel routing inspired petri nets 
furthermore introduces connector explicitly models decision table called connector mark branches executed ro 
presents multiple instantiation missing feature epcs ro 
proposes dedicated symbols model branch process may executed multiple times 
notation enforce symbol followed matching symbol 
consequence adopt multiple instantiation concept yawl permits multiple instantiation single functions sub processes arbitrary branches process model 
discussed current potential workflow pattern support epcs 
extensions epcs 
particular empty connector inclusion multiple instantiation concept simple functions hierarchical functions process interfaces inclusion cancellation concept 
refer extended class epcs tribute yawl ah 
furthermore shown extensions easily included 
research aim define formal semantics implement software prototype uses interchange format 
aa van der aalst verification workflow nets 
az ma balbo 
eds application theory petri nets 
volume lecture notes computer science 
pages 
springer verlag 

van der aalst desel semantics epcs vicious circle 
ttgens rump eds proc 
st gi workshop business process management event driven process chains epk trier germany 
pages 

ah van der aalst ter hofstede yawl workflow language 
information systems 


van der aalst ter hofstede kiepuszewski barros workflow patterns 
distributed parallel databases 

july 
ar arkin business process modeling language 
specification 
bpmi 

ck semantics epcs efficient calculation simulation 
proceedings rd gi workshop business process management event driven process chains epk 
pages 

gc multiple instantiation dynamic workflow environment 
persson 
eds advanced information systems engineering th international conference caise 
volume lecture notes computer science 
pages 
springer verlag 

ki semantics epcs framework resolving vicious circle extended 
ttgens rump eds proc 
nd gi workshop business process management event driven process chains epk bamberg germany 
pages 

ki semantics epcs resolving vicious circle 
desel pernici weske eds business process management nd international conference bpm 
volume lecture notes computer science 
pages 
springer verlag 

km keller sap analyzer 
business process reengineering model 
sap ag 

keller ttgens scheer auf der epk 
technical report 
institut wirtschaftsinformatik saarbr cken 
saarbr cken germany 

kt keller teufel sap process oriented implementation iterative process prototyping 
addison wesley 

mn mendling ttgens event driven process chain markup language zur definition eines xml schemas epk 
ttgens rump eds proc 
st gi workshop business process management event driven process chains epk trier germany 
pages 

mn mendling ttgens epc modelling implicit arc types 
liddle mayr eds proc 
nd international conference information systems technology applications 
volume lecture notes informatics 
pages 

mn mendling ttgens epc syntax validation xml schema languages 
ttgens rump eds proc 
nd gi workshop business process management event driven process chains epk bamberg germany 
pages 

mn mendling ttgens exchanging epc business process models 
ttgens mendling 
eds proceedings st gi workshop xml bpm th gi conference modellierung marburg germany 
pages 
march 
mnn mendling ttgens neumann comparison xml interchange formats business process modelling 
proceedings information systems business government 


msn mendling neumann extending bpel ws multiple instantiation 
dadam reichert 
eds informatik band proceedings th annual meeting german informatics society gi 
volume lecture notes informatics 
pages 

nr ttgens rump syntax und semantik epk 
desel weske eds promise proceedings gi workshop potsdam germany 
volume lecture notes informatics 
pages 

ri quo epk aris 
ans tze zu erweiterungen und einer semantik 
wirtschaftsinformatik 


ro und integration von modellen die 
phd thesis 
wilhelms universit 

ro und event driven process chains epc multiple instantiation referential persistence german 
proceedings st gi workshop business process management event driven process chains epk 
pages 

ru rump gesch management auf der basis analyse und ausf hrung von 
teubner verlag 

