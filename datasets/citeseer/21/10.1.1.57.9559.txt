representation reasoning non binary constraints thesis submitted university strathclyde degree phd kostas department computer science glasgow scotland january problems real world eciently expressed constraint satisfaction problems csps 
naturally modelled ary non binary constraints 
representing problems ary constraints reasoning important constraint satisfaction 
issues regarding ary constraints neglected compared binary constraints 
reasons simplicity dealing binary constraints compared nary fact non binary csp encoded equivalent binary 
thesis empirical theoretical study representation solution methods ary csps 
results demonstrate importance choice representation reasoning techniques ary problems 
general methods deal ary csps 
encode binary known algorithms heuristics binary constraints leave ary representation studied algorithms heuristics ary constraints 
study compare methods empirically theoretically 
demonstrate ecient circumstances 
distinguish classes ary constraints decomposable non decomposable 
decomposable problems equivalently encoded binary set variables 
show encoding decomposable problems binary inecient 
binary conversion loses crucial part constraints semantics eciently exploited ary representation problems easier 
non decomposable problems encoded binary introducing additional variables 
show encoding problems binary pay demonstrate encoding method known hidden variable encoding useful technique help achieve high level consistency relatively cheaply 
show enforcing high levels consistency generalized arcconsistency singleton consistencies ective 
maintaining generalized arc consistency ecient algorithm decomposable problems 
singleton arc consistency generalization ary constraints ective preprocessing techniques reduce number search tree branches cpu times considerably 
people helped complete thesis 
am grateful supervisors ian gent patrick prosser toby walsh guidance support friendship 
feel lucky closely worked past years researcher greatly bene ted knowledge experience 
goes paul shaw barbara smith collaborated 
members apes research group 
people helping carry bill john kar nick mam george nick fot course peck 
appreciate presence david edward ka spell douglas bill callaghan michael don space mention 
am grateful mother father done thesis dedicated memory father 
declarations part material thesis previously published conference journal workshop papers 
give details 
chapters parts chapter included papers arc consistency quasigroup completion paul shaw kostas toby walsh 
proceedings ecai workshop non binary constraints brighton uk 
di erence di erence kostas toby walsh 
proceedings ijcai stockholm sweden 
decomposable constraints ian gent kostas toby walsh 
arti cial intelligence volume pages 
decomposable constraints ian gent kostas toby walsh 
new trends constraints lnai number pages springer verlag 
chapter parts chapter included papers encodings non binary satisfaction problems kostas toby walsh 
proceedings aaai pages orlando florida 
modelling golomb ruler problem barbara smith kostas toby walsh 
proceedings ijcai workshop non binary constraints stockholm sweden 
auxiliary variables implied constraints model non binary problems barbara smith kostas toby walsh 
proceedings aaai austin texas 
chapter parts chapter singleton consistencies patrick prosser kostas toby walsh 
proceedings cp singapore 
large part described thesis result collaboration mainly toby walsh ian gent patrick prosser 
declare substantial contribution thesis composed 
cases dicult identify exactly individual contributions declare experimental described chapters 
theoretical results proofs chapters mainly due claimed original results thesis 
theoretical results proofs smaller contribution claimed original thesis 
chapters new material previously published 
addition material previously published detail 
point reader necessary 
contents constraint satisfaction problems 
de nitions 
constraints 
search tree 
contributions 
thesis outline 
related local consistencies 
arc consistency 
path consistency 
restricted path consistency 
singleton consistencies 
inverse consistencies 
generalized arc consistency 
relational consistencies 
bound consistency 
constraint propagation algorithms 
arc consistency algorithms binary csps 
generalized arc consistency algorithms 
specialized filtering algorithms 
theoretical comparison local consistencies 
systematic search algorithms 
chronological backtracking 
look back algorithms 
forward checking 
maintaining arc consistency 
theoretical comparison search algorithms 
heuristics 
variable ordering 
value ordering 
modelling constraint satisfaction problems 
constraint programming systems 

theoretical results algorithms maintain local consistencies 
preliminaries 
theorems 
decomposable constraints 
forward checking decomposable constraints 
arc consistency decomposable constraints 
triangle preserving constraints 
complexity analysis 
forward checking 
arc consistency 
arc consistency binary equals constraints 

empirical study decomposable constraints quasigroup completion 
problem description 
problem formulation 
random 
solving problem 
experimental results 
discussion 
quasigroup existence problems 
problem description 
experimental results 
discussion 
small world problems 
constructing small world problems 
experimental results 
interval series 
problem description 
experimental results 

binary encodings ary constraints description encodings 
dual encoding 
hidden variable encoding 
double encoding 
arc consistency encodings 
hidden variable encoding 
complexity arc consistency hidden variable encoding 
cost constructing storing hidden variables 
dual double encodings 
experiments random problems 
experiments benchmark domains 
golomb rulers 
crossword puzzle generation 

singleton generalized arc consistency singleton consistencies 
theoretical results 
decomposable constraints 
hidden variable encoding 
dual encoding 
experimental results 
small world problems 
problems distance 



list tables worst case time space complexities ecient algorithms various local consistencies 
number variables number constraints graph size largest domain number cliques graph maximum degree variable arity constraints 
th th percentiles branches searched complete quasigroup order 
bc gac corresponds generating gomes selman backward checking method solving generalized arc consistency bc ac corresponds generating backward checking method solving arc consistency binary constraints 
means instance abandoned branches explored 
problems solved data point 
percentiles branches explored complete quasigroups order mgac 
means instance abandoned branches explored 
branches explored mac binary mgac ary representation di erent constraints quasigroup existence problems 
performance various solvers qg problems measured number branches explored 
branches explored cpu time seconds nding solutions interval series problems 
branches explored cpu time seconds nd minimal length ruler prove shorter exists 
means run cut branches 
quaternary corresponds model quaternary constraints 
ary corresponds ternary model gac maintained di erent constraint auxiliary variables solver bounds consistency maintained ternary constraints 
ary corresponds ternary model ac maintained constraints auxiliary variables solver bounds consistency maintained ternary constraints 
branches explored cpu time seconds nd ruler speci ed length prove exists lexicographic ordering 
indicates ruler length 
hidden double corresponds hidden variable double encodings ternary model collection constraints auxiliary variables 
ary gac corresponds ternary model constraints auxiliary variables gac maintained ternary constraints 
ary corresponds ternary model ac maintained constraints auxiliary variables solver bounds consistency maintained ternary constraints 
branches explored cpu time seconds nd ruler speci ed length prove exists lexicographic ordering 
indicates ruler length 
means run cut hour cpu processing 
hidden double corresponds hidden variable double encodings ternary model di erent constraint auxiliary variables 
ary gac corresponds ternary model di erent constraint auxiliary variables gac maintained constraints 
ary corresponds ternary model gac maintained di erent constraint auxiliary variables solver bounds consistency maintained ternary constraints 
branches explored generating various crossword puzzles 
number variables number constraints dual problem 
non binary problem way number variables number constraints 
words number words puzzle number letters 
rst column gives name puzzle introduced 
cpu time seconds spent generating various crossword puzzles 
fraction values deleted preprocessing trying nd golomb ruler optimal length prove shorter exists branches explored cpu time seconds trying nd golomb ruler optimal length prove shorter exists 
preprocessing done ac sac restricted sac 
branches explored cpu time seconds preprocessing golomb rulers gac sgac restricted sgac 
branches explored cpu time seconds gac sgac restricted sgac preprocessing golomb rulers 
list figures map coloured corresponding graph 
variable graph region map 
variable possible values fr bg corresponding available colours red green blue 
example search tree 
variables domains 
corresponds level tree 
level assignment represented tuple 
nodes correspond tuples variable assigned 
example bottom right node corresponds tuple variables value 
node parent node means node child node 
node ancestor node means node descendant node 
formal de nitions various local consistencies 
relations local consistencies 
way thick directed arc form means consistency strictly stronger consistency way thin arc connecting consistencies means incomparable 
partial hierarchy visited nodes 
partial hierarchy consistency checks performed 
partial generalized forward checking algorithms nodes visit 
performance forward checking algorithm fc binary decomposition set decomposable ary constraints compared various generalizations forward checking nfc nfc applied ary constraints 
consistency generalized arc consistency set decomposable non binary constraints compared various consistency techniques stronger equal arc consistency binary decomposition 
consistency generalized arc consistency triangle preserving set non binary constraints compared various consistency techniques stronger equal arc consistency binary decomposition 
example completed quasigroup partially lled 
percentage satis able problems quasigroups order axis function percentage axis 
backward checking model gomes selman generalized arc consistency 
th th percentiles branches explored complete quasigroup function percentage generalized arc consistency perform completion 
qg ab 
ba 
removing edge random clique variables creates cliques 
variables second variables 
adding edges cliques random 
percentiles branches explored cpu seconds mac mgac solve small world generated randomly deleting edges constraint graph order quasigroup 
percentiles branches explored cpu time mac mgac solve small world problems generated randomly adding edges order quasigroup 
solubility phase transition small world problems generated randomly adding edges order quasigroup 
dual encoding non binary csp rij binary constraint pair tuples true ith element st tuple equals jth element nd tuple 
hidden variable encoding non binary csp 
binary constraint ri applies tuple value true ith element tuple equals value 
hashing reduce space hidden variable encoding 
ternary constraints problem represented hidden variables 
domain hidden variable array list keys key points tuple allowed corresponding constraint 
table store tuples values original variables simply function translates key corresponding binary number 
note constraints similar 
inequalities equality 
simple problem distance variables labelled edge labelled di erence edge labelled di erence constraint specifying di erent 
quaternary model golomb rulers problems 
ternary equals model golomb rulers problems 
ternary di erent model golomb rulers problems 
ary model crossword puzzle 
variables letter lled 
ary constraint set variables form word specifying formed word exist dictionary 
example assignment value value consistent word formed valid word 
squares correspond black squares puzzle 
dual model crossword puzzle 
variables word lled disregard words length 
binary constraint pair variables intersect specifying variables letter intersection point 
example assigned value consistent assignment links 
squares correspond black squares puzzle 
bessi ere algorithm singleton arc consistency 
search cost preprocessing gac sgac 
left ort measured branches explored right ort measured cpu time seconds 
chapter problems real world eciently modelled constraint satisfaction problems solved constraint programming techniques 
include problems elds arti cial intelligence operations research databases expert systems design examples scheduling planning machine vision temporal reasoning car sequencing vehicle routing circuit design medical expert systems natural language understanding belief maintainance frequency allocation 
problems naturally modelled ary non binary constraints 
ary constraints constraints involve number variables 
constraint satisfaction literature need address issues regarding ary constraints started widely recognized 
research past primarily focused binary constraints constraints pairs variables basic reasons simplicity dealing binary constraints compared ary ones fact non binary constraint satisfaction problem encoded equivalent binary 
cases ary constraints lose crucial part semantics translated sets binary ones 
eciency encoding ary constraints binary terms actual ort required solve problem adequately studied 
need address practical problems arise real world means issues regarding ary constraints investigated 
main questions faced constraint satisfaction problem rst represent second solve 
thesis investigate compare ways representing solving problems ary constraints 
trying solve problem ary constraints faced crucial modelling decision 
convert problem binary leave ary representation 
convert problem binary widely studied algorithms heuristics binary constraints solve problem 
option taken granted constraint satisfaction community 
leave problem ary representation algorithms heuristics ary constraints 
algorithms heuristics widely studied 
method ecient circumstances 
answer questions extensive empirical theoretical study comparison di erent methods dealing ary problems 
focus primarily algorithms maintain arc consistency generalization ary constraints compare ect applied directly ary representation compared binary encoding 
shown algorithms ecient widely community 
distinguish classes ary constraints decomposable 
decomposable constraints represented binary constraints set variables 
example di erent constraint decomposable clique binary equals constraints 
non decomposable constraints decompose binary set variables represented binary constraints introducing additional variables 
classes ary constraints study compare solving methods 
investigate applicability higher levels consistency generalized arcconsistency 
sections describe constraint satisfaction problems give necessary de nitions 
discuss contributions thesis detail 
constraint satisfaction problems constraint satisfaction problem csp consists nite set variables nite domain values variable set constraints restrict combinations values variables take 
aim csp select value variable constraints problems satis ed 
example map colouring problem formulated csp 
problem set colours want colour region map adjacent regions colour 
csp formulation map colouring variable region map 
domain variable set available colours 
pair adjacent regions constraint corresponding variables permit assignment identical values variables 
map represented graph node corresponds region map pair nodes correspond adjacent regions map connected edge 
shows example map colouring problem 
regions coloured region fr bg fr bg fr bg fr bg map coloured corresponding graph 
variable graph region map 
variable possible values fr bg corresponding available colours red green blue 
map corresponding variable graph 
assuming colours red green blue colour map variables graph possible values constraints problem state adjacent regions map coloured di erent colours 
graph representation variables corresponding adjacent regions connected edge 
constraints problem edges graph 
solution problem assignment 
assignment adjacent variables di erent values 
csps general case intractable problems 
polynomial algorithm solving problems known exist 
complete algorithms search solutions csp backtracking 
complete mean algorithm guaranteed nd solution exists prove 
backtracking exhaustively assign values variables consistent assignment variables possible assignments tried 
time value variable backtracking checks value compatible previous assignments respect constraints problem 
algorithm try assign variable 
assignment undone value variable tried 
values tried fail algorithm backtrack previously assigned variable undo assignment try value 
number variables domain size variables assuming uniform domain size number possible combinations values variables gives worst case time complexity backtracking 
de nitions de ne basic concepts constraint satisfaction problems necessary understanding thesis 
de nition constraint satisfaction problem csp triple nite set variables fx variable domain domain variable nite set possible values assigned 
nite possibly empty set constraints relations 
ary constraint de ned set variables fx subset cartesian product compatible combinations values 
de nition variable assignment called instantiation variable value pair represents assignment value variable instantiation set variables tuple ordered pairs ordered pair assigns value variable tuple consistent satis es constraints involving variables tuple 
remainder thesis tuple abbreviated 
de nition solution csp assignment values variables constraints satis ed 
words consistent tuple containing variables csp 
partial solution consistent tuple containing variables 
basic tasks csps finding solution exists finding solution enumerating solutions finding best solution respect criterion thesis primarily concerned second task 
exists solution csp say soluble consistent 
say insoluble inconsistent 
di erentiate csps nite continuous domains 
thesis interested csps nite domains values domain integers 
number possible values domain called cardinality domain 
notation moving details constraint satisfaction problems summarize notation thesis 
generic number variables csp noted confused ary constraints 
maximum domain size variables noted number constraints maximum arity constraints notation analyzing complexities algorithms 
variables represent variables italic lower case letters alphabet 
example index example indices lower case letters middle alphabet example integer numbers 
set variables fx noted domains values domain variable noted individual values represented rst lower case letters alphabet italics 
example variables index 
indices variables 
lower case middle letters alphabet integers 
assignment value variable noted pair 
mentioned de nition tuple variable assignments noted 
constraints ary constraint variables fx noted accordingly binary constraint variables noted ij indices variables constraint important note constraint simply set variables involved constraint denoted xc additional notation de ned way 
constraints give de nitions constraints explain basic properties 
arity constraint number variables involves 
unary constraint constraint involving variable 
binary constraint constraint involving pair variables 
ary non binary constraint constraint involving arbitrary number variables 
referring binary csp mean csp constraints unary binary 
ary non binary csp mean csp constraints arity 
example constraint unary constraint variable constraint binary constraint 
constraint non binary constraint ternary constraint case 
de nition tuple constraint element cartesian product tuple allowed called allowed tuple 
tuple allowed called forbidden disallowed tuple nogood 
tuple constraint called support value xc allowed contains corresponding position constraint 
verifying tuple allowed constraint called constraint check consistency check 
constraint de ned extensionally set nogood tuples intentionally predicate arithmetic function 
example consider constraint variables domains specifying di erence value constraint represented intensionally expression represented extensionally set allowed tuples set forbidden tuples concept constraint projection 
operation projection de ned way normally de ned relational algebra 
de nition projection ary constraint subset fx xm variables new constraint constraint de ned consistent tuples original ary constraint contain values projected variables 
constraint graph binary csp viewed labeled directed graph nodes represent variables edges arcs nodes represent constraints 
graph called constraint graph constraint network 
edge node node corresponding constraint ij variables edge node node corresponding constraint ij constraints set allowed tuples 
constraints symmetric 
example binary constraint graph representing csp variables constraints simplicity edge shown show symmetric edge consequence edge connecting nodes shown undirected 
follow conventions thesis 
non binary csp represented hypergraph consists nodes represent variables hyperedges hyperarcs represent non binary constraints 
hyperedge connects nodes involved corresponding constraint 
example constraint graph non binary constraints variables fx variables fx neighbourhood variable binary csp set variables constraint graph adjacent connected involved constraint non binary csp neighbourhood variable set variables connected hyperedge degree variable csp number constraints involved 
binary csp number variables adjacent graph 
decomposable constraints certain class ary constraints primal interest thesis class network decomposable constraints mon 
remainder thesis just decomposable 
de ne class constraints brie discuss properties 
chapters investigate decomposable constraints theoretically empirically detail 
de nition ary constraint variables fx decomposable equivalently represented set binary constraints set variables fx resulting set solutions 
examples decomposable constraints example constraint enforcing variables take di erent values equivalently represented binary constraints ary constraint called di erent constraint 
second example monotonicity constraint variables represented ordering constraints think apparent decomposable constraints 
example constraint stating adjacent variables ring variables di erent values 
example constraint stating values variables clique di erence number give formal de nition di erent constraint common decomposable constraint 
de nition constraint variables fx called di erent constraint allows tuples am words di erent constraint states variables involves take di erent values 
di erent constraints real world problems timetabling sports scheduling frequency allocation chapters study properties decomposable constraints ways solve problems decomposable constraints 
decomposable constraints important constraint satisfaction represent small class ary constraints 
nary constraints represented binary constraints set variables 
example constraint decomposed binary constraints 
way represent constraint binary ones introducing additional variables 
investigate compare ways deal constraints chapter 
search tree possible combinations variable assignments csp create search space viewed tree called search tree 
backtracking search csp corresponds depth rst traversal search tree 
assume order variables static change search node level search tree represents state variable assignment variables exists rest variables unassigned 
associate node search tree tuple consisting assignments 
root search tree empty tuple value assigned variable 
nodes rst level tuples representing state value assigned variable nodes second level tuples representing state values assigned variables 
number variables nodes level tuples representing variable assignments variables problem 
tuple consistent solution problem 
node search tree consistent current partial assignment consistent words tuple corresponding node consistent 
parent node node consisting assignments node 
parent node node 
ancestor node node case node called descendant node 
child node node consisting set assignments node plus assignment variable 
node form 
leaf node problem variables node 
nodes near root search tree called shallow nodes 
nodes near leaves search tree called deep nodes 
shows example leaf nodes example search tree 
variables domains 
corresponds level tree 
level assignment represented tuple 
nodes correspond tuples variable assigned 
example bottom right node corresponds tuple variables value 
node parent node means node child node 
node ancestor node means node descendant node 
search tree 
depth rst traversal search tree variable corresponds currently visited level called current variable 
variables corresponding deep levels called past variables 
remaining variables instantiated called variables 
dead situation domain current variable empty 
contributions ary constraints real world csps 
working deal ary constraints important constraint satisfaction 
thesis concerned exactly problem ways representing solving ary csps 
general ways deal ary constraints encode binary known algorithms heuristics binary constraints leave ary representation studied algorithms heuristics ary constraints 
rst detailed studies ways solve ary csps 
distinguish classes ary constraints decomposable non decomposable 
show encoding decomposable problems binary inecient non decomposable constraints encoding binary pay demonstrate practical importance achieving high levels consistency ary csps 
discuss detail main contributions thesis 
prove theoretical results algorithms maintain local consistencies arc consistency prune values variables search 
prove algorithm maintains local consistency property visits search tree nodes algorithm maintains local consistency stronger result assists theoretical comparison algorithm maintains generalized arc consistency directly ary representation decomposable csp algorithm maintain arc consistency binary representation problem 
prove visits search tree nodes 
helps prove algorithm maintains generalized arc consistency directly ary representation decomposable csp dominates terms visited nodes algorithm maintains arc consistency binary representation problem 
study empirically ect changing representation decomposable constraints ary binary search ort 
empirical study various benchmark problems modelled decomposable constraints speci cally di erent constraints 
results show substantial di erence favour ary representation cases dramatic impact search ort 
example benchmark quasigroup completion problem largely trivial modelled ary constraints 
demonstrates loss semantics incurred encoding ary decomposable constraints binary negative ect 
shown generalized arc consistency decomposable constraints achieves higher level consistency arc consistency binary decomposition 
empirical results display practical importance achieving high levels consistency 
repeat study non decomposable constraints benchmark domains randomly generated problems 
show worst case arc consistency enforced hidden variable encoding arbitrary ary constraints asymptotic time complexity generalized arc consistency ary representation constraints 
importantly demonstrate large classes problems asymptotic complexity arc consistency hidden variable encoding better generalized arc consistency 
compare empirically eciency binary encodings ary representation benchmark domains 
results show generalized arc consistency non decomposable constraints general expensive maintain search generic generalized arc consistency algorithm high complexity 
binary encodings hidden variable encoding ecient 
dual encoding ine cient compared hidden variable encoding large domain sizes variables introduces 
double encoding reduces search space increases run times large number constraints involves 
sw showed arc consistency hidden variable encoding non binary csp achieves level consistency generalized arcconsistency non binary representation 
results thesis show encoding ary csps binary hidden variable encoding ecient way achieve level consistency maintain search specialized generalized arc consistency algorithm low complexity available 
having displayed importance achieving high levels consistency generalized arc consistency study higher levels consistency 
study singleton arc consistency generalization ary constraints introduce 
prove theoretical results consistencies study empirically 
prove singleton generalized arc consistency decomposable constraints stronger singleton arc consistency binary decomposition 
singleton generalized arc consistency arbitrary ary constraints weaker singleton arcconsistency hidden variable representation constraints 
experiments compare arc consistency generalized arc consistency singleton counterparts 
compare singleton consistencies 
results show achieving high levels consistency singleton generalized arc consistency worthwhile preprocessing step 
preprocessing generalized singleton arc consistency reduces search space run times benchmark domains 
singleton consistencies expensive maintained search 
demonstrate importance choice way model nary csps ort required solve 
show classes ary csps special properties decomposable problems nary representation ecient binary arbitrary constraints binary encoding ective 
decomposable constraints show binary conversion loses crucial part constraints semantics eciently exploited ary representation problems easier 
arbitrary ary constraints show encoding ary csps binary hidden variable encoding promising technique achieve high level consistency relatively cheaply 
show enforcing high levels consistency singleton generalized arc consistency ective solving ary problems 
thesis outline chapter review related binary ary constraint satisfaction problems 
rest thesis divided parts 
rst part chapters investigates ways solving csps decomposable constraints 
study compare algorithms applied ary representation decomposable constraints opposed algorithms applied binary decomposition 
chapter give theoretical results algorithms maintain local consistencies 
results help establish theoretical relationship algorithm maintains generalized arc consistency ary decomposable constraints algorithm maintains arc consistency binary decomposition constraints 
chapter extended empirical study solving csps decomposable constraints especially di erent constraints 
second part thesis chapter repeats study general class non decomposable constraints 
study compare algorithms maintain generalized arc consistency ary problems algorithms maintain arc consistency binary encodings problems 
third part chapter investigate theoretically cally ectiveness higher levels consistency arc consistency generalized arc consistency 
study ectiveness singleton arc consistency generalization ary constrains 
chapter conclude discuss 
chapter related chapter review research related thesis 
explained primarily interested ways solving ary csps 
ary csps literature direct extension ideas previous binary csps 
review current status research regarding important aspects binary ary csps relevant thesis 
review local consistencies constraint propagation algorithms search algorithms modelling heuristics 
detailed look csps including issues covered tsa 
shorter reviews area kum dec mes 
chapter structured follows 
section give de nitions various local consistency properties proposed 
section discuss constraint propagation algorithms especially arcconsistency generalized arc consistency algorithms 
section reviews known search algorithms binary ary csps 
section review variable value ordering heuristics binary ary csps 
section outline importance modelling problem formulation csps studying previous area 
section brie discuss constraint programming toolkits focusing ilog solver toolkit empirical chapters 
additional related material reviewed chapters 
example discuss previous binary encodings ary csps chapter 
local consistencies discussed chapter complete systematic search algorithms solving csps backtracking search basis 
backtracking search su ers combinatorial explosion search space result ecient method solving csps 
major diculties encountered search algorithms thrashing caused local inconsistencies discovered mac 
local inconsistencies single values combinations values variables participate solution satisfy consistency property 
example value variable incompatible values variable constrained inconsistent respect local property arc consistency enforce local consistency property delete values inconsistent respect mean values participate solution deleted 
may values consistent respect inconsistent respect local consistency hand global consistency means values participate solution deleted 
explicit constraints csp combined induce implicit constraints cause local inconsistencies 
search algorithm record implicit constraints repeatedly rediscover local inconsistencies caused waste search ort repeatedly trying instantiations tried 
consider example 
example problem variables having domains respectively 
constraints problem assuming backtracking search tries instantiate variables order try possible combinations values variables discovering solution 
look constraint see combination values variables satis es constraint 
algorithm identify local inconsistency earlier avoid thrashing save search ort 
various local consistency ltering techniques proposed ways improving eciency search algorithms 
techniques delete inconsistent values variables induce implicit constraints help prune search space 
local consistency techniques preprocessing step detect remove local inconsistencies search begins search prune search tree 
section de ne various local consistencies proposed csp literature 
section discuss algorithms achieve local consistencies 
note de nitions arc consistency local consistency properties de ned 
refer binary csps stated 
reason local consistencies non binary problems widely studied formally de ned applied 
demonstrate chapters important contributions studying eciency local consistency techniques non binary csps 
simplest local consistency referred node consistency 
enforcing consistency ensures values variable satisfy unary constraints variable 
example consider variable problem domain unary constraint 
node consistency remove values domain original domain node consistent domain freuder de ned generic notion consistency called consistency fre 
problem consistent solution subproblem variables extended solution including additional variables 
forms consistency viewed specializations consistency 
get consistency fre 
problem strongly consistent consistent strongly consistent problem variables called globally consistent 
worst case time space complexities enforcing consistencies exponential furthermore enforcing consistency changes structure constraint graph adding new non unary constraints 
facts consistencies impractical large 
fact far arcconsistency consistency widely practice 
gives formal de nitions local consistencies discuss detail 
de nitions de nitions local consistencies db 
ary csp consistent consistent instantiation variables extended consistent instantiation involving additional variables 
binary csp arc consistent arc consistent 
domain arc consistent ij support ij binary csp path consistent path consistent 
pair variables path consistent ij support ik support jk binary csp strong path consistent consistent 
binary csp path inverse consistent support ij support ik support jk binary csp neighbourhood inverse consistent extended consistent instantiation neighbourhood binary csp restricted path consistent unique support ik jk support ik support jk binary csp singleton arc consistent dx fag arc consistent sub domain 
dx fag denote csp obtained restricting fag csp ary csp generalized arc consistent generalized arc consistent 
domain generalized arc consistent exists tuple fb cg allowed support formal de nitions various local consistencies 
arc consistency widely local consistency arc consistency ac mac 
binary problem arc consistent pair constrained variables value value assignments satisfy constraint value domain variable arc consistent safely removed part solution 
domain variable arc consistent values arc consistent 
arc consistency equivalent consistency 
arc consistency processing important csp solving past years heart constraint programming languages 
algorithms achieve arc consistency algorithms achieve local consistencies discussed section 
example consider constraint domain 
problem arc consistent 
domain remove values 
reduces domain 
domain arc consistent remove values reduces domain 
original domains arc consistent arc consistent path consistency path consistency pc mon stronger local consistency arcconsistency 
path consistency requires pair values variables assignments satisfy constraint exists value variable path constraints path satis ed 
montanari showed csp path consistent paths length mon 
equivalent consistency 
path consistent problem node consistent arc consistent strongly path consistent 
path consistency widely csp solving high time space complexity fact modify constraint graph adding new binary constraints 
important consistency csps special properties temporal csps dmp 
example consider problem variables domain constraints constraint graph value variable support adjacent variable 
path consistency induce binary constraint original problem path consistent problem restricted path consistency path consistency practical due problems mentioned proposed restricted path consistency ber consistency removes inconsistent values arc consistency time su er drawbacks path consistency 
restricted path consistency arc consistency addition checks pairs values variables respectively support ij path consistent 
value removed deletion path inconsistent pair lose supporting values ij additional deletions values restricted stronger arc consistency sense deletes values cheaper path consistency alter structure constraint graph 
example consider problem variables domains respectively constraints problem arc consistent restricted path consistent 
value supported value variables pairs values path consistent extended consistent instantiation third variable 
restricted path consistency remove domain similar reasons value removed bessi ere extended notion restricted path consistency path consistency rpc db 
restricted looks path consistent support constraint values supports constraint 
de nition restricted path consistency restricted path consistency arc consistency restricted path consistency 
bessi ere introduced notion max restricted max rpc db 
constraint graph max restricted path consistent values path consistent support constraint number supports 
enforce max restricted delete restricted path inconsistent values singleton consistencies bessi ere introduced singleton consistencies new promising class consistencies db 
consistencies value variable consistent csp obtained assigning consistent 
denote fag csp obtained restricting fag csp value variable singleton consistency examine consistent applying local consistency fag fag inconsistent removed domain example singleton consistency singleton arc consistency sac db 
check value variable singleton arc consistent assign temporarily apply arc consistency algorithm new problem obtained 
domain detected singleton arc inconsistent removed arc consistency algorithm lazy approach sucient db see chapter details 
example consider problem example 
singleton arc consistency processing look inconsistent values instantiating variables values enforcing arc consistency resulting problem checking domain 
values variable singleton arc consistent instantiated resulting problem consistent 
picture demonstrates assignment arc consistency remove domains supporting value resulting inconsistent problem 
singleton arc consistency remove values domain inconsistent problem inal singleton arc consistent problem singleton consistencies local consistency check consistency csp 
example singleton path consistency singleton restricted path consistency 
chapter extend de nition singleton arc consistency ary csps investigate applicability singleton consistencies empirically 
inverse consistencies idea inverse consistency introduced freuder fe 
inverse consistency removes values variables consistent consistent instantiation set additional variables 
inverse consistencies de ned terms consistency 
inverse consistency 
consistencies path consistency identify record combinations values variables consistent value additional variable 
add non unary constraints problem 
results high space requirements prohibitive 
advantage inverse consistencies delete values variables adding non unary constraints save space 
simplest inverse consistency path inverse consistency pic fe equivalent consistency 
de nition path inverse consistency value variable path inverse consistent consistently extended tuples variables including db showed necessary check condition values order achieve path inverse consistency 
db shown csp path inverse consistent arc consistent value clique variables assignment extended consistent instantiation 
freuder introduced concept neighbourhood inverse consistency nic fe 
de nition csp neighbourhood inverse consistent value variable nd solution subproblem induced neighbourhood consistent idea neighbourhood inverse consistency adapt level inverse consistency number constraints variables involved 
may useful cases variables uniformly constrained result worthwhile focus ltering heavily constrained variables 
example consider problem variables domains respectively 
constraint graph path inverse consistent extend value variable consistent instantiation cliques include constraint graph inverse consistent 
select value nd solution neighbourhood variables consistent assignment 
true value neighbourhood inverse consistency remove domain wiped inconsistency detected 
arc inverse consistency equivalent consistency arc consistency 
inverse local consistencies introduced 
generic framework implementing inverse consistencies described 
framework allows de nition arbitrary number inverse consistencies generalization inverse consistencies ary constraints 
examples new inverse consistencies introduced length neighbourhood inverse consistency neighbourhood inverse consistency 
generalization neighbourhood inverse consistency considers variable sub graph variables constrained path length equal restriction neighbourhood inverse consistency considers subsets variables neighbourhood variable number equal generalized arc consistency de nition arc consistency extended ary csps 
consistency usually referred generalized arc consistency gac mm 
ary csp generalized arc consistent variable involved ary constraint values domain supporting tuple constraint 
example consider non binary constraint domains variables respectively 
constraint requires sum variables 
value supporting tuple constraint tuple allowed generalized arc consistency remove domain remainder thesis referring arc consistency mean arc consistency binary constraints 
case ary csps term generalized arc consistency 
clarify literature term arc consistency binary ary constraints 
relational consistencies vbd introduced new stronger de nitions arc path consistency nary csps called relational arc path consistency respectively 
relational arcconsistency enforced time polynomial arity constraints enforcing relational path consistency np complete general vbd 
relation constraint subset variables involved constraint relationally arc consistent consistent instantiation variables extended nal variable way satis es csp relationally arc consistent constraints csp relationally 
constraints relationally path consistent variable consistent instantiation variables fxg extended include simultaneously satis ed 
csp relationally path consistent pair relations relationally 
new de nitions special cases ary csps globally consistent identi ed 
addition new de nition directional relational path consistency guarantees special cases ary csps produce backtrack free solution 
bound consistency computing arc consistency stronger local consistencies expensive domains variables problem large 
arc consistency de ned problems continuous domains values real numbers oating point numbers 
bound consistency approximation arc consistency requires checking arc consistency lower upper bounds domain variable lve 
bound consistency generic notion applied csps arity 
de nition csp bound consistent 
domain fa bound consistent generalized arc consistent respect name bound consistency literature interval consistency 
bound consistency constraint programming toolkits ilog solver cheap alternative arc consistency constraint logic programming systems deal continuous domains 
example shows bound consistency weaker arc consistency 
example consider problem variables domains respectively constraint problem bound consistent values arc consistent 
problem arc consistent value arc consistent 
value domain satis es constraint 
constraint propagation algorithms discussed previous section levels local consistency arcconsistency path consistency proposed 
algorithms achieve levels consistency remove inconsistent variable value pairs nodes search tree participate solution 
algorithms usually called constraint propagation algorithms ltering algorithms 
applying constraint propagation algorithms guarantee remaining pairs part solution shown practice useful preprocessing step reduce size csps search prune search space 
constraint propagation algorithms widely studied ways tackling binary ary csps 
section review previous constraint propagation algorithms 
start discussing various algorithms proposed achieving arc consistency binary csps 
review algorithms achieve generalized arc consistency problems arbitrary ary constraints 
discuss ltering algorithms specialized ary constraints ecient generic ones 
focus generalized arc consistency algorithm di erent constraints play important role empirical study chapters 
summarize results compare pruning eciency various local consistency algorithms 
note describing detail local consistency algorithms generalized arc consistency singleton arc consistency algorithms outside scope thesis 
interested levels consistency achieved algorithms actual details 
arc consistency algorithms binary csps constraint propagation algorithms focused arc consistency achieving arc consistency cheap way removing values belong solution 
shown arc consistency algorithms ective applied preprocessing technique dm maintained search sf br 
number algorithms proposed literature achieve arc consistency graph binary constraints 
mackworth describes basic algorithms ac ac ac mac 
worst case time complexity ac best ed size largest domain total number constraints graph mf 
space complexity ac nd number variables 
mohr henderson introduced ac mh optimal worst case complexity ed exhibits worse behaviour ac 
space complexity ac ed 
ac algorithms proposed improve time complexity ac ed speci types constraints reduce ac ac general case :10.1.1.29.597
bessi ere cordier developed ac improves average case behaviour ac retaining worst case complexity ac bc bes 
bessi ere proposed ac improved version ac 
bessi ere freuder introduced algorithm uses metaknowledge reduce number constraint checks ac general purpose arc consistency algorithm implements idea bfr 
careful implementation ac results space complexity ed 
note gaschnig proposed arc consistency algorithm gas similar ideas ac 
general arc consistency algorithms arc revision oriented support maintenance oriented 
ac gaschnig algorithm arc revision oriented sense try establish arc consistency looking arcs algorithms singleton arc consistency described chapter 
graph removing values arc inconsistent 
ac ac ac ac hand support maintenance oriented looking arcs data structures maintain update sets supports value 
values support constraint deleted 
way redundant consistency checks avoided 
generalized arc consistency algorithms algorithms achieve generalized arc consistency ary csps 
mac proposed algorithm cn generalization ac non binary constraints 
worst case time complexity ek maximal arity constraints 
mm proposed algorithm gac generalization ac non binary constraints 
ac idea computing number supports value domain removing zero support 
worst case time complexity gac ed better cn hand gac bad space complexity lists supported values maintained 
bad complexities cn applied ternary constraints small domains gac tight constraints 
practice algorithms rarely 
bessi ere proposed general algorithm called gac schema implementation arc consistency constraints arbitrary arity br 
algorithm allows ecient handling compared cn gac ary constraints described di erent ways extension set allowed forbidden tuples conjunctive constraint arithmetic relation predicate particular semantics known 
gac schema ac algorithm binary constraints 
way similar ac gac schema maintains updates data structures information supporting tuples value variable kept 
value left supporting tuples removed domain variable belongs 
deletion value variable propagated constraint involves deletion means tuple includes assignment longer valid 
try nd supporting tuple value variable involved constraint supported tuple included assignment 
worst case time complexity gac schema ed gives gain compared cn 
addition cases constraints appear times involving di erent variables gac schema improves space complexity gac considerably 
authors devised improved version gac schema br 
new version related ary constraints csp grouped form subproblems 
subproblem large constraint consisting conjunction smaller constraints 
reasoning making relevant subproblems generalized arc consistent independently may enhance process making problem generalized arc consistent 
case problem characteristics constraints grouped allow compute generalized arc consistency faster doing separately constraint 
br explains nding solution subproblem equivalent computing generalized arc consistent tuple large constraint corresponds subproblem 
nd supporting tuple value variable subproblem br searches solution problem derived instantiated search done search algorithm precise mac solution supporting tuple process done time support value subproblem 
specialized filtering algorithms specialized ltering algorithms proposed literature 
algorithms usually achieve generalized arc consistency ary constraints special properties low cost compared cost generic algorithm 
kinds ltering algorithms proposed 
example algorithms achieve bound consistency various constraints 
reviewing specialized ltering algorithms exist scope thesis limit commonly focus generalized arc consistency algorithm di erent constraint 
arc consistency achieved lower worst case time complexity speci classes constraints 
ac algorithm parameterized speci ed procedures instantiated reduce ac ac binary constraints :10.1.1.29.597:10.1.1.29.597
addition ac instantiated produce ed worst case time complexity arc consistency algorithm number important classes constraints 
functional anti functional monotonic respective generalizations piecewise constraints 
specialized ltering algorithms ary constraints proposed generalized arc consistency algorithms di erent constraints cumulative constraints bc global cardinality constraints global sequencing constraints rp symmetric di erent constraints cycle see section description mac algorithm 
constraints bc 
specialized ltering algorithms developed eld scheduling 
nuijten aarts describe arc consistency algorithms constraints job shop scheduling problems na 
family algorithms known edge nding algorithms developed various versions job shop scheduling problem cp blp algorithms achieve pruning arc consistency shown useful practice 
discussing constraints algorithms detail scope thesis brief look global cardinality constraint interesting di erent constraint specialization global cardinality constraint 
described ecient way implementing generalized arcconsistency global cardinality constraints 
global cardinality constraint gcc set variables fx take values set fa constraints number times value assigned variable interval 
constraints useful real world problems scheduling timetabling 
di erent constraints specialization gcc constraints interval value 
presents algorithm new theorem ow theory achieves generalized arc consistency sets global cardinality constraints ecient way 
di erent constraint specialized algorithm achieves generalized arcconsistency di erent constraints eciently 
explained chapter constraint called di erent constraint constraint di erence de ned subset variables set tuples values occuring tuple di erent 
constraints represented ary constraints dealt generalized arc consistency algorithms described previous section 
algorithm matching theory ecient 
space time complexities di erent constraint arity variable domain size kd respectively 
introduced condition matching theory ensure generalized arc consistency csps di erent constraints 
implementation ecient algorithm achieves condition 
specialized arc consistency algorithm low complexity symmetric erent constraints 
symmetric erent constraint di erent constraint plus fact group variables pairs variable takes value variable take value explained constraint express matches teams persons sports scheduling permutation problems general 
theoretical comparison local consistencies section described various local consistencies proposed literature 
algorithms achieve consistencies compared respect pruning eciency number values delete placed partial hierarchy 
brie review pruning eciency relations various local consistencies 
db call local consistency stronger local consistency csp holds holds 
words stronger algorithm achieving property deletes values algorithm achieving property deletes 
local consistency strictly stronger consistency stronger csp holds 
local consistency incomparable local consistency stronger vice versa 
call local consistency equivalent local consistency implies vice versa 
freuder introduced inverse consistencies showed path inverse consistency neighbourhood inverse consistency imply arcconsistency fe 
algorithm achieves inverse consistencies delete arc inconsistent values 
bessi ere extensive analysis comparison various local consistencies binary csps db 
proved various theoretical relations regarding pruning eciency local consistencies able partially order hierarchy 
taken db summarizes relations various local consistencies respect pruning eciency 
yh hj xxxxxxxx xz strong pc nic max rpc pic rpc rpc sac ac xxxxxxxx xz relations local consistencies 
way thick directed arc form means consistency strictly stronger consistency way thin arc connecting consistencies means incomparable 
algorithm time complexity space complexity ac mac ed nd ac mh ed ed ac ed ed ac bc ed ed ac bfr ed ed rpc db en ed cd ed cd max rpc db en ed cd ed cd pc sin pc cj pic fe en pic deb en ed cd ed cd nic fe ed sac db en ed cn gac mac ek ek nd gac mm ed ed nd gac schema br ed ek table worst case time space complexities ecient algorithms various local consistencies :10.1.1.29.597:10.1.1.29.597
number variables number constraints graph size largest domain number cliques graph maximum degree variable arity constraints 
pruning eciency local consistency important tell preferable consistency 
example despite low pruning eciency arc consistency compared stronger local consistencies commonly consistency 
reason arc consistency algorithms lower complexity compared algorithms achieve higher levels consistency 
table give worst case time space complexities ecient algorithms achieving various local consistencies 
details algorithms referenced papers 
applicability local consistencies higher arc consistency widely studied empirically 
fe experimental evaluation inverse consistencies preprocessing carried randomly generated problems 
results showed preprocessing neighbourhood inverse consistency cases ecient preprocessing arc consistency 
penalty enforcing neighbourhood inverse consistency compared arc consistency larger number values neighbourhood inverse consistency deletes 
db experimental comparison various local consistencies preprocessing randomly generated problems concludes local consistencies promising large problems 
restricted max restricted path consistency promising ones best trade pruning eciency cpu times 
local consistencies singleton arc consistency neighbourhood inverse consistency performed certain problems expensive general 
sets experiments su ered limitations 
experiments carried random problems 
second local consistencies tested preprocessing eciency ectiveness search 
third consistencies restricted versions binary constraints 
chapter thesis contribute evaluation applicability local consistencies higher arc consistency 
study eciency singleton arcconsistency generalization ary constraints benchmark domains 
systematic search algorithms backtracking search basis systematic algorithms solving csps 
algorithms search space possible assignments values variables guaranteed nd solution exists prove problem insoluble 
known complete algorithms 
incomplete algorithms guaranteed nd solution widely constraint satisfaction optimization problems 
algorithms include genetic algorithms simulated annealing tabu search neighbourhood search 
number quasi complete discrepancy algorithms proposed 
thesis interested complete search algorithms consider incomplete quasi complete ones 
complete search algorithms developed binary csps 
include chronological backtracking backjumping gas con ict directed backjumping pro dynamic backtracking gin backmarking gas learning fd forward checking minimal forward checking dm hybrid algorithms forward checking con ict directed backjumping pro maintaining arc consistency mac gas sf 
algorithms extended ary csps 
example various extensions forward checking ary problems vh 
mac extended algorithm maintains generalized arc consistency constraints arbitrary arity 
section discuss common search algorithms 
discussing algorithm rst brie describe proposed binary problems describe generalization proposed 
chronological backtracking basic systematic search algorithm solving csps chronological backtracking bt 
assuming static order variables values variables algorithm works follows 
selects variable variable ordering assigns value 
variable assignment checked constraints involve current variable past variables 
assuming dealing binary csp process straightforward variables involved constraint current past assigned value 
constraints satis ed chronological backtracking selects variable tries nd value way 
constraint satis ed current assignment undone value current variable tried 
consistent value dead algorithm backtracks previously assigned variable tries assign new value 
assuming looking solution chronological backtracking terminates variables assigned value case returns solution variable value combinations tried failed case solution exists 
easy see chronological generalized constraints arbitrary arity 
value current variable tried algorithm check constraints involve current variable past variables 
constraint involves current variable variable checked variables constraint assigned 
example constraints current variable chronological backtracking check rst constraint wait try instantiate check second constraint 
chronological backtracking simple algorithm inecient 
problem local view problem 
checks constraints current past variables ignores relation current variables 
chronological backtracking naive sense remember previous actions result repeat actions times needlessly 
help problems enhanced search algorithms developed 
generally divided look back look ahead algorithms 
look back algorithms look back algorithms try exploit information problem behave eciently dead situations 
chronological backtracking look back algorithms perform consistency checks backwards 
current variable past variables 
rst say words common look back algorithms binary csps discuss generalizations ary case proposed 
look back algorithms binary constraints backjumping bj gas algorithm similar chronological backtracking behaves intelligent way dead encountered 
backtracking previous variable bj deepest past variable con ict current variable say instantiated variable con ict variable instantiation precludes values constraint 
changing instantiation may possible nd consistent instantiation current variable 
way bj avoids redundant bt done trying reassign variables current unnecessary variables play part dead 
variable bj need record deepest past variable con ict 
con ict directed backjumping cbj pro displays sophisticated backjumping behaviour bj 
variable con ict set set past variables con ict consistency check current variable past variable fails variable added con ict set dead situation cbj deepest variable con ict set closest root search tree say variable time con ict set added information con icts lost 
consistent instantiation cbj may similar situation bj backtrack variable preceding obviously cbj needs complicated data structures record con ict sets 
backmarking bm gas works similar way chronological backtracking di erence marking scheme bm employs 
marking scheme usually saves redundant consistency checks ect way search tree explored 
instantiations variables changed time checked bm avoids repeating check 
achieved marking information bm keeps special data structures 
bm saves consistency checks marking subsequently avoiding repeat redundant checks 
hand bj cbj save consistency checks skipping search tree nodes 
bm combined bj cbj give hybrid algorithms kinds savings 
prosser proposed algorithms backmarking backjumping backmarking con ict directed backjumping bmcbj pro 
van beek enhanced versions prosser algorithms called bm cbj 
learning dec fd method records implicit constraints derived search uses prune search space 
example dead encountered variable know tuple assignments leads dead 
learn new constraint disallows combination assignments variables constraint explicit save search ort state revisited 
smaller subsets assignments inside constraint con ict explicit constraints 
may result search ort savings 
learning trade savings search ort ort space time needed handle extra constraints introduced 
note learning introduce constraints arbitrary arity 
increase amount checking done 
generalizations ary constraints look back algorithms particular cbj learning solve csps ary constraints 
mentioned learning nature de ned technique constraints arity 
cbj originally de ned binary constraints extended ary case 
fd introduced variations learning evaluated empirically ectiveness solving csps 
fd experimented di erent methods learning new constraints dead ends occur con ict sets identi ed 
contrast dec experiments limited recording unary binary constraints enhanced record constraints higher arity 
instances initially binary csps non binary constraints involving variables added learning 
algorithm solve problems cbj description implementation way ary constraints handled 
gent underwood gu general de nition implementation cbj constraints arbitrary arity 
give proof correctness general form search algorithm describe instantiated implement cbj di erent problem classes unifying framework separates search algorithm speci problem features 
framework enables implementation hybrid algorithms fc cbj mac cbj di erent problem classes 
framework gu task potential user cbj fc cbj mac cbj faced provide specialized functions identify return con ict sets class problems investigating 
may complicated task cases ary csps features problem may vary considerably 
task especially dicult interested identifying optimal con ict set 
con ict set produces best possible point 
ginsberg gin gives general de nition cbj csps arbitrary arity 
di erence de nition gu gin ginsberg de nition refers extensional representation ary constraints tuples allowed values gu refers intensional functional de nition 
gin de nes new look back algorithm called dynamic backtracking retains information exploits save additional search ort 
bayardo schrag bs describe cbj learning schemes incorporated davis putnam dp procedure boolean satis ability problems sat viewed ary constraint satisfaction problem 
tested enhanced algorithms sat encoded planning circuit diagnosis scheduling circuit synthesis instances 
experimental results show enhanced versions dp comparable instances superior state art stochastic algorithms wsat 
forward checking explained look back algorithms try enhance performance bt behaving intelligently dead ends encountered 
perform backward consistency checks ignore variables 
gin cbj referred backjumping con ict directed backjumping commonly known pro 
look ahead algorithms forward checks step search 
check inconsistencies involve variables current past variables 
way dead ends may identi ed sooner inconsistent values discovered pruned variables 
forward checking binary constraints forward checking fc common look ahead algorithms 
step search fc forward checks current assignment values variables constrained current variable 
values variables inconsistent current assignment temporarily removed domains 
domain variable empty instantiation current variable undone new value tried 
value consistent chronological backtracking takes place 
fc guarantees step current partial solution consistent value variable 
value assigned variable forward checks variables required 
checking forward fc identify dead ends prune search space sooner 
process forward checking viewed applying single pass arc consistency constraint involving current variable variable variable assignment 
forward checking combined look back algorithms produce hybrid algorithms pro 
example forward checking con ict directed backjumping fc cbj pro hybrid algorithm combines forward move fc backward move cbj way retains advantages algorithms 
example forward checking backmarking fc bm combines fc bm pro 
minimal forward checking lazy forward checking mfc dm version fc delays performing consistency checks fc absolutely necessary 
forward checking current assignment values variables mfc just checks current assignment causes domain 
check current assignment values variable consistent 
algorithm backtracked goes back performs missing checks 
clearly mfc performs number checks fc 
experimental results shown gains dm bg 
new versions forward checking proposed bacchus bac 
version idea developing domain pruning restoring mechanism prunes values current level search arbitrary level 
bacchus rst describes generic template implementing various versions forward checking describes instantiations template give new forward checking algorithms rst algorithms extended forward checking efc efc ability prune values back current level 
forward checking current level search efc efc may discover values inconsistent assignments current assignment discovered 
bacchus points algorithm efc identical prosser fc bm algorithm pro 
algorithms con ict forward checking idea con icts known cbj learning enhance fc 
record con ict sets prune values back past levels search 
di erence cbj con ict sets maintained value variable basis 
value variable con ict set 
allows larger cbj 
generalizations ary constraints forward checking generalized van hentenryck straightforward way handle ary constraints vh 
de nition vh forward checking performed variables ary constraint instantiated remaining variable uninstantiated 
cases ary constraint called forward checkable 
de nition means current variable assignment causes constraint forward checkable assignment variables involved constraint forward checked remaining variable 
remaining variable su ers domain wipe fc backtracks 
forward checking sat problems obvious application de nition fc demonstrated :10.1.1.110.7551
stronger generalizations forward checking ary constraints introduced 
generalizations di er extent look ahead perform variable instantiation 
algorithm nfc applies pass arc consistency constraint constraint projection involving current variable exactly variable 
algorithm nfc applies generalized arc consistency constraint involving current variable variable pass 
algorithm nfc tries set constraints involving current variable variable generalized arc consistent 
algorithm nfc applies generalized arc consistency bacchus admits proposed algorithms new viewed new uniform way 
constraint involving past variable variable pass 
algorithm nfc tries set constraints involving past variable variable generalized arc consistency 
generalizations reduce simple fc applied binary constraints 
empirical evaluation various forward checking algorithms random ternary csps 
particular problems studied algorithm nfc best choice 
bac proposed forward checking algorithms described binary versions bacchus mentions generalized case nary constraints combined nfc nfc algorithms 
details 
maintaining arc consistency maintaining arc consistency mac gas sf popular algorithm looking ahead instantiation value deletion 
variable assignment tried mac applies arc consistency subproblem consisting variables 
means addition fc mac checks variables 
domain variable empty tried instantiation current variable undone tried value deleted domain current variable arc consistency enforced 
new value current variable tried 
value current variable consistent fc chronological backtracking takes place 
extra mac applying arc consistency may delete values variables result search space pruning fc 
versions mac depending arc consistency algorithm 
example mac maintains arc consistency ac algorithm mac uses ac algorithm 
mac fc combined look back algorithms give hybrids 
example mac cbj pro maintains arc consistency moving forward uses con ict sets cbj moving backwards 
bac extensions fc proposed extension mac called con ict mac 
uses value con ict sets pruning achieve larger 
mac generalized algorithm maintains generalized arcconsistency mgac 
usually generalized arc consistency maintained constraints specialized ltering algorithm low complexity exists di erent cardinality constraints 
example puget solved vehicle routing problems included sequencing constraints specialized generalized arc consistency algorithm constraints rp 
studies mgac versions arbitrary ary constraints 
vbc reports experiments planning problems mgac algorithm complemented con ict directed backjumping details implementation algorithm 
short description mgac gac implemented ac schema 
domain variable altered constraints involve variable added queue popped generalized arc consistent 
bac reports experiments blocks grid world planning problems golomb rulers problems ary version algorithm 
results compared plain mgac mgac cbj details generalization implemented 
chapters extensive experimental studies usefulness mgac 
chapter consider problems decomposable di erent constraints discussed exists specialized generalized arc consistency algorithm due 
chapter investigate ectiveness mgac problems generic generalized arc consistency algorithm due lack specialized 
theoretical comparison search algorithms local consistencies search algorithms evaluated ordered theoretically 
analyzed average case complexities various backtracking algorithms ordered criterion 
van beek rst extensive theoretical analysis search algorithms binary csps able partially order common number search tree nodes visit number consistency checks perform 
figures summarize results 
shows partial hierarchy algorithms nodes visit shows partial hierarchy consistency checks perform 
assume algorithms choose variable instantiate value try variable order 
say algorithm dominates algorithm visits node visits equivalent node search tree strictly dominates dominates problem visits fewer nodes 
exists problem visits fewer nodes bt bm bj cbj bm cbj bm cbj fc fc cbj partial hierarchy visited nodes 
bm cbj bm cbj bm cbj bj bt fc fc cbj partial hierarchy consistency checks performed 
problem visits fewer nodes incomparable 
gures algorithm higher hierarchy algorithm strictly dominated algorithms connected line incomparable 
bacchus grove carried proved various theoretical results regarding forward checking algorithm bg 
showed fc performs nd times consistency checks bt bj bm number variables maximum domain size problems bt bj bm perform exponential amount consistency checks fc 
proved bm visits exactly nodes fc assuming bm provided method detects domain variables 
method bm equivalent jumping algorithm prosser pro 
bac mentioned binary versions forward checking algorithms efc efc strictly dominated mac visited nodes 
bacchus mentions may case ary versions algorithms compared mgac details formal proofs 
mentioned algorithm ability identify delete values inverse inconsistent arbitrary explained algorithm incomparable algorithm maintains inverse consistency walsh study comparison ways encode csps propositional satis ability problems sat vice versa wal 
study compared algorithms maintain arc consistency various csp encodings sat problems unit propagation sat 
interestingly encodings sat csp produces problems non binary constraints 
walsh proved nfc algorithm applied non binary encoding sat problem equivalent terms visited nodes known davis putnam procedure applied original sat problem 
nfc algorithm stronger algorithms strictly dominates davis putnam procedure 
results assumption equivalent branching heuristic csp sat encodings 
knowledge extended theoretical studies search algorithms ary constraints 
bessi ere meseguer freuder introduced various generalizations forward checking ary constraints evaluated ordered introduced algorithms search tree nodes visit 
summarizes results 
nfc nfc nfc nfc nfc nfc partial generalized forward checking algorithms nodes visit 
algorithm higher hierarchy algorithm strictly dominated algorithms connected line incomparable 
koubarakis performed theoretical analysis various search algorithms non binary disjunctive temporal csp sk sk 
results similar results binary csps 
chapter continue van beek theoretical study search algorithms considering algorithms achieve higher levels consistency forward checking 
heuristics variable value ordering heuristics play important role csp solving drawn lot attention mainly binary problems 
attention variable value ordering heuristics ary csps 
try review best known general heuristics binary csps suggest translation case ary csps translation possible 
variable ordering order variables assigned search may signi cant impact size search space explored 
substantial amount carried static dynamic variable ordering heuristics binary csps 
static variable ordering heuristics place xed ordering variables prior search global information derived initial constraint graph 
dynamic variable ordering heuristics may change ordering variables dynamically local information available search 
focus binary csps cases heuristics de ned general case ary csps easily extended ary case 
generally variable ordering heuristics try select early variables constrain variables 
intuition try assign highly constrained variables early possible way identify dead ends sooner reduce number backtracks 
try review state art research variable ordering heuristics csps 
note big number problem speci heuristics developed real world theoretical problems formulated csps job shop scheduling graph colouring sat number partitioning car sequencing restrict attention possible general variable ordering heuristics 
static ordering heuristics static variable ordering heuristics proposed 
heuristics global information derived topology original constraint graph representing csp 
minimum width mw heuristic fre rst imposes total ordering variables ordering minimum width selects variables ordering 
width variable number variables ordering adjacent width ordering maximum width variables ordering 
width constraint graph minimum width possible orderings 
width constraint graph calculated variables ordered rst decreasing width 
means variables front ordering constrained ones variables back constrained 
assigning constrained variables rst dead ends identi ed sooner number backtracks reduced 
mw heuristic case ary csps width constraint graph representing ary csp measured exploited order variables 
heuristic useful especially csps degree nodes constraint graph varies signi cantly 
maximum degree md heuristic dm orders variables decreasing order degree constraint graph 
degree node de ned number nodes adjacent 
heuristic aims nding minimum width ordering guarantee 
minimum bandwidth mb heuristic sax zab gives total ordering variables ordering minimum bandwidth 
bandwidth variable ordering maximum distance variable adjacent distance variables number variables ordering 
bandwidth ordering maximum bandwidth variables ordering 
bandwidth graph minimum ordering orderings graph 
idea mb heuristic closer variables involved constraint placed backtracking required case dead 
mb heuristic may useful sparse csps node high degree general fewer edges constraint graph smaller bandwidth 
mb heuristic general heuristic csps arbitrary arity far binary csps 
serious drawback mb heuristic computing minimum bandwidth np complete problem 
maximum cardinality heuristic mc pur tar selects rst variable arbitrarily stage selects variable adjacent largest set selected variables 
mc heuristic generalized ary csps straightforward way 
proposed theory heuristic orders variables prior search number expected nodes 
heuristic selects variable variable fx results minimum number expected nodes level ties broken selecting variable results minimum number nodes level choice variable tie broken technique level 
expected number nodes level search tree derived theoretical analysis 
dm static ordering heuristics compared randomly generated binary csps 
experimental results showed worse mrv simple dynamic ordering heuristic discussed subsection 
result demonstrated gmp 
dynamic ordering heuristics problem static orderings take account changes domains variables caused constraint propagation search tightness constraints 
usually related backward checking algorithms propagation takes place 
dynamic variable ordering heuristics tackle problem proposed 
common dynamic variable ordering heuristic fail rst ff principle suggests succeed rst try fail 
way dead ends identi ed sooner search ort saved 
ff principle stage select constrained variable 
ff heuristic known minimum remaining values mrv heuristic tries selecting variable smallest domain 
intuition fewer values variable dicult nd consistent value 
mrv conjunction backward checking algorithms equivalent static heuristic orders variables ascending domain size prior search 
mrv conjunction forward checking algorithms ordering dynamic values pruned variables variable assignment 
stage search variable assigned variable smallest domain 
mrv general variable ordering heuristic sense applied csps arbitrary arity 
fd tie breaking heuristic mrv maintains list variables sorted degree original constraint graph 
case tie highest variable list selected 
experiments showed heuristic performs better breaking ties random common practice applying mrv 
bre introduced variable ordering heuristic derived graph colouring 
graph colouring problem nding colouring nodes graph adjacent nodes di erent colours 
heuristic rst selects node variable maximum number di erently coloured nodes adjacent 
means selected variable minimum number available colours values terms csps corresponds mrv heuristic 
ties broken selecting variable maximum degree subgraph 
csps means select variable shares constraints maximum number variables maximum degree subproblem 
heuristic successfully problems involving binary csps tested ary csps far know 
cases ary csps constraints arity applied ties broken number ary constraints variable shares variables 
case variables involved single ary constraint heuristic applied number adjacent variables variables selected mrv 
proposed theory heuristics dynamic variable ordering 
rst heuristic selects variable minimizes number nodes level equivalent mrv heuristic 
ties broken global ordering provided static ordering heuristic 
second heuristic proposed tries minimize sum nodes levels 
levels calculate heuristic accurate heuristic ky introduced heuristic tries select constraining variable evaluating constraining values variable 
uninstantiated variable values evaluated respect number values variables disallow see section details 
evaluations combined produce estimation constraining constraining variable selected 
clear evaluations combined evaluation variable exactly way proposed ky 
gee proposed similar heuristic counting number supporting values variables value unassigned variable 
gee promise value product values support variables see section details 
variable ordering heuristic gee measures promise values unassigned variables selects variable sum promises values minimal 
heuristic tries minimize total number values assigned variables constraint selected variable violated 
side ect variable ordering heuristic arc consistency ensured stage search hand expensive heuristic calculate 
time complexity assignment value variable 
natural generalization heuristic ary csps 
section describe promises values calculated constraints ary 
promises calculated variable minimum sum promises selected binary case 
gmp proposed new heuristics variable ordering estimates constrained variable 
heuristic corresponds di erent measure ensemble problems 
measures de ned ensembles problems estimates individual problems 
new heuristics rho kappa 
rho heuristic branches subproblem maximizes solution density 
solution density ensemble problems average fraction assignments allowed constraints 
constraint disallows average fraction possible assignments fraction assignments allowed average solution density rho heuristic selects variable maximized subproblem created excluding constraints involving words try minimize solution density constraints involving means involved constraints respect variables involved tight constraints 
obviously rho estimate constrained variable 
second heuristic proposed gmp 
heuristic branches subproblem maximizes expected number solutions 
size state space times solution density 
domain size variable maximizing tends maximize subproblem size solution density 
idea select variable reduces expected number solutions 
estimate constrained variable 
third heuristic kappa heuristic rst suggested 
heuristic tries minimize general measure introduced 
derived size solution density inspired randomness bit solution vector set combinatorial problems 
problems kappa usually soluble problems kappa usually insoluble 
kappa heuristic selects variable results subproblem minimum 
kappa general heuristic de ned cases ary csps demonstrated gw 
performances new heuristics mrv compared random binary csps fc cbj 
results show heuristic dominates csps constraint graph sparse constraints uniform tightness 
csps dense constraint graphs non uniform constraint tightness kappa best choices 
constraints proposed gmp usually costly calculate 
various specialized heuristics developed speci ary csps 
reviewing heuristics scope thesis 
value ordering comparatively little done heuristics value ordering binary csps 
basic idea value ordering heuristics select value current variable succeed 
words try identify branch lead solution 
proposed heuristics try select constraining value current variable 
value reduces number useful values variables 
known value ordering heuristic min con icts heuristic 
case binary csps heuristic associates value current variable total number values domains adjacent variables incompatible values support 
value selected associated lowest sum 
generalization min con icts heuristic case ary csps straightforward 
value variable associated total number tuples incompatible constraints involved 
value lowest sum selected 
keng yun ky propose variation idea 
heuristic number incompatible values counted variable divided domain size gives percentage useful values lost value currently examining 
percentages added variables value results lowest sum selected 
gee proposed value ordering heuristic calls promise 
heuristic value variable count number values support adjacent variable take product counts 
product called promise value 
value maximum promise selected 
product sum supporting values promise heuristic tries select value leaves maximum number possible solutions assigned current variable 
promise value represents upper bound number di erent solutions may exist value assigned current variable 
promise heuristic generalized case ary csps way binary case measure support value domain variable select value maximum support 
value domain variable count number tuples compatible constraint involving constraints involving take product counts 
value maximum product selected 
fd proposed value ordering heuristic backjumping algorithms called sticking values 
heuristic remembers value variable assigned instantiated tries select value consistent time variable needs instantiated 
intuition value successful may better try rst try instantiate variable 
experiments randomly generated binary csps show sticking values heuristic ective problems small domain sizes integrated backjumping static variable ordering 
fd describes new dynamic value ordering heuristics inspired intuition subproblem solution doesn variables value 
rst heuristic called max domain size heuristic selects value current variable creates largest minimum domain size variables 
second heuristic called weighted max domain size enhancement rst 
speci es way breaking ties number variables domain size 
example value leaves variables domain size value leaves variables domain size selected 
third heuristic called point domain size assigns weight called point value value current variable depending number variables left certain domain sizes 
example variable left domain size value point values added weight value minimum weight selected rst 
heuristics ad hoc experiments fd show outperformed basic min con icts heuristic 
heuristic knowledge structure solutions 
idea rst solve set instances class problems studied value ordering examine solutions determine values domains variables appear solutions 
information values variables ordered statically subsequent attempts solve instances class problems 
technique considerable success solve qualitative temporal csps 
generally possible heuristic information structure solutions available case 
advise generation dp scheme value ordering idea modifying csp backtrack free problem solutions backtrack free problem guide search original csp 
heuristic dp selects value current variable way forward checking takes place eliminate values variables inconsistent current partial assignment 
problem relaxed backtrack free problem tree reached 
done deleting explicit constraints 
relaxed problem solved solutions generated 
advise generation procedure counts times values current variable participate solutions picks value highest count 
experimental results dp show advise generation costly heuristic improve performance search algorithms substantially 
modelling constraint satisfaction problems previous sections described ways improving csp solving eciency 
discussed local consistency techniques infer implicit constraints delete inconsistent values search algorithms identify dead ends sooner prune search space algorithms avoid repeated exploration large sections search space backjumping variable value ordering heuristics guide search promising sections search space 
important decision trying solve speci csp large impact eciency solving method 
decision choice model csp choice way formulate represent problem solved faster 
straightforward way model problem faced variety di erent problem formulations choose 
choice may dramatic ect search ort relatively simple problems 
consider example known queens problem 
problem nding way ways place queens chessboard queens attack 
queens row column diagonal board 
nadel performed case study csp modelling queens problem 
compared di erent formulations queens represent families formulations 
standard csp formulation queens problem represent rows board variable variable domain ng representing column queen placed 
assignment form means queen row column conditions queens attack expressed binary constraints form jx representation gives search space possible formulation assign variable column value row 
assign variable diagonals value indicating square corresponding diagonal queen example possible models queens problem consider model variables ij square board 
variable domain value indicates corresponding square empty value indicates queen square row column model gives search space larger rst model described 
changing representation csp alter size state space number variables size domains tightness constraints 
number studies comparing constraint programming models integer linear programming models various problems usually real world problems abstractions real world problems 
example smith extensive comparison various constraint programming integer linear programming models progressive party problem 
constraint programming proved better approach mainly compact way represents constraints problem ability constraint programming exploit variable ordering heuristics ect constraint propagation 
similar study time template design problem colour printing industry performed ps 
similar studies various problems packing set partitioning golf scheduling crew scheduling problems ddl 
modelling techniques developed help construct ecient csp models adding implied constraints symmetry breaking constraints csp pug gs ssw 
implied known redundant constraints implicit constraints alter set solutions problem may speed search explicitly added 
constraints try remove symmetries problem way speed search process 
symmetry situation solutions equivalent respect permutation rearrangement variables 
symmetries divide search space equivalence classes 
symmetry breaking constraints help restrict search member class way save redundant search ort 
proposed heuristic approach problem selecting model csp bor 
heuristics proposed theoretically evaluating expected cost solving various models problem 
theoretical evaluation done probabilistic model 
constraint programming systems importance constraint satisfaction problems real world applications resulted constraint programming languages systems developed years 
successfully various commercial research applications 
examples constraint programming systems ilog solver pug eclipse ecl chip vh oz smo clp fd cd chr fru claire cl 
systems mentioned vary way represent problems constraints amount interaction user allow syntax semantics features 
presenting overview constraint programming systems outside scope thesis 
interested reader comparative study fh 
brie discuss ilog solver system empirical studies chapters 
ilog solver library combines object oriented constraint logic programming 
solver variables constraints search algorithms objects 
allows easy declarative de nition csps 
solver includes prede ned ary constraints ltering algorithms 
example di erent constraint global cardinality constraints implementations arc consistency algorithms 
solver standard search algorithm chronological maintains bound consistency constraints problem 
constraints user select maintain arc consistency generalized arc consistency 
search strategies discrepancy search hg wal 
chapter overview research related thesis 
reviewed various local consistency techniques constraint propagation algorithms complete search algorithms heuristics variable value ordering 
brie discussed di erent ways modelling csps 
focus previous regarding non binary problems studied binary ones largest part literature far studies binary problems 
chapters detail 
chapter theoretical results chapter investigation decomposable ary constraints 
main objective chapter help establish theoretical relationship arc consistency binary decomposition generalized arc consistency ary representation decomposable constraints move compare empirically chapter 
compare theoretically algorithm maintains arc consistency binary decomposition decomposable constraints algorithm maintains generalized arc consistency ary representation 
presenting theoretical results algorithms maintain local consistencies 
results results sw gsw gsw help compare theoretically pruning eciency algorithms forward checking maintaining arc consistency applied binary decomposition decomposable constraints counterparts original ary representation 
completeness review results sw gsw gsw 
analyze compare worst case complexities forward checking arc consistency algorithms ary binary representations decomposable problems 
correct error regarding complexity arc consistency binary equals constraints :10.1.1.29.597:10.1.1.29.597:10.1.1.29.597
algorithms maintain local consistencies discussed chapter van beek theoretical analysis backtracking algorithms binary csps able partially order algorithms number visited nodes performed consistency checks 
analysis included algorithms enforce level consistency search high forward checking 
follows complement van beek analysis studying algorithms maintain levels local consistency higher forward checking 
type local consistencies interest domain ltering consistencies equal stronger arc consistency 
domain ltering consistency mean type consistency deduces unary constraints 
enforced removes values domains variables adding new non unary constraints 
examples domain ltering consistencies arc consistency singleton arc consistency inverse consistencies neighbourhood inverse consistency path inverse consistency 
prove necessary sucient conditions node visited algorithm maintains domain ltering consistency prove correctness algorithm place hierarchy search algorithms 
results section results sw gsw gsw review help prove algorithm maintains generalized arc consistency non binary representation set decomposable constraints visits nodes search tree algorithm maintains arc consistency binary decomposition 
holds assumption algorithms choose variable instantiate value try order 
preliminaries give necessary de nitions 
node search tree csp consistency property say node consistent 
example node csp arc consistent say node arc consistent 
algorithm maintains tries enforce property node search tree 
example mac tries enforce arc consistency constraint graph node tree 
node consistent causes domain wipe variable case say node consistent 
follows assume algorithm maintains property achieve higher level consistency de nition node called compatible node enforcing property remove domain variable assume looking solutions static ordering variables values 
assumptions simplify proofs theorems 
theorems section hold case looking rst solution variables ordered dynamically assuming variable ordering heuristic independent search algorithm 
independent mean choice variable instantiate depends current state search constraint graph partial solution 
heuristic selects variable state search 
example results hold mrv heuristic static lexicographic tie breaking hold random tie breaking 
theorems prove necessary sucient conditions search tree node visited algorithm maintains type domain ltering consistency equal stronger arc consistency level consistency enforced strong proofs theorems call algorithm maintains property maintaining ma 
theorem node visited algorithm maintains property node consistent compatible ancestors parent consistent 
proof theorem consists conjuncts 
start proving rst 
suppose node visited algorithm ma inconsistent 
inconsistency means pair values tuple incompatible 
loss generality consider ancestor inconsistent assignments tuple 
say ancestor node inconsistent 
ancestor visited 
algorithm ma node value removed domain node visited descendant 
contradicts assumption node visited 
node inconsistent visited algorithm ma 
node visited algorithm ma consistent 
prove second conjunct 
suppose node compatible ancestors visited algorithm ma 
ancestors 
ancestor visited 
algorithm ma visits node consistency enforced value pruned domain means node extended 
contradicts assumption node visited 
node incompatible ancestors visited algorithm ma 
node visited algorithm ma compatible ancestors 
prove third conjunct 
suppose node consistent child visited algorithm ma 
assume deepest ancestor consistent 
node exists initial problem consistent 
node ancestor node visited 
assumption deepest node consistent 
node consistent domain wipe variable 
discovered algorithm ma result branch abandoned descendants visited 
contradicts assumption node visited 
node parent consistent visited algorithm ma 
node visited algorithm ma parent node consistent 
theorem node consistent compatible ancestors parent node consistent algorithm maintains property visits node 
proof loss generality assume node node consistent child consistent compatible ancestors child visited algorithm ma 
consistent compatible ancestors value domain algorithm ma node annihilate domains variables node consistent 
means branch extended remaining values variable values node visited 
contradicts assumption node visited 
node consistent compatible ancestors parent consistent node visited algorithm ma 
nodes visited 
results rank algorithms maintain domain ltering consistencies hierarchy 
know domain ltering consistency property stronger domain ltering consistency property prove algorithm maintains dominates algorithm maintains assume level consistency enforced second algorithm strong corollary domain ltering consistency property strictly stronger domain ltering consistency property algorithm maintains consistency strictly dominates algorithm maintains consistency 
proof theorem know nodes visited algorithm maintains consistent compatible ancestors parents consistent 
theorem sucient condition node visited algorithm maintains node consistent compatible ancestors parent consistent 
subsumes second algorithm visit nodes consistent compatible ancestors parents consistent 
nodes visited rst algorithm visited second 
applying corollary see example mac strictly dominates fc algorithm maintains singleton arc consistency strictly dominates mac 
correctness algorithm maintains domain ltering consistency property proved theorems 
algorithm correct sound solutions claimed solutions complete solutions 
corollary algorithm maintains domain ltering consistency property stronger level consistency enforced fc correct 
proof soundness solution claimed algorithm ma node reached level theorem know node visited algorithm ma node consistent 
level nodes reached algorithm ma consistent 
completeness suppose level node consistent 
node consistent ancestors consistent 
loss generality consider deepest node visited parent visited 
node visited consistency enforced descendants consistent domain wipe 
know node visited 
contradicts assumption visited 
node visited algorithm ma claimed solution 
decomposable constraints section review theoretical results sw gsw gsw compare levels consistency achieved ary representation decomposable constraints levels consistency achieved binary decomposition 
theoretical results reviewed help reader understand contributions thesis 
important result context thesis generalized arc consistency ary representation achieves higher level consistency arc consistency binary decomposition 
shown example sw gsw gsw showed rst time exactly binary level consistency achieved generalized arc consistency ary representation 
main contributions chapter thesis general display practical importance achieving high levels consistency 
sw gsw gsw results level consistency achieved kinds algorithms forward checking algorithm various generalizations non binary constraints arc consistency generalization non binary constraints 
addition identify special cases non binary decomposable constraints weaker stronger conditions general case hold 
note theorems corollaries proofs due author thesis 
proofs referenced papers 
forward checking decomposable constraints gsw rst compared level consistency achieved forward checking decomposition levels consistency achieved various generalizations forward checking constraints ary representation 
lower bound performance forward checking applied binary decomposition rst identi ed 
theorem decomposable non binary constraint satisfaction problem forward checking algorithm fc binary decomposition strictly dominates generalized forward checking algorithm nfc 
gsw showed nfc applied non binary constraints explore exponentially branches fc binary decomposition 
holds wide variety variable orderings 
variable ordering instantiates variables unit domains called unit preference ordering 
proposition exists decomposable non binary constraint satisfaction problem variables forward checking algorithm fc applied binary decomposition explores branches generalized forward checking algorithm nfc explores branches value ordering unit preference variable ordering 
gsw gives simple upper bound performance forward checking binary decomposition 
theorem decomposable non binary constraint satisfaction problem generalized forward checking algorithm nfc strictly dominates forward checking algorithm fc binary decomposition 
proved fc binary decomposition nfc may explore exponentially branches algorithms nfc nfc 
holds variable value ordering heuristics 
theorem exists decomposable non binary constraint satisfaction problem variables nfc nfc algorithms explore just branches forward checking algorithm fc applied binary decomposition takes 
branches nfc algorithm explores branches 
results reviewed far summarized taken gsw 
incomparable nfc nfc fc nfc nfc nfc nfc strictly dominates performance forward checking algorithm fc binary decomposition set decomposable ary constraints compared various generalizations forward checking nfc nfc applied ary constraints 
arc consistency decomposable constraints sw gsw gsw investigate compare pruning eciency arc consistency binary decomposition generalized arc consistency ary representation decomposable constraints 
rst give lower bound level consistency achieved generalized arc consistency decomposable constraints respect binary decomposition 
theorem generalized arc consistency decomposable constraints strictly stronger arc consistency binary decomposition 
lower bound exact exists large class problems generalized arc consistency equivalent arc consistency binary decomposition 
problems tree decomposable constraints 
constraints constraint graph binary decomposition forms tree forest independent trees 
example non binary constraint list variables monotonically increasing tree decomposable set binary inequality constraints 
gsw proved tree decomposable constraints arc consistency binary decomposition equivalent generalized arc consistency ary representation 
decomposition tree means cycle generalized arc consistency stronger arc consistency decomposition 
corollary theorem corollary previous section corollary algorithm maintains generalized arc consistency nary representation set decomposable constraints strictly dominates algorithm maintains arc consistency binary decomposition 
proof trivial theorem corollary 
gsw gsw prove algorithm maintains arcconsistency decomposition may explore exponentially branches algorithm maintains generalized arc consistency ary representation 
proposition exists decomposable non binary constraint satisfaction problem variables algorithm maintains generalized arcconsistency solves search algorithm maintains arcconsistency binary decomposition explores 
branches variable ordering 
having established generalized arc consistency stronger arc consistency sw gsw gsw compared generalized arc consistency stronger levels consistency arc consistency binary decomposition 
showed general case neighbourhood inverse consistency binary decomposition levels consistency strong path consistency restricted path consistency incomparable generalized arc consistency 
theorem generalized arc consistency decomposable constraints incomparable neighbourhood inverse consistency strong path consistency singleton arc consistency path inverse consistency restricted path consistency binary decomposition 
sw gsw gsw argue general case dicult give strong upper bounds generalized arc consistency large ary constraints posted combining smaller constraints 
generalized arc consistency enforced achieve high levels consistency 
example generalized arc consistency ary constraint conjunction ary constraints achieves consistency constraint 
give strong upper bound generalized arc consistency non binary constraints decompose cliques binary constraints 
example di erent constraint decomposes clique binary equals constraints 
special case generalized arc consistency original non binary problem strictly weaker neighbourhood inverse consistency binary decomposition 
theorem non binary constraint decomposes clique binary constraints neighbourhood inverse consistency binary decomposition strictly stronger generalized arc consistency decomposable constraints 
results arc consistency generalized arc consistency reviewed far summarized taken gsw 
result gsw gsw algorithm maintains generalized arc consistency decomposable constraints strictly dominates strongest generalized forward checking algorithm nfc 
naturally means dominates algorithms nfc nfc forward checking algorithm fc applied binary decomposition 
algorithm maintains generalized arc consistency explore exponentially branches forward checking algorithm fc applied binary decomposition 
pic rpc ac strictly stronger sac strong pc incomparable gac nic consistency generalized arc consistency set decomposable non binary constraints compared various consistency techniques stronger equal arc consistency binary decomposition 
triangle preserving constraints sw proved generalized arc consistency ary representation signi cantly stronger arc consistency binary decomposition speci class decomposable constraints 
class triangle preserving constraints sw 
set decomposable non binary constraints triangle preserving triangle clique variables constraint graph binary decomposition variables involved non binary constraint 
example di erent constraint triangle preserving decomposes clique binary equals constraints 
variables occuring triangle equals constraints binary decomposition involved di erent constraint 
set di erent constraints may triangle preserving binary decomposition may contain cliques explicitly involved di erent constraint ary representation 
example consider problem example di erent constraints fx fx fx set constraints triangle preserving clique equals constraints binary decomposition variables variables occur constraint ary representation 
binary constraints occur triangle preserving set non binary constraints form part triangle 
subclass triangle preserving constraints sw proves generalized arc consistency achieves high level consistency 
precise strictly stronger path inverse consistency decomposition strictly stronger arcconsistency 
theorem triangle preserving set constraints generalized arcconsistency strictly stronger path inverse consistency binary decomposition 
sw proves triangle preserving set constraints algorithm maintains path inverse consistency binary decomposition may explore exponentially branches algorithm maintains generalized arc consistency 
proposition exists triangle preserving set constraints variables algorithm maintains generalized arc consistency solves search algorithm maintains path inverse consistency binary decomposition explores 
branches variable ordering 
practical importance theorem proposition demonstrated chapter investigate empirically ect maintaining generalized arc consistency di erent constraints 
corollary theorem generalized arc consistency triangle preserving set constraints strictly stronger restricted path consistency arc consistency binary decomposition 
proven sw restricted subclass triangle preserving constraints generalized arc consistency remains incomparable strong path consistency singleton arc consistency neighbourhood inverse consistency 
theorem triangle preserving set constraints generalized arcconsistency incomparable strong path consistency singleton arcconsistency neighbourhood inverse consistency binary decomposition 
results triangle preserving constraints just reviewed summarized taken gsw 
complexity analysis previous section reviewed theoretical results decomposable constraints compare pruning eciency forward checking arcconsistency algorithms pruning eciency generalizations 
results tell relationship di erent levels consistency example generalized arc consistency stronger arc consistency decomposition tell expensive achieve levels consistency 
pic rpc ac gac nic strong pc sac incomparable strictly stronger consistency generalized arc consistency triangle preserving set non binary constraints compared various consistency techniques stronger equal arc consistency binary decomposition 
section answer making worst case complexity analysis generalized forward checking generalized arc consistency algorithms decomposable constraints 
measure analysis consistency check de ned chapter 
forward checking fc performs consistency checks currently assigned variable variable 
number constraints current variable variables fc performs consistency checks node 
db gives upper bounds number consistency checks algorithms nfc nfc perform node search tree 
nfc forward checks ary constraint variables assigned th variable current 
number constraints involve current variable variable nfc performs maximum consistency checks node 
complexities algorithms nfc nfc depend levels consistency enforce complexity arc consistency algorithm 
note nfc requirement consistent tuples ary constraint precomputed 
constraint de ned intensionally function predicate satisfy requirement apply function predicate possible tuples compute consistent ones 
checking tuple consistent involves consistency checks polynomial arity constraint number tuples nfc polynomial arity constraint number consistency checks 
space restrictions want explicitly store tuples ary constraint high arity 
main observation regarding complexities forward checking algorithms polynomial di erence number consistency checks performed algorithms node 
means results sections regarding exponential di erences algorithms terms visited nodes true terms consistency checks 
dominance results carry consistency checks 
lemmas show decomposable non binary constraint satisfaction problem fc binary decomposition incomparable algorithms nfc nfc terms consistency checks 
count primitive consistency checks check tuple ary constraint consistent :10.1.1.110.7551
explains fair assumption case constraint represented intensionally case represented extensionally :10.1.1.110.7551
ary constraint represented intensionally predicate checking tuple consistent takes operations predicate consider values variables involved constraint 
case ary constraint represented extensionally boolean array checking consistency tuple requires operations index array dimensions 
count checks ary constraint consistency count checks binary constraint 
lemma decomposable non binary constraint satisfaction problem algorithm fc binary decomposition incomparable consistency checks algorithm nfc non binary representation 
proof consider ternary constraint having domain having domain having domain 
assume lexicographic variable ordering numerical value ordering 
fc binary decomposition rst assigns forward checks takes consistency checks value 
assigned assignment forward checked consistency checks 
nfc assigns forward checks consistency checks value checks fc 
consider constraint variables having domains 
fc show branches performing consistency checks 
nfc explore branches perform consistency checks total fc 
cases fc performs checks nfc vice versa means incomparable 
lemma decomposable non binary constraint satisfaction problem algorithm fc binary decomposition incomparable consistency checks algorithm nfc non binary representation 
proof prove fc nfc incomparable terms consistency checks consider ternary constraint having domain having domain having domain 
fc take consistency checks solve problem nfc take consistency checks 
case nfc takes fewer checks fc consider problem variables fx domains respectively 
equals constraint ternary constraint fx specifying pair variables constraint di erence 
allowed tuple constraint 
assuming lexicographic variable ordering numerical value ordering fc binary decomposition forward check assignment remove domain fc assign remove domain assign discover dead 
fc assign fail 
backtrack assign nally discover solution branches explored 
fc perform consistency checks 
nfc explore branches value removed domain projections involving variables empty 
soon remaining values tried nfc closes branch 
assuming consistent tuples done consistency checks 
show algorithms nfc nfc incomparable consistency checks fc binary decomposition incomparable complicated examples 
arc consistency discussed chapter non binary constraint speci ed predicate generalized arc consistency established best known algorithm br worst case complexity 
arc consistency enforced binary decomposition decomposable constraint ed optimal worst case complexity number binary constraints initial constraint decomposes 
identify cross point size binary decomposition 
generalized arc consistency cheaper arc consistency binary decomposition 
practice generalized arc consistency cheaper arcconsistency worst case arity constraints domain size variables small 
certain types non binary constraints di erent constraint exist algorithms achieve generalized arcconsistency lower cost 
di erent constraint variables decomposed clique binary constraints 
arc consistency achieved decomposition di erent constraint checks generic arc consistency algorithm 
dealing equals constraints arcconsistency achieved worst case complexity 
correction bound constraints explained detail section :10.1.1.29.597:10.1.1.29.597:10.1.1.29.597
observations network equals constraints ac algorithm revise edge 
second equals constraint arc consistency may remove value domain variables variable unary domain 
result arc consistency worst case complexity decomposition di erent constraints 
better specialized ltering algorithm achieves generalized arc consistency non binary representation worst case complexity 
discussed earlier generalized arc consistency non binary representation stronger arc consistency decomposition 
experimental results chapter strongly suggest algorithm ecient arc consistency algorithm 
gac schema achieve generalized arc consistency complexity depends number allowed tuples 

constraint 
compare complexity algorithm obvious gac schema inferior 
ternary constraints di erence substantial gac schema perform consistency checks constraint compared checks algorithm 
arc consistency binary equals constraints section correct result regarding complexity achieving arc consistency network binary equals constraints :10.1.1.29.597:10.1.1.29.597:10.1.1.29.597
claimed arc consistency optimally achieved ed worst case time complexity :10.1.1.29.597:10.1.1.29.597
describe algorithm achieves arc consistency networks binary equals constraints worst case complexity 
proposed similar version algorithm specialisation ac anti functional constraints :10.1.1.29.597:10.1.1.29.597
worst case complexity ed :10.1.1.29.597:10.1.1.29.597
van hentenryck deville teng claim ed optimal worst case complexity subclass constraints say reasonable assume need check value domain 
claim case equals constraints result worst case complexity 
start observation equals constraint variables arc consistency may remove value domain variable variable unary domain 
mentioned :10.1.1.29.597:10.1.1.29.597
general equals constraint variables domain sizes arc consistent value domain support domain vice versa 
variable instantiated value arc consistency remove domains variables adjacent continue propagation variable value domain 
words arc consistency processes edges variables non unary domains 
describe arc consistency algorithm worst case complexity 
assuming ac algorithm follows edge unary domain mark edge put queue 
extract rst edge queue 
assuming unique value domain domain remove 
domain empty 
network inconsistent 
left unary domain mark unmarked edges connected put queue 
checking variable value domain done constant time careful implementation 
example ag set domain singleton 
take edge queue continue way 
algorithm domain wipe occurs queue empty 
edge inserted queue marked reinserted 
edge arc consistent queue meaningless 
better understand consider equals constraint variable singleton domain domain 
edge extracted queue arc consistency remove domain point left singleton domain algorithm described insert edges involve queue 
point including edge arc consistency remove value variable 
done earlier rst processed 
edge processed needs processed 
means edge arc consistent 
mentioned making edge arc consistent equivalent removing value domain checking resulting domain size done constant time 
arc consistency achieved worst case complexity 
result di erent constraint variables decomposition constraint binary constraints arc consistent worst case complexity 
signi cant gain complexity generic optimal ac algorithm ac 
reasonable assume constraint programming toolkits generic algorithm achieve arc consistency equals constraints take advantage nature constraints eciently 
chapter established theoretical relationship arcconsistency binary decomposition generalized arc consistency ary representation decomposable constraints 
rst proved theorems corollaries regarding algorithms maintain local consistencies 
corollary proved algorithm maintains domain ltering consistency dominates algorithm maintains domain ltering consistency stronger result results sw gsw gsw level consistency achieved generalized arc consistency ary decomposable constraints compared level consistency achieved arc consistency binary decomposition constraints helped prove maintaining generalized arc consistency ary representation decomposable constraints dominates maintaining arc consistency decomposition 
discussed complexities forward checking arc consistency algorithms generalizations corrected result regarding complexity arc consistency binary constraints :10.1.1.29.597:10.1.1.29.597:10.1.1.29.597
chapter practical importance results clear empirical study 
chapter empirical study decomposable constraints previous chapter showed algorithm maintains generalized arcconsistency ary representation decomposable constraints dominates algorithm maintains arc consistency binary decomposition 
triangle preserving class decomposable constraints generalized arc consistency achieves high level consistency compared arc consistency decomposition 
chapter investigate empirically ect theoretical results 
empirical study focused di erent constraint triangle preserving common widely decomposable constraint 
reason study di erent constraint ecient algorithm available achieving generalized arc consistency constraints 
main contributions chapter rst demonstrate ectiveness representing decomposable constraints ary compared binary decomposition second display practical importance achieving high levels consistency 
empirical study look various benchmark problems modelled di erent constraints 
quasigroup completion quasigroup existence small world graphs interval series 
quasigroup completion quasigroup completion decomposable benchmark constraint satisfaction problem proposed gomes selman gs gs gsc combines best features randomly generated instances highly structured problems 
section demonstrate problem greatly bene non binary representation constraints problem compared binary decomposition 
experimental results add weight theoretical results sw gsw gsw proven generalized arc consistency ary representation problem composed constraints decompose cliques binary constraints achieves higher level consistency arc consistency decomposition 
demonstrate practical importance result 
show algorithm maintains generalized arcconsistency ary representation quasigroup completion problems arc consistency binary decomposition problems largely trivial ssw sw 
problem description quasigroup ordered pair 
set 
binary operation equations 

uniquely solvable pair elements constraints quasigroup multiplication table forms latin square 
element occurs exactly row column multiplication table 
order quasigroup cardinality set quasigroup completion problem problem determining remaining entries partially lled table lled way full quasigroup multiplication table obtained 
shows completed quasigroup partially completed 
problem constructing basic quasigroup straightforward problem 
example completed quasigroup partially lled 
direct solutions known see gs details 
proved partially lled latin square cells lled completed full latin square eva sme 
furthermore exists complete characterization partially lled latin squares order lled cells completed full latin square ah 
col showed quasigroup completion problem words problem completing arbitrarily preassigned quasigroup np complete problem 
problem interesting applications 
latin squares design statistical experiments eliminate ect certain systematic dependency data 
applications scheduling sports league scheduling timetabling 
example quasigroups useful specifying schedules involving pairwise matches teams league 
context quasigroup completion useful case schedule preassigned meetings completed 
quasigroup completion problem represented csp variables domain size constraints represented di erent ary constraints row column 
alternatively binary equals constraints giving constraint graph cliques size comparison representations show nary representation quasigroup completion largely trivial problem 
demonstrates importance high levels consistency generalized arcconsistency achieves non binary representation compared arc consistency binary decomposition 
addition study quasigroup completion shows careful proposing new benchmarks 
adding structure random problems benchmarks realistic desirable careful added structure problems trivial right constraint propagation algorithms 
problem formulation explained quasigroup completion problems formulated ary binary constraints 
gs quasigroup completion problems solved maintaining arc consistency binary decomposition 
comparison mw forward checking algorithm binary decomposition 
alternatively method solve quasigroup completion problems maintaining generalized arc consistency ary di erent constraints algorithm discussed chapter 
constraints quasigroup completion problem triangle preserving decompose cliques 
discussed chapter generalized arc consistency ary representation constraints stronger arc consistency binary encoding turn stronger forward checking 
fact shown sw generalized arc consistency quasigroup problems equivalent neighbourhood inverse consistency binary decomposition 
simple examples quasigroup completion problems demonstrate results 
example shows enforcing arc consistency binary constraints strictly stronger forward checking binary constraints 
consider problem ll partially lled quasigroup available values top left cell preassigned 
forward checking gives comparison enforcing arc consistency binary constraints completes quasigroup give example shows enforcing generalized arc consistency di erent constraints strictly stronger enforcing arc consistency binary equals constraints 
consider quasigroup completion problem possible values variable cells preassigned 
enforcing arc consistency binary representation gives enforcing generalized arc consistency di erent constraints lters values bottom right square giving extra ltering caused di erent constraints column row 
constraints removes domain bottom right square squares row column left domains 
means squares assigned 
result bottom right square assigned possible value 
random discuss ect random quasigroup completion problems 
random variables multiplication table quasigroup introduces dependencies unassigned variables structured set original constraints 
completely random randomly picking values variables consistency checks produces problems trivially insoluble trivially soluble 
reason cases completely random give value variables row column 
generated instance trivially insoluble 
rare cases completely random avoid assigning value variables row column quasigroup way easily nd solution 
generate single hard instance completely random run process times 
impractical method especially gs observed hard instances occur point variables preassigned 
high percentage completely random generates trivially insoluble instances 
form consistency checking needs introduced 
gs uses backwards checking method generate problems random 
randomly select desired number variables preassigned 
variable iterate possible values value consistent previous assignments 
value di erent values previously assigned variables row column current variable 
value exists current attempt generate problem fails new initiated 
method randomly generated quasigroup order variables assigned variables domains intact 
alternatively mw possible random assignments forward checked unassigned variables consistent assignment 
suggests ways generate random problems 
rst propagate arc consistency binary constraints assignment second propagate generalized arc consistency di erent constraints 
stronger propagation method perform domain pruning 
side ect methods variables randomly preassigned may bound constraint propagation 
methods randomly generated quasigroup order variables assigned variables may domains pruned 
implementation fourth method stops number variables bound random assignment propagation reaches desired number 
constraint propagation causes variables bound desired number instance thrown away 
mentioned gs observed cost solving quasigroup completion problem random peaks point variables preassigned 
observed phase transition region problems soluble region problems insoluble point 
solving problem quasigroup completion problems encoded ilog solver constraint programming library discussed chapter includes algorithm maintaining generalized arc consistency di erent constraints 
gs gsc backtracking algorithm maintains arc consistency binary representation heuristic variable selection random value selection 
heuristic described chapter 
algorithm variable ordering heuristic promise heuristic value ordering gee described chapter 
value ordering heuristic mw 
heuristic selects value variable reduces possibility nding consistent values remaining unassigned variables 
achieve select value maximizes product number values support variables involved constraint terms quasigroup completion variables involved constraint variable variables row column value variable values support adjacent variable values domain means assigned values domain apart assigned violating constraint 
promise heuristic generally expensive compute case quasigroup completion 
time complexity promise candidate value generally number adjacent variables domain size 
words value adjacent variable checked candidate value nd supports 
quasigroup completion problem variable involved di erent constraints involving variables 
means 
di erent constraints check candidate value available domain adjacent variables simple domain lookup 
gives time complexity nlog 
experimental results demonstrates ect di erent methods variables percentage satis able instances 
percentage satis able problems quasigroups order axis function percentage axis 
backward checking model gomes selman generalized arc consistency 
shows happens random done gomes selman backward checking method corresponds random propagated generalized arc consistency 
note backward checking method way constraints represented ary binary ect percentage consistent instances 
data point experiments instances generated 
observe double phase transition satis ability generated instances 
rst phase transition similar phase transitions soluble insoluble instances observed np complete problems pro sd gw 
addition second phase transition insoluble back soluble instances occurring high percentages 
second transition surprising squares table preassigned easy ll remaining squares consistent values 
example squares row quasigroup preassigned values remaining square immediately remaining value phase transition shifts considerably right picture sharp 
caused constraint propagation introduces structure problem 
follows results correspond backward checking method gs stated 
bc gac bc ac th th th th table th th percentiles branches searched complete quasigroup order 
bc gac corresponds generating gomes selman backward checking method solving generalized arc consistency bc ac corresponds generating backward checking method solving arc consistency binary constraints 
means instance abandoned branches explored 
problems solved data point 
experiments show enforcing generalized arc consistency ary erent constraints arc consistency binary equals constraints reduces cost solving problem drastically 
demonstrated table giving percentiles branches explored complete quasigroup order entries preassigned maintaining arc consistency binary representation generalized arc consistency di erent constraints 
gomes observed search costs solve random quasigroup completion problems modelled heavy tailed distribution gsc 
number runs various instances problem instance di erent heuristics increases small percentage runs just run dominates total cost 
focus higher percentiles correspond dicult instances 
see signi cant advantage mgac mac 
note random value ordering gs promise worst case mgac branches 
repeated experiments minimum remaining values heuristic heuristic variable ordering results similar 
advantage mgac mac branches explored re ected cpu times process instances 
harder instances mgac took couple seconds nd solution prove mac cut times 
order order order order th th th th th th th th table percentiles branches explored complete quasigroups order mgac 
means instance abandoned branches explored 
table shows cost quasigroup completion scales mgac search 
increase problem size problems remain trivial solve 
exception single instance order instances generated variables preassigned 
search abandoned cuto limit branches 
apart instances solved branches 
propagation algorithm allows solve easily generated instances quasigroups order complete search method 
signi cant improvement results gsc despite random restarts enhance performance problems order expensive solve especially phase transition 
gomes selman crato randomization restart strategy eliminate heavy tailed behaviour backtracking algorithm 
able consistently solve quasigroup completion problems order larger 
results far better results meseguer walsh solved quasigroup completion problems forward checking algorithm binary representation mw 
discrepancy interleaved search methods reduce eliminate heavy tail 
experiments limited quasigroups order 
note size problems increased exponential growth di erence cpu times mgac mac 
instances order size mac took hours nd solution prove exists cuto limit imposed mgac took seconds 
th th percentiles branches explored complete quasigroup function percentage generalized arcconsistency perform completion 
shows cost quasigroup completion scales generalized arc consistency perform completion 
gives th th percentiles number branches explored nd completion show exists quasigroups order 
horizontal axis percentage preassigned variables 
interesting method creates harder problems mgac backward checking method 
useful consider suitable method generating hard problems benchmarking 
discussion section comparison binary ary representation quasigroup completion problems 
studied impact mgac cost solve quasigroup completion problems compared mac enforcing generalized arc consistency problems easy 
comparison problems hard solve just enforce arc consistency binary constraints 
experimental results showed clearly achieving high levels consistency generalized arc consistency worthwhile 
contribution study 
gs argue desirable add structure random problems representative real world problems provide dicult benchmarks 
added structure problems trivial right constraint propagation algorithms may longer benchmarks 
quasigroup existence problems explained quasigroup completion problem constraints modelled decomposable di erent constraints 
experimental results previous section showed problems greatly bene ary representation constraints 
study investigate ect change representation ary binary constraints problems consist entirely decomposable constraints 
start problems nite mathematics known quasigroup existence problems 
problems search existence non existence quasigroups particular properties 
precise quasigroup existence problems structure constraint graph quasigroup disturbed additional nonbinary constraints 
additional constraints quasigroup existence harder quasigroup completion problems 
section compare performance mgac ary representation di erent constraints mac binary decomposition quasigroup existence problems test set 
experimental results show generalized arc consistency signif prunes search space reduces runtimes 
study usefulness generalized arc consistency class problems comparing state art methods tackling quasigroup existence problems 
problem description investigate idempotent quasigroups called qg qg qg qg qg class problems 
quasigroup idempotent 
element conditions de ned quasigroup 
conditions qg qg consider qg 


qg 


qg 


qg 



qg 



better understand conditions mean brie analyze constraint involved qg 

value element ath row bth column multiplication table quasigroup 
say value 
way 
value element bth row ath column multiplication table quasigroup 
assuming value 


substituted 
value element cth row dth column multiplication table 
constraint states value equal demonstrates example quasigroup 
note necessarily rd th rows columns 
row column table 
qg ab 
ba quasigroup existence problem generally de ned set clauses rst order logic 
goal de ne functions predicates clauses hold 
problem called model generation 
experimental results quasigroup existence problems encoded solved ilog solver 
declarative fashion constraints de ned solver allows easy encoding problems 
particular look idempotent qg problems various orders generalized arc consistency di erent constraints arc consistency binary representation constraints 
note generalized arc consistency achieved search achieved di erent constraints additional ary constraints 
ecient propagators constraints ilog solver standard bound consistency ltering performed 
order eliminate isomorphic models reduce search space constraint posted element 
order quasigroup 
table demonstrates relative performance arc consistency binary constraints generalized arc consistency ary constraints 
results impressive quasigroup completion mgac better mac 
qg qg mac explores twice branches mgac qg di erence orders magnitude whilst qg qg slight di erence 
note mgac dominates mac problems solved terms explored branches terms cpu time 
compare results standard model generators quasigroup existence problems 
generators finder sla sato zm mace mcc sem zz 
sem rst order theorem provers finder constraint solving mace sato propositional provers 
table shows number branches explored various provers qg problems number models 
qg chosen benchmark comparison widely studied class quasigroup existence problems results various solvers publically available 
clear solver generalized arcconsistency di erent constraints outperforms finder order qg qg qg mac mgac mac mgac mac mgac order qg qg mac mgac mac mgac table branches explored mac binary mgac ary representation di erent constraints quasigroup existence problems 
orders magnitude explores branches sem far worse propositional provers 
fair comparison various solvers respect cpu times feasible published results widely di erent platforms 
advanced provers sem sato sophisticated branching heuristics complex rules elimination symmetric models far powerful symmetry breaking constraint program zz 
implementation quasigroup existence problems solver simple minimum remaining values heuristic dynamic variable selection symmetry breaking constraint described added 
impressive simple solver program competitive developed systems sem sato 
discussion conclude despite addition non binary constraints disturb structure constraint graph problems hard mgac ord 
models branches finder mace sato sem solver table performance various solvers qg problems measured number branches explored 
di erent constraints signi cantly reduces search runtimes quasigroup existence problems compared mac binary representation 
furthermore generalized arc consistency promising technique solving quasigroup existence problems 
results show ilog solver competitive better provers despite carefully tuned implementation mechanisms heuristics 
worth mentioning mac binary constraints outperforms provers finder forward checking propagation 
conjecture performance sem sato improved addition specialized procedure maintain generalized arc consistency di erent constraints 
interesting identify features qg gives mgac advantage mac qg qg lessen advantage 
small world problems watts strogatz shown graphs occur biological brain worm social actors collaborations movies man systems internet small world topology 
graphs completely regular completely random topology nodes highly clustered path length small ws 
walsh shown topology search problems hard local decisions quickly propagate globally wal 
experiments carried problems nature consist decomposable constraints precise problems derived quasigroups 
construct graphs small world topology methods describe 
constructing small world problems rst method start constraint graph quasigroup introduce randomness deleting edges random binary representation 
ect binary representation break cliques binary constraints 
ect ary representation break di erent constraint variables di erent constraints variables 
fx di erent remove edge left di erent constraints fx fx illustrated 
generate small world problems keep track di erent removing edge random clique variables creates cliques 
variables second variables 
constraints randomly broken ones created time edge removed graph 
desired edges removed post remaining di erent constraints may just binary edges removed 
second method start constraint graph quasigroup time introduce randomness adding edges random binary representation graph 
done adding extra equals binary constraints variables row column 
constraints added constraint graph quasigroup new cliques various sizes may created 
illustrated 
problem nding cliques set constraints intractable 
keep experiments simple ort spent nding cliques posting di erent constraints 
constraints problem initial di erent constraints rows columns plus randomly added binary constraints 
adding edges cliques random 
experimental results shows percentiles number branches explored cpu time solve order quasigroups delete edges binary representation 
focus highest percentiles 
shows hardest problems edges removed 
mgac dominates mac orders magnitude hard region terms branches explored cpu time 
percentage deleted edges increases problems easy mgac mac quickly nd solution 
mac starts outperform mgac terms cpu time overhead enforcing generalized arc consistency large number di erent constraints greater 
th mac th mac th mgac th mgac cutoff th mac th mac th mgac th mgac cutoff percentiles branches explored cpu seconds mac mgac solve small world generated randomly deleting edges constraint graph order quasigroup 
shows percentiles number branches explored cpu time solve order quasigroups randomly add edges binary representation show solution exists 
search abandoned hour cpu time 
hardest problems encountered fraction added edges coincides solubility phase transition shown 
mgac performs better mac especially hard region instances cut mac instances solved mgac seconds 
di erence performance median instance impressive 
change new cliques created addition constraints identi ed exploited mgac 
discovering cliques np complete problem 
th mac th mac th mgac th mgac th mac th mac th mgac th mgac cutoff percentiles branches explored cpu time mac mgac solve small world problems generated randomly adding edges order quasigroup 
solubility phase transition small world problems generated randomly adding edges order quasigroup 
interval series interval series ais problem arithmetic problem proposed benchmark evaluation local search algorithms sat hoo 
inspired known problem serial music composition studied berg ernst 
section show ais problem bene ary di erent constraints binary equals 
problem description interval series problem de ned follows twelve standard pitch classes represented numbers interval series pitch class occurs exactly musical intervals neighbouring notes cover full set intervals minor second semitone major seventh semitones interval series notes di erent intervals notes di erent 
problem stated arithmetic problem way hoo wish nd vector permutation ii interval vector jx jx jx permutation 
vector satisfying conditions called interval series size problem nding series called interval series problem size denoted ais 
problem represented csp involving di erent constraints straightforward way 
element vectors represented variable domains respectively 
constraints represent conditions ii de nition 
formally csp ais represented triple domains variables respectively 
consists constraints jx constraints encoded di erent constraints variables vectors respectively 
constraints ternary constraints associating variables experimental results hoo csp formulation ais transformed propositional satis ability problem solved various stochastic local search techniques 
results showed hard problem local search methods unable nd solution ais 
ais treated csp directly easy show solution constructed directly search 
done assignments sb variables set fn successively variables set fn 
odd variables set fn successively variables set fn 
order get interval series rst instantiate variables values set variable complete series successively assigning variables mgac mac variable instantiated rest variables instantiated constraint propagation 
problem nding interval series trivial looked problem nding solutions solutions ais various values rst mgac ltering algorithm di erent constraints mac binary representation di erent constraints 
mrv dynamic variable selection sb reports selection variable ordering heuristic important 
table shows results 
size solutions branches explored cpu time mgac mac mgac mac table branches explored cpu time seconds nding solutions interval series problems 
mac explores times number branches mgac explores signi cant gain cpu time size series increases 
note sb problem solved constraint programming toolkit chip 
constraints ais implemented cycle constraint bc express fact values variables vector form permutation 
obtained slightly better results ones reported 
chapter performed empirical comparison generalized arcconsistency ary representation decomposable constraints arcconsistency binary decomposition 
experimented problems modelled di erent constraints common decomposable constraints 
results various benchmark domains showed algorithm maintains generalized arc consistency problems di erent constraints signi cantly ecient algorithm maintains arcconsistency binary decomposition 
fact mgac algorithm generalized arc consistency algorithm di erent constraints benchmark quasigroup completion problem largely trivial 
mgac specialized heuristics symmetry breaking rules competitive state art solvers hard quasigroup existence problems 
study demonstrates usefulness ary representation decomposable constraints usefulness achieving high levels consistency 
shown identifying exploiting structure constraint graph bene cial 
note empirical study focused problems di erent constraints kind decomposable constraint subject similar results ltering algorithm reasonable complexity 
higher levels consistency achieved ary representation decomposable constraint compared binary decomposition 
provided ecient ltering algorithm expect similar results ones 
chapter binary encodings ary constraints previous chapters studied ways solving problems decomposable constraints focusing arc consistency generalization ary constraints 
despite importance decomposable constraints small class ary constraints encountered csps 
constraints decomposable encoded binary introducing new variables 
chapter study general class non decomposable constraints 
way solve problems non decomposable constraints apply generalized algorithm directly ary representation 
option encode constraints binary new additional variables standard algorithm binary constraints 
chapter comparison solving methods various encoding methods 
known ways encode arbitrary ary constraints binary dual graph encoding hidden variable encoding 
bacchus van beek studied binary encodings dual hidden variable ary constraints :10.1.1.110.7551
study focused ectiveness forward checking algorithm applied ary constraint satisfaction problems original representation compared binary encodings 
compares search ort required solve ary csps ary representation search ort required solve dual hidden variable encodings :10.1.1.110.7551
theoretical experimental results show relative cost solving original ary csps dual hidden variable binary representations depends cardinality constraints structure constraint graph 
dual graph representation ective small number constraints csp constraints tight 
hidden variable encoding shown depending branching heuristics enhancement fc exponentially outperform fc ary representation problems polynomially outperformed 
note version generalized fc nfc weakest generalized versions fc discussed chapter :10.1.1.110.7551
chapter continue investigation ectiveness binary encodings ary csps 
forward checking algorithm investigate ects mac mgac algorithms 
start describing dual hidden variable encodings 
show worst case arc consistency enforced hidden variable encoding arbitrary ary constraints asymptotic time complexity generalized arc consistency ary representation constraints 
importantly demonstrate large classes problems asymptotic complexity arc consistency hidden variable encoding better generalized arc consistency non binary constraints de ned intensionally 
discuss experimental results random problems regarding ort required achieve consistencies 
compare empirically eciency mac various binary encodings non decomposable problems mgac ary representation benchmark domains 
results show hidden variable encoding ecient binary encodings study cases ef cient ary representation 
encoding ary csps binary hidden variable encoding promising technique specialized generalized arc consistency algorithm low complexity available 
description encodings general methods converting ary binary csps dual graph encoding dp hidden variable encoding rpd dec 
describe methods proposed method double encoding sw 
dual encoding dual encoding variables swapped constraints vice versa 
constraint original ary csp represented dual variable domain dual variable consists set allowed tuples original constraint 
binary constraints dual variables exist original constraints share variables 
new binary constraints disallow pairs tuples shared variables di erent values 
dual encoding non binary csp rij binary constraint pair tuples true ith element st tuple equals jth element nd tuple 
consider example taken sw variables domains constraints 
dual encoding represents problem dual variables constraint 
domains dual variables tuples satisfy respective constraint 
example dual variable associated third constraint domain tuples values satisfy 
compatibility constraint ensure original variables common values 
constraint allows pairs tuples agree second third elements 
dual encoding problem shown 
hidden variable encoding hidden variable encoding set variables consists variables original ary csp plus new set dual variables case called hidden variables 
just dual encoding hidden variable corresponds constraint original problem 
domain hidden variable consists tuples satisfy original constraint 
hidden variable binary constraint original variables involved corresponding original constraint constraint speci es tuple assigned consistent value assigned consider example variables constraints 
hidden variable encodings addition original variables dual variables domains dual encoding 
example dual variable associated third constraint domain compatibility constraints variables mentioned third constraint 
example compatibility constraint relation true rst element tuple assigned equals value hidden variable encoding shown 
hidden variable encoding non binary csp 
binary constraint ri applies tuple value true ith element tuple equals value 
double encoding sw proposed double encoding dual hidden variable encoding entirety 
hidden variable encoding double encoding original variables dual variables 
constraints dual variables dual encoding constraints dual variables original variables hidden variable encoding 
double encoding extra pruning achievable dual encoding 
able branch original variables hidden variable encoding branching heuristics may able perform better dual variables potentially large domains 
sw observes possibility considered encode parts non binary problem dual encoding parts hidden variable encoding 
option considered 
arc consistency encodings sw theoretical study levels consistency generalized arc consistency achieves ary constraints compared levels consistency achieved arc consistency binary encodings constraints 
results proved enforcing generalized arc consistency set nonbinary constraints achieves level consistency arc consistency hidden variable representation constraints 
arc consistency dual encoding strictly stronger generalized arc consistency ary representation 
section analyze compare worst case complexities generalized arc consistency ary representation encodings arbitrary ary constraints 
aim study help identify encoding non binary problem binary cheaper keeping original representation 
remarks regarding ect domain size variables looseness constraints cost arc consistency hidden variable encoding 
hidden variable encoding sw proved enforcing generalized arc consistency set nonbinary constraints achieves level consistency arc consistency hidden variable representation constraints 
means algorithm maintains generalized arc consistency ary representation constraints visit search tree nodes algorithm maintains arcconsistency hidden variable encoding 
particularly interesting compare respective costs achieving generalized arc consistency ary representation arc consistency hidden variable encoding 
comparison gives indication consistencies cheaper maintain 
shown worst case arc consistency hidden variable encoding enforced time complexity generalized arc consistency ary representation 
large classes problems asymptotic complexity arc consistency hidden variable encoding better asymptotic complexity generalized arc consistency ary constraints de ned intensionally 
hidden variable arbitrary ary constraint represented set binary constraints hidden variable original variables 
consider binary constraint hidden variable original variable value domain corresponding tuple fa original ary constraint supporting value value means directed constraint constraint hx hidden variable functional 
constraint xy functional value supporting value note directed constraint functional value supporting values tuples arc consistency functional constraints enforced ed worst case time complexity :10.1.1.29.597:10.1.1.29.597
result expect optimal arc consistency algorithm perform kd checks worst case enforce arc consistency hidden variable representation ary constraint domain size hidden variable 
claim actual complexity topology constraints hidden variable encoding allows treated time enforcing arc consistency treating 
explained 
complexity arc consistency hidden variable encoding assume constraints hidden variable encoding ary constraint fx represented hidden variable domain size arc consistent 
assume value deleted domain variable hidden variable encoding try enforce arc consistency 
distinguish cases 
value deleted original variable immediately delete tuple values index domain hidden variable lost support ac algorithm try nd new support values domains original variables fx supported deleted 
worst case algorithm go tuple values domain tuple value fa check values supported check general require operations value term uence asymptotic complexity algorithm explain 
exhausted new support value variable removed domain gives worst case time complexity establish arc consistency 
de nition hidden variable encoding number allowed tuples ary constraint 
proportion satisfying tuples ary constraint pd asymptotically term dominated term tuple value deleted domain case arc consistency algorithm try nd new support values domains original variables fx supported worst case algorithm go tuple values fa domain check values supported gives worst case time complexity 
suppose try enforce generalized arc consistency non binary representation ary constraint fx deletion value variable nd new supporting tuples values variables supported tuple index optimal algorithm gac schema br worst case go possible tuples 
gives time complexity domain size variables br 
constraints de ned intensionally predicate checking tuple fa supports values equivalent checking tuple consistent allowed constraint 
general requires operations predicate consider values term uence complexity algorithm asymptotically term dominated term consistency check tuple ary representation involves number primitive operations checking value hidden variable encoding 
reason ignore number primitive operations comparing complexities 
compare complexities pd deduce arc consistency hidden variable encoding generalized arc consistency non binary representation worst case time complexity 
constraint xed number tuples allowed 
addition large classes problems arc consistency hidden variable encoding better worst case complexity generalized arc consistency constraints de ned intensionally 
example allowed tuples constraint asymptotic complexity arc consistency hidden variable encoding better complexity generalized arc consistency 
section give examples 
known looseness constraint 
observation looseness constraints hidden variable encoding equal independent looseness original constraint 
consider hidden variable domain size dd possible tuples constraint hidden original variable 
number allowed tuples constraints looseness constraints ary constraint de ned extensionally allowed tuples complexity gac schema br 
complexity arc consistency hidden variable representation non binary constraints naturally represented extensionally 
true case disallowed tuples represent constraint 
section discuss experiments compare cost generalized arc consistency arc consistency hidden variable encoding constraints de ned extensionally 
examples example demonstrate large classes problems arc consistency hidden variable encoding better worst case time complexity generalized arc consistency non binary representation non binary constraints de ned intensionally 
example consider constraints form jx xm domains variables dg 
constraints problems combinatorial mathematics golomb rulers frequency assignment problems 
number allowed tuples constraint gives worstcase complexity arc consistency hidden variable encoding constraint 
complexity generalized arc consistency ternary representation constraint 
see gain worst case hidden variable encoding 
example crossword puzzle generation problems benchmark csps naturally expressed non binary binary constraints 
examples problems non binary constraints speci ed extensionally allowed tuples 
explain generalized arc consistency non binary representation expensive 
non binary encoding value domain hidden variable corresponding tuple fa original ary constraint supporting tuple constraint hidden variable original variable tuple fa tuples distinct 
crossword puzzles square puzzle variable word puzzle forms constraint 
domain variable set letters english alphabet 
allowed tuples ary constraint words letters dictionary 
example unix dictionary 
non binary constraints arity high maximum length words puzzle 
assume smart data structures store constraints predicates written access complexity gac schema constraint high 
hidden variable encoding crossword puzzles word hidden variable compatibility constraints hidden original variables 
complexity arc consistency hidden variable encoding constraint allowed tuples 
assuming letters english alphabet puzzles domain size original variables 
ary constraints words unix dictionary 
looseness constraints 
ary constraints represent words letters words looseness constraints 
increases looseness constraints decreases 
assuming increases nitely asymptotically complexity arc consistency hidden variable encoding smaller complexity generalized arc consistency 
hidden variable encoding practical method represent crossword puzzle problems 
note explicitly store allowed tuples non binary representation complexity generalized arcconsistency complexity arc consistency hidden variable encoding 
crossword puzzled represented way lose advantage able instantiate hidden variables hidden variable encoding 
example case hidden variable representation worse non binary di erent constraint 
advantage nonbinary representation due specialized algorithm constraints 
generalized arc consistency enforced di erent constraint gac schema arc consistency hidden variable encoding better worst case complexity 
example consider di erent constraint variables domain sizes number allowed tuples 
complexity arc consistency hidden variable encoding asymptotically better complexity gac schema 
example example asymptotic complexities representations consider parity constraint variables domains dg 
constraint number allowed tuples 
parity constraints arc consistency hidden variable encoding generalized arc consistency non binary representation asymptotic time complexity 
cost constructing storing hidden variables important issues discussed far cost constructing hidden variable encoding non binary csp space requirements storing hidden variables 
domains hidden variables consist allowed tuples corresponding constraints means constraints de ned intensionally compute tuples allow preprocessing step 
introduces overhead relative arity constraints 
general case time overhead order construct hidden variable constraint involving variables domain sizes impractical hidden variable encoding constraints high arity 
constraints relatively small arity tight constraints preprocessing overhead small usually insigni cant compared cost search 
cases non binary constraints de ned extensionally example crossword puzzles 
cases allowed tuples constraints available avoid overhead computing 
consider space requirements representations 
distinguish cases 
non binary constraints de ned intensionally predicates 
case signi cant space requirement non binary representation data structures generalized arc consistency algorithm 
constraint variables domain size space complexity gac schema algorithm 
hidden variable encoding need space store domains hidden variables allowed tuples non binary constraints plus space required arc consistency algorithm 
general need space allowed tuples constraint arc consistency algorithms ac ac require space data structures 
constraints functional space required data structures algorithm constant :10.1.1.29.597:10.1.1.29.597
signi cant requirement domains hidden variables 
pd total space required worst case polynomial arity constraint 
means hidden variable encoding practical constraints relatively small arity tight constraints 
discuss ways reducing requirement average 
non binary constraints de ned extensionally allowed disallowed tuples 
non binary representation need space explicitly store allowed disallowed tuples constraint plus space required data structures generalized arc consistency algorithm 
worst case space requirements case dominated space needed store allowed disallowed tuples 
practice de ning non binary constraints extensionally feasible helpful constraints tight number allowed tuples small 
example crossword puzzle problems 
hidden variable encoding space needed 
need space store domains hidden variables plus space required arc consistency algorithm 
worst case space requirements 
note hidden variable encoding de ne binary constraints hidden original variables intensionally save space independent way non binary constraints de ned 
explained section functional binary constraints hidden variable encoding checked time value deleted supports recomputed 
hidden variable practical terms space constraints de ned extensionally intensionally de ned constraints relatively small arity looseness 
constraints common problems shown examples previously 
describe simple way reduce space required store domains hidden variables 
hashing explicitly store allowed tuples domain hidden variable space requirements overwhelming hidden variable encoding cases impractical 
partially overcome problem single data structure similar constraints 
example various inequality constraints form xm variables similar domain sizes single sorted table store tuples hashing index 
assign key tuple case domain hidden variable representing constraint simply dimensional array keys 
cases avoid hashing reduce space hidden variable encoding 
ternary constraints problem represented hidden variables 
domain hidden variable array list keys key points tuple allowed corresponding constraint 
table store tuples values original variables simply function translates key corresponding binary number 
note constraints similar 
inequalities equality 
data structure constraints function translate key domain hidden variable corresponding tuple 
illustrates 
discussion point important 
careful applying asymptotic measures real problems number reasons 
asymptotic behaviour predict average behaviour misleading 
asymptotic big analysis may di erent theoretical average case analysis 
second actual performance generalized arc consistency algorithms depends particular implementation 
third real world problems usually consist variety constraints di erent posted sets variables varying domain sizes 
fourth dealing binary encodings ary problems issue space required store encodings large domain sizes dual hidden variables 
dramatic ect performance arcconsistency encodings 
dual double encodings analysis complexities arc consistency dual double encodings case hidden variable encoding 
hidden variable encoding especially interesting respect complexity arc consistency fact arc consistency achieves level consistency generalized arc consistency ary representation sw 
case dual encoding know sw arc consistency strictly stronger generalized arc consistency ary representation 
true certain assumptions explained sw 
worst case time complexity achieving arc consistency binary constraint dual encoding non binary problem domain sizes dual variables 
domain dual variable consists allowed tuples corresponding ary constraint 
assume variables non binary problem domains uniform size ary constraints 
worst case complexity arc consistency 
term suggests arc consistency dual encoding expensive especially maintained search 
experimental results sections show true 
case double encoding achieving arc consistency expensive binary constraints hidden original variables constraints hidden variables arc consistent 
experimental results show maintaining arc consistency double encoding non binary problems reduces number branches explored expensive 
experiments random problems experiments compared cost achieving generalized arc consistency random ternary problems cost achieving arc consistency hidden variable representation problems 
model generate problems standard model generalized ary csps 
generated instance de ned tuple number variables uniform domain size variables uniform arity constraints density constraint graph fraction constraints 

possible constraints looseness constraints fraction allowed tuples possible ones 
sets experiments performed 
number variables arity domain size varied 
set experiments density varied ranging sparse dense problems 
combination varied looseness constraints loose tight constraints 
note constraints de ned extensionally sets allowed tuples extra space needed store constraints 
encoded generated ternary instance equivalent binary hidden variable encoding 
binary constraints hidden variable encoding represented sets allowed tuples 
varied domain size density looseness constraints compared cost achieving generalized arc consistency ternary instances cost achieving arc consistency hidden variable encoding instances 
results showed encoding random ary csps practical extensional representation constraints large domain sizes hidden variables 
despite high cost achieving generalized arcconsistency ary representation preferable compared hidden variable encoding encodings worse 
experimental results observation 
ternary problems xed number variables domain size density observe expected phase transition soluble insoluble problems increase tightness constraints 
see corresponding easy pattern cost generalized arc consistency ary representation 
pattern exist cost arc consistency hidden variable encoding 
cost achieving arc consistency hidden variable encoding initially high soluble problems small tightness falls constantly soluble problems phase transition insoluble problems 
explanation tightness constraints low looseness high allowed tuples means domain sizes hidden variables large constraints hidden variable encoding allowed tuples 
causes serious problems space result run times increased 
increase tightness constraints number allowed tuples decreases space problems serious 
result cost arc consistency falls constantly 
experiments showed hidden variable encoding practical constraints represented extensionally large space requirements 
encodings dual double su er problem 
ary constraints rarely represented extensionally sections describe experiments benchmark domains constraints represented intensionally 
experiments benchmark domains evaluate applicability encoding problems non decomposable constraints binary experiments run benchmark domains 
golomb rulers crossword puzzle generation 
results show problems hidden variable encoding ecient binary encodings examined 
case crossword puzzles encoding problems binary practical option high complexity gac schema 
case golomb rulers ary representation constraints ecient binary encodings cheap bound consistency maintained parts problem 
generalized arc consistency maintained problem appears better arc consistency encodings arc consistency algorithm hidden variable encoding optimally implemented 
believe optimal implementation hidden variable encoding competitive better 
golomb rulers rst benchmark problem experimented golomb rulers problem 
problem proposed peter van beek challenging constraint satisfaction problem benchmark library available prob csp 
problem speci cation golomb ruler may de ned set integers xm di erences distinct 
ruler said contain marks length objective nd optimal minimum length near optimal rulers 
longest currently known optimal ruler marks length 
van beek reports quite small problems fewer fteen marks dicult complete search methods diculty lies proving optimality nding solution problems unique solution solutions 
golomb rulers instances general class problems called problems distance introduced ssw 
de nition ssw problems de ned graph nodes labelled integers edges labelled di erence node labels edge constraints edge labels di erent 
constraints edge labels de ne graph call underlying graph 
golomb ruler problem distance underlying graph complete 
example problem distance underlying graph complete dimensional golomb ruler layers cliques edges node clique node clique 
example interval series problem described chapter 
problem underlying graph ring 
shows example simple problem distance 
equal simple problem distance variables labelled edge labelled di erence edge labelled di erence constraint specifying di erent 
non binary models golomb rulers golomb rulers especially suitable study modelled di erent ways time models expressed straightforward simple way 
represent golomb rulers problems constraint satisfaction problems variables xm domain 
lg upper limit length ruler 
experiments set smallest known length ruler marks trying nd solution 
accordingly trying prove optimality set smallest known length minus 
alternatively set arbitrary large number larger optimal length optimization mechanism ilog solver nd optimal length prove optimality 
choose avoid method reasons method experiments binary encodings golomb rulers problems take long time run explained 
second lack speci knowledge solver optimization mechanism exactly works choose avoid 
model golomb ruler problem nd way represent distinctness constraints di erences variables 
obvious ways modelling constraints quaternary constraints post quaternary constraints pair edges form representation gives quaternary constraints 
see 
equal quaternary model golomb rulers problems 
ternary binary equals constraints introduce auxiliary variables ij edge ij gives ternary constraints 
post binary equals constraints pairs auxiliary variables 
gives binary constraints 
see 
equal ternary equals model golomb rulers problems 
ternary di erent constraints introduce auxiliary variables ij edge ij get ternary constraints 
post single di erent constraint auxiliary variables 
see 
addition set constraints post monotonicity constraints de nition golomb rulers 

di erent ternary di erent model golomb rulers problems 
problem re ection symmetry break adding constraint xm xm equivalently xm 
experimental results non binary models rst step study golomb rulers problems experimental comparison non binary models described 
brie discuss results comparison moving models golomb rulers binary encodings evaluate experimentally 
table shows number branches explored cpu time nd optimal golomb ruler prove exists numbers variables marks values lengths 
know lengths optimal rulers variables concentrate nding optimal ruler proving ruler shorter length exists marks 
longer rulers expensive solve 
handle various constraints models ilog solver maintaining bound consistency algorithm representation ternary di erent constraint generalized arc consistency algorithm di erent constraint eciency 
mentioned add constraint xm propagation constraint instantly reduces domains variables 
extra constraints xm length ruler added 
representations variables ordered lexicographically 
ruler built starting rst mark moving 
ssw ssw showed lexicographic variable ordering better popular mrv dynamic heuristic 
ssw ssw ects constraint propagation di erent models golomb rulers problems problems distance general compared marks quaternary ary di ary branches cpu branches cpu branches cpu table branches explored cpu time seconds nd minimal length ruler prove shorter exists 
means run cut branches 
quaternary corresponds model quaternary constraints 
ary corresponds ternary model gac maintained di erent constraint auxiliary variables solver bounds consistency maintained ternary constraints 
ary corresponds ternary model ac maintained constraints auxiliary variables solver bounds consistency maintained ternary constraints 

shown generalized arc consistency quaternary model incomparable generalized arc consistency models auxiliary variables 
generalized arc consistency model ternary di erent constraints strictly stronger generalized arc consistency model ternary equals constraints 
table shows quaternary representation ecient terms branches explored cpu time 
representation di erent constraint ecient di erence equals representation overwhelming especially cpu time 
general experiments show introducing auxiliary variables shared constraints pays practice 
increasing arity constraints problem introducing large arity global constraint pay ecient ltering algorithm exists constraint case di erent constraints 
mention representation di erent constraint ruler solved branches explored approximately hour 
signi cant improvement branches reported puget see csp 
binary encodings main aim experimental study golomb rulers investigate applicability binary encodings problems compared non binary models discussed previously 
discussed chapter solve non binary problem encode binary problem standard encodings hidden variable dual encoding sw search algorithms binary constraints :10.1.1.110.7551
section investigate possible models golomb rulers binary encodings derived models ternary constraints 
applicability encoding model quaternary constraints binary investigated encodings give variables dual hidden depending encoding prohibitively large domains possible model encode ternary constraints ternary models representation binary introducing hidden variable constraint ji represent constraints auxiliary variables di erent constraint get mixed model ary constraints encoded minimum length ruler marks quaternary constraints satisfying tuples means dual hidden variables domain sizes order 
binary large ary constraint left di erent binary equals constraints get purely binary csp 
cases domains hidden variables tuples allowed ternary constraints 
gives domain size exactly values length ruler 
possibility double encoding introduced sw add binary constraints hidden variables 
constraints auxiliary variables represented di erent constraint clique equals constraints 
note adding constraint hidden variables corresponding ternary constraints share variable redundant experiments showed waste cpu time 
propagation constraint give achieved constraint auxiliary variables 
example constraint hidden variables represent constraints ers ltering constraint double representation added binary constraints hidden variables corresponding ternary constraints share variable 
third possibility dual encoding 
case golomb rulers double encoding practical dual encoding 
double encoding combines constraints dual hidden variable encodings 
dual encoding dual variables associated di erent constraint clique equals constraints large domains ord enforce arc consistency reasonable cost 
double encoding introduce dual variables associated ternary constraints ignore dual variables associated di erent constraint clique equals constraints redundant 
computationally feasible double encoding 
recap experiments models hidden variable encoding di erent constraint ternary constraint ij introduce hidden variable domain size binary constraints hidden variable variables ij post single di erent constraint auxiliary variables 
mixed model binary constraints large ary constraint 
hidden variable encoding equals constraint ternary constraint ij introduce hidden variable domain size binary constraints hidden variable variables ij post binary equals constraints pair auxiliary variables 
model contains purely binary constraints 
double encoding di erent constraint ternary constraint ij introduce hidden variable domain size binary constraints hidden variable variables ij post compatibility constraints hidden variables share variables single di erent constraint auxiliary variables 
mixed model binary constraints large ary constraint 
double encoding equals constraint ternary constraint ij introduce hidden variable domain size binary constraints hidden variable variables ij post compatibility constraints hidden variables share variables binary equals constraints pair auxiliary variables 
model contains purely binary constraints 
models binary encoding ternary constraints hidden variable double implemented predicates sets allowed disallowed tuples 
ecient implementation lot space saved 
experimental results binary encodings mentioned search optimal rulers set length ruler known optimal search solution 
alternatively set large value initially gradually reduce maximum length allowed ruler 
domain sizes hidden variables binary encodings order early stages optimization large easy nd ruler length time consuming 
known optimal rulers compare encodings 
rst nd ruler length min min optimal length show ruler length min 
convention followed compared non binary models reasons consistency 
table gives results models constraints binary including constraints auxiliary variables represented clique binary constraints 
models compared ternary representation constraints auxiliary variables represented similarly 
versions ternary representation shown ilog solver standard constraint propagation bound consistency ternary constraints 
generalized arc consistency ternary constraints 
case ternary constraints expressed ilog solver predicate implements bessi ere gac schema br 
table see fewer branches explored double hidden variable encoding 
hidden variable encoding gives identical results terms size search tree ternary representation generalized arc consistency 
results line theoretical results sw prove arc consistency hidden variable encoding equivalent generalized arc consistency ary representation higher levels consistency achieved arc consistency double encodings generalized arc consistency ary representation 
generalized arc consistency ternary representation reduces size search tree considerably compared just bound consistency 
surprising generalized arc consistency stronger level consistency bound consistency 
comparison run times mgac mac hidden variable encoding appears show encoding problem binary practical 
mac hidden variable encoding times expensive average 
double encoding expensive 
arc consistency algorithm hidden variable encoding implemented optimally 
analysis section believe optimal implementation competitive generalized arc consistency run times better 
furthermore terms cpu time enforcing generalized arc consistency ternary constraints worthwhile compared cheaper bound consistency partly due fact gac schema general algorithm 
algorithm specialized constraints existed get better results 
table gives equivalent comparison replace clique binary equals constraints single di erent constraint 
results similar double encoding gives best results terms number branches explored practical cpu time far worse representations 
quickest results come ternary representation solver standard algorithm generalized arc consistency gives largest search tree 
comparison tables shows models worthwhile single di erent constraint binary marks length hidden double branches cpu branches cpu marks length ary gac ary branches cpu branches cpu table branches explored cpu time seconds nd ruler speci ed length prove exists lexicographic ordering 
indicates ruler length 
hidden double corresponds hidden variable double encodings ternary model collection constraints auxiliary variables 
ary gac corresponds ternary model constraints auxiliary variables gac maintained ternary constraints 
ary corresponds ternary model ac maintained constraints auxiliary variables solver bounds consistency maintained ternary constraints 
marks length hidden double branches cpu branches cpu marks length ary gac ary branches cpu branches cpu table branches explored cpu time seconds nd ruler speci ed length prove exists lexicographic ordering 
indicates ruler length 
means run cut hour cpu processing 
hidden double corresponds hidden variable double encodings ternary model di erent constraint auxiliary variables 
ary gac corresponds ternary model di erent constraint auxiliary variables gac maintained constraints 
ary corresponds ternary model gac maintained di erent constraint auxiliary variables solver bounds consistency maintained ternary constraints 
equals constraints 
discussion golomb rulers problems benchmark csps modelled different ways ary constraints binary encodings mixtures 
empirical study various models main goal evaluate applicability binary encodings various consistency levels golomb rulers problems 
results show best model ones evaluated auxiliary variables introduced problem constraints expressed set ternary constraints large di erent constraint 
generalized arc consistency enforced constraints model get reduction branches explored 
bound consistency ternary constraints generalized arc consistency di erent constraint get best run time performance 
shows cheaper local consistencies generalized arc consistency ecient specialized generalized arc consistency algorithm low complexity exists 
various binary encodings golomb rulers arc consistency double encoding reduces search space signi cantly results bad cpu times dual encoding impractical large domain sizes dual variables generates arc consistency hidden variable encoding reduces search space size generalized arc consistency 
experiments arc consistency algorithm hidden variable encoding optimally implemented result gives worse cpu times generalized arc consistency non binary representation problem 
believe change optimal implementation 
results show ary model best choice golomb rulers problems cheaper local consistency generalized arc consistency maintained constraints 
crossword puzzle generation second benchmark domain experiments crossword puzzle generation 
problem ginsberg gin evaluation various search algorithms heuristics csps bacchus van beek comparison dual encoding ary representation crossword puzzle problems :10.1.1.110.7551
problem formulation crossword puzzle generation try construct puzzles number words table lled words 
dictionary words choose 
problem represented non binary binary csp straightforward way 
discussed section non binary representation crossword puzzles variable letter lled ary constraint set variables form word puzzle 
domain variable consists letters english alphabet lower case simplicity giving domain size 
allowed tuples constraint words letters dictionary 
compared possible combinations letters means constraints tight 
example looseness ary constraints corresponding words letters 
gives example crossword puzzle problem modelled ary constraints 
ary model crossword puzzle 
variables letter lled 
ary constraint set variables form word specifying formed word exist dictionary 
example assignment value value consistent word formed valid word 
squares correspond black squares puzzle 
dual encoding variable word length puzzle possible values variable words letters dictionary 
gives variables large domains values unix dictionary 
binary constraints pairs variables intersect letter common 
variables length intersect binary constraint allows tuples formed words letters letter position variables intersect 
example letter word rst row letter word rst column share rst letter constraint allow pairs letter words dictionary rst letter 
constraints dual encoding large number allowed tuples larger number possible tuples 
constraint words domain sizes possible tuples 
letter words gives tuples combinations words allowed 
shows dual model puzzle 
dual model crossword puzzle 
variables word lled disregard words length 
binary constraint pair variables intersect specifying variables letter intersection point 
example assigned value consistent assignment links 
squares correspond black squares puzzle 
hidden variable encoding original variables set hidden variables non binary constraint 
domain hidden variable representing constraint original variables set words length dictionary 
binary constraints hidden variable original variables involved constraint represented hidden variable 
constraint original variable appears position word length hidden variable representing constraint allows tuples letters words length letter letter position word 
constraints hidden variable encoding considerably fewer tuples constraints dual encoding 
double encoding original variables plus hidden variables 
binary constraints hidden variables original variables hidden encoding plus constraints hidden variables dual encoding 
name size dual hidden double branches branches branches table branches explored generating various crossword puzzles 
number variables number constraints dual problem 
non binary problem way number variables number constraints 
words number words puzzle number letters 
rst column gives name puzzle introduced 
experimental results explained section generalized arc consistency expensive maintained non binary representation crossword puzzles 
worst case time complexity constraint order puzzles generated prohibitive 
consider non binary representation experiments 
small domain size original variables compared dual variables hidden variable encoding better 
note large size dual variables arc consistency expensive may case forward checking solve problems reasonable time 
tables compare encodings dual hidden variable double standard crossword puzzles initially table shows number explored branches encodings mrv variable ordering 
mac decisions explored number branches hidden variable double encodings author peter van beek kindly making crossword puzzles available 
name dual hidden double table cpu time seconds spent generating various crossword puzzles 
generated puzzles 
possible explanation due big di erence domain sizes hidden original variables extra ltering achieved double encoding having redundant constraints ect choices algorithm 
mrv heuristic branches original variables smaller domains 
general hidden variable double encodings better dual encoding terms branches especially harder puzzles 
number branches explored encodings small table shows cpu times reveals amount ort required enforce arc consistency considerable 
double encoding maximum amount propagation occurs worst terms cpu times hidden variable encoding far best despite fact golomb rulers arc consistency algorithm optimally implemented 
similar results quantitatively regarding branches cpu times obtained variables ordered statically 
static ordering worse dynamic 
bacchus van beek compared performance dual encoding non binary encoding crossword puzzles forward checking :10.1.1.110.7551
direct comparison results reported results reported consistency checks :10.1.1.110.7551
worth mentioning dual encoding puzzle solved fc consistency checks mac solved backtracks 
section investigated ways solving csps arbitrary constraints 
problems solved applying nonbinary algorithms directly encoding rst binary problems applying algorithms binary constraints 
studied ways encoding nary constraints binary dual encoding hidden variable encoding double encoding 
showed worst case asymptotic complexity achieving arc consistency hidden variable encoding complexity achieving generalized arc consistency ary representation 
importantly demonstrated large classes problems asymptotic complexity arc consistency hidden variable encoding better complexity generalized arc consistency non binary constraints de ned intensionally 
experimental results clearly showed hidden variable encoding ective method mac algorithm 
dual encoding expensive large domain sizes dual variables introduces double encoding reduces search space bad run time behaviour large number constraints involves 
comparison mac hidden variable encoding mgac ary representation showed encoding non binary problem binary pay case crossword puzzle generation 
sw showed arc consistency hidden variable encoding non binary csp achieves level consistency generalized arc consistency non binary representation 
results chapter showed encoding ary csps binary hidden variable encoding ecient way achieve level consistency maintain search specialized generalized arc consistency algorithm available 
experimental results showed algorithms maintain lesser cheaper forms consistency bound consistency ecient low cost compared mgac ary representation mac hidden variable encoding 
chapter singleton generalized arc consistency chapters showed achieving high levels consistency generalized arc consistency worthwhile solving ary csps 
question naturally arises study far higher levels consistency generalized arc consistency ective 
showed cases applying algorithms non binary constraints mgac directly ary csp ecient encoding problem binary equivalent solving algorithms binary constraints mac 
true higher levels consistency generalized arc consistency considered 
theoretical experimental study chapter tries answer questions 
numerous consistencies proposed study singleton arc consistency generalization ary constraints introduce 
reasons choosing study consistencies rst closely related generalized arc consistency allow straightforward comparisons second algorithms achieve space complexities third singleton arc consistency identi ed promising ltering technique db 
theoretical experimental study compare arc consistency generalized arc consistency singleton counterparts study chapters compare singleton consistencies 
experimental results demonstrate singleton generalized arc consistency high level consistency worthwhile enforce preprocessing step search 
mainly study decomposable problems give theoretical results non decomposable constraints 
singleton consistencies discussed chapter singleton consistencies introduced bessi ere db 
main advantage singleton consistencies compared consistencies path consistency enforce prune values domains variables 
unary constraints added problem 
hand enforcing path consistency consistency change constraint graph adding new non unary constraints 
property singleton consistencies shared inverse consistencies path inverse consistency neighbourhood inverse consistency restricted path consistency 
primarily interested singleton arc consistency generalization ary constraints note notion singleton consistency general applied level local consistency 
instance problem singleton restricted path consistent non empty domains instantiation variable resulting subproblem restricted path consistent db 
de nition singleton consistency value variable singleton consistent local consistency subproblem resulting assignment consistent 
singleton consistency achieved algorithm achieves relevant local consistency 
lazy approach enforcing relevant local consistency 
example trying achieve singleton arc consistency lazy ac algorithm 
experiments chapter algorithm proposed db achieve singleton arc consistency simple generalization algorithm ary csps achieve singleton generalized arc consistency 
sketch algorithm shown 
achieve singleton arc consistency singleton generalized arc consistency csp algorithm rst achieves arcconsistency generalized arc consistency goes variable value domain checks subproblem fag arc consistent generalized arc consistent 
removed domain arc consistency generalized arc consistency enforced 
failure means singleton arc consistent singleton generalized arc consistent 
process going variables csp continues new inconsistent values detected deleted 
short inner loop loop goes variables outer loop repeat loop keeps process going new values algorithm singleton arc consistency input csp output consistency successfully sac sgac 
inconsistency 
apply ac gac domain wipe return inconsistency repeat changed false variable value pairs reduce fag propagation deletion leads domain wipe fag remove apply ac gac domain wipe return inconsistency changed true changed false return consistency bessi ere algorithm singleton arc consistency 
deleted 
worst case complexity achieving singleton arc consistency assuming optimal arc consistency algorithm ac en 
non binary constraints arity assume gac schema br enforce generalized arc consistency worst case complexity achieving singleton generalized arc consistency en 
specialized case di erent constraints advantage algorithm means singleton generalized arc consistency achieved en worst case complexity number di erent constraints 
reduce average cost algorithm making just pass going variables deleting inconsistent values 
words discarding outer loop bessi ere algorithm 
deletes values achieves lesser level consistency singleton arc consistency singleton generalized arc consistency experimental results show cases cost ective 
call algorithm restricted generalized singleton arc consistency 
theoretical results section de ne singleton generalized arc consistency generalization singleton arc consistency non binary constraints 
give number theoretical results level consistency achieved singleton generalized arc consistency 
prove singleton generalized arc consistency strictly stronger generalized arc consistency 
compare level consistency singleton generalized arc consistency achieves decomposable constraints level consistency achieved singleton arc consistency binary decomposition 
compare level consistency singleton generalized arcconsistency achieves arbitrary non binary constraints level consistency achieved singleton arc consistency hidden variable dual encodings constraints 
de nition csp singleton generalized arc consistent sgac dx fag generalized arc consistent 
words csp singleton generalized arc consistent non empty domains instantiation variable enforcing generalized arc consistency resulting subproblem detect domain wipe 
easily prove singleton generalized arc consistency stronger level consistency generalized arc consistency 
theorem singleton generalized arc consistency strictly stronger generalized arc consistency 
proof de nition sgac stronger gac 
prove strictness consider problem di erent constraints fx fx fx unitary domain variable domain 
problem gac enforcing sgac shows problem insoluble 
example assign resulting problem gac means removed domain true value result domain empty 
psw gives theoretical results regarding singleton consistencies general singleton arc consistency 
results generalizes theorem shows singleton consistency stronger corresponding local consistency local consistency monotonic 
local consistency property monotonic enforcing consistency prunes value variable subproblem formed instantiating variable enforcing consistency prunes value causes domain wipe 
results psw unpublished walsh consistency stronger consistency singleton consistency stronger singleton consistency 
strong consistency strictly stronger singleton consist ency 
singleton consistency incomparable consistency singleton consistency strictly stronger consistency 
bessi ere introduced singleton consistencies proved singleton arc consistency strictly stronger path inverse consistency specialization second result db 
proved strong path consistency strictly stronger singleton arcconsistency specialization third result db 
decomposable constraints decomposable constraints follow analysis gsw reviewed chapter 
gsw generalized arc consistency ary decomposable constraints compared various levels consistency arc consistency singleton arc consistency binary decomposition constraints 
similar study singleton generalized arc consistency 
prove strictly stronger singleton arc consistency binary decomposition 
theorem singleton generalized arc consistency decomposable constraints strictly stronger singleton arc consistency binary decomposition 
proof sgac ensures variable problem instantiated values domain resulting problem gac 
gac decomposable constraints strictly stronger ac binary decomposition available author thesis private communication 
psw wrongly claimed singleton consistency strictly stronger consistency 
error identi ed bessi ere corrected walsh presentation psw cp 
instantiation variable binary decomposition resulting problem ac 
binary decomposition original problem sac 
prove strictness consider problem di erent constraints fx fx fx variables domain 
binary decomposition problem sac enforcing sgac original problem shows insoluble 
example assign gac di erent constraint fx detects inconsistency resulting problem gac 
removed domain similar arguments values removed domain resulting domain wipe 
corollary theorem singleton generalized arc consistency strictly stronger path inverse consistency restricted path consistency binary decomposition 
corollary singleton generalized arc consistency decomposable constraints strictly stronger path inverse consistency restricted path consistency binary decomposition 
proof trivially follows theorem results db proved sac strictly stronger pic rpc 
theorem shows neighbourhood inverse consistency strong path consistency binary decomposition incomparable singleton generalized arc consistency ary representation decomposable constraints 
theorem singleton generalized arc consistency decomposable constraints incomparable neighbourhood inverse consistency strong path consistency binary decomposition 
proof example nic stronger sgac consider problem variables fx di erent constraints fx fx fx fx fx fx variables domain 
problem sgac instantiation variable results problem gac 
enforcing nic shows problem insoluble 
example strong pc stronger sgac consider problem variables fx equals constraints domain domains 
problem sgac enforcing strong pc adds constraint 
example sgac stronger nic consider colouring problem 
variables arranged ring 
variable domain size 
pair neighbouring variables binary decomposition equals constraint 
nonbinary representation post single constraint variables 
problem nic enforcing sgac non binary representation shows problem insoluble 
example sgac stronger strong pc consider di erent constraint variables domain size 
binary representation problem strong pc enforcing sgac shows insoluble 
hidden variable encoding investigate non binary problems decomposable 
case represent binary hidden variable dual encoding 
note theoretical results section previously published 
easy show singleton generalized arc consistency non binary problem achieves higher level consistency arc consistency restricted path consistency path inverse consistency neighbourhood inverse consistency hidden variable encoding problem 
theorem singleton generalized arc consistency non binary problem strictly stronger arc consistency path inverse consistency restricted path consistency neighbourhood inverse consistency hidden variable encoding problem 
proof trivially follows theorem results sw shown rpc pic nic equivalent ac hidden variable encoding equivalent gac original problem 
sw shown enforcing arc consistency hidden variable encoding equivalent enforcing generalized arc consistency original problem 
theorem proves surprisingly move level singleton arc consistency enforcing hidden variable encoding strictly stronger enforcing singleton generalized arc consistency original problem 
theorem achieving singleton arc consistency hidden variable encoding non binary problem strictly stronger achieving singleton generalized arc consistency variables original problem 
proof prove value variable csp singleton generalized arc inconsistent sac hidden variable encoding prune value 
prove value generalized arc inconsistent fag arc inconsistent hidden variable encoding fag generalized arc inconsistent exists constraint including assignment consistently extended variables hidden variable encoding hidden variable corresponding enforcing ac variables remove tuples assign domain considering arc assign tuples domain consistent 
ac prune domain sgac remove value values variable deleted assigned values deleted domain hidden variable encoding fag value singleton arc inconsistent hidden variable encoding 
show strictness consider problem variables fx domain ternary constraints constraint fx allowed tuples constraint fx allowed tuples constraint fx allowed tuples enforcing sgac problem delete values domains variables 
example instantiate enforce gac instantiated value lose supporting tuple third constraint 
variable instantiated similar argument 
pruning done values supporting tuples rst second constraint 
value singleton generalized arc consistent 
similar arguments show values variables singleton generalized arc consistent 
enforcing sac hidden variable encoding show problem insoluble 
take hidden variable corresponding constraint fx example enforcing sac delete tuples domain singleton arc inconsistent 
consider example rst tuples 
instantiated ac enforced variables instantiated respectively 
instantiations force instantiated value lose supporting tuples hidden variable corresponding constraint fx instantiations cause domain wipe hidden variable corresponding constraint fx tuple singleton arc inconsistent 
similar arguments show tuples singleton arc inconsistent means problem singleton arc inconsistent 
practice enforcing singleton arc consistency hidden variable encoding problem ord take account hidden variables constraints tight 
hidden variables prohibitively large domains checking values singleton expensive 
restrict singleton arc consistency hidden variable encoding original variables get level consistency singleton generalized arc consistency original problem 
theorem restricting singleton arc consistency original variables hidden variable encoding equivalent achieving singleton generalized arcconsistency variables original problem 
proof prove value variable csp singleton generalized arc inconsistent sac hidden variable encoding prune value 
value variable singleton arc inconsistent hidden variable encoding sgac original problem prune 
rst part proof theorem 
show sac hidden variable encoding considers original variables pruning sgac non binary representation 
start proving value variable arc inconsistent hidden variable encoding fag generalized arc inconsistent fag arc inconsistent hidden variable encoding exists hidden variable encoding constraint includes tuples left domain assigns fag assignment consistently extended variables gac prune domain sac remove value variable hidden variable encoding ways 
values variable deleted assigned tuples hidden variable deleted 
case lemma deleted values deleted domain original representation fag case domain hidden variable empty values original variables constrained deleted lose supports lemma values deleted original representation fag value singleton generalized arc inconsistent original problem 
dual encoding sw proved arc consistency dual encoding csp strictly stronger generalized arc consistency original problem 
theorem proves singleton arc consistency dual encoding strictly stronger singleton generalized arc consistency original problem 
theorem achieving singleton arc consistency dual encoding strictly stronger achieving singleton generalized arc consistency original problem 
proof prove value variable csp singleton generalized arc inconsistent sac dual encoding prune value 
value variable singleton generalized arc inconsistent exists variable domain empty assigned value deleted loses supporting tuples constraint involved 
loss supporting tuples caused deletions values due assignment assume enforcing sac dual encoding assign tuple dual variable corresponding constraint involves position inside ac prune tuples domains dual variables inconsistent assignment dual variable deleted tuples include ones assign dual variable corresponding constraint derive nogood assigned similar nogoods derived values empty domain means tuple singleton arc inconsistent 
similar arguments tuples singleton arc inconsistent nogood assigned derived 
show strictness consider problem proof theorem 
problem sgac enforcing sac dual encoding show insoluble 
walsh proved singleton generalized arc consistency non binary problem incomparable arc consistency dual encoding problem chen proved singleton arc consistency dual encoding strictly stronger singleton arc consistency hidden variable encoding che 
experimental results bessi ere performed experimental study singleton arc consistency various local consistencies db 
concluded consistencies promising csp solving 
experiments db focus points rst measure ability singleton arc consistency local consistencies approximate global consistency random binary csps 
compare cpu times needed enforce various consistencies 
way identify local consistencies trade amount pruning achieve run times required achieve pruning 
study db leaves questions unanswered 
experiments db tell singleton arc consistency useful complete search algorithms mac 
instance pre processing singleton arc consistency reduce mac search ort justify cost 
ord maintain singleton arc consistency number levels search 

experiments limited random binary problems 
structured problems 
singleton consistencies useful problems 

non binary problems 
worthwhile enforce generalized version singleton arc consistency problems non binary constraints 
having analyzed levels consistency singleton generalized arc consistency achieves decomposable arbitrary ary constraints try answer questions 
run experiments benchmark domains 
start small world problems combine structure randomness 
experiment realistic benchmark structured problems golomb rulers 
proof published available author thesis personal communication 
results show singleton generalized arc consistency useful preprocessing step expensive maintained rst nodes search tree 
small world problems test eciency singleton consistency techniques rst investigate smallworld problems 
explained chapter problems combine structure randomness 
experiments chapter construct graphs small world topology start constraint graph structured problem case quasigroup 
note quasigroup modelled di erent constraints row column cliques binary constraints 
introduce randomness add edges random binary representation 
small world problems created way quickly hard order quasigroup increased 
figures show median number branches explored median cpu time generalized arc consistency singleton generalized arc consistency preprocessing small world problems created randomly adding edges order quasigroup 
generalized arc consistency di erent constraints maintained search 
axis gives percentage added edges total number edges left turn quasigroup complete graph 
problems generated data point 
include singleton arc consistency arc consistency preprocessing figures impact pruning 
surprising nature constraints 
arc consistency binary equals constraint may delete value variables singleton domain 
experiments small world graphs derived quasigroups order 
case initial domains variables values preprocessing arc consistency ect 
likewise singleton arc consistency reduces variable csp singleton value removed domain variables constrained ltering 
experiments try enforce arc consistency subproblem dx fag pruned variables adjacent values domains 
ltering take place subproblem arc consistent 
result singleton arc inconsistent values original problem experiments small world problems chapter figures gac sgac gac sgac search cost preprocessing gac sgac 
left ort measured branches explored right ort measured cpu time seconds 
show clear complexity peak near point edges remaining graph complete added quasigroup 
complexity peak coincides solubility phase transition 
figures show preprocessing singleton generalized arc consistency ecient especially solubility complexity peak insoluble region detected search insoluble instances 
singleton generalized arc consistency preprocessing cost ective soluble instances especially hard ones near complexity peak cuts number branches explored signi cantly 
run times reduced despite high cost preprocessing singleton generalized arc consistency compared generalized arc consistency 
problems distance test singleton consistency techniques class structured non binary problems experiment variety problems distance described chapter 
general class problems introduced ssw models challenging combinatorial problems including golomb rulers interval series 
remind reader problem distance de ned graph nodes labelled integers edges labelled di erence node labels edge constraints edge labels di erent 
ssw model problems variables nodes edges ternary constraints form ij jx limit values edges single di erent constraint edges clique binary equals constraints 
golomb rulers golomb rulers problems distance underlying graph complete 
experiments chapter set maximum length ruler known optimal length solve decision problem nding optimal length 
set maximum length optimal minus try prove optimality 
explained chapter quite small problems fewer fteen marks dicult complete methods backtracking search diculty lies proving optimality nding solution problems unique solution just solutions 
marks ac sac gac sgac restricted sgac table fraction values deleted preprocessing trying nd golomb ruler optimal length prove shorter exists 
table gives fraction deleted values preprocessing local consistency methods arc consistency singleton arc consistency generalized arcconsistency singleton generalized arc consistency restricted singleton generalized arc consistency 
singleton generalized arc consistency preprocessing methods delete high percentage values compared local consistencies 
signi cant ect search ort data table show 
restricted singleton generalized arc consistency deletes values full singleton generalized arc consistency deletes lower cost better option 
demonstrated table 
note generalized arc consistency deletes exactly values arc consistency 
table shows search cost branches cpu time algorithms preprocess arc consistency singleton arc consistency restricted singleton marks branches cpu time ac sac sac ac sac sac table branches explored cpu time seconds trying nd golomb ruler optimal length prove shorter exists 
preprocessing done ac sac restricted sac 
arc consistency 
representation collection constraints auxiliary variables preprocessing search maintain generalized arc consistency di erent constraint ilog solver bounds consistency ternary constraints 
di erence way represent constraints preprocessing search may odd suits experiments 
primarily interested comparing ect various preprocessing techniques search ort 
consistent way need keep search process di erent preprocessing techniques 
chose maintain generalized arc consistency di erent constraints search shown chapter best method 
table shows preprocessing singleton arc consistency deletes considerably values preprocessing arc consistency see table di erence re ected search ort 
preprocessing restricted singleton arc consistency economical run times especially hard instances proving optimality rulers marks 
table shows search ort algorithms preprocess generalized arc consistency singleton generalized arc consistency restricted singleton generalized arc consistency maintain generalized arc consistency see chapter summary various representations golomb ruler problems 
marks branches cpu time gac sgac sgac gac sgac sgac table branches explored cpu time seconds preprocessing golomb rulers gac sgac restricted sgac 
di erent constraint search 
data table showed singleton generalized arc consistency deletes large number values preprocessing cases 
notable ect search 
number explored branches cut especially trying prove optimality despite cost preprocessing gain cpu times harder instances 
restricted singleton generalized arc consistency better option full singleton generalized arc consistency deletes number values ecient cpu times 
comparing results tables shows singleton generalized arc consistency ary decomposable constraints ective singleton arc consistency binary decomposition 
results obtained preprocessing singleton generalized arc consistency step investigate maintaining high level consistency search worthwhile 
results experiments showed maintaining singleton generalized arc consistency depth search rst variable expensive 
trying nd optimal ruler singleton generalized arc consistency enforced instantiating rst variable 
result number branches cut signi cantly runtimes higher 
trying prove optimality singleton generalized arc consistency enforced value rst variable tried 
gain branches runtimes higher 
golomb rulers interval series psw applicability singleton consistencies evaluated randomly generated problems addition small world problems problems distance 
experimental results random problems suggest singleton consistencies show promise sparser problems 
happens problems distance underlying graph associated constraint graph sparser golomb ruler complete graph 
example golomb ruler layers cliques edges node clique node clique 
golomb ruler layers constraint graph approximately edges golomb ruler size 
marks branches cpu time gac sgac sgac gac sgac sgac table branches explored cpu time seconds gac sgac restricted sgac preprocessing golomb rulers 
table shows search ort algorithms preprocess generalized arc consistency singleton generalized arc consistency restricted singleton generalized arc consistency maintain generalized arc consistency di erent constraint search 
singleton generalized arc consistency preprocessing reduces number branches cpu times harder instances rulers marks ect signi cant case 
sparser problem distance interval series problem 
series problems distance underlying graph simple ring 
associated constraint graph sparse compared golomb rulers 
case interval series preprocessing singleton arc consistency singleton generalized arc consistency effect values pruned 
enforcing singleton arc consistency singleton generalized arc consistency depth little impact number branches explored increased runtimes 
conclude experimental results problems distance show preprocessing singleton consistencies cost ective large unsatis able problems underlying graph dense 
sparser problems singleton consistencies tend pruning result signi cant ect search ort 
maintaining singleton consistencies branches tends expensive 
may case larger problems ones experimented 
may case maintaining singleton consistencies gives exponential savings search space cost enforcing node 
issue needs empirical investigation 
chapter performed theoretical empirical study singleton arcconsistency generalization ary constraints 
theoretical analysis proved singleton generalized arc consistency strictly stronger generalized arc consistency strictly stronger singleton arcconsistency binary decomposition decomposable ary constraints 
proved surprisingly singleton arc consistency hidden variable representation arbitrary ary constraints strictly stronger singleton generalized arc consistency original constraints 
experimental result showed singleton generalized arc consistency high level consistency worthwhile solving ary csps 
especially useful preprocessing ary csps cases gains compared preprocessing generalized arc consistency signi cant 
problems decomposable constraints singleton generalized arc consistency ecient enforce preprocessing singleton arc consistency 
singleton consistencies expensive maintained search experiments performed 
issue needs examination 
study demonstrates bene ts applying high levels consistency solving ary csps 
chapter real world csps naturally modelled ary constraints 
investigating ways represent solve problems ary constraints clear practical importance 
thesis empirical theoretical study ways representing solving ary csps 
shown way ary problems represented depends nature constraints signi cant impact search ort required solve 
trying solve problem ary constraints basic choices model represent problem 
convert problem equivalent binary leave non binary representation 
convert problem binary widely studied algorithms heuristics binary constraints solve problem 
leave problem ary representation studied algorithms heuristics ary constraints 
thesis tried identify methods ecient circumstances 
extensive empirical theoretical study comparison di erent methods decomposable constraints arbitrary non decomposable constraints 
focused primarily algorithms maintain arc consistency generalization ary constraints compared ect applied directly ary representation compared binary encoding 
important results contributions thesis reviewed 
theoretical results proved theoretical results algorithms main tain domain ltering local consistencies arc consistency prune values variables search 
proved algorithm maintains local consistency property visits search tree nodes algorithm maintains local consistency stronger helped prove algorithm maintains generalized arcconsistency directly ary representation decomposable csp dominates terms visited nodes algorithm maintains arc consistency binary representation problem 
corrected error regarding complexity arc consistency binary equals constraints 
worst case time complexity ed previously claimed 
decomposable constraints studied empirically ect choice representation problems decomposable constraints 
empirical study various benchmark problems modelled decomposable constraints speci cally di erent constraints 
experimental results clearly showed ary representation ef cient binary 
problem purely decomposable constraints quasigroup completion small world graphs substantial di erence favour ary representation dramatic impact search ort 
example benchmark quasigroup completion problem largely trivial modelled ary constraints 
demonstrates loss semantics incurred encoding ary decomposable constraints binary negative ect 
problem consists decomposable constraints advantages non binary representation decomposable constraints spectacular 
non binary representation ecient 
shown generalized arc consistency decomposable constraints achieves higher level consistency arc consistency binary decomposition 
empirical results displayed practical importance achieving high levels consistency 
arbitrary non decomposable constraints studied impact choice representation problems arbitrary ary constraints 
compared ect achieving generalized arc consistency ary representation ect achieving arc consistency binary encodings problems dual hidden variable double encodings 
results showed generalized arc consistency general expensive maintain search generic generalized arc consistency algorithm high complexity 
demonstrated encoding problem binary hidden variable encoding ective technique 
hidden variable ecient binary encodings studied 
dual encoding inecient compared hidden variable encoding large domain sizes variables introduces 
double encoding reduces search space increases run times large number constraints involves 
addition hidden variable encoding practical compared ary representation 
asymptotic time complexity achieving arc consistency hidden variable encoding general case complexity achieving generalized arcconsistency ary representation 
showed classes problems arc consistency hidden variable encoding achieved better asymptotic complexity 
sw shown arc consistency hidden variable encoding achieves level consistency generalized arc consistency ary representation 
experimental results showed hidden variable encoding achieve maintain level consistency eciently 
experiments showed arbitrary ary constraints special semantics exploit maintaining lower levels consistency generalized arc consistency cost ective 
singleton consistencies having displayed importance achieving high levels consistency generalized arc consistency studied higher levels consistency 
studied singleton arc consistency generalization ary constraints 
proved theoretical results consistencies studied empirically 
proved singleton generalized arc consistency decomposable constraints stronger singleton arc consistency binary decomposition 
proved singleton generalized arc consistency arbitrary ary constraints weaker singleton arc consistency hidden variable representation constraints 
experiments compared arc consistency generalized arc consistency singleton counterparts 
compared singleton consistencies 
results showed achieving high levels consistency singleton generalized arc consistency worthwhile preprocessing step 
preprocessing generalized singleton arc consistency reduces search space run times bench mark domains 
singleton consistencies expensive maintained search 
demonstrated importance choice representation ary csps 
csps special constraints decomposable constraints showed binary conversion looses crucial part constraints semantics eciently exploited ary representation problems easier 
arbitrary ary constraints showed encoding binary hidden variable encoding pay encodings expensive 
showed enforcing high levels consistency singleton generalized arc consistency ective solving ary problems 
believe research community needs focus issues regarding ary constraints real world problems demonstrate choice way represent important ect ort required solve 
study ways solving ary csps means complete 
issues require investigation aspects ary problems addressed 
discuss 
theory theoretical results chapter extended algorithms maintain level local consistency domain ltering consistencies 
case proving algorithm maintains property dominates algorithm maintains property may complicated enforcing add new non unary constraints network 
decomposable constraints experimental study decomposable constraints chapter limited problems common decomposable constraint di erent constraint 
important investigate similar results apply problems decomposable constraints 
specialized ltering algorithms decomposable constraints interesting see ect theoretical di erence generalized arc consistency arc consistency number branches explored representations 
expect similar results case di erent constraint respect branches smaller differences cpu times specialized generalized arc consistency algorithms available 
exploiting structure ary csps devising ecient algorithms speci non binary constraints 
shown class decomposable constraints greatly bene non binary representation constraints ecient ltering algorithm exists 
identifying classes constraints similar properties important 
generalized search algorithms improving eciency generalized algorithms non binary constraints 
results chapter showed generalized arc consistency expensive maintain search specialized algorithm achieve exists 
suggests interesting topics research 
trying improve eciency generalized arc consistency algorithms 
br proposed ideas achieve 
second investigating applicability cheaper algorithms generalized arc consistency 
example generalized forward checking algorithms 
algorithms weaker algorithm maintains generalized arc consistency may practical lower cost 
issue needs empirical investigation 
arc consistency binary encodings improving eciency arcconsistency algorithms hidden variable dual encodings ary csps 
chapter showed maintaining arc consistency hidden variable encoding ary csps ecient way maintaining high level consistency 
arc consistency algorithm optimally implemented 
optimal implementation need exploit fact binary constraints hidden variable encoding useful properties 
example functional arc consistency enforced pass binary constraint encoding ary constraint 
interesting investigate similar optimizations applied dual encoding 
high levels local consistency investigation higher levels local consistency generalized arc consistency chapter local consistency considered singleton arc consistency 
de nition local consistency extended non binary csps evaluated experimentally 
various levels local consistencies binary problems proposed discussed chapter 
local consistencies path consistency path inverse consistency neighbourhood inverse consistency de ned non binary case 
de ning consistencies non binary problems straightforward case singleton arc consistency 
interesting propose de nitions consistencies non binary csps evaluate theoretically practically 
algorithms achieve levels consistency higher generalized arc consistency high complexities general case maintaining search prohibitively expensive 
considered preprocessing large hard csps 
demonstrated chapter ective 
worthwhile exploring maintaining high levels consistency restricted parts problem pay example imagine algorithm maintains inverse consistency singleton consistency neighbourhood current variable cheaper form look ahead rest problem look ahead 
bibliography ah andersen hilton 
evans 
proceedings london mathematical society volume pages 
bac bacchus 
extending forward checking 
proceedings sixth international conference principles practice constraint programming cp september 
bc bessi ere cordier 
arc consistency arc consistency 
proceedings aaai pages washington 
bc 
introducing global constraints chip 
journal mathematical computer modelling 
ber 
improving domain ltering restricted path consistency 
proceedings 
bes bessi ere 
arc consistency arc consistency 
arti cial intelligence 
bfr bessi ere freuder 
inference reduce arc consistency computation 
proceedings ijcai pages 
bg bacchus grove 
forward checking algorithm 
proceedings international conference principles practice constraint programming cp pages september 
blp le pape 
theoretical experimental comparison constraint propagation techniques disjunctive scheduling 
proceedings ijcai volume pages 
le pape nuijten 
constraint optimization approximation job shop scheduling 
proceedings aaai sigman workshop intelligent manufacturing systems ijcai 
bessi ere meseguer freuder larrosa 
forward checking non binary constraint satisfaction 
proceedings fifth international conference principles practice constraint programming cp pages october 
bor 
formulation selection constraint satisfaction problems heuristic approach 
phd thesis university essex united kingdom 
br bessi ere 
mac combined heuristics reasons fc cbj 
proceedings cp pages 
br bessi ere 
arc consistency general constraint networks preliminary results 
proceedings ijcai pages 
br bessi ere 
enforcing arc consistency global constraints solving subproblems proceedings fifth international conference principles practice constraint programming cp pages october 
bre 
new methods color vertices graph 
jacm 
bs jr bayardo schrag 
csp look back techniques solve real world sat instances 
proceedings aaai pages 
bacchus van beek :10.1.1.110.7551
conversion non binary binary constraint satisfaction problems 
proceedings fifteenth national conference arti cial intelligence madison wisconsin usa july 
cd diaz 
compiling constraints clp fd 
journal logic programming 
che chen 
theoretical comparison selected csp solving modeling techniques 
phd thesis university alberta canada 
cj 
new constraint propagation algorithms requiring small space complexity 
proceedings pages toulouse france 
cheeseman kanefsky taylor 
really hard problems 
proceedings ijcai volume pages 
cl caseau laburthe 
claire combining objects rules problem solving 
proceedings jicslp workshop multiparadigm logic programming 
col 
embedding partial steiner triple systems npcomplete 
journal combinatorial theory 
cp carlier pinson 
algorithm solving job shop problem 
management science 
csp benchmark library constraint satisfaction problems url cs strath ac uk 
db bessi ere 
restricted path consistency path consistency 
proceedings cp pages 
db bessi ere 
practicable ltering techniques constraint satisfaction problem 
proceedings th ijcai pages 
ddl little 
properties combinatorial optimization problems ect performance integer programming constraint logic programming informs journal computing 
deb 
property path inverse consistency leading optimal pic algorithm 
technical report lirmm montpellier france 
dec dechter 
enhancement schemes constraint processing backjumping learning cutset decomposition 
arti cial intelligence 
dec dechter 
constraint networks survey 
encyclopedia arti cial intelligence pages 
dm dechter meiri 
experimental evaluation preprocessing algorithms constraint satisfaction problems 
arti cial intelligence 
dm dent mercer 
minimal forward checking 
proceedings th international conference tools arti cial intelligence pages 
dmp dechter meiri pearl 
temporal constraint networks 
arti cial intelligence 
dp dechter pearl 
network heuristics constraint satisfaction problems 
arti cial intelligence 
dp dechter pearl 
tree clustering constraint networks 
arti cial intelligence 
deville van hentenryck 
ecient arc consistency algorithm class csp problems 
proceedings ijcai pages sydney australia 
ecl eclipse user manual 
ecrc munich 
eva evans 
embedding incomplete latin squares 
american mathematics 
fd frost dechter 
dead driven learning 
proceedings national conference arti cial intelligence aaai pages 
fd frost dechter 
search best constraint satisfaction search 
proceedings national conference arti cial intelligence aaai pages 
fd frost dechter 
look ahead value orderings constraint satisfaction problems 
proceedings ijcai pages 
fe freuder 
neighborhood inverse consistency preprocessing 
proceedings national conference arti cial intelligence aaai pages 
fh fernandez hill 
comparative study constraint programming languages boolean finite domains 
constraints 
fre freuder 
synthesizing constraint expressions 
communications acm 
fre freuder 
sucient condition backtrack free search 
journal acm 
fre freuder 
sucient condition backtrack bounded search 
journal acm 
fru fruhwirth 
constraint handling rules 
podelski editor constraint programming basics trends number lncs pages 
springer verlag 
fujita slaney bennett 
automatic generation results nite algebra 
proceedings ijcai pages 
gas gaschnig 
general backtrack algorithm eliminates redundant tests 
proceedings international joint conference arti cial intelligence volume page melbourne beach florida usa 
gas gaschnig 
performance measurement analysis certain search algorithms 
technical report cmu cs carnegie mellon university pittsburgh pa 
gee 
dual viewpoint heuristics binary constraint satisfaction problems 
proceedings tenth european conference arti cial intelligence ecai pages 
ginsberg frank halpin torrance 
search lessons learned crossword puzzles 
proceedings aaai national conference pages 
gin ginsberg 
dynamic backtracking 
journal arti cial intelligence research 
gmp gent macintyre prosser smith walsh 
empirical study dynamic variable ordering heuristics constraint satisfaction problem 
proceedings second international conference principles practice constraint programming cp pages august 
gent macintyre prosser walsh 
search 
proceedings aaai pages 
gs gomes selman 
algorithm portfolio design theory vs practice 
proceedings uai providence ri usa 
gs gomes selman 
problem structure presence perturbations 
proceedings aaai national conference pages providence ri usa 
gs gent smith 
symmetry breaking search constraint programming 
proceedings ecai pages 
gsc gomes selman crato 
heavy tailed probability distributions combinatorial search 
proceedings cp pages vienna austria 
gsw gent walsh 
decomposable constraints 
apt rossi editors new trends constraints number lnai pages 
springer verlag 
gsw gent walsh 
decomposable constraints 
arti cial intelligence 
gu gent underwood 
logic search algorithms theory applications 
proceedings third international conference principles practice constraint programming cp pages 
gw gent walsh 
satis ability constraint gap 
arti cial intelligence 
gw gent walsh 
analysis heuristics number partitioning 
computational intelligence 
haralick elliot 
increasing tree eciency satisfaction problems 
arti cial intelligence 
hg harvey ginsberg 
limited discrepancy search 
proceedings ijcai volume pages montreal canada 
hoo hoos 
stochastic local search methods models applications 
phd thesis computer science department technical university darmstadt germany 
kum kumar 
algorithms constraint satisfaction problems survey 
arti cial intelligence magazine 
van beek 
theoretical evaluation selected backtracking algorithms 
proceedings th international joint conference arti cial intelligence ijcai pages montreal canada 
van beek 
theoretical evaluation selected backtracking algorithms 
arti cial intelligence 
ky keng yun 
planning scheduling methodology constrained resources problem 
proceedings ijcai pages 

consistency techniques numeric csps 
proceedings ijcai pages 
lve lee van emden 
interval computation deduction chip 
journal logic programming 
mac mackworth 
consistency networks relations 
arti cial intelligence 
mcc mccune 
davis putnam program application finite order model search quasigroup existence problems 
technical report anl mcs tm argonne national laboratory 
available www unix mcs anl gov ar mace 
mes meseguer 
constraint satisfaction problems overview 
ai communications 
mf mackworth freuder 
complexity polynomial network consistency algorithms constraint satisfaction problems 
arti cial intelligence 
mh mohr henderson 
arc path consistency revisited 
arti cial intelligence 
mm mohr masini 
old discrete relaxation 
proceedings ecai pages 
mon montanari 
networks constraints fundamental properties applications picture processing 
information science 
mw meseguer walsh 
interleaved discrepancy search 
proceedings ecai 
na nuijten aarts 
computational study constraint satisfaction multiple capacitated job shop scheduling 
european journal operational research 

consistent labeling problems algorithms expected complexities theory heuristics 
arti cial intelligence 

selection constraint satisfaction case study queens 
ieee expert pages 
nuijten 
time resource constrained scheduling constraint satisfaction approach 
phd thesis department mathematics computer science eindhoven university technology 
perlin 
arc consistency factorable relations 
arti cial intelligence 
pro prosser 
hybrid algorithms satisfaction problem 
computational intelligence 
pro prosser 
forward checking backmarking 
constraint processing lncs 
pro prosser 
mac cbj maintaining arc consistency con backjumping 
technical report strathclyde university glasgow scotland 
pro prosser 
empirical study phase transitions binary satisfaction problems 
arti cial intelligence 
ps smith 
integer linear programming constraint programming approaches template design problem 
informs journal computing 
psw prosser walsh 
singleton consistencies 
proceedings cp 
pug puget 
satis ability symmetrical constraint satisfaction problems 
proceedings th international symposium methodologies intelligent systems ismis number lncs pages 
pug puget 
implementation clp 
technical report ilog france 
pur jr purdom 
search rearrangement backtracking polynomial average time 
arti cial intelligence 

ltering algorithm constraints di erence csps 
proceedings aaai pages 

generalized arc consistency global cardinality constraint 
proceedings aaai pages 

symmetric di erent constraint 
proceedings ijcai pages 
rp puget 
ltering algorithm global sequencing constraints 
proceedings cp pages 
rpd rossi petrie dhar 
equivalence constraint satisfaction problems 
proceedings ninth european conference arti cial intelligence ecai pages stockholm sweden 
wallace 
new approach mixed integer programming clp 
annals operations research 
appear 
sax saxe 
dynamic programming algorithms recognizing small bandwidth graphs polynomial time 
siam journal algebraic discrete methods 
sb simonis 
note prob 
smith williams 
progressive party problem integer linear programming constraint programming compared 
constraints 
sd smith dyer 
locating phase transitions constraint satisfaction problems 
arti cial intelligence 
sf sabin freuder 
contradicting conventional wisdom constraint satisfaction 
proceedings ecai pages 
sin singh 
path consistency revisited 
proceedings washington 
sk koubarakis 
backtracking algorithms disjunctions temporal constraints 
proceedings fifteenth national conference arti cial intelligence pages madison wisconsin usa 
sk koubarakis 
backtracking algorithms disjunctions temporal constraints 
arti cial intelligence 
sla slaney 
finder finite domain enumerator notes guide 
technical report tr arp automated reasoning program australian national university 
sme 
new construction latin squares proof evans conjecture 
ars xi pages 
smo smolka 
oz programming model 
jan van leeuwen editor computer science today number lncs pages 
springer verlag 
schiex verfaillie 
lazy arc consistency 
proceedings th national conference arti cial intelligence aaai pages portland oregon 
ssw shaw walsh 
arc consistency quasigroup completion 
proceeding ecai workshop non binary constraints brighton uk 
ssw smith walsh 
modelling golomb ruler problem 
proceedings ijcai workshop non binary constraints stockholm 
ssw smith walsh 
auxiliary variables implied constraints model non binary problems 
proceedings th national conference arti cial intelligence aaai austin texas 
sw walsh 
di erence di erence 
proceedings ijcai 
sw walsh 
encodings non binary constraint satisfaction problems 
proceedings aaai pages 
tar yannakakis tarjan 
simple linear time algorithms test graphs test acyclicity hypergraphs selectively reduce acyclic hypergraphs 
siam journal computing 
tsa tsang 
foundations constraint satisfaction 
academic press 
vbc van beek chen 
constraint programming approach planning 
proceedings aaai pages 
vbd van beek dechter 
minimality global consistency row convex constraint networks 
journal acm 
peter van beek dennis 
design experimental analysis algorithms temporal reasoning 
arti cial intelligence research 
vh van hentenryck 
constraint satisfaction logic programming 
mit press 
van hentenryck deville teng :10.1.1.29.597:10.1.1.29.597
generic arc consistency algorithm specializations 
arti cial intelligence 
martinez bessi ere 
generic customizable framework inverse local consistency 
proceedings aaai pages orlando miami 
wal walsh 
depth bounded discrepancy search 
proceedings ijcai 
wal walsh 
search small world 
proceedings ijcai 
wal walsh 
sat csp 
proceedings cp 
ws watts strogatz 
collective dynamics small world networks 
nature 
zab zabih 
applications graph constraint satisfaction problems 
proceedings aaai pages 
zm zhang stickel implementing davis putnam algorithm tries 
technical report university iowa 
zz zhang zhang 
sem system enumerating models 
proceedings ijcai volume pages 

