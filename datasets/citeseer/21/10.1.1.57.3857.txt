ctl model checking spin willem visser howard barringer department computer science manchester university cs man ac uk 
describe efficient ctl model checking algorithm alternating automata games 
ctl formula expressing correctness property translated hesitant alternating automaton composed kripke structure representing model checked resulting automaton checked nonemptiness 
introduce nonemptiness game checks nonemptiness hesitant alternating automata haa 
way alternating automata generalises nondeterministic automata show game checking nonemptiness haa generalises nested depth algorithm check nonemptiness nondeterministic buchi automata spin 
nearly decades model checking popular method analysing correctness designs ce qs 
model checker performs task checking correctness property expressed temporal logic valid model design 
popularity large extent due fact model checking task automated checking finite state systems 
temporal logics popular property description languages describe event orderings having introduce time explicitly 
main kinds temporal logics linear branching lam 
linear temporal logics moment time unique possible branching temporal logics moment time possible futures 
efficient model checking algorithms linear time temporal logic developed exploiting close relationship temporal logic nondeterministic automata infinite words vw vw 
essentially formula construct nondeterministic buchi automata nba accepts input language formula 
model checking reduces checking nonemptiness product automaton formula kripke structure checked 
shown similar approach taken branching time temporal logic hesitant alternating automata infinite trees haa ber 
show efficient model checking done branching time logic ctl giving efficient algorithm checking nonemptiness hesitant alternating automata 
show nonemptiness check reformulated player game call nonemptiness game 
develop novel way playing called new games ensuring results obtained nonemptiness game reused stages algorithm space time efficient 
show specifying properties ltl ctl optimise nonemptiness game reducing number new games required 
fact case combine rules playing ltl games ctl games nonemptiness checking full ctl furthermore easy see ltl nonemptiness game reformulation nested depth search testing nonemptiness nba 
extra rules required ctl nonemptiness games capture extra expressive power branching time fragment ctl rest structured follows 
section contains syntax semantics ctl section describes automata theoretic ltl model checking including description nested depth search spin check nonemptiness nba 
section describes automata theoretic ctl model checking haa including brief description translation formulas haa 
section describes nonemptiness game haa new games section give rules playing optimised games ltl ctl ctl section briefly discuss issues considering implementation approach spin 
section concluding remarks 
syntax semantics ctl ctl express linear branching time properties expressive linear time logic ltl lp branching time logic ctl ces 
fact logics ctl technical convenience positive ctl formulas formulas negations applied atomic propositions 
ctl formula transformed positive form pushing negations inward far possible de morgan laws dualities 
types formula ctl formulas satisfaction related states state formulas satisfaction related paths path formulas 
set atomic propositions 
syntax ctl state path formulas bnf rules true false ap ep xp exists referred path quantifiers release path operators 
ctl ltl defined ctl occurrence path operator immediately preceded path quantifier 
ltl formulas form ap state subformulas propositions 
semantics ctl defined respect kripke structure set atomic propositions set states theta transition relation total exists initial state maps state set atomic propositions true state 
successor predecessor branching degree number successors state denoted 
path infinite sequence states 
suffix denoted indicates state formula holds state indicates path formula holds path kripke structure written clear context 
relation inductively defined ffl true false ffl iff ffl iff ffl iff ffl iff ffl iff path ffl iff exists path ffl state formula iff ffl iff ffl iff ffl iff ffl iff ffl iff state satisfies path path state satisfies path satisfies state formula initial state path 
holds path satisfied state path holds path holds path true 
dual referred release operator holds path remains true releases path obligation 
known abbreviations true false 
automata theoretic ltl model checking linear time temporal logics notably ltl close relationship nondeterministic automata established vw vw 
essentially linear time formula automaton infinite words associated accepts exactly computations satisfy formula 
consider kripke structure automaton call ak automaton describing formula model checking described language containment problem ak 
rewritten nonemptiness problem intersecting automata ak 
nondeterministic buchi word automata ltl formulas express properties infinite behaviours automata accept infinite sequences words required 
nondeterministic buchi automata nba accept infinite sequences automata theoretic ltl model checking vw vw 
buchi automaton tuple sigma ae sigma finite alphabet finite set states initial state ae theta sigma transition function set accepting states 
intuitively ae set states move reads symbol state move set states buchi automaton general case set initial states model checking require single initial state 
nondeterministic 
infinite word sigma input run sequence ae refer run path states 
define inf set states occur infinitely infinite path accepting path iff inf 
kripke structure viewed buchi automaton ak sigma ae sigma ae iff 
automaton ak accepting set states automaton run automaton accepting 
ak set computations possible behaviours vw proven ltl formula buchi automaton constructed set computations satisfies formula number states 
furthermore buchi automata holds 
general hold buchi automata theta implies automata go infinitely simultaneously accepting states 
states ak accepting ak theta ak 
automata ltl model checking described steps 
negate formula create nba 
construct product automaton ak theta 
ak report invalid report valid 
nonemptiness checking buchi automaton accepts word iff exists accepting state reachable initial state vw 
easy see linear time algorithm exists find accepting state decompose state graph automaton sccs done time linear size automaton tar automaton nonempty iff accepting state exists sccs 
checking buchi automaton accepts word done time linear size automaton ltl formula translated buchi automaton states gives model checking complexity jsj theta jsj number states kripke structure checked 
courcoubetis show nonemptiness check buchi automaton computation sccs avoided 
note constructing sccs memory efficient states sccs stored procedure 
idea nested depth search find accepting states reachable 
algorithm 
data structure usually hash table keeps track states seen search 
algorithm works follows search backtracks accepting state second search started look cycle state 
stated memory requirements nested depth search double single depth search gh shown bits need added state separate states stored 
unfortunately time double states automaton reachable searches cycles accepting states 
dfs state add successor dfs accepting state seed dfs dfs state add successor dfs elsif seed report nonempty fig 

nested dfs model checkers spin hol probably widely estimation puts number installations hol spread commercial academic usage 
correctness properties spin specified called claim essentially buchi automaton expressing unacceptable behaviour name claim 
checking nonemptiness automaton comprising product claim model system done nested depth algorithm shown hol 
product automaton built fly depth search memory efficiency 
interface doing ltl model checking exists translating ltl formula claim buchi automaton 
automata theoretic ctl model checking automata theoretic counterpart branching time temporal logic automata infinite trees vw 
branching time linear time satisfiability model checking complexity coincide model checking typically easier checking satisfiability 
nondeterministic tree automata compete gap essentially translation formulas automata incur exponential blow size 
nondeterministic tree automata basis model checking resulting algorithm time complexity exponential size temporal formula 
nondeterministic automata traditionally automata theoretic model checking certain branching time temporal logics model checking linear ctl automata theoretic techniques considered inapplicable branching time model checking 
ber shown alternating automata infinite trees automata theoretic counterpart branching time temporal logics allows efficient model checking 
alternating automata generalise nondeterministic automata express existential universal choice nondeterministic automata express existential choice 
fact name refers automaton ability alternate existential universal choice 
order define alternating automata interest definition required set set positive boolean formulas boolean formulas built elements formulas true false allowed 
ae satisfies fi fi satisfied assigning true members false gamma example set fs satisfies formula set fs 
show difference nondeterministic alternating buchi word automata aid function defined 
nondeterministic buchi word automaton sigma ffi transition function ffi maps state input symbol sigma set states indicating possible nondeterministic choice automaton state 
function ffi represented example ffi fs written ffi alternating automata ffi arbitrary formula example ffi meaning automaton accepts word aw symbol word accepts state accepts states transition combines existential choice disjunction universal choice conjunction 
alternating tree automata alternating tree automaton tuple sigma ffi 
sigma finite alphabet ae finite set branching degrees finite set states initial state acceptance condition type condition depends type alternating automata types discussed ffi theta sigma theta theta partial transition function ffi gamma theta sigma ffi defined 
run alternating automaton tree tree root labelled node labelled element theta node corresponds node node labelled describes copy automaton reads node state note nodes correspond node labels node successors satisfy transition function 
run accepting infinite paths satisfy acceptance condition example buchi acceptance condition satisfied infinite path iff inf 
note get finite branches tree representing run true false read transition function 
accepting run true leaves path containing false trivially accepting 
example consider transition function ffi 
automaton state reads input branching degree input tree read successor states state input tree automaton copies due ffi proceed different ways 
possibility copy automaton proceeds state input copy reads direction input tree considered successor state tree read copy automaton go state read input direction input tree say direction second successor state read 
fact possibilities automaton proceed summarised ffl copy proceeds direction state copy proceeds direction ffl copy proceeds direction state copy proceeds direction ffl copy proceeds direction state copy proceeds direction ffl copy proceeds direction state copy proceeds direction weak alternating automata introduced muller mss types alternating automata reasoning temporal logic 
example mss explain complexity decision procedures certain temporal logics 
define linear time algorithms model checking ctl ber 
defined bounded alternation allow space efficient ctl model checking 
fact shown ctl model checking nlogspace size kripke structure 
weak alternating automaton defined follows 
firstly uses buchi acceptance condition set states partitioned disjoint sets accepting set rejecting set 
furthermore partial order exists collection sets occurs ffi sigma transitions lead states lower 
infinite path run get trapped accepting path satisfies acceptance condition 
unfortunately model checking ctl ctl define languages weakly definable 
stronger acceptance condition required automata corresponding ctl formulas 
ber hesitant alternating tree automata haa defined restricted transition structure powerful acceptance condition 
exists partial order disjoint sets furthermore set classified transient existential universal sigma holds ffl transient ffi contains elements examples assume fs ffi ffi ffl existential ffi contains disjunctively related elements examples assume fs ffi ffi existential set ffi ffl universal ffi contains conjunctively related elements examples assume fs ffi ffi universal set ffi acceptance condition pair sets states 
restricted structure haa follows infinite path oe get trapped existential universal set path satisfies iff existential inf oe universal inf oe 
define subclass haa called haa set contains state partial order 
vis shown haa automata theoretic counterpart ctl haa general correspond ctl formulas 
translating ctl haa discuss informally translation ctl formulas haa 
interested reader referred ber detailed analysis translation 
maximal state subformulas formula max need defined maximal state subformula state subformula state subformula state subformula 
example af xq max fq 
secondly observe complementing haa sigma ffi sigma ffi ffi defined switching true false values symbols 
example ffi true ffi false 
step translation build haa formulas max 
formula rewritten formulas max replaced atomic propositions 
formula consists path modalities preceded path quantifier propositions state formulas linear time formula preceded consider case ff linear time formula 
informally idea build haa alphabet sigma max ff expand alphabet sigma haa formulas max ff 
formula haa negation pushed inside propositions built fashion complemented 
construction haa crucial point construction nondeterministic buchi word automaton accepts infinite words recognised 
simple translation exists automaton haa see ber 
unfortunately buchi word automaton exponential size vw 
results complete translation ctl formula haa exponential 
note translate linear time formula alternating buchi word automaton translation known linear mss reduction letter nonemptiness problem see section crucial efficient model checking impossible alternating buchi word automata valid nondeterministic buchi word automata ber 
example consider ctl formula 
form need negate complement haa egf note need construct haa maximal formula proposition 
nondeterministic buchi word automaton gf transition relation pg pg fpg fpg accepting set fq initial state 
implemented optimised version algorithm create buchi word automata linear time formulas 
construct haa egf ffi pg ffi fpg gamma gamma gamma gamma acceptance condition fq fg initial state haa defined alphabet pg remains complement get haa call haa ffi pg ffi fpg gamma gamma gamma gamma acceptance condition fg fq initial state nonemptiness checking haa consider general approach automata theoretic branching time model checking 
recall linear time temporal logic kripke structure may correspond infinitely computations 
model checking reduced checking inclusion set computations allowed kripke structure language automata describing formula section 
branching temporal logic kripke structure corresponds single nondeterministic computation 
model checking reduced checking membership computation language automaton describing formula wol 
suggests automata model checking algorithm 
branching temporal formula kripke structure degrees 
construct alternating automaton formula ad 
construct product alternating automaton thetaa automaton simulates run ad tree induced kripke structure 
language accepted nonempty holds 
nonemptiness check haa required check ctl properties general nonemptiness check haa done efficiently ber 
fortunately product kripke structure results letter haa words haa sigma nonemptiness check done linear time ber 
define product automaton 
ad ffi haa accepts exactly trees satisfy kripke structure degrees product automaton haa word automaton fag theta ffi theta theta ffi defined number successors ffl gamma ffi ff 
ffi ff ff obtained ff replacing atom ff sc 
run alternating automata tree sequel display tree tree infinite branch truncated node revisited branch 
product automaton displayed fashion note show choices successor state exists product automaton 
example consider product automaton kripke structure haa ctl formula tree 
illustrate product obtained show run proceeds initial state 
initial state automaton state takes input label state input tree induced kripke structure ffi pg fig 

kripke structure pgg fx hg ffi pg ffi fpg gamma gamma gamma gamma true fig 

haa ad ff pg ffi fg fg consider successor second successor get ffi pg displayed graphically 
note branches reach state trivially accepting true read transition function 
branches infinite acceptance determined acceptance condition fg fg infinite branches component accepting universal set inf infinite branches component infinite branches component accepting existential set inf infinite branches component 
infinite branches component avoided picking option choice reach trivial accepting state follows run alternating automata accepting 
nonemptiness game emerson jutla game theory combination temporal logic ej 
infinite borel games show satisfiability checking ctl deterministic double exponential time 
stirling showed ehrenfeucht fraiss games capture expressive power extremal fixed point operators calculus sti 
best knowledge stirling player games model checking sti reformulated model checking problem calculus player game 
show nonemptiness check haa formulated player game 
refer game nonemptiness game 
show formulating nonemptiness problem haa game main advantages game simple played prior knowledge automata theoretic details 
game improve worst case complexity nonemptiness check haa leads simple efficient implementation checking nonemptiness haa 
fig 

tree product automaton theta ad nonemptiness game defined player game player try show haa empty whilst player try establish nonempty 
play game possibly infinite sequence positions form position node tree case product haa formula kripke structure 
player move determined structure tree player brandy moves choice player port choice players take turns case standard games 
winner play determined node labelled true port wins false brandy wins play position current play revisited 
position play revisited represents scenario infinite path product haa need consider acceptance condition determine player wins play 
recall acceptance condition infinite path haa 
gets trapped existential inf 
gets trapped universal inf define set positions play positions current play play visited infinitely play existential contain disjunctively related elements port making choices move universal hand contain conjunctively related elements brandy move 
definitions existential universal sets combined sufficient define winning conditions play summarised 
positions game setting equivalent states automata setting 
player names reflect player moves brandy port 
player brandy wins player port wins play reaches false play reaches true move port revisits position move port revisits position current play play current play play move brandy revisits position move brandy revisits position current play play current play play fig 

winning conditions play nonemptiness game intentions players making moves backwards sound rule combine results plays brandy port moves position play start winning play brandy port brandy port wins player winning strategy game player win play game position regardless opponent moves 
theorem 
player port winning strategy nonemptiness game initial state haa iff language accepted haa nonempty 
proof correctness theorem follows directly construction winning conditions game play game essentially checking acceptance possibly infinite path haa 
winning position labels indicate player port port port port port port port port port port port port port port port port port port port brandy brandy brandy brandy brandy brandy brandy brandy brandy fig 

tree product automaton theta ad example play nonemptiness game haa theta ad clear port move reach position winning position port winning players shown labels positions 
interesting plays revisit example left play play play empty port wins play 
port fact wins play regardless brandy moves theorem follows theta ad nonempty 
theorem 
kripke structure ctl formula iff player port winning strategy nonemptiness game theta ad ad haa language accepted ad exactly set trees satisfying 
proof theorem follows directly theorem captures relationship model checking problem nonemptiness game 
theorem construct efficient algorithm doing ctl model checking 
part construct haa ctl formula play nonemptiness game product haa kripke structure 
construction haa ctl formula section 
show implement nonemptiness game efficient fashion 
implementing nonemptiness game previous section shown moves nonemptiness game determined structure tree 
implemented depth algorithm finding winning plays tree 
efficient implementation obtained keeping track positions current play stack data structure new position pushed time move popped winning play position 
elements elements stack depth position revisited current depth value top stack pointer 
stack keep track possible moves position moves depth algorithm requires backtracking search winning play 
example looking winning play initial position left hand choice node taken fact right hand choice recorded stack explored clear left hand choice returns winning play port 
approach general memory efficient breadth algorithm choices explored simultaneously 
unfortunately algorithm outlined memory efficient time efficient 
reason winning games position replayed 
considering example clear play winning play port position position arises times plays fact port win position re established time 
results store required keep track winning positions revisited different plays results reused 
problem determine store results put way potential winning position stored certain winning position correct 
possibility store winning position moves position played depth algorithm backtracks 
play truncated position revisited may happen incorrect result stored moves position 
problem winning play player may missed play may truncated point 
new games order ensure results stored winning positions correct proposed new game played moves position say played 
new game takes initial position new stack new results store 
new game uses new stack new store intuition plays previously truncated played completion new game ensuring correct result obtained initial position new game 
new game completed winning player initial position stack results store new game deleted result new game stored original results store 
position visited new game checked position original store result 
note refer nonemptiness game refer initial game new games played order determine winning player initial position game 
new games may played recursively whilst playing new game new game started ensure new games played infinitely new game allowed position new game played 
fact new game played restrict play new games positions current play previous games initial game new games currently played 
reason restriction new games positions current play previous game played precisely positions backtracked previous game 
effect just postponing new game 
note initial position new game definition part current play previous game restriction ensures new games played infinitely 
furthermore new game started position acceptance condition previous new game played position cycle exists winning player position determined part universal existential set 
example shown new game played move played result new game winning position port 
reusing result visited enables port win game initial position correct result 
new games played positions visited new game position positions current play initial game 
new games played positions initial game cases results immediately original results store due depth nature plays 
complexity number positions product haa theta ad new game required position worst case positions needs visited new game time complexity nonemptiness game 
due depth nature nonemptiness games fact original results store checked store initial game referred original store deleted 
port port brandy brandy port port port port port port port port port port port port port port brandy brandy brandy brandy brandy played store add store add store add store add store port port store add store store port add store port port brandy port new game port port add store add store add store fig 

new games combined results store winning positions new game new games tend traverse positions time game played subsequently results store provides results 
time complexity nonemptiness game cn number new games immediately find winning position results store 
fact relationship number strongly connected components kripke structure product automaton scc theta ad new game required visit positions scc 
example new game new game visits positions part scc new games visit immediate successor positions 
space complexity nonemptiness game amount space required stack plus space required games results stores 
space requirement results store linear number positions reuse space game finished space complexity space required stack general optimised games show number new games played reduced exploiting structure haa 
firstly show checking nonemptiness haa translated ltl formula similar nested depth algorithm section give special rules play new games ctl case lastly consider optimised rules general ctl formulas 
ltl nonemptiness games interested ctl formulas form contains call linear time formulas 
section detail ber know haa obtained formulas form contain choices contain choices nonemptiness games linear time formulas considered boring games players moves port formulas brandy formulas 
furthermore port moves acceptance condition brandy moves ber 
winning conditions nonemptiness game port brandy moves empty position current play revisited means win brandy port 
ffi pg ffi fpg gamma gamma gamma gamma fig 

ad pgg fq ffi fg fq empty fact set necessarily singleton means positions set positions 
example haa translated formula set containing states set 
nonemptiness game new games played automaton form results store cause cycle position missed consequently winning position labelled incorrectly 
new game required find cycle positions combined fact player moves game cycles play position trivially labelled allows optimised rule linear time nonemptiness games ffl nonemptiness game theta ad linear time formula new games need played positions rule nested depth search spin model checker see section 
justification rule setting nonemptiness game 
ctl nonemptiness games vis shown ctl formulas translated haa haa singleton sets 
linear time case results store cause position labelled incorrectly win wrong player 
intuitively cycle play ctl nonemptiness game positions port wins play vice versa brandy positions revisited play result store reused new play cycle positions necessarily true linear time case 
indicate new games need played positions rule weak 
linear time case seen moves game player 
define sets transitions consisting choices choices player sets 
similarly set transitions consisting choices choices called player set 
linear time nonemptiness game sets player sets 
haa ctl formula set set containing player set set set containing player set 
linear time case know player set new games required positions set leads stronger rule ffl nonemptiness game theta ad ctl formula new games need played positions referred transition function player set 
considering haa sets automaton referred transition function player set new games played positions visited nonemptiness game 
ctl nonemptiness game unnecessary play new games positions initial set 
reason consider positions lower sets labelled boolean transition function states initial set reduces referring positions 
considered player set new games required positions regardless positions example haa positions component initial set new games played positions 
ctl nonemptiness games ffi qg ffi fpg ffi fqg ffi fp qg gamma gamma true true gamma gamma true true fig 

ad fp qg fq ffi fg fq ltl case states haa considered part set splitting set singular sets possible allow efficient nonemptiness games 
ctl case saw haa positions sets new games required positions 
ltl case set haa divided smaller sets positions singleton sets new games required 
example consider haa formula gp 
consider states haa set new games played positions component positions consider haa sets clear new games required 
ltl ctl states haa states haa set flag false 
set flag false 
construct minimal sets 
sets singleton minimal 
states states referred singleton set transition function set true 
player set set true 
set initial state false 
table 
new game rules nonemptiness game ctl ltl different rules determining play new games ctl ltl environments summarised table 
haa ctl ltl formula built analysed rules table 
completing analysis state haa flag set true false 
product kripke structure taken product state flag copied states haa formula 
depth algorithm backtracks position flag tested see new game required position 
adding simple proviso rules playing nonemptiness game rules table sufficient play nonemptiness game full ctl give informal arguments case interested reader referred vis discussed detail 
observe ctl formula consists boolean combination ctl ltl formulas nesting formulas 
easy see haa boolean combination formulas adhere rules table haa nesting formulas haa afg efp need additional treatment 
fact need proviso move picked player move leads lower set picked 
effect playing game subformulas playing game formula 
example haa afg play games positions ctl games playing games positions considered propositional result playing game ltl games 
interesting observation formula model checked ctl ltl formula new games required haa ctl formulas singleton sets haa ltl formulas contain player table follows new games played 
note result indicates buchi automata cycles self loops second search necessary reduce number nested depth searches required spin 
implementing nonemptiness game spin obvious simple implement ltl nonemptiness game spin 
adding ctl nonemptiness games require fundamental changes 
firstly worth noting ltl games new game required result nested depth search gh ctl case nested games required depending formula checked 
ctl case currently require results stores new games deleted games terminate necessary strictly ltl case gh 
biggest single change spin replace claim different notation handle positive boolean functions haa 
specifically handle case connectives 
implemented ctl model checker works haa nonemptiness game approach vis 
features model checker designed view easily facilitate changing design formalism checked 
currently check asynchronous hardware designs described rainbow formalism 
step promela designs 
concluding remarks showed automata approach led efficient ltl model checking algorithms generalised full ctl best knowledge algorithm 
traditional ctl model checkers bottom algorithms require state graph kept memory albeit encoded form bdds approach top fly generation state space possible 
interesting note top approach ctl difficult check ltl new game required depending formula ag require new games efp 
ber 
model checking branching time temporal logics 
phd thesis technion haifa israel june 
vardi wolper 
automata theoretic approach branching time model checking 
cav th international conference computer aided verification volume lecture notes computer science 
ce clarke emerson 
design synthesis synchronization skeletons branching time temporal logic 
kozen editor proceedings ibm workshop logic programs pages 
lecture notes computer science 
ces clarke emerson sistla 
automatic verification finite state concurrent systems temporal logic specifications 
acm transactions programming languages systems april 
courcoubetis vardi wolper yannakakis 
memory efficient algorithms verification temporal properties 
formal methods system design 
requirement needs investigation believe necessary prototype implementation 
ej emerson jutla 
complexity tree automata modal logics programs 
th annual ieee symposium foundations computer science 
gh godefroid holzmann 
verification temporal properties 
participants proceedings th ifip symposium protocol specification testing verification li ege belgium may 
gerth peled vardi wolper 
simple fly automatic verification linear temporal logic 
protocol specification testing verification pages warsaw poland 
chapman hall 
hol holzmann 
design validation computer protocols 
prentice hall englewood cliffs new jersey 
hol holzmann 
invited presentation november 
formal methods day royal holloway bedford nw college university london 
holzmann peled yannakakis 
nested depth search 
jean charles gerard holzmann doron peled editors proceedings second workshop spin verification system 
american mathematical society dimacs august 
lam lamport 
temporal logic programs 
proceedings th acm symposium principles programming languages pages january 
lp orna lichtenstein amir pnueli 
checking finite state concurrent programs satisfy linear specification 
proceedings th acm symposium principles programming languages pages january 
mss muller schupp 
alternating automata weak monadic theory tree complexity 
th international colloquium automata languages programming volume lecture notes computer science 
mss muller schupp 
weak alternating automata give simple explanation temporal dynamic logics decidable exponential time 
third symposium logic computer science pages july 
qs sifakis 
specification verification concurrent systems cesar 
international symposium programming volume lecture notes computer science 
sti stirling 
local model checking games 
concur th international conference concurrency theory volume lecture notes computer science 
sti stirling 
games model mu calculus 
tacas nd international workshop tools algorithms construction analysis systems volume lecture notes computer science 
tar robert tarjan 
depth search linear graph algorithms 
society industrial applied mathematics 
visser barringer fellows gough williams 
efficient ctl model checking analysis rainbow designs 
proceedings montreal october 
vis visser 
efficient ctl model checking games automata 
phd thesis manchester university june 
vw vardi wolper 
automata theoretic techniques modal logics programs 
journal computer system science 
vw vardi wolper 
automata theoretic approach automatic program verification 
symposium logic computer science pages june 
vw vardi wolper 
reasoning infinite computations 
information computation 
wol wolper 
relation programs computations models temporal logic 
temporal logic specification volume lecture notes computer science 
