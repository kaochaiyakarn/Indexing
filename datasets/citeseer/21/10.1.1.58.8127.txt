security vs performance tradeoffs trust framework singh sandeep david pease linda ling liu architecture trust framework utilized intelligently tradeoff security performance san file system 
primary idea differentiate various clients system trustworthiness provide different levels security performance 
client trustworthiness evaluated dynamically customizable trust model online monitoring client behavior 
describe interface trust framework block level security solution band virtualization san file system san fs 
proposed framework easily extended provide differential treatment data sensitivity configurable parameter trust model 
designers security solutions consistently debated tradeoffs levels security resulting performance 
choose find static balance compromising strictest form security better performance 
practice partitioning groups group having different levels privileges security clearance 
approach group users say corporate firewall get direct access data receive unencrypted transmissions providing high performance group outside firewall authenticate rigorously receive encrypted data lower levels performance 
choice solution requires careful planning analysis security threats sensitivity stored data 
consider case network attached storage systems band virtualized san file system ibm san fs 
san fs hosts access metadata dedicated metadata servers mds access data directly storage controllers 
providing block level security file systems capability solutions require access storage controller validated encryption decryption capability correctness :10.1.1.110.254
conceivable design solutions certain set clients validated correctness providing di georgia tech cc gatech edu ibm almaden research ibm com sandeep pease almaden ibm com ideally privileges best granted applications hosts network layer security mechanisms proper identification clients rect access data better performance 
essential design dynamic framework clients provided revoked trusted access online behavior 
example malicious application attempt exploiting trusted client 
dynamic evaluation system adjust trust metric new incorrect behavior dynamically revoke trusted mode access 
similarly mechanism deploying new clients require assignment certain group clients automatically develop trustworthiness gain trusted mode access 
trust framework san fs storage systems 
compromises trust model dictates metrics evaluation client trustworthiness trust distribution component includes monitoring mechanisms provides infrastructure required evaluate metrics 
describe design block level security solution san fs interface proposed trust framework capability protocol 
combined design provide dynamic configurable trust evaluation allows online differential treatment clients easily extended configure model account data sensitivity providing differential treatment nature data requested 
rest organized follows 
section briefly explain design capability security mechanism san fs 
section describe proposed trust framework interfaced security mechanism 
section discuss related security solutions storage systems trust frameworks areas 
conclude section note course 
block level security design section briefly describe design capability block level security protocol san fs 
acts underlying security solution extended support trust framework 
design small variation various existing protocols :10.1.1.110.254
describe security model assumed design 
security model design distinguish network layer security application level security 
network layer security mechanisms prevent address spoofing packet sniffing network layer attacks man inthe middle 
researched area shelf standards ipsec available ensure network layer security 
addition assume standard hashing techniques md ensuring message integrity 
focus application level security targeted application san fs 
network layer guarantees clients considered untrusted 
storage controllers metadata servers assumed trusted physically protected environments share secret key 
assume data access rights associated client application client 
prevents buggy malicious applications accessing wrong storage 
result authentication authorization done level application credential secure digital certificate tamper proof certification 
responsibility keeping credential safe application 
rest discussion specifically mentioned client refers application credential host 
secure protocol section give brief description security protocol 
provide complete implementation details extended version 
compared insecure san fs main modifications design perform access control checks metadata servers mds 
mds able authentication access right checks giving metadata information client 
access denied security access policies consistency requirements client holds exclusive lock file 
authentication authorization mechanisms implemented various known solutions call layer mds authorization server layer 
note implemented outside scope mds case contacted metadata information provided client 
storage controller side security layer called validator responsible validating client accesses 
client requests metadata mds checks access granted client 
mds returns metadata token capability form token id el ar ts id unique request id el block extent list sent client request ar access rights metadata read write ts timestamp token generated indicates concatenation 
indicate encryption secret shared mds storage controllers symmetric key efficient keyed hash mac 
client sends block request storage controller includes token request 
security layer storage controller decrypts token checks block requested included blocks contained extent list token 
client attempting write block appropriate access rights 
access granted denied 
ensures storage controller provide access client specifically authorized mds 
successful request storage controller sends back new token containing updated timestamp refreshing token 
refreshed token id el ar timestamp request served storage controller 
revocation capability step approach id ts 
analyze revocation mechanisms prior research 

request gets unique integer id mds 
client gives lock mds notifies storage controller sending explicit revoke message indicating id lock revoked 
client tries access storage controller checks id revoked mds deny access case 

prevent prolonged state maintenance storage controller keep revocation list mechanism automatically expires token certain time 
allows controller maintain revocation list units time 
works follows 
client gives lock mds notifies storage controller id lock revoked 
storage controller keeps id revocation list units time 
duration client tries access storage controller controller rejects request id revoked 
result client able refresh token 
units time storage controller dumps revocation state id deny client request ts token older units expired 
set system parameter workloads larger requires storage controller maintain state longer period time feasible low load scenarios 
restriction mechanism poses client generate request units time keep token refreshed 
notice pre fetching metadata handled token contains information metadata client received mds access successful request single block metadata refresh token rest metadata 
addition client regain access data getting new token mds 
potentially piggybacked data locking lease renewal mechanisms 
host validator storage controller authorization server metadata server credential request metadata fi 
metadata id el ar ts 
requested block id el ar ts 
data block id el ar 
give lock 
revoke id 
protocol research revocation handled different ways 
object version numbers uses capability id optimizes grouping capabilities ability revoke entire group :10.1.1.110.254
incorporating grouping design combined self expiration capabilities approach lead reductions revocation traffic memory utilization validator 
complete secure protocol shown 
trust framework section discuss proposed trusted mode access mechanism section 
discuss kind trust ratings models 
describe variations proposed infrastructure tradeoffs involved 
trusted mode access trust infrastructure associate trust rating application client credential store information mds 
client requests metadata mds mds checks trust rating credential policy described section decide trust client 
objective prevent encryption decryption costs storage controller data block request original design storage controller service requests client checking validity 
accomplished new message mds storage controller 
specifically mds send rust credential message storage controller indicates controller client fully trusted access correct storage client requests certain blocks controller just fulfill request decrypting token 
need refresh token preventing encryption 
credential assumed trusted mds sends explicit message controller 
prevent clients trust ratings exploiting mode access strict trust model auditing mechanism described section 
believe trusted access mechanism significant performance impact enterprise setting potentially number applications completely trusted access storage monitoring applications compliance applications 
applications operate trusted mode eliminating need validating tokens requires expensive cryptographic operations 
storage controller point view keep additional state trusted credentials prohibitive overhead 
general description enable trusted mode access discuss details trust infrastructure 
trust infrastructure trust ratings extensively researched reputation ir systems recommendation systems systems ecommerce settings 
key components trust infrastructure trust model determines model trust associated client example client binary trust rating indicating trusted indicating trusted continuous rating trusted trusted :10.1.1.110.254
determines measurable metric mapped trust rating example client accesses right storage time trusted trust rating model trust rating equal percentage correct access trust rating model 
trust distribution component responsible providing infrastructure required evaluate metrics trust model compute rating 
example calculate number successful transactions example models disseminate information appropriate agents act ratings 
discuss trust model component design 
trust model purpose discussion assume trust ratings available mds 
explain trust distribution component achieved 
rest discussion transaction refers access storage storage controller 
design trust model client having trust rating 
trust rating dynamic changes behavior client 
set probability client getting trusted mode access equal trust rating client trust rating chance getting trusted mode access retains access credential revoked 
revocation occur longer access metadata requested gave lock trust rating drops exact policy case described 
addition client applications different trust values storage controller 
prevent buggy malicious application accesses storage controller correct manner incorrectly accesses storage controller penalized correct accesses 
potentially helps doing application error detection 
approach may increase trust ratings store size may prohibitive large number client applications 
scenarios recommend single rating controllers 
discussed earlier want strict trust model clients strongly discouraged accessing wrong storage 
relatively tough build trust rating starting scratch 
required prevent malicious application start afresh gain trust rating easily exploiting 
achieve requirements manner 
set threshold total number transactions done client allowed operate trusted mode 
threshold achieved clients probability getting trusted mode access proportional ratio correct transactions total number transactions 
specifically pr trusted access trust rating tr ctr tr tr tr total number transactions ctr number correct transactions configurable parameter determining strictness model desired 
threshold prevents applications gaining trust rating immediately 
probability getting trusted mode access determined probability access correct equal ratio correct transactions total number transactions 
argued threshold achieved just doing large number transactions irrespective correctness 
highly malicious buggy application detected threshold achieved addition transactions largely incorrect probability getting trusted mode access low penalized setting low values 
discussed client gets trusted mode access retains access specifically revoked mds 
set revocation policy follows 
client accesses wrong storage trust value drops ratio drops indicates mds revoke trust credential trusted access mode 
mechanism identifying wrong access detailed trust distribution component architecture 
extensions note till trust rating function client behavior 
trust model easy adjust client trust rating storage controller kind data stored controller 
example organization stores extremely critical data particular storage ensure trusted mode access allowed extremely difficult get storage controller 
achieved simply setting small value means trusted mode access absolutely perfect ctr tr applications 
provides easy extension incorporating differential treatment data sensitivity design 
possible extension provide different levels trusted mode access 
example moderately trusted application smaller keys encryption capability provide better level performance security complete trusted access 
trust distribution discuss trust distribution component infrastructure 
details mechanisms required obtain information necessary compute trust ratings 
trust model mds requires statistics number transactions number correct transactions client storage controller 
non trusted mode access security layer storage controller easily compute numbers 
tr ctr maintained counters tr incremented access ctr incremented access granted validating token 
hand client accesses storage trusted mode token decrypted immediately ascertained access correct 
case auditing mechanism 
note trusted mode access mds give valid token time client requests metadata 
order catch violations trusted mode access security layer logs encrypted token requested blocks information 
auditing process decrypt token time deduce client accessed right storage 
non trusted mode overheads due decryption encryption trusted mode access overhead logging extra writes logs auditing amortized total number requests 
believe mechanism reduce individual response times 
addition extend auditing mechanism probabilistic mechanism 
example trusted mode access sample accesses logged reducing overheads 
size sample determined client behavior example number times client accessed wrong storage trusted mode access indicating malicious behavior 
continue investigate efficient mechanism detailed version 
trusted mode access logs structure credential token ts block block credential application credential trusted mode access 
token token storage controller received client trusted mode access initiated ts timestamp data request token blocks addresses data blocks accessed client trusted mode access 
ts entry log prevent scenario malicious client sends expired token tries access blocks allowed token access rights revoked auditing process decrypts token verifies blocks accessed allowed access rights token 
note possible client multiple tokens single trusted mode session 
case tokens logged 
auditing process located storage controller free cpu cycles different server possibly mds access access logs update counts 
metadata servers update trust ratings batches periodically 
trust rating modified client transaction modified batches 
done prevent excessive communications controller mds 
auditing process located mds total overheads reduced trust ratings evaluated auditing process 
possible storage controller store trust ratings controllers probabilistically decide verify token 
reason chose mds store trust ratings flexibility controlling trust process 
example easy update trust model change values parameters change policy granting trusted mode access 
easier perform static trust settings example administrator explicitly specify application trusted say monitoring application access storage waiting gather trust rating 
mds hosted trust value eliminated need controller knowledge trust ratings 
related significant amount security outof band virtualized san file systems :10.1.1.110.254
solutions broadly capability solutions differ details capability design revocation mechanisms 
approach security object store initiative data assumed accessed form objects object having associated access rights 
solutions attempt malicious application accesses blocks outside extent list token captured auditing process provide secure protocols complete security assumed models 
distinguished prior research due tradeoff mechanisms choose differentiate clients data requested give different levels performance 
tradeoff mechanism designed form trust framework utilizing trust related ecommerce 
trust framework provide different levels security performance distinct clients system behavior 
trust model customizable dynamic automatically promote revoke levels access clients 
addition model easily extended provide different levels security nature data requested 
interface trust framework security solution san file system 
plan empirically evaluate framework design various benchmarks increase efficiency trust distribution component 
aguilera ji lillibridge maccormick andersen burrows mann thekkath :10.1.1.110.254
block level security network attached disks 
proc 
fast 
factor naor rodeh 
object store 
proc 
msst 
bellare canetti krawczyk 
keying hash functions message authentication 
lecture notes cs 
gobioff gibson tygar 
security network attached storage devices 
technical report cmu cs 
www org 
international committee information technology standards 
despotovic aberer 
managing trust information system 
proc 
cikm 
menon pease rees 
ibm storage tank heterogeneous scalable san file system 
ibm systems journal 
miller freeman long reed 
strong security network attached storage 
fast 
rahman hailes 
supporting trust virtual communities 
proc 

reed long burns 
authenticating network attached storage 
ieee micro 
xiong liu 
reputation trust model peer peer ecommerce communities 
proc 
electronic commerce 
