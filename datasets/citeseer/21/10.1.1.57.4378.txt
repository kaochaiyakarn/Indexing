partial evaluation techniques concurrent programs benjamin goldberg department computer science new york university mail cs nyu edu presents application partial evaluation program specialization techniques concurrent programs 
language chosen investigation simple csp language 
standard binding time analysis imperative languages extended order deal basic concurrent constructs synchronous communication nondeterministic choice 
binding time annotations specialization transformation defined proved correct 
order maintain simple clear presentation specialization algorithm addresses data transfer component communication partial evaluation way defined generates residual synchronizations 
simple approximate analysis detecting removing redundant synchronizations residual program synchronizations removal increase nondeterminism program performed 
addresses pragmatic concerns improving binding time analysis controlling loop unrolling consequences lifting nondeterminism run time specialization time 
power newly developed technique shown examples 
keywords partial evaluation binding time analysis concurrency csp nondeterminism 
motivation semantic methods proven effective tool optimizing deterministic sequential languages 
methods partial evaluation pe source program transformation follows program part input data generate residual program running rest input data behaves original program running input 
idea standard pe reduce number computation steps performed run time doing computation steps possible specialization time run time 
aim reduce number communication computation steps performed run time doing communication computation steps possible specialization time altering meaning program 
motivation doing performance improvement obtained specializing wide range concurrent systems ranging operating systems numerical computing modules artificial intelligence programs 
research centered pe efficiency gains conducted domains mentioned 
applications pe operating systems described papers pu consel pc suggest incremental specialization techniques need developed 
discussing application pe numerical computing deterministic algorithms ber 
studies examines pe concurrent system 
believe significant class concurrent algorithms static communication topology number communicating channels association channels threads fixed narrow bounded variation 
pepper showed pep concurrent programs obtained program transformations directly specifications algorithm 
communication topology programs reflects data dependencies corresponding data structures algorithm specification algorithms dependencies static statically bounded 
background aware studies concerning pe concurrent programs long history research conducted separately ffl pe deterministic sequential languages functional imperative ffl understanding formalization concepts concurrency communication 
papers partial evaluation concurrent logic programs significant research 
uses standard pe results 
consel danvy tutorial cd concisely presents central ideas domain 
book jones presents typical pe framework addresses pragmatic concerns wide variety language constructs 
presentation taxonomy program transformers gluck rensen gs relevant concurrent programs 
interesting turchin tur probably study pe languages nondeterministic constructs 
gives example transformation intermediate result program apparently nondeterministic nondeterminism specialized final result deterministic 
lesson learned pe techniques transform falsely nondeterministic construct deterministic 
step propose specialization possible lift actual nondeterminism run time specialization time 
concurrent language studied imperative features refer results papers meyer mey pugh np jones 
concurrency focus basic concepts communication synchronization nondeterminism 
excellent include hoare seminal communicating sequential processes csp hoa book hoa offers intuition formalizes semantics csp constructs milner book mil calculus communicating systems ccs 
formal specification operational semantics csp language plotkin plo standard 
papers describe static analysis algorithms concurrent programs reif smolka rs dataflow analysis particularly relevant 
relevant research mer presents interpretation algorithm statically computing send receive matches csp program 
unfold fold transformation strategy ccs programs studied de francesco dfs 
somewhat complementary consider transformational framework ccs functional language values study imperative csp language concentrate binding time analysis lifting computation communication nondeterminism safely run time specialization time 
describing analysis removal redundant synchronizations gupta schonberg gs analysis done different setting data parallel programs related pe 
outline purpose show pe framework extended order include basic concurrent language constructs 
show specialize data transfer message passing component communication lift nondeterministic choice run time specialization time 
short specializing synchronization show post specialization analysis synchronization removal 
section describes syntax language operational semantics labeled transition system lts specification 
standard pe framework 
includes specification binding time analysis extended cope basic concurrent language constructs specialization rules lts actions 
central result correctness algorithm stated proof sketch 
result generalizes correctness pe deterministic sequential program closely related strong bisimulation equivalence relation transition systems practical issues concerning improvements quality partial evaluator termination properties briefly discussed 
special section dedicated synchronization analysis removal 
language language similar csp language kernel see hoa programming language occam see may 
simple imperative skeleton understood concurrent language primitives allow clear presentation partial evaluator 
syntax comments specification syntax language fig 

expressions usual syntax side effect free important guards may include boolean expressions 
simplicity aliasing user defined functions language 
specific aspect language domain threads 
chosen word word process milner notion process different threads processes hoa plo 
thread denotes sequential unit execution unique thread identifier associated thread body 
correspondence threads thread identifiers abuse notation identify domains 
programs special thread identifier main exists 
body thread consists local declarations variables commands 
parallel composition command enforces identification threads executed parallel 
recursive threads allowed reason guarantee existence finite number threads communication performed synchronized unidirectional message passing channels 
channel declarations associate channel unique pair introduced par 
see milner mil 
hoare instance forbids process generation inside recursion 
programs prog threads thread thread identifiers tid id declarations threads declarations channels declarations variables decl channel names ff chan expressions expr locations loc boolean expressions bexp program points pp commands com guarded commands gc channel ff tid tid thread tid var skip ff ff tid alt gc alt gc gc ff ff gc gc syntax csp language threads enforce static topology communication 

doesn reduce power language define multiplexor threads simulate 
standard csp disallow global variables 
allowing read global variables change results source nondeterminism 
loss power global variables implemented defining thread body iterated nondeterministic choice 
idea isolate syntactic construct nondeterministic semantics choice 
imposing restrictions global variables eliminated sources nondeterminism 
csp explicit channel hiding operation 
chosen omit source language 
address operation introduce observability semantic notion discussed section 
minor detail important pe explicitly associate program points commands program specified fig 

semantics section presents operational semantics language 
chosen operational view mosses writes mos debatable denotational treatment concurrency satisfactory contrast structural operational semantics extends easily sequential languages concurrency 
semantics declarations expressions functional expressions side effect free part semantics associated denotational flavor 
order keep presentation clear distinguish types environments ffl channels denoted ffl threads denoted tenv ffl variables denoted oe env semantics commands described terms labeled transition system lts similar win plo 
ease presentation specification lts omits channel environment thread environment 
notice declarations processed environments change 
lts specified fig 
appears quite standard 
differs considering transition relation relation sets configurations configurations 
achieved distributing environment thread keeping environment considering commands executed parallel 
write transition form delta delta delta delta initial final sets configurations communication label associated transition 
delta fail form oe oe commands oe oe local environments 
non standard transitions ffl spawn notice asymmetry parallel composition thread tid inherits environment oe communication capabilities parent thread chosen solution simplicity associativity parallel composition holds ffl join environment second thread tid discarded 
specified lts define meaning thread 
deterministic sequential programs operational meaning usually defined function initial state final state 
concurrent system meaning general linear branching structure events events associated communication 
define hybrid meaning threads pair trace final state ffl trace ordered possibly infinite sequence events events form ff ff chan ff communication channel observable book hoare hoa gives semantics terms traces refusals failures events 
ar domain variables domain values env ar environment variables tenv id thread environment threads labels fff ff chan alg fff ff chan alg conf com theta env configurations usual configuration empty command represented environment decl env denotational specification declarations ee expr env denotational specification expressions thread conf start thread ae conf theta labels theta conf oe thread tid 
oe 
start skip oe 
oe skip ee oe oe 
oe assign ff oe ff oe ee oe ff oe ff oe send oe 
oe oe 
oe seq gc oe 
oe alt gc alt oe 
oe alt gc oe 
oe gc oe 
gc oe unroll gc oe 
fail gc oe 
oe exit loop tid oe tid oe 
tid tid oe 
oe phi oe oe 
spawn phi env theta env env denotes environment composition oe 
oe 
oe oe 
oe oe 
interleave dual oe ff 
oe 
oe ff 
oe 
oe oe 
oe oe 
comm dual oe oe 
oe join ee oe true oe 
oe ee oe true ff oe ff 
oe ee oe true ee oe ff oe ff 
oe ee oe false ff ff oe 
fail rules gc oe 
oe gc gc oe 
oe dual gc oe 
fail gc oe 
fail gc gc oe 
fail semantics csp language ffl final state introduced distinguish programs having observable behavior different termination properties final state set final configuration exists ffi transition possible system deadlocks circular waiting fails nondeterministic choice environment oe final configuration 
spirit ccs see mil argue specification concurrent system include apart text program describes system partition communication channels observable non observable 
predicate chan ftrue falseg denote partition 
intuition concurrent system open system semantics reflects interaction environment 
meaning concurrent system include internal non observable communication 
trace oe refer components meaning notice trace updated transitions associated rules comm 
meaning program denoted set meaning main thread running environment channels threads defined top level declarations processed 
partial evaluation preliminary comments idea specialize concurrent program concurrently specializing component threads 
process specialization perform data transfer commit particular choices 
idea csp combine data transfer synchronization 
idea decouple pe 
developed line approach synchronization analysis part extended binding time analysis line approach redundant synchronization analysis elimination done pe 
line view advantages simpler binding time analysis easier proof correctness theorem simpler probably powerful synchronization elimination analysis 
hand suspect result may weaker pe exploit binding time improvements derived synchronization removal 
specialization communication relies synchronization component 
consider channels streams records type channel stream record val order lift data transfer specialization time statically know value val program points send receive precisely know statically associate correct send particular receive 
nondeterminism notice simple setting disallowing global variables keep basic construct choice clearly isolated syntax 
static choices choices static guards commit specialization time define specialization process nondeterministic 
dynamic choices residual program nondeterministic 
guarantee specialization preserves fairness formal semantics model fairness 
conservative binding time analysis section defines safe binding time analysis bta principles stated 
clarify terminology static denotes specialization time line line refer moment binding time analysis pe respectively pe 
bta specification kept simple possible section comment line pe separate sections describe possible binding time improvements 
consider simplest binding time domain bt fs dg standing static dynamic 
said consider channels streams records 
spirit simplicity assign binding time value channel 
usually binding time function defined choose define function syntactic category keep binding time environment parameter implicit ffl expressions expr bt ffl channels bch chan bt ffl program points bpp pp bt ffl commands com bt ffl guarded commands gc bt notice binding time domain bt described finite monotonicity bindingtime functions sufficient order guarantee convergence iterative interpretation algorithm 
bta sequential programs assumes binding times input variables 
concurrent setting assume binding times input channels tag observable channels dynamic 
aware heuristics developed haven pursued line investigation 
bta expressions defined usual extension involves values read channel assuming pointwise divisions variables channels consider uniform divisions pp ff bch ff bta channels defined bch ff xji ff pp ji ff bpp pp jj ff bpp binding time program point bpp ctrl ctrl com com partial function associates command control command alt surrounds 
ctrl transitive closure ctrl gives set commands control execution command clearly binding time program point depends control commands order compute binding times commands alt gc alt gc gc gc gc gc binding times guarded commands conservatively gc gc ff gc ff gc gc gc gc gc gc gc communication commands ff bch ff ff bch ff key observation specialization define total order set static program points 
points static control static control specialized assumed straight line code 
result extended static loops controlled true condition extension involves controlled unrolling technique described section 
bta channels correct statically perform data transfer know value pairing program points send receive static 
total order allowing possibility assigning different binding time values different program points 
division program points 
sets program points match receive corresponding send 
bta guarded commands defined synchronizations residual dynamic 
illustrate conservative bta short example alt ch 

alt assume static 
ch guards alt dynamic alt command dynamic channels dynamic dynamic control 
line pe lead precise bta expressions mixed binding times particular consider bta guard cond ch cond cond false 
line pe define speculative bta commented section 
observation hints finer bta degenerated nondeterministic choice alternative fact deterministic choice 
decouple decision nondeterminism assign different binding times 
perspective effects improving bta guards mentioned significant 
specialization specialization program amounts specialization thread main environment declarations channels threads processed 
domains relevant specialization shown fig 

specialization corresponding denotational fragment semantics standard omit 
non standard aspect specialization top level declarations channels tagged static 
channel entered channel environment specializer residual code defining channel generated 
communication channel take place specialization time data transfer performed run time residual pure communication 
specialization primitives standard see np instance omit definitions ffl expressions evaluate expr expr code ffl declarations variables decl 
theta code non standard specification specialization lts actions 
defined transition relation see fig 

note transition rules guarded binding time conditions distinguish static dynamic commands 
write specializer transition form theta theta action theta theta initial final sets extended configurations label associated transition action describes residual code generated specialization step 
note action tuple pairs thread identifier residual code 
set extended configurations theta form tid delta tid delta tid tid thread identifiers delta delta configurations described section observation oe oe delta delta denote static environments 
thread identifiers distinguish residual code various threads specialized parallel 
specification specialization fig 
mirrors lts fig 

comments need 
synchronization 
static communication ff ff residual code generated ff dummy ff dummy respectively denoting communication data transfer note static communications lead deadlock specialization process deadlocks 

rule corresponding spawning threads denotes thread environment 
threads statically created get tid specialization time thread identifier tid 

rules corresponding parallel execution describe interleaving synchronization static communication 
rule describes joining threads bodies specialized 

specialization static alt choices self explanatory 
notice specialization process may deadlock guards static alt fail may terminate unrolling rule static iterations 

specialization process nondeterministic 
reflected rules describe specialization compound static guarded command gc gc gc 
guards gc gc static true nondeterminism lifted run time specialization time 

specialization compound dynamic guarded command gc gc gc transitions specializer labeled static communication take place dynamic control theta rule transition corresponding gc corresponding gc static environment updated dynamic control 
meaning specialization program denoted ms pair eval meaning residual code eval meaning pair trace oe residual code generated result actions 
specialization examples appendix 
perform bta bounded static variation improvement environment oe theta computed upper bound environments corresponding bounded number choices 
correctness specialization start defining relation call equivalence transitive symmetric meaning ordered pair meanings remember meaning pair trace oe md iff trace md trace oe ms oe md oe ffi ffi ffi ffi oe toe oe phi oe disjoint concurrent program correctness specialization algorithm consists parts ffl soundness ms res code ms md res code md ffl completeness ms res code ms md res code md notice trace occur 
ms trace empty observable communication non observable internal communication taken place specialization time communication reflected trace meaning 
theorem conservative bta pe algorithm correct 
proof sketch idea state prove stronger result 
define extended meaning call previously defined meaning restricted meaning concurrent program trace transitions transition triple initial environment event label final environment 
define function recovers restricted meaning extended meaning proving equivalence extended meanings implies equivalence restricted meanings 
stronger version theorem considers extended meaning proof shows equivalence trace original program merging traces specialization residual program 
proof involves layer mathematical induction length traces structural induction possible transitions specialization semantics transitions ordinary semantics 
interesting corollaries theorem 
mention ffl run specialization program deadlocks exists run program deadlocks terminate 
ffl run specialized version program deadlocks exists run program deadlocks 
speculative binding time analysis bta guarded commands described section conservative applications 
section comment possibilities modify bta implications modifications correctness specialization algorithm 
consider line pe bta done pe 
choose bt domain stat ar domain static variables domain values stat ar environment static variables id theta com theta extended configurations labels fff ff chan alg fff ff chan alg code domain source programs concatenate code infix operator code theta code code act ions id theta code domain actions thread 
theta act ions start specialization thread ae theta labels theta theta act ions oe decl code thread tid 

tid oe tid thread tid decl code tid skip oe 

tid oe null bc se oe tid oe 

tid oe tid null bc sr oe res tid oe 

tid oe tid res bc ff tid ff oe 
ff 
tid oe tid ff dummy bc ff tid ff oe 

tid oe tid ff bc ff se oe tid ff oe 
ff 
tid oe tid ff dummy bc ff sr oe res tid ff oe 

tid oe tid ff 
res tid oe 

oe act tid oe 

tid oe act tid tid theta tid decl theta tid decl tid tid tid oe 
theta theta tid tid tid tid decl tid decl theta 
tid oe 
theta 
tid oe phi oe 
theta 
tid oe 
tid oe 
theta tid code 
tid oe 

tid oe 
theta 
tid oe tid code dual theta 
tid oe 
tid oe 
ff theta tid code tid oe 
ff theta tid code 
tid oe 

tid oe 
theta theta tid code tid code dual theta 
tid oe 
theta 
tid oe 
tid oe 
tid oe 

tid oe null gc tid gc oe 

tid oe tid code tid alt gc alt oe 

tid oe tid code gc tid gc oe 

tid oe tid code tid alt gc alt oe 

tid oe tid alt code alt gc tid gc oe 

tid oe tid code tid gc oe 

tid gc oe tid code gc tid gc oe 
tid fail 
tid gc oe 

tid oe null gc tid gc oe 

tid oe tid code tid gc oe 

tid oe tid code specification specialization se oe false tid ff ff oe 
tid fail se oe true tid oe 

tid oe null sr oe res tid oe 

tid oe tid res sr oe res tid ff oe 

tid oe tid res ff sr oe res sr oe res tid ff oe 

tid oe tid res ff 
res gc gc tid gc oe 

tid oe tid code tid gc gc oe 

tid oe tid code dual gc gc tid gc oe 
theta tid code tid gc oe 
theta tid code tid gc gc oe 
theta tid code code theta 
tid oe 
tid gc oe 
tid fail 
tid gc oe 
tid fail 
tid gc gc oe 
tid fail specification specialization continued boolean expressions element domain ff dg denotes static false value denotes static true value denotes dynamic value 
partial order bt domain consider bt rule gc gc gc gc gc gc gc replace gc gc gc gc gc gc gc gc gc gc gc intuition ffl guards static false bt obviously ffl guards static true speculatively choose corresponding guarded commands commit specialization time bt ffl static guards false dynamic guard choice dynamic bt modifications specialization specification fig 

consequence committing specific branch choice specialization time guards choice dynamic specialization algorithm longer complete 
happens nondeterminism initial program lost speculative specialization 
notice prove soundness part correctness theorem clearly completeness hold anymore 
type bta useful programs exhibit don care type nondeterminism see specialization example appendix 
appears second possible modification bta guards 
rules gc ff gc ff overly conservative 
sound rules bta 
order illustrate consider example fig 

assume expressions cond cond cond cond dynamic threads synchronized program points start start start 
conservative bta channels dynamic communication channels control alt thread tagged dynamic residual synchronizations correspond exactly channels appears better tag channels static 
statements threads dynamic alt thread static specialization nondeterministic 
assume commits choice 
may unsound cond cond may true cond cond may false commitment choice impossible original program synchronization threads communication channel similar argument shows committing second choice alt equally unsound 
clear guards include communication analysis synchronization patterns lead correct assignment binding time 
choose synchronizations conservatively associate binding time dynamic guards include communication operations 
clearly analysis redundant synchronizations done line bta improve bta 
gc tid gc oe 

tid oe tid code tid alt gc alt oe 

tid oe tid code gc tid gc oe 

tid oe tid code tid gc oe 

tid gc oe tid code gc tid gc oe 
tid fail 
tid gc oe 

tid oe null gc gc tid gc oe 

tid oe tid code tid gc gc oe 

tid oe tid code dual gc gc tid gc oe 
tid fail 
tid gc oe 
tid fail 
tid gc gc oe 
tid fail specialization speculative bta thread thread thread start start start alt cond cond true 
cont true 
cond cond alt 
example assigning binding times guarded commands hand redundant synchronization analysis rsa approximate dependencies rsa exactly computed residual program available 
pragmatic concerns language extensions csp language complete sense standard commands deterministic decision iteration expressed terms non iterated choice alt iterated choice 
adding constructs syntactic sugar allows identify determinism syntactically 
problem extending framework include commands control commands bta conditions affect bta program points bodies specialization standard see np 
useful language extension allowing data structures arrays structures 
problem binding time separation discussed see mogensen mog rom 
may commands executing parallel including threads long statically assign unique identifiers commands 
controlling loop unrolling section address problem analyzing improving termination properties specializer 
hard problem research topic described jones jon 
study problem specific concurrent programs 
sequential language specialized program point captures information needed folding limiting unrolling loop 
concurrent language communication topology captured specialized program point folding little tricky 
folding ensure proper pairing static send receive communications body statically controlled loop 
ll counting arguments 
idea mer 
difference counting restricted targeting static communication precise 
analysis detect deadlock approximate 
going observations ffl static loop deal true loop static loops unrolled completely ffl levels true loops innermost level counts control leave innermost level static loops ignored 
ffl static communication occur dynamic control see bta section 
consider arbitrary unrolling transformation loop true body get body body true body body pair integers uniquely characterizes unrolling 
consider example program points synchronized communication carried channel ch thread thread true ch true ch 
ch ch 
write set integer equations 
pair equations static channel reflects count communications take place number communications ch occurring true loop number communications ch occurring inside true loop similarly thread 
arises desire associate static receive statement single static send statement vice versa 
compute characterize unrolling loop thread similarly thread 
notice systems equations independent 
system equations doesn solutions prove deadlock circular waiting pick minimal solution 
example minimal solution leading thread thread 
ch ch 
ch ch 
true true 
ch ch 
ch ch 
binding time improvements standard methods improve bta 
cases exploit bounded static variation matching program points sender receiver 
cases splitting channel static stream dynamic stream useful 
comment detail binding time improvement find interesting 
assume data transferred channel ch type type finite small set values refer val valn 
trick send receive alt plays role case deterministic setting transformation receive interesting val valn ch continuation yields alt ch val 
continuation val 
ch valn 
continuation valn alt go replace channel ch channels call ch transformations ch val 
ch ch val 
ch 
ch valn 
ch valn 
sequence transformations strikingly similar ones milner see mil translate general ccs pure ccs having pure communication exchange values 
notice transformation pragmatic reason milner improving bindingtime properties effectively specializing continuation respect concrete values 
example specialization uses transformation described appendix 
removing redundant synchronizations relationship synchronization nondeterminism central studying concurrent systems 
synchronizations means reducing nondeterminism 
synchronization called redundant removal increase nondeterminism program 
relationship pe synchronization complex blindly lifting synchronization specialization time may increase nondeterminism incorrect 
research removing synchronizations conducted improving performance data parallel languages gs 
languages nondeterminism result global variables 
problem specified basic level relation synchronization choice 
section proceeds follows characterize dependencies program points different threads analysis tags redundant synchronizations may call pure communications borrowing term milner mil sketch algorithm synchronization removal 
consider example thread thread thread start start start alt 

alt assuming synchronized infer thread deterministic chosen 
removing synchronization change meaning program increasing nondeterminism chosen 
key observation dependencies program points threads communications threads complementary communications occurring guards choice executed parallel thread 
simple conservative analysis collect set pairs communications occur guards alt commands 
set pairs characterize dependency program point thread program point thread 
characterization safe captures dependencies program points approximate reasons guards may boolean conditions attached may case apparently executing parallel actual run choice witness dependency executed parallel commands corresponding program points tagged dependent 
extend point point dependency relation sets program points 
sets program points dependent dependent 
fact synchronizations targeted removal dynamic control resulted specialization 
top level true control static control remains pe 
types dependencies associated true loops loop independent loop carried capture absence arrays sufficient transformation replaces true body sequence body body 
loss assume dealing straight line code 
thread set program points associated pure communications totally ordered synchronization characterized pair program points 
consider synchronization sigma fi tag synchronization redundant essential dependencies sets program points gamma gamma gamma gamma send ff complementary receive ff vice versa 
computation sets takes account synchronizations program removal synchronization changes sets tagging synchronizations residual essential 
note lift analysis specialization time approximate program point sets trace interpretations see col cl 
simplest synchronization removal algorithm naive greedy algorithm removes redundant synchronization time updates tagging remaining synchronizations 
computes maximal set synchronizations removed 
fails finding best solution problem see example 
note vertical lines represent threads straight line code horizontal lines represent synchronizations 
sigma sigma sigma assume dependency program points simple analysis tags sigma sigma redundant 
remove sigma sigma sigma essential 
hand remove sigma sigma redundant better solution obtained 
specification partial evaluator simple concurrent language 
examples shown possible automatically specialize concurrent programs reasonable complexity 
believe results relevant wide variety concurrent languages instance think methods applied object oriented concurrent languages pool see ar 
performance post specialization synchronization removal improved 
hand integrate analysis synchronizations bta involves precise synchronization analysis quality may higher powerful specializer may result 
investigating possibility extending framework languages support dynamic communication topologies 
analysis communication topology complex concurrent language cml see rep nielson nielson nn looking integrating analysis binding time analysis exploiting potential bounded static variation techniques 
grateful olivier danvy anonymous reviewers comments 
bob paige discussions programming language semantics program transformations 
ar america rutten 
parallel object oriented language design semantic foundations 
de bakker editor languages parallel architectures 
john 
ber berlin 
partial evaluation applied numerical computation 
acm conference lisp functional programming pages 
cd consel danvy 
tutorial notes partial evaluation 
th annual acm symposium principles programming languages pages 
cl colby lee 
trace program analysis 
th annual acm symposium principles programming languages pages 
col colby 
analyzing communication topology concurrent programs 
acm symposium partial evaluation semantic program manipulation pages 
consel pu walpole 
incremental specialization key high performance modularity portability operating systems 
acm symposium partial evaluation semantic program manipulation pages 
dfs de francesco 
unfold fold transformations concurrent processes 
lncs nr 
pages 
springer verlag 
fujita okamura furukawa 
partial evaluation ghc programs ur set constraints 
logic programming th international conference symposium pages 
gs gluck rensen 
roadmap metacomputation supercompilation 
partial evaluation lncs nr 
pages 
springer verlag 
gs gupta schonberg 
static analysis reduce synchronization costs data parallel programs 
th annual acm symposium principles programming languages pages 
hoa hoare 
communicating sequential processes 
cacm 
hoa hoare 
communicating sequential processes 
prentice hall 
jones gomard sestoft 
partial evaluation automatic program generation 
prentice hall 
jon jones 
writing interpreter specialization 
partial evaluation lncs nr 
pages 
springer verlag 
inmos 
occam programming manual 
prentice hall 
may may occam 
sigplan notices 
mer 
algorithm analyzing communicating processes 
mathematical foundations programming semantics lncs nr 
pages 
springer verlag 
mey meyer 
techniques partial evaluation imperative languages 
symposium partial evaluation semantics program manipulation pages 
mil milner 
communication concurrency 
prentice hall 
mog mogensen 
partially static structures self applicable partial evaluator 
bj rner ershov jones editors partial evaluation mixed computation pages 
north holland 
mos mosses 
denotational semantics 
van leeuwen editor handbook theoretical computer science 
press 
nn nielson nielson 
higher order concurrent programs finite communication topology 
st annual acm symposium principles programming languages pages 
np pugh 
partial evaluation high level imperative languages applications hard real time systems 
th annual acm symposium principles programming languages pages 
par park 
concurrency automata infinite sequences 
lncs nr 
pages 
springer verlag 
pc pu consel optimistic incremental specialization commercial operating system 
acm symposium operating systems principles 
pep pepper 
deductive derivation parallel programs 
parallel algorithm derivation program transformation pages 
kluwer academic publishers 
plo plotkin 
operational semantics csp 
bj rner editor formal description programming concepts ii pages 
north holland 
rep reppy 
cml higher order concurrent language 
acm symposium programming language design implementation 
rom 
arity raiser program specialization 
jones editor esop lncs nr 
pages 
springer verlag 
rs reif smolka 
data flow analysis distributed communicating processes 
international journal parallel programming 
tur turchin 
program transformations transition 
journal functional programming 
win winskel 
formal semantics programming languages pages 
mit press 
example matrix multiplication simple concurrent program illustrates pe techniques developed 
program fig 
written occam suitably extended accommodate declarations needed pe improve readability 
program implements multiplication matrices ffl associating thread element ffl piping line matrix prefixed suitably chosen number thread ffl line product matrix piped channel ch possible specializations described 
triangular matrices assume matrix thread partly static 
instance consider specializing multiplication algorithm case matrix superior triangular fully automatic line pe techniques described goes follows ffl bta expressions leads static environment denoted oe thread oe oe thread oe ffl simple dataflow analysis globals spots useless variables channels int 
int 
int 
matrix lines columns matrix lines columns may total number columns matrices pipelined real channel distributing elements matrix real channel pipeline th line matrix channel real channel ch int declare declare channel channel declare declare channel ch declare channel ch output declare program consists parallel execution threads main output result line matrix product pipelined channel ch observable communication ch forall thread main int par par par par thread declare declare thread real sp true seq ch ch seq thread declare declare matrix multiplication program declare thread true ch thread declare thread int real matrix par par par par thread thread int real matrix seq par par par par seq thread matrix multiplication program continued ffl bta tags program points static channels bch ch bch ffl result specialization data transfer communication static useless channels pure communication ffl pure communications removed redundant ffl clean phase empty threads discarded significant drop number threads communication channels achieved residual program uses threads channels ch input 
boolean matrices second pe example illustrates specialization general matrix multiplication algorithm boolean matrices 
pe techniques static input data bounded static variation values elements matrices 
residual code threads fig 
transformation binding time improvements section 
notice specialization channels tagged useless ones corresponding elements want remove channels need insert decision code thread see fig 

order transformation consider matrix global ok read data explicitly pass thread 
remarkable transformation interpreted trading communication computation 
naive complexity analysis shows difficult accurately evaluate performance specializer communication eliminated computation additions multiplications decision inserted 
example nondeterministic sorting example illustrate specialization nondeterministic choice 
focus nondeterminism clarity reasons consider program communication 
program see fig 
thread implements sorting numbers 
assign distinct meanings program ffl interested obtaining numbers non increasing order meaningful communication channel original program doesn need include communication channel consequently nondeterministic choice don care type choice ffl interested particular order swaps numbers done communication channel meaningful offers log sorting algorithm 
assume static dynamic 
residual programs showed fig 
automatically obtained speculative bta guards described section 
notice 
pe nondeterministic possible residual programs generated depending commitment specific choice specialization time 
pe sound complete correct consider meaning program just communication channel clear specialization loose nondeterminism initial program example specialization described able obtain trace execution swap 
final order perform specialization need constraint information propagation see gs constant propagation 
necessary order tag condition static true true branch conditional 
boolean forall thread alt true alt ch dummy ch eliminated ch dummy ch eliminated alt true alt ch alt ch ch alt ch alt ch ch alt alt alt thread thread int seq par par decision inserted 
par par seq thread 
boolean matrices specialization thread main 
swap 
swap 
swap thread procedure swap aux aux procedure nondeterministic sorting thread main thread nondeterministic sorting specialization 
