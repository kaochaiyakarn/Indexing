design concurrent agent oriented language october technical note 
dept computer science university melbourne australia email dev cs mu oz au anand rao level la street melbourne australia email anand oz au ramamohanarao dept computer science university melbourne australia email rao cs mu oz au research supported cooperative research centre intelligent decision systems australian government cooperative research centres program 
appears intelligent agents theories architectures languages 
lecture notes artificial intelligence lnai ed 
wooldridge jennings springer verlag amsterdam netherlands 
describes concurrent agent oriented language agentspeak 
agentspeak model distributed autonomous agents situated dynamic environments reactive proactive environment 
agents organized agent families offering certain services agents 
services realized execution associated plan 
agent associated database 
services portion database public available outside agent 
follows remainder database remaining services plans private agent family 
language supports extends concurrent object oriented language features synchronous asynchronous messages developed group communication primitives 
distributed artificial intelligence dai community object concurrent programming community investigating concept designing active autonomous concurrently running entities solve problems cooperatively primarily concerned representational reasoning capabilities autonomous entities called agents primarily concerned developing language constructs facilitate implementation entities 
result dichotomy number dai systems built little common language constructs conversely languages wanting sophisticated agent models behavioral specifications inherent dai systems 
notion agent extensively studied planning dai communities 
agent defined follows agent entity situated changing environment continuously receives perceptual input internal mental state exhibits reactive proactive behavior potentially changes environment situated 
complexity internal mental state differentiates agent oriented systems 
noted wooldridge jennings particular type agents called intention bdi agents studied extensively logical specifications bdi agents multi modal logics linear time characterisations studied procedural reasoning system prs system loosely logical specifications bdi agents 
formal verification bdi agents model checking techniques investigated furthermore prs applied number important practical problems air traffic control spacecraft systems handling telecommunications management air combat modelling research specification design verification agents particular bdi agents matured extent key concepts agents 
primary characteristics agents ffl presence complex internal mental state includes beliefs desires goals plans intentions ffl proactive goal directed behavior addition reactive behavior ffl communication structured messages speech acts ffl ability distributed wide area network ffl capable acting reacting changes environment real time ffl concurrent execution plans agent agents ffl reflective meta level reasoning capabilities 
build dai systems agent oriented bdi architecture embodies concepts advantages creating language constructs capture features 
advantages follows real time refers real time human decision making typically order seconds couple minutes ffl allows software engineers involved language design find efficient implementations language constructs getting distracted foundational conceptual issues related representation reasoning primary focus dai researchers 
ffl allow programmers program higher level language terms goals achieved intentions agent committed needing understand particular dai system foundational issues related agents 
ffl facilitate widespread agent oriented concepts conventional imperative rule object oriented languages get extended agentoriented language constructs 
researchers object oriented programming extending original notion objects incorporating features associated agents 
result proliferation various extensions objects active concurrent distributed reflective persistent real time 
single objectoriented language encapsulates mentioned features primary aim essential aspects agents design language constructs abstractions 
language constructs embody essential aspects agents various extensions objects currently attempted unified framework 
solid semantic theoretical basis logical formalization agents 
presents initial attempt direction describing design concurrent agentoriented language called agentspeak 
agentspeak sophisticated agent modeling capabilities prs appropriate language constructs influenced agentspeak language constructs agent family agent family analogous class object oriented languages 
instance agent family called agent 
agent family contains public area private area 
part database relations services offered agent family public accessed agents 
plans means providing service remainder database treated private agent family 
addition agent may perform certain services private satisfying desires 
agent family agent family name 
public database relation name relation name services service name service name private database relation name relation name services service name service name plans plan name plan name language created called agent oriented language object oriented language significance 
plans public agents environment request certain services performed specify plans means services performed 
property called means transparency agents 
agent instances referred agents instances agent family generated agent family template 
generic function called create agent instance creates instance agent family 
agent initialized database relation instances 
evident agent inherit public privacy classifications family belongs 
agent instance 
create agent instance agent family name relation instance relation instance 
creation agent instance unique system generated handle created access agent instance network 
unique agent handle form agent qual agent family name machine host creation time 
implies agents family created location name 
qualifier tag distinguishes handle relating agents 
note way imply agents remain forever machine created 
subsequent migration general addressing message passing handled name server agents binder agents 
similar feature accessing named processes network available agent process interaction language april database relations database definition consists set relations 
relation consists relation name followed list fields types 
purposes take types standard types integer real char enumerated type 
user defined types considered 
relations defined part agent family definition 
relation relation name 
type 
field 
type 
field 
relation instance particular instantiation relation 
relation instance consists relation name values respective fields 
generic function create relation instance create relation instance 
relation instance 
create relation instance relation name 
field field value field field value 
create relation instance function associate relation instance unique handle serve identify relation instance agent space generically distributed 
handle system generated format 
relation qual relation name machine host creation time 
serve index particular tuple 
field level comparisons permissible system notation relation name field 
denote value particular field 
relation instances correspond beliefs procedural reasoning system belief formulas formal logic logical system agentspeak allow nesting beliefs 
services agent deemed exist purpose accomplishing desires offer certain service agents 
services belonging category private belonging category public 
service consists service name list service statements 
service statement types ffl service achieve certain relational tuple ffl service query existence particular relational instances ffl message telling agent particular relational instance services defined globally scope agent family 
scope definition suggesting public private 
service statement 
service service name 
service type relation instance 
service type 
achieve query told service pre instantiated expectation deferred invocation create service instance generic function 
service instance 
create service instance service name service type relation instance 
case agents relations creation result generation unique handle having format 
service qual service name machine host creation time 
private service instances correspond internal goals agent prs goal formulas formal logic public service instances correspond messages agents requesting testing achievement certain formulas prs 
formal logic agentspeak allow arbitrary nestings belief goal operators 
plans plans means performing services 
plan identified plan name 
specifies service name situation plan applicable 
plan applicable goal statements performed 
successful performance goal statements situation asserted specified abstractly 
plan plan name 
invoke service statement 
context abs situation 
perform goal statement goal statement 
assert abs situation situation conjunction disjunction relations 
goal statement types ffl assignment statement ffl statement ffl statement ffl non deterministic statement ffl service statement ffl speech act statement 
situation denoted abs situation conjunction disjunction relational instances 
abs situation 
relation instance abs situation 
abs situation 
goal statement 
assign stat 
stat 
stat 
non deterministic stat 
service statement 
speech act stat 
assign stat 
variable 
value 
block 
goal statement 
goal statement 
stat 
abs situation 
block 
stat 
abs situation 
block 
block 
non deterministic stat 
non deterministically block 
block semantics assignment statements statements statements non deterministic statements taken understood 
elaborate speech act statements 
speech acts agents communicate sending messages 
default message passing agentspeak asynchronous 
words agent send message likes irrespective state receiving agent 
messages placed receivers mail box 
synchronous mixed mode messages supported 
addition agent agent message passing described language supports agent agent family message passing allow agents request services agent family basis having specify particular agent 
case messages routed message spaces linked particular agent family 
message spaces scanned respective agent processes 
communication message spaces preferred mode implementation broadcasting unicasting implemented 
case broadcasting necessary receive function receiving agent filter messages due 
need agent possess comprehensive list network addresses unicasting preferred solution account absence location transparency 
consider different categories speech act statements inform request waiting reply request waiting reply 
speech act stat 
inform act stat 
request wait stat 
request act stat 
consider categories detail 
provided small set basic speech acts complex speech acts similar defined kqml easily defined basic set 
inform suppose agent sending message certain priority agent 
message carries informational content obligation part receiving agent inform speech act 
type speech act captures asynchronous communication agents 
case agent agent family communication message sent agent family 
message received agents instances agent family inform family speech act message received agent agent family inform family speech act 
formally syntax inform speech acts follows inform act stat 
inform agent instance service instance priority 
inform family agent family name service instance priority 
inform family agent family name service instance priority 
definition priority taken integer number 
case inform speech act service type allowed told service type oblige receiving agent act information 
request wait consider agent sending request certain priority agent waiting reply placed receiving template 
sending agent waiting performing activity models synchronous communication agents 
case agent agent family communication request sent agent family 
depending request agents family agent family different speech acts 
formally syntax request speech acts sending agent waiting reply follows request wait stat 
request wait agent inst service inst priority receiver relation inst 
request wait family agent family name service inst priority receiver relation inst 
request wait family agent family name service inst priority receiver relation inst 
service types allowed cases achieve query 
receiver relation inst 
relation inst 
sent receiver 
request wait suppose agent sends request agent reply request needed sending agent immediately 
situation unnecessary sending agent wait reply 
turn receiving agent processed request send reply placed specific template provided sending agent 
sending agent needs reply query database template get result 
mode communication receiving template instantiated message sender need know time reply processing 
case agent agent family communication request sent agent family 
depending request agents family agent family different speech acts formally syntax request speech acts sending agent waiting reply follows request act stat 
request agent inst service inst priority receiver relation inst 
request family agent family name service inst priority receiver relation inst 
request family agent family name service inst priority receiver relation inst 
service types allowed cases achieve query 
receiver relation inst 
relation inst 
sent receiver 
messages speech act sent agent agent agent family unique message identifier identity agent sent message 
message syntax follows message 
message message id sending agent instance speech act stat 
message received agent agent family message decoded 
speech acts processed receiving agent appropriate actions taken 
operational semantics agentspeak requires agent families defined compile time 
main program creates instances agent families instantiating public private databases 
optionally instantiate agent public service instance executed soon agent created 
creation time agent associated private mail box 
agent point time states active executing plan instance idle plan instance waiting waiting message external environment waiting certain relation instance true 
speech act received agent placed mail box 
agent idle state agent active responds speech act selecting plans invocation service statement matches service instance speech act 
plans called relevant plans 
situation context relevant plans matched current database relations agent 
relevant plans match called applicable plans 
invocation bindings context bindings obtained process finding relevant plans applicable plans respectively create plan instances 
default system select plan instances start performing goal statements 
selected plan instance called intention 
particular instance intentions active 
intention independent thread 
agent multi threaded 
object oriented systems plan agent need performed sequentially goal statement goal statement 
service statement performance plan results service instance sent agent mail box 
stage agent process external service instances internal service instances 
external service instance priority higher internal service instance internal service instance handled selecting applicable plans service instance 
process goes till goal statements original plan performed plan fails stage 
agent performs speech acts requires waiting reply agent plan instance parents suspended resulting agent moving waiting state 
speech acts performed agent mail box agent active speech act highest priority chosen processing processed 
reply waiting plan instance received currently executing plan instance suspended reply processed 
allows agent process highest priority service time remain idle waiting reply 
semantics processing speech acts agent states table 
example having described syntax operational semantics agentspeak consider example computer integrated manufacturing cim application extract agentspeak code cim example section 
small part production process bolts 
robot picks rivet stock holds lathe 
lathe produces thread rivet convert bolt 
bolt placed box finished bolts 
mechanism override default user write meta level plans selecting plan instances 
starting state highest priority speech act mail box idle process speech act 
active speech act continue speech act 
priority active speech act suspend activate 
priority waiting process speech act pending reply 
table processing speech acts mail box robot making bolts called bolt robot may asked door robot frame door deliver bolts 
happens bolt robot suspends making bolts delivers stock finished bolts door robot 
bolt robot delivering bolts door robot fixing power window unit door frame 
modeling scenario requires balance reactive proactive behavior 
requires asynchronous message passing synchronization actions 
robots modeled autonomous agents running language agentspeak 
define agent families bolt robots making bolts threading door robots making doors frames 
consider description bolt robots agent family 
position robots rivet box bolt box public 
robots offer services agents bolts deliver bolts 
private database consists relations holding power status 
plans required provide services include bolts manhattan move move straight agent family bolt robots public database position rivet box bolt box services bolts deliver bolts private database holding power status self status services move grasp rivet choose lathe mount rivet bolt plans bolts manhattan move move straight pick drop lower arm grasp raise arm deliver position robot fields coordinate position pos position pos 
rivet box consists quantity field contains number box pos pos fields denoting rivet box position 
definition bolt box similar 
relation holding consists fields boolean value true false object held 
relation power status consists field secs left indicates number seconds power left 
standard convention variables start upper case letter constants start lower case letter 
services bolts deliver bolts achieve state environment relation bolt box changed 
service bolts changes quantity bolt box 
service deliver bolts changes position bolt box 
relation position int pos int pos relation rivet box int quantity int pos int pos relation bolt box int quantity int pos int pos relation holding boolean value bolt rivet object relation thread boolean value identity lathe identity relation agent status identity agent instance free busy status relation power status int secs left service bolts achieve bolt box service deliver bolts achieve bolt box consider plan bolts achieves goal making bolt rivet 
invoked service request bolts achieving state environment quantity bolts bolt box increased 
plan written relation name bolt box fields time invocation plan instance created values provided service instance substituted fields 
context consists conjunction relational instances sure robot holding bolt rivet 
constraints rivet rivet box sufficient power robot checked goal statements performed 
outer loop ensures robot making bolts rivet box empty 
statement requires robot move achieving state position position rivet box 
move private service agent available agents 
may plans moving successful performance plans sufficient robot execute step grasping rivet 
bolt robot sends message agent instances lathe agent family asking status 
waits replies chooses particular lathe agent free 
requests position lathe agent moves lathe agent 
rivet mounted lathe agent requested thread rivet 
job done robot moves bolt box located drops bolt box 
loop continues robot moving rivet box 
continue 
plan making bolts called rivet bolts 
plan bolts invoke bolts achieve bolt box quantity pos pos context rivet box quantity power status secs left holding false bolt holding false rivet perform rivet box quantity move achieve position rivet box pos rivet box pos grasp rivet achieve holding true rivet status request create service instance get lathe status query self status status request wait family lathe status request agent status agent status choose lathe query agent status lathe inst free position request create service instance get position query position pos pos request wait lathe inst position request position lathe pos lathe pos move achieve position lathe pos lathe pos mount rivet achieve mounted rivet lathe inst thread request create service instance thread achieve thread true lathe inst request wait lathe inst thread request thread move achieve position bolt box pos bolt box pos bolt achieve holding false bolt example relations self status position thread services give lathe status give lathe position thread public lathe agent 
cases message passing note agent service instances need instantiate respective handles 
mechanics explored 
bolt robot performing plan possible packaging robot send higher priority message deliver bolts 
happens default bolt robot suspend current intention plan instance making bolts adopt plan deliver bolts 
done resume plan making bolts 
default overridden user writing meta level plan 
case meta level plan may allow bolt robot complete current iteration loop finish bolt started attend request 
comparisons discussed earlier agentspeak abstracts useful concepts modelling agents build multi agent systems dai 
addition language constructs enable programmer program higher levels abstractions normally conventional procedural languages concurrent object oriented languages 
draws inspiration sources dai areas 
agent structure substantially influenced object structure message passing mechanics derived abcl notion services plans achieve services agentspeak pro active behaviour absent abcl primitives group communication absent abcl 
fact group communication mechanisms influenced tuple spaces linda constructs enable proactive modeling problem agentspeak linda 
operational semantics agentspeak similar agent oriented systems procedural reasoning system prs cousin distributed multi agent reasoning system dmars 
agentspeak agent oriented architectures provide graphical language writing plans 
agent oriented languages agent placa planning communicating agents similar spirit agentspeak 
differ definition mental state agentspeak considers mental state consist beliefs relations goals services plans intentions considers mental state list capabilities beliefs intentions placa list plans addition components agent 
agent placa view agent oriented programming aop specialization objectoriented programming oop 
view aop enhancement oop 
result notions agent families agent instances enhancements notions classes objects 
aim designing agent oriented language high level easy formally specified executed verified similar goals design concurrent metatem agentspeak concurrent metatem powerful communication primitives mental state agentspeak complex concurrent metatem agent behaviours concurrent metatem specified temporal logic specifications directly executed 
plans agentspeak plans prs translated variant dynamic logic specifications execution agentspeak plans viewed execution dynamic logic specifications 
envisage theorem prover execute plans 
formal relation agent program written agentspeak execution corresponding dynamic logic expressions shown techniques similar adopted agentspeak design phase 
provided foundation direction language issues resolved prior implementation 
inheritance mechanism agents explicit mechanics handling plan abandonment interruption security integrity belief sets concurrent execution environment meta level programming reflective capability mechanics multi agent actions probably important ones 
language constructs agentspeak implemented extensions objectoriented languages conventional languages lisp prolog 
interesting possibility implement agentspeak process interaction capabilities april experience shown building distributed real time applications significant human decision making involved agent oriented architecture significantly reduces development time furthermore modifications system fraction cost time compared building applications conventional languages 
success agentspeak determined large extent achieve similar reductions development maintenance costs allow programmers little ai knowledge achieve results 
acknowledgments authors mike georgeff valuable comments earlier drafts anonymous reviewers useful suggestions 
research supported cooperative research center intelligent decision systems australian government cooperative research centers program 
supported australian research council department computer science university melbourne 
bratman israel pollack 
plans resource bounded practical reasoning 
computational intelligence 
carriero gelernter 
linda context 
communications acm november 
dobson 
approach scalable parallel programming 
phd thesis dept computer science university york 
dubois du bois petit 
requirements analysis agent perspective 
lecture notes computer science pages 
finin weber wiederhold genesereth fritzson mckay mcguire shapiro beck 
specification kqml agent communication language draft 
technical report darpa knowledge sharing initiative external interfaces working group baltimore usa 
michael fisher 
representing executing agent systems 
pre proceedings workshop agent theories architectures languages 
appears lecture notes computer science volume amsterdam netherlands 
springer verlag 
gasser briot 
object concurrent programming distributed artificial intelligence 
distributed artificial theory practice 
georgeff lansky 
procedural knowledge 
proceedings ieee special issue knowledge representation volume pages 

distributed operating systems logical design 
addison wesley 
hoare 
communicating sequential processes 
prentice hall englewood cliffs nj 
ingrand georgeff rao 
architecture real time reasoning system control 
ieee expert 
lucas ljungberg 
artificial intelligence air traffic flow management 
technical report australian artificial intelligence institute carlton australia 
mccabe keith clark 
april agent process interaction language 
pre proceedings workshop agent theories architectures languages 
appears lecture notes computer science volume amsterdam netherlands 
springer verlag 
rao morley murray 
representation selection execution team tactics air combat modelling 
proceedings australian joint conference artificial intelligence ai 
rao 
means plan recognition theory reactive recognition 
proceedings fourth international conference principles knowledge representation reasoning krr bonn germany 
rao georgeff 
asymmetry thesis side effect problems linear time branching time intention logics 
proceedings twelfth international joint conference artificial intelligence ijcai sydney australia 
rao georgeff 
architecture rational agents 
rich swartout nebel editors proceedings third international conference principles knowledge representation reasoning 
morgan kaufmann publishers san mateo ca 
rao georgeff 
model theoretic approach verification situated reasoning systems 
proceedings thirteenth international joint conference artificial intelligence ijcai france 
shoham 
agent oriented programming 
artificial intelligence 
stroustrup 
programming language 
addison wesley 
thomas 
placa agent programming language 
pre proceedings workshop agent theories architectures languages 
appears lecture notes computer science volume amsterdam netherlands 
springer verlag 
wooldridge 
logic agent oriented testbed dai 
pre proceedings workshop agent theories architectures languages 
appears lecture notes computer science volume amsterdam netherlands 
springer verlag 
wooldridge jennings 
agent theories architectures languages survey 
pre proceedings workshop agent theories architectures languages 
appears lecture notes computer science volume amsterdam netherlands 
springer verlag 
yonezawa tokoro 
modelling programming object oriented concurrent language abcl 
object oriented concurrent programming pages 
mit press 
