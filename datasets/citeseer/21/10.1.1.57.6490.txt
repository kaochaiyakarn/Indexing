open programming services virtual machines design mozart seam thorsten programming systems lab saarland university postfach germany ps uni sb de programming systems lab saarland university postfach germany ps uni sb de discusses designs integrating services general open programming services particular virtual machines 
draw experience systems 
mozart programming system implementing language oz 
mozart virtual machine provides rich set services open programming concurrency persistence data code components dynamic linking distribution 
second system alice time statically typed variant oz extension standard ml open programming 
design proposals open programming services definition virtual machine called seam claim simple cient extensible 
substantiate claims preliminary performance results 
categories subject descriptors performance systems design studies software engineering software architecture general terms design languages keywords virtual machines experience report lessons learned 
mozart open programming system implementing programming language oz 
oz rich multi paradigm language supporting idioms logic concurrent functional object oriented programming 
mozart virtual machine provides services required open programming 
mean features application able interact non trivial ways applications application fragments unknown time implementing application 
open programming features include persistence components lazy dynamic linking distribution 
presents insights design services integration virtual machines general services open programming particular 
research motivated experience gained projects 
implementation mozart virtual machine 
started modification warren machine approach garbage collection 
early versions founded clean model virtual machine wildly grew tried keep pace quickly changing requirements 
fellow implementors needed re think design decisions order accomodate new features occasionally faced design problems solved existing system 
project design implementation new language called alice 
conceptually alice time statically typed variant oz extension standard ml incorporating open programming features la oz 
alice prototype implemented translation mozart bytecode additional goal languages interoperate gracefully 
course building prototype able take new viewpoint mozart virtual machine 
raised wish improved virtual machine rational approach services generally suited support programming languages oz 
assess implementation mozart virtual machine focusing domain open programming 
identify design decisions proven turned hard maintain hard extend 
complement critique presenting revised design addresses mozart shortcomings emphasizes simplicity ciency genericity extensibility 
implemented design virtual machine called seam 
running prototype seam execute full alice 
performance alice seam roughly comparable alice mozart 
structured follows 
section describe language features consider essential enable open programming 
section gives high level overview programming systems virtual machines presents principles service design 
take closer look core components mozart virtual machine section provide infrastructure services 
section examines open programming services 
describe experience proven experience revised design decisions appropriate 
section summarizes current status seam presents promising evaluation prototype 
section concludes 

language features open programming emphasis open programming lies things interaction dynamic 
example web browser supporting plug ins extend functionality instance handle new content types run time open web server allowing new handlers specific resources added replaced dynamically open compute server allows clients submit arbitrary program fragments compute requests open 
language system features consider essential open programming emerged oz mozart 
alice implements features context statically typed programming language 
concurrency dramatically simplifies handling multiple simultaneous connections files graphical windows clients servers peers 
possible number concurrent threads cooperate programming systems provide synchronization primitives 
dynamic linking composition run time program fragments known components provides configurability extensibility 
oz alice dynamic linking performed module managers resp 
component managers 
single running system arbitrarily module managers words link components separate configurable namespaces 
provides sandboxing 
component names represented uniform resource identifiers uris available class entities computed run time 
enables instance realization plug ins late registration handlers 
components automatically downloaded web servers 
persistence pickling serialization language entities provides means define file types file formats communication protocols means expressive data structures just bits bytes 
particular oz alice er persistence graph structured language data maintaining coreferences cycles 
mobile code denotes ability transfer class procedures closures code processes 
receiving process needs know code need able locate reception closure 
mobile code possible define higher order communication protocols enables implementation expressive mobile agents 
oz alice mobile code obtained simply defining pickling programming system architecture user view hardware os libraries tools component legend accesses virtual machine programming system operate arbitrary higher order data structures data structures containing class procedures 
network transparent distribution irrelevant inter connected computations operate local remote data 
distribution subsystem manages automatic establishment connections exchange language data structures 
previously named language features allow implementation simple distribution support language level 
require network transparency data types supported pickling distribution behaviours cloning example stationary procedures remote procedure call requires additional support virtual machine 
consider mozart distribution layer detail 
linguistic reflection gives programming system ability generate new program fragments incorporate ongoing computation 
requires interface compiler 
linguistic reflection serves accomodate user interaction configuration high level language 
examples evaluation queries command shell interactive top level source level debugger implementation php asp web server pages dynamic recompilation 

architecture programming systems programming system high level language comprises compiler run time system language libraries tools developing applications depicted 
central feature open programming dynamic exchange data code 
reason user high level language way access features underlying hardware operating system abstractions 
words programming system defines virtual machine provides view concrete machine programs targeting virtual machine run concrete machine implementation virtual machine exists 
virtual machine needs implemented language close underlying concrete machine order implement interface 
allows easily port virtual machine variety architectures 
speak low level language mean language virtual machine implemented 
user visible tools libraries complex usually implemented part low level language part high level language 
interface high level low level parts consists number primitives 
call service virtual machine set primitives required implement language level feature 
virtual machine services need ported targeting new platform 
desirable keep small possible 
typically feature understood define virtual machine service small allowing cient implementation feature 
section describe structure core virtual machine 
section describes di erent ways services added core virtual machine drawbacks advantages 
core virtual machine core virtual machine consists number components 
store provides model data representation memory management 
scheduler coordinates execution concurrent threads 
execution unit executes code 
subsystem abstracts away interface operating system input output channels 
store 
data structures computations reside store 
conceptually store represents graph data nodes implementation store manages allocation nodes layout computer memory 
program execution number nodes directly referenced program environment 
set nodes called root set 
nodes store need explicitly deallocated memory needs reclaimed periodically policy process called garbage collection 
garbage collections take place specified points program execution called synchronization points 
memory occupied nodes reachable directly indirectly edges store graph available allocation 
scheduler 
concurrency supported interleaved execution threads maintains task stack 
scheduler maintains queue threads passed execution unit execution round robin fashion 
threads queue said runnable thread executed execution unit say running 
synchronization point execution unit preempt execution current thread flag status register set 
status register vector flags signals asynchronously raised condition requires synchronous handling thread executed 
status register flags periodically set timer achieve time slicing fair preemptive scheduling threads 
status register flag set store signal need garbage collection 
execution unit 
programs compiled bytecode executed interpreter 
procedure call creates activation record called procedure 
activation records managed task stack 
concurrent synchronization 
input output subsystem abstracts details handling communication channels environment virtual machine process may specific operating system 
thread waits input output channel ready said blocked 
runnable threads continue executed threads blocked 
input output channels ready threads waiting runnable enqueued scheduler thread queue 
communication concurrent threads requires synchronization lead blocking threads 
specifically mozart provides logic variables futures synchronization 
architecture services outlined virtual machine provides number services top core components 
want distinguish design principles services di er service relates core 
say service stand service realization independent core virtual machine provides infrastructure memory management execution control 
computation service atomic scheduler point view 
computation results communicated store 
contrast integrated service reuses core virtual machine infrastructure 
particular service allocates data structures store computations execute fine grained control scheduler 
paragraphs discuss advantages disadvantages stand vs integrated services 
stand services 
designing service standalone ers advantages 
designer standalone service data representation best suited service constrained virtual machine store 
allows optimal ciency expressivity 
stand services external libraries reducing design implementation ort 
easy add new experimental services virtual machine stand services implemented independently deeply understood hand di cult stand services interoperate services virtual machine fine grained way 
instance stand services atomic interoperate core virtual machine concurrency features 
way split service number atomic sub services short runtime interfere noticeably preemptive scheduling 
partition may hard find increase complexity 
disadvantage stand services may increase total size low level code carries full implementation infrastructure 
may result maintenance consistency problems 
integrated services 
reusing core infrastructure obviates need infrastructure duplication service 
importantly automatic memory management comes free reuse store 
integrated services interoperate core virtual machine concurrency model 
resulting implementation may smaller service potential reuse may perceived elegant focuses implementing service infrastructure 
di culty designing integrated service service data control structures need modeled terms core virtual machine ers 
instance data needs allocated store nodes possibly resulting cient representations overhead inherent store nodes 
resources need wrapped store nodes handled finalization call entity fully managed store resource example area heap allocated memory outside store 
particular implementor may su er wrapping overhead external libraries may want data managed external library resources 
libraries may usable implementation integrated service may fundamentally incompatible core virtual machine instance library function block process compatible virtual machine idea concurrency 

design core components development mozart virtual machine started shortly design oz language 
oz open programming features time implicit fine grained concurrency 
virtual machine implementation tried keep pace fast development oz services experimental 
reasons services stand 
open programming features understood want investigate redesigned integrated services 
ciency genericity core components especially important integrated services 
section takes closer look core components easier reuse services 
store data representation mozart approach 
oz dynamically typed language run time type tests frequent need efficient 
mozart store uses level tagging scheme 
pointers tagged bit primary tags allow distinction data types occurring frequently logic variables list components atoms records 
designated primary tag delegates node type representation bit secondary tag stored header word heap allocated node 
designated secondary tag stands extension node wrapper custom data types managed means user defined virtual functions 
store managed copy garbage collector 
node type defined class non virtual methods copying nodes marking storing forward pointers recursing contained pointers nodes 
experience 
mozart design criteria data structures compactness ciency 
perspective memory management nodes adhoc definition 
consequence allowed simple recursively defined garbage collector consumes stack space 
classic techniques cheney style scanning possible nodes respect embedded pointers 
oz classes oz data structures su er lack generational garbage collection 
compensate class creation optimized trade time space ciency system libraries minimize classes precompute 
due ad hoc definition node types modification representation data structures new node type requires re thinking adapting memory management 
users defining extension nodes burdened memory management issues 
complex tagging scheme level organization visible clients store hard modify 
extend address space mb full platform dependencies full range bit addresses daunting task mozart pays penalty aligning store nodes double words 
luck design frequent nodes identified primary tags fit multiples words 
port bit architectures outstanding 
revised design 
seam aims reusable store 
uniform nodes la zinc generic easy node tagged integer heap block 
header word heap blocks specifies size second level tag component words tagged 
heap blocks self describing treated uniformly allowing simple cheney style garbage collector making implementation techniques generational garbage collection maintainable 
summary reuse store attractive 
new data types simply identify second level tag cheap easy introduce need care memory management essential successful reuse 
porting scheme bit architectures straightforward 
single additional header word imposes overhead small blocks instance list components 
code representation mozart approach 
code mozart virtual machine bytecode register instruction set strongly inspired warren machine wam 
self modifying instructions perform specialization respect actual values constants unknown compile time 
conforming common term bytecode stand representation intermediate languages platform independent object files opcodes operands encoded sequences bytes 
version oz implicit concurrency environment trimming performed wam impractical register liveness information needed accurate garbage collection 
liveness information represented explicitly computed run time required cached 
experience 
register bytecode language implicitly initializes program variables unbound logic variables led number hard find compiler bugs incorrect allocation registers led deadlocks manifest arbitrarily late 
stack bytecode compiler interpreter significantly simpler especially intended native code compilation argued stack bytecode disadvantage 
compiler knows accurate liveness information code generates just throws away compensate garbage collection liveness analysis performed procedures live activation record 
mozart uses non linear liveness analysis algorithm computes approximation accurate data 
precludes compiler optimizations dead code elimination calls built ins statically known return raising exceptions 
liveness information performed garbage collection oz data structures may store state allow 
analysis data managed manually heap allocation 
revised design 
seam bytecode designed cient run time compilation 
provides reusable infrastructure optimizations may required services seen 
bytecode static single assignment ssa form easily mapped stack register architectures basis optimization techniques 
program counter progressing sequence instruction carries explicit successor 
words instructions span directed acyclic graph acyclic compiler transforms loops tail recursive procedures procedure calls identifiers 
necessary reconstruct intermediate graph representation run time code generation 
concurrency mozart approach 
mozart implements threads virtual machine native threads managed operating system minimizes terms space especially concerning stack 
new threads created built procedure expects nullary class procedure computation execute 
furthermore implementation guarantees fairness typically ered operating system threads 
experience 
light weight threads success heavily concurrent designs possible restricting concurrency absolutely needed concurrency employed full fledged design mechanism 
defining thread creation class procedures introduced subtle form memory leak 
instruction set manages environment register banks temporary registers local registers closure registers liveness analysis performed registers 
particular registers kept live assumed closure applied thread creations usually case 
common open programming idiom create stream values non terminated list grows concurrently spawn separate thread iterate 
leads situations head list kept live register part list garbage 
revised design 
threads strong guarantees light weight fairness may provide useful infrastructure services kept seam 
bytecode ssa form accurate liveness information local environment avoids kind memory leak 
having explicit thread creation instruction bytecode eliminates kind memory leak closure needs constructed 

support open programming section structured language features 
language feature concurrency provided core component describe supporting virtual machine service ered mozart revise design 
dynamic linking discuss dynamic linking define component components linked 
examine components located run time followed optimizations component programming cient 
components linking mozart approach 
mozart component oz record consisting import specification export specification body 
linking consists applying unary procedure record imported modules 
body evaluates component returns exported module 
static lazy dynamic linking identical principles 
linking performed component manager implemented oz 
experience 
representing components values high level language major advantages 
tools operating components simple implement highlevel language component manager includes static linker 
virtual machine needs support components loading component 
built operations virtual machine nicely integrated model built components 
booting virtual machine simple mozart boots component imports procedure provides access built components 
boot component initializes full fledged component manager starts application component 
typical programming systems high level languages contrast boot heap image 
heap image needs prepared magic outside high level language 
heap images provide basis construction component system 
revised design 
design proven maximizes reuse core see need revise 
locating components mozart approach 
mozart components resources denoted uris 
run time resource uri needs localized example download actual file resource contents obtained 
localization consists rewriting uri concrete url uniform resource locator accessing resulting url 
rewriting implemented oz downloading boot component 
experience 
implementation downloading low level language opposed high level language complex needs resort processes system threads hard extend 
ftp download duplicates input output handling compatible concurrency requires separate process unix resp 
system thread windows 
feature required low level implementation downloading boot component proved useful 
revised design 
revised design restrict uri boot component directly point local file 
need low level implementation downloading 
designed implementation high level language uses standard input output primitives words completely reuse core 
optimizations mozart approach 
components introduced oz virtual machine bytecode defined optimized 
optimizations firstorder procedure application mentioned instructions apply top level program procedures 
compensate performance loss induced component bodies procedures component bodies marked procedures require instantiation time application 
instantiation consists copying code procedure replacing placeholders values define closures names fresh values 
re enables optimizations instance higher order applications turned order applications 
experience 
code instantiation optimizes intra module calls produces results coarse grained components 
optimization recover explicitly foreseen instruction set choice optimizations covered ad hoc 
instance inter module calls frequent presence finegrained modularization accounted 
revised design 
mozart optimization correctly identifies specialization subordinate service 
seam design features run time compilation specialization integrated run time compiler perform optimizations general instruction set express 
self modifying instructions mozart unnecessary 
currently decision specialize ine compiler encoded alternative closure creation instruction 
persistence pickling consists performing depth traversal graph store generating linear representation pickle 
process recreating graph linear representation 
components discussed section stored files pickling 
mozart approach 
performs traversals graph 
nodes recorded hash table detect sharing graph tested graph contains nodes allowed 
exception raised 
second traversal performs actual pickling 
hash table sharing detection hashes nodes address 
garbage collection modifies node addresses table needs re hashed 
graph traversal iterative managing stack visited nodes 
consists builder featuring operations top construction data structures interpreter reading linear representation invoking builder methods accordingly 
builder internally maintains stack partially initialized nodes filled similar technique pointers wam 
experience 
mozart provides graph traversal algorithm class 
algorithm instantiated overriding type specific processing methods 
mozart nodes uniform node type traversal routine consistent policy children compound nodes traversed left right right left 
sharing detection left subclasses instance performance better pass tests sharing pass accordingly macros handling sharing expanded average times pass 
matters worse types sharing detection pass performs sharing detection oz nodes labeling shared nodes second pass performs sharing detection manually managed objects labeled 
top construction node types require extra constructors accessors late initialization possible 
constructors designed consistently purpose builder implements mixture top bottom construction compensate 
pointers su cient model late initialization cases builder stack hold types task 
tasks duplicated sharing represented generically tags labeled unlabeled nodes 
traversals builder reused marshaling unmarshaling respectively mozart distribution protocols 
designs separated thoroughly pickling handles logic variables disallowed futures cause blocking inconsistently kinds nodes artificially distinguished exceptions confusing user 
plus side infrastructure pickling concurrent marshaling unmarshaling needed 
pickling just infrastructure atomic 
revised design 
seam implements pickling embedded virtual machines 
mozart problems simply absent seam store uniform node types 
seam uses instruction set pickle constructs graphs bottom practice degenerates instance lists need special optimization mobile code mozart approach 
mozart code mobile simply allowing class procedures 
mozart distinguish internal external code representation pickling convert 
instance external code uses integer opcodes internally threaded code pointer instruction implementation replaces integer opcode mobile code requires garbage collection code prevent space leaks 
mozart code allocated heap called code areas 
closures oz heap carry code area code areas values oz heap immediate operands 
mozart garbage collection algorithm kind heap 
code garbage collection non copying uses explicit deallocation 
policy couple fifth oz heap garbage collection code garbage collection 
experience 
unit allocation code area 
procedure occupies code area 
nested procedures contained code area means mozart deallocate code area rendering code garbage collection useless 
mobile code transfer components just small computations 
bidirectional links data code require complex handling 
garbage collector careful remove immediate operands root set deallocating code area 
mozart member selection instruction accessed module explicit meaning module reachable transferred just members 
mozart system components sequence shortcut declarations form revised design 
seam represents code regular language data structure rendering immediate arguments code garbage collection trivial 
conversion internal representation run time compiler keeps external representation eventual pickling 
note internal code aware possibly moved garbage collector 
member selection problem oz problem alice fixes making module accesses lazy 
hoisted top level changing semantics 
linguistic reflection table component size comparison loc component mozart seam store data representation pickling execution unit assembler mozart approach 
mozart compiler implemented oz available oz component 
interface allows set class environment compile code represented string syntax tree relative environment 
compiler generates list oz records record label representing instruction opcode subtrees specifying operands 
built assembler implemented traverses instruction list fills new code area corresponding bytecode returning nullary procedure 
application nullary procedure causes code executed 
experience 
pay price having code representation system oz list instructions place adapt instruction set modified happened 
alternative compiler produce pickle assembling heap 
data structures restricted values contained compilation environment 
revised design 
keep property compiler available standard component generates code heap 
seam external code representation form high level language data structure anyway assembling trivial revised design reduced creation closure class code 

implementation status seam running prototype seam implements full alice roughly regarded oz types 
seam validates consistency revised design previous sections 
find evidence goals simplicity compactness fulfilled comparing respective sizes mozart seam components 
table presents sizes measured lines code loc 
table shows results standard benchmarks run seam mozart 
report minimum time obtained runs sony mp mhz pentium processor mb main memory running windows xp 
benchmarks cover symbolic computation involving recursion simple integer arithmetic nave reverse deriv creation termination threads concurrent computation 
seam lies mozart performance sequential computations promising prototype keep mind lot tuning done mozart 
second benchmark suite evaluates pickling ciency long integer lists list large components containing code little sharing component signature representations coreferences types 
table benchmark results milliseconds nave reverse deriv alice mozart alice seam table pickling results milliseconds list component types save load save load save load alice mozart alice seam shown table seam beats mozart benchmarks 
details 
current prototype implementation available request 

examined architecture implementation open programming systems 
identified core virtual machine encapsulating platform specific aspects clearly separated set services 
services implemented stand integrated core virtual machine 
examined realization core services mozart mozart services standalone 
experience mozart approach proposed revised designs form virtual machine called seam clearly favors integrated services 
comparisons indicate seam design superior mozart respect implementation ort performance 

acknowledgments mozart implementors 
criticism may sound harsh mozart cient stable system real projects 
covered material greatly benefited discussions christian schulte provided significant initial input machine factorization 
ulrike becker feedback greatly improved readability 
seam includes improvements guido tack 

kaci 
warren machine tutorial reconstruction 
mit press 
alice programming system version 
web site programming systems lab universitat des saarlandes 
www ps uni sb de alice 
berners lee fielding masinter 
uniform resource identifiers uri generic syntax 
request comments network working group 

virtual machine multi language execution 
technical report nov 
www ps uni sb de papers abstracts html 
schulte smolka 
higher order module discipline separate compilation dynamic linking pickling 
technical report programming systems lab dfki universitat des saarlandes 
www ps 
uni sb de papers abstracts modules html 

oz notation 
mozart consortium feb 
www mozart oz org documentation notation 

alice land oz interoperability implementation functional language top relational language 
electronic notes theoretical computer science volume pages 
elsevier science publishers 
leroy 
zinc experiment economical implementation ml language 
technical report rt inria feb 
mehl 
oz virtual machine records transients deep guards 
doctoral dissertation technische fakultat der universitat des saarlandes 
mehl schulte 
machine oz 
proceedings plilp lncs utrecht netherlands 
springer verlag 
milner tofte harper macqueen 
definition standard ml revised 
mit press 

design implementierung und einer fur oz 
doctoral dissertation fachbereich informatik universitat des saarlandes dec 
stemple fegaras stanton sheard cooper atkinson morrison kirby connor 
type safe linguistic reflection generator technology 
fully integrated data environments pages 
springer 
mozart consortium 
mozart oz 
web site feb 
www mozart oz org 
wilson 
uniprocessor garbage collection techniques 
proceedings international workshop memory management number lecture notes computer science saint malo france sept 
springer verlag 

