proceedings st international conference service oriented computing pages trento italy december 
lecture notes computer science lncs vol 
springer verlag 
peer peer process execution osiris christoph schuler roger weber heiko schuldt hans 
schek swiss federal institute technology eth ch zurich email schuler weber schek inf ethz ch university health informatics technology innsbruck email heiko schuldt 
standards soap wsdl uddi facilitate proliferation services 
technologies processes means combine services applications provide new value added services 
large information systems centralized process engine longer appropriate due limited scalability 
propose distributed decentralized process engine routes process instances directly node ones 
peer peer process execution promises scalability characteristics able dynamically balance load processes services available service providers 
navigation costs accumulate nodes directly involved execution 
requires sophisticated strategies replication meta information especially replication mechanisms avoid frequent accesses global information repositories 
system called osiris open service infrastructure reliable integrated process support deploy clever publish subscribe replication scheme freshness predicates significantly reduce replication costs 
way osiris support process applications dynamically evolving system limiting scalability correctness 
experiments shown promising results respect scalability 
modern technologies xml soap wsdl provide simple powerful means publish information services access services 
platform independent definitions technologies simplify composition services offer new value added services 
way achieve goal define transactional processes web services 
processes compose web service calls application specific invocation order defining control data flow transactional guarantees 
activity process corresponds invocation web service 
programming processes referred programming large mega programming 
essentially processes higher level web services accessible soap simple object access protocol described wsdl web service description language document users easily integrate larger processes 
springer verlag berlin heidelberg processes impose vital requirements underlying infrastructure 
terms failure handling traditional semantics atomicity restrictive generalized 
process specification allow contingency strategies handle failures application level 
essentially task infrastructure guarantee correctness case network software failures 
applications require concurrency control infrastructure able coordinate access shared resources case needed 
usually semantically equivalent web services available different places 
infrastructure processes able equally distribute load web service providers 
similarly want optimize process executions costs expected execution times 
infrastructure bind services dynamically execution time process definition time 
decoupling provides high degree flexibility new providers services seamlessly integrated ideas autonomic computing 
system provide high degree scalability terms number service providers number concurrent processes 
survey existing infrastructures various frameworks supporting invocation web services proposed 
microsoft net example allows integrate web service calls applications 
web service call considered independently net provide execution guarantees complete applications 
application developers link services build time support dynamic service selection run time 
task balancing load available service providers shifted infrastructure applications 
workflow management systems traditional infrastructures process support 
systems ibm mqseries workflow support integration web service calls workflow processes 
usually systems offer engineered execution guarantees especially terms failure handling 
lack flexible binding service calls run time able optimally distribute load service providers run time 
systems follow centralized architecture consisting dedicated workflow engine scalability limited 
contrast grid infrastructures offer optimal support load balancing 
essentially infrastructure maintains available resources grid assigns tasks loaded nodes 
addition possible install new services grid case bottleneck detected 
systems lack sophisticated support combining service calls processes 
act uddi repository uniform description discovery interface focusing optimal routing service requests 
osiris glance describe new architecture distributed decentralized process management system 
osiris short open service infrastructure reliable integrated process support combines benefits existing infrastructures 
discovery invocation web services frameworks net ii 
process support execution guarantees workflow management systems iii 
late binding service calls load balancing grid infrastructures iv 
peer peer processes execution analogy peer peer file systems 
interesting characteristic osiris process navigation costs accumulate nodes community directly involved execution process 
especially central component charge process execution 
contrast centralized process engine bears potential scale number concurrent processes number service providers 
experiments osiris system verify behavior 
enable nodes require global meta information service providers load hosts 
approach osiris maintain meta information global repositories distribute information nodes 
replication meta information runs completely independent process execution considers local replicas meta information 
reduce amount update messages system nodes subscribe parts meta information 
meta data changes nodes having subscribed piece information receive update publish subscribe replication 
relax freshness local replicas 
instance nodes require load information balance load service requests available providers 
load information highly dynamic consistent replication expensive 
consequently osiris guarantees nodes local copies piece global meta information fulfill freshness constraints difference correct load value exceeds 
focus presentation main concepts osiris verification high scalability capabilities performance evaluations 
supports belief shift centralized process management decentralized solutions boost large scale information systems 
especially potential scale number concurrent processes number nodes connected community 
organization remainder describes approach detail 
section describe basic concepts implementation osiris respectively 
section fist results performance evaluation basis osiris system 
section summarizes related section concludes 
peer peer process execution section shortly describe concept basis infrastructure built 
osiris system implementation detail 
concept short hdb provides transactional guarantees processes distributed components existing services 
hdb provides sophisticated routing strategies dynamically choose available providers 
follow monolithic system architecture consists additional thin software layer called layer hdb layer 
hdb layer resides node community extends existing layers tcp ip stack process related functionality 
terms routing requests service called specifying type 
hdb layer maps service type real network address list available service providers current load hosts account 
hdb layer abstracts service routing tcp ip abstracts data packet routing 
tcp ip protocol guarantees correct transfer bytes hdb layer guarantees correct shipment process instances 
course requires service provider locally installs additional software layer 
ideally layer comes operating system tcp ip stack comparable net framework 
time community service providers split parts hand side providers cooperate hdb layer installed hosts 
hand side incorporate external providers proxy components 
proxy runs hdb layer forwards service invocations appropriate external provider 
providers join community installing hdb layer 
architecture osiris architecture osiris consists parts firstly node runs hdb layer responsible execution processes routing service requests failure handling 
main emphasis design avoid central component process navigation 
execution process instance involves nodes provide service process see process flow 
hdb layer requires global meta information service providers current load 
leads second part architecture additional global repositories maintain global meta information nodes community cf 
middle box 
hdb layer contains replica pieces meta information needs fulfill tasks 
services data hdb layer load repository lr hdb layer services data subscription repository sr process repository pr hdb layer service repository sr services data fig 

peer peer process execution important distinguish task process execution tasks meta data replication 
process execution osiris follows true peerto peer approach touching nodes provide service process accessing meta information locally 
meta data replication hand hierarchical organization central repositories distributed set nodes clients hdb layers replicating 
process execution meta data replication run independent 
subscription information 
usually providers offer semantically equivalent services 
simplify discovery services osiris deploys publish subscribe pub sub mechanism service invocations service provider subscribes execution services global service repository similar uddi repository 
client requests service publishes request service type topic hdb layer selects invokes available services 
osiris means process instance migrated publishing instance data service topics subsequent steps 
course central pub sub component routing publications 
hdb layer holds local replicas global subscription lists migrates process instances peer peer way plays role pub sub broker required process information 
service invocation may lead result states success failure 
case success current execution path followed 
alternative path executed possibly compensating previous activities partial roll back 
note alternatives compensation implemented additional execution paths process 
hdb layer services data hdb layer requires minimal information process definitions call local service publish instance data depending result state 
join node 
execution process instances termination process activity trigger arbitrary number succeeding activities 
usually termed fork process execution 
distributed environment osiris enables true intra parallel execution process instance 
fork usually accompanied join step number execution paths merged 
join requires nodes merged execution paths know join paths 
osiris assigns unique join node process instance creation time 
join required execution paths meet node continue path 
join osiris modeled additional activity call join typically occur provider node 
osiris arbitrary number different dedicated join nodes different process instances possibly different join nodes 
load information 
typically service offered different providers possibly conditions service costs may change time 
hdb layer selects services runtime optimize throughput response times processes 
consequence hdb layers require load information nodes offering service types potentially may receive process instance data hdb layer 
replication management far address global meta information distributed nodes osiris system 
obviously avoid nodes request information central repository time information needed 
hand full consistent replication may costly distribution load information peer peer manner lead messages components 
solution exploits characteristics updates certain pieces information infrequent process definitions subscription lists service providers 
nodes require parts global information information processes may run node 
changes global information critical load node slightly changes new load need published 
pub sub replication 
basic idea replication scheme publish subscribe techniques primary copy data resides single node global repository 
osiris stores information semi structured representation xml document 
client wants replicate data subscribe document 
result subscription repository publishes current state xml document 
primary copy changes repository publishes corresponding update messages subscribed clients 
update message comprises minimal information needed update clients versions current state 
partial replication 
replicating entire xml document optimal clients require small pieces document 
instance hdb layer need entire process definition execute current step instance 
example comprises subscription information load information consider large process service immediately service execution paths 
node running service know providers load data nodes running service offering services process 
general hdb layer requires small subset global information 
subscribing entire xml document node subscribes portion passing xpath expression subscription 
freshness predicates 
replication demands primary copy replicas consistent contain data 
global information requirement vital process definitions 
pieces global meta information subscription lists load information requirement far strong 
consider instance subscription lists long replicated version sufficiently close primary copy hdb layer able route process instances appropriately 
example load information load service marginally changes propagate updates clients 
generic approach allows add called freshness predicates subscription 
predicates define circumstances changes primary copy published 
prototype system addition components process support layer installed node community core services globally provide basic functionality required process management osiris prototype consists grape osiris graphical process editor additional tool graphically model define processes 
osiris implemented past years currently applied support process executions context virtual campus large scale image retrieval engine 
order give rough impression complexity osiris basic infrastructure services applications consists lines code 
layer local layer 
consists number plug able modules adapt system needs application 
instance concurrency control important non critical application conflicts service invocations may omit module local software layer 
concentrate description interesting modules load repository lr hdb layer services data hdb layer services data subscription repository sr hdb layer services data fig 

osiris architecture overview service repository ser process repository pr hdb layer 
services data service replication manager 
module provides basic replication services described section 
replication manager may take roles server client replicates information remote sources maintains information remote clients 
process manager 
process instance enters hdb layer process manager requests corresponding process definition replication manager calls specified service locally 
service call process manager determines services called 
service migrates process instance suitable service provider subsequent steps communication module 
process definition replicated hdb layer process instance consists process definition name current activity global process instance data 
communication 
communication module resolves pub sub addressing deploys load balancing module determine optimal provider list subscribed nodes 
communication message asynchronous 
transfer message nodes pc protocol persistent queues number messages typically quite large priority queues boost important messages 
publish subscribe routing 
implementation pub sub module simple due deployment replication manager 
note participants distributed transaction 
protocol simple 
hdb layers providers global osiris repositories pub sub module replicates subscription lists global subscription repository 
resolve pub sub address simply returns list corresponding topic 
load balancing 
implementation load balancer chooses provider able execution unit earliest point time purpose load balancing module replicates data global load repository replication manager 
load information critical strict freshness predicates case pub sub module process manager 
service manager 
service module builds bridge osiris system local service providers 
startup time service manager registers local services global subscription repository 
needed service manager may download new releases service software service repository 
furthermore service manager keeps track load local services publishes information global load repositories 
concurrency control 
task module provide functionality globally synchronizing process instances 
needed cases concurrent process instances access shared resources flow information instances 
workflow management systems task delegated applications osiris concurrency control transparent processes 
core services core services osiris essential run process peer peer manner 
core services maintain global repositories hdb layer replicate 
service dedicated concurrency control 
addition core services current prototype runs application specific services mainly support image retrieval virtual campus application 
subscription repository sr manages list services offered providers osiris community 
service comparable name server common tcp ip network infrastructure 
note contrast related pub sub approaches subscription repository provides routing functionality 
local component routes process instances peer peer manner targeting system 
service repository ser holds interface definitions services available system 
addition holds executables software subset services support demand installation hot spot services 
load service type large osiris decide install additional instances service type enhance throughput 
simple extend notion complex costs functions 
purpose exchange load balancing module sophisticated 
process repository pr holds global definitions processes community 
service decomposes process definition execution units consisting pairs subsequent activities 
load repository lr organizes manages load service providers system 
significant changes queue status providers propagated corresponding components 
concurrency control cc request invocation service sent local hdb layer forwarded global concurrency control service 
correct synchronization guaranteed applying protocols process level 
important optimization done local hdb layer forwarding request global cc service checked invocation may side effects service invocations potential conflicts exist 
dramatically reduces overhead concurrency control commonly observed conflicts level service invocations rare 
note repositories require centralized implementation 
instance osiris contain large number process repositories 
repositories may exchange coordinate contents may serve repository limited number nodes 
number nodes increase simply add repositories 
decrease load repositories may partition communities disjunctive sets nodes 
partition dedicated subscription service load repository available 
time time repositories exchange information publish changes remote partitions members partition 
failure handling osiris handles failures various levels 
firstly network failures occur node community currently available 
address determined subscription list choose alternative address list load balancing continue invoking new service instance 
alternatives exist alternatives fail suspend message new entries list arrive replication module 
software failures denote service local hdb layer fails 
service crashes local hdb layer immediately restarts failed service re submits requests service handling point time failure persistent queues 
local hdb layer crashes host running user watchdog reboot restart software 
osiris recovers consulting content local persistent queue logging tables subscribes local services subscription repository re starts processing queue entries persistent execution unit part global process definition holds information needed handle activity data flow call local service 
addition preprocessed information activities needed determine subsequent service calls 
process management system central setup load repository lr subscription repository sr process repository pr distributed setup osiris fig 

system configuration settings performance evaluations state 
hdb layer check state message transfers time crash 
depending log information pc protocol messages re sent locally removed 
osiris deals application failures service request results error 
osiris handle case failures automatically 
application developer resolve failures process definition time 
purpose process model provides alternative paths followed service fails compensation steps roll back steps executed undo side effects service invocation 
essentially application developer responsible correct failure handling application level 
correctly done osiris guarantees process terminate defined state case lower level failures 
measurements section provide results performance evaluations osiris system 
goal evaluations verify high potential paradigm compared traditional centralized process engine especially terms scalability 
measurements setup consider process execution top set distributed services 
services installed provider nodes 
goal set simple configuration order measure scalability navigation concept osiris 
shows centralized configuration 
dedicated process management node calls services distributed service providers traditional request reply style 
system configuration represents state art process management system executing web service processes 
process navigation meta data management takes place central node 
contrast shows typical setup osiris peer peer process execution 
process instances navigated routed directly provider nodes 
meta data managed set global services bound single node operate asynchronous decoupled way 
basis configuration settings want show impact distributing navigation costs 
clearly factor effects settings exactly process definitions transport infrastructure 
achieve additionally implemented central coordinator meets constraints 
preliminary results illustrate preliminary experiments measure pure navigation costs process instances 
purpose process consisting activities different service invocations actual payload service calls just return invocation 
way possible measure overhead process management 
addition centralized distributed execution scheme experiments consider different service binding paradigms 
setting denoted fix nodes process engine late service binding load balancing services hard coded process definitions net application 
second setting denoted nodes late binding load balancing available complete cluster service providers 
illustrate results varying numbers concurrent processes 
experiment started number processes start time measured total time process instances 
time divided number processes approximates mean overhead process navigation single process instance 
centralized process engine big difference late service binding load balancing turned upper graphs plot 
main reason behavior fact central engine able processes fast route service providers 
result processes endlessly delayed engine internal queue navigation threads concurrently handling entries queue 
cpu monitoring involved nodes exhibited coordinator node fully loaded cpu load nodes service providers idle long phases run 
decentralized process management hand significantly improves process throughput 
interestingly average navigation costs remain constant entire range number concurrent process instances 
late binding load balancing enabled distributed process management leads navigation costs ms process regardless number concurrent processes 
late binding load balancing distributed approach suffers extensively long queues service providers utilized process approach average time ms system scale central nodes distributed nodes central fix nodes distributed fix nodes number concurrent processes fig 

process navigation time osiris execute navigation steps 
contrast centralized approach service providers able process instance faster central coordinator 
experiments conclude process navigation cheaper distributed environment distributed process management system scales better larger workloads central coordinator 
advantage decentralized process execution pays combination late binding load balancing service invocations 
order investigate different performance characteristics centralized decentralized process execution currently defining benchmark process management system 
related important feature osiris system process execution takes place peer peer way involving centralized component 
sharp contrast state art process support system mqseries workflow biztalk systems allow process instances shipped different distributed process engines services processes invoked single engine time request response style 
peer peer execution osiris requires middleware layer installed participating component resp 
service provider 
similar frameworks net corba 
local middleware layers frameworks support invocation single services possibility combining services higher level applications 
crucial requirement peer peer execution meta information distributed local middleware layers cated freshness guarantees 
pure peer peer file sharing approaches fast track gnutella optimized flooding algorithms distribute meta data complete system 
osiris contrast applies publish subscribe techniques 
essentially allows fine grained treatment different meta data apply individual freshness guarantees 
self adaptability dynamically changing environment core aspect osiris system 
essentially means prior service invocation decision needed determine provider actual service invocation 
process management systems publish subscribe techniques purpose dayal provide detailed overview systems 
conventional implementations publish subscribe techniques require centralized publish subscribe broker broadcast technologies 
contrast osiris uses 
possible local layer equipped publish subscribe broker able correctly handle local events route service invocations 
service discovery shielded osiris clever replication meta information systems crossflow explicitly provide support service discovery 
terms self adaptability osiris reacts changes configuration new service providers implicit feedback loops 
addition idea service grids active changes configuration possible installation new service instances 
medical information systems instances long running patient treatment processes continuously migrated process description provide date treatment knowledge 
systems deal instance evolution 
mechanisms orthogonal osiris seamlessly integrated additionally enable kind dynamic changes 
order provide infrastructure processes execution time flexible highly scalable able dynamically adapt changing environments osiris combines concepts 
includes support discovery invocation web services established protocols soap wsdl 
second service calls combined processes 
osiris extended grape graphical modeling tool processes 
osiris provides dedicated transactional execution process instances 
third flexibility dynamic adaptation realized supporting late binding strategies service invocations 
allows dynamically chose available service providers apply sophisticated load balancing techniques 
applying clever replication algorithms meta data osiris supports executions process instances peer peer style 
due peer peer execution centralized process engine avoided 
consequence osiris optimized achieving high degree scalability terms number process instances system terms number service providers 
evaluations shown promising results 
order extend performance evaluations started specification fair benchmark similar allows compare decentralized osiris prototype conventional centralized process engine 
possible benchmark setup consists large number cluster nodes acting service providers node cluster eth rich exploited 
providers offer different set services 
important task find balance services location dependent available dedicated providers location independent services installed node case bottleneck 
benchmark application balanced mix data centric services accessing instance database repositories computationally intensive services 
usually location independent replicated demand 
addition basic benchmark specifications numbers types processes contain specification fluctuation dynamic behavior available service providers system 
evaluations benchmark performed joint project ibm labs settled 
order provide truly peer peer execution presence services large number conflicts current global concurrency control service replaced distributed implementation 
concurrency control problem requires global solution started investigate decentralized implementation replaces synchronization global component communication individual hdb layers 
frank leymann constructive comments stimulating discussions 

ibm microsoft 
uddi technical white 
www uddi org 

casati jin krishnamoorthy shan 
adaptive dynamic service composition 
proc 
conf 
advanced information systems engineering stockholm 

corba common object request broker architecture 
www omg org 

dayal hsu ladin 
business process coordination state art trends open issues 
proceedings th international conference large data bases roma italy september 

schmid leymann roller 
web services business process management 
ibm systems journal 

fasttrack technology 
www fasttrack nu 

foster nick tuecke 
physiology grid open grid services architecture distributed systems integration 
www org wg 

weikum 
benchmarking configuration workflow management systems 
cooperative information systems th international conference coopis israel september proceedings pages 

gnutella rfc 
rfc gnutella sourceforge net 

grefen aberer ludwig 
crossflow cross organizational workflow management service outsourcing dynamic virtual enterprises 
ieee data engineering bulletin 

haller schuldt 
consistent process execution peer peer information systems 
proceedings th conference advanced information systems engineering caise pages klagenfurt austria 
springer lncs vol 


levy meredith andrews beckman klein 
biztalk server business process orchestration 
ieee data engineering bulletin 

ibm mqseries workflow 
www ibm com software ts mqseries workflow 

microsoft net 
www microsoft com net 

reichert dadam 
adept flex supporting dynamic changes workflows losing control 
journal intelligent information systems march 


schek hm grabs hm schuldt weber 

proceedings st international conference web information systems engineering wise pages hong kong china june 


schek schuldt schuler weber 
infrastructure information spaces 
proceedings advances databases information systems th east european conference adbis volume lecture notes computer science pages bratislava slovakia september 
springer 


schek schuldt weber 
infrastructure information space 
proceedings th ifip working conference visual database systems brisbane australia may 

schuldt 
process locking protocol ordered shared locks execution transactional processes 
proceedings th acm symposium principles database systems pods pages santa barbara california usa may 
acm press 

schuldt alonso beeri 
schek 
atomicity isolation transactional processes 
acm tods march 

soap simple object access protocol 
www org tr soap 

weber schuler schuldt 
schek 
webservice composition grape osiris 
proc 
rd international conference large data bases berlin germany september 

weikum hasse 
self tuning database technology information services thinking viable engineering 
th international conference large data bases pages hong kong china august 

wiederhold wegner ceri 

communications acm november 

berger 
advancing internet 
talk international conference shaping information society europe april 
www ibm com de entwicklung academia index html 

wsdl web service description language 
www org tr wsdl 
