trust aware collaborative filtering recommender systems paolo massa paolo itc irst sommarive povo tn italy massa itc recommender systems allow people find resources need making experiences opinions nearest neighbours 
costly annotations experts replaced distributed process users take initiative 
collaborative approach enables collection vast amount data new issue arises quality assessment 
elicitation trust values users termed web trust allows twofold enhancement recommender systems 
firstly filtering process informed reputation users computed propagating trust 
secondly trust metrics help solve problem associated usual method similarity assessment reduced computability 
empirical evaluation epinions com dataset shows trust propagation allows increase coverage recommender systems preserving quality predictions 
greatest achieved new users provided ratings 
recommender systems rs widely online amazon com suggest users items may find useful 
collaborative filtering cf widely technique recommender systems 
biggest advantage cf content systems explicit content description required 
cf relies opinions expressed users items 
calculating similarity item description user profile content recommender cf system searches similar users neighbours uses ratings set users predict items liked current user 
contrast centralized content recommender cf technique distributes load involved evaluating marking items data base 
reason obvious advantages content system knowledge expense annotate millions items high 
cf suffers weaknesses problems new users cold start data sparseness difficulty spotting malicious unreliable users 
propose extend rs trust awareness users allowed explicitly express web trust users trust ratings paolo massa opinions items 
technique propagate trust global trust network trust aware recommender systems able overcome previously mentioned weaknesses 
fact trust allows base recommendations ratings users trusted directly current user indirectly example trusted trusted user 
way possible cut malicious users trying influence recommendation accuracy 
rss users typically rated small portion available items user similarity computable users rated items commons 
fact highly reduces number potential neighbours ratings combined create recommendations current user 
problem exacerbated cold start users users just expressed ratings 
allowing user rate users system quickly recommendations explicit neighbour set 
means new user soon receive recommendations incentive keep system provide ratings 
contributions fold identify specific problems current collaborative filtering rss propose new solution addresses problems 
precisely formalize domain architecture proposed solution trust aware recommender systems 
conduct experiments large real dataset showing proposed solution increases coverage number ratings predictable reducing accuracy error predictions 
especially true users provided ratings 
rest structured follows firstly introduce recommender systems weaknesses section 
section discuss trust computational point view argue trust aware solutions overcome weaknesses described previous section 
section devoted formalizing environment trust aware recommender systems operate section describes architecture framework components 
experiments section section provides discussion results 
section concludes discussion 
motivations recommender systems rs suggest users items 
main algorithmic techniques compute recommendations contentbased collaborative filtering 
content approach suggests items similar ones current users shown preference past 
content matching requires representation items terms features 
machine parsable items news papers representation created automatically kind items movies songs manually inserted human editors 
activity expensive time consuming trust aware collaborative filtering recommender systems error prone highly subjective 
reason content systems suitable dynamic large environments items millions inserted system frequently 
collaborative filtering cf hand collects opinions users form ratings items 
recommendations produced opinions users similar current user neighbours 
advantage content rs algorithm doesn need representation items terms features judgments user community 
collaborative filtering stresses concept community user contributes ratings performances system 
see simple powerful idea introduces new concern quality reliability single rating 
rest concentrate rss cf 
traditional input cf algorithm matrix rows represents users columns items 
entry element matrix user rating item 
shows matrix 
matrix reloaded lord rings titanic la vita bella alice bob carol dean table 
users items matrix ratings classic input cf 
order create recommendations current users cf performs steps compares current user ratings user ratings 
cf computes similarity value user means totally similar totally dissimilar 
usually similarity measure pearson correlation coefficient 
coefficient computable items common rated users 
situation occur case users comparable 
ratings similar users neighbours predicts rating current user give item rated 
suggests user items highest predicted rating 
standard cf schema simple effective weaknesses discuss rest section 
rs computationally expensive 
cf algorithm described typical lazy instance learning algorithm 
algorithms suffer paolo massa computationally expensive query time need search user profiles find best set neighbours 
problem means current rs scale large environments millions users billions items example envisioned semantic web 
slow step sense takes seconds minutes find neighbours user 
reason feasible recommendation request user done periodically offline 
means recommendations date user ratings take effect immediately 
user similarity computable users 
step suffers problem 
order able create quality recommendations rss able compare current user user goal selecting best neighbours relevant item ratings 
step mandatory accuracy affects system accuracy failing finding neighbours lead poor quality recommendations 
ratings matrix usually sparse users tend rate millions items case user don share minimum number items rated commons required user similarity metrics computing similarity 
reason system forced choose neighbours small portion comparable users probably going non comparable relevant users 
usually happen users hundreds ratings users ratings 
argued important hard rs provide recommendation user ratings order invite provide ratings keep system user ratings probably system regularly 
easy attacks malicious insiders 
recommender systems commerce sites example amazon com 
contexts able influence recommendations attractive imagine force amazon com recommend book wrote 
subverting standard cf techniques easy 
simplest attack copy profile attack attacker copy ratings target user system think attacker similar user target user 
way additional item attacker rates highly probably recommended target user 
currently rss mainly centralized servers creating fake identity time consuming activity attacks currently heavily carried studied 
believe soon publishing ratings opinions decentralized example semantic web formats foaf types attacks issue :10.1.1.62.8205
basically creating attacks widespread spam today easy 
web trust trust aware collaborative filtering recommender systems decentralized environments free create content centralized quality control entity evaluating quality content important issue 
situation observed online communities example slashdot org millions users posts news comments daily peer peer networks peers enter corrupted items marketplace sites ebay com users create fake auctions 

trust network 
nodes users edges trust statements 
dotted edge undefined predictable trust statements 
environments strategy delegate quality assessment task users 
example asking users rate items cf uses quality assessment approach 
similarly system ask users rate users way user express level trust user interacted 
example user issued trust statement value value web trust webs trust users aggregated global trust network social network graph walking algorithm predict importance certain node network 
intuition exploited example pagerank algorithm powering search engine google com 
analysis web network content centralized quality control pagerank tries infer authority single page examining structure network 
pagerank follows simple idea link page page represents positive vote casted global rank page depends number quality incoming links 
intuition extended web pages users users allowed cast trust values users values predict trustworthiness unknown users 
example consumer opinion site epinions com users express opinions ratings items allows users express degree trust users 
precisely epinions com faq suggests user add web trust reviewers reviews ratings consistently valuable 
paolo massa explicit trust statements possible predict trust unknown users propagating trust precisely trusts trusts possible infer trust dotted arrow 
important underline obvious fact trust subjective user trusted distrusted 
example see trusted 
important take account predicting trustworthiness 
self evident fact trust symmetric see users instance 
trust metrics precisely goal predicting certain user trust unknown users complete trust network :10.1.1.58.4691:10.1.1.62.8205
example trust metric predict level trust trust metrics divided local global 
local trust metrics take account personal subjective views users predicting different values trust users single user 
global trust metrics predict global reputation value approximates community considers certain user 
way don take account subjective opinions user average standardized global values 
pagerank example global metric 
general local trust metrics computationally expensive computed user global ones just run community 
argue trust awareness overcome weaknesses introduced section 
evidence supporting claims section 
precisely trust propagation allows compute relevance measure alternative user similarity additional complementary weight calculating recommendation predictions 
shown predicted trust value trust propagation computable users user similarity value 
cf systems problems scaling calculating neighbours set requires computing user similarity current user user 
significantly reduce number users rs consider prefiltering users predicted trust value 
example possible consider users small distance social network current user considering users predicted trust higher certain threshold 
trust metrics attack resistant spot malicious users take account reliable users ratings 
kept mind isn global view user reliable trustworthy example user considered trustworthy user untrustworthy user 
process identify malicious users relevant role play concept distrust 
studying meaning distrust computationally exploit topic aware just researching needed order fully understand 
trust aware collaborative filtering recommender systems dataset run experiments see section contain distrust information 
detailed description rs weaknesses trust awareness alleviate massa 
formal domain definition section precisely formalize environment trust aware recommender systems operate 
environment composed set uniquely identifiable peers 
pn domain definition term peer proposed framework users online community intelligent web servers willing trade share resources nodes peerto peer network software agents possible conceivable independent entity able perform actions 
peer uniquely identifiable 
instance web reasonable unique identifier peers uri uniform resource identifier 
set uniquely identifiable items 
im items identifiers think globally agreed ones isbn books instance hashing content digital item description produce unique id sets trust statements 
peer allowed express trust value peer 
represent peer consider valuable ratings peer 
peer trust statements formalized trust function domain codomain means total distrust total trust 
missing value function defined represents fact peer express trust statement peer probably didn direct evidence deciding peer trustworthiness 
tpi trust function peer pi example tp means peer issued trust statement expressing degree trust peer high trust value 
model consider timing trust statements instance peer expresses trust statement user probably updating value interactions just override previous value 
paolo massa sets ratings 
peer allowed express rating item 
peer ratings formalized rating function domain codomain means total dislike maximum appreciation 
missing value function defined means user rate item 
rpi rating function peer pi example rp means peer rated item low rating expressing partial dislike item 
case simply consider rating user item 
discrete ratings scales example integers trust statements ratings easily mapped interval 
similar models proposed open rating systems context semantic web recommender systems 
worth underlining trust rating functions sparse undefined largest part domain 
peer reasonably experience rate items world example books songs 
true trust peer reasonably interact peer think community billions peers issue trust statement 
kind environment created online companies example epinions com amazon com 
likewise environments moving direction example mentioned peer peer networks open marketplaces notably semantic web goal create web hyperlinked pages understandable automatically machines 
extend interesting promising semantic formats foaf expressing friends trusted users expressing reviews items :10.1.1.62.8205
trust aware recommender architecture section architecture proposed solution trust aware recommender systems 
shows different modules black boxes input output matrices white boxes 
system takes input trust matrix representing community trust statements ratings matrix representing ratings users items produces output matrix predicted ratings users assign items 
matrix rs recommending liked items user precisely rs selects row predicted ratings relative user items highest values 
course final output matrix sparse having cells missing values system able predict rating trust aware collaborative filtering recommender systems user give item 
quantity predictable ratings possible evaluation strategies 
explain detail single module 
define task module describe algorithm chose experiments 
architecture modular different algorithms plugged different modules 
input output trust nxn users items trust metric trust aware rating similarity user nxn rating metric similarity predictor pure collaborative filtering estimated trust nxn 
trust aware recommender systems architecture 
predicted ratings trust metric module trust metric module takes input trust network representable trust matrix exploits trust propagation order predict user trust user 
way produces estimated trust matrix 
value cell represents metric predict peer pi may trust peer pj 
quantity weight representing user ratings considered creating recommendation 
stated trust metrics classified local global 
framework global trust metric example pagerank produces estimated trust matrix rows equal meaning estimated trust certain user column user row 
attempts propose trust metrics research topic aren thorough analysis metrics perform better different scenarios :10.1.1.58.4691:10.1.1.62.8205
goal show useful improving recommender systems simple trust metric experiments 
sophisticated ones plugged framework easily 
local trust metric source user assigns user predicted trust minimum distance source user 
precisely assuming trust propagated propagation distance user distance source user predicted trust value users reachable maximum propagation distance predicted trust value neighbours 
paolo massa trust metric choice guided fact dataset experiments weighted trust statements full positive trust statement access peer pi trusts pj see description dataset experiments section 
example analyze trust network considering trust statements values 
predict trust values user choose maximum propagation distance case trust metric assign users distance predicted trust value users distance predicted trust value 
way adopt linear decay propagating trust users closer trust network source user higher predicted trust 
similarity metric computing similarity current user user standard steps collaborative filtering techniques 
task compute correlation users represented vectors ratings producing output user similarity matrix ith row contains similarity values ith user user 
correlation value steps weight user ratings intuition user rates similar way current user ratings useful predicting ratings current user 
technique pearson correlation coefficient 
wa ra ra ru ru ra ra ru ru note coefficient computed overlapping items 
users item rated coefficient meaningful 
user possible compute correlation coefficient users share rated items usually small portion described 
experiments see section follow strategy keeping positive similarities values users negative correlation dissimilar current user better consider ratings 
rating predictor step classical step collaborative filtering 
predicted rating item current user weighted sum ratings item neighbours pa ra wa ru ru wa neighbours taken user similarity matrix estimated trust matrix weights wa cells chosen matrix 
example case neighbours user ith row user similarity matrix 
option combine matrices order produce output matrix embeds information user similarity estimated trust 
trust aware collaborative filtering recommender systems usually matrices sparse strategy useful reducing sparseness providing neighbours single user 
goal evaluate separately possible contributions trust awareness rs propose combination technique require dedicated evaluation 
section explained architecture trust aware recommender systems 
section experiments conducted dataset 
experiments section experimental results provide evidence supporting claim trust awareness improve performances rss 
section structured follows firstly introduce details dataset explain detail experiments run discuss chosen evaluation strategy 
collected dataset required features discussed section online community epinions com 
epinions com consumers opinion site users review items cars books movies software 
assign numeric ratings range min max 
users express web trust reviewers reviews ratings consistently valuable block list list authors reviews find consistently offensive inaccurate valuable 
collected dataset crawling epinions com site november 
stored user rated items numeric rating trusted users friends 
note access publically available positive trust statements tpi pj private block lists 
collected dataset consists users rated total different items 
users rated item 
total number reviews 
sparseness collected dataset 
total number trust statements 
details dataset instance standard deviations distributions rating trust statements way collected 
underline majority users called cold start users users provided ratings 
instance collected dataset half users provided ratings 
see precisely users traditional cf systems tend perform poorly 
see trust aware solution especially powerful users 
explain different experiments run epinions com dataset 
instantiated architecture order compare contributions trust metric user similarity metric web trust faq www epinions com help faq show faq paolo massa performances system 
run separately pure collaborative filtering strategy bottom dotted box trust aware top dotted box 
trust metric module introduced section 
conducted different experiments different maximum propagation distances precisely 
choosing max propagation distance means considering user users explicitly inserted web trust friends epinions com vocabulary 
adopted heuristic away user current user reliable inferred trust value 
reason choose run experiments propagating trust distance 
expected increasing propagation distance implies technique able consider average increasing number potential neighbours single user 
intuitively higher propagation distance sparse resulting predicted trust matrix 
similarity metric module pearson correlation coefficient equation commonly similarity metric rss 
rating predictor module standard cf technique equation 
experiment generated neighbourhood set user similarity matrix estimated trust matrices 
order compare performances different approach pure cf trust aware need choose recommender system evaluation technique 
leave technique mean absolute error mae error metric appropriate useful evaluating prediction accuracy offline tests 
leave involves hiding rating predict 
predicted rating compared real rating difference absolute value prediction error 
averaging error prediction gives mae 
important way discriminate different recommender techniques coverage 
rs may able predictions item 
reason important evaluate portion ratings rs able predict ratings coverage 
quantity informative quality rs 
fact case rs predicting ratings user gave ratings able user rated items 
example suppose consider user ratings users rating 
case probable situation rs able predict ratings heavy rater ones 
predicted ratings possible ones corresponding ratings satisfied user users corresponding 
reason compute users coverage defined portion users rs able predict rating 
similar argument applies mean absolute error 
usually rss produce small errors heavy raters higher ones cold start users 
trust aware collaborative filtering recommender systems heavy raters provide ratings computing mae going count small errors times big errors cold start users count times 
reason define measure call mean absolute user error compute mean error user average user errors users 
way user taken account cold start user influential heavy rater 
argument trust awareness especially useful cold start users section analyze performances coverage error different techniques focusing particularly users provided ratings 
analysis important users dataset 
trust aware solutions pure cf ones different input respectively trust statements ratings 
compare similar quantity input information available 
remember leave hides rating affect number trust statements example compare users expressed ratings users expressed trust statements friends 
section discussed dataset experiments chosen evaluation technique 
section discuss results 
discussion results section discuss results conducted experiments 
results summarized table 
rows table represents evaluation measures obtained different techniques 
refers pure cf strategy bottom dotted box trust refers strategy top dotted box max propagation distance 
columns table represents different views data 
column show evaluation measures users gives picture average performances different techniques 
columns concentrate cold start users relevant portion users 
example second column users gave ratings considered 
column indicate number considered users mean number friends explicitly expressed users 
done order show quantity information available different techniques number ratings cf mean number friends trust aware solution 
compare techniques comparable quantity input information 
discussion user similarity tends perform users rated items heavy raters poorly users rated items cold start users 
fact paolo massa ratings users friends coverage ratings trust trust trust trust coverage users trust trust trust trust mae trust trust trust trust trust trust trust trust table 
results experiments 
rows represents different evaluation measures collected different evaluated techniques 
columns represents different views data second column evaluation measures computed users rated exactly items 
shown type users pearson coefficient computable users potential neighbours 
means high probability neighbours rated item prediction 
represented fact user similarity technique able cover ratings users 
especially relevant compared trust metric technique max propagation distance able cover ratings users 
means able predict rating users user able predict small portion ratings average 
stated predicting heavy raters reasonably easy real challenge rs making recommendations new users ratings find useful system keep 
fact confirming user similarity works heavy raters cold start users difference mae 
averaging prediction error ratings gives mae considering average error user obtain 
means trust aware collaborative filtering recommender systems error higher cold start users ratings contribute error 
trust metric techniques mae general close meaning errors performances similar type user 
analyze global mae different techniques users column table 
higher error obtained experiment user similarity matrix 
ones estimated trust matrices lower error 
additional allowed trust propagation step decrease error difference error different max propagation distances small mae trust 
say trust performs better user similarity decrease error small 
hand coverage significantly higher trust aware strategies example propagating trust distance able cover ratings prediction users 
values respectively user similarity technique 
argued important challenging users rs cold start users 
reason analyze detail performances term coverage error different techniques considering users rated small number ratings 
second column table consider users rated items 
worth noting users provided rating significant portion 
users rated just items prediction possible 
fact leave hides rating pearson correlation coefficient computable user zero neighbours 
order compare performances different techniques need comparable quantity input information discussed section 
compare preferences users ratings leave ratings input performances trust users ratings average trust statements available input 
case achieves coverage ratings coverage users mae 
second case trust considering friends neighbours obtain ratings coverage users coverage mae 
max propagation distance portion covered ratings users increases significantly tp respectively 
note slight increase mae due increase number predictions 
results important trust aware technique able generate prediction half users ratings keeping error low 
similar results observed users rated items 
note expected technique error users ratings higher error users 
difficult predict ratings users small rating profiles 
paolo massa experimental results summary coverage similar error 
comparing technique user similarity trust metric users observe coverage ratings users higher trust awareness user similarity propagation distances greater 
expected highest coverages obtained greatest max propagation distances 
prediction error decreased trust metrics user similarity 
greater propagation distance smaller error 
order bootstrap system new users better promote acquisition trust statements 
cold start users sizeable portion dataset trust statements trust metric achieves higher coverage reduced error respect similar amount rating information 
example shown users ratings average friends trust able prediction users user similarity higher error 
fact suggests order rs able recommendations new users collecting trust statements effective term coverage error collecting equivalent number ratings 
integrating advantages trust propagation user similarity produce better results 
possible combine information embedded user similarity matrix estimated trust matrix take advantages strategies 
concentrate evaluating separately contribution technique propose evaluate combination technique 
goal analyze potential contribution trust metrics increasing performances recommender systems 
argued trust awareness solve traditional problems rss proposed architecture trust aware recommender systems 
shown set experiments large real dataset trust metrics increase coverage number predictable ratings decrease error compared traditional collaborative filtering rs 
effect especially evident new users rated items 
experiments results able suggest rs bootstrapping strategy new users collecting trust statements useful collecting equivalent amount ratings 
goes directions 
need evaluate performances different trust metrics rss 
particular interesting test local trust metrics performs better global instance pagerank 
direction deals distrust negative trust statements 
got access complete anonymized epinions com dataset contains users block list 
considering trust aware collaborative filtering recommender systems distrust topic context especially useful order conduct deep evaluation possible rss attacks test trust aware solutions able detect malicious reliable users 
final goal create trust aware recommender systems need propose study algorithm combining information evaluated separately estimated trust user similarity 
specific analysis understanding information conflicting user predicted dissimilar viceversa 

tim berners lee james hendler ora lassila 
semantic web 
scientific american 

eaton 
module aggregating reviews 
www info 
jennifer golbeck james hendler parsia 
trust networks semantic web 
proceedings cooperative intelligent agents 

goldberg nichols oki terry 
collaborative filtering weave information tapestry 
communications acm 

guha 
open rating systems 
technical report stanford university ca usa 

guha kumar raghavan tomkins 
propagation trust distrust 
proceedings www 

herlocker konstan borchers riedl 
algorithmic framework performing collaborative filtering 
proceedings conference research development information retrieval 

levien 
advogato trust metric 
phd thesis uc berkeley usa 

massa bhattacharjee 
trust recommender systems experimental analysis 
proc 
nd int 
conference trust management 

hurley kushmerick 
collaborative recommendation robustness analysis 
proceedings int semantic web conf 
iswc 

page brin motwani winograd 
pagerank citation ranking bringing order web 
technical report stanford usa 

resnick varian 
recommender systems 
communications acm 

ziegler 
semantic web recommender systems 
joint icde edbt ph workshop 

ziegler lausen 
spreading activation models trust propagation 
ieee international conference technology commerce service eee 
