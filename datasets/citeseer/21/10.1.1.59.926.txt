attribute refinement software architectures computer science department university namur belgium ven info ac aims show usefulness attaching attributes pieces software architectures order direct transformation refinement process 
attributes properties considered ways express architectural structures characteristics constrain refinement process 
define methodology consists refining transforming architecture basis attributes attached 
methodology illustrated case study 

background correct architecture specification crucial construction implementation documentation software systems 
lot done define architecture description languages adl addressing specific issues 
subject part research project carried university namur aim provide adl handle multiple levels abstraction concepts may annotated attributes 
attributes way express architectural structures properties representing requirements architectural structures characteristics denoting features fulfilled architectural structures 
advantages language permit different actors development process intervene architecture expressed familiar language actor 
level decomposition inspired view model 
abstraction levels conceptual level logical level physical level infrastructure level 
don place detail levels summarize conceptual level logical level operational centered physical level infrastructure centered level specifies computational resources cpu network links architecture deployed 
compare approach omg model driven architecture mda approach conceptual logical architectures correspond platform independent models pim physical architectures correspond platform specific models psm 
levels considered phases architecture refinement methodology focus 
importance impact non functional requirements nfr software architectures demonstrated 
propose methodology attributes describing nfr decorate elements adl 
attributes trigger local transformations architecture order progressively fulfill nfr 

metamodelling concepts adl concepts defined context meta case tool 
respect approach world divided distinct levels abstraction meta metamodel meta model model levels 
language defined terms vocabulary meta meta model say metaobjects meta relations meta properties meta models generalization relations 
inheritance 
metaobjects may meta properties meta relations meta objects may inherit relation meta objects 
meta models metaobjects denote aggregations meta objects 
means meta models may meta relations meta objects meta models 
may inherit aka 
specification level 
meta prefix just precise level abstraction terms belong 
meta objects meta models really convenient methodology see section 
modelling language section informal description software architecture modelling language 

metamodel description main meta objects component types denote type component 
type component cardinality indicates instances may architecture 
architecture types denote collection component types configuration 
possible connections 
interfaces interfaces collections services functions events messages remote operations attached component types 
interfaces required provided component types 
connectors link provided required interfaces order establish possible connections components 
concepts endowed meta properties denote attributes 
shows simplified meta model 
see meta model inherits component type meta object permitted meta meta model metamodels meta objects 
means component types may architecture types 

attributes attributes endow concept meta model interface connector named values 
denote characteristics properties characteristics provide information features fulfilled endowed elements properties denote requirements architectural structures 
examples attributes cohesion attribute specifies component architecture distributed deployed single host single process parallel attribute specifies multiple invocations interface may executed simultaneously cardinality attribute specifies multiple clients may access simultaneously interface meta relation require meta object interface require meta relation meta object component type meta property cardinality meta property name meta property attributes meta model architecture type meta property attributes meta object interface meta property name meta property attributes meta object connector meta property attributes meta relation meta relation provide meta object interface provide meta model architecture connector interface interface provide interface require component type 
simplified metamodel triangles denote generalization relationships roll right means architecture types contain component types interfaces 

graphical notation component types represented box architecture types rounded edge box 
top right specified number representing maximum number instances may 
bottom right specified list attributes properties specified plain text prefix characteristics underlined 
provide interfaces represented line ended circle require interfaces represented line ended half circle 
interface specified name specified attributes exception cardinality attribute specified inside half circle black denoting property grey denoting characteristic 
connectors represented line interfaces black box middle 

methodology explained methodology consists refinement transformation high level architecture concrete architecture 
consider architecture high level structures expressed properties requirements 
methodology consists transforming properties design structures implement requirements properties 
new design structures annotated characteristics corresponding requirements 
refinement process inheritance types architectures types components showed section 
type component type architecture type architecture inherits name type component interfaces 
interfaces exposed internal components new type architecture 
precisely refinement process guided attributes infrastructure specification express technical constraints architecture deal 

refinements attributes refinements transformations triggered basis structural patterns annotated certain attributes 
transformation mechanism isn formally defined give heuristics architectural patterns 
diagram left shows property interface component transform component architecture containing subcomponents manages interface original component represents implementation requirement expressed property 
interface signature changed added value provided component 
second component represents business original component exposing interface property interface turned characteristic characteristics underlined implemented 
property property property 
generic transformation interface left component right 
property property diagram right shows property component transform component architecture containing components 
case simply shift implementation requirement dedicated subcomponent inherits property original component 
subcomponent representing business original component 
architecture characteristic relative initial property 

refinements infrastructure specification said section infrastructure abstraction level may intervene step methodology 
level specifies constraints imposed physical infrastructure architecture deployed 
impacts specification architecture specified levels infrastructure level may lead annotation architecture characteristics 
example infrastructure level specifies communication link point point private link connector deployed link secure true characteristic 
infrastructure level may forbid certain refinements 
example infrastructure specification shows existence firewall refinement leading iiop communications avoided 

case study section illustrate methodology example 
diagram shows architecture type having multiple clients accessing server 
want connector secure security provided infrastructure 
want multiple clients may access simultaneously query interface invocations interface concurrently executed 
refinement apply consist fulfilling requirement security 
application quite straightforward consists refining connected components adding component 
resulting architecture shows connector secure components new query interfaces secure 
interface query exhibits concurrency processing requests clients parallel property set potentially multiple clients connected time cardinality 
simple technique implement requirement consists creating servants concurrent requests 
introduce new component type act factory create top architecture client host query query parallel server secure false secure host distributed client query top architecture client query top architecture query client secure query client host secure host server query query secure false parallel secure query query query secure false parallel connect connect server create secure query query server host distributed query server parallel host distributed 
example application methodology instances request clients connect interface 
note diagram query interface parallel property parallelism query wouldn effective 

works purpose show attributes endowing architecture types basis refinement methodology nfr 
contrary works modeled requirements lower level detail concept adl extended nfr attributes 
interpreted triggers direct transformations evolve architecture type conceptual level physical level order take account nfr constraints operational infrastructure 
transformation executed automatically guidance manual 
case study exhibited advantages methodology process documented analyst knows requirements implied structure modification architecture 
traceability preserved conceptual level physical 
engineers distinct views architecture 
model language levels 
notation change illustrated 
methodology partially automated 
transformations help architectures meet infrastructures constraints 
methodology deterministic choices committed engineers 
despite fact methodology fully automated guidelines exploited expert systems wizards direct analyst 
order transformations may influence result 
concerning intend express transformations formal language order demonstrate important properties semantics preservation 
identification transformations fed concrete cases example grid resources environments project carried university namur 
project funded ministry region baxter 
design maintenance systems 
commun 
acm 
chung nixon yu 
non functional requirements systematically select alternatives architectural design 
proc 
st int 

architectures software systems pages 
clements bass garlan little nord stafford 
documenting software architectures views 
addison wesley 


db main case 
june 
special issue meta modelling methodology engineering 
gross yu 
non functional requirements design patterns 
requirements engineering 

view model architecture 
ieee software nov 
bosch 
bengtsson 
quality attributes software architecture design 
proceedings iasted rd international conference software engineering applications pages oct 
taylor 
framework software architecture description languages 
ieee transactions software engineering jan 
miller 
model driven architecture mda 
technical report object management group july 
draft 
