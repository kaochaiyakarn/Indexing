implementing delay tolerant networking irb tr dec michael eric brewer kevin fall jain melissa ho robin information document provided connection intel products 
license express implied intellectual property rights granted document 
provided intel terms conditions sale products intel assumes liability whatsoever intel express implied warranty relating sale intel products including liability warranties relating fitness particular purpose infringement patent copyright intellectual property right 
intel products intended medical life saving life sustaining applications 
intel may changes specifications product descriptions time notice 
copyright intel names brands may claimed property 
implementing delay tolerant networking michael eric brewer kevin fall jain melissa ho rabin intel research berkeley avenue berkeley ca proposed delay tolerant networking dtn architecture aims supporting efficient communication intermittent networks 
describes experience creating evaluating dtn implementation 
concepts fully specified dtn literature including treatment mobile opportunistic contacts grouping nodes regions 
novelty challenges inherent dtn routing implementation includes custom internal interface route selection message forwarding components eases development new algorithms 
verify implementation emulab performance evaluation dtn store forward approach compared traditional internet style data transfer methodologies demonstration epidemic routing protocol 
challenged environments deployment dtn systems result significant performance gains approaches 
internet architecture proven success ability provide network connectivity spans globe 
necessarily explicit assumptions internet architecture hold environments 
examples situations include mobile ad hoc networks wireless sensor networks deep space communication deployments developing regions limited power telecommunications infrastructure 
general environments share common inability establish maintain relatively low loss low latency communication session 
precisely ability obtain session assumed internet style protocols including shortest path routing packet switched forwarding retransmission reliability 
architecture delay tolerant networking dtn outlined seeks address commu university california berkeley computer science division berkeley ca nication needs challenged environments :10.1.1.3.5643
architecture proposes message store forward overlay network leverages set convergence layers adapt wide variety underlying transports 
addition model novel approaches application structuring programming interface fragmentation reliability persistent state management 
describe development new implementation dtn 
effort attempt clearly embody components dtn architecture provide platform experimentation extension provide robust flexible software framework enable real world deployment range application domains 
emerge discussion trying meet goals simultaneously requires addressing unforeseen challenges implementing dtn architecture 
challenges range determining appropriate model abstractions application structure control flow core persistent state management connection detection establishment application interfaces 
tested implementation head comparisons traditional internet protocols variety example environments 
verify approach provides significant performance advantages presence lossy intermittent links dtn protocols add significant overhead networks connected 
addition implementation epidemic routing protocol support argument implementation amenable experimentation extension 
experiences implementing evaluating dtn architecture insights readily apparent conceptual architectural descriptions 
furthermore learned general lessons structuring implementation novel architecture feel widely applicable range complex networking systems 
contributions mapping network model dtn architecture concrete implementation evolve clarify aspects model described section 
constructed functional implementation dtn architecture described section 
furthermore validate implementation demonstrates adequate performance networks far superior performance intermittent networks compared traditional internet style protocols section 
identified certain characteristics dtn architecture particularly challenging interesting implement described section 
significant factor contributing challenges stems goals creating research platform deployable system 
experience implementing dtn architecture caused identify general principles generally applicable implementations complex novel network system architectures 
section 
motivations dtn architecture presents model networking unusual environments result calls new approaches problems 
relative novelty architecture proposal exist established best practices implementing reasoning dtn systems 
furthermore interest dtn architecture growing distinct arenas 
research angle motivated array open research topics related intermittently connected networks 
preliminary investigations routing algorithms types networks helped framework evaluating comparing different algorithms problem dtn routing largely unsolved 
similarly open research problems exist areas dtn security authentication reliability flow congestion control quality service fragmentation reliability areas 
second major angle interest dtn comes projects interested deploying dtn style networks provide connectivity challenged networks 
projects including tier project uc berkeley project sweden aim deploy dtn technology developing regions world provide connectivity manageable costs face unreliable infrastructure 
interest dtn comes interplanetary networking wireless sensor networks military tactical networks 
felt resolve interests required implementation dtn architecture particular focus implementation philosophy accommodate research interests platform put premium designed modular software structure 
accommodate deployment interests platform flexible dependencies adequate performance stable robust implementation 
initial prototype dtn architecture developed proof concept platform basic ideas 
software designers traditional notion implementation mind functionality primary concern 
internal structures paradigms code targeted extension experimentation 
effort takes different approach term implementation particular aims provide protocol verification provide internal structures methodologies clearly embody dtn architecture 
particular pay careful attention routing component providing rich toolbox modular structures primitives support protocol experimentation 
intend implementation provide framework form white box testing evaluation 
approach implementation challenges wide range levels 
challenges stem digging deeply certain proposals dtn model fully specified architecture developing clear concise structures represent components 
challenges relate fact conceptually straightforward aspects require complex implementation due primarily fact system interfaces networking paradigms suited disconnection tolerance 
rest discuss challenges detail 
feel approach implementation success process learned general lessons structure clear implementations complex novel system architectures 
dtn network model evolution setting implement dtn architecture resolve fundamental questions architecture process design specification 
unusual aspects operating environments envisioned dtn architecture ability communicate may come go city internet region bus village region example dtn network periods connectivity may known predicted advance 
addition communication may involve routing messages media possibly simultaneously 
degree flexibility important network model expected operated difficult environments subject disruption presents significant implementation challenges 
challenges stem largely fact dtn network model simply graph networking systems time varying multigraph 
little shared experience implementing networking systems involving graphs kind 
spirit previous dtn village scenario 
methods transfer data village city traditional modem links low earth orbit satellite links mobile bus link carry messages physically 
real world situation abstracted dtn architecture graph 
cities villages represented nodes various connectivity options edges 
city bus represented edge shall discuss representations possible may preferable 
mobile dtn routers data concept mobile router discussed researchers ad hoc mobile internet networks time 
operating context internet style protocols mobile routers generally challenges respect node addressing routing performance topology link performance changes 
challenges analogues dtn somewhat different set constraints 
learn approaches considered ad hoc routing mobile ip applicability approaches limited generally speaking network model efforts traditional static network nodes fully connected 
context dtn mobile router device capable store forward operations represents data carrying entity conventional router may happen moving 
data carrying routers called data 
term emerged describe situations entity mule provides storage messages physically moved point point provide transit connectivity 
method message transport purely academic fantasy project connects hard reach villages limited range rf transmissions portable computer bus performs store forward data transfers smtp 
example digital courier project south africa transfers mail messages web searches usb key carried bicycle motorcycle rider schools 
postal system proposed viable message carrying entity entire computers shipped order move large quantities data 
benefit data essentially possibility extremely high capacity throughput exchange large delivery delays 
dtn architecture embraces concept data appears suggest abstracting edges dtn network multigraph 
may appropriate mule intuitively appears communication link particularly high delay possibly high capacity 
mule generally finite storage unequal bandwidth delay product consider question data mule modeled node link 
network link graph edge generally characterized delay throughput vertices interconnects 
edges directional different performance characteristics captured asymmetric bidirectional links 
links typically considered passive execute path selection scheduling decision process 
nodes conversely tend thought active entities finite storage forwarding decisions messages transiting 
active passive characterization nodes edges natural represent mule node edge activity respect message routing 
apply reasoning passive entities usb drives dvds naturally conclude characterized edges 
fact common networking concept stretch apply mule 
mule storage potentially shared multiple users encounter mule different points time experience different delay mule maximum storage capacity predetermined constant 
city bus data mule intermittent high capacity satellite medium low capacity dial link low capacity bandwidth time days village village connectivity village city example network model bus satellite phone shall explore method partitioning may reveal false dichotomy 
effective forwarding decisions nodes maintain state communication contacts act state necessary 
straightforwardly implemented active device bus computer aboard clear passive device 
usb drive example fairly simple arrange drive store state representing minimum set nodes encounter 
mind little fundamental distinction usb drive passive storage bus active storage processing considered 
easily imagine software architecture inserting usb drive host machine causes host automatically set forwarding decisions state stored drive 
way usb drive conjunction host resembles message router employs checkpointing persistent storage 
words usb drive node remains dormant activated host 
dtn architecture embraces concept mobile nodes data fully specify included network model 
careful consideration mobility refined dtn architectural description order provide basis design implementation 
regions naming example network depicted divides nodes network regions 
described dtn architecture definition region boundary interconnection point dissimilar network protocol address families 
regions allow technology disparities different parts network ex ample bridging limited capability sensor network internet late binding names design administrative portion examined message node specified region 
concept inclusion dtn region structure represents related issues 
nodes region share namespace generally assumed unique administrative identifiers 
second node region assumed eventual connectivity node region 
nodes single region form clique notion contemporaneous connectivity clique members assumed 
definition gives necessary condition nodes region little guidance provided recommended conditions allocating region boundary cases nodes may similar technological capabilities 
assigning nodes regions effectively left choice network operators 
architecture specification mentions role dtn gateways transit neighboring regions 
natural assumption gateway regions 
turns restriction cumbersome fact necessary 
consider role mule carrying transit traffic village city 
logically sense village distinct region city bus gateway regions 
bus network administered differently networks city village implying bus region 
strictly follow guidance gateways presence regions bus city region village region vice versa villages city presence bus region 
alternative intuitive sense imply administrative burden deployment 
implementation relax implied restriction allow links span region boundaries 
words node may hop contact different region may forward messages node node region 
approach allows dynamic routing system guide ability route data eliminates problem having assign node administrative identifiers region communicate directly 
peers links contacts networked software system requires implementation architecture guide choice abstractions dtn names element tuples consisting region identifier administrative identifier pair 
represent corresponding concepts network architecture 
recalling earlier discussion dtn literature network model time varying topology graph representing nodes vertices communication opportunities contacts edges nodes 
time variance modeled fluctuations set edges 
mapping graph abstraction implementation architecture single node perspective graph followed traditional router design representing hop opportunity structure output queue 
turns representation insufficient effectively represent time variant multigraph 
fact multigraph multiple links lead hop peer include abstraction peer set links connect 
furthermore capture time variability edge link open closed attribute associated link structure open links maintain associated contact structure 
role contact provide linkage underlying structures especially convergence layers provide data plane delivery data hop peers 
wanted accommodate routing algorithms predictive element 
algorithms require input currently available contacts expectation contact opportunities point time 
accommodate goal scheduled opportunistic links maintain set contact structures indexed time interval contact expected open 
taxonomy contacts allows particular routing algorithm whichever abstraction appropriate needs 
example simple shortest path algorithm simply enqueue message transmission peer contact opportunity arises link peer message sent link 
complicated cost algorithm may schedule message transmission particular expected wait telephone call modem link cheaper connection rates 
implementation overview block diagram enumerating major components dtn bundle application specified data unit forwarding system 
seen diagram bundle router module represents central component implementation general requires detailed information regarding state system base routing decisions 
decisions router passed set instruc tcl console config fragmentation module registration store bundle store persistent storage bundle router bundle forwarder convergence layers contact manager management interface application ipc registration manager tcp udp file major system components tions actions forwarder responsible executing actions 
separation policy function allows easy extension modification replacement potentially complex router module 
section briefly describes functionality major component give sense operation system 
focus design decisions related critical modules section 
message processing modules bundle router bundle forwarder router component implements route selection scheduling policy decision making 
takes input large variety events potentially affect routing decisions issues encoded instructions passed bundle forwarder turn charged responsibility execute 
forwarder executes router decisions interacting convergence layers registrations persistent store 
separation router forwarder represents instance separating policy mechanism 
expect different varieties routing policies algorithms implemented separating calculation instructions execution helps isolate routing code changes internal apis 
convergence layers convergence layers adapters dtn bundling protocols various underlying transports similar drivers operating system 
basic level perform basic data plane functions particular layer able transmit receive bundles single hop overlay topology 
cases process signaling information required bundle router failed connections restarts 
convergence layers discussed detail section 
persistent store persistent storage hold contents bundles store forward process 
wish enable wide variety storage methods holding transit bundles opt common abstraction persistent storage 
allows particular system instance select runtime relational database model simple file model 
fragmentation module fragmentation module responsible fragmenting reassembling bundle fragments 
dtn fragmentation routing proactively large message moved contact smaller known finite volume reactively data transfer fails unexpectedly 
module able signal bundle router fragments subject bundle received 
management modules contact manager contact manager responsible keeping track links currently available historical information regarding connectivity performance known schedules connectivity may available 
module may require significant environment specific code discuss detail 
primary task contact manager transform information learned contacts environment specific mechanisms contact descriptions bundle router 
management interface management interface signal bundle router special policy constraints preferences may affect data routing decisions 
implemented generic interprocess communication capability multiple applications processes may supported 
example hook signal router scan potential contacts wifi link detects hotspot 
console config console configuration module provides command line interface event loop testing debugging implementation structured method set initial configuration options 
chose embedded tcl interpreter parse execute user commands settings 
approach proven invaluable rapid prototyping automated testing 
application support module application ipc registration module dtn applications written thin library communicates router inter process communication channel 
interaction relates sending receiving application messages manipulating message demultiplexing bindings 
details considerations component described section design discussion section describes design implementation certain key system components detail 
cases assumptions traditional system designs hold dtn environments motivating non obvious design decisions 
router interface recalling component system control flow link directed bundle router module 
emerge discussion virtually time component performs action observation component notifies router event 
motivate rationale design decision worthwhile compare tasks required dtn router compared traditional ip router 
ip router implementations routing protocols maintain routing information base rib maps destinations set potential hop links information system wide forwarding information base fib stores current best route destination 
packet arrivals trigger lookups fib structure resulting forwarding drop 
job routing algorithm generally confined maintaining rib 
information generally confined set connected hop peers static dynamic state indicating reachable networks hop peers 
forwarding decision packet packet may live memory queue time forgotten routing forwarding components 
dtn router requires state hop contacts networks reachable contacts large number factors come play 
store forward nature dtn router consider storage state storage state peer node making forwarding decisions 
messages typically dropped immediately queued persistent storage expire appropriate hop peer time convergence layer bundle forwarder contact arrived contact enqueue bundle contact enqueue bundle contact enqueue bundle contact dequeue bundle contact enqueue bundle contact bundle router fwd bundle contact fwd bundle contact fwd bundle contact bundle transmitted bundle contact full contact arrived contact cancel bundle contact fwd bundle contact bundle transmitted bundle contact partial contact broken contact enqueue bundle contact fwd fragment bundle contact example event action flow arrival new contact opportunity router schedules bundles transmission contact notified transmissions completes 
arrival second contact causes router change earlier scheduling decision new contact 
contact broken router notified triggering reactive fragmentation see section re scheduling portion bundle back contact 
available 
handle custody transfer reliability router may need buffer message transmitted 
uncertain nature networks may cause router maintain historical contact state predictions contact arrivals scheduling purposes 
considering list potential inputs routing decision function clear traditional rib fib design router insufficiently expressive 
furthermore due wide range situations dtn may applied policy decisions may affect multiple system layers may vary widely deployment deployment 
operation system may cause router modify message forwarding state events sent router module events may trigger actions executed bundle forwarder 
push policy related decision making event handler routines comprise router implementation 
shows example event exchange convergence layer bundle forwarder bundle router 
bundle forwarder converts lists actions queue manipulation options convergence layer 
similar approach shown applies actions manipulate persistent store deliver bundles applications 
believe event action paradigm beneficial significant reasons 
allows routing algorithm implemented largely isolation rest system 
believe bulk dtn experimentation done context routing algorithms initialization system selects particular implementation instantiate 
furthermore separation enables debugging logging component generation instructions execution 
ported simulation environment developed modified router interface 
enables prototype router implementation developed tested seamlessly simulated real world environments 
fact router directly manipulates state rest system support running alternative routing algorithms parallel real deployment 
may beneficial cases router bridges regions run separate routing protocols situations prototype algorithm tested side side functional implementation 
case events delivered routers actions merged simple heuristics complicated compiler techniques 
implemented support area plan explore 
bundle state management primary function dtn router forward bundles basic design challenges represent manipulate lists bundles system 
basic choices interest simplicity including represent bundle metadata counted class maintained core memory router operation copy storage persistence reboots 
discussed section abstractions hop peers links peers contact links potential destination routing decision 
include data structure routing algorithm place bundles particulars data structure unique 
contrast routing systems simple fifo queue basic data structure packets messages natural common order forwarding flow 
example event interactions depicted bundle lists pending bundles contact contact bundle list pending bundles list position op bundle list contact list position op forward group id timeout bundle list contact list position op forward group id timeout bundle bundle bundle example bundle linkages 
note bundle list list position fields mapping structure class pointers symbolic names 
dtn router alter previous decision removing bundle scheduled queue rescheduling 
obvious implication observation doubly linked lists avoid unnecessary traversals 
add additional state bundle simplify process 
bundle contains set backpointers enumerate set bundle queued 
furthermore mapping structures include state see pointer list instance position bundle list forwarding operation type code mapping group identifier timeout slot routing state shown 
presence mappings simplifies tasks dtn router concisely enumerating locations bundle stored avoiding need scan potentially large set lists 
example bundle expiration timer elapses handler routine simply examine expiring bundle mapping list easily remove container lists 
addition backpointers rest mapping state convenience mechanism router 
cases dtn router may alternative hop choices bundle uncertainty arrival time capacity potential contact 
natural decision router situation expressed try send bundle contact contact notify sent seconds 
fields mapping state coupled backpointers allow system easily support type request 
case mappings created destination contacts 
forwarding type code forward common mapping group identifier arbitrarily chosen specified timeout value stored mappings 
assuming contacts able send bundle notified transmission router easily find second mapping cancel transmission 
contact available bundle forward timeout event delivered router point router take action trying open costly link 
router requires algorithm specific information decision include opaque slot state 
fragmentation aggregation fragmentation reassembly basic pervasive concepts networking protocols leverage concepts novel ways 
internet protocols depend fragmentation primarily adapt transport protocols different maximum transfer units mtus supported underlying link layers 
length bundles completely application defined notion mtu type fragmentation ends irrelevant 
dtn environments fragmentation fundamentally distinct reason means improving delivery likelihood performance 
cases dtn fragmentation proactive measure send portions large bundle different links optionally applying form forward error correction erasure coding 
reassembly performed opportunistically interior network generally deferred requisite set fragments received final destination message 
furthermore cases contact disconnected middle message transmission convergence layer may able determine portion message successfully transmitted 
avoid wasting partial transmission router create reactive fragment subsequently send portion bundle 
cases decision create fragment local policy furthermore message forwarding state 
traditional networking case fragmentation reassembly cross layer operations triggered routing component means improving delivery success 
confirm benefits reactive proactive fragmentation evaluations section 
addition proposals considered idea bundle aggregation 
idea application data units bundles suggests size message minimum unit useful application data 
practical matter unrealistic message overhead may require coalescing potentially separable data single message 
dtn protocols naturally extended support bundle aggregation 
scheme series small bundles destined endpoint combined single meta bundle tagged aggregate routed single message delivery 
fragmentation operations occur bundle path destination resulting fragments separated original constituent pieces delivered individually needing go prior reassembly 
convergence layer api structuring systems layers common established networking systems design technique internet example ip layered atop underlying link protocols ethernet atm wireless 
layering abstractions merge set disparate capabilities common minimal capability interface similarly isolate higher layers differences lower layers 
dtn architecture calls set convergence layers implement mechanisms necessary run bundling protocol particular underlying transport protocol tcp udp bluetooth natural comparison example ip various link layer options 
case dtn determining minimal required interface turns slightly challenging task due qualitatively different capabilities underlying technologies 
compare tcp convergence layer usb drive convergence layer note tcp provides reliable point point delivery connected peers simply provides filesystem data bundles deposited 
means obtaining timely hop reception clear way determine nexthop recipient 
accommodate disparity requirements placed convergence layer minimal attempt send bundles hop peer set peers 
adopt strict layering model capable layers constrained relatively weak capability 
deliberately expose variations layer capabilities higher layers enabling router take advantage functionality reliable acknowledged transfer parallel transmission messages 
layer distinctions improved delivery semantics input routing decision function 
example determining best hop path message router choose reliable transfer things equal 
system interface issues considering challenge implementing convergence layer assumption turned false tcp version straightforward implement 
underlying transport provides reliable order delivery easily covers basic requirements convergence layer interface naturally lends reliability option discussed 
hard way standard unix socket interface tcp connections deficiencies highly intermittent environments 
mismatch stems primarily related shortcomings standard system interface applications interact error handling process kernel hides critical network state information application 
motivate problem consider basic case dtn router wants establish tcp data connection send bundle peer may may reachable 
applications structured threads blocking system calls generally easier write reason 
initial inclination blocking calls connect write 
receiver accept new connection block read full message consumed 
peer reachable unreachable middle transmission blocking sender side calls return socket error host sent maximum number exponentially backed retries essentially kernel connection approach gain control structure user application non blocking shortcoming approach due host complexities handled application level including short reads writes coupled select poll interactions socket readiness system wide occasionally connection specific adjustments number retransmission attempts interface notified interruption connection recoverably broken 
notification application specified timeout values determine peer connectivity 
application determine appropriate values time communication operations 
clear timeout value long delay lossy connection satellite vastly different low delay link may briefly connected wireless radio mobile nodes 
kernel tcp stack access accurate round trip time estimation window state link loss statistics values exposed application 
values critical accurately calculate appropriate timeouts particular situation 
conclude observations implications intermittent network links span multiple system layers 
high level bundling protocol required adapt underlying outages lower level transports structured way expect handle disruptions adapt wide range potential deployment environments 
application interface follow consideration recognizing mismatch basic system interfaces disruption tolerance leads final section system design interface exposed dtn applications 
clear minimum interface needs support asynchronous transmission reception bundle messages 
accomplish thin library implements client side simple inter process communication protocol router implements server side 
interface applications connect nearby dtn router act behalf send bundles dispatch appropriate arriving bundles 
unusual aspect interface stems fact dtn environments lifetime communication session lifetime communicating applications associated dtn routers 
traditional networked systems application expresses intent receiving set bundles request encapsulated registration stored persistently system application failures 
implies hop router agree store bundles application registered application available receive 
arguments case tcp sockets interface equally applicable interface dtn applications 
assume application desires know fate prior mes hop experimental setup showing hop hop configurations 
sage traffic example determine send retransmission 
bundling protocols include provisions hop bundle return receipt forwarding indications providing mechanism application deduce fate messages believe largely insufficient 
similarly kernel network stack entity access tcp window state round trip time estimation dtn routing layer access state impacts delivery particular message 
noted previously state may multivariate including current contacts queue sizes predictions underlying link reliability characteristics 
currently considering mechanisms application informed status expected delivery times prior transmissions set currently reachable peers hop multi hop predictions message transmissions 
evaluation section discuss evaluation implementation 
ran experiments emulab testing framework compare message delivery protocols dtn sendmail smtp simple file transfer program 
set experiments examine relative protocol overheads disconnections verify implementation add significant overhead achieving wire speed certain message sizes 
second set experiments add disconnection cycles show core value propositions dtn architecture holds message delivery presence disconnection vastly improved 
examine detail effects various message sizes presence disconnections wrote file transfer program standard ftp protocol proved intolerant disconnections challenging configure connection proxy intermediate hosts due data port allocation 
bw utilization kb kb kb kb message size dtn hop mail hop hop dtn mail bandwidth utilization percentage different protocols 
demonstrate value dtn fragmentation improving throughput 
briefly describe experiences implementing epidemic routing algorithms similar described zebranet 
evaluation demonstrations internal interfaces support protocol experimentation effective qualitatively distinct approaches routing 
message transfer overhead set experiments set measure overheads dtn protocols connected network compared traditional internet style message transfer protocols 
configured node emulab cluster linear topology connected links kbps bandwidth ms delay 
shown ran protocols configurations 
ran protocol daemons hosts intermediate hosts simply performed ip forwarding 
second configuration hop hop nodes ran protocol daemons 
dtn done static route entries forward bundle traffic hop topology 
sendmail configured hop smart relay force traffic flow topology case intermediate hosts ran simple daemon forward tcp connections hop 
shows protocol configurations forwarding mb data split kb kb kb kb message sizes 
graph plots bandwidth utilization percentage time smart relays avoids complexity setting mx records 
non standard configuration settings performance sendmail fair vastly better disconnections 
includes setting queue scanning time seconds setting host status cache timeouts seconds setting option keep machine load send file sequentially 
bw utilization message size kb dtn hop mail hop comparison trend dtn sendmail different message sizes 
message delivered plot ratio bandwidth versus total available link bandwidth 
drawn experiment notably message sizes dtn relatively low overhead cases matching exceeding protocols 
particular moderate message sizes protocols mail 
fact results initially surprising surprised dtn compared protocols smaller messages 
analyzing results realized protocols dependent exchanges protocols configuration plug proxy due cumulative latencies ms total round trip time message exchanges dominates cost transmission 
true protocols maintain single open tcp connection entire experiment 
case store minimizes transaction latency 
note smtp worse dtn primarily due roundtrip exchanges higher message header overhead 
shown message size increases throughput dtn smtp begins decrease 
expected characteristic store networks intermediate nodes forward data message message arrives 
important note forwarding latency function largest message size network hop count number messages 
intermittency tolerance section address core value proposition dtn architecture verify presence intermittent connectivity dtn protocols result significantly higher throughput compared protocols 
bw utilization aligned shift sequential random link pattern max dtn hop mail hop hop dtn mail bandwidth utilization percentage different protocols network disruption 
set experiments modified previous configuration introduced periodic links 
disruptions cyclical links minute 
fixed message sizes previous experiments showed protocols equivalent size 
shows bandwidth utilization experiments varied phase cycles link 
case link bandwidth calculated take account fact link active time 
note plot maximum achievable rate experiments reflect fact bandwidth necessarily wasted experiments node send data received 
aligned experiment links time 
shown graph relative performance protocols matches relative performance fully connected case described 
note achieve results non dtn protocols tune kernel tcp retry parameters aggressive establishing connections 
shift experiment moved start offset phase link forward seconds 
result effective throughput protocols correspondingly halved 
effects obvious sequential configuration link 
protocols establish connection throughput drops zero 
random experiment phase link starts random offset 
note experiments dtn hop hop sendmail achieve notably better performance dtn particular remaining maximum achievable bandwidth cases 
messages received max dtn dtn hop mail dtn time cumulative message arrivals messages second phase offset demonstrating effects proactive reactive fragmentation 
effects fragmentation ran single experiment kb messages transfer time seconds message second phase shift scenario plot cumulative message arrivals theoretical maximum 
include experiment dtn configuration set pro actively fragment large payloads smaller bundles 
thing note phase shift causes protocol variants achieve half effective throughput hop hop ones 
fully expected path available seconds cycle 
note dtn able deliver extra message cycle 
due reactive fragmentation ability take advantage partial transmissions 
similar effect noted comparison hop hop dtn smtp 
dtn able deliver extra message stays ahead sendmail times 
note rfc proposes checkpoint restart functionality smtp protocol 
knowledge implementations support expect adoption resolve differences 
final comparison theoretical maximum dtn configured pro actively fragment fragment sizes 
dtn lag theoretical max due hop forwarding delays discussed initial latency passed able take advantage close full available bandwidth concludes transmission non fragmented case 
result underscores value fragmentation efficient message delivery 
effect evident comparison send mail 
cycles plotted dtn fragmentation able deliver extra message due reassembled fragments previous cycles 
epidemic routing implementation final evaluation section qualitative examine effectiveness abstractions designed routing module 
involved design implementation router interfaces implemented epidemic routing algorithms described zebranet project dtn router framework 
chose epidemic routing algorithm primarily due fact decision making process qualitatively different traditional destination router 
particular epidemic protocols require multicasting bundles response opportunistic contacts utility peers encountered decays time 
little guidance rest team development completed weeks spent debugging simulation framework 
basic primitives interfaces matched requirements algorithm 
final note validated correctness implementation simulation framework noting simulation results correlate trends observed original zebranet description 
related dtn architecture abstraction delivering messages applications 
long history protocols deal messages complete history scope 
earliest messaging networks offered services including mail semi interactive chat remote file access mailing lists 
early widely research communication network world mail mailing lists file transfer quasi real time messaging 
originated form overlay top ibm vnet mail system remote network job execution protocols nji respectively 
system tree structure routing depended underlying protocols reliability leased phone lines enabled relatively low latency message delivery 
sites infrastructure costly effectively prohibiting participation 
sites lacking connections usenet similar network popular dos pcs provides similar user level features bit net tolerate extended disconnection support real time chat 
usenet operate various underlying transport protocols historically important uucp unix unix copy program provides underlying capability remote asynchronous execution 
uucp source routed ultimately unwieldy users somewhat automated approach 
approach locally stored uucp link link cost information updated time time 
shortest weighted paths computed local node intended destination intermittent links higher cost different traditional direct links 
dtn generalizes fronts including dynamic routing fragmentation multiple paths time varying links 
asynchronous messaging mail boxes built message delivery systems mentioned generally implemented application layer mail mta mail transfer agent 
army required electronic mail prompting creation mail delivery system underlying protocols support essentially provided routing arpanet style mail messages regular phones lines 
time sendmail mta developed 
provided relaying multiple mail formats focused internet style mail 
ironically retrospect lost popularity sendmail able handle internet style address mail routing sendmail handle multiple addressing varieties time 
particular sendmail able tie uucp internet mci mail addressing formats 
sendmail provide store forward message operations employ underlying protocols significant portion function 
agents typically intelligent routing decisions 
infer directly addresses specified message transports 
static routing local tables 
effect systems try take advantage forms connectivity convey single message attempt multiplex demultiplex messages implied transports supporting store forward operations single program 
dtn adds dynamic multi hop routing fragmentation support multiple paths explicit way encode names regions rewriting rules 
experimental validation dtn architecture successful learned things way feel apply research oriented implementations 

implementation novel architecture motivate refinements architecture unexpected conceptual level 
process mapping dtn network model concrete implementation structures required fundamental new contributions architectural level 

goal fully extensible system unattainable best attempt enable extension experimentation pre defined axes 
prototype focused research challenging problems dtn routing forwarding developed rich toolbox internal interfaces experimentation deployment 

seemingly simple operations reliably sending message tcp connection complex operating environments match assumptions existing implementations interfaces 
regularly underestimate complexity reusing existing components 
fact os code resides drivers reflects analogous problem 

effects intermittency rarely transparent spans layers system 
appropriate solution reflect basic network state information control far stack application contrast strict layering model interfaces generally networked systems 
addition general lessons conclude noting implementation performs low overhead connected environments compared traditional messaging protocols 
soundly validates core proposals dtn architecture mechanisms challenging environments store forward message overlay network performs significantly better existing approaches cases small percentage theoretical maximum achievable 
adya howell theimer bolosky douceur 
cooperative task management manual stack management 
cerf hooke torgerson scott fall weiss 
delay tolerant network architecture 
internet draft march 
ftp ftp rfc editor 
org notes internet drafts draft irtf arch txt 
clark tennenhouse 
architectural considerations new generation protocols 
proceedings acm symposium communications architectures protocols pages 
acm press 
crocker 
smtp service extension checkpoint restart september 
maria prasad pandey 
providing connectivity nomadic community 
development design conference 
emulab network emulation 
www emulab 
net 
cerf interplanetary internet architecture definition 
internet draft may 
kevin fall 
delay tolerant network architecture challenged internets 
sigcomm pages 
acm press 
jain kevin fall rabin 
routing delay tolerant network 
sigcomm september 
juang hide oki yong wang energy efficient computing wildlife tracking design tradeoffs early experiences zebranet 
proceedings asplos october 
alex pentland richard fletcher amir 
rethinking connectivity developing nations 
ieee computer jan 
darpa proposed program disruption tolerant networking 
www darpa mil ato solicit dtn 
rahul shah sumit roy jain 
data modeling tier architecture sparse sensor networks 

technology infrastructure emerging regions tier 
tier cs berkeley edu 
rob von behren jeremy condit eric brewer 
events bad idea 
hotos may 
randolph wang nitin garg turning postal system generic digital communication mechanism 
proceedings acm sigcomm conference august 
project 
www org za 
