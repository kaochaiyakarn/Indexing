uml action semantics executable modeling suny fran ois wai ming ho alain le jean marc quel irisa campus de beaulieu rennes cedex france email irisa fr 
uml lacks precise formal foundations constructs transition guards method bodies resorts semantic loopholes form uninterpreted expressions 
action semantics proposal aims filling gap providing metamodel integrated uml metamodel model execution statements 
omg standard action semantics eases move tool interoperability allows executable modeling simulation 
explore specificity action semantics applicability uml metamodel uml model 
show approach paves way powerful metaprogramming capabilities refactoring aspect weaving application design patterns round trip engineering 
furthermore overhead designers minimal mappings usual objectoriented languages action semantics standardized 
focus approach expressing manipulations uml models upcoming action semantics 
illustrate approach various examples model transformations 
unified modeling language provides modeling foundations structural behavioral parts system 
designer offered views projections multi dimensional system separate planes orthogonal 
provides interesting separation concerns covering main dimensions software modeling functional cases diagrams express requirements static class diagrams dynamic statecharts sequence diagrams specification behavioral aspects physical implementation diagrams 
uml currently lacks precise formal foundation constructs transition guards method bodies resorts semantic loopholes form uninterpreted expressions 
action semantics proposal currently standardized object management group omg aims filling gap providing metamodel integrated uml metamodel model execution statements 
lines exists iut specification description language sdl community integration action semantics uml ease move tool interoperability allow executable modeling simulation full code test case generation 
contribution twofold 
gives update forthcoming uml standard contributed precise semantic aspects 
second relying fact uml metamodel uml model show action semantics metamodel level help oo designer carry activities behavior preserving transformations see design pattern application design aspects weaving 
extending description action semantics possible misunderstanding 
intention propose approach model transformation pattern application refactoring 
claim action semantics may go design level metaprogramming language help implementation existing approaches 
show sections strengths cases design level metamodel level programming language 
design level activities distinguish steps identification need apply transformation uml model actual transformation model 
intention role designers deciding step provide tools help automate second step usually tedious error prone 
carried ad hoc manner difficult keep track transformation leading traceability problems lack reusability design micro process 
seen maintenance propagate changes problem domain detailed design re playing design decisions modified part model 
automation worthwhile context product lines similar design decisions applied family analysis models addition persistence layer mis applications 
joe oo designer expected write complex metaprograms scratch order develop design provided pre canned transformations triggered menu ways customizing combining existing transformations build new ones 
main interest uml action semantics metamodel level expressing transformations classical oo principles structure reusable transformation components rtc open closed principle applied metamodel level 
furthermore action semantics fully integrated uml metamodel combined rules written object constraint language ocl order verify transformation set transformations may applied context 
foresee new dimension distribution development teams responsible translating mechanistic part design know rtc designers concentrate making intelligent design decisions automatically applying corresponding transformations 
rest structured follows 
section recalls fundamental aspects uml gives quick update action semantics proposal currently submission standardization omg 
section shows interest action semantics metamodel level specifying programming model transformations contexts 
section analyses impact approach oo development processes presents experience case studies 
section describes related 
executable modeling uml bare bone uml incomplete imprecise uml layer architecture layer instance upper layer instance 
layer holds living entities code generated model executed running objects attribute values links objects 
second layer modeling layer 
represents model designer 
place classes associations state machines defined views cited 
running objects instances classes defined level 
third layer metamodel level describes uml syntax metamodeling language happens subset uml 
layer specifies syntactically correct model fourth layer meta metamodel level definition metamodeling language syntax syntax subset uml metamodeling language 
uml creators chose layer architecture provides basis aligning uml standards similar infrastructure widely meta object facility mof 
strict mapping mof metametamodel elements uml metamodel elements models interoperable uml core package metamodel mof structurally quite similar 
conception implies uml metamodel set class diagrams uml model 
uml model said syntactically correct set views merge consistent instance uml metamodel 
consistency instance ensured metamodel structure multiplicities association ends set formedness rules expressed ocl logical constraints elements model 
instance inheritance cycle may outgoing transitions 
apart syntactic checks regarding structure models uml users suffer lack formal foundations important behavioral aspects leading incompleteness opening door inconsistencies uml models 
true instance state diagrams specification guard transition realized basically string semantics 
interpretation left modeling tool breaking interoperability 
annoying fact models executable incompletely specified uml 
impossible verify test early development process 
activities key assuring software quality 
interest action semantics uml action semantics proposal aims providing modelers complete software independent specification actions models 
goal uml modeling executable modeling allow designers test verify early generate code desired 
builds foundations existing industrial practices sdl kennedy carter action languages contrary predecessors intended action semantics omg standard common base existing come action languages mappings existing languages action semantics proposed 
traditional modeling methods support action language focused separating analysis design system achieved 
whilst separation clearly benefits allowing designer focus system requirements spreading implementation details allowing reuse analysis model different implementations numerous drawbacks 
main distinction difficult say impossible practice boundaries vague criteria deciding analysis 
rejecting aspects analysis incomplete imprecise trying complete issues describing complex behavior 
described complete uml specification model relies uninterpreted entities defined accepted common formalism semantics 
may example guards transitions specified object constraint language ocl actions states specified java 
worst case modeling tools statements simply inserted right place code skeleton 
semantics execution specification programming language 
unfortunately implies specification problem example java sequential execution statements method supposed verification testing feasible code available far late development process 
designer knowledge way code generated model order understanding implications inserted code instance major vendors providing action language list submitters 
code generator uml tool knowledge way tool generates code associations required order code program 
best modeling tool action language model may executed simulated early development phases drawbacks standardization interoperability formalisms modeler learn uml action language 
action semantics proposal submitted omg action semantics proposal abstractions metamodel extends current metamodel 
action semantics integrated smoothly current metamodel allows precise syntax actions replacing previously uninterpreted items 
uninterpreted items viewed surface language syntax tree actions see fig 
execution model uml model 
allows changes entity time modeled 
change mutable entity yields new snapshot sequence snapshots constitutes history entity 
execution model define semantics action execution semantics execution action precisely defined life cycle unambiguously states effect executing action current instance execution model computes snapshot history entity 
method body surface language procedure expression language string body string action action fig 

action semantics immersion uml action semantics proposal uml enforce notation surface language specification actions 
intentional goal action semantics certainly define new notation force particular existing 
action semantics conceived allow easy mapping classical languages java sdl designers keep favorite language having learn new 
metaprogramming action semantics interesting aspect uml syntax represented class diagram 
reflexive environment uml syntax effectively represented uml model action semantics manipulate uml elements transform models 
sections different uses approach implementing refactorings applying design patterns weaving design aspects 
action semantics official surface language adopt ocl version examples 
refactorings refactorings behavior preserving transformations restructure source code applications code readable reusable 
help programmers manipulate common language constructs class method variable existing application modifying way works 
believe refactorings essential artifact software development interested bringing design level means uml tool 
implementation refactorings uml interesting task design refactorings opposed code refactorings design constructs shared views model 
furthermore code refactorings manipulate source code text files design refactorings manipulate syntax tree 
difference simplifies implementation refactorings instance renaming elements element unique inside syntax tree 
refactorings moving features difficult implement take account constructs ocl constraints state charts 
action semantics represents real gain refactoring implementation merely directly manipulates uml constructs possibility combining ocl rules write pre post conditions 
precisely refactorings preserve behavior modified application widely applied 
refactoring ought verify set conditions transformation carried 
example simple refactoring removal class package 
refactoring applied conditions mappings illustrated specification document 
verified class referenced class subclasses features 
conditions transformation defined action semantics follows package class class pre self includes class class isempty class subclasses isempty class features isempty actions class class forall sub class forall sup class sub sup class delete post self excludes class class pre forall class class pre class pre features forall feat feature feat owner nil refactoring calls functions action semantics delete defined role delete effective deleting features associations generalization links owned class 
feature described 
purpose create generalization link classes class class class pre self excludes class actions gen generalization new gen parent class gen child self post self includes class design patterns interesting action semantics application solution proposed design pattern specification proposed terminology structure pattern particular context called instance occurrence pattern 
words envisage application pattern sequence transformation steps applied initial situation order reach final situation explicit occurrence pattern 
approach intend universal patterns mention existing situation pattern applied see discussion topic 
fact intent provide designers metaprogramming facilities able define apply variants known patterns 
limits approach pattern trade offs representation uml discussed 
example design pattern application transformation function applies proxy pattern 
main goal pattern provide placeholder object called real subject control access 
instance defer cost creation expensive object needed class pre self package 
collect class name excludes self name proxy excludes real self name actions name self name self name name concat proxy super self package name self including self real self package real concat name including super ass self real self operations forall op operation op moveto real function uses refactorings precisely described 
somewhat similar function 
function adds new class package inserts set super classes set subclasses 
second creates association classes 
third moveto moves method class creates forwarder method original class 
transformation applied class play role real subject application proceeds follows 
add proxy suffix class name 
insert super class class super classes 
create real subject class 
add association real subject proxy 
move method owned proxy class real subject create forwarder method move methods 
explained implementation variants proxy pattern 
implementation complete create load method create real subject requested 
help designers avoid implementation burden particularly creating forwarder methods 
patterns defined terms roles played classes occurrences aspect weaving show action semantics support task developing applications contain multiple aspects 
aspects concerns refer non functional requirements global impact implementation 
approach dealing separate aspects conceptual design introduce system final coding phase 
cases merging aspects handled automated tool 
example attempt show aspects weaved early design level model transformation action semantics write transformation rules 
persistent customer name string name string ss string savings 



persistent account number string interest rate float bank ref string permanent residence correspondence debit external checking persistent address street string stree string postcode string town city string country string 
outstanding 
persistent check check string amount float fig 

information management system personal finance class diagram fig 
illustrates model bank personal information management system 
original system accounting information stored relational database class marked persistent stereotype related table database 
aim re engineering project develop distributed object oriented version user front support new online access customers 
non functional requirements map persistent objects instance data stored relational database 
task involves writing set proxy classes hide database dependency database query commands 
example required transformation illustrated model fig 

template instance variable access methods generated automatically database specific instructions embedded perform necessary data access 
persistent check check string amount float pstate check get check string set check string pstate get amount float set amount amount float fig 

persistence proxies access methods incarnation check get check string set check string get amount float set amount amount float re engineering carried incremental manner problem concurrent access database write back commits 
new application cooperate older software ensure data coherence 
provisional solution implement single ended data coherence check new software 
uses timestamp test data modified external programs 
data modified access commit operations rolled back preserving data coherence having modify old software involved incremental rewrite 
fig 
shows template transformation required 
adds flag cache timestamp access methods wrapped timestamp checking code 
persistent check check string amount float pstate check flag incarnation cheque string get check string pstate set check string get amount float set amount amount float incarnation check get check string set check string get amount float set amount amount float fig 

timestamp cache flag concurrent data coherence metaprogram needed generate proxy classes figures composed operations 
defined context namespace container uml modeling elements 
selects classes stereotyped persistent sends message namespace actions self select class stereotype notempty select class stereotype name persistent forall class operation defined context class 
operation create classes state incarnation creates classes access methods stereotyped attributes 
operation defined follows class actions pstate self package pstate concat name pstate load pstate save self pstate incarnation self package incarnation concat name pstate incarnation attrs self select attribute stereotype notempty attrs select attribute stereotype name forall attribute pstate pstate incarnation incarnation attrs select attribute stereotype name get forall attribute incarnation pstate attrs select attribute stereotype name set forall attribute pstate incarnation creation access methods implemented operations 
defined class context implement similar operation 
take attribute parameter create method setting getting value 
operations operations explained class att attribute actions self set concat att name concat attrib name att type class att attribute actions self get concat att name concat attrib name att type operation defined class context 
role create new method string add class class name string actions method new name name self addmethod result operation creates new parameter adds method context operation method name string type class direction string actions parameter new name name settype type direction self result attractiveness approach immediately evident 
consider different implementation persistent proxy fig 

case composite persistent objects possible single persistent state proxy composite object components see fig 

metaprogramming possible consider different implementation aspects independently concurrency implementation 
enables designer conceptualize modifications manageable manner 
making changes model hand result change implementation decision viable alternative laborious prone error 
persistent checking pstate pstate checking get number string set number number string incarnation check incarnation check get check string set check string get amount float set amount amount float outstanding persistent check pstate get check set check string get amount float set amount amt float incarnation checking check string amount float incarnation checking get number string set number number string fig 

implementation template shared proxy seen metaprogramming action semantics facilitate implementation changes higher abstraction level 
leverages execution machine action semantics perform model transformation 
impact development approach action semantics brings possible changes traditional software development process 
words action semantics important step uml effective development environment offers possibility animating early design models evolving refining implementation 
development approach propose starts early design model created designers analysis model 
model completely independent implementation environment assumes ideal world processing power memory infinite system crashes transmission errors database conflicts model contains action semantics statements animated action semantics machine validated 
validation finished designers add environment specific aspects design model database access distribution apply design patterns restructure model design refactorings 
significant part information addition automated metaprogramming techniques 
precisely designers able automatically apply set predefined transformations defined special software developer call 
experienced developers handle essential knowledge implementation environment 
role knowledge define write model transformations available designers 
approach ends final design model reached 
implementation code generated 
organizing things uml proposes interesting extension mechanism called profiles allowing designers expand current metamodel 
uml documentation page uml profile 
predefined set stereotypes constraints notation icons collectively specialize tailor uml specific domain process unified process profile 
profile extend uml adding new basic concepts 
provides conventions applying specializing standard uml particular environment domain 
profiles organize action semantics metaprograms whilst uml concepts refinements traces manage evolution metaprograms versioning 
refactoring profile loaded metamodel operations added uml concepts 
instance added package class related commercial uml tools propose metaprogramming languages order manipulate models 
case instance uses java language 
case rational rose visual basic 
purpose languages similar look action semantics metaprogramming language 
notable differences action semantics proposes syntax surface language 
direct concurrent visual basic provide common underlying model languages 
navigation metamodel done language specific way reuse standard ocl navigation facilities 
discrepancies uml metamodel metamodels implemented commercial tools designers able write truly universal uml transformations 
lack surface language may annoying problem choice surface language impacts practical 
choice classic language java possibly language design meta model level attractive may adequate 
adoption declarative language ocl may help bridge gap specification contracts design transformations specified ocl implementation 
action semantics provides designers expressive formalism writing model transformations operational way model uml statement execution fills semantic gaps behavior aspects uml model 
uml metamodel uml model action semantics powerful mechanism metaprogramming 
particularity opens new perspectives designers compared model manipulations languages perfect integration uml features uml constraints pre postconditions invariants refinements traces applied action semantics 
implementation conforming current version action semantics specification development umlaut freely available uml modeling tool 
complete integration action semantics uml umlaut provides excellent research platform implementation design patterns refactorings aspects 
presently looking uml specific refactorings purpose extending existent set existing program restructuring transformations 
ocl actions semantics defining refactorings opens interesting perspectives 
perspective concern combinations refactorings 
roberts stated thesis pre post conditions verify single refactoring set combined refactorings allowed execute execution set 
second perspective concerns property behavior preservation verified execution refactoring 
similar way www irisa fr umlaut efforts area intend propose set basic transformations demonstrate ensure behavior preservation 
able combine order define higher level transformations 
intend define approach notion refactoring region fraction instance uml metamodel underlying objects represent modeled system may potentially modified transformation 
help bisimulation techniques able verify original transformed regions equivalent 
notion snapshot history whichis actions semantics execution engine provides excellent support comparison 
working representation patterns trade offs help designer define variant wants apply 

analysis action semantics syntax tree help verify pattern correctly implemented 
precisely tool able verify implementation pattern respects set predefined ocl constraints 

nixon 
methodology automated design patterns 
international conference software maintenance oxford 


maintainance object oriented systems structural schema evolution 



managing object oriented environments algorithmic approach 
phd thesis university geneva 

consortium 
updated joint initial submission action semantics uml rfp 

gamma helm johnson vlissides 
design patterns elements reusable object oriented software 
professional computing series 
addison wesley reading ma 

griswold 
program restructuring aid software maintenance 

group 
action semantics uml rfp ad 

suny 
quel 
precise modeling design patterns 
proceedings uml volume lncs pages 
springer verlag 

ho plouzeau 
umlaut framework weaving uml aspect oriented designs 
technology object oriented languages systems tools europe volume pages 
ieee computer society june 


maintaining consistency behavior object oriented systems evolution 
phd thesis northeastern university june 

iut 
recommendation sdl combined uml 

keller 
design components software composition design level 
proceedings th international conference software engineering pages 
ieee computer society press apr 

kennedy carter 
executable uml www kc com html html 

kiczales lamping maeda lopes 
loingtier irwin 
aspect oriented programming 
ak sit matsuoka editors ecoop object oriented programming th european conference jyv skyl finland volume lecture notes computer science pages 
springer verlag new york june 

meyer 
object oriented software construction 
prentice hall 

opdyke 
refactoring object oriented frameworks 
phd thesis university illinois 

technology 
executable uml www com pubs html 

roberts 
practical analysis refactoring 
phd thesis university illinois 


uml profiles language totally control application development uml 
www fr pdf uml profiles pdf 

suny le 
quel 
design pattern application uml 
bertino editor ecoop proceedings number pages 
lecture notes computer science springer verlag june 

tarr ossher harrison 
degrees separation multi dimensional separation concerns 
icse los angeles ca 
