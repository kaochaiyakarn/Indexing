efficiency association rule mining algorithms vikram jayant database systems lab serc indian institute science bangalore india vikram dsl serc ernet 
focus attention question space remains performance improvement current association rule mining algorithms 
strategy compare performance oracle algorithm knows advance identities frequent itemsets database needs gather actual supports complete mining process 
experimental results show current mining algorithms perform uniformly respect oracle database characteristics support thresholds 
cases substantial gap oracle performance current mining algorithms 
second new mining algorithm called armor constructed making minimal changes oracle algorithm 
armor consistently performs factor oracle real synthetic datasets practical ranges support specifications 
focus attention question space remains performance improvement current association rule mining algorithms 
approach compare performance oracle algorithm knows advance identities frequent itemsets database needs gather actual supports itemsets complete mining process 
clearly practical algorithm order generate mining rules 
oracle approach permits clearly demarcate maximal space available performance improvement currently available algorithms 
enables construct new mining algorithms completely different perspective derivatives oracle 
show notion oracle conceptually simple construction equally straightforward 
particular critically dependent choice data structures counting process 
carefully engineered implementation oracle best choices design parameters stage counting process 
experimental results show considerable gap performance oracle existing mining algorithms 
second new mining algorithm called armor association rule mining oracle structure derived making minimal changes oracle guaranteed complete passes database 
armor derived oracle may seen share positive features variety previous algorithms partition cpa viper delta 
empirical study shows armor consistently performs factor oracle real bms webview blue martini software synthetic databases ibm almaden generator practical ranges support specifications :10.1.1.40.6757
problem scope environment consider similar majority prior art field data mining system single processor pattern lengths database small relative number items database 
focus algorithms generate boolean association rules relevant information database transaction presence absence item 
restrict attention class sequential bottom mining algorithms generating boolean association rules 
oracle algorithm section oracle algorithm mentioned magically knows advance identities frequent itemsets database needs gather actual supports itemsets 
clearly practical algorithm order generate mining rules 
oracle takes input database item list format organized set rows row storing ordered list item identifiers iid representing items purchased transaction set frequent itemsets corresponding negative border outputs supports itemsets making scan database 
describe mechanics oracle algorithm move discuss rationale design choices section 
mechanics oracle ease exposition manner oracle computes supports itemsets itemsets move longer itemsets 
note algorithm performs computations concurrently scan database 
counting singletons pairs data structure description counters singletons itemsets maintained dimensional lookup array pairs itemsets lower triangular dimensional lookup array 
similar arrays apriori passes 
th entry array contains fields counter itemset corresponding th item number frequent itemsets prior frequent null 
input transaction array itemsets array itemsets output arrays counts updated 
itemset null store frequent items item list format 
item transaction 


append 
enumerate itemsets 

row index 
column index 
null fig 

counting singletons pairs oracle algorithm description function shown takes inputs transaction updates counters arrays function individual items transaction enumerated lines item corresponding count incremented line 
process frequent items stored separate itemset line 
enumerate pairs items contained lines increment counters corresponding itemsets lines 
counting itemsets data structure description itemsets length greater related information counters stored dag structure pictorially shown database items singletons pairs stored lookup arrays mentioned expository ease assume stored remainder discussion 
itemset stored separate node linked lexicographic ordering subsets 
terms mother father itemset refer lexicographically second subsets respectively 
mother father respectively itemset store links supersets mother 
call list links 
bc bd itemset stored separate node dag terms itemset node interchangeably remainder discussion 
denote set itemsets stored dag structure algorithm description partitioning scheme database logically divided disjoint horizontal partitions scheme itemsets counted enumerated partition tuple 
partition large fit available main memory 
ease exposition ab ac ad bc bd cd abc abd acd bcd abcd mother father fig 

dag structure containing power set assume partitions equi sized 
technique easily extendible arbitrary partition sizes 
pseudo code oracle shown operates follows read function line reads tuples partition simultaneously creates tid lists partition singleton itemsets update function line applied singleton function takes node input updates counts descendants reflect counts current partition 
count itemset partition equal length corresponding partition 
itemset obtained intersection tidlists mother father process started tidlists frequent itemsets 
exact details computation discussed 
describe manner itemsets enumerated reading new partition 
set links induce spanning tree consider solid edges 
perform depth search spanning tree enumerate itemsets 
node tree visited compute tidlists children 
ensures itemset visited tidlists mother father computed 
processing captured function update pseudo code shown 
node converted tid vector format line 
tidlists children computed lines children visited depth search lines 
mechanics computation promised earlier 
intersect function shown takes input tid vector tid list added result lines defined line represents position transaction relative current partition 
tid list itemset ordered list tids transactions contain tid vector itemset bit vector represent presence absence respectively set customer transactions 
oracle input database itemsets counted output itemsets supports 
number partitions 


singleton 
update fig 

oracle algorithm update input dag node output descendents counts updated 
convert tid vector format statically allocated 
node 
intersect 

node 
update fig 

updating itemset counts intersect input tid vector tid list output 
tid list 

tid transaction current partition 


return optimality oracle fig 

tid vector tid list intersection show oracle optimal respects enumerates itemsets need enumerated enumeration performed efficient way possible 
results theorems 
due lack space deferred proofs theorems 
theorem 
size partition large itemset length greater itemsets enumerated oracle algorithm counts need incremented partition 
theorem 
cost enumerating itemset oracle tight constant factor 
oracle optimal respects note may remain scope improvement details computation 
intersect function computes intersection tid vector tid list requires operations 
originally constructed tid list cost amortized calls intersect function 
plan investigate intersection sets general computed efficiently example diffsets novel interesting approach suggested 
itemset set difference tid list mother 
diffsets easily incorporated oracle update function section changed compute diffsets tidlists techniques suggested 
advantages partitioning schemes oracle discussed uses partitioning scheme 
alternative commonly current association rule mining algorithms especially schemes tuple tuple approach :10.1.1.40.6757
problem tuple tuple approach considerable wasted enumeration itemsets 
core operation algorithms determine candidates subsets current transaction 
frequent itemset current transaction need determine candidates immediate supersets current transaction 
order achieve necessary enumerate check presence candidates current transaction 
armor algorithm shown experiments section considerable gap performance oracle existing mining algorithms 
move describe new mining algorithm armor association rule mining oracle 
section overview main features flow execution armor details candidate generation deferred due lack space 
guiding principle design armor algorithm consciously attempt determine minimal amount change oracle required result online algorithm 
marked contrast earlier approaches designed new algorithms trying address limitations previous online algorithms 
approach association rule mining problem completely different perspective 
armor oracle database conceptually partitioned disjoint blocks passes database 
pass form set candidate itemsets guaranteed superset set frequent itemsets 
pass counts candidates determined partition exactly way oracle maintaining candidates dag structure 
itemsets itemsets stored lookup arrays armor input database set items minimum support output supports 
number partitions pass 
candidate set dag 


singleton 

update second pass 



candidates output 
exit 

singleton 
update fig 

armor algorithm oracle 
oracle candidates inserted removed partition 
generation removal candidates done simultaneously computing counts 
details candidate generation removal pass described due lack space 
ease exposition assume remainder section candidates including itemsets itemsets stored dag 
candidate store integers algorithm number occurrences inserted 
index partition inserted 
upper bound number occurrences inserted algorithm works tuple tuple basis adapted semantics fields suit partitioning approach 
database scanned far support candidate lie range 
bounds denoted minsupport respectively 
define itemset frequent minsupport algorithm frequent itemsets stored stage dag structure armor contains candidates including negative border frequent itemsets ensure efficient candidate generation 
details 
pass candidate set pruned include frequent itemsets negative border 
counts itemsets entire database determined second pass 
counting process identical oracle 
new candidates generated second pass 
candidates may removed 
details candidate removal second pass deferred 
pseudo code armor shown explained 
pass pass set candidate itemsets initialized set singleton itemsets line 
function line reads tuples partition simultaneously creates tid lists singleton itemsets reading entire partition update function details applied singleton lines 
increments counts existing candidates corresponding counts current partition 
responsible generation removal candidates 
pass contains superset set frequent itemsets 
candidate inserted partition count partitions available 
second pass second pass candidates frequent part current negative border removed line 
candidates inserted partition counts entire database available 
itemsets counts output line 
function performs task outputs itemset supersets left removed second pass function line reads tuples partition creates tid lists singleton itemsets reading entire partition update function details applied singleton lines 
reading partition check see candidates 
mining process terminates 
memory utilization armor design implementation armor opted speed decisions involve space speed tradeoff 
main memory utilization armor certainly compared algorithms apriori 
discussion show memory usage armor reaches current machine configurations 
experimentally confirmed section 
main memory consumption armor comes sources arrays storing counters singletons pairs respectively dag structure storing counters longer itemsets including tidlists itemsets current partition 
total number entries arrays dag structure corresponds number candidates armor discussed marginally moment disregard space occupied tidlists itemsets amortized amount space taken candidate small constant integers dag integer arrays 
candidates dag array space required mb 
environment consider pattern lengths small number candidates typically comparable available main memory 
discusses alternative approaches assumption hold 
regarding space occupied tidlists itemsets note armor needs store tidlists frequent itemsets 
number frequent itemsets order number frequent itemsets total space occupied tidlists processing partition bounded integers 
space occupied tidlists bounded mb 
assume range thousands total number rules generated enormous purpose mining served 
note bound pessimistic 
typically lengths tidlists smaller partition size especially itemset length increases 
main memory consumed current partition small compared factors 
transaction occupies kb partition size require mb memory 
extreme examples total memory consumption armor mb acceptable current machines 
general expect memory issue mining databases armor 
happen issue easy modify armor free space allocated tidlists expense time freed line update function shown 
final observation discussion main memory consumption armor proportional size output explode input problem size increases 
performance study previous section described oracle armor algorithms 
conducted detailed study assess performance armor respect oracle algorithm 
completeness point included classical apriori evaluation suite 
performance algorithms including viper fp growth due lack space available 
experiments cover range database mining workloads include typical extreme cases considered previous studies 
performance metric experiments total execution time taken mining operation 
due space limitations show representative experiments available 
experiments conducted mhz pentium iii workstation running red hat linux configured gb main memory local gb scsi rpm disks 
algorithms evaluation suite written 
partition size armor oracle fixed tuples 
time seconds bms webview oracle armor apriori support time seconds oracle armor apriori support fig 

performance armor time seconds oracle armor apriori support real dataset experiments bms webview blue martini software synthetic databases generated ibm almaden generator :10.1.1.40.6757
synthetic databases generated parameters standard naming convention introduced tuples :10.1.1.40.6757
number items supermarket number potentially frequent itemsets set respectively 
set rule support threshold values low feasible available main memory 
low support values number frequent itemsets exceeded 
felt number rules generated enormous purpose mining find interesting patterns served 
particular set rule support threshold values bms webview databases ranges respectively 
results experiments shown figures axis graphs represent support threshold values axis represents response times algorithms evaluated 
graphs see response times algorithms increase exponentially support threshold reduced 
expected number itemsets output increases exponentially decrease support threshold 
see apriori armor oracle 
apriori feature response time range graph highest support threshold 
see armor performance close oracle high supports 
reasons density frequent itemset distribution sparse high supports resulting frequent itemsets supports close frequent itemsets locally frequent partitions 
locally frequent partitions frequent partitions 
counters updated partitions 
complete counts candidates available pass resulting light short second pass 
expected armor performance close oracle 
frequent itemset distribution dense low supports argument hold support region 
see armor performance relative oracle decreases low supports 
far important armor consistently performs factor oracle worst case times support threshold database 
shown prior algorithms feature workloads perform consistently entire range databases support thresholds 
memory utilization order measure main memory utilization armor set total number items items database environment represents extremely stressful situation armor regard memory utilization due large number items 
complete results experiment shown due lack space 
available 
worst case lowest support threshold memory consumption armor items mb items mb increase times increase number items 
reason main memory utilization armor depend directly number items size output discussed section 
discussion experimental results explain armor typically perform factor oracle 
notice difference single pass oracle pass armor armor continuously generates removes candidates 
generation removal candidates armor dynamic efficient result significant additional cost armor 
candidates armor frequent part current negative border continuously removed itemset locally frequent partition globally frequent entire database removed course pass belongs current negative border 
resulting candidate set armor approximation required mining output 
fact experiments worst case number candidates counted armor percent required mining output 
reasons indicate cost pass armor slightly single pass oracle 
notice difference second pass armor single pass oracle armor candidates continuously removed 
number itemsets counted armor second pass quickly reduces oracle 
armor necessarily perform complete scan database second pass pass ends candidates 
due reasons expect cost second pass armor usually single pass oracle 
cost pass armor usually slightly single pass oracle second pass usually single pass oracle follows armor typically perform factor oracle 
approach quantify algorithmic performance association rule mining algorithms regard idealized practically infeasible oracle 
oracle algorithm utilizes partitioning strategy determine supports itemsets required output 
uses direct lookup arrays counting singletons pairs dag data structure counting longer itemsets 
shown choices optimal required itemsets enumerated cost enumerating itemset experimental results showed substantial gap performance current mining algorithms oracle 
new online mining algorithm called armor constructed minimal changes oracle result online algorithm 
armor utilizes new method candidate generation dynamic incremental guaranteed complete passes database 
experimental results demonstrate armor performs factor oracle real synthetic databases acceptable main memory utilization 
acknowledgments roberto bayardo mohammed zaki thomas reading previous drafts providing insightful comments suggestions 

agrawal srikant 
fast algorithms mining association rules 
proc 
intl 
conf 
large databases vldb september 


online association rule mining 
proc 
acm sigmod intl 
conf 
management data june 

lin dunham 
mining association rules anti skew algorithms 
intl 
conf 
data engineering icde 


quantifying utility past mining large databases 
information systems july 


optimality association rule mining algorithms 
technical report tr dsl indian institute science 

savasere omiecinski navathe 
efficient algorithm mining association rules large databases 
proc 
intl 
conf 
large databases vldb 

shenoy sudarshan bawa shah 
turbo charging vertical mining large databases 
proc 
acm sigmod intl 
conf 
management data may 

srikant agrawal 
mining generalized association rules 
proc 
intl 
conf 
large databases vldb september 

xiao dunham 
considering main memory mining association rules 
intl 
conf 
data warehousing knowledge discovery 

zaki gouda 
fast vertical mining diffsets 
technical report rensselaer polytechnic institute 

zheng kohavi mason 
real world performance association rule algorithms 
intl 
conf 
knowledge discovery data mining sigkdd august 
