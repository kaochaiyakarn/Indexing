brinksma larsen staying alive cheaply possible research report lsv jan ecole normale de cachan avenue du wilson cachan cedex france www lsv ens cachan fr research report lsv lab 
cnrs ens de cachan france jan long version title appear proc 
th int 
workshop hybrid systems computation control philadelphia pa usa mar lecture notes computer science 
springer 
staying alive cheaply possible patricia ed brinksma kim larsen lsv cnrs ens de cachan umr france email lsv ens cachan fr department computer science university twente netherlands email brinksma cs utwente nl brics aalborg university denmark email cs auc dk 
concerned derivation infinite schedules timed automata sense optimal 
cover wide class optimality criteria start introducing extension priced timed automata model includes costs rewards separate modelling features 
precise definition constitutes optimal infinite behaviours class models 
subsequently show derivation optimal non terminating schedules double priced timed automata computable 
done reduction problem determination optimal mean cycles finite graphs weighted edges 
reduction obtained introducing called corner point abstraction powerful abstraction technique show preserves optimal schedules 
past years application model checking techniques scheduling problems established line research 
scheduling problems reformulated terms reachability viz 
im possibility reach state improves optimality criterion 
exists wide body literature established results optimal scheduling fields real time systems operations research model checking approach interesting accounts 
serves benchmarking activity ectivity ciency model checking compared best known results obtained techniques 
second classical scheduling solutions properties context additional assumptions may quite may apply actual practical circumstances 
model checking techniques advantage ering generic approach finding solutions model way say numerical integration techniques may succeed symbolic methods fail 
course model checking comes restrictions stumbling blocks notorious state space explosion 
lot research devoted containment problem sophisticated techniques data structures compact state space representation smart state space search strategies interesting idea model checking reachability properties received attention guide exploration symbolic state space promising sets states visited 
number applications hlp ny bmf model checkers solve number non trivial scheduling problems 
approaches di erent classical full state space exploration model checking algorithms 
example branchand bound techniques ac prune parts search tree guaranteed contain optimal solutions 
development motivated research extension model checking algorithms optimality criteria 
provide basis guided exploration state spaces improve potential model checking techniques resolution scheduling problems 
extensions application real time model checker uppaal bll done visiting ciss aalborg university denmark supported ciss aci program french ministry research 
optimal scheduling problems reported bfh bfh related reported am 
closely related activity reported am am specific search algorithms timed automata models defined solve classes scheduling problems job shop task graph scheduling 
formulation scheduling synthesis reachability problem accurate cases reactive behaviours infinite optimal schedule determined case reactive behaviours 
case optimal reachability final state reachability optimal infinite behaviours relevant 
borrowing terminology performance analysis say interested stationary behaviours system 
discrete case stationary behaviours cyclic behaviours 
assuming cyclic behaviour cost reaching cycle insignificant compared infinite cost related non terminating cyclic behaviours assuming single cycle execution positive cost 
approximating infinite behaviours finite ones yield optimal solutions possible search su ciently deep costly pre may obscure limit optimal behaviours mad 
study optimal infinite behaviour context priced timed automata discrete setting detection optimal behaviours goes back karp algorithm kar determines minimal mean cost cycles finite graph weighted edges 
contribution show computability corresponding symbolic question priced timed automata reduction discrete problem la karp called corner point abstraction 
second contribution establish computability problem original setting priced timed automata bfh bfh extension features price parameters viz 
costs rewards 
motivated fact optimality infinite behaviours usually expressed limit ratio accumulated costs rewards 
practical terms may involve measures units money production consumption time energy throughput units time production cost units money ciency units energy principle measures count cost reward depending particular problem 
di erence cost reward merely technical infinite behaviour insist accumulated rewards diverge tend positive infinity accumulation cost constraint 
optimality interpreted maximizing minimizing cost reward ratio 
structure rest follows 
section define double priced transition systems basis introduce model double priced timed automata 
section states main technical result assumptions 
section introduces central notion corner point abstraction related region automaton construction timed automata 
section contains proof necessary result states quotients ne functions regions generally zones attain extreme values corner points 
section show corner point abstraction sound section complete optimal behaviours 
section study complexity problem section draw give indications 
models problems double priced transition systems 
double priced transition system short tuple cost reward set states initial state set transitions cost reward price functions 
transition cost reward prices cost reward associated transition 
shall notation cost reward called linearly priced timed automata bfh bfh weighted timed automata 
finite execution cost reward 
price functions extend natural way cost cost reward reward finite execution ratio ratio defined ratio cost reward quotient exist reward 
consider infinite execution 
denote finite prefix length 
ratio defined ratio lim ratio provided limit exists 
consider infimum ratio supremum ratio denoted respectively ratio ratio defined ratio lim inf ratio ratio lim sup ratio define optimal ratio inf ratio infinite execution infinite execution called schedule ratio optimal ratio note infinite state ratio optimal run may exist 
case say ratio optimal family runs ratio 
optimal ratio problem consists computing exist family example 
consider states transitions initial state 
see ratio defined consider execution computing ratios finite prefixes get respectively ratio ratio hand execution consisting infinite repetition cycle defined ratio fact optimum ratio 
double priced timed automata 
finite state optimal ratio obviously computable 
karp theorem kar provides algorithm time complexity number states number edges case reward transition 
extensions karp algorithm proposed computing general case see example dg dig 
remainder shall settle computability infinite state derived called double priced timed automata timed automata extended price rates determining cost reward discrete delay transitions 
set clocks set clock constraints defined inductively rules 
definition 
double priced timed automaton short set clocks tuple finite set locations initial location set edges assigns invariants locations assign price rates locations prices edges 
example 
consider production system consisting number machines 
attended single operator machine production modes high low mode characterized amount goods produced time unit respectively amount power consumed time unit respectively 
producers point view high production mode preferable better smaller ratio low production mode 
unfortunately machine operate high production mode certain amount time attended operator 
operator turn needs minimum time attending machines 
right provides typical machine operator 
fig 
consider production system obtained product machine parameters machine parameters single operator time 
product construction cost reward rate composite location obtained sum cost reward rates corresponding component locations 
low high att 
att 
single machine att 
operator semantics 
intuitively types transitions delay transitions cost reward obtained applying rates source location discrete transitions cost reward values corresponding edge 
formally stating semantics introduce definitions 
clock valuation function assigns values clocks 
delay denotes clock valuation clock set clocks clock valuation 
write clock valuation satisfies guard defined natural way 
definition 
semantics set clocks cost reward assigns clock defined follows exists transition example 
reconsider production system fig 

infinite execution providing scheduling policy operator cost reward ratio case write cost reward rates zero single location operator 
fig 

production system machines operator 
fig 
illustrates schedule gantt chart 
execution providing scheduling policy cost reward ratio fig 

time schedule ratio time schedule ratio fig 

schedules production system ratios 

point interesting subclasses 
reward said reward rates locations zero 
class corresponds roughly mean ratio classical finite state systems dig 
interesting class reward corresponds time location reward rates transition rewards 
class corresponds usual intuitive notion stationary behaviours measure cost unit time 
result restrictions 
remainder restrictions models consider 
restrict reward functions non negative 
restrict double priced timed automata reward strongly reward diverging sense strongly reward diverging closing constraints replacing constraint constraint infinite path new closed automaton satisfy reward 
fig 

meeting previous restriction example 
depicted fig 
meet previous restriction 
consider path takes transition date takes times loop 
reward ratio real infinite path states positive 
consider infinite path path path automaton constraints closed get reward 

notice restriction implies particular executions timed automata consider non zeno reward time elapsed 
see assumption important implication see proposition 
assumption 
assume timed automata bounded exists constant reachable extended state clock restriction transformed equivalent bounded timed automaton strongly bisimilar costs rewards 
state main result 
theorem 
optimal ratio problem computable strongly reward diverging nonnegative rewards 
precise statement theorem obtained notions soundness completeness 
say sound say complete theorem corollary proposition proposition 
bounded strongly reward diverging non negative rewards 
exists finite state sound complete defined finite state prove sound complete bounded called corner point abstraction define section 
regions corner point abstraction aim section propose discretization timed automata behaviours extension region automaton construction ad ad 
fix assume bounded denote number clocks 
regions corner points 
standard notion regions initially defined alur dill ad 
consider bounded timed automata need bounded regions 
region bounded finite set clocks tuple assigns clock integer value integer forms partition implies valuation say region clock integer part clock pair clocks corner point element region 
corner point associated closure usual topology 
region 
corner points corner point abstraction 
construct finite state cp called corner point abstraction states form location region corner point transitions cp defined manner discrete transitions 
transition transitions cp corner point associated corner point associated 
set cost cost reward reward 
idling transitions 
types idling transitions 
transitions distinct corner points time successor case 
set cost cost reward reward intuitively delay corner points precisely time unit 
transitions time successor region corner point associated set cost reward proposition important consequence strongly reward divergence hypothesis 
proposition 
bounded strongly reward diverging non negative rewards 
exist constants infinite path cp reward denotes prefix length 
note depend automaton paths consider 
notation fractional part 
proof sketch proof 
consider infinite path cp denote number states cp factor length reward find cp reachable cycle reward contradiction strongly reward divergence hypothesis cycle corresponds real path automaton constraints closed 
get reward int int represents integral part 

real finite infinite path set paths 

cp corner point associated denoted proj cp 
note 

region equivalent real paths region equivalent proj cp proj cp 
remainder prove optimal ratio corner point abstraction optimal ratio original 
corner point abstraction ectively constructed computing optimal ratios finite state abstraction finite state ective see kar dg dig get ectively computable satisfying strongly reward divergence hypothesis 
example 
come back automaton fig 
seen see example meet strongly reward divergence restriction 
easy compute real infinite path denotes date transition taken ratio 
consider path corner point abstraction get ratio see change costs rewards transitions get relation ratio paths original automaton ratio paths corner point abstraction 
shows strongly reward divergence necessary 
quotient ne functions section contains technical results useful 
closed set 
border denoted border defined denotes interior closed set point statements equivalent characterize border border exists 
proofs lemmas appendix 
lemma 
function defined compact convex set assume addition included definition set minimum obtained border remainder section standard notion zone 
zone set clocks convex set valuations defined constraints forms integer 
example constraints represent set valuations 
note denotes infinite norm dimension 
lemma 
function defined bounded zone assume addition closure usual topology included definition set infimum obtained point integer coordinates 
lemmas imply infimum function bounded zone obtained corner points zone 
result easily generalized general bounded convex polyhedra bounded zones 
result function minimized corner points polyhedron corner point representing intuitively extremal point soundness corner point abstraction aim section prove corner point abstraction sound infinite paths timed automaton find infinite path corner point automaton smaller ratio 
proof done steps consider finite paths extend result infinite paths 
theorem 
bounded strongly reward diverging non negative rewards 
cp considering finite paths 
proposition 
bounded reward diverging finite execution exists execution proj cp ratio ratio special case reward impulse may obtained direct consequence previous cost optimality cf example bfh bfh 
general case requires new proof 
require technical results developed section 
proof 
finite execution alternating delay discrete transitions 
set assume execution read sequence transitions ratio cost reward transition sum discrete costs rewards 
want minimize function constraints index max region belongs set constraints defines zone variables apply lemma get infimum obtained point integer coordinates say note point closure satisfies particular set constraints 
define valuations max 
valuation integer coordinates 
corner point sequence valuations accepted sequence replace constraints addition time elapsed state ready build path corner point abstraction meet requirements 
exist regions index time successor region construct graph 
transitions initial 
corner point corner point inductively 
assume constructed 
corner point corner point discrete actions 
assume constructed 
claim 
graph just constructed path cp denote 
proof 
computed exactly possible successor graph 
claim 
path proj cp 
proof 
thing need prove go state note exists 
time successor implies time successor 
transitions states time successor having gone regions arrive viewed corner point compute ratio ratio costs rewards defined construction cp 
get ratio ratio done 
extension infinite paths 
prove previous property restricted finite executions extended infinite executions 
proposition 
bounded strictly reward diverging non negative rewards non zeno infinite real path exists infinite path cp ratio ratio 
notice contrary proposition path may proj cp 
addition finite prefix may happen finite prefix satisfies property described proposition means solve problem just extending paths proposition 
proof 

infinite path denote prefix length 
value minimal ratio reachable cycle cp integer 
proposition exists path proj cp ratio ratio 
proposition get reward particular lim reward 
decompose cycles write 
simple paths cycles 
assume addition decomposition maximal sense path 
acyclic 
maximality property decomposition implies total length 
number nodes cp set cost reward compute di erence ratio ratio cost reward cost reward pn cost pn reward pn reward pn reward set pn cost pn reward ratio minimal reachable cycle 
get ratio ratio pn reward pn reward observe bounded lim reward 
take infimum limit equation get lim ratio lim infimum ratio greater ratio optimal reachable cycle cp remind property min max completeness corner point abstraction aim section state completeness corner point abstraction 
precisely prove infinite path corner point abstraction real paths original automaton ratio close want ratio path corner point abstraction 
theorem 
bounded strongly reward diverging non negative rewards 
cp proof theorem done steps prove approximate paths cp paths close want original path proposition 
su cient prove infinite path cp strongly reward divergence assumptions find real path ratio close want ratio path cp proposition 
proposition 
bounded 
possibly infinite path cp exists real path proof 
valuation 
clock define min integer pair clocks min integer 
define diameter max clock clocks int proposition direct consequence technical lemma proof appendix 
lemma 
consider transition cp take valuation 
exists valuation 
lemma construct inductively path described step construction 
concludes proof 
result paths prove lemma ratios 
proposition 
bounded strongly reward diverging non negative rewards 
infinite path cp ratio defined 
holds exists real path defined ratio ratio 
note case non strict constraints path accepting corresponds real path corresponds paths constructed give family optimal schedules 
represents usual infinite norm defined max 
proof 
take 
applying previous lemma find real path step distance corner point real valuation strictly 
cost cost bounded maximal cost labeling automaton cp similarly write reward reward bounded 
proposition exists reward compute ratio ratio cost reward cost reward reward cost reward reward nc su ciently great ratio ratio done constructed family optimal schedules note cp finite automaton optimal schedules cycles ratio defined kar dg dig 
previous proposition proves completeness corner point abstraction concludes section 
complexity results section study complexity optimal ratio problem prove complete proposition 
optimal ratio problem strongly reward diverging non negative rewards hard 
proof 
proof done reduction reachability problem timed automata known complete ad 
timed automata set final states 
transform transition set final state reachable optimal ratio 
upper bound complexity know optimal ratio problem finite systems complexity number graph number edges graph see dig 
size corner point abstraction exponential number clocks system get optimal ratio problem 
better get proposition 
optimal ratio problem strongly reward diverging non negative rewards 
proof 
fix consider corner point abstraction 
proved optimal schedules correspond optimal cycles corner point abstraction 
state cp stored polynomial space see ad 
guess cycle cp length exponential 
computing cost reward done polynomial space cost reward linear number states 
gives upper bound optimal ratio 
question cycle better ratio 
generate nondeterministically cycle compute ratio previously 
cycle better previous cycle optimal 
complexity step np known equal np see pap 
global complexity procedure np 
shown optimal infinite scheduling problem computable double priced timed automata 
reduced problem computation optimal infinite schedules weighted finite state graphs 
problem equivalent finding optimal cycles finite state graphs done algorithms karp algorithm kar extensions improvements dg dig 
number issues open 
proof computability regions corner points provide realistic implementation strategy 
obtain cient implementation zones fly exploration symbolic state space 
restriction setting prices cost reward uniform rate locations may particularly useful 
implementations specific case cient general problem 
idea approximate optimal infinite schedules working repeated cost horizons applying partitioning refinement techniques done tool 
extension address problem presence adversaries di cult di cult cost optimal winning strategies single priced timed automata adversaries 
finite state setting problem solved zp 
ac david applegate william cook 
computational study job shop scheduling problem 
journal computing 
ad rajeev alur david dill 
automata modeling real time systems 
proc 
th international colloquium automata languages programming icalp volume lecture notes computer science pages 
springer 
ad rajeev alur david dill 
theory timed automata 
theoretical computer science tcs 
rajeev alur salvatore pappas 
optimal paths automata 
proc 
th international workshop hybrid systems computation control volume lecture notes computer science pages 
springer 
am eugene asarin oded maler 
soon possible time optimal control timed automata 
proc 
nd international workshop hybrid systems computation control volume lecture notes computer science pages 
springer 
am oded maler 
job shop scheduling timed automata 
proc 
th international conference computer aided verification cav volume lecture notes computer science pages 
springer 
am oded maler 
preemptive job shop scheduling stopwatch automata 
proc 
th international conference tools algorithms construction analysis systems tacas volume lecture notes computer science pages 
springer 
bfh gerd behrmann thomas kim larsen paul pettersson vaandrager 
cient guiding cost optimality 
proc 
th international conference tools algorithms construction analysis systems tacas volume lecture notes computer science pages 
springer 
bfh gerd behrmann thomas kim larsen paul pettersson vaandrager 
minimum cost reachability priced timed automata 
proc 
th international workshop hybrid systems computation control volume lecture notes computer science pages 
springer 
bll johan bengtsson kim larsen fredrik larsson paul pettersson wang yi carsten weise 
new generation 
proc 
international workshop software tools technology transfer brics notes series pages 
bmf ed brinksma angelika 
verification optimization plc control schedule 
journal software tools technology transfer 
dg ali rajesh gupta 
faster maximum minimum mean cycle algorithms system performance analysis 
ieee transactions computer aided design integrated circuits systems 
dig ali sandy irani rajesh gupta 
cient algorithms optimum cycle mean optimum cost time ratio problems 
proc 
th acm ieee design automation conference dac pages 
acm 
pedro argenio bertrand henrik jensen kim larsen 
reachability analysis probabilistic systems successive refinements 
proc 
st joint international workshop process algebra probabilistic methods performance modeling verification volume lecture notes computer science pages 
springer 
pedro argenio bertrand henrik jensen kim larsen 
reduction refinement strategies probabilistic analysis 
proc 
nd joint international workshop process algebra probabilistic methods performance modeling verification volume lecture notes computer science pages 
springer 

scheduling steel plant timed automata 
proc 
th international conference real time computing systems applications pages 
ieee computer society press 
hlp thomas kim larsen paul pettersson 
guided synthesis control programs 
proc 
ieee international workshop distributes systems verification validation pages 
ieee computer society press 
kar richard karp 
characterization minimum mean cycle digraph 
discrete mathematics 
kim larsen gerd behrmann ed brinksma thomas paul pettersson 
cheap possible cient cost optimal reachability priced timed automata 
proc 
th international conference computer aided verification cav volume lecture notes computer science pages 
springer 
kim larsen paul pettersson wang yi 
nutshell 
journal software tools technology transfer 
salvatore la torre mukhopadhyay 
optimal reachability control acyclic weighted timed automata 
proc 
nd ifip international conference theoretical computer science tcs volume ifip conference proceedings pages 
kluwer 
mad angelika 
deriving schedules smart card personalisation system 
submitted 
ny peter sergio yovine 
computing cient operations schemes chemical plants multi batch mode 
european journal control 
pap christos papadimitriou 
computational complexity 
addison wesley 
zp uri zwick mike paterson 
complexity mean payo games graphs 
theoretical computer science tcs 
appendix technical proofs quotient ne functions lemma 
function defined compact convex set assume addition included definition set minimum obtained border proof 
proof done induction dimension space 
initial step 
corresponds case 
assume ax cx compute derivative cx ax cx ad bc cx sign constant closed interval min max 
mina obtained min max depending sign ad bc 
note ad bc means minimum particular obtained border inductive step 
assume 
minimum obtained value assume viewed parameter function defined subset denote projection coordinates compact set note form function know induction hypothesis min obtained border 
get induction step su cient prove border border 
pick border 
exists 
projection coordinates 

conclude border 
lemma 
function defined bounded zone assume addition closure usual topology included definition set infimum obtained point integer coordinates 
proof 
bounded zone compact set inf min rest proof done induction dimension space 
initial step 
initial step 
zones dimension lines integers 
done proof lemma minimum obtained integers 
induction step 
assume 
applying lemma get min obtained border 
remind obtained replacing constraints border corresponds union facets infimum facet equation resp 

eliminate variable replacing resp 
get function facet closed zone intersection constraint tighten possible defining see details 
variables 
loss generality assume property min min proj 
know induction hypothesis minimum obtained having integer values 
minimum obtained integer resp 
integer clocks integer values 
completeness corner point abstraction lemma 
consider transition cp take valuation 
exists valuation 
proof 
prove lemma distinguishing possible cases transition assume discrete transition comes 
define obviously 




get 
second property obtained easily 
assume idling transition 
case 
set max min 
illustrate construction int int int int time easy prove clock taken strictly 
assume idling immediate time successor cases integer inside valuations value integer int set positive minimal 
define 
course 
integer inside valuations set clocks integer non empty 
int set positive minimal 
define previously easy get clock integer right valuations int set clock minimal define clock 
get 
rest previously 
integer left corner valuations int choose set clock case 

cases done proof finished 

