fch sph fch le le diaper stanton le diaper cls july char count comparing task models user interface design limbourg universit catholique de louvain jean vanderdonckt universit catholique de louvain task models task analysis methods supporting tools introduced literature widely practice 
comes need understand scopes differences 
chapter provides thorough review selected significant task models method supporting tools 
purpose meta model task model expressed entity relationship attribute schema era discussed 
leads comparative analysis task models aims goals discipline concepts relationships expressiveness static dynamic structures 
discussion model respect developing life cycle steps tool support advantages shortcomings 
comparative analysis provides framework task models understood respect 
appreciation similarities differences allows identify task model fits situation requirements 
shows similar concept relationship translates different task usage models 
user centered design ucd yielded forms design practices various characteristics context considered 
task analysis widely recognized fundamental way ensure user centered design improve understanding user may interact user interface accomplish interactive task 
task model defined description interactive task performed user application application user interface 
individual elements task model represent specific actions user may undertake 
information subtask ordering conditions task execution included model 
fch sph fch le le diaper stanton le diaper cls july char count limbourg vanderdonckt task analysis methods introduced disciplines different backgrounds different concerns different focuses task 
disciplines include cognitive psychology ergonomics stanton young 
task models improve understanding users may interact user interface carrying particular interactive task 
task analysis useful identifying cognitive processes data manipulation thinking problem solving structures intellectual skills knowledge task exploited user carrying task showing user may dynamically change task proceeds johnson diaper long 
predict cognitive load rectify usability flaws 
task planning allocation 
task models assess task workload plan allocate tasks users particular organization provide indicators redesign allocation fit time space available resources ainsworth 
software engineering 
task models capture relevant task information operational form machine understandable see chap 

especially useful system needs maintain internal task representation dynamic purposes enable adaptation variations context lewis rieman smith neill 
ethnography 
task models focus humans interact particular user interface context possibly interacting users time see chap 

existing task models show great diversity terms formalism depth analysis 
achieve range objectives inform designers potential usability problems hta duncan chap 

evaluate human performance goms card moran newell chap 

support design providing detailed task model describing task hierarchy objects knowledge structures tks johnson chap 
ctt patern chap 

generate prototype user interface adept approach wilson johnson chap 

different objectives give rise interesting concepts 
example task analysis methods cognitive analysis go goal level analyze cognitive workload execution time knowledge required carry set tasks 
respect similar user modeling 
hand methods intended support cooperative developed formalisms represent tasks assigned different roles broadening scope task analysis organizational concepts 
situation leads series shortcomings see chap 
lack understanding basic contents individual task model including rationale analysis method concepts relationships vocabularies intellectual operations involved 
heterogeneity contents different models due variety methods employed different disciplines 
heterogeneity encompasses different focuses different vocabularies different definitions task model may 
difficulty matching contents analyses done different task analysis models 
matching contents established 
method fch sph fch le le diaper stanton le diaper cls july char count 
comparing task models vocabulary difficult relate vocabularies different methods see cover 
lack interoperability systems 
task modeling tools share common format restricted task models expressed accepted formats 
reduced communication task analysts 
owing lack interoperability task analyst may experience trouble communicating results task analysis analyst stakeholder 
addition transition persons may generate inconsistencies errors misunderstandings inappropriate modeling 
difficulty identifying frontiers task analysis 
methods focused specific aspects task represented tend go limits task encompassing parameters external task relevant context 
address shortcomings chapter pursues major goals 
theoretical goal provide deep conceptual methodological understanding individual task model related approach 
second ontological goal establish semantic mappings different individual task models create transverse understanding underlying concepts independently particularities 
goal involves activities vocabulary translation expressiveness analysis degree details identification concepts emergence transversal concepts task structuring identification 
review task models general task analysis method may involve related poles 
models 
model captures facets problem translates specifications 

stepwise approach 
approach sequence steps models 

software tools 
software tool supports approach manipulating appropriate models 
task analysis method may contain representative parts fall poles 
comparative study focused pole models 
assumed structuring method steps modeling tasks remain independent task model contents 
methodological part task model taken fall outside scope analysis 
tool clearly facilitates task modeling activity hiding model notation analyst helping capture edit modification exploit task simulation user interface derivation 
models software supported 
lots task models proposed literature described handbook cta chap 
ctt chap 
patern diane 
lu paris vander linden goms chap 
john kieras gta :10.1.1.39.59
van van der veer van van der veer eli ns hta chap 
duncan shepherd mad 
muse lim long tag payne green diaper fch sph fch le le diaper stanton le diaper cls july char count limbourg vanderdonckt tks johnson see chapter chap 

subset task models selected reflect disciplinary variety 
significant discipline represented member 
set intended reflect geographical range task models 
addition selected task model integrated development methodology core side element submitted experimental studies assess validity 
selecting models analyzed foundation papers 
decomposed model constituent concepts entity relationship attribute era method analysis obtain task metamodel see appendix chapter 
task models invoke concepts different levels importance 
concept similar methods modeled entity relationship attribute 
decided concepts represented consistent manner 
example temporal operator represented entity recognize equal importance concept different task metamodels 
pertinent concept precisely defined commented 
initial terminology originating papers kept naming identified concepts 
hierarchical task analysis hta hierarchical task analysis hta duncan chap 
pioneering method task analysis 
primarily aimed training users perform particular tasks 
basis interviews user observation analysis existing documents manuals documentation hta describes tasks terms main concepts fig 
tasks task hierarchy plans 
tasks recursively decomposed subtasks point subtasks allocated user user interface observable 
task hierarchy statically represents task decomposition 
decomposition stopping criterion rule thumb referred rule 
criterion takes account probability performance cost performance consequences produce 
task hierarchy contain task ordering task accomplished plan describable terms rules skills knowledge 
plan specifies ordering subtasks task carried acting constraint task performance 
plan provided hierarchic level 
plan informal description temporal relationships tasks attractive features hta decomposed goal goal name goal status conditions specified decomposes goal decomposition condition defines defined terms task definition task id task name specification task type task description id task id specifies operation operation name operation input action feedback parent child decomposition hierarchic level fig 

hta task meta model 
scheduled task performance schedules plan plan id plan description id plan id fch sph fch le le diaper stanton le diaper cls july char count 
comparing task models simple expressive 
plans close textual description activity list chap 
traditional task analysis 
advantage plans create artificial tasks formal notations force analysts avoid ambiguous specification 
hand plans informal possible apply automatic checking properties consistency reachability 
task expressed terms goals reached corresponding task accomplished 
goal status latent active conditions satisfied 
advantage hta goals independent concrete means reaching 
goal level decomposition goal different operations reaching goal imagined specified 
operation consequently related goal goals specified circumstances goal activated input activities action contribute goal attainment conditions indicating goal attained feedback 
hta provides graphical representation labeled tasks plan hierarchic level explaining possible sequences tasks conditions sequence executed 
hta supports task analysis teamwork described cunningham mathias jones see chap 

goals operators methods selection rules goms card 
developed goms engineering model human performance enable quantitative predictions chap 

incorporating tables parameter values rely cognitive architecture goms engineering approach task design beard smith 
original goms model referred cmn goms card root family models elaborated john kieras gomsl goms language cpm goms critical path method goms 
uses mental programming language parallel cognitive architecture second uses pert chart identify critical path computing execution time john byrne 
goms concept method essential methods describe tasks carried fig 

method sequence operators describes task performance 
tasks triggered goals decomposed subtasks corresponding intermediary goals 
methods compete goal selection rule choose proper 
constrained operator constrains performed temporal constraint operator name operator type operationalizes method operationalized operationalization method name method description parent task task id goal accomplished goal name child goal decomposition hierarchic level accomplishing selects selection rule rule name rule condition child accomplishes parent method decomposition hierarchic level fig 

goms task meta model 
manipulates manipulating manipulated object object name object type object property loads performing performs agent agent name loaded cognitive workload fch sph fch le le diaper stanton le diaper cls july char count limbourg vanderdonckt methods describe goals accomplished 
higher level methods describe task performance terms lower level methods operators selection rules 
lowest level decomposition goms unit task defined card 
task user really consciously wants perform 
higher level methods task flow operators act constructors controlling task execution 
goms clear distinction tasks actions 
task decomposition stops unit tasks 
second actions goms termed operators specified methods associated unit tasks 
action modeling varies depending goms model method specification 
operators cognitive physical actions user perform order accomplish task goal 
operator associated execution time determined experimentally goms model help predicting time needed perform task 
actions undertaken user specified external mental operators 
special mental operators flow control operators constrain execution flow 
granularity varies purpose analysis clear goms mainly useful decomposition done operational level unit task level 
groupware task analysis gta groupware task analysis gta developed van der veer means modeling complexity tasks cooperative environment 
gta roots ethnography applied design cooperative systems activity theory 
adopts clear distinction tasks actions 
ontology describing concepts relations method proposed van van der veer 
central concepts task role object agent event fig 

gta complex tasks decomposed unit tasks card basic tasks tauber 
indication relates user interface design 
triggered task triggering parent triggers task task name event task goal event name event description task type start cond cond triggers initial state triggered final state task frequency triggering task duration child task decomposition responsibility uses responsibility parent role decomposition parent role responsible role id role name child object decomposition system operation operation name performed child object manipulated object name rights object attr action action name fig 

gta task meta model 
performing played performs playing assign mode plays agent rights agent name skills attitude fch sph fch le le diaper stanton le diaper cls july char count 
comparing task models techniques added van van der veer including user action notation decomposition basic tasks 
attractive feature gta capability representing cooperative tasks groupware 
representation done integrating role concept task world enabling representation tasks sets role responsible organizational aspects role assigned different agents 
ontology defined gta improves conceptualization task world representation adequate formalism 
instance goals actions represented attributes task concepts 
somewhat inconsistent fact gta allows goal reached ways 
action tasks actions better represented main concept 
way object manipulation represented relationship actions objects tasks objects 
actions depend operational conditions different objects different actions may needed 
task trigger 
software tool supporting gta allows specification constructors way similar mad 
mad parent child constructors may lead artificial tasks satisfy temporal constraints 
concurtasktrees ctt concurtasktrees ctt model developed patern chap 
concepts tasks objects actions operators roles fig 

ctt constructors termed operators link sibling tasks level decomposition 
respect ctt differs previously described models operators act parent children relationships 
important note ctt formal definition temporal operators 
addition ctt provides means describe cooperative tasks 
describe task task model composed different task trees cooperative part role involved task 
tasks decomposed level basic tasks defined tasks decomposed 
actions objects specified basic task 
objects perceivable objects application objects 
application objects mapped perceivable objects order user 
interesting feature ctt input actions output actions associated object specified 
object specification mainly directed specification interaction objects interactors 
modification ctt add concept platform order support user interface development 
task associated temporal relationship constrains constructor constr symbol constr semantics constrained task task id task name task type task category task frequency task duration task description task precondition task postcondition task id task id parent child decomposition hierarchic level responsible role role id role name id role id object action object name action name manipulates manipulated object type action type manipulation object class id action name object access mode id object name fig 

ctt task meta model 
fch sph fch le le diaper stanton le diaper cls july char count limbourg vanderdonckt parent decomposition operator type task task name task goal task id priority optional task type task modality task centrality initial state final state precondition postcondition child constrained involves constraining parameter involvement manipulates manipulation constraints involved manipulated constructor constr name const semantics user status role task experience skills object class name class number attributes fig 

mad task meta model 
subclass metaclass previously defined platform descriptions 
views task model obtained filtering model respect platforms 
ctt uses tool building task model specifies tasks roles objects creates task hierarchy temporal operators 
de description de ches mad de description de ches mad see 
provides object oriented task specifications support design phases 
main concepts mad task constructor user objects fig 

task structure concept implicitly represented decomposition relationship relationship constructor entity 
gta tasks divided broad categories elementary tasks composite tasks 
elementary tasks tasks decomposed 
elementary task contains direct domain objects manipulated task 
composite task decomposed children tasks different operators belonging categories synchronization operators sequence parallelism simultaneity ordering operators xor temporal operators duration auxiliary operators elementary unknown 
elementary task specified elementary auxiliary operator task decomposition terminated specified unknown operator 
mad task composite elementary characterized attributes name goal identifier task means third fifth subtask second task priority indicating tasks optional character specification indicating task interrupted type sensorimotor cognitive modality manual automatic interactive degree centrality important somewhat important secondary 
initial state specifies state world prior execution task 
final state specifies state world task execution 
goal consists object modifications agent wants achieve 
goal attached task attribute goal reached accomplishing different tasks 
fact motivated putting goal concept entity type 
fch sph fch le le diaper stanton le diaper cls july char count 
comparing task models precondition set assertions constraining initial state 
assertions satisfied prior execution chosen task 
preconditions classified sufficient conditions necessary sufficient conditions 
postcondition set assertions constraining final state 
postcondition satisfied execution task 
task linked user responsible carrying task objects manipulated task 
mad supported task editor allows analysts input manipulate model 
task knowledge structure tks model known task knowledge structure tks method johnson johnson chap 
analysts manipulate tks conceptual representation knowledge person stored memory particular task fig 

tks associated task agent user performs 
tasks agent charge determined role agent presumed assume 
role defined particular set tasks agent responsible performing part duty particular social context 
agent take roles role taken agents 
tasks may similar different roles typing letter secretary manager considered different 
similarity relationship aimed represent situation 
tks task holds information task goal state affairs task intended produce 
particular goal accomplished particular task 
goal decomposed goal substructure contains intermediate subgoals needed achieve 
goal task hierarchies represented fig 
overlapping substructures decomposing goal subgoals second decomposing tasks subtasks 
subgoal goal structure corresponding subtask task structure vice versa 
structure composed task decomposition temporal causal relationship mechanisms constructors 
constructors operate tasks association goals 
goal reached different subgoal sequencing 
leads concept plan 
plan particular arrangement set subgoals procedures achieving particular goal 
models actions objects lowest level task analysis 
constructor constr symbol constr semantics goal goal name goal description parent child goal decomposition hierarchic level constrains temporal constraint accomplished accomplishing plans plan plan name plan description task similarity similar similar parent child operationalized task decomposition hierarchic level accomplishes responsibility constrained task responsible role task name responsibility role name representativeness operationalization operationalizes procedure procedure name procedure description specifies manipulation object typicality object centrality manipulates manipulated fig 

tks task meta model 
action action name action type object decomposition parent child object object name played playing appointment plays agent agent name fch sph fch le le diaper stanton le diaper cls july char count limbourg vanderdonckt event event name event location data data name data length data type precedence precedence duration precedence type chain rule temporally conditions condition condition type condition code semantically conditions preceded precedes conditioned workstation workstation id workstation type operation operation name operation type operation mode triggering mode operation status trig counter constr counter parent child operation decomposition hierarchic level executed dedication execution presentation fig 

diane task meta model 
goal dedicated goal name goal type executes presents fulfilled fulfillment fulfills procedure owner name procedure type procedure name widget widget name constituents procedures operationalize subtasks 
procedures linked subtask 
tks method proposes production rule system choosing appropriate procedures context 
actions directly related task tree form leaf level 
actions objects properties interest 
central execution task typical instances 
example centrality typicality object action expressed respect task procedure operationalizes object action 
note objects structured decomposition hierarchy 
diane important points way diane fig 
models task chap 

procedures describe characteristics specific application include standard actions common applications quit cancel 
assumes supposed standard actions previously defined really apply application interest 
standard action apply indicated 

described procedures mandatory forbidden allowed 
note diane represent constraints specifications 
algorithmic structures exist diane ordered sequence unordered sequence loop required choice free choice parallelism default operations 
method usability engineering muse method usability engineering muse structured human factors method aimed helping designers consider human factors development interactive software lim long 
muse consists major phases information elicitation analysis design synthesis design specification 
method initiated analysis extant system results extant task model 
model progressively transformed augmented eventually interface model display design reached phase 
fch sph fch le le diaper stanton le diaper cls july char count organization organizational name assignment assigned constructor constr symbol constr semantics goal decomposition parent child constrains temporal relation 
comparing task models constrained alignment alignment type aligned job task job id job description involves involved goal goal name initial state final state accomplished accomplishing accomplishes task name termination event situational condition posit construct quit construct plan procedures strategies number units responsible responsibility involved role responsibility role name parent child role description performs function involved performed function name function hierarchy function allocation task decomposition construct type construct parameters fig 

muse task meta model 
object object name operated operation operates action action name task model described task hierarchies covering concepts 
top hierarchy organization may conceptualized decomposed subsystems called jobs fig 

job may involve components 
goal hierarchy main goal assigned job recursively decomposed subgoals subgoals 
main goal job describes related subsystem transformation initial state final state 

role list roles assigned job enumerated 

function list specific functions required perform role gathered 
function may allocated human system 
role function appearing function lists associated task hierarchically decomposed subtasks level actions objects 
task detailed termination event situational condition 
detection unacceptable situational conditions may serve shortcut terminating path task tree 
constructs describe uncertain events may occur task carried 
number units describes task multiple instance task carried times 
graphical representation muse task model purely hierarchical single action composing multiple tasks single object operated multiple actions may reproduced 
constructs related task decomposition potentially requiring parameters sequence hierarchy selection iteration concurrency interleaving multiplicity posit quit 
presents concepts involved task modeling right part core component leading refined task models lim long 
task object oriented description task object oriented description consists object oriented method modeling tasks domain control processes complex interactive systems air traffic control chap 

method consists fch sph fch le le diaper stanton le diaper cls july char count limbourg vanderdonckt task body logical constructor composed composes specified constrained requires reacts specification constraining requirement reacting specifies constrains required collaboration specifies reaction trigger formal trig event informal trig event resource resource type collaborates task task name task id task goal task type task level input transition specified initialization priority function completion function consistency function emitting que collaboration specifies initial state input data data type amount components specified termination output transition role completion function specifies final state output data data type reaction physical result cognitive result fig 

task meta model 
condition contextual cond aggregation aggregation aggregates descriptor object object name object behaviour steps hierarchical decomposition tasks identification descriptor objects world objects definition elementary control tasks integration concurrency fig 

task treated instance task class identified name identifier characterized goal type human automatic interactive cooperative level hierarchy total amount task components 
task body represents task hierarchy organized logical constructors xor 
task associated task control structure tcs classes descriptor objects consumed task carried aggregated 
triggering class types events formal informal events events occuring outside inside system 

condition class contains contextual conditions governing performance task 

resource class describes resources human system required task performed 

input data class specifies information items required performance task 
initialize task input transition expresses logical conditions data sending rules benefits various checking functions ensure conditions required perform task fulfilled 
instance completeness function checks input data available satisfy related constraints 

output data class specifies information items produced task performance 
terminate task output transition expresses logical conditions data synchronization rules benefits various checking functions 

reaction class describes physical cognitive results resulting task performance 
combination descriptor objects covers task hierarchy temporal ordering 
supported graphical editor allowing analysts specify instances task classes instances related classes 
fch sph fch le le diaper stanton le diaper cls july char count 
comparing task models task models analysed previous sections exhibit variety concepts relationships 
differences concepts syntactic semantic 
syntactic differences syntactic differences include differences vocabulary concept models 
notable syntactic differences summed table 
comparison model features task planning task related high level goal planned operationalization capacity extent method provides ways map high level goals low level ways reaching lowest task decomposition level leaf node task decomposition operational level task decomposition level actions take place 
observed table similar different terms refer concepts 
example plan operator constructor goal discussing high level task planning 
models provide task decomposition structurally temporally necessarily describe decomposition effectively carried 
instance scenario frequently considered particular instantiation general task model depends particular circumstances context 
rows describe task recursively decomposed subtasks leaf nodes 
models terminological distinction different levels decomposition 
hand goms gta ctt muse separate nonterminal level decomposition leaf nodes usually bear special name action 
semantic differences semantic differences related conceptual variation models 
semantic differences major minor importance 
major importance differences entity relationship definitions coverage cases concept defined way models 
consequential variation entity relationship expressed 
example constructors gta mad tks express temporal relationship task subtasks set constructors identical models operators ctt sibling tasks 
operators goms dual semantics specify actions cognitive motor performed user syntactic constructions language control task flow similar programming language 
table compares task models dimensions discipline origin 
discipline origin impact concepts particular model 
particular hta goms deeply rooted cognitive analysis 
models rooted cognitive psychology related disciplines focus cognitive concepts avoid software artifacts software engineering models reverse 
formalization 
dimension specifies model formal system 
instance ctt temporal operators chap 
defined process algebra chap 
contains mathematical definitions transitions task layer maps chap 
formal basis 
collaborative aspects 
order describe cooperative aspects models role concept 
role defined tasks role responsible 
roles played agents fch sph fch le le diaper stanton le diaper cls july char count table main task model features hta goms gta ctt mad tks diane muse task planning plans operators constructors operators constructors plans constructors goals input output goals transitions constructors operationalization methods scenarios pre procedures procedures selection rules postconditions task tree leaves unit tasks basic tasks basic tasks actions actions operational level tasks operators actions system actions tasks operations task task operations fch sph fch le le diaper stanton le diaper cls july char count table main semantic variations models collaborative context cognitive system scope manipulated origin formalisation aspects variation aspects response constructors objects hta cognitive analysis usability problems parent task object goms cognitive analysis user performance multiple levels task object gta ethnography cognitive roles agents user performance parent object analysis cscw ctt software engineering roles platforms sibling detailed task objects cooperative parts tks cognitive analysis roles agents user knowledge structures multiple levels detailed task objects software engineering mad psychology parent detailed task objects diane process control devices sibling object software engineering process control expressed cognitive result sibling resource input data transitions reaction output data muse software engineering parent object human factors note 
supported unsupported 
fch sph fch le le diaper stanton le diaper cls july char count limbourg vanderdonckt assigned organizational rules 
represented task trees constructed performing task decompositions 
case cooperative role task hierarchy represents cooperative part activity 
user interface designed role distinction task decomposition useful user interface design coordinating computer supported cooperative 
context variation 
user community number computing platforms working environments increasing context sensitive user interfaces important support task variations resulting differences contexts 
importance various external elements varies system 
approaches place emphasis context tks gta degree ctt 
instance users characteristics organization computing platform physical environment taken consideration develop usable system 
worth noting task models modified enable characterize aspects relevant context sensitivity 
instance unified design method introduced mechanism polymorphic task models integrate variations resulted consideration different design alternatives alternatives resulted addressing needs categories users different contexts 
similarly ctt extended particular subtasks selected conditions resulting context variations patern santoro 
idea conditional subtrees leads identification formal definition context dependent context independent partially context independent decompositions limbourg vanderdonckt 
cognitive aspects 
dimension concerns incorporation support cognitive aspects modeling activities 
system response 
dimension determines semantic functions technical system identified embodied modeling 
models remain open distinguishing type sub task hta effectively pursue goal diane 
scope constructors 
dimension expresses scope task elements temporal operators 
scope parent sibling temporal operator constraint affects ordering respectively father node task decomposition children hta siblings father ctt 
scope goes levels task hierarchy case multiple levels may required expressed temporal ordering 
manipulated objects 
task model intended represent particular task carried particular user stereotype certain context domain model frequently refer domain objects task objects manipulated sub task level decomposition 
task models explicitly embody information prefer establish link task model domain model 
may cover entities interest ctt relationships 
common properties concepts critical task design user interface 
goal task hierarchies essential 
second operators express temporal constraints tasks 
third minimal requirement dealing cooperative aspects role specification fch sph fch le le diaper stanton le diaper cls july char count 
comparing task models terms tasks 
fourth objects actions performed possible detailed modeling presentation dialog user interface 
details provided limbourg vanderdonckt 
model usage hta mainly intended means training people interface 
plans attractive precise informal subject proof verification model checking 
plans typically describe temporal constraints procedural way 
adding new tasks means rewriting plans associated higher level task may tedious lead errors 
plans suitable early task analysis information elicited informal unambiguous way provide kind representation able support computer aided derivation user interface model 
goms models assume user interface 
explicit task decomposition hierarchical organization methods operationalize tasks 
cognitive analysis goms done unit task level requires different levels specification depending level detail desired analyst 
goms built lowest level task decomposition provides support user interface modeling 
objective optimize user performance evaluate execution time memory workload learning time early design process 
concepts closely related user modeling task modeling 
gta especially specifying delegation mechanisms roles 
tks uses plans procedures similar way hta uses plans goms uses selection rules methods 
methods procedures useful achieving detailed specification elementary task need describe actions performed objects 
models declarative procedural order support successive transforms suitable computer tools eisenstein vanderdonckt puerta 
task models primarily intended support evaluation user training hta goms suitable supporting user interface modeling 
models require initial design interface usability focus improving 
expressiveness versus complexity fig 
shows task models increasingly complex progressively expressive express different facets task modeling task decomposition 
hta mad located left continuum complexity hta goms mad muse gta tks ctt diane equations expressiveness fig 

expressiveness versus complexity task models 
fch sph fch le le diaper stanton le diaper cls july char count limbourg vanderdonckt basically restricted decomposing tasks subtasks temporal operators 
successive models refine temporal relationships pre postconditions muse data types axioms tks lotos operators ctt order logical predicates diane mathematical functions mathematical equations 
right side continuum ends task model regulates temporal ordering means set mathematical equations linear nonlinear 
method considered expressive mathematical equations general complex solving set nonlinear possibly conflicting equations nontrivial problem 
acknowledgments greatly helped comparison task models cristina hilary johnson peter johnson kim young lim john long paris fabio patern dominique neville stanton dimitri jean claude van der veer 
appendix overview entity relationship attribute model figures metamodels compared chapter notation entity relationship attribute era model 
model relies understanding relationship entity 
example model fig 
graphically depicts ownership vehicles persons 
reading model left right represents statement owner may vehicles reading right left represents statement vehicle owned owners era uses rectangle graphically depict entity hexagon relationship entities 
relationship said cyclic relationship entity source destination 
entity relationship attributes 
instance owner may characterized attributes number identity card name name address 
attribute underlined identifier attribute values remain unique instance entity 
connectivity specifies instances entity associated single instance entity relationship 
example owner may vehicles simultaneously vehicle owned owners 
facilitate reading role added part relationship 
entity name relationship name owns owned owner ownership vehicle card number firstname lastname address identifier attribute name connectivity role name frame number model version year fig 

overview entity relationship attribute model 
fch sph fch le le diaper stanton le diaper cls july char count 
comparing task models cunningham mathias jones 

method measuring team skills 
ergonomics 
duncan 

task analysis training design 
occupational psychology 


diane method 
vanderdonckt ed computer aided design user interfaces pp 

namur belgium presses de namur 
john byrne 

comparison tools building goms models tools design 
proceedings acm conference human factors computing systems chi vol 
pp 

new york acm press 
beard smith 

direct manipulation tool simple goms models 
proceedings acm conference human factors computing systems chi vol 
pp 

new york acm press 


task dialogue task user interface design 
sigchi bulletin 


tool support task user interface design 
chi workshop 
sigchi bulletin 
available www uni paderborn de cs ag chi ws card moran newell 

psychology human computer interaction 
hillsdale nj lawrence erlbaum associates 
diaper 

task analysis human computer interaction 
chichester england ellis horwood 
diaper 

task analysis knowledge descriptions method examples 
diaper ed task analysis human computer interaction pp 

chichester england ellis horwood 


precise descriptions temporal relations task models 
patern eds proceedings seventh international workshop design specification verification interactive systems dsv lecture notes computer science vol 
pp 

berlin springer verlag 
eisenstein vanderdonckt puerta 

model user interface development techniques mobile computing 
lester ed proceedings acm international conference intelligent user interfaces iui pp 

new york acm press 

editing mad task descriptions specifying user interfaces semantic presentation levels 
harrison torres eds proceedings fourth international workshop design specification verification interactive systems dsv pp 

berlin springer verlag 


user task analysis interface design 
new york wiley 
john kieras 

goms family user interface analysis techniques comparison contrast 
acm transactions computer human interaction 
johnson 

human computer interaction psychology task analysis software engineering 
london mcgraw hill 
johnson diaper long 

tasks skill knowledge task analysis knowledge descriptions 
proceedings ifip conference human computer interaction interact vol 
pp 

north holland elsevier science publishers 
johnson johnson 

knowledge analysis task task analysis specification human computer systems 
ed engineering human computer interface pp 

london mcgraw hill 
kieras wood hornof 

glean computer tool rapid goms model usability evaluation user interface designs 
proceedings acm symposium user interface software technology uist pp 

new york acm press 
ainsworth 

guide task analysis 
london taylor francis 
lewis rieman 

task centered user interface design practical 
available www acm org perlman html chap lim long 

muse method usability engineering 
cambridge cambridge university press 
lim long 

structured task analysis instantiation muse method usability engineering 
interacting computers 
limbourg vanderdonckt 

task models model approach 
johnson ed proceedings eighth international workshop design specification verification interactive systems dsv vol 
pp 

berlin verlag 
lu paris vander linden 

automatic generation task models object oriented diagrams 
proceedings seventh ifip working conference engineering human computer interaction pp 
xxx 
netherlands kluwer academic 


formal specifications user tasks automatic generation hci specifications 
blandford vanderdonckt gray eds people computers xv pp 

london springer 
fch sph fch le le diaper stanton le diaper cls july char count limbourg vanderdonckt patern 

model design evaluation interactive applications 
berlin springer verlag 
patern santoro 

model interfaces 
vanderdonckt eds proceedings fourth international conference computer aided design user interfaces pp 

dordrecht kluwer academics 
payne green 

task action grammars model mental representation task languages 
human computer interaction 


unified user interface design method 
ed user interfaces pp 

mahwah nj lawrence erlbaum associates 


analyse des ches aide la conception approche mad 
ed analyse conception de ihm interaction machine pour les syst mes information vol 
pp 

paris edition herm 

method task description mad 
eds proceedings display units pp 

north holland elsevier science 
shepherd 

analysis training information technology tasks 
diaper ed task analysis human computer interaction pp 

chichester england ellis horwood 
shepherd 

task analysis framework examining hci tasks 
monk gilbert eds perspectives hci diverse approaches pp 

london academic press 
smith neill 

task analysis exploiting task models application implementation 
proceedings acm conference human aspects computing systems chi vol 
pp 

new york acm press 
limbourg vanderdonckt 

task modelling multiple contexts 
limbourg urban vanderdonckt eds proceedings ninth international workshop design specification verification interactive systems dsv vol 
pp 

berlin springer verlag 
stanton young 

utility eye 
study ergonomics methods 
applied ergonomics 
sutcliffe 

task analysis systems analysis design symbiosis synthesis 
interacting computers 
tauber 

etag extended task action grammar language description user task language 
diaper gilmore cockton shackel eds proceedings rd ifip tc conference human computer interaction interact pp 
amsterdam elsevier 
th 

adaptation en interaction machine le cas de la 
unpublished doctoral dissertation universit joseph fourier grenoble france 
van der veer van der 

gta groupware task analysis modeling acta psychological 
van van der veer 

tools support analyzing cooperative environments 
green bannon warren eds cognition operation pp 

inria 
van van der veer eli ns 

ontology task world models 
markopoulos johnson eds proceedings fifth international workshop design specification verification interactive systems dsv pp 

vienna springer verlag 
wilson johnson 

bridging generation gap tasks user interface designs 
vanderdonckt ed computer aided design user interfaces pp 

namur belgium presses de namur 
