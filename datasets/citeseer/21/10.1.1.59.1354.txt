stuart staniford networks top speed flash worms david moore caida flash worms follow precomputed spread tree prior knowledge systems vulnerable worm exploit 
previous suggested flash worm saturate vulnerable hosts internet seconds :10.1.1.160.6250
grossly estimated 
revisit problem context single packet udp worms inspired slammer witty 
simulating flash version slammer calibrated current internet latency measurements observed worm packet delivery rates show worm saturate vulnerable hosts internet milliseconds 
similar worm tcp service saturate seconds 
speeds achieved flat infection trees packets sent line rates 
worms vulnerable proposed worm containment techniques 
avoid flash worms slow deeper narrower trees 
explore resilience spread trees list vulnerable addresses inaccurate 
explore implications flash worms containment defenses defenses correlate information multiple sites order detect worm speed worm defeat correlation certain fraction traffic artificially delayed case proves worm 
categories subject descriptors security protection invasive software general terms security email stuart com email caida org email vern icir org email icsi berkeley edu permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
worm october washington dc usa copyright acm 
vern paxson icsi keywords nicholas weaver icsi worms simulation modeling flash worm 
code red july worms great interest security research community 
worms spread fast existing signature anti virus intrusion prevention defenses risk irrelevant signatures manually generated fast 
effort gone analyzing dynamics worm spread designing automated worm containment mechanisms :10.1.1.1.5558
effort directed random scanning worms worm instance finds victims guessing random internet addresses attacking address 
scanning worms subset known worm spread algorithms 
premise flash worm worm releaser acquired list vulnerable addresses stealthy scanning target address space obtaining database parties vulnerable protocol 
worm releaser advance computes efficient spread tree encodes worm 
allows worm far efficient scanning worm large numbers wild guesses successful infection 
successfully infects attempts 
vulnerable containment defenses looking missed connections connections :10.1.1.1.5558
flash worms reported wild interest reasons flash worms fastest possible worms may created someday worm writers needing control vulnerable population extreme speed line nature spread map computation flash worms useful thought experiment exploring worst case performance containment defenses 
spread map adjusted difficult defense worm efficient possible constraint 
speed flash worms affected variables 
worm tree way meaning instance infects hosts number generations infect vulnerable hosts log 
total infection time bounded number multiplied time required infect generation 
complex issues arise large list addresses delivered initial nodes may significant con straint speed 
analysis flash design looks tree shape means address distribution 
difficulty flash worm releaser lack robustness list vulnerable addresses imperfect 
assembled advance networks constantly change list date time 
effects 
firstly certain proportion vulnerable reachable machines may list preventing worm saturating fully possible 
seriously addresses list may vulnerable 
nodes near base spread tree may prevent large numbers vulnerable machines infected worm 
deep spread trees particularly prone 
thinking flash worms need explore issue robustness speed 
rest explore section flash worms fast light knowledge worms estimate speed worms releasing 
derive performance estimates quoted 
section study effect fraction invulnerable systems included spread tree mistake 
describe ways making flash worms robust explore effectiveness 
section look interaction flash worms worm containment systems 
exploring small amount related section conclude section 
design fast flash worms earlier performed simple analysis layer way spread tree kb worm :10.1.1.160.6250
estimated generation time seconds utilization kbps link giving total infection time seconds 
parameter space flash worms larger scenario 
particular size worm constrains quickly distributed tradeoffs tree design 
shallow tree risks early nodes bottleneck making deeper increases number generations required 
slows worm resilient errors 
lessons slammer witty slammer worm january fastest scanning worm date far close lower bound size worm 
data observed slammer infections similar witty worm provide estimates packet rate minimum code size flash worms 
slammer infected microsoft sql server 
single udp packet served exploit worm required acknowledgment 
size data bytes giving byte ip packet 
consisted sections ip header udp header data overflow buffer gain control code find addresses needed functions 
code initialize udp socket code seed pseudo random number generator code generate random address code copy worm address socket difficult see worm smaller 
functionality essential way shrink worm tighten instructions implement 
hard see worm emit packets faster 
minimal code loop generate new address send packet 
particularly interesting see fast slammer emitted packets practice 
access datasets outbound packet traces active slammer infections national laboratory infections large university campus infections 
histogram packet rates shown 
average speed slammer hosts packets second pps 
proportion bin slammer host speed thousands pps distribution speeds outbound slammer infections 
histogram bins pps wide center value shown axis 
systematic problems distribution 
firstly data come sites representative 
obviously sites larger bandwidth average site 
additionally observations independent share uplink bandwidth infections site 
reader wonder don study distribution inbound scanning rates slammer infections scaling rates ratio total internet address space address space observing sites 
reason slammer random number generator flawed complex system dependent cycle structure making difficult extrapolate observations site internet 
data set problem witty worm single packet udp scanning worm infected iss intrusion detection systems march uniform random number generator 
described detail representative hour period witty infection chosen observed scan rate hour measured infected host 
observations ucsd caida network telescope sending rate estimated scaling observed rate inverse fraction address space monitored 
shows cumulative distribution function estimated sending rates 
distribution pps pps 
average size witty packet bytes corresponds kbps kbps typical broadband speeds 
cumulative percentage packets second cumulative distribution packet rates witty infected addresses 
estimates udp flash worm witty hosts show larger range speeds slammer hosts noting doubled size witty packets 
connected sites outbound slammer data represent upper speed distribution 
interested top speed flash worms 
assume attacker sophisticated estimate bandwidth advance known techniques pick fast sites 
assumption flash worms draw critical internal nodes spread tree top witty speed distribution speed scaled linearly packet size 
point data occurs pps mbps 
slammer packet size bytes pps 
key issue single packet flash worm design time successive packets fast host small compared time cross internet 
global internet latency distribution shown 
comes round trip time rtt measurements caida skitter datasets 
observations geographically diverse measurement boxes globally distributed destinations entire month february 
rtt measurements period 
monitors divided geographic regions asia north america west north america east europe 
monitors region rtt distributions similar combined produce single rtt distribution region 
probed destinations geographically diverse distributions represent expected latencies host region reach random host internet 
compute distribution representing latencies arbitrary hosts averaged regional distributions prevalence hosts region 
publicly routed ipv addresses regions weight 
halved rtt measurements give way latencies 
checked exact weighting regions grossly change shape distribution 
mean latency distribution ms corresponding average packets issued pps arrives 
motivates design flash infection tree percentage ms bin packet traversal time ms histogram globally averaged internet latencies february determined caida skitter infrastructure 
see text details 
shallow broad 
furthermore attacker control initial node worm launched 
host unusually high capacity deliver network packets located site excellent connectivity internet 
assume initial node deliver mbps worm ip packets gbps link little slammer sized packets second 
assume target vulnerable population hosts somewhat larger infected code red 
second initial host directly infect generation roughly intermediate nodes leaving hosts infect saturate population 
need third layer tree 
implies address list intermediate hosts fit packet worm addresses consumes bytes 
flash version slammer need slightly different original address list nodes infected carried immediately code final loop traverse list sending packets infect generating pseudo random addresses 
optimize design assuming fixed constant latency taken average measured latency ms fixed constant bandwidth intermediate nodes bytes second taken mbps point witty distribution initial node bandwidth bytes second mbps discussed 
length worm fixed number addresses supplied node 
intermediate nodes na total infection time ti aw assuming secondary nodes get sent worm zero length address list 
curve shown 
optimum secondary node address list length 
se attacker may need install special packet drivers compromised server achieve performance 
total infection time sec address list length estimated speed infect hosts assuming constant latency ms initial node available bandwidth mbps fixed secondary node bandwidth mbps 
worm assumed bytes bytes address graph plots total infection time versus globally fixed secondary address list size 
quel study worm secondary nodes infecting addresses total 
initial packets bytes mbps delivered little better pps 
initial node place different address lists copy worm code little complex releaser build special worm injector node 
copy base worm full address list bytes size copy relevant parts address list copy worm sending 
initial code give earlier secondary nodes address list turns useful simulating udp flash worm speed analysis previous section crude issues internet latency secondary node bandwidth picks average value drawing broad distribution 
better developed monte carlo simulator 
models detail time taken stage worm linear delay th packet issued initial node 
stochastic delay packet travel initial node intermediate node delay associated stochastically picked rate packet issue intermediate node 
stochastic latency packet travel intermediate node leaf node 
latency distribution skitter data distribution packet rates upper percentiles witty data 
cases independent picks distributions question 
scope optimize worm latency topology internet latency data points internet points assess optimizations 
reasonable suppose optimization speed worm little 
results spread tree shown cumulative distribution function machine infection time versions worm different random seeds 
graph indicates clearly flash worms extraordinarily fast infecting hosts ms 
long tail due long tail internet latency data parts internet poorly connected take seconds reach 
cumulative fraction infected time seconds proportion hosts compromised fastest udp worm different times averaged simulation runs 
note worm limited congestion internet core 
hosts producing mbps plus total bandwidth required worm gbps small scale internet compares favorably gbps peak bandwidth usage slammer 
tcp flash worms results extended tcp services 
results grave tcp offers worm writers wealth additional services exploit 
section explore issues 
conclude top speed propagation viable tcp worms cost extra round trip latency establish connection double bandwidth want quickly recover loss 
provide reliable data delivery tcp requires complex network interaction 
affects requiring extra round trip time establish connection 
true target tcp receiver employs poor initial sequence numbers providing guess sequence number completely blind fashion 
worm send additional byte packets initial syn acknowledgment receiver syn ack 
principle bundled data worm sends may tcps require separate ack complete handshake 
assume initial window offered target tcp receiver packets 
varies internet take fixed assuming worm targeting particular vulnerable operating system service 
reality expressed bytes usually ranging kb kb full sized packets ease discussion 
assume transmitting worm requires full sized packets 
divide discussion categories small worms large worms small worms fit entirely receiver initial offered window establishing connection immediately send packets en masse keeping state 
worm receives syn ack derive sequence numbers needed transmit entire worm 
large worms keep state worm knows sequence numbers transmitting initial flight 
avoided transmitting go packet round trip cost major loss performance 
absence packet loss sender get away having data flight receiver advertised window 
long data streams receiver order receiver processes quickly window continue advance data arrives 
possible try send large worm fashion small worm 
trick fails badly presence packet loss window cease advance loss amplified excess packets discarded delivery 
recovery packet loss affect worm speed 
suppose model packet loss independent occurring probability constant 
probability worm requires retransmission example worms require retransmission 
simply tolerate attrition take steps recover 
simple step just send worm twice tcp receiver readily tolerate 
lower probability segment successfully received falls 
maximum sized packets bytes kb packets transmit packets risking packet loss amplified packets arriving outside window 
case worms require retransmission retransmitting en masse leads propagation failure tolerable 
significantly higher values second case significantly lower sending en masse recovering redundant transmission turns favorable 
case need adapt complex schemes timer driven retransmission queue slow worm propagation 
alternatively worm may better resiliency mechanisms discussed section tolerating errors initial vulnerable address list 
leave analysis note tens kb ample budget build effective tcp worm bootstrap additional functionality 
code red kb nimda kb 
believe values fairly plausible today internet worms 
final issue large worms concerns rate worm transmits packets 
absence ack clocking provided tcp slow start direct guidance sender order balance filling transmission pipe avoiding intermediary buffers 
sender round robin set current connections gross simplification realistic model incorporating bursty heterogeneous loss rates scope 
way spatially spreading traffic transmits avoid stressing particular path path internet core 
believe tcp worm written larger slammer 
addition bytes needs ioctl calls set low level socket send crafted syn packets set separate thread listen syn acks send copies worm 
estimate bytes total 
worm send syns line rate confident syn acks come back slower due latency spread 
initial node maintain big buffer syn acks secondary nodes send small number syns 
limited latency syn acks returning small amount time required deliver worms respective line rates 
estimate performance small tcp flash worm repeated monte carlo simulation performed udp worm latency increased factor handshake outbound delivery rates adjusted byte syn packets 
results shown 
simulation predicts compromise compromise 
tcp flash worms little slower udp ones handshake latency fast 
proportion compromised time seconds proportion hosts compromised fast tcp worm function time 

resilience imperfect maps flash worm uses imperfect list vulnerable addresses 
happen reasons 
unreliable diagnostic procedure decide hosts vulnerable list contain errors 
perfect diagnostic procedure list grow date machines patched reconfigured restored old media 
older list errors 
kinds list errors false negative address list fact reachable vulnerable address false positive address list really vulnerable 
effect false negatives simple 
proportion vulnerable addresses false negatives flash worm saturate proportion addresses compromised ideal circumstances worm releaser 
spread worm unaffected don consider false negatives 
effect false positives significant key nodes high spread tree may invulnerable causing entire subtree node remain uninfected 
rest section analyze quantitatively impact flash worm discuss 
modeling flash worm resilience assume fraction addresses list invulnerable nodes equally false positives 
take initial node infected outset complete certainty attacker choose different initial node 
consider worm spread tree branching factors ith level ki 
imax branching leaf nodes 
earlier simulated design 
want compute probability node ends uninfected 
worm releaser small possible network defenders prefer large value 
node remain uninfected ancestor tree invulnerable invulnerable 
put thing way get infected node vulnerable 
node level probability failing infected governed find aggregate average tree levels imax earlier example equation plotted seen errors broad shallow tree serious doubling infection failures invulnerable hosts 
list somewhat reasonable quality worm 
similarly kind worm tolerate modest rates packet loss failing 
failures serious deep narrow trees 
consider binary tree levels including level zero cause infection total size excluding initial node 
polynomial arises equation large reproduce plot infection failure rate function rate 
clearly binary tree fragile percent list errors greatly lowering worm success rate invulnerable machines causing near total failure worm 
reason average host infected layers spread tree successfully executed infections chances layers having error excellent list rate significant 
main point binary flash tree mechanism tolerate errors fragile useful 
kj infection failure rate rate proportion uninfected addresses vs proportion invulnerable addresses tree 
infection failure rate rate proportion uninfected addresses vs proportion invulnerable addresses level binary tree 
resilient flash worms worm writer tools flash worms resilient 
add acknowledgments worm nodes realize children get infected take corrective action 
second add redundancy infection tree dag result path fails available tree pruned 
case shallow fast flash worms mild fragility false positives suffer solved readily acknowledgments 
issue need addressing possibility intermediate nodes invulnerable leaf node invulnerable worm accept fact list truly vulnerable hosts smaller realized 
acknowledgments achieved simply adding initial node list addresses intermediate node worm 
cause copy worm sent back intermediate worm done 
total downstream bandwidth required upstream bandwidth needed send worms originally acknowledgments address lists 
code initial node need extra thread receive collate worm copies limited overlap time sending ou 
worms time receiving cause problem 
acknowledgment received short time initial node substitute different address original node 
note worms intermediate nodes need special code creating acknowledgments just address send worm handling acknowledgments leaf nodes acknowledge 
deeper infection trees issues complex 
acknowledgments require intermediate worm nodes multi threaded order garner acknowledgments efficiently slow greatly waiting acknowledgment infection attempt 
may simpler certainly faster worm double infect 
simple robust 
example binary tree way level node infects descendants sends worm copies descendants sibling just case sibling turned invulnerable 
sibling reverse 
illustrated 
effect portion tree fail siblings invulnerable prevent tree infected 
analyze effect think node level get infected path infection tree level 
probability fail vulnerable just 
paths level 
blocked probability turns higher levels paths level 
reader may surprised staring apparent node parents links level parents siblings siblings get infected nodes links collapse grandparents indefinitely 
chance node failing infected scheme doubling worm delivery resilience 
node infects children sibling children case sibling get infected 
levels 
averaging levels imax imax resilience plot doubled flash worm shown 
seen performance better single tree design examined 
case just percent defects target list caused near complete loss infection rate 
doubling significant loss catastrophic 
defects list worm saturates half total 
doubling intolerable situation worm writer tolerable excellent list need fairly clean 
independent way trees approach resilience note way tree non leaf nodes fraction total nodes 

different sets internal nodes completely independent sense nodes internal node tree appear leaves trees 
start flash worm multiple independent trees simultaneously increases resilience possibility failure tree causing failure tree 
price code complexity worm leaf node listen possible new worms extract infect address list broad variation internet appear necessarily true way trees 
complex schemes doubling possible siblings mix match reinforce 
cases appears allow paths level nodes 
fully explored situation broader trees 
infection failure rate rate proportion uninfected addresses vs proportion invulnerable addresses level binary tree doubling depicted 
contrasted showed resilience level binary tree doubling 
latencies means tree infect leaf nodes trees finished infecting internal nodes 
failure rate trees computed follows 
paths node 
node uninfected probability invulnerable invulnerable multiply path reaches vulnerable nodes 
probabilities paths blocked combined multiplicatively independent 
paths length imax node leaf respect trees 
probability blockage cases imax case shorter node internal level tree get average weighted size level 
putting imax imax compared designs layer way trees hosts layer way trees hosts layer way trees hosts layer way trees hosts layer way trees hosts layer way trees summarizes resilience designs 
obviously independent trees fragile design infection failure rate rate way way way way way way proportion uninfected addresses vs proportion invulnerable addresses independent way trees 
surprising independent trees doesn doubling scheme covered previous section get independent trees better rates 
believe independent trees takes host infected invulnerable node paths host unique path independent trees 
doubling paths host level cross level effectively paths node level independent 
prevent infection level node requires invulnerable machines level tree node 
doubling resilient independent trees 
approach may increase bandwidth significantly single packet udp worms 
worm successful infection transfer entire worm body subsequent infections transfer hitlist 
additional bandwidth cost tree worm times transfers hitlist additional transfers worm body 
tcp worm syn ack new infection attempt carry information worm needed hit list 
single packet udp worms hitlist flight known need way trees increase total bandwidth demand factor likewise approach slow worm 
offers faster infection tree conventional binary flash worm appearance infection trees system compromised offering benefit shallower worm 
worm somewhat vulnerable detection turn 

avoiding containment defenses mechanisms flash worm author employ avoid worm defenses slow worm avoid detection reduce degree node tree traffic anomaly signal clear add redundancy flash worm propagation network route incompletely deployed worm defenses 
slowing worm avoid existing scanning containment techniques 
worm avoid williamson new destination metric limiting instance scanning new destination second 
avoid trw detectors needing slow trw relies scanners making failed connections flash worm connections successful 
rate limiting flash worm binary tree structure generally low undetected scan containment algorithm number victims contacted copy worm lower threshold required algorithms decision 
similarly flash worm naturally avoids dark address dark port detectors worm author knows target systems probably live nonexistent 
scanning related anomalies contacting unused addresses appear flash worm 
detectors detect flash worm style network detectors 
hitlist creation difficult attacker distinguish honeypots live systems flash worm targeting list include honeypots 
similarly style detector searching statistical anomalies frequency common content patterns detect flash worm attacker suitably randomize exploit route detection locations 
slowing flash worm propagation allow evade detector help evading honeypot detectors 
slow flash worm copy contacting new victim hourly probably stealthy considered humans 
additionally high fanout flash worm williamson new destination metric similar detector detect block point initial infection 
conditions hold flash worm high fanout optimized speed defense initial point infection 
high fanout worm uses multiple initial points infection initial infection points need protected containment devices devices spread 
detection part problem worm blocked defense effective 
worms move fast wait human response automated response worm 
poses problem detectors wait evidence draw time worm way 
honeypot may succeed detecting worm early tell rest network effective second 
detection flash worms need done broadly network suspicious conclusive patterns traffic deliberately delayed reached 
appears optimum solution attacker considering plausible near term worm defenses flash worm author simply ignore defenses concentrate making worm fast reliable possible slowing worm avoid detection 
system fully working defense simply considered resistant worm au thor counters resiliency mechanisms outlined previous sections combined optimizing minimum infection time 
defender current best hope keep list vulnerable addresses hands attacker 

related flash worms discussed earlier authors conjunction discussion worms optimized scanning worms :10.1.1.160.6250
just introduced concept flash worms pointed fast saturation time product logarithm size vulnerable population times latency generation infect 
reasonably expected seconds worst argued generation way design comfortably saturate vulnerable addresses seconds 
mentioned flash design fragile fragility addressed doubling replication performed quantitative analysis resilience schemes 
different class fast worms noted chien 
observed instant messenger im networks support rapid topological worms due combination sizable buddy lists short latency times sending messages 
perform back envelope calculations various notional parameter sets describing topology im network generational latency come values ranging seconds seconds saturate machines 
modes slower flash worm fast assuming chien approximations im topology sufficiently accurate 
fastest worm seen wild far slammer 
random scanning worm saturated vulnerable machines minutes appears mainly limited bandwidth 
early exponential spread time constant 

performed detailed analysis long flash worm take spread contemporary internet 
analyses simulations actual data internet latencies observed packet delivery rates worms 
flash worms complete spread quickly infections occuring second single packet udp worms seconds small tcp worms 
designing worm defenses needs bear time factors mind 
analyzed resiliency flash worms errors target lists automated worm containment defenses 
shallow trees fairly resilient list errors vulnerable containment defenses 
deep trees hard contain need additional resiliency mechanisms tolerate imperfect list 
mechanisms flash worms deep trees tolerate modest proportions list errors containment defenses 

acknowledgments research supported part networks nsf trusted computing ccr cisco systems university research program darpa contract nsf idr ani nsf nrt 
gary grim suggested idea stealthy internet worm precomputed spread tree 

caida 
skitter datasets 
www caida org tools measurement skitter 
chen gao 
modeling spread active worms 
ieee infocom 
dovrolis prasad brownlee claffy 
bandwidth estimation metrics measurement techniques tools 
ieee network 

www com html 
chien 
malicious threats vulnerabilities instant messaging 
technical report symantec 
jung paxson berger nan 
fast detection sequential hypothesis testing 
ieee symposium security privacy appear 
jung schechter 
fast detection scanning worms reverse sequential hypothesis testing credit connection rate limiting 
submitted usenix security 

kim karp 
automated distributed worm signature detection 
proceedings th usenix security symposium 
usenix august 
networks 
www com 
moore paxson savage shannon staniford weaver 
inside slammer worm 
ieee magazine security privacy pages july august 
moore shannon brown 
code red case study spread victims internet worm 
proceedings second internet measurement workshop pages november 
moore shannon voelker savage 
internet quarantine requirements containing self propagating code 
rowe levitt 
cooperative response strategies large scale attack mitigation 
proc 
darpa discex iii conference 
shannon moore 
spread witty worm 
appear ieee security privacy 
sing estan varghese savage 
system realtime detection unknown worms ucsd tech report cs 
staniford 
containment scanning worms enterprise networks 
journal computer security appear 
staniford kahn 
worm containment internal network 
technical report silicon defense 
staniford paxson weaver :10.1.1.160.6250
wn internet spare time 
proceedings th usenix security symposium 
usenix august 
project 
www org 
williamson 
implementing testing virus throttle 
proceedings th usenix security symposium 
usenix august 
venkataraman song gibbons blum 
new streaming algorithms fast detection 
wagner plattner 
experiences worm propagation simulations 
proceedings acm workshop rapid pages october 
weaver paxson staniford cunningham 
taxonomy computer worms 
acm workshop rapid worm 
weaver staniford paxson 
fast containment scanning worms 
submitted usenix security 
williamson 
throttling viruses restricting propagation defeat mobile malicious code 
acsac 
zhang duffield paxson shenker 
constancy internet path properties 
proc 
acm sigcomm internet measurement workshop november 
