guarded recursive datatype constructors hongwei xi chen gang chen introduce notion guarded recursive datatype constructors generalizing notion recursive datatypes functional programming languages ml haskell 
address theoretical practical issues resulted generalization 
hand design type system formalize notion datatype constructors prove soundness type system 
hand significant applications implementing objects implementing staged computation datatype constructors arguing datatype constructors far reaching consequences programming 
main contribution lies recognition formalization programming notion theoretical interest practical 
categories subject descriptors programming languages language classifications applicative languages programming languages language constructs features datatypes structures general terms languages theory keywords guarded recursive datatype constructors 
variety applications guarded recursive datatype constructors initially encountered notion study run time 
parametric polymorphism facility partially supported nsf 
ccr partially supported nsf 
permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
popl january new orleans louisiana usa 
boston university cs bu edu polymorphic function inspect type arguments function behaves uniformly possible type arguments 
consequence need passing types run time 
numerous occasions practice want polymorphic functions behave differently different type arguments 
called ad hoc polymorphism 
instance may want implement function val string converting run time values string representations 
order construct function need analyze types values run time 
run time type analysis support various advanced implementation techniques flattened data representation polymorphic marshaling unboxed function arguments tag free garbage collection conceptually simple direct approach run time type analysis pass types precisely terms representing types run time inspect structure terms 
order capture relation type term representation declare datatype constructor ty follows 
type ty int ty ty ty ty ty ty syntax type ty means ty type constructor kind thatis ty takes type form type 
value constructors associated ty assigned types 
int ty ty ty ty ty ty ty ty ty ty instance value type int int int ty type int int int 
general value type ty represents type 
implement val string function follows 
fun val string int string val string pf pf val string pf val string pf val string function value val string type value withtype 
ty string withtype clause definition type annotation assigns type ty string defined function val string 
idea terms represent types typed calculus introduced facilitate type passing 
type constructor corresponds ty associated value constructors rint rr correspond respectively 
datatype constructors form interesting useful types handled instance declare datatype constructors hoas follows 
type hoas 

hoas hoas 
hoas hoas 
hoas hoas 
hoas hoas declaration indicates hoas unary type constructor value constructors associated hoas assigned types 
type constructor hoas intended construct types form higher order syntax trees inductively defined type value constructor 
type hoas type higherorder syntax trees representing typed expressions type 
instance expression ml type int int int int fn int int fn int represented follows fn int int hoas fn int hoas note type expression int int int int hoas 
furthermore implement function eval evaluating higher order syntax trees 
fun eval eval eval eval eval fn eval eval eval eval eval eval withtype 
hoas note eval assigned type hoas indicating evaluation higher order syntax trees type preserving 
show type constructor hoas play key le implementing staged computation :10.1.1.17.4285:10.1.1.28.4059
datatype constructors raises number theoretical practical issues 
briefly outline results design decisions 
foremost issue arises formalization datatype constructors type theory 
fixed point operators type constructors higher kinds formally define datatype constructors 
particular standard fold unfold operations recursive types injection operations sum types define value constructors associated declared datatype constructor 
second issue decidability practicality type checking presence datatype constructors 
address question steps 
explicitly typed overly verbose internal language type checking handled straightforwardly 
external language ml slightly extended fragment ml mention elaboration process ml preserves standard operational semantics 
programming ml programmer may omit writing types various occasions determined elaboration process 
third issue usefulness datatype constructors practice 
various examples illustrate interesting applications datatype constructors capturing program invariants 
particular show datatype constructors combined restricted form dependent types type programming objects overcoming significant deficiencies existing type systems object oriented programming 
summary generalization notion recursive datatypes allowing programmer form datatype constructors 
significant contribution lies recognition simple natural generalization far reaching consequences programming 
formalize notion datatype constructors type system establish type soundness type system constitutes main technical contribution 
various realistic interesting examples support datatype constructors programming language 
organize rest follows 
section introduce internal language formalize notion datatype constructors presenting static dynamic semantics proving type soundness 
form external language ml section mention elaboration process ml support unobtrusive programming 
interesting examples section illustrate various applications datatype constructors 
lastly mention research directions related works 
full version line various omitted details 

language language explicitly typed second order polymorphic calculus 
static dynamic semantics type system supports datatype constructors sound 
language designed internal language 
external language ml mention elaboration process ml 
programming ml programmer may omit writing certain types reconstructed elaboration process 
syntax syntax standard 
type variables unit type possibly empty sequence types kinds expression variables lam variables fix variables 
xf lam variable fix variable 
form abstraction lam variable fixed point expression fix variable 
note lam variable value fix variable 
constructors assume constructor unary 
require constructor argument treat hoas hoas hoas hoas hoas hoas hoas hoas hoas hoas hoas hoas hoas value constructors associated hoas types types patterns clauses ms pn en expressions fst snd fix case ms values exp var 
ctx 
typ 
var 
ctx 
syntax internal language body fix value 
syntax patterns explained section 
substitutions mapping type variables types dom domain 
note assume dom extends mapping 
similar notations substitutions mapping variables xf expressions 
write result applying type expression type variable context expression variable context weuse 
usual declare type variable type variable context 
mean formed type type variable declared 
type formation rules standard omitted 
declare type equality 
intuitively deciding type equality assume types equal declared 
types mean equivalent 
rules deriving judgments form roughly means matches 
type constraint constraint satisfied derivable 
expected proposition 
proposition 
derivable holds 
holds holds 
hold holds 
constructor unit argument 
pattern typing rules pat var pat unit pat tup pat cons clause typing rule clauses typing rule ms pi ei pn en pattern typing rules expression typing rules ty eq xf xf ty var ty cons ty unit ty tup fst ty fst snd ty snd ty lam ty app ty ty tapp fix ty fix ty ms case ms ty case typing rules expressions moment need concerned type constraints solved may simply assume existence oracle doing 
section complete procedure solving type constraints 
datatype constructors kind types kind type constructors arity wheren number occurrences 
recursive type constructor arity associate list value constructors ck foreach type ci form sequence types stands possibly empty sequence quantifiers assuming 
concrete syntax declared follows 
type type 
ck write guarded type type variable context may contain type equalities 
name guard type equality 
instance guarded type int bool int int order satisfy type equality int bool 
thetype guarded type int type equivalent type void type element type equality int satisfied 
observe type constructor interesting feature applied type type constructor forms type equivalent form void 
type constructor formally defined sum guarded types 
call guarded recursive datatype constructor 
note assumed share common type variables replaced type variable context define follows 
type substitution sequence type variables 
elimination rules guarded types formed follows 
intro open elim note judgment form dom dom type equality 
elimination rule require contain type variable dom 
types ith injection injects values type values type addition unfold expansion intro inj unfold unfold inj unfold inj unfold inj unfold sequence types 
construct typing derivation applied rules standard 
derivation define ci follows inj unfold justified notion datatype constructors terms standard type theoretical concepts 
simple examples datatype constructors facilitate understanding concept 
example syntax top top declares value constructor top type top top defined equivalent 
type top called datatype 
general notion datatypes subsumed notion datatype constructors 
example syntax type list nil cons list declares constructors nil cons types list list list respectively type constructor list define follows essentially equivalent type constructor note usual list type constructor ml defined rest longer need guarded types form directly 
typing rules intro elim absorbed typing rules ty cons ty case respectively 
similarly expressions form form open directly 
pattern matching patterns 
usual type value variable may occur pattern 
judgment form pattern yields substitutions type value variables rules deriving intro fold intro intro defining value constructors associated judgments listed follows 
type variable context pattern type rules derive judgment form meaning formally captured lemma 
static dynamic semantics typing rules 
assume existence signature types constructors declared 
typing rules standard 
rule ty eq indicates type equality modulo type constraint solving 
please notice great difference rules typing clauses standard ones 
form dynamic semantics evaluation contexts defined 
evaluation context fst snd case ms definition 
redex defined follows 
fst redex reduces 
snd redex reduces 
redex reduces 
redex reduces 
redex reduces 
redex reduces 
case ms redex derivable clause ms redex reduces 
note may certain amount nondeterminism reduction case ms may match patterns clauses ms redex reduces 
ei fori ande redex reducing say reduces step 
reflexive transitive closure 
wesay reduces steps holds 
weuse type erasure expression obtained erasing types evaluate untyped calculus extended pattern matching 
clearly holds evaluates 
words supports type erasure semantics 
type soundness expression variable context dom write derivable dom dom 
general write mean derivable holds 
lemma essentially verifies rules deriving judgments form properly formed 
lemma 
assume derivable holds 
derivable holds 
proof structural induction derivation usual need substitution lemma establish subject reduction theorem 
lemma 
assume derivable 
holds derivable 
proof structural induction derivation 
theorem 
subject reduction assume derivable 
holds derivable 
proof assume ande reduces 
proof follows structural induction case proof proceeds induction height derivation handling various cases lemma 
handling typing rule ty case lemma needed 
prove typed expression reduce typed expression 
case case ms redex match pattern ms evaluation stuck 
far reason evaluation expression stuck 
case usual datatypes ml checked pattern matching exhaustive respect types form datatype constructors 
elaboration explicitly typed language 
programmer may quickly overwhelmed need writing types setting apparent need provide external language ml elaboration process ml preserves dynamic semantics 
syntax ml straightforward relate concrete syntax patterns clauses ms pn en expressions fst snd fix fix case ms values syntax external language ml contains free occurrence contains free occurrence free occurrences free occurrences fresh skolemized constant rules solving type constraints examples ml 
types ml 
syntax type ascription basically means expression required type 
types bound variables ml may omitted 
note language ml conservative extension ml strictly programs typable ml ml 
elaboration program type constraints form generated 
set rules solving type constraints range type constructors builtins user defined datatype constructors skolemized constants introduced applying rule definition 
type size defined follows 
furthermore type equality size defined type variable context size sum sizes type equalities 
note rule form wehave 
observation needed justify soundness completeness rules solving type constraints 
theorem 
holds derivable 
proof assume type variable 
proof follows induction lexicographic ordering number free type variables number occurrences size rules solving type constraints sound complete 
elaboration process ml similar dml essentially strategy 
ande synthesizing judgment means elaborated type derivable operationally equivalent erasures respectively 
checking judgment means elaborated derivable operationally equivalent 
formulated list rules deriving synthesizing checking judgments 
please refer rules plus details issue elaboration ml 

applications section datatype constructors handle realistic interesting examples involve variety programming features 
finished prototype implementation supports main features core ml pattern matching polymorphism effects plus datatype constructors 
implementation written objective caml available examples addition ones including implementation queue message passing style implementation polymorphic marshaling described polymorphic generic functions notion polymorphic generic functions introduced allows programmer define polymorphic functions may behave differently different type arguments 
example generic functions readily handled datatype constructors 
programming language sprintf function takes format string list arguments returns string representation arguments format string 
declare type format follows 
type format int format char format string format string string fun sprintf fmt fun aux pre fmt fn aux pre int string fmt aux pre fmt fn aux pre char string fmt aux pre fmt aux pre fmt aux pre pre withtype string format aux fmt withtype format implementation sprintf function applied format type string format function expects arguments format types respectively 
give implementation sprintf 
format expression readable defining infix operator application currying infixr fun fun fmt fmt instance expression binds fmt format type int char string format 
val fmt int char expected sprintf fmt returns function type int char string yields string int char applied integer character certainly functions sprintf implemented type classes variants 
implementation sprintf adopted 
case format argument sprintf function provided user automatically synthesized issue overloading addressed type classes really exist 
feel implementation sprintf datatype constructors natural direct 
implementing staged computation outline implementation staged computation higher order syntax :10.1.1.17.4285:10.1.1.28.4059
associate value constructors datatype constructor hoas defined section 
type hoas 

string 
bool hoas hoas hoas obviously introduced forming trees represent conditional expressions 
general language constructs readily handled properly associating value constructors hoas 
ad hoc ugly shown translation higher order syntax string 
string string new name produces fresh name val new name unit string fun name name val name new name name name val name new name name name withtype 
hoas translation order syntax 
instance translation fn simply assuming freshly generated name bound variable 
assume built function compile type hoas compiles trees 
instance compile implemented manner tree tree andthen compile tree standard approach done scheme 
note function compile corresponds function run metaml 
example stage usual power function follows syntax soon replaced syntactic sugar 
fun power fn fn int hoas power withtype int int int hoas define square function follows 
val square int int compile power readily verified tree translated power represents program fn fn fn suppose stage power function follows 
xf xf fix fix syntactic sugar staged computation fun power power withtype int int hoas int hoas square function define val square int int compile fn int hoas power time tree translated tree fn int hoas power fn 
introduce syntactic sugar facilitate staged computation 
note write hoas 
essentially corresponds syntax metaml corresponds 
instance concrete syntax code fn int expands code type int int fn int reject code syntactic sugar removed 
instance ill formed symbol translated away 
wellformed translates ill formedness context sensitive 
functions power square power square 
fun power fn fn power withtype int int int val square compile fn power fun power power val square compile fn power generally speaking expect 
assume expression type metaml 
expression obtained replacing translating away syntactic sugar 
type identify type constructor metaml hoas 
unfortunately outlined implementation staged computation contains annoying problem called open code extrusion 
instance program fn int hoas compile translates tree fn int hoas hoas compile suppose want compile need turn tree applying function clearly evaluating assuming freshly generated name bound variable call leads run time error way compile variable 
great difficulty properly address problem open code extrusion 
approach implementing staged computation prevent open code extrusion please refer datatype constructor formed representing typed code debruijn indices 
language mini mle type system modal logic studying staged computation 
type constructor intended capture closedness code 
trees represent closed expressions naturally expect relation hoas 
studied 
implementing programming objects briefly outline approach implementing objects datatype constructors 
compared various existing approaches literature approach addresses difficult issues programming parametric polymorphism binary methods self type purely type theoretical manner feel natural satisfactory 
presentation take view objects spirit smalltalk suggesting conceptualize object little intelligent capable performing actions messages receives 
assume existence guarded recursive datatype constructor msg takes type forms message type msg 
require msg extensible exception type ml 
receiving message type msg object expected return value type 
assign object type obj obj msg suppose declared syntax message constructors types stands unit type 
int msg int msg int msg int msg implement integer pairs messagepassing style withtype clause type annotation assigns type int int obj defined presentation arguments constructor types write arguments front constructor 
fun val xref ref ref fun dispatch xref dispatch dispatch xref dispatch dispatch msg raise dispatch withtype int int obj implementation integer pairs function 
point solely illustration purpose prefix msg message constructor 
integers wecan form integer pair calling send message pair obtain component reset component sending message pair operations second component pair performed similarly 
note exception raised run time interpret message sent 
classes obviously exist serious problems approach implementing objects 
object currently assigned type obj types differentiate objects 
instance suppose declared message constructor type msg typed execution leads uncaught exception run time 
clearly undesirable rejected compile time ill typed expression 
address problem providing type constructor msg parameter 
type class msg type intuition message type msg sent objects class assign type obj defined follows obj msg foremost emphasize class atype really tag differentiate messages 
instance associate message constructors corresponding types int msg int msg int msg int msg function int obj type obj ill typed type msg class 
dependent ml class sort classes 
parameterized classes immediate need class tags parameterizing types 
suppose generalize monomorphic function polymorphic function take arguments types return object representing pair second components respectively 
need class constructor takes types form class 
may syntax declare class construc fun val xref ref ref fun dispatch xref dispatch dispatch xref dispatch dispatch msg raise dispatch withtype 
obj fun val ref xref ref ref fun dispatch dispatch dispatch xref dispatch dispatch xref dispatch dispatch msg raise dispatch withtype color obj functions constructing objects classes tor associate polymorphic message constructors msg msg msg msg function constructing pair objects implemented 
subclasses inheritance major issue object oriented programming significantly facilitate code organization reuse 
approach issue inheritance introducing predicate sort class tw classes mean subclass 
type message constructor mc general form msg msg means subset sort class sort subclasses class sequence types length mc message constructor polymorphic subclasses mc message object tagged subclass 
instance types message constructors associated 
suppose introduce class constructor types form class assume holds subclass types associate message constructors 
note color just defined type colors 
implement function constructing colored pairs 
clearly implementation shares lot common code 
plan provide syntactic support programmer effectively reuse code implementation implementing binary methods approach typed object oriented programming offers clean solution handling binary methods 
instance declare class associate message constructors assigned types obj bool msg obj bool msg suppose self object type obj eq 
pass message required type obj typed 
self objects belonging class 
self type approach offers clean solution handling notion self type type receiver message 
suppose want support message sent object obtain copy object 
may assume message constructor associated class holds class assign type indicate returned object class object message sent self self object type obj class obj msg done java state type system java object return object receiving message 
rich source type 
inheritance inheritance handled smalltalk manner significant difference 
familiar exceptions standard ml point way method lookup implemented resembles handled exception handlers 
concrete example illustrate implemented 
proper place introduce syntax designed facilitate oop 
syntax class self declare class tag message constructor type obj msg note merely syntactic sugar 
addition syntax automatically induces definition function written follows ml syntax 
self just ordinary variable fun self fun dispatch self dispatch msg raise dispatch withtype obj obj actual implementation copy constructed 
msg msg msg msg color color function solely explaining implemented function occur source program 
type function obj obj indicates function takes object tagged subclass returns object tagged class 
general class super function type obj obj associated soon clear function holds key implementing inheritance 
syntax declare classes int class class message constructors associated 
class int class inherits int int unit unit self self class class inherits int class color just defined type color color unit super functions associated classes int class class automatically induced follows 
fun self fun dispatch self self dispatch msg self msg dispatch withtype int class obj obj fun self fun dispatch msg self msg dispatch withtype class obj obj functions constructing objects classes int class class implemented 
really interesting 
suppose construct objects tagged int class class respectively 
send message returned 
send integer value doubled inherits corresponding method class int class 
remarkable object returned send message 
reason copying method defined searching copying method eventually finds defined class method defined class class class int class 
desirable consequence treated object class int class returned object class message constructors types fun int val ref fun dispatch dispatch dispatch dispatch msg dispatch msg dispatch withtype int obj int class fun color int val ref ref fun dispatch dispatch dispatch dispatch dispatch msg dispatch msg dispatch withtype int obj class functions constructing objects int class class int class class class generated making type system unsound 
currently aware approach correctly typing simple example 
note function ill typed employ notion 
subtypes explicit subtyping relation approach 
existentially quantified dependent types simulate subtyping 
instance obj sum types obj satisfying obj regarded subtype object value type obj value type object 
example type obj object int class object int class pair objects components objects subclasses int class 

related related intentional polymorphism type classes 
rich body studies literature passing types run time type safe manner 
studies framework essentially provides construct typecase term level perform type analysis primitive recursor type names type level define newtype constructors 
presence difficult define proper equality types 
instance type equality defined closed substitution 
language ml subsequently extended support type erasure semantics 
type constructor seen special datatype constructor 
system type classes haskell provides programming methodology great practice 
common approach implementing type classes dictionary passing dictionary essentially record member functions particular instance type class 
encountered notion datatype constructors seeking alternative implementation type classes intensional polymorphism 
approach implementing type classes datatype constructors 
dependent datatypes dml shed light datatype constructors 
instance dependent datatype declaration dml 
datatype list nat nil nat cons list syntax introduces type constructor list takes type type index sort nat form list type 
constructors nil cons assigned types 
nil list cons list list type natural number thetype list lists length element type 
formally type constructor list defined follows nat nat clearly form guarded datatype constructor guards constraints type index expressions types 
initially met notion datatype constructors study run time type passing variety applications notion type passing implementing staged computation implementing programming objects 
currently particularly interested implementing clos object system top dml extended datatype constructors facilitating object oriented programming styles typed functional programming setting 

augustsson 
implementing haskell overloading 
functional programming languages computer architecture 
bruce foundations object oriented languages 
mit press cambridge ma 
chen xi 
implementing typed meta programming 
available www cs bu edu academic papers tmp ps november 
church 
formulation simple type theory types 
journal symbolic logic 
crary weirich 
flexible type analysis 
proceedings international conference functional programming icfp paris france 
crary weirich morrisett 
intensional polymorphism type erasure semantics 
proceedings international conference functional programming icfp pages baltimore md september 
davies pfenning 
modal analysis staged computation 
journal acm 
dubois weis 
generic polymorphism 
proceeding th acm symposium principles programming languages popl pages london uk january 
robson 
smalltalk language implementation 
addison wesley 
harper morrisett 
compiling polymorphism intensional type analysis 
conference record popl nd acm sigplan symposium principles programming languages pages san francisco 
ufer odersky 
type inference data types 
acm transactions programming languages systems toplas september 
leroy 
unboxed objects polymorphic typing 
conference record nineteenth annual acm sigplan symposium principles programming languages pages albuquerque new mexico january 
liu 
smalltalk objects design 
manning publications greenwich ct 
milner tofte harper macqueen 
definition standard ml revised 
mit press cambridge massachusetts 
neubauer thiemann sperber 
functional notation functional dependencies 
proceedings haskell workshop pages florence italy september 
ohori kato 
semantics communication primitives polymorphic language 
conference record twentieth annual acm sigplan symposium principles programming languages pages charleston sc january 
peyton jones haskell non strict purely functional language 
available www haskell org feb 
pfenning 
computation deduction 
cambridge university press 
taha sheard 
metaml multi stage programming explicit annotations 
theoretical computer science 
tolmach 
tag free garbage collection explicit type parameters 
proceedings acm conference lisp functional programming pages orlando fl june 
trifonov saha shao 
fully reflexive intensional type analysis 
proceedings international conference functional programming september 
weirich 
encoding intensional type analysis 
sands editor programming languages systems th european symposium programming esop held part joint european conferences theory practice software etaps genova italy april volume lecture notes computer science pages 
springer 
xi 
dependent types practical programming 
phd thesis carnegie mellon university 
pp 
viii 
available www cs cmu edu dml thesis ps 
xi chen chen 
guarded recursive datatype constructors 
available www cs bu edu 
xi pfenning 
dependent types practical programming 
proceedings acm sigplan symposium principles programming languages pages san antonio texas january 
