test data generation binary search class level testing sami volker university leipzig faculty mathematics computer science department computer science applied telematics business leipzig germany sami volker informatik uni leipzig de important tasks software testing generation appropriate test data 
various techniques proposed automate task 
techniques available problems limiting 
case dynamic test data generation techniques frequent problem large number iterations necessary obtain test data 
article proposes novel technique automated test data generation binary search 
binary search conducts searching tasks logarithmic time long assumptions fulfilled 
article shows assumptions fulfilled case path oriented test data generation presents technique generate test data covering certain paths class methods 
testing vital activities software development 
conducted executing program developed test inputs comparing observed output expected 
input space program test large testing conducted representative subset 
important consequence testing show correctness program shows program behaves intended subset input space 
subset input space testing effort required enormous 
claimed testing debugging accounts approximately chair applied telematics business endowed deutsche telekom ag 
software development costs need automated testing support obvious 
article presents novel approach automated test data generation 
approaches proposed automated test data generation mainly random goal oriented intelligent approaches 
random techniques determine test data assumptions concerning fault distribution 
path oriented techniques generally control flow information identify set paths covered generate appropriate test data paths 
techniques classified static dynamic ones 
static techniques symbolic execution dynamic techniques obtain necessary data executing program test 
goal oriented techniques identify test data covering selected goal statement branch irrespective path taken 
intelligent techniques automated test data generation rely complex computations identify test data 
classification automated test data generation techniques 
technique proposed article classified dynamic path oriented 
basic idea similar korel 
path covered considered step step goal covering path divided sub goals test data searched fulfill 
search process differs substantially 
korel proposed searching test data minimizing specific error function 
approach test data determined binary search requires certain assumptions allows efficient test data generation 
technique focuses generating test data class level testing aims identifying test data executing certain paths class methods 
usually path taken depend method input public class squareroot int squareroot int double calc double double eps double int iter eps demonstration math abs purposes system println wrong param 
choice iter iter math abs eps math abs eps iter return 
source code class squareroot current object state generated test data includes necessary values instance variables 
article consists sections 
section introduces terminology explains underlying concepts test data generation technique 
section briefly describes tool developed automated test data generation 
section demonstrates tool sample class 
section presents 
terminology concepts method test data needs generated 
control flow graph directed graph set nodes subset referred set edges subset true false referred set branch conditions unique entry exit nodes respectively 
nodes control flow graph correspond statements edges correspond control transfer statements 
precisely edge represents control transfer statement edge true false true false true false 
flow graph method calc called branch corresponds testing expression loop statement 
includes branch giving target value testing expression necessary traversal branch 
shows class called squareroot implemented java 
class encapsulates instance variable provides methods squareroot represents constructor calc implements secant method square root calculation accuracy 
control flow graph 
nodes control flow graph represented circles annotated numbers indicating line number corresponding statement 
edges shown arrows 
case edges branch augmented target value corresponding testing expression 
instance branch augmented indicating necessary target value testing expression line 
task generating test data dynamic techniques mainly consists steps 
control flow graph program test generated 
case control flow graph required represents method test data needs generated 

step path selected certain criteria data flow 

search strategy applied identify test data covering path selected 
article focus third step 
particularly assume path covered determined criteria 
infeasible paths avoided far possible case large number iterations carried result 
infeasible paths general problem path oriented test data generation 
object providing method path control flow graph selected traversal 
defined vector 
nl statements nl nk nk traversal usually depend input current state defined instance variables 
instance path executed conditions fulfilled input input equal instance variable equal 
necessary identify appropriate values instance variables identifying method input parameters 
test data 
xn vector method input object instance variables 
xn 
domain dxi variable xi set values xi hold 
input domain defined cross product dx 
dxn problem con sider article identification test data executing sufficient condition execution testing expression loop statements equals necessary target value 
test data generation conducted successively considering corresponding branches testing expressions identifying test data ensuring target values testing expressions 
focus consideration branch nk nk explain set testing expression nk results target value branch traversed 
important assumption approach piece wise monotone relation test data testing expression nk 
having monotone relation binary search techniques employed determine value testing expression results intended target value 
nk value testing expression test data furthermore dx order relation defined dxi order relation set true false 
testing expression nk monotone interval dxi xi xj xi dx xj implies nk 
xi 
xn nk 
xj 
xn nk 
xj 
xn nk 
xi 
xn 
monotony testing expression defined respect single variables xi 
testing expression monotone entire domain dxi variable xi single intervals monotony definition restricted intervals domain dxi consequence binary search carried test data variable separately restricted intervals monotony ensured entire set 
example 
consider example branch 
corresponding testing expression defined eps test data generation algorithm starts considering test data keeping constant 
order relation monotone entire domain binary search need restricted intervals domain 
assume tester initializes search interval 
binary search determines middle element initial interval executes 
value obviously traverse branch testing expression line result necessary target value 
divides search interval sub intervals continues search binary search approach 
testing expression monotone sub interval continued determining uniquely 
case search continued interval 
determines middle element executes 
case testing expression line target value branch traversed 
example testing expression monotone entire domain necessary restrict binary search intervals domain 
general cases case necessary consider intervals 
problem case identification interval boundaries 
instance testing expression line defined math abs 
obviously math abs monotone entire input domain intervals 
case know obtained method inputs correspond intervals boundaries 
problem tackled approach follows 
input domain statement partitioned intervals statement monotone 
statement interval chosen 

method test augmented tracing statements track input statement 

binary search input statement observed checked lies interval chosen 

case statement input lie corresponding interval binary search continued test data increased decreased accordingly 

case binary search identify appropriate test data steps repeated new set chosen intervals 
approach utilizes fact composition monotone functions yields monotone function 
case functions statements monotone certain intervals input domains need ensure input statement lies particular interval 
example 
consider path 
assume binary search employed respect input obtained traversing branch 
binary search continued respect variable identify input traversing branch 
testing expression line monotone assume interval chosen step 
execution method input observed testing expression line evaluated 
obviously lie interval input decreased 
tester initialized search interval binary search continued interval 
test data generation tool tool developed implementing approach explained section 
tool developed java consists classes interval factory specifications 
class extended class consideration 
contains method called needs overwritten method tested 
furthermore class provides methods called execute statement 
method execute invoked methods executing method certain input certain object state 
carries initialization tasks necessary tracing method execution invokes 
method statement trace execution method 
inserted statement testing expression loop statements invoked data necessary tracing statement 
method inserted testing expressions invoked input 
method required determine test data considered ensured target value testing expression 
interval represents interval input domain method statement 
provides methods dividing interval sub intervals 
furthermore contains method determine middle element interval purpose binary search algorithm 
class factory provides method called required methods class interval 
determines objects class third lies 
class needs implement interface allow comparison objects 
includes handling code standard classes integer string 
handling code new classes added tester part input automated test data generation 
specifications provides methods storing put retrieving get intervals statement monotone 
similar specifications contains corresponding intervals standard statements methods standard java classes 
corresponding methods newly developed classes added tester 
implements main class binary search 
input automated test data generation tester needs specify target values testing expressions path covered needs provide starting interval variable 
input passed integer value defining set intervals considered 
method conducts binary search 
determines middle elements initial input intervals executes method tested execute method class 
flag returned execute method interval variable considered divided sub intervals search continued 
flag returned method execute indicates direction search variable changed 
case study case study consider class squareroot 
step tester needs identify path covered test data 
done control flow graph method 
assume tester decided certain test criteria generate test data path 
testing expression line executed line twice 
necessary target values testing expression false true false 
step statement path decomposed possible atomic ones 
show class squareroot decomposition step 
decom double calc double double eps double int iter eps system println wrong param 
choice iter iter math abs eps math abs eps iter return 
class squareroot decomposition statements position step carried automatically syntax analysis techniques 
tool current version support step 
decomposition complex statements necessary object contains necessary data concerning intervals solely atomic statements 
statements decomposed data available 
particularly statement representing newly developed method data concerning intervals monotone added objects tester 
augmented tracing code track input statement code necessary 
current version prototype automate step conducted automatically 
instance tracing statement statement iter new integer iter new integer inserted statement iter specify statement variables values inserted testing expression compare current target values 
furthermore necessary extend factory class 
method class contains handling code java standard classes 
input consists values object state 
necessary handling code double objects corresponding values available tester need consider 
include handling code computing object middle squareroot objects 
case class carried creating object instance variable having value equal mean objects instance variables 
preparation steps corresponding method generator class invoked test data generation started 
method mentioned requires input initial interval input variable 
case assume tester uses interval interval 
case appropriate method input executions 
output test data generation algorithm iterations variable variable variable article novel approach test data generation binary search 
furthermore tool demonstrated implementing approach test data generation case class level testing 
continuing research approach possesses benefits 
demonstrated approach generating numerical test data generate test data class 
requirement objects corresponding class comparable method provided obtain object lying 

class level testing 
object oriented programming languages years software development making appropriate testing techniques necessary 

success existing test data generation techniques depends certain parameters encounter problem calibration 
approach require parameter calibration 

path oriented test data generation carried optimizing techniques 
optimizing techniques suffer problem local minima initial starting point far solution 
approach suffer problems 
problem occur case method including statements input domains divided intervals 
combination intervals considered worst case large number binary searches carried appropriate input identified 
research concepts developing tool 
number open issues addressed mentioned case study 
approach efficient empirical studies required underline claim 
additionally need compare approach existing test data generation techniques far possible 
task conduct empirical studies 
weyuker 
automatic generation load test suites assessment resulting software 
ieee transactions software engineering 
gallagher narasimhan 
test data generation suite ada software systems 
ieee transactions software engineering 
korel 
automated software test data generation 
ieee transactions software engineering 
mansour 
integer test generation path coverage genetic algorithm 
software engineering applications conference sea pages 
harrold peck 
test data generation genetic algorithms 
software testing verification reliability 
ramamoorthy ho chen 
automated generation program test data 
ieee transactions software engineering se 
weyuker 
selecting software test data data flow information 
ieee transactions software engineering 
tracey clark mander 
automated program flaw finding simulated annealing 
sigsoft international symposium software testing analysis issta volume software engineering notes pages 
acm press 
