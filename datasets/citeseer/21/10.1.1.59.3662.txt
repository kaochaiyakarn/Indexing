improving portlet interoperability deep annotation oscar az group univ basque country box san sebastian spain si ehu es portlets multi step user facing applications portal currently supported portal frameworks 
definitive answer portlet interoperation data flows smoothly portlet neighbouring 
data api approaches exhibit drawbacks limitation sharing scope standardization effort required 
argue limitations overcome deep annotation techniques 
providing additional markup background services deep annotation strives interact underlying services html surface conveys markup 
way portlet producer extend portlet markup fragment data processes rendering fragment supports 
portlet consumer portal deep annotation map output process fragment input process fragment mapping results fragment having input form input widget filled 
consider deep annotation particularly valid portlet interoperation due controlled cooperative environment characterizes portal setting 
keywords portlet interoperability portal ontology data flow deep annotation event 
general terms design standardization 
categories software architectures interoperability reusable software systems software online information services 

significance portal applications stems handy way access data means facilitating integration third party applications 
led called portal imperative emergence portal software universal integration mechanism 
key view notion portlet 
portlets applications portal way servlets applications web server 
difference stems portlets multi step user facing applications 
windows applications user desktop sense portlet renders markup fragments surrounded decoration containing controls 
portal page contains number portlets fragments arranged columns rows minimized maximized arranged suit user needs 
copyright held international world wide web conference committee iw 
distribution papers limited classroom personal 
www may chiba japan 
acm 
jon group univ basque country box san sebastian spain si ehu es group univ basque country box san sebastian spain si ehu es aggregating portlets portal merely invoking services arranging fragments portal page called side side aggregation 
information contained portlet surely required forcing individual user manually copy key data source target portlets leads frustration lost productivity inevitable mistakes 
situation certainly hinders fulfillment portal imperative 
ieee standard computer dictionary interoperability means ability systems components exchange information information exchanged 
achieve portlet context distinct mechanisms proposed classified data api 
permits distinct portlets share common piece information scope producer 
portlets pertain distinct producers remain isolated 
hand api approach facilitates programmatic interface portlets communicate state interested parties 
unfortunately time writing agreement standardize mechanism 
overcome drawbacks presents deep annotation approach portlet interoperation 
resorting back solutions support front approach visual part portlet fragments supplemented information fragments render 
requires creation manually semi automatically meta data existing information process known annotation 
approaches annotation build assumption information sources static static html pages 
case web pages portlets 
stated dynamic web pages ones generated database 
useful manually annotate single page 
wants annotate database order reuse semantic web purpose 
leads notion deep annotation 
deep annotation proposed annotation process utilizes information proper information structures information context order derive mappings information structures 
process called deep annotation purpose provide semantic annotation surface annotated web page case portlet fragment semantic structures background 
deep annotation permits querying parties interact background structure help html surface 
html surface obtain underlying structure database schema 
underlying structure database consulted need html page web service 
presents deep annotation portlet interoperation 
key aspects approach summarized follows 
portlets characterized ontologies 
portlet standards jsr contemplate option extensibility mechanisms available standards extend portlet description additional ontology property 
facilitating portlet interoperability benefits explicit ontologies better documentation search knowledge acquisition brought portlet realm 

portlet fragments extend markups information processes fragments support 
far fragment markup geared rendering xhtml 
markup conveys information underlying processes 
idea comes deep annotation works 

portlet interoperability achieved mappings ontology instances 
mapping necessary portlet producers ontologies mapping required indicate instantiations portlet flows neighbouring portlet 
compared back approaches mechanism explicit hidden data approach api proposal requires agreement portlet producers 
final 
noted deep annotation relies cooperation markup producer embed underlying information structure html markup 
approach rests fragments supplemented information underlying processes 
argue assumption producers cooperation valid 
argument fold 
additional effort required extra markup pays terms achieving portlet interoperability 
turn leads improve user experience portals portlets 
portal masters favor portlet producers facilitate feature 
second mistrust share ontology overcome requiring prior registration 
common scenario require portal register producer prior portlets charging matters 
registration ensures controlled environment producer feel confident disclosing ontology 
rest organized follows 
section outlines notion portlet 
deep annotation process scenario contention addressed separate section 
related section 
drawn 

portlet brief web services xml centric means integrating modular programs web open standardized interfaces 
traditional web services stops layer 
web service standards facilitate sharing business logic suggest web service consumers write new presentation layer top business logic 
example consider web service offers operations 
retrieves flights match input parameters 
hand takes selected flight payment data books seat flight 
wsdl api consumer application follows 
application collect parameters input form 
form request support call turn returns set flights presentation left calling application 
user selects flights form web application collects user information payment data 
interaction turn invoke book flight operation 
example illustrates traditional approach web services provide business logic presentation control layers left calling application 
approach underscores presentation layer 
layer addresses aesthetic aspects range concerns usability issues state management error handling client side scripting 
aspects characterize web site related interactive issues 
recreating interactive logic consumer application potentially main limitations increases time market image 
overcome limitations portlet provides coarser grained component includes business logic presentation logic 
portlets currently main building block portal construction supported main ide players main step forward portlet interoperability ide vendors delivery web services remote portlets specification april oasis java portlet specification jsr october jcp 
goal define component model enable portlets easily plugged standards compliant portals 
go back sample application delivering portlet 
portlet encapsulates previous screenshot sequence regulates rendering 
output markup referred fragment 
portlet consumer portal register producer portlet part portal offerings fragments rendered portal 
portal basically routing interactions user fragment corresponding portlet producer 
protocol lifecycle portlet session begins request issued 
causes fragment rendered 
user interacts fragment 
interaction affect portlets producer portal result sharing database invoked 
issued second get markup sent portlets producer way single user interaction change output distinct portlets 
interoperation takes places back 
section gives additional details 
portlet interoperation purpose define portlet aggregation combination set portlets achieve common goal 
aggregation totally unconstrained provide portlets endorsed supported ibm bea oracle sybase verify 
important notice portlets referred vendors web parts gadgets 
portal knows user interaction affects distinct portlets links clicked 
links convey information potential side effects portlets provider 
portlets side side left right 
value user portlets simultaneously rendered portal page 
portal acts unified access point user 
tighter forms aggregation leverage portal functionality proper workplace portlets share common goal 
implies kind interoperation portlets 
far proposed mechanisms classified data api 
data mechanisms permits distinct portlets share common piece information 
approach followed notion portlet application introduced jsr standard 
jsr defines standard interface portlets implemented java platform specifies contract portlet container 
ee architecture web application refers aggregate web components jsp servlets packaged war archive 
likewise portlet application web application includes special kind web component portlets 
portlets contained scope portlet application share data 
known application scope 
objects application scope shared distinct requests issued portlets pertain application 
portal normally frames portlets distinct portlet applications 
portlets pertain distinct portlet applications remain isolated 
api approaches provide programmatic interface portlets communicate state interested parties 
approach proposed portlet producer portlet consumer portal side 
producer side jsr event mechanism similar available java beans permits portlets subscribe events generated portlets 
data case main drawback rests exchange limited single producer 
exchange implies portlets distinct producers concern moved consumer side portal 
example approach 
enable portlet source data fragments include custom jsp tags flag sharable data output markups 
hand enable portlet target new api included specifies actions invoked 
unfortunately agreement standardize mechanism 
standardizing api lead valuable offerings portal vendors 
vendors inclined retain competitive advantage enabling companies exploit application logic infrastructure functions top 
committee working actively issue 
api standard portlet interoperation agreed ontology interoperation facilitate declarative specification mapping realms distinct portlet providers mapping hidden portlet code 
experiences web services shed light topic 
observations limitation sharing scope standardization effort required introduces approach portlet interoperability deep annotation 

deep annotation annotation set instantiations related ontology referring html document 
traditional annotation provides meta data surface annotated html page 
contrast deep annotation strives capture semantic structures background 
dynamic web pages page conveys tables attributes query recover content rendered page 
information structure context tables attributes query annotated mapped information structures context architecture deep annotation adapted portlet case 
client doing permits client consult database resorting html surface 
proponents deep annotation involves actors backend owner database administrator annotator querying party 
backend resource database illustrated actors interact follows 
backend owner produces server side web page markup database information structures 
outcome set html pages convey data database columns provide data aspects 

annotator produces client side annotations conform client ontology server side markup 
context annotation set instantiations related client ontology referring server html document 

annotator publishes client ontology mapping rules derived annotations 
goal mapping process give interested parties access source data 
information including structure tables involved web site query published users retrieve data 

querying party loads client ontology mapping rules uses query information source web service api intervention html page 
argues approach portlet interoperation 
example consider portal portlets flight booking hotel booking see 
want portlets interoperate data flow smoothly 
render fragment prompts entry date filled arrival date obtained enacting 
scenario backend owner corresponds source portlet querying party maps target portlet annotator role played portal 
gives overview approach registration time portal loads ontologies distinct portlets integrates portal ontology 
enactment time fragments annotated portal ontology 
portal keeps track distinct interactions portlets terms instantiations portal ontology 
query time target portlets instantiations feed fragments 
portlet ontology task ontology domain ontology 
scenario raises issues 
defining ontologies portlets portal 

fragment annotation producing set instantiations related portal ontology referring fragment markups source portlet 

fragment querying feeding markup target portlet annotations kept portal 
sections address concerns help running example 
portal ontology excerpt 

portlet ontology portal ontology portlet ontology 
purpose portlet characterized set processes occur lifecycle 
interested portlet provides portlet requests 
describe input output operations owl atomic processes baseline ontology 
owl initiative semantic web community facilitate automatic discovery invocation composition interoperation monitoring web services semantic description 
owl owl ontology conceptually divided sub ontologies specifying service profile service works process service implemented grounding 
focuses process side 
portlet ontology includes task ontology lines owl domain ontology describe parameters task ontology 
example consider portlet 
portlet comprises set fragments realizes multi step process ends booking flight 
fragment collects 
available flights matching criteria rendered second fragment user prompted select flights 

portlet ontology reflects process collection input output owl atomic process return os 
shows excerpt ontology suffix os output service input service denote output input atomic processes respectively noted stable domains ontology standardized way edi technologies force standardization document formats 
open travel alliance implemented basic ontology extended specify order processes proceeds relationships parameters 
instance stated os precede enactment time parameter values returned parameter departure os 
orchestration languages 
portal ontology 
purpose role portal restricted mere mediator portlets 
portal just container portlets content 
portal acts controller 
perspective matters events occur portlet enactment 
portal ontology includes main classes event class class see 
describes happening interest description includes properties process enacted keeps owl atomic process timestamp process enacted range instant data process holds thing 
eventual event represents happening occur 
portal offers set portlets portlet display distinct course action user follow 
eventual events capture permitted range actions user click moment 
example booking flight may eventually lead booking hotel 
booking hotel eventual event 
hotel booked event 
section describes rationales notion eventual event 
worth mentioning data property keeps thing see 
context thing stands domain classes portlet ontologies 
instance thing flight city hotel domain classes come distinct ontologies portal master solve potential mismatches ontology mappings different portlet ontologies 
mapping may necessary distinct communities terms regulations portlet follows open travel alliance standards conforms normative different committee 
ontology mapping tough issue implications outside scope 
ontology mapping achieve portlet interoperability matter approach 

fragment annotation broadly speaking portlet fragment chunk xhtml code rendering language 
far portlet producer delivers fragment purpose readily rendered portal 
contrast deep annotation demanding scenario portlet play roles 
backend owner fragments additionally convey output processes obtain content fragment 
hand querying actor fragments indicate kind queries fragment pose 
queries correspond widgets entry forms far answered user 
ontological counterpart widgets input processes 
www org case point 
consortium defines xml schemas corresponding usage scenarios messages support business activities travel industry 
standard owl ized deep annotating travel web sites 
markup sample fragment excerpt 
consider sample fragment portlet see 
snippet markup distinct parts distinguished structure context information markup see 
specifically output markup chunk renders meaningful set data additional markup outcome conceived result parameterless function 
sample fragment conveys output atomic processes os os 
atomic process comprises actual parameters 
process parameters correspond instantiations domain ontology portlet 
namespace introduced purpose 
query oriented markup see embeds type queries portlet 
specifically input widget entry form additional markup introduced widgets conceived realization input atomic process portlet ontology 
sample fragment includes input atomic processes 
rendering oriented markup see purpose interpreted browser 
additional markup permits deep annotating process mapping information structures portlet markup information structures portal 
portal acts annotator automatically produces set instantiations related portal ontology referring portlet event instantiation generated result rendering sample fragment 
fragment 
specifically rendering fragment source portlet portlet contains output process cause instantiation event class portal ontology 
instances kept part portal state 
query time portlet feeding 

fragment querying traditional setting deep annotation permits querying parties interact background structure help html surface 
contrast want get rid html surface 
added values portlet compared traditional web services comprises gui want keep interface 
aim deep annotation feeding fragments automatically 
feeding mean process data current fragment 
data obtained fragments event instantiations kept portal 
way html surface 
want interplay html surface enhanced html surface entry forms filled 
doing user interacts portlet effects span multiple neighbouring portlets 
stressed feeding substitution user interaction 
user decide hotel booked parameters obtained 
attain goal portal know input processes realized fragment markup 
knowing input processes portal annotates eventual events feed fragment 
implementation wise querying poses questions instances eventual event class instantiated 
instances eventual event class instantiated 
fragment fed eventual event instances 
paragraphs address questions 
eventual event instantiation generated event 
eventual events obtained 
portal seen collage portlet fragments 
fragment prompt user distinct courses actions fragment waiting user select flight fragment prompting user date entrance 
eventual events capture range actions user click moment 
eventual events occurred parameters obtained past events 
example data booking hotel obtained previous booking flight 
event instance obtained process os portlet output process fragment portlet eventual event instantiated process parameters obtained departure os 
shows instantiation generated event 
said exists pipe vice versa 
pipe describes data flow source portlet target portlet 
specifically ps pt portlets play role source target respectively 
pipe ps pt mapping specifies parameters input atomic process pt obtained actual values event caused output atomic process ps 
general source piping event instance come different portlets 
portlet input processes known advance set pipes pre established part portal environment 
piping described la prolog jena 
jena java framework building semantic web applications 
framework includes rdf owl apis persistent storage ontologies statements 
specification pipe jena rule appendix 
outcome piping process set eventual events ready feed target portlets 
eventual events obtained 
portals exhibit eclectic navigation styles hypertext totally constrained ones 
lets users explore body information freely available links obeying predefined sequences actions 
power hypertext feature rich interfaces navigating non linear way collection related data 
contrast workflows software systems directing users superimposing control activities supplying data needed accomplish currently ongoing tasks 
workflow systems sequence possible actions predetermined user accompanied activities workflow specification 
depending task hand portals anyway extremes navigation spectrum 
querying process making data flow pre established pipes serves navigation 
time querying enacted tuned navigation style better fits task hand 
options possible forward style 
triggering piping rules forward mode target portlet fed source portlet soon source portlet enacted 
soon event risen happening piped neighbouring portlets 
doing conducting user task fulfilled portlets pipe backward style 
triggering piping rules backward mode implies data flow occurring demand 
happening event immediately propagated piped portlets 
update fragments target portlets 
user distracted feed target portlet demand 
implementation wise achieved extending portlet decorator extra icon 
jena includes general purpose rule reasoner implement owl reasoner 
reasoner supports rule inference rdf graphs provides forward chaining backward chaining hybrid execution model designer aware triggering mode influence moment derived data obtained data derived 
stems event occurrences inserted jena database continuously user interacts portlets 
fragment fed eventual event 
feeding operation fragment contains entry widget entry form 
operation fills widget parameters eventual event instance 
convention needed identify widget obtains value process property 
achieved identifying widget process property ontology 
shows snippet fragment portlet rendering seen 
form inputs identified process properties 
feeding implemented xslt stylesheet selected eventual event 
template locates corresponding input element xhtml markup introduces value attribute content obtained corresponding parameter chosen eventual event 
current implementation process fulfilled portlet producer 
operation extended eventual event parameter 
reception provider proceeds feed current fragment parameter returns result portal 
worth noticing phase protocol enforces interaction portlet cause invoked portlets 
target portlets convey additional parameter eventual event 
portlets return markup provided data sharing causes state change values form filled 
user accept values provide 
clarity sake example uses forward rule currently investigating backward approach 
markup sample fragment excerpt 

related portlet interoperation addressed authors propose custom jsp tag library order enable portlets source data 
target portlet defined wsdl file custom extension describe actions consume data transferred portlets 
execution time click able icon inserted portlet fragment 
clicking icon user flow data source portlet target portlet 
approach follows backward style navigation piping information described wsdl file 
contrast approach uses fragment markup convey information uses ontologies facilitate portlet interoperation 
additionally inference rules enables sophisticated ways piping declaratively described jena rules 
relates web service composition orchestration 
self serv architecture composition web services encoded statecharts 
statechart service generates post processing precondition tables information distributed participating services 
definition composite service producer decides value input component obtained output component requested user 
contrast approach centralized flow information piping rules kept single place portal user accept values suggested piping flow 
akin portal manners content centralized freely browsed user 
paolucci sirin semantic approach web service location composition 
daml ontologies describe inputs outputs services 
semantic match service outputs service input determined minimal distance concepts taxonomy tree 
similar piping matching portlets achieving help ontology 
agarwal describe deep annotation web service integration 
wsdl files extended ontology describe input output parameters 
service consumer acts querying party mapping web service ontology 
framework ontomat service generates mapping rules consumer ontology ontologies referred wsdl documents 
enactment time data web services retrieved automatically client ontology 
perspective explores rule approach flow just matching parameters richer flow policies 

enhancing user experience portals 
implies user perceive distinct offerings portal integrated workplace data flow smoothly distinct portlets framed portal 
controlled cooperative environment characterizes portal facilitates deep annotation portlet interoperation 
describes approach piping mechanism 
pipe basically describes events source portlet mapped eventual events target portlet 
distinct navigation styles supported triggering piping rules backward forward way 
aspect event consumption 
backward mode distinct events flight books happen eventual event hotel book issued 
raises question flight reservation consider feed hotel booking 
distinct policies possible fifo lifo presumably depend application semantics 
unsolved issue approach specify complex transactions portlets 
current scenario booking hotel completely detached booking flight failing book hotel invalidate flight booking 
tasks defined transaction impossibility booking hotel resulted canceling flight 
notion transaction implies recoverability 
portlets independent components rollback transaction expands distinct portlets rests existence contingency actions provided portlet undone state changes 
done portal role restricted container keeps track events risen portlet interaction 
possible recover past state events contingency actions provided 
far portlet interaction limited data flow 
complex interactions envisaged involve portlet influencing control portlet 
left research 

partially funded spanish science technology ministry contract tic support european social fund industry department basque government contract ue 
gratitude sergio fern ndez aki paz fernando dave support 

agarwal handschuh staab 
surfing service web 
international semantic web conference volume lecture notes computer science pages 
springer october 
benatallah dumas sheng ngu 
declarative composition peer peer provisioning dynamic web services 
th international conference data engineering icde 
ieee 
ceri fraternali 
specification design workflow driven hypertexts 
journal web engineering 
consortium 
owl semantic markup web services 
www org submission owl 
handschuh staab eds 
annotation semantic web 
ios press 
handschuh staab volz 
deep annotation 
www 
acm may 
handschuh volz staab 
annotation deep web 
ieee intelligent systems september october 
hewlett packard 
jena java framework writing semantic web applications 
www hpl hp com semweb jena htm 
jasper uschold 
framework understanding classifying ontology applications 
ijcai workshop ontologies problem solving methods krr august 
java community process 
jsr portlet specification october 
www jcp org en jsr detail id 
marquis 
application traditional system design techniques web site design 
information software technology 
oasis 
web service remote portlets specification version 
www org tc home php wg abbrev 
pan hobbs 
time owl 
st international semantic web services symposium march 
paolucci kawamura payne sycara 
semantic matching web services capabilities 
st international semantic web conference pages 
springer verlag june 

web service orchestration choreography 
look wsci bpel ws 
webservices journal july 

building interactive web services 
web services journal pages december 
roy chowdhury ramaswamy xu 
click action provide user controlled integration portlets december 
www software ibm com library roy roy html 
sirin hendler parsia 
semi automatic composition web services semantic descriptions 
st workshop web services modeling architecture infrastructure 
conjunction pages 
press april 
delphi group 
portal lifecycle management addressing hidden cost portal ownership 
www com downloads portal ownership pdf 
appendix shows pipe 
rule object defined includes name list premises list optional direction 
premise includes triples check existence rdf statements jena repository builtin user defined functions subtract set predefined functions 
sample eventual event obtained pair os os events 
specifically rule checks existence pair departure return events associated passenger uses pipe 
user defined function subtract calculate duration stay hotel 
final part premise uses predefined function temp indicate creation new instances properties assigned rule 
type data property corresponds instantiation 
properties instance turn obtained variables instantiated premise rule 

