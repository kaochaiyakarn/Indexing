heterogeneous learning user modeling system jon orwant media laboratory mit ames st cambridge ma usa email orwant media mit edu doppelg anger generalized user modeling system gathers data users performs inferences data resulting information available applications 
doppelg anger learning called heterogeneous reasons multiple learning techniques interpret data second learning techniques grapple disparate data types 
computations take place geographically distributed sites portable user models carried individuals 
concentrates doppelg anger learning techniques implementation application independent sensor independent environment 
key words user model machine learning server client architecture multivariate statistical analysis markov models beta distribution linear prediction 
users interact computer provide great deal information 
physically computer console users continuously data walking speaking moving eyes gesturing 
successful interpretation data streams necessary computers tailor individual behavior habits knowledge 
computers support different applications thing showing users mail providing electronic letting play game 
application personalize behavior submitted user modeling user adapted interaction 
submitted identical similar form months submission 
sensors learning toolbox applications flow information doppelg anger 
sensor output processed variety learning techniques available applications demand 
users applications common database information user communicate user ability personalize increases dramatically 
system described doppelg anger generalized tool gathering processing providing information users orwant 
kay notes division pragmatic cognitive user models kay doppelg anger models entirely pragmatic 
information doppelg anger flows bottom fashion available sensors determine inferences users modeled applications feasible 
instances useful inferences user cognitive state resorting formal cognitive model 
see smile ascertain happy computers 
long term short term information stored user models notion user modeling session data users passively gathered everyday activities 
addition sensors applications toolbox learning techniques doppelg anger contains server accepts tcp ip connections types clients sensors applications users 
sensors provide data users may hardware software 
applications doppelg anger data tailor behavior users connect server directly wish view edit user models 
doppelg anger sensors operate continuously generating data streams users 
subset sensors described just illustrate learning techniques employed doppelg anger 
sensors designed gather information online sensor periodically gathers data user frequency duration computer records commands executed user 
sensors overlap wall mounted motion sensor system olivetti active badges provides data user locations unix login sensor lets doppelg anger know user seated front computer console sitting online map console locations 
behavior sensed different mechanisms 
happens doppelg anger mediate different sources corroborate conflict 
addition sensor data streams frequently incomplete error prone 
doppelg anger maintains accuracy estimate sensor decide confidence assign assertions sensor information 
accuracy estimates rise fall time automated feedback applications give doppelg anger reasons revise estimates 
sensors smoothly integrated natural activities users training period user models start tabula rasa growing accumulate information users 
pruning mechanism implemented 
users able forced interact directly user modeling system critical user modeling component integrated seamlessly applications daily basis 
consequently focus unobtrusive user modeling 
doppelg anger integration daily duties users models user model acquisition passive data user gathered channels coincide user normal activities 
applications include personalized electronic newspapers orwant paging service mail filtering services video games 
applications require speedy responses server server designed efficiency inferencing decoupled data gathering information providing phases application requiring quick answer able sacrifice accuracy speed 
applica unix trademark bell laboratories 
tions run long periods time sporadically server robust 
user models encoded simple knowledge representation language called orwant utilizes lisp data structures manipulated perl programs network machine portability fast computation 
user model unix directory consisting large number types files domain submodels conditional submodels 
domain submodels contain information particular aspect user behavior location information preferences personalized newspaper content 
conditional submodels contain information user supersede domain information certain condition exists example certain time day users prefer different news morning night particular event user agenda day doppelg anger sensors gathers calendar scheduling information user filesystem 
domains require information included sensor data streams 
instance calendar sensor recognizes travel entries aug am drive boston cape cod meeting entries aug pm um reception 
paging application needs know time zone cape cod page user appropriate time 
information sort contained knowledge base called barrier 
doppelg anger compensates missing inaccurate information user default inferences communities resemble traditional user modeling stereotypes major differences membership matter degree community models computed weighted combinations member user models change dynamically user models augmented 
integral part user modeling system server paradigm safeguards notions data security privacy 
potentially sensitive damaging information stored doppelg anger environment workstations making network services users applications able falsify identity remote service 
serious risk requires means access control 
system designers assume local machine prevent unauthorized access require host prove identity trust host authenticate user require user prove identity required service 
exact number submodels varies number criteria including amount available disk space old data discarded room new 
better methods needed identify prune obsolete data 
doppelg anger uses third approach embodied kerberos system steiner 
kerberos trusted third party authentication service keeps database clients users applications private keys encrypted passwords 
maintaining privacy critical issue viewed broad context information gathering networked computers modeled individuals know full extent dissemination miller 
explaining computer actions difficult task simple explanation possible information shared 
complexity transmission mechanisms modeling techniques sensing discourage casual users 
achieving informed consent important difficult users wary system offers personalization accountability 
users modeled doppelg anger control access parts user model tagging entirely private entirely public gray area expressed certain users certain users 
andrew file system regulate access control 
method guaranteeing privacy ensure user retains computational ownership data kay physical ownership 
doppelg anger store user models pcmcia cards hard disks 
multiple exist different computers secure pgp protocol communicate users communities 
focus doppelg anger learning techniques model users multi sensor multi application environment 
approaches user modeling tasks described context generalized user modeling system 
user models doppelg anger explaining learning techniques doppelg anger help describe briefly different components doppelg anger interact 
detail orwant orwant 
user model point high dimensional space dimensions determined available sensors 
axis user preference political articles newspaper age third favorite color fourth encoding path walks office day 
new data streams user point moves space 
user models stored lisp lists fixed hard disks pcmcia cards 
entire user model kilobytes roughly size small picture 
part user model object orwant primary object true name jon orwant mail address orwant media mit edu 
object control id 
primary submodel large chunk user model kilobytes doesn change 
news submodel changes frequently object orwant news object preferences assertion likes topic olympics strength probability confidence technique beta assertion likes source usa today strength confidence technique nextstep interface 
object times start start 
estimate start confidence technique linear prediction estimate start confidence technique linear prediction 
sample message sensor server object orwant location place time id active badge raw data stored user model passes learning techniques described section linear prediction markov models 
data augment representations locomotive patterns store new results locomotion submodel 
sensors user model possibility exists processes attempting write model 
dividing model submodels responsible aspect user behavior possibility collisions reduced eliminated 
file locking prevent collisions event sensors attempt simultaneously modify submodel 
sensor data location observations flow doppelg anger high rate learning techniques computationally expensive yielding backlog observations waiting processed 
minimize impact raw data written user model immediately computation results follow 
sample question answer application server request units seconds object orwant news object preferences topic olympics object orwant news object preferences assertion likes topic olympics strength confidence technique beta question merely user model information missing optional time limit response time critical applications 
return value server lexically valid user model albeit small 
communication user server matter user lisp notation usually occurs pleasant paths mail user server graphical interface 
described greater detail orwant 
bgp ms system kobsa pohl types communication application user modeling shell 
similar communication doppelg anger sensors applications servers discussed including distinctions observing actions observing beliefs goals 
interview questions answers bgp ms application pose user 
doppelg anger supports notion interview questions flow communication reversed request application server send mail user parse user reply inclusion user model 
doppelg anger sense server gateway interview questions applications willing able pose questions user don talk video games just play 
centralization doppelg anger architecture making inferences communities constructing common store personal information applications doesn scale modeling thousands millions people 
need distributed servers send mail pgp encrypted concatenations parts user community models 
home gathers different information share information 
different sites share community models 
mechanism automatic distribution installation source code new learning techniques software sensors developed broadcast usenet style directed acyclic graph nodes 
similarity models computed simple euclidean distance metric observations stored user models undergo transformation described section designed ensure axes user modeling space scaled equivalently 
similarities model model user community recomputed nightly compu fonts matter doppelg anger refers entire research project currently operative user modeling servers different locale communicate users 
intensive procedure 
distances calculated domain models conditional models 
computing similarities conditional models yields increase complexity commensurate increase usefulness 
comparing bob news submodel news submodel straightforward bob morning submodel am submodel connection contain disparate information 
bob morning submodel contain information news wants morning newspaper specify files wants transferred home 
mechanism determining conditional model created currently specified user system designer 
conditional submodels pose challenge 
existence means server interrupt driven datum flowing doppelg anger trigger particular conditional submodel 
doppelg anger sensors smart chair infrared sensor notifies user workstation sitting front chip set connected rs serial port custom built device driver 
applications want notified user sits gets necessitating conditional submodel 
application uses include lisp process garbage collect convenient times process called attempts synchronize home computational environments files application states machines 
manage conditional submodels server notifies program pending requests applications 
daemon old ai sense passive alert sees specific situation triggers event 
user determines conditional submodel override information domain submodels returns appropriate information server passing application 
users conditions user models wait longer information return server 
mechanism determining mediate overlapping conditions user morning submodel increase quantity international news user rush submodel selectively decrease amount news shown user 
override doppelg anger doesn know 
core doppelg anger consists server toolkit learning techniques database user models 
information flows sensors server notifies technique learning toolbox 
techniques interested data ignore completely linear prediction module care user mail address changes 
technique takes processes raw data way appends appropriate submodel disk 
individual sensors applications knowledge base utilities maintaining user models pruning unimportant aging information doppelg anger depend particular set operate 
sensor fails installed environment lacks particular sensor doppelg anger exhibit graceful degradation fulfill duties poorly 
learning techniques nature data provided doppelg anger sensors varies 
doppelg anger toolbox techniques uses appropriate tool data stream 
usually particular technique best sensor example camera output find way algorithms scene analysis 
occasionally appropriate technique won known automatically generated sensor vague sensor electronic mail constraints mailed doppelg anger filesystem searcher data users knows find 
domains temporal ordering observations critical importance time series methods appropriate 
important step fitting observations template interpreting light information stored knowledge base 
different models domains different techniques manipulating required 
learning techniques capacities error recovery exploiting redundant data enabling prediction behavior 
methods described meant exhaustive list serve convey heterogeneous nature learning users domains simultaneously 
strong believers flexibility generality multiple techniques process multiple data streams multiple behavior domains multiple users 
probabilistic models employed user modeling systems notable exception webb 
large extent emphasis formal cognitive models 
real world data noisy incomplete error prone simply hard interpret 
user modeling community great deal progress compensating incomplete information user models statistics community developed established methods manipulating noisy errorprone data 
system adept processing new streams information available capacity draw fields 
today sensors primitive systems remain useful capacities expectations computers inevitably rise able grow step methods gathering information users advanced 
doppelg anger learning techniques described beta distribution linear prediction markov models 
order mathematical complexity order modeling complexity sophistication activities 
beta distribution personalized electronic newspaper applications doppelg anger determine news users 
primarily categorizing incoming articles topic asking doppelg anger topics user prefers 
electronic newspapers differ feedback provide doppelg anger 
provide just bit feedback user liked article topic gather solicit information user richer modalities 
electronic newspapers discern bit 
time user reads articles newspapers doppelg anger accumulates stream topic bits user 
newspaper asks user preference olympics topic 
doppelg anger replies assertion preference strength probability accuracy confidence estimate 
beta distribution drake determine numbers stream bits 
shows posteriori probability density functions generated different streams bits 
number affirmative responses indications reader liked topic number negative responses 
probability density function values probabilities random variable take value beta beta beta beta distributions generated sequences bits 
data gathered observed values converge actual values doppelg anger confidence increases 
thick line shows beta distribution bit bits curve high variance little information assertion 
thin line shows distribution bits bits 
probability density higher mean corresponding high probability variance low corresponding high confidence 
distribution 
gamma mean distribution 
delta gamma dx varies 
derivation law succession event occurs times independent trials probability occurrence trial best estimate value user preference topic 
thick line shows beta distribution corresponding vote votes 
mean expected 
doppelg anger primary assertion user preference topic possible 
likelihood real value lies interval gamma ffl ffl area probability density 
ffl gammaffl gamma dx doppelg anger confidence defined gamma oe oe distribution variance number trials increases variance beta distribution shrinks leading rise doppelg anger confidence 
hit misses observed trials assertions result assertion probability truth confidence probability preference sigma preference sigma preference sigma preference sigma preference sigma probabilities converge confidence increases hits misses assertion probability truth confidence probability preference sigma preference sigma preference sigma preference sigma preference sigma hits misses data unequivocal assertion probability truth confidence probability preference sigma preference sigma preference sigma preference sigma preference sigma beta distribution provides probabilities possible assertions topic preferences newspaper ask doppelg anger queries confident user rank olympics topic higher election topic 
note summarization data stream occurs stream bits length condensed just real numbers value probability accuracy confidence probability 
order bits ignored tallies calculate beta distribution 
event data gathered long period time beneficial weight responses system keep user changing preferences 
technique combined linear prediction method described necessary user exhibited strong preference olympics years 
course rarely simple correspondence topics articles doppelg anger news domain 
article reasonably classified topic great example marginal example 
barrier contains representative keywords topic 
topic descriptions classify articles 
jennings higuchi jennings achieved results neural net avoids topic abstraction entirely suggests promising avenue doppelg anger beta distribution predict user preference particular keyword addition topics represented conjunction multiple weighted keywords 
beta distributions identify user interest source 
reliable mapping articles sources beta distribution arrives accurate estimates user source preferences quickly 
identified representations data beta distribution 
user modeling systems develop focus shift useful techniques beta distribution creating heuristics enable recognition data stream processed 
data stream assumed incorrectly 
zero memory flipping coin event independent preceding events 
remainder section explore learning techniques possess memory 
linear prediction modeling user behavior involves predicting certain event occur 
doppelg anger sensors gathers information relating computer logins user logs long session computer lasts 
performs task personalized newspaper identifying user started stopped reading newspaper 
predicting times useful appropriate news chosen collated news presentation tailored length time user available friend determine user expected read mail 
making predictions problem guessing number sequence data stream login observations doppelg anger predictions projecting data stream 
data streams possess periodicities desire spectral predictive method reveal cyclical behavior 
doppelg anger uses linear prediction suited signals smooth oscillatory strictly periodic 
ocean tides canonical domain linear prediction basic behavior daily period modulated amplitude phase course month localized conditions single cycle look quite different pure sinusoid 
tasks users perform computers resemble tides just respects 
instance user login time daily periodicity 
drift course week month person login earlier due meetings classes 
linear prediction linear prediction linear extrapolation 
modeling complexity linear prediction higher low order polynomial 
linear prediction top row shows times logins bottom row shows login durations 
earlier values left new datum gathered data advances leftward predictions modified 
values right boundary thirds way values predicted observed rightmost value prediction days 
immediate predictions accurate values fade stretch rightward corresponding dissipation confidence 
equipped handle vagaries data stream person runs traffic jam starts hour usual predictive accuracy significantly affected 
shows doppelg anger depicts linear prediction results user 
row data points times logins second row shows login durations 
boundary just halfway data stream separates observed values predicted values 
values predicted farther fade corresponding decreases doppelg anger confidence predictions 
new data point affect prediction values recomputed minutes depending system load 
login sensor incarnation absolute time logins relative time login login post processing stage calculates difference absolute times added data stream consist relative times 
delta login times exhibit cycles absolute times increase monotonically 
slight manipulation illustrates important point representation data break inferencing stage 
ideally user modeling systems receiving new data stream try simple transformations data see results amenable available learning techniques 
linear prediction uses autocorrelation data predictions press 
autocorrelation measure data stream predicts 
data stream assumed stationary cyclical characteristics independent absolute time 
reasonable assumption login times long observation span short 
user login patterns change weekly starts enjoy computers fool system course month necessarily course week year 
start observations labelled objective predict happens roughly looking sequences consecutive observations seeing predict observation sequence yn yn gammaj xn xn discrepancy autocorrelation predicted value actual value 
linear prediction coefficients calculated autocorrelation oe 
gives equations unknowns oe kj oe turn calculated directly data set oe hy gamma gammaj autocorrelation oe single index stationarity assumption 
noise explicitly included equations degrade predictive accuracy long point point uncorrelated 
application location prediction printing personalized newspapers 
newspapers typically take minutes print location prediction module predict user printer vicinity ready 
markov models aspects behavior best represented markov models 
markov model consists set states matrix probabilities transitions states state set observation probability pairs 
time tick observation tick system change states 
markov models effective representation behaviors memory events depend past events dependence relatively simple 
doppelg anger uses markov models data streams physical locations user working state 
physical locations sensed variety sensors doppelg anger uses data stream predict locations constructing markov model describes user locomotion model changes user moves room room city city 
user working state busy idle concentrating forth categorized static hidden markov models behavior expressed sequence commands executed user computer session 
conf hall elevator doppelg anger depicts markov models users 
arrow widths indicate transition probabilities loops state back represent sequential observations user place 
see spend lot time office room pass hall get room elevators slow 
locomotion applications knowledge user location 
instance personalized newspaper application takes minutes compute print papers users 
asks doppelg anger person vicinity printer answer minutes probability confidence greater certain threshold queue print job anticipation user proximity 
sensor reads schedule files determine city person 
tracks people move media lab 
third tracks computers users log uses knowledge computers deduce location 
doppelg anger uses location data streams construct markov model user 
markov model enables predictions user currently known predicted point confidence estimate 
constructing markov models simple process 
place hallway room city observed data stream considered state markov model 
observations labelled states gamma transitions probability transition state state designated jji jji number transitions number observations gamma simplistic model locomotive behavior assumes location merits state 
sophisticated approach generate states correspond paths equating states particular locales 
state going water going meeting third winter vacation 
complex model locomotion doppelg anger need sophisticated method constructing markov models additional stage generating states transition probabilities output probabilities calculated 
analytic method estimating quantities iterative method called baum welch reestimation procedure converges solution 
method starts system doppelg anger uses successively estimates transition probabilities dividing average posteriori joint probability consecutive states average posteriori probability state observations 
iteration ends transition probabilities output probabilities changing significant amount 
task analysis user working state hidden markov model problem set markov models set observations markov model generated sequence observations 
model provide best description user behavior 
doppelg anger uses hidden markov models determine user working state description user computer activity class task performing lesser extent amount attention demanded task 
author created hidden markov models described broad classes tasks hacking idle frustrated writing learning playing concentrating image processing common task people modeled connection computer gateway 
hacking model shown 
hidden markov models consists matrix transition probabilities states compile edit mail shell window manager text format games image processing user modeling connection news view learn 
compile state shown 
state consists set output symbols unix commands 
sequence unix commands doppelg anger calculate probability user particular state subsequently identify hidden markov model best describes user behavior 
viterbi algorithm provides efficient method determining optimal hidden markov model choice sample 
hidden markov model occupies row trellis choice emerges proceeding sequentially observations trellis observation probable state model computed cumulative probabilities model computed 
observation reached markov model highest probability winner 
user working state determined confidence assertion 
probabilities sum user compile learn edit hidden markov models task analysis hacking model contains states 
compile state depicted 
actual markov model contains thirteen states states critical hacking model shown transition probabilities sum state 
compile cc gcc emacs observation symbols compile state part hacking model contains output symbols 
symbol unix command compile source code local environment 
symbol probability produced compile state value cc higher emacs emacs tasks cc compiling 
classified squarely markov models confidence winner diminished 
parallel implementation viterbi algorithm connection machine took second calculate optimal model observations 
serial implementation algorithm dec alpha took approximately seconds 
interested readers refer detailed description markov processes viterbi algorithm baum welch reestimation procedure 
rabiner discusses hidden markov models including thorough explanation viterbi algorithm 
learning models described section common goal attempt explain probabilistic cognitive sense estimate predict individual user behavior 
section describes learning techniques transforming data comparable representations making inferences populations users 
knowledge handlers consider doppelg anger application filters sorts electronic mail 
tasks credit assignment user exhibited preference particular message ascertain 
user chosen read message author subject brevity agent flags messages match particular boolean queries 
attributes different types proper name integer text boolean expression 
compare name integer boolean query 
disparate data types programs general customize behavior application independent ways need grapple streams data don resemble 
doppelg anger comparison achieved converting representations data type bit vector 
data type corresponding tool called knowledge handler performs transformation 
operation knowledge handlers illustrated 
field mapped appropriate handler 
handlers created linearly scaled integers logarithmically scaled integers linearly scaled reals logarithmically scaled reals proper names boolean queries arbitrary strings 
ideally library handlers harder quantify concepts shape color risk 
purpose knowledge handler transform data domain bit vector leftmost bit significant rightmost bit significant general bit significant bit 
bit vector corresponds binary number low order bits significant information truncated bit vectors length 
logarithmic handler example assumes input data exponential computes logarithm normalizes results 
boolean handler complex uses series heuristics ensure similar queries result similar bit strings 
handler output plethora multivariate statistical analytical techniques including clustering algorithms isodata algorithm described 
fields handlers technique message size author query hit keywords linearly scaled integers logarithmically scaled integers proper names boolean queries arbitrary strings delete significant bits cluster analysis example learning article age fields bit vectors bit vectors knowledge handlers cluster analysis communities doppelg anger communities similar traditional stereotypes hole user model default information communities supply needed information 
communities maintained students children artists media 
communities occupy permanent places doppelg anger change time new information finds way doppelg anger choice create human 
communities generated automatically day partitioning multidimensional user model space isodata unsupervised clustering algorithm 
way salient traits emerge represented communities explicit human intervention 
important differences communities stereotypes membership binary community cloud includes people community model defined amalgam constituent user models membership community imply inclusion strict sense non artist influence influenced artist community 
user belongs different communities simultaneously 
default information required user model community votes answer 
strength vote proportional similarity community resulting assertion weighted average user community models weight model proportional similarity user observed doppelg anger sensors suddenly launches personalized newspaper doppelg anger give generic newspaper 
user reads telecommunications article doppelg anger look readers expressed interest telecommunications hypothesizes interests suitable new user 
similar readers user votes affect estimates user interest topics 
communities generated ways 
guided hand meaning system designer explicitly decides create community doppelg anger generate dynamically 
task statistical classification problem 
clustering considered unsupervised tells system communities generate data naturally falls eighteen groups algorithm generate clusters 
fisher cobweb system fisher performs conceptual clustering identifies salient features collection traits 
promising direction identifying communities 
cobweb uses heuristic evaluation measure category utility classify data points 
cobweb limited usefulness doppelg anger deals nominal attribute value pairs 
sequel cobweb partitions numeric attributes system process symbolic numeric attributes simultaneously 
difficulties comparing symbolic numeric attributes force system designers choose compromises 
numeric attributes categorized symbolic symbolic attributes discretized numeric 
stepp michalski system stepp takes approach converting attribute domains ranges contribute higher order conceptual descriptions 
range values treated symbol 
doppelg anger takes approach discretizes symbolic attributes knowledge handlers 
doppelg anger uses modification isodata algorithm automatically generate communities 
isodata combines means procedure classifying samples clusters heuristics splitting merging clusters 
isodata algorithm takes parameters multidimensional data clustered maximum number samples cluster approximate desired number clusters maximum variance cluster split maximum distance clusters merged maximum number clusters merged 
describing algorithm entirety detailed interested readers referred tou gonzalez detailed description supervised unsupervised clustering 
computing communities similarities users far computationally expensive perform new datum streams doppelg anger calculations take place nightly 
community clustering done demand useful illustrating effect datum doppelg anger 
useful testing conjectures system behave differently students interested computers 
larger user population need knowledge base inferences correlations users 
small population random meaningless correlations adversely affect communities generated people middle names check mail 
ontology tell doppelg anger characteristics unrelated clustering algorithm construct communities 
far happen large user models past beneficial bootstrap fully fleshed user community models 
december mit media lab hosted news consortium meeting orwant 
attendee member sponsoring indicated second third choices workshops 
raw data consisted columns full name workshop preference second third choice 
mailed doppelg anger recognized message consisting tabular data personal names constructed user model attendee ephemeral community 
treated workshops axes proximity numeric data doppelg anger took value axis attendee 
user models created attendee 
user model simple consisting workshop preferences attendee 
correlations possible data enabled interface orwant allowed users navigate space users seeing similar sense having compatible preferences companies similar 
interface allowed relationship user workshop inverted users find workshops similar 
workshop user modeling similar pattie maes workshop intelligent interface agents similar walter bender workshop salient stills image processing technique chris schmandt workshop audio newspapers completely correct inferences doppelg anger didn understand sense word workshops workshops 
just shallow bits multitude user models blindly performing correlations doppelg anger arrived valid assertions subject matter workshops 
doppelg anger priori knowledge content meaning utilizing bits people able reach completely correct workshop content demand ontology 
discussion doppelg anger sensor independent application independent server client architecture holds promise generalized user modeling systems 
compared user modeling systems doppelg anger greatly removed cognitive theories closer component embedded operating systems serve multitude users 
research acknowledges imperfections data real world focuses recovering imperfections arise flaws sensor data streams unavailability sensors 
seen techniques described notion confidence estimate integral doppelg anger large part information processing involves reasoning noisy incomplete error prone data 
learning methods described means comprehensive list techniques user modeling system arsenal 
merely sample different types methods useful evidence user modeling systems benefit employing number techniques data individuals comes forms 
robust reusable toolbox techniques step develop heuristics automatically determining techniques 
explicit mappings data domains techniques embedded doppelg anger design linear prediction works domains cluster analysis works domains 
ideally user modeling system try techniques data stream periodically evaluate accuracy 
heuristics choosing techniques useful user modeling systems cope sensors added user modeling system designed 
task analysis problem illustrates system designer influence inferences drawn user modeling system models behavior stored knowledge base derived user modeling system 
doppelg anger generate hidden markov models observations user computer commands 
realistically handicap expect successful user modeling system combine approaches start information embedded design knowledge base modify behavior models new information available 
login sensor tells doppelg anger users log computers 
linear prediction worked data stream small module inserted sensor doppelg anger converted data absolute login times time elapsed logins 
module computationally inexpensive easy develop reusable data streams 
mere existence warn system designers search flexible user modeling system involves recognizing ways data manipulated amenable inference techniques 
generality arising treating sensors applications users uniformly clients user modeling server powerful 
simplifies user modeling server flexible extensible new sensors applications added easily 
step add user modeling systems group user modeling systems share information users stereotypes communities 
turn requires standardized language user modeling systems communicate promising direction user modeling research 
research supported ibm motorola mit media lab news consortium 
michelle mcdonald worked newspaper feedback wrote incarnation lee implemented portable user models pcmcia cards wrote calendar sensor 
walter bender judy kay alfred kobsa anonymous reviewer 
drake alvin fundamentals applied probability theory 
mcgrawhill new york pp 

fisher douglas knowledge acquisition incremental conceptual clustering readings machine learning edited jude shavlik thomas dietterich 
morgan kaufmann san mateo ca pp 

kay judy generalised user modelling shells taxonomy 
judy kay alex quilici editors proceedings ijcai workshop agent modelling intelligent interactions sydney australia pp 

kay judy um toolkit user modelling 
proceedings second international workshop user modeling honolulu hi 
kobsa modeling user conceptual knowledge bgp ms user modeling shell system 
computational intelligence vol 
pp 

jennings andrew higuchi user model neural network personal news service 
user modeling user adapted interaction vol 
pp 

miller arthur assault privacy 
university michigan press ann arbor mi 
orwant jon doppelg anger goes school machine learning user modeling 
mit ms thesis mit media laboratory 
orwant jon workshop user modeling news consortium mit media laboratory 
orwant jon user user models interface 
proceedings fourth international conference user modeling ma pp 

press william brian flannery saul teukolsky william vetterling numerical recipes art scientific computing nd ed 
cambridge university press pp 

rabiner lawrence tutorial hidden markov models selected applications speech recognition 
proceedings ieee vol 
pp 

steiner jennifer clifford neuman jeffrey schiller kerberos authentication service open network systems 
technical report mit project athena cambridge ma 
stepp michalski conceptual clustering inventing goal oriented classifications structured objects 
machine learning artificial intelligence approach vol 
pp 
michalski carbonell mitchell editors morgan kaufmann los altos ca 
charles decision estimation classification 
john wiley sons new york 
tou gonzalez pattern recognition principles 
addisonwesley 
webb geoffrey attribute value machine learning approach student modelling 
proceedings ijcai workshop agent modelling intelligent interaction sydney australia pp 

author vita jon orwant obtained sc computer science sc cognitive science sc media arts sciences mit 
internationally electronic news user modeling supervises user modeling research effort mit media lab presently doctoral candidate motorola fellow 
media lab focus creating automated personalized information entertainment systems 
