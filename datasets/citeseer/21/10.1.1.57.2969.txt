dummynet simple approach evaluation network protocols luigi rizzo dipartimento di ingegneria dell informazione universit di pisa pisa italy email rizzo iet unipi network protocols usually tested operational networks simulated environments 
approach easy set control various operational parameters bandwidth delays queue sizes 
simulators easier control approximate model desired setting especially regards various traffic generators producers consumers interaction protocol 
show simple flexible accurate network simulator dummynet built minimal modifications existing protocol stack allowing experiments run standalone system 
dummynet works intercepting communications protocol layer test simulating effects finite queues bandwidth limitations communication delays 
runs fully operational system allowing real traffic generators protocol implementations solving problem simulating unusual environments 
tool doing experiments network protocols simple running desired set applications workstation 
freebsd implementation dummynet targeted tcp available author 
implementation highly portable compatible bsd derived systems takes lines kernel code 
keywords protocol evaluation tcp ip simulation studies effectiveness performance network protocols usually done operational networks simulations 
approach limited availability operational network desired features 
actual operating conditions queue sizes delays external traffic sources unknown easily controllable 
hand testing real network relieves researcher need modeling building various traffic sources experiments real world applications purpose 
simulations advantage controllable reproducible 
simulated environment just approximation reality especially true various traffic generators usually interact protocol 
example consider simple ftp transfer tcp 
flow data regulated number factors size described supported part commission european communities esprit project ltr moby dick mobile digital companion part dell universit della ricerca scientifica italy 
appears acm computer communication review vol jan pp 
windows speed disks sender receiver side cpu load scheduling processes nodes generation policy factors hard model accurately simulators possibly resulting inaccurate unreliable results 
difficulties setting real network desired features stimulated development number network simulators real ns 
kernel framework implementation testing network protocols 
cases aim experiments network protocols determine behaviour complex network nodes routers links different queueing policies queue sizes bandwidths propagation delays 
difficulty modeling complex environments suggests simplified networks connection observation goes pair routers model presence queues finite size bottleneck link bandwidth delay modeling bandwidth delay 
quite experiments real networks routers modified act introducing artificial delays random packet losses reordering 
cases effects bandwidth limitations simulated 
couple workstations bottleneck link local network generally necessary set experimental testbed 
typical settings study network protocols 
thin line represents bottleneck link 
extend concept propose simple effective approach insert model simplified network operational protocol stack run experiments standalone system 
approach called dummynet applicable protocol 
works simply intercepting communication protocol layer analysis underlying simulating presence real network finite size queues bandwidth limitations communication delays possibly lossy links 
dummynet approach gives advantages simulation real world testing great control operating parameters simplicity ability real traffic generators 
tool run experiments mentioned single workstation unmodified real world applications ftp telnet web browsers traffic generators 
consequence running experiment easy quick running desired set applications workstation 
dummynet introduces overhead communication experiments done maximum operating speed supported system 
section discuss principle operation dummynet limitations 
brief description actual implementation provided followed example discussion possible extensions 
similarity 
main difference lies fact approach allows experiments run standalone system need network simulate networks arbitrary topologies shown section 
pq network application dummynet rq pq rq principle operation dummynet principle operation typical protocol stack layer communicates adjacent ones upper layer generally connected communicating peers lower layer connects network 
order simulate presence network communicating peers need insert elements flow data ffl routers bounded queue size queueing policy ffl communication links pipes bandwidth delay 
additionally random packet reordering losses introduced simulate unreliability real networks 
features important real network redundant paths wireless noisy links losses due congestion better simulated bounded size queues 
discussed simplest setting usually includes routers pipe 
elements easily modeled couple queues rq pq inserted protocol layer observation lower layer pair rq pq needed direction communication 
call maximum size rq bandwidth propagation delay pipe respectively 
processing necessary traffic exchanged layers 
layer communicates packets inserted rq 
insertions bounded maximum queue size performed queueing policy choice usually fifo tail drop policies possible red 
random reordering packets introduced stage 

packets moved rq pq maximum rate bytes second 
pq uses fifo policy 
packets remain pq seconds dequeued sent protocol layer 
random losses introduced stage 
steps performed running periodic task period suitable case run bt bytes moved rq pq packets remain pq cycles 
structure node dummynet resulting system looks local communication subject queueing delay introduced simulated network 
simple setting able simulate settings literature bottleneck link identified cite 
applications dummynet particularly useful studying interactions protocols application programs unusual hard reproduce settings 
identify broad classes applications ffl debugging 
real implementations elements take part communication fact evidence bugs unexpected features implementations unavoidably escape simulation explicitly modeled course 
example consider tcp implementation caches route metrics previous connections 
system memory previous status network simulation model properly behaviour failing reproducing response sudden changes features network 
ffl study new protocols 
ability simulate unusual hard reproduce settings eases study new protocols 
example tool study behaviour existing new congestion control mechanisms presence bottleneck links slow modem connections widespread nowadays asymmetric links 
ffl performance evaluation 
third broad class applications tool answer questions application run network bandwidth delay 
extremely useful users developers say conferencing applications kind collaborative software want evaluate performance product setting possibly expensive communication link 
differently previous applications case simulation option performance metrics extremely subjective test environment close possible real setting 
primary purpose trivial extension dummynet order select traffic basing addresses ports allows simple selective bandwidth limiter servers explicitly provide feature application operating system 
limitations simulations reality dummynet approximate behaviour real system features 
approximations introduced tool derive granularity precision operating system timer cases little influence experiments 
granularity timer limits resolution timing related measurements 
practice constitutes problem simulating fast networks short pipes resulting packet delay comparable second problem periodic task run late timer ticks depending system load 
experiments events extremely rare relatively slow system running freebsd real time os 
errors affect protocol timers driven clock interrupt 
noted events dummynet particular extractions queues pipes occur synchronously system timer 
principle hide amplify real world occur race conditions 
kept mind real system asynchronous events corresponding interrupts generated external events disk network console activities presence dummynet change essentially non deterministic behaviour system analysed fine grain microseconds resolution 
determining packet sizes needed computation simulated bandwidth dummynet normally uses size payload lower layer ip case dummynet tcp 
straightforward include link layer overheads computations known 
particular possible simulate effects link layer compression link appear channel 
implementation details developed basic version dummynet working interface tcp ip 
implementation takes lines kernel code freebsd intercepts calls ip output tcp modules tcp input protocol demultiplexer ip 
normal conditions system overhead dummynet 
tcp communication occurs packets queued description section periodic task run seconds perform required queue management 
note periodic task needs run data queues system 
system requirement dummynet availability timer granularity sufficiently small purposes simulation 
bsd derived systems granularity ms case freebsd allow different granularity simply kernel compile option option hz sets ms useful experiments higher resolution bandwidth required 
current workstations overhead deriving faster clock rate reasonably low 
copies data done operations require constant time overhead introduced dummynet negligible function calls packet communications progress 
kept mind system dummynet sufficient buffer space store packets rq delta mss bytes transit pipe bt bytes direction 
dummynet intercepts calls adjacent protocol layers leaving traffic unmodified 
example implementation dummynet acts tcp ip meaning system mounting disks nfs udp continue performance problems leaving clean simulation environment tcp traffic 
filtering rules dummynet affect selected traffic tcp traffic port traffic interface various configurations experiments dummynet dummynet development done completely diskless system crashes due unstable kernels cause annoying disk corruptions lo mtu pkts window localhost 
net inet tcp dummynet ms kb buffers 
get bytes received seconds 
net inet tcp dummynet ms kb buffers 
get bytes received seconds 
net inet tcp dummynet ms kb buffers 
get bytes received seconds 
net inet tcp dummynet ms kb buffers 
get bytes received seconds 
net inet tcp dummynet ms kb buffers 
get drop packets times bytes received seconds 
net inet tcp dummynet ms kb buffers 
get drop packets times bytes received seconds 
net inet tcp sack enable sack 
get drop packets times bytes received seconds sample session showing dummynet examples features simulated network controlled kernel variable modified command ideally operating parameters protocol test mss max window size tcp options configurable runtime need rebooting system case bsd derived system kernel variables 
simplest way doing experiment consists running communication processes system 
loopback occurs pipe buffering delays occur twice buffers shared traffic directions 
example setting shown ftp transfers done applications timings slightly accurate ftp 
system experiments pentium mb ram running freebsd 
client server run system server number applications 
just low level interface 
trivial program shell script written parse user friendly format dummynet bw mbps queue delay ms tcp communications kb window example cases throughput limited window size available bandwidth 
mss interface set low value limits performance allows larger number packets fit window 
value net inet tcp dummynet decimal number bbbb bandwidth kb kk queue size ddd value units seconds ms experiment 
lines normally part system logfile 
configuration show average throughput value tests compensate variations deriving concurrent network cpu activities 
test bandwidth queue limits set large value order determine maximum throughput 
second experiment limits bandwidth kb actual throughput lower channel shared data acks tcp header including rfc rfc extensions consumes portion bandwidth 
third experiment short propagation delay introduced negligible effect throughput 
increasing delay ms making rtt ms causes connection limited window size roughly window rtt kb various overheads cost slow start reducing throughput 
experiments run limited queue sizes frequent overflows occur reduce throughput significantly 
run selective acknowledgments enabled 
single system experiments communication peers usually run implementation protocol system allows protocol parameters set individually process 
interoperability tests done nodes lan dummynet running 
resembles typical setting protocol evaluation real networks consisting nodes different lans connected routers bottleneck link 
complex simulation settings built systems dummynet configured different parameters 
expect experiments dummynet especially performed single workstation completely deterministic reproducible behaviour network simulated 
expectations wrong presence tool real system intrinsically deterministic presence interaction asynchronous components network traffic disks peripherals 
non determinism evident analysis coarse exist microscopic race conditions cause different ordering events different experiments possibly macroscopic effects occasional queue overflows 
intrinsic limitation asynchronous systems overcome tool 
extensions basic version dummynet comprising queue pipe suffices run single workstation simulations literature 
addition module providing programmable random deterministic packet losses reordering straightforward 
module standard practice simulations noisy environments wireless networks 
tool limited simulation networks single communication link 
complex topologies modeled defining multiple data structures comprising router pipe routing table bidirectional link objects 
shows sample network routing table associated link 
packet extracted pipe destination computed corresponding routing table 
ability assign multiple addresses interface loopback interface modern systems permits simulation complex topologies involving multiple hosts standalone system 
extension relatively straightforward current implementation adding router pipe pair requires just lines code addition tests required route traffic appropriate path 
obviously configuring setting requires powerful mechanism dedicated socket type special call simple kernel variable 
dst dst dst dst dst dst dst dst tcp tcp tcp ip tcp tcp tcp tcp method building complex network dummynet 
unidirectional link associated suitable routing table determine hop packet 
tcp ip mean packet forwarded layer protocol stack 
current implementation dummynet lacks automated tool setup arbitrary network topology basically producing routing tables shown starting graphical textual description 
dubious real usefulness tool reasons ffl works literature especially regarding protocol implementation simplified setting implemented 
dynamic configurability simulations run just command lines complex runs involving different settings may run existing scripting languages ffl really complex networks experimental results hard interpret structure network carefully selected understood researcher 
producing low level description network shown helps gaining knowledge 
traces traffic network produced standard tools tcpdump instrumenting dummynet log significant events queues pipes 
type information collected overhead collecting similar available simulator 
dummynet ought implemented loadable kernel module ease modifications simulated network different tracing options 
facilities provided operating systems sunos freebsd linux dummynet little interaction rest system implementation poses practical difficulty 
shown experiments network protocols done easily standalone system real world applications traffic generators 
approach gives advantages real world testing simulation simplicity high control operating parameters high accuracy need complex hardware settings overhead running simulations 
especially experiments run single workstation require presence real network 
convenience system dummynet really encourages experiment different system configurations try variations existing protocols 
dummynet especially useful developing completely new protocols suitable testbed simply exist 
dummynet speed dramatically analysis development protocols making simulation environment readily available production environment easily interfaced working systems 
author lorenzo vicisano jeff mogul anonymous reviewer comments earlier version 
balakrishnan seshan amir katz improving tcp ip performance wireless networks proc 
st acm int conf 
mobile computing networking mobicom nov brakmo peterson performance problems bsd 
tcp ftp cs arizona edu papers ps brakmo malley peterson tcp vegas new techniques congestion detection avoidance proceedings sigcomm conference pp aug ftp ftp cs arizona edu papers vegas ps danzig jamin library tcp internetwork traffic characteristics technical report cs sys computer science dept usc fall floyd comparison tahoe reno sack tcp tech 
report available www nrg ee lbl gov nrg papers html floyd jacobson random early detection gateways congestion avoidance ieee acm trans 
networking aug available www nrg ee lbl gov nrg papers html network simulator technical report mit sept hoe startup dynamics tcp congestion control avoidance schemes master thesis mit june hutchinson peterson kernel architecture implementing network protocols ieee trans 
software engineering jan jacobson congestion avoidance control proceedings sigcomm stanford ca aug acm keshav real network simulator technical report dept computer science uc berkeley 
netlib att com keshav papers real ps simulator sources available ftp ftp research att com dist qos real tar mccanne floyd ns lbnl network simulator www nrg ee lbl gov ns rizzo sources dummynet www iet unipi luigi dummynet diffs wang crowcroft eliminating periodic packet losses tahoe bsd tcp congestion control algorithm acm computer communications review apr 
yan design implementation emulated wan tech 
report cs dept usc usc tar gz 
