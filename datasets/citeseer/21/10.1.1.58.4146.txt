systematic approach optimizing complex mining tasks multiple databases recognized data mining interactive iterative process 
order support process long term goals data mining research build knowledge discovery data mining system 
line research done provide database support mining operations 
focus efforts typically mining single dataset 
situations data warehouse user usually view multiple datasets collected different data sources 
scenarios comparing patterns different datasets understanding relationships extremely important part kdd process 
requires support complex queries multiple datasets 
addresses new functionality optimizations required process specifically focusing frequent itemset mining 
contributions sql mechanism querying frequent itemsets multiple datasets 
establish algebra queries 
develop number transformations algebra introduce new operators purpose 
algorithms finding query plan reduce execution cost 
evaluate algorithms real synthetic datasets show order magnitude performance gain 
decade data mining emerged important component databases information systems 
large body research exists algorithms variety data mining tasks targeting variety applications data types execution environments 
recognized data mining interactive iterative process data miner expect get interesting patterns knowledge single execution algorithm 
order support process long term goals data mining research build knowledge discovery data mining system kd dms 
vision system jin agrawal department computer science engineering ohio state university columbus oh agrawal cse ohio state edu provide integrated user friendly environment efficient execution data mining tasks queries 
line research conducted provide database support mining operations 
includes query language extensions implementing mining algorithms database system 
logic algebra methods proposed model mining process 
subfield constraint association mining allows mining interesting association rules variety constraint conditions input 
research projects focus typically mining single dataset 
situations data warehouse user usually view multiple datasets collected different data sources 
scenarios comparing patterns different datasets understanding relationships extremely important part kdd process 
requires support complex queries multiple datasets 
support involves new optimizations new functionality 
suppose user needs find itemsets frequent certain support answered intersection results expensive 
compute itemsets frequent datasets simply find frequent dataset 
leads different evaluation plans corresponding dataset respectively initial evaluation 
evaluation plans different costs depending nature datasets furthermore number datasets complexity query condition increases number possible evaluation plans grow 
need techniques enumerating different query plans choosing cost similar developed relational queries 
simply combining results applying mining operators dataset may provide results desire 
example suppose user needs find itemsets frequent certain support datasets frequencies datasets 
requires just computing frequent itemsets union 
need determine frequency itemsets dataset frequent dataset 
addresses problems 
provide simple mechanism specifying mining queries multiple datasets 
representing queries algebra developing set transformation optimization techniques establish approach optimizing queries 
specifically context frequent itemset mining core data mining operation 
algorithms frequent itemset mining formed basis number mining problems including association mining correlations mining mining sequential emerging patterns 
summarize tions sql mechanism querying frequent itemsets multiple datasets 
establish algebra queries 
introduce new operators develop number transformations algebra enable aggressive optimizations 
heuristic algorithms finding efficient query plans 
evaluate query optimization techniques real synthetic datasets demonstrate order magnitude performance gains compared naive execution 
rest organized follows 
section describe scenarios queries multiple datasets arise 
section query framework 
section establish algebra class queries interested 
overview query optimization section 
details transformations query plan generation considered section 
experimental evaluation section 
compare related research efforts section conclude section 
motivating examples motivate facilitate study consider scenarios list examples kind queries framework targets 
mining data warehouse nation wide store consider store branches new jersey new york california respectively 
maintains database week retail transactions 
understand geographical factors impact shopping patterns queries type asked find itemsets frequent support level stores 
find itemsets frequent support level store 
find itemsets frequent support level stores east coast infrequent support west coast store 
finding signature itemsets network intrusion signature detection system frequent itemsets serve patterns signal known attacks 
suppose tcpdump dataset contains tcp packet information different network intrusion attacks 
split available data datasets dataset corresponding intrusion type normal dataset corresponding situation intrusion occurring 
queries type capture signature patterns find itemsets frequent support level intrusion datasets infrequent support normal dataset 
find itemsets frequent support level intrusion datasets infrequent support normal dataset 
find itemsets frequent support level intrusion datasets infrequent support datasets 
goals 
want systematic simple way expressing queries 
second want able optimize queries 
sql extensions mining multiple datasets stated earlier research projects proposed database language extensions expressing mining operations including finding frequent itemsets 
provide convenient basis expressing optimizing frequent itemset computations multiple datasets 
section introduce new approach querying frequent itemsets multiple datasets 
approach involves virtual table sql queries partially materialize virtual table 
set datasets targeting 
comprises transactions set items 
datasets homogeneous item identical name different datasets 
set possible items datasets 
define schema table schema column attribute stores possible itemsets power set column attribute stores frequency itemsets dataset example consider transaction datasets shown table 
set distinct items datasets table contains portion table datasets dataset dataset items items table 
datasets table 
table datasets real scenarios frequent itemset mining applied number distinct itemsets easily hundreds thousands 
consequently total number itemsets large table mate stored 
table virtual table logical view 
query partially materialize virtual frequency table format select frequency condition condition defined follows 
conditions 

conditions conditions 

condition condition 
query format set allowable conditions express rich class queries 
number infrequent itemsets single dataset usually larger number frequent itemsets enumerating infrequent itemsets computing frequencies extremely expensive 
avoid generating large number infrequent itemsets require query involving infrequent itemsets dataset constrained query involving frequent itemsets 
formalized admissible condition query 
formally considered positive predicate considered negative predicate 
condi tion mapped logical formula transformed disjunctive normal form dnf 
conjunctive clause involves operation predicates 
define definition conjunctive clause constrained includes positive predicate 
definition condition admissible conjunctive clause dnf format constrained 
example condition query datasets admissible 
table conjunctive clause constrained 
rest focus queries admissible conditions 
algebra queries previous section introduced query format expressing frequent itemset operations multiple datasets 
section develops algebra formulation processing queries 
definition view table 
view table table subset rows columns table contains column attributes exact frequency itemset replaced null value denoted 
define basic operators generate simple views table 

frequent itemset mining operator computes frequent itemset single dataset sup port level returns set tuples comprising itemsets frequency dataset 
negative frequent itemset mining operator computes itemsets support level power set formally assuming column attributes projection 
counting operator counts frequency itemset set dataset simplify evaluation operator defined set satisfies closure property itemset subsets note operator discussed generates simple views table 
table shows examples basic operators datasets shown table define operations combine views table 
views table 
projections attribute define operations 
intersection defined table 
basic operators table table 
intersection union operation operation find itemsets common set report frequency count itemsets datasets included done essentially join attribute standard database join operation important difference 
column common merged 
merging columns actual count preferred null value 

union defined operation find itemsets set take 
report frequency count itemsets datasets null inserted entries values available note results operations views table 
table provides examples operations 
definitions operations easily prove lemma operations intersection union satisfy associative commutative distributive properties 
discuss query modeled operators operations 
consider query condition stated earlier condition restated dnf form conjunctive clauses formally positive predicate replace opera tor similarly replace negative predicate represent query computed intersection operations 
captured condition operators operations defined 
particular issue needs addressed 
table con tain null values 
example table 
correctly evaluate original query null value itemset needs replaced actual frequency 
done applying counting operator defined 
turns modified version query better capture intentions user avoid costs associated counting operators 
null value itemset suggests itemset infrequent respect specified support level 
cases user simply interested knowing itemset infrequent particular dataset may need know specific frequency value 
introduce new notation purpose 
select clause original query replacing denotes null value acceptable itemset infrequent 
significance query evaluation counting operator required 
queries generalized follows select frequency condition general query condition captured expression result expressed denoted set datasets appearing select clause nota tion minimal extension satisfies closure property 
query optimization overview section gives overview issues involved correctly efficiently evaluating query form defined previous section 
facilitate discussion query denoted running example 
select frequency query involves finding itemsets frequent support level datasets infrequent support datasets vise versa 
dnf form condition expressed answering set query expressed suggested expression naive method evaluate query needs invoke operator times counting operator 
note neg ative frequent itemset mining operator im plemented frequent itemset mining operator result view need materialized order evaluate query 
reason follows 
recall conjunctive clause dnf format admissible condition contains positive predicate 
negative frequent itemset mining operator intersect frequent itemset mining operator operation ated applying property efficiently evalu consider costs associated evaluating expression opportunities optimizing 
observation costs operators typically higher union intersection op erations 
need focus operators optimization process 
consider naive evaluation key observation large fraction computation repetitive unnecessary repetitive computation imply finding frequency itemset dataset due different mining operators 
ex ample computation repetitive 
evaluated unnecessary computation imply find ing frequency itemsets appear result example computation frequency itemset set dataset unnecessary 
optimizing query evaluation process goal try remove repetitive unnecessary computations 
done introducing new operators containing relations respectively 
discussed subsections 
new operators reduce unnecessary computation new operators introduced 

frequent itemset mining operator constraints finds itemsets frequent support appears set dataset set itemsets satisfies closure property 
operator reports frequency itemsets formally table computes view typical scenario operator helps remove essary computation follows 
suppose frequent itemset operator intersects view table projection view attribute operator pushes set frequent itemset generation procedure serves search space frequent itemset generation 
unnecessary computation itemsets saved 

group frequent itemset mining operator finds itemsets frequent dataset support reports frequency datasets 
formally computes view table basic idea operator follows 
frequency count datasets carried parallel 
supersets itemset determined infrequent datasets pruned 
example illustrate operators 
consider view table applying operator evaluate intersect compared naive method evaluation reduces unnecessary costs computation dataset dataset dataset unnecessary 
applying operator view evaluated unnecessary computation involved 
computation itemsets set dataset repetitive 
containing relation important tool remove repetitive computation containing relation sets frequent itemsets 
containing relation follows contains frequent itemsets available invocation second avoided 
relatively inexpensive selection operator denoted applied 
formally containing relations extended new operators revisit running example 
view relation invocation mining operator dataset required 
need invocations operator method removes repetitive computation due operator operators referred optimization rr remove redundant 
noted repetitive computation due operator removed unnecessary computation involved 
overview query plan generation discussion previous subsections focused removing unnecessary repetitive computations respectively 
considered independently 
generating efficient plan evaluating query important consider 
example shown removing unnecessary computation introduce repetitive computation vice versa 
clearly query optimization challenging task 
cases removing unnecessary repetitive computation query evaluation possible 
particularly negative frequent itemset mining operator counting operator occur query finding efficient query plan difficult 
section systematic approach finding efficient query plans 
approach includes steps 

transformations step removes negative frequent itemset mining operator counting operator format referred standard form 
table formulation standard form encoded table 
table column represents conjunctive clause condition row represents dataset 
cell table contains predicate appears condition needs evaluated 
query evaluation process depicted coloring scheme table 

query plan generation efficient query plans generated help coloring scheme table 
query transformation evaluation optimization section presents approach query plan generation 
transformations introduced subsection 
table coloring scheme discussed subsection 
subsection presents algorithms generating efficient query plans 
transformations query optimization introduce transformations remove negative frequent itemsets operator counting operator replace referred standard form 
operators 
stated earlier transformed transformation removing counting operator transformation takes steps 
step dataset suggests counting operator needed add boolean clause conjunctive clause dnf format condition generate new condition denoted clearly new condition boolean clauses dataset may appear single conjunctive clause 
second step remove redundant boolean clauses rule 
boolean clause new positive new dropped boolean clause new negative negative boolean clause dropped 
construct corresponding condition second step apply selection operator condi tion get formally illustrate transformation running example 
set includes dataset step new condition second step condition final step construct answering set transformation removing negative frequent itemset operator transformation lemma 
lemma condition ing condition set satisfy note value treated detailed proof omitted correctness lemma observed fact lemma suggests negative frequent itemset operator removed applying union intersection selection operator 
applying lemma negative frequent itemset operator dropped table 
table query denote contain sets frequent itemsets equality see selection operator dropped outside selection operator 
sum transformation removes negative frequent itemset mining operator apply ing equality dropping selection operator conjunctive clause transformations entire computation cost evaluate query shifted compute simplify discussion treat computing stance generalized problem evaluating expression example unified query evaluation scheme subsection describes general scheme query evaluation standard form answering set queries 
shown previous subsection applying optimizations transformations listed standard query form number distinct datasets appear depict query evaluation problem table corresponds dataset column corresponds clause appears cell th column th row cell empty 
example table columns shown table 
rows introduce notion necessary information nonempty cell 
cell necessary information formally defined rows columns 
row table intuitively set needs computed evaluate cell table 
capture evaluation process query simple coloring scheme cells table 
initially cells black 
necessary information cell available superset available cell colored red 
clearly query evaluation process complete non empty cells colored red 
facilitate discussion define chain sets row dataset table 
suppose distinct support levels appearing row construct sets include cells row support larger equal formally example row dataset table corresponding chain sets query support levels easy see chain containing relation 
query evaluation process proceeds steps 
step non empty cells colored red 
stage suppose column cells colored red black 
information available stage denoted operators look color table 
mining operator fixed dataset support level consider set frequent itemsets maximally provide information cells color 
frequent mining operator rank sequence support levels row corre sponding set invocation frequent mining operator dataset support turn cell row column appears set red 
coloring occur independent current coloring table frequent mining operator constraint rank sequence support levels row corresponding set coloring im operator dependent current coloring table set columns meet conditions set cell colored red cell row black 
set frequent itemsets extracted columns applying operator dataset support set cells row column appears turn red 
group frequent itemset mining operator invoking operator independent coloring table 
table 
colored table query dataset correspond row support rank row correspond set invoking operator turn cell rectangle defined consider applying consecutively initially black colored table query operator turn cells red second operator turn cells red third operator turn cells right bottom rectangle defined red 
table shows resulting colored table 
formulation query evaluation problem converted problem coloring table different operators different order color entire table red 
different costs associated 
subsection addresses problem finding efficient query evaluation plans 
new query plans table coloring formulation previous subsection discuss approaches finding efficient query evaluation plan 
key difficulty optimization process hard associate cost functions operators 
aware research predicting running time specific mining algorithm dataset 
operator introduced complicates performance vary depending status table 
set heuristics greedy algorithms purpose 
algorithms operators 
describe algorithm exploits operator 
constraint operator constraint mining operator helps reduce computational cost follows 
stage suppose need color cell long red cell available column operator 
algorithms aggressively operator 
order apply operator query plan needs split phases phase operators column red cell 
second phase operators compute non empty cells table 
red 
approach involves heuristics minimize costs phases 
approach phase understand complexity optimizing cost phase assume know cost operator goal find set operations cost coloring columns table 
problem generalized formulated follows 
set set cost function corresponds chain set table need find subset cover cost 
generalized set covering problem np hard 
note case row needs tion operator due containing relation 
enumerate coloring schemes find minimal cost time complexity 
number rows columns respectively table number different support levels row practice size table usually small enumeration done high cost 
problem precise cost functions available 
heuristic approach observation repetitive computation due operator involved phase 
solely focus reducing unnecessary computation 
natural heuristic minimizing unnecessary computation support level 
single dataset higher support level operator implies lower unnecessary computation 
implementation 
input table phase coloring algorithm find datasets corresponding rows black cells row find lowest support level black cells row invoke operator lowest support level 
rows operator invoked decreasing order support level operator 
algorithm remove red cells chain set find non empty chain set highest support invoke operator color set remove new red cells chain set repeat steps cells colored 

algorithms phase approach phase greedy algorithms algorithm algorithm listed 
algorithm tries reduce repetitive computation invoking operator dataset 
frequency itemset input table coloring algorithm build collection candidate sets running enumeration algorithm operator candidate set corresponding chain set exists chain set equivalent transform repeat step see set aggregated operation select set transformed candidate sets heuristic average size parameter set operation 

gf operator phase counted times dataset operator phase second operator phase 
unnecessary computation involved operator picks lowest support level dataset 
second algorithm targets unnecessary computation support level operator smallest possible set constraint itemset generation 
repetitive computation generated itemset computed times dataset 
consider query combining phase phase algorithm gives query plan 
second algorithm gives query plan 
see query plans reduce costs aggressively utilizing available information operator 
group operator group mining operator help remove essary computation due operator 
exam ple suppose generated phase 
way col umn covered unnecessary computation set saved 
dataset query conditions cset table 
test queries experiments operator changes phase method coloring cell column 
finding operations cover column need find operations meet goal 
algorithm described uses operator efficient way 
results query plan example query experimental evaluation section reports series experiments conducted demonstrate efficacy optimization transformation techniques developed 
particularly interested questions 
performance gains new mining operators key factors impacting level gain 

compared naive evaluation method performance gains obtained different optimizations new query plans generated algorithms 
initially briefly describe new operators introduced implemented 
implementation operators operators query evaluation frequent mining operator counting operator frequent itemset constraints operator group frequent itemset operator 
experimental study borgelt implementation known apriori algorithm frequent mining operator 
operators derived follows counting operator initially set itemsets organized prefix tree node corresponds itemset 
single pass dataset taken project transaction prefix tree depthfirst traversal 
frequent itemset mining operator constraints hash table 
processing similar frequent itemset mining operator exception candidate initially set itemsets put query naive orr cf cf gf table 
performance seconds datasets query naive orr cf gf query naive orr cf cf gf table 
performance seconds quest datasets query parameters query naive orr cf cf gf dataset table 
performance seconds darpa datasets generation stage 
placing itemset candidate table 
performance seconds quest datasets query parameters set subsets need frequent itemset needs hash table 
group frequent itemset mining operator parameter specifies support level differences implementation operator implementation common frequent mining operator 
node representing itemset prefix tree count field dataset second counts dataset updated independently 
candidate generation stage itemset treated candidate set subsets frequent dataset datasets distinct itemsets 
neptune smurf satan normal datasets contain records respectively 
ibm quest third group datasets represents market basket scenario derived ibm quest synthetic datasets 
datasets dataset dataset generated dataset perturbation 
number items transactions average size large itemsets number distinct items 
perturbation randomly change group items items probability 
datasets dataset dataset similarly generated dataset 
total experiments conducted groups data distinct items datasets comprising different datasets 
contains transactions 
group datasets derived census micro data provides information individuals households 
datasets comprises records corresponding new york new jersey california washington states respectively 
record datasets attributes 
discretizing numerical attributes datasets total distinct items 
darpa intrusion detection second group datasets derived weeks tcpdump data darpa data sets 
datasets include data frequently occurring intrusions neptune smurf satan 
denial service attacks dos type probe 
additional dataset includes data normal situation intrusion 
transaction datasets attributes corresponding fields tcp packets 
discretizing numerical attributes total test queries experiments different queries listed table 
queries applicable datasets new york new jersey california washington datasets labeled datasets respectively 
queries correspond queries motivating example finding signature itemsets network intrusion section 
neptune smurf satan normal datasets labeled datasets respectively 
table specified 
query requires different support levels evaluation ibm quest dataset queries 
experiments different query plans implemented query 
exact number depended applicability specific optimization strategies query 
query plans follows query query times times 
naive naive evaluation method 

orr applying optimization rr transformation remove negative predicate 

cf applying constraint frequent itemset mining operator algorithm 
cf applying constraint frequent itemset mining operator algorithm 
gf applying group frequent itemset mining operator algorithm phase algorithm phase 
experimental results subsection reports results obtained 
experiments performed mhz pentium iii machine mb main memory 
table presents running time queries datasets 
table shows results queries darpa datasets 
queries quest synthetic datasets results tables 
query executed different pairs support levels 
queries mainly show operators reduce evaluation cost 
operator amounts average times speedup real synthetic datasets 
speedups higher operator applied operator performs better operator queries gains average benefit optimiza times speedup real datasets datasets 
times speedup synthetic queries tion rr able operator 
orr versions achieve times speedup cases performs better 
query plan cf achieve additional speedup 
test cases perform little better 
suggests phase reducing repetitive computation important 
query optimized removing negative predicate operators applied 
results query give rise question gf query plan perform better plan quest datasets performs better gf datasets 
related issue depending datasets queries performance gains operators vary significantly 
example difference speedup varies experiments 
analyzing detailed cost query believe key factors impacting performance gains operators ratio size intersection set size set generated directly common frequent itemset mining operator 
ratio gain get operator reducing unnecessary computation lesser repetitive computation introduced 
exam ple query datasets size intersection set times smaller total size sets frequent itemsets 
query quest synthetic datasets size intersection set times smaller total size sets frequent itemsets 
summarize new query result improved performance provided applicable query 
experiments show improvement ranging factor 
size intersection set significant factor impacting perfor mance gains operators 
related research conducted provide database support mining operations 
han meo imielinski colleagues proposed extensions database query languages support mining tasks 
sarawagi agrawal chaudhuri colleagues studied implementing apriori association mining algorithm decision tree construction respectively database system 
atlas applies user defined functions udfs express data mining tasks 
efforts focus mining single dataset relatively simple conditions 
number constraint frequent itemset mining algorithms developed additional conditions prune search space 
algorithms efficiently answer queries conditions queries corresponds set frequent itemsets 
directly reduce search space methods 
developed systematic approach finding efficient query plans answering queries 
raedt colleagues studied generalized inductive query evaluation problem 
queries target multiple datasets focus algorithmic aspects apply version space tree answer queries generalized monotone anti monotone predicates 
comparison interested answering queries involving frequency predicates efficiently 
developed table approach generate efficient query plans 
research different query flocks 
target complex query conditions allow single predicate involving frequency single dataset 
multi relational data mining focused designing efficient algorithms mine single dataset materialized multi relation database system 
number researchers developed techniques mining difference contrast sets datasets 
goal develop efficient algorithms finding difference primarily focused analyzing datasets time 
comparison provided general framework allowing users compare analyze patterns multiple datasets 
techniques part query optimization scheme users need aware new algorithms techniques speedup tasks 
driven basic observations 
analyzing comparing patterns multiple datasets critical applications data mining 
second desirable provide support tasks part database data warehouse requiring users aware specific algorithms optimize queries 
systematic approach expressing optimizing frequent itemset queries involve complex conditions multiple datasets 
specifically proposed sql mechanism established algebra queries 
developed number new optimizations new operators transformations heuristic algorithms finding query plans reduced execution costs 
experiments demonstrated order magnitude performance gains real synthetic datasets 
believe provided important step building integrated powerful efficient 
concentrate issues remain open 
techniques extended support multiple query optimization problem independent queries optimized simultaneously incrementally 
second techniques need modifications dealing evolving datasets temporal order datasets 
third providing cost functions mining operators open important issue 
fourth implementing new mining operators efficiently needs 
research needed incorporate conditions defined constraint itemsets mining apply mining operators maximal frequent itemset operator 
integrated public microdata series 
www umn edu usa index html 
agrawal srikant 
fast algorithms mining association rules 
proc 
int 
conf 
large databases vldb pages santiago chile september 
stephen bay michael pazzani 
detecting group differences mining contrast sets 
data min 
knowl 
discov 
hendrik blockeel mich le sebag 
scalability efficiency multi relational data mining 
sigkdd 

borgelt 
apriori implementation 
fuzzy cs uni magdeburg de borgelt software 
version 
cristian johannes gehrke daniel kifer walker white 
dual pruning algorithm itemsets constraints 
proceedings eighth acm sigkdd international conference knowledge discovery data mining pages 

monotone data mining languages 
proc 
international workshop database programming languages dbpl pages 
surajit chaudhuri usama fayyad jeff 
scalable classification sql databases 
proceedings th international conference data engineering march sydney pages 
ieee computer society 
thomas cormen charles leiserson ronald rivest 
algorithms 
mcgraw hill 
luc de raedt 
perspective inductive databases 
sigkdd 

dong li 
efficient mining emerging patterns discovering trends differences 
proceedings fifth acm sigkdd international conference knowledge discovery data mining pages 
sa zeroski 
multi relational data mining 
sigkdd 

pedreschi turini 
experiences logic knowledge discovery support environment 
proc 
acm sigmod workshop research issues data mining knowledge discovery dmkd 
han fu wang koperski zaiane 
data mining query language relational databases 
proc 
sigmod workshop research issues data mining knowledge discovery dmkd pages montreal canada jun 
han pei yin 
mining frequent patterns candidate generation 
proceedings acm sigmod conference management data 
jiawei han laks lakshmanan raymond ng 
constraint multidimensional data mining 
computer 
imielinski 
query language database mining 
data mining knowledge discovery pages 
tomasz imielinski heikki mannila 
database perspective knowledge discovery 
commun 
acm 
johnson laks lakshmanan raymond ng 
model algebra unified data mining 
proceedings conference large databases vldb 
daniel kifer johannes gehrke cristian walker white 
quickly find witness 
proceedings second acm sigmod sigact sigart symposium principles database systems pages 
stefan kramer luc de raedt christoph 
molecular feature mining hiv data 
proceedings seventh acm sigkdd international conference knowledge discovery data mining pages 
laks lakshmanan raymond ng jiawei han alex pang 
optimization constrained frequent set queries variable constraints 
proceedings acm sigmod international conference management data pages 
dan lee luc de raedt 
algebra inductive query evaluation 
proc 
third ieee international conference data mining icdm pages melbourne florida usa november 
meo psaila ceri 
new sql operator mining association rules 
proc 
international conference large data bases vldb pages bombay india 
raymond ng laks lakshmanan jiawei han alex pang 
exploratory mining pruning optimizations constrained associations rules 
proceedings acm sigmod international conference management data pages 
parthasarathy li panda 
nic intrusion detection 
proceedings ninth acm sigkdd international conference knowledge discovery data mining pages 
matthew srinivasan parthasarathy chao wang veloso wagner jr mining frequent itemsets distributed dynamic databases 
technical report department computer science engineering osu 
jian pei jiawei han laks lakshmanan 
mining frequent item sets convertible constraints 
proceedings th international conference data engineering pages 
chang shing wang sheng ma joseph hellerstein 
discovery multiattribute data user defined constraints 
sigkdd 

luc de raedt manfred jaeger dan lee heikki mannila 
theory inductive query answering extended 
proc 
ieee international conference data mining icdm pages japan december 
sarawagi thomas agrawal 
integrating association rule mining relational database systems alternatives implications 
proceedings acm sigmod international conference management data 
ramakrishnan srikant vu rakesh agrawal 
mining association rules item constraints 
david heckerman heikki mannila pregibon uthurusamy editors proc 
rd int 
conf 
knowledge discovery data mining kdd pages 
dick tsur jeffrey ullman serge abiteboul chris clifton rajeev motwani nestorov rosenthal 
query flocks generalization association rule mining 
proceedings acm sigmod international conference management data pages 
ullman widom 
course database systems 
prentice hall upper saddle river new jersey second edition 
geoffrey webb butler douglas 
detecting differences groups 
proceedings ninth acm sigkdd international conference knowledge discovery data mining pages 
yin han yang yu 
crossmine efficient classification multiple database relations 
proc 
int 
conf 
data engineering icde boston ma march 
law luo wang 
atlas turing complete extension sql data mining applications streams 
posters acm sigmod international conference management data 
