aspect mining clone class metrics outlines clone detection results filtered useful aspect candidates remain 
particular goal identify aspect candidates interesting purpose improving maintainability 
reach goal clone class metrics defined measure known maintainability problems code duplication code scattering 
subsequently clone class metrics combined grading scheme designed identify interesting clone classes purpose improving maintainability aspects 

large scale industrial software applications inherently complex separation concerns applications indispensable 
unfortunately insight reveals current means separation concerns functional decomposition object oriented programming sufficient 
matter large applications decomposed current means functionality typically called crosscutting concerns fit chosen decomposition 
result implementations crosscutting concerns scattered entire system tangled code 
obviously consequences maintenance system evolution dire 
aspect oriented software development aosd proposed improved means separation concerns 
aspect oriented programming languages add abstraction mechanism called aspect existing object oriented programming languages 
mechanism allows developer capture crosscutting concerns modular way 
order new feature code maintainable existing applications written ordinary programming languages transformed aspect oriented applications 
scattered tangled code implementing crosscutting concerns identified subsequently refactored aspects 
centrum voor wiskunde en informatica box gb amsterdam netherlands cwi nl identifying crosscutting concerns important part process referred aspect mining 
goals aspect mining identify opportunities transforming parts code application aspect oriented code 
aspects specifically designed deal crosscutting concerns aspect mining naturally focused crosscutting concerns 
previous demonstrated clone detection techniques identify code fragments belong relevant crosscutting concerns 
encouraging results challenged apply clone detection techniques field aspect mining 
words clone detection results find candidate aspects 
particular identify aspects applied maintainability system improved 
discuss possible approach application clone detection aspect mining 
basic idea develop method filter output clone detector called clone classes 
observations earlier case study propose number clone class metrics 
metrics attach grade clone class indicates relevant clone class aspect mining process 
clone classes score threshold value filtered hopefully relevant classes remain 
furthermore metrics reflect expectations aspect mining find aspects improve maintainability system reducing amount scattering code duplication 
sections give short overview existing aspect mining clone detection techniques respectively 
section describes system case study crosscutting concerns considered 
additionally mention earlier results 
clone class metrics described section initial results discussion 
different flavours aspects exists aspect oriented paradigm aspect mining target 

aspect mining aspect mining typically described specialised reverse engineering process say legacy systems source code investigated mined order discover parts system represented aspects 
knowledge goals including reengineering program understanding 
tools existence may help automate process 
aspect mining techniques vary mainly kind information extract legacy system 
marin calculate fan metric methods system 
shepherd perform pdg clone detection 
breu krinke generate execution traces identify recurring execution relations 
mens group identifiers concept analysis 
tonella generate program traces cases employ concept analysis discover concepts computational units implemented multiple modules contribute multiple cases 

clone detection clone detection techniques attempt finding duplicated code may undergone minor changes afterward 
typical motivation clone detection factor copy paste adapt code replace single procedure 
clone detection techniques described implemented text techniques perform little transformation raw source code attempting detect identical similar sequences lines code 
typically white space comments ignored 
token techniques apply lexical analysis tokenization source code subsequently tokens basis clone detection 
ast techniques parsers obtain syntactical representation source code typically syntax tree ast 
clone detection algorithms search similar subtrees ast 
pdg approaches go step obtaining source code representation high abstraction 
program dependence graphs pdgs contain information semantical nature control data flow program 
metrics techniques related hashing algorithms 
fragment program values number metrics calculated subsequently find similar fragments 

scattering parameter checking concern 
concern loc fraction error handling dynamic execution tracing function parameter checking memory allocation handling total table 
code percentages devoted various concerns kloc component 
clone detection adequacy depends application purpose 
finding crosscutting concerns completely new application area potentially requiring specialized types clone detection 

case study 
background software component called cc lines code part larger code base comprising lines code world market leader systems netherlands 
cc component responsible conversion data data structures utilities communicating components 
developers working component express feeling amount effort spent implementing boiler plate code code directly related functionality component supposed implement 
time spent dealing concerns error handling parameter checking explained 
problem limited just component selected appears nearly entire code base 
developers idiomatic approach implement crosscutting concerns applicable modules similar pieces code scattered system 
clearly large benefits code size quality comprehensibility expected concerns handled systematic controlled way 

crosscutting concerns domain expert manually marked places cc component dealing different crosscutting concerns 
line application annotated mark result line belongs concerns described concern 
error handling 
general error handling administration code responsible roughly tasks initialisation variables hold return values function calls conditional execution code depending occurrence errors administration error occurrences data structure 
tracing 
dynamic execution tracing logging values input output parameters functions facilitate debugging 
parameter checking 
responsible requirements making sure parameters type pointer checked null values dereferenced checking parameter values allowable ranges 
memory error handling 
dedicated handling errors originating memory management 
concerns comprise roughly code 
details shown table illustrates scattered nature concerns highlighting code fragments belonging parameter checking concern 
vertical bars represent files kloc component vertical bar horizontal lines pixels correspond lines source code file 
coloured lines part memory error handling concern 
concerns exhibit similarly scattered distribution 

previous results demonstrated extent clone detection techniques ast token identify crosscutting concern code 
experiment compared lines code belonging concerns described output clone detectors bauhaus ast token 
step experiment consisted obtaining socalled clone classes clone detectors 
clone class set code fragments duplicated cloned clone detector 
subsequently clone class determined lines concern covered clone class 
line concern concerns described covered clone class line occurs code fragments clone class 
final evaluation clone detection techniques consisted finding number clone classes required reach acceptable level coverage concern 
complementary evaluating clone detectors coverage experiment considered resulting precision 
ideal case clone class includes lines code belonging concerns described 
results shown clone classes include lines code 
clone classes high ratio lines compared lines belonging concern evidence clone detector suitable tool identify code particular concern 
code belonging parameter checking memory error handling concerns tends covered clone detection techniques tracing error handling code 
furthermore results showed clone classes coverage concerns tend higher precision case ast technique case token technique 

approach 
goals main goal mining aspects subsequent reengineering cc component entire source base improving maintainability 
words mining process point opportunities reengineering aspects maintainability component system improved 
scope detail validate actual maintainability improvement offered aspects 
important issue require attention aspect mining community 
aspect mining techniques designed specific purposes careful validation needed justify aspect mining techniques traditional techniques re engineering objects procedures 
furthermore comparison aspect mining techniques requires purposes techniques specified compatible 
maintainability issue current cc component entire code base duplication code belonging known crosscutting concerns 
issue explored summarised section 
validation aspects improve maintainability parameter checking concern progress 
results validation promising aspect mining purpose improving maintainability required identify parameter checking concern opportunity aspect 
additionally aspect mining technique suggest aspects concerns similar nature 

clone class metrics reach goals outlined propose employ clone detection combination set metrics filter resulting clone classes 
clone class metrics order filter clone detection results previously suggested implemented 
focus mining aspects 
order find aspects improve maintainability metrics designed capture maintainability problems source base 
duplication code known cause maintainability problems justifies clone detection techniques 
clone class metrics capture severity code duplication interesting purpose maintainability improvement 
metrics capture severity code duplication clone class higher values correspond severe cases code duplication number clones nc 
number clones included equivalent pop metric defined 
number lines nl 
number distinct lines code sloc non comment white space average clone size acs 
number lines nl divided number clones nc 
instances code duplication resolved means traditional re engineering techniques replacing clones calls procedure factors duplicated code 
metrics required differentiate simple cases code duplication fixed traditional means cases require aspects 
parameter checking concern known benefit aspects due scattered nature 
particular parameter checking concern implements requirement public function sure parameters type pointer checked null dereferenced 
turns high percentage scattered implementation covered small number clone classes 
clone classes contain clones different modules system 
metrics capture grade clone class grades 
highest graded clone classes 
notion scattering clone class higher values correspond higher amounts scattering number files nfi 
number distinct files clones occur 
number functions 
number distinct functions clones occur 
set metrics defined intended complete minimal 
clone class needs evaluated respect aspect clone class 
required consider systemwide implications re engineering clone class aspects 
regard minimality metrics defined may measure factors example nl acs nc may turn redundant 

grading clone class metrics grade attached clone class 
purpose grade give indication maintainability improvement obtained clone class re engineered aspects 
clearly large number grading schemes possible limited set metrics defined 
focus simple grading scheme grade nl consequently clone classes big nl scattered assigned high grades 
purposes maintainability improvement different grading schemes metrics may applicable 
different metrics grading schemes subject research 

initial results component described section generate initial results aspect mining process grading scheme defined 
clone classes calculated ast clone detector bauhaus toolkit minimum clone length set lines leaving settings defaults 
clone classes clone detector 
second clone class clone class metrics resulting grades calculated 
shows grades highest graded clone classes ranked grades 
observe small number clone classes high grades remaining grades near average 
purpose maintainability improvement desirable property large improvements defined grading scheme obtained aspects small number clone classes 
clone class highest grade consists large number small clones average size scattered functions 
number clones class contains code belonging error handling concern particular code responsible initialising variables error administration 
large number clones class contain similar pieces initialisation code related error handling 
reason aspect clone class probably desirable 
class anomalous result sense clone overlapping 
consists clones average clone size 
particular class cover known concerns 
clones classes cover large parts parameter checking concern 
result expected clone class metrics grading scheme designed particular concern mind 
concerns known similar particular tracing memory error handling concerns represented top 
clone classes cover parts tracing concern remaining classes cover parts memory error handling 
classes highest graded classes cover parts known crosscutting concerns 
shown clone classes contain varying amounts noise lines code belong known concerns 

outlined clone detection results filtered useful aspect candidates remain 
purpose improving maintainability component large code base number clone class metrics defined capture severity code duplication scattering clone class 
subsequently metrics combined grading scheme allows interesting clone classes pointed 
shown approach url www bauhaus stuttgart de point concern known beneficial implementation aspects 
additionally concerns similar scattered duplicated nature identified 
lies extension clone class metrics refinement grading scheme 
open issues include aspects clone class measurement impact aspect system level 
partial support received cwi project ideals hosted embedded systems institute 
brenda baker 
finding duplication near duplication large software systems 
second working conference reverse engineering wcre pages los alamitos california 
ieee computer society press 
baxter moura anna bier 
clone detection syntax trees 
proceedings international conference software maintenance icsm pages 
ieee computer society press 
silvia breu jens krinke 
aspect mining dynamic analysis 
gi trends der gesellschaft informatik volume pages bad germany may 
van deursen van 
evaluation clone detection techniques identifying crosscutting concerns 
proceedings ieee international conference software maintenance icsm 
ieee computer society press 
van deursen 
isolating crosscutting concerns embedded code 
submitted publication 
st phane ducasse matthias rieger serge demeyer 
language independent approach detecting duplicated code 
proceedings international conference software maintenance icsm pages september 
griswold kato yuan 
tool support managing dispersed aspects 
technical report cs 
jan gregor kiczales 
overcoming prevalent decomposition legacy code 
proceedings icse workshop advanced separation concerns toronto canada may 
johnson 
identifying redundancy source code fingerprints 
proceedings ibm centre advanced studies conference pages 
inoue 
token code clone detection system large scale source code 
ieee transactions software engineering july 
raghavan susan horwitz 
slicing identify duplication source code 
proceedings th international symposium static analysis pages 
springer verlag 
jens krinke 
identifying similar code program dependence graphs 
proceedings working conference reverse engineering wcre pages 
ieee computer society press october 
marin van deursen moonen 
identifying aspects fan analysis 
proceedings working conference reverse engineering wcre 
ieee computer society press november 
leblanc merlo 
experiment automatic detection function clones software system metrics 
proceedings international conference software maintenance pages 
ieee computer society press november 
murphy 
concern graphs finding describing concerns 
proc 
int 
conf 
software engineering icse 
ieee 
david gibson lori pollock 
automated mining desirable aspects 
technical report department computer information sciences university delaware newark de 
peri tarr harold ossher william harrison jr stanley sutton 
degrees separation multi dimensional separation concerns 
proceedings st international conference software engineering pages 
ieee computer society press 
tonella 
aspect mining formal concept analysis execution traces 
technical report irst may 
mens 
mining aspectual views formal concept analysis 
proceedings source code analysis manipulation scam workshop 
ieee computer society press september 
de 
jquery tool generic query code browser eclipse 
presentation eclipse oopsla 

problems creating task relevant clone detection data 
proceedings working conference reverse engineering wcre pages 
ieee computer society press 

