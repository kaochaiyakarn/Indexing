agents part problem agents solve problem danny weyns alexander elke tom koen tom holvoet department computer science leuven heverlee belgium danny weyns alexander elke tom tom holvoet cs kuleuven ac 
discuss position multi agent systems mass software development process 
basically mass provide approach solving software problems decomposing system number autonomous entities embedded environment cooperate order achieve functional non functional requirements system 
mass essence family software architectures enter software development picture design phase 
coverage abstraction identified important dimensions architectural design space mass outline practice architectural design mas 
perspective conclude critical reflection state art agent oriented methodologies 
position statement wooldridge jennings agree etzioni agents computer science ai conclude developers exploit conventional software technologies techniques possible engineer conventional 
trend agent oriented software engineering devise new entire methodologies neglecting ignoring existing practice research software engineering 
evolution suggests multi agent systems mass radically different ways developing systems unrelated existing practice research engineering complex software 
image mass important reason mass widely adopted 
strongly convinced research community mass benefit great deal allocating correct role mass mainstream software engineering positioning mass radically new paradigm software development 
essence purpose mass mass basically provide approach solving software problems decomposing system number autonomous entities embedded environment cooperate order achieve functional non functional requirements system 
mass essence family software architectures play prominent role software development process 
problem analysis biased solution strategy designer may may choose build solution mass requirements related adaptability distribution openness system may arguments designer pick multi agent system software architecture 
architecture backbone development software 
structured follows section elaborates mainstream software development practice 
section discuss position mas software development process 
section reflects state art agent oriented methodologies 
conclude section 
mainstream software development practice methodology consists modeling language software development process 
modeling language visual syntax construct models 
known modeling language unified modeling language uml 
software development process hand defines developing software 
general software development process split phases requirements analysis design implementation testing 
phases dealt sequentially waterfall methodology methodologies iterations parts phases unified software development process extreme programming methodology 
focus development process particular requirements analysis design phases 
clarify difference requirements analysis design elaborate phases 
requirements analysis phase requirements analysis analyst investigates problem domain various requirements independent solution 
analyst focusses problem purpose requirements analysis discover reach agreement system 
process eliciting prioritizing organizing requirements different stakeholders types users engineers managers users system 
requirements capabilities conditions system conform 
requirements categorized functional non functional 
functional requirements statements system captured cases 
non functional requirements statements constraints system performance reliability security 
important emphasize requirements statements system behavior system exhibit saying functionality may realized 
identification requirements important aim requirements analysis derive domain model 
domain model visual representation relevant concepts real world entities particular domain interest 
concepts shows attributes concepts associations 
domain model described terminology problem domain abstractions domain model form part vocabulary problem domain 
summarizing requirements analysis analyst investigates problem carefully omitting decisions respect solution 
pre requisite objective choice suitable architectural solution ensures requirements domain model concise simple statements system behavior structure independent particular solution 
quote roman analysis problem years 
design phase design phase designer creates solution problem driven outcome requirements analysis phase 
designer focusses problem solved 
common practice distinction design levels design phase architectural design detailed design respectively 
architectural design architectural design architecture constructed satisfy functional non functional requirements 
architecture highlevel design making decisions system built 
bass clements kazman define software architecture follows software architecture program computing system structure structures system comprise software elements externally visible properties elements relationships 
clarify definition structures 
architecture defined structures 
structure abstraction system viewpoint stakeholders 
structure consists set elements relationships 
software elements 
software elements basic building blocks structure 
structure uses specific kinds elements example process module component 
externally visible properties 
externally visible properties element represent assumptions elements element provided services performance characteristics shared resource usage 
implies architecture omits internals element considers information uses relates interacts elements 
relationships 
elements structure related elements means relationships 
different kinds relationships module uses module process synchronizes process common practice 
building architecture involves designing different structures system 
process designing specific structure architecture iterative process architect decomposes system elements relationships top fashion 
system decomposed element identified level decomposed convenient level reached start detailed design 
building architecture done scratch 
years number architectural styles developed express patterns structural organization designer 
architectural style defined description elements relation types set constraints may 
examples layered systems pipe filter blackboards 
importance 
stated important system architecture completing design architectural decisions far reaching effects hardest change 
designing architecture considered establishes main structure solution 
detailed design detailed design model system implemented produced 
detailed descriptions diagrams inner workings elements architecture necessary 
descriptions diagrams indicate software artifacts classes methods associations 
need implemented 
example choosing specific data structure encapsulated particular element architecture decision detailed design architectural decision 
software development mas wooldridge jennings developers exploit conventional software technologies techniques possible engineer mass rises question position mas respect mainstream software engineering practice 
essence mass provide approach decomposing system number autonomous entities embedded environment cooperate order achieve functional non functional requirements system 
primary contribution research practice mass proposing particular large family ways solve problems 
mas essence approach solve problems enter software development picture architectural design phase 
objective analysis problem biased solution strategy designer may may choose building solution mass requirements related adaptability distribution openness system may arguments designer pick mass solution strategy 
designer defines complete software architecture explicitly terms mas related concepts agents environment collaborations refines implementation 
obviously mas researchers convinced mass offer important advantages building software various application domains distributed problem solving collective robotics agent simulations 
strongly convinced mas research community benefit great deal allocating correct place mass mainstream software engineering positioning mass radically new paradigm software development 
mean mass loose specific properties research tracks 
mean mass deserve considered valuable family way solve problems large spectrum possible ways solve problems 
insights positioning mass respect software development partly arose cooperation industrial partner expert automating warehouse systems automated guided vehicles agvs 
requirements analysis software describes customer functional requirements jobs warehouse system take care non functional requirements performance robustness scalability 
today design software systems architecture similar different customers 
architecture setting central planner controls agvs 
joint project team envisage develop decentralized system particular type mass situated mas promise scalable resilient failure changes physical environment 
project change analysis problem 
mainly aim investigate possible advantages applying way solve problem warehouse management different architecture 
remainder section focus architectural design 
discuss architecture context mass second propose practice architectural design mass architecture mass architecture context mass typically associated agent architectures 
set agent architectures proposed time 
known examples bdi agent architecture subsumption architecture 
maes defines agent architecture agent architecture specifies agent decomposed set component modules modules interact 
total set modules interactions provide answer question sensor data current internal state agent determine actions internal state agent 
ferber defines agent architecture agent architecture characterizes internal structure principle organization arrangement various components 
mas consist agents 
mass research community growing awareness apart agents lot entities mas essential dealt explicitly 
examples explicit environment agents situated dynamic objects pheromones agent coordination 
fact mas comprises just agents imposes architectural challenges go agents internal architecture 
architecture mas addressed full extent lot confusion misunderstanding exist comprises architecture mass problem lack coverage architectures mass define coverage degree architectural description takes account constituent parts system 
lack coverage means subset essential parts mas considered architectural description neglecting important ones 
problem neglected architectural parts extremely difficult tackle design stages 
analogy design house build bathroom 
striking example way environment dealt 
second problem architectures generally provide high level problem decomposition 
architectural descriptions typically limited logical description terms interacting agents 
architectures come abstraction level appropriate detailed design 
necessary bridge gap architectural description mas implementation 
practice architectural design mas section outline approach address problems respect architecture mas described previous section 
studying problems distinguish important dimensions need considered developing architecture mass coverage abstraction 
focus coverage abstraction orthogonal dimensions architectural design space 
different architectural descriptions depicted 
represents architecture characterized high level abstraction hand wide ranging coverage hand 
example architecture environment number agents responsibilities inter relationships described logical decomposition problem 
characterized lower level abstraction limited coverage 
example architectural description tuple space interface coordination medium 
represents architecture high level abstraction intermediate coverage 
address question practice architectural design mass respect dimensional design space focus outline practice elements 
mainstream software development principle important system architecture completing design 

second mainstream software development principle refine architecture abstraction level appropriate detailed design 

important dimensions design space coverage abstraction 
applying software development principle dimension coverage imposes need full coverage architecture design fig 

architectural design space terms dimensions coverage abstraction phase 
articulated law practice architectural design mas law get full architecture mas straight 
illustrates outline practice architectural design mas 
law reflected depicting architecture wide range coverage assembled early design 
analogously applying second software development principle second dimension abstraction imposes architectures mass refined abstraction level appropriate detailed design 
articulated second law practice architectural design mas law refine architecture mas implementation 
second law reflected evolution represents process architectural refinement 
example described terms agents logical entities able perceive perform actions environment described convenient level abstraction start detailed design agents interact tuple space defined interface internals structured set interconnected components 
discussion section raises important issues questions respect architectural design mass architecture dealt explicitly 
possible motivations convince designers choose mass solution 
fig 

practice architectural design possible contra motivations 
second architecture mas comprises architecture agents 
possible architectures explicit environment 
parts mas incorporated architectural description 
reflection state art agent oriented methodologies section reflect number state art agent oriented methodologies 
focus issues scope methodology respect software development process position architecture methodology 
gaia gaia extension gaia methodology :10.1.1.10.6408
gaia suitable development open mass complex environments scope 
gaia covers analysis design phase software development process analysis phase requirements organized environmental model preliminary role interaction model set organizational rules sub organizations composing system architectural design phase specifications analysis phase structure mas organization complete preliminary role interaction models detailed design phase agent model services model identified act guidelines implementation agents activities 
requirement gaia methodology analysis phase yields preliminary role model 
goal problem analysis deliver problem description biased particular ways solve 
strong focus roles problem analysis endanger free objective choice suitable solution design phase 
architecture 
stated organizational metaphor gaia 
leads implicitly general architectural characterization mas law practice architectural design system architecture straight design 
mase stated mase supports complete software development life cycle problem description realization environment analyzing designing developing heterogeneous mass 
scope 
analysis phase mase consists sub phases capturing goals applying cases refining roles 
design phase distinguished creating agent classes constructing conversations assembling agent classes system design 
similar gaia problem description mase biased particular ways solve roles goals created analysis phase 
architecture 
mase supports architectural design selection agent types definition interactions 
coverage architectural design mase limited purely communicative agent systems 
furthermore mase fairly poor job dealing agent architectures 
internal agent architectures severe impact design system unsupported left designer 
general applicability provided component framework debatable 
prometheus prometheus describes methodology design mass methodology specifically supports bdi agents scope 
prometheus methodology consists phases system specification phase focusses identifying basic functionalities system agent system going interact environment architectural design phase determine agents interact detailed design phase looks internals agent accomplish tasks system 
prometheus claimed methodology design mas appears system specification phase boils analysis 
identifying basic functionalities system investigates problem part analysis 
architecture 
architectural design shared data objects agents identified assigned functionalities tied specifying interactions 
choice specific bdi architecture agents interwoven detailed design 
decisions agent architecture part architectural design completed entering detailed design phase 
tropos tropos agent oriented software development methodology key ideas 
notion agent related mentalistic notions goals plans phases software development early analysis actual implementation 
second methodology covers early phases requirements analysis allowing deeper understanding environment software eventually operate scope 
early requirements analysis concerned understanding problem studying organizational setting mainly focussing intentions stakeholder modeled goals 
late requirement analysis system described operational environment relevant functions qualities 
architectural design system global architecture defined terms interconnected subsystems 
detailed design deals behavior component detail 
tropos violates mainstream software development practice introducing agent related mentalistic notions requirements analysis 
severely biases problem description particular solution objective design choices case gaia mase 
architecture 
tropos architectural design set organizational architectural styles mass guide design system architecture 
summary conclude list number general remarks respect agentoriented methodologies 
state art agent oriented methodologies fail clear separation problem solved 
stated section biasing analysis problem particular way solve avoided endanger objective choice suitable architectural solution 
second methodologies number architectural decisions implicitly interwoven detailed design 
design decisions architectural decisions far reaching effects hardest change 
methodology support architectural issues explicitly full extent order facilitate construction considered architecture mas 
methodologies clearly lists requirements problems approach applied contrary applicable build favorable solution 
state art agent oriented methodologies suggest mass revolution software development neglecting ignoring existing practice research mainstream software engineering 
argued mass evolution revolution 
precisely mass provide particular approach solve problems mass enter software development picture architectural design 
conclude agent oriented methodologies fact design methodologies 
acknowledgments members networking task force research group leuven valuable discussions contribute 
word appreciation goes jim odell useful comments improve 

uml unified process object technology series addison wesley 

bass clements kazman software architecture practice sei series software engineering addison wesley 

beck extreme programming explained embrace change isbn addison wesley longman publishing 

requirements analysis tropos self referencing example days erfurt germany 

juan sterling zambonelli gaia methodology basic concepts extensions 
methodologies software engineering agent systems kluwer appear 

etzioni moving information food chain deploying softbots world wide web th national conference artificial intelligence th innovative applications artificial intelligence conference 

ferber multiagent systems distributed artificial intelligence addison wesley 

fowler analysis patterns reusable objects models isbn addison wesley longman publishing 

gamma helm johnson vlissides design patterns addison wesley 

giorgini mylopoulos pistore tropos methodology overview 
methodologies software engineering agent systems kluwer appear 

jacobson booch rumbaugh unified software development process isbn addison wesley longman publishing 

rational unified process addison wesley 

applying uml patterns object oriented analysis design isbn prentice hall 

luck inverno agent software development 
artech house 

maes agent network architecture ana sigart bulletin 

martin odell object oriented methods foundation uml edition isbn prentice hall 

padgham prometheus methodology developing intelligent agents 
proceedings third international workshop agentoriented software engineering aamas 
july bologna italy 

royce managing development large software systems concepts techniques th international conference software engineering pittsburgh pa usa acm press 

holvoet weyns agent implementation patterns proceedings oopsla workshop agent oriented methodologies henderson sellers jennings odell eds 

robinson component approach agent citeseer ist psu edu html 
third international workshop software engineering large scale multi agent systems www les inf puc rio br 
shaw garlan software architecture perspectives emerging discipline prentice hall 

weyns parunak michel holvoet ferber environments multi agent systems state art research challenges post proceedings international workshop environments multi agent systems mas new york 
appear lecture notes computer science series springer 

wood overview multiagent systems engineering methodology 
agent oriented software engineering volume lncs berlin springer january 

wooldridge jennings software engineering agents pitfalls ieee internet computing 

wooldridge jennings kinny gaia methodology agent oriented analysis design 
autonomous agents multi agent systems vol 

zambonelli jennings wooldridge developing multiagent systems gaia methodology 
acm transactions software engineering methodology vol 
