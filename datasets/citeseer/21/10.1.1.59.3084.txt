composition autonomous services distributed data flows computations david liu jun peng law gio wiederhold ram sriram ficas experimental flow infrastructure composing autonomous services supports service composition paradigm integrates loosely coupled software components 
software components processes managed independent service providers autonomous services 
ficas employs distributed data flow differs markedly centralized processing adopted current service integration frameworks corba ee soap 
distributed data flows support direct data exchanges autonomous services avoid performance bottlenecks attending centralized processing 
performance flexibility ficas improved adopting active mediation distributes computations service framework reduces amount data traffic significantly moving computations closer data 
varieties project management scheduling software aggregated ficas prototype 
demonstration establishes distributed data flow combining active mediation effective efficient centralized processing integrating large engineering software services 
ph candidate department electrical engineering stanford university stanford ca 
mail stanford edu research associate department civil environmental engineering stanford university stanford ca 
mail stanford edu professor department civil environmental engineering stanford university stanford ca 
mail law stanford edu professor computer science department stanford university stanford ca 
mail gio db stanford edu group leader manufacturing systems integration division national institute standards technology gaithersburg md 
mail sriram cme nist gov software engineering paradigm large software services decomposed cooperating components envisioned years 
paradigm software components linked integration framework form composed software applications 
software components provided processes managed independent service providers 
components clearly defined functions accessible interfaces 
components existing applications new programs developed specific tasks 
software applications wrapped autonomous services functionalities composed 
composed application called megaservice 
rapid development internet networking technologies computing environment evolving interconnected web autonomous services inside outside enterprise boundaries 
prior research addressed issue composing autonomous services 
megaservice acts central controller invoking monitoring querying terminating autonomous services 
autonomous services take turns processing data supplied megaservice return processed results megaservice 
data exchanged client server model megaservice serves central hub data traffic 
centralized data flow approach default mode current software integration frameworks corba ee microsoft net 
argue centralized data flow approach inefficient integrating large scale software services 
distributed data flow approach allows data exchanged directly services preferred coordinating composed software services 
distributed mode data communication adopted flow infrastructure composing autonomous services ficas 
ficas implemented collection software modules support construction autonomous services facilitate functional composition autonomous services conduct execution performance enhanced 
ficas addresses design concerns scalability integration management large number autonomous services service composition infrastructure performance high efficiency execution ease composition effective convenient specification service compositions application programmers 
ficas uses distributed data flows achieve better scalability performance sacrificing ease composition 
organized follows 
section gives overview ficas defines metamodel enable homogeneous access autonomous services ficas 
section describes runtime environment ficas focusing distributing data communications services 
section explores active mediation techniques distributing computations autonomous services 
section illustrates prototype ubiquitous computing environment ficas 
section summarizes findings direct data flow services discusses 
service composition infrastructures autonomous services running processes involve software applications domain data 
autonomous services composed loosely coupled fashion allow flexible integration heterogeneous systems variety domains 
significant researches service composition particularly creating uniform ways describing deploying accessing applications 
standards proposed represent processes web service bpel ws wscl daml 
intended standard service composition ficas serves implementation composing applications investigate performance implications distributed data flow framework service composition 
autonomous service metamodel ficas autonomous services specified homogeneous model promotes communication cooperation 
illustrates autonomous service metamodel consists service core input event queue output event queue input data container output data container service core represents core functionality autonomous service 
responsible performing computation input data elements generating resultant data elements 
usually wrap existing software applications service core 
events messages exchanged services control flow autonomous service executions 
asynchronous execution autonomous services achieved queues event processing 
default queuing protocol ficas fifo event messages processed order arrive 
data containers groupings input output data elements autonomous service 
input data elements fetched input data container processed service core 
generated data elements put output data container 
data containers enable autonomous services look generated data elements 
input event queue input data container output data container data flow service core output event queue controlflow ficas autonomous service metamodel autonomous services export service functionalities contained encapsulated software applications 
service functionalities differ way functionalities exported similar autonomous services 
autonomous services share common components event queues data containers 
addition interactions components largely identical 
construction autonomous services significantly simplified building common components standard module 
call module autonomous service wrapper facilitates encapsulation software applications autonomous services 
ficas autonomous service wrapper implemented java 
autonomous service wrapper provided standard module wrapping software application autonomous service simplified matter defining interface shown 
application core connects autonomous service wrapper methods 
setup method defines actions application service initialized execute method called service invoked triggering application process data containers terminate method called service terminated 
method takes parameters 
provides input data container autonomous service provides output data container autonomous service identifies flow service request belongs 
data containers flow identifier request software application look input parameters input data container generate results output data container 
public interface public boolean setup container container public boolean execute container container public boolean terminate container container class interface ficas control flow primarily concerns event processing state management service core 
data flow concerns exchange data elements data containers processing data elements service core 
component uses computational thread service core ties components coordinated entity 
autonomous service access protocol autonomous service metamodel define autonomous service access protocol asap autonomous services accessed 
asap manages control flows dataflows set events 
events exist form xml messages interact autonomous services 
hierarchical structure xml provides convenient method define composition event 
asap asynchronous nonblocking sender event wait response 
sender continues execute activities independent response event 
protocol removes barriers imposed different megaservice programming languages distribution protocols 
simplicity represent asap events abbreviated functional representations full xml representations 
key asap events related data flow scheduling listed setup service setup event initialize autonomous service prepare necessary system resources actual invocations 
reply event issued initialization autonomous service 
terminate service terminate event unconditionally terminates autonomous service 
garbage collection conducted termination process release system resources involved service instance 
reply event issued termination autonomous service 
invoke service invoke event requests autonomous service 
service core autonomous service started processing invoke event 
completion service invocation output data elements generated service core placed output data container 
addition reply event sent 
event establish data flow data containers 
event enables distribution data flows service composition infrastructure 
sender event need recipient data element 
events usually sent megaservice controller coordinates autonomous service invocations data elements exchanged directly data containers autonomous services 
support event possible distributed data flows megaservice controller generate execution plan take advantage capability 
forms implementation event 
called push case event sent 
fetches data element output data container pushes data element 
implementation called pull event sent 
pulls data element puts data element input data container 
implementations supported ficas 
components ficas service composition infrastructure ficas allows distributed software applications hide heterogeneities network platform language 
ficas built previously developed service composition infrastructure high level access interfaces multi site software focuses composition services large distributed components 
residing different computers services inherently concurrent nature long duration service execution necessitates asynchronous invocation collection results 
developed simple compositional language runtime support applications composed distributed modules 
ficas builds prior efforts compositional language supports goal ease composition 
illustrates main components ficas 
components responsible specifying compiling megaservice specifications control sequences serve inputs runtime environment 
ficas defined clas compositional language autonomous services provide application programmers necessary abstractions describe behaviors 
clas language focuses functional composition autonomous services 
clas program essentially sequential specification relationships collaborating autonomous services providing primitives schedule coordinate control flows data flows 
clas program compiled component control sequence executed runtime environment 
control sequence language platform independent providing bridge runtime environments ficas 
clas program ficas ficas controls ficas megaservice controller communication network autonomous service directory service service ficas runtime ficas architecture service software application autonomous service wrapper runtime environment ficas responsible executing control sequences 
minimum runtime consist just autonomous service service directory 
runtime environment expanded simply plugging additional autonomous services communication network registering autonomous services service directory 
directory keeps track available autonomous services infrastructure 
directory viewed logically centralized entity may implemented distributed structure 
prototype ficas system centralized directory service 
metamodel defined allow construction homogeneous autonomous services heterogeneous computing environment 
control flows coordinated megaservice controller centralized coordinator carries execution megaservice 
controller generates execution plan input control sequence follows plan coordinating control flows respective autonomous services 
controller responsible optimizing performance megaservice 
distributed data flow planning ficas megaservice controller sole responsibility managing megaservice 
execution plan controller executes schedules autonomous services managing coordinating choice timing sequence dependencies outgoing asap events 
purpose scheduling improve qualify service qos megaservice 
techniques improve qos distributed workflows proposed web service processes 
current implementation focus minimizing aggregate data communication cost services 
key characteristic ficas service model explicit separation control flow data flow separation included emerging service composition standards example bpel ws wscl daml 
idea separating data flow control flow seen distributed workflow environments 
instance exotica adopts distributed workflow execution data management distributed workflow applications 
data flow distributed workflow environment supported set loosely synchronized replicated databases direct messages 
distribution data flows traditionally control flows data flows centrally coordinated illustrated 
megaservice requests information service passes information service processing 
result service forwarded service 
central megaservice coordinates autonomous service invocations 
data flows control flows separated megaservice control serves hub data communications 
call runtime model centralized control flow centralized data flow model model 
model represents simplest form service composition runtime environment 
examples model include default usage corba ee microsoft net architecture 
service mega service service service control flow data flow service mega service service centralized distributed data flows service performance scalability issues associated model 
megaservice forward data autonomous services 
data flows indirectly extra communication traffic 
megaservice control communication bottleneck large amounts data exchanged services 
furthermore data traffic goes megaservice communication links megaservice critical system resource 
especially problematic internet environment communication links megaservice autonomous services suffer limited bandwidth 
centralized communication topology model difficult scale 
issues observed model motivate distribute data flows executions 
shows control flows data flows exhibited distributed data flow infrastructure 
megaservice inform autonomous services establish direct data flow 
instance data exchanged autonomous services service service service service going megaservice 
discuss ficas distributes data flows maintaining centralized control mechanism model 
call runtime model centralized control flow distributed data flow model cnd model 
decision retain centralized control flow hinges ease implementation management 
find difficult apply distributed control flow models effectively conduct service composition 
addition remain technical challenges convert centralized megaservice specification control sequences distributed operational code segments 
distributing data flows ficas eliminates focused redundant heavy data traffic caused forwarding megaservice 
distributed data flow model utilizes communication network autonomous services alleviates communication loads megaservice 
furthermore ficas allows computations distributed efficiently data resides doing data processed location minimal communication traffic 
planning distributed data flows optimizing placement data processing minimize data transfer subject interests distributed database systems 
query optimization distributed database systems generally requires deciding ship data perform query operations 
similar concept adopted ficas plan distributed data flows 
steps generating execution plan 
megaservice program analyzed discover data dependencies autonomous services 
data dependency graph constructed identify independent data flows 
data dependency graph megaservice controller builds execution plan megaservice 
data dependencies autonomous services analyzed program interpreted 
megaservice controller extracts statements data dependencies autonomous services 
presents example megaservice program segment shows implicit data dependencies autonomous services 
invocation service takes input outputs invocations service service respectively 
service data dependent service service 
dependencies mapped data dependency graph ddg shown 
nodes represent autonomous service invocations directed arcs represent data dependencies autonomous service invocations 
directed arc points dependent autonomous service tagged data elements exchanged pair autonomous services 
example arc invocation invocation represents invocation dependent invocation data element passed invocation invocation 
megaservice execution plan represented event dependency graph edg 
node edg contains outgoing asap event megaservice controller 
arc establishes predecessor successor relationship pair asap events 
successor asap event sent action taken predecessor asap event completed megaservice controller receives response predecessor asap event 
megaservice controller uses edg coordinate execution megaservice 
invocation nodes ddg directly mapped invoke event nodes edg 
invocation service invoke invocation service invoke invocation extract invocation extract invocation service invoke invocation extract invocation service invoke invocation extract example megaservice program segment shows mapping scheme data communications directed dependent autonomous services resulting cnd execution model 
megaservice controller functions merely coordinator asap events control data communication activities 
directed arc ddg mapped event node arcs connecting predecessor successor event nodes 
instance arc tagged ddg shown mapped service service event node edg shown 
section shows simple example service execution predecessor successor relationships 
complicated control constructs switch loop specified ficas describe variety services 
similar control constructs included service composition protocols 
example daml defines set control constructs consists sequence split split join choice unordered condition iterate repeat repeat 
invocation invocation invoke service service service invocation invocation sample ddg invoke service service service invoke service service megaservice invoke service service service edg distributed data flows performance analysis section measure performance sample megaservice supported ficas different configurations computing environment 
compare ficas centralized data flow model implementing megaservice soap 
lightweight protocol exchanging information applications distributed computing environment soap shown great potential simplifying web service composition distribution software internet 
implementations soap 
differ support class binding ease performance 
popular choices soap implementations apache soap selected implementation 
illustrates computing environment performance evaluation 
autonomous services focus data communications involved 
computational processing occurs autonomous services 
autonomous service randomly generates returns string size specified input parameter 
autonomous service takes string input immediately returns doing 
utilize autonomous services constructed 
megaservice forwards string generated autonomous service autonomous service 
megaservice designed examine impact data flow distribution 
second megaservice simply invokes autonomous service 
megaservice measure cost single service call 
autonomous services implemented soap ficas 
implemented java applications invoke services apache soap api application program interface library 
ficas autonomous services wrapped developed java library 
service cores autonomous services identical functionality soap counterparts 
specified clas programs compiled control sequences ficas environment 
executed sending control sequences megaservice controller 
size size switch lan mbps mbps mbps mbps mbps mbps test environment comparing soap ficas produces returns string value consumes string tests performed distributed computing environment 
machines configured pentium iii ghz processor mb ram running windows professional 
autonomous services run separate servers connected switch local area network lan bandwidth mbps way 
run client machine 
types network connections connect client machine servers 
connection uses lan communication bandwidth machines mbps way 
type connection resembles corporate computing environments 
second connection uses wireless link 
downloading bandwidth approximately mbps uploading bandwidth approximately mbps 
type connection resembles computing center environment servers connected high speed communication links accessed relatively slower communication links 
execution times measured different settings data volume involved 
data volume specified input parameter autonomous service 
shows measured performance client machine connected lan 
observations ficas performs worse soap data volume low 
expected explained reasons 
ficas complicated control flows soap 
ficas breaks single service call soap multiple control messages 
ficas incurs overheads initializing terminating autonomous services 
second expected apache soap developed quite time better optimized ficas terms java source codes 
performance ficas megaservice comparable soap megaservice 
similar performance incur amount data flows 
string generated autonomous service sent megaservice 
string sent autonomous service autonomous service 
slight difference execution times attributed differences control flows 
ficas outperforms soap data volume high 
soap megaservice incurs twice data flow ficas megaservice 
soap megaservice data messages send string autonomous service autonomous service megaservice controller 
ficas megaservice data message send string autonomous service autonomous service 
megaservice execution time soap soap ficas data volume kb comparison ficas soap local area network compares performance soap megaservice ficas megaservice various network settings 
lan setting access autonomous services mbps lan 
wireless setting access autonomous services slower access point 
cases communications megaservice lower bandwidth communications autonomous services 
comparing megaservice performance lan wireless settings observe execution times soap megaservice increase significantly bandwidth communications megaservice decreases 
data flows control flows go megaservice communications megaservice bottleneck system 
execution times ficas megaservice increase slightly comparing wireless lan settings 
data flows distributed autonomous services communications megaservice control flows 
control messages small compact nature control flows place little burden network 
performance megaservice barely affected 
megaservice execution time soap lan soap ficas lan ficas data volume kb megaservice performance different network configurations summarize cnd model responds better data volume large bandwidth limited communicating megaservice 
network traffic goes megaservice places heavy burden communication links 
contrast cnd distributes data flows takes advantage communication network autonomous services 
mobile classes active mediation ficas approach gains direct data communication services capability directly map incompatible sources integrate information diverse sources 
example semantic web setting expect large collection autonomous diverse providers expect service deliver results fully compatible useful services composed application may need invoke 
active mediation introduced provide client specific functionalities services viewed intended specific needs client 
define section mediation architecture supports execution mobile classes 
outline algorithm determines optimal location carry execution mobile class 
mobile classes mobile class information processing module dynamically loaded executed 
conceptually mobile class function takes input data elements performs certain operations outputs new data element 
mobile class supported ficas similar mobile agent technology 
approaches utilize executable program migrate execution machine machine heterogeneous network 
mobile agents self governing decide migrate 
hand mobile class integral part service composition framework 
mobile classes controlled megaservice management deployment easier 
mobile classes implemented general purpose programming languages 
java chosen specification language mobile classes 
java suitable specifying computational intensive tasks 
available standard libraries provide wide range computational functionalities 
second java extensive support portability 
java programs executed platform incorporates java virtual machine 
third java supports dynamic linking loading 
java class files object files executables traditional sense 
linking performed java class files loaded java virtual machine 
compiled java class mobile class dynamically loaded runtime 
mobile classes enable perform computations greater efficiency 
shows example mobile classes place type broker services conduct type conversions 
traditionally autonomous service serving type broker distributed network type brokers mediate difference data various formats 
type graph chain necessary conversions 
example automating process seen 
presents example data flows type broker architecture 
data source service represented type destination service consumes data type 
type brokers employed convert source data type type 
potentially large amount data passed type brokers 
alternatively mobile classes place type brokers handle type mediation 
forwarding data type brokers megaservice loads mobile classes autonomous services provide type mediation functions 
multiple mobile classes type mediation utilized forming network type brokers 
shown mobile classes convert data type type 
type mediation conducted source autonomous service source data type converted type 
data consumable format directly sent destination autonomous service 
mobile classes invoked source autonomous service multiple interim data transfers eliminated data traffic limited essential transmissions 
type brokers control flow data flow mobile class mobile class type mediation mobile classes type conversion type broker services mobile classes active mediation active mediator information processing engine resides source information services information clients 
incorporation active mediator allows autonomous service support execution mobile classes 
active mediator processes source information executing mobile classes specified information clients 
illustrates architecture active mediator mobile class repository mobile class autonomous service wrapper mobile class cache exception handling mobile class runtime active mediator input data container output data container active mediation architecture mobile class api library mobile class responsible loading java code mobile class 
name mobile class indicates java class file 
mobile class cache temporary storage loaded java class 
mobile class cache avoid duplicate loading mobile class 
cache looked java classes loaded 
cache occurs mobile class 
mobile class api application program interface library stores utility classes construction mobile classes convenient 
instance java development kit library provided part mobile class api library 
mobile class runtime execution engine mobile classes 
execute mobile class mobile class runtime loads java class mobile class cache invokes execute function 
runtime uses data containers autonomous service manage input output data mobile class 
parameters invoking mobile class loaded input data container megaservice controller invocation mobile class 
parameters looked supplied execute function 
result execute function put output data container utilized megaservice controller 
exception handling module provides error handling loading execution mobile classes 
placement mobile classes choice autonomous service executes mobile class affects data flows formed megaservice mobile class belongs 
placement mobile class significant impact performance megaservice 
example megaservice shown demonstrate impact 
megaservice involves autonomous services mobile class 
autonomous services ones example illustrated 
mobile class filter takes large string input filters content returns string consists th character input string 
effectively mobile class compresses content fold 
mobile class executed autonomous services involved megaservice potential placement strategies shown strategy placing mobile class filter autonomous service hosts megaservice controller construct execution plan shown 
generates data element passes megaservice 
mobile class processes megaservice result sent processing 
strategy placing mobile class filter construct execution plan shown 
generates data element processes locally mobile class 
result sent processing 
strategy placing mobile class filter construct execution plan shown 
generates data element passes 
processes locally mobile class generate result compare strategies assume performance loading executing mobile class autonomous services 
strategy requires input data element output data element transmitted megaservice autonomous services 
strategy incurs communication traffic compared strategies worst performance 
strategy strategy differ data sent autonomous services 
data element sent strategy data element sent strategy 
data element tenth size compared data element strategy incurs amount communication traffic 
strategy placement strategy best performance 
invocation invoke size invocation extract mclass filter invocation extract mbps mobile class filter switch mbps mbps produces returns string value consumes string example megaservice utilizes mobile class filter mobile class filter mega service service invocation mobile class filter mega service mega service mobile class filter placing filter megaservice placing filter placing filter data flow execution plans different placements mobile class optimal placement mobile class usually minimize data flows related autonomous services 
mobile class input data element mobile class represented pair si vi si autonomous service generates ith input data element vi volume data element 
output pair destination autonomous service result mobile class sent size data element 
observations 
sum vi remains regardless mobile class executed 
second placing mobile class autonomous service si eliminate corresponding data flow volume vi data element local autonomous service 
optimal placement mobile class autonomous service si largest aggregated vi 
shows lds largest data size algorithm selects autonomous service generates consumes largest volume data mobile class 
algorithm computes total amount data attributed unique autonomous service 
autonomous service largest data volume selected smax represents optimal placement mobile class 
smax returned output algorithm 
lds algorithm applicable input output data sizes known mobile classes 
situation output data size mobile class determined execution mobile class need estimate output data size 
view output data size mobile class function input data sizes mobile class sa sb 
function called sizing function mobile class output data size sa sb input data sizes 
sizing function may stored java byte codes mobile class repository 
megaservice controller sizing function estimate output data size running lds algorithm 
input input pairs output pair output max method max unique input output pairs max max max lds algorithm optimal mobile class placement lds algorithm assumes network links autonomous services comparable performance 
assumption hold complicated model adopted minimize aggregated time 
various network parameters topology network bandwidth network channels impact performance megaservice algorithms example see implemented ficas 
example application shown simple examples ficas suited composing autonomous services exchange large amount data 
distribution data flows mobile classes facilitate service composition improve performance megaservice 
demonstrate effectiveness ficas implement engineering service infrastructure construction project management applications 
illustrate process building service infrastructure wrapping software applications autonomous services implementing mobile classes constructing accomplish engineering tasks 
building autonomous services step building engineering service infrastructure wrap software application autonomous service 
create service core autonomous service defining interface software application 
service core linked autonomous service wrapper 
shows example wrapping application software autonomous service supports project scheduling 
service class implements methods interface 
setup method terminate method specify action performed initialization termination autonomous service 
execute method defines actions invocation autonomous service 
method starts fetching input parameters input data container 
parameter specifies service request second parameter contains input data schedule application utilized conduct scheduling 
result scheduling encapsulated data element put output data container 
service class provided input constructor class connect application autonomous service wrapper 
autonomous service built registered autonomous service directory 
registration entry specifies name ip address port number autonomous service 
registered autonomous service ready composition 
constructing mobile classes lightweight information processing routines specified mobile classes executions determined runtime 
shows sample mobile class converts data process specification language psl format microsoft excel format 
class implements interface definition provided ficas zip class library 
execute function takes argument mobile class input data psl converts data microsoft excel format returns converted data output data element 
engineering information service infrastructure mobile classes compiled byte codes stored repository accessible web 
locate mobile class attaching base url mobile class name 
instance base url mobile class repository ficas stanford edu byte codes located ficas stanford edu class 
public class service implements public boolean setup container container inf return true public boolean terminate container container inf return true public boolean execute container container inf fetch desired operation input data container string operation fetch inf operation equals reschedule fetch input schedule input data container string input fetch inf invoke conduct rescheduling string output schedule input put regenerated schedule output container put inf new setvalue output return true private string schedule string schedule invokes software process input result rescheduling returned public static void main string argv throws exception argv length system err println usage java service port return creating autonomous service new asm integer argv new service example autonomous service utilizes sample megaservice shows example megaservice utilizes multiple autonomous services mobile classes perform rescheduling project plans 
megaservice specified clas program 
autonomous services utilized megaservice handles access project models service conducts scheduling project plan displays project plan 
addition mobile class convert data psl format microsoft excel format 
megaservice compiled control sequence ficas accessible web ficas stanford edu xml 
invocation megaservice causes fetch project model rescheduled service 
update schedule stored back database shown project personnel 
look sample scenario demonstrate engineering service infrastructure helps facilitate personnel different functional groups conduct collaborations 
model ceiling project part construction disney concert hall test case 
shows view scheduling information 
project data stored relational database 
data shared relational data model proprietary data model 
project schedule reviewed handheld palm device directly access relational database 
capability helpful site personnel construction project 
suppose duration activity roof element hypothetically changed day days shown 
change remotely palm device 
update trigger megaservice updates project schedule 
part megaservice project schedule automatically updated excel notify project personnel shown 
updated schedule retrieved relational database ms project 
shows activity updated dependent activities updated 
example infrastructure involves software applications exchange large amount data 
applications conveniently wrapped autonomous services 
computational tasks easily specified mobile classes 
engineering processes systematically defined 
example demonstrates ficas model suitable composition large scale autonomous services 
public class implements public execute vector params fetch input data psl format string params convert input data excel format string excel convert psl excel return converted data excel format return new setvalue excel private string convert psl excel string 
example mobile class converts data psl microsoft excel ficas stanford edu psl svc setup svc setup service excel svc setup fetch project data database psl psl svc invoke psl original schedule psl extract reschedule project svc invoke reschedule original schedule updated schedule extract store updated project data database oracle psl svc invoke oracle updated schedule status oracle extract populate excel service updated project data excel data mclass updated schedule excel excel svc invoke populate excel data psl svc terminate svc terminate excel svc terminate sample megaservice specified clas reviewing project schedule med 
history schedule review schedule appropriate updates changing value duration duration 
update change duration activity erect roof element day days med 
history schedule review schedule appropriate updates changing value duration duration 
update revising project schedule palm device reviewing updated project schedule microsoft excel reviewing updated schedule microsoft project current implementation ficas sophisticated concurrent control fully supported 
process sends write request project data data locked write requests 
read requests permitted 
improve system performance flexibility granular lock may implemented 
summary investigates integration services communicate large volumes data 
traditionally megaservice central hub data traffic autonomous services process data supplied megaservice return processed results megaservice 
centralized data flow approach shown efficient distributed data flow approach allows direct data exchange autonomous services 
distribution data enables computations effectively distributed 
ficas service composition infrastructure utilizes distributed data flow approach 
define ficas metamodel autonomous services services accessed composed homogeneous manner 
metamodel leads asap protocol separates data communications control processing autonomous services 
autonomous services conforming asap protocol coordinated centralized controller data communications distributed services 
analysis shows distribution data communications improves megaservice performance especially large volumes data exchanged services 
distributed data flow approach eliminates bottleneck communication links megaservice advantage communication network services 
introduce active mediation mobile classes enable computations distributed autonomous service 
mobile class implements specific information processing functionality dynamically loaded autonomous service process data local autonomous service 
discuss autonomous services support execution mobile classes active mediator 
moving computations closer data significantly reduce amount data traffic megaservice 
algorithm determine optimal location execution mobile classes discussed 
example information service infrastructure construction project management application described illustrate process services built integrated ficas 
legacy engineering applications tied form integrated processes 
example shows ficas distributed data flow approach suited integrating large scale engineering services 
partially sponsored center integrated facility engineering stanford university stanford graduate fellowship air force product engineering program national institute standards technology nist 
product engineering program gets current support nist systems integration manufacturing applications program 
authors acknowledge equipment intel support research 
ceiling project data provided professor martin fischer research group stanford university wrappers various software developed jim cheng contribution greatly acknowledged 
authors gordon lyon edward nist anonymous reviewers valuable suggestions substantially improved exposition 
apache soap apache software foundation xml apache org soap 
alonso mohan 
distributed data management workflow environments proceedings th international workshop research issues data engineering ride birmingham england 
andrews curbera goland klein leymann liu roller smith thatte weerawarana 
bpel ws specification business process execution language web services version www ibm com developerworks library ws bpel 
ankolekar burstein hobbs lassila martin mcilraith narayanan paolucci payne sycara zeng 
daml semantic markup web services proceedings international semantic web working symposium stanford ca 
arnold gosling holmes 
java programming language addison wesley boston ma 
banerji bartolini karp kuno lemon sharma williams 
web services conversation language wscl www org tr note wscl 
jain wiederhold 
language system composing autonomous heterogeneous distributed proceedings dexa international workshop large scale software composition vienna austria 
berners lee hendler lassila 
semantic web scientific american 
green haase stearns 
ee tutorial addison wesley professional boston ma 
box layman mendelsohn nielsen thatte 
simple object access protocol soap note www org tr soap 
gray kotz cybenko rus 
mobile agents distributed information retrieval intelligent information agents klusch editor 
springer verlag 
cardelli 
language distributed scope computing systems 
cardoso miller sheth arnold 
modeling quality service workflows web service processes submitted vldb journal chief cs uga edu jam qos pdf 
ceri pernici wiederhold 
distributed database design methodologies proceedings ieee 
chandrasekaran madden 
ninja paths architecture composing services wide area networks ninja cs berkeley edu dist papers path ps gz 
curbera tai weerawarana 
step web services communications acm 
davis 
latency performance soap implementations proceedings nd ieee acm international symposium cluster computing grid ccgrid berlin germany pp 

douglis ousterhout 
transparent process migration design alternative sprite implementation software practice experience 
gray 
agent tcl flexible secure mobile agent system proceedings fourth annual tcl tk workshop tcl monterey ca pp 

leblanc 
distributed eiffel language programming multi granular objects proceedings th international conference computer languages san francisco ca 
hendler berners lee miller 
integrating applications semantic web journal institute electrical engineers japan 

programmable web web services provides building blocks microsoft net framework msdn magazine msdn microsoft com issues asp 
liu 
distributed data flow model composing software services ph thesis department electrical engineering stanford university stanford ca 
liu cheng law wiederhold sriram 
engineering information service infrastructure ubiquitous computing journal computing civil engineering 
liu sample peng law wiederhold 
active mediation technology service composition proceedings workshop component business information systems engineering geneva switzerland 
mohan alonso kamath 
exotica research perspective workflow management systems data engineering 

implementing distributed services mobile code case messenger environment proceedings iasted international conference parallel distributed systems austria pp 

neuhold walter 
overview architecture distributed data base system proceedings international symposium distributed data bases berlin germany pp 


mediating diverse data formats ph thesis computer science department carnegie mellon university pittsburgh pa 
omg 
common object request broker architecture specification version object management group report 
gruninger valois lee 
process specification language psl overview version specification national institute standards technology gaithersburg md report 
sheth singhal liu 
analysis effect network parameters performance distributed database systems ieee transactions software engineering 
thomas thompson 
chung carter fox hartman 
heterogeneous distributed database systems production acm computing surveys 
white 
mobile agents software agent bradshaw editor 
mit press 
wiederhold wegner ceri 
paradigm component programming communications acm 
wiederhold sample 
composition multi site services proceedings turkey 
wollrath waldo 
distributed object model java system computing systems 

