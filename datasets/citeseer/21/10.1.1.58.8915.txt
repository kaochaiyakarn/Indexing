dynamically scoped functions runtime modification pascal university bonn institute computer science iii 
bonn germany web de www de june importance lexically scoped variable function definitions acknowledged programming languages 
languages provide dynamically scoped variables spite usefulness 
furthermore dynamically scoped functions largely dismissed 
provides new perspective dynamically scoped functions sketches design allows effectively employed common lisp 
lexical vs dynamic scope definition said dynamically scoped point time execution program binding looked current call stack opposed lexically apparent binding seen source code program 
case referred lexical scoping 
consider program scheme define factor define factor define factor scheme definitions lexically scoped functions return results arguments 
variable factor redefined affect behaviour sees lexically apparent binding factor 
compare similar program common lisp defvar factor defun factor defun factor common lisp global variable introduced defvar dynamically bound 
order able distinguish lexically bound variables names leading trailing asterisks 
idiom generally accepted common lisp programmers 
common lisp dynamically scoped variables referred special variables 
program yields different results arguments redefinition factor affects behaviour dynamically scoped variables looked call stack starting current method frame 
called binding factor introduced directly called global 
programming languages wide employ lexical scoping offer dynamic scoping 
example program java equivalent respect scheme version 
public class test public static double factor public static double double return factor public static double double double factor return origin usefulness dynamic scope dynamic scoping accidentally introduced implementations lisp back lisp implemented interpreter dynamic scoping just happened natural implementation variable lookup 
compilation lisp naturally led lexical scoping 
lack understanding issues involved ultimately remedied proper lexical scoping scheme dialect lisp 
detailed discussion issues involved scoping seminal technical reports 
pointed reports dynamically scoped variables turn useful need influence behaviour parts program having clutter parameter lists functions called directly indirectly 
example common lisp standardized special variables control behaviour standard print functions 
example print base specifies radix printing numbers 
binding print base say ensure numbers printed hexadecimal representation matter printing takes place certain point call stack 
consider program fragment 
print base dotimes dotimes print print printed hexadecimal representation explicitly clear invocation print 
clear case arbitrarily nested function calls inside dotimes loops directly indirectly call print 
naming convention special variables ensures local lexically scoped variable declarations accidentally capture global dynamically scoped variables 
code fragment clear variable dynamically scoped lexically scoped 
defvar factor dynamically scoped defun factor lexically scoped dynamically scoped functions dynamically scoped functions discussed possible addition common lisp ansi standardization process agreement reached 
forces need considered design language construct dynamically scoped functions default functions dynamically scoped unintentional conflicts function names unavoidable 
needs useful way discriminate lexical dynamic scoping functions 
naming scheme discriminating lexically dynamically scoped functions special variables common lisp leading trailing asterisks usually considerably global function definitions global variables 
furthermore clear decision lexical dynamic scope really alongside global function definitions 
clear dynamically scoped functions 
propose approach dynamically scoped functions common lisp 
decision lexical dynamic scope alongside local redefinition function 
common lisp form defining lexically scoped local functions 
add redefining global function dynamic extent 
consider program fragment defun print defun print kent pitman piece information 
called dynamically scoped redefinition subsequent indirect call executes redefinition 
program fragment prints 
construct dynamically scoped redefinitions functions 
provide way refer previous definition function way implicit local call function definition 
program fragment rewritten follows call function example astute reader clue aim 
call function reminiscent clos call method proceed aspectj 
dynamically scoped functions implement canonical example aspect oriented programming defun print print entering call function print leaving output program fragment follows entering leaving dynamically scoped functions model essence aspect oriented programming captures specific join points control flow program definitions cross cut program invocation redefined functions 
dynamic extent soon control flow enters function redefinitions activated return deactivated 
opposed static weaving approach typically employed aop 
effectively need add constructs statically reasoning control flow program example cflow friends aspectj 
illustrate point example defun print defun print entering call function print leaving call function effect nested dynamically scoped redefinitions inner redefinition effective directly indirectly called output program fragment follows entering leaving simple idiom example implement uses cflow described 
related scheme provide standard constructs dynamic scoping implementation dynamically scoped variables top lexical scoping reports define scheme standard head minimalism conceptual simplicity completeness 
scheme dialects example mzscheme provide dynamic scope ways fluid form parameter objects 
example idea implemented fluid roughly follows define print call function fluid lambda print entering call function print leaving major drawback fluid explicitly defined save copy previous value global variable stack establish new binding side effecting variable 
implementation breaks case multi threading thread independent bindings dynamically scoped variables randomly modifying shared storage 
fact common lisp implementations incorporate multi threading typically treat special variables intuitively expected 
true parameter objects scheme parameter object accessed function gets sets current value new binding dynamic scope thread safe manner way parameterize form 
fact parameter objects accessed functions scheme preference macro hygiene requires little bit implementation approach 
attempts introducing dynamically scoped variables haskell principle suitable approach implemented passing dynamic environments functions scenes modifying global state 
worked details case 
emacs lisp comes common lisp compatibility package differs ansi common lisp example regard local functions lexically scoped ansi common lisp dynamically scoped package 
means implementation approach straightforward emacs lisp 
interesting note programming languages provide dynamically scoped functions form exception handlers throw exception understood call dynamically scoped exception handler associated exception 
exceptions especially useful aspect oriented programming throws exceptions explicit 
previous aspect oriented attempts providing means rebinding existing functions runtime similar approach dynamically scoped functions 
superimposition language construct defined allows method call interception mci 
approach method call interceptors activated arbitrary points control flow program dynamic extent 
semantics define superimposed method globally replace method original definition extent 
drawbacks mzscheme fluid presence multi threading probably corrected switching thread safe approaches 
wrap implements similar language construct top macro facility java drawbacks differences approach 
problems multi threading probably overcome storing method wrappers thread local variable provided class java lang 
mci wrap regarded derivation idea run programs inside specialized aspect oriented monad 
approaches embedded respective base languages requires interceptors defined monad 
fundamental difference approach approaches provide essentially metaprogramming constructs dynamically scoped functions located exclusively base level programming language 
baker hsieh 
runtime aspect weaving metaprogramming 
aosd 
acm press 
kiczales feeley 
improve modularity path specific customization operating system code 
esec fse proceedings 
acm press 
flatt 
plt mzscheme language manual 
download plt scheme org doc 
common lisp extensions 
included distributions gnu emacs 
www gnu org software emacs emacs html www org gosling joy steele bracha 
java language specification second edition 
addison wesley 
hanson proebsting 
dynamic variables 
pldi 
acm press 
kelsey clinger rees eds 
revised report algorithmic language scheme 
higher order symbolic computation vol 
september acm sigplan notices vol 
october 
kiczales hilsdale hugunin kersten palm griswold 
overview aspectj 
ecoop 
springer lncs 
mmel 
semantical approach method call interception 
aosd 
acm press 
lewis launchbury meijer shields 
implicit parameters dynamic scoping static types 
popl 
acm press 
de 
monads theoretical foundation aop 
international workshop aspect oriented programming ecoop 
pitman ed 
common lisp 
www com steele gabriel 
evolution lisp 
gibson 
history programming languages ii 
addison wesley 
steele sussman 
lambda ultimate imperative 
mit ai lab ai lab memo aim march 
steele sussman 
revised report scheme dialect lisp 
mit ai lab ai lab memo aim january 
steele 
art interpreter modularity complex parts zero 
mit ai lab ai lab memo aim may 
sun microsystems java platform api specification 
java sun com products jdk docs api 
