resource aware programming invited walid taha rice university houston tx usa taha rice edu 
traditional wisdom programming language design suggests trade expressive power static guarantees 
describe novel schema designing class languages call resource aware programming rap languages 
account natural distinction development platform deployment platform embedded software rap languages alleviate need drastic trade offs expressive power static guarantees 
describe preliminary experience designing programming rap language hardware design give brief overview directions 
designers embedded real time software attend functional specifications wider range concerns including resource consumption integration physical world 
current practice dominant medium programming various dialects puzzling state affairs years old known limitations including known safety problems limited set abstraction mechanisms second programming languages community produced new languages address safety problems developed powerful abstraction mechanisms 
today pressing need addressing issue 
particular new embedded hardware platforms continue flow embedded systems market need effective techniques producing reliable software cost effective manner pressing 
real technical challenges hampered adoption language innovations embedded software domain 
possibly important reason appears choice expressive power static guarantees 
expressive programming languages referred high level languages generally offer powerful abstraction mechanisms higherorder functions managed dynamic data structures general recursion 
supported nsf itr putting multi stage annotations texas atp advanced languages techniques device drivers time languages provide little guarantees resource utilization 
languages tend programmer control resources take full responsibility generally wellsuited building embedded applications 
resource bounded languages state charts synchronous languages provide strong guarantees runtime behavior programs 
languages generally programmer constructs allow write concise structured modular reusable programs unsafe language provides expressive power significantly attractive practice 
important innovations ongoing efforts programming languages community offer better trade offs poles important insight long overlooked 
key observation apparent need choose expressive power static guarantees avoided 
resource aware programming rap languages class languages aimed addressing problems described 
providing highly expressive untyped substrate supporting state art abstraction mechanisms dynamic data structures modules objects higher order functions 
role substrate provide common unified model semantics computation starting happens platform design software extended take place embedded platform software ultimately operate 
simpler reasoning principles wealth results statically checking studies tend functional programming languages untyped substrate 
principle ideas applicable programming language 

allowing programmer express stage distinction computation development platform computation deployment platform 
expressing stage distinction principle achieved language support program generation macro expansion facility 
mechanisms strings expressions insufficient interfere possibility automatic static checking programs generated 

static checking ensure computations intended execution resource bounded platforms resource bounded 
fact ability perform kind static checking novel feature rap languages 
get appreciation importance challenge involved doing consider analogous situation context correspond statically checking safety resource usage programs pre processed configuration parameters various target platforms 
combination ingredients allows programmer sophisticated abstraction mechanisms programs statically guaranteed generate resource bounded programs 
expect languages features provide solid bridge traditional software engineer ing techniques side specific demands embedded software domain 
general purpose programming idea statically checked generators studied extensively largely context multi stage programming 
general purpose software statically checked generators provide mechanism avoiding runtime overhead typically associated abstraction mechanisms functions objects 
embedded software primary role generators allow powerful abstraction mechanism coexist statically checkable properties resource usage 
date preliminary efforts explore idea rap languages consisted main efforts shown heap bounded programming language extended higher order features 
experience study suggests static checking problems arise designing rap language non trivial tractable 
second shown stage language concisely express cooley tukey recurrence defines fast fourier transform fft 
definitions essentially program generators generate exactly butterfly circuit fft size experience effort discussed section 
rap hardware description language rap languages play important role hardware design high applications verifying correctness hardware systems prohibitively expensive 
contrast software languages primarily concerned issues expressive power safety clarity maintainability 
software languages provide abstraction mechanisms designs maintainable reusable 
keep programs close mathematical definitions algorithms implement helps ensuring correctness 
hardware description languages vhdl verilog provide limited support abstraction mechanisms 
rap language hardware circuits allow capture schema generator family circuits executable form 
schema having verify circuits case case basis unified substrate full process enable verification family circuits en bloc 
basic method building circuit schema rap language proposed 
addition allowing implement schema fft circuits concisely systematic approach yielded new insights relation fftw split radix implementations 
method start naively generated circuits correct construction 
case fft evident schema literal transliteration textbook definition recurrence defining fft 
efficient circuits correct long produced systematic verified improvements correct naive generator 
note improvements carried improvements schema 
note correctness achieved verifying naive generator verifying posteriori post generation optimizations fix result generator 
means replace problem verifying transformations verifying modifications program generator 
manifest interfaces composition static checking noted briefly statically checking generators hard achieve traditional type systems 
example strings algebraic datatypes parse trees graphs represent generated program allow express manifest interface type gen fft int circuit circuit type choose represent circuits 
static type int circuit says gen fft function take integer produce circuit 
soon start composing generators example want build circuit computes fft performs multiplication computes inverse fft run problem type circuit provide static information guarantees consistency formedness composite circuit 
instance general need manifest interfaces provide static information allow guarantee degree formedness result composite program 
illustrate assume trivial generators take inputs produce gate inverter circuit inv circuit meaningless composition arises write bad inv connect operator infix operator type circuit times circuit circuit wires output circuit input second circuit 
problem second circuit just input type system prevent error circuits just type circuit 
generally desirable circuit type expressive possible time express values circuit realizable 
example programmer want abstractions lists dynamic data structure describing circuit need know early possible development process uses realized finite memory 
better static checking concrete type represent circuits rap language provides datatype parameterized information generated circuit 
type trivial generators bool bool bool circuit inv bool bool circuit type connect operator refined circuit circuit circuit circuit circuit circuit generic type variables instantiated consistently 
extra information type system reject bad declaration type variable instantiated output inv bool input bool bool 
note type function similar type standard mathematical function composition operation type 
safe implementations domain specific optimization ensure generated programs typed resource bounded generated circuit type constructor rap language remain meaning mechanism language allow programmer de construct code generated 
providing constructs traversing values type soundness decidability static typing complicates reasoning correctness programs written languages 
time able look inside generated circuit descriptions means posteriori optimizations expressed language 
optimizations implemented stand source source transformations outside language doing invalidates safety resource boundedness guarantees 
distinguish forms posteriori optimizations generic ones independent application ones specific application 
generic optimizations generally tested invalidate guarantees provided rap setting 
optimizations provided special extensions language long proven preserve guarantees 
domain specific optimizations written programmer particular application tested extensively problematic 
time systems fftw strong case practical importance domain specific optimizations 
able show interpretation program generators avoid need posteriori optimization 
allows generate desired circuits losing guarantees provided rap languages 
benefits proposed technique extend untyped setting avoids generation large circuits place reducing runtime needed generate acceptable circuits 
verification point view approach replaces problem verifying source source transformation verifying correctness finite set optimizations specific program generator 
key directions rap research design space rap languages huge primarily numerous notions resource boundedness languages considered deployment platform numerous abstraction mechanisms may desirable development platform 
systematic survey scope 
number broad directions expect important progress area extensions traditional static analysis techniques including type systems generative setting 
expect efforts focus analysis direct applications challenging domains device drivers control systems hardware description languages 
better understanding process writing rap programs including study program structuring mechanisms monads interpretation programming technique implementing domain specific optimizations 
support certification 
particular previous rap languages far focused static guarantees execution model development platform naturally extended preserve proof guarantee proof produced side deployment platform computation 
certificate verified independently generation process way proof carrying code verify safety software received untrusted source 
acknowledgment anthony emir pa kedar kindly read commented drafts 

oleg kedar walid taha 
methodology generating verified combinatorial circuits 
international workshop embedded software lecture notes computer science pisa italy 
acm 

oleg walid taha 
relating fftw split radix 
proceedings international conference embedded software systems 
appears volume 

walid taha 
gentle multi stage programming 
don batory charles consel christian lengauer martin odersky editors domain specific program generation lncs 


walid taha stephan hongwei xi 
generating imperative heap bounded programs functional setting 
proceedings third international conference embedded software philadelphia pa october 

walid taha paul hudak wan 
directions functional programming real time applications 
international workshop embedded software volume lecture notes computer science pages lake tahoe 
springer verlag 
