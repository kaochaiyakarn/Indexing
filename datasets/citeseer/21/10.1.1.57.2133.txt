complexity compression evolution peter nordin universitat dortmund fachbereich informatik lehrstuhl fur dortmund nordin ls informatik uni dortmund de wolfgang banzhaf universitat dortmund fachbereich informatik lehrstuhl fur dortmund banzhaf ls informatik uni dortmund de compression information important concept theory learning 
argue hypothesis inherent compression pressure short elegant general solutions genetic programming system variable length evolutionary algorithms 
pressure visible size complexity solutions measured non effective code segments called introns 
built parsimony pressure effects complex fitness functions crossover probability generality maximum depth length solutions explicit parsimony granularity fitness function initialization depth length modularization 
effects positive negative 
provide basis analysis effects suggestions overcome negative implications order obtain balance needed successful evolution 
empirical investigation supports hypothesis 
principle occam razor formulated years ago states possible solutions problem choose shorter 
bertrand russell claims actual phrase william ockham vain done fewer 
famous example occam razor polish astronomer argued favor fact earth moves sun vice versa equations simpler 
great scientists formulated versions occam razor 
newton preface principia preferred put simplex est non 
nature pleased simplicity affects superfluous causes 
essence occam razor shorter solution generic solution 
process inferring general law set data viewed attempt compress observed data 
researchers claimed principle basis cognitive processes brain wolff 
argue foundations evolutionary algorithms general genetic programming particular built property favoring short solutions sub solutions 
property reasons evolutionary algorithms efficiently robustly diverse set domains 
compression property responsible ability solution generic applicable larger set data set data fitness cases evolution 
side coin built compression pressure certain cases strong results premature convergence failure adapt complex fitness functions 
evolutionary algorithm choose short incomplete solution long complete solution 
strength pressure dependent different attributes particular evolutionary algorithm representation genetic operators probability parameters 
bottom line helpful aware compression pressure try keep balanced optimum level evolution 
focus problem symbolic regression programs genetic algorithm 
variant variable length genetic algorithm operating string bits evolve algorithm program register machine nordin 
register machine analysis introns straight forward bit string representation simplify complexity reasoning 
argumentation analogous standard tree representation genetic programming reasoning useful evolutionary systems 
destructive crossover start defining important concepts 
destructive crossover different kinds introns effective complexity 
crossover acting block segment code individual different results 
extreme case blocks exchanged crossover identical performance program affected 
normally high probability function program severely damaged resulting fitness decrease individual 
see typical distribution effect crossover fitness early generation symbolic regression problem section 
axis gives change fitness deltaf percent crossover best 
deltaf percent gamma delta individuals fitness decrease percent accumulated left side diagram 
diagram shows common effect crossover worsened fitness spike left 
second common effect happens spike zero 
term probability destructive crossover probability crossover program block lead deteriorated fitness value comprising area left zero deltaf percent 
term complete programs blocks programs 
fitness change crossover effect crossover generation crossover effect effects crossover generation 
introns rule solution evolved genetic programming systems contains segments code perform useful functions unnecessarily lengthy executed program 
similar redundant structures nature dna called introns watson 
idea explicitly inserting introns genetic algorithms previously investigated forrest 
experiments performed section term intron segment block affect behavior entire program fitness cases 
code neutral phenotype level 
notice intron segment may affect output program inputs current ones 
term block mean subset code regardless representation 
sequence binary digits binary string structure messy genetic algorithm set nodes tree representation 
active block block code intron block affect properties phenotype level 
examples introns unedited individuals genetic programming run 
system creative finding blocks 
typical examples expression notation div move left set reality extent block affects output sensitivity crossover discrete property block 
scale distribution sensitive block crossover affects program output 
simplify terms define absolute intron block code affects output program sensitive crossover 
crossover inside block affect performance program 
example absolute intron structure evolve function absolute intron block active block 
call intron global intron valid input program call local acts intron current fitness cases necessarily valid inputs 
distinction important generalization capabilities program see section 
section introduce method measuring size intron segments evolutionary algorithms 
look intron blocks affect behavior individual fitness cases 
kind intron totally immune crossover long population contains segments swapping crossover affect performance individuals involved 
introns kind arise mutual agreement individuals keep sort code blocks 
effective complexity complexity program program block mean length size program measured method natural particular representation 
tree representation number nodes block 
binary string representation number bits absolute length absolute complexity total size program block 
effective length effective complexity block program length active parts code program block contrast intron parts 
program complexity effective fitness evolution genetic programs favor parsimony sense evolved program structures short elegant measured absolute size individual koza 
evolved programs contain lot garbage solutions give elegant impression examined 
contrary solutions look unnecessarily long complex 
section give reason program tendency increasing absolute length course evolution time favoring parsimony 
crucial point measure effective length absolute length 
observing effective length clearly show genetic programming system favors parsimonious solutions final result constantly sub solutions evolution population 
say simple gp system fitness proportional selection crossover genetic operators 
crossover operator crossover operator exchanging blocks code standard tree subtree exchanging crossover koza point bit string crossover nordin 
individual program high relative fitness population reproduced fitness selection operator 
new copies undergo crossover loose block gain 
crossover interferes block doing useful program probability new segment damage function block see 
cases probability damaging program greater probability improving function block 
hand crossover takes place position absolute intron block definition harm done block program 
program low ratio effective complexity absolute complexity small target area destructive crossover higher probability constitute greater proportion population 
ability create add introns evolution important property system primitives 
ability depend parameters initial individual size function set fitness function 
additions introns viewed way program self regulate crossover probability parameter defense crossover altenberg 
formulate equation resemblance schema theorem holland relationship entities described 
ej effective complexity program aj absolute complexity 
standard genetic programming parameter giving probability crossover individual level 
probability crossover active block program lead worse fitness individual probability destructive crossover dj definition dj absolute intron zero 
fitness individual average fitness population current generation 
fitness proportionate selection block exchange crossover program average proportion program generation delta delta gamma delta ej aj delta dj short equation states proportion copies program generation proportion produced selection operator proportion programs destroyed crossover 
individuals counted modified crossover absolute intron part notice standardized fitness gp 
better fitness gives higher fitness value ga 
reasoning analogous selection methods including elitist strategies included show behavior phenotype level 
proportion conservative measure individual recreated crossover individuals equation rewritten gamma delta delta ej delta delta dj delta see interpret crossover related term direct subtraction fitness expression reproduction selection 
words reproduction selection crossover acts reproduction selection fitness adjusted term gammap delta delta ej delta aj delta dj interpreted term fitness proportional program complexity 
define effective fitness ej ej gamma delta delta ej delta aj delta dj effective fitness determines number individuals certain kind generation 
assumptions possible show individual win higher proportion generation spite fact worse fitness 
loosing block high effective complexity moderate contribution fitness increase chances survival 
individual trading normal fitness effective fitness reducing complexity fit individual take higher proportion generation 
undesired phenomenon training situations 
crossover protection individual number things protect crossover 
discussed increase absolute complexity adding introns 
possibility adding introns limited number factors gp system evolution 
system add introns arbitrary complexity instantly 
event recreating individuals measured low applying high external parsimony pressure forces population collapse population short building blocks 
possibility individual protect reduce effective length finding parsimonious solution ability limited fitness function dynamics system 
balance strategies parsimony pressure gp system appears 
effective length reduced system try add introns 
condition maximal length depth system exceeded 
sufficient intron adding allowed dynamics system gradually balance differences effective fitness short long program 
genetic programming systems defined maximal size program structure 
size important chosen small may limit additions intron preventing system finding perfect solution 
certain cases necessary intron blocks times size useful blocks exact solution 
means important adjust allowed maximum size individuals composition fitness function 
third possible way reduce probability destructive crossover allow crossover certain points 
crossover allowed evolved suitable representation individual allowed crossover points 
common nature numerous sophisticated systems protection changes genetic material 
sexual recombination higher species particular allowed defined points watson 
composition fitness function influences sensitivity system 
example altering size constants scaling different contributing part fitness function possible reduce crossover sensibility threshold interference perfect solution 
balanced evolution adding external parsimony pressure way balance effective fitness 
pressure simplest form proportional absolute length program subtracted fitness expression 
results equation effective fitness ej gamma delta aj gamma delta delta ej delta aj delta dj external parsimony pressure variable evolution allowed negative value necessary 
evolving functions non continuous fitness functions instance results integer important scale output fitness function smallest change fitness granularity balanced biggest change complexity 
change fitness change complexity see equation 
heterogeneous complex fitness functions important balance contribution different parts fitness function 
average initial size complexity affect average complexity pressure genetic programming session 
complexity pressure proportional relation effective absolute complexity 
high complexity initial state give low pressure importance dynamics training session 
strategies help evolving programs obtain shorter effective length control structures loops subfunctions modularization techniques 
section give brief motivation spontaneously emerging subfunctions 
spontaneously emerging subfunctions natural tool humans defining algorithm computer program modularization divide solution smaller blocks code 
different modularization techniques suggested genetic programming thoroughly evaluated automatically defined functions adf koza 
examples modularization techniques module acquisition angeline encapsulation operation koza 
modularization techniques ways encapsulating blocks code 
adfs encapsulate blocks subroutines called main program subroutine 
subroutine called program 
means program reduce effective length putting frequently identical blocks subroutine 
seen small effective length increases chances survival offspring 
mind main reasons adfs encapsulation techniques spontaneously 
block code effective complexity ffi block individual times program decrease effective complexity increase effective fitness adfs 
call size complexity call adf adf complexity overhead adf definition 
original effective length complete program ej original absolute length aj subfunction change individual effective fitness ej gamma delta delta ej gamma deltac ej aj gamma deltac ej delta dj deltac ej ffi block delta gamma gamma call delta gamma adf long change effective fitness positive individual advantage survival adf 
equation motivates program gain reproduction advantage spontaneously modularization explains adfs appear simple problem spaces 
initial empirical investigations support hypothesis rigid evaluation planned 
benefits parsimony pressure concluded previous sections genetic programming system inherent tendency promote solutions short effective complexity 
seen conflict goal adapting specific fitness function 
previously noted shorter length evolved program results program generic behavior kinnear tackett 
intuitively reasonable different examples 
instance say want perform symbolic regression function fitness cases 
fn fn fn fn possible functions maximal fitness solution fn fn fn fn fn second solution fn second solution shorter behaves uniformly larger set input output pairs solution 
argued second solution generic 
called principle occam razor 
principle solution greater probability general shorter provided functional terminal set biased unwanted way 
solution example included functions function set function set regarded biased unwanted way 
principle occam razor formalized put mathematical framework algorithmic information theory solomonoff levin distribution 
excellent relation complexity machine learning see li 
normally evolve algorithm genetic programming system optimizing parameters data want able apply solution wider set inputs ones fitness cases 
want solution generic possible analogy say want solution short possible lowest complexity 
pressure low effective complexity global program level block level short blocks higher probability proliferation schema theorem 
genetic programming system regarded employing divide conquer strategy goal finding solution low complexity 
general problem solving strategy divide conquer continuous pressure elegant generic sub solutions reasons genetic programming system succeeds reasonable time broad set domains 
effects pressure balanced avoid unwanted effects inability obtain perfect fitness value balancing factor external pressure applied absolute size individual 
notice important difference program short effective complexity short absolute complexity 
generalization properties program short effective length decreased introns global introns 
blocks code act introns current fitness cases 
example 
program perfect score fitness cases give desired result input values 
example provides motivation applying external parsimony pressure remove local intron 
hand external parsimony pressure increase probability unwanted effects 
propose parsimony pressure balanced variable evolution population 
instance increase training session 
empirical results section method empirically measuring absolute complexity effective complexity 
briefly example measurements show support hypothesis exists compression pressure system 
example symbolic regression function polynomial large constants 
set fitness cases input output pairs taken polynomial function evolve function language register machine 
complete description experiment see nordin 
register machine performs arithmetic operations small set registers 
instructions coded bits 
instruction defines destination registers operands arithmetic operation 
operands small constant register 
operators example addition subtraction multiplication 
information stored bits register 
individual consists continuous string bits 
crossover allowed instructions locus multiple 
crossover operator selects points individuals swaps instructions 
approach enables cut splice blocks instructions individual risk generating programs invalid syntax 
enables estimation effective length individuals 
systematically replacing instruction individual nop instruction definition effect state output machine 
individual gives output fitness cases know particular instruction substituted acted intron 
number instructions added subtracted absolute length give lower bound effective length program 
method gives lower bound number introns find higher order introns consisting cooperating instructions instructions gamma 
higher order introns sensitive crossover experiments show small proportion generations rapidly substituted number order introns 
estimation effective length close actual 
addition crossover mutation operator toggles bits individual certain probability 
selection operator examples fitness proportional selection 
tried different selection operators resulting different strength dynamics system general results 
average standardized fitness evolution function plotted figures shows evolution absolute length effective length experiment 
generations average fitness average fitness average fitness population size 
evolution lengths starts point defined average initialization length 
generation rapidly decreasing fitness dominating term expression effective fitness change complexity dramatic 
change fitness important compression pressure increases effective lengths decrease 
absolute length starts grow exponentially 
note happens effective length remains small average fitness continues improve 
evolution longer time shown absolute complexity continues grow exponentially limit 
generations absolute complexity efficient complexity absolute length efficient length evolution absolute effective length 
support hypothesis compression achieves goal protecting individual plotted effect crossover different generations 
shows change effects crossover evolution 
diagram consists diagrams type placed sequence 
see absolutely dominating effects cross happens fitness fitness worsened percent 
peak zero line increases indicates unaffected fitness 
accumulated destructive effect crossover left decreases generation ratio absolute effective length increases individual protected 
effects crossover evolution crossover effect fitness change crossover generations number crossover events distribution crossover effect evolution 
shows moderate constant external parsimony pressure remove introns completely generations 
case negative effect parsimony pressure strong system converge optimal solution 
smaller parsimony pressure exponential growth absolute length force curves follow closely 
tightly set maximum individual size seen increase compression pressure way increase crossover target area maximum length reached decrease effective length 
manipulation leads faster convergence pressure high system fails converge optimal solution 
generations absolute complexity efficient complexity absolute length efficient length effects parsimony pressure 
summary argued existence compression pressure evolutionary algorithms variable length individuals 
pressure promotes short solutions low complexity complexity measured effective complexity introns removed 
phenomenon positive negative effects supported data evolution computer programs 
positive effects efficient search general behavior solution unseen data 
negative effect premature convergence non optimal solution 
key positive effects balance complexity pressure equation effective fitness 
analysis take account number relevant properties instance representation genetic operators composition fitness functions crossover probability generality solutions maximum depth length solutions explicit parsimony granularity fitness function initialization length modularization 
authors thomas back sami valuable comments 
research supported ministry wissenschaft und forschung wolff 
computing cognition information compression 
ai communications pp nordin banzhaf evolving turing complete programs register machine code 
proceedings sixth international conference genetic san mateo ca morgan kaufmann publishers inserting introns improves genetic success rate cue biology 
proceedings fourth international conference genetic belew booker eds 
san mateo ca morgan kaufmann publishers pp forrest mitchell relative building block fitness building block hypothesis foundations genetic algorithms whitley ed 
san mateo ca morgan kaufmann publishers pp 
watson hopkins roberts wiener molecular biology gene menlo park ca benjamin cummings publishing koza genetic programming ii cambridge ma mit press 
koza genetic programming cambridge ma mit press 
altenberg evolution evolvability genetic programming 
advances genetic programming kinnear jr 
ed cambridge ma mit press 
pp 
holland adaption natural artificial systems ann arbor mi university michigan press 
angeline pollack evolutionary module proceedings second annual conference evolutionary programming la jolla ca evolutionary programming society 
kinnear 
generality difficulty genetic programming evolving sort 
proceeding fifth international conference genetic algorithms san mateo ca morgan kaufmann 
tackett 
genetic programming feature discovery image discrimination 
proceeding fifth international conference genetic algorithms san mateo ca morgan kaufmann 
li inductive reasoning complexity 
journal computer system sciences pp nordin banzhaf explicitly defined introns genetic programming 
submitted gp workshop machine learning tahoe city ca 
