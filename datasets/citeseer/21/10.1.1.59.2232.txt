emergence general architecture distributed autonomic computing tom de wolf tom holvoet report cw january katholieke universiteit leuven department computer science celestijnenlaan heverlee belgium emergence general architecture distributed autonomic computing tom de wolf tom holvoet report cw january department computer science leuven today systems complex distributed situated open dynamic 
autonomic computing aims deal complexity autonomously 
distributed autonomic computing systems tend consist autonomous entities increased distribution 
increased complexity autonomy difficult build systems global coherent behaviour huge number entities expected cooperate 
signs emergence multi agent systems general architecture individual entities distributed autonomic computing system 
understanding exploiting process emergence key study engineer global coherent behaviour key develop manage distributed autonomic computing systems efficiently 
consequence need fundamental scientific methods gain insights control emergent autonomic computing systems 
chaotic time series analysis scientific method provide fundamental insights 
keywords emergence distributed autonomic computing chaos theory ams mos classification primary 
secondary 
emergence general architecture distributed autonomic computing tom de wolf tom holvoet department computer science kuleuven lab celestijnenlaan leuven belgium tom tom holvoet cs kuleuven ac today systems complex distributed situated open dynamic 
autonomic computing aims deal complexity autonomously 
distributed autonomic computing systems tend consist autonomous entities increased distribution 
increased complexity autonomy difficult build systems global coherent behaviour huge number entities expected cooperate 
signs emergence multi agent systems general architecture individual entities distributed autonomic computing system 
understanding exploiting process emergence key study engineer global coherent behaviour key develop manage distributed autonomic computing systems efficiently 
consequence need fundamental scientific methods gain insights control emergent autonomic computing systems 
chaotic time series analysis scientific method provide fundamental insights 

important fact current systems complex distributed open dynamic high degree locality 
examples telecommunication networks flexible manufacturing networks urban traffic networks economic systems supply chain simulation ecological systems 
top evolution want build autonomic computing systems 
paradigm autonomic computing aims design build computing systems capable adjusting varying circumstances initiative decide things 
autonomic computing systems need anticipate needs autonomously 
real complexity hidden user 
autonomic computing perspective described goal achieve self principles see 
users concentrate want accomplish manipulate computing systems get wanted behaviour 
increase distribution openness situatedness dynamics means systems need handle complexity 
making increasingly distributed systems autonomous implies individual autonomous entities inside system 
ultimate challenge find approaches help understand dynamics mechanisms control global behaviour distributed autonomic computing systems 
describes emergence multi agent systems promising approach matches profile 
emergence general architecture distributed autonomic systems important understand emergence works mechanisms enable emergence 
understanding key conquer difficulties building emergent systems 
fundamental science essential gain insights emergence 
propose chaotic time series analysis scientific method provide fundamental insights 
section describe emergence section state emergence important relation distributed autonomic computing 
section need fundamental science understanding controlling emergent systems described example chaotic time series analysis 
ends 

defining emergence lot confusion literature exact definition emergence 
stating definition correct definition emergence working definition emergence dynamic nonlinear process leads emergents properties behaviour structure patterns 
macro level system inter action parts micro level 
emergents novel readily understood system apart looking parts reductionism 
studied looking parts context system level mentioned definition refers certain points view look system 
macro level considers system micro level considers system point view individual entities system 
give simple example biology clarify ant colony 
micro level ant observes local environment performs local actions accordingly 
macro level looking system 
example path formation pheromones emergent situated macro level system 
look single ant clue existence paths 
important characteristics emergence micro macro effect important characteristic mentioned explicitly definitions emergence literature explained 
radical novelty refers individual entities 
global behaviour novel individual behaviours micro level 
coherence emergents appear integrated wholes tend maintain sense identity time persistent pattern 
coherence spans correlates separate lower level components higher level unity 
dynamical emergents arise complex system evolves time 
emergent behaviour dynamic micro level constant dynamic maintain global behaviour 
nonlinearity emergence requires small cause large effect principle intense focus nonlinear interactivity 
nonlinearity possible get secondary effects macro level call emergents 
distributed control control action parts 
interacting parts parts interacting parallelism 
interactions interesting macro level behaviours arise 
robustness flexibility emergents relatively insensitive perturbations errors strong capacity restore 
increasing damage decrease performance degradation graceful 
characteristics relevant distributed autonomic computing systems 
elaborate section 

importance emergence characteristics distinguish distributed autonomic computing systems traditional ones 
examples different areas show characteristics influence application domains 
described sign revolutionary shift paradigm change attitudes software systems modelling engineering 
follows describe distinguishing characteristics relate concept emergence multi agent systems described previous section 

characteristics distributed autonomic computing systems section describe characteristics partially inspired distributed autonomic computing systems stronger evolve completely distributed completely autonomic systems 
distribution systems distributed 
includes physical distribution due invasion networks system logical distribution interaction applications single system entities inside single application 
situatedness systems situated explicit notion environment system entities system exist execute environmental characteristics affect execution explicitly interact environment 
execution environment primary abstraction dynamics independent intrinsic dynamics system entities 
consequence able cope uncertainty unpredictability building systems interact environment 
situatedness implies local information available entities system system part group systems 
openness situated environment perceiving affected intrinsically implies fuzzy boundary system environment 
system longer isolated subsystem boundaries permit reciprocal side effects extreme complex 
openness results structural dynamics dynamic changes system structure systems entities system move environments interaction channels change constantly interacting entity 
structural dynamics harder understand control behaviour group systems single system 
locality control flow control concept key concepts computer science software engineering levels hardware level high level design applications 
software systems components live interact open world concept global flow control meaningless 
independent software systems autonomous flows control mutual interactions imply join flows 
concept global execution control disappears 
trend stronger fact independent systems flow control different entities system flow control 
locality interaction physical environment locality interactions automatically enforced physical laws 
logical environment want minimise conceptual management complexity favour modelling system local terms limiting effect single entity environment 
locality interaction strong requirement number entities system increases dimension distribution scale increases 
case tracking controlling concurrent autonomously initiated interactions difficult object oriented component applications interactions strictly local 
reason autonomously initiated interactions imply know kind interaction done clue specific interaction initiated 
dynamic pointed number times previous characteristics systems dynamic number aspects dynamics environment structural dynamics huge interaction dynamics software engineering perspective rapidly changing requirements system 
example manufacturing systems competitive pressures reducing product life times forcing systems change frequently 
machine failures upgrades force system adapt changes 
situation system needs flexible dynamic 
autonomy direct consequence autonomic computing perspective systems need incorporate autonomy eventually reach goal handling complexity autonomously 
need global behaviour characteristics described far difficult understand control global behaviour system group systems 
need coherent global behaviour 
non functional requirements solved computer systems complex single entity provide 
need systems consisting multiple entities relatively simple global behaviour system provides functionality complex task 
need traditional object oriented systems case presence single flow control possible global execution control control global behaviour system 
entities objects autonomous flow control stays local entity global execution control feasible 

emergence multi agent systems 
number characteristics distributed autonomic computing systems state section engineering systems emergence multi agent systems exploiting advantages emergent behaviour promising approach handle complexity autonomic computing systems complexity increase 
matching characteristics 
number characteristics emergence distributed autonomic computing systems match 
able focus emergence need distributed control interacting parts 
intrinsic characteristics distributed autonomic computing systems 
emergence dynamical sense emergents arise time dynamics micro level needed maintain emergents 
increasing dynamics distributed autonomic computing systems support emergence possible cope dynamics occurs autonomic computing systems 
clear 
presence intrinsic distribution interacting parts dynamics basic ingredients exploiting emergence 
secondly emergents relatively insensitive perturbations errors 
robust flexible 
flexibility supports dynamical characteristic systems consider 
environmental dynamics structural dynamics rapidly changing requirements uncertainty accompanying require behaviour system robust flexible 
engineering distributed autonomic systems want coherent global behaviour 
coherence characteristic emergence 
engineering global behaviour emergent implies coherence 
advantages 
emergence number advantages 
radical novelty micro macro effect emergence implies entity aware global behaviour 
means global central planning global behaviour necessary 
global behaviour entity entity kept simple possible 
system containing simple rule entities complex emergent behaviour arise 
simplicity favours engineers build systems 
manage single entity easy 
managing macro level easy see section 
entity single point failure 
refers advantageous characteristic emergence robustness flexibility system 
failure manifests graceful degradation 
emergent behaviour coherent global behaviour persists time maintains identity time 
dynamics micro level system emergence flexible adaptive adjusting behaviour 
need emergence 
greatest difficulty engineering distributed autonomic systems get coherent global behaviour mentioned 
want coherent global behaviour distributed situated autonomous systems build global behaviour emergent property system 
coherence characteristic emergence 
emergence handle entity system model wanted global behaviour coordinate system 
implies central control worst case scenario feasible increasingly complex systems number entities act autonomously system large 
characteristics locality control interaction information contra dict approach supports emergence entity needs global information control interaction 
engineering emergence 
essential characteristic emergence necessarily distributed autonomic computing systems nonlinearity 
incorporate nonlinearity engineering emergent autonomic computing systems nonlinear mechanisms result wanted behaviour 
multi agent systems technology 
combine characteristic autonomy increased distribution situatedness locality control interaction building completely autonomic system done entities inside system incorporate autonomy characteristics 
multi agent systems play important role flexible technology envisions build systems consisting number autonomous entities called agents 

state getting problem solving power emergent phenomena multi agent systems supports needs challenges face engineering distributed autonomic computing systems 

difficulties emergence idea emergence clear building systems exhibit emergent behaviour matches requirements number difficulties emergence non linear phenomenon lack experience nonlinearity engineering systems today means emergence rely structured methodology 
individual entities cope lot uncertainty knowing entities interact unanticipated dynamics environment live incomplete data knowledge general due increased locality 
uncertainty difficult build individual entities react react certain dynamic way preserves required global behaviour 
emergence seen amount entities system large 
large refers huge number performance efficiency system degrades enormously due combinatorial explosion states emergence problematic 
right nonlinear mechanisms limits entities needed 
building system idea global behaviour 
decompose behaviour sure give entities correct behaviour resulting global behaviour matches requirements 
guidelines help 
obvious main problem current lack understanding insights process emergence mechanisms allow behaviour arise 
section argue important fundamental scientific methods gain insights 

chaotic time series analysis fundamental scientific method want exploit emergence general architecture engineer autonomic computing systems gain profound understanding dynamics mechanisms result emergence 
understanding building distributed autonomic computing systems emergence stuck mere error technique 
gain insights need fundamental scientific methods allow analyse behaviour emergent systems 
certain insights process emergence step apply engineering autonomic systems 
propose chaotic time series analysis possible scientific method analyse autonomic computing systems general 
part section describes chaotic time series analysis offers 
second part discusses chaotic time series analysis better understand emergence 
part section describe insights engineer self behaviour distributed autonomic computing systems 

chaotic time series analysis 
analysing dynamics systems enables predictions global behaviour gather insights effects certain parts single variable global behaviour system 
today simple measures averages time characterise behaviour system 
useful characterisations static systems helpful system nonlinear constantly subjected change 
need advanced analysis techniques 
lot tools techniques available chaos theory developed describe nonlinear behaviour 
analyse dynamics today complex systems emergence chaos theory offers conceptual framework dynamical behaviour characterised experimental techniques estimate characteristics time series state variables observed system framework explain principles emergent behaviour 
section give small concepts chaos theory followed overview analysis techniques 
concepts chaos theory important concepts chaos theory system state space trajectory attractor 
state space dynamical system collection time dependent variables capture behaviour system time 
concept trajectory refers system trajectory state space successive values state variables viewed coordinates state space 
dynamical systems trajectory eventually enters subspace leaves 
subspace exerts attractive force draws system called attractor 
disjoint attractors system set initial conditions trajectories enter attractor called attractor basin attraction 
gives short concepts 
analysis chaos theory step knowing apply chaos theory 
techniques address chaotic nonlinear time series analysis techniques 
includes parts need identify data measure need analyse interpret data 
data measure 
gather data system 
challenge select right data abundance information available 
able need idea different kinds measurements tell behaviour 
systematic approach get know exploration possible measures way learn sorts information valuable 
useful data time dependent data behavioural dynamics considered evolving time 
results time series analysed 
example transport module factory measure evolution transit times sensors detect congestion patterns 
patterns may detected inter arrival times single sensor :10.1.1.35.7368
example 
analysing dynamics supply chain measure evolution amount orders placed certain factory site chain 
inventory evolution useful 
application specific results exploration may lead discovery general guidelines choose right values 
interpret data 
gathering data analyse 
chaos theory offers number analysis techniques give trajectories state space find attractors 
different types dynamics lead different attractor geometries including point attractors systems converge static state limit cycles systems periodic behaviour fractal structures strange attractors characteristic formally chaotic systems 
comparison kind attractors classes systems 
divergent trajectory attractor corresponds system control 
point attractor related goal oriented system 
limit cycle strange attractor involve going concerns system maintain certain goal behaviour 
system attractors sufficiently low dimension reconstructed time delay plots provided available data sufficiently rich accurate 
plots value time series plotted axis previous value axis 
time delay plots find distinguishing patterns behaviour done manufacturing supply chains :10.1.1.35.7368
computing lyapunov exponents attractors done time series 
exponents quantify strength attraction exerted attractor nearby points state space degree neighbouring points attractor diverge degree chaotic behaviour 
lyapunov exponent stability measure system 
exponent example find chaotic behaviour robotic system different control algorithms robot compared measure chaotic behaviour 
recurrence plot dimensional representation technique brings deterministic dependencies successive elements time series 
example instantly apparent system periodic chaotic 
controlling nonlinear behaviour important find tools identify sensitive regions state system extremely vulnerable external perturbations 
recurrence plot visualisation tool provides global estimate distribution sensitive parameters 
allows anticipate states system sensitive small fluctuations domains relatively robust insensitive attempts control system promising 
need learn techniques appropriate 
applying methods characterise systems terms formal dynamics 
knowing system attractor certain shape dimensionality need correlate particular dynamical patterns domain specific behaviour 
allow find problems opportunities control behaviour system 
mapping classes systems described step direction making domain specific detailed interpretations needs done 
example interpretation supply chains time sites supply chain follow large order large small order small 
words orders correlated time 
interpreting stretched pattern line time delay plots order time series 
second example 
analysis transit times time delay plots find patterns squares correspond line imperfect squares correspond interacting distinct diagonal band transit times vary small steps corresponds dynamic congestion 

analysing emergence chaos theory look apply chaos theory process emergence order understand dynamics 
argue chaos theory especially chaotic time series analysis promising approach 
second part give ideas apply analysis methods emergence 
chaos theory emergence 
emergence nonlinear process chaos theory focuses chaos theory relevant approach 
understanding dynamics complex emergent systems reasoning analytically detailed internal structure system feasible 
analytic solutions unavailable systems modest level complexity 
alternative approach study systems executing attempt generalise behaviour 
chaotic time series analysis promising approach apply chaos theory emergent autonomic computing systems 
chaos theory conceptual framework means development chaos theory specific problem domain engineering emergent systems provide new vocabulary understanding happens system new technologies manage control systems 
example done domain manufacturing systems 
apply chaos theory emergence 
section give ideas exemplify applying chaotic time series analysis emergence give insights 
chaos theory allows characterise type attractor emergence 
behaviour maintains certain goal corresponds limit cycle strange attractor type 
verifying give understanding emergence goal maintaining behaviour corresponds limit cycle strange attractor 
way example lyapunov exponent measure difference micro level behaviour macro level behaviour 
example indicates micro level behaviour stable order macro level behaviour order 
result larger lyapunov exponent micro level macro level 
larger exponent indicates larger degree divergence stable behaviour 
example recurrence plots identify regions state space emergent behaviour sensitive external perturbations allow understand try control emergence 

engineering distributed autonomic computing systems gaining insights analysis control distributed autonomic computing systems get wanted emergent behaviour 
large majority control applications implemented today fall category centralised control 
course feasible autonomic systems highly distributed 
successful structure system exploited locality control interaction distribution 
emergence exploits structure gives additional advantages 
results analysis done chaos theory exploited control system 
understanding emergence allows control system effectively efficiently 
give engineering principles guide implementations optimal control achieve wanted behaviour 
dynamical systems exhibit different behaviours depending values certain critical parameters 
expected analysis shows parameters influence points critical specific system exhibit emergent behaviour 
know critical parameter influence find control mechanism influence parameter 
applied supply chain management authors show consumer exert control global behaviour supply chain line orders issues 
magnitude orders determine point attractor limit cycle system drawn global behaviour system exhibits 
control emergent behaviour maintaining certain behaviour entities system influence global behaviour manipulating simple critical parameters local environment 
local actions influence global behaviour dramatic way results chaotic time series analysis needed know local actions useful 
example undesirable emergent behaviour damped microcontrollers acting agents monitor environment take local action 
local actions insights recurrence plot analysis sensitive regions control emergence 
autonomic systems control done autonomously letting entity system react right local action sensitive region detected 
stabilisation emergent behaviour control enforced 
mentioned lyapunov exponent measure stability 
control stability robotic behaviour 
examples control stability 
diversity units compose system leads stability 
diversity emerged homogeneous group rewarding agents actual performance leads elimination chaos 
idea measure stability micro macro level separately confirm order micro level give order macro level 
insight exploited engineering emergence know putting order behaviours individual entities idea get ordered emergent behaviour 

shows signs promising emergence general architecture distributed autonomic computing systems 
summarise state things 
computing systems complex increasing distribution interconnection situatedness openness dynamics 
increasing complexity autonomic computing perspective systems autonomous handling complexity 
hard build systems coherent global behaviour 
secondly novel paradigm emergence multi agent systems general architecture individual components distributed autonomic computing system opens possibilities exploit complexity increasing characteristics reach global coherent behaviour 
thirdly current difficulties emergence understand works exploit characteristics engineering systems 
implies need fundamental scientific methods gain insights eventually control emergent autonomic computing systems 
chaotic time series analysis promising candidate achieve 
include studying chaotic time series analysis fundamental analysis techniques analyse emergent systems extract insights guidelines engineer systems 
insights guidelines case study developed exemplifies emergence distributed autonomic computing 
bar yam 
dynamics complex systems chapter overview dynamics complex systems examples questions methods concepts 
studies nonlinearity 
press july 
crutchfield 
new 
considering emergence 
working santa fe institute 
de wolf holvoet 
autonomic computing agent modelling dynamical systems analysis decentralised control 
proceedings international workshop autonomic computing principles architectures page 
goldstein 
emergence construct history issues 
emergence 

self organization emergence architecture complexity 
proceedings st european conference system science paris 

science self organisation adaptivity 
encyclopedia life support systems 
unesco publishing publishers oxford uk 
hogg huberman 
controlling chaos distributed systems 
ieee trans 
systems man cybernetics november december 
holland 
emergence chaos order 
addison wesley 
huberman hogg 
emergence computational ecologies 
nadel stein editors lectures complex systems volume sfi studies sciences complexity pages 
addison wesley reading ma 
ibm 
autonomic computing ibm perspective state information technology 
ibm 

distributed dispatching control dynamic flow line manufacturing systems 
phd thesis katholieke universiteit leuven september 
mayer kress 
recurrence plots analysis time series data 
casdagli eubank editors nonlinear modelling forecasting volume xii sfi studies sciences complexity 
addison wesley 
hill 
stability criteria large scale systems 
ieee transactions automatic control ac april 
nehmzow walker 
behaviour mobile robot chaotic 
proceedings aisb symposium scientific methods analysis agent environment interaction pages 
odell 
agents complex systems 
journal object technology july august 
odell 
objects agents compared 
journal object technology may june 
parunak 
dynamical systems perspective agent going concerns 
technical report center electronic commerce 
parunak brueckner 
entropy selforganization multi agent systems 
ller andre sen editors proceedings fifth international conference autonomous agents pages montreal canada 
acm press 
parunak savit riolo 
agent modeling vs equation modeling case study users guide 
mabs pages 
parunak savit riolo clark 
dynamic analysis supply chains 
technical report cec erim 
final report 
parunak 
modeling extended supply network 
van parunak 
complexity theory manufacturing engineering conceptual roles research 
technical report industrial technology institute 
van parunak 
heartbeat factory understanding dynamics agile manufacturing enterprises 
technical report industrial technology institute 
parunak 
managing emergent behavior distributed control systems 
isa tech 
zambonelli parunak 
signs revolution computer science software engineering 
engineering societies agents world iii third international workshop madrid spain september revised papers volume lecture notes computer science 
springer 
