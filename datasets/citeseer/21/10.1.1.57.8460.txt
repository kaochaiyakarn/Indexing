pointer analysis haven solved problem 
michael hind ibm watson research center saw mill river road hawthorne new york hind watson ibm com past years papers ph theses published pointer analysis 
topic may wonder haven solved problem 
input researchers eld describes issues related pointer analysis remaining open problems 

analyzing programs written languages pointers requires knowledge pointer behavior 
knowledge conservative assumptions regarding pointer accesses adversely ect precision eciency analysis requires information optimizing compiler program understanding tool 
pointer analysis attempts statically determine possible runtime values pointer 
analysis general undecidable large collection approximation algorithms published provide trade eciency analysis precision computed solution 
worst case time complexities analyses range linear doubly exponential :10.1.1.11.3368
complicate matters worstcase behavior indicative typical performance 
long history pointer analysis research appropriate take stock current eld outline problems remain open 
valued input pointer analysis researchers attempts serve role categorizing existing 

background pointer alias analysis attempts determine pointer expressions refer storage location 
points analysis similarly analysis compact representation attempts determine storage locations pointer point :10.1.1.25.6013:10.1.1.109.6502
information determine aliases permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
paste june snowbird utah usa 
copyright acm 
program 
alias information central determining memory locations modi ed referenced 
dimensions ect cost precision trade interprocedural pointer analyses 
pointer analysis addresses dimensions helps categorized analysis 
empirical comparison di erence dimension limit usefulness comparison 
dimensions flow sensitivity control ow information procedure analysis 
considering control ow information computing conservative summary ow insensitive analyses compute solution program method ow sensitive analysis computes solution program point :10.1.1.11.3368
analyses ecient precise ow sensitive analysis 
flow insensitive analyses equality treat assignments bidirectional typically union nd data structure subset treat assignment unidirectional ow values 
context sensitivity calling context considered analyzing function values ow call function return caller 
heap modeling objects named allocation site sophisticated shape analysis performed 
aggregate modeling elements aggregates distinguished collapsed object 
program analysis require program sound solution obtained analyzing components program 
alias representation explicit alias representation points compact representation 

general issues discussing open problems rst address general issues plague eld pointer analysis 
terminology pointer analysis community done audience di erent terminology refer concepts 
example context sensitive insensitive analysis known poly mono variant analyses 
uni cation ow insensitive analyses known steensgaard style analyses similarly ow insensitive analyses known andersen point information inferred ect precision eciency analysis 
style analyses 
analyses formulated constraint analyses referred term equality inclusion constraints respectively 
dichotomy terminology attributed related eld type inference known control ow analysis class analysis 
pointer analysis pointer alias analysis points analysis interchangeably 
prefer pointer analysis general term analysis analyzes pointers alias points analysis analyses produce alias points relations 
metrics measure precision pointer analysis 
popular metric de ne direct metric record average number objects aliased pointer expressions appearing program 
direct indication precision analysis aws metric 
analysis models unbounded number dynamic objects due recursive locals dynamic allocation number objects aliased pointer expression greatly skewed depending model chosen 
example analysis models heap object report low average object heap 
heap directed pointers incorrectly suggesting precise analysis 
pointer information usually input client analyses precision pointer analysis depend ects client 
example may take extra alias create dependence prevents code motion time critical loop 
contrast adding additional aliases pointer dereference fully dependence constrained ect dependence client 
consistent modeling scheme particular value meaningful isolation program may contain pointers point di erent objects runtime spec program go contains function pointer parameter aliased distinct global arrays 
alternative categories metrics static dynamic 
rst metric compares static precision worst case assumptions direct method results dependence queries 
metric particularly useful evaluating analyses strongly typed languages java worst case assumptions bad second alternative static metric implement pointer analysis client report precision :10.1.1.52.5364:10.1.1.40.9725
advantage metric clearly ectiveness pointer analysis particular client analysis 
limitation measures client importance static measure client may questioned 
type inference attempts ascertain runtime types pointer values points analysis uses ner level granularity tries determine named objects held pointer 
type inference literature certainly worth exploring scope 
third approach dynamically measures pointer information ects runtime property program performance dynamic points relations dynamic characterization client analysis :10.1.1.119.2339:10.1.1.43.4867:10.1.1.40.9725:10.1.1.22.4648
metrics limited single execution program represent lower bound static counterparts 
metrics strengths weaknesses combination 
reproducible results sciences result accepted independently veri ed 
unfortunately practice accepted pointer analysis 
furthermore undertake veri cation dicult publish results disputes common wisdom 
susan horwitz echoes sentiment improvements proposed researchers promising seldom claims independently veri ed promising leads abandoned 
duplicating results considered important physical sciences gets short computer science 
change attitude 
issues left aside di cult reproduce result di erent intermediate representations benchmark suites benchmark versions 
example intermediate representations decompose assignments canonical forms limit number pointer dereferences statement goal simplifying exposition implementation analysis 
increase number program variables pointer dereference expressions making comparisons results perform simpli cation meaningless 
progress topic researchers share benchmarks studies cases implementations publicly available 

open questions section discusses open questions pointer analysis 
scalability equality ow insensitive analyses analyze line programs quickly :10.1.1.11.3368
improved precision equality analyses clear precision sucient 
signi cant increased eciency precise subset ow insensitive analyses 
studies suggest subset analyses may provide sucient precision clients 
convergence orts may result reasonably precise analysis ective large programs 
precision subset analyses may sucient clients 
clearly studies need conducted area 
tom reps asserts various clients pointer analysis algorithms produce poor results due inherent imprecisions pointer analysis phase 
interesting precision eciency trade instance case precise pointer analysis runs quickly precise 
precise pointer analysis ecient se context processing carried client analysis cost may decrease 
pos sible understand go pointer analysis needs client analysis 
studies scalable analyses say precise approaches scalable analysis provides context sensitivity 
ow sensitivity 
degree properties 
amer diwan adds easy pointer analysis fast scales large programs 
results worth 
people done area need better understanding pointer analysis 
improving precision improve precision analysis sacri cing scalability 
bill landi das provide interesting ideas loosening soundness safety constraint pointer analysis 
bill landi writes analysis sparks interest detection bugs setting example de ne analysis loc applications 
way able address situation reconsider notion safety 
clearly analysis program optimization roots analyses safety essential concept 
mean essential applications analyses 
experience unsafe analyses led surprising observations 
removed context ow sensitive alias analysis algorithm step essential ensure safety necessary cases faster analysis possible 
case runtime went days minutes 
tests new calculation computing mod programs case missing modi cation 
second results reported user potential bugs false positives tolerated reason 
analysis nd users bugs vast improvement 
false positives users reject analysis spend time pursuing false leads 
told users liked false positives analysis claimed analysis got confused indication code poorly written problems 
came complete surprise 
additional study needed claim observations valid broader sense lead conclude notation safety reconsidered applications static analysis 
das adds pro le directed optimizations need sound pointer information 
shows dynamic points data perform optimization checks ensure safety usual tradeo interestingly error detection doesn sound 
consider tool examines code paths reports errors paths 
tools nd pointer analysis useful analysis conservative 
pro le pointer data tools know pointer values arise test executions 
leads incomplete coverage ok tool meant nd error 
way improve precision sacri cing scalability limit program scope high precision required 
susan horwitz writes potentially important area research address determining accuracy vital certain regions code certain pointer variables nding ways improve results just critical regions 
idea nd special cases certain techniques don general example techniques symbolic bounds analysis divide conquer programs 
bjarne steensgaard observes opportunities nding undiscovered opportunities improvements simply looking existing programming patterns 
example das looked large programs passing address variable function parameter large contributor loss precision ow insensitive context insensitive algorithms 
way add level ow uni cation algorithm achieve results comparable ow sensitive context insensitive algorithms 
designing analysis client needs approach determining appropriate precision scalability consider client problem needs 
barbara ryder expands topic pointer analyses designed appropriate cost precision speci groups client problems 
practical acceptably precise usage may impractical approximate 
class problems programs lines code decide ecacy pointer analysis 
need di erent pointer analysis client problem look classes client problems similar needs design analyses classes checking performance context usages 
write unbounded number papers compare di erent pointer analysis approximations 
accomplish key goal design engineer pointer analyses useful solving real software problems realistic programs 
manuel ahndrich discusses client problems think distinct uses pointer analysis optimizations error detection program understanding 
uses vastly di erent requirements pointer analysis 
optimizations upper bound precision useful advantage precision usually translates specializing code needs bounded 
opinion spectrum analyses covers needs optimizations 
error detection program understanding picture di erent 
applications lower bound precision pointer information pretty useless 
pointer analysis error detection requires precision scaling issues 
das discusses correctness context debugging tools ow insensitive pointer algorithms produce ow insensitive versions reaching de nitions assuming analysis context sensitive correctness debugging tools 
fact believe correctness elimination certain kinds errors extreme step veri cation killer app pointer analysis 
hardware companies compiler optimizers look bad ensuring code correctness matter 
flow sensitivity empirical studies suggest contextinsensitive analyses ow sensitive analysis offer precision improvement subset analysis 
das provides intuition flow sensitivity strong update 
spurious ow pointer values produced ow insensitive contextinsensitive analysis occurs analysis lacks strong update kinds assignments explicit assignments parameter passing 
long analysis context sensitive ectively treats parameter passing strong updates loses explicit assignments 
programs explicit assignments updates pointers deal traversing data structures pointer analysis anyway 
don believe ow sensitive pointer analysis ow insensitive context sensitive pointer analysis pointer analysis useful error detection tools 
computing path sensitive pointer information extremely expensive need investigate ways obtain information 
context sensitivity context sensitive analysis exponential worst case eciency analyses addressed :10.1.1.25.6013:10.1.1.22.4648
question context sensitivity improves precision 
far results mixed context sensitivity improve precision common ow sensitive analysis similar result shown subset ow insensitive analysis extension equality analysis 
context sensitivity shown bene cial simpler equality analysis 
result validate activity partially context sensitive analysis 
attempts recover additional context client analyses 
papers direct precision metric limitations described section 
studies extremely valuable generality con rmed di erent environments selecting di erent pointer analysis dimensions di erent programs 
das adds opinion useful answer de nitely studies suggest 
general pointer analysis develop tools track ow values information programs 
context sensitivity crucial avoid spurious ow values 
second client optimization error detection willing context sensitive specialize copies procedures context sensitive pointer analysis produce precise information 
unfortunately hard evidence re working 
erik ruf writes big issues sources confusion points analysis lies idea computing points solution purpose 
usually xed context sensitivity strategy corresponding xed naming strategy may may correspond appropriate client 
example traditional approach performing contextsensitive ow respect callees ecting callers respect callers ecting callees occurs cloning performed yield bad code software engineering applications worst case view user 
hand eagerly building clones inside stand pointer analysis undesirable potential exponential may useful 
highly parameterized standalone analyses pay costs representing contexts experienced client take full advantage client level semantic information improve points information specialized contexts 
erik ruf continues advocate approach pointer analysis integrated client analysis 
allowing client generation consumption information drive pointer analysis potential improve precision performance 
simple example approach incorporation client analysis information procedure level pointer alias summaries 
pointer analyses may able selectively apply aggressive approaches obtaining precision 
heap modeling shape analysis algorithms demonstrated high precision schemes name objects allocation site scalability medium programs uncertain :10.1.1.152.1240:10.1.1.41.7927
mooly sagiv summarizes current state eld believe making progress honesty say 
tom reps observes certainly come line research shape analysis 
sorts interesting issues ranging better understanding identify important ingredients analysis instrumentation predicates eciency questions 
approach yielding insights problems ordinarily think pointer problems shape analysis problems shape serves kind metaphor kinds properties system memory con gurations arise computation evolves 
das adds suggestion develop shape analyses common case may lose precision general case 
suggestion combine cheap global pointer analysis local shape analysis 
approach relies fact heap traversal code local pointer analysis ensure non local code modifying heap structure traversed 
similar approach expressed laurie hendren group analyzing 
approach rst distinguishes stack heap directed pointers performs simple shape analysis just heap directed pointers 
alternative line research attempts compensate loss precision experienced allocation site naming scheme presence user de ned memory allocation routines 
modeling aggregates key implementation detail aggregate components distinguished summarized object 
weak typing dicult address correctly 
published distinguish aggregates 
diculty exist language java components distinguished languages 
chosen distinguish components 
unfortunately researchers studied impact decision 
rakesh ghiya states need focus energy improving basis information pointer analysis especially malloc site identi cation presence ned memory management handling elds opposed solely focusing incremental improvements propagation techniques 
demand driven incremental analyses eciency pointer analysis concern demand driven incremental approach useful 
date limited progress incremental analysis analyses ow insensitive 
remains open question precise ow sensitive analyses context sensitivity perform shape analysis performed demand driven manner 
java object oriented languages little done area pointer analysis object oriented programs 
modi ed pointer analyses handle dynamic dispatch developed new modular algorithms 
focused java 
java heap directed distinguishing heap important may raise importance simpler shape analysis techniques 
jong deok choi raises issue alias analysis important java alias information help avoid re accessing memory location 
alias information reduce overhead deterministic replay smp systems 
done alias analysis 
bjarne steensgaard looks believe pointer analyses continue adapt changes input programming languages programming styles output tools analyses 
fairly obvious pointer analysis algorithms worked reasonably programs written style languages perform poorly programs written java style languages 
new algorithms created deal speci issues take advantage opportunities created changes programming paradigms programming languages programming styles 
remain important domain pointer analysis context program understanding tools legacy code important look new languages java 
addition ering new features ecacy techniques developed need languages 
incomplete programs pointer analyses require program 
michael burke notes component programming library code prevalent 
trends continue making program analysis useful 
need pointer analyses components libraries parameterized respect con gured full application 
area haven seen full solution problem 
amer diwan adds relatively little understanding perform pointer analysis really real environment 
components real environment include large programs programs threads incomplete programs libraries incremental compilation fast turn times dynamic linking ugly programs 
area large programs threads incomplete programs hasn near 
particular pointer analysis analyzes threads incomplete programs novelty understand precision analyses ected 
analysis right sweet spot ideal world situation program threads 
may worst real world situation 
regarding ugly programs real world programs particularly unsafe languages features practically impossible pointer analysis get 
example consider program li includes garbage collector 
pointer analysis unfortunate analyze garbage collector determine aliases 
think need learn lessons parallelization community part biased opinion parallelization folks believe anymore fully automatic parallelization doable general resorting getting feedback user requiring certain kinds programming styles 
pointer analysis needs similar things 
manuel ahndrich expands idea programmer involvement modular analysis addresses problem analyzing incomplete programs problem scaling analysis large programs 
interface declarations describe sharing non sharing relationships data structures shape descriptions way getting precise pointer information error detection optimizations cost programmer annotations 
excited progress area type systems formal logics provide languages express interface declarations 
engineering insights signi cant characteristic pointer analysis time memory eciency 
conference papers allow sucient room describe algorithm empirical comparison precision eciency related implementation details 
unfortunately section rarely gets written 
careful engineering pointer analysis particularly ow sensitive analysis dramatically improve performance scalability :10.1.1.22.4648
expect production systems new algorithm encourage implementors describe engineering analysis 

summary clear open pointer analysis problems remain 
client problems di erent scalability precision requirements identify client problems addressing optimizations program understanding tools 
furthermore metrics evaluate analysis appropriate client problems 
possible direction research require programmer aid analysis assertions additional type information discussed sections 
example pointer type quali er restrict introduced ansi standard 
keyword pointer programmer asserts pointer point global local directly accessed scope pointer 
net ect pointers longer require stack pointer analysis 
similar suggestions proposed pointers java collection classes 

acknowledgments grateful michael burke jong deok choi das amer diwan manuel ahndrich rakesh ghiya susan horwitz bill landi tom reps erik ruf barbara ryder mooly sagiv bjarne steensgaard sharing ideas current state pointer analysis 
liang input matthew arnold das manuel ahndrich stephen fink david grove ramalingam barbara ryder improving quality 

landi 
extended form alias analysis dynamic allocation 
nd annual acm sigact sigplan symposium principles programming languages pages jan 
andersen 
program analysis specialization programming language 
phd thesis diku university copenhagen may 
available ftp diku dk pub diku semantics papers dvi atkinson griswold 
ective program analysis pointers 
acm sigsoft symposium foundations software engineering pages nov 
bane berkeley engine 
www cs berkeley research aiken bane html 
burke carini 
choi hind 
flow insensitive interprocedural alias analysis presence pointers 
pingali banerjee gelernter nicolau padua editors lecture notes computer science pages 
springer verlag 
proceedings th workshop languages compilers parallel computing 
burke carini 
choi hind 
interprocedural pointer alias analysis 
research report rc ibm watson research center dec 
final draft apr 
reality sgi com homer restrict html 
carini hind srinivasan 
flow sensitive interprocedural type analysis 
research report rc ibm watson research center nov 
chase wegman zadeck 
analysis pointers structures 
proceedings acm sigplan conference programming language design implementation pages june 
sigplan notices june 
chatterjee 
modular data ow analysis statically typed object oriented programming languages 
phd thesis rutgers university oct 
dcs tr 
chatterjee ryder landi 
relevant context inference 
th annual acm sigact sigplan symposium principles programming languages jan 

cheng mei hwu 
modular interprocedural pointer analysis access paths design implementation evaluation 
proceedings acm sigplan conference programming language design implementation pages june 
sigplan notices june 

choi burke carini 
ecient ow sensitive interprocedural computation pointer induced aliases side ects 
conference record twentieth acm sigplan sigact symposium principles programming languages pages jan 
cooper lu 
register promotion programs 
proceedings acm sigplan conference programming language design implementation pages june 
sigplan notices may 
das 
uni cation pointer analysis directional assignments 
proceedings acm sigplan conference programming language design implementation pages june 
sigplan notices june 
das ahndrich rehof 
estimating impact scalable pointer analysis optimization 
seventh international static analysis symposium july 
defouw grove chambers 
fast interprocedural class analysis 
conference record th acm sigplan sigact symposium principles programming languages pages jan 
deutsch 
interprocedural may alias analysis pointers limiting 
proceedings acm sigplan conference programming language design implementation pages june 
sigplan notices june 
deutsch 
determining lifetime aliasing dynamically allocated data higher order functional speci cations 
conference record seventeenth annual acm symposium principles programming languages pages jan 
diwan mckinley moss 
type alias analysis 
proceedings acm sigplan conference programming language design implementation pages june 
sigplan notices may 
dor rodeh sagiv 
checking linked lists 
seventh international static analysis symposium june 
emami ghiya hendren 
context sensitive interprocedural points analysis presence function pointers 
proceedings acm sigplan conference programming language design implementation pages june 
sigplan notices june 
ahndrich foster su aiken 
partial online cycle elimination inclusion constraint graphs 
proceedings acm sigplan conference programming language design implementation pages june 
sigplan notices may 
ahndrich rehof das 
scalable context sensitive ow analysis instantiation constraints 
proceedings acm sigplan conference programming language design implementation pages june 
sigplan notices june 
fink knobe sarkar 
uni ed analysis array object strongly typed languages 
seventh international static analysis symposium june 
foster ahndrich aiken 
polymorphic versus monomorphic ow insensitive points analysis seventh international static analysis symposium june 
ghiya 
interprocedural aliasing presence function pointers 
acaps technical memo mcgill university dec 
ghiya hendren 
connection analysis practical interprocedural heap analysis international journal parallel programming 
ghiya hendren 
tree dag cyclic graph 
shape analysis heap directed pointers conference record rd acm sigplan sigact symposium principles programming languages pages jan 
ghiya hendren 
putting pointer analysis 
th annual acm sigact sigplan symposium principles programming languages pages jan 
ghiya sehr 
importance points analysis memory disambiguation methods programs 
proceedings acm sigplan conference programming language design implementation june 
appear 
hasti horwitz 
static single assignment form improve ow insensitive pointer analysis 
proceedings acm sigplan conference programming language design implementation pages june 
sigplan notices may 
heintze 
demand driven pointer analysis 
proceedings acm sigplan conference programming language design implementation june 
appear 
heintze 
ultra fast aliasing analysis cla lines code second 
proceedings acm sigplan conference programming language design implementation june 
appear 
hendren hummel nicolau 
abstractions recursive pointer data structures improving analysis imperative programs 
proceedings acm sigplan conference programming language design implementation pages june 
sigplan notices july 
hendren nicolau 
parallelizing programs recursive data structures 
ieee transactions parallel distributed systems jan 
henglein 
type inference polymorphic recursion 
acm transactions programming languages systems apr 
hind burke carini 
choi 
interprocedural pointer alias analysis 
acm transactions programming languages systems july 
hind 
assessing ects ow sensitivity pointer alias analyses 
levi editor lecture notes computer science pages 
springer verlag 
proceedings th international static analysis symposium 
hind 
pointer analysis 
international symposium software testing analysis aug 
hind 
evaluating ectiveness pointer alias analyses 
science computer programming jan 
horwitz 
precise ow insensitive may alias analysis np hard 
acm transactions programming languages systems jan 
horwitz er reps dependence analysis pointer variables 
proceedings acm sigplan conference programming language design implementation pages june 
sigplan notices july 
hudak 
semantic model counting abstraction 
conference record acm symposium lisp functional programming pages aug 
hummel hendren nicolau 
description pointer data structures approach improving analysis optimization imperative programs 
acm letters programming languages systems sept 
hearn 
bi assertion language mutable data structures 
th annual acm sigact sigplan symposium principles programming languages jan 
jones muchnick 
flow analysis optimization lisp structures 
muchnick jones editors program flow analysis theory applications chapter pages 
prentice hall 
landi 
interprocedural aliasing presence pointers 
phd thesis rutgers university 
lcsr tr 
landi 
undecidability static analysis 
acm letters programming languages systems dec 
landi ryder 
pointer induced aliasing problem classi cation 
th annual acm symposium principles programming languages pages jan 
landi ryder 
safe approximate algorithm interprocedural pointer aliasing 
proceedings acm sigplan conference programming language design implementation pages june 
sigplan notices july 
landi ryder zhang 
interprocedural side ect analysis pointer aliasing 
proceedings acm sigplan conference programming language design implementation pages june 
sigplan notices june 
larus hil nger 
detecting con icts structure accesses 
proceedings acm sigplan conference programming language design implementation pages june 
sigplan notices july 
lev ami reps sagiv wilhelm 
putting static analysis veri cation case study 
international symposium software testing analysis aug 
liang harrold 
ecient points analysis program analysis 
nierstrasz editors lecture notes computer science pages 
springer verlag sept 
proceedings th european software engineering acm sigsoft foundations software engineering 
liang harrold 
equivalence analysis general technique improve eciency data ow analyses presence pointers 
acm sigplan sigsoft workshop program analysis software tools engineering sept 
liang harrold 
reuse driven interprocedural slicing presence pointers recursion 
international conference software maintenance sept 
liang harrold 
ecient accurate program analysis light weight context recovery 
second international conference software engineering june 
liang harrold 
ecient computation parameterized pointer information interprocedural analyses 
seventh international static analysis symposium july 
liang harrold 
extending evaluating ow insensitive context insensitive points analysis java 
acm sigplan sigsoft workshop program analysis software tools engineering june 
marlowe landi ryder 
choi burke carini 
pointer induced aliasing clari cation 
sigplan notices sept 
mock das chambers eggers 
dynamic points sets comparison static analyses potential applications program understanding optimization 
acm sigplan sigsoft workshop program analysis software tools engineering june 

static analysis software transformation tool 
phd thesis university california san diego aug 
callahan 
generalized aliasing basis program analysis tools 
phd thesis carnegie mellon university 
cmu cs 
palsberg 
equality ow analysis versus recursive types 
acm transactions programming languages systems sept 
pande 
compile time analysis systems 
phd thesis rutgers university may 
pande ryder 
static type determination 
proceedings sixth usenix conference 
plevyak chien 
precise concrete type inference object oriented languages 
acm conference object oriented programming systems languages applications pages oct 
analysis framework 
www rutgers edu 
ramalingam 
undecidability aliasing 
acm transactions programming languages systems sept 
ramalingam field tip 
aggregate structure identi cation application program analysis 
th annual acm sigact sigplan symposium principles programming languages jan 
rehof ahndrich 
type ow analysis polymorphic subtyping cfl reachability 
th annual acm sigact sigplan symposium principles programming languages jan 
reps demand interprocedural program analysis logic databases 
ramakrishnan editor applications logic databases pages 
kluwer academic publishers mar 
reps shape analysis generalized path problem 
acm sigplan symposium partial evaluation semantics program manipulation june 
reps program analysis graph reachability 
information software technology nov 
rountev chandra 
line variable substitution scaling points analysis 
proceedings acm sigplan conference programming language design implementation pages june 
sigplan notices june 
rountev milanova ryder 
points analysis java annotated constraints 
acm conference object oriented programming systems languages applications oct 
rountev ryder 
points side ect analyses programs built precompiled libraries 
international conference compiler construction apr 
rountev ryder landi 
data ow analysis program fragments 
nierstrasz editors lecture notes computer science pages 
springer verlag sept 
proceedings th european software engineering acm sigsoft foundations software engineering 
ruf 
context insensitive alias analysis reconsidered 
proceedings acm sigplan conference programming language design implementation pages june 
sigplan notices june 
ruf 
ective synchronization removal java 
proceedings acm sigplan conference programming language design implementation pages june 
sigplan notices june 
ruf 
partitioning data ow analyses types 
conference record th acm sigplan sigact symposium principles programming languages pages jan 
murtagh 
lifetime analysis dynamically allocated objects 
th annual acm symposium principles programming languages pages jan 
rinard 
pointer analysis multithreaded programs 
proceedings acm sigplan conference programming language design implementation pages may sigplan notices may 
rinard 
symbolic bounds analysis pointers array indices accessed memory regions 
proceedings acm sigplan conference programming language design implementation pages june 
sigplan notices june 
ryder landi stocks zhang 
schema interprocedural modi cation side ect analysis pointer aliasing 
acm transactions programming languages systems mar 
sagiv reps wilhelm 
solving shape analysis problems languages destructive updating 
rd annual acm sigact sigplan symposium principles programming languages pages jan 
sagiv reps wilhelm 
solving shape analysis problems languages destructive updating 
acm transactions programming languages systems jan 
sagiv reps wilhelm 
parametric shape analysis valued logic 
th annual acm sigact sigplan symposium principles programming languages jan 
shapiro horwitz 
ects precision pointer analysis 
hentenryck editor lecture notes computer science pages 
springer verlag 
proceedings th international static analysis symposium 
shapiro horwitz 
fast accurate ow insensitive point analysis 
th annual acm sigact sigplan symposium principles programming languages pages jan 
sharir pnueli 
approaches interprocedural data ow analysis 
muchnick jones editors program flow analysis theory applications chapter pages 
prentice hall 
shivers 
control flow analysis high order languages 
phd thesis carnegie mellon university 
cmu cs 
steensgaard :10.1.1.11.3368
points analysis linear time 
conference record th acm sigplan sigact symposium principles programming languages pages jan 
stocks ryder landi zhang 
comparing ow context sensitivity modi cations side ects problem 
international symposium software testing analysis pages mar 
snelting 
points java general framework empirical comparison 
technical report university passau nov 
su ahndrich aiken 
projection merging reducing redundancies inclusion constraint graphs 
th annual acm sigact sigplan symposium principles programming languages jan 
vivien rinard 
pointer escape analysis 
proceedings acm sigplan conference programming language design implementation june 
appear 
walker crary morrisett 
typed memory management static capabilities 
acm transactions programming languages systems july 
walker morrisett 
alias types recursive data structures 
workshop types compilation sept 
weihl 
interprocedural data ow analysis presence pointers procedure variables label variables 
conference record seventh annual acm symposium principles programming languages pages jan 
whaley rinard 
compositional pointer escape analysis java programs 
acm conference object oriented programming systems languages applications nov 
wilhelm sagiv reps shape analysis 
international conference compiler construction mar 
wilson 
ecient context sensitive pointer analysis programs 
phd thesis stanford university dec 
wilson lam 
ecient context sensitive pointer analysis programs 
proceedings acm sigplan conference programming language design implementation pages june 
sigplan notices june 
yong horwitz reps pointer analysis programs structures casting 
proceedings acm sigplan conference programming language design implementation pages may sigplan notices may 

ryder landi 
incremental context sensitive pointer aliasing analysis 
rst international conference software engineering may 
zhang ryder landi 
program decomposition pointer aliasing step practical analyses 
th symposium foundations software engineering pages oct 
zhang ryder landi 
experiments combined analysis pointer aliasing 
acm sigplan sigsoft workshop program analysis software tools engineering pages june 

zhang 
practical pointer aliasing analyses phd thesis rutgers university aug 
