flexible source level dynamic linking re linking progress sophia drossopoulou susan eisenbach imperial college london give formal semantics dynamic linking re linking code 
semantics source language level allows linking finer grain current java implementations supporting loading verification classes interleaved program execution allows type safe removal replacement classes fields methods 
extended features support unanticipated software evolution 
dynamic linking introduced programming languages support implicit linking newest version libraries 
partially linked code links code fly needed updates automatically available users requirement compilations re linking 
extended support requirements unanticipated software evolution code may need updated program execution 
address requirements new features jvm allow replacement class class signature fix continue feature dynamic software updates support type safe dynamic reloading code type may changed system running 
suggest dynamic linking modules support multiple versions module :10.1.1.135.2437
suggest calculus dynamic linking independently programming language environment 
semantics high level language similar java extended dynamic linking 
contrast earlier formalizations dynamic linking model purely source language level :10.1.1.10.1274
dynamic linking usually described low level terms generated class files effects visible source language programmer shown sequence examples 
view explanation source language level important 
order simplify exposition deal overloading field shadowing 
detail model suggest allows dynamic linking fine grain dl method signatures may loaded verification corresponding bodies dl method bodies need verified execution dl classes may loaded fields methods dl classes methods fields may loaded piecemeal dl classes methods fields may removed needed dl method bodies may replaced 
partly supported dart eu project ist 
similar dynamic linking 
reachable execution 
fresh dl dl represent refinement dynamic linking currently implemented 
dl dl dynamic come higher implementation cost require re checking entire program 
dl dl suggested order support fly code replacement unanticipated software evolution 
furthermore fact model dynamic linking source language level imposes requirement dl dl verifying method body need find signatures methods called load method signatures called methods 
verify corresponding method bodies obtain total eager verification execution 
notation mappings model partial represents undefined 
function extends function formally defined element iff syntax runtime model execution expressions minimal language method call field assignment field access object creation receiver parameter identifier null indicated class names indicated method names field identifiers problem appear java dynamic linking bytecode enriched method signature called methods verification takes place assumption classes contain corresponding methods offset calculation error thrown 
sense verification model eager java 
represent dynamic linking extensions underlying program operational semantics rewrites tuples expressions programs stacks heaps tuples results programs heaps 
stacks sequences stack frames map address parameters addresses null 
shorthand top 
heaps map addresses objects 
notation stands object class fields described mapping object field lookup shorthand field update shorthand results addresses null exceptions 
addresses positive numbers 
contains operational semantics language 
rule replaces extending program time execution allows link related exceptions thrown time execution 
highly non deterministic model similarly 
rule allows garbage collection appendix contains definition reachable addresses 
garbage collection important study classes may removed objects class 
garbage collection defined style similar 
remaining rules standard operational semantics small object oriented language similar previous rule describes lookup parameters receiver value 
rules describe field lookup field update 
rule describes method call new frame pushed stack discarded execution method body rule describes object creation fields class initialized appendix give rules null pointer exceptions stuck execution 
different kinds exception guarantees soundness calculus allows kinds exception null pointer exceptions thrown de referenced access field method propagated context 
stuck exceptions thrown object de referenced ro access non existing field non existing method called propagated context 
link exceptions may thrown point execution need propagated context 
represent link related exceptions verification errors class errors class circularity errors load errors soundness stated section guarantees execution get stuck execution attempt access non existing field method 
case absent method slightly subtle dynamic class receiver method call contains method signature contains method body represents case method body verified link related error 
hand dynamic class receiver contains method signature corresponds case class method details appendix 
note program extensions stands dynamic linking steps dl dl remove classes methods course model errors java related enriched bytecode offset calculations 
program extension programs program extension program maps class superclass class field identifier type class method identifier signature method body maps class superclass maps class field name type maps class meth 
name type maps class meth 
name body program tuple notation indicate components naming convention stand mappings appropriate signatures 
define field method look functions functions defined follows 

judgments mean subclass judgments mean classes distinct 
subclass 
judgments defined appendix 
rules define program extends program say extension relationship reflexive transitive 
describes loading class provided superclass loaded class superclass defined old program need note class loaded empty shell fields methods may loaded piecemeal rules describes loading type field class requires objects class subclasses exist heap field defined subclasses superclasses dropped requirement stage verify method body new field objects heap contain field dynamic linking current jvms implementations situation simpler 
requirement objects subclass implicitly guaranteed classes fully loaded object created requirement field sub superclasses need imposed field resolution takes class defining field account 
describes loading signature method class requires signature subclass subsignature newly loaded signature signature superclass newly loaded signature subsignature judgment requires argument types supertypes corresponding argument types second return type subtype return type second second signature empty defined appendix 
notice require classes appearing signatures methods types fields belong classes loaded 
describes verification method body 
requires signature method loaded body method verify type correct assuming parameters types 
prescribed signature return result subtype return type signature 
define verification 
ification depended existence field method bodies verify removal field 
note contrast rule require allows removal field class provided method body ver objects class heap affect type soundness allows removal method signature class provided method body verification depended existence method signature method bodies verify allows removal method body class note allows removal methods currently active stack 
problematic setting large step operational semantics sense copies method bodies method call 
allows replacing method body class expression provided satisfies method signature 
allows removal class provided class superclass class exist objects class heap fields methods defined needed verification method 
rules correspond features dl dl reflect dynamic linking current java implementations albeit finer steps requiring detailed checks current implementations 
rule corresponds current jvm 
rules correspond dl dl 
allow removal entities heavy requirements checking effect require re checking complete current program cases require scanning complete heap 
expense checks justified fact runtime removal replacement rarely applied applied necessitated demand upgrade safely possibly safety critical system fly 
rules combined rules effect replacement entities 
replacement represented sequence primitive removal loading operations exist simple replacements require long sequence requirement unnecessary java implementations dynamic linking byte code level method calls annotated corresponding signature 
pointed second anonymous referee 
verification 
formed programs primitive operations replacing signature method called methods choice primitive operations attractive theoretical level necessarily natural 
soundness program formed judgment class hierarchy forms tree field identifier re defined subclass superclass method overriding method superclass signature subsignature overridden method methods bodies signature verify signature 
expect able prove extension evaluation preserves formedness program 
heap stack conform program environment judgment receiver arguments point objects conform type declared environment 
object conforms type class subclass contains appropriate values fields class soundness system guarantees execution typed expression appropriate stack heap context formed program get stuck pointed second anonymous referee 
conformance 
attempt access non existing fields methods produces value value guaranteed conform type original expression 
soundness guarantees link pointer exceptions 
expect able prove theorem theorem soundness developed formal system models dynamic linking re linking language level 
fine level 
suggested features support unanticipated software evolution 
includes completion technical details proofs investigation far conditions program extension nec essary preservation program formedness refinement model series models reflecting relevant implementation details class layout object layout offset calculation restrictions bring concept program extension investigation far restriction java dynamic linking object creation loading method removal current model lead dynamic linking model current java implementations investigation ways expressing dynamic linking operations coarser variable granularity extensions incorporate ideas unanticipated object reclassification 
grateful giovanni dezani paola giannini anonymous referees feedback suggestions careful checking repairs formal model 
furthermore second anonymous referee gave insightful suggestions ideas bridging gap theory practical relevance 
davide ancona sonia elena zucca 
calculus dynamic linking 
italian conference theoretical computer science 
gavin biermann michael hicks peter sewell gareth 
formalizing dynamic software updating 
workshop etaps april 
cristiano peter hearn richard 
program logic equivalence presence collection 
theoretical computer science 
damiani paola giannini 
refined effects object reclassification fickle italian conference theoretical computer science 
mikhail 
hotspot technology application advanced profiling 
ecoop june 
sophia drossopoulou susan eisenbach 
manifestations java dynamic linking 
ecoop workshop unanticipated software evolution 
sophia drossopoulou susan eisenbach khurshid 
java sound 
theory practice object systems january 
sophia drossopoulou giovanni susan eisenbach 
flexible models dynamic linking 
th european symposium programming 
susan eisenbach 
dynamic linking phases java 
www doc ic ac uk sue html 
james bill joy guy steele gilad bracha 
java language specification second edition 
addison wesley 
michael hicks jonathan moore scott nettles 
dynamic software updating 
programming language design implementation 
acm 
qian allen goldberg alessandro coglio 
formal specification java class loading 
oopsla november 
appendix reachable addresses address reaches address context heap iff field reaches address reachable stack iff exists reaches reaches stuck execution null pointer exceptions rules de scribe null pointer exceptions 
rules describe stuck ex ecution due missing field method body 
rules describe propagation exceptions 
particular discussed section undefined signature particular class indicates class method execution stuck defined signature undefined method body indicates verification error method body execution throws link related exception 
subexpression subexpression subtypes judgment means possibly indirect subclass means judgments extended full programs giving judgments judgment says signature may safely override signature subclass 
rule says signature may override non existing definition second rule says argument types covariant result types 

