testability transformation efficient automated test data search presence nesting phil university sheffield regent court portobello street sheffield dp uk dcs shef ac uk mark harman king college strand london wc ls uk mark dcs kcl ac uk david binkley college north charles street baltimore md usa binkley cs edu application metaheuristic search techniques automatic generation software test data shown effective approach variety testing criteria 
structural testing dependence target structure nested decision statements cause efficiency problems search failure severe cases 
information useful guiding search form values variables branching predicates gradually available nested conditional satisfied 
provision guidance restricted fact path conditional maintained obeying constraints imposed earlier conditionals 
empirical study shows prevalence types statement pairs real world code second statement pair nested 
testability transformation proposed order circumvent problem 
transformation allows branch predicate information evaluated time regardless earlier predicates sequence nested conditionals satisfied 
experimental study shows power approach comparing evolutionary search transformed untransformed versions programs nested target structures 
case evolutionary search finds test data half time transformed program compared original version 
second case evolutionary search find test data transformed version program 
application metaheuristic search techniques automatic generation software test data shown effective approach functional non functional structural grey box testing criteria :10.1.1.59.3137:10.1.1.33.7219
search space input domain test object 
objective function provides feedback close input data satisfying test criteria 
information provide guidance search 
structural testing individual program structure coverage criteria example individual program statement branch taken individual search target 
effects node void example int int int int true target target true true false false false target missed fed objective function target missed fed objective function target missed fed objective function nested targets require succession branching statements evaluated objective function input data monitored instrumentation branching conditions program 
objective function computed decides close input datum executing target values variables appearing branching conditionals lead execution 
example branching statement needs true target statement covered objective function feeds back branch distance value abs search 
objective values fed back critical directing search potential new test data candidates execute desired program structure 
search encounter problems structural targets nested conditional statement 
case succession branching statements evaluated specific outcome order target reached 
example target nested conditional statements 
individual conditional true order execution proceed 
purposes computing objective function known true true 
similarly satisfied known satisfied 
gradual release information causes efficiency problems search forced concentrate satisfying predicate individually 
example inputs close greater consequence objective function furthermore search restricted seeking inputs satisfy conditionals satisfaction earlier conditionals maintained 
searching input values search chooses input values greater path taken program reaches conditional search finds 
held conditional true order reach second conditional 
inhibits test data search possible input values consider order satisfy predicates appearing sequence nested conditionals 
severe cases search may fail find test data 
ideally branch predicates need evaluated objective function time 
presents testability transformation approach order achieve 
testability transformation source source program transformation seeks improve performance test data generation technique 
transformed program produced merely means discarded served purpose vehicle improved test data search 
ability able evaluate branch predicates time results significant positive impact level guidance provided search 
seen examining objective function landscapes original transformed versions programs 
experiments carried evolutionary algorithms case studies confirm 
study test data half number input data evaluations transformed version 
second study test data search unsuccessful transformed version program 
empirical study examines statement pairs occurring realworld programs 
study statement pair nested 
results serve show benefit proposed transformation approach 
previous method simultaneously evaluate nested branch conditions statements occur pair statements 
empirical study shows occurs pairs transformation approach potentially applicable additional cases 
search structural test data generation search methods proposed structural test data generation including alternating variable method simulated annealing evolutionary algorithms 
interested application alternating variable method evolutionary algorithms structural test data generation 
alternating variable method alternating variable method employed goal oriented chaining test data generation approaches idea local search 
arbitrary input vector chosen random individual input variable probed changing value small amount monitoring effects branch predicates program 
stage manipulating input variable called exploratory phase 
probes neighborhood variable increasing decreasing original value 
move leads improved objective value pattern phase entered 
pattern phase larger move direction improvement 
series similar moves minimum objective function variable 
target structure executed input variable selected exploratory phase 
example search target execution node 
say program executed arbitrary input 
control flow diverges away target false branch node 
search attempts minimize objective value formed true branch distance node exploratory moves value decreased value leads worse objective value 
increased value leads improved smaller objective function value 
larger moves increase greater suppose input program 
execution proceeds true branch node diverges away false branch node 
search attempts minimize objective function order execute node true 
exploratory moves effect objective function 
exploratory moves values decreased value leads worse objective function value whilst increased value leads execution false branch node 
search explores values current value increased values negative impact objective function whilst decreased values lead improvement 
moves decrease value input executes node true 
suppose 
execution proceeds directly branching statements target node 
evolutionary testing evolutionary testing employs evolutionary algorithms test data search 
evolutionary algorithms combine characteristics genetic algorithms evolution strategies simulated evolution search strategy employing operations inspired genetics natural selection 
evolutionary algorithms maintain population candidate solutions just current solution local search methods 
members population iteratively recombined mutated order evolve successive generations potential solutions 
aim generate fitter candidate solutions subsequent generations represent better candidate solutions 
recombination forms offspring components parents selected current population 
new offspring form part new generation candidate solutions 
mutation performs low probability random changes solutions introducing new genetic information search 
generation solution evaluated fitness fitness function 
fitness function direct output objective function value ranked scaled way 
fitness values evolutionary search decides individuals survive generation discarded 
applying evolutionary algorithms structural test data generation candidate solutions possible test data inputs 
objective function evaluates test data input regards current structural target question 
performed slightly different way alternating variable method 
notion branch distance key search iteratively improve solution objective function incorporates metric known approach level known approximation level record nested conditionals left input en route target 
take example 
test data input reaches node diverges away false branch objective value formed true branch distance node approach level value indicate branching nodes encountered nodes 
test data input evaluates node desired way objective value formed true branch distance node approach level value 
node approach level zero branch distance derived true branch predicate 
formally objective function test data input computed follows obj val approach level normalize branch dist branch distance branch dist normalized range function normalize formula branch dist normalize branch dist ensuring value added approach level close branch distance large zero branch distance zero 
approach level adds value branch distance remains unevaluated 
values known path execution program meant calculated maximum value added approximation real branch distances approach level referred approximation level 
seen section addition value actual branch distance inhibit search progress 
nested search targets dependence structural targets nested decision statements cause problems search generation methods failure severe cases 
problem stems fact information valuable guiding search revealed gradually individual branching conditional encountered 
search forced concentrate branch predicate time 
doing outcome previous branching conditionals maintained order preserve execution path current branching statement 
done current branching statement reached 
restricts search choice possible inputs narrowing potential search space 
case study target search node fact needs zero node known true node 
order evaluate node node void case study original double double double target original program void case study transformed double double double dist dist branch distance double dist branch distance dist target transformed version program case study desired way constraint needs maintained 
values search chance making node true backtracks values 
fact needs zero node forgotten node longer reached true branch distance computed 
phenomenon captured plot objective function landscape uses output equation 
shift satisfying initial true branch predicate node secondary satisfaction true branch predicate node characterized sudden drop landscape spikes local minima 
move input values equal search minima back area node evaluated false 
stuck local minima alternating variable method alter input variables 
method accept inferior solution place back node declares failure 
evolutionary algorithm change values order traverse local minima global minimum 
case study demonstrates problems nested targets time target levels nesting 
seen plot objective function landscape objective value objective value original program transformed version objective function landscape case study node void case study double double double double target original program void case study transformed double double double double dist double dist branch distance dist branch distance dist branch distance dist target transformed version program case study objective value objective value original program transformed version objective function case study plotted seen 
switch minimizing branch distance node node characterized sudden drop 
move value significant negative impact objective value focus search pushed back satisfying initial predicate 
area search space objective function regard values variable affect outcome node 
select inputs order take true branch node search constrained plane search space 
related baresel consider nested search target problem statements exist subsequent decision statement example 
observed branch distances branching node simply measured top level node encountered simply added computing objective function 
statements exist pairs statements solution longer plausible 
case study example value node fixed node occurs node executed 
case study value node fixed nodes depending input value furthermore value decided node nested true branches nodes 
burning question statements occur pairs real world code 
extended solution nested target problem justified 
nesting real world programs empirical study empirical study investigated nested statement pairs real world programs 
description program size measured lines code tools wc sloc table 
statement pairs analyzed statements nested followed system dependence graph pattern form 
control dependent 
transitively control dependent control dependency informally defined program node exits statement program node control dependent exit results executed exit may result executed 
rules ensure nested differentiated outlined previous section issue possible statement sequence existing important feature distinguishes earlier baresel 
occurrences checked rules 
exists depends control dependent depends nested 
exists transitively control dependent fifth rule checked role determining outcome variable assigned predicate 
transitively data dependent dependency loop carried condition dependency loop carried ensures data dependent occur merely appear body loop 
table details real world programs program loc description wc sloc ps postscript formatter acct accounting package barcode barcode generator bc calculator berkeley yacc cadp protocol engineering tool box compress data compression utility esa signal processing code pkgs code surfer slicing tool ctags produces tags ex vi file comparing routines ed unix editor empire war game image compression tool espresso logic simplification cad file finding utilities flex bsd scanner version flex bsd scanner version ftpd file transfer protocol daemon gcc cpp gnu preprocessor gnu backgammon gnu chess game player gnu go game player go game go ijpeg jpeg compressor indent formatter li xlisp interpreter daemon network time protocol array processor esa array pre processing code replace regular expression string replacement space esa adl interpreter spice digital circuit simulator unix terminal emulation utilities tile forth forth environment time cpu resource measure trust management service diff front unix utility codesurfer pointer analysis sum average table nesting real world programs program unrelated related ps acct barcode bc cadp compress pkgs ctags ed empire espresso flex flex ftpd gcc cpp go ijpeg indent li replace space spice tile forth time average results seen table 
statement pairs analyzed 
records pairs unrelated records pairs effect related hand counts effect predicate results show unrelated case form pairs handled technique baresel account fifth pairs studied 
unrelated handled extra statements affect branch distance calculation legitimately take place data dependency analysis required establish situation 
remaining related cases plausibly handled approach baresel overcome application testability transformation approach described section 
applying testability transformation testability transformation source source program transformation seeks improve performance test data generation technique 
transformed program produced merely means discarded served purpose intermediary generating required test data 
transformation process need preserve traditional meaning program 
example order cover chosen branch required transformation preserve set test adequate inputs 
transformed program guaranteed execute desired branch initial conditions 
testability transformations applied problem flags evolutionary test data generation transformation unstructured programs branch coverage 
philosophy testability transformation proposed remove constraint branch distances nested decision nodes minimized zero time 
transformation takes original program removes decision statements target control dependent 
way program executed free proceed originally nested areas program regardless original branching predicate allowed happen 
place decision assignment variable dist computes branch distance original predicate 
program value dist reflects summation individual branch distances 
value may objective value test data input 
original version case study transformed program seen 
benefit transformation immediately seen plot objective function landscape 
sharp drop local minima original landscape replaced smooth planes sloping global minimum 
case study slightly complicated nature target positioned levels nesting 
decision exists level second conditional en route target 
branches decision value assigned variable statement node dependent 
transformed version program seen 
benefits transformation instantly seen plot objective landscape 
sharp drop original landscape corresponding branching node evaluated true branching node encountered replaced smooth landscape sloping areas search space global minimum 
experimental study case studies introduced put test evolutionary approach 
genetic evolutionary algorithm toolbox perform table test data evaluations case study run untransformed version transformed version average table test data evaluations case study run untransformed version transformed version average evolutionary searches conducted follows 
individuals generation split subpopulations starting individuals 
linear ranking utilized selection pressure 
input vectors operated evolutionary algorithm vector double values 
individuals recombined discrete recombination mutated real valued mutation 
real valued mutation performed number creep alteration variable values addition small amounts 
competition migration employed subpopulations 
evolutionary search terminated generations test data 
experiment program version repeated times 
domains double variable precision giving search space size case study case study 
case study evolutionary algorithm generally performed half number objective function evaluations test data evaluations transformed version program compared untransformed version table 
average best objective value plot shows search progress untransformed version case study sudden improvements objective search navigates local minimum local minimum 
search progress transformed version expected consistent gradual 
evolutionary algorithm encountered severe difficulties untransformed program case study 
due existence levels nesting search fails occasion 
exactly number test data evaluations performed repetitions experiment table terminating th generation 
search success average best objective value generation original version transformed version average best objective value plot case study transformed version program finding test data early th generation repetitions 
transformation algorithm proposed accommodate decision statements looping constructs decision statements nested outer loop 
branch distance value conditional potentially added 
advanced version algorithm allow loops simply recording minimum value branch distance encountered conditional adding value dist variable 
difference transformation algorithm course intermediate blocks statements occurring nested pairs feature self contained loops 
transformation algorithm issues certain type predicates need detected run time errors allowed occur 
example predicate tests possibility dynamic memory 
example may lead program error transformed due possibility array index zero greater length array causing array bounds error length printf issue possibility introducing division zero errors example segment code conditional removed average best objective value generation original version transformed version average best objective value plot case study currently transformation algorithm works target basis separate transformation needs performed search target 
advanced version algorithm modify predicates program contain function calls 
function call record branch distance decide basis nesting current target boolean value return ultimately execution allowed proceed specific branch 
example tt nesting check records branch distance node lets execution flow true branch regardless equal 
tt nesting check remains true original predicate node current target nested allows execution true branch node regardless node tt nesting check tt nesting check 
tt nesting check current target nested described targets nested conditional statement cause problems search approaches structural test data generation 
presence nesting search forced concentrate satisfying branch predicate time 
slows search progress restricts potential search space available satisfaction branching predicates sequence nested conditionals 
testability transformation approach problem 
testability transformation source source program transformation seeks improve performance test data generation technique 
transformed program produced merely means discarded served purpose intermediary generating required test data 
main idea testability transformation proposed remove constraint branch distances nested decision nodes evaluated 
transformation takes original program removes decision statements target control dependent 
way program executed free proceed original nested areas program calculating branch distance values purpose order compute objective values full possession facts input data 
approach put test case studies 
case studies small examples means represent worse case scenario serve demonstrate power approach 
transformed version case study allowed evolutionary search find test data half number test data evaluations original version program 
whilst test data search target original version case study evolutionary algorithm succeeded time transformed version 
transformation approach deals assignments variables nested conditionals may affect outcome conditionals en route current structural target 
empirical study pairs real world programs statements pair nested showed situation occurs just time 
cases dealt earlier baresel investigated nesting problem 
baresel 
von mit algorithmen 
diploma thesis humboldt university berlin germany july 
baresel binkley harman korel 
evolutionary testing presence loop assigned flags testability transformation approach 
proceedings international symposium software testing analysis issta pages boston massachusetts usa 
acm 
baresel sthamer schmidt 
fitness function design improve evolutionary structural testing 
proceedings genetic evolutionary computation conference gecco pages new york usa 
morgan kaufmann 
ferguson korel 
chaining approach software test data generation 
acm transactions software engineering methodology 
ferrante ottenstein warren 
program dependence graph optimization 
acm transactions programming languages systems 
harman hu hierons baresel sthamer 
improving evolutionary testing flag removal 
proceedings genetic evolutionary computation conference gecco pages new york usa 
morgan kaufmann 
harman hu hierons wegener sthamer baresel roper 
testability transformation 
ieee transactions software engineering 
hierons harman fox 
branch coverage testability transformation unstructured programs 
computer journal appear 
horwitz reps binkley 
interprocedural slicing dependence graphs 
acm transactions programming languages systems 
jones sthamer 
automatic structural testing genetic algorithms 
software engineering journal 
jones sthamer yang 
automatic generation software test data sets adaptive search techniques 
proceedings rd international conference software quality management pages spain 
korel 
automated software test data generation 
ieee transactions software engineering 
korel 
dynamic method software test data generation 
software testing verification reliability 
korel 
assertion oriented automated test data generation 
proceedings th international conference software engineering icse pages 

search software test data generation survey 
software testing verification reliability 
holcombe 
evolutionary testing chaining approach 
proceedings genetic evolutionary computation conference gecco lecture notes computer science vol 
pages seattle usa 
springer verlag 
harrold peck 
test data generation genetic algorithms 
software testing verification reliability 

genetic evolutionary algorithm toolbox www com 

testing results static worst case execution time analysis 
proceedings th ieee real time systems symposium pages madrid spain 
ieee computer society press 
tracey 
search automated test data generation framework safety critical software 
phd thesis university york 
tracey clark mander 
automated program flaw finding simulated annealing 
software engineering notes issue proceedings international symposium software testing analysis issta pages 
tracey clark mander 
way forward unifying dynamic test case generation optimisation approach 
international workshop dependable computing applications pages 
dept computer science university south africa 
tracey clark mander mcdermid 
automated framework structural test data generation 
proceedings international conference automated software engineering pages hawaii usa 
ieee computer society press 
tracey clark mander mcdermid 
automated test data generation exception conditions 
software practice experience 
wegener baresel sthamer 
evolutionary test environment automatic structural testing 
information software technology 
wegener grimm sthamer jones 
systematic testing real time systems 
proceedings th european conference software testing analysis review amsterdam netherlands 
wegener 
verifying timing constraints real time systems means evolutionary testing 
real time systems 
whitley 
overview evolutionary algorithms practical issues common pitfalls 
information software technology 
ellis le gall 
application genetic algorithms software testing application des algorithmes au test des 
th international conference software engineering applications pages toulouse france 

