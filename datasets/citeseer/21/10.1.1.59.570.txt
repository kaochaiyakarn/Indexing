chapter multi objective hyper heuristic approaches space allocation timetabling burke silva soubeiga school computer science information technology university nottingham uk jds exs cs nott ac uk important issue multi objective optimisation ensure obtained non dominated set covers pareto front widely possible 
number techniques weight vectors niching clustering cellular structures proposed literature purpose 
propose new approach address issue multi objective combinatorial optimisation 
explore hyperheuristics research area gained increasing interest years 
hyper heuristic thought heuristic method iteratively attempts select heuristic 
aim hyper heuristic raise level generality able apply solution method problems expense reduced acceptable solution quality compared tailor approach 
key solve problem directly iteratively recommend suitable heuristic chosen performance 
investigate tabu search hyper heuristic technique 
idea multi objective hyperheuristic approach choose iteration search heuristic suitable optimisation individual objective 
test resulting approach different real world combinatorial optimisation problems space allocation timetabling 
results obtained show multi objective hyper heuristic approach successfully developed problems producing solutions acceptable quality 
keywords multi objective optimisation pareto optimisation hyper heuristic local search diversity preservation 

multi objective optimisation aim find solutions represent compromise various conflicting criteria evaluate quality solutions 
solution said non dominated respect set solutions solution criteria better criteria 
pareto optimisation goal find set non dominated solutions representative trade surface non dominated set approximation pareto optimal front steuer rosenthal 
hyper heuristic viewed heuristic iteratively chooses heuristics order solve optimisation problem burke 
aim hyper heuristic raise level generality current meta heuristic systems operate 
hyper heuristic concerned solving problem directly case meta heuristic implementations 
hyper heuristic solves problem indirectly recommending solution method heuristic apply stage solution process 
search heuristic search space search space potential problem solutions 
motivations hyper heuristic method applied wide range problems 
application problem hyper heuristic needs set heuristics formal means evaluating solution quality burke 
goal raise level generality decision support methodology expense reduced acceptable solution quality compared tailor meta heuristic approaches 
past decade hyper heuristics successfully investigated number optimisation problems kendall burke burke newall cowling cowling cowling han kendall 
underlying principle hyperheuristic approach different heuristics different strengths weaknesses sense try combine heuristics intelligent manner strengths heuristic compensate weaknesses burke 
proposes hyper heuristics help guide search optimisation different individual objectives 
help improve ability meta heuristics local search produce non dominated fronts better approximate pareto front 
hyper heuristic approach heuristic targeted order guide search desired regions multi objective hyper heuristics trade surface 
strategy takes consideration localization current solution objective space ability neighbourhood exploration heuristic achieve improvements individual objectives 
hyper heuristic systematically tries apply neighbourhood exploration heuristic improves poor objectives maintaining quality rich objectives solution 
novel approach tackling problem achieving coverage desired trade surface multiobjective combinatorial optimisation 

techniques improving distribution non dominated sets meta heuristics proposed pareto optimisation single solution approaches population approaches coello coello deb jones 
issues major concern developing meta heuristics pareto optimisation ensure algorithm produces uniformly distributed nondominated set solutions search 
researchers shown importance maintaining distribution solutions trade surface performance population meta heuristics pareto optimisation laumanns 
strategies aim improve distribution non dominated solutions proposed 
example search directed desired area trade surface tuning weights ishibuchi 
clustering niching methods attempt achieve distribution assigning fitness solutions density solutions area knowles corne lu yen socha 
fitness sharing clustering technique reduces fitness solutions proportion number solutions close horn talbi zhu leung 
cellular structures adaptive grids clustering techniques aim uniformly distribute solutions trade surface murata coello coello 
restricted mating sets probability recombining solutions degree similarity solutions order avoid generation new solutions similar recombined solutions ishibuchi shibata kumar 
relaxed forms dominance relation burke silva burke silva deb laumanns teich jin wong entropy metrics proposed improve ability multi objective meta heuristics achieve coverage trade surface 
fuzzy logic provide different degrees pareto optimality non dominated sets amato 
techniques attempt restrict likelihood generating solutions crowded regions trade surface boost likelihood generating solutions populated regions 
techniques specification search direction tuning weights method directly attempts push current solution desired region trade surface 
hyper heuristic approach proposed follows strategy attempts intelligent way applying neighbourhood search heuristic push solution desired direction 

multi objective hyper heuristic approach section give brief overview literature related hyper heuristics 
describe proposed hyper heuristic approach multi objective combinatorial optimisation 
develop multi objective hyper heuristic algorithms tabu search framework proposed burke single objective optimisation 
related shown various simple neighbourhood heuristics beneficial tackling complex combinatorial optimisation problems 
example variable neighbourhood search systematic change neighbourhood structure search hansen 
proposed cooperative team heuristics generate non dominated solutions objective sparse knapsack problem 
approach asynchronous architecture implemented number heuristics constructors evolve shared population solutions 
heuristics asynchronous fashion decides solutions generate improve solutions 
hyper heuristics designed control application set heuristics search process burke 
time search selection heuristic past performance exhibited 
note multi objective hyper heuristics important feature hyper heuristics set heuristics applied search simple neighbourhood exploration heuristics hansen elaborate algorithms meta heuristics 
idea hyper heuristics resulting method able produce solutions soon cheap remaining competitive problem specific techniques 
term hyper heuristic proposed years see burke number approaches developed past years 
example hart ross genetic algorithm hyper heuristic solve job shop scheduling problem hart ross 
approach chromosome represents method order identify conflicts schedulable operations heuristic order select operation conflicting sets 
cowling applied genetic algorithm hyper heuristic tackle trainer scheduling problem chromosome represents ordered sequence simple heuristics applied search process cowling 
application hyper heuristics simple choice function rank set simple heuristics reported cowling cowling cowling 
proposed approach multi objective hyper heuristic approach proposed tabu search hyper heuristic method developed burke single objective optimisation 
performance neighbourhood exploration heuristic may depend problem domain particular instance problem domain conditions search process 
multi objective combinatorial optimisation problems set simple neighbourhood exploration heuristics developed fairly quickly 
approach proposed selects appropriate neighbourhood heuristic certain points search order push solution desired direction pareto optimal front 
intelligent way learning simple heuristic achieves improvements objectives solution 
having hyper heuristic systematically chooses best strategy explore neighbourhood current solution help obtain uniformly distributed set non dominated solutions 
learning mechanism implemented reward performing heuristics punish ones 
hyper heuristic maintains list objective improves deteriorates small large small large populated region objective improves deteriorates small large small large 

better coverage trade surface 
solutions crowded regions trade surface solution pushed populated regions region enclosed rectangle 

directed neighbourhood search better coverage trade surface 
heuristic produce improvement detriment particular objective 
adequate heuristics applied improve specific objectives push solution region trade surface region 
heuristics controls application search principles tabu search glover laguna 
tabu search hyper heuristic measures performance simple neighbourhood exploration heuristic adapts knowledge gained search previous runs algorithm 
aim adaptation approximate trade surface efficient way moves promising current quality various objectives historical knowledge search process 
idea described illustrated fig 
minimisation problem considered 
desired trade surface non dominated solutions shown 
solutions respect objective bad respect multi objective hyper heuristics objective hand solution respect objective bad respect objective region trade surface enclosed rectangle considered solutions area 
shows neighbourhood heuristics perform respect objective 
order aim better coverage trade surface strategy maintain solutions current locations push solution populated region 
achieved applying heuristic yields large improvement objective possibly small deterioration objective 
heuristics andh fig 
considered candidate heuristics achieve 
challenge hyper heuristic choose right heuristic right operation right time search 
noted hyper heuristic operates heuristic space opposed implementations meta heuristics operate solution space 
tabu search hyper heuristic framework basic idea tabu search hyper heuristic framework initially introduced burke 
framework heuristics thought competing 
competition rules inspired principles reinforcement learning kaelbling sutton barto 
search heuristic score points rk 
scores allowed decrease increase interval rmin rmax rmin rmax respectively lower upper rankings reflect performance corresponding heuristics 
represent change objective function value previous solution new 
application heuristic results improvement current solution score heuristic increased rk rk 
decreased rk rk positive number 
ways choose 
see burke 
addition ranking scheme tabu list heuristics maintained excludes certain heuristics competition certain duration 
basic idea tabu list prevent heuristic perform chosen soon highest rank 
precisely include heuristic tabu list basis non positive 
furthermore heuristics tabu list released positive 
idea point keeping heuristic tabu current solution improved 
employ variable length dynamic tabu list heuristics 
basic tabu search hyper heuristic outlined pseudocode select heuristic highest rank apply 
rk rk empty 
rk rk include 
stopping condition met 
multi objective tabu search hyper heuristic algorithms propose adapt single objective hyperheuristic approach multi objective optimisation 
consequently modifications performance heuristic longer evaluated respect single objective aggregate objective respect individual objectives 
implies replaced rk replaced rk number objectives problem 
result change decide choose individual objective deal time 
third level design concerns tabu list 
obvious tabu list may ones tabu list objectives 
implemented algorithms different combinations modifications 
algorithms heuristic performance evaluated respect objective 
single tabu random uniform 
algorithm individual objective chosen uniformly random 
tabu list 
algorithm works shown pseudocode 
line non dominated set contains nondominated solutions obtained iteration step 
solution initial population 
line nondominated set contains non dominated solutions obtained line non dominated sets 
multi objective hyper heuristics randomly generate initial population solutions 
solution initial population select individual objective uniformly random 
select heuristic highest rank rk apply current solution 
rk rk empty 
rk rk include 
individual objectives rk rk 
rk rk 
update line set non dominated solutions 
stopping condition met 
generate line set non dominated solutions 
single tabu roulette wheel 
algorithm choice individual objectives roulette wheel selection see goldberg 
individual objective chosen probability proportional distance value current solution value ideally optimal solution solution value objective optimal solution may exist 
idea worse value individual objective relative higher probability objective chosen roulette wheel selection 
course sum probabilities individual objectives equal 
previous algorithm tabu list 
algorithm works follows randomly generate initial population solutions 
solution initial population select individual objective roulette wheel selection 
select heuristic highest rank rk apply current solution 
rk rk empty 
rk rk include 
individual objective rk rk 
rk rk 
update line set non dominated solutions 
stopping condition met 
generate line set non dominated solutions 
multiple tabu roulette wheel 
algorithm choice individual objectives roulette wheel selection previous 
algorithm maintains multiple tabu lists 
effect tabu list objective algorithm works follows randomly generate initial population solutions 
solution initial population select individual objective roulette wheel selection 
select heuristic highest rank rk apply current solution 
objective rk rk empty 
rk rk include 
update line set non dominated solutions 
stopping condition met 
generate line set non dominated solutions 
seen procedures main difference hand wheel hand step simple random uniform selection roulette wheel selection algorithms 
difference number tabu lists 
pure random 
order investigate benefit incorporating learning mechanism case consists heuristic ranking system tabu list heuristics objective selection mechanism hyper heuristics implemented algorithm learning disabled 
complete absence learning mechanism choice heuristic simply randomly 
resulting algorithm repeatedly chooses heuristic uniformly random applies 
simple algorithm illustrated pseudocode 
randomly generate initial population solutions 
solution initial population select heuristic uniformly random apply current solution 
update line set non dominated solutions 
stopping condition met 
generate line set non dominated solutions 
multi objective hyper heuristics note tabu search hyper heuristics maintains line non dominated set solutions 
produces line non dominated set solutions output algorithm 
sections report results obtained applying hyper heuristic approaches different real world combinatorial optimisation problems 
mentioned order apply hyper heuristic problem needed set simple neighbourhood search heuristics means evaluating solution quality 
problem considered 
noted multi objective hyper heuristic approaches designed particular problem mind 
contrary goal develop approach general current meta heuristic approaches multi objective optimisation 
mechanism aim distribution solutions trade surface learning mechanism incorporated hyper heuristics 
show approach effective general terms problems considered 

application space allocation section application multi objective hyperheuristic approaches described space allocation problem 
problem refers distribution office space academic institutions 
give description formulation problem 
describe heuristics employed carry neighbourhood search 
followed presentation discussion results obtained computational experiments 
problem description space allocation problem difficult real world combinatorial optimisation problem closely related class knapsack problems martello toth 
particular space allocation problem considered distribution academic institution available room space set entities staff research students computer rooms lecture rooms way misuse room space violation soft constraints minimised 
soft constraints restrictions limit ways entities allocated rooms entities share room entities allocated penalised violated 
types constraints exist problem instances considered sharing entities share room professors private offices 
penalty applied constraint type violated 
located entity allocated room computer lab 
penalty applied constraint type violated 
adjacent entities allocated adjacent rooms phd student supervisor 
penalty applied constraint type violated 
away entities allocated away lecture room room 
penalty applied constraint type violated 
entities allocated room phd students working project 
penalty applied constraint type violated 
grouped entity allocated room close set entities members research group 
penalty applied constraint type violated 
particular constraint soft hard satisfied solution considered feasible 
depending problem instance types constraints hard soft 
formally space allocation problem refers allocation set entities set available rooms 
entity space requirement 
similarly room capacity 
entity allocated exactly room room contain zero entities 
aggregated space requirements entities allocated room denoted 
room space wastage space overuse 
penalty unit space wasted penalty unit space desirable overuse space waste 
sum penalties due space wastage space space misuse denoted 
sum penalties due violation soft constraints denoted 
problem tackled objective optimisation problem andf minimisation objectives 
solution allocation represented vector length element indicates room multi objective hyper heuristics entity allocated 
detailed description space allocation problem see burke 
neighbourhood search heuristics neighbourhood exploration heuristics designed moves relocate swap interchange 
move changes entity room 
swap move assigned rooms entities swapped 
third move interchanges entities rooms 
neighbourhood structures defined type move 
ways explore neighbourhood structures neighbourhood exploration heuristic 
implementation neighbourhood structures neighbourhood exploration heuristics neighbourhood structure 
neighbourhood exploration heuristics outlined 
selects allocated entity room random relocates entity chosen room 
selects allocated entity random 
explores number randomly selected rooms evaluating suitability relocate selected entity 
chosen entity relocated best subset explored rooms 
allocated entities sorted nonincreasing order individual penalties violation soft constraints 
iteration allocated entity highest penalty selected room relocate entity chosen procedure 
selects allocated entities random swap move 
selects allocated entity random 
explores number randomly selected allocated entities evaluating suitability swapped entity 
best subset explored entities chosen swap move 
allocated entities sorted non increasing order individual penalties violation soft constraints 
allocated entity highest penalty selected entity swap chosen procedure 
selects rooms random interchange move 
selects room random 
explores number randomly selected rooms evaluates suitability interchange 
best subset explored rooms chosen implement interchange move 
rooms sorted non increasing order individual penalties space misuse violation soft constraints 
room highest penalty selected room interchange chosen procedure 
computational results experimental settings 
algorithms coded microsoft visual version experiments run pc pentium iii mhz mb ram running microsoft windows 
problem instances nott trent experiments 
nott nott test prepared real data corresponding distribution office space school computer science information technology university nottingham academic year 
nott instance rooms entities allocated constraints hard soft 
nott instance rooms entities constraints hard soft 
trent instance prepared real data corresponding distribution office space nottingham trent university academic year 
trent instance rooms entities constraints hard soft 
full details data sets see www cs nott ac uk jds research html 
test instance population size generated follows 
entity selected random 
best subset randomly selected rooms chosen allocate entity ensuring hard constraint violated 
process repeated entity allocated room 
hyper heuristic algorithms described section applied problem instances 
termination condition algorithm set maximum number solution evaluations eval eval evaluations multi objective hyper heuristics solution population 
value eval set nott nott trent respectively 
line non dominated sets obtained algorithms shown fig 

comparing hyper heuristic approaches 
clearly observed fig 
problem instances hyper heuristic produces best non dominated sets 
algorithm particularly applied problem nott solutions produced algorithm dominates solutions obtained approaches 
problems nott trent algorithm produces solutions dominate single solutions obtained algorithms 
furthermore achieves coverage trade front problem instances non dominated solutions produced algorithms produce solutions clustered region trade front 
results visually verified best non dominated fronts problem instances obtained hyperheuristic 
clear ranking comparing performances algorithms 
instance trent clearly outperform 
observed fig 
learning mechanism incorporated algorithm combination heuristic ranking system tabu list heuristics objective selection mechanism effective managing set simple neighbourhood search heuristics obtaining sets non dominated solutions 
algorithms incorporate element learning mechanism incorporate roulette wheel mechanism select objective 
case mt having lists heuristics deteriorates performance learning mechanism 
mechanism implemented manage tabu list objective problem basic simply associates tabu list objective 
currently investigating sophisticated mechanisms manage tabu list heuristics 
comparison population annealing algorithm 
population annealing algorithm tailored space allocation problem burke silva 
algorithm fairly sophisticated considerable amount invested design 
approach hybrid algorithm evolves population solutions local search heuristic hls problem nott problem nott problem trent 
non dominated sets obtained hyper heuristics problems nott nott trent 
multi objective hyper heuristics mutation operator 
local search heuristic manages simple neighbourhood search heuristics described space allocation problem 
hls incorporates knowledge problem domain decide neighbourhood search heuristic apply status current solution 
mutation operator solution controlled way removing assigned room entities highest penalties 
entities re allocated different rooms attempt diversify search 
common annealing schedule controls evolution population cooperation mechanism incorporated order encourage sharing parts solutions individuals population avoid exploration visited bad solutions 
detailed description population annealing algorithm seen burke silva 
non dominated fronts obtained algorithm compared produced approach fig 

results reported burke silva obtained termination condition computer 
results shown fig 
show algorithms appears clearly outperform 
example problem nott produces better front 
problem nott outperforms upper part trade surface better lower part front 
problem trent algorithm clearly obtains better results 
shown burke silva knowledge problem domain incorporated approach helps obtain high quality sets non dominated solutions 
see fairly simple hyper heuristic approach appears competitive 
noted expect hyper heuristic approach produce better solutions tuned algorithm incorporates knowledge problem domain 
show multi objective hyper heuristic easy implement produces acceptable results 
section apply hyper heuristics university course timetabling problem 
aim demonstrate approaches effective readily applied different problems solution quality competitive 
problem nott problem nott problem trent 
non dominated sets obtained hyper heuristic tailor population annealing algorithm problems nott nott trent 
multi objective hyper heuristics 
application timetabling section application multi objective hyperheuristic approaches described course timetabling problem 
problem refers scheduling set events pattern time space satisfying number constraints 
give description formulation problem 
describe heuristics employed carry neighbourhood search 
followed presentation discussion results obtained computational experiments 
problem description university course timetabling problem aim schedule number events lectures seminars tutorials available timeslots satisfying number additional constraints see burke schaerf 
problem instances taken literature rossi socha 
set events scheduled 
days day hourly timeslots available timeslots total 
set rooms events take place 
denotes set students attend events 
set features satisfied rooms required events event requires room equipped overhead projector sound system video conference facilities 
student required attend number events 
room maximum seating capacity 
feasible timetable timeslot room assigned event way respect hard constraints student attend event timeslot 
room event takes place satisfies features required event 
capacity room exceeded 
event scheduled combination room timeslot 
number additional constraints satisfied possible 
constraints violated penalty applied solution 
soft constraints listed student scheduled event timeslot day 
student attend consecutive events 
student event attend day 
burke hcv scv number hard constraint violations scv number soft constraint violations evaluate solution quality burke 
tackle problem multi objective fashion 
feasible solutions hcv 
feasible solution evaluated objectives minimised ls respectively eir sc counts number violations respectively second third soft constraint 
represent solutions way rossi socha 
timetable represented vector length 
position vector corresponds event 
position corresponds event ej 
position vector integer number interval indicates timeslot corresponding event scheduled 
example vector event scheduled timeslot scheduled timeslot event scheduled timeslot 
similarly rossi socha tackle problem room assignment separate way means matching algorithm 
algorithm applied solution time solution modified neighbourhood search heuristics 
heuristics described 
neighbourhood search heuristics neighbourhood search heuristics simple neighbourhood moves described rossi socha 
heuristics described follows select event random move current timeslot different timeslot selected random 
move performed hcv solution infeasible 
select event random move current timeslot different timeslot selected random 
move performed hcv solution feasible move result hcv 
swap timeslots events selected random 
move performed hcv solution infeasible 
swap timeslots events selected random 
move performed hcv solution feasible move result hcv 
multi objective hyper heuristics heuristic timeslot selected move provokes improvement hcv 
heuristic timeslot selected move provokes improvement scv 
heuristic pair timeslots selected swap provokes improvement hcv 
heuristic pair timeslots selected swap provokes improvement scv 
scv ls eir sc aggregate objective 
computational results experimental settings 
algorithms coded microsoft visual version experiments run pc pentium iii mhz mb ram running microsoft windows 
test effectiveness hyper heuristic approaches considered problem instances taken socha 
set initial feasible solutions randomly obtained basic tabu search hyper heuristic burke 
allow fair comparison algorithms described wheel start initial set solutions 
initial solutions generated algorithm burke different random seeds 
comparing hyper heuristic approaches 
show fig 
line non dominated sets obtained algorithms applied problem instances medium size events rooms features described socha 
stopping condition iterations individual solution iterations population 
algorithms note performs poorest 
shows benefit obtained incorporating learning mechanism hyper heuristic approaches evident problem space allocation problem 
absence intelligent mechanism learn choose heuristic decision point algorithm bound perform poorly 
said produce best sets non dominated solutions 
striking note get close desired trade front 
relatively poor performance explained multiple tabu lists 
sc eir problem ls 
non dominated sets obtained hyper heuristics problem 
tabu lists may lead overhead terms tabu list management 
observed application space allocation problem having just tabu list produce solutions acceptable quality 
elaborate mechanisms dealing multiple tabu lists neighbourhood search heuristics help obtain better results 
currently exploring possibility 
comparison previous results 
indicated tackling course timetabling problem multi objective fashion 
order find solutions produced approaches competitive obtained methods compare results reported socha burke 
tailored algorithms socha local search approach lls ant algorithm ant 
burke approach single objective tabu search hyper heuristic 
algorithms problem tackled single objective problem aggregated value scv 
tackle objectives ls eir independently 
addition medium size instances experiments compare algorithms small size instance 
allow comparison computed aggregated objective value scv non dominated solutions obtained hyper heuristic multi objective hyper heuristics sc eir 
non dominated sets obtained hyper heuristics problem 
sc eir ls ls 
non dominated sets obtained hyper heuristics problem 
hh lls ant inf table 
comparison multi objective tabu search hyper heuristics single objective local search lls ant algorithms ant socha single objective hyper heuristic hh approach burke 

hyper heuristics table shows average scv solution feasible best scv runs 
column lls inf indicates proportion infeasible solutions runs 
best obtained solutions shown bold 
approach 
best average values line non dominated set results obtained socha burke reported table 
results show sort solutions produced multi objective tabu search hyperheuristics comparable quality reported socha burke 
average solutions obtained multi objective hyper heuristics competitive obtained hh lls ant approaches 
instances best solution obtained multi objective hyper heuristic approaches 
noted algorithms substantially fewer evaluations algorithms socha 
said multi objective hyper heuristic approach effective tackling objective course timetabling problem considered 

problem obtaining uniformly distributed set non dominated solutions great concern pareto optimisation 
proposes application hyper heuristics achieving coverage trade surface pareto optimisation 
central idea develop strategy selects promising neighbourhood search heuristic order guide search desired areas trade surface 
technique advantage applied single solution population algorithms population statistics required case say clustering techniques 
experiments carried space allocation problem university course timetabling problem 
hyper heuristic approach multi objective combinatorial optimisation multi objective hyper heuristics idea adapt application neighbourhood search heuristics quality current solution objectives 
way similar strategy tuning weights specify search directions 
results obtained show hyper heuristic approaches capable obtaining non dominated sets represent coverage trade surface 
results obtained experiments show approaches implemented algorithm shows best performance 
learning mechanism approach uses strategies 
roulette wheel selection deciding objective tackled time search 
algorithm employs single tabu list manage tabu status neighbourhood exploration heuristics search 
concentrate improvement learning mechanism testing comparing approach multi objective literature 
kendall 

monte carlo hyper heuristic optimise component placement sequencing multi head placement machine 
proceedings international conference intelligent technologies pp 
chiang mai thailand 
burke jackson kingston weare 

automated university timetabling state art 
computer journal vol 
pp 

burke kendall newall hart ross 

hyper heuristics emerging direction modern search technology 
glover 
eds handbook metaheuristics kluwer academic publishers 
burke kendall soubeiga 

tabu search hyperheuristic timetabling rostering 
journal heuristics vol 
pp 

burke silva 

improving performance multiobjective relaxed dominance 
proceedings th asia pacific conference simulated evolution learning seal singapore pp 

burke silva 

influence fitness evaluation method performance multiobjective 
appear european journal operational research 
burke newall 

solving examination timetabling problems adaptation heuristic orderings 
annals operations research vol 
pp 

burke 

space allocation analysis higher education requirements 
practice theory automated timetabling ii selected papers nd international conference practice theory automated timetabling lecture notes computer science springer vol 
pp 

coello coello van veldhuizen lamont 

evolutionary algorithms solving multi objective problems kluwer academic publishers 
cowling kendall han 

investigation hyperheuristic genetic algorithm applied trainer scheduling problem 
proceedings congress evolutionary computation cec pp 

cowling kendall soubeiga 

hyperheuristic approach scheduling sales summit 
practice theory automated timetabling iii selected papers rd international conference practice theory automated timetabling lecture notes computer science vol 
springer pp 

cowling kendall soubeiga 

hyperheuristics tool rapid prototyping scheduling optimisation 
second european conference evolutionary computing combinatorial optimisation lecture notes computer science vol 
springer pp 

cowling kendall soubeiga 

hyperheuristics robust optimisation method applied nurse scheduling 
proceedings vii parallel problem solving nature ppsn lecture notes computer science vol 
springer pp 


pareto simulated annealing metaheuristic multiple objective combinatorial optimization 
journal multicriteria decision analysis vol 
pp 

deb 

multi objective optimization evolutionary algorithms wiley 
deb mishra 

quick computation spread pareto optimal solutions 
proceedings nd international conference evolutionary multi criterion optimization emo portugal lecture notes computer science vol 
springer pp 

amato 

fuzzy optimality evolutionary multiobjective optimization 
proceedings nd international conference evolutionary multi criterion optimization emo portugal lecture notes computer science vol 
springer pp 

kwan 

distributed choice function hyper heuristics timetabling scheduling 
proceedings international conference practice theory automated timetabling pittsburgh usa pp 

glover laguna 

tabu search 
kluwer academic publishers 
goldberg 

genetic algorithms search optimisation machine learning 
addison wesley 


multi level multi objective genetic algorithm entropy preserve diversity 
proceedings nd international conference evolutionary multi criterion optimization emo portugal lecture notes computer science vol 
springer pp 

han kendall 

investigation tabu assisted hyper heuristic genetic algorithm 
proceedings congress evolutionary computation cec canberra australia pp 
ieee press 
hansen 

variable neighbourhood search principles applications 
european journal operational research vol 
pp 

hart ross 

heuristic combination method solving job shop scheduling problems proceedings parallel problem solving nature ppsn lecture notes computer science vol 
springer pp 

horn 

niche distributions pareto optimal front proceedings nd international conference evolutionary multi criterion optimization emo portugal lecture notes computer science vol 
springer pp 

ishibuchi yoshida murata 

selection initial solutions local search multiobjective genetic local search 
proceedings congress evolutionary computation cec hawaii usa pp 

ishibuchi shibata 

empirical study effect mating restriction search ability emo algorithms 
proceedings nd international conference evolutionary multi criterion optimization emo portugal lecture notes computer science vol 
springer pp 

jin wong 

adaptive diversity maintenance convergence guarantee multiobjective evolutionary algorithms 
proceedings congress evolutionary computation cec australia ieee press pp 

jones 

multiobjective metaheuristics overview current state art 
european journal operational research vol 
pp 

kaelbling littman moore 

reinforcement learning survey journal artificial intelligence research vol 
pp 

knowles corne 

approximating nondominated front pareto archived evolution strategy evolutionary computation vol 
pp 

failure pareto moeas non dominated really mean near optimal proceedings congress evolutionary computation cec pp 

kumar 

improved sampling pareto front multiobjective genetic optimization steady state evolution pareto converging genetic algorithm evolutionary computation vol 
pp 

silva 

metaheuristic multiobjective approaches space allocation 
phd thesis school computer science information technology university nottingham 
thiele deb zitzler 

combining convergence diversity evolutionary multiobjective optimization 
evolutionary computation vol 
pp 

laumanns zitzler thiele 

effects archiving elitism density selection multi objective optimization 
proceedings st international conference evolutionary multi criterion optimization emo lecture notes computer science vol 
springer pp 

lu yen 

rank density multiobjective genetic algorithm 
proceedings congress evolutionary computation cec hawaii usa ieee press pp 

martello toth 

knapsack problems algorithms computer implementations wiley 
teich 

role dominance multi objective particle swarm optimization methods 
proceedings congress evolutionary computation cec australia ieee press pp 

murata ishibuchi gen 

specification genetic search directions cellular multi objective genetic algorithms 
proceedings st international conference evolutionary multi criterion optimization emo lecture notes computer science vol 
springer pp 

rosenthal 

principles multiobjective optimization 
decision sciences vol 
pp 

rossi sampels birattari dorigo gambardella knowles paechter paquete 

performance different metaheuristics timetabling problem practice theory automated timetabling iv selected papers th international conference practice theory automated timetabling lecture notes computer science vol 
springer pp 

murthy davenport 
cooperative strategies solving bicriteria sparse multiple knapsack problem journal heuristics vol 
pp 

schaerf 

survey automated timetabling 
artificial intelligence review vol 
pp 

socha knowles samples 

max min ant system university course timetabling problem 
ant algorithms proceedings third international workshop ants lecture notes computer science vol 
springer pp 

socha 

agent evolutionary multiobjective optimization 
proceedings congress evolutionary computation cec hawaii usa ieee press pp 

soubeiga 

development application hyperheuristics personnel scheduling phd thesis school computer science information technology university nottingham june 
steuer ralph 

multiple criteria optimization theory computation application 
wiley 
sutton barto 

reinforcement learning mit press 
talbi 

hybrid evolutionary approach multicriteria optimization problems application flow shop 
proceedings st international conference evolutionary multi criterion optimization emo lecture notes computer science vol 
zurich switzerland springer pp 

coello coello 

micro genetic algorithm online adaptation evolutionary multiobjective optimization 
proceedings nd international conference evolutionary multi criterion optimization emo lecture notes computer science vol 
springer pp 



method tool solving multiobjective combinatorial optimization problems 
journal multicriteria decision analysis vol 
pp 

zhu leung 

asynchronous self adjustable island genetic algorithm multi objective optimization problems 
proceedings congress evolutionary computation cec hawaii usa ieee press pp 

