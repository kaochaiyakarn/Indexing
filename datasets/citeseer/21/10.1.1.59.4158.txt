designing roles situated agents elke danny weyns tom holvoet department computer science leuven celestijnenlaan leuven belgium elke danny weyns tom holvoet cs kuleuven ac 
engineering non trivial open multi agent systems challenging task 
research focusses situated multi agent systems systems agents explicitly placed environment agents perceive act 
situated agents long term planning decide action sequence executed select actions locally perceived state world limited internal state 
cope change dynamism system situated agents able adapt behavior 
known family agent architectures adaptive behavior free flow architectures 
building free flow architecture analysis problem domain quasi impossible job non trivial agents 
tackle complexity designing adaptive agent behavior free flow architecture suitable abstractions needed describe structure agent behavior 
abstraction role obviously essential respect 
modeling language needed model behavior agents 
propose statechart modeling language support design roles situated agents 
describe design process adaptive agent behavior part multi agent oriented methodology 
design process integrates abstraction role free flow architecture 
starting results analysis problem domain designer incrementally refines model agent behavior 
resulting class diagram serves basis implementation 
illustrate subsequent design steps case study controlling collection automated guided vehicles 
dealing increasing complexity developing integrating managing open distributed applications continuous challenge software engineers 
fifteen years multi agent systems put forward key paradigm tackle complexity open distributed applications 
research focus situated multi agent systems situated mass generic approach develop self managing open distributed applications 
situated multi agent systems agents environment constitute complementary parts multi agent world mutually affect 
situatedness places agent context able perceive environment alternative descriptions behavior agents adaptive autonomous agents agents 
inter act 
situated agents long term planning decide action sequence executed select actions locally perceived state world limited internal state 
contrary knowledge agents situated agents emphasize internal modeling environment 
favor employ environment source information 
environment serve robust self revising common memory agents 
individual agents continuously keeping track knowledge system 
intelligence situated mas originates interactions agents environment capabilities individual agents 
agents interacting form organization play execute role organization 
situated mass applied success numerous practical applications broad range domains manufacturing scheduling network support peer peer systems 
benefits situated mas known striking flexibility robustness efficiency 
cope change dynamism system situated agents able adapt behavior changing circumstances 
known family agent architectures adaptive behavior free flow architectures 
architectures allow adaptive behavior experiences learned unrealistic assume starting analysis problem domain software engineers build complex free flow architecture complex applications agents perform actions 
applications architecture quickly unmanageable longer possible view architecture 
tackle complexity designing adaptive agent behavior free flow architecture suitable abstractions needed describe structure agent behavior 
abstraction role obviously essential respect roles provide building blocks social organization mas 
modeling language needed model behavior agents 
propose statechart modeling language support design roles situated agents 
describe design process adaptive agent behavior part multi agent oriented methodology 
design process integrates abstraction role free flow architecture 
illustrate subsequent design steps case study controlling collection automated guided vehicles 
structured follows 
section introduce free flow architectures outline design process adaptive agent behavior 
section core explains detail different steps design process roles proposed 
illustrate design process example application 
section conclude give directions 
free flow architectures designing adaptive behavior section start brief free flow architectures illustrate complexity developing free flow architecture non trivial agents 
outline design process adaptive agent behavior propose 
free flow architecture adaptive agent behavior open multi agent systems characterized dynamism change new agents may join system may leave environment may change topology characteristics throughput visibility 
cope dynamism agents able adapt behavior changing circumstances 
known family agent architectures adaptive behavior free flow architectures 
free flow architectures proposed rosenblatt payton 
ph thesis tyrrell demonstrated hierarchical free flow architectures superior flat decision structures especially complex dynamic environments 
results tyrrell influential discussion see 
example free flow architecture depicted fig 

fig 

example free flow architecture 
hierarchy composed nodes receive information internal external stimuli form activity 
nodes feed activity hierarchy arrive action nodes leaf nodes tree winner takes process decides action selected 
main advantages free flow architectures stimuli added relevant nodes avoiding sensory bottleneck problem 
hierarchical decision structure correct initial decisions top level process sensory information relevant lower layers 
decisions level action nodes information available agent taken account select actions 
information processed parallel agent take different preferences consideration simultaneously 
consider agent moves spotted object faced neighboring threat 
agent able take account preference time move straight spotted object move away threat 
free flow decision tree agent avoids threat keeps moving desired object agent moves threat spotted object 
fig 
depicts free flow tree action selection simple robot 
robot lives grid world collect objects bring destination 
robot supplied battery provides energy 
robot maintain battery energy level battery falls critical value robot recharge battery charge station 
left part depicted tree represents functionality robot search collect deliver objects 
right functionality maintain battery depicted 
system node feeds activity node maintain node 
node combines received activity activity energy level stimulus 
symbol indicates received activity summed 
negative activity energy level stimulus indicates little energy remains robot 
resulting activity node zero 
maintain node hand combines activity system node positive activity energy need stimulus resulting strong positive activity 
activity fed charging nodes 
node combines received activity activity level station stimulus symbol indicates multiplied 
similar way charging node combines received activity activity level station stimulus 
binary stimulus robot charge station value positive negative 
node feeds positive activity action nodes connected 
moving direction receives amount activity proportional value gradient stimulus particular direction 
gradient multi directional stimulus compound stimulus value stimulus direction 
values gradient stimulus sensed value gradient field transmitted charge station 
similar way charging node child nodes node explore collect deliver feed activity action nodes connected 
action nodes receive activity different nodes combine activity specific function 
action nodes moving actions function fm calculate final activity level 
definition function max anode activity collected move action denotes possible directions 
anode denotes activity received node 
move actions connected nodes node explore collect deliver 
node particular stimulus associated 
stimulus random direction see object see destination gradient multi directional stimuli corresponding value moving direction 
free multi directional bi nary stimulus indicates way particular direction free free robot move 
action nodes collected activity node highest activity level selected execution 
example node clearly dominant nodes connected actions nodes 
currently east west directions blocked see free stimulus leaving robot possibilities move charge station north south 
depicted situation robot move values guiding gradient field 
designing adaptive behavior simple robot example discussed previous section free flow tree fairly complex 
non trivial agent view tree quickly cluttered 
change part tree unclear affects parts 
free flow trees best developed focus particular functionality agent architecture support structuring 
experiences learned unrealistic assume software engineers build complex free flow architecture complex applications agents perform actions 
applications architecture quickly unmanageable longer possible view architecture 
tackle complexity designing adaptive agent behavior free flow architecture suitable abstractions needed describe structure behavior agent 
software engineer designer needs comfortable modeling language guides process designing behavior non trivial agents 
agent oriented methodologies acknowledge abstraction role core abstraction designing multi agent systems examples gaia mes sage soda see 
methodologies design process described independent particular multi agent architecture discussion see chapter 
comes building concrete multi agent application gap high level design models chosen multi agent architecture implement multi agent system filled 
aim bridge gap enabling designers build concrete multi agent systems applications 
particular propose design process enables designer incrementally refines model agent behavior high level role model concrete agent architecture adaptive behavior free flow architecture 
previous proposed statecharts formalism describe roles see 
focus reusing roles different applications statecharts notation extended new concepts pre action 
statechart specification agent behavior simple design understand typically static rigid model leaves little room adaptive explorative behavior 
revise statechart modeling language refrain considering statechart description agent behavior kind sequence chart statecharts describe role composition structure related actions roles 
fig 

design process adaptive behavior situated agents 
design adaptive behavior agents designer needs go number subsequent design steps depicted fig 

step adaptive behavior designed high level model making role abstraction proposed role statechart modeling language 
diagrams high level model serve basis structuring free flow tree design step resulting skeleton free flow architecture 
name indicates skeleton free flow tree needs refined designer 
refined free flow architecture serves turn basis class diagram model step design process 
section elaborate detail steps design process illustrate concrete example 
note practice design process typically way pass indicated design steps 
designer may iterate number times different steps design process 
design process roles section discuss design process adaptive agent behavior 
start brief example application 
zoom discuss subsequent steps design process detail 
example application current research project industrial partner investigate paradigm situated multi agent systems applied control logistic machines 
traditional systems central controller instructs machines perform jobs preceding calculated plan 
increasing demands respect adaptability scalability faces centralized approach number limitations 
looking machines agents situated multi agent systems aim convert centralized control system self managing distributed system improving adaptability scalability 
case limit discussion automated guided vehicle agv transport system 
agv transport system typically part crucial part integral logistic warehouse system 
agvs unmanned vehicles transport goods place 
agvs supply basic raw materials production department serve link different production lines store goods different processes connect dispatch area 
centrally controlled approach functionality individual agvs limited 
agv provided basic infrastructure ensure safety 
typical agv able perform pick drop functions autonomously 
distribution jobs routing infrastructure collision avoidance junctions handled central control system 
research project apply decentralized approach tackle problem controlling agvs 
look number basic roles agv deal jobs autonomously 
take account functionality agv find job handle job park done ensure battery charged time 
high level model role model elaborate design role model clarify mean role abstraction 
regard role agent functionality context organization 
roles provide building blocks social organization mas 
agents linked agents roles play organization 
links explicit set agents pass objects chain implicitly ant colony dynamic balance exists ants supply colony food ants maintain nest 
step design process high level role model agents designed 
high level modeling supported diagrams schema 
role diagram structures agent roles interdependencies 
distinguish kinds interdependencies roles related hierarchy roles related situated commitments 
role hierarchy expresses behavior agent different levels abstraction 
situated commitment expresses agent preference role relation roles 
action diagrams structure related actions roles 
commitment schema defines activation deactivation conditions situated commitment 
role diagram 
roles interdependencies describe behavior agent described role diagram 
fig 
depicts role diagram agvs 
role diagram consists hierarchy roles related situated commitments 
fig 

role diagram agv 
role represented white oval name role written oval 
role consist number sub roles sub roles sub sub roles role diagram typically composed hierarchy roles 
roles bottom hierarchy denoted basic roles 
role agv active role consisting sub roles search basic role 
role split sub roles collect deliver 
basic roles 
search role agv searches new job 
agv finds job collects associated job subsequently delivers requested destination 
active role agv maintain role park role 
agv executes park role 
role agv simply moves nearest parking place 
maintain role ensures agv keeps battery loaded 
energy level crosses critical value agv finishes current job moves nearest charging station 
find way charging station agv uses internal gradient map 
regular time intervals charging stations broadcast current status 
agvs messages keep gradient maps date 
situated commitment represented rounded rectangle name situated commitment written rectangle 
situated commitment defines relationship role goal role non empty set roles source roles agent 
situated commitment activated behavior agent tends prefer goal role commitment source role 
favoring goal role results consistent behavior agent commitment agent commit fulfill vital task 
collaboration agents commit relatively typically communication 
elaborate situated commitments explain concept detail 
fig 
maintaining commitment ensures agv maintains energy level 
energy vital agv function roles maintain role course connected source roles maintaining commitment 
activation commitment activated agv starts 
commitment ensures agv remains active decides start working 
working commitment activated agv accepts job 
commitment ensures agv acts consistently job progress 
fig 

action diagram maintain role 
action diagram 
action diagrams defined basic roles 
action diagram describes structure related actions basic role 
fig 
action diagram maintain role agv depicted 
state represented white circle diagram 
fig states distinguished charging charged 
states special states default state final state 
default state represented black circle indicates typical start state action sequence modelled role 
final state depicted circle written indicates typical state action sequence modelled role 
default final state connected corresponding regular state arrow 
transition connects states 
transition expresses change state due execution action 
action added transition models functionality performed agent achieve new desired state old state 
action represented white name action written attached transition 
fulfill maintain role agv perform different actions follow gradient find charge station connect charge disconnect charge battery see fig 

execution action may constrained precondition 
precondition satisfied attached action executed 
precondition represented gray rectangle precondition written attached action 
fig 
gray rectangle station denotes agv keeps gradient reaches charge station 
time precondition station true enables agv connect charge station 
long energy level charge agv keeps charging 
condition energy level charged true agv disconnects finishes maintain role 
commitment schema 
situated commitment commitment schema defined describes source roles goal role commitment activation deactivation conditions 
activation deactivation conditions boolean expressions internal state agent perceived information event occurrences sending receiving message 
activating situated commitments communication enable situated agents setup explicit collaborations participant plays specific role 
elaborate scenario detailed discussion refer 
fig 
depicts commitment schema situated commitment maintaining 
fig 

commitment schema situated commitment maintaining 
commitment schema expresses energy level agv falls threshold charge situated commitment maintaining activated 
urge agv prefer execute maintain role active ark roles 
battery condition energy level charged satisfied deactivates maintaining commitment 
free flow architecture role action diagrams commitment schema serve basis design free flow architecture second design step 
high level models build skeleton free flow architecture refined 
skeleton free flow tree 
free flow tree describes behavior agent detail 
high level diagrams roles situated commitments described previous section serve basis structuring free flow tree 
role structure described role diagram see fig 
reflected skeleton structure tree 
fig 
depicts skeleton structure agv example 
fig 

skeleton structure free flow tree role diagram fig 

roles match trees free flow tree sub roles sub trees situated commitments hand correspond connectors connect source roles situated commitment goal role 
situated commitment activated extra activity injected goal role relative activity levels source roles 
details discussed shortly 
action diagrams commitment schemas enable developer refine skeleton tree 
fig 
depicts refined sub tree maintain role maintaining commitment 
states action diagram correspond activity nodes tree 
preconditions correspond binary stimuli connected corresponding nodes 
examples stimuli station connected compare fig 
fig 

action action diagram basic role corresponds action node tree 
number analog stimuli tree represent data action diagram determines action selection 
example stimulus gradient guides agv move station 
activation de activation conditions situated commitments described commitment schema correspond conditions associated corresponding connectors free flow activity tree 
fig 
illustrates maintaining commitment 
refining free flow tree 
developer refine free flow tree integrating details needed action selection 
fig 
depicts refined subtree maintain role situated commitment maintaining 
action node follow gradient fig 
refined different moving actions agv 
stimulus gradient split multi directional stimulus 
segment represents tendency value gradient field agv move particular direction 
couple extra stimuli represent data influences action selection 
example multi directional stimulus free denotes direction agv able drive 
stimuli needed verify activation deactivation condition connected situated commitment 
maintaining commitment activated fig 

refined maintain role maintaining commitment 
value energy level crosses threshold value charge 
commitment calculates extra activity inject maintain role 
maintaining commitment extra activity calculated sum symbol activity level active ark role activity levels top nodes roles 
soon battery level reaches threshold value charged maintaining commitment deactivated longer injects extra activity maintain role 
class diagram free flow framework design step refined free flow tree mapped class diagram 
class diagram distinguish parts framework application specific part hot spot instantiates framework 
framework 
designed framework free flow architecture implemented net 
fig 
part framework depicted classes associations drawn dotted line framework consists set related classes model concepts free flow architecture described previous section 
concept situated commitment activation deactivation conditions modeled class subclasses class clarity details method names classes depicted 
fig 

maintain role maintaining commitment refinement 
association class 
free flow architecture kinds stimuli distinguished binary stimulus analog stimulus 
modeled framework class hierarchy stimulus 
concept link architecture represents path activity flow 
link modeled link class framework 
link associations association class association class 
instantiating framework 
concrete free flow tree generic framework instantiated application specific part hot spot instantiated framework 
part class diagram dotted line fig 
depicts partial instantiation framework maintain role maintaining commitment 
situated commitment maintaining translated maintaining class subclasses class framework 
association commitment modeled class association modeled class subclass fig 

maintain role maintaining commitment framework partial 

link binary stimulus energy need maintain activity node translated class subclasses link class framework 
class association maintain class subclass class association class subclass class 
number examples depicted explained 
designing non trivial open multi agent systems challenging task 
focussed designing adaptive behavior situated agents 
existing agent oriented methodologies describe design process independent particular multi agent architecture comes building concrete multi agent application gap high level design models chosen multi agent architecture filled 
proposed design process adaptive agent behavior part multi agent oriented methodology 
design process bridges gap high level role modeling free flow architecture adaptive agent behavior 
starting results analysis problem domain designer incrementally refines model agent behavior 
highest level roles interdependencies caught high level model 
model basis designing skeleton free flow architecture 
skeleton refined contains details needed action selection 
free flow tree mapped class diagram serves basis implementation agent behavior 
illustrated role design process case study controlling collection automated guided vehicles 
phased design process proposed line paradigm model driven architecture 
successive design steps agent behavior specified subsequent lower levels abstraction level introducing detail 
highest level model independent architecture chosen medium level 
likewise free flow architecture independent chosen framework lowest design level 
intend elaborate vision extend design process concerns need engineered situated mass agent communication coordination mas organization design environment mas 
presents results research sponsored research council leuven flemish institute advancement scientific technological research industry iwt 
results obtained concerted research action agents coordination control project modular controls concept emc project 
express appreciation contribution 

babaoglu meling anthill framework development agent peer peer systems 
international conference distributed computing systems vienna austria 

bonabeau snyers kuntz theraulaz routing telecommunications networks ant agents 


brooks intelligence representation 
artificial intelligence journal volume 

bryson intelligence design principles modularity coordination engineering complex adaptive agents 
phd dissertation mit 
caire agent oriented analysis message uml 
agent oriented software engineering ii volume lncs new york springer 

ferber distributed artificial intelligence 
addison wesley 

genesereth nilsson logical foundations artificial intelligence 
morgan 

holvoet application specific reuse agent roles 
software engineering large scale multi agent systems vol 
lncs springer verlag 

luck inverno agent software development 
artech house 

maes modeling adaptive autonomous agents 
artificial life journal vol 

lucena object oriented framework development 
acm crossroads 
see www acm org crossroads frameworks html 
model driven architecture mda www omg org mda 
odell parunak fleischer role roles designing effective agent organizations 
software engineering large scale multi agent systems vol 
lncs springer verlag 

omicini soda societies infrastructures analysis design agent systems 
agent oriented software engineering volume lncs new york springer 

parunak agent architecture manufacturing requirements agent system design 
integrated computer aided engineering vol 


rosenblatt payton fine grained alternative architecture mobile robot control 
international joint conference neural networks ieee 

tyrrell computational mechanisms action selection 
ph thesis university edinburgh 

weyns holvoet 
protocol communication situated multi agent systems 
accepted th international joint conference autonomous agents multi agent systems aamas new york 

weyns holvoet 
commitments situated agents 
submitted ieee smc international conference systems man cybernetics hague netherlands 

wooldridge jennings kinny gaia methodology agent oriented analysis design 
autonomous agents multi agent systems vol 
