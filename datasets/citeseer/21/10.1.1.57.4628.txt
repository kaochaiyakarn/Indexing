theoretical aspects object oriented programming types semantics language design draft january edited carl gunter john mitchell published mit press foundations computing series 
theoretical aspects object oriented programming foundations computing michael garey albert meyer editors complexity issues vlsi optimal layouts shuffle exchange graph networks frank thomson leighton equational logic programming language michael donnell general theory deductive systems applications yu maslov resource allocation problems algorithmic approaches ibaraki naoki katoh algebraic theory processes michael hennessy px computational logic hayashi hiroshi nakano stable marriage problem structure algorithms dan gusfield robert irving realistic compiler generation peter lee single layer wire routing compaction miller basic category theory computer scientists benjamin pierce categories types structures category theory working computer scientist andrea asperti giuseppe longo semantics programming languages structures techniques carl gunter theoretical aspects object oriented programming types semantics language design carl gunter john mitchell mit press cambridge massachusetts london england fl massachusetts institute technology rights reserved 
part book may reproduced form electronic mechanical means including photocopying recording information storage retrieval permission writing publisher 
book printed bound united states america 
library congress cataloging publication data cataloging publication data contents series foreword vii objects subtypes user defined types procedural data structures complementary approaches data abstraction 
john reynolds category theory design implicit conversions generic operators 
john reynolds ii type inference type inference records natural extension ml 
didier emy type inference objects instance variables inheritance 
mitchell wand static type inference parametric classes 
atsushi ohori peter buneman iii coherence modest model records inheritance bounded quantification 
kim bruce longo contents vi inheritance implicit coercion 
val breazu tannen thierry coquand carl gunter andre scedrov coherence subsumption minimum typing type checking pierre louis curien giorgio ghelli iv record calculi operations records 
luca cardelli john mitchell typing record concatenation free 
didier emy extensible records pure calculus subtyping 
luca cardelli bounded quantification undecidable 
benjamin pierce inheritance semantic models object oriented languages 
sam kamin reddy inheritance subtyping 
william cook walter hill peter canning typed foundation method specialization inheritance 
john mitchell series foreword theoretical computer science undergone decades development 
classical topics automata theory formal languages computational complexity firmly established importance theoretical practice widely recognized 
stimulated technological advances theoreticians rapidly expanding areas study time delay theoretical progress practical impact decreasing dramatically 
publicity breakthroughs cryptography linear programming steady progress programming language semantics computational geometry efficient data structures 
newer speculative areas study include relational databases vlsi theory parallel distributed computation 
list topics continues expanding difficult stay progress increasingly important significant distilled communicated manner facilitate research application 
publishing comprehensive books specialized monographs theoretical aspects computer science series foundations computing provides forum important research topics entirety placed perspective researchers students practitioners alike 
michael garey albert meyer vii theoretical aspects object oriented programming languages volume comprises fifteen chapters selected authors theoretical aspects object oriented programming languages 
focus type systems semantic models advances areas contribute new language designs 
collection divided parts part objects subtypes part ii 
type inference part iii 
coherence part iv 
record calculi part inheritance 
chapters organized approximately order increasing complexity language constructs consider 
put briefly collection begins variations pascal algol languages develops theory illustrative record object models concludes research directions developing comprehensive theory object oriented programming languages 
part discusses similarities differences objects data types address general problems associated subtyping subclasses presence operations may applied objects type 
parts ii iv form core collection concerned may called record model object oriented languages 
specifically chapters discuss static dynamic semantics languages simple object models include type class hierarchy explicitly provide called dynamic binding dynamic method lookup 
part ii develops record model incrementally simple extension record operations language ml 
denotational semantics languages considered part iii elaborate record object models precise connections object oriented methodology developed part iv 
extensions modifications record object models considered part chapters bring closer full complexity practical object oriented languages 
complete theoretical underpinnings language features discussed part remain topic research 
objects subtypes chapters volume form part works chronologically 
john reynolds discuss themes echoed rest volume 
chapter reprints overlooked data abstraction discussing difference algebraic view data types consist type sort associated functions reynolds called procedural data structures better known objects 
chapter uses case study illustrate tradeoffs approaches data abstraction 
idea underlying philosophies data abstraction differentiate designs languages ada ml languages emphasize object oriented approach 
understand chapter helpful appreciate context 
original conference semantics directed compiler generation intended provide challenge researchers area 
primary topic subtypes 
motivating example familiar type integers viewed subtype reals 
asks relationship hold operation addition integers reals 
mapping subclass integer superclass real case commands integer real integer real integer real meaning 
question illustrates fundamental themes studying semantics subtypes 
notion coercion map 
maps explicit programs implicit infer coercion need programmer annotations 
second notion coherence 
equivalence programs typical coherence question 
slightly general expression condition says coercions having types respectively composition coercions coercion equal chapter provides categorical treatment issue semantics subtypes algol language 
reynolds concluding remarks chapter include description system subtyping records variants function spaces anticipates ideas subtyping focus study works part iii expand discussion languages include parametric polymorphism 
types type inference central objectives studies volume ensuring desirable characteristics run time behavior programs 
valuable class characteristics ensured imposition phase distinction compile time run time separation exploits static type discipline filter programs may undesirable run time properties 
programs impose discipline programming restrained fewer assumptions run time errors 
example language type discipline untyped language considered chapter chapters volume focus typed languages 
gradations typing systems may impose 
approach impose system programmer type annotations checked decidable semi decidable type verification algorithm 
hand may define type discipline property general type inferred program program explicit programmer type annotations 
practical utility type disciplines demonstrated language ml mth mt pau uses hindley milner type inference algorithm hin mil generate type schemes programs type annotations 
development similar systems languages object oriented features flexible record types focus research topic part ii volume 
study type inference systems flexible record types began seminal mitchell wand wan 
part ii consists works forged directions system type inference languages flexible records 
chapter offers proposal didier emy type inference system language extending ml 
emy type system allows functions applied records minimum set components required function body 
problem essentially problem type checking programs manipulate objects allowing object replaced methods 
chapter employs similar system demonstrates fundamental concepts object oriented languages encoded system type inference 
particular wand focuses concepts instance variable inheritance 
notion instance variable modelled functionally chapter rest volume record fields 
result clear analysis type system easy understand properties 
compared treatments inheritance appear central topic part chapter describes approach peter buneman atsushi ohori achieving flexible record types system type inference 
system notion conditional types annotate type variables restrictions idea reminiscent bounded quantification studied subsequent chapters 
systems bounded quantification buneman ohori system inferred principle types 
chapter discusses programming database primitives proposed system 
semantics coherence chapters forming part ii consider ways record system flexible quantification type variables common theme part iii combine quantification idea subtyping lines discussed chapter 
central theme part iii idea coherence 
coherence discussed chapter form studied part ii involves number new ideas 
prior semantics subtypes focused interpreting subtypes subsets 
chapter breaks idea proposes important instances subtypes considered subsets semantic perspective 
chapter kim bruce longo proposes new idea understanding semantics subtyping way intuitive flavor interpreting subtypes subsets addressing problem coercion subtype supertype may injection mapping 
idea partial equivalence relations kleene applicative algebra partial recursive functions serve interpretations types 
coercion subtype supertype inclusion sense compatible idea coercion need injection 
proving corresponding meaning function defined coherence problem interpretation primary results chapter 
different approach coherence essentially language pursued chapter chapter val breazu tannen thierry coquand carl gunter andre scedrov 
interpreting system interest directly translate calculus syntactically extension girard reynolds polymorphic calculus explicit notion coercion subtyping relation 
translation defined induction height derivation type term give defined semantics shown translation coherent sense matter derivation term translation result provable equality target calculus 
shows model target calculus seen model calculus subtyping models fairly understood provides simple system generating models 
proofs coherence chapters technically intricate ones appear volume 
chapter final chapter part iii pierre louis curien giorgio ghelli address question prove results term rewriting techniques 
exposition calculus called pronounced sub simplifies syntax language studied changing central issues involved proving coherence languages considered previous chapters 
defining rewriting directly proofs curien ghelli define auxiliary type system terms carry complete information typing derivations 
normalizing rewriting system defined terms language properties rewriting system related proofs way implies desired coherence result 
varieties record calculi presenting semantic models part iii different illustrative languages 
common core typed lambda calculus polymorphism subtyping 
originally formulated cardelli wegner part language called bounded fun cw name standard language polymorphic lambda calculus subtyping extension girard original polymorphic lambda calculus gir gir called system difference subtype relation types written symbol alternatively 
provides framework studying object oriented languages important features apparently missing notable constructs resembling objects 
represent basic concepts object oriented languages simple way natural add form objects cardelli seminal records subtyping car originally appeared conference form traditional regard objects derived record structures way 
substantial portion research foundations object oriented languages concerned record operations added volume line represented chapters part iv 
chapter part iv written luca cardelli john mitchell begins summarizing number calculi record operations developed prior original publication chapter presents calculus record operations subsumes prior proposals 
main operations records chapter add field component record ii remove field record iii select value specified component record 
operations main focus form polymorphism record types allows single function manipulate types records sharing certain specified fields 
importance relevance form polymorphism may illustrated example 
program kinds twodimensional geometric points useful able move kinds points function 
single move function applicable ordinary points coordinates colored points having additional color field extensions basic class points 
originally addressed language bounded fun cw discussed section chapter bounded fun significant limitations 
lifted chapter 
limitation record operations chapter impossible type concatenation records direct manner 
discussed section chapter 
programming situation calls record concatenation relational databases natural represent relation finite sets records 
join relations obtained concatenating pairs records relation agree appropriate fields 
straightforward approach record concatenation chapter didier emy 
chapter gives general method defining record concatenation language allows records extended new fields sufficient functional programming capabilities 
method shows multiple inheritance reduced single inheritance principle 
surprising feature explained detail chapter luca cardelli range record operations may fact encoded directly encoding records represented certain form polymorphic function 
encoding probably inefficient useful practice shows semantic theoretical point view substantial range record operations may represented basic language record operations 
part ii concerned existence algorithms type checking inferring types expressions containing record operations algorithmic concerns absent chapters part iv 
final chapter part iv written benjamin pierce shows typing algorithm holds regardless types variables formal function parameters written explicitly programs 
reason subtype relation undecidable 
shows significant implementation problems building practical programming language full concluding section chapter gives suggestions avoiding algorithmic problem practice 
inheritance records provide basic feature objects aggregation functions data 
addition records record calculi parts ii iv provide forms subtyping parametric polymorphism allow programs operate uniformly records objects share common properties 
roughly speaking languages considered parts ii iv concerned operations objects ways objects created defined 
part contains final chapters collection focus changes inheritance mechanisms define objects classes objects incrementally specifying new object differ defined 
chapter part written samuel kamin reddy presents series model languages illustrate difference pascal style records form object class declarations appear languages smalltalk gr eiffel mey es 
language called provides simple form object instance variables methods 
semantic interpretation object message environment binding message names methods 
essentially record associating value component field name 
pointed chapter object denotes recursively defined message environment record methods object may refer recursively 
effect language shows recursive definitions allow model objects records 
subsequent languages chapter smalltalk final language abstraction smalltalk 
form class function creates objects sharing common set methods 
common object oriented languages classbased brings closer form language generally encountered practice 
easily translated 
may interpreted positive result record model 
adds form inheritance allowing class defined 
final example language smalltalk differs class inherits class message object type results invocation method class self method leads method class class technical sounding difference important object oriented programming explained detail chapter 
chapters typed functional languages notion global store illustrate main ideas chapter uses untyped imperative languages 
denotational semantics traditional scott strachey approach reduces imperative programs functional programs store operations 
remaining chapters chapter william cook walter hill peter canning chapter john mitchell 
concerned inheritance chapter class language chapter delegation language 
main difference class delegation languages classbased languages object created class class determines implementation method 
contrast delegation languages allow object created cloning implementation inherited method determined object cloned 
approaches inheritance may sound different basic nature inheritance mechanism re methods similar cases 
comparison delegation languages may ste 
chapters concerned typing relation inheritance 
significant issue papers stated class terms class defined inheritance may desirable change types inherited methods 
significant may objects created inheriting class unusable substitutes objects base super class 
example suppose class point points coordinates associated methods including equality method eq 
define class colored point points coordinates color inheriting eq methods natural redefine eq colored points 
specifically compare objects class point equal coordinates 
contrast objects class colored point equal coordinates color 
situation eq method colored point may comparison colored point 
may understand title inheritance subtyping chapter example points colored points 
definition subtyping subtype precisely object type mau context object type required producing type error 
suppose point colored point described object class point object type colored point 
clearly eq sensible equality method allows compared point including 
colored point subtype point expect able replace occurrence causing type error 
expression eq cause problem eq method requires coordinates replace occurrence resulting eq error 
specifically eq method requires coordinates color color 
produces error message understood smalltalk systems 
point view chapters type error 
inheritance produce subtype 
difference chapters way objects represented 
uses recursively defined records calculus allowing record concatenation combination called chapter second uses essentially self application place recursive definition 
comparison approaches appears section chapter conference bru written collection assembled 
cases possible record operations account inheritance 
point comparison recursively defined records diverge callby value evaluation order alternative representation satisfactory call value call name 
bob prior editor mit press suggesting idea collecting selection subject single volume 
indebted authors articles collection cooperation enthusiasm project 
articles volume reprinted previous publications received varying levels review 
new submissions appearing volume subjected formal review process prior inclusion 
bibliography bru bruce 
equivalence semantic definitions inheritance object oriented languages 
proc 
mathematical foundations programming language semantics pages berlin 
springer lncs 
car cardelli 
semantics multiple inheritance 
information computation 
special issue devoted symp 
semantics data types sophia antipolis france 
cw cardelli wegner 
understanding types data abstraction polymorphism 
computing surveys 
es ellis 
annotated manual 
addison wesley 
gir 
girard 
une extension de interpretation de godel analyse son application elimination des coupures dans analyse la th eorie des types 
fenstad editor nd scandinavian logic symposium pages 
north holland amsterdam 
gir 
girard 
interpretation fonctionelle elimination des coupures de ordre 
etat universite paris vii 
gr goldberg robson 
smalltalk language implementation 
addison wesley 
hin hindley 
principal type scheme object combinatory logic 
trans 
ams 
mey meyer 
eiffel language 
prentice hall 
mil milner 
theory type polymorphism programming 
jcss 
mt robin milner mads tofte 
commentary standard ml 
mit press 
mth robin milner mads tofte robert harper 
definition standard ml 
mit press 
pau paulson 
ml working programmer 
cambridge univ press 
ste stein 
delegation inheritance 
proc 
acm conference objectoriented programming systems languages applications pages 
wan wand 
complete type inference simple objects 
proc 
ieee symp 
logic computer science pages 
corrigendum proc 
ieee symp 
logic computer science page 
part objects subtypes chapter user defined types procedural data structures complementary approaches data abstraction 
john reynolds appeared stephen editor new directions algorithmic languages ifip working group algol inria pages 
reprinted david gries editor programming methodology collection papers members ifip wg springerverlag pages 
copyright springer verlag attn permissions dept fifth ave flr new york ny 
chapter category theory design implicit conversions generic operators 
john reynolds appeared neil jones editor compiler generation springer verlag lecture notes computer science pages 
copyright springer verlag attn permissions dept fifth ave flr new york ny 
part ii type inference chapter type inference records natural extension ml 
didier emy chapter type inference objects instance variables inheritance 
mitchell wand chapter static type inference parametric classes 
atsushi ohori peter buneman proceedings acm oopsla conference sigplan notices vol number october pages 
copyright association computing machinery west nd street new york new york 
part iii coherence chapter modest model records inheritance bounded quantification 
kim bruce longo information computation pages 
copyright academic press east street mn 
chapter inheritance implicit coercion 
val breazu tannen thierry coquand carl gunter andre scedrov information computation pages 
copyright academic press east street mn 
chapter coherence subsumption minimum typing type checking pierre louis curien giorgio ghelli mathematical structures computer science pages 
copyright cambridge university press west th street new york ny 
part iv record calculi chapter operations records 
luca cardelli john mitchell mathematical structures computer science pages 
copyright cambridge university press west th street new york ny 
chapter typing record concatenation free 
didier emy nineteenth annual symposium principles programming languages pages 
copyright association computing machinery west nd street new york new york 
copyright association computing machinery west nd street new york new york 
chapter extensible records pure calculus subtyping 
luca cardelli digital equipment systems research technical report number 
copyright digital equipment lytton ave palo alto ca 
chapter bounded quantification undecidable 
benjamin pierce part inheritance chapter semantic models object oriented languages 
sam kamin reddy chapter inheritance subtyping 
william cook walter hill peter canning hudak editor principles programming languages pages 
copyright association computing machinery west nd street new york new york 
chapter typed foundation method specialization inheritance 
john mitchell hudak editor principles programming languages pages 
copyright association computing machinery west nd street new york new york 
