instant polymorphic type systems mobile process calculi just add reduction rules close henning wells heriot watt university 
different mobile process calculi invented number type systems developed 
soundness properties proved separately calculus type system 
generic polymorphic type system poly works wide range mobile process calculi including calculus mobile ambients 
calculus satisfying general syntactic conditions formedness rules types derived automatically reduction rules poly works unchanged 
derived type system automatically sound subject reduction precise previous type systems calculus due poly spatial polymorphism 
implemented type inference algorithm poly automatically constructs typing set reduction rules term typed 
generated typings principal respect certain natural type shape constraints 
calculi intend capture essence mobile distributed computing invented 
known probably calculus mobile ambients calculus ma cardelli gordon subsequent development wide variety variants alternatives variously argued easier program reason closer operational intuition programs mobile distributed setting implemented :10.1.1.10.9481
field stays productive new calculi proposed clear consensus considered fundamental mobility calculus 
majority calculi share basic architecture ma borrow calculus syntactic machinery talking sets parallel communicating processes plus primitive operator generating unique names 
add kind spatial structure usually form tree locations processes reside 
tree generally evolve program control processes execute different calculi provide quite different primitives mutating 
mobility calculi provide communication processes near usually modelled communication primitive calculus variations extended possibility communicate capabilities paths restricted pieces process syntax just names 
process calculi associated type system designed supported ec fp ist fet ist dart sun microsystems equip ment 
calculus retrofitted 
type systems closely tied specific calculus particular primitives 
type system designed properties soundness applicability particular type inference algorithm proved general trivial see properties survive changes calculus 
generic type system 
contrast presents generic type system poly works wide range mobile process calculi 
poly simply instantiates reduction rules specify semantics target calculus primitives 
set provably sound formedness rules types mechanically produced guaranteeing types satisfy rules sound respect reduction rules subject reduction holds 
reduction rules guide automatic type inference algorithm instantiated type system 
inference algorithm produces type principal respect certain natural constraints shape types 
implementation offers possibilities tuning precision type system implements optional produce typing raw reduction rules target calculus 
target calculus small concession poly syntax sufficiently regular implementation sense terms reduction rules 
define meta gives syntax easy parse manipulate flexible calculi viewed instances deviating native notations 
meta include fixed semantics usual semantics parallelism name restriction provides common notion substitution notation rewriting rules fits semantics process calculi usually defined 
poly relation reasoning principles 
long term goal poly possible view previously existing mobility calculi type systems instances poly regards type system statically verify certain bad behaviours occur 
design quite reach point features existing type systems incorporated poly 
believe particularly important express form singlethreaded locations introduced original type system safe ambients 
expect actual programming environments mobility calculi fully general poly formalism type discipline 
considerations performance integration generally dictate production environments hand crafted specialised type systems language support ideas poly may employed 
generic implementation poly valuable tool exploring design space mobility calculi general 
easy change aspect rewriting rules try analyse terms see effect new rules example interference control properties calculus 
time poly implementation easy experiment exactly strong type system wants practice implementation supports tuning precision types small steps 
nontrivial type system inference algorithm poly control data flow analysis provide specialised automatic program analyses 
readers uncomfortable applying term type system poly invited think versatile program analysis framework time write type system 
subsuming analysis techniques mobility process calculi general 
process calculi provided setting advanced techniques reasoning example behavioural equivalence processes 
poly claim compete 
spatial polymorphism 
poly type system descends significantly generalises enhances earlier polya polymorphic type system specific mobile ambients 
inherits polya difference type systems mobility calculi emphasis types processes types ambient channel names 
fact types names completely vanished name intrinsic type distinguished solely way form processes 
poly works approximating set terms term possibly evolve reduction rules 
central concept shape predicate automaton describes set process terms 
shape predicates satisfy certain formedness rules types 
rules derived reduction rules target calculus guarantee set terms denoted type closed reduction relation subject reduction holds 
design gives rise new polya form polymorphism call spatial polymorphism 
type process may depend spatial structure 
process moves may come influence part type allows reductions 
example consider calculus single reduction rule 
calculus term eat eat eat eat poly type shown says may contain inside inside contain top level term 
poly prove term satisfies safety policy may side side 
knowledge type systems earlier paradigms 
spatial polymorphism movement triggers generation polymorphic variant original analysis piece code 
different orthogonal conventional form name parametric polymorphism polymorphic calculus communication causes polymorphic variants created :10.1.1.125.8009
poly support form polymorphism fine tuning options omitted due lack space described detail implementation documentation 
known difference advanced flow analysis advanced type system just question different perspectives underlying machinery 
presentation poly closer data flow viewpoint common type systems course poly type system 
number type systems process calculi explicit notion locations assign types processes names example :10.1.1.10.9481
active reduce eat analyse eat eat eat eat fig 

input type inference implementation analysing term fictional eat calculus inferred type graph rendered vcg graph layout tool dashed lines represent subtyping edges 
type system mobility calculus explicit locations aware leave try combine strengths principles 
notation preliminaries 
metavariable symbol stands set ranges 
set finite subsets set fin set finite partial maps dom set defined 
contexts sequence similar objects indexed indexes understood integer 
index sequence element sequences indexed may empty 
meta concurrent processes meta defined section syntactic setting poly 
role generic properties poly resorting 
define reduction relation formal properties meta exist solely support making formal statements poly 
intend meta take place existing calculi frameworks 
approximation meta syntax semantics give semantics basic constructs process replication substitution 
terms 
shows syntax process terms meta 
trivial process parallel composition processes process replication name restriction known process calculi including calculus ma 
usual behaviour structural congruence relation 
meta process constructors general concept form 
forms intrinsic meaning set reduction rules give 
examples forms include communication actions calculus movement capabilities open mobile ambients ambient boundaries write 
support traditional syntax ambients interpreting ek syntactic sugar ek 
syntactic convention symbol special interpretation meta single name just names aa ab eas eat 
sub forms xk messages elements xk mk forms ek processes free bound names terms defined omitted cases purely structural fn bn fn xk bn xk xk fn fn fn bn bn bn bn fn fn bn bn fn bn fn fn fig 

syntax meta plus structural congruence relation 
process abbreviated form consists nonempty sequence elements name binding element message element 
names name channels ambients keywords distinguish forms different roles calculus 
keyword simply free name matched explicitly reduction rule 
non alphanumeric ascii characters special meaning names keywords 
encode annotated communication actions boxed ambients pseudo tex notation forms 
binding elements xk create forms bind names process applied 
canonical constructing receive actions meaning form specified reduction rules 
message elements allow form contain forms appropriate reduction rules communication substituted processes 
technical reasons restrict forms contained message elements contain message binding elements 
refer restricted forms elements sub forms sub elements 
hope able handle calculi spi calculus communicate structured messages 
uncommon calculi prefer explicit recursion construction rec express infinite behaviour process replication operator 
certain technical problems supporting directly meta may novel techniques involving regular grammars developed nielson 
common case target calculus allow location boundaries come rec binder bound se dom sm dom sp sp dom fig 

actions term substitution 
action messages action elements sub forms processes 
omitted cases including simply substitute componentwise syntactic element question 
helper operator serves messages need keep track composite 
systems done structural congruence relation 
easily simulated meta adding reduction rule representing rec spawn rec spawn 
scoped terms 
process term scoped iff contains nested binding name free names appear bound term 
formally required bn fn disjoint contains bn bn disjoint contains bn 
generally require terms scoped 
reduction rules instantiation meta preserve 
simplifies type analysis support conversion ordinary binding elements 
handle conversion private names built relation assume create terms scoped 
substitutions 
substitutions meta substitute messages names 
fact entire processes substituted important technical premise poly means substitution preserve 
remarkable mobility calculi general refrain substituting processes calculi seal allow exchange entire processes local movement substitution :10.1.1.117.695
probably reflects intuition running process harder distribute recipient process mere name code sequence 
term substitution finite map names messages 
defines action various syntactic classes meta 
mobile ambients descendant calculi value exchanged communication operation name sequence capabilities 
case reduction outa outb inb inb 
support fig 
contains special cases syntactic cases form lone name 
case substitution name inserted directly message process structure 
cases substituted name occurs properly inside form substitution carried componentwise form element name replaced rule context replacement name 
false term tries reduce inb outa inb 
published formalisms ambient inspired calculi usually regard inb syntactically possible semantically meaningless 
configuration occur basic soundness property type systems calculi 
meta semantic error syntactic simply possible entire form element indirectly message element 
runtime substitution tries substitute special name interpreted erroneous substitution happened 
ma communication rule meta reduces 
convention technically convenient allows bound nesting depth forms sub form restriction 
published calculi attach semantics forms inb lose real expressiveness 
forms contain inert meta reduction rules explicitly match 
calculus designer define reduction rules create situations mark reduction results erroneous 
example polyadic calculus usually considered run time error tries send tuple channel process listening tuple writing explicit rules situations handled parallel malformed substitutions 
straightforwardly write patterns test malformed substitutions reason building generation meta 
case poly type system conservatively estimate occur 
draw rejecting input program due type error designer calculus 
definitions worry name capture 
general intuitively correct bn disjoint names mentioned practise follow assumption terms scoped 
reduction rules 
defines syntax semantics reduction rules meta 
full theory implementation allows slightly expressive template language right arrow reduce rules subset sufficient express calculi listed sect 

example syntax describe mobile ambients ruleset rma active ina reduce inb reduce outa reduce reduce rules necessary instantiate meta mobile ambients 
reduce rules directly correspond reduction axioms target calculus 
rule active ina meta notation evaluation context rule reduce 
implementation provides extension writing single rule catches pairs 
rules sufficient get communication reduction arbitrary arity 
implementation provides syntax defining arbitrary arity communication rules reasons space clarity omit formal development 
name variables message variables process variables substitutes element templates xk mk forms templates ek process templates xk sk rules reduce active rulesets syntactic choice marked allowed reduce rule right arrow 
term instantiation map applies templates strictly componentwise case fills applies substitution xi si 
xi si 
special exception considered undefined occurs form template containing binding element 
example applied capture names produce 
reduce active fig 

syntax semantics reduction rules 

fact concrete active rule far needed encoding existing calculi 
just hard coded rule meta find cleaner built distinction action forms process container forms theory 
lower half defines derive reduction relation process terms ruleset 
example ruleset fictional calculus fig 
active ina reduce instantiate inference rule bottom third fig 
obtain eat eat eat eat eat choosing eat eat 
reduction rule allow scoped term reduce non scoped 
order guarantee process templates satisfy scoping restrictions apparent syntax 
restrictions satisfied rules intuitively sensible precise understanding restrictions important high level understanding meta refer long version precise definition :10.1.1.59.2165
example instantiations 
checked machine readable rulesets type inference implementation meta poly meta handle calculus mobile ambients safe ambients various variants regarding capability name capabilities refer variants anonymous capabilities exist seal calculus variation boxed ambients asynchronous seal variants papers refer ba ambients nba push pull ambient calculus :10.1.1.117.695:10.1.1.10.9481
cases meta supports straightforward way notate process terms flat ascii text cases native punctuation target calculus changed superficially conform meta conventions form looks 
example original send action yx represented worked enter enter binds continuation uses handshake entering ambient :10.1.1.10.9481
ck construction ambients represented cs ck ps 
ruleset mobile ambients objective moves fact reduction rules inspect structure messages forces represent original go go 
poly types meta shape predicates 
described shape predicates central concept poly 
shape predicate denotes set process terms certain shape predicates provably closed reduction types 
full language shape predicates somewhat complex introduce piecewise 
basic idea shape predicates explained simply shape predicate looks process term 
matches process term arise repeatedly duplicating removing sub terms shape predicate 
duplicating removing sub terms means applying rewriting rules syntactic subterm shape predicate addition structural congruence relation terms 
example shape predicate written inb match terms inb identical shape predicate inb arises removing subterms copies 
inb match duplicating subterms appear 
inb allowed removing form entire subterm removed 
type fig 
written term shape eat eat eat eat eat eat eat eat practice shape predicates exactly term shaped pays keep naive idea mind intuition shape predicates 
introduce complications rest subsection understood necessary naive idea practice 
replication ignored matching shape predicates 
sensible behaves infinite number running parallel finite number parallel match shape predicate exactly single 
message types fk element types xk form types node names type substitutions fin edges shape graphs shape predicates 
fk fk xk xk ek ek mk mk fig 

syntax semantics shape predicates 
edges form influence semantics shape predicate sect 
explains 
want represent possible computational term single shape predicate 
creates problems naive idea terms eat evolve arbitrary deep nestings 
need shape predicates infinitely deep trees 
restrict infinite shape predicates finite representations words regular trees 
known ways representing regular trees linear syntax easier directly graphs 
shape predicate form directed possibly cyclic graph edge labelled form designated root node graph 
term matches shape predicate syntax tree bent shape match subgraph form term lies atop corresponding edge graph edges may groups parallel composition lie single node graph 
formal structure poly uses graphs node names just opaque identifiers meaning edge labels 
displaying graphs fig 
useful put edge label inside edge target node 
course done rare cases edges share target disagree 
graphs guarantee finite type term 
example term reduction rules ma evolve terms messages contain arbitrarily long chains single form 
need messages infinity forms look alike having messages different length described shape graph label 
job message types defined 
message type fk describes message built forms fi messages single names message matched message type 
message type matches see unambiguously message type result trying substitute message matches element position 
element types form types build form structures message types non message elements 
syntax semantics shape predicates defined 
save space basic theory clearly handle name restriction treat described :10.1.1.59.2165
omitted third form message types sequenced message types allow precise types defined sec 

define meaning message element form types shape predicates proposition 
meanings shape predicates respect structural congruence 
message type meaning includes 
language message types omitting sequenced message types form fk fi sub forms appear canonical order purpose sub form considered appear :10.1.1.59.2165
operation associative 
flow edges subtyping 
part shape predicate syntax explained flow edges definition meaning shape graph important distinguishing types non types 
brief flow edge asserts may reduction process described moved process incurs substitution described alternatively viewed demand arises applying substitution described hold 
flow edges contribute meaning shape predicates guarantee demand satisfied shape predicate contains flow edge 
global property shape graph shortly define class flow closed shape graphs interpretation flow edges true 
important special case process moves substitution 
viewed assertion subtype symbolically 
speak subtyping edge 
write iff dom dom dom define action type substitution message element types rules 
definition ensures contains result term substitution likewise elements 
definition 
shape graph flow closed iff contains bn dom contains additionally holds tf xk dom te xk tm fk fk tm dom te tm xk xk fig 

action type substitutions 
action action message types action element types 
type instantiation map applies element form templates completely componentwise giving element form types just term instantiations 
relation type instantiations process templates inference system xi si xi si 
uf 
rules template processes variant variant variable letter ranges special exception considered hold occurs form template containing binding element 
fig 

matching reduction rules shape graphs 

contains 
fk contains fi 
apply contains te call shape predicate flow closed iff component intuitively flow closed graph intuitive meanings flow edges true 
content theorem proposition 
flow closed contain assume bn dom 
implies assumption bn dom true uses assuming terms scoped 
semantic syntactic closure types 
call shape predicate semantically closed respect iff imply 
described want types semantically closed shape predicates 
easy recognise semantic closure 
define restricted easier decide class syntactically closed shape predicates types 
defines way match process templates directly type graphs going process semantics fig 

type instantiation applies message element form templates fig 
process part different type instantiation maps process metavariables nodes shape graph processes 
best illustrated example 
assume wish find closed respect eat foo bar reduce rule look matches left hand side reached root edges labels shape pair graph syntactically closed match right hand side rule turns true tries construct derivation turns judgement needed true case 
graph syntactically closed semantically closed eat 
add missing edge giving get flow closed need add edges 
get eat foo bar vv fig 
subtyping edges shown dashed lines 
shape predicate syntactically semantically closed 
ready define syntactic closure formally definition 
shape predicate 
set active nodes written set nodes contains active holds implies happens semantically closed respect reduce trivial see systematic way 
definition 
locally closed respect iff contains reduce holds implies definition 
shape predicate syntactically closed respect iff flow closed locally closed 
holds call type 
checking purported type really syntactically closed algorithmically easy see details :10.1.1.59.2165
theorem subject reduction 
syntactically closed respect semantically closed respect types 
type 
obvious possibility check term may go wrong 
user designer programming environment uses poly specifies going wrong means 
clear indication error turns active position opinions may differ produced place process tree active 
imagine application specific properties check example process evolve configuration ambient named inside named 
easy check shape graph 
alternatively may want write rule poly checking reduce 
ability write rules reasons meta distinguish strictly names keywords 
poly fairly easy check safety properties unauthorised ambients inside secure ambients questions safety poly help determine 
includes properties depend order things happen correspondence assertions specify properties communication protocols 
type systems process calculi reason temporal properties example calculus aware handle locations ambient style mobility 
type inference poly assume process term ruleset want produce type trivial construct type single node lot edges shape graph 
type may need contain prove go wrong 
section discuss automatically infer informative types 
know type inference complete full poly type system allows types 
defining set restricted types complete type inference 
definition 
write iff 
relation close equality 
way non identical related contain message types shape 
relatively safe imagine just fancy way write approximation 
definition 
satisfies width restriction iff contains holds definition 
satisfies depth restriction iff contains chain xk holds xk 
type inference algorithm produces types satisfy restrictions 
width restriction means type inference needs add outgoing edge node graph choose reusing existing edge starting creating new edge fresh target node forbidden restriction reusable edge 
depth restriction bounds length simple path shape graph constructed set names maximal form arity bounds total number nodes graph 
closing operation described keep adding edges nodes graph indefinitely eventually 
restrictions replace notions discrete modest types admitted slightly precise types complex hard understand 
describe feature implementation allows loosen restrictions tracking origin type graph :10.1.1.59.2165
type inference proceeds phases 
construct minimal shape predicate term matches 
close shape predicate rewrite shape graph necessary syntactically closed 
initial phase simple 
shape predicates look terms just convert syntax tree term tree shaped shape graph 
graph may may satisfy width depth restrictions 
unify nodes equal 
may cause violations restrictions continue unifying nodes necessary restrictions satisfied 
closing shape graph real type inference happens 
happens series steps 
step check shape graph syntactically closed 
algorithm ends 
lack closure edges graph imply edges ought exist definitions 
case add new nodes edges required failing rule round unifications enforce width depth restrictions 
width depth restriction guarantee closure phase terminates 
worst case complexity bounds closure phase implementation allows restrictions types applied order quench blow ups observe particular calculi example terms 
tightest restrictions enforce polynomial complexity cost losing possibility spatial polymorphism 
restricted poly strength roughly comparable current non polymorphic type systems ambient derived calculi 
theorem principal typings 
result type inference principal typing input term holds :10.1.1.7.6822
way reach graph satisfies restrictions 
width depth restrictions option rewriting larger different unique best way doing 
implementation 
implemented type inference algorithm 
implementation available url www macs hw ac uk dart software source download interactive web interface 
features implementation allows fine tuning analysis precision influences inference speed inferred type size 
poly extends basic properties previous system polya general setting 
poly subject reduction 
process term shape predicate decide checking purely local conditions type similarly decidable matches 
decidable process belongs specific type 

poly supports notion spatial polymorphism achieves cardelli wegner called purest form polymorphism object function uniformly different type context changes coercions kind run time tests special encodings representations :10.1.1.117.695

types poly sufficiently precise interesting safety security properties checked especially formulated questions possible configurations arise run time 
addition completely novel contributions 
meta syntactic framework instantiated large family mobile process calculi supplying reduction rules 

generic type system poly works instantiation meta 
checked works calculus large number ambient calculi version seal calculus 
claimed polya easy extend ambient calculi hand extending proofs polya manually tedious 
meta developed theory extensions fully automatically 

subsystem poly satisfying width depth restrictions type inference algorithm implemented successfully infers principal type process term 
means poly potential compositional analysis 

width depth restriction natural intuitive discreteness properties respect showed existence principal types polya 

poly handling communication substitution redesigned direct intuitive polya 
related 
generic type system process calculi constructed igarashi kobayashi :10.1.1.10.9481
shape predicates poly types look process terms stand sets structurally similar processes 
focus different 
system specific calculus handle locations ambient style mobility 
hand considerably flexible poly domain instantiated things deadlock race detection capabilities poly 
yoshida graph types shape predicates reason order messages exchanged channel calculus 
type system reasoned time location directly comparable poly despite similar type structure 
spatial analysis nielson produces results somewhat resemble shape graphs spatial polymorphism 
abadi gordon 
calculus cryptographic protocols spi calculus 
inform 
comput 
wells 
polya true type polymorphism mobile ambients 
ifip tc rd int conf 
theoret 
comput 
sci 
tcs 
kluwer academic publishers 
turbak 
faithful translations polyvariant flows polymorphic types 
programming languages systems th european symp 
programming vol 
lncs 
springer verlag 
boudol 
calculus direct style 
conf 
rec 
popl th acm symp 
princ 
prog 
langs 
castagna 
boxed ambients 
th international conference theoretical aspects computer science tacs vol 
lncs 
springer verlag 
sassone 
communication interference mobile boxed ambients 
fst tcs 
cardelli ghelli gordon 
mobility types mobile ambients 
van emde boas nielsen eds icalp vol 
lncs 
springer verlag 
extended version appears microsoft research technical report msr tr 
cardelli gordon 
mobile ambients 
nivat ed fossacs vol 
lncs 
springer verlag 
cardelli wegner :10.1.1.117.695
understanding types data abstraction polymorphism 
computing surveys 
castagna ghelli 
typing mobility seal calculus 
larsen nielsen eds concur vol 
lncs 
springer verlag 
chaki rajamani rehof 
types models model checking message passing programs 
conf 
rec 
popl th acm symp 
princ 
prog 
langs 
coppo dezani ciancaglini :10.1.1.117.695
mobility types mobile processes mobile ambients 
cats vol 
entcs 
gordon jeffrey 
typing correspondence assertions communication protocols 
theoret 
comput 
sci 
igarashi kobayashi :10.1.1.10.9481
generic type system pi calculus 
conf 
rec 
popl th acm symp 
princ 
prog 
langs 
levi 
control flow analysis safe boxed ambients 
programming languages systems th european symp 
programming vol 
lncs 
springer verlag 
levi sangiorgi 
controlling interference ambients 
popl boston massachusetts 
acm press 
wells :10.1.1.59.2165
instant polymorphic type systems mobile process calculi just add reduction rules close 
technical report hw macs tr heriot watt univ school math 
comput 
sci 
milner parrow walker :10.1.1.10.9481
calculus mobile processes 
inform 
comput 
nielson nielson 
spatial analysis 
giacobazzi ed static analysis th int symp vol 
lncs italy 
springer verlag 
palsberg 
polyvariant flow information intersection union types 
funct 
programming 

xml fluent mobile ambients 
phd thesis boston university 
phillips 
reduction semantics push pull ambient calculus 
theoretical computer science nd ifip int conf vol 
ifip conference proceedings 
kluwer 
sander 
graph layout vcg tool 
tamassia tollis eds graph drawing dimacs international workshop gd vol 
lncs 
springer verlag 
turner :10.1.1.125.8009
polymorphic pi calculus theory implementation 
phd thesis university edinburgh 
report ecs lfcs 
vitek castagna 
seal framework secure mobile computations 
internet programming languages vol 
lncs 
springer verlag 
wells :10.1.1.7.6822
essence principal typings 
proc 
th int coll 
automata languages programming vol 
lncs 
springer verlag 
yoshida 
graph types monadic mobile processes 
foundations software technology theoret 
comput 
sci th conf vol 
lncs 
springer verlag 
