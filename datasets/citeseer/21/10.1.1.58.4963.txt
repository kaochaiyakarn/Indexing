colored petri net regional synchronization situated multi agent systems danny weyns tom holvoet department computer science leuven leuven belgium danny weyns tom holvoet cs kuleuven ac 
interaction central multi agent systems 
look agents interact performing simultaneous actions environment 
simultaneous actions interfering actions executed produce compound result 
act simultaneously agents need synchronize actions 
synchronization actions typically established centralized synchronizer ensures action cycle actions agents treated simultaneously 
centralized synchronization simple drawbacks centralized control poor scalability 
colored petri net cpn regional synchronization 
regional synchronization agents synchronize locally resulting independent groups synchronized agents 
regional synchronization established distributed way ensures agents able perform simultaneous actions synchronized 
algorithm regional synchronization phase commit protocol combined logical clock trivial 
clear explanation algorithm discuss cpn regional synchronization great length 
formally prove agent various steps algorithm executed correctly prove correctness algorithm agents 
discuss simulation results algorithm agents 
interaction central multi agent systems 
interactions agents able setup social organizations 
look particular kind interactions situated agents interact performing simultaneous actions environment 
situated multi agent systems 
situated multi agent systems situated mas agents objects explicit position environment 
situatedness reflects local relationships agents objects 
situatedness situated agent placed local context able perceive act 
actions model theory influences reactions influences proposed ferber 
roughly spoken theory separates agent wants perform happens agents produce influences environment subsequently environment reacts combining influences deduce new state world 
reification actions influences enables environment combine simultaneously performed activity mas 
simultaneous actions 
simultaneous actions mean set interfering actions executed produce compound result 
distinguish kinds simultaneous actions joint actions influencing actions concurrent actions 
joint actions actions executed order produce successful result 
example joint actions agents pick object pick agents carry object certain location 
influencing actions actions positively negatively affect 
example influencing actions agents push object 
agents push object different directions object moves resultant actions 
concurrent actions simultaneously performed actions conflict 
example concurrent actions agents try pick object time 
involved agents get object non deterministic selection assign object agents 
classification detailed study simultaneous actions refer 
supporting simultaneous actions 
support simultaneous actions involves aspects agents able act outcome combination simultaneously performed actions accordance domain modelled 
focus aspect 
act simultaneously agents need synchronize actions 
situated mass synchronization actions typically dealt centralized synchronizer ensures action cycle actions agents treated simultaneously 
centralized synchronization simple forces agents act global pace 
hard requirement implies number drawbacks 
scalability model respect number agents mas limited 
centralized synchronization differentiates influences agents may interfere influences potential simultaneous actions influences 
influences agents treated happened 
synchronizer verify influence interferes influence 
costs calculating reactions order square number agents mas 
second centralized control conflicts distributed nature mas 
agents globally synchronized implies centralized control evolution mas 
resolve drawbacks centralized synchronization algorithm allows agents synchronize agents perceptual range 
result algorithm formation independent groups synchronized agents 
composition groups locality agents dynamically changes agents enter leave perceptual range 
approach actions synchronized agents potentially simultaneously acting agents treated simultaneously 
regional synchronization established agents longer central entity controls evolution mas 
price decentralization synchronization communication cost set groups 
algorithm regional synchronization phase commit protocol combined logical clock trivial 
high level outline algorithm 
zoom detailed formal model algorithm means colored petri net cpn 
clear explanation algorithm discuss cpn regional synchronization great length 
addition cpn allows formally prove correctness algorithm 
formally prove agent various steps algorithm executed correctly 
prove correctness algorithm agents 
addition discuss simulation results algorithm agents 
cpns designed design cpn tool 
overview 
structured follows 
section discusses colored petri net regional synchronization detail 
section prove viewpoint agent various steps algorithm executed correctly 
subsequently prove correctness algorithm agents 
section discusses simulation algorithm agents 
conclude look section 
colored petri net regional synchronization section discuss algorithm regional synchronization 
give high level overview algorithm 
cpn discuss subsequent steps algorithm detail 
high level overview regional synchronization algorithm regional synchronization realizes logical simultaneity agent activity locality agents 
settlement simultaneous actions follows major phases phase synchronization setup acting phase 
regional synchronization agent equipped local synchronizer 
synchronizer responsible establish synchronization associated agent synchronizers agents 
synchronization setup starts agent receives view set synchronization time environment 
view set initial set candidates synchronization names agents agent starts synchronizing 
goal synchronization handle simultaneous actions range agent synchronize agents accordance range interfering actions 
context situated agents quite natural limit range perceptual range agents selves synchronization time value logical clock time agent view set composed 
logical clock counter maintained environment 
time region synchronized agents concludes acting phase value logical clock incremented new view sets agents composed agent perceptual agent act asynchronously respect agents 
synchronizer starts executing synchronization algorithm 
algorithm regional synchronization integrates phase commit pc protocol logical clock lc 
goal standard pc see reach full agreement set processes participants perform action 
protocol initiated process coordinator 
coordinator collects votes participants decides outcome interaction 
logical clocks proposed lamport capture numerically causal ordering events process groups 
algorithm regional synchronization synchronizers peers play role participant coordinator ongoing synchronization setup 
role synchronizer plays respect depends comparison values synchronization time value logical clock received entered synchronization setup 
synchronization setup agent blocks activity agents synchronizing finished synchronization setup 
executing algorithm synchronizers progressively try synchronize synchronizers agents inside perceptual range means sending messages back forth 
interaction synchronizers pass phases 
phase decide agree synchronization subsequently second phase mutually commit agreement 
agents perceptual range concluded synchronization act acting phase 
call group region synchronized agents short region 
acting agent invokes tuple influence names synchronized agents environment 
environment collects influence tuples agents region 
agents limited view environment may case agents positioned inside perceptual range see different candidates synchronize 
synchronization setup agent typically knows limited number agents synchronized region belongs 
environment responsible composing regions basis subsets synchronized agents passed influence tuples 
influences region available environment calculates effects simultaneously acting agents concludes acting phase 
detailed study influence processing environment refer 
associate perceptual range visual perception 
restriction algorithm approaches agents acquaintances determine locality 
notice value logical clock global variable physical logical zone mas environment maintains logical clock 
summarizing algorithm regional synchronization combines phase commit protocol logical clock 
synchronization setup agent synchronizes agents inside perceptual range agents perceptual range 
subsequently action phase synchronized agents act allowing perform simultaneous actions 
comparison centralized synchronization regional synchronization avoids centralized control evolution multiagent system improves scalability 
colored petri net algorithm fig 
depicts hierarchical cpn regional synchronization algorithm denoted synchronization net 
transitions handle mail scheduler simulation verification denote substitution transitions stands entire subnets 
simulation verification subnet short test net models simulation verification net connected synchronization net 
sections different test nets verification simulation purposes 
agent starts synchronization setup injects token test net synchronization net 
call token synchronization token 
scheduler subnet scheduler net allows schedule synchronization tokens specific scheduling algorithm 
standard algorithm schedules tokens concurrently control state space explosion verification apply round robin scheduling algorithm 
synchronization setup finished synchronization token returns test net 
depending kind applied test test net uses synchronization token continue simulation mas regional synchronized agents perform simultaneous actions test net compares state synchronization token expected state verify correctness executed step algorithm 
handle mail integral part synchronization algorithm 
subnet called mail net depicted fig 

explain synchronization algorithm follow synchronization token runs algorithm 
agent synchronizes action 
synchronization setup starts agent receives view set synchronization time environment 
explained previous section view set contains names agents perceptual range agent synchronization time value logical clock maintained environment time agent view set composed 
view set synchronization time agent composes synchronization token put start sync place see fig 

synchronization tokens color defined follows record name name memberset memberset clock clock name unique name synchronizing agent memberset data structure current state synchronization process agent member view set registered clock denotes synchronization time agent 
color memberset defined follows fig 

main cpn regional synchronization 
memberset list member 
max agents member record member name state state clock clock state ini reqs acks sync memberset contains member agent synchronizer synchronizing 
member characterized name associated agent member state clock value 
initially name view set member added memberset state set ini clock set zero 
algorithm clock values exchanged state member evolves ini sync 
comparison clock values determine rights synchronizer initiate particular steps synchronization algorithm 
synchronization member fails member removed memberset 
explanation algorithm follow synchronization setup agent name view set synchronization time resulting initial synchronization token name memberset member state ini clock member state ini clock member state ini clock clock soon synchronization token scheduled token moves queue place synchronize place synchronizer checks mailbox verifying pending requests 
pending requests request messages received synchronizer previous acting phase 
synchronizer received mail pick mail transition mail net see fig 
enabled 
transition fires takes synchronization token synchronize place message synchronizer inbox 
color inbox mailbox defined follows mailbox record name name box box box list message 
max msgs message record name name perform clock clock comm condition enable pick mail transition defined follows sin sin sout sin sin selects mailbox synchronization token sin sin verifies contains message 
condition holds pick mail transition fires synchronization token passed sout sin synchronize place buffer place 
simultaneously top message mailbox removed box put msg buffer place 
pending requests performative perform message msg buffer 
possibilities 
agent associated requesting synchronizer belongs memberset syn token function reqt sin returns true enables req accept transition 
hand reqt sin returns false requesting synchronizer belongs memberset req reject transition enabled 
fig 

handle mail subnet main cpn regional synchronization 
req accept transition fires sent requesting agent sin state memberset updated sin acks state corresponding member set acks clock set clock value requesting message clock 
req reject transition enabled nack message sent requesting agent sin synchronization token put synchronize place changes sout sin 
pending requests handled similar way 
example synchronizer assume content mailbox perform clock perform clock agent belong memberset agent request rejected 
request agent accepted 
synchronizer sends messages msg perform clock msg perform clock state synchronization token updated follows name memberset member state ini clock member state ini clock member state acks clock clock mail handling return synchronization net see fig 

acknowledge messages synchronizer enable deliver mail transition 
time transition fires message delivered mailbox addressee 
msg selects appropriate mailbox msg effectively delivers message 
messages inbox handled synchronization token arrives synchronize place transition mail enabled sin holds 
transition mail fires synchronization token put split async sync place 
point algorithm evolve possible directions 
condition sin holds memberset synchronization token empty transition handle async enabled 
handle async transition fires anonymous token color put schedule place enabling scheduler schedule waiting synchronization token 
simultaneously synchronization token put sync place sout sin test net pick finishes synchronization setup synchronizer 
acting phase associate agent act asynchronously respect agents mas 
hand sin hold memberset synchronization token empty handle sync transition enabled 
transition fires synchronization token put handle requests place 
memberset synchronization token example empty token follows route net 
long memberset synchronization token contains members state ini send request transition enabled sin holds 
time transition fires request message sent particular member initial state 
synchronization token example request messages sent msg perform clock msg perform clock request sent state corresponding member synchronization token updated reqs 
applied example state synchronization token name memberset member state reqs clock member state reqs clock member state acks clock clock requests sent condition sin longer holds enables requests send transition 
soon transition fires synchronization token put handle blocked commit place 
moment elaborate sequence transitions synchronization token passes chain transitions blocked commits send syncs send 
transition fires new token scheduler put schedule place synchronization token put queue place 
take synchronization token scheduled pass synchronization net arrives synchronize place 
inbox inspected new messages see fig 

reactions requests may arrived 
discussed request answered rejection depending membership requesting synchronizer 
enables ack accept transition condition sin holds 
transition fires synchronization token updated state corresponding member memberset set clock set value received acknowledge message 
rejection enables nack accept transition condition sin holds 
transition fires corresponding member removed memberset synchronization token 
example suppose messages received msg perform clock msg perform clock nack message agent indicates agent perceived agent synchronization time agent moved perceptual range agent 
agent hand acted simultaneously agent synchronization time perceptual scope agent 
mail handling synchronization token updated name memberset member state clock member state acks clock clock handling acknowledge messages return synchronization net synchronization token located synchronize place see fig 

synchronization token passes transitions mail handle sync suppose memberset synchronization token empty requests send send request longer enabled synchronizer sent requests previous pass algorithm 
suppose synchronization token passes blocked transition arrives handle commits place discuss selection unblock blocked 
handle commits place synchronizer able send commits depending condition sin 
condition holds memberset synchronization token contains members state acks clock value smaller equal clock value synchronization token 
time send commit transition fires commitment message sent member msg sin simultaneously state member updated sout sin msg syncs 
example member meets requirements send commit clock value member greater clock value synchronizer 
send commit transition fires commitment message sent synchronizer agent state synchronization token updated msg perform comm clock name memberset member state clock member state clock clock commitments sent condition sin longer holds enables commits send transition 
soon transition fires synchronization token put handle syncs place 
moment suppose syncs send enabled 
synchronization token passes transition transition ready pass synchronization net 
synchronization token scheduled mailbox checked see fig 

synchronizer expects commitment messages 
mailbox contains commitment messages condition sin holds com accept transition enabled course pick mail transition fired 
com accept transition fires state member memberset sent commitment message updated 
example suppose commitment message member arrived 
received message updated synchronization token msg perform comm clock name memberset member state clock member state clock clock mail handling return synchronizer net see fig 

starting synchronize place synchronization token passes chain transitions arrives handle syncs place 
condition sin verified 
condition holds member memberset state sync 
case synchronization message sent member state state members updated sync 
member example state sin hold example synchronization token synchronizer wait confirmation commitment sent synchronizer agent 
consequence syncs sent transition enabled synchronization token returns back queue place 
run synchronization net synchronizer find expected confirmation message mailbox see fig 

synchronization message arrived sync accept transition gets enabled 
transition fires state sender memberset synchronization token set sync 
example suppose confirmation member arrived 
pick mail sync accept transitions fired state synchronization token name memberset member state clock member state sync clock clock pass synchronization net condition send synchronization message member holds function sin send sync transition returns true 
send sync transition fires synchronization message sent member updated state synchronization token msg perform clock name memberset member state sync clock member state sync clock clock enables syncs send transition 
transition fires synchronization token put finish sync cycle place 
condition sin verified 
condition holds members memberset state sync 
case synchronization token example synchronization token reaches sync place new token put schedule place schedule synchronization token concludes synchronization setup 
come back selection unblock blocked 
condition enable unblock transition blocked commit 
condition deals deadlocked situations algorithm may arise sequence overlapping perceptual ranges synchronizing agents form cycle 
illustrate example problem packet world 
packet world simple mas application test case research see 
packet world agents bring colored packets rectangles corresponding colored destinations circles 
agents perform different kinds actions making step neighboring field pass packet neighboring agent 
agents limited view world right part fig 
illustrates perceptual scope agent 
case agents perceive environment fields current location 
suppose depicted situation fig 
agents executing acting phase 
agent step north west entering perceptual range agents 
synchronizer agent starts fig 

blocking problem regional synchronization packet world 
synchronization setup requesting synchronize 
subsequently agent conclude action suppose transferred packet enter synchronization setup 
starts synchronize starts synchronize 
agent finishes synchronization 
suppose busy synchronizing agent step south enters synchronization setup 
confirms pending request 
subsequently requests synchronize 
conclude synchronization setup region blocked finished synchronization setup unable respond synchronization request 
deal potential deadlock situations synchronizer unblock 
condition sin enables unblock transition holds member memberset synchronization token state sync member memberset state reqs member state acks 
synchronization token reaches handle blocked commit place sin condition holds unblock transition enabled 
time transition fires nack message sent msg sin blocking member member memberset state reqs 
simultaneously blocking member removed memberset synchronization token sout sin msg 
synchronization token longer contains blocking member sin returns true transition blocked enabled synchronizer deadlock situation 
unblocking side effect 
messages delivered indirectly deliver mail transition acknowledge message may reach mailbox requested synchronizer delay 
blocked synchronizer distinguish effectively blocked due synchronizer able react request finished synchronization setup waits synchronization setup members region belongs request message underway 
soon synchronizer unblocks removes blocking member memberset direct synchronization member longer possible acknowledge message removed member may reach mailbox unblocked synchronizer concluded synchronization setup 
outdated messages interfere synchronization setup synchronizer 
outdated messages removed mailbox outdated msg transition mail net see fig 
new synchronization token token members state ini enters synchronization net mailbox synchronizer checked 
mailbox contains outdated messages sin msg transition enabled 
transition fires outdated message discarded 
soon outdated messages removed mailbox msg transition longer enabled synchronizer follow usual synchronization setup 
note unblocking due delay message delivering exceptional synchronizer passes complete synchronization process members memberset members change reach mailbox 
verification section discuss formal verification regional synchronization algorithm 
prove agent various steps synchronization algorithm executed correctly 
prove correctness algorithm agents 
partial proof correctness algorithm blocking situations agents involved covered 
formal verification algorithm agent prove correct execution various steps algorithm agent enumeration 
developed test net feeds synchronization net set synchronization tokens denoted test tokens accompanied possible received messages test messages 
set represents possible situations single synchronizer faced pass synchronization algorithm 
situation took account minimal needed memberset verify step 
test token passed synchronization net test net verifies possible test message processed correctly compares correctness updated test agents may get synchronized indirectly 
packet world example agent unblocks agent synchronization setup synchronized agent agents 
token appropriate control token compares correctness possible new sent message corresponding control message 
fig depicts cpn test net 
initially test sets place contains set composite test tokens color 
composite test token holds data needed verify correct execution particular step algorithm 
identified different steps algorithm including steps verify fig 

verification net agent 
reaction received messages steps verify progress algorithm appropriate conditions hold 
example illustrate composite test token verify request correctly accepted name memberset member state ini clock clock im perform clock message os name memberset member state acks clock clock om perform clock message ts number inset im outset os om initial synchronization token test token im accompanied request message test message test 
os control token represents expected state synchronization token passed synchronization net om control message expected acknowledge message sent 
ts aggregates data composite test token 
split transition selects composite test tokens number example number ts 
composite test token split synchronization token test token put start sync place message token put inbox place control token combined control message put control set place 
test token passes time synchronization net reaches sync continue sync place depending updated state 
possibly sent messages put verification purposes connected mailboxes addressees 
subsequently transitions match match match match enabled depending result match functions guards transitions 
match match fires anonymous token color put ok place indicating test succeeded 
hand match match fires token put nok place indicating failure 
proof correct execution test steps liveness property verification ready transition connected ok place 
soon ok place collected anonymous token verified step algorithm tokens verification ready transition enabled stays live forever 
prove correct execution various steps algorithm generate occurrence graph net prove path exists node graph node represents final marking state ok place collected tokens 
particular node leaf node occurrence graph node number shown fig 
proof straightforward 
function see fig searches nodes path leaf node 
number zero proven test steps executed correctly 
formal verification algorithm agents prove correct execution algorithm agents developed test net simulates simple mas 
mas agents perform sequence actions represent possible synchronization situations agents algorithm 
generate occurrence graph simulation formally prove algorithm works properly 
simple mas depicted fig 

simulation agents moves path indicated 
agents synchronize perceive 
suppose agent perceive agent located neighboring field 
verification includes situations 
move agent requests agent synchronization agent left perceptual fig 

subsequent actions agents verify algorithm agents 
range agent rejects 
second move agent accepts request result third move simultaneously 
fourth move separately synchronization request 
fig 
depicts cpn test net 
world token color located world place represents mas environment grid agents locations 
color initial world token defined follows color list item 
color item record name name coord coordinate val world name free coord 
name coord 
name coord 
name free coord old initial sequence test moves agents located test moves test moves places 
list move move representing action agent 
initial synchronization tokens agents located start sync place 
initial situation agent able perceive memberset empty 
agent finishes synchronization setup synchronization token put sync place 
compose regions transition selects matching region agent regions place add agent members memberset set region 
regions list region region defined color region list 
max agents color product name bool region expanded entry acting agent name set true member agent set previous state member registered region false member registered 
matching region exists new region added list regions collect regions 
transition merge regions ensures regions overlapping agents merged composite region 
soon state agents region true region ready handled agents region move simultaneously 
test force regions handled predefined order 
test regions place contains list names element defining set names agent act simultaneously 
region corresponds names top element fig 

test net prove correctness algorithm agents 
list test region finished synchronization setup handle region transition fires 
results effects names acting agents put acting agents place anonymous token passed region handled place value clock logical clock place incremented token color lt put handle agent place 
lt token contains anonymous token member region handled 
acting agents place agent enables act transition agent act 
transitions fires takes test move test moves test moves place uses move corresponding agent position world tm wsi move tm 
simultaneously name acting agent put perceiving agent place 
enables compose transition 
transition fires new synchronization token agent composed put start sync place 
anonymous token collected handle agent place 
soon agents region acted token handle agent place enable prepare region transition 
transition fires anonymous token put region handle place 
prepares test net handle region 
soon predefined regions acted agents finished final synchronization setup verify transition enabled 
transition fires anonymous token put verification ready place 
verification ready transition live forever 
similar correctness proof agent prove correctness algorithm agents prove exists path node occurrence graph node represents final marking 
leaf node occurrence graph node number shown fig 
function searches nodes path leaf node 
set nodes path empty proved synchronization algorithm works correctly agents 
simulation addition formal proofs discussed previous section developed test net simulates algorithm agents 
obviously simulation prove correctness algorithm 
positive results simulation support hypothesis algorithm completely correct 
complete formal proof substantiate claim 
set test net simulation similar net verify algorithm agents 
mas grid environment agents 
actions randomly scheduled agents limited move randomly 
performed simulations agents perceptual ranges fields 
simulation ends agents performed moves 
interpret simulation results added extra logging places net places register number times regions different size acted place register number times regions merged place register number sent messages 
main results simulation depicted table 
clock value represents value logical clock environment 
clock value incremented time region acts value equal number regions acted 
perceptual range field regions acted average region size 
perceptual range fields regions acted average region size 
results confirm agents larger perceptual scope form larger regions 
region size values reflect number times particular region size occurred 
perceptual range field agents acted asynchronously region size regions agents acted simultaneously 
hand perceptual range fields agents acted asynchronously just regions agents acted simultaneously 
region merges values denote number times subsets synchronized agents merged compound region 
communication overhead denoted number messages sent 
perceptual range fields times synchronization messages sent perceptual range field 
summarizing larger perceptual ranges result larger regions 
larger regions improve possibility simultaneous actions increase communication overhead setup synchronization 
cpn regional synchronization 
regional synchronization allows agents perform simultaneous actions agents perceptual range 
regional synchronization avoids centralized control evolution mas improves scalability comparison central synchronization 
algorithm combines distributed phase commit protocol logical clock 
detailed discussion cpn regional synchronization shows algorithm regional synchronization trivial 
practice algorithm implemented separate reusable module correctly implemented hides complexity mas designer 
formally proved various steps algorithm agent executed correctly 
proved correctness synchronization algorithm agents 
avoid state space explosion schedule agents round robin verification 
addition formal proofs discussed simulation results algorithm agents 
intention extend formal verification discussed complete proof correctness algorithm regional synchronization 

birman building secure reliable network applications cornell university ithaca ny 

design cpn www daimi aau dk 
ferber un de action pour les systemes multi agents sur les systemes multi agents intelligence artificielle 

ferber multi agent systems distributed artificial intelligence addison wesley isbn great britain 

huhns stephens multi agent systems societies agents weiss ed multi agent systems isbn mit press 

jensen coloured petri nets lecture notes computer science vol 
advances petri nets bad springer verlag 

lamport time clocks ordering events distributed system acm vol 
pp 

weyns holvoet colored petri net multi agent application modeling components objects agents moca aarhus denmark 

weyns holvoet regional synchronization simultaneous actions situated multi agent systems th international central eastern european conference multi agent systems prague czech republic proceedings lnai vol 


weyns holvoet model simultaneous actions situated multiagent systems german conference multi agent system technologies mates erfurt germany proceedings lncs vol 


weyns holvoet formal model situated multi agent systems formal approaches multi agent systems special issue fundamenta informaticae eds 
dunin keplicz 
appear 
