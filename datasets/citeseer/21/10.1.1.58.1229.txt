building concept galois lattices parts generalizing incremental methods valtchev missaoui epartement informatique succ 
centre ville montr eal qu ebec canada mail info ca formal concept analysis galois lattices general increasingly framework resolution practical problems software engineering knowledge engineering data mining 
applications put emphasis need efficient scalable flexible algorithms build lattice 
features sought development incremental algorithms 
major known incremental algorithm lacks clear theoretical foundations shows design flaws strongly affect practical performances 
presents general theoretical framework assembly lattices sharing set attributes existing theory subposition contexts 
framework underlies design generic procedure lattice assembly parts new lattice building approach general existing incremental batch ones 
argument theoretical strength describe way procedure reduces improved version major known incremental algorithm corrects existing bugs increases efficiency 
key words galois lattice formal concept analysis lattice building algorithms incremental methods context subposition lattice products 
formal concept analysis fca galois lattices general increasingly theoretical framework resolution practical problems software engineering knowledge engineering data mining :10.1.1.10.9845
particular substantial number results reported practical utilization galois concept lattices mining associations rules market basket analysis :10.1.1.10.7611
study aimed reducing data mining process investigates incremental updating existing lattice extension target dataset set previously unseen individuals 
incrementation single new individual special case problem dealt godin suggested approach certainly larger increment sets 
adopt different perspective leads exploration basic elements fca context subposition nested line diagrams 
developed complete framework assembling lattices partial structures context concatenation shared object set called context apposition see 
extend framework providing algorithms lattice assembly dual subposition operation deriving improved version godin algorithm outperforms predecessor 
organized follows 
short recall fca basics section focus concept galois lattice buildings emphasis incremental paradigm section 
shift context concatenation describe subposition lattice assembly procedure section core operation improved version algorithm section 
worstcase complexity scores algorithms considered discussed section 
formal concept analysis basics formal concept analysis studies hierarchical structures induced binary relation couple sets objects attributes 
structure introduced birkhoff see closed subsets ordered inclusion subject extensive studies names galois lattice fca slang concept lattice 
recall basics fca assume familiarity reader ordered structure theory fca framework binary relation object attribute matrix incidence relation called formal context see example 
definition 
formal context triple sets objects attributes respectively incidence relation theta standard fca notations denote objects numbers attribute small letters set possible separator free form stand set objects set attributes fa fg 
functions summarize context related links objects attributes 
definition 
function maps set objects set common attributes dual attribute sets ffl fa aj ffl fo oj available technical report www info ca valtchev apposition dm ps gz excellent subject may cd bc fh abc cf ef bcd efh abcd abcdefgh left sample context adapted fa hg 
right hasse diagram concept galois lattice derived example context abc 
functions denoted warning symmetrical roles 
furthermore compound operators ffi ffi denoted closure operators respectively 
example image 
operator induces family closed subsets respective power set constitute bijective mappings families 
couple mutually corresponding subsets called formal concept 
definition 
formal concept couple example couple concept efh see right 
concept referred concept extent concept intent retrieved primitives extent intent respectively 
furthermore set ck concepts context ck partially ordered intent extent inclusion property 
partial order hc complete lattice lub glb follows ffl ffl 
right shows concept lattice context left 
concepts cf ef join meet computed follows cf ef cf ef 
building lattice incrementally years fca galois lattice domain enriched row studies practical utilization lattice structures problems software engineering knowledge engineering data mining 
repeatedly pointed crucial aspects lattice related algorithms efficiency flexibility respect input 
focus incremental approach successfully addressed issues 
approaches lattice construction variety algorithms may computing concept lattice binary table 
mainly divided groups procedures extract set concepts algorithms building entire lattice concepts lattice order 
detailed description algorithms scope interested reader find comprehensive study partial scope 
extensive studies practical performances provided somewhat dated 
general observation current state fca algorithmics hand intended applications hand reveals big performance gap 
fact existing algorithms designed small binary tables objects attributes stored memory single computer 
current data software applications databases data warehouses typically give rise huge contexts require secondary storage may contain missing null invalid values distributed network see section detailed arguments 
databases constitute highly volatile contexts due frequent updates data 
step design flexible algorithms better fit volatile data design godin incremental algorithm building concept lattices 
examine approach giving arguments favor radical 
principles incremental approach incremental line paradigm known practical applications lattice theory input dynamic static resource aim efficiently carry required changes current result leading updated version 
incremental method build lattice starting single object gradually incorporating new object arrival lattice context fo gamma time carrying set structural updates 
incremental algorithm relies maximal reuse available structure computational gains batch procedure start lattice building scratch 
basic idea initial incremental method recognize lattice parts requiring restructuring carry restructuring minimal cost 
leads distinction categories nodes initial lattice change called modified integrating extents remain called old 
old concept qualified generator gives rise new concept called new 
consequently task algorithm may described detection kinds existing concepts subsequent reshaping update modified concepts physical creation new concepts computation appropriate precedence links creation new links elimination existing links obsolete 
overview method original algorithm split parts 
part lines gamma charge specific treatment required presence attributes description fo second part consists top traversal lattice gamma recognition current concept category lines gamma 
updates modified concepts merely receive extent detection generator leads creation respective new concept intent intersection generator intent fo extent generator extent augmented lines gamma 
new concept integrated partially completed lattice task requires detection upper covers 
algorithm looks superset actual covers picks nodes candidate set incremental algorithms pioneered 
concepts intents strictly smaller size int 
candidate qualifies super concept lower covers super concept upper cover physically linked obsolete links relating generator upper cover removed 
integration completed link generator line 
algorithm code algorithm follows original code authors early termination tests exit algorithm skipped sake simplicity 
procedure add object lattice object lattice local classes classes new array ka fog concept sets fnew concept fog fog fog intent extent intent intent fog new concept intent fog new link add ka fog classes classes new add classes intent ka fog classes intent fog add extent int intent fog int int classes new new concept extent fog int add classes new find upper covers new link add classes new ka fog classes new algorithm insertion new object concept galois lattice 
example illustrate algorithm consider insertion object lattice induced object set see left 
sets ordinary old modified generator concepts respectively 
result operation lattice right leads set new concepts identified extents 
consider procedure find upper covers new gen concepts int intent new gamma classes new intent int cover true cov intent int cover false exit cover gen cov drop link gen new link new algorithm insertion new object concept galois lattice 
integration new concept 
determination upper covers requires examination minimal set concepts identified intents cd bc fh efg cf may qualify depending order classes 
actual upper covers fg fhg result requires subsumption tests 
practical performances extensive study reported comparing practical performances method concurrent algorithms 
results suggested superiority incremental approach sparse contexts processed 
fact contexts number concepts remains small growing linear number objects 
resulting lattices favor traversal ordered structure extensive search context 
findings suggested incremental algorithm may lose context gets saturated 
authors report sharp decrease relative efficiency godin method greater values context density kik kok kak believe shift attributed inefficient upper cover computation harm hard mention small size lattices gets large number concepts 
requirement evolution data mining typical area input data stored large databases evolve time led recognition incremental updates crucial feature data mining algorithm 
increment adding single object time described partial solution problem volatile data 
matter fact databases data warehouses updates object wise group wise meaning subset objects fo added time inserting may think extracting lattice corresponding build 
challenging problem merge assembly lattices task generalizes conventional single object incrementation 
procedure attributes object 
similar problems arise dataset process comes distributed database 
assembling lattices contexts sharing object set problem dual set wise incrementation discussed 
theoretical framework algorithm may adapted situation shown section 
resulting procedure may prove clumsy task objects added provide improved version incremental algorithm special case generic procedure 
framework heavily relies lattice product operations start brief recall apposition subposition operations nested line diagrams extensively sequel 
subposition contexts assembly partial lattices classical order product operators lattices direct subdirect tensorial products fca provides set context oriented operators specific impact corresponding lattices 
focus subposition apposition operators initially intended support visualization large lattices 
visualization framework research fca yield original method visualizing complex concept lattices may arise small size contexts 
purpose global lattice drawn nested structure reflecting direct product smaller lattices built top parts initial context 
subposition contexts partial lattices subposition vertical assembly contexts sharing set attributes 
definition 
contexts set attributes context called subposition usually extent set disjoint union denoted involved context extents constraint essential study 
example global context table fa hg 
lattices corresponding referred partial lattices say 
apposition dual horizontal assembly contexts common object set discussed see 
linking global lattice partial ones consider direct product partial lattices lattice 
definition 
theta theta lattice theta hc theta theta theta ck theta ck theta nodes theta pairs concepts appears 
convenience reasons concrete concepts identified index respective lattice unique number ranging kck denoted pair denotes product concept concept concept efh 
furthermore concept projected lattice theta subsequently restricting extent set visible objects see 
resulting mapping constitutes order homomorphism direct product 
partial contexts pair theta index lattice comes rank pair 
efh bcd abcdefgh abcd ef cf abcdefgh left partial lattices built horizontal decomposition context 
right nested line diagram lattice theta definition 
function theta maps concept global lattice pair concepts partial lattices splitting extent partial context object sets example concept bc right side mapped concepts bcd respectively see 
mapping fundamental nested structure set nodes representing theta exactly images concepts see details nested line diagrams subsection 
property summarizes set interesting features mapping property 
mapping order embedding theta 
theta preserves concept meets meet preserving theta homomorphism inversely maps theta definition 
function theta maps pair concepts partial contexts global concept intersecting respective intents example image pair see concept efh 
couple properties compliance order theta property 
mapping order preserving theta theta follows straight basic observation concept extent intersection extent object set property 
classes kernel relation induced convex subsets theta gamma theta theta theta properties direct impact visualization fact isomorphic image theta allows global lattice represented proper sub lattice direct product 
larger size benefits regular structure may visualized multi level lattice structure shown paragraph 
nested line diagrams nested line diagrams visualization means allows lattice drawn sub structure direct product couple partial lattices nested line diagram basically represents product lattice theta combining respective line diagrams lattices unique complex structure 
nodes theta precedence links directly represented 
information spread various levels nesting 
right presents product lattice theta theta seen line diagram lattice outer frame diagram embedded 
lattice represented isomorphic sub structure theta exactly image 
nodes belonging sub structure concepts marked black nodes referred full nodes opposed remaining void nodes drawn white 
node product located finding node outer diagram finding respective node local diagram 
example node see numbering product lattice located right side node inner lattice node outer lattice corresponds attribute concept sequel illustration assembling process construction ignored 
assembling partial lattices global apposition subposition operations intended ease visualization concept lattices shown provide foundations lattice assembly procedure may extended class lattice building method implementing divide andconquer approach 
section summarize structural results underly method provide complete procedure lattice assembly subposition contexts involved 
characterizing global lattice problems need tackled concept lattice building parts identification concepts candidate nodes product computation concept intent extent detection precedence relations concepts summarize lattice order help drawing hasse diagram 
relevant structural results detailed description may summarized follows 
global concept image product lattice exactly minimum set antecedents 
property 
max gamma 
set antecedents exactly nodes product intersection respective intents equals intent property 
gamma int int definition generalizes easily arbitrary number lattices consider level nesting 
ease effective detection gamma members define function obvious property gamma node theta definition 
function theta maps concept pair theta intersection component intents intent intent image established intent extent concept computed straightforward way looking global data respectively intersection partial intents union partial extents 
property 
global concept image holds immediate successors upper covers cov determined examining upper covers image product lattice 
set cov minima images upper covers 
property 
cov min jc cov 
stated properties underlie algorithmic procedure builds global lattice looking structure partial ones 
principles algorithm algorithm represents traversal product lattice explicitly built node checking need generate global concept 
condition intent intersection reduced local search examination limited upper covers product 
case generator node node theta generates new concept detected mentioned operations yield intent extent new concept 
respective links precedence relations established computation minima candidate global concepts 
traversal product lattice carried top manner linear extension lattice order 
extension achieved preliminary sorting sets partial concepts 
concept lattices stored lists concepts concept record fields intent extent list upper covers accessible dedicated primitives extent intent 
auxiliary field indicates rank concept sorted list primitive rank 
speed computations algorithm uses dimensional array materializing mapping called embed product nodes indexed pairs ranks component concepts linear extensions respective partial lattices 
code algorithm convenience major tasks algorithm separated distinct procedures provided description 
noteworthy code delivers quite general idea way algorithm proceeds 
fact subroutines admit efficient implementations take advantage nice properties lattice structure 
example test full nodes corresponding class kernel may reduced set comparisons integer numbers 
interested readers may implementation details 
procedure assembly partial lattices global lattice sort sort linear extension intent intent find psi new concept extent extent min new link fcg algorithm assembling global galois lattice couple partial ones 
example table provides illustration way construction global lattice proceeds 
table contains trace examination nodes taken order nested loop algorithm 
node theta value intent intent 
generator nodes generated concept indicated remaining nodes upper cover shares test fail cited 
example node theta value ffg maximal 
generates global concept 
nodes theta theta mapped ffg superconcept theta possesses value generate global concept 
illustration way upper covers computed determine potential covers node theta corresponds node 
related values function potential upper covers theta table 
table provides global concepts actual upper covers generated concept theta respective values int int helped generate 
product generated upp 
cover node concept theta theta theta theta theta theta theta full nodes potential covers actual values covers theta theta theta fh theta cd cd theta cf cf theta table left partial trace execution algorithm steps 
right partial trace execution algorithm generation upper covers node theta sequel show specialization assembly framework may ground powerful readable incremental algorithm 
improved incremental algorithm single object incrementation carried algorithm assembly current lattice built top object set fog approach probably prove inefficient 
expected efficiency drop due redundant tests void nodes theta avoided algorithm 
fact warns design mixed approach combining strengths methods step unification underlying theoretical foundations 
mapping concept categories partial lattices recall incremental method distinguishes kinds concepts lattice respect modified ordinary old generators mapped nodes theta may void full 
aim link partitions explicitly prove correctness original procedure terms framework justifying short cut 
consider concept lattice structure quite simple top element fog fog bottom fact exists attributes context corresponding fog fog see shown middle 
top node lattice bottom lattice resulting bc ef bcd abc efh abcd abcdefgh abcdefgh left partial lattices pertaining incremental insertion object lattice objects 
right nested line diagram lattice theta assembly isomorphic sense fca obtained insertion sense consider embedding product theta theta look image 
aim link concepts full nodes theta theta 
simplicity reasons consider cases structure separately 
case singleton lattice trivial fog includes intent concept lattice obtained merely adding extent concept 
second case happens fog 
consider element chains order intervals product nodes correspond concept definition 
function theta maps concept part theta incident convenience reasons chain kind referred chain nodes denoted respectively 
please notice identity concepts godin physically transform concept intents may formally stated intent intent 
possible combinations nodes chain full void show occur corresponds particular concept category 
recall full nodes maxima respective equivalence classes kernel class uniquely determined value member class 
clearly monotonous non increasing product order theta property may derived basic fact property 
concept node full 
property relates valid combinations category respect convenience reasons shall denote full node ffl void node ffi 
property 
concept respective category ordinary old iff fffl ffig modified iff fffi fflg generator iff fffl fflg 
concerning computation upper cover sets correctness incremental method established cases relied concept categories 
aim show full node method create preserve exactly going links minima set cov 
example old concept links remain unchanged incremental approach means minima cov exactly concepts exists cov 
property summarizes necessary results slight overloading definitions 
property 
concept denoting set modified concepts assertions hold ffl ordinary old modified cov cov ffl generator cov cov gamma sum confirmed findings godin proof method correctness enables framework 
algorithm code space limits keep providing completely re engineered version algorithm key steps empowered advanced data structures example digital tree support concept look indicated basic set operations canonical representations 
focus improved upper cover computation new concepts results previous paragraphs explores smaller part lattice procedure find upper covers bis described substituted find algorithm 
starts computing candidate upper covers 
noteworthy functions needs effective computation 
fact value means concept corresponding intent intent fog obtained straightforward way modified concept generator generated new concept ordinary old concept inherited upper cover illustration see links concerning new concept generated created updated 
set candidates images fh incomparable concepts remain actual upper covers new 
upper cover gen existing link dropped 
procedure find upper covers bis new gen concepts candidates cov gen min candidates new link new cov gen drop link gen algorithm insertion new object concept galois lattice 
complexity issues number concepts partial lattices respectively number concepts total number attributes number objects 
complexity assessment shall parameter branching factor maximal number upper lower covers node lattice table summarizes cost major primitive algorithm respect implementation guidelines cost entire assembly procedure 
primitive complexity primitive complexity sort find psi assembly lk min assess cost incremental algorithms suggest compute separate cost functions 
concerns cumulated cost traversal current lattice nodes lines gamma algorithm 
concept fixed number set theoretic operations carried cost operation linear sum set sizes canonical representations sets quantity lm 
way assessing lattice traversal suppose optimal test generator status takes time 
basic incremental algorithm improvement suggested authors score low complexity 
contrast test uniquely intent sizes tested concept upper covers implemented find psi procedure desired cost 
underestimated cost original algorithm assessment helps simplify notations changing order final complexity 
second function represents overhead due processing new nodes 
discover actual upper covers new concept original function find upper covers examines concepts intents sizes exact number hard estimate time improvements suggested authors 
consequently upper cover search cost ld improved version requires kd cost minima selection 
entire incremental step assessed respect actual number new concepts delta 
respective scores incremental algorithms table cost entire lattice construction 
table shows cost divide conquer lattice building strategy cost theoretically efficient batch algorithm 
factor ranging missing 
method step cost full cost godin ml delta delta improved incremental ml delta kd ml delta kd divide conquer lk lk log lk discussion study motivated need incremental updates concept galois lattices set objects added time generalization framework godin 
extended framework described choose scenarios build lattice scratch augmented object set ii insert new objects iii build partial lattice new object set merge current lattice 
provided algorithms carrying second third scenario worst case complexity scores may interpreted follows incremental algorithms right choice small sets medium size favor assembly scenario 
case large set new objects comparable problem building lattice 
separate aspect framework harder evaluate algorithm worst case scores comparative studies shown practical performances may vary substantially changes context parameters 
currently working large scale comparison final results available preliminary findings warn excellent performance score assembly procedure 
research studied novel approach updating concept galois lattice set objects added original context 
amounts preliminary building lattice corresponding set new objects subsequent assembly new current lattice 
assembly procedure relies structural results complete extend classical apposition subposition framework 
part procedure integrated known incremental algorithm improving theoretical practical performances 
consider results date thoroughly accomplished speak favor theoretically founded approach algorithmic design 
conversely part large study aimed significantly extending practical scope fca techniques developing efficient algorithms larger set lattice operations mere lattice building static context 
lattice assembly framework allows different methods combined favors design flexible algorithmic strategies example batch incremental 
short term goal finish performance study major lattice building methods expected provide fca top map binary relation classes provided list lattice building methods score best class 
starting point design algorithmic meta strategy recognition particular relation classes chooses automatically best algorithm apply concrete context context fragments 

ordre classification alg 

birkhoff 
lattice theory volume 
american mathematical society colloquium publ providence revised edition 

bordat 
calcul du treillis de galois une correspondance 
math ematiques sciences 
davey priestley 
lattices order 
cambridge university press 
ganter 
basic algorithms concept analysis preprint 
technical report technische hochschule darmstadt 
ganter wille 
formal concept analysis mathematical foundations 
springer verlag 
godin missaoui 
incremental concept formation approach learning databases 
theoretical computer science 
godin missaoui 
incremental concept formation algorithms galois concept lattices 
computational intelligence 
gu 
construction du treillis de galois une relation 
math ematiques sciences 

jourdan 

computing line lattice maximal antichains posets 
order december 
kent 
automatic 
intel survey intel 

algorithms construction set concept line diagram preprint 
technical report math technische universitat dresden 
mineau godin 
automatic structuring knowledge bases conceptual clustering 
ieee transactions knowledge data engineering 
missaoui godin 
migrating object oriented database semantic clustering metamodelling techniques 
data knowledge engineering 
norris 
algorithm computing maximal rectangles binary relation 
revue de math ematiques appliqu ees 
raynaud 
fast algorithm building lattices 
information processing letters 
pasquier bastide taouil lakhal 
efficient mining association rules closed itemset lattices 
information systems 
snelting tip 
reengineering class hierarchies concept analysis 
proceedings acm sigplan sigsoft symposium foundations software engineering pages orlando fl 
valtchev 
algorithm minimal insertion type lattice 
computational intelligence 
valtchev missaoui 
divide conquer method building galois concept lattices 
submitted 
wille 
restructuring lattice theory approach hierarchies concepts 
rival editor ordered sets pages dordrecht boston 
reidel 
zaki 
generating non redundant association rules 
proceedings th international conference knowledge discovery data mining kdd 

