identifying loops linear time ramalingam ibm watson research center loop identification essential step performing various loop optimizations transformations 
classical algorithm identifying loops tarjan interval finding algorithm restricted reducible graphs 
people proposed extensions tarjan algorithm deal irreducible graphs 
havlak acm transactions programming languages systems vol 
july pages presents extension constructs loop nesting forest arbitrary flow graph 
show running time algorithm quadratic worstcase linear claimed 
show modify algorithm run linear time 
consider quadratic algorithm sreedhar 
acm transactions programming languages systems vol 
november pages constructs loop nesting forest different constructed havlak algorithm 
show algorithm adapted run linear time 
consider algorithm due steensgaard technical report msr tr microsoft research constructs loop nesting forest 
show algorithm efficient borrowing ideas algorithms discussed earlier 
categories subject descriptors programming languages processors ers optimization data data structures graphs trees discrete mathematics graph theory graph algorithms general terms algorithms languages additional key words phrases loops irreducible flowgraphs 
loop identification interesting control flow analysis problem applications 
classical algorithm identifying loops tarjan interval finding algorithm tarjan restricted reducible graphs 
people proposed extensions tarjan algorithm deal irreducible graphs 
study improve proposed algorithms identifying loops irreducible graph 
algorithm study due havlak 
show running time algorithm quadratic worst case linear claimed 
show modify algorithm run author address ramalingam ibm watson research center box yorktown heights ny usa 
mail rama watson ibm com permission digital hard copy part material fee granted provided copies distributed profit commercial advantage acm copyright server notice title publication date appear notice copying permission association computing machinery 
acm 
copy republish post servers redistribute lists requires prior specific permission fee 
fl acm delta ramalingam linear time 
consider quadratic algorithm sreedhar constructs loop nesting forest different constructed havlak algorithm 
show algorithm adapted run linear time 
final section loop nesting forest defined steensgaard discuss aspects sreedhar algorithm combined steensgaard algorithm improve efficiency steensgaard algorithm 

terminology notation flowgraph connected directed graph start consisting set vertices set edges distinguished start vertices start assume loss generality start predecessors 
denote number vertices graph number edges graph assume reader familiar depth search hopcroft tarjan abbreviated dfs depth search trees 
see cormen example 
edge graph said dfs tree edge parent dfs tree dfs forward edge ancestor parent dfs tree dfs backedge descendant dfs tree dfs cross edge 
omit prefix dfs confusion 
straightforward augment dfs compute information help answer ancestor relation queries form ancestor dfs tree constant time 
see havlak example 
refer order vertices visited dfs dfs order 
assume reader familiar concepts reducible irreducible flowgraphs 
see aho discussion concepts 
denote inverse ackermann function ff 
inverse ackermann function slow growing function may considered constant practical purposes 
see cormen discussion function 
appear single accepted definition loop certain irreducible flowgraphs algorithms considered identify different set loops 
suitability algorithms depends intended application 
facts hold true algorithms 
loop corresponds set vertices flowgraph 
loops identified algorithms mutually disjoint completely contained 
nesting containment relation loops represented forest refer loop nesting forest identified corresponding algorithm 
vertex belonging loop said entry vertex loop predecessor outside loop 
flowgraph algorithms described conceptually modify flowgraph execution proceeds 
refer flowgraph worth remembering don mean fixed input flowgraph flowgraph constantly changes course execution 
changes identifying loops linear time delta flowgraph explicitly represented 
union find data structure implicitly represent changes flowgraph 

tarjan algorithm reducible graphs brief description tarjan loop nesting forest algorithm construct 
consider reducible graph 
vertex target backedge identifies loop lw header 
bw set 
loop lw consists vertices graph reach vertex bw going loops disjoint completely contained 
nesting containment relation loops represented forest yields loop nesting forest 
provides definition tarjan loop nesting forest reducible graphs see forest constructed efficiently 
tarjan algorithm performs bottom traversal depth search tree identifying inner nested loops 
identifies loop algorithm collapses single vertex 
set vertices collapsing mean replacing set vertices single representative vertex graph 
vertex successor predecessor collapsed graph iff successor predecessor vertex original graph 
vertex visited traversal determined loop header incoming backedges 
explained bw set 
children loop nesting forest identified performing backward traversal collapsed graph identifying vertices reach vertex bw going children identified children merged collapsed single vertex identifies newly constructed loop lw traversal continues vertex 
implementation collapsing vertices achieved classical union find data structure 
see tarjan cormen 
outermost loops identified far maintained set 
find operation vertex returns header outermost loop containing vertex loop 
set vertices collapsed performing union operation vertices set 
complete description algorithm pseudo code appears 
analyze complexity algorithm 
procedure invoked exactly vertex 
line executed vertex 
lines executed vertex innermost loop containing identified 
result total cost executing lines perform find operation edge original graph 
similarly lines executed vertex costs union operation 
algorithm performs union operations find operations denotes number vertices graph denotes number edges graph 
algorithm runs strictly speaking mean children node representing loop lw simplify matters somewhat header vertex represent loop lw loop nesting forest 
vertex header loop 
delta ramalingam procedure collapse loop parent lp union representative merged set procedure fg worklist lp find backedge gamma worklist empty remove arbitrary element worklist add predecessor backedge lp find worklist add lp find worklist empty collapse procedure vertex loop parent null lp add vertex reverse dfs order fig 

tarjan algorithm constructing loop nesting forest reducible graph 
lp partition vertices graph 
function lp add initially places equivalence class 
function lp union merges classes representative element merged class 
function lp find returns representative element equivalence class 
time ff union find implemented standard path compression union rank techniques tarjan cormen 

havlak algorithm havlak extension tarjan algorithm handles irreducible graphs 
show algorithm potentially quadratic havlak describes algorithm linear 
precisely show algorithm worst case may take time graphs number edges 
havlak extension tarjan algorithm modifies loop body identification step follows 
vertex children loop nesting forest identified performing backward traversal collapsed graph traversal restricted set descendants dfs tree 
particular lines tarjan algorithm modified lines executed descendant dfs tree descendant dfs tree edge ignored replaced edge collapsed flowgraph 
note reducible graph identifying loops linear time delta start fig 

counterexample illustrating havlak algorithm may perform quadratic number union find operations 
solid lines indicate dfs tree edges dashed lines indicate remaining graph edges 
guaranteed descendant dfs tree 
step described precisely source problem 
possible single edge processed multiple times time edge form header loop containing example shown illustrates 
note vertices targets backedges identified loop headers order 
loop bodies constructed order 
edge processed gamma times replaced successively edges similarly edge processed gamma times 
algorithm performing union find operations example 
example presents lower bound complexity havlak algorithm 
upper bound havlak algorithm 
particular modified loop lines perform find operations 
lines may performed vertex algorithm performs union operations find operations implies upper bound ff running time algorithm 
ff see tarjan upper bound simplifies 
delta ramalingam start fig 

modifying havlak algorithm run linear time 
edge flowgraph 
delta delta delta shown bold vertices ancestors dfs tree identified loop headers havlak algorithm 
common ancestor dfs tree 
proper descendant descendant havlak algorithm edge constructing bodies loops headers construction loop body 
linear time version havlak algorithm describe modification havlak algorithm run linear time 
vertex control flow graph consider ancestors havlak loop nesting forest 
see 
particular denote header innermost loop containing havlak loop nesting forest 
delta delta delta sequence loops containing innermost outermost identified headers 
note ancestor dfs tree 
consider edge consider largest descendant dfs tree 
words descendant dfs tree 
consider havlak algorithm processes edge body loop header constructed edge gamma considered 
source edge descendant edge replaced edge body loop header constructed edge appear proper edge vertex added loop body 
desirable replace edge edge step steps 
turns 
denote common ancestor dfs tree 
note lie dfs tree 
consider moment havlak algorithm visits bottom traversal dfs tree 
point loops headers identified loop header identifying loops linear time delta procedure loop parent null find mark irreducible loop header loop parent null union procedure edge add edge find find graph procedure vertex loop parent null fg lp add add forward edge cross edge remove add common ancestor vertex reverse dfs order procedure fig 

modified version havlak algorithm 
second union find data structure map loop headers header innermost reducible loop containing 
constructed 
find operation return stage 
suggests algorithm 
initial pass remove cross edge forward edge graph attach list associated common ancestor linear time see tarjan cormen problem 
run havlak algorithm modified follows 
main bottom traversal visits vertex processes list cross forward edges associated pass adds edge ind ind graph 
immaterial add edge ind edge ind ind graph 
modified algorithm appears 
note modification implies procedure tarjan algorithm unchanged 
modified algorithm runs linear time constructs loops loop nesting forest havlak algorithm 
quite complete 
addition constructing loop nesting forest havlak algorithm marks loops reducible irreducible 
straightforward distinguish reducible loops irreducible loops modified algorithm described 
show extra piece information computed desired 
consider example 
presence edge means delta ramalingam loops headers irreducible 
algorithm replaces edge edge ind explained need mark loop headers irreducible 
procedure walking loop nesting tree containing naively explained algorithm quadratic 
avoid quadratic behavior standard path compression technique 
particular consider lines mark vertex irreducible loop header traverses parent say step scans loop tree edge utilize second union find data structure scan loop tree edge 
particular union operation line ensures tree edge scanned find operation line skips past previously scanned edges 
safe reason mark vertex irreducible marked 
resulting algorithm runs linear time 

sreedhar gao lee algorithm sreedhar different algorithm constructing loop nesting forest 
algorithm utilizes dj graph essentially combines control flow graph dominator tree structure 
simplify discussion algorithm just control flow graph dominator tree dj graph 
level denote depth node root dominator tree root level 
denote set vertices level set vertices level 
denote maximum level dominator tree 
sreedhar algorithm processes vertices dominator tree bottom 
particular level processed follows 
step identifies reducible loops level vertices level scanned vertex incoming backedges source dominated identified header reducible loop 
body reducible loop identified just tarjan algorithm traversing graph backwards sources backedges identifying vertices reach backedges going reducible loop collapsed single vertex just tarjan algorithm 
vertex level incoming backedges source dominated entries irreducible loop 
vertices level processed identify reducible loops construct irreducible loops level 
vertex level incoming backedges source dominated 
requires processing subgraph collapsed flowgraph consisting vertices level greater equal current level set vertices jl identify strongly connected components sccs 
non trivial strongly connected component graph irreducible loop level collapsed single vertex 
non trivial scc mean scc consisting vertex 
establish property loops identified algorithm useful subsequently 
identifying loops linear time delta lemma 
vertex entry vertex irreducible loop 
proof 
note irreducible loops identified level mutually disjoint 
loops common entry vertex 
irreducible loop identified level show entry vertex vertex level immediately implies irreducible loops belonging different levels share common entry vertex lemma follows 
denote subgraph dominator tree consisting vertices level greater equal forest consisting subtrees dominator tree 
note loop consist vertices different trees loop consisting vertices tree reducible loop level loop level greater vertices belonging different trees root tree containing path flowgraph pass 
dominator 
loop contains vertex contain root tree contains vertex loop root tree containing assume predecessor flowgraph tree rooted straightforward property dominator tree 
follows loop path vertex loop path vertex loop establishes vertex loop predecessor outside root tree roots trees precisely vertices level result follows 
sreedhar show algorithm described runs time mff km number levels strongly connected component algorithm invoked 
worst case resulting quadratic algorithm 
example illustrates source quadratic behavior algorithm repeated application scc algorithm 
consider processing done level example 
level contains irreducible loop consisting vertices constructing irreducible loop requires identifying sccs graph consisting vertices vertices notice vertices visited belong non trivial scc 
similarly apply scc algorithm level gamma lower level may visiting vertices 
worst case may visiting vertices times resulting quadratic complexity 
show careful implementation scc identification phase ensure algorithm runs linear time 
observe vertices collapsed single vertex say representing irreducible loop vertices visited 
true edges may visited edges represent edges collapsed graph cost visiting edges attributed cost visiting vertex 
delta ramalingam level level fig 

example illustrating source quadratic behavior sreedhar algorithm 
solid edges belong control flow graph dominator tree dashed edges control flow graph edges dominator tree 
goal perform irreducible loop construction level vertex level visited belongs irreducible loop level follows 
consider strongly connected component 
consider vertex component visited depth search 
clearly vertices component descendants vertex dfs tree 
start set incoming backedges traverse graph backwards restricting traversal vertices descendants dfs tree identify vertices belonging strongly connected component visiting vertices scc 
process similar havlak algorithm tarjan identify loop body corresponding potential header vertex 
note apply process start vertex scc visited dfs identify complete scc 
havlak tarjan algorithm visit potential header vertices reverse dfs order want visit vertices order 
perform irreducible loop construction level visiting set vertices level dfs order 
visited vertex belongs irreducible loop level constructed skip vertex continue vertex 
incoming backedge belongs irreducible loop 
body loop identified traversing backwards sources backedges restricting traversal descendants dfs tree 
modified algorithm appears 
words explanation tarjan algorithm havlak algorithm identify loop header vertex 
allowed represent loop header vertex loop nesting forest 
sreedhar gao lee algorithm may identify loops header vertex reducible loop irreducible loop 
consequently header vertex represent loop loop nesting forest identifying loops linear time delta procedure header worklist worklist empty create new vertex predecessors header header worklist empty remove arbitrary element worklist add processed true predecessor lp find descendant header dfs tree add edge lp find graph elsif lp find worklist add lp find worklist collapse procedure vertex loop parent null processed false lp add level lp find backedge dominates gamma fxg level dfs order processed lp find backedge dominates gamma fxg fig 

modified version sreedhar gao lee algorithm new representative vertex 
algorithm explicitly identify loops consisting single vertex modified desired 
note construct level list vertices level dfs order easily 
just initialize lists empty visit vertices dfs order appending visited vertex list corresponding level 
analyze complexity algorithm 
observe lines get executed vertex lines perform indegree find operations 
lines executed vertices exist original graph vertices created line 
vertices created line representatives loops collapsed graph 
complexity algorithm depends number delta ramalingam start fig 

example illustrating sreedhar algorithm identify loops identified steensgaard algorithm 
representatives created indegrees 
created vertices fall categories reducible loop representatives irreducible loop representatives 
vertex original graph header reducible loop results creation reducible loop representative indegree bounded indegree irreducible loop entry vertices vertices original graph indegree representative irreducible loop bounded sum indegrees entry vertices 
vertex original graph entry vertex irreducible loop 
sum indegrees irreducible loop representatives bounded number edges original graph 
result algorithm performs union operations find operations resulting complexity mff 

steensgaard loop nesting forest section consider loop nesting forest defined steensgaard 
outline steensgaard algorithm constructing forest serves constructive definition structure 
steensgaard identifies loops graph top fashion identifying outer loops 
nontrivial strongly connected components graph constitute outermost loops 
vertex loop said generalized entry node loop predecessor outside strongly connected component 
edge vertex inside loop generalized entry nodes said generalized backedge 
inner loops contained loop determined identifying strongly connected components subgraph induced loop generalized backedges eliminated 
iterative process yields loop nesting forest 
briefly consider differences forest created steensgaard algorithm forest created sreedhar gao lee algorithm 
difference explained sreedhar sreedhar gao lee algorithm identifying loops linear time delta may identify reducible loops steensgaard algorithm 
extra step sreedhar gao lee algorithm construct reducible loops eliminated difference disappears 
possible sreedhar gao lee algorithm identify fewer loops steensgaard algorithm 
problem possible sreedhar gao lee forest irreducible loop nested inside irreducible loop entry vertices level dominator tree 
example shown illustrates 
example steensgaard algorithm identifies outer loop consisting vertices inner loop consisting vertices contrast sreedhar gao lee algorithm identifies loop consisting show steensgaard loop nesting forest constructed efficiently borrowing ideas described section sreedhar 
simply modify irreducible loop construction phase algorithm described section follows stopping identifying strongly connected components steensgaard algorithm iteratively find loops nested inside irreducible loop 
words applying strongly connected components algorithm subgraph vertices level greater equal current level apply steensgaard algorithm subgraph 
symmetrically possible modify steensgaard algorithm replacing strongly connected components algorithm algorithm section 
resulting algorithm asymptotic worst case complexity steensgaard original algorithm quadratic size graph 
practice potentially efficient steensgaard original algorithm number iterations steensgaard algorithm performs single irreducible loop identified sreedhar algorithm smaller number iterations perform graph 

examined algorithms identifying loops irreducible flowgraphs shown algorithms efficient 
algorithms construct potentially different loop nesting forests question arises relative advantages different algorithms 
havlak approach disadvantage set loops loop nesting forest constructed dependent depth spanning tree dependent ordering outgoing edges vertex 
particular represented single irreducible loop entry vertices lee forest may represented irreducible loops nested arbitrary order havlak forest 
believe lee loop nesting forest natural havlak loop nesting forest 
modified version havlak algorithm simpler implement modified version sreedhar gao lee algorithm require construction dominator tree 
worthwhile exercise adapt havlak algorithm directly construct sreedhar gao lee loop nesting forest 
think done formally established 
hand sreedhar gao lee loop nesting forest steensgaard delta ramalingam loop nesting forest somewhat incomparable 
explained section ideas approaches combined construct loop nesting forest refined resulting algorithm expensive linear time variation constructing lee forest 
refined forest worth increased algorithm complexity depends intended application 
john field sreedhar anonymous referees helpful comments 
aho sethi ullman 
compilers 
principles techniques tools 
addisonwesley reading ma 
cormen leiserson rivest 
algorithms 
mit press cambridge ma 
havlak 
nesting reducible irreducible loops 
acm trans 
program 
lang 
syst 
july 
hopcroft tarjan 
efficient algorithms graph manipulation 
commun 
acm 
sreedhar gao lee 

identifying loops dj graphs 
acm trans 
program 
lang 
syst 
nov 
steensgaard 
program dependence graphs irreducible programs 
tech 
rep msr tr microsoft research redmond wash oct tarjan 
testing flow graph reducibility 
comput 
syst 
sci 

tarjan 
applications path compression balanced trees 
acm 
tarjan 
data structures network algorithms 
society industrial applied mathematics philadelphia pa received february revised september accepted october 
