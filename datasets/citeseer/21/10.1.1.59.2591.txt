efficient processing xml twig patterns parent child edges look ahead approach lu ting chen tok wang ling school computing national university singapore science drive singapore comp nus edu sg growing importance semi structure data information exchange research done provide effective mechanism match twig query xml database 
number algorithms proposed process twig query holistically 
algorithms quite efficient quires ancestor descendant edges 
queries mixed ancestor descendant parent child edges previous approaches may produce large intermediate results input output size manageable 
overcome limitation propose twig join algorithm wigstacklist 
main technique look ahead read elements input data cache limited number lists main memory 
number elements list bounded length longest path xml document 
show queries ancestor descendant relationships branching nodes 
queries contain parent child relationship branching nodes set intermediate results wigstacklist guaranteed subset previous algorithms 
complement experimental results range synthetic data show significant superiority wigstacklist previous algorithms queries parent child relationships 
categories subject descriptors database management systems query processing general terms algorithm performance keywords xml holistic twig pattern matching permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
cikm november washington dc usa 
copyright acm 

xml emerging de facto standard information exchange internet 
xml documents complex internal structures generally modelled ordered trees 
xml query languages see structures xml documents expressed twig small tree patterns values xml elements part selection predicates 
finding occurrences twig pattern xml database core operation xml query processing relational implementations xml databases native xml databases 
past years algorithms proposed literature form labeling scheme encodes element xml database positional information :10.1.1.21.8854
order answer query twig pattern algorithms access labels traversing original xml documents particular propose decompose twig pattern binary relationships tree merge stack tree algorithms match binary relationships basic matches get 
main disadvantage decomposition approach intermediate result sizes get large input final result sizes manageable 
address problem bruno propose holistic twig join algorithm twigstack 
chain linked stacks compactly represent partial results individual query root leaf paths approach cpu optimal sequential algorithms read entire input ancestor descendant edges 
reported motivated observation proved terms input output sizes queries ancestor descendant edges algorithms size intermediate results queries parent child edges 
get better understanding limitation experimented treebank dataset downloaded university washington xml repository 
twig queries patterns shown table contains parent child edge 
twigstack operates steps list intermediate path solutions output intermediate results ii intermediate path solutions step merge joined produce final solutions 
table shows numbers intermediate path solutions output step merge joinable paths second step 
immediate observation table twigstack output merge joinable 
queries produced twigstack step useless final answers 
experiment shows big challenge improve previous algorithms answer queries parent child edges 
query partial paths paths percentage useless paths vp dt prp dollar jj np vp np table number partial path solutions produced twigstack treebank data propose new holistic twig join algorithm performance query patterns ancestor descendant edges significantly efficient queries presence parent child edges 
particular propose algorithm wigstacklist match query twig patterns 
main technique wigstacklist data structures stack list 
chain linked stacks compactly represent partial results individual query root leaf paths 
look ahead read elements input data streams cache limited number list 
number elements list bounded length longest path xml document 
elements lists help determine element possibly contributes final answers 
contribution summarized follows propose novel holistic twig join algorithm wigstacklist 
edges branching nodes query pattern ancestor descendant relationships cost algorithm sum sizes input final output 
words previous algorithms algorithm guarantee optimality queries parent child relationships nodes 
improved result mainly owe look ahead technique algorithm 
furthermore exist parent child relationships branching nodes show intermediate solutions output wigstacklist guaranteed subset previous algorithms 
range synthetic data query twig patterns 
experiments validate analysis results show superiority wigstacklist previous algorithms 
rest proceeds follows 
discuss previous algorithm show intuitive observation section 
wigstacklist section 
report section 
section dedicated related section concludes 

background data model twig pattern query xml data commonly modelled tree structure nodes represent elements attributes texts parent child edges represent element subelement element text pairs 
existing xml query processing algorithms region code start level position tree node data tree 
region encodings support efficient evaluation structural relationships 
formally element ancestor element start start 
parent child relationship check level level 
queries xml query languages twig patterns match relevant portions data xml database 
twig pattern nodes may elements attributes texts 
twig pattern edges parent child relationships denoted ancestor descendant relationships denoted 
number children node greater call node branching node 
node child non branching node 
twig pattern xml database identified mapping nodes elements query node predicates satisfied corresponding database elements ii ancestor descendant relationships query nodes satisfied corresponding database elements 
answer query nodes represented ary tuples tuple tm consists database elements identify distinct match twigstack observation bruno propose novel holistic twig join algorithm called match xml twig patterns 
chain linked stacks compactly represent partial results individual query root leaf paths 
particular phases follows 

output path solutions list root leaf path solutions output intermediate path solutions 
root leaf solution matches corresponding path pattern query pattern 

merge lists path solutions phase merged produce query twig pattern edges query patterns ancestor descendant relationships root leaf solution phase merge joinable solution root leaf query paths 
path solutions redundant 
property hold parent child edge query pattern 
see example evaluate twig pattern xml document twigstack push stack output root leaf path solutions bn cn bn cn match path notice example match 
useless intermediate path solutions 
size intermediate path solutions great impact performance 
query twig pattern xml tree illustration sub optimality twigstack holistic twig joins algorithms focus shrinking size intermediate path solutions queries relationships 
main problem twigstack considers ancestor descendant property nodes phase 
level information nodes hand sufficiently exploited 
illustration see query data 
edge twig pattern parent child relationship node document contributes child name twigstack pushes stack descendant child tag algorithm outputs large size intermediate paths 
method pushes descendant tag name document fig descendants tag child tag method push stack avoid outputting useless intermediate path solutions 
extend intuition example propose new holistic twig matching algorithm able produce intermediate path solutions twigstack queries parent child relationships 

twig join algorithm section wigstacklist algorithm finding matches query twig pattern xml document 
start section introducing notations data structures wigstacklist 
notation data structures query twig pattern represented tree 
self explaining function examine query node root leaf node 
function children gets child nodes andp returns child nodes ancestor descendant relationship query twig pattern respectively 
children 
rest node refers tree node twig pattern node element refers element data set involved twig join element 
data stream tn associated node 
point current element tn 
function cn tests cn ln stacks sn lists ln algorithm tn 
access attribute values cn cn start cn cn level 
cursor forwarded element tn procedure advance tn 
initially cn points element tn 
join algorithm types data structure list stack 
query twig associate list ln stack sn node twig shown 
stack algorithm similar twigstack 
data node stack consists pair element tn pointer element 
operations stack empty pop push 
operations return start attributes top element stack respectively 
point computation node stack sn bottom top guaranteed lie root leaf path xml database ii set stacks contain compact encoding partial query twig pattern 
list ln declare integer variable say pn cursor point element list ln 
ln elementat pn denote element pointed pn 
access attribute values ln elementat pn ln elementat pn start ln elementat pn ln elementat pn level 
point computation elements list ln strictly nested element ancestor element 
operations list ln delete pn append 
operation delete ln elementat pn list ln operation appends element ln algorithm wigstacklist computes answers query twig pattern algorithm 
algorithm operates phases 
phase line repeatedly calls getnext algorithm query root parameter get node processing 
output solutions individual query root leaf paths phase 
second phase line solutions merge joined compute answer query twig pattern 
section explain getnext algorithm section presents main algorithm detail 
getnext algorithm getnext procedure called main algorithm wigstacklist 
returns node possibly properties assume element en getelement ln algorithm getnext return node ni children gi getnext ni gi ni return gi nmax children ni nmin children ni nmax proceed nmin return nmin nmax node ni children element ei list ln ei parent getelement ni ni child move cursor pn list ln point ei return ni return procedure getelement empty ln return ln elementat pn return cn procedure return start attribute getelement procedure return attribute getelement procedure cn start cn ln append cn advance tn procedure proceed empty ln advance tn ln delete pn pn move pn point ln query document root example illustrate getnext algorithm en descendant eni stream tni ni children ii branching node query element en child eni tni ni iii branching node element eni tni exists element ei tag path en parent eni maximal start attribute children 
line algorithm getnext getnext ni children 
returned node gi ni immediately return gi line 
try locate child satisfies properties 
line get max min elements current head elements lists streams respectively 
line skips elements contribute results 
common ancestor cni line returns child node smallest start value line important step 
look ahead read elements stream tn cache elements ancestors list ln 
element ni find parent list ln ni children algorithm getnext returns node ni line 
note step manifests key difference wigstacklist previous algorithms twigstack 
previous ones return ni results useless intermediate paths 
algorithm adopt clever strategy return ni parent list ln contribute final results involved elements remaining parts streams 
branching node line need move cursor list ln point parent getelement ni 
main difference getnext algorithms twigstack wigstacklist summarized fol lows 
twigstack getnext head ele ment en stream tn descendant en stream tni children property mentioned wigstacklist needs satisfy properties illustrated follows 
example 
consider query twig pattern data set visualized 
subscript added element order start values easy 
initially elements 
call getnext root returns node element find parent tag path 
scenario call getnext root return descendants stream respectively 
main algorithm output useless path solution 
second call getnext root returns 
addition cursor node forwarded 
right third call wigstacklist reach cursor setup match query 
main algorithm algorithm shows main algorithm wigstacklist 
repeatedly calls getnext root get node process described 
line calls getnext algorithm identify algorithm getnext root empty pop proceed function return ni ni cni procedure sn push getelement stack sn proceed procedure empty pop procedure empty sn sn pop sn node processed 
line remove stacks parent extended 
leaf node push element getelement line line path solution involving getelement output 
note path solutions output root leaf order easily merged form final twig matches line 
result may need block path solutions output 
interested readers may refer twigstack know details blocking technique 
correct merge stack procedure 
consider document 
suppose elements initially 
call getnext returned 
point note current element pointed cursor pb list lb recall line algorithm 
calls getnext return consume 
current elements stream finished 
call getnext return node 
algorithm shown popped stack 
property stack upper element descendant lower hold 

parent endif empty 
procedure empty sn sn pop sn incorrect merge procedures query twig pattern xml tree example show incorrectness codes fig 
compared previous algorithm twigstack benefit new algorithm wigstacklist illustrated examples 
example 
consider query twig pattern fig doc fig 
initially call getnext twigstack returns node call getnext wigstacklist returns node result algorithm twigstack wigstacklist output intermediate result contribute final answers 
example 
consider fig doc fig 
initially call getnext twigstack wigstacklist return node second call getnext output intermediate results twigstack wigstacklist 
subsequently third call getnext twigstack returns node 
third call getnext wigstacklist returns node parent stream ta twigstack wigstacklist output intermediate result contribute 
example illustrates fact wigstacklist twig patterns contain ancestor descendant relationships branching nodes solution individual query root leaf path guaranteed merge joinable solution root leaf paths 
hand example illustrates fact exist parent child relationships branching nodes wigstacklist superior twigstack output useless intermediate solutions 
doc doc examples illustrate benefits algorithm wigstacklist analysis section discuss correctness algorithm wigstacklist analyze complexity 
compare wigstacklist terms size intermediate results 
definition 
head element en node query twig pattern list ln empty say element indicated cursor pn ln head element denoted en 
say element cn stream tn head element definition 
child descendant extension wesay node child descendant extension properties hold 
ni element en tag ni descendant en 
ni element ei tag path en ei parent en attribute value head elements child nodes 
children child descendant extension 
definitions important establish correctness lemma 
lemma suppose arbitrary node twig query getnext properties hold child descendant extension 
parent child descendant extension possibly descendant 
lemma prove lemma 
lemma 
suppose getnext returns query node line algorithm getnext 
empty head element contribute 
proof sketch suppose contrary solution head element 
line algorithm getnext insert elements name parent path list 
line parent en hypothesis know parent en participate final solution 
lemma see contradiction start attribute parent en stack empty 
lemma 
point computation algorithm wigstacklist elements stack sn strictly nested element descendant element 
proof lemma obvious previous twigstack 
algorithm wigstacklist may change cursor list lemma nontrivial 
wigstacklist insert elements stack procedure 
cases relationship new element pushed stack existing top element stack see 
case element popped procedure case impossible 
case ii case added stack safely 
case iii similar case element popped 
ensure participate longer 
case iv case impossible 
algorithm wigstacklist change cursor list line getnext 
new element indicated cursor guaranteed descendant previous 
lemma holds cases 
lemma 
wigstacklist element popped stack sn participate new solution 
proof element popped stack sn procedure 
prove correctness lemma cases respectively 
suppose contrary new solution involving popped element epop 
line epop start attribute head element parent 
containment property epop contained element path root contradiction 
containment property see pops elements descendants en head element node popped element participate new 
child parent child relationship 
start value child epop head element node children 
element child epop remaining portion stream 
epop participate new solutions 
theorem 
query twig pattern database algorithm wigstacklist correctly returns answers property segment top case case ii case iii case iv top new start new top new proof sketch prove theorem 
lemma know getnext returns query node line getnext empty head element en contribute 
element ancestors en descendant child extension returned getnext en lemma lemma maintain node query elements involve root leaf path solution stack sn 
time getnext root leaf node output solutions en 
top start new start top new correctness holds query twig patterns ancestor descendant parent child relationships edges prove optimality case relationships appear edges non branching nodes 
intuition push stacks elements child descendant extension 
parent child relationship non branching node lemma guaranteed en pushed stack en child element stream result 
theorem 
consider query twig pattern nodes ancestor descendant relationships branching nodes words pattern may parent child relationships non branching nodes xml database algorithm wigstacklist worst case complexities linear sum sizes input lists output list 
worst case size stack list twigstack list proportional maximal length root leaf path xml database results space complexity wigstacklist 
theorem 
consider query twig pattern nodes 
worst case space complexity algorithm wigstacklist times maximal length root leaf path particularly important note case query patterns contain parent child relationships branching nodes shown experimental results section algorithm wigstacklist usually output intermediate path solutions twigstack 
reason simple 
wigstacklist pushes element stack descendant child extension element descendant extension stack 
wigstacklist pushes fewer elements contribute final answers stack output intermediate results 
top start new start top new new illustration proof lemma top new top start 
experimental evaluation section performance twig pattern matching algorithms wigstacklist twigstack synthetic data 
evaluated performance algorithms metrics 
number partial solutions 
metric measures solutions reflects ability algorithms wigstacklist twigstack size intermediate results different kinds query twig patterns 

running time 
running time algorithm obtained averaging running times consecutive runs 
experimental setting implemented algorithms jdk 
experiments performed ghz pentium processor mb ram running windows xp system 
real world synthetic data sets experiments treebank 
obtained treebank data set university washington xml repository 
document treebank deep recursions element names 
data set maximal depth nodes 
dtd data set 
simple dtd create highly nested data trees bc cb non terminals terminals 
generated bytes raw xml data dtd 
data tree varied 
random 
generated random data trees parameters fan depth 
fan nodes data trees varied range 
depths data trees varied 
different labels generate data sets 
node labels trees uniformly distributed 
vs twigstack compare algorithm wigstacklist twigstack different twig pattern queries data sets 
treebank queries shown table realworld treebank data 
queries different twig structures different distribution ancestor descendant parent child edges 
particular edges relationships edges relationships 
edges branching nodes relationships edges branching nodes contain relationships 
choose different queries give comprehensive comparison algorithm wigstacklist twigstack 
query xpath expression md vp pp np vbn vp pp np vbn vp dt prp dollar vp np jj np table queries treebank data queries twigstack path wigstacklist path reduction percentage useful path table number intermediate path produced twigstack wigstacklist treebank data shows execution time queries algorithms table shows number partial solutions fourth column number merge joinable path contribute final answer 
table observations query twig pattern contains edges wigstacklist twigstack path solutions contribute see table 
case algorithms similar performance see fig 
edges branching nodes contain ancestor descendant relationships wigstacklist optimal twigstack nice property 
example see table 
numbers intermediate path solution twigstack wigstacklist produces solutions 
considering number merge joinable path path solutions wigstacklist contributes 
edges branching nodes contain relationship algorithms wigstacklist twigstack suboptimal see table 
case observed number intermediate paths produced wigstacklist significantly twigstack 
example queries twigstack produced intermediate paths wigstacklist produce solutions 
partial solutions twigstack pruned wigstacklist 
execution time twigstack considerably slower wigstacklist queries 
summary algorithm wigstacklist performs better twigstack query twig patterns parent child edges 
dtd data set query different synthetically generated data sets 
note query edges branching node ancestor descendant relationships 
dtd rules bc cb child nodes clearly answer query data set 
path solution contribute final answers 
varied size tag relative size tag child tag generated data sets nodes 
show execution time twigstack wigstacklist number solutions algorithm produces 
consistent gap twigstack wigstacklist results fact optimal query 
seen number solutions produced twigstack large wigstacklist produce partial solutions 
issued second xpath query previous data sets 
match query data sets 
main different previous experiment wigstacklist optimal second case parent child relationships branching node 
twigstack wigstacklist output intermediate path solutions contribute 
shows execution time algorithms shows number 
see presence parent child relationship branch node wigstacklist efficient twigstack 
random data set random data set compare twigstack wigstacklist 
particular generate random xml documents consisting different labels random data set nodes 
issued twig queries shown complex twig structures queries previous experiments 
including execution time number partial solutions shown fig table respectively 
table see queries wigstacklist efficient twigstack 
execution time second execution time second twigstack query execution time second twigstack fraction number elements tag relative number elements tag number intermediate solutions twigstack fraction number elements tag relative number elements tag execution time treebank execution time intermediate solutions twigstack fraction number elements tag relative number elements tag number intermediate solutions twigstack fraction number elements tag relative number elements tag execution time second twigstack execution time intermediate solutions execution time random data execution time treebank data performance comparison algorithms generated dtd data execution time random data queries twigstack path wigstacklist path reduction percentage useful path table number intermediate path produced twigstack wigstacklist random data queries random data interestingly compare table find reduction percentage table smaller table 
fact due difference treebank random data 
tags real world treebank data tags random data 
random data average depth deeper treebank average depth 
random data line getnext algorithm condition usually returns true 
treebank condition line usually returns false 
intermediate paths pruned wigstacklist treebank random data 
fact conclude compared twigstack wigstacklist reduce partial path solutions queries parent child relationship ii reduction percentage relative tag distribution data sets 

related join processing query evaluation 
context semi structured xml databases structural join xml query processing xml queries usually impose certain structural relationships parent child ancestor descendant relationships 
binary zhang 
proposed merge join algorithm start level labelling xml elements 
gives stack binary structural join algorithm 
wu studied problem binary join order selection complex queries cost model takes consideration factors selectivity intermediate results size 
bruno propose holistic twig join algorithm twigstack avoid producing large intermediate result 
twigstack queries query ancestor descendant relationships 
jiang studied problem holistic twig joins partly indexed xml documents 
proposed algorithms indexes efficiently skip elements contribute method reduce size intermediate results 
choi 
proves optimality evaluation twig patterns arbitrarily mixed parent child edges feasible 
proposed algorithm wigstacklist whichis better previous term size intermediate results matching xml twig pattern parent child ancestor descendant edges 

propose enhanced holistic twig pattern matching algorithm wigstacklist 
previous algorithm twigstack approach takes account level information elements consequently results smaller intermediate path solutions query twig patterns ancestor descendant parent child edges 
showed method efficient queries parent child edges 
choi proven algorithm cpu patterns issue improve algorithm modify coding method intermediate path solutions size guaranteed size input data queries 
possible issue involves designing new scheme needs change format input data 

jagadish koudas patel 
wu koudas srivastava primitive efficient xml query pattern matching proceedings icde pages chamberlin fernandez kay robie simeon xml path language xpath working draft august chamberlin fernandez florescu robie simeon xquery xml working draft august bruno koudas srivastava 
holistic twig joins pattern matching columbia university march bruno koudas srivastava 
holistic twig joins pattern matching proceedings acm sigmod pages chen davidson zheng blas efficient xpath processing system proceedings sigmod pages choi wood optimality holistic algorithms twig queries dexa pages hellerstein naughton pfeifer generalized search trees database systems proceedings vldb pages jiang wang lu yu holistic twig joins indexed xml documents proceedings vldb pages jiang lu wang ooi xr tree indexing xml data efficient proceedings icde pages jiang lu wang efficient processing twig queries predicates proceedings sigmod pages li moon indexing querying xml data regular path expressions proceedings vldb pages tatarinov beyer shanmugasundaram shekita zhang storing querying ordered xml relational database system proceedings acm sigmod pages wu patel jagadish structural join order selection xml query optimization icde pages xml benchmark monetdb cwi nl xml university washington xml repository 
available www cs washington edu research zhang naughton dewitt luo lohman supporting containment queries relational database management systems proceedings 
acm sigmod pages 
