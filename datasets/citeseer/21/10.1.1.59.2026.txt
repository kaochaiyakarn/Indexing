linear logic calculus structures dissertation zur des grades dr 
nat 
der universit dresden fakult informatik am 
mai von lutz stra burger am 
april dresden dr alessio guglielmi prof dr 
nat 

steffen lldobler prof dr 
nat 

steffen lldobler dr fran ois lamarche prof dr 
nat 

horst reichel am 
juli alessio guglielmi 
advice guidance thesis written 
interest fascinating field proof theory introduced calculus structures 
benefited fruitful inspiring discussions desperate situations encouraged keep going 
provided tex typesetting derivations 
lldobler accepting supervision thesis providing ideal conditions doing research 
helpful suggestions improving readability 
am obliged fran ois lamarche horst reichel accepting referees 
kai br nnler paola charles stewart tiu fruitful discussion years 
particular am thankful kai br nnler struggling preliminary version making helpful comments 
jim lipton charles stewart valuable suggestions improving 
additionally claus rgensen fun discussing tex macros 
inparticular self explanatory macro page came discussion 
thesis exist support wife 
time continuous source love inspiration 
phd thesis written financial support dfg prozesse und systeme durch und 
iii iv table contents iii table contents list figures vii proof theory declarative programming 
linear logic 

calculus structures 
summary results 
overview 
linear logic sequent calculus formulae sequents 
rules derivations 
cut elimination 
discussion 
linear logic calculus structures structures linear logic 
rules derivations 
equivalence sequent calculus system 
cut elimination 
splitting 
context reduction 
elimination ofthe fragment 
discussion 
multiplicative exponential fragment linear logic sequents structures rules 
permutation rules 
decomposition 
chains cycles derivations 
separation weakening 
cut elimination 
interpolation 
vi table contents discussion 
local system linear logic locality atomicity 
rules cut elimination 
decomposition 
separation contraction 
separation interaction 
lazy separation 
eager separation thinning 
discussion 
mix switch adding rules mix nullary mix 
switch rule 
discussion 
noncommutative extension mell structures rules 
decomposition 
permutation rules 
cycles 
cut elimination 
splitting 
context reduction 
elimination ofthe fragment 
undecidability system nel 
counter machines 
encoding counter machines structures 
completeness ofthe encoding 
facts system bv 
soundness encoding 
discussion 
open problems quantifiers 
general recipe designing rules 
relation decomposition cut elimination 
controlling nondeterminism 
equivalence system bv pomset logic 
decidability mell 
equivalence inthe calculus structures 
bibliography index list figures overview systems discussed inthis thesis 
system ll sequent calculus 
basic equations syntactic congruence ls structures 
system sls 
system ls 
system ls 
system mell sequent calculus 
basic equations syntactic congruence els structures 
system sels 
system els 
possible interferences redex contractum consecutive rules 
examples interferences consecutive rules 
permuting 
connection links links 
cycle 
promotion cycle 
pure cycle 
example marking inside 
cut elimination system sels 
proof interpolation theorem system sels 
system slls 
system lls 
basic equations syntactic congruence els structures 
system sels 
system els 
system ss 
system 
basic equations syntactic congruence nel structures 
system 
system nel 
system sbv 
system bv 
vii viii list figures proof theory declarative programming proof theory area mathematics studies concepts mathematical proof mathematical provability bus 
mainly concerned formal syntax logical formulae syntactic presentations proofs regarded logic syntactic viewpoint gir 
important topic research proof theory relation finite infinite objects 
words proof theory investigates infinite mathematical objects denoted finite syntactic constructions facts concerning infinite structures proved finite proofs 
important question proof theoretical research investigation intuitive proofs kre 
precisely study formal system interest analysis intuitive proofs choice formal systems needs attention 
general questions research ones investigated proof theory proof theory computer science general declarative programming particular 
restricting finitary methods proof theory studies objects computers se finite deal 
declarative programming intention describe user wants achieve machine accomplishing 
concerning relation intuitive proofs formal systems proof theory help design declarative programming languages way computation machine meets intuition user 
high level argumentation explicit put formal grounds proof theoretical concepts proof normalisation proof reduction search proof construction provide theoretical foundations declarative programming paradigms functional programming logic programming respectively 
proof normalisation functional programming 
relation functional programming paradigm proof theory established curry howard isomorphism cf tai identifies formal logical systems studied computational systems studied type theory 

precisely formula corresponds type proof formula term corresponding type 
example natural deduction proofs intuitionistic logic gen pra correspond terms simply typed calculus chu 
bijective mapping proofs terms isomorphism step proof logical system corresponds exactly normalisation step term step functional programming 
normalisation reduction proof computation corresponding functional program 
isomorphism summarised follows formula type correct proof typed program proof normalisation computation correspondence hold propositional logic order logic corresponds dependent types inductive types second order logic corresponds polymorphic types 
historical overview wad 
detailed survey su 
relation classical logic type theory reader referred ste 
importance curry howard isomorphism computer science corroborated fact proofs termination correctness computer science reduce known techniques proof theory 
probably best known example proof strong normalisation polymorphic calculus known system gir basis type systems functional programming languages ml haskell 
application curry howard isomorphism possibility extracting programs proofs 
example coq proof assistant see bc extract certified program constructive proof formal specification 
example nuprl development system cab 
basic idea constructive proof set hypotheses obtain program computes input output holds 
types corresponding formulae types parameters program 
proof search logic programming 
relation logic programming proof theory obvious paradigm logic programming defined terms logic proofs 
logic program conjunction formulae instruction 
input program formula called goal 
computation search proof called proof construction showing goal logical consequence program 
correspondence formula instruction incomplete proof state proof search computation 
proof theory declarative programming example programming language pure prolog horn fragment classical logic 
horn clauses able support concepts modular programming data types common modern programming languages 
reason pure prolog extended ways 
essentially possible approaches 
mix concepts programming languages horn clauses second extend interpreter certain nonlogical primitives provide aspects missing features 
third approach extend underlying logic provide logical basis missing mechanisms 
raises question way logic extended 
solution extremes horn logic weak proof search implemented efficiently full order higher order logic purpose theorem prover serve interpreter 
proof theoretical concept uniform provability provides criterion judging system adequate basis logic programming language 
uniform proof proof goal directed search logical connectives goal formula interpreted search instructions 
approaches lead general immediate efficient extension language disadvantage cluttering semantics obscuring declarative reading programs 
third approach immediately lead efficient solution advantage extended language clear semantics 
notion uniform proof help design logic programming languages capable supporting features data types compromising pure declarative paradigm 
example language prolog mn mil higher order hereditary harrop formulae 
main extension respect horn logic implication quantification allowed body definite clauses quantification predicates possible 
prolog supports modular programming data order programming 
having pure declarative paradigm important having clear semantics plays role security issues consideration 
example concept proof carrying code program carries proof correctness 
proof theoretical foundations paradigms provided cut elimination property fundamental concepts proof theory 
notion cut elimination tightly connected sequent calculus gen proof theoretical formalism presenting logical systems specifying proof rules 
example rule says proof hypotheses proof hypotheses obtain proof hypotheses 
rule exhibits important property rules sequent calculus usually premises rule contain subformulae 
called subformula property 
propositional rule property cut rule 
shape cut rule varies logical system logical system expresses transitivity logical consequence relation allows lemmata inside proof 

example intuitionistic logic cut rule form cut says prove hypotheses hypotheses enriched prove directly 
words auxiliary lemma prove system cut elimination property proof system uses cut rule cut 
words cut elimination says transitivity logical consequence relation way contained rules system 
surprising result shown gentzen gen lk lj systems classical intuitionistic logic respectively 
important consequence cut elimination subformula property proofs formula provable contains subformulae cut elimination consistency system gen 
important note cut elimination fragile property 
means easily breaks system modified 
consequently considerable amount proof theoretical research devoted designing logical systems way cut elimination property 
mentioned construction cut free proof proof cut drastic impact size proof lead hyperexponential blow proof 
close relationship cut elimination procedure proof normalisation 
termination confluence cut elimination ensure termination confluence respectively normalisation 
case proof search cut elimination property ensures proof search progress proof search fails proof 
properties functional logic programming languages depend properties underlying logical systems 
order increase variety applicability languages necessary design new logical systems study proof theoretical properties 
main sources applications proof theory computer science classical intuitionistic logic 
classical logic truth values intuitionistic logic proofs 
classical logic meaning connective explaining truth value compound formula obtained truth values constituents 
usually done means truth tables 
example conjunction true true true 
similarly implication true false true 
intuitionistic truth values possible give truth values semantics example heyting algebras kripke frames 
intuitionistic logic meaning connective describing proof compound formula obtained proofs constituents 
example proof conjunction consists pair proofs similarly proof implication consists mapping proof proof isknown brouwer heyting kolmogorov interpretation bro hey kol 

linear logic despite success classical intuitionistic logic areas computer science certain limitations prevent dealing naturally certain aspects computer science occur instance concurrency theory artificial intelligence 
examples limitations lack resource consciousness inability dealing 
reason linear logic called substructural logics investigated 
linear logic linear logic conceived 
girard refinement intuitionistic logic gir 
main novelties linear logic resource consciousness notion duality represented linear negation denoted resource consciousness means matters hypothesis inside proof 
particular possible conjunctions linear logic 
proving hypotheses mean hypotheses shared proofs proofs access 
written multiplicative conjunction written additive conjunction 
proof rules sided sequent calculus resource consciousness studied artificial intelligence area planning bib hs actions consume create resources 
relation planning small fragment linear logic investigated ghs 
linear logic planning problems kv 
example area planning better illustrating difference disjunctions 
stand having andb having bread having say buy bread bakery similarly interpreted spending buying 
provable money spent item 
need bread items customer choose wants 
examples help get intuition different connectives similar example 
girard gir reader warned examples misleading sense give wrong idea linear logic 
gir 
girard gives refined elaboration relation area artificial intelligence 
similar intuitionistic logic linear logic priori existence truth values truth value semantics phase spaces gir laf 
proof theoretical viewpoint denotational semantics proofs interesting 
means semantics ask question true proof glt 
example semantics bla bla aj ho lam lam ls formulae interpreted person games debates 

player called proponent tries show formula provable second player called opponent tries show proof 
proof winning strategy proponent 
idea goes back lor lor games semantics investigated intuitionistic logic 
bla blass observed linear logic right context games semantics linear negation interpreted naturally exchanging roles players 
means duality linear logic corresponds duality proponent opponent 
linear negation conjunctions obtain disjunctions called additive disjunction called multiplicative disjunction 
example intuitive meaning customer gets bread choice shop assistant 
difference additive conjunction additive disjunction explained viewpoint games semantics 
formula considered proponent choose constituent game debate continued case ofa choice bla bla 
consequently winning strategy consists pair strategies anda winning strategy consists winning strategy indication multiplicative disjunction interpreted playing games parallel proponent win 
interpretation mind intuitively explained formula provable proponent game plays simultaneously copies game opponent 
winning strategy proponent copies game move adversary game 
certainly wins exactly games assumed game finite winner 
possible intuition linear logic comes concurrency seen parallel composition processes 
additive disjunction interpreted choice operator 
context linear negation represents duality input output 
formula interpreted parallel processes sending message receiving 
provability resembles transition occurs process algebras ccs mil 
linear logic modalities called exponentials denoted dual 
formula means arbitrary number times inside proof 
example shown formula express infinite supply 
summarising say linear logic able naturally express certain phenomena occur computer science 
probably significant aspect linear logic concepts resource consciousness duality combined single coherent logical system cut elimination property 
fact linear logic led considerable increase research proof theory application computer science 
hope example conceive computational model calculus linear logic way calculus intuitionistic logic wad wad bw 

linear logic harmful drawback linear logic eyes natural semantics exist various kinds denotational semantics linear logic 
various forms games semantics mentioned coherence spaces gir provide natural interpretation proofs linear logic 
fact linear logic discovered grounds coherence spaces 
addition kinds semantics including banach spaces gir categorical axiomatisations bar see 
difficulty natural semantics probably caused fact switch various viewpoints order grasp intuition various connectives 
example multiplicative conjunction intuitive viewpoint actions resources linear negation intuitive viewpoint games 
particular formal semantics meets intuition resources discussed section realworld applications linear logic 
example linear logic specifying verifying ip protocols sin 
reason somewhat experimental stage semantics underdeveloped understood 
consequences applications linear logic computer science 
problems presentation logic general linear logic particular translate limitations applicability proof theory 
consequently necessary find new presentations linear logic develop new logical systems equivalent linear logic better proof theoretical properties 
positive evidence example forum mil mil hp 
side forum seen just presentation linear logic set provable formulae change side forum seen class logic programming language uniform proofs complete 
particular logic programming language model concept state natural way incorporate simple notions concurrency 
successfully employed specification language 
example chi sequential pipelined operational semantics dlx prototypical risc processor specified shown equivalent 
forum specifying imperative features standard ml assignable variables exceptions proving equivalences code phrases 
argued applications computer science linear logic simple 
particular viewpoint concurrency far fetched 
compared rich syntax process algebras ccs calculus mil syntactic possibilities linear logic quite poor 
exist preliminary results showing relation process algebras logical systems established mil bru 
order idea proof theoretical methods concurrency theory necessary develop new logical systems go linear logic 
conclude section stating research problems consider important implicitly mentioned 
find better syntactic presentations linear logic 
precisely design new logical systems logically equivalent linear logic better proof theoretical properties 
means particular better express 
mutual relationship various connectives linear logic allow new kinds normal forms derivations proofs 
design new logical systems go linear logic sense expressive syntactic possibilities better suited applications computer science losing proof theoretical properties cut elimination 
example new syntactic possibility ability dealing 
noncommutative operations occur places computer science 
fundamental example sequential composition processes plays important role concurrency theory 
similarly context planning artificial intelligence order actions carried importance 
case logic programming commutativity desired goal holds goal hold noncommutative methods needed understand different computational behaviours evaluating vice versa 
idea proof theoretical methods computer science necessary concept accessible proof theory 
means logics noncommutative connectives studied 
logic kind lambek calculus lam introduced lambek studying syntax natural languages contains noncommutative conjunction implications left right 
linear logic proposals noncommutative linear logic yetter cyclic linear logic noncommutative logic negations abr noncommutative logic lincoln lmss 
version noncommutative linear logic forcing multiplicative conjunction noncommutative opens possibilities treating linear negation 
going detail important observation logics purely noncommutative contain multiplicative connective commutative 
various applications computer science require commutative noncommutative operations 
desirable design logics contain commutative noncommutative connectives 
problem known difficult exist different approaches 
extend multiplicative conjunction multiplicative disjunction linear logic self dual noncommutative connective iwill denote 
self duality means dual respect linear negation idea occur retor pomset logic ret taken guglielmi system bv gug 
fact conjecture systems different presentations logic 
second approach having commutative noncommutative connectives inside single logical system pairs multiplicative connectives commutative 
calculus structures linear logic noncommutative 
noncommutative conjunction denoted disjunction denoted respect linear negation observe order case approach having noncommutative connective 
approach noncommutative logic ar rue conservative extension linear logic cyclic linear logic 
approaches naturally proof nets introduced 
girard normalizing proofs linear logic gir 
motivation traditional proof theoretical formalism studying normalisation proofs natural deduction pra suited linear logic 
situation occurs traditional proof theoretical formalism studying logical systems properties sequent calculus gen problems approaches combining commutative noncommutative connectives inside single logical system 
case noncommutative logic inhabited pairs multiplicative connectives sequents longer sets multisets lists formulae case traditional systems order varieties formulae 
order variety set equipped ternary relation satisfying certain properties 
approach single self dual noncommutative connective added situation drastic pomset logic years research presentation sequent calculus bv impossible sequent calculus tiu 
consequence research proof theory confronted problem develop new proof theoretical formalism able new logics defy sequent calculus 
new formalism flexibility sequent calculus allow investigate proof theoretical properties 
particular come methods proving cut elimination doing proof search 
problem calculus structures 
calculus structures calculus structures conceived guglielmi gug presenting system bv formalism presenting logical systems studying properties proofs 
follows tradition hilbert formalism hil hil ha natural deduction gen pra sequent calculus gen gen proof nets gir 
calculus structures seen generalisation sequent calculus explain basic ideas viewpoint sequent calculus 

technical level main difference inference rules operate sequents sets multisets lists formulae structures classes formulae 
structures seen intermediate expressions formulae sequents 
built atomic expressions various syntactic constructions usually done formulae subject laws associativity commutativity usually imposed sequents 
notion structure occurs belnap display logic bel established tradition philosophical substructural logics res 
important difference calculus structures structures kind expression allowed 
built atoms formulae bel res 
consequence binary connectives disappear longer difference logical rules structural rules 
rules apart identity cut structural sense rearrange substructures inside structure 
particular notion main connective loses pivotal role 
second technical difference sequent calculus calculus structures rule premise 
means branching proof 
proofs calculus structures trees instances inference rules sequent calculus chains sequences instances inference rules 
fundamental level differences sequent calculus drastic 
calculus structures draws basic principles deep inference inference rules applied deep inside structures 
top symmetry derivations longer trees superpositions trees upward downward oriented 
yields top symmetry derivations 
proof theoretical viewpoint idea deep inference occur sch systems highly asymmetric 
weak form deep inference available display logic bel top symmetry 
substantial task research investigate precise relation calculus structures display logic 
computer science notion deep rewriting known term rewriting bn 
resemblance calculus structures term rewriting systems vivid inference rules calculus structures inspected 
usually shape premise structures 
structure structure context hole filled structure specifies structure matches arbitrary context context vice versa reasons top 
terminology term rewriting scheme describes rewriting step modulo equational theory structures equivalence classes formulae redex contractum 
resemblance calculus structures help establish bridge term rewriting proof theory sense results area applied 

calculus structures observe trivially possible calculus structures general terminology term rewriting possible translate systems calculus structures term rewriting systems 
main reasons rules calculus structures necessarily context independent second negation needs special attention 
probably quite appealing property calculus structures explicit duality identity cut 
example linear logic rules sequent calculus follows id cut demands proof theoretical insight understand duality rules syntactic viewpoint dual 
syntactic restrictions sequent calculus prevent duality appearing explicitely rules 
calculus structures identity cut linear logic follows units binary connectives respectively 
duality rules explicitely reflected syntax 
logics involutive negation double negation proposition logically equivalent proposition classical linear logic duality observed rules meaning rule dual rule rule rule duality derives duality negation implication respectively underlying logic 
case linear logic linear negation denoted implication denoted elimination property generalised eliminating cut rule possible eliminate rules 
basis modular decomposition cut elimination argument cut rule decomposed rules eliminate rules independently 
seen important feature calculus structures gir 
girard argued lack modularity main technical limitations current proof theory 
calculus structures derives ability presenting logics sequent calculus new freedom designing inference rules 
fact axiom hilbert system structural relation inference rule 
proof theoretical properties systems 
sequent calculus usually lost 
means main challenge developing logical systems lies designing rules carefully possible prove cut elimination equivalent subformula property 
linear logic form studied thesis logical systems including classical logic bt br bg minimal logic br modal logics ss cyclic linear logic gia calculus structures 
summary results summarise results contained thesis recall problems mentioned sections design new logical systems equivalent linear logic better proof theoretical properties 
design new logical systems expressive linear logic respect certain computational phenomena 
develop proof theoretical formalism presenting new systems 
calculus structures outcome research third problem candidate helping progress problems new proof theoretical properties associated 
consequently thesis study logical systems calculus structures explore properties 
systems equivalent linear logic fragments go linear logic 
investigation systems contribute problems helps establish calculus structures class proof theoretical formalism 
order give reader guidance description major results shown important logical systems occurring thesis 
included case reader wishes consult reading 
shows graph nodes labeled names logical systems calculus structures 
annotations parentheses names equivalent sequent systems means sequent system 
arrow system means adding written 
example nel obtained bv adding exponentials 
arrow solid second system extension arrow dotted case 
example ls lls conservative extensions els els 
main results contained thesis linear logic calculus structures 
system ls calculus structures equivalent traditional system ll linear logic sequent calculus 
system ls trivial translation ll naturally employs new symmetry calculus structures exhibits mutual 
summary results als mall exponentials ls lls ll additives mll exponentials additives els mell mll mix mix exponentials els mell mix mix bv exponentials nel overview logical systems discussed thesis relationship connectives linear logic better sequent calculus system 
surprising facts system ls global promotion rule ll called global sequent applied replaced local version 
additive conjunction rule see section decomposed rules multiplicative rule deals additive conjunction additive disjunction time rule sense context shared rule dealing additive context treatment duplication formulae 
means distinction multiplicative additive context treatment intrinsically connected sequent calculus linear logic 
system ls cut elimination result syntactic proof independent sequent calculus new method called splitting gug 
proof shows calculus structures proof theoretical formalism syntactic methods studying cut elimination 
local system linear logic system lls 
system local sense rule requires global knowledge certain 
substructure 
means amount computational resources time space needed applying rules bounded 
achieved having kinds kinds rules system rule operates atoms generic structures involved rule rearranges substructures structure duplicating deleting comparing contents substructure 
means particular rules generic contraction rule requires duplicate formula unbounded size going derivation 
fact shown br sequent calculus impossible restrict contraction 
decomposition 
linear logic fragments show decomposition theorems 
general decomposition property able separate derivation proof phases consists applications rules coming mutually disjoint fragments logical system 
principle decomposition new property proof theory 
example natural deduction derivation phase elimination phase corresponds proof normal form 
sequent calculus example decomposition result herbrand theorem allows separation rules quantifiers rules connectives 
apart simple consequences normalisation cut elimination decomposition receive attention 
calculus structures decomposition reaches unprecedented level detail 
example case multiplicative exponential linear logic mell possible separate disjoint subsystems 
decomposition theorems considered fundamental results thesis reasons embody new kind normal form proofs derivations 
furthermore new top symmetry calculus restricted derivations nonlogical axioms case cut elimination hold arbitrary derivations proper hypotheses 
stand cut elimination 
precisely cut elimination proved decomposition 
case hyperexponential blow proof caused obtaining decomposition certain normal form proof cut elimination cut 
show calculus structures powerful proof theoretical formalisms allows state properties logical systems observable formalisms 

overview contents general proof theoretical interest possible decomposition theorems lies denotational semantics 
decomposition proofs derivations subderivations carried smaller subsystems possible study semantics subsystems separately 
results put 
decomposition theorems help search new semantics proofs 

iwill logical system called nel mell guglielmi self dual noncommutative connective seq 
precisely conservative extension guglielmi system bv gug multiplicative exponential linear logic mix nullary mix system els 
system nel conservative extension bv itfollows immediately result tiu tiu sequent system nel 
reason system nel calculus structures 
system nel iwill show cut elimination combining techniques splitting decomposition 
proving cut elimination nel difficult equivalent system sequent calculus 
consequence completely new techniques developed prove cut elimination 
fact techniques decomposition splitting originally invented problem considered results independent interest 
furthermore iwill show nel turing complete showing computation simulated nel 
result gain importance case mell decidable open problem border undecidability crossed guglielmi seq 
seq corresponds quite naturally sequential composition processes system nel find applications concurrency theory bru shows 
going reader aware fact proof theory tends suffer long technical proofs short concise theorems 
gentzen gen gen example 
unfortunately thesis exception 
definitions simple theorems stated concise form statements theorems easy understand proofs quite long tedious complex syntactic constructions 
quite paradoxical side syntax playground proof theory side syntax greatest obstacle proof theoretical research 
overview contents chapter introduce known sequent calculus system ll linear logic show basic ideas cut elimination argument sequent calculus 
reader familiar linear logic invited skip chapter 
introduce calculus structures chapter system ls linear logic 
show equivalence sequent calculus system ll cut elimination result 
chapter devoted multiplicative exponential fragment linear logic 
study permutation rules show decomposition results proof 
cut elimination rule permutation 
consequence obtain interpolation theorem multiplicative exponential linear logic 
referring systems mell els investigated chapter 
chapter system lls logic 
particular iwill explain contraction reduced atomic version 
furthermore show decomposition results lls 
reader locality just read sections section 
hand reader interested locality skip chapter entirely 
chapter move focus left hand side righthand side 
precisely study systems els show rules mix nullary mix incorporated calculus structures 
system nel investigated chapter 
show conservative extension els bv extend decomposition theorems chapter system nel iwill cut elimination proof nel splitting 
undecidability nel shown encoding counter machines 
results chapter partially published gs str results chapters partially published str results chapter gs gs str str 
linear logic sequent calculus sequent calculus introduced gentzen gen gen tool reason proofs mathematical objects manipulate 
proof theorists main logical systems study properties 
chapter define linear logic introduced 
girard gir formalism sequent calculus 
exploiting de morgan dualities iwill restrict sided sequent calculus sch 
reader familiar linear logic invited skip chapter 
formulae sequents name suggests sequent calculus rules operate sequents 
sequents general case syntactic expressions built formulae turn syntactic expressions built atoms means connectives logic studied 
thesis discuss propositional logics atoms smallest syntactic entities considered terms relation symbols atoms built 
study linear logic atoms formulae defined follows 
definition countably atoms denoted 
set atoms denoted bijective function suchthat atoms called constants denoted called bottom zero respectively 
function defined follows formulae linear logic formulae atoms means binary connectives called par times plus 
linear logic respectively modalities 
called course respectively 
linear negation extension function formulae de morgan equations linear implication defined iwill say formula ll formula ambiguity possible 
logics discussed define different notions formula 
say ll formula order avoid ambiguities 
atoms itfollows immediately definition induction formulae case analysis formula definition connectives constants respectively called multiplicatives 
constants respectively called additives 
modalities called exponentials gir 
definition sequent expression kind ah comma formulae ah stands multiset union 
multisets formulae denoted 
observe laws associativity commutativity implicitly definition sequents 
rules derivations general notion rule sequent calculus independent logic specified 
reason define notions rules derivations general inference rules linear logic 
definition inference rule sequent calculus scheme shape called premises rule 
inference rule called axiom premise rule shape formal system finite set rules 

rules derivations definition derivation tree nodes sequents finite number possibly zero instances inference rules applied 
sequents leaves called premises root 
derivation premises proof denoted 
sequent provable proof 
discussion premises derivation importance 
case derivation sequent calculus depicted way sequents premises 
proof depicted follows inspect rules linear logic 
definition rules id called identity cut respectively 
cut rules identity cut form called identity group 
importance sequent calculus systems 
identity rule expresses fact conclude necessary observing proofs allows close branch tree 
cut rule expresses transitivity logical consequence relation necessary lemmata inside proof 
opposed identity group stands called logical group connective modality constant logical rules 
linear logic group subdivided multiplicative additive exponential groups 
definition multiplicative group contains rules called times par bottom respectively 
additive group contains rules 
linear logic id cut bn bn system ll sequent calculus called plus left plus right respectively 
note rule zero 
exponential group contains rules bn bn called weakening contraction dereliction respectively 
important observation logical rules definition subformula property thatis rule subformulae formulae rule 
usually sequent calculus system third group rules called structural rules 
gen rules usually contraction weakening exchange 
case hand exchange rule built definition sequents rules contraction weakening linear logic available restricted way form rules exponentials 
definition system ll linear logic sequent calculus shown 
example examples proofs system ll id id id id id 
rules derivations identity rule replaced atomic version id id affecting provability 
shown inductive argument replacing general instance identity rule derivation containing atomic instances identity rules 
example replace id id id cut rule reduction impossible 
example instance cut cut replaced derivation atomic cuts atomic cut branches derivation tree 
try example cut cut way bring back 
draw attention reader known fact regarding connectives linear logic 
define new pair connectives rules connectives show connectives equivalent 
exponentials define new modalities rules possibility show relation 

linear logic cut elimination system ll rules cut enjoy subformula property 
means derivation cut rule subformula property formula occurs inside derivation subformula formula occurring 
important consequence subformula property number possibilities rule applied sequent finite 
particular importance proof search step finite number possibilities continue search 
cut elimination theorem says provable sequent proved cut rule 
surprising result shown gentzen gen system lk lj intuitionistic logic respectively 
fact result main purpose introducing sequent calculus 
theorem cut elimination proof sequent system ll transformed proof system ll contain cut rule sequent 
gir iwill show proof thesis long technical 
presentation proof appendix lmss bra 
idea cuts occurring proof permuted reach identity axioms follows id cut replaced order permute instance cut matched rule system 
types cases type called commutative case occurs principal formula rules cut cut formula 
situation follows cut replaced cut 
cut elimination cases rules similar 
happen cut duplicated cut replaced cut cut blow proof exponentially 
second type case called key case occurs cut formulas coincide principal formulae rules cut 
situation replaced cut cut cut observe number cuts increased rank size cut formula decreased 
induction show termination procedure 
case bn bn cut bn 
linear logic replaced cut bn bn cut bn bn bn bn bn bn observe case rank cut decrease 
reason case called pseudo key case bra 
order ensure termination fact number contractions cut decreased 
mentioned removing cuts proof increase size 
discussion chapter defined system linear logic sequent calculus basic idea cut elimination procedure 
details reader referred tothe extensive literature subject gir gir bra tro 
linear logic calculus structures similar sequent calculus calculus structures introduced gug formalism describing logical systems studying properties proofs 
basic principles described section 
purpose chapter introduce calculus structures technical level 
sections show linear logic calculus structures 
section show relation sequent system discussed previous chapter 
section show prove cut elimination calculus structures sequent calculus semantics 
section contains discussion interesting features new system linear logic major differences sequent system 
structures linear logic calculus structures rules operate structures syntactic expressions intermediate formulae sequents 
precisely structures seen equivalence classes formulae equivalence relation laws associativity commutativity usually imposed sequents 
section define structures linear logic 
chapters discuss logics shall define new structures 
structures built atoms way formulae defined previous chapter 
bar denote negation 
infix notation binary connectives done formulae employ comma done sequents 
example structure rh corresponds sequent rh linear logic formulae essentially connected pars 
connectives 
order distinguish connectives different pairs parentheses 
definition countable set equipped bijective function suchthat called atoms denoted 
linear logic calculus structures associativity commutativity exponentials units negation basic equations syntactic congruence ls structures 
selected elements called constants denoted called bottom zero respectively 
function defined follows set expressions generated syntax stands atom 
set isdefined smallest congruence relation induced equations shown 
ls structure denoted 
equivalence class expressions 
ls structure structure called negation 
formally precise set equations shown contain equation left hand side stands syntactic negation right hand side involution function defined atoms 
words atoms negation isdefined involution 
set equations shown minimal 
goal produce minimal set case minimality contribute clarity 
notation order denote structure pick expression equivalence class 
associativity superfluous parentheses omitted 
example written 
notation 
structures linear logic closer notation sequents notation formulae 
notation consideration respectively denote units 
reasons chose girard notation units standard want life reader difficult second reasons personal taste prefer denote unit separate symbols 
equational theory fact countable expressions denoting structure 
problematic consider structures certain negation pushed atoms superfluous units parentheses omitted 
example expressions 
expressions previous 
observe commutativity necessarily unique finite number structure 
definition rh called par structure rh called times structure rh called plus structure rh called structure called course structure called structure 
definition define ls contexts structures hole 
formally generated idea apply term structure context ambiguity possible say ls structure ls context distinguish types structures contexts defined chapters 
de morgan laws need include context means plugged hole context positive 
contexts denoted 
denotes structure obtained replacing hole context structure structure substructure context better readability iwill omit context braces ambiguity possible write 
example andr 
definition function defines obvious translation ll formulae ls structures 
linear logic calculus structures domain extended sequents rules derivations ah ah section define general notions rules derivations proofs 
definitions independent linear logic logical systems calculus structures discussed thesis 
show rules linear logic 
definition calculus structures inference rule scheme name rule premise 
rule called axiom premise empty rule shape shape specifies step rewriting inside generic context 
general forbidden put constraints context 
particular possible rules context 
correspond case sequent calculus 
mentioned trivially possible calculus structures general terminology term rewriting 
point explain reasons detail 
logical systems calculus structures rules independent context 
example imagine quantifier rule allowed free context translate sequent calculus rules directly calculus structures yield rules generic context 
example cases difficult accommodate general term rewriting system 

rules derivations systems calculus structures contain rules application restricted atoms 
example atomic contraction rule ac allows duplicate atoms generic contraction rule allows duplicate arbitrary structures 
distinction term rewriting system need different kind variables 
issue probably notion negation 
observation negation simply encoded unary function symbol rule scheme rewriting allowed inside negation 
condition difficult check term rewriting system 
hand systems calculus structures particular systems discussed thesis negation de morgan laws pushed atoms 
imagine positive negative atoms 
difficult translate generic identity rule true id stands negation possible translate systems calculus structures term rewriting systems 
definition formal system set inference rules 
definition derivation formal system finite chain instances inference consist just 
topmost structure derivation called premise derivation bottommost structure called 
premise rules indicated 
linear logic calculus structures proof structures derivation topmost inference rule axiom 
denoted length derivation number instances inference rules 
denoted length 
length proof denoted length defined way 
definition derivable system instance definition systems strongly equivalent derivation derivation 
definition admissible system proof proof definition systems weakly equivalent proof proof 
show inference rules linear logic calculus structures 
proof equivalence rules sequent calculus previous chapter follow insection 
start recall sequent calculus rules divided groups identity rules logical rules structural rules 
longer difference formulae sequents difference structural logical rules 
groups rules calculus structures called interaction rules correspond identity rules sequent calculus structural rules correspond structural logical rules sequent calculus 
interaction rules 
definition rules called interaction cut respectively 
rules correspond identity cut rule sequent calculus technical details correspondence shown theorem page 
calculus structures duality rules obvious sequent calculus 
furthermore calculus structures duality rules defined formally way rule dual rule contrapositive obtained exchanging negating premise 

rules derivations definition structural rule called switch 
observe switch rule self dual premise negated exchanged obtain instance switch 
seen easily follows context structures similarly get structures switch rule stands implication whichis known weak distributivity cs 
gug switch rule conceived enforcing cut elimination certain combinatorial computational model entirely independent weakly distributive categories 
interaction rules switch rule remarkable property observed gug rule dual rule derivable 
proposition rules dual 
derivable 
show proof introduce notational conventions solely purpose ease checking proofs reader insert pseudo rule help checking correctness derivation quite different expressions structure 
light grey background mark place redex rewriting step derivation read bottom 
notion defined precisely section permutation rules studied 
derivations top symmetric objects read top bottom reader advised read bottom case wants verify 

linear logic calculus structures proof proposition replaced derivation definition structural rules 
instance called additive thinning contraction respectively 
form additive group 
rules rules additives sequent calculus see chapter different shape equivalent 
shown detail section 
definition exponential group formed structural rules called promotion weakening absorption respectively 
rules capture exactly behaviour rules exponentials sequent calculus 
weakening absorption rules surprising 
surprising fact promotion rule longer global need check unbounded number formulae context 
exact correspondence shown section 
sequent system linear logic multiplicative group member switch rule 

rules derivations rule calculus structures give dual rule give derivation dual derivation 
example dual definition rules ai ai called atomic interaction atomic cut atomic respectively 
rules ai ai obviously instances rules 
known systems sequent calculus identity rule reduced atomic version 
calculus structures 
furthermore duality cut rule impossible sequent calculus see 
proposition rule derivable system ai 
dually rule derivable ai 
proof application equivalent derivation contains ai 
induction iwill construct atom instance instance ai 
apply induction hypothesis similar previous case 
wherep apply induction hypothesis 
linear logic calculus structures wherep similar previous case 
wherep apply induction hypothesis wherep similar previous case 
second statement dual 
definition system ai ai shown called symmetric self dual linear logic calculus structures sls 
ai called fragment ai called fragment 
ai ai called multiplicative additive fragment 
similarly system ai ai called multiplicative exponential fragment sels 
ai ai called multiplicative fragment ss 
system sels investigated detail chapter 
observe proposition rules reduce general interaction general cut atomic versions rules 
motivates definition 
definition core system calculus structures set structural rules needed reduce interaction cut atomic form 
structural rules called noncore 
system sls set denoted 
far able write derivations 
order proofs need axiom 
definition rule called language sequent calculus simply says provable 
put rule fragment system sls break top symmetry derivations observe proofs 

rules derivations ai system sls ai interaction multiplicatives additives exponentials definition system ai shown obtained fragment system sls axiom called linear logic calculus structures ls 
restriction multiplicative additive fragment ai called system als restriction multiplicative exponential fragment ai called system els restriction multiplicative fragment ai called system proof system ls occurs exactly topmost rule proof 
theorem says general cut rule powerful fragment system sls 
theorem systems sls ls strongly equivalent 
proof immediate consequence propositions 

linear logic calculus structures ai system ls equivalence sequent calculus system section show exact correspondence sequent calculus system ll linear logic shown page systems calculus structures shown previous section 
precisely proof system sls translation system ll cut free proof ll translation system ls 
consequence obtain easy proof cut elimination system ls equivalently system sls 
important note translation definition equations shown logical equivalences linear logic 
formulae ifa logically equivalent provable 
possible invert function function observe formula depends chosen representation structure mapping map structures uniquely formulae 
problematic mapping theorem proof statement concerning formula independent chosen representation logically equivalent formulae 
theorem structure provable system sls provable ll cut 
proof suppose proof system sls 
length build proof ll 

equivalence calculus system base case proof inductive case suppose words sls rule applied 
ll proofs show provable ll rule ll rules ai ai rule rules id id rules rules sls theorem id id id id id id id id 
linear logic calculus structures rules rules rules id id id id means context theorem ll proof ll 
hypothesis ll 
cut rule cut get proof theorem sequent provable ll cut thenthe structure provable system sls 
sequent cut free provable ll thenthe structure provable system ls 
proof proof ll 
induction construct system sls system ls cut free 
id formula proof obtained sition 
equivalence calculus system cut rule applied induction hypothesis derivations proof obtained proposition sls sls sls sls rule applied proof exists induction hypothesis 
derivations rule applied induction hy sls sls sls sls proof rule applied proof exists induction hypothesis 

linear logic calculus structures derivations rule applied induction hy sls sls sls sls proof rule applied proof exists induction hypothesis 
case sls similar 
proof ai rule proof exists induction hypothesis 
sls 
cut elimination rule applied proof sls exists induction hypothesis 
rule applied proof exists induction hypothesis 
bn bn hypothesis derivation cut elimination sls rule applied exists induction sls bn sls bn bn proof bn bn reasons doing cut elimination sequent calculus eliminate rule violates subformula property 
calculus structures longer distinguish sequents formulae longer clear subformula property sequent calculus important consequence subformula property rule cut sequent finite number possibilities apply rule 
property calculus 
linear logic calculus structures structures 
calculus structures subformula property formulated follows rule subformula property premise built substructures finite number possibilities apply rule nontrivial way 
property holds rules system sls 
rules violate property rules ai 
sufficient eliminate rules order get system subformula property essentially cut elimination result 
get 
show fragment system sls admissible 
section contains different proofs fact 
uses cut elimination proof ll sequent calculus theorem cut elimination system ls equivalent subsystem system sls containing ls 
proof proof sls transform proof ll theorem apply cut elimination procedure sequent calculus theorem 
cut free proof ll transformed proof system ls theorem 
corollary rule admissible system ls 
proof immediate consequence theorems 
immediate consequence cut elimination theorem corollary explicit relation derivations proofs 
particular shows system sls seen system derivations ls system proofs 
corollary structures 
sls ls proof direction perform transformations sls sls sls ls step replace structure occurring inside transformed proof adding instance 
apply tion cut elimination theorem obtain proof system ls 
direction ls 
derivation ls 
cut elimination construct derivation ls apply proposition get derivation sls corollary immediately get correspondence derivability system sls linear implication 
formulae wehave sls second proof cut elimination carried inside calculus structures completely independent sequent calculus methods available sequent calculus 
go details proof explain challenge prove cut elimination calculus structures methods sequent calculus applied 
cut elimination process sequent calculus see section know step commutative case key case key case know principle main connective decompose cut formula reduce rank cut 
main connective calculus structures rules applied deep inside structures easily permute cut 
instance derivation rule modifies substructure know deep inside rule applied 
furthermore reason assume rule exact dual inside structure hand great simplification possible calculus structures reduction cut atomic form 
remaining difficulty understanding happens going proof atoms produced atomic cut 
atoms atomic cut produced inside structure belong distinct branches sequent calculus 
means complex interactions context possible 
consequence techniques showing cut elimination inside calculus structures quite different traditional ones 

linear logic calculus structures proof theorem uses techniques splitting context reduction introduced gug 
proof long technical uses concepts introduced chapters reader invited skip reading jump immediately section page 
furthermore thesis contains chapter cut elimination proof splitting simpler 
reader interested splitting strongly advised read splitting proof chapter mastered proof section 
reason postponed introductory notes splitting context reduction section explain basic ideas informal level 
splitting section prove splitting lemma system ls follows lemma splitting structures atom 
provable ls ls ls provable ls thenthere structures pr pt suchthat pr pt ls ls pr ls pt provable ls structures pr prn pt ptn suchthat pr pt prn ptn ls pri ls ls pti 
provable ls thenthere kn structures pr pr pr pr prn suchthat pr pr prn ls 
ls pri 
cut elimination provable ls thenthere derivation statement lemma structure consists arbitrary number including zero copies structure 
words stand structures ls 
convention remainder chapter 
proof splitting lemma technical 
studying reader developed familiarity calculus structures 
particular reader mastered sections 
place thesis concepts introduce argue putting proof appendix 
done reasons conceptually proof belongs chapter reasons personal taste idea putting proofs appendix 
mentioned section biggest difficulty proving splitting lemma finding right induction measure 
presence rules difficult system ls 
order simplify situation rules introduced cd cb cr derivations show rules cd cb ls 
rule cd simplify case analysis applied freely rule 
presence rule cb induction measure simplified cb permuted shown lemma 
technical difficulty determining proper induction measure caused presence constants 
reason rules cd introduced identical cd respectively difference case cd 
rules special cases cd respectively derivable ls 
lemma show completeness lost replace general rules 
necessary restrict applicability rule 

linear logic calculus structures cd system ls ai cb cr derivable ls special cases 
replace lost regained adding axiom derivable ls ai definition system ai cd cb cr shown called system ls obvious system ls equivalent ls rules closer sequent system ll linear logic 
precise relation system ls system ls lemma 
lemma structures 
derivation proof ls ls thenthere derivation thenthere ls ls proof mentioned rules cd cb cr derivable ls 

cut elimination proof ls transformed proof ls steps 
replace instances rules derivations cd cr cb second step instances permuted disappear instances 
case analysis cases trivial cases impossible 
case occurs instance duplicated instance cd cb 
ii contractum appears actively redex rule case proof lemma 
instance 
iii contractum appears redex 
instance ai case remove subderivation replace occurring premise disappears unit context 
remains top proof rule 
third step eliminate instances cd instances cd form cd consider topmost instance replace substructure 
rule modifying trivial eliminated 
repeat instance cd instance cd 
instances instances eliminated 
consider topmost instance permuted proof disappears 
follow 
situation 
linear logic calculus structures occur case replaced remains eliminate rule 
introduce super rule sc derivations ls ls observe instance sc 
show rule sc admissible ls done permuting instances sc top disappear eventually 
precisely instance sc appears top proof situation sc 
equal 
loss generality assume 
derivation ls consider sc ls nontrivial 
cases consider redex inside active structure contractum sc 
subcases redex inside 
derivation sc yields ls ii redex inside 

sc iii redex overlaps 
wehave sc yields sc 
cut elimination contractum sc inside active structure theredex 
subcases cd contractum sc occurs inside substructure duplicated instance cd 
replaced ii cb 
similar 
iii iv 
similar iii 
cd sc sc sc cd sc yields redex contractum sc overlap 
possible case sc yields sc similar case iii 
lemma says rule cb separated rules system ls property contributes considerably simplifying induction measure proof splitting lemma suffice find induction measure system ls cb 
lemma proof ls ls cb cb 
linear logic calculus structures structure proof instance rule cb permuted 
see consider cb ls cb cb nontrivial 
case analysis cases consider redex cb inside active structure contractum 
possible cd replaced cb cd cd cb contractum inside redex cb 
cb replaced cb redex cb contractum overlap 
impossible 
instances cb permuted derivation desired shape 
show splitting lemma system ls cb lemma splitting lemma system ls lemma easily follow 
show technical proof splitting explain induction measure 
consider finite multisets natural numbers equivalently elements free commutative monoid generated multisets 
define sum sum free commutative monoid distributes union multisets ando 
cut elimination set multisets natural numbers define binary relation follows exists injective transitivity obvious 
consider finite multisets irreflexive 
order 
founded follows immediately 
write define size structure multiset natural numbers equivalently element free commutative monoid generated 
normal form see particular superfluous units omitted 
size ls structure denoted size defined follows size atom including size size size size size size size size size size size size size size size size example 
size observation application rule ls cb 
size size rule cd introduced restriction put 
observation structures context 
size size size immediately induction 
observation structures 
proper substructure nontrivial context size size observations ensure proof lemma follow induction hypothesis applied case applied 
typical examples 
size size size size 
linear logic calculus structures size size ls cb full induction measure proof lemma size proofs defined asfollows definition size proof pair proofs size size length size size size size size size length length iwill heavy lemmata explicitly mentioning time 
lemma rn tm structures 
derivations tm rn rn rn tm rn tm tm rn rn rn tm cd rn tm proof derivation consists instances 
lemma rn structures provable ls 
rn provable ls 
proof immediate definitions 
lemma rn tm structures 
ri tj provable ls rn tm provable ls 
proof immediate consequence previous lemmata 

cut elimination lemma structures 
provable ls 
proof ai observe lemmata hold system ls cb 
follows splitting lemma system ls cb 
proof splitting system nelm chapter 
presence cases complex 
lemma structures atom 
provable ls cb ls cb ls cb provable ls cb thenthere structures pr pt pr pt ls cb ls cb pr ls cb pt provable ls cb thenthere structures pr prn pt ptn suchthat 
pr pt prn ptn ls cb pri ls cb ls cb pti provable ls cb thenthere kn structures pr pr pr pr prn suchthat pr pr prn ls cb 
ls cb pri 
linear logic calculus structures provable ls cb provable ls cb structures pr prn suchthat 
pr prk prk prn ls cb ls cb pri provable ls thenthere derivation ls cb proof statements proved simultaneously induction size proof defined 
follows case analysis conceptually similar cut elimination proof sequent calculus 
consider case statement trivially true 
observe statement trivially true 
consider bottommost rule instance proof ls cb loss generality assume application nontrivial 
splitting proof chapter distinguish conceptually different cases redex inside 
substructure inside redex application decompose structure 
application decomposes substructure 
case compared proof sequent calculus see section case key case 
case counterpart sequent calculus possibility deep inference 
redex inside thenthere subcases show similar compare proof lemma page 
redex inside thenthe proof shape ls cb 
cut elimination applying induction hypothesis get get ls cb ls cb ls cb substructure inside redex application decompose structure 
subcases andp ls cb applying induction hypothesis suchthat ls cb ls cb ls cb 
induction hypothesis get ri ls cb ri ls cb ls cb ti ls cb ti ls cb ls cb 
linear logic calculus structures obtain proof ls cb cd ls cb similarly get proof 
ii cd ls cb cd applying induction hypothesis weget ls cb ls cb applying induction hypothesis yields proofs ls cb ls cb ls cb ls cb obtain ls cb cd similar proof 
iii get ls cb ls cb ls cb 
cut elimination application decomposes substructure 
crucial 
subcase cd ls cb cd applying induction hypothesis weget ls cb ls cb applying induction hypothesis yields proofs ls cb ls cb obtain ls cb cd similar proof 
ls cb ls cb consider case statement trivially true 
pr 
case trivially true pr pt 
consider bottommost rule instance proof ls cb loss generality assume application nontrivial 
case distinguish cases redex inside case 
substructure inside redex application decompose structure 
case similar differences 
ls cb 
linear logic calculus structures applying induction hypothesis suchthat ls cb ls cb ls cb 
induction hypothesis get structures pri pti suchthat pri pti qi ls cb ls cb pri ls cb pti pr pr prn pt pt ptn build pr pt pr pt prn ptn qi ls cb ls cb cd ls cb ls cb pr prn cd pr prn pr ls cb pt ptn cd pt ptn pt 
cut elimination ii cd ls cb cd applying induction hypothesis weget ls cb ls cb applying induction hypothesis yields structures pr pr pt suchthat pr pt ls cb pr pt ls cb ls cb pr ls cb pr pr pr pr pt pt pt pr pt pr pt pr pt ls cb cd ls cb pr pr cd pr pr pr iii ls cb pr 
pr pt ls cb ls cb pt ls cb pt ls cb pt pt cd pt pt pt ai 
linear logic calculus structures exchange pr pt ift axiom proving 
case 
application decomposes substructure 
possible case ls cb applying induction hypothesis pr pt pr pt ls cb case get ls cb pr ls cb pr pr ls cb pr pr ls cb pt apply induction hypothesis yields similarly get proof pt 
ls cb pr ls cb ls cb pr pr pr 
cut elimination consider case statement trivially true 
letn pt situation similar 
consider bottommost rule instance proof ls cb loss generality assume application nontrivial 
case distinguish cases redex inside case 
substructure redex application decompose structure 
case similar differences 
ls cb applying induction hypothesis suchthat ls cb ls cb ls cb 
induction hypothesis get mi pri primi pti pri pti primi qi ls cb ls cb ls cb 
linear logic calculus structures mi 
mh 
pr pt pr pt qi ls cb pth ls cb cd ls cb ii cd ls cb cd applying induction hypothesis weget ls cb ls cb applying induction hypothesis yields structures pr pt pth suchthat pr pt pth ls cb pri ls cb ls cb pti rh th suchthat rh th ls cb rj ls cb ls cb tj 
cut elimination pr pt pth rh th iii ls cb cd ls cb applying induction hypothesis weget ls cb get cd ls cb application decomposes substructure 
case crucial subcase andt andp ls cb applying induction hypothesis suchthat ls cb 
linear logic calculus structures ls cb ls cb 
applying induction hypothesis yields mi pri primi pti pri pti primi ls cb ls cb ls cb mi ri rim ti tim suchthat ri ti rim tim ls cb ls cb rik ls cb tik 
mhm pr pt pr pt rh pth th rhm thm cd pr pt pr pt pth rh th rhm thm ls cb cd ls cb ls cb consider bottommost rule instance proof loss generality assume application nontrivial 
case distinguish cases 
cut elimination redex inside case 
substructure inside redex application decompose structure 
application decomposes substructure possible 
subcase ls cb applying induction hypothesis andl ln pr pr pr pr prn pr pr prn ls cb ls cb pri 
li 
pr pr prn pr pr prn cd pr pr prn ls cb ls cb consider bottommost rule instance proof loss generality assume application nontrivial 
case distinguish cases redex inside case 
substructure inside redex application decompose structure case similar 
application decomposes substructure subcases 
linear logic calculus structures provable ls cb 
ii cr ls cb ls cb cr andk 
iii ls cb applying induction hypothesis andl ln pr pr pr pr prn pr pr prn ls cb ls cb pri 
pri pri 
get pr pr prn pr pr prn cd pr pr prn ls cb ls cb consider bottommost rule instance proof loss generality assume application nontrivial 
case distinguish cases 
cut elimination redex inside case 
atom inside redex application decompose atom similar 
application decomposes atom ais application rule ai case ai ls cb ai applying induction hypothesis weget get ls cb cd ls cb splitting ls cb obtain proof splitting statement system ls proof lemma iwill show case 
similar 
ls 
lemma proof ls lemma decomposed ls cb cb 
linear logic calculus structures structure theredex cb structure forsome structures suchthat cb cb cb apply splitting ls cb lemma 
yields structures pr pt suchthat pr pt ls cb derivations get pr pt ls cb cb applying lemma get pr pt ls ls cb pr ls cb pr cb pr ls pr ls pt ls cb pt ls cb pt cb pt splitting lemma proved directly system ls introducing ls presentation detour system ls reasons system ls induction measure complicated defined size size 
behaviour units size structure size fora 
causes problems applicability induction hypothesis 
case analysis tedious ls cb proof lemma 
able find right splitting statement structures system ls done ls cb case lemma 
statement needed elimination rule see section 
splitting ls cb employed 
context reduction idea context reduction reduce problem concerns arbitrary deep context problem concerns shallow context 
case cut elimination example able apply splitting 
due presence additives exponentials situation simple gug 

cut elimination definition finite possibly empty set structures 
set woo structures smallest set ith course ne 
lemma shows crucial property woo structures 
lemma set structures set woo structures proof ls proof ls proof immediate definition fact 
lemma context reduction structure context hole inside structure 
provable ls thenthere structures pr prn suchthat pri provable ls structure wehave ls woo structure set pr prn proof proof carried induction context 
thenthe lemma trivially true pr 
suchthat proper par structure 

lemma trivially true 
ii context structure 
apply splitting lemma proof ls ls applying induction hypothesis get prn ls pri ls 
linear logic calculus structures woo structure pr prn build ls ls iii context structure 
apply splitting lemma proof ps pt ls ls ps ls pt applying induction hypothesis get prn ls pri ls woo structure pr prn build ls ls ps pt ps pt ls iv structure 
apply splitting lemma proof structures ps psh pt pth suchthat ps pt psh pth sj ls psj ls tj ls 
cut elimination 
induction hypothesis sj get nj ls nj wj ls psj wj woo structure prj wh nh build wh ls ps psh th ls pt ps pth psh pt ps pth psh ai pt ps pth psh ps pt psh pth ls context splitting lemma lemma proof andk kh structures ps ps ps ps psh suchthat ps ps psh ls sj ls psj 
induction hypothesis sj get get nj ls nj wj ls psj 

linear logic calculus structures wj woo structure prj wh nh build wh ls ps ps psh ps ps psh ai ps ps psh ps ps psh ls context 
case ii 
context 
case iii 

case iv 
context case 
elimination fragment section show series lemmata easy consequences splitting say rules system sls admissible applied shallow context 
show context reduction extend lemmata context 
result get modular proof cut elimination 
lemma structure atom 
provable ls provable ls 
proof apply splitting lemma proof ls get pa pan suchthat pa pan ls ls pai ls 
cut elimination 
splitting ls pai build applying lemmata ls ls ls pai plugging derivation yields proof lemma structures 
provable ls provable ls 
proof apply splitting lemma proof ls get pv suchthat rui ls ls tvi ls 
splitting rui tvi weget pri pui rui ls ls ri ls pri ti ls ui ls pui 
linear logic calculus structures build ti ls ri ui ls pri pui pri pui pri pui pri pui pri pui pri pui rui ls build applying lemma lemma ls ls lemma structures 
provable ls provable ls 
proof proofs ai ls lemma structures 
provable ls provable ls 
proof apply splitting lemma proof ls get andk kn structures pr pr pr pr prn suchthat pr pr prn ls 
cut elimination 
pri get ls pri ls pri pri pri pri pri pri ls pri pr pr prn pr pr prn ls ls pr pr prn pr pr prn ls lemma structures 
provable ls provable ls 
statement purpose lemma quite similar previous lemmata proof little different case system ls splitting statement structures case missing lemma 
system ls cb see case lemma 
employed 
lemma andv vh structures 
vh provable ls cb vh provable ls cb 

linear logic calculus structures proof applying splitting ls cb lemma proof provable ls cb andk structures pr prn pr prk prk prn ls cb obtain ls cb ls cb vh vh ls cb prj vh prj vh cr prj vh ls cb ls cb pri vh ls cb pri vh pri vh pri vh build proof stands vh ls cb pr prk prk prn cd pr prk prk prn ls cb lemma andv vh structures 
vh provable ls vh provable ls 
proof lemma lemma proof ls cb cb 
cut elimination structure theredex cb structure rk suchthat rk derivations cb cb apply previous lemma times proof rk ls cb cb ls cb rk rk cb stands vh occurs times 
construct derivation rk cb lemma get desired proof ls vh proof lemma splitting lemma get pr prn pt ptn suchthat pr pt prn ptn ri ls pri ls ti ls pti 
splitting ti ki vi vi ki vi vi ki vi vir ki ti ls pti ls vij mi 
lemma get mi ls pri vij 

linear logic calculus structures build proof vij stands vij 
ls pri pri pri vi pri pri vi ti ls pri pti ls pr pt prn ptn pr pt prn ptn ls lemma ai rules system sls context hole occur inside structure 
proof ls proof apply context reduction proof ls ls yields pv suchthat structure derivation ls woo structure pv pv lemmata pv 
structure provable ls 
ls ls remains show handle situation rule eliminated applied inside structure 
purpose definition lemma 

cut elimination definition application rule called context occur inside structure contexts suchthat 
derivation rule application occurring 
proof called rule application occurring axiom 
observation inspection proofs splitting context reduction shows preserve property 
precisely splitting lemma context reduction lemma hold ls system ls rule replaced version 
lemma ai rules system sls arbitrary context 
proof ls proof ls proof proof obtained simple permutation rules rules permuted disappear 
see consider topmost instance rule ls nontrivial 
cases consider redex inside active structure contractum 

contractum inside active structure theredex 
cases possible 
yields ii 
similar 
iii 
yields 
linear logic calculus structures iv 
similar iii 
redex contractum properly overlap 
impossible 
lemma says lemma hold arbitrary contexts 
lemma ai rules system sls context 
proof proof ls ls 
transform proof ls ls exists lemma 
eliminate instances topmost repeatedly applying lemma 
cut elimination result easy consequence 
proof theorem sls 
remove instance rule inside starting topmost applying lemma 
result proof ls discussion main purpose chapter introduce calculus structures show linear logic benefit presentation calculus structures 
particular surprising phenomena observe global promotion rule sequent calculus bn bn 
discussion replaced local version sense longer necessary check context unbounded size 
shows logic causes rule global restrictions sequent calculus 
see introductory part chapter discussion locality 
rule additive conjunction sequent calculus replaced rules rule purely multiplicative sense context substructure shared duplicated contraction rule responsible duplication 
means distinction additive multiplicative context treatment intrinsically connected sequent calculus connectives linear logic 
rule multiplicative conjunction sequent calculus point view proof search problem decide split context formula moment rule applied 
formulas 
course methods lazy evaluation circumvent problem inside implementation hm switch rule able handle problem inside logical system observed gug 
duality rules id cut 
linear logic calculus structures hidden sequent calculus obvious calculus structures rules particular reducible atomic version observed gug sequent calculus 
define pair modalities 
experiment sequent calculus relation interesting observation define new pair structural contexts 

rules 
thenthere relation 



calculus structures provides certain uniformity sequent calculus 
furthermore chapter shows possible proof theory calculus structures sense notion cut provide cut elimination procedure 
general cut rule sequent calculus cut decomposed rules eliminated independently wide variety equivalent systems different degrees expressiveness proof construction 
example case chapter rules means different systems equivalent system ls 
means user large amount possibilities adapt system application need worry soundness completeness system 
modularity available sequent calculus 
multiplicative exponential fragment linear logic name suggests multiplicative exponential fragment linear logic mell restriction linear logic multiplicatives exponentials 
fragment deserves particular attention hand incorporates resource linear logic controlled way contraction suitable wide range applications hand fragment linear logic decidability known 
section chapter show system mell sequent calculus discuss systems sels els calculus structures defined section 
section show permutation results needed sections chapters 
section show decomposition theorems system sels 
theorems seen central results chapter sense thesis 
section long technical effort prove decomposition theorems 
impatient reader interested proofs read introductory part section gives sketch proofs 
section contains proof cut elimination theorem system els 
proof decomposition permutation rules 
permutation rules proving cut elimination conceptually similar sequent calculus 
due new top symmetry calculus structures possible obtain interpolation theorem seen top symmetric version cut elimination 
interpolation theorem discussed section 
sequents structures rules section define systems mell sequent calculus calculus structures 
fact restrictions systems defined chapters 

multiplicative exponential fragment linear logic id cut bn bn system mell sequent calculus definition mell formula ll formula contain additive connective 
mell shown 
course cut elimination result hold mell 
seen consequence cut elimination result full linear logic theorem rules additives missing system mell needed cut free proof mell formula additive connectives occur 
easily possible obtain direct proof proof cut elimination result full linear logic omitting cases additives 
theorem cut elimination proof sequent system mell transformed system mell sequent 
calculus structures situation similar 
definition els structure ls structure contain constants shape rh rh 
case els structures equations concerning additives underlying equational theory 
convenience remaining equations show 
system sels ai ai see definition shown 
core see definition system sels 
system els ai fragment system sels axiom shown 
results concerning systems sls ls chapter remain true systems sels els 

theorem systems sels els strongly equivalent 
proof similar proof theorem 
proposition independent additives proof proposition rules needed decomposing structures shape rh rh 

sequents structures rules associativity commutativity exponentials units negation basic equations syntactic congruence els structures theorem structure provable system sels translation provable mell cut 
proof proof literally proof theorem cases rules needed means sequent calculus rules needed 
theorem sequent provable mell cut thenthe structure provable system sels 
sequent cut free provable mell thenthe structure provable system els 
proof proof literally proof theorem cases rules omitted means rules andc needed 
consequence different proofs cut elimination theorem system els hand 
theorem cut elimination system els equivalent subsystem system sels containing els 
proof uses translation sequent calculus system second uses technique splitting context reduction see section observe statements splitting context reduction simpler case els 
chapter section third proof theorem techniques decomposition permutation 
immediately get corollaries proofs full linear logic 
corollary rule admissible system els 

multiplicative exponential fragment linear logic ai ai system sels ai system els corollary structures 
sels permutation rules els various applications proof theory permutability rules cur 
example idea focusing proofs relies 
case forum mil mil programming language linear logic permutability rules adapting notion uniform proof multiple sequents 
observation rules permute offers possibility defining new inference rules larger granularity application seen 
permutation rules application rules permute parallel 
example development gir influenced idea 
top symmetry derivations calculus structures enables study mutual permutability rules natural way 
starting point investigation properties logical systems calculus structures 
example system rule permutes derivation derivation structure decomposition theorems thesis see sections 
cut elimination proof section permutability rules 
definition permutes permutes derivation derivation structure order study permutation properties rules definitions needed 
inference rules systems sls sels shown figures respectively systems calculus structures discussed thesis kind structure called redex contractum rule instance 
substructure occurs exactly redex contractum rule changing called passive redexes passive change disappear duplicated called active 
substructure contexts called passive structure valid instance rule 
called active 
rules 
multiplicative exponential fragment linear logic iii ii iv possible interferences redex contractum consecutive rules theredex contractum structures passive structures active redex structures contractum 
passive structures redex structures active contractum active occurrences structure active 
definition application rule called trivial called nontrivial 
example application rule trivial 
case analysis order find rule permutes rule consider possibilities interference redex contractum situation happen inside overlap independent 
possible interferences shown 
situation symmetric respect situation considered shape 
permutation rules ai ai ai ai examples interferences consecutive rules redex contractum known case analysis position redex inside structure 
cases listed 
shows example case 
cases occur distinction active passive structures 
redex inside context 
corresponds case 
contractum inside passive structure theredex 
subcase ii 
redex inside passive structure contractum 
subcase iii 
redex inside active structure contractum inside 
subcase iii 
contractum inside active structure theredex inside 
subcase ii 
contractum redex properly overlap 
corresponds case iv 
observe case happen associativity 
cases context 
means derivation shape 
multiplicative exponential fragment linear logic follows third case contexts structure andq structure derivation passive follows means proof permutation result cases trivial remaining cases elaboration necessary 
proof concerning permutation result follow scheme 
remainder section show permutation results needed decomposition theorems section 
lemma rule permutes rules ai ai 
proof consider derivation ai ai 
loss generality assume application nontrivial 
cases need considered 
remaining cases redex inside active structure contractum 
impossible proper substructure 
redex equal case reduced case fact 
contractum inside active structure theredex inside 
case impossible case analysis shows redex inside 
ii ai redex case case fact 

permutation rules iii thenthe active structures redex inside inside respectively passive 
covered case 
inside inside case 
iv ai 
active structures redex 
inside case 
thenthe application ai trivial 
contractum redex overlap 
case impossible structure properly overlap structure 
lemma rule permutes rules ai ai 
proof dual lemma 
lemma rule ai permutes rules ai 
proof consider derivation ai ai 
loss generality assume application nontrivial 
follow redex inside active structure contractum ai 
impossible proper substructure 
redex equal case reduced case fact 
contractum ai inside active structure theredex inside 
case possible 
seen similar analysis proof lemma 
contractum ai redex overlap 
case impossible structure properly overlap structure 
lemma rule ai permutes rules ai 
proof dual lemma 
observe rule permute 
forexample derivation 
multiplicative exponential fragment linear logic unclear instance permuted 
help switch rule get words switch move structure inside passive structure redex 
situation similar ai yields ai time switch move disturbing structure outside redex 
example situation ai unclear rule ai permuted 
replace derivation single application leads definition 
definition permutes derivation exists derivations 
permutation rules structures dually rule permutes derivation exists derivations structures lemma rule permutes 
rule permutes 
rule ai permutes 
rule ai permutes proof consider derivation nontrivial 
cases proof lemma 
remaining case contractum inside active structure theredex inside 
subcases thenthe redex 
active structures 
possibilities inside 
general case andt situation get context yields ii 
general case occurring inside active structure andt andt 
multiplicative exponential fragment linear logic yields dual 
consider derivation ai nontrivial 
cases proof lemma 
remaining case contractum ai inside active structure theredex inside 
subcases thenthe redex 
possibilities occur inside 
similar show ai yields ai ii thenthe redex occurs inside wehave context ai yields dual 
sufficient show derivation contain rules instances ai top derivation instances ai bottom 

permutation rules proposition derivation derivations suchthat sels ai ai structures statement proposition strengthened derivation ai decomposed ai dually derivation structures ai ai ai decomposed ai proposition gives idea decomposition theorem look 
full decomposition theorems system sels discussed section necessary handle rules 
unfortunately impossible easy permutation arguments shown section 
example permuting rule cause duplication 
multiplicative exponential fragment linear logic permuting rule impossible 
seen derivation applied general equal 
situation dual 
decomposition new top symmetry derivations calculus structures allows study properties observable sequent calculus 
remarkable results far decomposition theorems 
general decomposition theorem says system divided pairwise disjoint subsystems sn derivation rearranged composition derivations uses rules si section state prove decomposition theorems derivations system sels 
decomposition system sels disjoint subsystems 
theorem decomposition derivation tures suchthat ai ai sels struc apart decomposition subsystems decomposition theorem read decomposition subsystems called creation merging destruction 
creation subsystem rule increases size structure merging system rule rearranging substructures changing 
decomposition size structures destruction system rule decreases size structure 
decomposed derivation merging part middle derivation depending preferred reading derivation creation destruction top bottom destruction creation creation merging destruction system sels merging part contains rules 
reading derivation creation part size structure increased contains rules ai destruction part size structure decreased consists ai 
reading creation destruction exchanged 
second decomposition statement difference rules exchanged 
theorem second decomposition derivation structures suchthat ai ai sels second decomposition theorem allows separation core noncore system fragment fragment noncore merged case decomposition 
precisely separate 
multiplicative exponential fragment linear logic subsystems noncore interaction core interaction noncore decomposition considerably simplify cut elimination argument longer deal noncore rules usually cut elimination proof hard 
give sketch proofs decomposition theorems detailed proofs follow sections 
decomposition obtained steps follows sels sels ai ai ai ai second third step realised results section proposition 
step difficult 
basic idea permute rules 
problematic case replaced 
decomposition sels sels sels sels sels permuting tk sels rh new instance introduced 
reached top derivation instances permuted dual procedure new instances introduced 
problem show process visualised terminate eventually 
done follows introduce notion certain type cycle inside derivation 
show assumption nontermination reduced existence cycle 
derivation contains cycle extract derivation rn tn tn rn tn 
show derivation exist 
prove termination 
fact nonexistence deep reason decomposition theorems purpose effort sections carry technical details 
example syntax enemy proof theory 
proof second decomposition done steps sels sels ai ai ai ai 
multiplicative exponential fragment linear logic step exactly decomposition 
second step permute rule rule 
permuting problematic case replaced new instance introduced 
reached top derivation instances permuted dual procedure new instances introduced 
means termination problem separation absorption step 
weakening rule deletes material duplicating termination easier show separation absorption 
chains cycles derivations section provide tool dealing rules decomposition theorems 
goal permute derivation instances top instances bottom 
try permute rule system sels applying schema encounter case unclear instance permuted 
replaced solve problem instance instance 
new instance needs permuted bottom derivation 
applying schema encounter dual case 
decomposition replaced introduces new instance 

problem show run forever terminate eventually see 
order inspect path taken instance moves top path taken moves 
motivation definition chains chains 
composed give complex chains 
show process described instances travel chains 
process terminate chain form cycle 
purpose section show cycle 
definition introduced concept context structure hole denoting substructure section need denote structures distinctive substructure 
example iwill write denote structure independent substructures 
generally rn rn substructures 
removing substructures replacing yields ary context forexample binary context 
definition derivation 
link structure occurs substructure structure inside derivation 
purpose definition link define chains consist links 
general derivation links belong chain 
mark links belong chain reason discussion example derivation 

contains links marked 
far relation markings chains 

multiplicative exponential fragment linear logic ii iii iv vi 
































connection links links inside derivation connected occur consecutive structures shape definition links cases holds 

link inside context 


decomposition 

context redex contractum 


link inside passive structure theredex contexts 





redex contractum 

redex inside context 



redex contractum 

link inside active structure theredex inside passive 
subcases possible 





ii 

ands 



iii contexts 


ands 


iv contexts 


ands 


contexts 







multiplicative exponential fragment linear logic vi contexts 





left hand side listed possibilities links connected 
example derivation shown example links connected case link connected 
definition chain inside derivation sequence connected links 
bottommost link called tail topmost link called head 
visualise chains giving derivation marking links chain example derivation shows chain tail 
ii 
ai 






right hand side derivation indicated case links connected 
observe subchain chain 
example bottommost links chain 
definition notion link defined way link 
notion chain defined dually chain particular tail chain topmost link head bottommost link 
similar links mark links discussion particular chains marked marking link chain convenience listed right hand side possibilities links connected inside chain 
observe cases ii cases sides differ 
cases exactly sides 
cases iii cases iv vi exchanged order maintain duality 

decomposition example derivation shows 
head 




iv 
ai 


indicated right hand side derivation cases links connected 
definition derivation 
upper link structure occurs substructure structure inside 
dually lower link structure substructure structure inside 
similar marking links links mark upper links 
lower links 


definition derivation 
set chains defined inductively follows chain 
chain 
contains chains upper link 
suchthat head tail thenthe concatenation forms chain 
tail tail head head 
contains chains lower link 

suchthat head tail thenthe concatenation forms chain 
tail tail head head 
chains 
definition length chain number chains composed 

multiplicative exponential fragment linear logic 









cycle example examples chains derivations reasons redices rule applications longer marked ai 
ai 

chain tail head example head 
definition derivation 
chain called cycle contains upper link 
suchthat head tail contains lower link 

suchthat head tail 
words cycle seen chain head tail 
shows example cycle 
observe cycle number consists chains chains upper links lower links 
call number 

definition called promotion cycle upper link redex rule called link promotion lower link contractum rule called link 
example promotion cycle upper link 
redex rule lower link 
rule 

decomposition 





promotion cycle shows example promotion cycle 
observe necessarily case upper links lower links derivation 
definition cycle inside derivation links links marked respectively 
called forked holds instance inside substructures contractum contain substructure marked 
ii instance inside substructures redex contain substructure marked called forked 
examples cycles shown forked cycles 
show example cycle cycles exist 
purpose section prove fact 
definition context generated 
multiplicative exponential fragment linear logic hole occur inside structure called basic context 
example contexts 
lemma basic context structures 
proof structural induction 

forsome structure context induction hypothesis forsome structure context exists induction hypothesis 
definition called pure chain chain contained equal ii upper links occur structure lower links occur structure 
example cycles figures pure 
cases condition fulfilled condition ii 
shows example pure cycle 
derivation sels contains pure cycle structures rn tn ary contexts suchthat shape 
sels sels rn rn rn tn tn tn 
sels 
tn tn tn 
decomposition 







pure cycle inside structures marked structure contains upper links 




rn rn rn tn tn tn 
tn tn tn contains lower links pure circle 
words cycle completely inside 
intuitive cycle transformed pure cycle permuting rules upper links structure lower links structure links belonging subchain subchain equal 
proposition precise cycles 
precisely promotion cycle transformed pure cycle 
proof long technical details carried 
basic idea quite simple situation 


links connected permuted cases get 

structure contain link connected words 
context 



multiplicative exponential fragment linear logic 




example inside means cycle destroyed simple rule permutations 
proposition derivation sels contains pro motion cycle derivation ai ai contains pure cycle 
proof promotion cycle inside links links marked respectively see derivation 
instances link promotion definition instances link marked respectively see second derivation 
stepwise construct markings permuting adding removing rules cycle pure 
observe transformations destroy cycle change premise derivation 
characteristic number 
marked instances ri ti 
ri ri ri ti ti ti proceed follows mark contractum ri ti ri ti continue marking links maximal chain ri ti tail 

decomposition unique choice continue marking see definition case marking reaches marked structure inside redex possibilities continue inside case definition continue inside case vi definition 
choose side contains marked structure 
cycle happen sides contain marked 
structure 
marked 
structure inside contractum 
proceed dually marked 
mark redex links chain third derivation 
ii 
consider substructures substructures occur derivation 
divided groups marked substructure marked 
structure 
step replace substructures fall group respectively remove exponential 
drastic step course yield derivation correct rule applications incorrect 
observe instance ai ai inside suffer remain valid 
inspect closely happen instances 
consider instance possibilities 

cases exhaust contexts 


redex contractum remain unchanged rule remains valid 
ii marked 

unchanged 

iii marked 
thenthe exponentials inside removed obtain instance 


multiplicative exponential fragment linear logic observe different inside exponentials remain inside inside exponentials removed 
iv marked occur inside marked structure 
obtained respectively removing exponentials 
cases 
observe rule case iv vacuous removed derivation 
remains remove instances rule case iii 
done step rule dual rule 
problem lies new rule 
obtained removing exponentials 
rule removed 
rule cases possible 
contexts 


redex contractum remain unchanged rule remains valid 
ii rule obtained removing exponentials 
observe marking rule 
impossible 
situation dual obtain obtained removing exponentials 
rules removed 

decomposition situation little intricate 
possible cases contexts 


redex contractum remain unchanged rule remains valid 
ii rule marked 



obtained removing exponentials 
iii redex contractum rule contain marked 
structure contained marked structure 
rule obtained removing exponentials 
iv marked 
structures inside redex 
markings substructures contractum contain marking cycle 
rule exponentials removed exponentials removed remain 
observe instances instances basic context arbitrary structures 
dually basic context 
new instances removed step 

multiplicative exponential fragment linear logic summarise achieved step 
original derivation transformed sels sels cycle chains marked 
steps remove rules including cycle pure 
iii 
remove instances 
bottommost occurrence inside 
replace contain exists lemma 
repeat derivation 
proceed dually remove start topmost 
derivation sels observe premise derivation changed cycle 
iv 
step remove instances 
proofs lemmata 
happen contractum inside active structure redex redex inside marked structure impossible construction step ii 
rule permutes dually permutes 
decomposition rules 
means easily transformed sels permuting stepwise 
consider cycle 
sels inside mark rules redex inside marked structure additionally mark instances dually mark rules rules contractum inside marked structure marked rules derivation step decomposed permutation rules 
order obtain decomposition need show rules marked permute rules rules marked permute rules rules permute rules marked rules permute rules marked 
multiplicative exponential fragment linear logic statements proved section 
consider marked nontrivial 
cases consider redex inside active structure contractum impossible redex inside structure contractum inside structure redex inside structure ii thenthe redex inside structure 
contractum inside active structure theredex inside passive 
subcases redex inside structure 
impossible contractum inside structure 
inside active structure active structure structure inside structure marked 
ii 
impossible marked 
iii 
marked structure redex replace 





contractum redex overlap 
impossible 
dual 
consider nontrivial 


redex inside active structure contractum thisis impossible redex inside structure 
decomposition contractum ofp inside active structure theredex inside passive 
impossible 
contractum redex overlap 

dual 
remains show subderivation obtained step desired properties contains pure cycle consists rules ai ai 
observe transformed step ii removed steps iii iv remained unchanged step ii occurred inside marked structure marked removed step means rules ai ai left inside 
consider premise 
consists 


rn rn rn tn tn tn structures rn tn ary context 
similarly 
structures ary context 
transformation steps ii destroyed cycle 
contains rule operates inside 
structure tn 
contain pure cycle 
definition structure substructures structures par relation contexts 
similarly times relation 
lemma derivation derivation ai ai rn tn tn contains pure cycle 
multiplicative exponential fragment linear logic structures rn tn wheren characteristic number 
proof lemma lemma derivation decomposed ai ai transformation destroy cycle 
pure cycle contained 
subderivation 




rn rn rn tn tn tn 
tn tn tn structures rn tn ary contexts ri ri ri ti ti ti par relation 
switch rule able rule system sels transform par relation times relation going derivation 
ri ri ri ti ti ti par relation context 
dually sn contexts sn derivation shape 

sn 
rn rn rn tn tn tn 
tn tn tn observe contexts sn ands atoms contains rules create destroy atoms 
derivation remains valid atoms removed derivation gives derivation 



rn rn 

rn tn tn tn tn tn tn lemma rn tn structures 
derivation rn tn proof induction tn 

decomposition base case 
derivation times relation par relation going derivation 
inductive case way contradiction suppose derivation consider bottommost instance rn tn tn 
loss generality assume 
case similar 
matching wehave rk tk rk tk tkm km 
get rn tn rk tk tkm tn tn inside structures rn tn occur inside passive structures instances replace inside structure rj tj structure thenthe derivation remain valid 
loss generality assume km km replace inside structures ri structures ti derivation tkm rn tn tkm rn tn tn tkm tn exist induction hypothesis 
mentioned property switch rule described lemma heart decomposition theorems 
come back property switch section 

multiplicative exponential fragment linear logic theorem exists derivation containing promotion cycle 
proof way contradiction suppose derivation containing promotion cycle 
derivation containing pure cycle characteristic number 
lemma derivation rn tn tn structures rn tn 
lemma 
corollary exists derivation containing cycle 
proof cycle easily transformed promotion cycle adding instances 
separation absorption weakening process permuting instances derivation procedure sels realised algorithm permuting consider topmost occurrence subderivation 
cases cases impossible redex inside contractum inside passive structure theredex redex inside contractum contractum inside active structure theredex inside subcases 
decomposition replace ii iii repeat instances top derivation 
easy see algorithm terminates resulting derivation shape sels intuitive terminate easy prove permuting rule instances new instances introduced 
lemma input derivation procedure terminates 
sels proof problem showing termination number instances increase permuting 
happens upwards 
multiplicative exponential fragment linear logic moving meets case iii 
number instances inside fixed 
increase upwards moving meets instance case instance case 
difficulty lies right induction measure 
mark inside chains contractum instance tail 
mark links 
start contractum marking 
continue marking indicated page propagating number premise rule exception case definition rule situation continue marking follows sels 
nr nr sels 
sels 

sels 
marking number multiplied 
example derivation ai 
decomposition marked 



aa aa ai 
aa 
aa 
aa 
aa 
aa 
aa 

aa observe happen marking inside 
happens marking pulled inside instance example 
case marking pulled inside doubled 
consequence marked structure markings inside markings 
notational convenience denote structure markings inside divided 
structures markings 
denote structure markings inside multiplied 
run algorithm markings removed follows cases replace case replace case replace 

rr 
rr 


rr case ii replace 
rr 



multiplicative exponential fragment linear logic case iii replace 





instances travel chain marked 
instance chain exactly instance marking removed 
happen new markings introduced process length derivation increase 
structure markings inside 



structures occurring occurs 
process permuting thevalue increases structure occurring 
new structure inserted cases iii forsome structure occurring observation show termination assigning pair endowed lexicographic ordering values defined follows process permuting shape sels 
sels contains instances reached top nontrivial instance topmost permuted 
andm length 
strictly decreases permutation step instances reached top 
lemma algorithm terminates input derivation sels proof apply lemma instance 
dual procedure moved derivation 

decomposition algorithm permuting absorption repeat instances bottom derivation 
consider bottommost occurrence subderivation 
cases dual contractum inside redex inside passive structure contractum 
contractum inside redex replace redex inside active structure contractum inside 
cases replace ii iii cases impossible 

multiplicative exponential fragment linear logic lemma procedure terminates input derivation yields derivation sels sels proof dual lemma 
algorithm split separating absorption subderivations shape 
ii 
permute instances applying 
iii 
permute instances applying 
iv 
go 
lemma lemma ensure step algorithm depicted page terminate 
remains show algorithm split terminate eventually 
lemma derivation contain promotion cycle 
algorithm split terminate 
proof loss generality outcome run instances consider 
finite contains finitely instances 
finitely chains say tail 
mark chains previous section li see definition run remove markings proof lemma instances 
decomposition permuted 
case replace 


chains length li longer marked 
run subchain length remains marked impossible add links chain head 
chains head promotion cycle inside 
possible duplicate chains case 
situation dual 
number lmax max reduced run 
ensures termination 
lemma derivation obtained run 
contain promotion cycle 
proof way contradiction assume contains promotion cycle 
outcome run allinstances bottom 
cycle forked forked different instances 
contains promotion cycle loss generality assume minimal 
proceed induction show contradiction 
base case contradiction theorem 
inductive case bottommost instance forks mark introduced run replaced see case algorithm 
marked moving copies inspecting cases see algorithm easy see travels copies treated equally rule modifies thenthere instance modifies way 
moved run meets new case iii algorithm duplicated copies finishing run 
multiplicative exponential fragment linear logic counterpart chain head vice versa 
similarly chains tail correspond 
means construct cycle replacing subchain head tail inside corresponding chain head tail new cycle forked inside cycle forked instances contradiction induction hypothesis 
proposition derivation sels sels derivation proof apply algorithm split 
completes proof decomposition theorem 
second decomposition separate weakening 
proposition derivation sels sels derivation proof instances inside permuted top derivation 
consider topmost subderivation sels nontrivial 
cases redex inside active structure contractum 

cut elimination contractum inside active structure theredex inside 
possibilities structure replace ii contexts 
replace contractum redex properly overlap 
impossible 
terminates number instances increase reach top eventually 
proceed dually permute instances bottom derivation 
repeat permuting permuting derivation desired shape 
remains show terminate permuting new instances introduced permuting new instances introduced 
possibility introducing new permuted case meets 
disappears 
number instances initial derivation finite number increased process permuting process terminate eventually 
cut elimination section second decomposition theorem technique permuting rules show fragment system sels admissible 
precisely second decomposition theorem show rules noncore rules admissible 
rules ai eliminated technique employed gentzen gen rules give super rule general helps book keeping context 
super rules permuted rules reach top proof disappear 
permutability distributed lemmata 
new rules added system lemmata remain valid rule permutes rule thenthe rule change fact 
modularity cut elimination argument available sequent calculus 
start step corollary second decomposition theorem theorem 

multiplicative exponential fragment linear logic corollary proof sels structures 
ai ai proof apply theorem moving axiom 
yields derivation ai sels ai application trivial shape obtained re 

applications 

shows noncore rules admissible 
consider rules derivation proposition shows rules sound 
cut elimination derivable system sels technical reasons able simply eliminate rule 
iwill eliminate rules simultaneously result instances introduced 
instances eliminated 
reason define system system els extended els rules ai removed method gug proving cut elimination system bv super rules sp sr sai respectively sp sr sai observe rules ai instances super rules sp sr sai respectively 
show super rule permuted proof disappears application trivial 
start definitions necessary 
definition called proper par structures andr similarly structure proper times structures andr definition deep switch rule ds structure proper times 
rule ns called switch 
system els system system obtained system els replacing deep switch ai ds 
multiplicative exponential fragment linear logic sels accordingly ai ai ai ds ns sp sai ai ds sai ai ds cut elimination system sels ai ds rules deep switch switch instances switch rule instance switch rule instance deep switch instance switch 
sufficient material outline scheme full cut elimination proof shown 
start applying corollary 
instances rule replaced ds ns ai replaced super rules 
instances rules ns sp sr permuted ai ds step step rules sr introduced 
step rule sai permuted 
rule eliminated 
observe procedure obtain result stronger theorem obtain proof system els 
lemma rule ns permutes rules ai ds rule ds 
proof consider derivation ns application ai ds nontrivial 
loss generality assume proper times 
cases consider redex inside contractum inside 
cut elimination passive structures case possible ds ds ns yields ds contractum inside active structure theredex inside passive 
ds possibilities ds ns yields ds ns yields ns ds ns ds ds note second case possible proper times 
redex contractum overlap 
impossible redex par structure properly overlap 
proposition proof els proof proof proof proof instances switch permuted applying lemma 
disappear reach top proof 
trivial premise 
lemma rules sai sp sr permute rule ds 
proof rules shape sx proper par proper times 
consider derivation ds sx application ds nontrivial 
cases consider 
multiplicative exponential fragment linear logic redex ds inside contractum sx inside passive structure 
sx sai thenthe passive structures sx sp sr passive structures 
observe redex ds inside proper par proper times 
remaining cases 

loss generality assume proper times 
ds sx yields ii 
similar 
sx ds contractum sx inside active structure theredex ds inside passive 
general case context structures ds sx yields ds sx yields sx ds sx ds redex ds contractum sx overlap 
previous lemma case impossible 
observe rules sai sp sr permute rule forexample derivation sai unclear permuted switch 
deep switch introduced gug place 

cut elimination lemma derivation sp sr derivation structure derivation structures rules sp sr 
proof consider derivation sp sr application nontrivial 
cases consider redex inside contractum inside subcases sp 
sp yields ii sp 
sp yields iii sp 
sp yields iv sr 
sr yields sr sp sp sr 
multiplicative exponential fragment linear logic sr 
sr yields sr contractum inside active structure theredex inside passive 
impossible 
redex contractum overlap 
case impossible par structure overlap times structure 
lemma rules sp sr permute rule ai 
proof consider derivation ai application sr sp nontrivial 
cases consider redex ai inside active structure contractum inside 
impossible atom matched course structure 
contractum inside active structure theredex ai 
impossible application nontrivial 
contractum redex overlap 
impossible 
observation instance rule sai sp sr topmost derivation premise thenthe application trivial 
easy see premise 
possible 
means rule sai sp occurs top proof removed 
lemma atomic cut elimination rule sai permutes rules ai ds rule ds 
proof consider derivation sai ds applies 
ai nontrivial 
cases consider redex inside contractum sai inside 
cut elimination ai 
ai sai yields ii ai 
similar 
ds contractum sai inside active structure theredex inside passive 
impossible atom match course structure proper times structure 
redex contractum sai overlap 
impossible rule ai proper times structure redex 
proposition proof proof sai sp sr proof proof proof system applying proposition 
sp sr apply lemmata permute instance 
observation disappears top 
sai lemma permute 
lemma proof proof proof eliminating rule iwill eliminate rule sr structure derivation ai ds note instance sr 
consider topmost instance sr permute applying scheme consider derivation sr ai ds nontrivial 
cases consider 
multiplicative exponential fragment linear logic redex inside contractum sr 
sr sr contractum sr inside active structure theredex inside 
subcases possible 
replace sr derivation exists definition sr 
ii redex 
replace sr iii 
sr iv 
possible 
sr replaced redex contractum sr overlap 
impossible 
procedure topmost instance sr disappear eventually 
repeat instances sr derivation 
give complete proof cut elimination theorem 
theorem cut elimination system equivalent subsystem system sels containing els 
proof proof follows steps shown 
step apply corollary second third step apply repeatedly proposition step lemma 
decomposition result proofs system 

interpolation proposition proof structures 
ai ds proof easily permute 
problematic cases see proof proposition 
ai permuted results section 
details left reader 
interpolation technique permuting rules previous sections allows obtain top symmetric version cut elimination starting proof permuting rules fragment top disappear start derivation permute rules fragment top remain 
dually permute rules fragment bottom 
result obtain decomposition fragment fragment structure observe structure contain atoms occur resembles craig interpolation theorem order classical logic cra bus 
motivation calling structure interpolant 
br br nnler shows classical logic presentation calculus structures interpolation theorem stated terms derivations shown 
show theorem multiplicative exponential linear logic 
precisely second decomposition theorem theorem lemmata previous section get interpolation result system sels 
proposition result 
drawback unclear rules eliminated 

multiplicative exponential fragment linear logic theorem interpolation derivation sels suchthat ai ai structures proof decomposition obtained steps indicated 
quite similar steps cut elimination proof see 
step application second decomposition theorem theorem 
instances replaced sp ai sai andthe instances ds ns 
second step instances ns sp sr cut elimination proof causes 
difference rules disappear 
third step instances sai permuted lemma 
step different cut elimination proof 
instances ai permuted permute lemma 
instances sp replaced similarly instance sr replaced instances instance sai replaced instances instance ai 
instances ai permuted instances lemma 

discussion sels ai ds ns sp sai ns sp sr ai ds sai ns sp sr sai ai ds proof interpolation theorem system sels ai ai observe interpolation theorem proved dual way introducing super rules permuting 
general case resulting derivation different obtained previous proof 
translation structures formulae discussed chapter possible obtain interpolation result mell 
corollary mell formulae provable ll 
thenthere mell formula contains atoms occur provable ll 
proof apply theorem sels obtained theorem corollary 
representation interpolant obtained theorem 
formulae provable ll theorem 
discussion results chapter calculus structures 
main results chapter decomposition theorems 
multiplicative exponential fragment linear logic cut elimination proof permutation rules interpolation theorem 
interesting observation connected cut elimination argument 
separation core noncore allows split cut elimination proof different phases 
noncore fragment eliminated time noncore fragment moved rules 
surprising fact step responsible hyperexponential blow caused cut elimination 
furthermore connected cut elimination went proof decomposition theorems precisely separation absorption 
done cut elimination simple 
elimination core fragment second phase procedure causes exponential blow 
permutation eliminating core fragment done chapter probably obsolete discovery splitting gug see section 
included proof thesis reasons correct purely syntactical cut elimination proof inside calculus structures 
permutation lemmata needed prove interpolation theorem 
current state art see technique splitting employed get interpolation 
section permutation results 
various permutation results exhibit wide variety possibilities derivations calculus structures manipulated 
linear logic chapter introduced calculus structures linear logic example show general principles 
chapter go step explore new possibilities new freedom calculus structures 
precisely iwill show system linear logic rules local application requires bounded amount computational resources 
particular contraction rule reduced atomic version impossible sequent calculus br 
section give detailed discussion locality 
section iwill local system called slls 
system quite big bears various regularities 
particular top symmetry calculus structures system slls 
show slls strongly equivalent system sls system linear logic 
show cut elimination showing fragment admissible 
local system slls regularities connectives linear logic mutual relationship hidden sequent calculus system 
section show decomposition theorems new system 
locality atomicity formal proofs object research proof theory consist applications inference rules 
proof theory provide tools modify proofs example permuting inference rules replacing inference rules inference rules 
proof theory look inference rules 
inference rule black box see input output premise 
proof theory say computational aspect proof construction computation hidden inside inference rules 
means particular comes implementation system application inference rule consume bounded amount computational resources time space 
deductive systems contain inference rules property 
example sequent calculus system linear logic introduced chapter see 
particular 
local system linear logic consider rules bn bn called contraction promotion respectively 
contraction rule applied going bottom top formula duplicated 
mechanism duplication needs inspect words contraction rule needs global view computational resources needed applying contraction bounded depend size situation occurs rule applied context formula copied 
rule involves global knowledge context promotion rule formula context form inference rules contraction promotion require view formulae sequents unbounded size called nonlocal rules called local bt 
example rules called times par respectively local need look formulae contexts 
require bounded amount computational resources suffice operate pointers depend size formulae 
observe sharing implementing nonlocal rule copying formula application contraction rule copies modified different way 
bt shown possible design local system deductive system rules local classical logic 
show local system linear logic 
basic idea making system local replacing nonlocal inference rule 
promotion rule local calculus structures 
rules locality achieved restricting application atoms formulae bounded size 
idea new nonlocal identity rule sequent calculus replaced atomic counterpart considered local affecting provability 
contraction rule admissible atomic version necessary add new inference rules system order maintain completeness 
observed bt new rules sequent calculus rigid 
calculus structures provides freedom designing inference rules 
atomicity contraction achieved copying formulae stepwise atom atom rules restore original formula copied 
operationally interesting 
surprising fact done inside system losing important properties cut elimination soundness completeness 
apart proof theoretical interest local rules interest viewpoint applications 
rules cut elimination proof construction particular notion uniform provability mainly concerned controlling nondeterminism intrinsically connected proof search 
linear logic permutability properties yield optimised presentations cut free proofs hm 
calculus structures particular local systems nondeterminism proof search higher sequent calculus local system linear logic provides possibilities permuting rules 
yield new normal forms cut free proofs 
new methods controlling nondeterminism emerge 
distributed computing moves focus research computer science natural ask conceivable implement proof search distributed way 
essential application inference rule consumes bounded amount time space 
provided local system 
rules cut elimination section start system sls produce strongly equivalent system rules local sense discussed previous section 
discussing new system list nonlocal rules system sls page give informal reason local 
obviously rules involve duplication structure unbounded size 
nonlocal involve comparison deletion structures unbounded size duplication reasons top 
similarly consider rules nonlocal involve deletion structures unbounded size 
argue deletion structure unbounded size considered local suffice delete just pointer structure 
real implementation garbage collection problem 
important reason symmetry exhibited system sls carried locality invariant forming contrapositive 
observe rules system sls local 
particular rules ai ai involve atoms 
switch rule structures occur exactly redex contractum means structure unbounded size copied deleted 
reason switch rule local 
informally motivated follows rule implemented changing marking nodes exchanging pointers observed bt 
local system linear logic nm nm nm nl nl nz ai ac ai ac system slls nm nm nm nl nl nz rules 
summarise discussion explaining call rule calculus structures local 
interpret inference rules calculus structures shown previous chapters term rewriting rules see bn 
distinguish sorts variables stand 
rules cut elimination arbitrary structures stand atoms 
consider rule local variable kind occurs rule occurs exactly redex exactly contractum 
restriction context 
terminology term rewriting locality correspond linearity 
clear example rules sai nonlocal occurs twice redex second rule local occur exactly redex contractum atoms 
look new system called system slls second stands local shown 
reader frightened size system 
discuss rules 
point draw attention fact rules system slls local 
handle atoms implementation realised exchanging pointers similar way switch rule 
equations shown local implementing way inference rules 
means system slls local system 
remains show linear logic 
order show strongly equivalent system sls 
iwill define system lls adding axiom fragment system slls 
system lls strongly equivalent system ls 
get cut elimination result local system 
consider rules ac ac called atomic contraction atomic respectively 
replace general nonlocal counterparts 
powerful ensure completeness 
reason medial rule variations 
local system linear logic introduced 
purpose medial rule bt 
medial rules system slls connectives linear logic classical logic 
proposition rule derivable ac 
dually rule derivable ac 
proof instance iwill construct derivation ac structural induction atom instance instance ac 
wherep apply induction hypothesis apply induction hypothesis apply induction hypothesis wherep apply induction hypothesis wherep apply induction hypothesis 
rules cut elimination wherep apply induction hypothesis proof dual 
consider rules called atomic thinning atomic respectively 
replacement general thinning rules order keep completeness need add rules nm nm nm nm nm nm nl nl nl nl nullary versions medial rules 
local system classical logic bt rules hidden equational theory structures 
argued doing linear logic 
presentation chose reasons equivalences linear logic obvious reasons want equational theory systems sls slls 
new equations redundant system sls 
definition notational convenience define systems sllst nm nm nm nl nl sllst nm nm nm nl nl proposition rule derivable sllst 
dually derivable sllst 
proof similar proposition instance derivation sllst structural induction atom instance instance 

local system linear logic wherep apply induction hypothesis nm cases similar 
proof dual 
arises problem rules reduced atomic versions done rules 
basic idea exponentials guard subformulas arbitrary weakening contraction possible 
reason reduce rules rules respectively known equivalence encoded rules nullary versions nz nz proposition rule derivable nz derivable 
dually rule derivable nz derivable 
proof derivations nz respectively 
rules introduced section sound correspond linear implications 
precisely proposition rules ac derivable rule derivable nm nm nm nl nl derivable derivable 
dually rules ac derivable derivable nm nm nm nl nl derivable derivable 

decomposition proof rule ac instance 
cases rules similar 
rules nm nm nm nl nl instances instance 
theorem systems slls sls strongly equivalent 
proof immediate consequence propositions 
observe propositions show certain modularity involved equivalence systems 
instance user choose rules nm nm nm nl nl rule system affecting rules 
definition system lls obtained fragment system slls adding axiom 
theorem systems lls ls strongly equivalent 
proof propositions 
immediate consequence theorem splitting lemma context reduction lemma hold system lls 
inparticular fragment admissible 
corollary cut elimination system lls equivalent subsystem slls containing lls 
corollary rule admissible system lls 
system slls bears regularities 
example medial rules follow pattern 
section come back discuss possibility formulating recipe designing inference rules calculus structures 
decomposition section show decomposition theorems system slls 
different nature decompositions shown atomicity contraction allows manipulations impossible system sls 
compared decomposition results system sels previous chapter section results 
local system linear logic ai ac nm nm nm nl nl nz system lls simple 
considered preliminary research topic decomposition 
proofs simple permutation lemmata shown 
types contexts 
furthermore system slls considerably bigger system sels rules consider 
basic idea 
dissertation thesis put effort listing cases principle 
effect proofs section look involved 
reader keep mind case 
syntax obstacle short concise proofs 
means said previous chapter apply impatient reader invited read statements theorems subsection skip proofs 
separation atomic contraction theorem deals atomic contraction 
intuition contraction copy parts structure usable proof derivation 
intuition tells possible copy 
decomposition needed go proof copying anymore 
exactly theorem says 
theorem proof lls structure proof lls nm ac ac top symmetry allows extend result derivations theorem derivation structures slls ac slls ac ac ac derivation showing proofs theorems point difficulties arise 
proof decomposition theorems previous chapter separation absorption rule problematic 
problem expected contraction 
fact case contraction difficult substructure contracted guarded exponential 
example derivations unclear instances permuted permuting contraction situation dual 
reason give decomposition theorem system sls done section 
situation considerably simpler 
major problems solve 

local system linear logic permuting ac happen meets instance interaction rule follows ai ac replaced ai ai ac new instance ac introduced permuted 
problem show terminate eventually 
atom contracted instance ac ac constants 
ac obvious instance ac permuted 
problem problem promotion section 
indicates possible solution analysis chains cycles derivations section difficult binary connectives 
going difficult termination argument employ cut elimination done bt theorem classical logic 
done theorem cut elimination argument 
solving second problem case analysis find problematic rule individual solution 
case classical logic painful task done connectives constants problematic cases 
show rule ac permuted 
order keep situation clear possible introduce rules ac ac ac ac constant 
ac obviously special case ac ac instance ac ac ac ac ac nm statement theorem due fact ac nm ac nm 
furthermore instances rules ac ac trivial 
cases deal ac ac 

decomposition lemma rule ac permutes rule slls ai ac ac 
proof consider derivation ac slls ai ac ac 
loss generality assume application nontrivial 
case analysis cases consider redex inside contractum inside atom 
contractum ac inside active structure theredex inside 
rules system slls designed impossible 
contractum ac redex overlap 
impossible atom properly 
definition permutes system deriva tion derivation notational convenience define systems slls sllst nz ai ac slls sllst nz ai ac words system slls contains fragment system slls system slls contains fragment 
lemma rule ac permutes rule slls nm ac system 
proof consider derivation ac slls ac 
loss generality assume application nontrivial 
follow case analysis 
redex inside contractum 
application nontrivial 

local system linear logic contractum ac inside active structure theredex inside passive 
case problematic 
situation similar section weakening rule permuted 
additives involved possibilities interference 
rules cases consider 
principle 
rule treated separately 
sllst ai nz case occur 
ii case instance case associativity par context 
iii consider cases 
explain situation 
check possibilities contractum appear inside redex 

derivation shows general case ac set derivation 
case occurs inside considered commutativity 
fact similar cases ii proof part lemma page switch rule move disturbing structure inside passive structure redex 
exactly ac rules 
iv switch different way move disturbing structure redex context 
ac yields ac 
decomposition nm rule ac yields nm 
vi ac ac insert instance ac contractum ac redex overlap 
impossible 
interested reader observe possible permute rule ac rules fragment system slls 
example rules ai nm 
rules construct similar derivations want trouble reader details necessary 

local system linear logic lemma derivation structure slls ac derivation slls nm ac proof instance ac inside instance ac ac ac ac ac instances ac ac removed trivial instances ac replaced nm 
order permute ac ac top repeatedly apply lemmata 
lemma derivation structure slls derivation slls nm ac ac proof dual lemma 
proof theorem immediate consequence lemma 
done necessary preparations proof theorem similar proof theorem classical logic bt 
proof theorem tions slls slls slls 
perform transforma slls lls step replace structure occurs inside step transformed proof adding instance 
step 
decomposition apply proposition cut elimination theorem transform proof lls 
lls nm ac ac slls ac ac ac slls ac ac ac step apply theorem 
step triviality lls nm ac slls ac ac 
modify par structure structures derivations ac derivations separated step slls ac ac ac ac ac slls ac ac ac ac step similar step set structure derivation times relation slls ac ac ac ac slls ac ac ac ac step add instance switch cut produce derivation instance ac modify step move 

local system linear logic instances switch cut 
slls ac ac ac ac step derivation ac ac slls ac ac ac replace derivation ac slls ac ac ac ac keep sound replaced instance 
derivation slls ac ac modify substructure moved top step 
step application proposition get desired derivation 
separation atomic interaction theorem deals interaction cut 
shown section possible permute identity cut 
situation complex additive contexts considered permutation lemmata 
contraction reduced atomic version get result impossible system sels 
theorem derivation structures slls ai slls ai ai ai derivation go proof permutation argument explain result impossible atomicity contraction rule 
precisely 
decomposition hold system sls discussed chapter rule ai permuted 
case ai reason decomposition theorems section rule appears top bottom 
problem occur case atomic contraction problem caused atomic contraction 
precisely caused presence medial rules 
trivially possible permute ai rule 
problematic case ai fortunately concerns medial rules medial rules 
order prove theorem fact medial rules derivable proposition lemma follows 
definition weakly permutes derivation derivation structure lemma rule ai weakly permutes rules 
proof consider derivation ai application nontrivial 
case analysis consider cases redex inside contractum 
nontrivial 
contractum ai inside active structure theredex inside 
subcases 
local system linear logic 
ii 
ai yields ai yields ai ai contractum ai redex overlap 
impossible 
showing ai permuted rules notational convenience define systems sllst ac sllst ac needed inside section proof theorem 
lemma rule ai permutes rules slls system 
proof consider derivation ai slls nontrivial 
consider cases redex inside contractum 

contractum ai inside active structure theredex inside 
case essentially case lemma time contractum 
subcases 
sllst ai nz case impossible 
ii associativity case reduced cases 
iii shown case proof part lemma see page instance switch inserted 

decomposition iv possibilities ai ai case rules move substructure ai second case similar ai ac rule way 
show case similar ai yields ai 
local system linear logic vi ai ai observe similarity case vi proof lemma 
vii ai viii ai ai 
decomposition ai ix nz thenthe situation similar previous case difference rule needed 
contractum ai redex overlap 
impossible 
show complete proof theorem 
proof theorem apply transformations derivation slls slls ai slls ai step apply proposition replace instances rules derivation consisting 
lemmata applied step permute instances ai top derivation 
ai slls ai ai slls ai step apply propositions get derivation slls observe number instances ai derivation change process 
step dual step replace instances rules instances 
ai slls ai ai ai ai slls ai ai ai step continue permuting instances ai dual step 
yields desired derivation new instances ai introduced ai permuted 
apply propositions dual step 


local system linear logic way rules handled ai permuted compromise simplifying presentation 
alternatives rule nm case lemma 
rule nm switch case iii case iv 
rules nm fall case ii rules nl nz respectively 
rules nl solution 
need lemma 
alternative introduce rule cut elimination argument section 
replace example ai ai rule derivable system slls need cut interaction doing 
means employing rule theorem cause difficult termination problem 
definition define rules ai ai constant 
obviously special cases ai ai instance ai ai ai defined dually ai ai strengthen theorem 
corollary derivation slls ai ai constant 
slls ai ai ai ai derivation 
decomposition structures proof easy see rules ai ai permute switch rule 
critical case looks follows ai ai yields ai ai get result applying theorem permute instances ai top 
remaining instances ai permuted newly introduced instances proceed dually separate ai ai bottom 
lazy separation thinning sequent calculus system linear logic see chapter weakening rule applied lazy way 
means proof search application weakening delayed moment 
case classical logic ts bt 
system slls rule applied lazy way instances rules sllst propositions strongly equivalent rule top instances rules sllst rule bottom derivation 
rule permuted rule ai see definition ai 
seen derivation ai theorem derivation structures slls ai sllst derivation slls sllst sllst ai ai sllst ai 
local system linear logic theorem derivation structures slls ai sllst ai derivation slls sllst sllst ai ai ai sllst ai show investigate permutation rules sllst rules system slls 
order simplify situation permute rule rules slls sllst 
lemma rule permutes rule slls ai sllst ai 
proof consider derivation slls ai sllst ai 
loss generality assume application nontrivial 
follow case analysis 
redex inside contractum 
application nontrivial 
contractum inside active structure theredex inside passive 
case problematic rule iwill show general case contractum interfere 
sllst ac ai nz case impossible 
ii reduce case case associativity plus context 

decomposition iii ai rule yields ai 
iv 
local system linear logic vi vii ac rule follows viii yields 
decomposition ix thenthe situation similar previous case rule 
thenthe situation case rules 
xi rule yields contractum redex overlap 
impossible 
proof theorem apply transformations derivation slls ai slls ai ai ai ai slls sllst ai ai ai step apply theorem step replace instances rules sllst instance 
ai slls sllst ai ai ai ai slls sllst sllst ai ai ai step continue permuting instances applying lemma 
dually instances rules sllst replaced step permuted 
local system linear logic step 
ai slls sllst sllst ai ai ai ai sllst slls sllst sllst ai ai sllst ai proposition applied get desired derivation step 
proof theorem apply transformations derivation slls ai ai slls ai ai ai ai ai ai slls sllst sllst ai ai ai ai apply corollary 
second step steps previous proof 
instances permuted ai instances permuted 
decomposition ai lemma dual statement 
ai ai slls sllst sllst ai ai ai ai ai ai slls sllst sllst ai ai ai ai proof lemma shows new instances introduced permuted ai permute ai 
step 
ai proceed dually 
mentioned conjecture possible obtain derivation slls sllst sllst applying method rule permuted described encounters instance ai problematic case replace ai apply proposition 
proceed dually rule permuted 
order show termination similar argument decomposition theorems system sels section 
eager separation atomic thinning ability applying inferences deep inside structures allows apply thinning lazy eager way 
means proof forget material needed applying thinning go proof applying thinning weakening 

local system linear logic theorem proof lls structure proof lls result impossible sequent calculus allow deep inference 
top symmetry allows extend result derivations theorem derivation structures slls slls derivation proofs theorems similar previous decomposition results 
show permuted permuted 
start show main difficulties occur 
observe atomicity 
example derivations clear instances permuted reason problem occur proof theorem rule case structure inserted guarded exponential case 
case atomic thinning result completely trivial 
encounter fact problems atomic contraction section permuting happen meets instance interaction rule follows ai replaced ai 
decomposition new instance introduced permuted 
problem show terminate eventually 
atom inserted instance constants 
encounter cases obvious instance permuted 
problems solved way done atomic contraction section 
words cut elimination permuting repeatedly termination reached 
br br nnler uses termination argument show theorem classical logic 
reader familiar observe classical logic situation simpler instance ai destroyed hit atomic case linear logic 
show rule permuted 
order keep situation clear possible introduce rules ac constant 
obviously special case instance instances rule ac trivial 
lemma rule permutes rule slls ai ac 
proof consider derivation slls ai ac 
loss generality assume application nontrivial 
follow case analysis 
redex inside contractum impossible 
contractum inside active structure theredex inside 
possible ac 
ac yields 
local system linear logic contractum redex overlap 
impossible 
remains show rules permuted 
method possible permuting method ac section proceed similar ai section proceed similar section 
sake simplification observation 
instance replaced instance rule similarly instance instance instance instance 
prove lemma lemma derivation structure slls slls derivation proof instance inside instance instances ac removed trivial instances ac ac replaced respectively 
remains permute instances top 
repeatedly apply lemmata 
lemma derivation structure slls slls derivation proof dual lemma 
proof theorem immediate consequence lemma 
proof theorem similar proof theorem 

discussion inspection proofs theorems show rules ac introducing new instances ac 
permuted introducing new rule instances 
consequently results theorems put way theorem derivation ac slls ac ac ac slls structures derivations ac slls ac ac ac proof proof similar proof theorem 
discussion chapter shown possible calculus structures local system linear logic particular possible reduce application contraction atoms 
due ability applying inferences deep inside structures impossible sequent calculus 
drawback system lls mentioned 
additives needed reducing absorption weakening local rules separation property lost system lls 
possible consider multiplicative additive fragment independently exponentials 
restriction contraction atoms may useful proof search done distributed way 
huge amount nondeterminism induced freedom applicability rules number rules system lls unsuitable practical proof search 
means important problem research control nondeterminism 
happen focusing proofs relations connectives done mil 
possible find way focus proofs depth structures 
section shown decomposition results 
proved permutation results turn tedious case analyses 
question arises general underlying principle simplify proofs 
open question possible find system slls equivalently system sls decomposition system sels theorem 
local system linear logic allows separation core noncore noncore interaction core interaction noncore possible relation cut elimination see section explanation 
think methods thesis sufficient bring light matter 
interesting result chapter system slls fact linear logic 
surprising system basis guglielmi relation webs gug tried reduce rule system sels atomic version 
realised 

additives linear logic tiu medial rule classical logic bt reducing contraction atomic version 
reader learn system slls discovered system sls 
mix switch chapter contains small sections 
section investigate mix rule nullary version added sequent calculus system linear logic incorporated calculus structures 
rules importance thesis necessary noncommutative connective discussed chapter 
section seen link previous chapters particular chapter chapter 
section restrict multiplicative fragment linear logic extended mix nullary mix 
particular study derivability system contains switch rule 
purpose give algebraic characterisation derivability seen symmetric version correctness criterion multiplicative proof nets ret 
section crucial chapter section contains supplementary results needed 
mathematical viewpoint results section importance thesis 
seen step algebraic principles decomposition theorems chapter 
ideas discussed reappear chapter 
adding rules mix nullary mix sequent calculus system linear logic chapter extended mix rule nullary version aj fr ret mix mix reasons rules valid semantics linear logic example coherence spaces gir game semantics aj 
rules easily translated rules calculus structures nx 
mix switch rules self dual part fragment fragment 
consider multiplicative exponential linear logic discussed chapter 
add rules obtain systems mell mell mix mix sels sels nx els els nx theorems hold system sels els mell particular cut elimination theorem 
obvious happens decomposition 
rules nx noncore incorporated decomposition theorems 
simply adding rules nx structures offers elegant solution employs known fact mix mix rules say 
follows 
rule nx presents linear implication rule stands linear implication system presence rule implies 
conversely derivable system means presence rules nx equivalent equation 
reason follow gug introduce single symbol denote unit par times introducing different symbols equation identifies 
unit considered atom 
additives considered longer contain constants 
definition countable set atoms 
set equipped bijective function suchthat letr set expressions generated syntax 
adding rules mix nullary mix associativity commutativity exponentials unit negation basic equations syntactic congruence els structures atom stands atom 
set isdefined smallest congruence relation induced equations shown 
els structures denoted 
elements equivalence classes expressions 
said chapter see apply 
particular omit superfluous parentheses referring structures 
rules influenced new syntax 
interaction weakening rules modified way constants replaced unit ai ai rules formally different rules ones defined section names 
order avoid ambiguities name sels new system shown 
consequence new syntax change axiom 
rule called unit 
system els fragment system sels axiom shown 
results concerning systems sels els chapter hold systems sels els inparticular wehave decomposition theorems cut 
mix switch ai ai system sels ai system els elimination stronger version theorem system obtained system els replacing switch rule deep switch 
consequently interpolation theorem theorem hold system sels proofs literally permutation results section 
collapsing units results longer true 
example rule ai longer permute 
derivation ai switch rule way done rule lemma 
go details chapter discuss 
adding rules mix nullary mix ai ai system ss ai system extension els particular section show relevant permutation results 
consider multiplicative fragment 
definition structure els structure contain exponentials substructure definition system ss built rules ai ai ands 
system obtained fragment ss axiom shown 
results section discussion section follows immediately system linear logic mll plus mix mix 
proof gug system called system 
results mentioned systems sels els obviously hold systems ss noncore rules proofs simpler 
particular case decomposition theorems collapse single decomposition theorem 
mix switch theorem derivation suchthat ss ai ai structures mention interpolation theorem needed section 
theorem interpolation derivation derivations suchthat ai ai ss structures proof fact immediate consequence interpolation theorem sels proof literally theorem mentioned relevant permutation results refined section 
system ss situation simpler give direct proof 
observe case system ss start decomposition theorem order obtain interpolation 
necessary replace inside instances ai sai see page instances ds ns definition page 
derivation ai ds ns sai decomposed sai ns ai ds applying lemma lemma 
lemmata collapsing constants problematic rule permuted considered nontrivial 
rules ds ns instances sai inside 
switch rule replaced ai instances ai permuted instances ai permuted derivation desired shape 
cut elimination result immediate consequence interpolation 
theorem cut elimination systems ss equivalent 
corollary needed section 
corollary structures 
switch rule ss section inspect systems ss closely 
main result algebraic criterion derivability switch rule 
precisely show kind criterion structures fulfill order derivation reader familiar proof nets gir dr ret observe seen top symmetric version correctness criterion proof nets 
relation proof nets precise 
reader familiar proof nets need worry paragraph 
ret ch 
retor introduces proof nets series parallel graphs 
called criterion shown series parallel proof structure proof net corresponds sequent calculus proof mll plus mix plus mix contain cordless circuit 
gug guglielmi introduces relation webs shows correspondence structures thesis 
furthermore obvious correspondence guglielmi relation webs ch 
retor series parallel graphs 
iwill give basic ideas objects 
possible obtain correctness criterion proof nets criterion provability structures 
words structure possible judge algebraic properties proof 

mix switch explain criterion terms structures need reader familiar proof nets 
show directly relation criterion provability established going detour proof nets 
definition multiset occurrences atoms structure denoted occ defined inductively follows occ occ occ occ occ occ definition called balanced atom occurs exactly occ set 
example balanced 
occ occ definition balanced structure binary relations set occ follows 
atoms occ leta exist contexts sa sb sa sb sa sb sa sb words write par relation inside anda times relation see definition page 
immediately definition get observations structure rand symmetric 
atoms occ words occ occ occ definition relations easily extended balanced structures arbitrary structures 
essentially idea guglielmi relation webs gug coloured complete undirected graphs vertices atoms structure edge green red ch retor series parallel ret essentially red edge edge edge matching pair atoms 
reason proof structures characterizing proofs derivations 

switch rule definition structures 
structure ift obtained replacing atoms possibly unit 
substructure quasi substructure example structure quasi substructure substructure notion relation web explained quasi substructure correspond relation 
definition am different atoms 
structure am called am circuit structure am am called am 
circuit called negation circuit am 
terms relation webs relations circuit explained follows 
consider vertices am am am edges am 
structure circuit edges complete graph green edges red 
setting circuit corresponds exactly ch 
retor definition cordless circuit 
definition structure am number atoms 
structure contains am circuit ifr quasi substructure am circuit 
similarly contains am ifr quasi substructure am 
structure contains ifr quasi substructure circuit atoms cn contains cn cn circuit 
example structure contains circuit contains negation circuit 
proposition balanced structure 
contains negation circuit provable proof proof statement similar proof lemma 
collapsing units greater applicability switch rule taken account 

mix switch negation circuit contained way contradiction assume provable balanced provable proof obtained proof replacing atoms occurring 
proceed induction show contradiction 
base case inductive case rule instance proof inside substructure wehavethat possibilities apply notational convenience set zj aj convention forj 
means zn 
aj assume 
zk andk ku 
loss generality assume 
ku 
ku hs wheres 
proof zk zh zn proof remains valid replace am 
ak contradiction induction hypothesis 
ii aj assume 
zk andk ku 
loss generality assume 
ku 
ku hs wheres 
proof zk zh zn 
switch rule proof remains valid replace am ku 
ku contradiction induction hypothesis 
iii zk zl kt lu 
thenthere proof zk zl zh zn hs kt lu 
loss generality assume 
replace zk zl zh zn 
zk zl zh zk zl zl zh zk zl zk zl zh zn zk zl zh zn 
loss generality assume replace inside atoms am 
proof ak ak contradiction induction hypothesis 
definition balanced structure 
relation occ occ defined follows 
forany atoms occ atoms cn occ cn cn cn cn cn cn 
mix switch quasi substructures reason definition relation observation 
balanced structure contains negation circuit atoms occ follows 
contains negation circuit 
conversely atoms thenthere atoms cn occ cn cn cn substructure useful lemma 
lemma balanced structure contain negation circuit 
contain negation circuit 
proof way contradiction assume contain negation circuit contain negation circuit 
consider structures occ occ atoms occ occ occ iff iff occ occ words relation atoms contains negation circuit atom occ atom occ definition construction 
observe cases occ occ 
argumentation occ occ occ 
cases 
definition cn occ dm occ structures cn cn cn cn cn cn dm dm dm dm dm dm quasi substructures contains negation circuit cn dm contradiction assumption 

switch rule 
case needed show negation circuit inside dm occ dm dm dm dm dm dm quasi substructures contains negation circuit dm 
previous case 



negation circuit free 
proposition structure atom occ dual occur contain negation circuit provable proof induction cardinality relation occ occ iwill show proof base case provable 
thenthere atom occ occ substructure 
inductive case 

pick inside atom contains negation circuit 
sa forsome contexts sa 
loss generality assume chosen sa par context 
words sa sa possibilities sa obtain ai exists induction hypothesis 
sa ands 

proof ai exists induction hypothesis 
exists lemma 

mix switch sa 

similar previous case 
sa ands 

exist lemma induction hypoth 
wehavethat proof shows proof search calculus structures driven atoms sense distance atoms structure number atoms number atoms different relation 
proof search move closer distance zero 
isa substructure kill instance ai 
lemma shows pair atoms possible move closer 
fact basis alternative approach uniform provability 
main connective goal formula matching pair atoms determines rule applied proof 
idea quite speculative mentioned occurred completely different context bibel linear connection method bib 
exploration idea precise relation bibel remain open research 
theorem puts previous results shows notion negation circuit criterion provability system theorem balanced structure 
provable contain negation circuit atom occ dual occur proof provable 
proposition contain negation circuit 
proof atom removed instance ai 
time dual removed 
occ wehave occ direction apply proposition 
interested reader ask said balanced 
condition check atom occurs dual 
obviously provable 
find pairing atoms occ atom paired 
atoms pairing respected structure balanced 
contain circuit provable 
word checking unbalanced structure provable possible pairings checked worst case 

switch rule example consider 
rename get negation circuit rename obtain provable structure 
far considering provability 
investigate derivability means explore time top symmetry calculus structures 
lemma am different atoms 
derivation am am am proof proof carried essentially way done proofs lemma proposition 
lemma cut elimination argument employ cut elimination proving elegant way 
way contradiction assume derivation am am am loss generality assume ai rename 
cut elimination corollary am par structures commutative am proof circuit contradiction proposition 
lemma essentially says derivation circuit 
fact motivation introducing 
theorem says converse true attempt transform circuit derivation 
informal statement precise follows 
definition set balanced structures relation defined follows 
occ occ atoms am occ contains am contains am circuit 

mix switch theorem balanced structures occ occ suchthat atom occurring occur iff ss iff proof iwill prove equivalence statements proving immediate corollary 
iff apply interpolation theorem 
remain instance ai ai atom pairs inside way contradiction assume atoms am occ contains am circuit contains am 
derivation remains valid atoms am replaced 
yields am am am contradiction lemma 
show structure contain negation circuit 
apply proposition obtain proof way contradiction assume circuit say 
proof proposition set zj aj convention forj 
means zn contain pair dual atoms number come zn quasi substructure zn quasi substructure 
discussion zn quasi substructure zn quasi substructure 
loss generality assume zn zn inr 
zn quasi substructure 

zn circuit contained immediate consequence theorem get relation partial order definition obvious 
corollary relation partial order 
proof reflexivity obvious trivial derivation transitivity obvious derivability relation transitive 
antisymmetry obtained fact switch rule invertible 
means derivation switch rule applied nontrivial way case see proof lemma 
discussion section shown rules mix nullary mix incorporated naturally calculus structures 
section shown algebraic characterisation derivability switch rule 
attentive reader guessed result byproduct investigation decomposition theorems section 
results section considered preliminary results general characterisation derivability systems restricted multiplicative linear logic 
opinion step include guglielmi noncommutative connective seq gug characterisations theorem theorem 
come back topic chapter seq discussed detail 
section seen starting point research direction suggested gug certain notion implicational structural completeness suggested 
quite speculative want go details 
want mention implication theorem says system 
mix switch completeness conjectured guglielmi gug called system 
switch rule play important role presentation classical logic calculus structures bt br br 
means classical logic results section interest 
extension multiplicative exponential fragment linear logic chapter discuss extension multiplicative exponential linear logic noncommutative connective self dual respect linear negation 
precisely investigate properties logical system called system nel conservative extension mell mix mix section 
self dual noncommutative connective introduced guglielmi gug gug system bv consequently system nel conservative extension system bv bringing multiplicative connectives linear logic exponentials self dual noncommutative connective system nel seen perspectives extension bv ability reusing information second extension mell ability modelling sequentiality 
section define structures rules system nel insection iwill show decomposition theorems shown system sels section hold system nel iwill refine permutation results section extend results section 
section prove cut elimination result system nel techniques decomposition splitting guglielmi gug 
second decomposition theorem employed way chapter 
splitting eliminate core fragment 
explain general idea splitting show complete proof splitting lemma lemma show get cut elimination 
refinement cut elimination proof system bv gug 
section show system nel undecidable simulating computations counter machine 
encoding proof correctness direct natural simple 
proof soundness encoding little intricate sequent calculus phase semantics available nel 

noncommutative extension mell associativity commutativity exponentials unit negation basic equations syntactic congruence nel structures structures rules definition countable set atoms bijective function suchthat letr set expressions generated syntax stands atom atom 
set isdefined smallest congruence relation induced equations shown 
nel structures denoted 
elements equivalence classes expressions 
omit superfluous parentheses 
nel structures seen extensions els structures defined section structures shape rh called seq structures gug 
define new rules deal seq 
definition structural rules called seq respectively 
observe rules flexible presence unit par times seq 
example derivation valid 
structures rules ai system ai interaction core noncore observe interaction rules presence seq reducible atomic form proposition 
derivation shows corresponding inductive case definition system symmetric noncommutative exponential linear logic shown obtained system sels adding rules 
fragment ai fragment ai 
core system andthe noncore 
axiom rule section 
rule called unit 

noncommutative extension mell ai system nel definition system nel obtained fragment system axiom 
shown 
systems discussed thesis theorem systems nel strongly equivalent 
course cut elimination result system nel 
theorem cut elimination system nel equivalent subsystem system containing nel 
point sequent calculus obtaining proof cut elimination 
reason sequent system nel 
rely methods developed calculus structures 
nel iwill decomposition splitting 
detailed proof theorem carried section 
corollary rule admissible system nel 
corollary nel structures 
nel define system bv fragment nel system calculus structures gug 
need proving results chapter 
definition bv structure nel structure contain exponentials substructure equations defining syntactic congruence bv structures structures equations concerning exponentials removed 
definition system sbv rules ai ai andq multiplicative part 
core system sbv sbv 
means noncore rules system sbv 
structures rules ai ai system sbv system bv ai interaction core definition system ai obtained fragment system sbv axiom called system bv basic system 
shown 
theorem system nel conservative extension system els system bv proof show nel conservative extension els els structure 
assume proof nel proof obtained way seq context occurring inside structure inside replaced 
rule application remains valid seq rule trivial omitted 
means valid proof system els showing nel conservative extension bv bv structure assume proof nel observe rule system nel introduce going proof 
structures applications inside 
means applications promotion 
noncommutative extension mell rule trivial structures omitted 
theorem ensures cut elimination result nel hold systems els bv seen follows els els structure 
apply corollary get proof nel nel conservative extension els proof els similarly proceed bv inparticular wehave corollary bv structures 
sbv bv shown tiu tiu possible system bv sequent calculus 
consequence theorem tiu result hold nel sequent calculus system equivalent system nel 
decomposition section show second decomposition theorem sels see section hold system 
theorem decomposition derivation structures suchthat ai ai 
decomposition theorem second decomposition derivation structures suchthat ai ai proof theorems similar fact literally proofs theorems 
points different deserve attention 
collapsing units par times allows flexible application rules 
consequences permutation results 
reason section redo necessary permutation proofs separating weakening interaction decomposition 
second presence seq impact proof nonexistence promotion cycles separation absorption lemma crucial proposition generalised 
trivial done lemma 
consequence presence seq proving derivation rn tn tn rn tn see lemma show derivation rn tn tn rn tn 
considerably difficult done section 
fortunately done 
proofs theorems exactly system sels 

noncommutative extension mell lemma easy extension lemma 
observe order formally precise necessary redefine notion basic context see definition include seq proof decomposition theorems system context context inside scope exponential 
lemma basic context structures 
derivation proof structural induction 
cases shown proof lemma page 
show remaining case context structures exists induction hypothesis 
permutation rules proof proposition needed proofs decomposition theorems sels chapter introduced rules 
proof decomposition theorems needed considered permutation results section 
lemma rule ai permutes rule system sbv proof consider derivation ai nontrivial 
cases consider 
decomposition redex inside active structure contractum 
case impossible structure inside 
contractum inside active structure theredex inside passive 
permutation proofs chapter case problematic 
unit par seq times rule cases consider 

contexts wehave yields ii 
similar 
iii 
subcases context structures yields context structures similar 
context structures yields context structures similar 

noncommutative extension mell context structures similar 
context structures similar 
context structures yields iv subcases context structures case iii yields context structures similar case iii 
context structures similar case iii 
structures yields structures yields 
decomposition structures similar 

subcases 
context structures similar iii 
context structures similar iii 

context structures similar iii 
vi 
similar 
vii 
subcases situation similar iv yields 
similar 
situation similar iv yields 
similar 

similar 

noncommutative extension mell 
similar 
viii 
similar vi 
ix ai 
similar vi 

subcases structures yields context structures similar 
structures case need employ wit context structures similar 
xi ai thenthere problem redex 
contractum redex properly overlap 
impossible overlap structure 

decomposition lemma rule ai permutes rule system 
proof dual lemma 
cycles derivations section show derivation rn tn tn rn tn 
showing cycle see section derivation turn crucial decomposition theorems 
showing show stronger result core system sbv fact generalisation lemma 
time cut elimination proving cut elimination argument 
lemma bn different atoms 
wn zn structures wi ai bi wi ai bi zj aj bj zj aj bj zn bn zn bn derivation wn sbv zn proof proof convention 
number structures zj structures zj aj bj proceed induction pair lexicographic ordering pair wehave base case derivation sbv sbv sbv 
noncommutative extension mell inductive case suppose derivation way contradiction assume derivation wn zn zj aj bj aj bj wi ai bi ai bi bottommost rule instance 
loss generality assume nontrivial 

possibilities apply 
aj bj thenthere suchthat wn zj aj bj zj zn zj aj bj zj zn contradiction induction hypothesis 
ii aj bj similar 

possibilities apply 
aj bj assume 
subcases ai bi derivation wn ai bi zi zi zn zi ai bi zi zn derivation remains valid replace am bm wi wn ai zi zn contradiction induction hypothesis 

decomposition zk andk kv 
loss generality assume kv 
kv hs wheres 
derivation wn zk zh zn derivation remains valid replace am bm 
wk bk zk contradiction induction hypothesis 
zk andv andk ku 
loss generality assume 
ku 
ku hs wheres 
derivation wn zk zh zn derivation remains valid replace am bm ku 
wn zn contradiction induction hypothesis 
ii aj bj similar 
iii zk zl kr lv 
thenthere derivation wn zk zl zh zn hs kr lv 
loss generality assume 

noncommutative extension mell replace zk zl zh zn 
zk zl zh zk zl zl zh zk zl zk zl zh zn wn zk zl zh zn 
subcases 
replace inside atoms am bm wk wl ak bl zk zl contradiction induction hypothesis 
replace inside atoms am bm wl wk wn zl ak bl zk zn contradiction induction hypothesis 
iv zk zl andv kt lu 
similar iii 
possibilities apply 
aj bj assume 
zk andk ku 
loss generality assume 
ku 

decomposition ku hs wheres 
derivation wn zk zh zn derivation remains valid replace am bm ku 
wn zn contradiction induction hypothesis 
ii bj aj similar 
iii zk zl kt lu 
similar iii 
see case iii proof page 
property sufficient completely characterise derivations core sbv theorem generalised case seq 
order state conjecture precisely need generalise definitions section 
definitions occurrences balanced structures quasi substructures respectively easily extended case bv structures 
example 
occ means balanced occur 
structure substructure substructure structure 
hand definition circuits needs attention presence seq 
definition generalises definition page 
definition am different atoms 
structure zn am circuit zj zn am am structure wn am wi called negation circuit am 

noncommutative extension mell example structure isa circuit 
definition repetition definition bv structures 
definition bv structure am number atoms 
structure contains am circuit ifr quasi substructure am circuit 
similarly contains am substructure am 
structure contains negation circuit ifr quasi substructure circuit 
example bv structure contains circuit definition relation bv structures literally structures 
observe notion circuit changed 
able state conjecture mentioned conjecture balanced structures occ occ iff iff sbv sbv implication third statement conjecture immediate consequence lemma 
implication second statement triviality sbv subset sbv 
possibility showing implication second third statement proposition shown chapter corollary 
difficulty proving direction conjecture consists constructing structures method shape switch rule ensures cut elimination see ret gug method proposition behaviour seq see tiu 
proving conjecture give understanding derivability system sbv gug establish equivalence system bv pomset logic ret ret ret 
come main purpose lemma section 
corollary rn tn nel structures 
derivation rn tn tn 
cut elimination proof way contradiction assume derivation 
rules access exponentials 
replace inside substructures rn tn new atoms bn respectively 
gives valid derivation bn bn contradiction lemma 
cut elimination section prove cut elimination system nel theorem 
second decomposition theorem way done system els section 
eliminate core rules technique splitting combined context reduction done system ls section 
proof splitting lemma simpler section noncore rules need considered additives 
splitting technique splitting introduced guglielmi gug proving cut elimination system bv idea splitting consider purely multiplicative sequent system example multiplicative linear logic 
proof sequent wheref formula contains subformula proof instance rule splits context assumption identity reduced atomic form 
words proof composed pieces asfollows calculus structures different proofs correspond sequent calculus 
differ different possible sequencing rules rules calculus structures smaller granularity larger applicability 

noncommutative extension mell proofs fits scheme illustrates idea splitting technique 
precisely derivation implements context reduction proper splitting 
principles stated general follows context reduction provable reduced structure pr pr explicitly shown derivation 
splitting reduced pr pt pr pt inthe example structure obtained context reduction reduced 
context reduction proved splitting core matter 
biggest difficulty resides proving splitting mainly requires find right induction measure 
particularly problematic noncore rules contraction need considered different units case system ls see section 
case nel induction measure size structure natural number informally speaking number atoms occuring structure 
formally defined follows 
definition size nel structure denoted size defined follows size size size size size size size size size size example structure 
definition size proof nel pair size size length 
cut elimination proofs nel nel size size size size size size length length definition notational convenience define system nelm system obtained nel removing noncore rules nelm nel ai lemma splitting nel structures 
provable nelm thenthere structures pr pt suchthat pr pt nelm nelm pr nelm pt provable nelm thenthere structures pr pt suchthat pr pt nelm nelm pr nelm pt proof thenthe statements trivially true 
consider case statements proved simultaneously induction size proof respectively 
follows case analysis conceptually similar cut elimination proof sequent calculus 
consider bottommost rule instance proof nelm application nontrivial 
distinguish conceptually different cases redex inside 
substructure structure redex 
substructure structure redex 
compared cut elimination proof sequent calculus see section case similar commutative case case similar key case 
counterpart case sequent calculus possibility deep inference 
redex inside 
redex inside thenthe proof shape nelm 
noncommutative extension mell applying induction hypothesis weget pr pt nelm nelm pr pr pr nelm pr pr ii redex inside analogous previous case 
iii redex inside thenthe proof shape nelm applying induction hypothesis weget pr pt nelm nelm pr pr pt nelm nelm pt nelm pt substructure structure redex 
possible 
subcases seq noncommutative nelm applying induction hypothesis weget nelm nelm nelm size size size instance nontrivial size 

cut elimination size apply induction hypothesis 
get pr pt nelm build nelm pr pr pt nelm nelm nelm ii nelm applying induction hypothesis weget nelm nelm nelm pt nelm apply induction hypothesis instance nontrivial 
get pr pt nelm build nelm pr pr pt nelm nelm nelm iii nelm nelm pt 

noncommutative extension mell analogous previous case 
substructure structure redex 
case possibility nelm applying induction hypothesis weget nelm nelm nelm instance nontrivial 
size size size size means apply induction hypothesis get pr pt nelm pr pt nelm nelm pr nelm pr nelm pt nelm pt pr pr pr pt pt 
build pr pr pt pt nelm pr nelm nelm pr pt nelm nelm pr pr pr pr nelm pt nelm pt pt pt pt similar 
consider bottommost rule instance proof nelm assume application nontrivial 
distinguish cases 
cut elimination redex inside analogous 
substructure inside passive structure theredex 
difference derivation pr pt nelm replaced pr pt nelm substructure inside active structure theredex 
case similar 
possibilities nelm applying induction hypothesis weget nelm nelm nelm instance nontrivial apply induction hypothesis get pr pt nelm nelm pr pr pr pr pt nelm nelm ii nelm nelm nelm pt pr pr nelm similar 

noncommutative extension mell lemma splitting exponentials nel structures 
provable nelm thenthere structures pr pr nelm nelm pr provable nelm thenthere structure pr suchthat pr nelm nelm pr proof case trivially true 
assume 
iwill proceed induction measure previous proof 
consider bottommost rule instance proof nelm assume application nontrivial 
cases redex inside analogous previous proof 
substructure inside passive structure theredex 
previous proof time pr nelm pr pt nelm substructure inside active structure theredex 
possibility nelm applying induction hypothesis pr pr nelm pr 
get pr nelm nelm pr 

cut elimination consider bottommost rule instance proof nelm assume application nontrivial 
cases redex inside analogous previous proof 
substructure inside passive structure theredex 
previous proof time pr nelm pr pt nelm substructure inside active structure theredex 
possibility applying part weget qh nelm nelm pr qh 
build nelm qh qh qh nelm lemma splitting atoms atom nel structure 
proof nelm derivation nelm proof similar previous proofs 
consider bottommost rule instance proof nelm nontrivial 
redex inside 

noncommutative extension mell atom inside passive structure theredex 
time pr pt nelm nelm atom inside active structure 
possibility ai immediately get context reduction nelm nelm ai idea context reduction reduce problem concerns arbitrary deep context problem concerns shallow context 
case cut elimination example able apply splitting 
lemma context reduction nel structure context 
provable nelm thenthere structure pr suchthat pr provable nelm structure wehave pr nelm pr nelm proof proof carried induction context 
thenthe lemma trivially true pr 
suchthat proper par 
thenthe lemma trivially true pr 
ii structure 
apply splitting lemma proof ps pt nelm nelm ps applying induction hypothesis get pr pr nelm ps pr nelm ps nelm pt nelm pr 
cut elimination build pr nelm ps nelm pt ps ps pt nelm pr nelm ps nelm pt ps ps pt nelm iii context structure 
apply splitting lemma proof ps pt nelm nelm ps applying induction hypothesis get pr pr nelm ps build pr nelm ps nelm ps pt ps pt nelm pr nelm ps pr nelm ps nelm pt nelm nelm pr ps pt ps pt nelm iv context 
apply splitting exponentials lemma proof ph nelm nelm ph applying induction hypothesis get pr pr nelm ph pr nelm ph nelm pr 
noncommutative extension mell build pr nelm ph ph nelm context 
apply splitting exponentials lemma proof ps nelm nelm ps applying induction hypothesis get pr pr nelm pr nelm ps ps build pr nelm ps ps nelm nelm pr 
case ii 
context 
case iii 
context case iv 
context case 
elimination fragment section show lemmata consequences splitting say thatthe core rules system admissible applied shallow context 
show context reduction extend lemmata context 
result get modular proof cut elimination core rules ai andp shown admissible independently 

cut elimination lemma structure atom 
provable nelm provable nelm 
proof apply splitting proof 
yields pa nelm applying lemma get build nelm pa nelm pa nelm nelm ai nelm pa nelm lemma nel structures 
provable nelm provable nelm 
proof applying splitting proof get structures nelm nelm applying splitting get pr pt pu pv pr pu nelm pt pv nelm nelm pr nelm pt nelm nelm pu nelm pv 
noncommutative extension mell build nelm pr pt pu pv pr pt pu pv pr pu pt pv nelm nelm lemma nel structures 
provable nelm provable nelm 
proof applying splitting proof get structures nelm nelm applying splitting get pr pt 
ptn suchthat build pr nelm pt ptn nelm nelm nelm pr nelm nelm pt ptn pr pt ptn pr pt ptn pr pt ptn nelm nelm context reduction extent statements lemmata shallow contexts contexts 

cut elimination lemma structures atom context 
nelm nelm nelm nelm nelm nelm proof statements proved similarly 
show third 
proof apply context reduction get structure suchthat nelm structures nelm particular nelm lemma proof nelm 
nelm nelm nelm easily give proof cut elimination theorem system nel 
proof theorem apply proof decomposition theorem yields ai ai second 
noncommutative extension mell structures 
instances disappear premise unit compare corollary 
words nelm ai instances ai eliminated starting topmost instance ai 
nelm nelm ai nelm nelm ai applying lemma 
observe able obtain proof shape ai compare proposition rule ai permuted introducing instances see case proof lemma 
reason attempts prove cut elimination bv nel permutation argument done section els failed 

undecidability system nel proposition proof nel structures 
nelm undecidability system nel linear logic gir complexity provability problem fragments studied 
multiplicative fragment mll complete kan multiplicative additive fragment mall linear logic undecidable lmss 
decidability multiplicative exponential fragment mell open problem 
purely noncommutative setting presence mutually dual noncommutative connectives multiplicatives exponentials sufficient get undecidability lmss 
section show provability system nel undecidable 
means mixed commutative noncommutative system single self dual noncommutative connective multiplicatives exponentials sufficient get undecidability 
showing guglielmi proposes gug encoding post correspondence problem correspond sequential composition words 
able find complete proof lines encoding counter machines tape turing machines min advantage simpler 
undecidability nel shows possible undecidable propositional multiplicative exponential system relying additives linear logic mutually dual noncommutative connectives lmss second order quantifiers ls 
shows ability copying information reusing program instructions missing ingredient making bv obviously decidable undecidable 
turns decidable believe border undecidability crossed self dual seq allows model tapes turing machine 
particular seq allows test head turing machine semi infinite tape zero test 
section introduce counter machines min lam show section encoded system nel 
encoding pretty inspired kan proof completeness easy exercise done section 
proof soundness encoding quite different done far 
reasons simple way extracting computation sequence machine proof encoding done lmss kan full linear logic possible calculus structures allows 
noncommutative extension mell freedom applying permuting rules sequent calculus 
second phase spaces gir done laf ls kan possible far phase semantics available nel 
method section 
proof system nel encoding counter machine transformed certain normal form allows remove exponentials 
resulting proof multiplicative fragment structure shape call weak encoding 
proof extract computation step machine proof multiplicative fragment weak encoding 
inductive argument possible obtain computation sequence 
order carry technical details prove facts system bv done section 
counter machines counter machines introduced minsky min tape turing machines 
showed usual turing machine simulated counter machine 
lam lambek showed recursive function computed counter machine number definition counter machine tuple qf finite set states called initial state qf called final state represent initial positions heads tapes finite set transitions set possible instructions 
dec zero dec zero example running example section dec dec zero definition qf machine 
configuration state natural numbers 
configuration initial configuration 
configuration step configuration written cases holds dec zero dec zero 
undecidability system nel configuration steps configuration written suchthat 
configuration written 
words relation transitive closure 
example machine example example definition qf accepts qf example machine example accepts example configuration 
precisely accepts configuration 
particular accepts initial configuration 
theorem general undecidable counter machine accepts initial configuration 
min lam definition defined counter machines final state standard textbook definition min hu koz final states 
problem counter machine final states qf transformed counter machine final state accepts configurations adding new state qf state transition zero qf encoding counter machines nel structures atom thena denotes structure copies 
noncommutative extension mell encoding counter machine qf 
iwill introduce fresh atom denoted iwill need atoms loss generality qz 
qf qi 
configuration encoded structure finite th 
iwill define structure tk transition tk asfollows 
tk qi qj tk qi qj tk qi dec qj tk qi qj tk qi zero qj tk qi qj tk qi qj tk qi qj tk qi dec qj tk qi qj tk qi zero qj tk qi qj iwill say structure encodes ift tk 
machine encoded structure th qf structure called encoding example machine example encoded structure theorem accepts initial configuration encoding provable nel 
obtain immediately theorem provability system nel undecidable 
proof way contradiction assume existence decision procedure probability nel 
decide counter machine provable nel decide accepts initial configuration 
contradiction theorem 
remaining sections devoted proof theorem 
expected direction easy difficult 
start easy 

undecidability system nel completeness encoding lemma counter machine qf 
qi qj th qj cm qf nel th qi cm qf proof possible cases machine go qi qj counter incremented qi qj tk qi qj 
th qj qf ai th qi qi qj qf th qi qj qi qf th qi qj qi qf th qi qj qi qf th qi qf counter decremented qi dec qj andn qi qj 
th qj qf ai th qi qi qj qf ai th qi qi qj qf th qi qi qj qf th qi qj qi qf th qi qj qi qf th qi qj qi qf th qi qf counter tested zero qi zero qj qi qj 
th qj qf ai th qi qi qj qf ai th qi qi qj qf th qi qi qj qf th qi qj qi qf th qi qj qi qf th qi qf cases second counter concerned similar 

noncommutative extension mell lemma counter machine qf 
th cm qf nel th cm qf proof definition number 
apply induction lemma get result 
lemma counter machine qf 
proof nel th qf qf proof eliminate ti andq ai remaining structure 
prove direction theorem 
proposition counter machine qf 
proof qf nel th qf qf nel nel th cm qf exists lemma lemma 
example proof encoding example shape nel nel nel facts system bv show soundness encoding need establish facts system bv observation provable structure renamed way dual atoms mapped dual atoms result provable 
precise follows 

undecidability system nel definition atoms called clean atoms wehave lete qbe mapping clean sets atoms 
bv structure structure obtained replacing 
precisely defined inductively bv structures follows re example lemma clean atoms structure 
provable bv provable bv proof bv 
proof obtained replacing structure occurring inside se rule application remains valid 
valid proof 
bv example 
provable bv ai ai ai ai ai ai converse lemma general hold 
example isnot provable observation structure provable bv atom occurs 
see possibility atom disappear instance ai 
disappears 
proof structure iwill call killer occurrence atom instance ai 

noncommutative extension mell situation trivial atom occurs exactly 
example left hand side proof example killer hand side proof care necessary killer occurrence killer second second definition bv structure called structure contain generated grammar lemma bv structures structure 
bv proof structural induction case trivial lemma atom 
forthe inductive cases apply splitting lemma 
definition bv structure atom occurring atom unique occurs exactly 
example atoms unique 
lemma bv structure contexts atoms unique 
bv bv bv structure proof pick atom inside atom occurring inside 
derivation bv bv atom replaced structure lemma play crucial role proof soundness encoding counter machines 

undecidability system nel lemma bv structure structure atoms occurring unique provable bv provable bv proof bv 
splitting lemma structures bv applying lemma weget bv bv derivation bv bv apply lemma gives bv bv composing yields desired proof generalise proposition page 
notion negation circuit generalised definition 
section mainly concerned balanced structures structures atom occurs 
inspection proof proposition shows property needed atoms participate negation circuit 
motivates definition 
definition bv structure contains balanced negation circuit quasi substructure negation circuit atom occurs unique proposition bv structure 
contains balanced negation circuit provable bv proof contains balanced negation circuit atoms unique contains circuit 

noncommutative extension mell way contradiction assume proof proof remains valid atoms replaced trivial removed 
yields proof bv zn zj aj aj zn proceed induction show contradiction 
similar proof lemma 
induction measure simpler rule occur 
convention 
base case proof bv bv inductive case suppose proof bottommost rule instance bv zn zj aj aj loss generality assume nontrivial 
ai 

case proof lemma 
difference talking proofs derivations premise wn 
proposition related provability bv related derivability 
precisely believe converse proposition generalisation proposition hold 
conjecture balanced bv structure atom unique atom occurring occur 
provable bv contain negation circuit 
obviously conjecture conjecture 
fact statements equivalent means suffices prove 
iwill go details 
want mention conjecture equivalence ch 
retor pomset logic follows obviously definition negation circuit corresponds exactly ch 
retor cordless circuits ret 

undecidability system nel soundness encoding prove second difficult direction theorem explain difficulties arise 
main problem freedom applying rules calculus structures 
structure provable nel usually way doing 
consequence 
encoding machine certain shape big par structure containing structures seq structures preserved simulating computation machine proof proposition see example 
shape preserved arbitrary proof 
example encoding example proved follows nel nel nel ai computation corresponding counter machine obvious 
basic idea follows proof proof nel nel preserves extend shape encoding extract computation introduced 
definition qf 
bv structure called weak encoding ur qf 
noncommutative extension mell andq ur encode transitions tk 
observe weak encoding machine tk occur times occur 
lemma counter machine qf 
nel thenthere weak suchthat proof proposition proof nelm enc bv structure obtained enc removing exponentials proof obtained removing exponentials structure occurring inside 
manipulation rule instances remain valid promotion rule trivial omitted 
means valid proof system bv enc contain free 
derivation enc example example get lemma act bureaucracy 
idea rename atoms qz encode states machine way new atom occurs 
simplify extraction computation sequence proof 

undecidability system nel lemma qf counter machine ur qf weak encoding pr fresh atoms 
provable bv mapping structure pr provable bv atoms pr pr occur exactly pl pl occur inside wehave ul proof clean set 
structure contains occurrences atoms occurrences atoms ul contains exactly 
provable killer inside obtained replacing killer ol respectively suchthat ois exactly 
provable replacement continued proof mapping occurrence replaced ol 
atoms occur exactly atom occur inside 
ol ol form circuit inside proposition contradiction provability obtained replacing ol respectively 
ol atom occurs inside occur inside negation circuit inside 
obtained replacing ol respectively 
repeat get structures defines bijective mapping replaced 

provable bv provable bv atoms pr pr occur exactly atoms occur exactly atoms done pl pl occur inside example weak encoding example get 
lemma core proof soundness encoding 

noncommutative extension mell lemma qf ur qf weak encoding proof induction bv qf base case qf 
provable andq qf qf qf 
certainly qf qf 
inductive case lemma set pr mapping provable structure pr killer inside 

pr provable bv wehave pr provable 
assume ul ul ur qf 
weak encoding weak encoding lemma provable bv apply induction hypothesis get gives qf ul 
qf 
undecidability system nel 
pr mark inside atom inside killer way contradiction assume occurs inside pl pl forsome 
pl pl pr contains negation circuit pl proposition contradiction provability atom occur inside encoding configuration means 
pr show 
assume way contradiction 
mark atom killer occur inside pk pk forsome 
pk pk pr contains negation circuit pk pk pk proposition contradiction provability atom exist means andn 
means pr provable bv wehave pr 
noncommutative extension mell provable 
ul ul ur qf 
weak encoding lemma provable bv apply induction hypothesis get qf ul dec gives 
qf pr mark inside atom inside killer way contradiction assume occurs inside pl pl forsome certainly inside 
pl pl pr negation circuit inside pl proposition contradiction provability atom occur inside encoding configuration 
means pr iwill show 
assume way contradiction 
mark atom killer occur inside pk pk 
pk pk pr 
undecidability system nel contains negation circuit pk pk pk proposition contradiction provability atom exist means 
pr provable bv wehave pr provable 
ul ul ur qf 
weak encoding lemma provable bv apply induction hypothesis get qf ul zero wehave gives qf 

similar 

similar 

similar 
proposition counter machine qf 
nel proof apply lemma get qf bv weak encoding modify substructure ur qf 
lemma qf 
proof theorem direction proposition second direction proposition 

noncommutative extension mell discussion results chapter original motivation extend guglielmi system bv exponentials linear logic prove cut elimination new system show undecidable 
proving cut elimination turned difficult expected 
techniques decomposition splitting developed 
impact decomposition cut elimination discussed 
technique splitting general technique proving cut elimination calculus structures developed far 
technique permuting rules chapter fail binary connectives case full linear logic nel arguments done bt applied truth value semantics available case bv nel method sequent calculus done proof theorem page applied sequent calculus system available case bv nel 
proof undecidability system nel offered unexpected difficulties known techniques phase semantics laf ls kan extracting computation sequence sequent calculus proof lmss kan applied 
fact finding proof undecidability nel original motivation inventing notion negation circuit 
realised equivalence ch 
retor cordless circuits ret 
interesting observation undecidability result 
case propositional linear logic additives added mell order get undecidability 
additives added mll complete complexity provability problem jumps pspace 
case nel added mell get undecidability 
add seq mll thenthe complexity class increased 
provability bv np 
means seq sense weaker additives 
observation justified fact decomposition theorems sels section generalised case seq added far case additives added 
open problems chapter collected observations conjectures vague sketched research problems related results thesis consider important 
deserve investigation time go deeper matter 
order listed randomly imply preference order 
quantifiers calculus structures able deal quantifiers 
rules classical order predicate logic shown bt br 
rules order quantifiers linear logic similar de morgan laws equations free added equational theory 
advantages sequent calculus rules occur classical case linear logic rules sound sense premise implies quantifications second need proviso saying free inthe rule equational theory 
pattern continued second order propositional quantifiers rules similar 
add quantifiers language obvious way equations de morgan laws free 
open problems extend system sls rules observe proviso saying propositional variable allowed free context case sequent calculus 
observed bt br possible presence quantifiers reduce contraction atomic version adding rules contraction atomic new system longer called local rule arbitrary size introduced 
question arises various properties proofs derivations thesis valid 
particular happens splitting context reduction decomposition 
general recipe designing rules core part system calculus structures simple recipe gug 
consider core rules 
start rules binary connectives 
follow certain scheme little abuse notation written binary connectives de morgan dual 
example conjunction disjunction 
postulated usually 

relation decomposition cut elimination conjunction remains premise rule 
observe switch follows scheme special case rules mimic 
rules exponentials quantifiers see previous section follow scheme furthermore pattern modal logics ss 
get rules valid normal modal logics 
observed dun 
scheme responsible possible reduction interaction rules atomic version 
plays crucial role cut elimination argument splitting context reduction possible proof simple core fragment considered 
rules problematic noncore rules 
interaction fragment fixed system core fragment determined recipe described noncore fragment determines behaviour connectives modalities 
system slls shows noncore rules follow certain pattern 
particular medial rules shape 
rules medial shape example atomic thinning contraction rules 
desire single rule scheme governs fragments interaction core noncore led discovery logic gug 
reader warned research logic experimental stage 
relation decomposition cut elimination close relationship second decomposition theorem cut elimination sense imply provided system designed 
question course find designed 
order state second decomposition theorem able distinguish fragments interaction interaction core core noncore noncore 
open problems call noncore system designed proof noncore trivial proof fragment decomposed interaction core noncore observation designed noncore admits cut elimination result second decomposition theorem holds 
proof iwill sketch proof 
direction proceed exactly proofs theorems 
separation interaction core possible 
observe fragments core needed 
general possible separate interaction core 
direction proceed similar case system 
mentioned splitting context reduction cut elimination hold noncore consider 
definition designed gave certainly definition 
pragmatic reasons designed imply cut elimination second conditions sophisticated basic definition 
anyway want show cut elimination second decomposition theorem underlying principles 
question exactly principles 
logic gug help 
controlling nondeterminism systems thesis suited proof search 
reason huge amount nondeterminism intrinsically connected calculus structures 
topic research find ways controlling nondeterminism 
possible means permutability rules happened sequent calculus mil possible totally different methods 
guglielmi suggested technique splitting 
equivalence system bv pomset logic problem chapter 
summarise achieved difficulty lies 
correspondence guglielmi bv structures ch 
retor series parallel proof structures explained chapter 
detailed information consult gug correspondence bv structures relation webs explained 
graph theoretical viewpoint relation webs series parallel proof structures objects 
proposition structure provable contains balanced negation circuit 
words provable corresponding 
decidability mell series parallel proof structure proof net ch 
retor correctness criterion 
remains show direction series parallel proof structure proof net corresponding bv structure provable 
problem lies constructing proof 
method employed section presence seq longer true arbitrary pair atoms picked moved closer 
method employed times behave way seq respect par 
rule unsound see gug ret 
decidability mell ws question provability mell decidable probably open problem area linear logic 
apart fact believe decidable contribute problem 
think added list related thesis ways 
devoted chapter fact longest chapter thesis multiplicative exponential linear logic second undecidability nel increases significance problem 
equivalence proofs structures calculus structures rules applied freedom sequent calculus 
smaller granularity larger applicability 
consequently proofs calculus structures correspond sequent calculus proof different possible sequencing rules rules calculus structures smaller granularity larger applicability 
means general problem sequent calculus proofs exhibit lot redundancy sense inactive formulae copied times sequent proofs represent essentially proof rule applications calculus structures drastic form 
sequent calculus linear logic proof nets developed gir identify proofs vary irrelevant permutation rules 
works particularly multiplicative linear logic 
questions arises theory proof nets identify proofs calculus structures find methods identifying proofs calculus structures logics classical logic theory proof nets developed 

open problems bibliography abr michele 
phase semantics sequent calculus pure noncommutative classical linear logic 
journal symbolic logic december 
aj samson abramsky radha jagadeesan 
games full completeness multiplicative linear logic 
journal symbolic logic 
jean marc andreoli 
logic programming focusing proofs linear logic 
journal logic computation 
jean marc andreoli 
focussing proof construction 
annals pure applied logic 
ar michele paul 
non commutative logic multiplicative fragment 
annals pure applied logic 
bar michael barr 
autonomous categories linear logic 
mathematical structures computer science 
bc yves bertot pierre ran 
le coq art 
draft book available www sop inria fr yves bertot html 
denis philippe de groote christian retor 
complete axiomatisation inclusion series parallel partial orders 
common editor rewriting techniques applications rta lecture notes computer science pages 
springer verlag 
bel belnap jr display logic 
journal philosophical logic 
bg kai br nnler alessio guglielmi 
finitary system order logic 
technical report wv technische universit dresden 
submitted 
maurizio giorgio levi maurizio martelli 
semantics approach theory applications 
journal logic programming 
bib wolfgang bibel 
deductive solution plan generation 
new generation computing 
bla andreas blass 
game semantics linear logic 
annals pure applied logic 
bibliography bla andreas blass 
semantical aspects linear logic 
journal igpl 
bn franz baader tobias nipkow 
term rewriting 
cambridge university press 
bra torben bra ner 
linear logic 
number ls 
brics lecture series bro jan brouwer 
ber die des vom der mathematik der 
journal die reine und angewandte mathematik 
br kai br nnler 
atomic cut elimination classical logic 
technical report br wv technische universit dresden 
kai br nnler 
restrictions contraction 
technical report wv technische universit dresden 
bru paola 
purely logical account sequentiality proof search 
peter stuckey editor logic programming th international conference volume lecture notes artificial intelligence pages 
springer verlag 
br kai br nnler 
deep inference symmetry classical proofs 
technische universit dresden 
preparation 
br kai br nnler 
locality classical logic 
technical report wv technische universit dresden 
submitted 
br kai br nnler 
minimal logic calculus structures 
note 
web www ki inf tu dresden de kai minimal html 
bt kai br nnler tiu 
local system classical logic 
nieuwenhuis voronkov editors lpar volume lecture notes artificial intelligence pages 
springer verlag 
bus samuel buss 
proof theory 
samuel buss editor handbook proof theory 
elsevier 
bw nick benton philip wadler 
linear logic monads lambda calculus 
th ieee symposium logic computer science 
cab constable allen bromley cleaveland cremer harper howe knoblock mendler panangaden sasaki smith 
implementing mathematics nuprl cf development system 
prentice hall 
haskell curry feys 
combinatory logic volume 
north holland publishing 
chi lal chirimar 
proof theoretic approach specification languages 
phd thesis university pennsylvania 
chu alonso church 
formalism simple theory types 
journal symbolic logic 
bibliography cra craig 
linear reasoning new form herbrand gentzen theorem 
journal symbolic logic 
cs cockett seely 
weakly distributive categories 
journal pure applied algebra 
cur haskell curry 
permutability rules classical inferential calculus 
journal symbolic logic 
dr vincent danos laurent regnier 
structure multiplicatives 
annals mathematical logic 
dun michael dunn 
positive modal logic 
studia logica 
fr arnaud christian retor 
mix rule 
mathematical structures computer science 
gen gerhard gentzen 
untersuchungen ber das logische schlie en 
mathematische zeitschrift 
gen gerhard gentzen 
untersuchungen ber das logische schlie en 
ii 
mathematische zeitschrift 
ghs gert gro steffen lldobler josef 
linear deductive planning 
journal logic computation 
gia pietro di 
structures cyclic linear logic 
technical report universit 
gir jean yves girard 
interpr tation fonctionelle des coupures de arithm ordre sup 
universit paris vii 
gir jean yves girard 
linear logic 
theoretical computer science 
gir jean yves girard 
proof theory logical complexity volume volume studies proof theory 
bibliopolis di scienze 
gir jean yves girard 
linear logic syntax semantics 
jean yves girard yves lafont laurent regnier editors advances linear logic pages 
cambridge university press 
gir jean yves girard 
coherent banach spaces continuous denotational semantics 
jean yves girard okada andre scedrov editors electronic notes theoretical computer science volume elsevier science publishers 
gir jean yves girard 
locus rules logic logic rules 
mathematical structures computer science 
glt jean yves girard yves lafont paul taylor 
proofs types 
cambridge tracts theoretical computer science 
cambridge university press 
gs alessio guglielmi lutz stra burger 
non commutativity mell calculus structures 
laurent fribourg editor computer science logic csl volume lncs pages 
springer verlag 
bibliography gs alessio guglielmi lutz stra burger 
non commutative extension mell 
matthias baaz andrei voronkov editors logic programming artificial intelligence reasoning lpar volume lnai pages 
springer verlag 
gs alessio guglielmi lutz stra burger 
non commutative extension multiplicative exponential linear logic 
technical report wv technische universit dresden 
web www ki inf de lutz pdf 
gug alessio guglielmi 
calculus order interaction 
technical report wv technische universit dresden 
obsolete replaced gug 
gug alessio guglielmi 

web www ki inf de research notes ag pdf 
gug alessio guglielmi 
goodness perfection 
web www ki inf tu dresden de research notes ag pdf 
gug alessio guglielmi 
recipe 
web www ki inf de research notes ag pdf 
gug alessio guglielmi 
logic 
web www ki inf de research notes ag pdf 
gug alessio guglielmi 
system interaction structure 
technical report wv technische universit dresden 
submitted 
web www ki inf tu dresden de research gug gug pdf 
ha david hilbert wilhelm ackermann 
ge der logik volume die der mathematischen wissenschaften 
verlag von julius springer 
hey heyting 
mathematische 


springer verlag 
hil david hilbert 
die logischen grundlagen der mathematik 
mathematische annalen 
hil david hilbert 

ber das 
mathematische annalen hm joshua hodas dale miller 
logic programming fragment intuitionistic linear logic 
information computation may 
ho martin hyland chih hao luke ong 
fair games full completeness multiplicative linear logic mix rule 
howard 
formulae types notion construction 
seldin hindley editors curry essays combinatory logic lambda calculus formalism pages 
academic press 
bibliography hp joshua hodas jeffrey 
forum logic programming language 
okada jean yves girard andre scedrov editors electronic notes theoretical computer science volume elsevier science publishers 
hs steffen lldobler josef 
new deductive approach planning 
new generation computing 
hu john hopcroft jeffrey ullman 
automata theory languages computation 
addison wesley 
kan max 
complexity horn fragments linear logic 
annals pure 
kan max 
direct simulation minsky machines linear logic 
jean yves girard yves lafont laurent regnier editors advances linear logic pages 
cambridge university press 
kan max 
simulating computations second order non commutative linear logic 
jean yves girard okada andre scedrov editors electronic notes theoretical computer science volume elsevier science publishers 
kol andrei kolmogorov 
zur der logik 
mathematische zeitschrift 
koz dexter kozen 
automata computability 
springer verlag 
kre georg kreisel 
survey proof theory 
journal symbolic logic 
kv max jacqueline 
classical ai planning problems mirror horn linear logic semantics expressibility complexity 
mathematical structures computer science 
laf yves lafont 
undecidability second order linear logic exponentials 
journal symbolic logic 
laf yves lafont 
finite model property various fragments linear logic 
journal symbolic logic 
lam joachim lambek 
mathematics sentence structure 
american mathematical monthly 
lam joachim lambek 
program infinite abacus 
canad 
math 
bull 
lam fran ois lamarche 
games semantics full propositional linear logic 
proceedings th annual ieee symposium logic computer science lics pages 
lam fran ois lamarche 
proof nets games 
okada jean yves girard andre scedrov editors electronic notes theoretical computer science volume 
elsevier science publishers 
bibliography lmss lincoln mitchell scedrov shankar 
decision problems propositional linear logic 
annals pure applied logic 
lor paul lorenzen 
ein 
methods 
proceedings symposium foundations mathematics pages 
pergamon press oxford 
lor lorenz 
als von len 
archiv mathematische logic und 
ls lafont streicher 
game semantics linear logic 
proceedings th annual ieee symposium logic computer science lics pages 
ls yves lafont andre scedrov 
undecidability second order multiplicative linear logic 
information computation 
mil robin milner 
communication concurrency 
international series computer science 
prentice hall 
mil dale miller 
calculus theory linear logic preliminary results 
lamma mello editors workshop extensions logic programming lncs 
mil dale miller 
multiple meta logic 
abramsky editor ninth annual ieee symp 
logic computer science pages paris july 
mil dale miller 
lambda prolog language logic 
draft book 
mil dale miller 
forum multiple specification logic 
theoretical computer science 
mil robin milner 
communicating mobile systems calculus 
cambridge university press 
min marvin minsky 
recursive unsolvability post problem tag topics theory turing machines 
annals mathematics 
mn dale miller nadathur 
overview prolog 
kenneth bowen robert kowalski editors fifth international logic programming conference pages 
mit press 
dale miller nadathur frank pfenning andre scedrov 
uniform proofs foundation logic programming 
annals pure applied logic 
john martin odersky david turner philip wadler 
call byname call value call need linear lambda calculus 
electronic notes theoretical computer science 
bibliography pra dag prawitz 
natural deduction proof theoretical study 
almquist wiksell 
res greg 
substructural logics 
routledge 
ret christian retor 
th se de doctorat sp math matiques universit paris february 
ret christian retor 
pomset logic non commutative extension classical ret linear logic 
ph 
de groote hindley editors typed lambda calculus applications tlca volume lecture notes computer science pages 
christian retor 
handsome proof nets graphs perfect matchings series parallel graphs 
rapport de recherche inria 
appeared ret 
ret christian retor 
pomset logic calculus directed 
editors dynamic perspectives logic linguistics pages 
roma 
available inria rapport de recherche rr 
ret christian retor 
handsome proof nets perfect matchings 
theoretical computer science 
rue paul 
non commutative logic ii sequent calculus phase semantics 
mathematical structures computer science 
sch kurt sch tte 
kalk le der pr 
mathematische annalen 
sch kurt sch tte 

springer verlag 
see seely 
linear logic autonomous categories cofree coalgebras 
sin contemporary mathematics 
david sinclair 
specifying verifying tcp ip linear logic 
web www computing dcu ll ps 
ss charles stewart 
systematic proof theory modal logics 
technical report wv technische universit dresden ste 
submitted 
charles stewart 
formulae types correspondence classical logic 
phd thesis oxford university 
web www linearity org cas thesis 
str lutz stra burger 
mell calculus structures 
technical report wv technische universit dresden 
accepted publication theoretical computer science 
web www ki inf de lutz els pdf 
str lutz stra burger 
local system linear logic 
matthias baaz andrei voronkov editors logic programming artificial intelligence reasoning lpar volume lnai pages 
springer verlag 
bibliography str lutz stra burger 
system nel undecidable 
accepted 
appear electronic notes theoretical computer science vol 

str lutz stra burger 
undecidability system nel 
technical report wv technische universit dresden 
web www ki inf tu dresden de lutz pdf 
su morten heine rensen urzyczyn 
lecture notes curry howard isomorphism 
lecture notes th european summer school logic language information esslli 
tai tait 
normal derivability classical logic 
jon barwise editor syntax semantics infinitary languages pages 
springer verlag 
tiu tiu 
properties logical system calculus structures 
technical report wv technische universit dresden 
web www cse psu edu tiu pdf 
tro anne troelstra 
lectures linear logic 
number study language information csli lecture notes 
university chicago press 
ts anne troelstra helmut schwichtenberg 
basic proof theory 
cambridge university press second edition 
wad philip wadler 
linear logic 
partial evaluation semantics program manipulation pepm 
acm press 
wad philip wadler 
substitute linear logic 
th international workshop mathematical foundations programming semantics oxford 
wad philip wadler 
th century logic st century programming languages 
dr december 
david yetter 
quantales noncommutative linear logic 
journal symbolic logic 
zucker 
correspondence cut elimination normalization 
annals mathematical logic 
index absorption accepts active additive additive group additives admissible circuit atom atomic atomic atomic contraction atomic atomic cut atomic interaction atomic thinning axiom balanced balanced negation circuit basic context bottom brouwer heyting kolmogorov interpretation calculus structures ccs chain chain chain characteristic number circuit classical logic clean commutative case configuration connected connectives conservative extension constants contains negation circuit circuit context ary ls context reduction lls ls nelm contraction contractum core creation infinite supply curry howard isomorphism cut index cut elimination bv els els ll lls ls mell nel cut rule cycle decomposition sels ss second sels deep inference deep switch dereliction derivable derivation destruction display logic fragment rule dual encodes encoding equivalence proofs equivalent exponential group exponentials final state forked formal proof formula ll mell forum functional programming games semantics head higher order hereditary harrop formulae hilbert formalism identity identity group inference rule initial configuration initial state instructions interaction interaction rules interpolant interpolation sels ss intuitionistic logic key case killer lambek calculus length derivation proof linear implication linear logic linear negation link link link lower link upper link link link promotion bread local logic programming logical group logical rules medial index merging modalities multiplicative multiplicative additive fragment multiplicative exponential fragment multiplicative fragment multiplicative group multiplicative linear logic multiplicatives natural deduction negation negation circuit noncommutative noncommutative logic noncore switch nondeterminism nonlocal structure nontrivial occurrence course course structure order varieties par par structure par relation passive permutability permutability rules permutation rules permutes rule system weakly rule phase spaces calculus plus plus left plus right plus structure pomset logic premise promotion promotion cycle proof proof construction proof nets proof normalisation proof reduction proof search proof theory proper par proper times provable pseudo key case pure quantifiers quasi substructure reachable step steps recipe redex relation webs rule index ac ac ai ai cb cd cd cr cut cut ds id mix mix nl nl nl nl nm nm nm nm nm nm ns nx nz nz sai sp sr seq seq structure sequent sequent calculus index series parallel proof structures series parallel graphs size nel structure proof ls structure splitting lls ls ls cb nelm states strongly equivalent structural rules structure ls bv els els nel logic subchain subformula property substructural logics substructure switch system als bv els els els lj lk ll lls ls ls mell mell mll nel nelm sbv sbv sels sels sels slls slls slls sllst sllst sls ss ss tail term rewriting thinning times times structure times relation top top symmetry transitions trivial counter machine uniform proof uniform provability unique unit fragment rule weak encoding weakening weakly equivalent index structure structure woo structure zero 
