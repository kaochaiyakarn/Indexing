preliminary version managing complexity software development formally tools heitmeyer center high assurance computer systems naval research laboratory code washington dc past decades formal methods researchers produced number powerful software tools designed detect errors verify properties hardware designs software systems software system artifacts 
past debug hardware designs years tools help developers improve quality software systems 
especially useful developing high assurance software systems compelling evidence required system satisfies critical properties safety security 
describes different roles formally software tools play improving correctness software software artifacts 
tools help developers manage complexity automatically exposing certain classes software errors producing evidence mechanically checked proofs results executing automatically generated test cases software system satisfies requirements 
addition tools allow practitioners focus development tasks best performed people obtaining validating requirements constructing high quality requirements specification 
key words formal methods software tools formal specification formal verification model checking theorem proving scr 
past decade research group nrl developed formal state machine semantics set formally tools support requirements specification scr software cost reduction tabular notation :10.1.1.17.6363
scr notation number organizations industry develop analyze requirements specifications author research sponsored office naval research 
email heitmeyer itd nrl navy mil preliminary version 
final version published electronic notes theoretical computer science url www elsevier nl locate entcs heitmeyer practical systems including flight control systems weapons systems space systems 
example lockheed martin scr notation scr tools test case generator detect critical error described cause failure software controlling landing procedures mars polar lander 
target systems high assurance software systems avionics systems safety critical software medical devices control systems nuclear power plants compelling evidence required system satisfies set critical properties 
properties security properties system prevents unauthorized disclosure modification sensitive information denial service unauthorized intrusions malicious actions safety properties system prevents unintended events result death injury illness property damage fault tolerant properties system guarantees certain quality service despite faults hardware workload environmental anomalies survivability properties system continues fulfill mission presence attacks accidents failures real time properties system delivers outputs specified time intervals 
high assurance systems currently investigation group cd cryptographic device navy systems fpe fault protection engine safety critical software component nasa spacecraft 
cd member family software devices provide cryptographic processing data stored different channels channel associated different host system 
data different channels may different security classifications cd enforce data separation ensure data channel influence influenced data different channel 
currently developing plan formally specifying verifying cd software uses separation kernel mediate access data enforces data separation 
fpe complex safety critical software component current nasa spacecraft version spacecraft 
fpe function monitor health spacecraft software hardware coordinate track responses detected faults 
fpe function crucial successful operation spacecraft nasa needs high assurance fpe correctly implemented 
evaluate correctness fpe implementation nrl developed formal specification complex part fpe suite test cases derived automatically fpe specification evaluating fpe software 
test cases constructed algorithm described 
heitmeyer described classes tools useful constructing high assurance software systems components areas tools need improvement 
addition important aspect developing high assurance software system discussed minimally dependent tool support necessary tools effective 
despite importance aspect construction high quality specification required behavior system software component largely ignored software engineering researchers software developers 
role tools tools play important role obtaining high confidence software system satisfies critical properties 
described different roles tools play improving quality software systems software system artifacts 
demonstrate formedness formed specification syntactically type correct circular dependencies complete required behavior missing consistent behavior specification ambiguous 
tools nrl consistency checker automatically detect formedness errors 
describe consistency checker missing cases ambiguity specifications avionics system flight guidance system 
cases checker automatically detected serious errors overlooked human inspections 
discover property violations cases tool model checker analyze system specification critical property uncovers violation property 
diagnostic information counterexample returned model checker developer may find flaw specification missing assumptions 
alternatively formulation property specification may incorrect 
cases result analysis extremely valuable 
model checking detect safety property violation contractor specification weapons control system 
researchers begun model checking detect property violations software software specifications 
notable example ball rajamani slam project uses software model checking detect bugs device drivers 
result slam successful model checking detect serious software bugs led microsoft fund development production quality tool techniques pioneered slam detect bugs device drivers similar programs 
verify critical properties heitmeyer theorem prover model checker may verify software artifact requirements specification design specification satisfies critical property 
example describes theorem prover verify early specification cd satisfies set critical security properties 
validate specification developer domain expert may tool simulator animator check formal specification captures intended system behavior 
running scenarios simulator user ensure system specification omits incorrectly specifies system requirements 
developing fpe specification example simulation extremely valuable debugging specification proved useful obtaining feedback domain experts required behavior demonstrating behavior captured fpe specification project sponsors 
construct test cases formal specification test case generator automatically derive suite test cases satisfying coverage criterion branch coverage 
specifications expressed scr rsml requirements state machine language requirements language inspired statecharts value dependent variable specification defined total function 
branch coverage part branch function definitions forms basis constructing test case 
taken suite test cases constructed manner cover condition branch specification 
fpe project projects involving high assurance systems automated test case generation high interest software developers cost automatically constructed tests lower cost manually constructed tests set test cases covers specification provide greater confidence correctness software set test cases developed ad hoc manner 
detect coding errors code vulnerabilities static analysis tool analyze piece software executing 
tools automatically detect errors vulnerabilities uninitialized variables erroneous pointers arithmetic buffer overflows source assembler code 
examples tools help detect errors class code include codesurfer safer finds dangerous vulnerabilities code described 
bishop describe heitmeyer static analysis tools help uncover vulnerabilities cots software safety critical systems 
needed tool improvements tools enormously useful debugging producing evidence correctness software software artifacts number tool improvements urgently needed 
improvements previously recommended described 
automated abstraction practical software specifications model checked efficiently state explosion problem addressed size state space analyzed reduced 
effective way reduce state explosion apply abstraction 
example model checking large specification weapons control system succeed kinds abstraction applied 
unfortunately common approach develop abstraction ad hoc ways correspondence abstraction original specification informal intuitive arguments 
needed mathematically sound abstractions constructed automatically 
progress automatically constructing sound abstractions reported 
understandable feedback formal analysis exposes error user provided easy understand feedback useful correcting error 
techniques achieving consistency checking exist see 
counterexamples produced model checkers provide useful diagnostic information hard understand 
promising approach uses simulator animator demonstrate validate counterexample 
automatically generated invariants tools described needed automatically construct invariants specification 
known invariants uses software development 
auxiliary lemmas proving theorems software specification 
example security properties proven early cd specification proved auxiliary invariants 
invariants automatically generated algorithms described 
invariants validating requirements specification domain experts automatically generated invariants determine specification correctly captures certain required system behavior 
heitmeyer usable mechanical theorem provers mechanical theorem provers researchers verify various algorithms protocols rarely practical software development 
provers widely number barriers need overcome 
specification languages provided provers natural 
second reasoning steps supported prover closer steps produced hand proof current provers support reasoning steps low detailed level 
partial solution problem build prover front designed support specification proofs special class mathematical models 
example frontend tame natural user interface pvs designed specify prove properties automata models 
mechanical prover require mathematical maturity theorem proving skills making prover natural convenient encourage widespread usage 
needed effective tools 
researchers software developers usually expend significant effort applying tools exert effort pay attention creating high quality system specification 
result current specifications difficult understand change poorly organized 
urgently needed higher quality specifications requirements software designs 
specifications critically important serve medium precise communication customers developers verification team stakeholders 
way improve quality specifications choose specification language 
language natural extent feasible language syntax semantics familiar software practitioner supported 
language explicitly defined formal semantics scale 
thought example specifications expressed language available practitioners 
studying examples practitioners learn language may create specifications concise easy understand 
group see successfully applied scr tabular notation express required behavior number software systems software components 
precise meaning scr specifications state machine semantics described 
heimdahl leveson proposed hybrid notation combines tables graphics 
table specification languages advantages 
tabular specifications easy understand relatively easy software practitioners construct addition tables provide precise unambiguous basis communication practitioners 
provide natural heitmeyer permits independent construction review modification analysis smaller parts large specification 
tabular notations scale 
evidence scalability tabular specifications demonstrated early lockheed engineers set tables specify complete requirements flight program program containing lines ada code 
addition tabular notations user friendly notations explored 
example number researchers practitioners capture system requirements scenarios represented message sequence charts mscs notation commonly describe communication protocols 
requirements represented mscs analyzed directly see translated representation analysis 
specification language chosen high quality specification requires great care skill part specifier 
building specification somewhat analogous designing proof 
proof specification easy understand 
part free redundancy planned redundancy acceptable list critical system properties 
reduction redundancy produces concise specification important attribute specifications large complex systems 
specification carefully organized ease understanding ease change 
specification document information specification easy find 
tools enormously useful building high assurance software systems 
find errors human inspections help validate specification provide mechanized support verifying properties reduce time effort required construct execute set test cases provide confidence results testing constructing suite test cases coverage criterion 
set powerful tools people hard intellectual required produce high quality high assurance software systems 
part intellectual effort acquisition knowledge system software requirements production easy understand organized requirements specifications 
archer tame pvs strategies special purpose theorem proving annals mathematics artificial intelligence 
ball rajamani slam project debugging system software static analysis proceedings th acm sigplan sigact symposium principles programming languages popl acm sigplan notices portland acm press 
heitmeyer bensalem lakhnech owre computing abstractions infinite state systems compositionally automatically proceedings computer aided verification th annual conference cav vancouver canada june july lncs 
bishop bloomfield clement jones integrity static analysis cots soup proceedings nd international conference computer safety reliability security edinburgh uk sept lncs 
blackburn applying test automaton framework mars lander monitor proceedings lockheed martin joint symposium 
codesurfer user guide technical version 
ward kirby jr core method real time requirements ieee software 
feather fickas model checking validation fault protection system proceedings th international symposium high assurance systems engineering ieee computer society 
heitmeyer model checking generate tests requirements specifications proceedings acm th european software engineering conference th acm sigsoft symposium foundations software engineering sept toulouse fr lncs 
harel statecharts visual formalism complex systems science computer programming 
safer developing software high integrity safety critical systems mcgraw hill new york 
heimdahl leveson completeness consistency hierarchical state requirements ieee transactions software engineering 
heitmeyer need practical formal methods proceedings formal techniques real time fault tolerant systems th international symposium lyngby denmark sept lncs 
heitmeyer software cost reduction encyclopedia software engineering ed nd ed john wiley sons new york 

heitmeyer jeffords labaw automated consistency checking requirements specifications acm transactions software engineering methodology 
heitmeyer heitmeyer kirby jr labaw archer bharadwaj abstraction model checking detect safety violations requirements specifications ieee transactions software engineering 
heitmeyer kirby jr labaw bharadwaj scr toolset specifying analyzing software requirements proceedings computer aided verification th annual conference cav vancouver canada june july lncs 
heitmeyer kirby jr labaw tools formal specification verification validation requirements proceedings th annual conference computer assurance compass june gaithersburg md 
jeffords heitmeyer automatic generation state invariants requirements specifications proceedings sixth acm sigsoft international symposium foundations software engineering nov lake vista fl 
jeffords heitmeyer algorithm strengthening state invariants generated requirements specifications proceedings fifth ieee international symposium requirements engineering re august toronto canada 
kirby archer heitmeyer scr practical approach building high assurance system proceedings th annual computer security applications conference ieee computer society 
miller specifying mode logic flight guidance system core scr proceedings nd workshop formal methods software practice clearwater beach fl acm press 
peled toolset message sequence charts proceedings computer aided verification th annual conference cav vancouver canada june july lncs 
rushby design verification secure systems proceedings eighth symposium operating systems principles dec pacific grove ca operating system review 
shankar owre rushby pvs proof checker manual computer science laboratory sri international menlo park ca 
kramer magee 
msc tool support behaviour model elaboration implied scenarios proceedings ninth international conference tools algorithms construction analysis systems tacas warsaw april 

