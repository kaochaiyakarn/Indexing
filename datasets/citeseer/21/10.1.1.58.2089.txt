mda achievable proper definition late binding 
antoine enst bp cedex france antoine enst fr th august unified modeling language attempt define unified notation object oriented technology users 
notation semantics precise succeeding versions improved expressive power uml 
object constraint language permitting description invariants pre post conditions included uml 
action semantics approved object management group describe operations 
purpose firstly show refinements sufficiently precise specify late binding warn rigorous definition late binding model driven approach mda risks remain useless inefficient 
pragmatic approach tricky problem real practical repercussions 
compare popular oo languages analyze differences 
show uml action semantics remains vague late binding referring covariance contravariance invariance operation redefinition 
hypothetical scenarios enable true safe model transformations 
unified modeling language uml attempt define unified notation community oo users 
notation semantics precise succeeding versions improved expressive power semantics 
uml included ocl object constraint language allows description invariants pre post conditions reaching higher level contract simple signature operations 
action semantics approved object management group describe behavior operations 
submission provides means language developers specify semantics languages 
standard action semantics enables interchange complete executable specifications uml allowing users develop models favorite syntax language spite ambitious goal uml action semantics purpose show refinements uml including current action semantics proposal sufficient specify precision interesting operational aspect oo opinion 
consequently uml allow interchange complete executable specifications 
late binding natural consequence inheritance oo programming languages offer 
main interest lies ability develop frameworks extended new specialized code 
magic comes writing single class redefining single method framework recompiled calls new specialized method newly written class 
called hollywood principle dont call ll call easy define bosch calls lines products 
late binding interpretations depending programming language show 
oo unifying attempts uml oo analysis design net multi language integration complicated task risks semantically operationally sound 
show uml action semantics remains vague subject mentioning covariance contravariance invariance operation redefinitions subclasses agreement concept fundamental impossible achieve independence programming language claim unified 
operational interpretations late binding prevent easy safe syntactical code translation language guarantee run way 
instance calls operations defined uml model java code generation behave generated code 
java close languages 
difference greater languages clos eiffel ocaml smalltalk see comparisons results 
case consider model engineering 
having unambiguous model interpretation truly language independent 
organized follows 
section describes problem gives quotations current action semantics proposal 
section build simple meaningless piece code proceeds possible late binding 
presents results obtained runs previous program written various oo languages eiffel java smalltalk 
hypothetical scenarios enable true safe model transformations 
note interested single late binding leaving multiple late binding implemented clos 
cv top ctv bottom cv middle ctv middle top middle bottom intention expectation modeler building model 
motivations oo languages oo users defined unified notation help people analyze design program unified modeling language uml developed object management group 
question arises single possible interpretation uml diagram 
instance interpret uml diagram 
overloading covariant contravariant overriding redefinition 
analysts designers accept notation real semantics 
question uml oriented tools claim generate code languages guarantee behavior 
course 
reuse aims oo concepts necessary reach consensus behavior model 
imagine stage development 
defines class methods cv top ctv bottom basis framework 
class defined methods cv middle ctv middle 
code calling operations behave 
expected results 
method lookup strategy key 
action semantics pages explains operation lookup operates 
word notice verb match defined particular regarding invariance covariance contravariance rules 
page distinct operation define attached classifiers arguments results output signature 
invocation action type request object matches input signature method target object select requested method 
procedure attached method executed 
selection process follows usual rules object oriented inheritance vague uml permit various styles method lookup 
emphasized quotation 
page comment necessary sufficient definition lookup methods match 
specifying method matches genuine conflict essence specific inheritance algorithm actual lookup rule say page presumably means multiple methods operation 
restriction prevents profiles specializing method lookup particular language semantics 
submission removes restriction leaving constraint single method selected 
profiles action semantics specify method lookup operation call actions believe voluntary gap specification leads interpretations uml unsuitable precise framework specifications 
designer uml variants wants generate codes language 
redesign class hierarchy organization methods 
believe uml provide single interpretation code generators translate target languages complex possibilities target language runtime type information 
shows need unique sound reasonable interpretation uml models 
works precise uml mml language define behavior lookup dare words covariance contravariance 
late binding variants order observe behavior late binding oo languages translated previous model different languages defined client program possible calls shown table 
results columns lines table slot contains class actual body method error triggered compiler runtime 
observe results obtained concrete oo programming languages 
languages eiffel java smalltalk 
compiled program syntax language gcc cygnus beta microsoft visual gnu eiffel workbench ise eiffel jdk sun java squeak smalltalk respectively 
tables show results eiffel java smalltalk respectively 
comments interpretations 
compared languages surprisingly lot different behaviors 
formal languages vdm object constraints slot error instance 
differences show need understood common semantics late binding context unifying model 
table tests procedure main receiving objects ud possible parameters top new top middle new middle bottom new bottom test second test third test new new ud new cv cv ud cv cv cv ud cv cv cv ud cv ctv ctv ud ctv ctv ctv ud ctv ctv ctv ud ctv table results calls ud cv cv error cv ctv error error error ctv error error ctv table eiffel results calls ud cv cv error cv ctv error error error ctv ctv error error error table java results calls ud cv cv cv ctv error error error ctv error error ctv ambiguous table smalltalk squeak results calls ud cv cv cv ctv ctv ctv lookup variations oo programming languages generate different behaviors 
languages reject purely covariant method redefinitions reject contravariant ones 
controversy left bad memories people consider tricky problem avoided 
uml action semantics proposal refusing take position confirmation 
unfortunately refusing take position leaves applications tools designers situation choice interpretation take risk longer unified avoid method redefinitions various interpretations polluting design implementation language issues 
consequently attempt model transformation rigorous definition late binding doomed failure 
unique model transformation lead different systems depending target language 
propose scenarios deal difficulty 
oo community achieve define consensual interpretation 
solution sounds difficult reach existing languages different 

leading languages java merge late binding interpretation 
technically simple requires incremental changes java compiler leave existing source code usable 
pragmatic solution lets lot languages away unified view 

add uml information helps modelers express intentions 
scenario practicable 
attempting define complex model transformation platform independent model pim platform specific model psm urgent define unambiguous model interpretation 
clark evans sammut 
action semantics mml march 
www cs york ac uk pdf 
arnold gosling holmes 
java programming language 
addison wesley 

quel plouzeau watkins 
making components contract aware 
computer pages july 

oo languages late binding signatures 
informal workshop record fool th workshop foundation object oriented languages portland oregon pages january 
bosch 
design software architecture 
adopting evolving product line approach 
addison wesley 
collin 
gnu eiffel compiler 
www loria fr 
goldberg robson 
smalltalk language implementation 
addison wesley 
group 
action semantics uml 
ad revised march response omg rfp ad revised march 
ingalls maloney wallace kay 
back story squeak practical smalltalk written 
conference proceedings oopsla atlanta volume acm sigplan notices pages 
acm oct 
lano 
logical specification reactive real time systems 
journal logic computation 
meyer 
eiffel language 
object oriented series 
prentice hall new york ny 
meyer 
interactive software engineering 
eiffel com 
microsoft 
microsoft net 
www microsoft com net 
omg 
omg unified modeling language specification version 
www omg org june 
reggio astesiano 
proposal dynamic core uml metamodelling mml april 
www cs york ac uk pdf 
smith 
object specification language 
kluwer 
steele 
common lisp language 
digital press 
stroustrup 
programming language 
addison wesley 
warmer kleppe 
object constraint language precise modeling uml 
addison wesley 

