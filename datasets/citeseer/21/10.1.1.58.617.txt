prefix hash tree indexing data structure distributed hash tables sriram university california san diego joseph hellerstein university california berkeley intel research berkeley distributed hash tables scalable robust self organizing peer peer systems support exact match lookups 
describes design implementation prefix hash tree distributed data structure enables sophisticated queries dht 
prefix hash tree uses lookup interface dht construct trie structure efficient updates doubly logarithmic size domain indexed resilient failure node prefix hash tree affect availability data stored nodes 
categories subject descriptors comp 
communication networks distributed systems distributed applications data structures distributed data structures information storage retrieval content analysis indexing indexing methods general terms algorithms design performance keywords distributed hash tables data structures range queries 
explosive growth primitive design peerto peer file sharing applications gnutella kazaa inspired research community invent distributed hash tables dhts 
structured overlay network dhts map key node network holding object associated key lookup operation lookup key support canonical put key value get key hash table operations 
broad applicability email sriram cs ucsd edu sylvia ratnasamy intel research berkeley scott shenker international comp 
science institute berkeley university california berkeley lookup interface allowed wide variety system built top dhts including file systems indirection services event notification content distribution networks 
dhts designed internet style scalability ease deployment triumph strict semantics 
particular dhts self organizing requiring centralized authority manual configuration 
robust node failures easily accommodate new nodes 
importantly scalable sense latency terms number hops lookup local state required typically grow logarithmically number nodes crucial envisioned scenarios dhts involve extremely large systems music file sharing 
dhts internet deliver best effort semantics put get succeed system provides guarantees 
observed conflict scalability strict semantics appears inevitable large scale internet systems deemed important 
dhts enjoyed success building block internet scale applications seriously deficient regard directly support exact match queries 
keyword queries derived exact match queries straightforward inefficient manner see applications dhts 
equality joins supported dht framework see 
range queries asking objects values certain range particularly difficult implement dhts 
dhts hashing distribute keys uniformly rely structural properties key space ordering keys 
range queries arise quite naturally number potential application domains databases peer peer databases need support sql type relational queries distributed fashion 
range predicates key component sql 
distributed computing resource discovery requires locating resources certain size ranges decentralized manner 
location aware computing applications want locate nearby resources computing human commercial user current location essentially dimensional range query geographic coordinates 
scientific computing parallel body computations require dimensional range queries accurate approximations 
prefix hash tree address problem efficiently supporting dimensional range queries dht 
main contribution novel trie distributed data structure called prefix hash tree henceforth abbreviated pht supports queries 
corollary pht support heap queries maximum minimum proximity queries nearest element limited way multi dimensional analogues greatly expanding querying facilities dhts 
pht efficient updates doubly logarithmic size domain indexed 
pht self organizing load balanced 
pht tolerates failures protect leaf nodes keys data loss nodes go failure node prefix hash tree affect availability data stored nodes 
crucial property pht built entirely top lookup interface run dht 
pht uses lookup key operation common dhts approaches assume knowledge require changes dht topology routing behavior 
designs rely knowledge modifications appropriate contexts dht expressly deployed purpose supporting range queries address case pre existing dht 
particularly important wants publicly available dht services 
remainder organized follows 
section describes design pht data structure 
section presents results experimental evaluation 
section surveys related section concludes 

data structure section describes pht data structure related algorithms 
pht description sake simplicity assumed domain indexed binary strings pht take advantage replication data preserving technique employed dht 
length discussion extends naturally domains 
data set indexed pht consists number bit binary keys 
essence pht data structure binary trie built data set 
node trie labeled prefix defined recursively node label left right child nodes labeled respectively 
root labeled attribute indexed downstream nodes labeled 
properties invariant pht 

universal prefix node children 

key storage key stored leaf node label prefix 
split leaf node stores atmost keys 

merge internal node contains atleast keys sub tree 

threaded leaves leaf node maintains pointer leaf nodes immediate left immediate right respectively 
property guarantees leaf nodes pht form universal prefix set consequently key exactly leaf node leaf label prefix property states key stored leaf 
provides example pht containing bit keys 
table right lists keys leaf nodes stored 
properties govern pht adapts distribution keys data set 
insertion new key number keys stored leaf node may exceed threshold causing property violated 
restore invariant node splits child nodes keys redistributed children property 
conversely deletion existing key number keys contained sub tree may fall causing property violated 
restore invariant entire sub tree merged single leaf node keys aggregated 
notice shape pht depends distribution keys deep regions domain densely populated conversely shallow pointer prefixes neighboring leaves performance optimization cached ip address corresponding dht nodes 
set prefixes universal prefix set infinite binary sequence exactly element set prefix regions domain sparsely populated 
property ensures leaves pht form doubly linked list enables sequential traversal leaves answering range queries 
described far pht structure fairly routine binary trie 
novelty pht lies logical trie distributed peers network pht vertices assigned dht nodes 
achieved hashing prefix labels pht nodes dht identifier space 
node label assigned peer mapped dht peer identifier closest hash 
hash assignment implies label possible locate corresponding pht node single dht lookup 
direct access property successive link traversals associated typical data structures results pht having desirable features discussed subsequently 
pht operations section describes algorithms pht operations 
lookup key pht lookup operation returns unique leaf node leaf label prefix distinct prefixes potential candidates obvious algorithm perform linear scan nodes required leaf node reached 
similar top traversal trie dht lookup locate pht node prefix label 
pseudocode algorithm 
algorithm pht lookup linear input key output leaf pi denotes prefix length node dht lookup pi node leaf node return node return failure improved key algorithm tries different prefix lengths required leaf node reached 
clearly linear search replaced binary search prefix assignment implies peer maintains state associated pht node assigned 
henceforth discussion pht node refer peer assigned node 
lengths 
current prefix internal node pht search tries longer prefixes 
alternatively current prefix internal node pht search tries shorter prefixes 
search terminates required leaf node reached 
decision tree left illustrates binary search 
example 
consider lookup key 
binary search algorithm tries bit prefix internal node bit prefix internal node bit prefix required leaf node 
pseudocode algorithm 
algorithm pht lookup binary input key output leaf lo hi lo hi mid lo hi denotes prefix length mid node dht lookup node leaf node return node node internal node lo mid hi mid return failure binary search reduces number dht lookups log log linear search significant atleast reasons 
observe dht lookups linear search performed parallel opposed binary search inherently sequential 
results modes operation viz 
low overhead lookups binary search low latency lookups parallel search 
second binary search may fail unable correctly locate leaf node result failure internal pht node hand linear search guaranteed succeed long leaf node alive dht able route provides failover mechanism 
note algorithms contingent fact dht provides mechanism locate pht node single lookup 
range query keys range query returns keys contained pht satisfying binary search able distinguish failure internal node absence internal node 
parallel sequential range queries range queries implemented pht ways simple algorithms 
algorithm locate leaf pht lookup operation 
doubly linked list threaded leaves traversed sequentially node leaf reached 
values range query retrieved 
algorithm simple efficient initially requires log dht lookups locate leaf 
avoid traversing remaining nodes answer query 
disadvantage algorithm sequential scan leaf nodes may result high latency query completely resolved 
second algorithm parallelize 
dht locate node label corresponds smallest prefix range completely covers specified range 
internal node recursively forward query onward children overlap specified range 
process leaf nodes overlapping query reached 
internal node required range query covered single leaf node located binary search 
shows example range search 
consider query range 
sequential algorithm pht lookup locate node containing lower endpoint node 
traversal linked list forwards query leaves resolves query 
parallel algorithm identify smallest prefix range completely covers query 
single dht lookup directly jump node query forwarded parallel sub tree leaf nodes overlap search range reached 
note parallel algorithm desirable break search query treat sub queries independently 
example small range contains midpoint space result smallest prefix range containing potentially overloading root 
prevent observe range contained union prefix ranges roughly size query factor 
handling separately possible ensure search starts level pht appropriate query smaller queries start lower pht 
insert delete insertion deletion key require pht lookup operation locate leaf node leaf 
insertion new key cause leaf node split children followed redistribution keys 
cases keys distributed children stores atmost possible keys distributed child necessitating split 
worst case insertion cause splits cascade way depth making insertion costs proportional similarly worst case deletion cause entire sub tree depth collapse single leaf node incurring cost proportional possible reduce update costs avoid problems multi node coordination staggered updates 
split operation allowed insertion similarly merge operation allowed deletion 
results update costs reducing log dht lookups cost pht lookup locate leaf node allows invariants violated 
leaf node store upto keys 
problem practical scenarios tries versus trees section compares merits trie index pht balanced tree indices tree particular emphasis implementation distributed setting 
described pht data structure built dht likewise conceivable tree built dht process terminate worst case keys identical assumed identical keys distinguished padding random bits appropriately increasing dht distribute tree nodes peers network 
tree indices may better traditional indexing applications databases argue reverse true implementation dht 
primary difference approaches follows trie partitions space tree partitions data set 
words trie node represents particular region space tree node represents particular set keys 
trie uses space constant independent actual data set implicit knowledge location key 
example trie key stored prefix key possible exploit mechanism dht provides locate node single dht lookup 
tree knowledge lacking possible locate key topdown traversal root 
tree index random access property dht manner 
translates key advantages favor pht compared balanced tree index 
efficiency balanced tree height log key lookup requires log dht lookups 
addition updates may require tree re balanced 
binary search lookup algorithm case pht requires log dht operations updates cost 
comparing cost lookups case index consisting bit keys tree index require dht lookups compared pht retrieve key 
course multiway indexing reduce height tree leave tree vulnerable faults indexing structure 
load balancing mentioned lookup tree goes root creating potential bottle neck 
case trie binary search allows load spread nodes assuming uniform lookups eliminating bottleneck 
fault resilience typical tree structure loss internal node results loss entire subtree rooted failed node 
pht require top traversals directly jump node pht 
failure node pht affect availability data stored nodes 
sense indexing state trie optimization 
example observe correct operation pht achievable integrity doubly linked list leaf nodes updates linear search range queries sequential traversal list handled help trie indexing structure 
contrast tree indexing structure updates queries vulnerable failures 
pht enhancements point discussed phts satisfying unidimensional range queries 
section describe refinements functionality extensions support multi dimensional searching performance enhancements scenarios known relatively static data distributions 
multi dimensional indexing linearization plethora centralized indexing schemes supporting multidimensional range queries multiple surveys published area 
class heuristic multidimensional indexing schemes maps multidimensional data single dimension 
approach called linearization spacefilling curves known examples include hilbert gray code order curves 
multidimensional query mapped unidimensional range query spans lowest highest linearization points original query 
general linearized queries return superset matching data post filtered 
linearization schemes pyramid techniques shown empirically outperform traditional space filling curves popular multidimensional tree structures high dimensional scenarios 
multidimensional indexing linearization schemes largely heuristic strong practical attraction linearization implemented overlay existing unidimensional range search structures typically frequently implemented carefully debugged specialized multidimensional indexes 
argument holds phts distributed range search technique 
phts added advantage underlying substrate dhts rapidly emerging leading distributed building block 
mapping dimensional query qd unidimensional query pht finds answer set log network hops size result set returned unidimensional query note bound difference qd worst case difference captures chosen linearization scheme particular phts se 
somewhat similar chord correct operation depends integrity successor pointers indexing known distributions relative tree indexes disadvantage phts complexity expressed terms log domain size size data set scenarios data known distribution example keywords text search follow known zipfian distributions range search queries queries cali quite natural 
informally argue known distributions pht modified run log log expected hops 
examining simple uniform distribution bit keys 
data items drawn distribution expected depth leaf pht log low variance 
uniform distributions expected number hops pht lookup binary log log 
search algorithm improved search algorithm starts prefix length log proceeds upward downward necessary 
known non uniform distributions similar performance achieved warping space appropriately remapping original distribution uniform distribution 
data point drawn original distribution bit remapped lower midpoint distribution pdf assignment proceeds recursively bits 
resulting set mapped points essentially drawn uniform distribution pht built points path lengths described 
queries original space mapped accordingly perform log log expected hops 
globally known distributions terms spoken english warping function fixed distributed part pht code 
practice data sets come distributions change quite slowly 
example distribution terms filesharing applications shift slightly popularity shifts terms may suddenly popular new popular file released terms frequency remain relatively static long periods time 
slowly changing distributions gossip scheme disseminate compressed representations distribution nodes changes distribution reflected periodic remapping data queries part soft state refresh 
close section observing general duality 
tree index quite analogous pairing trie scheme known distribution split keys tree index capture data distribution pointers tree index serve function bits trie encoding 
advantage pht approach ability noted jump point trie hashing global knowledge distribution provides uniformity addressing 
similar trick achieved tree indexes searcher fair approximation split keys tree locations tree nodes identifier space 

evaluation section presents simulation evaluation pht data structure 
simulation results means comprehensive preliminary experimental evidence pht viable solution 
complete evaluation gaining experience deployment working prototype focus current efforts 
simulation setup follows 
pht indexes bit keys created top dht consisting nodes 
focus evaluating performance data structure reason away details dht stripped version chord protocol 
artificially generated keys inserted pht coming uniform distribution entire keyspace 
artificially low block size order generate non trivial instance pht 
range queries recall range query evaluated traversing leaf nodes pht 
complexity latency range query operation depends number leaves function output keys satisfy query 
ideal case output size block size number nodes traversed 
see pht distributes keys leaf nodes generate randomly generated queries size varying measured leaf nodes required traversed 
results normalized optimal number shown 
number leaf nodes required traversed roughly cases times optimal value 
evaluate effect skewed distributions pht structure experiment repeated gaussian distribution centered midpoint space generate input keys 
ranges close mean keys densely clustered pht performing uniform case 
sparser regions pht worse optimal value 
results indicate pht incurs reasonably small constant factor overhead terms nodes visited theoretically optimal value 
load balance experiment attempts verify assertion pht spreads network load evenly bottleneck binary tree 
test hypothesis generated pht lookups uniformly distributed keys observed distribution lookup traffic 
lookup traffic mean dht queries generated binary search algorithm underlying dht routing traffic 
shows distribution lookup traffic nodes dht 
seen nodes see lookups 
rest nodes correspond pht leaf nodes receive traffic case higher 
contrast tree messages necessarily go root 
test effect network size experiment repeated nodes respectively 
expected larger number nodes reduces amount node traffic pht prefixes distributed nodes 
actual pht leaf nodes continue receive higher amounts traffic rest nodes 
sub optimality factor range search efficiency uniform distribution gaussian distribution fraction ranges efficiency range queries 
related building efficient data structures searching fundamental problems computer science 
pht proposal particularly reminiscent litwin trie hashing added advantage memory addresses buckets trie stored fact dht keys obtained hashing corresponding prefixes 
respect problem implementing range search peer peer systems aspnes shah proposed skip graphs distributed data structure skiplist provides range search solution 
provide mapping keys peers network mapping provided awerbuch scheideler number lookups distribution lookup traffic cumulative distribution nodes cumulative distribution pht lookup traffic essentially building skip graph top dht 
lookup times data item state skip graph log number items 
karger ruhl propose randomized protocol called item balancing balances distribution items having dht nodes adaptively change identifiers 
providing excellent theoretical properties solution relies just hashtable interface underlying dht potentially create barrier deployment 
related protocol proposed ganesan bawa 
related includes dht caching scheme technique specifically dht space filling curves 
cone trie data structure evaluate aggregation operators min max sum keys dht 
pht trie differs cone significant respects 
cone builds trie uniformly distributed node identifiers 
second cone support range queries 
cone dht augmentation pht builds top dht 
waldvogel proposed ip lookup algorithm binary search prefixes organized hashtables prefix length 
solving longest prefix match different related problem binary search technique similar pht lookup algorithm 
key distinguishing characteristic pht operates distributed setting entirely different set constraints issues opposed ip lookup algorithm implemented hardware high speed router 

short existence dhts widely tool building large scale distributed systems 
lookup interface offered dhts broadly applicable naturally support common feature database information processing systems range queries 
goal address shortcoming contrary early efforts field subject constraint queries lookup interface rely changes knowledge underlying dht routing algorithm 
ensure solution apply dht just specifically engineered task 
design evaluation prefix hash trees pht data structure designed support range queries 
pht properties traditionally required large scale internet systems self organizing scalable robust presence failures 
prevent loss data due node outages failures prevent producing results nodes 
short believe pht enable generalpurpose dhts support wider class queries broaden horizon applicability 

aspnes shah skip graphs 
fourteenth annual acm siam symposium discrete algorithms baltimore md jan 
awerbuch scheideler peer peer systems prefix search 
acm symposium principles distributed computing boston ma july 
berchtold hm kriegel 
pyramid technique breaking curse dimensionality 
proc 
acm sigmod international conference management data seattle wa june pp 

bhagwan voelker varghese cone augmenting dhts support distributed resource discovery 
tech 
rep ucsd cs computer science department university california san diego november 
blake rodrigues high availability scalable storage dynamic peer networks pick 
hotos ix may 
cabrera jones theimer herald achieving global event notification service 
hotos viii may 
clip 
gnutella protocol specification march 
cormen stein rivest leiserson algorithms 
mcgraw hill higher education 
dabek kaashoek karger morris stoica wide area cooperative storage cfs 
proceedings th acm symposium operating systems principles sosp lake louise ab canada october 
freedman mazieres content publishing coral 
proceedings usenix acm symposium networked systems design implementation nsdi san francisco ca march 
gaede nther multidimensional access methods 
acm computing surveys june 
ganesan bawa distributed balanced tables making hash 
tech 
rep computer science department stanford university 
gupta agrawal abbadi approximate range selection queries peer peer systems 
proceedings biennial conference innovative data systems research cidr asilomar ca january 
hildrum kubiatowicz rao zhao distributed object location dynamic network 
th acm symposium parallel algorithms architectures aug 
huebsch hellerstein lanham loo shenker stoica querying internet pier 
proceedings vldb berlin germany september 
jagadish linear clustering objects multiple 
proc 
acm sigmod international conference management data atlantic city nj may pp 

karger ruhl simple efficient load balancing algorithms peer peer systems 
proceedings third international peer peer systems workshop iptps feb 
karp ratnasamy rhea shenker adoption dhts public dht service 
proceedings third international peer peer systems workshop iptps feb 
knuth art computer programming 
addison wesley 
li loo hellerstein kaashoek karger morris feasibility peer peer web indexing search 
proceedings nd international workshop peer peer systems iptps 
berkeley ca feb 
litwin trie hashing 
proceedings acm sigmod ann arbor mi 
malkhi naor viceroy scalable dynamic emulation butterfly 
acm symposium principles distributed computing july 
maymounkov mazi res kademlia peer peer information system xor metric 
st international workshop peer peer systems cambridge ma mar 
ratnasamy francis handley karp shenker scalable content addressable network 
acm sigcomm san diego ca august pp 

reynolds vahdat efficient peer peer keyword searching 
proceedings ifip international conference distributed systems platforms open distributed processing middleware june 
rowstron druschel pastry scalable distributed object location routing large peer peer systems 
proceedings th ifip acm international conference distributed systems platforms middleware nov 
rowstron druschel storage management caching past large scale persistent peer peer storage utility 
th acm symposium operating systems principles banff canada oct 
salzberg comparison access methods time evolving data 
acm computing surveys 
sharman networks kazaa media desktop 
stoica zhuang shenker surana internet indirection infrastructure 
acm sigcomm pittsburgh pa aug 
stoica morris liben nowell karger kaashoek dabek balakrishnan chord scalable peer peer lookup protocol internet applications 
ieee acm transactions networking feb 
tang xu dwarkadas peer peer information retrieval self organizing semantic overlay networks 
acm sigcomm karlsruhe germany aug 
waldvogel varghese turner plattner scalable best matching prefix lookups 
acm symposium principles distributed computing puerto mexico june 
warren salmon astrophysical body simulations hierarchical tree data structures 
proceedings supercomputing sept 
yu ooi tan jagadish indexing distance efficient method knn processing 
proc 
th international conference large data bases vldb roma italy sept pp 

yu vahdat costs limits availability replicated services 
proceedings th acm symposium operating systems principles sosp lake louise ab canada october 
