cell modeling agent formalisms kenneth webb tony white sussex university carleton university canada webb sussex ac uk scs carleton ca systems biology community building increasingly complex models simulations cells biological entities 
community look alternatives traditional representations provided ordinary differential equations ode 
making object oriented oo paradigm unified modeling language uml real time object oriented modeling room visual formalisms describe simple model includes membranes lipid multiple compartments including variable number substrate molecules enzymes reaction rules metabolic pathways 
demonstrate validation model comparison comment reusability model components 
researchers bioinformatics systems biology increasingly computer models simulation understand complex inter intra cellular processes 
principles object oriented oo analysis design implementation standardized unified modeling language uml directly applied top modeling simulation cells biological entities 
describes abstracted cell consisting membrane bounded compartments chemical reactions internal modeled tools rational rose realtime rrt uml software development tool 
resulting agent approach embodied cell assembly kit produces models similar structure functionality specified systems biology markup language implemented cell virtual cell tools currently available biology community 
claim approach offers greater potential modeling flexibility power oo uml room rrt utilizes actor concept implementation 
oo paradigm uml methodology rrt tool represent accumulation best practices software development community community constantly expected build complex systems level complexity starting approach systems biology 
represents agent cell modeling environment built top state art software modeling tools practices 
approaches mentioned fundamental distinction structure behavior 
deals mainly top structure membranes compartments small molecules relationships shows bottomup behavior active objects enzymes transport proteins lipid incorporated structure produce executable program 
differential equations determine time evolution cellular behavior case cell modeling systems described 
differential equations find difficult model directed local diffusion processes subcellular 
closely resembles collection autonomous agents active objects enzymes transport proteins lipid act parallel elements set shared data structures called blackboards compartments small molecule data structures 
differential models difficult reuse new aspects cell structure need integrated 
motivation demonstration high degree reuse agent models developed reuse behavior structure separately combination 
note agent modeling cells area increasing research interest prompting communication research 
consists sections 
section introduces real time object oriented methodology room 
model described uses concepts inheritance containment ports connectors 
having introduced model validation section provided 
concludes review key messages 
room formalism david harel originator hierarchical state diagram formalism universal modeling language uml early proponent visual formalisms software analysis design argued biological cells multi cellular organisms modeled reactive systems real time software development tools 
reactive systems complexity stems necessarily complicated computation complicated reactivity time 
highly concurrent time intensive exhibit hybrid behavior predominantly discrete nature continuous aspects 
structure reactive system consists interacting components control behavior system highly distributed components 
structure dynamic components repeatedly created destroyed system life span see 
rational rose realtime rrt visual design implementation tool production telecommunication systems embedded software highly concurrent real time systems 
combines features uml real time specific features visual notation real time object oriented modeling room 
rrt application main function react events environment internally generated timeout events real time 
software developers design software rrt decomposing system inheritance hierarchy classes containment hierarchy actors uml class diagrams 
architectural actor capsule called rrt contains uml state diagram visually designed programmed react externally generated incoming messages generated capsules sent external systems internally generated timeouts 
agents system architectural actors rrt model 
messages exchanged ports defined uml diagram capsule 
ports instances protocols interfaces define sets related messages 
java code system executed actors state diagrams transitions state may self transition state 
executing rrt system organized collection communicating finite state machines 
rrt run time scheduler guarantees correct concurrent behavior making sure transition runs code completion message processed 
rrt design tool visual 
design create containment structure capsules dragged list available classes classes 
example designer may drag instance nucleus visual representation establishing containment relationship 
compatible ports different capsules graphically connected allow sending messages 
uml state diagrams drawn represent behavior capsule 
useful uml graphical tools include case diagrams sequence diagrams 
external java classes readily integrated system 
rrt allows time evolution simulation watched instrumented breakpoints stepped 
developer generates executing system visual programming dragging dropping objects graphical editor canvas 
rrt generates required code diagrams produces executable actor program 
executable run observed design diagrams dynamically monitor run time structure behavior system 
powerful combination actor oo paradigm embodied uml room visual formalisms added flexibility java programming languages bundled development tool rrt provide appropriate biological modeling 
summarize benefits cell biological modeling identified far include support concurrency interaction entities scalability large systems inheritance containment structure system ability implement type behavior implemented java actor instantiation class ease multiple instances class subclassing capture entities common differ 
containment hierarchy model classes capsules containment purpose small example system described model simulate metabolic pathways especially pathway takes place cytoplasm tca cycle takes place mitochondrial matrix 
includes nucleus allow modeling genetic pathways changes extra cellular environment effect changes enzyme protein levels 
model easily extensible allow specialized types cells 
shows set candidate entities organized inheritance hierarchy drawn uml class diagram 
lines triangle standard uml notations inheritance 
particular specializations generic type 
potentially different subclasses 
share certain characteristics typically differ specific constitute 
shows specific solution entities contains mix small molecules dissolved solvent water 
entity classes subclasses 
shows different hierarchy containment 
uml class diagram shows highest level contained 
turn contains cytoplasm nucleus 
reductionist decomposition continues levels 
includes dual membrane structure inter membrane space solution internal matrix space solution 
part inheritance hierarchy shown figures 
membrane contains specific type depends type membrane contained 
specifying adjacency model constructed capsules instances classes shown 
capsules arranged containment hierarchy shown 
capsules represent agents simulation 
connectivity capsules determines adjacency changes state capsule affect 
changes occur exchange messages 
adjacent interacts cytoplasm adjacent interact directly nucleus 
interactions nucleus occur cytoplasm 
important structural architecture place things adjacent need adjacent allowed interact 
adjacency represented protocols 
protocol specific set messages exchanged capsules allow interaction 
configuration protocol signals 
simulation starts chromosome nucleus sends message cytoplasm recursively pass message contained capsules 
active object enzyme receives message determines type takes characteristics defined genome type 
solution receives message extracts quantity various molecules contains example glucose molecules 
addition passed messages ports configuration information may passed capsule parameter created 
entire containment hierarchy configured 
approach nucleus purpose simulation similar actual role biological cell 
messenger rna signal message reconfigure system creating new enzyme types instances simulation evolves time 
adjacency protocol allows configured capsules exchange messages establish adjacency relationship 
capsules representing active objects enzymes types engage chemical reactions acting small substrate molecules send messages 
capsules contain small molecules types solution respond messages 
capsule structure diagram shows contained capsules named ports connector lines ports 
color port black white indicates relative eukaryotic cell capsule structure direction message movement 
represents significantly simplified model final model includes capsules shown 
full model shown 
full description scope 
defining desired behavior system achieved specifying patterns message exchange capsules 
sample model pathway implemented multiple enzymes cytoplasm acting concurrently set complete structure sample model capsules ports connectors 
enhancement additional details added 
small molecules 
tca metabolic pathway similarly implemented concurrent actions multiple enzymes matrix acting small molecules 
movement small molecules membranes implemented various lipid 
example transports transports second membrane 
enzyme behaviour shows uml state diagram representing behavior enzyme active object 
created initialize transition 
part transition executes line code sends message port 
subsequently receives response message port stores part message creates timer invoked enzyme state machine regular interval transition active state 
state diagrams lipid transport proteins include additional states need connect small molecule containers inside outside 
kinetics enzyme reactions enzyme reactions take various forms 
consider simplest case enzyme irreversibly converts single substrate molecule different product molecule 
irreversible meant enzyme convert product substrate 
complex reactions include combining substrates resulting product splitting single substrate products making inhibitors 
code implements irreversible kinetics sm data structure case located gene refers specific gene chromosome 
processing active objects types data data know types message exchange occur initial configuration 

irreversible substrate product activator inhibitor 
case irr sb pr ac 
sm molecule gene get 
gene gene 
sm molecule gene dec 
sm molecule gene productid 
break gene encoded set features includes protein kinetic constants 
example code gene refers upper limit rate reaction gene constant km gives concentration percentage difference results substrate molecule reaction proceed half maximum velocity 
software package performs processing odes 
implements irreversible kinetics implemented line code model 
validation main focus qualitative model approach provides quantitative results closely approximate computed tool claim produce accurate quantitative results 
addition practical value having generate accurate results help validate design implementation 
simplified pathway model run parallel 
model includes standard enzymes eleven standard substrate product 

enzymes implemented irreversible inhibitors 
enzyme reactions convert substrate product 
sole exception fourth enzyme reaction converts substrate products phosphate 
units time models seconds realistically thought simply discrete timesteps 
results experiment shown 
initially units 
course simulation timesteps eleven difference results greater 
continuously glucose model passage time version 
cell constantly amount glucose transporting low rate extra cellular solution 
low rate currently implemented sufficient keep glucose constant 
results glucose level decreases seconds 
described modeling approach tool developed principles agentbased modeling suitable application sophisticated cell modeling 
demonstrated validation model 
visual nature tool considerably simpler understand compared conventional differential equation models container effectively support system level models proposed tomita 
believe clearly confirms value agentbased modeling reported 
reused classes protocols models neurons considerable success research reported 
clearly modeling possible 
active objects polymers composed repeating units monomers 
becker states major types polymers cell 
suggests general principle 
active objects influence active objects having effect constituent monomers 
enhancement implemented enzymes transport proteins proteins 
proteins considerably complex lipid 
amino acids constitute protein coded dna order amino acids critical importance string amino acids folds threedimensional shape 
behavior protein extremely complex function fine grained structure 
tractable problem interactions proteins protein regulates activates protein process phosphorylation involves relatively simple reversible structural modification change fine grained structure protein 
approach described applied relatively easily modeling networks interacting proteins 


systems biology markup language medium representation exchange biochemical network models 
bioinformatics 


short 
philosophical transactions mathematical physical engineering sciences 

tomita 
cell software environment cell simulation 
bioinformatics 

mendes 
biochemistry numbers simulation biochemical pathways 
trends 
biochem 
sci 



system interactive metabolic analysis 
animating cellular map th international meeting 
university press isbn 

morton firth bray 
predicting temporal fluctuations intracellular signalling pathway 
journal theoretical biology 


virtual cell software environment computational cell biology 
trends biotechnology 

khan 
multi agent system quantitative simulation biological networks 
aamas 

gonzalez 
agent intracellular signalling model 
biosystems 

harel 
statecharts visual formalism complex systems 
science computer programming 

harel 
visual formalisms 
communications acm 

harel 
grand challenge computing full reactive modeling multi cellular animal 
lncs 

kam harel 
formal modeling elegans development scenario approach 
lncs 

selic ward 
real time object oriented modeling 
john wiley sons new york 

becker 
world cell rd ed 
benjamin cummings menlo park ca 

harvey 
time joint attractors asynchronous random boolean networks 
ecal 
