institute software research ics university california irvine irvine ca www isr uci edu institute software research university california irvine extending representational state transfer rest architectural style decentralized systems rohit khare univ california irvine rohit ics uci edu richard taylor univ california irvine taylor uci edu october isr technical report uci isr www isr uci edu tech reports html extending representational state transfer rest architectural style decentralized systems rohit khare richard taylor institute software research university california irvine irvine ca rohit taylor ics uci edu isr technical report uci isr october takes time trust establish agreement traditional consensus architectural styles safely accommodate resources change faster takes transmit notification change resources shared independent agencies 
alternative decentralization permitting independent agencies decisions 
definition contrasts distribution agents share control single decision 
ultimately physical limits network latency social limits independent agency call solutions accommodate multiple values variable 
approach challenge architectural proposing constraints configuration components connectors induce particular desired properties application 
specifically implement evaluate variations world wide web representational state transfer rest architectural style support distributed decentralized systems 
extending representational state transfer rest architectural style decentralized systems rohit khare richard taylor institute software research university california irvine rohit taylor ics uci edu takes time trust establish agreement traditional consensus architectural styles safely accommodate resources change faster takes transmit notification change resources shared independent agencies 
alternative decentralization permitting independent agencies decisions 
definition contrasts distribution agents share control single decision 
ultimately physical limits network latency social limits independent agency call solutions accommodate multiple values variable 
approach challenge architectural proposing constraints configuration components connectors induce particular desired properties application 
specifically implement evaluate variations world wide web representational state transfer rest architectural style support distributed decentralized systems 

interested designing decentralized software decentralized society systems permit independent citizens communities corporations maintain models world 
portions applications operate control multiple independent administrative authorities agencies may physically separated extent communication latency parts significant factor design 
state art software engineering long focused designing solutions distributed systems multiple agents share control single model 
unfortunately presumes possible establish consensus current value variable 
physics abandoned simultaneity relativity formal models computing disproved consensus faulty asynchronous networks 
regardless isr technical report uci isr dominant centralized client server architectures may appear today physical limits latency social limits free agency decentralization inevitable software 
scenario electric utilities example industry embracing decentralization motivate development novel architectural styles 
origin hardware software system controlling electricity distribution essentially centralized 
local regional international grids interconnected single agency control centers typically public mandate preserve equilibrium supplies costs independent private generator consumer 
contrast widely acknowledged vision power generation distribution storage support vast array smaller scale devices potentially owned operated directly consumers businesses absence central oversight 
device control software support independence replacing price variable estimates best price available neighbors creating network small scale markets 
eliminating single point failure eliminates single point control 
today hierarchically delegated regulatory authority establishes agency responsible maintaining reliable power 
control software decentralized power webs needs establish interoperability standards needs manage dynamic peer peer trust relationships 
approach approach coping uncertainty disagreement software architecture constraints configurations components connectors induce desired properties system 
introduces new architectural styles expressly designed accommodate decentralization 
sketch formal model problem allows analyze limitations consensus architectural styles 
second address limitations identifying new architectural elements constraints added existing network architectural style induce properties 
third evaluated feasibility newly derived styles implementing infrastructure applications 

problem analysis design discipline software development subject vagaries fashion 
years surge popularity term decentralization hear decentralized filesharing decentralized supercomputers decentralized namespaces peer peer service oriented architectures 
date software engineering software architecture literature embraced formal definition decentralization full text search acm digital library considered synonym distribution 
occurs official acm subject classification respect organization mis organizations 
goal provide precise testable definitions 
section discuss factors leading decentralization latency agency provide formal definition simultaneity terms consensus problem define properties centralized distributed estimated decentralized resources 
latency ibm ibm ibm stock price server new york stock trader chicago stock stock trader trader london london msec msec msec msec latency induces uncertainty traders away centralized resource 
latency simultaneous agreement impossible real world situations 
consider affects stock traded centralized nyse market 
london interested knowing current price stock consults server broadcasts current price 
realistically internet delays range seconds worse 
actual price new york changing hz impossible london know current price 
concentric circles represent latencies logarithmic scale 
radii correlated distance determine maximum update rate event source 
call horizon components reliably refer value variable right latency absolute constraint software architects takes time energy transmit information channel 
factored separate limits propagation delay bandwidth disconnection longest tolerable interruption 
agency latency physical limit concept agency socially constructed 
referring divergent interests organizations ultimately operate computers software runs 
agency boundary denotes set components operating behalf common human authority power establish agreement set right disagree 
consider database package 
run local copy store true value accessing application network raises possibility data may tampered biased 
profound difference output local database component believe remote database service claimed 
simultaneous agreement impossibility consensus considered fundamental results theory distributed computing 
fisher lynch paterson proved completely asynchronous network maximum message latency process fail impossible remaining processes come agreement 
lynch textbook includes proof partially synchronous network finite message loss reordering consensus requires seconds 
general tolerating processes failing requires additional rounds 
event model consensus ensure simultaneity 
processes may decide sooner varying network latency 
furthermore value shared modified processes may keep prior value moved 
term simultaneous agreement originated contract law specifically defining financial instruments 
ordinary cash transaction simple example simultaneous agreement trading price trade 
restating formally condition separate variables leader follower define simultaneous agreement interval satisfying conjunction ti tj ti tj ti ti tj leader leader leader follower values equal point leader changed 
condition met shaded area world lines drawn vertically state leader follower processes 
message takes travel simultaneous agreement holds interval message arrives leader changes 
variable changes interval shorter impossible message arrive time simultaneous agreement impossible 
corollary impossible guarantee simultaneous agreement centralized resource changes frequently times second times second order tolerate failures 
note definition requires leader remain constant agreement established 
bottom diagram leader switches back message arrives follower mere coincidence 
follower contact leader request lock leader indicate period time commits holding value constant called lease 
leased value represented value interval pair interval specified start time duration lease 
conjunction global clock lease possible recipient determine value valid 
follower correctly reset value follower instant leader able change case extend message specify lease interval 
leader leader leader leader leader message simultaneous agreement message message follower follower follower follower shaded region illustrates interval simultaneous agreement 
related models 
consensus fundamental problem surprising software architects variety models choose byzantine generals 
problem parties coordinate attack simultaneously win lie 
solution originally proposed robust generals 
suffice read decentralized applications file sharing 
invariant boundaries 
identified boundary systems agree invariant closely resembles specific condition simultaneous agreement 
general condition applying invariant boundaries stated consistency availability cap theorem proven states impossible reliably provide atomic consistent data partitions network 
feasible achieve properties real world systems today forced settle returning data time logical clocks 
years approaches simulate operation centralized sequential processor atop distributed processing network logical clocks virtual synchrony group communication 
single assignment variables 
architect avoid disagreement entirely restating problem eliminate mutable variables 
example technique single assignment resetting value leader times series distinct variables set just leader second leader 
approach manipulating pointers values parallel functional languages 
peer peer communication 
presents formal model peer peer computing uses variables represent channels peers 
casting communication channels variables may clearer latency network links determines maximum possible update frequency interaction 
definitions formal model simultaneous agreement derived precise declarative definitions properties centralized distributed estimated decentralized variables expanded 
opt concise formal definitions centralized variable requires simultaneous agreement leader followers 
distributed variable determined applying shared decision function participants inputs 
estimated variable simultaneous agreement fraction time 
decentralized variable determined applying private assessment function trusted participants variables estimates variables way distinguishing terms degree indirection required implement 
basic element information storage value centralization requires agent value 
accomplished simply connecting devices wire shared medium 
level indirection private namespace storing values time variable 
distributed system closed group agents uses single logical name refer shared variable actual value stored place set shadow variables held participant 
estimated system putative shared variable local shadow copy may precise 
decentralization depends additional distinction public namespace concepts may differ agencies 
intuitive illustration difference typing address weather org lax web browser typing concept la weather report web search engine query box 
return links different organizations opinions weather los angeles forecasts louisiana abbreviated la 

new consensus architectural styles proceed extend understand properties rest induce 
describe different capabilities added rest synchronous event notification messages active proxies functions select current value shared resource current representations past ones 
combine basic facilities derive new style decentralized systems 
modern web architecture different network architectural styles client server remote data access 
style popularly known tier client server combination styles presentation interface client business logic server storage database 
arguably dominant style application development mid architecture modern web representational state transfer rest 
wire just renaming device variables alain martin asynchronous vlsi designer style software components recast network services 
clients request resources servers proxy servers resource name location specified uniform resource locator url 
interactions obtaining resource representation performed synchronous request response messages open standard network protocol 
requests relayed series proxies filters caches changing semantics 
rest essential distinction details 
layer indirection resources concrete representations captured web key insight decentralizing hypertext permitting broken links independent sites 
rest web archetypal application significant limitations shot 
request generate single response response error message lost normative rules proceeding 

request proceeds client server 
way transfer information group components leads nested proxy chains way 
request initiated client response generated immediately precluding servers sending asynchronous notifications 
rest model peer peer relationships 
representational state transfer rest ground exploration new issues began restating rest verify induce property consensus 
rigorous correctness argument elucidated rest depends synchronized global clocks ensure leases expire simultaneously 
get client rest origin server illustration rest architectural style 
synchronization presumes response message specifies lease interval 
real world specify permissible resource update scheduled 
external environment update resources random editing file hand 
solution set default lease duration force server discard delay updates arrive deadline heartbeat strategy 
problem computer science solved level indirection david wheeler chief prog table summary rest style 
goal refer centralized resource 
new elements new constraints induced property explicit clients servers caches synchronized 
specify consistent expiry deadline resource updated 
consensus ensures local resource proxies agree leader value 
polling ensure aside developed variation rest polling rest able induce weak form simultaneous agreement 
clients follow leader values long minimum lease interval 
asynchronous rest achieve simultaneous agreement quickly theoretically possible change propose event approach permits central resource broadcast notifications state changes 
insight recast concept resource rest event source emits event notifications corresponding change representation 
watch client rest notify notifying origin server illustration rest architectural style 
rosenblum wolf propose event effect termination invocation operation object interest events occur regardless re observed stance opposite insofar consider act observation distinguishes events messages 
specifically concern stems realization wire little discernable difference messaging protocol protocol 
dramatic difference programming model batch table summary rest style 
goal refer changing centralized resource 
new elements new constraints induced property send multiple responses watch request 
resource update lead transmission new representation 
simultaneous agreement ensures local resource proxies agree leader value updated hz 
message queue event handler 
view summarized event notifications messages cause actions case clear distinction occurrence event concrete notification observation 
shown transfer representations change resource long client stays connected long running watch request shot get multiple notify replies 
practice significant implementation challenge public internet 
routed rest rest tackled essential challenge latency message routing focus improving rest support multiple agencies 
specific property intend induce multilateral extensibility ability add functionality application components owned different agencies 
complication new rd th parties may trusted original client server distrust 
rest route client routing proxy post origin server illustration rest architectural style 
reason problem rest offers exemplary support active proxies add functionality modifying deployed applications arrange linear proxy chains 
permits intermediaries tamper messages 
table summary rest style 
goal compose services provided multiple agencies 
new elements new constraints induced property component permits clients control relaying 
representation transfer justified corresponding edge web trust 
multilateral extensibility compose trusted invocations requiring mutual trust 
redirection replies depicted services composed manner eliminates unjustified trust relationships minimizes total latency 
terms occurrence observation defined event lifecycle model 
rest rest rest rest arrest post get composing multiple proxies simple chained evaluation functions owned agencies data third illustrates combination asynchrony routing leads highest performance triangulation 
depicts approaches problem computing read fail form subscribe 
case rest dash dot line shows worst case 
order compare characteristic update frequencies count initial subscribe requests assuming occurred 
rest delegation earliest efforts extend web support authoring immediately ran lost update problem 
editors local cached copies easily overwrite simple put 
rest client success client failure dashed lines indicate update rate lock post route double arrows mean transmit repeatedly mutex lock proxy internet rpc put illustration rest style 
origin server typical criteria judging distributed database acid properties standing atomicity consistency isolation durability 
practical systems tradeoffs degree avoid tight coupling 
little architectural style enforce durability implementation choice consistency application specific semantic 
rest ensure total serialization updates resource 
component proxy wraps ensure mutually exclusive access 
contains atomic test set register identi watch watch notify latency evaluating styles 
goal new elements new constraints induced property table summary rest style 
refer pairwise distributed read write resource reliably 
component ensures client time write access origin server 
lock acquired attempting write 
current state resource read attempting write 
acid pairwise simultaneous agreement clients modify centralized resources absence contention 
fying client request messages forward instructed lock lease expires 
requests simply discarded register reset 
general form styles derived share control resource peers add function 
akin transaction processing monitors temporarily centralized control location commit protocol 
arrest distributed solution eliminates need single event router adding lock protocol lamport bakery algorithm 

new consensus free architectural styles horizon agency boundary uncertainty referring remote resource 
latency agency induce different sorts uncertainty loss precision vs loss accuracy 
communication components subject network loss delay congestion increase message latency 
depending degree auto correlation resource exhibits relying older information reduce precision local estimates 
furthermore resources decentralized ensemble independently controlled local resources estimates accurate 
single true value facts replaced host agency specific opinions 
insight managing risk computing consensus counterpoint acid properties centralized distributed systems 
called base properties require decentralized systems rely solely est effort network messaging current value remote resources elf centered deciding trust agencies opinions network bandwidth 
rest estimates step improve precision minimizing error current value local resource goal old elements new constraints induced property table summary rest style refer read centralized resource horizon tcp ip cache inertia assumes representation valid cache revalidation fails 
approximate agreement local proxy simultaneous agreement time single remote resource corresponds 
better understand role estimation everyday usage web specified rest elaboration rest default behavior best effort representation transfers pushed presentation layer network tcp retransmission protocols 
approximate representations returned caches sorts browser histories caching proxies content distribution networks 
staleness generally acceptable preferred cases 
self centered trust management enforced server access controls usernames passwords 
efficient representation formats selected content negotiation compressed encodings 
putting arrested combined basic capabilities derive new styles rest centralized arrest distributed arrest estimated arrest decentralized resources arrested 
combining asynchrony routing created class subscriptions building block table summary arrested style 
familiar event notification services 
architects specify simultaneous notification group components multiple persistent subscriptions 
event style easier induce acid arrest base arrest properties 
particular functions manage private proxy resources replace shared resources 
upper half table describes components store forward retransmissions lost delayed notifications predict values past information received discard information untrusted sources summarize past data send latest information 
ultimately summarizers take advantage excess bandwidth reduce latency speculating states 
extensions rest serve increase precision estimate single remote resource arrest 
ultimate challenge address aid architects designing applications accurately model uncertain information decentralized systems 
proposal increasing accuracy assess multiple simultaneously valid opinions concept agencies 
presume errors measurement independent speaking decentralizing concept conceivably price arbitrary value multiple observations reduce total error 
course decision function may simple minimum maximum mean median mode complicated turing complete simulation underlying physical process 
preferable blocking waiting lock transaction manager 
goal new elements new constraints induced property refer read write resource connected faulty network horizon 
decentralize control shared resource disjoint horizons connector adds endto retransmission 
predictor connector encapsulating turing complete prediction functions 
connector drops notifications untrusted sources 
summarizer connector resample queued events lower frequency reduce size 
assessor component manages risk inter agency disagreement true value panel opinions 
retransmission messages 
predict probable current state past data possible 
ensure reachable endpoints trusted 
prohibit transmission data 
eliminate buffering 
eliminate reliable remote resources contingent assessments remain 
best effort data transfer cope message loss 
approximate estimates cope message delay 
self centered cope dynamic participation 
efficient data transfer cope net congestion 
consensus freedom avoid presuming feasibility consensus 

implementation experience deriving new architectural styles validating properties induce construction conceptual exercise 
important establish new components connectors constraints implementable actual applications constructed style 
infrastructure years experience developing experimental event routing infrastructure lines 
eventually laid foundation commercial edition sold 
original prototype implementations released separately open source project december called mod analogy apache mod naming convention web server extensions 
mod existing web tools browsers web pages respond incoming events commercial example arrest infrastructure 
network real time plain text html xml soap relying java activex 
works mozilla netscape microsoft browsers 
event notification services implement component types introduced 
applicationspecific supplied architect estimators assessors 
appear sample applications reusable libraries implementation called 
applications focused specific application illustrate development methodology claims styles car auction shown 
centralized 
simplest mode owner central event router web server agent set prices 
tested writing classified ad events directly files server disk remote access 
screenshot car auction example 
distributed 
step allowing multiple bidders publish new bids shared topic 
tested rest relying central router arbitrate order bids arrived guarantee delivery arrest protocol count traders 
estimated 
example particularly high frequency primary type latency risk disconnection seconds arbitrage 
rest defaults policy inertia displaying bid hours 
experiment arrest connected feed excel spreadsheet adaptor built time series data extrapolate current prices 
decentralized 
adapted user interface generic concepts truck prices presenting price data different vehicles users configure types considered trucks calculated average current price 
note rely bidders classify vehicles trucks hidden hierarchy router topic names set individually trader 
methodology experience writing decentralized applications identify common issues arose 
arrested event architectural style phase developing decentralized application generic event analysis identifying components event sources subscription qualifiers message formats 
second phase methodology specifically addressing unique concerns raised decentralization 
steps 
identify agencies 
real marketplace interests traders brokers exchange diverge significantly 
note single organization may develop software enact agencies roles design remain robust face independent implementations 
part challenge developing architectural styles decentralization coming models software written 

characterize latencies 
step characterize latencies networks application run top real world phenomena attempting represent 
may challenging may appear nyse ticker stops updating stock price weekends valuation may keep changing news breaks 

establish web trust 
requires merely authenticating credentials agency determines external resources ought considered equivalent concept 
range lexical matching semantic web tags 

eliminate remote 
constraint unique arrested architectural style replacing resources owned external agencies private assessments 
architects face tradeoffs different prediction engines compression engines types estimators style isolates complexity 

track provenance events 
era computing resources event notification appropriate surplus bandwidth audit trails appropriate surplus storage 
ideally datum displayed user interface ought indicate confidence interval 
furthermore tracing ownership essential re evaluate results security breaches invalidate data rollback anti messages arrive 

formal definition decentralization analysis limitations consensus software architectural styles derivation new architectural styles enforce required properties implementations demonstrate feasibility styles sample applications 
summarizes findings 
identified basic factors limiting feasibility consensus latency agency 
correspond boundaries indicated dashed lines horizon components refer value variable right agency boundary components trust 
way describe horizon separates consensus styles consensus free ones agency boundary separates master slave styles peer peer ones 
identified new capabilities combined rest individually induce properties desired events routes locks estimates 
able combine derive new styles optimized types resources 
master slave styles estimated systems rest agency boundary consensus free styles rest arrest centralized systems rest rest rest arrest arrested decentralized systems arrest consensus styles rest distributed systems horizon peer peer styles diagram summarizing new architectural styles derived capabilities added rest 
centralized resources enforce simultaneous agreement extending rest event architectural style adding synchronous event notification active proxies arrest 
distributed control shared resources enforce acid transactions extending rest functions enable component serialize updates arrest 
alternative simultaneous agreement decentralization permitting independent agents decisions 
requires accommodating intrinsic sources uncertainty arise communicating remote agencies loss congestion delay disagreement 
corresponding constraints data transfer summarization data sent estimates current values data received elf centered trust management 
called base properties enforced replacing shared resources functions 
extensions rest increase precision measurements single remote resource arrest increase accuracy assessing opinions different agencies arrested eliminate independent sources error 
furthermore application styles real world problems shown feasible effective open source commercial tools 
author doctoral dissertation benefited support dr andr van der hoek dr debra richardson 
authors grateful assistance dr joseph touch dr james whitehead dr roy fielding dr eric adam rifkin 
material supported national science foundation 
association computing machinery 
acm computing classification system 

www acm org class ccs html berners lee hendler lassila semantic web scientific american may 
vol 
pp 

berners lee masinter rfc uniform resource locators url 
internet engineering task force december 
birman joseph exploiting virtual synchrony distributed systems eleventh symposium operating systems principles austin texas 


eds 
distributed generation power paradigm new millenium crc press boca raton florida brewer invariant boundaries invited keynote th international workshop high performance transaction systems pacific grove ca october 
research microsoft com presentations brewer ppt carzaniga rosenblum wolf design evaluation wide area event notification service acm transactions computer systems 
pp 

information processing electricity distribution systems proceedings annual conference volume acm press pp 

control distributed electrical generation systems ashrae transactions 
dickerson battle decentralization infoworld may 
www infoworld com article html fielding architectural styles design network software architectures phd thesis university california irvine information computer science irvine ca 
fielding gettys mogul frystyk masinter leach berners lee rfc hypertext transfer protocol 
internet engineering task force june 
fielding taylor principled design modern web architecture acm transactions internet technology toit 
pp 

fisher lynch paterson impossibility distributed consensus faulty process journal acm 
pp 

fox brewer harvest yield scalable tolerant systems proceedings hotos vii 
stanford edu pub publications ha yield pdf wattenhofer theory peer peer computability proceedings th international colloquium structural information communication greece june 
ethz ch projects html gilbert lynch brewer conjecture feasibility consistent available partition tolerant web services sigact news 
theory lcs mit edu tds papers gilbert brewer ps gray reuter transaction processing concepts techniques 
morgan kaufmann san francisco ca 
pp 
halstead multilisp language concurrent symbolic computation acm transactions programming languages systems 
pp 

jefferson virtual time acm transactions programming languages systems 
pp 

khare name 
trust 
internet scale namespaces part ii ieee internet computing 
pp 

khare killed gopher 
extensible murder mystery ieee internet computing jan feb 
vol 
pp 

www ics uci edu rohit ieee html khare extending representational state transfer rest architectural style decentralized systems phd thesis university california irvine information computer science irvine ca 
khare rifkin composing active proxies extend web omg darpa mcc workshop compositional software architectures monterey ca january 
khare rifkin mod open source event router apache 
mod sourceforge net kubiatowicz extracting guarantees chaos communications acm 
pp 

lamport time clocks ordering events distributed system communications acm 
pp 

lamport mutual exclusion problem part ii statement solutions journal acm 
pp 

lamport shostak pease byzantine generals problem acm transactions programming languages systems 
pp 

lynch distributed algorithms 
morgan kaufmann san mateo ca 
pp 
martin wires forks multiple output gates gries ed 
beauty business 
milojicic lukose pruyne richard rollins xu peer peer computing 
hp labs palo alto ca 
pp 
oram minar peer peer harnessing power disruptive technologies st ed 
reilly associates 
pp 
renesse birman maffeis horus flexible group communication system communications acm 
pp 

rosenblum wolf design framework internet scale event observation notification th european software engineering conference th acm sigsoft symposium foundations software engineering zurich switzerland september springer verlag pp 

rosenblum wolf internet scale event notification workshop internet scale event notification irvine ca july 
www ics uci edu abs rosenblum html schneier secrets lies 
john wiley sons 
pp 
parallel programming model sequential semantics phd thesis california institute technology computer science department 
touch model latency communication phd thesis university pennsylvania computer information science 
eds 
technology year award publish subscribe technology infoworld january 
www infoworld com article toy sb html 
