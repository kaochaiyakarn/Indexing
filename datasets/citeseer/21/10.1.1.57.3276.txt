chasing constrained tuple generating dependencies michael maher griffith university cit gu edu au divesh srivastava research divesh research att com investigate implication problem constrained tuple generating dependencies ctgds extension tuple equality generating dependencies permits expression semantic relations constraints variables 
implication problem central identifying redundant integrity constraints checking integrity constraints constraint databases detecting independence queries updates optimizing queries 
provide chase procedures implication problem 
cautious generating tuples constraints justified second speculative generating tuples constraints attached conditions exist hold 
cautious chase efficient sense powerful demonstrating ctgd implied 
demonstrate constraint domains independence negative constraints chase procedures equally powerful 
cautious chase chase choice constraint domains weak implication procedure constraint domains 
describe conditions chase procedures terminated early weakening 
develop form magic sets optimization making chase procedures ctgds goal directed magic sets chase procedures 
expanding traditional data dependencies take account author performed ibm watson research center 
semantic relations elements relations 
earlier exceptions concentrated problems semantic relation admitted elements equality 
call semantic relations constraints terminology constraint logic programming constraint databases 
constraint refers semantic relations integrity constraints 
consider class data dependencies extends tuple equality generating dependencies addition constraints 
call constrained tuple generating dependencies ctgds 
class ctgds includes traditional data dependencies fds egds tgds 
includes constrained functional dependencies constraint generating dependencies implication constraints deductive queries involving constraints previously extensions traditional dependencies addition constraints 
show power flexibility ctgds examples 
example consider situation employee may 
ctgd expresses integrity constraint employee name boss security low security clearance boss employee medium security clearance emp emp integrity constraint expressed combination tuple generating dependencies 
example constraint generating dependency emp emp asserts employee boss employee low security clearance medium security clearance 
permit possibility boss low security clearance 
example express source destination cost contains cheapest path points directed graph edge weights transitively closed relation obeying triangle inequality write address unrestricted implication problem ctgds collection ctgds single ctgd determine database state satisfied case satisfied 
stated briefly 
implication problem central identifying redundant integrity constraints checking integrity constraints constraint databases detecting independence queries updates optimizing queries 
approach implication problem chase procedures 
previous chase procedures dealt subclasses ctgds 
contributions follows introduce chase procedures implication problem ctgds establish soundness sections 
chase viewed cautious generating tuples appear database satisfying containing generates new tuples known constraint ctgd entailed current constraint store 
contrast second chase speculative 
permits generation constrained conditional tuples may shown irrelevant 
fails guarantee employee employee boss expressed dependency 
results extend finite implication 
second compare relative power chase procedures inferring inferring section 
cautious chase unable exploit disjunctive knowledge speculative chase 
result speculative chase strictly powerful inferring show procedures equivalent inferring constraint domain independence negative constraints property 
furthermore cautious chase powerful detecting independence negative constraints holds 
cautious chase preferred constraint domains independence property 
third discuss issue termination chase procedures section 
describe conditions chase procedures terminated early weakening inference power 
fourth develop form magic sets optimization making chase procedures ctgds goal directed section 
chase procedures akin bottom evaluation deductive database programs compute tuples irrelevant implication problem 
modification magic sets optimization guide chase relevant ctgds improve termination characteristics chase 
best knowledge magic sets chase procedures 
constraints concept constraint domain formalize basic assumptions constraints interpretation 
consists structure interprets symbols set class formulas consider constraints 
definition signature sigma sigma structure class sigma formulas 
pair called constraint domain 
underlying domain values class constraints 
assume class constraints contains equations terms closed variable renaming conjunction existential quantification 
works convenient assume closed existential quantification ctgds implicitly introduce expression 
dependencies introduce existential quantifications 
important property constraint domains generally phrased form independence 
property independence negative constraints investigated generality 
significance property optimization clp programs discussed 
property identify tractable classes constrained functional dependencies constraint generating dependencies 
denote existential closure expression definition constraint domain independence negative constraints property constraints delta delta delta iff constrained tuple generating dependencies ctgds implication problem defining constrained tuple generating dependencies introduce terminology 
interest clarity consider classes variables 
variables expression dependencies 
represent words initial letter capitalized 
second class variables simply call variables represent elements hypothesized tuples consequently generated tuples 
represented words lower case letter 
variables play role formal parameters variables play role symbolic constants 
denote set variables denote set variables 
substitution mapping set substitutions denoted 
definition constrained tuple generating dependency ctgd expression form relation symbols constraints respectively tuples terms disjoint collections variables 
assume arguments atoms ctgds may variables occur argument atom occurrences constraints 
call atoms simple atoms set simple atoms denoted sa 
assumptions involve loss generality equational constraints place multiple variable occurrences occurrences non variable terms atoms 
follow convention expresses arguments expresses free variables occurring ctgd represented ym omit existential quantifier reconstructed remainder ctgd 
assume existence finite set pi relational symbols associated arity 
set describes relational schema underlying relational deductive constraint database express dependencies 
collection ctgds single ctgd ctgd implication problem problem determining database state satisfied case satisfied 
converse determination states independent sense imposes restriction database states expressed chase procedures overview treatments tuple generating dependencies approach implication problem generally chase procedure 
basic outline procedures follows set dependencies dependency form ffl hypothesize existence tuples relations antecedent satisfied 
ffl treat defining closure operator generating tuples exist collection relations satisfies contains hypothesized tuples 
denote closure hypothesized tuples ffl infer contains copy infer vacuously contains inconsistency 
infer contain copy details chase procedure definition closure operator containment copies inconsistency dependent class dependencies addressed 
traditionally chase applied relations uninterpreted domain constants equality constraint predicate 
case effect equality represented applying substitution terms tuples necessary handle constraints explicitly 
deal arbitrary constraint predicates need store constraints store addition collection tuples tuples part state modified chase procedure 
state represents partial knowledge database accumulated far 
ctgd tuple collection tuples approach allow augmentation collection tuples store constraints conjunction initial store entails implies action dependency chase procedure somewhat similar conditional rewrite rule guarded clause concurrent constraint language 
consider example ctgd emp id time time pension id contrib contrib expresses integrity constraint employee employed years pension plan contributions exceed year 
state tuple emp id time store contains time add tuple pension id contrib conjoin constraint contrib state 
store constraints imply time justification modifying state sure employee represented tuple emp id time employed years 
certainly true cases 
consider situation dependency emp id time time pension id contrib contrib clearly result dependencies employee pension plan contributions exceeding 
state constraints time store implies time time appropriate inference chase procedure described 
furthermore impossible general merge similar dependencies 
lead associate constraint formula derived tuple constraint 
constraint formula describes assumptions conditions tuple constraint derived 
example pension plan dependency derive pension id contrib time contrib time know existence tuple emp id time 
derived objects express tuple form pension id contrib database contrib provided tuple emp id time time 
similarly consider second pension plan dependency derive pension id contrib time contrib time 
derived tuples infer existence tuple pension id database consistency notation constraint logic programming write derived object left condition right 
satisfies pension plan dependencies contains tuple emp id time 
chase procedure employ implications conditional tuples conditional constraints discussed previously chase procedure 
represent state procedure set tuples environment constraints application ctgd similar conditional rewrite rule discussed earlier 
simple chase procedure pedagogical value sophisticated chase procedure section structure simpler procedure 
simpler procedure independent justification seen efficient approximation chase equally complete constraint domain satisfies independence negative constraints 
ctgd lhs rhs denote respectively portions left right arrow 
denotes lhs rhs atoms denotes set simple atoms occurring cons denotes conjunction constraints occurring denotes variables occurring lhs denotes variables existentially quantified immediately right arrow definition ctgd ff denotes fixed injective substitution domain variables range ff called universal variables 
extension ff variables substitution domain identical ff informally ff mapping hypothesized tuples 
identification copy done extension ff 
names universal variables significant detecting variables generated chase implicitly existentially quantified names important computation 
consider implication problem form ym main parts specify defining chase domain initial value basic step computation case activation single dependency termination conditions inferences termination 
domain consists symbolic database tuples env tuples set simple atoms env conjunction constraints set applied activations activations subset theta set variables ars 
domain sa thetal theta thetax substitutions theta 
initially activations empty ars range ff tuples atoms lhs ff env cons lhs ff ff fixed injective substitution domain vars lhs 
basic step chase procedure consists choosing dependency applying current state chase refine state 
dependency substitution maps universal variables variables ars called activation 
choose ctgd form ym substitution 
require conditions hold 
domain codomain ars 

activation applied 
activations 

instantiated tuple occurs set tuples tuples database 

env 
extension fi fi tuples env fi symbolic database satisfies activation simply update activations completely precise true domain quotient domain equivalence iff variable renaming preserves variables ff 
activations activations fl injective substitution maps new variables variables occurring ars 
refinement symbolic database tuples tuples fq fl mg env env fl activations activations ars ars fl basic step carried repeatedly conditions satisfied 
exists substitution oe extends ff fq oe mg tuples env oe 

env unsatisfiable env 

fixpoint reached basic step applied previous cases applicable 
detection second case purely constraint domain 
note fixpoint procedure may terminate general 
chase procedure terminates conditions satisfied assert implication problem 
cases soundly infer third infer independence negative constraints holds 
straightforward see chase progresses tuples gets larger env gets stronger 
activation applicable step chosen remains applicable steps chosen 
depending state symbolic database application activation update aspects symbolic database simply update activations 
chase procedure confluent 
denote equivalence relation symbolic databases equal redundant tuples constraints modulo renaming existential variables 
chase confluent modulo 
theorem consider procedure applied set ctgds ctgd suppose procedure terminates step ffl terminates case ffl terminates case vacuously 
ffl terminates case finite independence negative constraints chase efficient storing rhs activations requiring rhs activations activation applied 
loss inference power making restriction atoms constraints generated simply variants renaming existential variables atoms constraints generated activation added rhs activations 
points execution chase procedure 
choice activations fair activation applicable ignored infinite execution 
dependencies constraint generating dependencies advisable apply 
tuples finite modify tuples strategy result unfairness strengthens env increasing likelihood activation applicable tested 
abiteboul vianu hull beeri vardi define chase procedure dependencies 
consider chase ctgds constraint domain infinitely constants denoting distinct elements domain 
rephrased terminology chase particular case chase point generating tuples constraints activation time chase simultaneously applies activations available chosen dependency second chase independence negative constraints chase procedure described section sound inferring ctgd consequence set general inferring independent pension example section clear 
furthermore chase procedure incomplete chase procedure terminates finitely example demonstrates 
ameliorate problems need sophisticated chase procedure complicated representation individual tuples constraint environment 
definition constrained atom pair consisting simple atom constraint written call head constrained atom 
ca denote set constrained atoms set constraints bc set boolean combinations constraints ca sa theta ca heads denotes set heads elements dom ca theta bc theta theta theta 
tuple generalized constrained atom 
constraint environment element bc simply constraint 
set activations remains 
ctgd ym ff injective substitution domain initial state chase activations ars ff tuples true ff ng env ff 
basic step chase procedure consists refining state application dependency choose ctgd form ym substitution 
domain 

activation applied 
activations 

instantiated tuple occurs set tuples database head constrained atom 
constrained atoms extensions fi fi tuples env fi activations activations fl injective substitution maps new variables variables occurring ars 
refinement symbolic database tuples tuples fl mg env env fl activations activations ars ars fl basic step carried repeatedly conditions satisfied 
exist substitutions oe extend ff fq oe kg tuples env oe 

env unsatisfiable env 

fixpoint reached basic step applied previous cases applicable 
cases infer third infer theorem consider procedure applied set ctgds ctgd suppose procedure terminates step ffl terminates case ffl terminates case vacuously 
ffl terminates case finite chase efficient storing testing rhs cons 
loss inference power making restriction constrained atoms constraint formulas generated simply variants renaming existential variables generated activation added activations 
note chase retain mapping variables appearing constraints lhs constraints occur output basic step 
demonstrate chase procedure works apply pension plan example discussed section 
example consists ctgds emp id time time pension id contrib contrib emp id time time pension id contrib contrib emp id time pension id contrib contrib ff map id id time time 
initially tuples id time ars fid activations env true 
applying ctgd results addition pension id contrib time tuples contrib time env 
applying second ctgd results addition pension id contrib time tuples contrib time env 
stage ars fid time contrib contrib activations maps id id time time 
tuples id contrib time emp id time pension id contrib time env contrib time contrib time 
generation tuples possible tuples anyway execution halts termination condition 
see oe extend ff mapping contrib contrib 
constrained atoms pension tuples match atom rhs oe oe respectively 
constraint formula implied env order establish contrib time contrib time rewriting env contrib time contrib time see implication holds chase terminates showing comparison chase procedures write inferred consequence second chase procedure 
write show chase procedure theorem set ctgds ctgd 
ffl ffl suppose independence negative constraints 
inference vacuous ffl suppose independence negative constraints 
termination possibility vacuously true forces chase procedures exhaustively generate constraints effort produce inconsistent env 
prevents addition termination conditions intuitively appealing 
example unsound add extra termination condition 
env satisfiable env ff unsatisfiable 
conclude satisfaction condition satisfaction condition ensures consequence case guaranteed consequence second case 
example give simple example ordered domain 
contain initially tuples contains env applying dependency tuples fp env 
stage env satisfiable env satisfiable condition applicable 
application second dependency produces unsatisfiable 
infer inference condition incorrect 
cases possibility realized known database satisfying tuples form instance lhs 
cases able techniques termination condition cut short chase 
definition say consistent database state satisfies contains instance lhs 
proposition consistent chase procedure terminates case add condition consistent approaches guide restrict activations performed chase applicable 
focus approach common magic sets 
presence constraints shared existentially quantified variables ctgds results considerably greater difficulties datalog cdb queries 
focusing chase chase procedures akin bottom procedures evaluation positive constraint logic programs may derive large number tuples irrelevant desired goal case ctgds determining case logic programs computing answers query 
approach guide chase procedures relevant ctgds common magic sets approach see 
interesting differences highlight section 
best knowledge addresses issue focusing chase procedure dependencies 
generating magic ctgds consider ctgd ym multiple atoms rhs 
instantiation atom rhs chase procedures establish atoms lhs relevant 
intuition reflected form magic ctgds generated magic ctgd magic atom lhs 
sideways information passing sip strategies developed magic sets transformation logic programming rules guide generation magic ctgds 
describe magic ctgds generated complete right sip strategy atom rhs 
denote variables atom rhs denote variables modulo denote gamma gamma 
magic ctgds generated ctgd magic magic magic magic 
magic gamma gamma magic similar sets magic ctgds generated bindings atom rhs different sip strategies different atoms rhs 
note magic ctgds dependencies equality constraints occur explicit sharing variables magic ctgd 
reason restriction discussed section 
modifying original ctgds consider ctgd ym establish tuples atoms may need generated atoms 
modified magic atoms serving guards modified versions ctgd need generated magic atom serving guard th modified ctgd 
consequence decision tuples magic atoms magic magic tuples created chase procedure 
generated tuples may irrelevant implication problem inferred case corresponding magic tuples 
tuples generated potentially relevant avoiding generation irrelevant tuples possible 
ensure irrelevant tuples participate generation tuples adding magic atom magic corresponding ctgd containing lhs 
modify ctgds section way 
combining ideas modified ctgds generated ctgd modified ctgd containing magic atom magic form magic magic magic ym section 
magic sets transformation positive logic programs magic atoms corresponding atoms body rule added body modified rule head rule atom tuples spuriously generated application chase procedure 
generating seed ctgd form ym initially chase procedures set tuples atoms lhs ff set env cons lhs ff ff fixed injective substitution domain vars lhs 
goal chase procedure determine rhs ff implied set ctgds initial state 
rhs ff regarded query free variables initial seed magic tuples generated rhs ff 
oe substitution extends ff variables existential variables rhs 
set atoms magic denote ag 
seed magic tuples need initially added tuples chase procedures magic atoms rhs oe 
result establishes correctness transformation chase procedures 
theorem original ctgd implication problem consistent 
obtained modifying section adding magic ctgds obtained section 
chase denote modification chase adds seed magic tuples magic atoms rhs oe tuples addition atoms lhs ff 
infer chase infer chase example ctgd ctgd clearly magic sets transformation consists ctgds magic magic magic magic modified chase procedure adds magic tuples 
ctgd tuple magic generated 
ctgd considered chase procedure added tuples conjoined env 
chase procedure terminates rhs entailed database 
problem constraints magic sets transformation ctgds described take constraints account difficulties 
key reason difficulties constraints magic sets transformation constraints associated magic tuples magic rules correspond desired constraints chase procedure conjoin constraints env making imposed constraints 
affects correctness chase procedure full show 
developed chase procedures assessing class ctgds 
procedures sound complete 
wellknown decision problem subclass unconstrained tuple equality generating dependencies undecidable completeness attainable 
compared relative power chase procedures inferring inferring showed greater power second chase needed constraint domains satisfy independence property 
condition consistency chase procedures guided terminated early weakening inference power 
developed form magic sets optimization making chase procedures goaldirected relevant ctgds magic sets chase procedures 
includes finding conditions chase procedures effective decision procedures determining complexity chase procedures conditions 
needed optimizing chases avoid irrelevant computation making better constraints important task 
abiteboul vianu hull foundations databases addison wesley 
chomicki wolper dependencies proc 
th international conference database theory lncs 
beeri ramakrishnan power magic journal logic programming 
beeri vardi proof procedure data dependencies jacm 
chakravarthy minker foundations semantic query optimization deductive databases foundations deductive databases logic programming minker ed morgan kaufmann 
dershowitz 
jouannaud rewrite systems handbook theoretical computer science vol 
van leeuwen ed mit press elsevier 
elkan decision procedure conjunctive query disjointness proc 
th acm symp 
principles database systems 
elkan independence logical database queries updates proc 
th acm symp 
principles database systems 
jaffar 
lassez constraint logic programming proc 
th acm symposium principles programming languages munich january 
jaffar maher constraint logic programming survey journal logic programming 
kanellakis kuper revesz constraint query languages journal computer system sciences 
klug calculating constraints relational expressions acm transactions database systems 

lassez mcaloon constraint sequent calculus proc 
symp 
logic computer science 
levy sagiv queries independent updates proc 
th international conference large data bases 
maher logic programming view clp proc 
th international conference logic programming mit press 
maher constrained dependencies proc 
conf 
principles practice constraint programming 
sagiv optimizing datalog programs foundations deductive databases logic programming minker ed morgan kaufmann 
zhang ozsoyoglu efficient reasoning implication constraints proc 
conf 
deductive object oriented databases lncs 
