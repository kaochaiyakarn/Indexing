basic theory model model driven engineering jean marie favre adele team laboratoire lsr imag universit joseph fourier grenoble france www adele imag fr 
model 
metamodel 
language 
transformation 
concepts related 
striking see mde supposed precise modelling mde core concepts usually described natural language best sketchy uml diagrams 
precise descriptions provided describe specific technology 
model driven engineering supporting multiple technological spaces ts 
concepts model metamodel transformation understood context mda ts ts ts ts shows set theory language theory help understanding essential mde concepts 
version rudimentary theory reasoning mde concepts provided form megamodel 
mde mda 
mda standard omg just specific incarnation model driven engineering mde approach 
mde contrary open integrative approach embraces technological spaces tss uniform way 
important aspect mde emphasis puts bridges technological spaces integration bodies knowledge developed different research communities 
examples tss include mda mof bnf xml sql uml space concepts model metamodel transformation take different incarnation 
instance called metamodel corresponds called schema grammar point view successful mde approach re invent wheel contrary integrate adapt existing bodies knowledge mature technological spaces 
fortunately mde getting attention research communities different fields 
instance model driven prefix appears calls papers 
people puzzled 
thing clear entering mde easy 
huge pile mda standards pages 
true essence mde concepts described concepts biased particular orientation omg 
instance people confusion object orientation model driven engineering understand mde number papers books business oriented 
really useful research point view 
books contrary concentrate mda concepts 
instance mda distilled mda explained provide introductory material 
mda guide omg aims defining essential concepts 
striking see mde supposed precise modelling mde core concepts defined precise models 
find plenty metamodels literature describe particular technologies tools aware single model fully capture mde notions global level 
conditions difficult understand basic concepts mde related mapped existing technological spaces 
needed megamodel mde 
megamodel just model mde concepts 
include concept model metamodel term megamodel avoid confusion framework concepts 
megamodel result ongoing leading collection papers addressing different topics 
notion model discussed notion metamodel notion transformation 
go discuss relationship megamodel existing theories set theory language theory 
rest structured 
section existing megamodel mde briefly commented 
basic concepts set theory language theory introduced section 
megamodel mde section section concludes 

happens object oriented technologies implement mda standards just result particular choice 
model driven engineering integrating ts instance 
objects 
contrast concepts model metamodel transformation apply tss 
simply put model driven engineering object orientation 
existing mde start definition model 
model simplification system built intended goal mind 
model able answer questions place actual system 

definition say model mde plays role system study terminology obviously simplification mde goal mind give view mde concepts 
model mde 
readers disagree 
context mde authors provide restrictive definition models 
warmer colleagues state model description part systems written defined language 
defined language language defined form syntax meaning semantics suitable automated interpretation computer 
defined model mde literature 
just books papers ideas 
put computer get useful result 
mde experts claim models precise just plain english informal drawings define mde 
instance attempt provide uml model mde previous version omg document 
unfortunately informal useless 
matter fact uml diagrams rest omg document 
diagrams removed versions 
need reason models metamodels transformations combination disappeared 
mda explained book uses simple appealing notation depict concepts relationships 
pictures book suggestive formal meaning 
contrast mda distilled book provides simple model mde expressed uml 
full model contains classes associations 
left shows relevant part 
megamodel constitutes strong contributions book 
greatly mda distilled megamodel helps reader understanding important concepts mde relationships 
unfortunately megamodel fully consistent text worse provides wrong answers 
instance diagram metamodel model thing meta metamodel 
describing metamodel mapping function considered considered important aspect mde 
instance qvt standard fit schema qvt language concept language modelled qvt language express mapping functions class 
reader argue qvt metamodel wrong 
language metamodel section 
short mda distilled megamodel wrong sense provides wrong answers mde 
matter fact validated rest book 
drawing instance diagrams validate class diagram examples expressed informal notation explicit link megamodel 
aware sketchy models 
describe mde accurately 
models get simple answer simple questions useless describe situations informal reasoning 
precisely situations precise modelling required 
fact surprising see everybody mde community advocates precise modelling applies principle mde 
set theory language theory search basic theory mde help reasoning mde simple cases situations intuition 
things turn really complex best solution simple elementary concepts deal complexity combining simple concepts regular structures 
forget mde technology go back roots computer science set theory language theory 
background mind megamodel section 
elements set theory sets pairs relations functions various set theories simple concepts defined language 
formulas part megamodel 
just attempt illustrate concepts included megamodel 
concepts interest sets pairs relations basically set pairs partial functions relations total functions partial functions 
symbol define shortcuts 
column give example notation 
sets set elements 
set positive integers 
built set sets elements 
read set 
cartesian product set pairs 
set relations basically set pairs 
dom domain relation 
set elements image 
dom dom ran range relation ran dom set functions target source 
set total functions dom fact relation set pairs 
mathematics relations defined triple sets called definition domain definition range set pairs states div definition domain definition range div partial function 
function partial element image definition domain domain 
kernel source system target element elementof set set takes yields pair relation function shortcuts elementof element source target package takes yields dd definition domain dr definition range relation set pairs element forall pair element set pair forall pair source pair definition domain self element includes source target pair definition range self element includes target target source element set pairs forall pair source source implies target target concepts set theory form basis megamodel shown left 
content kernel package explained section 
note concepts set theory modelled uml ocl notation way linked uml 
set set irrespective language expressed 
uml assume people read diagram 
time writing developing meaning expressed prolog 
languages just nota tions carefully avoid mix megamodel concepts come language 
instance uml megamodel concept represented standard uml association named elementof built includes ocl expression 
prolog elementof predicate built member predicate 
relation named elementof built symbol 

way test uml model describe object diagrams showing particular situations 
way get reasonable confidence mde megamodel 
model shown provides bad answers situation 
built simple test cases acts counter examples show invalidity existing pass tests 
object diagrams illustrate mde concepts considering particular situations 
object diagram set function set shown conforms uml language 
elementof elementof elementof model describes fact function called maps iv iv system source pair target system roman number integer number 
top part describes function bottom part model representing iv application function particular value states iv 
fully compliant uml 
information represented ways language specify particular situation megamodel prolog symbols bold part prolog megamodel megamodel symbols parts megamodel 
function 
iv iv takes yields elementof pair iv iv model various languages iv system function yields iv pair iv elementof reader noticed information uml object diagram prolog facts 
facts omitted automatically deduced set theory fact encoded megamodel 
instance fact elementof iv derived prolog megamodel 
note information derived uml megamodel model describes rule 
benefit prolog megamodel executable 
note notion model part set theory notion implicitely languages deal theory 
instance language introduce notion definition 
set definitions comprehension relation definitions comprehension function definitions comprehension fact expressions considered models 
instance model representing set set 
plenty models represent set 
elements language theory languages programs interpreters thing definitive language theory introduce concepts traditionally defined dealing programming languages 
relationship set theory language theory described 
continue illustration purposes 
language set people community 
instance language numbers 
similarly java set java programs 
ab abb 
language strings start continue 
languages usually infinite reasoning languages require deal models languages 
string ab model language described 
grammars models languages languages 
programming languages languages programs sets programs program executable model function 
models function executable 
instance signature function int power int int model function executed 
model function executable called program 
continue introduce simple programming language called 
programming language implements stack machine push pull operations incr add mul arithmetic operations 
programs take stack roman numbers input yield stack 
plus fun incr push add add push ii mul lx ii iii iv iii iii 
lx ii iii iv iii ii iv iii plus fun function plus fun adds element stack 
programming language programs model function incr push add 
programs semantically equivalent 
interpreter function programming language function takes program input value returns output value corresponding result execution program 
interpreter functions programming language allows describe programs transforms xs ys characterized pattern example show interpreter function mathematical object 
incr lx incr ii iii incr iv iii ii iv iii 
add push ii mul ii vi add push ii mul iv iii 
theory mde basics set language theories introduced define megamodel mde 
megamodel infrastructure start infrastructure megamodel totally technology independent 
main package infrastructure shown 
far mathematical entities considered 
special cases systems 
relationship kernel package shown 
systems processed human minds 
contrast dog fido cited metamodeling literature example physical system 
mde aims building better computer programs better com kernel representationof shortcuts representationof model composite system sus incomplete part sus composite part excerpt kernel puter model 
digital systems 
raw classification really important 
just show term system term cover wide range artefacts 
system complex thing decomposed parts 
system play role model respect system play role system studies 
relation called representationof short identified authors 
transformation pair function elements forall excerpt transformation concept transformation fundamental mde 
definition concept set theory concept relation clearly abstraction transformations 
consensus transformation precisely 
meaning term depends 
concepts closely related distinct put common terminology 
instance package transformation contains concepts 
linked fact pairs functions shown previously 
call transforma application transformation particular input 
contrast functions sets 
set theory concepts clearly defined 
goal normalize terminology explicit existence concept 
fact strictly necessary define class 
formally speaking class convey information invariant associated class 
introducing class just gives convenient way refer particular role played function pattern 
discovered lot interesting mde patterns 
simple common patterns 
section shows elaborated patterns theories described 
mde patterns reader see mention notion metamodel 
derived concept 
metamodel model language models 
definition compatible literature 
meta step pattern 
metamodel concept corresponds role played system mde pattern coined meta step 
pattern discussed large 
shown left particular configuration links kernel representationof link kernel system metamodel dd shortcuts conformsto mm metamodel cm system dr ry elementof 
model conformsto metamodel 
derived association commonly mde sense defined kernel package 
definition seen transformation rule 
time representing links common situations 
pattern model transformation 
pattern depicted corresponds notion model transforma typical pattern model transformation tion 
names instances name role played element pattern 
suggested distinguish transformation instances xml file transformed xml file transformation functions set related pairs transformation models description function called transformation program executable xslt file transformation modelling language transformation programming language executed xslt transformation metamodel dtd xslt 
fact concepts added links approach 
interpreter pattern 
transformation program transformation model executed 
leads interpreter pattern 
detailed description pattern quite complex recognizing pattern mentally easy 
fortunately define derived associations bold including interprets relation 
complex graphs simplified applying instance rule shown leads intuitive safe views 
illustrates application simplification rule 
shows various levels pattern transformation meta step pattern transformation rule dd il pi interpreter prog dr dd dr fun shortcut interprets ipl pi po po interpreter pi po prog interpreter pattern interpretation required effective execution xslt transformation instance computer 
real world problem 
stack interpreters stops interpreter 
megamodel superstructure technological spaces megamodel infrastructure far technology free 
shown applied real word situations ancient egypt modern world 
megamodel limited digital systems focus research 
megamodel infrastructure plays role common umbrella various technological spaces described 
relationships megamodel infrastructure superstructure containing tss dependent explicit 
defining superstructure modelling tss interest easy task 
research required study real nature tss relative organizations defining mappings infrastructure tss promising approach 
showing particular tss integrated megamodel point communicate research communities megamodel provides concrete mean establish terminology correspondences tss 
establishing complete software engineering map obviously huge started examples proof concept teaching purposes 
example considers relationship technological space infrastructure 
shows relationship association concept files xsd incarnation xml ts 
concrete point view represented xml file xml attribute form xsi xsd 
basic mde theory diagrams describe megamodel theory mentioned title 
relationship models metamodels theories described 
model set statements system study sus 
theory way deduce new statements sus statements model sus 
relationship megamodel theory mde apparent uml incarnation clear prolog incarnation 
shown centre prolog mde megamodel executable program 
deduce new facts particular mde situation modelled left 
excerpt megamodel center shows translation meta step pattern 
power prolog ask questions get answers right 
java xsl xml ipl ipl ipl processor xerces pi xsl po interpreter pattern example simplification rule example stack interpreters infrastructure kernel metamodel system conformsto superstructure os file schema metamodel schema asset simplified mapping infrastructure xml ts representationof 
representationof uml 
representationof mof 
elementof uml 
elementof mof 
elementof mof 
conformsto mm representationof elementof representationof mm 
metamodel mm conformsto mm 
model particular mde situation excerpt megamodel kernel package automated reasoning mde conformsto metamodel mof 
asking questions getting answers xml discussion building model easy system complex 
thousands years necessary get correct map world 
model driven engineering moving field lot say 
building model complex research issue rewarding task 
experiments encouraging quite surprised results get simple approach 
approach consists introducing concepts incrementally trying step add truly essential concepts 
step take care developing examples computer technology real world check validity theory 
years accumulated hundreds metamodels different sources 
metamodel zoo basic material understand people different communities metamodelling techniques fact great variations 
metamodel zoo acts basic material test megamodel 
conversely megamodel provides way organize metamodel zoo research required topic 
ongoing megamodel subject refinement 
instance notion conformance weak purpose 
defining various kinds elaborated conformance relations require notions syntax semantics 
vision reality give false impression concepts disconnected reality case 
instance conformance relations typically checked actual tools parsers 
concepts described megamodel 
important requirement design megamodel give ability extend suit needs particular technological spaces 
interesting aspect approach proposed allows compare existing mde techniques tools common framework 
concepts notion platform really ill defined sure included megamodel 
may simply wrong concepts research required 
mde experts advocate precise modelling striking see mde concepts usually described plain english sketchy informal pictures 
uml models quite suggestive don pass tests 
give wrong answers 
fact models seen way build consistent instance diagrams 
design tested invariably thrown away sooner 
strongly believe mde necessarily adding complex technologies top complex technology layers 
contrary building new tools scratch entering legacy mda soon wise learn past 
identification technological spaces fundamental respect 
mde mda 
mde integrating smooth way existing mature bodies knowledge 
done shared understanding 
expect researchers community enter mde space mde concepts properly identified 
set theory language theory parts lingua franca computer science concepts greatly help identifying bridges existing tss 
fact megamodel model real world situations discovered powerful expected 
really helped connect concepts technologies apparently disconnected 
set theory decisive process 
surprisingly discovered run lot interesting patterns discovering new ones 
far sound complete theory mde 
scratched surface topic 
hope little step better understanding mde helpful 
acknowledgments jacky estublier german vega jean zivin members mda project attendee mde seminar fruitful discussions topics 
kent relational approach defining transformations metamodel lncs uml atkinson hne model driven development metamodeling foundation ieee software september zivin object composition model transformation mda zivin search basic principle model driven engineering journal special issue march zivin precise definition omg mda framework ase november zivin breton dup valduriez atl transformation model management framework tr university nantes september zivin experiments atl model transformation language transforming xslt xquery considerations model mapping dstc ibm mof query view transformations initial submission dstc ibm ad march ieee 
ieee recommended practice architectural description software intensive systems 
ieee std www com public html favre meta models models evolution software space elisa icsm sept www adele imag fr favre metamodel driven architecture reconstruction wcre november favre foundations model driven reverse engineering episode story fidus papyrus solarus post proceedings seminar model driven approaches language engineering may favre foundations meta pyramids languages metamodels episode ii story baboon seminar model driven approaches language engineering may favre nguyen megamodel model software evolution software transformation se tra workshop elsevier october favre reverse engineering large component software product favre maintenance tro ing des phd university grenoble frankel model driven architecture 
applying mda 
enterprise computing wiley publishing griffiths analyse phd university grenoble france carver specifying model transformation metamodel level kleppe warmer bast mda explained 
model driven architecture practice promise addison wesley april klint mmel verhoef engineering discipline submitted publication available homepages cwi nl ralf van den berg synthesis approach transformations mda software development process zivin aksit technological spaces initial appraisal coopis doa industrial track model reuse metamodel transformations lncs 
mellor scott uhl weise mda distilled principles model driven architecture addison wesley march techniques de transformations de mod les bas es sur la ta mod phd university nantes october zivin levels model transformation xml europe june omg mda guide version omg june omg mda web site www omg org mda omg omg model driven architecture mda july omg meta object facility mof specification version april qvt partners revised submission mof query views transformation rfp org august series ancient egypt model driven engineering available www adele imag fr mda models mean ieee software september spivey notation manual prentice hall graphical transformation language mda 
