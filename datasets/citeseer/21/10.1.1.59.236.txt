metamodel driven software architecture reconstruction far architecture descriptions existing software systems sync implementation 
reconstructed challenging task 
problem solved define software architecture means 
answer greatly vary especially stakeholders 
order solve problem presents generic metamodel driven process reconstructing software architecture 
provides methodological guide shows metamodels define architectural viewpoints link viewpoints existing metaware drive architecture reconstruction processes 
concepts identified decade context dassault syst mes largest software companies europe developers 
generic process pattern applied contexts 
process pattern line mda adm approaches omg 
complies ieee standard software architecture 
megamodel integrating standards 

define architecture word want talk design want sound important 
martin flower 
software architecture 
defining software architecture sa led extensive debates academic community clear outcome research group attempted put emphasis perspective dealt 
effort went study components connectors view promotion called architecture description languages adls 
unfortunately languages failed find path industry 
software industry code centric 
descriptions software architecture remain informal 
sa descriptions exist soon sync code 
software architecture missing practice 
evolving large scale software difficult 
jean adele team laboratoire lsr imag university grenoble france www adele imag fr working conference reverse engineering wcre delft netherlands november th cope problem reverse engineering re community focused architecture reconstruction trying extract architectural views source code 
instance early information abstraction cia attempted extract dependencies source files 
large body dedicated design evaluation clustering algorithms identify meaningful structures complex dependency graphs see extensive survey component recovery techniques 
useful situations body considered software architecture single perspective 
appeared notion software architecture simple define 
fact research conferences workshops animated discussions proper definition software architecture 
turned everybody coming definition sa 
time writing definitions software architecture collected sei see www sei cmu edu architecture definitions 
specialized formalisms specific techniques global definitions pragmatic approaches attempted study reality sa practised daily large software companies 
kind led recognition facts components connectors covered adls represented particular aspect sa true structural dependencies studied re community giving precise definition software architecture considered topmost priority industry 
ieee standard short eventually established fact software architecture considered outside context 
standard technology free 
brings concrete solutions 
just provides set concepts recommended practices 
standard consider weak academics eager welldefined formalisms specific algorithms 
gives view sa context 
subject intensive reviews international reviewers publication put strong emphasis relationships stakeholders concerns relevant architectural viewpoints 
simply put standard recognized thing standard definition software architecture 
software architecture 
sure know see ieee faq software architecture core contribution show notion software architecture heavily depends stakeholders concerns 
pointed fowler architecture best seen social construct 
hard tell people describe architecture 
tell important architecture important stuff 
ralph johnson part architecture entirely developers think important 
architecture social construct doesn just depend software part software considered important group consensus 
martin fowler architecture important stuff points view close expressed holt software architecture shared mental model 
architecture communicating sharing important stuff 
believe notion group consensus identified fowler important 
group consensus exist small medium certainly difficult achieve large software companies hundreds software engineers 
various groups stakeholders different definitions sa depending jobs concerns 
mean chaos 
contrary just mean people consider software architecture different point view 
pair groups symphony looking naturally lead impression 
cares 
group definition sa long communicate smoothly groups required 
steps reconstructing software architecture large software identify group stakeholders target reconstruction effort formalize software architecture really mean particular group establish viewpoints relevant particular concerns 
fact recognized brien colleagues sei 
extensive experience architecture reconstruction authors established catalogue practice scenarios view set scenario vss short 
catalogue practice scenarios provide conceptual frameworks identifying recurring issues software industry 
bring particular methodologies architecture reconstruction 
tries fill gap 
vss seen primary specification problem addressed 
name view set scenario covers identification architectural views sufficiently describe software system 
problem problem determine architecture views sufficiently describe system cover stakeholder needs 
desired solution desired solution consists method determine relevant architecture view set particular system 
excerpt view set scenario gives view metamodel driven methodology software architecture reconstruction 
generic process integrates reverse engineering concerns ieee std model driven engineering 
reconstruction process second half various workshops including seminar software architecture 
symphony approach comes context fact seen companion 
ideas shared particular idea define generic process architecture reconstruction 
global structure processes proposed similar reader invited refer get information process related techniques 
take perspective software architecture reconstruction go integrating sa mde 
mde 
really care informal definitions software architecture building operational tools requires provision precise definitions significant architectural concepts 
concepts 
metamodels keys 
symphony recognize importance metamodels result remains niche software architecture reconstruction 
contrast mde broader scope 
integrating mde sa promising mde potential cover spectrum software engineering processes integrated manner 
thesis software architecture reconstruction just seen particular mde processes 
model driven engineering just productive metamodels approach metamodels just words boxes arrows productive means 
shows metamodels give precise operational definition architectural viewpoints tools build link concepts existing metaware see existing assets reused drive reconstruction processes definition software architecture 
emphasis put fact just symphony methodology generic process pattern 
linked particular set techniques technology free 
just mda approach omg ieee standard focus articulation essential concepts 
previous works differ address determined goal concrete techniques certain fixed sets views reconstructed symphony provide general reconstruction method 
remainder structured 
background section 
section gives keys integrate sa mda standards 
reverse engineering concerns integrated section notion metaware 
overview process section 
section concludes 

background best thing learn software architecture reality leave lab go large software companies observe going 
symphony approach experiences various authors sa developed large companies nokia siemens 
followed similar approach decade went large software construction fields 
particular spent years observing evolution large scale software developed dassault syst mes ds largest software companies europe 
extracted gives better idea large software means 
dassault syst mes world leader cad cam software developers main software years partnership ibm distributes software main customers boeing daimler sony clients countries seats software development partners software product fortran java visual basic platforms supported including unix windows years continuous software evolution software architecture proprietary component technology called om classes om components om interfaces dynamic libraries products portfolio frameworks key figures large software product collaboration ds learned main things large scale software architecture notion software architecture really complex academic vision tends explain 
nature software architecture really depends culture know 
know part intangible knowledge head key people materialized large range tools repositories support software process 
point fundamental context 
ds tool support team charge provide tools process support developers software applications 
notion software architecture architectural viewpoints materialized plenty tools repositories developed internally 
tools built deal tests bugs frameworks documentation items modules features products solutions exact meaning terms belongs ds architectural relevant 
goal means explain notion architecture practised ds 
key ideas published instance 
complete description ds architectural know certainly require book just description software architecture practices siemens led 
goal provide generic approach help defining software architecture really means context effectively supports architecture reconstruction tasks 
reconstruction process performed context dassault syst mes example approach 

keys mde sa integration distinctions model metamodel view viewpoints keys understand mde sa integrated 

mde models vs metamodels distinction models metamodels central model driven engineering mde particular context mda standard 
model simplification system built intended goal mind 
model able answer questions place actual system 
metamodel model defines language expressing model mof standard models vs metamodels concept model metamodels thoroughly described series ancient egypt model driven engineering 
series presents incrementally mde megamodel describing essential relations mde concepts 
basic theory mde set language theories defined 
simplified view megamodel reproduced form uml class diagram versions construction prolog 
model conforms metamodel 
metamodel conformsto model simplified view mde megamodel mda standard omg promotes systematic particular set technologies mof xmi cwm mde approach general 
approach supports various technological spaces ts 
conformsto relation noted greek takes different forms various tss 
table shows correspondence terminologies 
ts terminology model level metamodel level mde model metamodel languages program grammar dbms data schema architecture view viewpoint object instance class reverse engin 
software facts schema xml document dtd schema table conformsto relation illustration shows example software model left conforms metamodel right 
model represents particular piece hypothetical banking application 
level metamodeling pyramid 
metamodel describes concepts involved programming language 
level 
reader invited compare content definitions 
bank kloc conformsto targets function callees file union function variable file excluding self asset targets file name length dependson callees account kloc accesses variable function callers model conforming metamodel size example syntax technology express model metamodel irrelevant details context 
focus essential concepts articulations particular technology 
metamodel represented conforms uml ocl 
takes form grammar dtd database schema xml schema 
ts presents advantages 
important availability bridges tss calls correspondence megamodel particular tss 
discussing relationships scope anyway change conceptual point view 

sa views vs viewpoints distinction model metamodel basis mda standard distinction view viewpoints comes ieee standard 
viewpoint system technique abstraction selected set architectural concepts structuring rules order focus particular concerns system 
view system representation system perspective chosen viewpoint view vs viewpoints explicit relation stakeholders concerns architectural viewpoints 
core standard conceptual framework represented form class diagram 
subset standardized megamodel reproduced 
concern stakeholder simplified view sa megamodel views viewpoints confused 
viewpoints metamodel level 
independent application domains concentrate software engineering concepts 
contrast views model level describe particular software applications 
instance module component concepts viewpoint level account withdraw concepts view level 
viewpoints reusable architectural bodies knowledge sense build catalogue viewpoints 
idea far new 
view point 
years old 
set viewpoints 
context ds identified set 
colleagues list various catalogues 
authors viewpoints standardized selected defined environment situation 
fact issue corresponds view set scenario mentioned 
naturally raises question languages define viewpoints 
provide kind solutions 
symphony leaves question open 

integrating mda sa viewpoint conformsto view model mda sa standards comes distinct organizations omg ieee fortunately standards incompatible 
share concept model shown right 
omg effort version mda guide compatible sa std 
missing 
view collection models 
standard concept metamodels 
propose merge mde sa 
concern stakeholder merging mde sa key proposal systematic metamodels represent viewpoints see association centre previous 
approach powerful merges sa mde worlds 
fact idea metamodels describe view point really new 
just authors metamodels describe viewpoints 
conversely metamodels precise productive metamodels ocl constraints 
context software architecture reconstruction metamodels build drive concrete reverse engineering tools 

integrating reverse engineering concerns previous section shows relation viewpoints metamodels elements come 
elements connected concrete stuff existing assets 
large software companies define viewpoints architectural metamodels place 
practice large software companies discover software architecture run 
year year successful companies acquire significant software architecture develop metaware support know 
remainder shows software architecture reconstruction reverse engineering existing metaware 

vs metaware viewpoint conformsto view metamodel conformsto model distinction metaware introduced model evolution large software 
simply put software model level metaware software meta level 
set software applications developed 
metaware software develop control evolution 
short software metaware software metaware term mde community conveys idea developed clean high level modelling language uml models 
reality quite different 
industrial concerns idealistic intellectual constructions 
industry may remain code centric long time 
anyway large industrial software products raw software items legacy technologies 
models neat conceptual parts metamodels neat conceptual part metaware 
metaware represented concrete software artefacts binaries programs 
practice experience shows models metamodels 
just deeply buried legacy software items 
reverse engineering important 
illustration come back 
architectural model depicted left extracted application programs 
reverse engineering 
contrast architectural meta model represented right extracted book language metaware tool cia 
artifacts level 
cia metaware tool built metamodel explicit doubt information contained metamodel 
buried code cia schema corresponding repository 
recovering architectural metamodel example metaware reverse engineering 
notion quite odd 
new 
just explicit modelling existing practices 
instance colleagues worked long grammar reverse engineering recovering grammars low level grammar dependent software items 
compilers pretty printers interpreters collectively called 
grammars metaware metamodels 
metaware just generalization 
programming small programming large metaware programs binaries compilers pretty printers interpreters tools ides build files log files release information product descriptions application portfolios component technologies configuration manager architectural tools build tools bug tracking systems product managers impact analysis tools 
table metaware small metaware large shown table compilers pretty printers metaware small items large companies developed decades large amount metaware large items 
list metaware items depends software underlying software processes 
metaware usually developed dark piece software extremely valuable 
chance discover metaware ds big metaware explicit 
developed explicit tool support team connection development 
metaware exist smaller companies difficult see 
metaware know operational way particular sa know 
instance developed internally myriad metaware tools cia handle produced 
ds just 

metaware context wonder metaware relates mda sa standards 
answer megamodel extends mda sa standards notion see bottom part bold 
concern stakeholder viewpoint conformsto view executes meta metamodel conformsto model megamodel architecture recovery concepts relations studied remainder illustrate concept consider 
source code executable banking system model depicted left 
source code tools compiler cia 
cia tool partially metamodel depicted right 
assume stakeholder release manager want eliminate banking application 
stakeholder execute identify dead code cia 
cia supporting case wise modify leading metaware reengineering 

metaware reengineering vs forward engineering concentrates defining various stakeholder concerns associated viewpoints top 
imagine forward engineering process leading full architectural environment bottom 
metaware forward engineering 
unfortunately view quite naive opinion unrealistic 
notion software architecture moving target defining relevant architectural concepts incremental process 
existing legacy metaware items ignored 
symphony recognizes incremental nature architecture reconstruction processes starts scratch put emphasis reusing existing metaware 
developing architectural environment large best viewed continuous metaware reengineering process 

overview generic process extend view set scenario problem building metaware environment 
structure process depicted 
major steps process nature iterative incremental 
metaware domain asset analysis section ii metaware requirement analysis section iii metaware specification section iv metaware implementation metaware execution vi metaware evolution step sub activities metaware inventory metamodels recovery metamodels integration metamodel clustering metamodel packaging meta level actors identification meta level cases identification metaware assessment metaware improvement analysis meta level cases description meta model filtering extension presentation specification metaware specification packaging extractors development reuse viewers development reuse extractors viewers integration deployment execution monitoring evaluation feedback change analysis table metamodel driven process going details impossible due lack space concentrate giving idea process 
step iii shortly described 
reader invited refer symphony get detail view reconstruction process see techniques step 
symphony quite similar processes 
focus metamodels drive reconstruction process 

metaware domain asset analysis assume just arrived 
don know application domains addressed 
don worry really care 
just regular forward engineering processes domain analysis step 
refer software architecture domain application domains 
asset analysis fundamental sa know 

metaware inventory 
information architectural concepts extracted means interviews 
lead fuzzy contradictory information due lack established architectural ontology 
anyway plenty sources information including instance slides develop components quality insurance documents quality tools software repositories bug tracking systems application portfolios explained explained studying artefact enable establish inventory sa concepts 
output step raw mapping concepts metaware artefacts deal 
configuration object file dll executable layer team inventory metaware items 
metamodel recovery 
large ds plenty metaware items 
years collaboration aware parts metaware 
problem select inventory promising items order analyse 
objective analysis provide conceptual meta model selected metaware item 
instance find bug report database association maps bug test framework enabled find bug 
database fields indicate test frameworks decomposed called test modules 
kind information meta model build incrementally describe metaware item 
product module group framework team bug framework team metamodel recovering metamodels metaware items 
metamodels integration meta models recovered previous phase integrated order produce global metamodel 
practice easy 
schemas metamodel integration active research field 
metaware items probably produced incrementally different teams 
chance tools slightly divergent sa concepts 
integrated meta model provide solution conceptual integration typically conceptual bridges 
implementation issues recorded analysis step iv 
output step global integrated meta model 
point just conceptual metamodel 
product module group product module group bug framework team testcase metamodels integration 
metamodel clustering large software companies development metaware items usually driven coincidental facts 
goal meta model integration break somewhat arbitrary boundaries individual meta models 
lead large flat metamodel tens hundreds elements depending level abstractions analysis done 
cope problem global meta model structured identifying cohesive sub domains 
context ds time writing don clear cut rules 
anyway identified sub domains candidates form reusable sa viewpoints 
product structure framework team organizational structure product module group 
metaware requirement analysis ii bug framework team bug framework team metamodel clusters testcase global integrated meta model testing metamodel testcase missing 
people 
problem addressed define actors architectural environment doing metaware 
note refer meta level actors meta level see 
interestingly traditional level techniques applied level 
instance unified process suggests steps requirements analysis actor identification identification detailed description 
steps applied metamodel level metaware 

meta level actor identification ii simply put meta level actors referred stakeholders ieee standard omg standard worker unified process 
name identifying meta level actors easy 
step covered general particular sa literature 
reader refer discussion issues related sa 
see examples meta level actors identified ds 
developer integrator architect meta level actors stakeholders stakeholder note meta level actors confused model level actors users 
client teller level actors architect level actors 
ones second ones metaware produce 
see complete discussion 

meta level case identification ii uml standard unified process identification actors naturally leads identify cases 
providing short meaningful names case key 
terms part metaware culture 
provides examples meta 
contrast level 
build developer integrator executes stakeholder architect meta diagram 
metaware assessment improvement analysis ii actors cases gathered annotated uses cases diagrams 
meetings organized determine focus attention put missing 
instance meeting learn key issue people business department visibility product dependencies 
explanation various cases added case diagram 
experience suggests diagrams greatly help setting priority focusing essential parts research required topic 
note aware standard systematic metalevel actors metamodels definitions standards omg go direction standard deployment include case diagram 

metaware specification iii validation requirements step naturally specification metaware build 

meta model filtering extension iii step perform meta model filtering identify great precision subset global meta model required execute meta 
architect product module group stakeholder executes meta metamodel filtering metamodel meta information missing realize metamodel extended 
specification derived elements prefixed uml done ocl 
technique successfully context ds 
see example architectural view defined ocl 
example tool directly interpreting kind formalism 
note symphony uses terms source viewpoints target viewpoints provide particular techniques express mapping viewpoints 
expressing mappings making executable active research area mde 
qvt standard 

presentation specification iii metamodels specify visual appearance metaware tools 
instance uses uml ocl specify visualization technique display architectural model shown left 
simple visualization metamodel right 
metamodel fact simplified version visualization metamodel extracted dot tool technique mapping directly line mde approach 

steps iv vi steps process metaware implementation metaware evaluation metaware bug team testcase targets file name callees function callers architectural metamodel evolution 
obviously determinant success approach deliver concrete metaware said concentrates view set scenario 
lack space impossible cover implementation evolution issues 
clear implementation derived specification produced previous section 
metaware just software plenty techniques methods implement software 
context dassault syst mes architectural environment successfully implemented 
obviously automated specification description output get 
fact implementation done ad hoc way requirements analysis specification phase provide help 
complete description steps symphony 
build metamodel specific tools generic tools 
includes rigi pbs 
attempted rigi context ds 
visualization technique limited support metamodels called domains weak 
developed generic software exploration environment see 
see prototype directly interprets metamodel specification 
see connects existing metaware items explores metamodels models extracted demand 
see metamodel driven visualization shown feasible circumstances support models meta models 
case meta model recovered fly 

graph label file name transformation model call node shape box node color green node shape color label graph target source edge software architecture 
question leads academy industry don know software architecture 
don care know see able describe rigorously metamodels 
edge style plain edge arrow bank kloc account kloc style arrow visualization metamodel process successfully applied context dassault syst mes process identified previous publications 
systematic metamodels process generic precise 
depend particular technology sa definition 
fact symphony complementary approaches bet benefit metamodels recognized near 
major contribution merge model driven engineering ieee standard notion metaware reverse engineering 
model vs metamodels mda standard mde approach view vs viewpoints ieee standard software architecture vs metaware metamodel vs metaware reverse engineering integrative approach fusion important boom adls advances software architecture quite limited 
contrary mde active field 
mde potential bring new perspectives software architecture uniform approach new existing technologies 
approaches techniques recast fit mde framework 
merge mda ieee standard various concepts identified concepts invented 
just model reality discovered software industry 
instance discovered importance making distinction metaware collaboration ds 
years saw lot metaware items saw single line 
concern stakeholder ieee standard viewpoint conformsto view executes omg mda standard conformsto meta metamodel model dependson contributions obviously research required metaware re engineering 
just scratched surface meta model driven reverse engineering promising approach 
specific software architecture 

zivin tooling mda framework new software maintenance evolution scheme proposal journal object oriented programming zivin precise definition omg mda framework ase van deursen koschke moonen riva symphony view driven software architecture reconstruction demeyer ducasse nierstrasz object oriented reengineering patterns morgan kaufman publishers ebert www de estublier favre industrial experience dassault syst mes component model book chapter building reliable component systems house publishers favre estublier tool adoption issues large software favre reverse engineering large component software product favre continuous discovery software architecture large evolving workshop software architecture reconstruction wcre slides available www imag fr favre new approach software exploration back packing see favre see generic software exploration environment iwpc favre meta model model evolution software space elisa favre meta model model exploration see favre meta model engineering architecture reconstruction presentation seminar software architecture recovery modelling slides available www imag fr march favre meta model driven reverse engineering presentation seminar language engineering model driven development slides available www imag fr march fischer gall populating release history database version control bug tracking systems icsm fowler needs architect ieee software july ancient egypt model driven engineering series available www adele imag fr mda nord 
applied software architecture 
addison wesley publisher 
viewpoint modelling st icse workshop describing software architecture uml holt pbs www turing toronto edu holt software architecture shared mental model iwpc ieee 
ieee recommended practice architectural description software intensive systems 
ieee std www com public html jacobson booch rumbaugh unified software development process addison wesley koschke atomic architectural component recovery program understanding evolution phd university stuttgart kleppe warmer bast mda explained 
model driven architecture practice promise addison wesley april klint mmel verhoef engineering discipline www cs vu nl zivin aksit technological spaces initial appraisal coopis doa industrial track 
view model architecture 
ieee software november 
mmel verhoef semi automatic grammar recovery software practice experience nordstrom metamodel composition storey muller integrating information sources visualizing java programs icsm mellor scott uhl weise mda distilled principles model driven architecture addison wesley march muller rigi www rigi csc uvic ca cnrs model driven engineering cnrs action sp project www adele imag fr mda brien verhoef software architecture reconstruction practice needs current approaches sei technical report cmu sei tr omg mda omg model driven architecture www omg org mda omg software process engineering metamodel specification version formal nov omg mda guide version omg omg meta object facility mof specification version april riva architecture reconstruction practice estublier favre architectural environment evolution complex software submitted software practice experience software architecture industrial case study dassault syst mes phd dissertation french university grenoble favre helping various stakeholders understand large software product iv describing communicating software architecture practice observations stakeholders rationale caise required optional viewpoints included software architecture isbn 
