past oriented time bounded temporal properties ocl stephan flake orga systems gmbh paderborn germany orga systems com syntax semantics past oriented temporal extension object constraint language ocl 
extension supports designers express time bounded properties state oriented uml model system development 
semantics formally defined system states mathematical object model 
additionally mapping clocked linear temporal logic clocked ltl formulae basis application verification model checking 
demonstrate applicability approach example buffer specification context production system 

unified modelling language uml defines number diagrams model different aspects structure behaviour software systems 
class diagrams describe static structure system instance uml state machine diagrams model reactive behaviour objects 
addition set diagrams textual object constraint language ocl integral part uml specify constraints uml model 
significant parts ocl formally defined means set theoretic object model 
heavily influenced formal semantics adopted ocl proposal 
uml applied different domains time critical software controlled systems embedded real time systems 
time critical systems correct time constrained behaviour essential requirement meet 
context necessary identify improper behaviour time bounded temporal properties early phases development 
wolfgang mueller paderborn university lab paderborn germany wolfgang lab de uml currently provides limited support specification temporal properties safety liveness constraints 
different approaches introduced extensions overcome deficiency extensions uml sequence diagrams enhance time bounded specifications event communication objects 
contrast focus specification state oriented constraints reason execution real time systems 
previous introduced temporal extension ocl 
chose ocl specification approach supports operations sets sequences extract manipulate collections particular collections states simply reusing existing uml concepts 
semantics temporal ocl extension defined traces referred uml user model 
traces sequences system states keep information necessary evaluate ocl expressions 
verification model checking additionally defined mapping temporal logics called clocked computation tree logic 
temporal logics frequently applied formally specify required behavioural properties system development 
popular temporal logics area formal verification linear temporal logic ltl computation tree logic ctl 
temporal logics support oriented temporal operators considered useful expressing properties easier way 
past time operators necessarily add expressive power temporal logics mainly rely oriented temporal operators 
due space limitations go details different temporal logics refer past oriented temporal logics application formal verification 
contrast branching time temporal logics semantics linear temporal logics seen intuitive modellers formal background linear temporal logics define validity formula invariant self size self capacity enumeration raw final failure enumeration hpr hpr enumeration name string pos position capacity integer station integer integer integer packaging integer maintain load item unload item unit ordered machine kind item id integer status kind buffer integer overflow boolean load item unload reset context buffer integer derive self self size 
parts uml class diagram case study complete execution trace 
compares mental model people think terms simulation tests validations 
article focus ltl language semantics temporal ocl extension 
provide mapping temporal ocl extension time bounded variant linear temporal logics call clocked linear temporal logics past clocked ltl 
remainder article structured follows 
section presents example demonstrate applicability approach 
sections outline clocked ltl standard ocl respectively 
section presents state oriented temporal extensions ocl mapping clocked ltl 
section shows constraints context example temporal ocl corresponding clocked ltl formulae 
section briefly discusses related 
section closes 

example section generic example buffer part complex production system 
uml class diagrams system structure object diagram gives initial setting shown figures 
buffer store production items delivered preceding machines 
limited space items items maximally stored 
machines cyclically output items different periods time units 
items taken buffer fast packaging unit 
packaging unit maintained specific intervals time units duration time units 
maintenance packaging unit take items buffer 
specify standard ocl capacity machines buffer general factory units regarded overflow occurs 
corresponding ocl invariant context inv self size self capacity enhanced temporal properties directly expressed uml ocl long error occurs buffer takes items machines eventually puts packaging unit overflow buffer due error packaging unit causality past 
section show properties expressed ocl extension 

clocked linear temporal logic past various variants temporal logics application 
mention timed linear temporal logic 
temporal logics focus oriented temporal operators eventually 
item id status raw kind item id status raw kind item id status raw kind machine machine name drill pos capacity kind hpr machine machine name drill pos capacity kind hpr machine machine name drill pos capacity kind packaging name pos capacity buffer buffer name rq pos capacity initially holds self 
uml object diagram initial situation case study article new variant called clocked linear temporal logic clocked ltl 
define syntax clocked ltl recursively grammar true false past past element set propositions 
symbol defined holds required defined time bounded past temporal operators 
letters stand classical temporal logic operators 
oriented operators eventually globally 
past operators previous gp globally past eventually past 
temporal operators defined interval time bounds 
allow operators single time bound 
case lower bound zero default 
possible specify timing 
lower bound zero upper bound infinite default 
operators single time bound 
time bound specified implicitly set time unit 
operator precedence categorized groups past past 
course additional operators known literature supported logical operators equivalence xor temporal operators weak eventually 
semantics 
valid clocked ltl formula defined trace model time annotated kripke structure note particular execution semantics essential definition temporal logics 
require discrete time step time unit subsequent states speak trace time steps 
sufficient define tuple set atomic propositions set states total transition relation labelling function labels state set propositions true state 
time labelling function defines delay times example transition labelling defines delay times transitions cf 
interval structures 
labelling execution semantics little variations possible 
trace discrete time infinite sequence 
states holds gi gi semantics clocked ltl formulas defined satisfiability relation traces 
denote trace satisfies formula time satisfiability relation recursively defines semantics clocked ltl formulae shown table 
table denote arbitrary clocked ltl sub formulae formula description false implies holds holds 
past past holds holds 
note require operators 
semantics clocked ltl formula entire trace follows 
definition clocked ltl formula trace 
satisfies denoted iff 
specification purposes necessary distinguish property expressed ltl formula hold possible traces trace 
definition discrete time kripke structure clocked ltl formula 
satisfies traces denoted iff possible traces holds 
say satisfy denoted iff trace 
temporal logics specifications powerful give arbitrarily nested definitions full expressive power needed practice 
led property specification pattern systems related approaches temporal logics 
ocl extension follow idea 
define mapping temporal logic clocked ltl appropriate automatic verification tools 
note variant clocked ltl expressive time bounded linear temporal logics theoretical viewpoint 
possible map clocked ltl temporal logics existing table 
description clocked ltl operators tion tools spin reason defining clocked ltl syntax semantics existing logics exactly match requirements 
temporal logics far consider timing intervals consider past time operators defined continuous time 
contrast clocked ltl avoids cryptic symbols diamonds squares circles discrete time practical purposes supports past temporal operators combination timing intervals 

ocl ocl declarative expression language constrain values context uml model 
evaluation ocl expressions side effects corresponding uml model 
remainder call uml model referred user model 
ocl expression type 
user defined model types classes interfaces predefined basic types integer real boolean ocl notion object collection types sets ordered sets sequences bags 
collection types homogeneous sense elements collection common type 
standard library available provides operations access manipulate values objects 
com spin html ocl constraints visually applied stereotyped notes attached corresponding class shown 
alternatively separately defined plain text context class provided 
example invariant ensures instance class machine associated package buffer buffer instances class machine context machine inv self size machine allinstances asset size class name follows context keyword specifies class expression hold 
keyword inv indicates invariant holds object context class times 
keyword self refers object context class 
attributes operations associations accessed dot notation self results possibly empty set instances buffer 
arrow notation indicates collection objects manipulated pre defined ocl collection operations 
example operation notempty returns true accessed set empty 
predefined operation allinstances applied class machine extract set currently existing machine objects 
expression machine instances refers multiset bag buffer objects navigating machine object association class buffer 
multiset casted ordinary set applying predefined operation asset 
require size set equal specified machine object associated buffer object 
note possible define checks activated state diagram states associated objects operation statename ocl state boolean 
existing informal notion states ocl utmost importance temporal ocl extension 

temporal ocl extension concrete syntax ocl defined attributed grammar ebnf extended backus naur form inherited synthesized attributes disambiguating rules 
production rule mapping corresponding concept syntax metamodel provided 
grammar uml profile introduces stereotypes temporal expressions introduced oriented temporal ocl expressions 
basic idea interpret temporal ocl expression stereotype ordered arguments operation core source 
temporal expressions special form operation call expressions special form operation call 
operation call ocl syntax source referred operation operation arguments see 
corresponding attribute values set part syntax tree 
dedicated variable ast syntax tree store values 
type ast due individual production rule refers type ocl metamodel 
case ast type 
new rule gives main production rule past temporal ocl expressions 
introduce temporal operator distinguish temporal expressions ocl common dot arrow notation accessing attributes operations associations 

syntax mapping ast synthesized attributes ast source ast ast arguments ast ast ast type ast notempty ast collect type sequence endif inherited attributes env env env env disambiguating rules operation name past time temporal operator set pre includes ast operation signature valid ast 
past time temporal ocl expressions map specific uml stereotype inherits values metamodel level see 
additional temporal operations easily introduced point time just disambiguating rule extended cases 

semantics ocl provides extensive semantic descriptions metamodel formal mathematical approach 
remainder focus formal ocl semantics notion object model 
object model tuple set class classes set attributes set op operations set assoc associations generalization hierarchy classes functions associates roles multiplicities give assoc dedicated classes classes role names multiplicities respectively 
remainder call instantiation object model system 
system changes time number objects attribute values characteristics change system execution 
information evaluate ocl expressions stored system states represent snapshots running system 
ocl system state formally defined triple set class currently existing objects set attribute values objects set assoc currently established links 
object model system state definition lack descriptions ordered sets global ocl variable definitions ocl messages states uml state diagrams required temporal ocl semantics 
extend formal model system states correspondingly resulting extended object model class op assoc sig sc additionally includes sig associates roles multiplicities signal receptions classes sig corresponding relation sig signals set sc state diagrams attached active classes operation parameter kinds inout flag identify query operations note specific execution semantics state diagrams assumed 
formal definition state configurations extension formal descriptor class 
furthermore information added system states evaluate ocl expressions state related ocl message related operations object input queue received signals operation calls state configurations active objects set currently executed operations executed operation messages sent far 
resulting tuple system state extended object model class assoc conf aram aram aram possible define execution traces cover system changes relevant evaluate ocl constraints 
simplest case implementation system executed single cpu clear temporal order operations 
system distributed identify partial order configurations different objects 
problem treated ideal case introducing global clock allows global view system 
additionally assume time unit chosen sufficiently small ocl relevant change object may happen time step 
leads discretization time 
definition time trace time trace instantiation extended object model infinite sequence system states trace def 

represents system state time units start execution 
particular denotes initial system state 
apply annotation components system state 
particular denote state configuration active object oid system state oid 
give interpretation past temporal operation pre semantics oriented operation post 
assume temporal ocl expression active object oid class uml informally defines active state configurations 
results shortcomings considered final states part state configurations 
class evaluated system state time trace trace 
semantics operation pre defined follows 
pre integer def sequence set oid oid oid oid act iv oid act iv symbol represents predefined ocl value third logical built value ocl indicate erroneous expressions 
act iv class set currently existing objects called active class consider kinds objects notion state configurations 
recall non negative natural number inf 
interpret inf context 
symbol holds 

trace literal expressions want reason time traces obtained pre need new mechanism ocl explicitly specify traces annotated timing intervals means literals 
timing intervals denote duration state configuration may activated 
ocl metamodel define stereotypes illustrated 
restrictions apply leaving corresponding formal formedness rules reasons brevity 

collection kind stereotype sequence 

type associated set 
note require explicit specification set state configuration specified state 
case type implicitly casted set 

lower bound upper bound 

lower bounds evaluate non negative integer values 
matter brevity omitted additional variable assignment definition 
function determines values variables iterator variables local variables socalled expressions section 
kind parts ordered item upperbound lowerbound stereotype type classifier core stereotype 
uml stereotypes trace literal expressions 
upper bounds evaluate non negative integer values string inf infinity 
case upper bound value greater equal corresponding lower bound value 
similar grammar rule additional grammar rules added concrete ocl syntax modellers specify trace literal expressions timing bounds ocl 
define new boolean operation sequences seq sequence 
basically operation general form existing ocl collection operation subsequence 
new operation returns true argument seq included sequence operation applied 
parameter type placeholder element type seq 
required type conform element type sequence operation applied 
particular allows investigating required sequence state configurations specified means trace literal expression appeared trace 
example section 

mapping clocked ltl focus mapping instances clocked ltl formulae 
corresponding mapping oriented temporal ocl expressions easily obtained similar way 
definition ocl invariants class true instances time section 
context time traces means temporal ocl expression clocked ltl formula obj pre includes cfg past obj pre excludes cfg past obj pre exists expr past obj pre forall expr past obj pre integer expr table 
mapping past temporal ocl expressions clocked ltl formulae time variant true traces position 
consequently corresponding clocked ltl formula hold traces model start operator globally 
table lists main predefined ocl collection operations directly applied past time temporal ocl expressions 
case give mapping corresponding clocked ltl expressions 
table expr denotes boolean ocl expression 
equivalent boolean expression clocked ltl syntax 
cfg denotes state configuration uml state diagram set activated states corresponding set states clocked ltl syntax 
iterator variable state configurations 

en parts trace literal expression timing intervals ai bi 
past temporal ocl expression obj pre sequence 
en maps clocked ltl follows past 
en en 
mapping examples clear complex formulae easily composed particular logical ocl clocked ltl connectives implies 
semantics ocl pre operation generally applies active objects notion state diagram states cf definition mapping implies considered active objects persistent objects exist initial system state onwards complete execution time 
due formal model assume mapping uml state diagram states states kripke structure kripke structures clocked ltl formulae support specification means dynamic object creation deletion 
sufficient particular application domain limitation replaced benefit general application 
step want extend kripke structures additional components introduce new modalities clocked ltl 

temporal ocl clocked ltl examples section shows past oriented temporal ocl constraints requirements context buffer example section 
illustrates behaviour buffer means state diagram associated active class buffer 
state diagram comprises orthogonal sections concurrently 
section items machines section delivering items packaging unit 
show state diagrams remaining active classes sake brevity note modelled similar way 
example state diagram class packaging comprises simple states waiting loading maintaining error 
define overflow buffer due error packaging unit causality past 
guarantees packaging unit working sufficiently fast usual conditions 
words maintenance times interrupt packaging unit long speed machine outputs 
context buffer inv self error implies packaging pre includes error requirement strengthened additional timing bound packaging pre 
recall time semantics execution state diagrams scope standard uml 
get put waiting idle buffer running overflow self running put idle assuming mapping time semantics discrete time kripke structures cf 
definition corresponding formula hold buffer state buffer error past packaging state packaging error possible specify requirement oriented temporal ocl ltl operators solution natural specifying causality 

related temporal ocl extensions proposed authors 
early approaches directly add temporal logic formulas ocl advanced works consider past temporal operations 
consider timing bounds 
approaches include timing bounds property specifications completely different notations introduce time bounded ocl operations event specifications 
refer detailed discussion temporal ocl extensions 
contrast consistent ocl extension reuses ocl language concepts predefined collection types corresponding operations 
additionally build semantics adopted ocl load capacity overflow true load capacity loading unloading unload error 
uml state diagram class buffer reset specification 
focus state oriented temporal ocl expressions event specifications 
note ocl standard considers states uml state diagrams possible check activated states predefined operation statename 
effort needed semantically integrate state diagram states underlying formal model ocl cf 
section 

previous ocl extension allows specification oriented state oriented time bounded constraints latest ocl metamodel proposal 
approach extends ocl uml extension mechanism profiles stereotypes tagged values constraints 
approach demonstrates ocl extension means uml profile temporal time bounded constraints seamlessly applied syntax layer 
extensions layer temporal ocl application 
applied temporal ocl extensions production automation systems uml profile specification language 
semantics profile mapping synchronous finite state machines extended interval structures 
temporal ocl expressions se mantics mapping clocked ltl formulae automatically establishes formal relation parts 
provides sound basis formal verification real time model checking 
context raven model checker investigate finite clocked ltl formulae simulation verification approach 
acknowledge funding dfg project grasp dfg priority programme partial funding dfg research centre 
ster stevens 
enriching ocl observational mu calculus 
th international conf 
fundamental approaches software engineering fase grenoble france volume lecture notes computer science pages 
knapp 
ocl rt 
international symposium formal methods europe fme formal methods getting right copenhagen denmark volume lecture notes computer science pages 
clarke grumberg peled 
model checking 
mit press 
conrad 
temporal ocl meeting specifications demands business components 
unified modeling language systems analysis design development issues 
idea group publishing 
damm 
verification radio signaling system statemate verification environment 
formal methods system design 
douglass 
doing hard time developing real time systems uml objects frameworks patterns 
addison wesley 
dwyer avrunin corbett 
patterns property specifications finite state verification 
st international conference software engineering icse los angeles ca usa may 
emerson 
temporal modal logic 
van leeuwen editor handbook theoretical computer science volume pages 
elsevier 
gehrke goltz 
timed sequence diagrams tool analysis case study 
uml fort collins usa volume lecture notes computer science pages 
flake 
completion formal semantics ocl 
th australasian computer science conference new zealand pages 
australian computer science society 
flake mueller 
uml profile real time constraints ocl 
uml dresden germany volume lecture notes computer science pages 
flake mueller 
formal semantics static temporal state oriented ocl constraints 
software systems modeling october 
gabbay pnueli shelah 
temporal analysis fairness 
th asm symposium principles programming languages popl pages 
acm press january 
knapp merz 
model checking timed uml state machines collaborations 
th international symposium formal techniques real time fault tolerant systems oldenburg germany volume lecture notes computer science pages 
lamport 
proving correctness multiprocess programs 
ieee transactions software engineering 
lichtenstein pnueli zuck 
glory past 
conference logic programs brooklyn ny usa volume lecture notes computer science pages 
omg object management group 
uml ocl final adopted specification 
omg document ptc october 
ftp ftp omg org pub docs ptc pdf 
omg object management group 
unified modeling language specification 
omg document formal march 
pnueli 
temporal logic concurrent programs 
theoretical computer science 
san pietro 
practical model checking ltl past 
st int 
workshop automated technology verification analysis national taiwan university taipei taiwan december 
richters 
precise approach validating uml models ocl constraints 
phd thesis universit bremen bremen germany 
van de 
real time systems specification properties uml 
asci conference pages het netherlands may 
ruf hoffmann 
simulation guided property checking multivalued ar automata 
design automation test europe date munich germany pages 
ieee computer society press 
ruf 
symbolic model checking discrete clocked temporal logic intervals 
correct hardware design verification methods montreal canada pages october 
ruf 
modeling checking networks communicating real time systems 
correct hardware design verification methods bad germany pages september 
zhang 
foundation design analysis robotic systems behaviors 
technical report department computer science university british columbia vancouver canada 
phd thesis 
gogolla 
extension ocl temporal logic 
critical systems development uml pages 
technische universit nchen institut informatik munich germany 
