partial behavioral reflection spatial temporal selection reification ric jacques noy denis pierre cointe university chile dcc cwr blanco santiago chile project cole des mines de nantes inria rue alfred nantes france inria campus universitaire de beaulieu rennes france oasis project universit de nice cnrs inria rt 
des lucioles sophia antipolis france eric jacques pierre cointe fr denis inria fr behavioral reflection powerful approach adapting behavior running applications 
motivate partial behavioral reflection approach efficient flexible behavioral reflection 
expose spatial temporal dimensions reflection propose model partial behavioral reflection notion hooksets 
context java describe reflective architecture offering appropriate interfaces static dynamic configuration partial behavioral reflection various levels reflex open reflective extension java implementing architecture 
reflex extension fully supports partial behavioral reflection portable manner seamlessly integrates load time runtime behavioral reflection 
shows preliminary benchmarks examples supporting approach 
examples dealing observer pattern asynchronous communication transparent futures show interest partial behavioral reflection tool open dynamic aspect oriented programming 
categories subject descriptors programming techniques object oriented programming general terms languages experimentation permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
oopsla october anaheim california usa 
copyright acm 
keywords aspect oriented programming open systems reflection 
reflection programming languages paradigm emerged studies brian smith foundations consciousness self application concepts computer science implementation reflective lisp dialect 
ideas applied various programming paradigms including object oriented programming major impact languages clos smalltalk 
basic property reflection supports computations computations 
done separating base computations different levels metalevel base level 
levels causally connected 
means hand reflective program running base level access representation metalevel hand modification representation affect base computations 
depending part representation accessed part describing static structure program part describing dynamic behavior reflection said structural behavioral 
distinction introspection representation simply read representation modified 
shall focus behavioral reflection 
main strength behavioral reflection provide means achieve clean separation concerns including dynamic concerns offer modular support adaptation software systems 
strengths exercised wide range domains including distribution mobile objects concurrency fault tolerance 
applicability behavioral reflection limited lack widely accepted appropriate infrastructure implement reflective applications 
smalltalk considered interesting basis building infrastructure 
includes quite number reflective facilities flexible implemented way adding new reflective facilities done little overhead 
bringing behavioral reflection language java raises new challenges 
java provides limited reflective facilities order reduce runtime errors take account security requirements static nature 
result overhead due additional layer necessary get behavioral reflection increases significantly 
selecting apply reflection mandatory 
called partial reflection 
partial reflection possible balance effects compilation embeds set assumptions specialization reflection retracts assumptions generalization 
soon reflection native approach natural reflective language extensions include kind partial reflection user select entities reflective smalltalk see see java see 
reports experiment provide partial behavioral reflection systematic way 
experiment performed context reflex open reflective extension java 
idea open extension born observation new reflective extension java provide particular monolithic infrastructure reflecting commitment designer particular trade offs linked target application domains efficiency portability expressiveness flexibility 
order freeze trade offs sacrifice portability major benefit java efficiency suggestion introduce new role process developing reflective application metalevel architect 
architect framework provided reflex number existing building blocks responsible specifying structure metalevel depending requirements target application domain 
standard closed extension java role architect simply played designer extension 
process proceeds usual implements building blocks metalevel metaobject classes obeying structure defined architect base programmer develops base application assembler links levels implementing causal connection 
includes contributions comprehensive approach partial behavioral reflection highlighting spatial temporal dimensions propose model hooksets behavioral reflection 
model consists grouping execution points composable sets possibly crosscutting object decomposition attaching sets highly configurable link 
related ideas techniques applicable wide range object oriented languages 
describe context java open architecture supporting approach making possible combine static dynamic configuration tion 
context reflex configuration shared metalevel architect assembler controlled metalevel architect 
architecture retrofitted reflex 
spatial temporal selection reflection done combining static dynamic configuration 
preliminary benchmarks show benefit approach 
illustrate examples ideas facilitate definition crosscutting metaobjects clarifying links partial reflection aspect oriented programming aop paradigm crosscutting concerns 
rest structured follows section introduce partial behavioral reflection general setting 
section presents reflex preliminary benchmarks 
sections illustrate reflex achieve separation concerns concrete problems section discusses related section concludes 

partial behavioral reflection basic principles terminology distinguishes approaches reflection consist starting baselevel language elements classes basic operations message send receive field access object creation defining computational behavior object 
refers approaches top bottom approach respectively 
alternatively refer structural behavioral approach 
justifies second approach context interested describing wide range object behavior models 
interested behavioral reflection starting point proposal 
metalevel structured terms metaobjects reasoning acting base level computation described terms operations 
term operation occurrence refers particular instance operation qualified static dynamic depending term relates program text execution respectively 
caller side operations occur method bodies message send callee side operations surface object message receive 
working java new operations may introduced casts 
reflective object object operations reified controlled metaobject 
link base object metaobject called referred causal connection link 
instance class reflective class said reflective 
spatial temporal selection partial behavioral reflection approach efficient applicable behavioral reflection relies avoiding useless 
high flexibility specifying reflective needs required 
partial behavioral reflection addresses issue flexibility vs efficiency limiting greatest extent possible number control flow shifts occurring runtime 
shifting ml bl ml bl time time full reflection partial reflection ml meta level bl base level control flow reflective application illustration evolution control flow reflective application 
metalevel powerful costly 
shift consists reifying operation occurrence delegating part interpretation metaobject 
hook base level piece code responsible performing reification giving control associated metaobject 
reification significant cause performance degradation 
instance case method invocation reification usually implies wrapping arguments invocation array objects retrieving method object 
data may encapsulated unique method call object 
efficiency viewpoint crucial limit number shifts pay price reification effectively needed 
fig 
represents reflective application 
illustrates control flow base level metalevel execution 
full reflection fig 
operation base level reified possibly useless shifts occur 
occur partial reflection fig 

execution application unchanged suffer performance overhead 
separate dimensions careful selection reification spatial dimension temporal 
spatial selection spatial selection consists selecting reified application 
spatial selection done statically dynamically 
distinguish different levels selection entity selection refers selection reflective classes objects 
instance may want specify classes fully reflective instances reflective instance class reflective class partially reflective 
classes objects left intact 
operation selection refers possibility selecting operations reified reflective entity class object 
instance may want reify message receive field access class message send class intra operation selection refers possibility performing fine grained selection respect particular operation 
selection may characteristics specific occurrences instance may want limit message receive reification message foo class caller side operations selection method constructor occurrence instance may want reify message sending foo instances class occurs public methods intra operation selection crucial property approach partial behavioral reflection 
finest grain control reification process making possible ignore irrelevant operation occurrences transformation metaobjects selection runtime 
temporal selection temporal selection consists selecting effectively active 
optimizes performance system making reflection step 
lifetime object reflective needs may change reification may turned metalevel behavior apply anymore conversely external condition may require activating reification 
obviously temporal selection worthwhile cost deactivated reification activated reification empty metaobject 
benchmarks sect 
demonstrate fact context java 
model partial behavioral reflection spatial temporal selection consist precisely selecting execution points need reified order apply metalevel behavior needed 
issue manage hooks order define linked metalevel 
traditionally behavioral systems adopt gathers hooks class object basis 
feel classical view limited 
sake generality propose model partial behavioral reflection notion hooksets 
hooksets may gather execution points scattered various objects 
nice property making possible apply metaobject modularly implementing concern crosscuts object decomposition 
object may involved hooksets 
allows better modularity metalevel metaobjects may assigned single responsibility 
sets hooks restrained particular object class need named order manipulated 
hooksets composed standard set operators union difference intersection 
represents powerful reuse mechanism hookset definitions 
model refer simply link described attributes scope link determines considered hookset single metaobject controlling hook hookset scope class involved particular metaobject handling hooks occurring instances class scope object dedicated metaobject object scope 
activation link dynamically evaluated activation condition specified achieve expressive temporal selection 
activation condition may set various levels hookset class object 
control link determines metaobject control operation occurrence replace 
attribute possible impose type restrictions metaobjects linked hookset 
updatable attribute possible specify link may dynamically modified hookset linked metaobject 
model spatial selection done defining hooksets temporal selection done activation condition link 
flexible model similar event condition action model example active databases 
event layer realized hooksets hooks event sources condition layer realized activation condition attached link actions implemented metaobjects fig 

metalevel base level metaobject activation condition hookset hook link model hooksets 
believe important allow separate definition hooksets metaobjects links order maximize reuse hookset definitions metaobjects decouple assembler 
static dynamic configuration see aspects behavioral reflection configured 
configured statically need configured dynamically 
instance assembler may know reification needs activated time 
contrary may want activate reification runtime events 
consequence static configuration api runtime api dynamic configuration needed 
resulting application configured combination static dynamic configuration 

reflex partial behavioral re java reflex open behavioral reflective extension java supporting partial behavioral reflection model hooksets sect 

architecture dedicated java concepts underlying ideas architecture language independent 
reflex said open opposed reflective extensions impose specific metaobject protocol mop layered architecture 
reflex allows metalevel architects define mop framework provided core reflex possibly reusing parts standard mop library 
library built top core turns java ready behavioral reflective system 
section introduce core architecture reflex standard mop built top 
elements interfaces provided core reflex configuration static dynamic 
describe aspects implementation reflex discuss results micro benchmarks 
core reflex architecture motivated introduced role metalevel architect process developing reflective application 
architect responsible defining specific mop reflecting chosen compromise efficiency expressiveness flexibility 
definition core reflex 
execution time picture assumed core reflex fig 
class loaded goes selection process reflex determines hooksets associated class 
case class transformed reflective class loaded 
class loaded usual 
loading class normal class selection transformation load time runtime reflective class overview core reflex 
load time transformation discussed section 
selection process controlled assembler driven defining hooksets definition rely spatial selection entities sect 
links sect 

temporal selection sect 
initialized statically 
runtime api sect 
provided order dynamically control link definition activation 
api transformation process controlled architect defines available mop 
defining mop basically consists specifying operations message sending interfaces metaobjects providing code transformation entities able insert hooks sect 

mops coexist reflective application 
load time bytecode transformation concern concrete applicability behavioral reflection concretization architecture takes form portable java library 
reflex relies load time bytecode transformation order applicable binary components settings classes known loaded open distributed systems classes reflective reflex uses javassist framework load time structural reflection 
javassist relies specific class loader 
requested virtual machine loader forwards request class pool charge locating class definitions 
class located loaded class pool notify translator modify class 
translator obtain reification classes ctclass objects 
ctclass offers introspection capabilities standard reflection api java plus capabilities adding modifying member changing superclass altering method bodies 
reflex connected javassist particular translator called class builder see sect 

consequence classes reflex represented load time ctclass objects 
defining mops reflex open platform top specific mops defined 
reflex support language operation impose specific interfaces metaobjects 
class define support operation mop 
instance class encapsulates static operation class convenience name refer operation hook 
operations 
step defining mop consists specifying operations supported 
instance basic mop offer support message receive operation furnished mop support operations available language 
operations represented load time static operation classes 
core reflex provides marker interface classes 
instance static operation class represents static occurrence operation base level class definition 
defining operation classes metalevel architect controls exact contents interface load time representations 
similarly called dynamic operation classes represent language operations execution 
instances classes runtime objects representing operation occurrence execution 
metaobjects 
second step consists specifying interface metaobjects say data reified load time transformations performed compile time order avoid load time overhead provided classes need processed available 
data passed metaobjects runtime occurrence language operations 
base program information potentially 
information necessarily interest metalevel architect 
instance general purpose mop provide full including data specific mop provide simple string description operation occurrence 
alternatives mop pass reified data metaobjects execution 
reified data passed set arguments single array encapsulated dynamic operation instance 
decision driven trade abstraction efficiency 
decisions shape specific interfaces metaobjects expected implement 
core reflex provides marker interfaces distinguishing metaobjects metaobject replace 
section presents hierarchy metaobject interfaces standard mop 
hook 
hook bytecode transformation entities basically responsibilities parsing class definition find occurrences static operation class generating appropriate hooks install 
includes generating code build reification code delegation metaobject appropriate interface 
reflex provides interface entities 
implemented tools javassist 
spatial selection reflex spatial selection done load time 
time class loaded jvm reflex determines hooksets class involved applying class selectors hooks inserted class bytecode applying operation selectors 
hooksets defined intentionally sense set points deduced application predicates embodied selectors 
class selector responsible selecting classes entity selection 
implements interface public interface public boolean accept ctclass returns true selected 
having reification class ctclass allows class selector select class characteristics class hierarchy parameter types public methods illustrated section 
operation selector responsible selecting operation occurrences intra operation selection 
implements interface public interface public boolean accept ctclass operation selector select operation occurrences characteristics static operation instance class selector applied 
operations operation selector limit scope reification selecting operation occurrences specific method constructor appear 
selectors heavyweight needs code specific selectors particular case 
facilitate specification spatial selection general purpose selectors provided reflex class selector forthcoming examples accepts class name constructor parameter 
providing advanced selectors able interpret expressive parameters regular expressions great value 
temporal selection spatial selection done statically program code need provide control activation object level order support reification instance basis 
furthermore expressive activation conditions possibly user defined 
activation condition may constant user defined condition 
condition object implementing interface active declares evaluate method receives argument current object public interface active public boolean evaluate object addition providing fine grained control activation convenient able control activation globally say class level hookset level 
order provide functionalities api implementation alternatives 
consists keeping activation condition object control activation globally need able retrieve class involved hookset instance class 
obviously huge overhead terms memory usage 
adopt solution activation hierarchy hookset level priority class level turn priority object level 
new condition sub provided indicate level delegates responsibility determining activation 
sub meant evaluated prohibited object level sense 
result hook belonging hookset hs object instance class active activation condition hs evaluates true activation condition hs set sub activation condition evaluates true activation condition hs set sub activation condition evaluates true 
defining hooksets links hooksets 
distinguish primitive composite hooksets fig 

hookset identified unique hookset identifier 
primitive hookset set defined triple operation class selector operation selector instance ph 
primitive hooksets relate operation composed standard set operators sect 

hookset string ph ph ph ph ph ph ph ph ph operation class uml class diagram hookset definitions 
composite hookset union hooksets possibly related different operations 
execution point affected top level hooksets composition issue 
working convenient way specify reflex deal issue 
links 
links described load time link objects possible specify characterize association hooksets metaobjects 
link associates hookset metaobject definition set attributes fig 

metaobject definition 
reflex metaobjects created lazy manner 
advantage avoiding unnecessary creations link activated allowing metaobjects control execution constructors 
object specifies metaobject obtained 
basically means obtaining metaobjects instantiating metaobject class metaobject fig 

cases custom parameters specified 
passed array strings 
metaobject kind factory responsible initializing metaobject 
metaobject define static method void set object target string string args set method called control flow reaches hook metaobject set reset 
link scope object target argument instance metaobject linked 
link scope class target concerned class object link scope hookset target simply null 
course possible create set metaobject explicitly metaobject 
set method set metaobject object passed parameter instance link metaobject objects making convenient way set instance crosscutting metaobject 
attributes 
various link attributes section available reflex 
link attributes encapsulated attributes object fig 

control scope represented enumeration classes 
simply specified list type names 
dealing composite hooksets control attribute may set map particular control value composed hookset individually 
activation support optional reflex 
activation attribute disabled link active 
activation support needed name string args string control control control control replace control scope object scope class scope hookset scope hookset link necessary specify activation condition associated link application starts link new activation hookset class level conditions set sub object level condition set instance class implements active 
convenience enabled enabled provided 
correspond respectively active active initial activation conditions 
standard mop section describes standard mop provided default reflex 
mop designed generalpurpose expressive 
static operations operations represented hierarchy static operation classes subclasses class fig 

static operation class defines accessors various data extracted code load time 
instance represents message send operation defines accessors receiver type name method argument types 
caller side operation classes method retrieve method constructor operation occurrence making possible operation selectors refine selection 
dynamic operations dynamic operations represented hierarchy dynamic operation classes fig 

dynamic operation object encapsulates runtime information available describing characteristics corresponding operation occurrence 
static dynamic operation dependencies standard mop shift metalevel occurs target metaobject receives argument identifier hookset member triggered shift array objects referencing various runtime values interest 
access elements array eased fact static operation class defines set constants final class variables correspond indices information array fig 

attributes updatable true updatable false updatable activation types list uml class diagram link definitions 
disabled activation enabled activation enabled activation string instance dynamic operation class object representation array passed metaobject runtime 
dynamic operation class depends associated static operation class sense define information maps information declared static operation class 
convert array dynamic operation object dynamic operation classes implement static method convert object metaobjects follows class implements object string object data dcast cast dcast convert data dcast object scheme provided manipulating dynamic operation instances convenient costly 
obtain flexibility abstraction easy get dynamic operation object efficiency pay direct access array 
metaobjects metaobjects instances classes implementing marker interfaces replace serve super interfaces operation specific interfaces fig 

method signatures interfaces look follows void string object data void string object data object object string object data replace metaobjects change arguments return value operation types metaobjects able provoke side effects 
methods return type object return type void 
case metaobjects return value passed extra parameter 
metaobject class multi operation implement combination interfaces 
dynamic operations events metaobjects listeners various kinds events 
cast instantiation serialize target type target object object receiver class arguments method arguments target object getname method arguments getname part hierarchy static operation classes standard mop 
dcast part hierarchy dynamic operation classes standard mop 
metaobject part hierarchy metaobject interfaces standard mop 
replace configuration reflex explicitly supports roles metalevel architect assembler 
reflex provides dedicated configuration interface meta architect assembler fig 

access interfaces done various ways statically dynamically explained section 
list attributes attributes attributes attributes hookset list link list interfaces configuration 
addition defining supported operations metalevel architect provide default values various attributes 
restrict permitted values various attributes 
instance setting attribute metalevel architect enforce particular metaobject framework 
useful impose security framework provide common metaobject composition framework 
configuration constraints uniqueness hookset identifiers respect enforced attribute values checked new definitions methods throw exceptions case violations 
static configuration reflex supports forms static configuration configuration classes xml configuration files 
creating convenient domain specific language dsl configuration interesting perspective 
configuration classes 
configuration reflex done providing configuration classes 
configuration class class implements methods static void arc static void asc reflex keeps configuration object configuration classes fill needed appropriate interface 
consistency checks done defining new elements operations hooksets links configuration interface 
instance class implements architect configuration adds support message send operation standard mop reflex public class public static void new reflex std operation class send new reflex std hookset link definitions done manner 
class illustrates possibility embed hookset link definitions metaobject class see discussion locality section public class implements public static void hs new demo send new foo new run hs link new link hs new scope hookset control public void string object data convert data system println send message tostring class defines primitive hookset demo gathers calls run method occurring foo class 
operation occurrences reified passed unique metaobject link scope hookset control occurrences 
defined simple trace 
xml configuration files 
reflex includes xml parsing module configuration files 
syntax straightforward mapping object oriented configuration 
xml configuration examples sections 
running reflex 
run application reflex configuration files classes command java application arg arg replaced java reflex reflex config config 
file file 
application arg arg 
dynamic configuration runtime api reflex allows dynamic configuration architect assembler 
api implemented set static methods reflex class 
architect assembler api possible access interfaces section changes interfaces newly defined hooksets links apply classes loaded see discussion section 
divide runtime api parts respectively control temporal selection access metaobjects create particular reflective instances 
activation api 
api possible perform temporal selection 
activation api possible set retrieve activation condition associated link desired level hookset class object 
methods set activation condition string active string class active string object active parameter represents identifier hookset activation condition set 
set methods accept null value parameter case activation set hooksets 
instance deactivate links call reflex null active set methods get counterparts retrieve activation condition 
set logical operators provided compose activation conditions needed 
metaobject access api 
api possible retrieve set metaobjects desired level 
set metaobjects methods provided string metaobject string class metaobject string object metaobject methods get counterparts retrieve metaobjects 
reflex runtime ensures consistency enforces restriction rules may updatable 
creation api 
api possible obtain single reflective instance possibly loaded class 
feature implemented fly reflective subclass generation object class link method creates subclass applies link class 
links overloaded method accepts array links 
subclass reflective instantiated 
approach suffers limitations subclassing method overriding class final operations reified message receive non final methods serialization 
approach sufficient applications 
implementation class builder reflex transformation class reflective class controlled generic class builder 
order informed time class loaded class builder connected class loader javassist 
class loading class builder queries class selectors determine links applied 
builder generates support code class lets appropriate hook take care hook insertion operation 
load time runtime reflex uses special class loader provided javassist 
recall class loaders java define namespaces similar sense small nested logical virtual machines 
assignments namespaces prohibited 
application run reflex scenario 
main method reflex class executed loaded standard class loader defining namespace 
method initializes configuration invoking configuration classes parsing configuration files 
javassist loader created uses reflex class builder translator 
loader defines namespace namespace 
class builder notified loader class loaded accesses initialized configuration determine transformations apply 
namespace copy configuration created runtime api 
sum namespace transformation space fly bytecode transformation occurs namespace execution space reflective application executes possibly interacting runtime api fig 

support hook activation portable support hook activation deactivation implemented activation conditions section 
classes objects involved link include extra field hold activation condition 
reflex runtime stores hookset level activation conditions 
hook differs normal check activation conditions order hookset class object performed building reification invoking metaobject 
code hook follows determine activation reify delegate original code clause hooks 
limitations implementation constrained necessity remain portable compatible standard java 
precludes step possibility resorting features java platform debugging architecture jpda class reloading meant turned production environment 
investigating benefits jpda prototyping debugging environments certainly valuable may part 
current version reflex able define new hooksets dynamically loaded classes non hookset 
explains implementation hook activation 
particular note case deactivated hook activation conditions checked repeatedly execution 
loaded execution space class definitions altered 
benchmarks performed preliminary micro benchmarks validate interest partial behavioral reflection 
machine runs linux kernel intel celeron ghz processor mb ram hotspot client vm sun microsystems version build mixed mode 
benchmarks message send operation implemented default mop provided reflex alpha 
measured execution time loop method calls number times test method 
methods defined class sample 
order associate computation method body method loop incrementing counter 
aim benchmarks measure overhead applying reflection calls test method 
micro benchmark suite consists test cases ml test case non reflex measure execution time application reflex 
second test case non reflective consists running application reflex including parsing configuration files transforming class sample reify sending test occurring loop 
case normal non reflective object 
lets measure sole cost load time transformation measuring runtime cost reflection 
test cases measure cost empty metaobject respectively activation disabled bef aft act enabled link activated bef aft act activation enabled link deactivated bef aft act 
considered similar cases replace control replace act replace act replace act 
recall cases method invocation done java reflection api 
bl non reflective default replace mo empty mo deactivated link ml meta level bl base level control flow time representation various types test settings 
fig 
illustrates various test cases terms non reflex non reflective type replace act replace act type bef aft act bef aft act type type 
measured cost running application starting new jvm time linux time command 
checked test cases got full control cpu garbage collection triggered 
invocations non reflex non reflective bef aft act act act replace act act act table micro benchmarks results time 
lines table illustrate overhead load time transformation 
plotting figures gives parallel straight lines invocations 
slope lines gives cost elementary test ms 
value ordinates origin reflex reflex 
bytecode transformation important impact start time 
partial reflection possible reduce impact 
higher number invocations turns quite unexpectedly reflex code efficient java code 
resulting instance hotspot deoptimization effect observed interpreted code 
figures correspond straight lines runtime disturbance coming memory management hotspot 
easy compare various overheads 
comparing non reflective reflective replace execution deduce overhead reflective invocation 
overhead pretty high benchmarked standard invocation cost configuration obtaining cost invocation 
measurement done interpreted mode represents upper bound invocation cost hotspot enabled 
fact overhead reflective invocation orders magnitude greater standard invocation validates need precisely select reification occurs 
results show control expensive replace control overhead invocation 
gain quite moderate 
situation fairly different interpreted mode series measurements shown overhead control half overhead replace control 
deactivation worthwhile reduces cost replace control figures probably improved 
hand easily see cost activation negligible enabled 
tests preliminary micro benchmarks call measurements 
particular benchmarking reflection sizeable applications reifying various operations great interest 
results may evolve believe implementation core reflex improved number ways 
differences reflex version reflex quite different reflex previously 
old version single generic class builder pluggable hook hierarchy class builders raised composition issues 
clear separation core reflex user defined mops exist 
regard configuration reflex offered limited dynamic configuration api 
extensive static dynamic apis available 
furthermore means obtain reflective objects reflex explicit creations reflex feature enhanced possibility making classes reflective directly static configuration making possible leave base application code intact 
model hooksets spatial temporal selection framework missing 

example observer pattern section illustrate implementation observer design pattern reflex contrast corresponding java aspectj implementations line oopsla kiczales 
observer design pattern patterns involve crosscutting structures relationship roles pattern classes instance pattern 
clearly shown java implementation pattern leads mixing functional code participating classes pattern specific code avoid 
give reflex implementation observer pattern simple scenario 
scenario includes point objects observed screen objects 
furthermore order illustrate composability patterns screen objects play role observers point subjects screen object 
color display observes observation relations point object various screen objects 
scenario includes screen objects 
observation relations follows fig 
observe color changes observe coordinate changes observes changes display 
implementation reflex configuration chosen illustrate configuration xml files fig 

architect configuration defines support operations example field write message receive standard mop default attribute values 
notice default activation initially 
definition hooksets required fig 

applies instances class point notification triggered occurrences field write operation name field 
applies instances notification triggered occurrences field write operation name field color 

applies instances class screen notification triggered occurrences message receive operation name message display 
metaobjects hooksets metaobject instance specific metaobject informs relevant observers corresponding operation occurrences 
metaobject holds list observers attached particular subject 
generic part pattern behavior maintaining list observers notifying needed factored observer metaobject class 
class offers service create observing relations map 
case specific part update logic left concrete subclasses observer defines method fig 

define specific metaobject classes example fig 
observing changes point coordinates color respectively observing display changes screens 
running scenario class runs proposed scenario creating point screen objects mapping observers subject explained fig 

fig 
illustrates configuration runtime 
instance changes color change reified passed metaobject notifies observer 
assessment reflex implementation observer pattern presents modularity properties aspectj implementation locality code implements observer pattern located concrete metaobject classes participant classes left intact 
issue discussed 
reusability core pattern code abstracted reused situations 
pat architect operations operation class reflex std operation name reflex std operation class reflex std operation name reflex std operations scope object activation enabled control architect assembler link hookset id operation observer point class observer link link hookset id operation observer point color class observer link link hookset id operation observer screen display class observer link assembler xml configuration metalevel architect top assembler bottom observer design pattern implementation 
public class observer protected list public void object add public void object remove protected void object iterator iterator hasnext protected void object object public static void map string object object observer reflex reflex activate active public class extends observer implements public void string object object protected void object object screen display screen updated color changed metaobject classes observer design pattern example 
observer class generic reusable specific example 
public class main public static void main string args point screen create objects observer map observer map observer map observer map observer map observer map play main program observer design pattern example 
display color notify update metaobject illustration configuration runtime observer scenario 
tern instance need define concrete metaobject classes set configuration required 
composition transparency coupling participant pattern subject observer take part multiple observation relations 
un participants aware role pattern instance possible switch pattern 
regards locality important notice reflex implementation aspectj implementation rely class aspect concrete subclasses aspects dynamic configuration setup scenario 
major difference reflex aspectj aspectj pointcut declaration link embedded aspect definition 
seen nice property example tangled implementation defining set points behavior link different concerns possibly specified separately 
reflex allows separation enhances hookset metaobject reuse 
cases level separation needed metaobject classes embed configuration playing role configuration classes section equivalent aspectj case 
furthermore reflex preserves pure object oriented implementation style uses metaobject classes configuration classes implemented standard java classes 
configuration files optional declarative alternatives configuration classes 
conversely aspects aspectj standard classes 
reflex directly benefit advanced support java development incremental compilation eclipse ide 
functional point view un taken step reflex aspectj support link de activation possible switch pattern dynamically 
sources underlying events de activated locally hookset object globally easily 

example transparent futures show reflex implement important feature distributed object systems offer asynchronous communication transparent futures see instance proactive 
example illustrates runtime activation deactivation need control cast operation interest selection framework 
transparent futures futures introduced multilisp 
distributed object system futures call processes returns immediately 
client process need wait value returned server process instance java rmi 
returned object called fact just place holder actual result 
server process executes client continue activity may pass objects processes 
client process block wait server process terminate effectively accessed 
called wait necessity 
problem futures simple mops runtime mop common easy way implement transparent futures done proactive 
fact reflective object metaobject implements wait necessity strategy 
apart known identity issue result approach suffers limitations strongly typed language java due widespread downcasts 
simple mop supporting message receive sufficient 
created declared type www eclipse org result known runtime type 
implies adequate type 
suppose class subclass class consider method foo class server public foo returns object method called asynchronously system creates type compatible returns caller 
typical client code server foo 
exception occur trying downcast result received 
solution reflex downcast problem solved expressive mop supporting cast addition message receive standard mop provided reflex 
expressive power selection framework core reflex activation scheme provided great help case 
section explains design solution shows configure reflex order implement 
illustrates situation time foo called fig 
corresponding classical scenario transparent remote calls runtime mop returned fig 

time client share common metaobject metaobject 
metaobject controls casts occurring client message receptions occurring 
result delivered delivery done proxy metaobject fig 
metaobject intercepts cast client message reception execution blocked result available 
result arrived cases considered result type metaobject fills fields result clone result 
time controlling message reception longer needed deactivated reflex deactivate 
standard object 
result metaobject keeps result 
time intercepts message receive forwards result 
intercepts cast client returns result execution proceeds 
implementation step consists defining hookset 
hookset defined union primitive hooksets fig 
set including calls public methods classes 
set defined simple operation selector selecting public methods message receive operation class selector matching classes 
set including casts type occurring class 
define link hookset metaobject class 
link hookset scope shared instance created 
metaobject class implements 
holds table associations asynchronous call identifiers objects 
hookset id hookset id operation hookset id operation cast hookset link hookset class attributes control replace scope hookset link xml configuration example 
definition particular difficulty 
contrast definition easy 
recall role class selector select classes 
straightforward solution consists selecting class possible result type subtype public method class asynchronous call performed obviously case selecting classes system instance method return type object 
facing trade transparency partiality 
fortunately reflex possible choose implement appropriate trade depending requirements 
straightforward solution totally transparent may lead heavy reflection 
elaborate alternative heuristics static analysis determine classes 
initialize list classes names classes implement marker interface 
alternative definitely transparent optimal terms partial reflection 
assessment example shows concrete case controlling cast operation turns interesting 
furthermore link activation useful facing scenario certain point time reification needed longer 
example illustrates interest powerful selection mechanism opposed type patterns aspectj purely syntactic approaches 
consider instance class selector mentioned possi class active objects proactive 
client jvm client foo trap proxy mo stub foo server jvm server mo client client jvm server jvm proxy mo stub method call object illustration scenario 
client calls foo server 
returned client result delivered metaobject 
ble alternative precisely selects classes result types public methods classes asynchronous calls performed 
advanced criterion expressed patterns compound ones type names 
possibility adopting various selection strategies syntax program analysis introspection great advantage terms flexibility system designers constrained particular closed way specifying selection 
example adopted solution eventually depends particular requirements target distributed object systems terms transparency partiality 

related aop inspiration research efforts including reflection metalevel programming composition filters multi dimensional separation concerns 
question relation reflection aop naturally arises 
kiczales defined aop principled subset reflection 
review existing tools proposals fields reflection aop discuss relation reflection aop general partial behavioral reflection dynamic aop 
existing tools proposals reflective systems behavioral reflective systems considered provide sort limited partial behavioral reflection reflective java context java incarnation 
apart systems provide possibility choose classes reflective 
approach closest philosophy 
compared proposals adds possibility grouping metaobject classes protocols selecting classes protocols apply 
limitation possible restrict set reified operations extend 
furthermore support intra operation selection crucial feature partial behavioral reflection pre server sented 
implementation model java 
respect temporal selection powerful reflex require hooks specified introduced load time 
possible implemented extended jvm restricting portability 
note rely modified virtual machines 
conversely objective reflex promote behavioral reflection real life applications portability key issue 
configuration reflective architecture offers range static dynamic configuration possibilities 
instance supports static configuration supports dynamic configuration 
regard supporting combinations metaobject control similarly aware reflective architecture provides flexibility 
instance offers control metaobjects offers replace control 
explicit support role metalevel architect distinguishing property 
mentioned systems adopt classical view considered handling crosscutting metaobjects possible reflex model hooksets 
aop systems wide spectrum approaches aop completely static completely dynamic discussed 
spectrum reflex characterized supporting dynamic binding load time meaning bindings hook load time undone redone run time changing metaobjects deactivating links 
jac dynamic aop system reflective infrastructure set load time 
prose dynamic aop system modified jit compiler modified jvm 
prose deliberately sacrifices portability achieve high performance 
approaches aspectj provide fixed languages pointcut definitions mainly syntactic support fixed limited number base operations 
event aop approach dynamic aspect oriented programming concept central monitor receives synchronous events join points application possibly triggers actions sequences related events 
great expressive power possible reason event patterns supporting temporal reasoning 
seen particular instantiation partial behavioral reflection hooks forward control unique omnipotent metaobject called monitor 
interesting part way metalevel structured advanced event pattern matching facilities 
facilities contribute raising level abstraction explicit means composing aspects facilities detection resolution conflicts aspects 
reflection aop strengths aop initially formulated provides developer domain specific languages say aspect specific languages 
asl specific particular domain aspect fits better needs specialized programmers 
right concepts directly manipulated additional support provided terms verification debugging 
conversely reflection general conceptual framework cleanly modularize concerns forces users understand assimilate metalevel viewpoint computation 
sense reflection solution oriented expressed terms solution space operations language build solution aop problem oriented expressed terms problem space specification problem 
focusing complicates aspect interaction composition 
research effort aop shifted general approaches 
evolution aspectj language example trend 
runtime aop subset partial behavioral reflection 
building general purpose aspect language top generic reflective system easier provide guarantees terms aspect behavior lower complexity programming hiding meta 
issue develop specific languages top generic infrastructures 
reflective approaches support aop development multiple aspect languages 
aspect oriented logic meta programming proof feasibility 
offers general declarative framework programming aspects base level java smalltalk program metalevel programmed logic programming language 
framework declare rules interactions compositions aspects defined 
forgotten aop aims handling crosscutting concerns modularly reflection general behavioral reflection particular application areas dynamic programming generic programming program adaptation kind self reasoning important 

comprehensive approach partial behavioral reflection hookset model spatial temporal dimensions 
described behavioral reflective system java fully supports model open portable manner 
reflex seamlessly integrates load time runtime behavioral reflection 
main contributions presentation model hooksets generalizes classical view offering support relations execution points capacity handle crosscutting concerns full integration reflective aspects generic model open implementation clearly separated specification hooksets links metaobjects embedded single place intentional possibly declarative description mop entry points expressive reification selection framework class operation selectors open mop support provides extensibility terms supported operations flexibility way reified high level configurability load time runtime explicit support roles assembler metalevel architect addition 
far core reflex concerned interesting perspectives include possibility precisely specifying needed content extension reflex order support mop generation 
plan study interest terms performance providing metaobject inlining study reflex implementation optimized 
includes testing possibly extensions capabilities reflex application demanding domains concurrent programming distributed systems preliminary done adaptable mobile systems context aware applications 
analyze possibilities offered metaobject composition framework combined security framework reflective applications 
started working integration eventbased aop model top reflex 
objective explore continuum reflection aspectoriented programming 
particularly interested possibility keeping infrastructure open providing users structure guidance guarantees resulting programs instance terms safety security 
distant perspective study instantiation model hooksets dynamically typed object oriented language smalltalk 

shigeru chiba pierre charles david julia lawall comments previous versions anonymous reviewers helped enhance number ways 
partially funded millenium center web research chile inria project project 

batory consel taha editors 
proceedings st acm sigplan sigsoft conference generative programming component engineering volume lecture notes computer science pittsburgh pa usa oct 
springer verlag 
bergmans 
composition filters object model 
proceedings symposium enabling objects industry june 
blair coulson andersen blair clarke costa duran 
principled approach supporting adaptation distributed mobile environments 
international symposium software engineering parallel distributed systems pages limerick ireland 
mens de 
building composable aspect specific languages 
batory pages 
capra emmerich mascolo 
reflective middleware solutions context aware applications 
yonezawa matsuoka pages 
re 
seamless computing metacomputing java 
concurrency practice experience sept 
re 
reflections mops components java security 
knudsen pages 
cheverst davies friday 
architectural ideas support adaptive context aware applications 
workshop infrastructure smart devices ubiquity actuality bristol uk sept 
chiba 
metaobject protocol 
oopsla pages 
chiba 
load time structural reflection java 
bertino editor proceedings th european conference object oriented programming ecoop number lecture notes computer science pages sophia antipolis cannes france june 
springer verlag 
chiba masuda 
designing extensible distributed language meta level architecture 
nierstrasz editor proceedings th european conference object oriented programming ecoop volume lecture notes computer science pages kaiserslautern germany july 
springer verlag 
cointe editor 
proceedings nd international conference metalevel architectures reflection reflection volume lecture notes computer science saint malo france 
springer verlag 
dahm 
byte code engineering 
cap editor proceedings jit berlin pages 

david ledoux 
infrastructure adaptable middleware 
tari editors move meaningful internet systems coopis doa odbase volume lecture notes computer science pages 
springer verlag oct 
de hondt 
aspect oriented logic meta programming 
cointe pages 
dijkstra 
structure multiprogramming system 
communications acm may 
dittrich 
active database management system manifesto rulebase features 
proceedings nd international workshop rules database systems volume pages 
springer verlag 
douence fradet 
framework detection resolution aspect interactions 
batory pages 
douence 
formal definition crosscuts 
yonezawa matsuoka pages 
ducasse 
evaluating message passing control techniques smalltalk 
journal object oriented programming june 
filman bader 
aspect oriented programming 
communications acm oct 

fabre stroud wu 
implementing fault tolerant applications reflective object oriented programming 
proceedings th international symposium fault tolerant computing pages pasadena ca usa june 
ieee computer society press 
foote johnson 
reflective facilities smalltalk 
meyrowitz editor proceedings th international conference object oriented programming systems languages applications oopsla pages new orleans louisiana usa oct 
acm press 
gamma helm johnson vlissides 
design patterns elements reusable object oriented software 
professional computing series 
addison wesley october 
klein der 
jumping meta level behavioral reflection fast flexible 
cointe pages 
cahill 
meta object protocols approach 
kiczales pages 
halstead jr multilisp language concurrent symbolic computation 
acm transactions programming languages systems 
kiczales 
design pattern implementation java aspectj 
proceedings th international conference object oriented programming systems languages applications oopsla pages seattle washington usa nov 
acm press 
ibrahim 
report workshop reflection metalevel architectures object oriented programming 
oopsla ecoop ottawa canada oct 
kiczales editor 
reflection san francisco ca usa apr 
kiczales 
reflection 
invited talk third international conference metalevel architectures advanced separation concerns reflection sept 
kiczales des rivi res bobrow 
art meta object protocol 
mit press 
kiczales hilsdale hugunin kersten palm griswold 
overview aspectj 
knudsen pages 
kiczales lamping mendhekar maeda lopes 
loingtier irwin 
aspect oriented programming 
aksit matsuoka editors proceedings th european conference object oriented programming ecoop volume lecture notes computer science pages jyv skyl finland june 
springer verlag 
knudsen editor 
proceedings th european conference object oriented programming ecoop number lecture notes computer science budapest hungary june 
springer verlag 
ledoux 
opencorba reflective open broker 
cointe pages 
ledoux sa 
adaptability mobile agent systems reflection 
rm workshop reflective middleware apr 
liang bracha 
dynamic class loading java virtual machine 
proceedings th international conference object oriented programming systems languages applications oopsla pages vancouver british columbia canada oct 
acm press 
maes 
reflection 
phd thesis artificial intelligence laboratory vrije universiteit brussels belgium 
maes nardi editors 
meta level architectures reflection 
north holland 
matsuoka yonezawa 
object oriented concurrent reflective language dynamic resource management highly parallel computing 
ipsj sig notes volume prg 

meta level programming coda 
editor proceedings th european conference object oriented programming ecoop volume lecture notes computer science pages aarhus denmark june 
springer verlag 

engineering meta level 
kiczales pages 
malenfant cointe 
methodology explicit composition metaobjects 
oopsla pages 
oliva 
design implementation 
proceedings th usenix conference object oriented technologies systems coots pages san diego ca usa may 
proceedings th international conference object oriented programming systems languages applications oopsla austin texas usa oct 
acm press 
ossher tarr 
multi dimensional separation concerns hyperspace approach 
aksit editor software architectures component technology volume kluwer international series engineering computer science 
kluwer 
parnas 
criteria decomposing systems modules 
communications acm dec 

jac flexible solution aspect oriented programming java 
yonezawa matsuoka pages 
alonso gross 
just time aspects efficient dynamic weaving java 
aksit editor proceedings nd international conference aspect oriented software development aosd pages boston ma usa mar 
acm press 
redmond cahill 
dynamic efficient reflective architecture java 
ecoop workshop reflection metalevel architectures june 
redmond cahill 
supporting unanticipated dynamic adaptation application behavior 
magnusson editor proceedings th european conference object oriented programming ecoop number lecture notes computer science pages spain june 
springer verlag 

smalltalk reflective language 
kiczales pages 

du comportement des objets dans les langages classes 
phd thesis universit de nantes cole des mines de nantes june 
french 
smith 
reflection semantics lisp 
proceedings th annual acm symposium principles programming languages pages jan 
noy 
reflex open reflective extension java 
yonezawa matsuoka pages 

managing object migration applying separation concerns 
proceedings xxi international conference computer science society pages arenas chile nov 
ieee computer society 
noy 
altering java semantics bytecode manipulation 
batory pages 

transparent adaptation migration policies 
th ecoop workshop mobile object systems spain june 
welch stroud 
evolution reflective java extension 
cointe pages 
wu 
reflective java reflective component transaction architecture 

fabre chiba editors proceedings acm oopsla workshop reflective programming java oct 
wuyts 
logic meta programming approach support evolution object oriented design implementation 
phd thesis vrije universiteit brussel 
yonezawa matsuoka editors 
proceedings rd international conference metalevel architectures advanced separation concerns volume lecture notes computer science kyoto japan sept 
springer verlag 
