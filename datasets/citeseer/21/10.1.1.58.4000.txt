language system composing security policies bauer jay david walker princeton university technical report tr january introduce new language system allows security architects develop structured easy maintain security policies java applications 
system policies class objects 
consequently programmers define parameterized meta policies act policy combinators policy modifiers complex security policies implemented composing simple base policies 
demonstrate effectiveness design building library powerful policy combinators showing 
describe issues encountered implementing system provide performance results 
security architects large software systems face enormous challenge larger complex system difficult ensure obeys security policy 
large software problem security problem dealt breaking smaller manageable pieces 
smaller sized problems easier understand reason solutions simpler implement verify 
decomposing security problem parts tempting scatter access control checks resource monitoring code mechanisms research supported part darpa award arda 
national science foundation career 
ccr army research office 
daad perpetually available secure information systems carnegie mellon university necessarily reflect opinion policy federal government official endorsement inferred 
carnegie mellon university ece cmu edu princeton university cs princeton edu princeton university cs princeton edu modules implement components 
especially true enforcement property involves low level components drawn logically different parts system 
instance order implement policy concerning data privacy may necessary consider operation wide variety system components including file system network printers forms unfortunately scattered implementation policy difficult understand verify centralized implementation finding pieces distributed policy problematic 
distribution security policy mechanism large body code difficult react security breaches vulnerabilities 
current security climate new viruses spread internet minutes speedy reaction vulnerabilities critical 
describes polymer new language system helps engineers enforce centralized security policies run time monitoring modifying untrusted java application behavior 
design focuses providing features allow programmer develop structured easy security policies 
facilitates decomposition complex security policies smaller simpler parts provides convenient way write simple component policies supplies tools combine components complex powerful policies 
polymer language designed minimal extension java easy java programmers learn develop security policies applications 
programmers implement security policies extending polymer policy class special interpretation underlying run time system 
intuitively best understand policy objects call program monitors state machines operate sequence actions executed untrusted target application 
concretely policy object contains elements specification application actions method calls relevant security 
necessary security state keep track application activity execution 
decision procedure invoked time application attempts execute security sensitive action 
decision procedure returns number security suggestions interpreted underlying system 
suggestions include suggestion quietly accept execute action suppress action raise exception inside application halt application outright 
addition suggestion may contain effectful code executed behalf application 
structure highly expressive serves excellent starting point implementation 
inspired schneider automata theoretic characterization program monitors derived directly previous theoretical edit automata formal state machines transform application behavior editing sequence application events insertions deletions truncation sequence 
proven principle automata enforce wide range program properties 
addition program monitors class java objects possible simple policies serve arguments policy combinators 
carefully structured policy class developed programming methodology simple policies composed variety ways 
demonstrated effectiveness design developing library combinators including couple different forms conjunctive disjunctive policies application specific policy combinators policy modifiers 
major challenges developing combinators sense presence effects 
important aspect design pattern matching facility allows manipulate query program actions convenient concise notation 
addition providing simple patterns match ordinary concrete program actions provide facilities reminiscent wadler views match actions 
actions summarize security relevant information appears concrete actions standard form 
views implement isomorphisms representations actions implement half view injection type 
actions allow programmers hide irrelevant details complex low level interface treat methods similar functionality dozen methods open file standard java libraries identical security purposes 
actions possible modularize policy design axis orthogonal modularization provided combinators 
rest proceeds follows 
section explains process involved building executing secure programs polymer 
section describes main features language including actions suggestions policies 
runs series examples illustrate write simple policies policy combinators 
section describes key elements implementation measures performance main system components 
section discusses relationship previous area 
polymer system overview polymer system composed main tools 
tool policy compiler compiles program monitors defined polymer language plain java java bytecode 
second tool bytecode rewriting tool rw processes ordinary bytecode inserting calls monitor necessary places 
order construct secure executable tools programmers perform series steps 

write action declaration file adf 
specification lists possible program actions impact system security 
adf indicates rw methods require code insertions transfer control application monitor 

instrument system libraries rw 
rw reads system libraries inserts calls monitoring code places described adf 
step may performed details security policy implementation set need repeated executing target application 
libraries instrumented jvm starts default jvm security constraints prevent libraries modified reloaded jvm running 

write security policy compile policy compiler 
policy compiler translates polymer program ordinary java invokes java compiler translate bytecode 

start jvm modified libraries 

load target application 
loading specialized class loader uses rw rewrite target code way rewrote library code step 
execute secured application 
contains picture result process 
picture instrumented target library code run inside jvm 
code invoke security sensitive method control redirected generic policy manager queries current policy 
current policy return suggestion interpreted policy manager 
possible inline policy manager application code doing result performance improvement 
chosen maintain level indirection possible dynamically update policies bringing virtual machine 
experimented extensively dynamic policy updates principle decision possible react security vulnerabilities quickly servers long running applications 
security updates completely invisible users threatened interruptions service choose comply security recommendations 
polymer language section describe core features polymer language 
basic concepts show program simple policies 
demonstrate create complete policy applying policy combinators simple base policies 
core concepts get application java core classes interpreter highest level policy suggestions policy 
secure polymer application polymer introduces central new abstractions actions suggestions policies 
policies analyze actions convey decisions means suggestions 
actions monitors intercept reason react security sensitive method invocations 
action objects contain information relevant invocations static information method signature dynamic information calling object method parameters 
convenient manipulation actions polymer allows matched action patterns 
action object matches action pattern action signature matches specified pattern 
patterns wildcards matches constraint return type single parameter type 
matches zero parameter types 
example pattern public void java io init int matches public constructors classes java io package parameter int 
place init refers constructor identifier refers particular method 
action patterns appear places 
action declaration file adf set action patterns 
instrumentation process action matches action pattern adf instrumented 
second monitor uses action patterns declare set actions regulates 
individual monitor reason actions set 
third monitors action patterns statements determine action dealing 
statements similar java switch statements 
case void system exit int status 
action represents invocation system exit statement evaluates expression variable status bound value method single parameter 
mod id name params mod public protected package private abs wildcard void type wildcard name id wildcard init id wildcard params 
param params param wildcard type id wildcard id java identifier type java type syntax action patterns 
square brackets item indicate occurrence item plus indicates occurrences 
categories italic font literals bold 
abs modifier described section 
suggestions untrusted application attempts execute action monitor suggests way handle action call trigger action triggers monitor making suggestion 
main types suggestions monitor generate 
target attempting execute action possibly violate monitor security policy monitor suggests action quietly accepted 
hand action causes may cause policy violation monitor basic choices 
may halt target altogether may ignore target request allow target continue executing may executing auxiliary code attempts recover potential violation performs bookkeeping tasks 
monitor decision particular trigger action conveyed suggestion object 
polymer supplies subclass suggestion type suggestion listed suggests trigger action execute unconditionally 
suggests action executed target halted 
public class policy public public suggestion query action public void finish suggestion sug object result boolean parent class policies suggests action executed target allowed continue 
polymer notifies target attempt invoking trigger action denied throwing target catch continuing execution 
suggests making final decision target action deferred auxiliary code executed effects evaluated 
breaking possible actions monitor orthogonal categories provides great flexibility monitor semantics relatively easy understand 
addition breakdown simplifies job tremendously comes controlling monitor effects building combinators put monitors sensible ways see section 
default actions declared security sensitive monitor processed monitor actions executed collaborating monitors monitor 
words default system adheres principal complete mediation states access resource monitored 
design helps prevent situations malicious program privileged security component executing security sensitive actions behalf 
addition design straightforward write monitors monitor activity monitors 
policies programmers encode run time monitor polymer extending base policy class 
new policy provide implementations query methods may optionally override finish method 
returns set actions policy considers security sensitive action element set trigger monitor 
query analyzes trigger action returns suggestion indicating deal 
desired possible change behavior guard misuse defining right sort policy combinator 
finish called policy suggestion followed 
suggestion forces target halted raised finish called immediately halting target raising exception 
arguments finish original suggestion policy returned return value trigger action inserted action null action executed return type void exception value action completed abnormally flag indicating action completed abnormally 
existence query finish methods policies fundamental design polymer 
compose policies writing policy combinators query policies combine suggestions 
combining suggestions combinator may choose follow suggestions queried policies 
query methods assume suggestions followed free effects state updates operations 
policies obey design principle query methods pure 
places effects may occur effectful computation encapsulated insertion suggestion effectful computation execute finish method 
updates policy state generally happen finish method point policy sure suggestion executed successfully 
design provides finegrained control exactly effects occur possible build powerful policy combinators precise comprehensible semantics 
simple policies give feel write polymer policies define simple examples section section build powerful policies combining basic policies collection policy combinators 
considering permissive policy possible allows 
polymer code policy 
method returns set actions constructed element array action patterns 
single element array matches action considers action security relevant 
query method returns allows trigger actions execute unconditionally 
enable convenient processing suggestions suggestion constructor argument policy making suggestion 
second example consider slightly useful policy allows network connections hosts local network monitored system 
specifically policy examines method calls create network sockets 
policy queried concerning creation socket object invokes utility function determine application creating local connection 
policy allows connection proceed policy considers attempt remote connection intolerable security violation halts target execution returning 
public class extends policy private actions new new public return actions public suggestion query action return new policy allows public class extends policy private actions new new void java net socket init string public return actions public suggestion query action case void java net socket init string return new return new policy allows network connections hosts local network polymer code implement policy shown 
third policy shown attempts prevent simple service attack restricting number files untrusted target may open time 
policy examines calls open close files maintaining variable contains count number files target open 
allows trigger actions proceed normally opening file send count open files limit set policy constructor 
disallowed case monitor signals target attempted file opening creates security violation returning 
allowed trigger action successfully executed finish method updates variable appropriately 
trigger actions passed suggestion constructors query method finish method access 
consider policy requires warning displayed creating network socket having opened file 
polymer code policy shown 
inserts action display warning socket created file opened 
inserted action constructed supplying caller case public class extends policy private int private actions new new java io init string java io init string java io close java io close public return actions public int public suggestion query action case close return new return new return new public void finish suggestion sug object result boolean sug return sug case close return default policy limits number open files null inserted action static fully qualified method name examples warnings warn parameters inserted method packed array objects 
inserted action executed policy asked decide opening socket allowed second attempt occur warning displayed policy simply allow socket opened 
actions far assumed target application open files calling particular constructors 
practice methods open files example constructors constructors file 
file methods java util zip constructors runtime methods executing system commands 
public class extends policy private boolean false private boolean false private actions new new java io init string java io init string java net socket init string public return actions public suggestion query action case java net socket init string action new action null examples warnings warn new object connecting opening files return new fall case java io init case java io init return new return new public void finish suggestion sug object result boolean sug null return sug true sug case java io init case java io init true policy displays warning socket created files opened cumbersome redundant enumerate methods policy polymer possible group actions 
actions enhance power action patterns example series action patterns capture possible actions open file policy single action pattern action 
actions allow policy reason security relevant actions different level granularity offered java core api 
permit policies focus regulating particular behaviors say opening files public class extends public string param name file opened public boolean matches action case boolean java io file param java io file getname return true case void java util zip init string name param name return true return false action definition forcing individually regulate actions cause behavior 
easier write concise modular policies 
actions possible write platform independent policies 
set actions cause file opened may system long action adjusted accordingly policy regulating file access 
illustrate usefulness actions simplify policy 
need define actions opening files network connections 
abbreviated definition action shown 
action defined similarly 
action main tasks determine encompasses particular concrete action provide consistent interface concrete actions represents 
solve task action implement matches method 
method takes argument particular concrete action returns true action action constituents 
action may match instance particular concrete action 
example action may represent attempt open file tmp directory 
matches method access concrete action run time parameters able see file opened tmp directory decision accordingly 
second task action policy consistent interface set concrete actions 
signature action example written void string filename 
methods open file take string argument 
file takes arguments fit action signature matches method compute name file opened 
action parameters represented field param public class extends policy private actions new new abs examples string abs examples string public suggestion query action case abs examples string action new action null examples warnings warn new object connecting opening files return new fall case abs examples string return new return new 
version policy uses actions param 
matches method determines value parameter case name file assigns appropriate field param 
policies actions just concrete actions action patterns keyword abs 
shows policy modified actions 
policy combinators polymer supports policy modularity code reuse allowing policies combined modified policies 
polymer policy firstclass java object may serve argument result policies 
call policy parameterized policies policy combinator 
referring complex policy policy parts call policy parts complex policy 
written library common combinators security policy architects free develop new combinators suit specific needs 
conjunctive combinator useful restrict application behavior applying policies enforcing restrictive 
example policy disallows access files combination policy disallows access network resulting policy disallows access files network 
general case policies conjoined may reason overlapping sets actions 
case consider suggest different courses action 
addition define order effectful computations performed 
conjunctive combinator composes exactly policies generalize number 
combinator operates follows 
suggest insertions combinator insertions left conjunct occurring prior insertions right conjunct 
principle complete mediation monitor recursively examine inserted actions security relevant 
suggests insertions monitor follows restrictive suggestion 
halting restrictive suppressing turn restrictive accepting 
notice sequence insertions conjunct may effect changing state second conjunct 
fact quite second conjunct considers inserted actions security relevant 
consequently second conjunct may different suggestion regarding handle action insertions 
example initial state action ok intervening insertions monitor suggest application halted 
abbreviated version conjunctive combinator shown 
calls query method simply create new suggestions type parameter calls 
notice suggestion returned combinator includes suggestions combinator decision 
design possible combinator finish method notify appropriate suggestions followed 
conjunctive combinator instantiate policy prevents foreign code opening files displays warning network connection opened files accessed 
parameters passed combinator exactly policies described previously section 
policy new conjunction new new precedence combinators conjunctive policy common combinator 
useful occasion combinator gives precedence 
example combinator queries returns suggestion 
combinator defers judgment second 
public class conjunction extends policy private policy private actions public conjunction policy policy actions new public return actions public suggestion query action suggestion query query return new suggestion return new suggestion return new suggestion return new suggestion public void finish suggestion sug object result boolean notify advice followed suggestion sa sug int sa length sa finish sa result conjunctive policy combinator suppose example want exempt local hosts warn policy 
way implement policy edit directly 
useful policy library may wish change semantics impact policies 
apply combinator combines policy policy 
effect combination determine trigger action connection local host 
action accepted accepts 
policy takes 
code create policy 
policy new new similar sort combinator dominates combinator follows suggestion conjunct conjunct considers trigger action security relevant 
follows suggestion second conjunct 
selectors selectors combinators choose enforce exactly 
classes selectors delayed selectors initially consult eventually start immediate selectors trigger action decide enforce 
delayed selector example combine policy allows access particular file gui methods policy allows access particular network gui methods 
resulting policy permits application run long executes gui methods allowed 
application invokes action permitted combinator chooses obey allows action 
immediate selectors useful possible determine delay enforced 
may want enforce policy example applications carry trusted digital signature 
accomplish applying immediate selector policies 
selector job verify target application signed enforce appropriate policy 
policy new new selectors reminiscent chinese wall security policy 
initially chinese wall access resources resources accessed unavailable 
selector chooses unavailable 
unary combinators unary combinators enforce single policy performing actions 
suppose example want enforce policy logging actions target application monitor 
shows hierarchy created applying unary combinator policy 
handles trigger actions blindly suggesting suggests finish method simply performs logging operation invoking finish method 
unary combinator controls policy ability monitor policies 
circumstances self monitoring policies cause loops prevent target program continuing example policy react action inserting action policy see react way 
easy write unary combinator prevent loops 
foreign code policy hierarchy 
combinators shown rectangles base policies ovals 
implementation principal requirement enforcing run time policies interested flow control running program passes monitor security relevant method executed 
strategies diverting control flow accomplish diverting call sites locations security relevant methods invoked diverting call targets actual method bodies security relevant methods 
diverting control flow call sites straightforward approach 
surface involve rewriting target application bytecode security relevant method invocations intercepted monitor 
code comprising running application includes class libraries application uses 
security relevant method invoked places code potentially necessary instrument large number call sites 
importantly order determine call sites rewrite perform relatively sophisticated static analysis general need determine precise method invoked dynamically 
reason dynamic checks decision monitor method behavior method subclasses arbitrarily different behavior sufficient instrument static type object 
consequently simpler efficient divert control flow method body security relevant method 
security mechanisms rely rewriting ensure possible ways invoking security relevant method guarded 
single way added guards claims security application 
tools rewrite java bytecode order secure struggle prevent presence java reflection mechanism 
reflection allows example methods invoked runtime names appear bytecode 
difficult statically ensure application behave correctly disabling reflection entirely rarely acceptable practice 
polymer suffer shortfall 
fact write polymer policy prevents target application reflection custom class loaders methods circumvent polymer 
policy analyze methods runtime able disallow calls breach security allowing legal ones 
policy viewed unary imposes restrictions certain reflective calls follows suggestions 
kind pre post invocation control flow modification bytecode implement polymer done tools aspectj 
accordingly considered aspectj insert bytecode hooks trigger monitor needed 
wanted retain precise control rewriting occurs able decisions best interests security primary focus aspect oriented languages aspectj 
apache api develop bytecode rewriting tool 
obstacles limitations custom class loaders modify bytecode executing technique 
ideally force untrusted applications loaded custom class loader modify bytecode necessary consult monitor executing security relevant methods 
standard java vms sun load number classes java io file java io loading client application 
classes reach custom class loader java io considered security relevant unacceptable 
strategies employed combat problem integrate class loader tightly java vm effect adding functionality system class loader rename core java classes target application ensure loaded class loader preprocess core java classes ensuring classes loaded system class loader hooks needed invoke monitor 
approach result cleaner system complicated implement obviously portable jvms 
second approach renaming core classes target application advantages simplicity portability unfortunately 
classes java lang object java lang throwable treated specially standard vms renamed loaded system class loader modified 
classes includes example java io java io renamed implementation strategy prevents enforcement useful policies 
third approach rewriting core classes preprocessing phase simple effective portable choice 
additional hurdle just time jit compilers assume particular methods perform particular functions 
jit compiler sun java sdk example assumes math sqrt calculates square root produces native code calculating square roots referring body math sqrt method 
divert control monitor instrumenting bodies security relevant methods optimization interacts poorly implementation 
regulate methods instrument bytecode call site fortunately methods math sqrt concern security policy writers 
similar difficulties occur methods treated specially sun probably vms 
sun vm initialize constructor object class example modified 
resists modifications object finalize object tostring class newinstance 
regulating methods outside scope current implementation 
performance instructive examine performance costs enforcing policies polymer 
concentrate making implementation efficient possible room improvement 
performance implementation shed light costs run time policy enforcement 
system impacts target applications phases loading application class libraries instrumented bytecode rewriter rw execution 
evaluate phase separately 
instrumentation polymer instruments core java class libraries separately non library code measured performance tasks independently 
total time instrument method standard java library packages methods classes java packages sun java api ms instrumented method 
cost reasonable library instrumentation needs performed time target application executed 
average time load non library classes jvm specialized class loader instrumenting methods ms twice long vm default class loader required 
addition loading penalty instrumenting method target class containing methods took ms ms method instrumented 
reason tests performed dell dual intel xeon ghz cpus gb ram running redhat linux 
times represent real time low average load 
performed test multiple times sets 
results shown average set lowest average removing outliers 
higher method cost test compared library instrumentation test target methods contained relatively parameters instrumenter loop parameter lists insert code wraps arguments primitive types objects sent monitor uniformly 
instrumentation timings form useful basis understanding approximate overhead polymer bytecode instrumentation process approximately ms penalty class polymer class loader addition ms method instrumented 
execution run time cost enforcing policies polymer falls categories cost passing control polymer processing body security relevant method cost determining security relevant action belongs set actions regulated top level policy cost reasoning policy method allowed disallowed potentially corrective action 
static cost incurred active policy reason current trigger action clearly depend details policy enforced 
tested impact regulating ability open socket java net int constructor 
results reveal chiefly static costs tested simplest policies 
base time open socket polymer involved class libraries target application instrumented polymer consulted ms class libraries application instrumented control passed polymer active policy regulating actions operation required ms class libraries instrumented active policy opening socket took ms passing control polymer requires couple extra method calls 
evaluating action takes longer cost depends entirely complexity policy enforced 
compared relatively long execution time int constructor overhead polymer test low 
situations method instrumented faster java io string constructor example executes roughly millisecond proportion time spent enforcing security policy greater 
related safe language platforms java virtual machine jvm common language runtime clr stack inspection basis program monitoring systems 
unfortunately stack inspection effective situations serious drawbacks 
stack inspection just algorithm implementing access control explained researchers algorithm inherently partial complete security system decisions entire history computation code impact current system state just current control stack 
second important flaw stack inspection model operations enable privileges perform access control checks scattered system libraries 
consequently order understand policy enforced read arbitrary amounts library code 
number researchers attempted improve software security developing domain specific languages specifying security properties 
primary point contact idea possible centralize security policy including specifications security checks placed addition security checks 
main new contributions respect projects insights security monitors may variety responses accept suppress insert halt application events security monitors may elevated class status explicitly manipulated composed 
demonstrate utility ideas showing develop structured security policies built library monitor combinators 
domain specific security policy languages inspired allow policies broken smaller parts mechanism parts put appear fully specified 
policy parts usually effects semantics policy unclear 
thesis develops security policy language provides include statements policies may broken multiple files 
specifies computational effects occur order appear text policy inclusions processed 
approach eliminates semantic ambiguity provide power flexibility language 
important difference language previous domain specific security policy languages building completely new language polymer extensions conservative rest java 
design decision number advantages 
gives programmers familiar java fewer concepts learn speeding adoption path product diminishing likelihood policy errors due language 
second ensures policy language full power application language 
power may required effectively manipulate constrain application 
third reduces chance dangerous semantic disconnect policy language application language 
semantic gap policy language application language semantics potential security hole 
monitor language viewed aspect oriented programming language style aspectj 
normally impossible general purpose aspect oriented language security untrusted application aspects disrupt subvert security code 
main high level difference previous fact aspects program monitors class values provide mechanisms allow programmers explicitly control composi tion aspects 
researchers describe functional opposed object oriented class aspect oriented advice 
support aspect combinators ones developed 
general composing aspects known problem hope ideas particularly idea aspects may class composable objects suggest new design strategy general purpose 
currently direct language theoretic model polymer programming language 
previous developed idealistic calculus functional program monitors built set combinators 
currently working defining formal semantics polymer extension featherweight java 
acknowledgments explaining difficulties instrumenting java library classes 
dawn song brent waters helpful comments earlier drafts 
abadi fournet 
access control execution history 
th annual network distributed system security symposium 
agesen freund mitchell 
adding type parameterization java language 
object oriented programing systems languages applications oopsla oct 
apache software foundation 
byte code engineering library 
jakarta apache org 
bauer appel felten 
mechanisms secure modular programming java 
software practice experience 
bauer walker 
enforceable security policies 
foundations computer security copenhagen denmark july 
bauer walker 
types effects non interfering program monitors 
international symposium software security tokyo japan 
brewer nash 
chinese wall security policy 
ieee symposium security privacy pages oakland may 
fradet 
enforcing trace properties program transformation 
seventh acm symposium principles programming languages pages boston jan 
acm press 
walker 
aspects information hiding modularity 
submitted publication nov 


inlined monitor approach security policy enforcement 
phd thesis cornell university nov 

schneider 
irm enforcement java stack inspection 
ieee symposium security privacy oakland ca may 
evans 
flexible policy directed code safety 
ieee security privacy oakland ca may 
fournet gordon 
stack inspection theory variants 
ninth acm symposium principles programming languages jan 
igarashi pierce wadler 
featherweight java 
acm conference object oriented programming systems languages applications pages denver aug 
kiczales hilsdale hugunin kersten palm griswold 
overview aspectj 
european conference object oriented programming 
springer verlag 
kim viswanathan ben abdallah kannan lee 
formally specified monitoring temporal properties 
european conference real time systems york uk june 
lee kannan kim viswanathan 
run time assurance formal specifications 
international conference parallel distributed processing techniques applications las vegas nv june 
bauer walker 
edit automata enforcement mechanisms run time security policies 
consideration international journal information security 
submitted dec revised may 
available princeton computer science department tr 
lindholm yellin 
java virtual machine specification 
addison wesley nd edition 
meijer gough 
technical overview common language infrastructure 
research microsoft com papers clr pdf 
schneider 
enforceable security policies 
acm transactions information systems security feb 
tucker krishnamurthi 
pointcuts advice higher order languages 
proceedings nd international conference aspect oriented software development pages 
wadler 
views way pattern matching cohabit data abstraction 
fourteenth acm symposium principles programming languages pages 
acm press jan 
walker zdancewic 
theory aspects 
acm international conference functional programming uppsala sweden aug 

