automatic remodularization optimized synthesis product families jia liu don batory department computer sciences university texas austin austin texas batory cs utexas edu 
product family suite integrated tools share common infrastructure 
program synthesis individual tools replicate common code leading unnecessarily large executables longer build times 
remodularization techniques optimize synthesis product families 
show tools automatically shared files identified extracted common package isomorphic class inheritance hierarchies merged single hierarchy 
doing substantially reduces cost program synthesis product family build times executable sizes 
case study product family tools totalling loc optimizations reduce archive size build times 
compositional programming automated software engineering essential software development 
arguably successful example relational query optimization 
query specified declarative domain specific language sql parser maps inefficient relational algebra expression expression optimized efficient query evaluation program generated optimized expression 
great example automatic programming transforming declarative specification efficient program compositional programming program synthesized composition algebraic operators 
research feature oriented programming fop explores feature modularity program synthesis 
believe fop generalizes paradigm exemplified compositional programming automated software development realized domain 
fop supports paradigm mapping declarative specifications users specify features want program actual implementation 
possible programs synthesized composing implementations required features 
novelty fop models software domains algebras feature operation 
particular programs synthesized compositions operations 
hallmark paradigm ability optimize algebraic representations programs identities relate domain operators 
joins distributivity project joins examples relational algebra 
demonstrate interesting example automatic algebraic optimization reasoning accomplish remodularization optimized synthesis product families 
product family suite integrated tools share common code base 
java integrated development environment ide example tools compiling documenting debugging visualizing java programs 
engineers perform tasks tools designed coded manually create implement design tool integrate design design tools minimize code replication 
paradigm automated software development achieves result similar way 
individual tools synthesized declarative specifications 
allows example multiple tools developed simultaneously implementations completely separate 
possible common code base tools replicated 
achieve optimized manual design common code replicated requires optimization breaks modular encapsulations synthesized tool identifies infrastructure shared tools factors common modules 
tools synthesized automatically post synthesis remodularization optimization done automatically 
optimizations tool applications automatically 
resembles common practice extracting shared classes common library efficient algebraic analysis brute force file comparisons 
second merges isomorphic class inheritance hierarchies single hierarchy delivers better results extracting shared classes 
optimizations substantially reduce size executables cost tool synthesis product family build times 
case study product family tools totalling loc 
optimizations reduce generation build times 
percentage reductions specific case study techniques general applicable product families arbitrary domains 
fop ahead ahead algebraic hierarchical equations application design realization fop step wise refinement domain algebras encapsulation :10.1.1.101.2752:10.1.1.101.2752
refinements algebras fundamental premise ahead programs constants refinements functions add features programs 
consider constants represent base programs different features program feature program feature refinement function takes program input produces refined feature augmented program output adds feature program adds feature program multi featured application equation corresponds refined base program 
different equations define family applications app app features app app features app app features features application determined inspecting equation 
ahead model domain model algebra operators constants functions 
set programs synthesized composing operators model product line 
encapsulation base program typically encapsulates multiple classes 
notation means program encapsulates classes new feature added program classes may change 
suppose refinement modifies classes adds class write encapsulates changes refinement denoted composes corresponding classes classes refined copied class program generated composing class 
illustrates law composition defines composition operator distributes encapsulation :10.1.1.101.2752:10.1.1.101.2752
tells synthesize classes program classes encapsulated features base programs refinements 
ahead tool suite ats ats product family implements ahead model 
ats source files written jak short jakarta language jak java extended refinement declarations metaprogramming state machines 
jak programs indistinguishable java programs express refinements state machines 
examples jak source shows class identical java representation 
shows refinement adds variable method gener class int void 
refines class int void 
class int int void 
void 

class definition refinement composition class refinement add new data members methods constructors class extend existing methods constructors 
composition denoted shown composition merges changes yielding updated class 
see details jak specifications :10.1.1.101.2752
general ahead constant encapsulates set classes 
ahead function encapsulates set classes class refinements ab 
ahead function refines existing classes add new classes subsequently refined 
ahead function typically encapsulates crosscut meaning encapsulates fragments refinements multiple classes 
composing ahead constants functions yields packages fully formed classes 
ahead deals cross cuts related aspect oriented programming 
explore relationship section 
ats core tools transform compose introspect jak files jak java translates jak file corresponding java file mixin different implementations composition operator jak files composed jak file provides code browsing capabilities 
tools fairly large sum individual sizes exceeds loc java 
ats bootstrapped ats tool ahead equation tool synthesized equation 
ahead synthesis process expands tool equation tool equated set expressions expression ei class tool encapsulates evaluating generates particular file target tool 
optimizing product families different tools members product family specified different feature sets tools share features share significant code base 
object oriented systems corresponds shared classes shared methods 
example tool synthesized ahead equation classes comprise tool common tool specific generated 
tools common class generated times 
result longer build times leads code duplication tool executables tool package classes replicated 
example ats tool performs operation composition translation introspection jak file 
means tool shares parser comprises classes 
ats tools share parse tree classes represented inheritance hierarchy syntax tree ast nodes 
parser inheritance hierarchy generated grammar jak language 
parser generation grammar known known algorithm synthesizing ast inheritance hierarchy 
consider rule rule rule rule rule 
grammars inheritance hierarchies shows grammar productions rule rule terminals 
inheritance hierarchy inferred 
production pattern mapped distinct ast class 
production pattern relations captured inheritance 
generated ast hierarchy corresponds single ahead feature shared tools 
classes bare bones methods data members allow asts printed edited 
classes subsequently refined new data members methods implement tool specific actions 
jak grammar rules inheritance hierarchy generated classes 
refinement classes identical jak tools different result different actions tool 
clearly redundancies increase generation time build time ats lead larger executables 
sections ways automatically eliminate redundancies 
shared class extraction sce common practice eliminate redundancies factor files tool specific tool shared common packages 
example ats tools domain knowledge tells common parser files manually extracted common package just files 
vast majority common classes reside various locations ast hierarchy files common depends tools considered 
brute force way identify common classes source files 
way recognize identical files files composed generated 
problem worse corresponding composed java files different package declarations diff utility file comparison ignore differences package names 
involves lot unnecessary 
ideally want procedure automatically identifies common files generated extracts common library 
knowledge design common parser needed optimization 
ideal achieved algebraic reasoning 
solution 
introduce operator compute common classes multiple tools common tn operator associative commutative meaning order tools applied matter tool ats defined set equations equation artifact jak file grammar file tool encapsulates 
suppose tools encapsulate files suppose equations files equations files generating files conclude definitions files different tools equations differ 
hand file equations identical reasoning file identical 
files shared placed shared package 
common effect comparing specifications files test file equality files 
efficiency doing significant equational specifications short bytes simple string matching sufficient test equality 
contrast files represent expensive generate long bytes simple string matching inefficient 
algorithm called shared class extraction sce finds common equations arbitrary set tools 
maps set packages package tool set packages package tool plus common package sce common common common common 
common set difference operator 
course variations algorithm 
file example shared input packages 
study additional savings variants worth complexity 

package names implicit ahead specifications 
sce optimization produces results file terms code archives 
sce efficient generated files identifies common files comparing file equations 
section experimental results comparison file sce optimization 
worth noting sce optimization rely fact ahead tools built 
sce algorithm imposes interpretation equations means able optimize synthesis arbitrary product families arbitrary domains 
holds optimization 
merging class hierarchies mch sophisticated optimization relies knowledge ats tools variants common design 
tools built common parser single ast class hierarchy 
class hierarchy form class typical extends 
common methods variables specific methods variables mixin specific methods variables 
class set common methods variables traversing editing asts plus methods variables specific tool 
design choice ats tools developed manually 
typical fop designs generate distinct class hierarchies tool composing corresponding features 
result common methods variables replicated class hierarchy consequently common code shared generated tools 
section show design realized tool suite optimized automatically algebraic reasoning 
consider general problem 
tools tn want operator merges designs single tool tn union capabilities individual tool tn tn tn essence features tools merged 
common class extraction operator merge operator associative commutative distributes encapsulation 
merge tools merge corresponding artifacts tool specific artifacts just copied special case 
example 
consider merge jak java mixin tools 
class hierarchies synthesized jak java mixin depicted 
typical rule common methods reduce java common methods reduce java common methods reduce java class jak java set common methods plus reduce java method translate reduce ast jak ast java 
typical class mixin tool common methods 
compose method compose asts different jak files 
result jak java mixin class hierarchy class union methods corresponding classes tool 
merging limited classes ast hierarchy classes tools participate 
parser classes example belong ast hierarchy merged 
parser classes tools identical simply copied merged tool 
explain class inheritance hierarchies merged 
consider issues similar assumptions ernst snelting tip studied semantic issues merging class inheritance hierarchies prior 
conflict freedom classes merged single class agree contents variables methods constructors share 
equivalently classes merged different definitions shared variable method constructor 
property classes merged called conflict freedom static non interference 
general ahead sets conflict free agree specifications artifacts share 
consider sets rule common methods reduce java common methods reduce java jak java hierarchy rule common methods compose common methods compose common methods compose rule common methods compose common methods compose common methods reduce java compose rule common methods reduce java compose sets conflict free share artifact definitions 
sets conflict share artifact different definitions different 
similarly sets conflict 
common differ 
common methods reduce java compose rule mixin hierarchy composite hierarchy 
tool specific merged class inheritance hierarchies common methods reduce java compose common methods reduce java compose automatically deduce classes conflict free way 
tool merged defined set equations equation jak class synthesize 
previous page defined equation class tool corresponding equation tool class class refinement encapsulates set members 
suppose encapsulates members encapsulates law composition expand equations synthesize class specifications tool tool class tool data members methods class tool data members methods specifications see conflict tools differ definitions member means specifications classes merged classes placed tool specific packages 
specifications merged merge place merged class shared package 
reflection 
java reflection mechanism allows programs various kinds retrieve name object class determine number methods class 
reflection ats tools merged classes reflection may execute differently merge 
easy solution rewriting existing code case case basis deemed necessary 
approach user specify classes reflection listing configuration file classes merged placed tool specific packages 
discuss merge specifications section 
merge operator suppose equations class tools shown expanded conflict tool tool merge equations 

compare source code method data member definitions 
means definition member file assume merge operator exploits fact equations conflict integrates equations preserving partial order relationships individual equations 
example equations show refinements 
indicates partial order relationship class refinements 
merge partial orders yields partial order 
merge operator generates equation contains term input preserves order imposed equation 
order specified particular pair elements permutations legal 
equations produce equivalent output correctness merge comes directly specification 
conflict different refinements class different tools orthogonal affect order composition matter 
merging class specifications correct long compositional ordering equation preserved 
result common files merged conflicts appear merged result appear tool specific packages packages common synthesized 
tools merged remains shown merged code type correct merged tool behavior counterpart 
demonstrate type correctness semantic equality merged tools appendix 

true ats tools tools imagine 
cycle created merge indicate cycle eliminated permuting features changing tool semantics fundamental error design domain model 
encountered easy fix 
case merge equations fail just equations recognized conflict 
experiments applied optimizations synthesis ats tools described earlier 
currently size tools loc 
experiments desktop computer intel pentium iii mhz microprocessor mb main memory running microsoft windows java sdk 
table shows number classes lines code loc archive size ats tool 
loc measurement calculated java source code tool archive size obtained generated java jar files 
original build optimizations package compiled tool 
table demonstrates results shared class extraction optimization 
rows summarize tool specific package row shared package 
nearly classes tool shared 
factoring classes common package reduces volume code executables 
table lists corresponding results merging class hierarchy optimization 
conflict free classes merged shared package leaves conflicting classes tool specific package 
conflicts ats tools rare classes tool including dynamic interferences discussed appendix conflict 
yields greater reductions code archive volume 
note table package classes loc archive kb jak java mixin total table 
product family statistics optimization package classes loc archive kb jak java mixin shared total table 
product family statistics sce optimization package classes loc archive kb jak java mixin shared total table 
product family statistics mch optimization table number classes tool specific package plus shared package slightly larger original tool package shown table 
example table total number jak java classes shared classes original jak java package classes table shows 
classes needed tools factored sce merged mch optimization processes 
table illustrates times unoptimized optimized builds include overhead optimizations 
shows brute force method find common files generated files diff 
unoptimized build class composed featured source compiled packaged jar files 
brute force reduces build times 
sce eliminates need unnecessary file generation reduces build times 
comparing file specifications takes seconds file mch better performance reduces build times 
related build time original diff sce mch optimize compose compile jar total table 
build time comparisons topics relevant composing class hierarchies demand modularization aop 
composing class hierarchies refining class hierarchy equivalent hierarchy composition 
ahead hyper aspectj tools compose class hierarchies 
papers address semantic issues hierarchy composition 
snelting tip algorithms merging arbitrary class hierarchies 
subproblem addressed basic differences 
known implementation algorithms 
second inheritance hierarchies merge isomorphic design 
mentioned earlier features composed ahead implementation conforms master design achieve practical form interoperability composability 
pragmatic design constraints features designed composable won arbitrarily difficult problems may ensue 
variation architectural mismatch problem 
third algorithm requires assumptions equivalence methods different hierarchies deduce information automatically equational specifications 
representations lead practical specifications program relationships 
fourth means semantic equivalence achieved requires verifying method call original merged tools invoke method 
tools number classes tool number methods class number calls method cost algorithm verify behavioral equivalence 
achieve effect comparing method signatures class test dynamic interference algorithm faster conservative 
ernst considered related problem merging reordering mixins 
mixins approximate class refinements primary difference refinements add refine existing constructors mixins 
ernst defines mixins composed compositions mixins merged 
technique merging compositions preserving partial orderings compositions just 
concept composition implicit merging explicit operator glue mixins 
composition merge different operators interchangeable 
model general 
demand remodularization ossher tarr recognize motivate need demand remodularization odm advocates ability translate different 
hyper ahead tools odm published results case studies topic 
mezini ostermann proposed language constructs called collaboration interfaces mix match components dynamically 
approach object objects fulfill contracts specified collaboration interfaces bound 
loose couplings implementations interfaces allow collaborations reused independently 
purpose remodularization meet needs different client programs contrast optimize program synthesis 
defines architecture starts minimal functional core selectively integrates extensions add new features system 
feature implemented wrapper composed incrementally run time 
dynamic remodularization supported context sensitive selection collaboration basis enabling client specific customizations systems 
composes features done statically ahead equations algebraically optimized 
packages automatically extracting common files shared package eliminating redundancy improving system build times 
similar result described tip java packages automatically optimized compressed compaction class inheritance hierarchies elimination dead code 
allows user specify reflection occurs corresponding classes may properly handled avoid errors 
different split class inheritance hierarchies multiple packages order optimize program achieve size build time 
aspect oriented programming ahead refinements long history originating collaboration designs implementations mixins mixin layers see relevant 
encapsulate cross cuts concept popularized aspect oriented programming aop 
differences aop ahead 
concept refinement ahead predecessor genvoca virtually identical extending object oriented frameworks 
adding feature oo framework requires certain methods classes extended 
ahead takes idea logical having different levels abstraction classes concrete class extensions ahead allows arbitrary numbers levels level implements particular feature refinement :10.1.1.101.2752
second starting points ahead aop differ product lines consequence pre planned designs refinements designed composable part standard aop paradigm 
third novelty power aop quantification 
quantification specification advice inserted locations refinements applied 
quantification ahead different traditional oo frameworks 
synthesis efficient software declarative specifications increasingly important 
successful example paradigm relational query optimization 
replicating paradigm domains exploring capabilities essence research 
focused key aspect paradigm optimization algebraic representations programs 
showed algebraic representations tools product family automatically refactored shared infrastructure need replicated 
optimizations synthesized tool packages extracting shared files merging class hierarchies 
optimizations examples equational reasoning defined algebraically automatic required minimal domain knowledge 
optimizations efficient practical cases improved algorithms previously existed 
case study product family tools achieved reduction build times archive size 
believe results contribute evidence algebraic representations programs coupled algebraic reasoning powerful way express software designs manipulate automatically 

jacob kurt william cook mark helpful comments earlier drafts 
batory scaling step wise refinement ieee transactions software engineering june :10.1.1.101.2752
batory liu refinements multi dimensional separation concerns acm sigsoft esec fse 
batory road utopia generative programming 
keynote presentation dagstuhl domain specific program generation march 
ernst propagating class method combination ecoop 
garlan allen architectural mismatch hard build systems existing parts icse 
kiczales hilsdale hugunin kirsten palm griswold 
overview aspectj ecoop 
ossher tarr need demand remodularization position aspects dimensions concern workshop ecoop 
mezini ostermann 
integrating independent components demand remodularization proceedings oopsla 
smaragdakis batory mixin layers object oriented implementation technique refinements collaboration designs acm march 
snelting tip semantics composition class hierarchies ecoop 
snelting personal communication 
tip sweeney streeter 
practical experience application extractor java proceedings oopsla pages november 
jrgensen 
dynamic selective combination extensions component applications 
proceedings rd international conference software engineering icse toronto canada may 
agesen 
concrete type inference delivering object oriented applications 
ph thesis stanford university 
appendix appendix demonstrates type correctness semantic equality merged tools 
static type correctness simple 
ats tools variants master design 
design defines set class hierarchies ahead refinements add members existing classes add new classes bottom level leaves pre defined hierarchies 
changing superclass relationships inheritance hierarchies permitted deleting classes 
inheritance hierarchies tool prior merging remain merging 
similarly methods deleted set method signatures class prior merging 
objects created tool type merged tool methods tool merged tool 
tool type correct corresponding code merged tool type correct 
proving behavioral equivalence merged tools difficult 
general problem undecidable snelting tip shown merging class hierarchies behavior equivalence checked static analysis dynamic interference 
verify tools merging dynamic interference requires show define methods way invoke methods order 
method definitions 
problematic scenario program class inherits method superclass merging method overridden 
illustrates class hierarchy merging method foo inherited class 
merging different version foo inserted class overrides inherited method 
class void foo 
class extends void main new foo class void foo 
class extends void main new foo void foo 

method overridden class composition variant allows propagate contents class ancestors subclasses 
shows hierarchy classes members locally encapsulate 
shows contents class encapsulation propagation 
note method refinement example extends original method performing task intermixed super call 
determine variables methods class tool merged tool specifications tracing back inheritance chains 
denote class tool denote corresponding class merged tool 
conflict know includes variables methods defines way 
performing test classes original tools prove methods original tools defined way merged tool 
methods called 
need prove methods called 
consider class hierarchy 
main method executed foo method invoked 
consider addition special 
propagating contents hierarchy class void foo 
class extends void main new foo class void foo 
class extends void main new foo void foo 

problem method specialization ized foo method 
main executed foo called 
example original methods run time different specialized method invoked leading different behavior 
problem ambiguous method invocations 
detect problem return members computed class ci cm 
simple names denote class member actual name member type signature 
comparing type signatures methods tell method specialization 
method set difference cm ci methods merged class members original class specialization method ci ambiguous invocation possible 
optimization process potential ambiguous invocations detected corresponding classes merged put tool specific packages 
assuring methods original tools defined way merged tool ambiguous method invocations possible guarantee absence dynamic interference behavior equivalence merged tools 
