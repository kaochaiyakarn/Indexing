ensuring required failure atomicity composite web services sami loria inria bp les nancy cedex france loria fr evolution internet driven web services technology extending role web support information interaction middleware interactions 
web services technology allows enterprises outsource parts business processes web services 
provides opportunity dynamically offer new value added services composition pre existing web services 
spite growing interest web services current technologies lacking efficient transactional support composite web services css 
propose transactional approach ensure failure atomicity cs required partners 
accepted termination states ats property mean express required failure atomicity 
partners specify cs mainly control flow required ats 
set transactional rules assist designers compose valid cs regards specified ats 
categories subject descriptors information storage retrieval online information services web services database management systems transaction processing computers society electronic commerce distributed commercial transactions general terms design reliability keywords reliable web services compositions failure atomicity transactional models 
web services emerging promising technology automating interactions 
nowadays enterprises copyright held international world wide web conference committee iw 
distribution papers limited classroom personal 
www may chiba japan 
acm 
olivier perrin loria inria bp les nancy cedex france loria fr claude loria inria bp les nancy cedex france loria fr able outsource internal business processes services accessible web 
dynamically combine individual services provide new value added services 
main problem remains ensure correct composition reliable execution composite service cs regards partners transactional requirements 
despite growing interest web services middleware primitive terms functionality far current eai middleware provide intra enterprise applications 
current web services technologies ensure communication interoperability part problem considering building reliable web services compositions 
activities traditional workflows services defined independently computing context 
task building composite web services requires mechanisms deal inherent autonomy heterogeneity web services 
powerful advanced transaction models atms lacking functionality performance applications involve dynamic composition heterogenous services peer peer context 
limitations come mainly inflexibility incorporate different transactional semantics different interactions patterns structured transaction 
propose transactional approach reliable web services compositions ensuring failure atomicity required designers 
transactional point view consider cs structured transaction web services sub transactions interactions inter sub transactions dependencies 
accepted termination states ats property correctness criteria relax atomicity 
best knowledge defining transaction particular set properties ats ensuring execution preserve properties remains difficult open problem :10.1.1.43.3839
organized follows 
section introduces motivating example gives main points driven approach 
section explain notion transactional web service show express transactional properties 
section presents notion transactional composite web service tcs explains transactional point view 
section presents notion accepted termination states ats mean express required failure atomicity 
section illustrates approach proceeds set transactional rules assist designers compose valid 
section discuss related 
section concludes 

motivating example methodology motivating example 
consider application dedicated online purchase personal computer 
application carried composite service illustrated 
services involved application customer requirements specification crs service receive customer order review customer requirements order items oi service order computer components online store payment credit card pcc service guarantee payment credit card computer assembly ca service ensure computer assembly payment done required components available deliver computer dc service deliver computer customer provided dcf ed tnt dct nt 
composite service online computer purchase 
user designs composite service expects service execution reliable 
means particularly pays attention failure handling 
example designer may want sure delivery services succeed service ca sure complete possible service oi undo effects instance payment fails 
properties define call transactional behavior service 
behavior specified set transactional requirements 
requirements may vary context transactional behavior vary 
instance designer may accept failure dcf ed service context may tolerate failure advanced stage 
mean reliable execution tightly related transactional requirements may vary designers 
time order ensure reliable execution sure specified transactional behavior consistent set selected services transactional requirements 
back example easily notice oi service sure complete payment service pcc compensatable compensated oi service fails 
points introduce approach concepts supporting kind scenarios 
believe enhance web services de scription better characterization transactional behavior 
done enhancing wsdl interface transactional properties 
second model services composition choreography particular mechanisms failure handling recovery 
third provide designers mean express transactional requirements particular required failure atomicity level 
support composite service validation regards designers requirements 
rest detail issues especially set transactional management rules composite service validation 

transactional web service description web service self contained modular program discovered invoked internet 
web services typically built xml soap wsdl uddi specifications 
transactional web service web service emphasizes transactional properties characterization correct usage 
main transactional properties web service considering retriable compensatable pivot 
service said retriable sure complete finite activations 
said compensatable offers compensation policies semantically undo effects 
said pivot successfully completes effects remains semantically undone 
naturally service combine properties set possible combinations cp cp 
order model internal behavior service adopted states transitions model 
service minimal set states initial active aborted cancelled failed completed includes set transitions activate abort cancel fail complete 
shows internal states transitions diagram pivot service 
service instantiated state instance initial 
instance aborted activated 
active instance normally continues execution cancelled execution 
case achieve objective successfully completes fail 
requested transactional properties expressed extending service states transitions 
instance compensatable service new state compensated new transition compensate introduced service 
illustrates states transitions diagram retriable service states transitions diagrams services combining different transactional properties figures 
transactional service distinguish external internal transitions 
external transitions fired external entities 
typically allow service interact outside specify composite services see section 
external transitions considering activate abort cancel compensate 
internal transitions fired service ser services states transitions diagrams different transactional properties 
vice agent 
internal transitions considering complete fail retry 

composition transactional web services composite web service existing web services working tandem offer new value added service 
coordinates set services cohesive unit achieve common goals 
transactional composite web service tcs emphasizes transactional properties composition synchronization component web services 
takes advantage services transactional properties specify mechanisms failure handling recovery 
dependencies services tcs defines services orchestration specifying dependencies services 
specify services coupled behavior certain service influence behavior service 
definition dependency 
dependency exists transition fire external transition 
dependency defines external transition service precondition enforced transition fired 
approach consider dependencies services activation dependency activation dependency completion fire activation 
tailor activation dependencies services specifying activation condition service defines precondition enforced service activated completion service 
activation dependency iff completed 
reciprocally service activation dependency 
example composite services defined define activation dependency oi cc ca ca activated completion oi cc 
means ca oi completed cc completed 
alternative dependency alternative dependency failure fire activation 
tailor alternative dependencies services specifying alternative condition service defines precondition enforced service activated alternative service 
alternative dependency iff failed 
reciprocally service alternative dependency instance composite service cs defines alternative dependency dcf ed dct nt dct nt activated dcf ed fails 
means dct nt dcf ed failed 
abortion dependency abortion dependency failure cancellation abortion fire abortion 
tailor abortion dependencies services specifying abortion condition service defines precondition enforced service aborted 
abortion dependency iff aborted failed cancelled 
reciprocally service abortion dependency 
compensation dependency composite services defined skeleton 
compensation dependency failure compensation fire compensation 
tailor compensation dependencies services specifying compensation condition service defines precondition enforced service compensated 
compensation dependency iff failed compensated 
reciprocally service compensation dependency 
composite services define compensation dependency cc oi oi compensated cc fails 
means oi pcc failed 
cancellation dependency cancellation dependency failure fire cancellation 
tailor cancellation dependencies services specifying cancellation condition service defines precondition enforced service cancelled 
cancellation dependency iff failed 
reciprocally service cancellation dependency 
composite services define cancellation dependency cc oi oi cancelled cc fails 
means oi cc failed 
clarity reasons deal abortion dependencies 
call transactional dependencies compensation cancellation alternative dependencies 
relations dependencies dependencies specification respect semantic restrictions 
transactional dependencies depend activation dependencies relations abortion dependency exist activation dependency 
compensation dependency exist activation dependency execute parallel synchronized 
cancellation dependency exist execute parallel synchronized 
alternative dependency exist exclusive 
section shows relations define potential dependencies induced activation dependencies 
control transactional flow tcs transactional composite service distinguish tcs control flow tcs transactional flow 
control flow control flow skeleton tcs specifies partial ordering component services activations 
activation dependencies component services define corresponding tcs control flow 
workflow patterns define composite service skeleton 
defined pattern abstraction concrete form keeps recurring specific non arbitrary contexts 
workflow pattern seen description recurrent class interactions primitive activation dependency 
example join pattern see describes services choreography specifying services interactions service activated completion services 
example illustrates tcs skeleton defined split join xor split patterns 
transactional flow transactional flow tcs specifies mechanisms failures handling recovery 
transactional dependencies compensation cancellation alternative define tcs transactional flow 
pattern potential dependencies defined skeleton 
tcs adopts activation dependencies defined skeleton patterns may extend specifying additional transactional dependencies 
example shows cs cs defined skeleton 
adopts skeleton refines additional transactional flow 
additional transactional dependencies subset potential transactional dependencies defined skeleton patterns 
pattern defines addition default activation dependencies set potential transactional dependencies 
potential dependency dependency initially defined pattern added pattern 
potential dependencies directly related pattern activation dependencies relations introduced section 
shown dependencies services tailored specifying preconditions services external transitions 
potential transactional dependencies exception fact 
tcs skeleton defines service potential conditions corresponding potential dependencies 
pattern defines service connected potential compensation condition potential alternative condition potential cancellation condition 
write conditions exclusive disjunctive normal form 
instance write potential compensation condition service follows 
potential compensation condition example tcs skeleton illustrated uses join pattern define activation dependencies services oi cc ca 
relation section tcs skeleton eventually specifies compensation dependencies oi cc cc oi ca oi ca cc 
similarly relation pattern defines potential cancellation dependencies oi cc cc oi 
means pcc oi failed ca failed ca compensated oi pcc failed 
way relation pattern connecting ca dcf ed dct nt defines potential alternative dependencies dct nt dcf ed dcf ed dct nt means dct nt dcf ed failed dct nt failed dcf ed 
note cs cs define transactional flow subset potential transactional flow 
define compensation cancellation dependencies cc oi 
cs defines alternative dependency dcf ed dct nt 
failure atomicity requirements tcs executions instantiated tcs 
state instance tcs composed services tuple xn xi state service si time 
set termination states tcs cs st cs set possible termination states instances 
back motivating example limited services crs oi cc set termination states crs completed oi completed pcc completed crs completed oi failed pcc completed crs completed oi completed pcc failed crs compensated oi failed pcc initial crs compensated oi initial pcc failed crs compensated oi failed pcc failed 
order express designer requirements failure atomicity notion accepted termination states :10.1.1.43.3839
word concept ats represents notion correction 
definition accepted termination states 
accepted termination state ats composite service cs state designers accept termination cs 
define set accepted termination states required designers 
execution correct iff leads cs accepted termination state 
cs reaches ats completes successfully ii fails undoes undesirable effects partial execution accordance designer failure atomicity requirements :10.1.1.43.3839
back example designer may choose ats ats cs crs completed oi completed pcc completed crs compensated oi failed pcc failed means execution correct services complete crs compensated failure oi cc 
obviously note composite service transactional behavior may vary required ats 

transactional rules explain rules illustrate working go back motivating example personal computer online purchase 
suppose addition designers specify illustrated express required failure atomicity 
intuitively execution composite service generate various termination states 
composite service valid exists termination states belong ats specified designers 
definition validity 
cs cs said valid iff set termination states included written st cs example composite service cs illustrated valid st cs regarding composite service cs illustrated initial tcs definition designers transactional properties computing computer valid tcs composition pick services engine dynamically ensures compliance generated transactional properties compute ensure compose pattern select new services specify new additional dependencies extend pattern additional dependencies transactional validity rules transactional properties appropriate transactional behavior valid initial tcs valid ats completed execution engine specify required ats execution tcs appropriate transactional behavior objective overview approach 
ats example pc online purchase 
note st cs contains termination state crs completed oi failed cc completed ca aborted dcf ed aborted dct nt aborted accepted termination state 
cs valid 
objective overview illustrated approach applies topdown manner 
definition initial tcs designers dynamically choose available services combine offer new value added service 
compose new service set interactions patterns sequence join 
augment skeleton new dependencies selected potential dependencies 
express required failure atomicity specifying required ats 
compute validity transactional properties set rules independent skeletons designers ats compute tcs skeleton required ats set transactional properties 
transactional properties tailor appropriate transactional behavior valid 
tcs satisfy transactional properties valid 
definition valid tcs initial tcs valid designers select new services eventually new transactional properties ii augment skeleton new dependencies 
phase engine assist designers compose valid tcs respecting generated transactional properties 
valid tcs reached deployed executed 
extracting services conditions tailoring appropriate transactional behavior valid composite services equivalent identify appropriate algorithm extracting ats compensation conditions service specified ats tcs skeleton 
dependencies services 
deduce specified tcs skeleton services conditions corresponding dependencies 
service distinguish compensation condition deduced ii cancellation condition deduced iii alternative condition deduced explain deduce conditions 
algorithm allows extract ats compensation condition service composite service skeleton required ats 
principle potential compensation condition compensation condition satisfied ats state ats compensated 
proceed similarly deduce alternative cancellation conditions service 
instance example potential compensation condition cc oi failed compensation condition satisfied ats state cc compensated 
ats ats cc compensated deduce cc oi failed 
similarly extract cancellation condition oi 
ats ats oi cancelled 
furthermore potential cancellation condition oi cc failed satisfied ats 
deduce cc failed 
deduce way ats dct nt dct nt dcf ed failed 
important note ats specified designers consistent pattern semantics 
ats consistent satisfies conditions 
ats formed 
ats formed exists service potential activation conditions corresponding state ats satisfied ats 
easily modify previous algorithm detect exists formed ats second set ats consistent 
inconsistency detected generation transactional properties ensuring css validity 
instance termination state limited services oi cc ca ts oi completed pcc compensated ca aborted note service cc potential conditions oi failed ca failed ca compensated satisfied ts 
deduce ts formed 
illustrate ats inconsistency consider ats ats oi completed pcc completed ca completed ats oi completed pcc failed ca aborted ats oi compensated pcc failed ca aborted 
note ats ats contradictory service oi completed ats compensated ats condition cc failed ca aborted 
ats consistent ats formed 
transactional validity rules defines accepted termination states component service 
denote set accepted termination states component service regarding illustrative example deduce instance ats pcc completed failed compensated ats ca completed aborted 
introduce validity rules generate transactional properties ensure validity suppose means eventually true component service tcs 
failed generate transactional property retriable 
compensated generate transactional property need compensatable 
generate transactional property cpi compensatable 

generate transactional property cli 

generate transactional property ati 
rule postulates state failed belong exists transactional property saying retriable 
second rule postulates state compensated belong exists transactional property saying need compensatable 
third rule postulates ats compensation condition exists transactional property saying condition eventually true compensatable compensation condition means add compensation dependency 
fourth rule postulates ats cancellation condition exists transactional property saying condition eventually true cancellation condition means add cancellation dependency 
fifth rule postulates ats alternative condition exists transactional property saying condition eventually true alternative condition means add alternative dependency 
example back example compute fol lowing transactional properties pv tp tp crs tp ca tp dc nt tp ca tp dc ed tp cp cc tp cp oi tp cl oi crs tp dc nt tp dc nt applying rule state failed belong crs get transactional property tp crs crs retriable 
similarly compute transactional properties tp ca ca retriable tp dc nt dct nt retriable 
applying second rule state compensated belong ca get transactional property tp ca need ca compensatable 
similarly compute fol lowing transactional properties tp crs tp dc nt tp dc ed need crs dct nt dcf ed compensatable 
applying third rule pcc oi failed get transactional property tp cp cc oi failed means oi retriable cc compensatable cc compensated oi fails 
applying third rule oi pcc failed get transactional property tp cp oi cc failed means cc retriable oi compensatable oi compensated cc fails 
applying fourth rule oi pcc failed get transactional property tp cl oi cc failed means cc retriable oi cancelled cc fails 
applying fifth rule dcf ed failed dct nt get transactional property tp cc dcf ed failed means dcf ed retriable dct nt activated dcf ed fails 
composite service cs verifies validity rules valid 
composite service cs verifies validity rules cp cc rule 
rule postulates compensation condition cc failure oi eventually true case cs cc compensatable compensated oi fails case cs 
composite service cs respects rule oi sure complete fails 
validity rules proof lemma proof shown due lack space 
lemma tcs termination state ts accepted termination state iff service termination state ts ats potential conditions corresponding state ts satisfied ts 
proving cs satisfies validity rules cs valid equivalent proof cs valid rule thats cs satisfy rule 
cs valid means valid termination state 
means lemma exists service terminates valid state exists service terminates valid state satisfying ats conditions corresponding termination state 
means cs verify validity rules 
means cs verify validity rules 
cs verify validity rules exists service terminate non valid termination state 
cs verify validity rules exists service terminate valid state satisfying corresponding ats conditions 
means lemma cs valid 
implementation currently developing prototype supports 
prototype written java 
part prototype transactional engine 
allows user select services transactional properties define tcs skeleton patterns specify required ats 
engine uses transactional rules compute appropriate transactional properties valid 
assists designers compose valid tcs respecting transactional properties 
window shows designers choose services web services scroll panel 
typically shows transactional properties chosen service 
screen shot illustrating application transactional approach 
window illustrates designers specify tcs skeleton patterns operators panel 
window illustrates transactional engine computes appropriate transactional properties required ats 
second part prototype workflow engine able execute composite service 
workflow engine bonita workflow engine supported object web consortium 
bonita cooperative workflow system supporting specification execution monitoring coordination processes 
main features bonita third generation workflow engine parameterized activity model web interface control workflow processes accessing workflow methods ee web services implementation ee enterprise java beans possibility execute code server side different events start cancel activities means hooks hooks instance java programs may assigned process node events availability graphical user interface design control workflow processes java jfc swing 
course concern interesting feature related ability define specific model services including transactional states 

related advanced transaction models atms proposed support new database applications relaxing transaction isolation atomicity better match new requirements 
workflows past services composition requirements exceed significantly differ atms terms modelling coordination transactional requirements 
limitations come mainly inflexibility incorporate different transactional semantics different behavioral patterns structured transaction 
overcome tions proposed transactional workflows system supporting multitask activities different tasks may different execution behaviors properties application user defined coordination different tasks application user defined failure execution atomicity supported :10.1.1.43.3839
approach failure atomicity requirement defined specifying set ats 
unfortunately transaction management support provided ensure correctness criteria 
accepted termination states mean relax atomicity discussed previous works 
fact ats property implicitly included transactional models 
example atomicity property implicitly defines ats traditional transactions success state correct failure state 
advanced transaction model specifies global transaction structure sub transactions properties inter sub transaction dependencies mechanisms handing success failure criteria implicitly defines ats 
way define rules form defined flexible transaction implicitly define appropriate ats flexible transaction model 
emerging standards ws transaction ws ws ws acid bp lra define models support phase coordination web services 
proposals set extended transactional models specify coordinations services 
participants agree specific model starting interactions 
corresponding coordination layer technologies support appropriate messages exchange chosen transactional model 
propositions inherit extended transactional models rigidity 
problem transactional interoperability services implemented different approaches 
approach complement efforts overcome gaps 
approach allows reliable complex flexible compositions 
addition coordinate services implemented different technologies services transactional features interested implemented 
approach specify flexible reliable composite services component services implemented technologies 
valid tcs reached considered coordination protocol plugged existing coordination technology executed 

proposed transactional approach reliable web services compositions ensuring failure atomicity required designers 
contrary atms approach follows opposite direction starting designers requirements provide correctness rules 
transactions designers define global composite service structure patterns specifies required ats correctness criteria 
set transactional rules assist designers compose valid cs regards specified ats 
main contribution approach able incorporate different interactions patterns structured transaction validate css designers transactional requirements 
acknowledgment laura lozano implementation efforts 

ansari ness rusinkiewicz sheth 
flexible transactions support multi system telecommunication applications 
proc 
th vldb conference august 
benatallah 
web service conversation modeling cornerstone business automation 
ieee internet computing january february 
web services transaction management ws version 
fujitsu iona oracle sun july 
curbera nagy weerawarana 
unraveling web services web soap wsdl uddi 
ieee internet computing march april 
elmagarmid leu litwin rusinkiewicz 
multidatabase transaction model 
proc 
th vldb conference brisbane australia 
elmagarmid ed 
transaction models advanced database applications 
morgan kaufmann 
gamma helm johnson vlissides 
design patterns elements reusable object oriented software 
addison wesley reading massachusetts 
christodoulakis 
unified transaction modeling language 
third international conference web information systems engineering wise ieee computer society december 
krishnakumar sheth 
managing heterogenous multi system tasks support enterprise wide operations 
distributed parallel databases 
kluwer academic publishers 
web services coordination ws coordination 
bea ibm microsoft 
web services atomic transaction ws 
bea ibm microsoft 
web services business activity framework ws 
bea ibm microsoft 
medjahed benatallah bouguettaya ngu elmagarmid 
business business interactions issues enabling technologies 
vldb journal international journal large data bases april 
mehrotra rastogi silberschatz korth 
transaction model multidatabase systems 
proceedings th international conference distributed computing systems icdcs yokohama japan ieee computer society press june 
oasis committee specification 
business transaction protocol version june 

framework specifying coordinating reliable web services compositions 
technical report es federal university rio de janeiro brazil april 

building reliable web services compositions 
web web services database systems lncs springer 
rusinkiewicz sheth :10.1.1.43.3839
specification execution transactional workflows 
modern database systems object model interoperability kim ed acm press addison wesley 
schuldt alonso beeri schek 
atomicity isolation transactional processes 
acm transactions database systems march 
vald 
bonita workflow cooperative system 
consortium bonita org 
van der aalst ter hofstede kiepuszewski barros 
advanced workflow patterns 
th international conference cooperative information systems coopis lncs 
springer verlag berlin 
sheth 
transactions transactional workflows 
advanced transaction models architectures jajodia kerschberg eds chapter pages 
kluwer academic publishers 
zhang nodine bhargava 
ensuring relaxed atomicity flexible transactions multidatabase systems 
proc 
acm sigmod international conference management data 
