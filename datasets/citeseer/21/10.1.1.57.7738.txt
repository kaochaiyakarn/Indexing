fully complete minimal models simply typed calculus samson abramsky marina oxford university computing laboratory wolfson building parks road ox qd england 
mail samson abramsky comlab ox ac uk dipartimento di matematica informatica universit di udine delle scienze udine italy 
mail dimi 

show build fully complete model maximal theory simply typed calculus ground constants obtained linear realizability ane combinatory algebra partial involutions natural numbers natural numbers 
give details construction fully complete model extended ground permutations 
fully complete minimal model obtained carrying previous construction suitable subalgebra partial involutions 
full completeness result put order prove simple results maximal theory 
categorical model type theory logic said fully complete aj types formulae morphisms interpretation interpretation denotations proof term entailment interpretation function category syntactical objects category denotations full 
notion counterpart notion full abstraction programming languages 
fully complete model indicates tight connection syntax semantics 
equivalently say term model mathematically respectable structure 
past decade game semantics successfully various people de ne fully complete models various fragments linear logic give fully models programming languages including pcf functional non functional languages 
new technique called linear realizability see proposed valid complex alternative game semantics providing fully complete fully models 
particular technique de ne model fully complete fragment system consisting partially supported tmr linear ct 
ml polymorphic types provide fully complete model pcf 
linear linear ane realizability technique amounts constructing category partial equivalence relations pers linear combinatory algebra lca ane combinatory algebra aca 
category turns linear ane form adjoint model kleisli category 
notion linear ane combinatory algebra introduced rst author abr re nes standard notion combinatory algebra way intuitionistic linear ane logic re nes intuitionistic logic 
construction models lca aca quite simple clear yields models extensionality properties 
examples linear combinatory algebras arise context abramsky categorical version girard geometry interaction aj abr abr ahs 
de ne fully complete model maximal theory simply typed calculus nitely ground constants ground type theory equates closed terms type type type mp nq knowledge model rst model di erent term model 
show rst build fully complete minimal model mok simply typed calculus ground constants extended permutations ground type 
fully complete minimal model obtained cutting combinatory algebra 
model mok extended language arises special ane combinatory algebra partial involutions modeling system consists essentially hierarchy simple pers having exactly distinct equivalence classes 
proof full completeness carried linear ane analysis intuitionistic arrow possible category 
proof uses decomposition theorem standard tool discussing full completeness 
case partial involution inhabits interpreting simple type decomposition theorem allows recover top level structure permutations possibly nite typed ohm tree corresponding partial involution 
decomposition theorem order prove de nability need rule possibly nite typed ohm trees model 
order prove approximation theorem study intermediate model extended new ground constant intended denote unde ned constant 
variant model mo special case constants implicitly intermediate construction system order get fully complete minimal model need cut algebra involutions putting extra constraint allows rule permutations model mok full completeness result put prove re prove simple facts maximal theory 
particular context lemma follows immediately full completeness model 
able prove holds simply typed possibly nite ohm trees special case exactly ground constants 
give decidability results nite partial involution belongs type 
give semantical procedure decide special cases terms equivalent maximal theory alternative syntactical procedures padovani pad loader loa 
organized follows 
section recall de nitions notations concerning simply typed calculus nitely base constants construction category aca special aca partial involutions 
section study model mok prove fully complete minimal extended calculus 
section construction fully complete minimal model simply typed calculus 
section illustrate uses full completeness result 
directions appear section 
notation 
vectors written bold 
nat nat partial functions nat nat nat denote respectively fact de ned fact de ned diverges denote predicate read 
sets denote elements sets omit parentheses denoting abbreviated notation denoting element coming element preliminaries section consists parts 
rst part recall de nitions notations concerning simply typed calculus base constants maximal theory models 
second part recall notion ane combinatory algebra aca abr construction category aca special aca partial involutions 
simply typed calculus maximal theories models de nition 
class simple types ground type de ned raw terms de ned follows mm const fc set ground constants var 
denote set closed terms 
typed terms 
introduce proof system deriving typing judgements form 

type assignment nite list rules proof system 







mn conversion 
conversion typed terms relation generated rule rules congruence closure omit 


known maximal theory characterized follows de nition maximal theory 

de ne equivalence induction types follows tn tn mp nq focus categorical models simply typed calculus usual categorical models cartesian closed types interpreted objects terms contexts interpreted morphisms 
de nition fully complete model 
categorical model fully complete simple types exists interpretation function model 
pers ane combinatory algebras section brie recall construction category ane combinatory algebra aca see details construction 
category turns ane kleisli category turns cartesian closed 
particular focus combinatory algebra partial involutions pinv consider model induced cartesian closed subcategory pers pinv generated special intended denote ground type start giving notion ane combinatory algebra aca de nition ane combinatory algebra abr 
ane combinatory algebra applicative structure unary injective operation distinguished elements combinators satisfying equations ix yz xz kxy wx xy proposition 
aca 
de ne category pera follows 
objects pers symmetric transitive relations 
morphisms morphism equivalence class de ned pairing combinator 
notation xyz 
pers de ned gives rise tensor product pera de ne tensor identity 
de ne 
gives rise symmetric monoidal comonad der pera der denotes abuse notation equivalence class combinator summarizing category pera ane 
kleisli category pera induced comonad category pera cartesian closed 
categories pera pera form adjoint model 
rst author introduced abr basic important example aca space nat nat partial functions natural numbers natural numbers 
brie recall de nition aca see details 
aca partial involutions consider section arises subalgebra 
consider space nat nat partial functions natural numbers natural numbers 
nat nat injective denote inverse start xing injective coding functions nat nat nat nat nat nat rst order de ne application allows transform output function input output function 
creating nitely copies input output function de ning 
application explained geometrically language boxes wires arises general setting traced symmetric monoidal categories see jsv treatment 
represent input output function nat nat input port port box fig 

order de ne application nat nat regard input output function coding particular nat nat nat nat described matrix input output functions entry ij nat nat ij accounts contribution th input wire th output wire see fig 
ii 
result application input output function see fig 
iii denotes union graph relations denotes formula computing application essentially execution formula girard geometry interaction gir 
ii iii fig 

geometrical description linear application 
de nition operation applicative structure quite simple 
operation intended produce single copy nitely copies obtained simply tagging copies natural number de ne id nat de nition ane combinators nat nat see 
possible conditions imposed partial functions order cut space nat nat maintaining closure application ane combinators 
subalgebra interested obtained considering partial involutions proposition 
nat nat 
partial involution graph symmetric relation 
denote nat inv nat space partial involutions nat nat 
pinv nat inv nat ane combinatory algebra 
pinv highly constrained algebra 
partial involutions reminiscent copy cat strategies game categories 
notice computational ect combinators copying information input output wires 
partial involutions set correspond pair wise disjoint families subsets fx yg fx yg family 
think families axiom links proof nets linear logic 
fully complete minimal model extended calculus section de ne model suitable subcategory category pera pinv prove model fully complete extended constants transpositions type proof full completeness approximation theorem intermediate model allows partial elements 
permutations exchange exactly elements 
start introducing pinv distinct equivalence classes 
model de ned category ane category freely generated de nition 
fix distinct natural numbers moves combinatory algebra pinv consisting equivalence classes de ned ff nat inv nat am dom ff nat inv nat am dom de nition mok 
mok ok ok model category linear ane category freely generated notice fact nite number equivalence classes extensionality model nitely equivalence classes 
easy check equivalence classes correspond permutations involution belongs dom di erent permutations di erent equivalence classes standard permutations obtained suitably composing elementary permutations transpositions 
permutations transpositions ground type sucient de ne elements mok mok fully complete 
proof fact decomposition theorem partial involutions domains pers interpreting simple type theorem decomposition 
iq dom ok dom ok ng permutation dom ok ij ok ok con hg ap abuse notation denote representatives equivalence classes canonical morphisms ane category freely generated canonical morphisms 
appearing decomposition live uncurrying interpreting simple type keep iterating decomposition expanding turn getting permutations possible nite tree partial involutions generate decomposition nite tree easily proved de nable 
decomposition theorem holds order get full completeness result left deal partial involutions generating trees height nite correspond nite typed ohm trees 
proof theorem follows standard pattern carried detail section 
proof de nability uses decomposition theorem ingredients approximation theorem intermediate model 
discussed section 
de nability result immediately theorem full completeness extended language 
model mok fully complete minimal enriched constants transpositions type notice full completeness result order show mok minimal 
realizes maximal theory extended calculus 
proof decomposition theorem ok ij dom 
analyze behaviour operator application arguments apply coding functions section order get nat nat nat nat nat nat nat nat nat nat domain codomain occurrences nat nat corresponding arguments applies 
interaction th argument th occurrence nat nat domain codomain involved 
particular lefthand occurrence nat nat nat refers copy argument righthand occurence nat carries values possibilities behaviour inputs input values relevant de nition lemma 
dom ij permutations exchange exactly elements 

dom ok 
ng 
proof 
item easy prove 
focus proof item 
far item easily show 
proof fact argument counting argument 
split responses initial questions di erent arguments lose totality constraints partial involution 
assume contradiction case initial questions responses argument 
nat ag 
consider constants kc kc pn kc kc pn dom 
contradiction 
order prove item proceed contradiction case analysis 
concludes proof lemma 
ut lemma easily prove lemmata linearization head occurrence linear function extensionality 
factorization proof decomposition theorem lemmata standard notice special form linear function extensionality permutations come play 
lemma linearization head occurrence 
ij dom abbreviation exist ng dom strict con id ut examine structure show lemma linear function extensionality 
pers 
dom strict exists dom id ap permutation technical lemma need order prove decomposition theorem amounts general fact follows construction category pers aca see section lemma uniformity threads 
isomorphism holds pers id der 
canonical morphism induced comonad 
proof decomposition theorem 
case lemma applies done 
case applies lemma exist ng dom con id 
lemma id ap 
con id ap 
lemma de nition product pers universality property product obtain hg iq ut proof de nability proof de nability property mok quite involved uses approximation theorem intermediate model simply typed calculus ground constants plus extra unde ned ground constant 
model allows partial elements approximants 
approximation theorem 
start introducing notion approximant partial involution 
repeatedly applying decomposition theorem partial involution model mok obtain possibly nite typed ohm tree permutations 
th approximant partial involution obtained truncating level tree substituting empty partial involution possibly erased subtree 
notice approximants model general 
formally de nition approximants 
dom ok simple type de ne th tree height generated iterated applications decomposition theorem induction follows tree height root labeled tree height tree obtained tree expanding possible leaves level decomposition theorem 
de ne th approximant partial involution obtained tree substituting partial involution level empty partial involution 
monotonicity immediately lemma 
dom ok 
theorem approximation 
simple type dom ok 
ok 
proof 
show ok 

ii 
implications ii follow monotonicity fact graph contained graph order show ii check result obtained thread length ut model de nition 
model induced ground de ned follows 
fix distinct natural numbers aca pinv consisting equivalence classes de ned ff nat inv nat kg dom ff nat inv nat am dom ff nat inv nat am dom model simply typed calculus ground constants plus extra ground constant 
particular approximants relationship model mok lemma lemma 
dom ok 
dom 
ii 
proof 
assume dom ok 
approximation theorem 
mok dom 
dom 
argument similar proof approximation theorem check 

particular dom 
ii proof item lemma 
dom 
nitely equivalence classes lemma exists pm pm 
ut de nability mok position proving partial involutions dom ok de nable 
proceed induction types 
base case easy 
consider induction step 
approximation theorem ok 

lemma ii exists model lemma particular ok mok call term interpretation 
cases arise free 
free 
case applies contradiction case applies check equivalent maximal theory term obtained substituting constant 
possible occurrence induction hypothesis ok de nable ok ok mok ok de nable 
concludes proof theorem 
fully complete minimal model simply typed calculus build fully complete model simply typed calculus getting rid permutations models mok ways doing 
rst low level amounts cutting ane combinatory algebra partial involutions placing additional constraints partial involutions similarly getting fully model pcf 
alternatively de ne suitable logical relation cut model 
brie sketch rst technique 
sake consider place set natural numbers set inductively de ned moves de nition 
nat 
de ne hj mi nat 
regard equipped intrinsic coding functions nat equivalently take moves natural numbers suitable assumptions coding functions set simpli es argument 
immediately de ne function moves move provides index basic move move 
de nition 
de ned follows 
nat hi mi 
partial involutions preserves function form ane combinatory algebra 
proposition full completeness minimality 
ane combinatory algebra carrier set partial involutions dom model induced fully complete minimal applications full completeness results fully complete model mok provides immediately semantical proofs interesting facts concerning maximal theory simply typed calculus permutations 
context lemma 
de nition applicative equivalence 
app de ned app mp np lemma context lemma 
theory admits applicative characterization app theory nitary ohm trees conservative 
call mo variant model obtained considering ground constants de ning ground sierpinski follows nat ff nat inv nat dom ff nat inv nat check mo fully complete minimal directly simply typed calculus ground constants 
mo fully complete model maximal theory nitary calculus simply typed possibly nite ohm trees de nition nitary typed ohm trees 
de ne nitary typed ohm trees trees obtained typed ohm trees corresponding approximants 
model mo show case ground constants theory nitary typed ohm trees conservative extension terms proposition 
denote theory theory restricted nite typed ohm trees respectively case ground constants 
decidability results 
decidability result proved mok theorem 
simple nat nat graph nite decidable dom 
proof 
order decide dom sucient check behaviour applied relevant domains codomains roughly contained suitable subset domains precisely nat nat nat nat nat nat nat nat nat nat partial involutions obtained coding functions relevant dom fn dom dom relevant ones sense non relevant exists relevant 
nite graphs nitely graphs nite 
easily generate relevant partial involutions point eliminate relevant dom 
need know relevant equivalent order decide compute turn partial involutions relevant recursively compute relevant partial involutions relevant partial involutions reach ground eliminated dom divided set relevant equivalence classes check nally applicative behaviour computations terminate de nition partial involution fact graphs nite nite possibly cyclic computation 
computation converges diverges de ned element 
concludes proof 
ut similar argument prove proposition 
ok ok representatives nite graphs 
decidable terms interpretation nite sense proposition 
identity type 
representatives nite graph 
intuitively depends fact ask number copies argument 
studied fully complete models maximal theory simply typed calculus nitely base constants seen applications construction 
summarize list remarks interesting issues remain addressed abr axioms full completeness lemmata proof 
imply faithfulness maximal theory theory models maximal 
de ne fully complete game models considering strategies style ajm 
game semantics models realize maximal theory theory 
lai fully translation finitary pcf simply typed lambda calculus constants 
interesting consequence result model fully nitary pcf 
feel fully complete models partial involutions de ned provide semantical proof decidability maximal theory alternative padovani loader 
capitalize possibility checking equivalence involutions evaluating nite sets inputs moves 
conjecture model fully complete decidable fragment pcf called unary pcf 
avery speculative comment 
partial involutions provide models reversible computations abr 
related decidability various theories modeled partial involutions 
abr abramsky 
retracing paths process algebra concur montanari sassone eds 
abr abramsky 
interaction combinators complexity notes siena italy 
abr abramsky 
axioms de nability full completeness proof language interaction essays honour robin milner plotkin stirling tofte eds mit press 
abr abramsky 
structural approach reversible computation may 
ahs abramsky scott 
geometry interaction models combinatory logic appear 
aj abramsky jagadeesan 
new foundations geometry interaction inf 
comp 

aj abramsky jagadeesan 
games full completeness multiplicative linear logic symbolic logic 
ajm abramsky jagadeesan malacaria 
full abstraction pcf inf 
comp 

abramsky 
fully complete models ml polymorphic types technical report ecs lfcs lfcs available www dimi papers soft copy ps lfcs ps gz 
abramsky 
fully complete model ml polymorphic types csl lncs 
abramsky longley 
realizability models history free strategies 
gir girard 
geometry interaction contemporary mathematics 
kno ker ong 
universal game models untyped calculus ohm tree strikes back csl lncs 
jsv joyal street verity 
traced monoidal categories math 
proc 
comb 
phil 
soc 

lai laird 
games control full abstraction february 
loa algorithm minimal model note 
pad padovani 
decidability minimal models types lncs 

