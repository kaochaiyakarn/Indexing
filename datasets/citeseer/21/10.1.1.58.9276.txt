specification agent behavior ordinary people case study luke mcdowell oren etzioni alon halevy university washington department computer science engineering seattle wa usa etzioni alon cs washington edu www cs washington edu research semweb email 
development intelligent agents key part semantic web vision ordinary person tell agent 
approach problem rdf templates authored instantiated times ordinary users 
approach raises number challenges 
instance templates concisely represent broad range potential uses ensure possible instantiation function properly 
agent explain actions humans involved 
addresses challenges context case study carried fully deployed system semantic email agents 
describe highlevel features template language enable concise specification flexible goals 
response question show possible verify polynomial time template produce valid instantiation 
second show automatically generate explanations agent actions identify cases explanations computed polynomial time 
results improve usefulness semantic email suggest general issues techniques may applicable semantic web systems 
vision semantic web encompassed declarative representation data development intelligent agents consume data act owner behalf 
instance agents proposed perform tasks appointment scheduling meeting coordination travel planning 
significant difficulty vision need translate real world goals untrained users formal specification suitable agent execution 
short ordinary person tell agent 
approach problem encapsulate classes common behaviors reusable templates cf program schemas generic procedures 
templates address specification problem allowing domain specific template authored instantiated times untrained users 
addition specifying templates declaratively opens door automated reasoning see www cs washington edu research semweb email publicly accessible server installation required source code available authors 
composition templates 
furthermore resulting declarative specifications concise procedural approach see table 
specifying agent behavior templates presents number challenges generality template concisely represent broad range potential uses 
safety templates written certain set assumptions ensure unexpected instantiation template naive user function properly harm generate errors 
understandability executing template agent explain actions humans agents involved 
investigates challenges case study leverages deployed system semantic email agents agents 
agents provide testbed examining agent specification problem offer potential managing complex goals intended wide range untrained people 
instance consider process scheduling meeting numerous people subject certain timing participation constraints 
agents support common task originator wants ask set participants questions collect responses ensure results satisfy set constraints 
order satisfy constraints agent may utilize number interventions rejecting participant response suggesting alternative response 
contributions follows 
identify key challenges template agents described 
examine specific solutions challenge context fully deployed system semantic email 
generality describe essential features template language enable authors easily express complex constraints compromising important computational properties 
sufficiency features demonstrated implementation small diverse set agents 
safety show verify polynomial time template produce valid instantiation 
understandability examine automatically generate explanations particular response accepted responses acceptable 
identify suitable restrictions constraint explanations generated polynomial time 
results greatly increase usefulness semantic email highlight important issues broad range semantic web systems 
prior referred semantic email processes call agents consistent standard agent terminology 
table 
comparison size agent specification original procedural prototype java html vs declarative format described rdf 
declarative approach concise 
procedural approach declarative approach size reduction agent name number lines number lines declarative balanced potluck come served meeting coordination request approval auction fig 

creation semantic email agent agent 
initially author authors agent template template generate associated web form 
web form originator instantiate template 
typically template authored instantiated times 
section gives brief overview agents section discusses salient features template language extended example 
sections examine problems instantiation safety explanation generation discussed 
section considers related section concludes implications results email non email agents 
overview semantic email agents illustrate agents running example balanced potluck operates follows 
agent originator initially creates message announcing potluck style event case message asks participant bringing appetizer entree dessert coming 
originator expresses set constraints potluck difference number ensure balance 
demonstrates template create new agent 
initially assumed knowledge rdf semantic email authors new template editor modifying existing template 
call person agent author 
template written rdf ontology describes possible questions constraints notifications agent 
instance potluck template defines general balance constraints placeholders parameters participants addresses specific choices offer imbalance permit 
associated template simple web form describes needed parameter section describes tool automatically generate forms 
untrained originator finds appropriate web form public library fills values parameter causing corresponding template instantiated agent declaration 
semantic email server executes declaration directly appropriate algorithms direct agent outcome message rejections suggestions 
implementation agents executed central server 
invoked server sends initial messages participants contain human readable announcement corresponding rdf component 
messages contain simple text form handled human mail client agent associated rdql query 
participants fill form reply mail directly server originator originator receives status messages server appropriate 
concise tractable representation templates challenge ensure template concisely represent possible uses ensuring tractability agent reasoning check acceptability participant response 
section describes template language extended example discusses language meets challenge 
template example agent template parameterized rdf document specifies set participants questions ask participants constraints enforce participants responses notifications send originator participants appropriate times 
illustrate parts balanced potluck template 
declarations shown format variables bold choices parameters provided originator variables computed execution 
questions set questions ask participant 
instance potluck agent ask food items number guests bringing name bring enumeration choices guard name enumeration properties constrain legal responses questions 
addition question guarded applies parameter true 
question defines data may accessed multiple locations template important able reason guard evaluate false see section 
question item specifies rdql query shown defines semantic meaning requested information map participant textual response rdf 
constraints originator goals agent outcome 
goal may expressed constraint satisfied point time constraint constraint possible ultimately satisfied final outcome 
section defines behavior constraints precisely 
simple example uses quantified require balance counts different choices forall name range choices name range choices suchthat enforce abs bring count bring count message sorry accept bring constraint applies possible combination set choices choices coming excluded constraints 
message property optional message send participant case constraint causes message rejected 
particular message helpful specifying messages detail desired cooperation participants challenge agent author 
section discusses techniques automatically constructing informative messages 
notifications set email messages send condition satisfied notify originator total number guests reaches guard define name value select sum curr state condition notify originator message currently guests expected discussion example illustrates different ways accessing data collected agent pre defined variable bring bring count commonly utilizing explicit sql query virtual table constructed rdf 
method convenient allows author easily specify decisions variety views underlying data 
importantly constraints refer response data pre defined variables guaranteed bounded enable agent summarize responses received set counters number counters independent number participants 
type constraints enables useful agents optimal decision accept message computed polynomial time 
language enables complex data access mechanisms necessary helps authors write agents computationally tractable 
example highlights additional key features language including guards sets membership testing set manipulation choices universal quantification 
forall enforce constraint question types restrictions multiple constraint types vs math 
functions comparisons abs pre defined queries supporting data set bring advantages guards sets universal quantification enable single concise agent template instantiated different choices configurations 
likewise question types restrictions reduce template complexity ensuring responses formed 
multiple constraint notification types mathematical functions pre defined queries simplify process making decisions responses received 
features substantially easier author useful agents potentially complex functionality 
template language authored deployed number agents simple tasks collecting giving tickets away come served scheduling meetings balancing potluck 
experience demonstrated language sufficient specifying wide range useful agents see table 
template instantiation verification second major challenge template specifications ensure originators easily safely instantiate template agent declaration accomplish goals 
section briefly describes acquire validate instantiation parameters originator 
examine detail problem ensuring template instantiated invalid declaration 
agent template accompanied web form enables originators provide parameters needed instantiate template declaration 
automate process implementation provides tool generates web form simple rdf parameter description definition 
parameter description parameter description template set rm ri provides parameter pi name prompt type restrictions legal values pi 
types may simple boolean integer double string email address complex set simple types 
possible restrictions simple types enumeration minimal maximal value sets non empty subset relationship set parameter 
instance partial parameter description relates asking participants number guests bring potluck name enumeration value true prompt ask number guests value false prompt don ask guests name prompt notify guests reaches ignored form generator takes parameter description template input outputs form originator fill submit 
submitted variables comply parameter restrictions template instantiated corresponding values resulting declaration forwarded server execution 
tool form errors indicated asks originator try 
instantiation safety unfortunately instantiated template guaranteed executable 
instance consider instantiating template section parameters false case notification section invalid refers question symbol exist parameter false 
declaration executable refused server 
particular problem addressed template adding additional guard notification parameter description adding restriction 
leaves open general problem ensuring instantiation results valid declaration definition 
valid declaration instantiated template valid declaration 
basic checks validate errors agent ontology expression evaluate valid numerical set result 

enabled symbols expression enabled unsatisfied guard symbol defined enabled node 

non empty enumerations enabled enumeration property object evaluate non empty set 
definition 
instantiation safety template parameter description 
instantiation safe parameter sets satisfy restrictions instantiating yields valid declaration 
instantiation safety significant practical interest reasons 
errors detected declaration error message confusing originator knows web form declaration 
automated tool desirable ensure deployed template instantiation safe 
second constructing instantiation safe templates onerous authors may require considering large number possibilities 
difficult having automated tool ensure template remains instantiation safe modification useful 
parts verifying instantiation safety easy perform 
instance checking declaration validate agent ontology performed checking template ontology checks valid numerical results similar static compiler analyses 
parts ensuring symbol enabled substantially complex need consider possible instantiations permitted parameter description 
consequently general verifying instantiation safety difficult theorem 
arbitrary agent template parameter description determining instantiation safety np complete size 
theorem proved reduction sat intuitively specific counter example easy demonstrate template instantiation safe proving template safe potentially requires considering exponential number parameter combinations 
practice may small problem feasible 
furthermore certain cases problem computationally tractable theorem 
agent template parameter description 
determining instantiation safety polynomial time size forall enumeration statement consists constant set parameters combined set operator guard consists conjunctions disjunctions terms boolean parameters compare non set parameter constant parameter 
restrictions quite reasonable enable specify agents described 
note restrict total number parameters number may appear identified statements 
restrictions ensure polynomial number cases need considered constraint notification item proof relies careful analysis show item checked independently considering question time 
discussion implementation provide tool approximates instantiation safety testing limited model checking 
tool operates instantiating possible parameters boolean enumerated correspond general configuration parameters 
possibility tool chooses random values satisfy remaining parameters 
instantiation invalid known instantiation safe 
extending approximate non guaranteed algorithm perform exact polynomial time complex testing theorem 
clearly analysis relied fact agents email 
similar issues arise 
author creating template designed people especially untrained people 
flexibility template may contain variety configuration options 
large number agents meeting scheduler berners lee appointment coordinator mcilraith travel planner need flexibility profitably implemented templates 
flexibility lead unexpected invalid agents produces need verify various safety properties doing harm instantiation safety discussed 
results highlight need carefully design template language appropriate restrictions safety properties verified polynomial time 
automatic explanation generation executing agent utilizes rejections suggestions influence eventual outcome 
success interventions depends extent understood participants 
instance rejection sorry dates left may may elicit cooperation participant seminar scheduling agent simpler rejection sorry try agent author manually encode explanations template task difficult impossible constraints interact depend considering possible responses 
consider techniques simplifying task agent author automatically generating explanations responses acceptable participant original response acceptable 
defining precisely number relevant terms 
agent supporting data set rdf data store holds responses participants questions posed agent 
current state state data set responses received far 
assume number participants known eventually respond 
see mcdowell details proofs theorems 
constraint arbitrary boolean expression constants parameters variables 
variables may arbitrary expressions constants parameters variables queries select aggregate values question data set 
constraint satisfaction may defined different ways 
definition 
constraint satisfied state iff evaluating yields true 
response lead state satisfy rejected 
example potluck accept dessert response lead having 
cases conservative strategy overly restrictive 
instance may want continue accepting long possible achieve balanced final outcome 
furthermore usable constraints initially satisfied responses received greatly limits types goals expressed 
define second constraint type definition 
constraint ultimately satisfiable state exists sequence responses remaining participants leads state evaluating yields true 
approach permits flexibility constraints sequence responses computing satisfaction constraints challenging 
simplicity assume constraints cd results hold cd contains types 
addition results mention bounded constraints see section restricted type supports wide range agents including discussed 
recall sufficient condition bounded constraints access data pre defined variables 
acceptable responses practical information provide participant response led intervention set responses acceptable appetizer dessert welcome sorry accept requests tickets fewer 
section briefly considers calculate acceptable set 
definition 
acceptable set agent current state constraints cd acceptable set set legal responses satisfiable cd accepting satisfiability testing easy compute acceptable set testing small set representative responses 
situation complex theorem 
agent participants current state constraints cd bounded acceptable set computed time polynomial cd 
problem np hard case compute acceptable set testing satisfiability small set values testing polynomial cd bounded 
addition cd bounded small concisely represented ranges acceptable values case total time polynomial cd 
explaining interventions cases acceptable set may construct useful explanation 
instance suppose agent invites professors students meeting professors quorum persons professors students attend 
requesting change professor explaining change needed need reach required professors effective simply informing response desired please change 
clear explanation motivates request rules alternative reasons request need help reaching quorum may persuasive students help reach quorum 
section discusses generate explanations intervention identifying constraint led intervention 
discuss additional problem translating constraints natural language suitable sending participant note fairly simple explanations vs better explanation 
conceptually agent decides reject response constructing proof tree shows response prevent constraint satisfaction 
proof tree may large complex serve explanation participant 
problem investigated expert systems constraint programming description logic reasoning context semantic web 
systems assumed proof trees arbitrary complexity handled wide variety possible deduction steps 
generate useful explanations key techniques included abstracting multiple steps rewrite rules describing general principles applied specific situations customizing explanations previous utterances 
context proof trees simpler structure exploit 
particular proofs constraint satisfiability state possible states child node adds additional response parent state regular way 
consequently able summarize proof tree simple type explanation 
proof trees defined follows definition 
proof tree agent current state constraints cd response say proof tree rejecting iff tree root initial state root exactly child dr representing state adding cd dr non root node 
cd node dr descendants children formed adding single additional response state leaf nodes possible final states participant responded reachable dr leaf node evaluating cd state yields false 
fig 

examples proof trees rejecting response node possible state data set node labels constraints satisfied state 
cases response rejected leaf node shaded satisfy constraint 
illustrates proof tree 
accepting leads state constraint ct satisfied rejected 
likewise shows proof tree cp cq represent professor quorum constraints example described 
trying prove way constraints ultimately satisfied outcome tree fully expanded 
tree leaf final outcome satisfy constraint rejected 
define simpler explanation proof tree definition 
sufficient explanation agent current state constraints cd response proof tree exists rejecting say sufficient explanation rejecting iff conjunction constraints appear cd leaf node evaluating state yields false 
intuitively sufficient explanation justifies rejecting covers leaf node proof tree precludes satisfying cd 
note proof tree rejecting unique modulo ordering child nodes explanation 
instance explanation cs ct cs ct likewise valid explanation cp cq way satisfy professor quorum constraints precise explanation just cp way satisfy professor constraint 
smaller explanation compelling argued meeting example preferred 
general wish find explanation minimum size fewest conjuncts theorem 
agent participants current state constraints cd response cd consists finding minimum sufficient explanation rejecting polynomial time cd 
cd consists problem np hard cd 
computing minimum explanation feasible intractable 
difficulty arises sources 
checking particular sufficient explanation np hard reduction ultimate satisfiability scaling agents large numbers participants difficult 
second finding minimum explanation np hard number constraints reduction set cover 
note number significant treat forall quantification separate constraint sample potluck described section produce complex constraint explanation 
fortunately common cases achieve polynomial time solution theorem 
agent participants current state constraints cd response cd bounded size minimum explanation constant computing minimum explanation polynomial time cd 
theorem holds candidate explanation checked polynomial time constraints bounded restricting size means total number explanations considered polynomial number constraints 
restrictions quite reasonable 
previously mentioned bounded constraints arise naturally template language permit wide range functionality 
likewise agent explanations useful participants contain small number constraints adequate agents meeting example 
sufficient explanation size exists system choose best explanation size maintain simple explanation approximate minimum explanation greedy algorithm fall back just providing participant acceptable set described previous section 
different types agents describe goals terms set constraints need explain actions users 
results show generating explanations intractable general combination simple explanations modest restrictions constraint system enable explanation generation polynomial time 
related mcdowell describe related general notion semantic email including relation existing workflow collaboration systems 
focus research relevant agent specification problem 
projects considered simplify authoring semantic web applications haystack adenine programming language 
adenine resembles template language compiled rdf portability contains number high level primitives adenine incorporates imperative features support types declarative reasoning describe 
languages daml owl enable description application semantic web service 
languages focus providing details needed discover invoke relevant service model participant web service 
concisely specifies agent detail directly executed contexts involving untrained users 
generally agent templates viewed instance program schemas encapsulate general class behavior automated program synthesis software reuse 
similarly mcilraith propose generic procedures instantiated produce different compositions web services 
concepts similar definition instantiation safety naturally arise setting proposals ensuring safety included manually generated proofs automatically generated proofs language modification 
focuses need schemas safely usable ordinary people demonstrates required safety properties verified polynomial time 
inference web focused need explain semantic web system terms base data reasoning procedures 
contrast deal explaining agent actions terms existing responses expected impact agent constraints 
sense similar prior research sought explain decision theoretic advice cf horvitz 
instance klein shortliffe describe system users explanation action provided 
note focuses explaining relative impact multiple factors choice action seek simplest possible reason action chosen accepted 
relevant includes druzdzel addresses problem translating uncertain reasoning qualitative verbal explanations 
constraint satisfaction problems csps nogood reason current variable assignment satisfy constraints 
contrast explanation reason assignment satisfy constraints set possible responses 
potentially problem reduced nogood calculation direct conversion produce problem take time exponential number participants 
bounded constraints create csp variables aggregates responses specific values 
simpler csp exploit existing efficient nogood solvers find candidate explanations time polynomial note applications nogoods focused developing improved constraint solving algorithms debugging constraint programs creating explanations average users 
exception jussien describe generate user friendly nogood explanations require designer explicitly model user perception problem nodes constraint hierarchy 
implications agents examined specify agent behavior 
adopted template approach shifts complexity agent specification untrained originators smaller set trained authors 
examined key challenges generality safety understandability arise approach 
agents discussed high level features template language enable concise specification complex agent behavior 
demonstrated possible verify instantiation safety template polynomial time showed generate explanations agent actions polynomial time 
techniques simplify task agent author improve execution quality originator participants agent 
addition polynomial time results ensure features scale agents large numbers participants choices constraints 
focused context semantic email results relevant agent systems 
instance agent needs ability explain behavior agents react world constraints 
showed generating explanations np hard general combination simple explanations modest constraint restrictions may enable explanation generation polynomial time 
likewise agent template support wide range functionality ensure safety possible 
different types safety consider including doing harm minimizing unnecessary sideeffects accurately reflecting originator preferences 
motivated need instantiation safety type previously examined extent particularly challenging non technical users 
results highlight need carefully design template languages balance flexibility ability efficiently verify safety properties 
agents benefit high level declarative template language automatic safety testing explanation generation 
collectively features simplify creation agent broaden applicability enhance interaction originator participants increase likelihood satisfying originator goals 
consider additional ways agent authoring instantiation easier goal bringing semantic web vision closer practical implementation 
research supported part nsf darpa contract iis onr oren etzioni nsf career iis itr iis alon halevy nsf graduate research microsoft endowed fellowships luke mcdowell 
jeff lin assisted implementation 
miklau noy anonymous reviewers helpful comments improving 

allen 
class approach genericity 
phd thesis rice university houston tx 

berners lee hendler lassila 
semantic web 
scientific american may 

boutilier 
pomdp formulation preference elicitation problems 
aaai pages 

carenini moore 
generating explanations context 
intelligent user interfaces pages 

daml services coalition 
daml owl 
www daml org services 

de la banda stuckey 
finding minimal unsatisfiable subsets 
proceedings th acm sigplan international conference principles practice declarative programming pages 
acm press 

dershowitz 
program abstraction instantiation 
acm trans 
programming 
language systems 

druzdzel 
qualitative verbal explanations bayesian belief networks 
artificial intelligence simulation behaviour quarterly 

etzioni halevy levy mcdowell 
semantic email adding lightweight data manipulation capabilities email habitat 
webdb 


lau richardson 
formalisation correct schemas program synthesis 
journal symbolic computation july 

horvitz breese henrion 
decision theory expert systems artificial intelligence 
international journal approximate reasoning 

johnson 
approximation algorithms combinatorial problems 
journal computer system sciences 

junker 
quickxplain conflict detection arbitrary constraint propagation algorithms 
ijcai workshop modelling solving problems constraints 

jussien 
user friendly explanations constraint programming 
iclp th workshop logic programming environments cyprus dec 

bacchus 
unrestricted nogood recording csp search 
principles practice constraint programming october 

klein shortliffe 
framework explaining decision theoretic advice 
artificial intelligence 

mackworth 
constraint agents abc cba constraint programming pages 

mcdowell 
meaning masses theory applications semantic web semantic email systems 
phd thesis university washington seattle wa 

mcdowell etzioni levy 
semantic email 
proc 
thirteenth int 
www conference 

mcguinness borgida 
explaining subsumption description logics 
ijcai pages 

mcguinness pinheiro da silva 
infrastructure web explanations 
second international semantic web conference october 

mcilraith son zeng 
semantic web services 
ieee intelligent systems 
special issue semantic web march april 

nareyek 
constraint agents volume lecture notes computer science 
springer 

neches swartout moore 
explainable maintainable expert systems 
ijcai pages 

jussien boizumault 
relevant explanations constraint programming 
flairs st florida usa may 
aaai press 

payne singh sycara 
calendar agents semantic web 
ieee intelligent systems 

quan huynh karger 
haystack platform authoring user semantic web applications 
second international semantic web conference october 

schiex verfaillie 
nogood recording fot static dynamic constraint satisfaction problems 
international journal artificial intelligence tools 

swartout paris moore 
design explainable expert systems 
ieee expert 

terveen murray 
helping users program personal agents 
chi pages 

knoblock 
agent wizard building information agents answering questions 
intelligent user interfaces pages 

weld etzioni 
law robotics call arms 
proc 
aaai 
