isml interface specification meta language simon linda hole university royal london house christchurch road uk mail ac uk www home page dec ac uk staff university poole house talbot campus poole uk mail ac uk www home page dec ac uk staff index htm 
metaphor model situated model user interface framework 
inclusion metaphors graphical user interfaces established craft strategy design 
substantial body notations tools model user interface design literature explicit treatment metaphor mappings design views addressed 
introduce interface specification meta language isml framework demonstrate comparing semantic syntactic features interactive system 
challenges facing research outlined proposed 
xerox star system famous early example application metaphors design graphical user interface gui 
generations desktop metaphor today commercial personal computer systems little apparent modification superficial changes presentation 
metaphors said enhance user understanding manipulation system state provision interactive entities mimic appearance behaviour real world objects 
way users able achieve goals having re cast problem fit domain native computer system 
date human computer interaction hci practitioners enjoy relatively limited support development novel user interface metaphors 
wish develop interfaces way may turn psychological accounts metaphor highly mathematical models 
whilst providing useful insights nature metaphor generally relatively little offer terms advice interface development 
designers may refer number case studies literature providing quantitative qualitative evidence application specific metaphorical devices design problems see 
general guidelines metaphor design 
arguably formalized approach design framework 
stage process outlined intended system functionality environment examined potential metaphor vehicles subsequently evaluated set guidelines 
approaches outline useful methods developing user interface metaphors remain strongly craft integrated contemporary hci design methods 
emerging field hci model user interface design mb uid methods offer designer variety frameworks notations tools integrate number design perspectives 
review contemporary mb uid research da silva posits major advantages approach 
higher levels abstraction provided traditional ui development tools 
systematic development ui models may refined reused 
provision infrastructure provides automatic support design implementation notations tools support abstractions various design views including devices graphical components direct manipulation task models domain modelling 
advances user interface technology mb uid community new challenges particularly respect designing multiple platforms task contexts 
advances interface technologies resulted multiple hardware software platforms implement varying degrees technical capability 
currently model methods adequately address complexity exploit potential diversity technologies 
address problem necessary expand design views currently addressed mb uid ubiquitous desktop user interface 
breaking opportunity reconsider metaphors design role generation new model methods 
argue abstraction metaphor model provide useful mechanism carrying user interface design solutions platforms 
metaphors frequently implied user interface designs 
metaphor carried platform platform 
high fidelity interface technologies invite metaphor development difficult find popular commercial software metaphorical concepts desktop files folders cutting pasting dragging dropping 
features frequently implicit part implementation solution explicitly specified model design 
consequently underlying concepts mechanics metaphor hidden higher level component abstraction 
numerous variants desktop metaphor different hardware software platforms illustrate phenomenon look feel system vary considerably basic concepts remain constant 
pace change user interface technologies rapid 
increasing availability high performance multimedia graphic mobile computing hardware grows potential entirely new forms interaction 
application technologies demonstrated field information visualization 
delivery graphically rich interactively complex environments common feature computer games industry features highly attractive users 
systems user objects behaviours interactions high physical world 
increasing diversity means interact computing devices coupled expansion graphically semantically rich environments enormous challenge hci community 
existing abstractions user interface components sufficient express concepts generation gui designs 
possible way forward examine explicit metaphor model extend design concepts mb uid community 
proceeding sections introduce high level framework supports metaphor models section followed detailed look principal layers section 
examine utility approach respect mapping metaphorical design concepts multi target platforms section 
overview isml section provide high level overview interface specification meta language isml 
outset isml developed intention metaphors shared concepts user computer explicit design 
mechanism absolute manifestation respect implemented appearance operation user interface 
isml de couples metaphor model particular implementation expresses mappings concepts shared user system 
model useful isml provides framework supports mappings user oriented models task descriptions software architecture concerns interactor definitions 
isml framework composites concepts layers variety mappings link see 
layers supported computational formalisms similar literature including communicating objects state modelling mappings event modelling task models 
layers model inherit implement abstractions shared computational basis 
devices simple abstractions user interface input output hardware model entities mouse keyboard graphics adapter 
logical abstractions user input output objects specified components map devices implementing function 
meta objects define underlying metaphor model expressed rules governing semantics syntax fig 

isml framework inter communicating objects 
abstraction part task model forms basis concrete implementation metaphor 
advantages approach 
translation user task model execution metaphorical medium expressed language 
secondly implementation concrete user interface meta object layer possible show components express metaphor 
interactor definitions meta objects basis specific design solution just mapping accomplished mapping components interactor display parts similar mvc pac see 
task layer combines meta object definitions objects actions simple hierarchical decomposition tasks similar approaches 
intersection meta objects interactor task models described metaphor mapping definition 
definition specifies potential analogies execution actions objects task model metaphor model interactors 
proceeding sections examine layer detail examine underlying meta object model implemented different styles 
isml layers framework isml uses backus naur form grammar specify user interface xml language 
space permit detailed examination isml brief outline provided detailed coverage readers directed main author web site 
sake brevity xml structures express isml framework graphically xml spy graphical notation 
attributes logic state models isml framework attributes states logic extensively 
attributes required name type access 
basic types isml attribute include common programming data types boolean integer float string attributes may type set 
procedural expressions may inserted various points isml specification important stress isml programming language may contain programming language fragments expressed grammar expression mathematical formula conditional logic tests 
basic non recursive state model supported isml nodes transitions connected topology 
state may fire statements executed model enters state 
devices input output devices isml specified abstraction basic attributes low level software related functions 
devices abstractions computer hardware provide hooks low level apis microsoft directx encapsulate operations polling input direct rendering graphical primitives 
definition simple mouse device example include boolean integers representing hardware button state motion vector 
presently definitions provide rudimentary lexicon input output devices supporting pointing devices keyboards display devices principle extended 
components component definition specifies presentation features concrete interface object may contain attributes height width font name 
state models allowable component definitions may poll devices new input information render graphics displaying images button armed state 
rendering managed specification render lists may active time called render focus 
render list collection functional calls devices associated component 
meta objects central isml framework meta object part syntactic semantic definitions underpin metaphorical aspects user interface specified 
abstraction logically sub divided parts syntax semantics meta objects ii meta interactor definitions 
fig 

isml meta object abstraction syntax semantics meta object abstraction see syntactical semantic rules described relationships meta objects communications specified 
action events syntactic descriptions possible communications objects 
example object may request ownership see object invoking action event ae name parameters param name type set param name type integer param name type integer parameters ae parameter event sender identifies calling object parameters specify method object selection principle objects occupy space dimensions 
concept dragging expressed mapping constraint expression may contain morphisms constraints mathematical logical arguments 
specify source target attributes operate example target object evaluated range specified min max attributes source constrain target target source min max source predicate statement target min target max statement predicate constrain note xml characters escaped clarity whilst operation meta object mappings continuously enforced whilst constraints may tested satisfaction internal state model 
meta object definition metaphorical objects specified isml framework defined meta object types parts comprised attributes state models 
semantics section determines object previously defined action events mapping constraints may classed affective effective affective effective exclusively affects 
way meta object determined capable enforcing subject syntax semantics metaphor abstraction 
object enforcing mapping constraint maintains set holds objects affects 
action event object subject handler defined response action takes place 
responses may include set operations tests procedural logic 
operations local sets include emptying adding subtracting ability invoke actions members set 
tests include checking object existence state class type affective effective capabilities satisfaction constraint 
meta interactor definition isml meta object part concludes definitions interactor types meta objects defined proceeding part specification 
interactors properties metaphor model user interface inheritance meta object abstractions 
achieved defining display controller parts binding meta object 
display parts subsequently mapped component abstractions interactor declarations see section 
allows derived interactor classes ability receive input render multiple components 
may desirable interactors temporarily suspend behaviour state underlying system 
reason controller definitions list collection mapping constraints action events turned appropriate 
interactors interactor abstraction realizes underlying metaphor refinement mapping previously defined components 
derived meta interactor consequently meta object abstraction interactor may include attributes state models handle loaded additional action events calls underlying system functionality 
display bindings map display parts associated interactor components 
subsequent attribute bindings link attributes interactor parent meta object attributes implemented component 
rendering mapped components achieved explicit render directive 
interactors shared display type may re target destination rendering 
tasks isml task world re uses basic meta object abstractions action events meta objects describe extant task related entities role hierarchical description tasks 
presently isml task model simple hierarchy linked nodes may action 
nodes serve label higher order task plans goals 
nodes contain actions refer source object performing afferent action target meta object definitions 
sequences actions specified node lists including parent node excepting root sequence serializing nodes specifying choice enable connectives respectively 
node may specify iterate condition action 
case task node said continuously repeat mapping constraint test see section logical test object attributes evaluates true 
metaphor mapping final part isml specification builds mappings objects actions defined task model interactors interactions user interface 
object maps may simple name space mappings indicating interactor equivalents task object may refined including mappings specific attributes states 
action analogies drawn linking task object action interactor action couplings 
interactors derived underlying meta object model possible show particular user interface design represent enact underlying user interface metaphor 
discussion isml framework extends application existing formalisms model user interface design metaphor abstraction layer 
metaphorical mappings expressed important ways 
interactor designs built top underlying metaphor 
user tasks translated physical interactions enact metaphor design 
sections outline isml framework map different physical implementations common design show extent specific implementation allows direct engagement underlying metaphorical concepts 
metaphor basis concrete design mb uid technologies isml resolve particular component implementation microsoft foundation class sun java swing classes 
definition components devices affords isml specifier useful freedoms 
example metaphorical environment may desirable describe pointing entity hand 
implementation object may realized different ways depending devices components available 
display mappings interactor expression hand screen cursor fig 

implementing metaphors may parts input output 
input cursor may received component describes relative motion vector 
actual device describes motion may mouse graphics stylus keyboard depending particular component mapping 
similarly technology display cursor image flexibly determined choice pointer image component particular mappings output technologies 
cases technologies implement component decoupled design views mapping attributes exposed component interactor see 
de coupling fig 

simplified isml views moving file common metaphor fragment illustrated high level view moving file named xml folder called isml 
irrespective interactive solution fundamental analogical model nature files folders directories understood user task completed successfully 
said model files entities contained folders 
addition file may moved place 
action split stages selection specific file action event select removal presence existing folder action event pick subsequent appearance action event drop 
movement file object begins pick action motion expressed mapping constraint mc spatial properties file translated pointing entity controlled user 
movement ends execution drop action point file object removed mapping constraint set 
additional action events execute removal file object maintained source folder stored mapping constraint set contain add new target folder 
implementing meta model shown requires derivation meta object interactor coupled actual user interface components 
case command line interface cli properties file folder objects name type rendered lines text whilst input user polled keyboard sent display way 
gui example file folder objects images ordinates space modified 
user communicates mouse cursor display modified vectors polled mapped mouse device 
addition clear qualitative differences appearance implementation underlying actions compared 
user interactor cli solution interpret commands sequences keystrokes return key 
user input device enact actions objects directly allow system act proxy 
interactor object dealing user interaction case internally translate parameters passed user equivalent action events 
contrast gui implementation maps direct spatial actions executed user mouse meta object model 
enacting tasks physical interface de coupling task interactor metaphor views isml framework provides allows designer clearly specify translation user goals interactions system 
norman approximate theory action users said continually execute cycle action specification output evaluation 
accomplish goal users formulate intentions changing system state expressed actions executed user interface 
changes system reflected interface interpreted user evaluated respect progress goal see 
articulatory semantic distances user traverse argues norman reduced user interface reflects problem domain user works 
meta object abstractions form basis eventual user interface design task model allows designer consider semantic articulatory distances user travel order complete goals 
mappings expressed task interactors demonstrated map back underlying metaphor arguably user greater semantic distance travel 
example described cli implementation increases semantic distance operations executed user fig 

norman model spatial properties direct engagement action natural movement object place entails 
comparison interactions required cli gui implementations show differences syntactic distance 
case commands recalled user related explicit part underlying meta object model subsequently translated interactor abstraction affect action events 
furthermore dir command required provide feedback state objects manipulated 
user recall functionality system check success task utilize immediate spatial features gui 
relationship system functionality metaphorical interface design features described intersection 
conditions shown continuous discontinuous mappings isml framework 
features system map directly metaphor 
isml means underlying metaphor directly represented enacted derived interactors calls system functionality turn mapped task actions objects 

system functionality exist metaphor features interface 
isml specification means interactor layer translate implemented interaction meta object abstractions exist calls directly system functionality 

features metaphor model map system functionality 
case mappings meta object interactor layers may exist result calls underlying system functionality 

system metaphor features exist 
case mappings task model interactor layer support completion task 
explicitly modelling metaphor abstraction providing mappings interactors tasks possible identify aspects user interface design support user domain 
introduced isml framework examined explicitly specifying metaphorical concept mappings possible implementation 
isml developed metaphors explicit part model design de coupling metaphor model specific implementation details 
framework uses backus naur form grammar specify user interface interactor implementations designs built top underlying metaphor 
user tasks examined translations physical interactions enact metaphor design 
currently isml xml schema tool support early stages development 
xslt transformation allow semi automatic translation executable code supported isml run time kernel progress 
hope report including case study isml near 

accot chatty formal description low level interaction application multimodal interactive systems 
rd international eurographics workshop design specification verification interactive systems namur belgium springer verlag 
xml spy 
www com 
knott metaphor human computer interaction model approach 
proceedings computation metaphors analogy agents international workshop 

knott framework engineering metaphor user interface 
interacting computers 
ark dryer representation matters effect objects spatial metaphor graphical user interface 
proceedings hci conference human computer interaction springer 

bastide visual formal glue application interaction 
journal visual languages computing academic press 

model interface construction mechanism adaptable agent user interfaces 
proceedings aamas workshop ubiquitous agents embedded wearable mobile devices 

card mackinlay readings information visualization vision think 
san francisco ca morgan kaufmann publishers 

carr interaction object graphs executable graphical notation specifying user interfaces 
formal methods computer human interaction 
paterno springer verlag 

da silva user interface declarative models development environments survey 
interactive systems 
design specification verification th international workshop dsv glasgow scotland springer verlag berlin 

eisenstein vanderdonckt applying model techniques development uis mobile computers 
international conference intelligent user interfaces archive proceedings th international conference intelligent user interfaces santa fe new mexico united states acm press 

gentner metaphor analogy 
analogical mind perspectives cognitive science 
gentner holyoak 
cambridge ma mit press 


bias abuse metaphor human computer interaction 
proceedings ieee international conference systems man cybernetics san antonio 

golovchinsky chignell newspaper information exploration metaphor 
information processing management elsevier science 

griffiths barclay teallach model user interface development environment object databases 
interacting computers elsevier science 

hartson uan user oriented representation direct manipulation interface designs 
acm transactions information systems 

carrington comparing mvc pac architectures formal perspective 
iee proceedings software engineering 

indurkhya constrained semantic transference formal theory metaphors 
synthese 

jacob software model specification language non wimp user interfaces 
acm transactions computer human interaction 

kuhn frank formalization metaphors image schemas user interfaces 
cognitive linguistic aspects geographic space 
mark frank 
technical university vienna austria kluwer 


lakoff contemporary theory metaphor 
metaphor thought 
ortony cambridge university press 
lakoff johnson metaphors live university chicago press chicago 

choose metaphors 
ieee software 

xml runtime user interface description language mobile computing devices johnson ed interactive systems design specification verification th international workshop dsv 
glasgow scotland 
maglio metaphors surf web 
workshop personalized social navigation information space stockholm sweden 

duke hybrid interface specification virtual environments 
interactive systems 
design specification verification th international workshop dsv braga portugal springer verlag 

tool suite integrating task system models scenarios 
interactive systems 
design specification verification th international workshop dsv glasgow scotland springer verlag 

nilsson combining compound conceptual user interface components modelling patterns promising direction model cross platform interface development 
interactive systems 
design specification verification th international workshop dsv rostock germany springer 

norman draper cognitive engineering 
user centred system design 
norman draper lawrence erlbaum associates 


paterno mancini developing task models informal scenarios 
proceedings acm chi pittsburgh acm press 

preece rogers human computer interaction addison wesley 

limbourg task modelling context sensitive user interface 
interactive systems 
design specification verification th international workshop dsv glasgow scotland springer 

smith designing star user interface 
byte 

van der veer van groupware task analysis 
tutorial notes chi workshop task analysis meets prototyping seamless ui development 

windsor mixed metaphors enhance usability electronic multimedia document 
iee colloquium human computer interface design multimedia electronic books washington 

