combining speed techniques shortest path computations martin frank schulz thomas universit karlsruhe fakult informatik postfach karlsruhe germany 
ira uka de 
computing shortest path node directed graph common task practice 
problem classically solved dijkstra algorithm 
techniques known speed algorithm heuristically optimality solution guaranteed 
studies techniques considered individually 
focus combination speed techniques dijkstra algorithm 
consider possible combinations known techniques goal directed search bi directed search multilevel approach shortest path bounding boxes show implemented 
extensive experimental study compare performance different combinations analyze techniques applied jointly 
real world graphs road maps public transport types generated random graphs taken account 
consider problem repetitively finding single source single target shortest paths large sparse graphs 
typical applications problem include route planning systems cars bikes scheduled vehicles trains buses spatial databases web searching 
classical algorithm dijkstra worst case running time log fibonacci heaps algorithms solve variants special cases shortest path problem better running time worst case average case see experimental comparison survey 
common practice improve running time dijkstra algorithm heuristically correctness solution provable guaranteed shortest path returned modified algorithm faster 
particular consider speed techniques partially supported human potential programme european union contract 
ct amore dfg wa 
ribeiro martins eds lncs pp 

springer verlag berlin heidelberg schulz goal directed search modifies edge weights favor edges leading target node 
graphs timetable information speed running time factor roughly reported 
bi directed search starts second search backwards target source see section 
searches search horizons meet 
experiments showed search space reduced factor shown combinations goal directed search beneficial 
multi level approach takes advantage hierarchical graph additional edges computed 
regarded distributed multiple levels 
depending query small fraction edges considered find shortest path 
technique speed factors observed road map public transport graphs 
timetable information queries improved factor see improvements road maps reported 
shortest path bounding boxes provide necessary condition edge respected search 
precisely bounding box nodes reached shortest path edge 
speed factors range achieved 
goal directed search shortest path bounding boxes applicable layout graph provided 
multi level approach shortest path bounding boxes require preprocessing calculating additional edges bounding boxes respectively 
techniques tailored dijkstra algorithm 
crucially depend fact dijkstra algorithm label setting terminated destination node settled 
focus combination speed techniques 
show effort combinations implemented 
extensive experimental study performance provided 
benchmarks run real world generated graphs operation counts cpu time measured 
section contains definitions description speedup techniques shows combine 
section presents experimental setup data sets statistics belonging results section 
section gives 
definitions problem description definitions directed simple graph pair set nodes set edges number nodes denoted number edges 
path sequence nodes uk ui ui non negative edge lengths length path combining speed techniques shortest path computations uk sum weights edges ui ui 
single source single target shortest path problem consists finding path minimum length source target graph layout mapping graph nodes euclidean plane 
ease notation identify node location plane 
euclidean distance nodes denoted 
speed techniques base algorithm dijkstra algorithm fibonacci heaps priority queue 
section provide short description speed techniques combinations discussed section 
goal directed search 
technique uses potential function node set 
edge lengths modified order direct graph search target 
potential function length new length edge defined 
potential fulfill condition edge new edge length non negative order guarantee optimal solutions 
case edge lengths euclidean distances euclidean distance target valid potential due triangular inequality 
potential function defined follows vmax denote maximum edge speed edges 
potential defined vmax 
bi directed search 
bi directed search simultaneously applies normal forward variant algorithm starting source node called reverse backward variant dijkstra algorithm starting destination node 
reverse variant algorithm applied reverse graph graph node set original graph reverse edge set 
df distance labels forward search db labels backward search respectively 
algorithm terminated node designated permanent forward reverse algorithm 
shortest path determined node minimum value df db composed start node forward search edges reverted path destination reverse search 
multi level approach 
speed technique requires preprocessing step input graph decomposed levels enriched additional edges representing shortest paths certain nodes 
decomposition depends subsets si graph node set schulz level called selected nodes level sl 
node sets determined diverse criteria implementation consist desired numbers nodes highest degree graph turned appropriate criterion 
different types edges added graph upward edges going node selected level node selected level downward edges going selected non selected nodes level edges passing selected nodes level 
weight edge assigned length shortest path nodes 
find shortest path nodes suffices dijkstra algorithm consider relatively small subgraph multi level graph certain set upward downward edges set level edges passing maximal level taken account source target nodes 
shortest path bounding boxes 
speed technique requires preprocessing computing shortest path trees 
edge compute set nodes shortest path starts edge layout store edge bounding box associative array bb index set sufficient perform dijkstra algorithm subgraph induced edges target node included bb 
subgraph determined fly excluding edges search 
think bounding boxes traffic signs characterize region lead 
variation technique introduced geometric objects angular sectors bounding boxes application timetable information system 
extensive study showed bounding boxes fastest geometric objects terms running time competitive complex geometric objects terms visited nodes 
combining speed techniques section enlist pair speed techniques combined 
extension combination techniques straight forward problem combining solved 
goal directed search bi directed search 
combining goal directed bi directed search obvious may glance 
provides counter example fact simple application goal directed search forward backward yields wrong termination condition 
alternative condition proposed shown quite inefficient search direction reaches source direction 
results slower algorithm 
combining speed techniques shortest path computations overcome deficiencies simply edge weights forward backward search 
weights forward search directed target backward search preferred direction favors edges directed faster speed techniques 
combination computes shortest path shortest edge weights edge weights modified goal directed search goal directed search multi level approach 
described section multi level approach basically determines query subgraph multi level graph dijkstra algorithm run compute shortest path 
computation subgraph involve edge lengths goal directed search simply performed 
goal directed search shortest path bounding boxes 
similar multi level approach shortest path bounding boxes approach determines query subgraph original graph 
edge lengths irrelevant computation subgraph goal directed search applied 
bi directed search multi level approach 
basically bi directed search applied subgraph defined multi level approach 
implementation subgraph computed fly dijkstra algorithm node considered set necessary outgoing edges determined 
applying bi directed search multi level subgraph symmetric backward version subgraph computation implemented node considered backward search incoming edges part subgraph determined 
bi directed search shortest path bounding boxes 
order take advantage shortest path bounding boxes directions bi directional search second set bounding boxes needed 
edge compute set sb nodes shortest path exists 
store edge bounding box sb associative array bbb index set forward search checks target contained bb backward search source bbb 
multi level approach shortest path bounding boxes 
multilevel approach enriches graph additional edges 
new edge uk represents shortest path uk ing 
annotate new edge uk bb associated bounding box edge path 
schulz table 
number nodes edges test graphs street public transport planar waxman experimental setup section provide details input data consisting real world randomly generated graphs execution experiments 
data real world graphs 
experiments included set graphs stem real applications 
experimental turned realistic data quite important performance algorithms strongly depends characteristics data 
street graphs 
street graphs street networks cities surroundings 
graphs bi directed edge lengths euclidean distances 
graphs fairly large sparse bends represented polygonal lines 
representation street network possible efficiently find nearest point street point point search 
public transport graphs 
public transport graph represents network trains buses scheduled vehicles 
nodes graph correspond stations stops exists edge nodes non connection respective stations 
weight edge average travel time vehicles contribute edge 
particular edge lengths euclidean distances set graphs 
random graphs 
generated sets random graphs estimated average degree corresponds average degree real world graphs 
set consists connected bi directed graphs approximately nodes 
combining speed techniques shortest path computations random planar graphs 
construction random planar graphs generator provided leda 
number nodes uniformly distributed square lateral length triangulation nodes computed 
yields complete undirected planar graph 
edges deleted random graph contains edges replaced directed edges direction 
random waxman graphs 
construction graphs random graph model introduced waxman 
input parameters number nodes positive rational numbers 
nodes uniformly distributed square lateral length probability edge exists exp 
higher values increase edge density smaller values increase density short edges relation long edges 
ensure connectedness bi directedness graphs nodes belong largest connected component deleted slightly nodes remain graph bi directed insertion missing reverse edges 
set empirically determined setting yields average degree wished 
experiments implemented combinations speed techniques described sections graph fibonacci heap data structures leda library version 
code compiled gnu compiler version experiments run intel xeon machine ghz gb memory running linux kernel version 
graph combination computed set queries shortest paths measuring types performance mean values running times cpu time seconds number nodes inserted priority queue 
queries chosen random amount determined statistical relevance guaranteed see 
experimental results outcome experimental study shown figures 
diagrams analysis depicted figures 
combination referred tuple shortcuts go goal directed bi bi directed ml multi level bb bounding box xx respective technique go bi xx bb 
figures graphs ordered size listed table 
calculated different values denoting relative speed hand figures show speed achieved compared plain dijkstra combination techniques ratio performance plain dijkstra performance dijkstra specific combination schulz xx xx xx xx go xx xx xx xx bi xx xx go bi xx xx xx xx ml xx go xx ml xx xx bi ml xx go bi ml xx fig 

speed relative dijkstra algorithm terms visited nodes real world graphs order street graphs red public transport graphs blue xx xx xx xx go xx xx xx xx bi xx xx go bi xx xx xx xx ml xx go xx ml xx xx bi ml xx go bi ml xx fig 

speed relative dijkstra algorithm terms visited nodes generated graphs order random planar graphs yellow random waxman graphs green xx xx xx bb xx xx xx bb go xx xx bb go xx xx bb xx bi xx bb xx bi xx bb go bi xx bb go bi xx bb xx xx ml bb xx xx ml bb go xx ml bb go xx ml bb xx bi ml bb xx bi ml bb go bi ml bb go bi ml bb xx xx xx xx combining speed techniques shortest path computations go xx xx xx xx bi xx xx go bi xx xx xx xx ml xx go xx ml xx xx bi ml xx go bi ml xx fig 

speed relative dijkstra algorithm terms running time real world graphs order street graphs red public transport graphs blue xx xx xx xx go xx xx xx xx bi xx xx go bi xx xx xx xx ml xx go xx ml xx xx bi ml xx go bi ml xx fig 

speed relative dijkstra algorithm terms running time generated graphs order random planar graphs yellow random waxman graphs green xx xx xx bb xx xx xx bb go xx xx bb go xx xx bb xx bi xx bb xx bi xx bb go bi xx bb go bi xx bb xx xx ml bb xx xx ml bb go xx ml bb go xx ml bb xx bi ml bb xx bi ml bb go bi ml bb go bi ml bb schulz techniques applied 
separate figures real world random graphs number nodes running time respectively 
hand figures focus technique show combination containing speed achieved compared combination 
lack space figures dealing number visited nodes depicted 
example focusing bi directed search considering combination go bi xx bb say investigate factor performance gets better combination go bi xx bb go xx xx bb 
discuss technique separately combinations specific technique behave turn relation performance parameters measured number visited nodes running time define overhead combination techniques ratio running time number visited nodes 
words overhead reflects time spent node 
speed combinations goal directed search 
individually comparing goal directed search plain dijkstra speed varies lot different types graphs considering random graphs get speed planar graphs waxman graphs quite surprising 
little speed observed real world graphs 
concerning number visited nodes adding goal directed search multi level approach slightly worse adding plain dijkstra bi directed search get slight deterioration 
adding bounding boxes combinations including bounding boxes hardly beneficial 
real world graphs adding goal directed search combination improve running time 
generated graphs running time decreases 
particular advantageous add combination containing multi level approach 
conclude combining goal directed search multi level approach generally idea 
bi directed search 
bi directed search individually gives speed number visited nodes see running time types graphs 
combinations bi directed search speedup techniques situation different generated graphs number visited nodes running time improves bi directed search applied additionally goal directed search 
running time improves combination containing multi level approach combining bi directed search bounding boxes works 
case speed speed individual bi directed search types graphs 
combining speed techniques shortest path computations go xx xx xx go bi xx xx go xx ml xx go bi ml xx fig 

speed relative combination goal directed search terms visited nodes order street graphs red public transport graphs blue random planar graphs yellow random waxman graphs green xx bi xx xx go bi xx xx xx bi ml xx go bi ml xx fig 

speed relative combination bi directed search terms visited nodes order street graphs red public transport graphs blue random planar graphs yellow random waxman graphs green go xx xx bb xx bi xx bb go bi xx bb go bi xx bb go xx ml bb xx bi ml bb go bi ml bb go bi ml bb schulz xx xx ml xx go xx ml xx xx bi ml xx go bi ml xx fig 

speed relative combination multi level approach terms visited nodes order street graphs red public transport graphs blue random planar graphs yellow random waxman graphs green xx xx xx bb go xx xx bb xx bi xx bb go bi xx bb fig 

speed relative combination shortest path bounding boxes terms visited nodes order street graphs red public transport graphs blue random planar graphs yellow random waxman graphs green xx xx ml bb xx xx ml bb go xx ml bb go xx ml bb xx bi ml bb xx bi ml bb go bi ml bb go bi ml bb combining speed techniques shortest path computations multi level approach 
multi level approach crucially depends decomposition graph 
waxman graphs decomposed properly multi level approach combinations containing yield speed factors means slowing 
consider remaining graph classes 
adding multi levels goal directed bi directed search combination gives improvement range number nodes see 
caused big overhead multi level approach get considerable improvement running time realworld graphs 
combination bounding boxes multi level approach beneficial number visited nodes case street graphs 
multi level approach allows tuning parameters number levels choice selected nodes 
tuning crucially depends input graph 
believe considerable improvements results possible specific parameters chosen single graph 
shortest path bounding boxes 
shortest path bounding boxes especially applied planar graphs speed increases size graph see 
waxman graphs situation completely different graph size speed gets smaller 
explained fact large waxman graphs due construction long distance edges small ones 
shortest paths bounding boxes contain wrong nodes 
different types graphs bounding boxes individually combination goal directed bi directed search yield exceptionally high speed ups 
combinations include multi level approach improved 
overhead goal directed bi directed search overhead time visited node quite small bounding boxes factor compared plain dijkstra see figures 
overhead caused multi level approach generally high quite different depending type graph 
waxman graphs decompose overhead multi level approach large larger size graph increases 
large street graphs multi level approach overhead increases dramatically 
assume necessary add third level graphs size 
interesting note relative overhead combination goal directed bi directed multi level smaller just multi level especially generated graphs 
schulz xx xx xx xx go xx xx xx xx bi xx xx go bi xx xx xx xx ml xx go xx ml xx xx bi ml xx go bi ml xx fig 

average running time visited node real world graphs order street graphs red public transport graphs blue xx xx xx xx go xx xx xx xx bi xx xx go bi xx xx xx xx ml xx go xx ml xx xx bi ml xx go bi ml xx fig 

average running time visited node generated graphs order random planar graphs yellow random waxman graphs green xx xx xx bb xx xx xx bb go xx xx bb go xx xx bb xx bi xx bb xx bi xx bb go bi xx bb go bi xx bb xx xx ml bb xx xx ml bb go xx ml bb go xx ml bb xx bi ml bb xx bi ml bb go bi ml bb go bi ml bb combining speed techniques shortest path computations outlook summarize conclude speed techniques combine speed scale 
result goal directed search multi level approach combination bi directed search shortest path bounding boxes complement 
real world graphs combination including bi directed search multi level bounding boxes best choice number visited nodes 
terms running time winner bi directed search combination bounding boxes 
generated graphs best combination goal directed bi directed bounding boxes number nodes running time 
expensive preprocessing combination goal directed bi directed search generally fastest algorithm smallest search space waxman graphs 
graphs pure goal directed better combination bi directed search 
goal directed search speed technique works comparatively waxman graphs 
different behaviour conclude planar graphs better approximation real world graphs waxman graphs public transport graphs planar 
bi directed search speed techniques define modified graph shortest path searched 
shortest path easily determine shortest path original graph 
interesting question techniques applied directly modified improve running time shortest path algorithms 
furthermore specialized priority queues dijkstra algorithm shown fast practice 
queues provide results number visited nodes 
running times different interesting evaluate 

zhan noon comparison label setting label correcting algorithms computing shortest paths 
journal geographic information decision analysis 
barrett jacob marathe classical contemporary shortest path problems road networks implementation experimental analysis transims router 
proc 
th european symposium algorithms esa 
volume lncs springer 
time depending shortest path problems applications railway networks 
european journal operational research 
integrated traffic information system 
proc 
th int 
conf 
appl 
computer networking architecture construction design civil eng urban planning 

shekhar goyal materialization trade offs hierarchical shortest path algorithms 
proc 
symp 
large spatial databases 

barrett jacob marathe formal language constrained path problems 
siam journal computing schulz 
dijkstra note problems connexion graphs 
numerische mathematik 
fredman tarjan fibonacci heaps uses improved network optimization algorithms 
journal acm 
cherkassky goldberg shortest paths algorithms theory experimental evaluation 
mathematical programming 
zwick exact approximate distances graphs survey 
proc 
th european symposium algorithms esa 
lncs springer 
goldberg simple shortest path algorithm linear average time 
proc 
th european symposium algorithms esa 
volume lncs springer 
meyer single source shortest paths arbitrary directed graphs linear average case time 
proc 
th symp 
discrete algorithms 

pettie ramachandran sridhar experimental evaluation new shortest path algorithm 
proc 
algorithm engineering experiments 
volume lncs springer 
hart nilsson raphael formal basis heuristic determination minimum cost paths 
ieee trans 
sys 
sci 


shekhar coyle path computation algorithms advanced traveler information system atis 
proc 
th ieee int 
conf 
data eng 

schulz wagner dijkstra algorithm line empirical case study public railroad transport 
acm journal exp algorithmics 
ahuja magnanti orlin network flows 
prentice hall 
pohl bi directional heuristic search path problems 
technical report stanford linear accelerator center stanford california 
bidirectional heuristic search reconsidered 
journal artificial intelligence research 
hierarchical speed techniques shortest path algorithms 
technical report dept informatics university konstanz germany www ub uni konstanz de 

schulz wagner multi level graphs timetable information railway systems 
proc 
th workshop algorithm engineering experiments 
volume lncs springer 
jung efficient path computation model hierarchically structured topographical road maps 
ieee transactions knowledge data engineering 
wagner geometric speed techniques finding shortest paths large sparse graphs 
proc 
th european symposium algorithms esa 
volume lncs springer 
mehlhorn leda platform combinatorial geometric computing 
cambridge university press www com 

waxman routing multipoint connections 
ieee journal selected areas communications 
dial algorithm shortest path forest topological ordering 
communications acm 
goldberg shortest path algorithms engineering aspects 
proc 
international symposium algorithms computation isaac 
volume lncs springer 
