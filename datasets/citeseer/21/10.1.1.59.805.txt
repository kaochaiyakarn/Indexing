global scale service deployment platform evangelos tim ian pratt russ ross fraser steven hand tim harris university cambridge computer laboratory thomson avenue cambridge uk building platform global computing public infrastructure capable safely hosting untrusted distributed services behalf uncooperative paying clients 
service components execute resource managed virtual machines vms provide resource isolation protection allow execution arbitrary applications services 
assist deployment services platform provide effective solution allows users fully customize vms launched specifying operating system kernel image distribution file system 
implemented mechanisms facilitating easy efficient distribution kernel filesystem images users build vms configurations platform efficiently launch vms large numbers machines world 
initial experiences deployment infrastructure demonstrate platform provides practical substrate public global computing show complex service running user customized linux environment deployed multiple world seconds 
project building public infrastructure global scale service deployment 
machines undertake safe execution potentially competing untrusted services exchange money 
devised solutions research challenges previous allowing execution untrusted services possible performing reliable resource isolation servers 
traceability sponsors malicious tasks ensured auditing service activity infrastructure resource pricing accounting billing charging provides support uncooperative user communities 
microsoft research cambridge uk powerful higher level tools assist users server discovery selection developed 
focuses service deployment step users having selected number service deployed proceed contact configure start virtual machines accommodate service components launch service components 
platform needs conventional ad hoc means deploy services wide area due challenging requirements ease deployment necessary cost deploying large scale distributed services low terms money effort 
envisage offering users mechanisms configure deploy preparing vm configurations launching services large numbers servers trivial 
performance platform designed support deployment short timescales necessary launching services multiple servers world done quickly 
efficiency provide users full flexible control configuration virtual machines new vm specified ground terms file system image kernel 
naive deployment model incur transfers gigabytes selected service deployment raise cost deployment potentially prohibitive heights 
support migration services location sensitive meaning service instances may need migrated search tools determine better deployment positions network 
necessary deployment architecture allows services move low cost 
parallel deployment services may widely replicated platform support parallel deployment allow reconfiguration individual replicas 
propose model flexible efficient service deployment allowing dynamic migration virtual machines 
model described section 
section describes prototype implementation deployment infrastructure 
section initial experimental results aiming determine efficiency flexibility proposed architecture 
related existing distributed deployment infrastructures comprise deployment models adequate needs environments designed serve unsuitable general purpose global scale service deployment 
planetlab project provides distributed research testbed geographically distributed servers research community 
offers basic support service distribution requiring users connect ssh node individually copy configure control custom service process may tedious deploying hundreds nodes 
service developed 
considerably eases task distributing experimental software set planetlab nodes operates efficiently cdn 
aimed distributing operating system kernels entire file system images 
model users individually transfer data required service deployment server involved configure machines followed number service deployment infrastructures denali grid computing projects :10.1.1.6.3035:10.1.1.25.8254
grid services deployed apis provided grid infrastructure usually employs mechanisms gridftp data distribution 
system imaging technique enables archiving copying disk images usually containing operating system distributions applications 
images clone servers automating image deployment configuration 
partition image generates disk images uses domain specific data compression techniques employs local area multicast efficient distribution images local networks 
imaging systems focus replication entire disks memory contents machines local network ease configuration 
system different aims global scale data distribution cs princeton edu www org deployment time support node configuration parallel deployment virtual machine migration 
follows similar concept disk imaging facilitating imaging run time state machine files disk distributes virtual machines servers easier configuration 
internet suspend resume project allows users capture transfer state machines network 
targets movement single virtual machine points address parallel deployment node customization 
deployment model overlaying techniques allow users maintain customized views common distribution file systems kernel images 
define number immutable template images operating system kernels file systems images guaranteed persistently cached 
customers describe tailored image terms modifications templates called overlay 
greatly reduces amount data shipped deployment reducing setup time new virtual machine 
enables dynamic replication migration services proactively respond offered load 
template images stored locally client overlays remotely accessed network 
extra level indirection means clients may configure overlay independently virtual machine instantiated example customizations include new start scripts ssl certificates software packages 
overlay remote may shared multiple virtual machines running set facilitate replicated server instances easily accessed migrating services 
layers stacking supported allowing service instance customizations writeable directories required 
deployment scenarios user login virtual machine system boot start services automatically writing log information remote file system directory 
configuration implementation shown assumes trusted clients distributed storage service call 
store trusted reasonable management virtual machine mvm privileged vm responsible launching vms mount parts clients storage area 
overlaying functionality provided mvm copy write nfs server client virtual machines boot nfs root machine local virtual management virtual machine shared fs templates templates local storage persistent afs cache stacking cow server ro overlays fetched rw rw afs client custom overlay client custom overlay client nfs client domain nfs client domain remote trusted storage system guest os overlaid namespace client guest os overlaid namespace client client specifies kernel root fs images vm creation time deploying guest os model network 
nfs chosen supported wide range guest oses 
nodes provisioned connected servers access latency low data availability high 
require users buy storage 
implemented discuss due lack space alternative approach require clients implement copy write functionality virtual machine directly fetch overlays untrusted storage servers 
implementation copy write file server 
key component stacking copy write file system server overlays template images user provided file systems construct root file system client vm 
implementation interprets mount file directory specify list file systems overlay subtree unified namespace order mounts specified determines objects overrides reminiscent union directories plan 
modifications written listed writeable file system file write basis 

current implementation simply uses existing distributed file system provide remote storage users platform 
andrew file system persistent caching provides greatly increased performance relative wide area 
deal security issues ipsec vpn connect remote servers 
working replace afs file system designed precisely requirements current setup certainly adequate validate approach shown section performs adequately 
deployment infrastructure 
model user provided deployment specification includes url identifying overlaid file system 
software component called parses url uses scheme portion nfs afs determine file system type 
mounts remote overlay accessible mvm path chosen new vm identifier notifies copy write nfs server 
exports path may mounted user virtual machine link local address xen assigns virtual machine unforgeable purpose 
subtrees multiple file systems overlaid point path mounting may required ondemand 
stacking file system server invokes mount remote storage systems 
gives clear separation manipulation overlaid namespace performed stacking file system mounting templates remote file systems 
convention uses convention template name read operating system distribution templates 
immutable naming schemes provide guarantee client template contents underneath change 
mappings maintained known names template redhat current immutable identifiers allowing default distributions updated security patches applied 
choice resolution template identifier allows client specify degree service file system subject template maintenance process 
evaluation section evaluate process deploying service scratch resuming previously suspended image 
focus applications illustrative types service common platform apache web server quake game server 
breakdown costs various deployment steps deployment model described section 
experiments performed machines connected local gigabit ethernet 
dell machines configured dual ghz xeon processors gb ram gigabit ethernet nics hitachi dk ej gb rpm service overlay kb total fs kb proportion apache quake table size copy write overlays 
resume running apache launch launch launch launch apache time sec service deployment timeline showing individual operations time needed 
scsi disks 
overlays stored dual processor ghz machine gb ram running stock andrew file system server 
order measure wide area network effects controlled conditions emulator deployed machine configured ip gateway 
specified delay bandwidth limits ms kbytes sec respectively configuration illustrative arrangement client afs server cambridge uk new york 
rtts distributed normally standard deviation mean shown 
overlay size measuring deployment process services prepared overlays copy file system server mounted loopback local nfs client immutable template 
table shows total size modified files required support services small fraction total file system size 
impact network traffic discussed 
deployment timeline measure time necessary complete service deployment 
experiment repeated times measurements taken uk client perspective including latency appropriate components 
service deployment user contacts directly perform admission control assuming accept job configure instantiate virtual machines 
guest operating systems linux example boot deploy target applications 
findings shown 
users deploy new components new resumed user kb kb user mb kb kb table messages exchanged deploying service new guest os previously suspended total amount data exchanged brackets 
web server machines world seconds new quake server just seconds 
time taken spent booting guest os host new service 
timeline shows example xen capability suspend migrate resume entire guest operating system images 
restoring operating system image previously saved snapshot application deployment time reduced substantially just seconds example 
network traffic table shows average network traffic generated terms bandwidth messages exchanged deployment apache service completely new vm resuming previously suspended vm 
user accounts transfer apache overlay afs server 
performed service deployment rarely overlays shared gain significant saving simpler models require transfer virtual machine instantiation 
shows efficiency service deployment mechanisms emphasizes ease service migration suspend resume mechanism 
discussion approach overlays allows user trade degree customization require ensuing impact performance real world cost 
demonstrated section relative size overlay realistic service deployments generally small prevent user specifying entirely file system require 
overlays significantly eases management replicated services 
overlays constructed ahead time may applied deployed instance administrative intervention required instance migrates replicated 
contrast planetlab grids example require user actively transfer files servers :10.1.1.121.2837
addressed challenges wide area data distribution substantially lower barrier entry deploying new services applications global scale platform 
initial evaluation shows system operate efficiently provide rapid service deployment 
afs ipsec prototype pragmatic solution useful experience 
hand particularly suited platform environment particularly terms administrative model 
hope incorporate ideas sfs pond pasta produce appropriate realization near :10.1.1.12.2441
particular developing file system seamlessly combines push model distribution templates pull model demand caching 
process preparing medium scale deployment leasing number servers commercial location facilities world 
welcome expressions interest members research community act beta testers 
fraser steven hand timothy harris ian leslie ian pratt 
computing infrastructure 
technical report cl tr university cambridge computer laboratory january 
paul barham boris fraser steven hand tim harris alex ho rolf neugebauer ian pratt andrew warfield 
xen art virtualization 
proc 
th acm symposium operating systems principles sosp pages 
acm press 
steven hand timothy harris evangelos ian pratt 
controlling open platform 
proc 
th int conference open architectures network programming april 
david spence tim harris 
distributed resource discovery open platform 
proc 
th ieee symposium high performance distributed computing hpdc june 
peterson culler anderson roscoe 
blueprint introducing disruptive technology internet 
proc 
st workshop hot topics networks princeton nj october 
wang vivek pai larry peterson 
effectiveness request cdn robustness 
proc 
fifth symposium operating systems design implementation boston ma usa december 
whitaker shaw gribble 
scale performance denali isolation kernel 
proc 
th symposium operating systems design implementation boston ma usa december 
foster kesselman 
globus metacomputing infrastructure toolkit 
int journal supercomputer applications high performance computing summer 
thain tannenbaum livny 
distributed computing practice condor experience 
concurrency computation practice experience 
foster gannon 
open grid services architecture ogsa 
technical report global grid forum march 
allcock tuecke 
gridftp protocol specification march 
global grid forum gridftp working group document 
mike hibler leigh stoller jay lepreau robert ricci chad barb 
fast scalable disk imaging 
proc 
usenix annual technical conf pages san antonio tx june 
usenix association 
amr mendel rosenblum 
network virtual machine monitors dynamic content distribution 
proc 
th int workshop web content caching distribution wcw august 
michael satyanarayanan 
internet suspend resume 
proceedings fourth ieee workshop mobile computing systems applications page 
ieee computer society 
pike presotto thompson trickey 
name spaces plan 
proc 
th acm sigops european workshop pages 
satyanarayanan 
empirical study wide area distributed file system 
acm transactions computer systems 
davies blair cheverst friday 
network emulator support development adaptive applications 
nd usenix symposium mobile location independent computing 
bowman chun culler karlin muir peterson roscoe :10.1.1.121.2837
operating system support planetary scale network services 
proc 
st symposium networked systems design implementation march 
gridftp protocol specification march 
global grid forum recommendation 
david mazieres michael kaminsky frans kaashoek witchel 
separating key management file system security 
proc 
th acm symposium operating systems principles pages 
rhea eaton geels weatherspoon zhao kubiatowicz :10.1.1.12.2441
pond oceanstore prototype 
conference file storage technologies 
pratt harris 
storage mutability naming pasta 
proc 
int workshop peer peer computing networking pisa italy may 
