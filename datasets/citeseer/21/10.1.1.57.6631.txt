fxt transformation language xml documents alexandru helmut seidl department computer science university trier germany email psi uni trier de xml spreads various application domains transformation tasks xml documents accomplished increasing number non programmers 
respect providing just collection basic operations library special purpose language useful provide intuitive ruled approach xml transformation 
rule approach requires pattern matching identifying parts document processed 
xml document processing basically subarea tree processing functional programming style natural choose sml implementation language 
functional style implies processing model navigation possible subtrees tree 
restriction compensated tree pattern matcher able relate ancestors successors siblings match 
top powerful xml pattern matcher build fxt transformation tool xml documents 
functional processing model fxt uses allows implementation ecient implementations permitted processing model popular xslt navigation input tree proceed arbitrary directions 
usual transformations speci ed fxt intuitive declarative way 
elaborate transformations achieved hooks provided full functionality sml programming language fxt variable mechanism 
application domain processing hierarchically structured documents attracted functional programming style declarative speci cations 
sgml xml syntax quite heavily resembles lisp expressions 
document querying speci cation language dsssl iso originally designed superset lisp 
aim specify transformations documents way created understood non expert users typically know care execution models implementations 
goal partly achieved 
dsssl complicated semantics easily understood independently operational behavior dsssl processor 
holds true successor transformation language xslt see wad ort formally de ning semantics patterns xslt 
particular xslt drawbacks document model xslt model document tree functional view tree 
structured term document conceptually viewed collection linked nodes order allow required arbitrary navigation graph 
free navigation dicult reason meaning independently order relative navigation steps 
pattern language hand side weak basically identi es nodes document tree specifying tree relationships 
pattern matching xslt uses xpath operational model successive selecting ltering sets tree nodes 
matching pattern may require traversals number steps pattern 
hand overly strong allowing arbitrary tests performed selected set nodes providing features indexing matches arbitrary navigation document 
transformation specification transformer fxt fxt generator xml transformers conceptually xml documents textual representations trees 
xml processing mainly reduces tree processing 
typically modern functional programming languages built support manipulating tree data structures 
attempts integrate xml processing functional programming ms wr hp 
short overview par 
direction proposal somewhat di erent 
hand want support xml processing functional programmers 
hand want provide non specialist user tool transformational ideas expressed conveniently resorting general purpose programming language 
transformation tool xml documents 
build modern statically typed functional programming language sml mth bel 
main design goals provide declarative speci cation intended transformation possible provide primitives particular pattern matching implemented eciently allow maximal exibility fully integrating external programming interface 
sections describe concepts tool critically compare corresponding features xslt commonly xml transformation language 
dsl approach depicted fxt functional xml transformer fact generator xml transformers 
generates compiles sml code execution speci ed transformation 
fxt stylesheet transformation speci cation translated sml program directly application programmer compiled stand application 
clearly kind architecture domain speci language new 
fact system design implementation follows pre processing paradigm dsl implementation sketched 
advantage approach obvious clearly re implementing compiler support standard programming language features 
particular participate general enhancements compiler implementation free engineering extending re engineering prototypical language design rapidly implemented embedding sml code speci cations needed essentially trivial 
drawback approach apparent certain non syntactical errors currently pre processing phase follow compilation phase original source mal function dicult track 
problem partly alleviated system generating comments points back generated code corresponding fxt source locations 
popular solution extending functional languages speci domains enrich library combinators 
combinators higher order functions uniformly de ned exible combined 
small core functions de ned terms functionality required speci domain possible express 
number combinators libraries exist xml processing wr parsing sd pretty printing hug computer music 
see sas discussion approach advantage combinator approach general number algebraic laws combinators derived code annotated xml tree match patterns matcher pattern output xml input patterns matcher pattern select transformer phases xml transformation optimizations 
set operators de ned improve readability syntax remains limited syntax implementation language particular suitable describing xml content 
furthermore writing transformations terms combinators leads especially readable code making approach prohibitive users outside functional community 
think xml processing library combinators satisfactory 
processing model processing model xml transformations consider recursive transformers 
recursive transformer speci ed set rules 
rule consists match pattern identifying sub documents input rule apply corresponding action specifying transform sub documents 
action constructs piece xml content typically parts matching sub document selecting input recursively applying transformation 
sub documents recursive processing may selected select patterns context sub document transformation currently applied current sub document 
result transformation executing action associated rst match pattern speci cation matched root input document 
transformation applied sub documents selected recursive processing selected sub documents processed match pattern match initial input tree 
note match patterns refer initial input tree 
think transformation consisting phases 
rst phase pattern matching phase pattern matcher annotates node input tree corresponding matched patterns 
second phase transformation phase annotations guide actions taken 
example recursive transformation consider speci cation fxt transformation xml document produces list titles sections document section title default fxt pat elements contain match patterns rules action parts span trigger pattern fxt pat element 
example topmost element document transformed matches rst pattern 
corresponding action speci es result element type ul content recursively transforming content topmost element 
second rule says text inside title element section new li element created content matched text 
rule default pattern says transformation simply proceed sub documents content current sub document 
processing model recursive transformation described far xslt fxt quite natural basic xml processing applications 
main di erences xslt fxt consist classes match select patterns supported 
match patterns matching trigger patterns rules xml transformation language xslt relies pattern language xpath 
key idea xpath directory tree analogy document trees speci cations paths locate subtrees 
speci es path starts element proceeds immediate descendent element ultimate target element clearly paths expressive particular iteration operator allowing deep matching arbitrary descendent 
order enhance expressiveness xpath allows non regular features checking number match applying arbitrary predicate 
take completely di erent approach 
perspective non regular features dicult understand dicult implement eciently 
avoided pattern language 
provide support regular matching patterns related regular forest languages 
see point unnecessarily restricting patterns weak xpath core language 
build pattern matching facilities provided functional xml querying tool fxg 
principle admits arbitrary regular forest grammars patterns ns neu 
implemented deterministic pushdown forest automata 
key implementation trick compute transition tables automata advance demand transitions matching process 
total number transitions computed linear size input document practice typically possible transitions computed 
complexity pattern matching depend structural complexity patterns 
details capabilities implementation neu 
doubt power regular forest grammars exploited non expert fxt user 
fxt provides pattern language syntax similar spirit abbreviated syntax xpath additionally allows precise speci cations paths left right context paths 
structural conditions node may speci ed regular expressions tree patterns 
children node structural constraint refers ful ll regular expression 
structural conditions content brackets node refer 
example pattern ful lled element children followed child children 
contextual conditions vertical contextual conditions specify properties paths document trees 
opposed simple path expressions xpath provides full regular expressions vertical context 
example identi es node ancestors node 
kind deep matching clearly exceeds expressiveness xpath 
horizontal contextual conditions may speci ed regular expressions siblings node 
contextual constraint consists regular conditions node pattern 
suppose node pattern followed tree pattern 
child node matches node pattern matches tree pattern left siblings structurally match right siblings structurally match examples illustrate horizontal contextual conditions matches tree type children left siblings type right siblings type matches elements rst child fathers 
node test ful lled element types 
denotes arbitrary sequence nodes 
matches elements child fathers preceded elements 
note rst star wild card node test second operator regular expressions 
despite similar syntax operational models xpath completely di erent 
locates matches passes 
rst pass right left traversal input tree determines candidates matches nodes structure right context match 
second pass left right traversals identi es candidates matches left context matches 
contrast operational model xpath matches located number successive steps 
location step selects turn nodes nd speci ed relationship nodes selected previous step 
nodes selected location step may subsequently ltered predicates arbitrary xpath expressions 
example conceptually evaluated follows 
elements selected 
predicate lters having attribute value selects descendants remaining elements 
nodes type ltered nodes selected previous step 
select patterns processing node input document recursive transformation produce xml content recursively transforming set selected nodes 
nodes selected pattern matching process necessarily start root node input document determines matches relative node currently processed 
patterns dynamic matching process called select patterns 
selection transformation language xslt relies xpath patterns 
navigation operators match patterns select patterns may go upward document tree ancestors current node 
perspective arbitrary navigation document cause confusion intended meaning transformation error prone user easily gets conceptually lost 
reason fxt allows exactly patterns selection matching implying fxt transformation proceeds strictly top hierarchical structure input document 
transformations achieved simply proceeding top exclusively selecting descendants current node recursive processing 
consider example input document consecutive repetitions xml content avoided special place holder denoting previously de ned content 
transformation process xml input replace de nition place holder elements result processing xml content 
suppose xml content repetition avoided enclosed element def place holder element 
xslt transformation implemented selection non descendants nodes case preceding def element depicted transformation 
kind backtracking obviously achieved fxt selection mechanism 
turns transformation achieved fxt variables taste elegantly eciently 
transformation language fxt transformation speci ed xml document seen example section 
fxt speci cation fxt spec document element type essentially consists sequence rules 
rule starts fxt pat element containing triggering match pattern followed corresponding sequence actions 
patterns speci ed pattern language 
pattern default matching sub document xml document 
current sub document matches speci ed pattern rule corresponding action taken 
case patterns rule match earlier de ned rule takes precedence 
deviate xslt philosophy speci pattern succeeds 
opinion rule easier implement easier understand 
designing speci cation language action part follow approach chosen xslt xm ms default elements attributes constitute parts output 
calls transformation primitives potentially embedded foreign language code escaped 
case pre fxt identifying fxt actions 
basic actions provided fxt copying parts matching sub document element tags fxt attributes fxt content fxt inserting new xml content element tags fxt tag attributes fxt attribute fxt text fxt text 
output produced elements speci ed values special attributes recursive application transformation element fxt apply outputs sequence obtained applying transformation recursively children current node 
nodes processed explicitly selected pattern value select attribute 
consider transformation section list section titles xml document 
running input document sections section section 
section section transformation proceeds follows 
starts root node matched trigger pattern rst rule 
corresponding action creates ul element content fxt apply action 
fxt apply concatenates results recursively applying transformation children current tree 
children root node matched default pattern formal description syntax speci cation fxt transformation appendix form pseudo dtd 
ul li li section section result tree application transformation recursively descend children available speci ed fxt apply action default pattern 
transformation arrives text node title section matching second pattern speci cation transformation returns li element content text currently matched 
result tree transformation depicted 
xml syntax fxt speci cation language allows natural way expressing output transformation 
nesting structure output xml elements appear literally output directly recognized fxt speci cation 
convenience contrasted approaches xml libraries general purpose programming languages wr haskell non trivial speci cations soon incomprehensible 
variables tables complex transformations generated specifying di erent rules di erent sub documents recursion 
limitation transformations step transformer access sub document currently consideration 
order access information obtained earlier transformation nice possibility simply storing certain data 
decided include notion global variables fxt 
simple example fxt variables recall xslt speci cation transformation section 
processing element xslt transformation needed search backward occuring def element recursively transform 
opposed fxt remembers result processing def element forest variable 
value just looked transforming subsequent elements def processing hierarchically nested elements incur need introducing scopes variables 
way doing allow local variables visible just processing speci xml element 
re structuring transformations ask exible scoping rules 
decided organize variable stack meaning support push pop operations variables 
push operation introduces new scope pop leaves scope 
single fxt push element example creates rst instance variable initializes empty forest 
pushing popping fxt actions provided setting outputting values topmost elements 
special actions fxt provided comfortable tree forest variables 
speci cation generates transformation xml document containing li elements list items adds li integer representing number list item level li global variable declared type int 
li element transformed value output fxt get li tag copied output 
descending transformation sons current value incremented new level opened 
achieved means fxt push element introduces new instance variable initialized 
processing contents li element instance popped fxt pop 
noted xslt provides notion variables 
xslt variables lexically scoped global local visibility bound values type returned xslt expressions 
change value merely named constants 
xml documents xml representations graphs inherent cross structure represented directly xml document tree 
attributes type id idref may xml order provide xml document cross structure 
order deal documents fxt provides keys generalization xml ids 
key mechanism allows collect sub documents initial document table accessed keys 
example consider xml input document trier bonn speci cation transformation lists connections cities look follows edge way default fxt key element declares table keyed access called cities 
elements type node residing document stored keys id attribute value 
edge seen source destination edge retrieved table key value attribute respectively 
document transformed way trier bonn fxt ers possibility apply transformation sub documents associated key 
furthermore possible store tree arbitrary unicode string typically obtained processing tree 
interfacing sml expect features provided fxt rich satisfy basic needs non expert users system 
obviously potential uses particular xml processing specialists foreseeable 
advanced elaborated applications embedded fxt escape mechanism full programming language sml 
order clean way interface needed abstracts implementation details documents 
main types interfaces tree event 
event interface application serialized view document 
syntactical component document triggers event 
application register handler type events 
document inspected pre determined order 
example interface programming hooks provided functional xml parser neu sax interface objectoriented languages meg 
event interfaces suited pass applications tree interfaces support applications need multiple passes input 
tree case data type speci ed 
commonly document object model dom 
claiming designed programming language dom committed object oriented paradigm de nes class interfaces accessing xml documents 
views document tree graph arbitrary navigation possible 
functional document model di erent interface necessary functional style xml processing 
collection types useful functions haskell wr 
sml speci fxt de ne interface fdm functional document model provide implementation 
practical problem sml xml documents may contain legal unicode character uni sml supports bit characters notion unicode 
unicode library provided inside fdm declaring types unicode characters strings basic functions manipulating conversion functions sml strings 
types tree forest provided abstractions xml sub documents sequences xml sub documents respectively 
functions provided testing type content node accessing constitutive parts constructing di erent node types 
basic functionality supplied transforming sequences trees forests mapping successive composition folding ltering sorting outputting trees forests 
functional concept higher order functions possible elegantly obtain complex processing combining basic functions provided fdm 
consider excerpt fdm interface signature fdm sig type tree type forest tree vector 
testing type content val tree bool val tree bool val unicode vector tree bool val tree bool val unicode vector tree bool 
constructing node types val element unicode vector attribute list tree vector tree val text unicode vector tree 
constitutive parts val tree unicode vector val tree unicode vector val unicode vector tree unicode vector 
transforming forests val map tree forest vector val foldl tree forest val tree bool forest forest val int tree bool forest int forest val tree bool forest tree 
outputting val tree string string option unit val forest string string option unit names fdm functions self explaining 
example function expects predicate trees rst argument forest second argument 
returns rst tree forest satisfying predicate 
consider call tests node plain text content 
function returned takes forest returns rst tree forest having text content 
call string vector alfa string vector alfa returns unicode string alfa 
application unicode string returns predicate testing tree speci ed type 
application returns function takes forest returns rst tree forest having element type alfa 
embedding sml code transformations sml code embedded fxt speci cation attributes fxt actions 
values attributes sml expressions 
evaluation provide xml content output predicates ltering xml forests functions application document components 
speci cation transformation replaces element name containing characters rst characters val name current vector length name gt vector extract name name fxt tag outputs element name value attribute sml expression evaluating unicode string 
reserved fdm name current refers current sub document 
current returns name current element 
content output element content fxt tag element 
default pattern speci ed default action considered added trees match speci ed patterns 
default action copies root current tree recursively applies transformation children outputs text nodes 
typeful transformations currently fxt transformations un typed sense guarantee newly created documents conform speci document type 
fact possible produce output extensively feature order create html pages tools online 
situations perceivable guarantees relationship document types input output desirable 
suggestions direction 
approach build type safety transformation language 
approach pursued language proposal xm sketches enhancement haskell type checking mechanism guaranteeing conformance element forests content models ms 
nite tree automata hosoya pierce developed type system small tree transformation language xduce hp 
provide exponential time algorithm statically inferring types program expressions 
language similar xm provides restricted forms pattern matching 
deal attributes dynamic modi cation element tags 
approach transformational model formal device general typing algorithms provided 
advocated suciu msv 
suciu proposes formal concept pebble transducer proves decidability result 
best currently known upper complexity bound decision procedure way feasible practice 
clear model deal fxt type pattern matching speak dynamic modi cation element tags 
approach suggested ll 
propose trigger transformation document level reorganization document type 
interesting topic research far idea integrated general xml transformation language 
traversals strategies fxt transformations proceed traversals input document 
traversals determining matches triggering match patterns rules 
possibly traversals allow ll tables random access selected document parts 
main traversal produces output 
suce standard document processing needs 
think applications complicated traversal organization needed 
particular desirable compose transformations di erent kinds 
experiences calculi compositions particularly collected area term rewriting languages 
term rewriting languages area tree processing usually applied program transformation 
programs represented terms built variables constant function symbols 
transformations typically speci ed number rules form rules similar fxt xslt rules 
left hand side term pattern right hand side term template 
template instantiated rule applied term matching left hand side 
application rule controlled strategy certain sense corresponds traversals 
typically term rewriting uses standard xed strategy 
term rewriting languages stratego vis vis vis user provide strategies 
stratego strategy operation transforms term term fails 
basic building blocks strategies matching terms building terms variable bindings 
complex strategies obtained strategy operators 
divided operators sequential programming operators term traversals 
rules abbreviations allow conveniently specify basic strategies 
separation matching construction terms building scopes variable bindings allows pattern matching expressive functional programming languages ml pattern matching done simultaneously recognizing structure binding variables sub terms 
example pattern match passed local strategy match sub terms variable depth subject term 
feature stratego possibility expressing patterns describe recursive structure 
elan bkk term rewriting language strategies 
features support associative commutative pattern matching 
stratego special support xml processing 
comparing fxt xslt implementations order assess time performance fxt compared xslt processors 
xalan processors part apache xml project pro xalan java xalan saxon processor written java kay 
considered benchmark transformations birds xml input kb description classes birds output plain text le presenting information input indented manner gca xml input kb fxt presentation conforming dtd gca xml conference proceedings bs output html layout lines xml input kb shakespeare ends play bos output collection lines play baseball xml input kb baseball statistics har output html tables containing processed information baseball players 
xml input kb shakespeare play output collection matches complex patterns benchmarks executed linux kernel amd athlon mhz processor 
jvm run benchmarks java xslt implementations sun jvm implementation java version 
times listed measured single run corresponding transformation 
total times fxt include time needed generate compile sml code achieve transformation 
application size transformer parsing processing stylesheet transforming total xalan fxt birds kb saxon xalan java xalan fxt gca kb saxon xalan java xalan fxt lines kb saxon xalan java xalan fxt baseball kb saxon xalan java table transformation times seconds 
total times xslt processors take account time needed processing stylesheets 
stylesheet source transform multiple xml sources 
case stylesheet needs processed rst transformation 
sensible individually list time taken processing stylesheets 
time spent parsing xml input signi cant individually listed results 
times startup jvm sml runtime system considered 
patterns rst transformations simple 
fxt proved general faster java processors able keep xalan 
table shows results rst transformations 
contain elaborate completely meaningful patterns 
play sequence acts containing sequence scenes 
scene sequence speeches containing speaker sequence lines containing plain text 
collects lines speeches appearing scenes bertram 
dtd shakespeare plays lines matched xpath pattern scene speaker bertram speech speaker line corresponding pattern scene speaker bertram speech speaker line note di erences patterns due fact structural conditions brackets expressed xpath xpath predicates regular conditions ful lled sons preceding node 
rst xpath predicate comparison node set selected speaker string bertram true string content speaker descendant scene element equal bertram 
corresponding structural constraint tells children scene element consists arbitrary sequence trees speci ed wildcard followed node containing descendant speaker containing text bertram followed arbitrary sequence trees 
collects speeches scenes containing line having word husband act containing line having word abundance 
xpath functionally equivalent patterns act line contains abundance scene line contains husband speech respectively act line abundance scene line husband speech application transformer parsing processing stylesheet transforming total xalan fxt saxon xalan java xalan fxt saxon xalan java table transformation times elaborate patterns seconds 
suppose xpath implementation xslt processors re ect processing model xpath imposing multiple tree traversals incur lot processing time 
processing times table 
fxt performs signi cantly faster xslt implementation 
considered dependency transformation time size input document 
input document augmented duplicating acts play doubling breadth input tree 
expected ect fxt xslt transformations doubling transformation steps 
size time dependency showed linear 
fxt transformation language xml documents 
fxt combines eciency pattern matching provided simple powerful set transformation primitives clear programming interface functional programming language sml 
features mentioned fxt ers number features allow convenient expressive speci cations 
conditional processing allowing specify sequence actions considered condition ful lled 
attribute insertion deletion replacement 
sml code inserting processing instructions computed content arbitrary unicode content 
sorting ltering forests generated transformation 
command line arguments transformations 
details refer online documentation ber 
experience expressivity pattern language additional features fxt stackable variables compensate fxt restrictions navigation input document 
restriction allowed provide elegant understandable speci cation language document transformation implementation outperforms comparable implementations xslt 
acknowledgments development fxt supported dfg research foundation 
grateful referees cit journal issue dsls valuable comments previous version article 
bel standard ml new jersey 
home page 
available online cm 
com cm cs 
ber alexandru 
fxt 
online documentation 
available online www 
informatik uni trier de fxt 
bkk peter claude kirchner kirchner pierre etienne moreau christophe ringeissen 
overview elan 
electronic notes theoretical computer science volume 
elsevier science publishers 
bos jon editor 
complete plays shakespeare marked xml 
available online metalab unc edu xml examples shakespeare 
bs alexandru helmut seidl 
fxt transformation language xml documents 
xml conference exposition 
van deursen klint visser 
domain speci languages annotated bibliography 
acm sigplan notices june 
fxg andreas neumann 

source code 
available online www 
informatik uni trier de 
andreas neumann 

source code 
available online www informatik 
uni trier de 
har harold editor 
baseball statistics xml sample files 
available online metalab unc edu xml examples xml 
hp haruo hosoya benjamin pierce 
xduce typed xml processing language 
proceedings third international workshop web databases webdb dallas texas pages may 
available online www cis upenn edu xduce 
hug john hughes 
design pretty printing library 
john jeuring erik meijer editors advanced functional programming tutorial text international spring school advanced functional programming techniques astad sweden volume lecture notes computer science pages 
springer heidelberg 
iso international organization standardization 
information technology processing languages document style semantics speci cation language dsssl 
ref 
iso iec 
kay michael kay 
saxon 
software documentation 
available online saxon 
sourceforge net 
ll ralf wolfgang 
format evolution 
proc 
th international conference reverse engineering information systems volume books 

meg david alias editors 
sax simple api xml 
online documentation technologies may 
available online www com sax index html 
ms erik meijer mark shields 
xm functional language constructing manipulating xml documents 
draft 
msv tova milo dan suciu victor vianu 
typechecking xml 
proceedings acm symposium principles database systems 
mth robin milner mads tofte robert harper david macqueen 
de nition standard ml revised 
mit press 
neu andreas neumann 
parsing querying xml documents sml 
phd thesis university trier trier 
ns andreas neumann helmut seidl 
locating matches tree patterns forests 
arvind editors foundations software technology theoretical computer science th fst tcs volume lecture notes computer science pages 
springer heidelberg 
par parsia 
functional programming xml 
online article xml com 
available online www xml com pub functional html 
pro apache xml project 
xalan 
software documentation 
available online xml apache org xalan index html 
sas swierstra 
designing implementing combinator languages 
swierstra oliveira editors third international summer school advanced functional programming braga portugal volume lecture notes computer science pages 
springer heidelberg 
sd swierstra duponcheel 
deterministic error correcting combinator parsers 
john launchbury erik meijer tim sheard editors advanced functional programming volume lecture notes computer science pages 
springer heidelberg 
uni unicode consortium 
unicode standard version 
addison wesley developers press reading massachusetts 
vis eelco visser 
strategic pattern matching 
rewriting techniques applications rta trento italy volume lecture notes computer science pages 
springer 
vis eelco visser 
stratego manual 
technical report institute information computing science universiteit utrecht utrecht netherlands 
vis eelco visser 
stratego language program transformation rewriting strategies 
appear rewriting techniques applications rta utrecht netherlands 
springer 
steve byrne mike champion alias editors 
document object model dom level speci cation version 
recommendation world wide web consortium october 
available online www org tr rec dom level 
james clark editor 
xsl transformations xslt version 
recommendation world wide web consortium november 
available online www org tr xslt 
james clark steve derose editors 
xml path language xpath version 
recommendation world wide web consortium november 
available online www org tr xpath 
wad philip wadler 
formal semantics patterns xslt 
markup technologies philadelphia appear december 
available online cm bell labs com cm cs wadler papers xsl semantics xsl semantics ps 
wr malcolm wallace colin runciman 
haskell xml generic combinators type translation 
peter lee editor proceedings international conference functional programming paris france pages 
acm press new york sept 
syntax fxt speci cation actions literal xml element pcdata fxt fxt apply fxt fxt attribute fxt fxt fxt fxt fxt fxt fxt fxt fxt fxt cr fxt current fxt fxt fxt fxt ht fxt fxt literate fxt pi fxt pop fxt push fxt fxt fxt set fxt fxt fxt sml fxt sp fxt switch fxt tag fxt text fxt pop fxt set fxt fxt table followed arbitrary number actions arbitrary number rules fxt pat element fxt fxt apply fxt fxt arg fxt attribute fxt fxt fxt fxt fxt cr fxt current fxt fxt fxt fxt ht fxt pi fxt pop fxt push fxt fxt set fxt fxt sml fxt sp fxt table fxt text empty sequence fxt actions fxt case fxt fxt fxt fxt fxt fxt default fxt fxt fxt fxt tag action default name nmtoken required val nmtoken required test nmtoken implied select nmtoken implied name nmtoken required key nmtoken required name nmtoken required val nmtoken required name nmtoken required name nmtoken required val nmtoken required name nmtoken required name nmtoken required key nmtoken required name nmtoken required type nmtoken required implied name nmtoken required select nmtoken required key nmtoken required structure nmtoken required file nmtoken implied nmtoken required data nmtoken required name nmtoken required val nmtoken required name nmtoken required val nmtoken required name nmtoken required val nmtoken required name nmtoken required name nmtoken required select nmtoken required key nmtoken required item nmtoken required 
