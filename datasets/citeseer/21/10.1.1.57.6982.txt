translating uppaal quite hendriks computing science institute csi march computing science institute nijmegen faculty mathematics informatics catholic university nijmegen toernooiveld ed nijmegen netherlands translating uppaal quite martijn hendriks computer science university nijmegen toernooiveld ed nijmegen netherlands sci kun nl 
project presents simple translation uppaal models real time controllers nqc programs 
modeling controllers uppaal provides way verify requirements controllers 
user directs translation de ning type variable model assigning automaton model controller 
translation implemented tool uppaal nqc results set nqc programs nqc programs run concurrently approximately realizes subset executions model 
uppaal model controllers experimental lego setup translated resulting nqc programs run setup validate translation 
keywords real time timed automata compiling model checking synthesis 
ams subject classi cation 
cr subject classi cation 
model checkers emerge practical tools modeling validation veri cation real time systems 
support development formal models real time controllers provide easy way compute properties models 
requirements real time controller satisfy formulated properties model 
controller railroad crossing example satisfy safety liveness requirements 
safety requirement gate closed train near 
example liveness requirement gate eventually open trac cross railroad 
model possesses properties satis es requirements assumed correct step realize formal model 
realization general manual process semantics model misinterpreted possibly resulting badly behaving real time controller 
larsen pettersson describe guided synthesis control programs uppaal scheduling problem batch plant solved model checker uppaal realization controller plant automatically obtained 
problem face synthesize controller plant produces certain amount batches di erent qualities steel amount time 
start report written context course research lab fall 
uppaal model plant models possible behaviors 
behavior plant produce batches time translated reachability question solvable uppaal 
result reachability analysis trace actions model timing information actions 
expect able validate approach real steel plant lego plant controlled lego rcx computers 
timed trace projected lego rcx control programs 
validation control programs physical lego plant turned successful 
drawback rcx control programs handle input possible execution uppaal model realized 
project assumed contrast approach formal model real time controller available 
problem nd way automatically obtain control programs realize model 
relevance solution problem twofold 
time gained automatically obtain realization formal model realizing model hand 
second realized real time controllers certain assumptions function speci ed requirements requirements veri ed model checker automatic realization preserves semantics formal model 
speci project proposes translation uppaal models programming language quite nqc lego rcx computer 
problems arise modeling 
uppaal model models general rcx computers models result nqc programs 
second way model speci aspects rcx uppaal 
example user able model sensor value rcx sensor uppaal projected nqc 
problems solved letting user insert compiler directives direct translation uppaal model 
ideally translation preserve semantics uppaal model 
indicate case 
control structure nqc programs assures certain subset executions uppaal model approximately realized 
translation implemented compiler called uppaal nqc 
compiler translate uppaal model experimental lego setup nqc 
various test runs showed automatically obtained control programs behaved expected 
rest report organized follows properties target platform rcx computer programming language nqc studied section 
section model checker uppaal introduced 
section explained user include additional information uppaal model 
example uppaal model model experimental lego setup available kun 
sections translation uppaal models nqc programs proposed 
constraints translation places uppaal models described section 
relation translation model explained section 
translation discussed 
rcx platform nqc lego rcx computer big lego brick processor inside 
capable interpreting assembly low level language 
uppaal models translated programming language nqc 
dave baum compiler translate nqc program assembly language download assembly rcx 
rcx computer chosen target platform translation experimental lego setup controlled rcx computers readily available testing purposes 
uppaal models translated directly assembly language rcx nqc expressive easier understand learn assembly language 
point presumably construction translation easier 
argument favor assembly language resulting code probably ecient extra time needed learn language available 
subsections rcx hardware various rcx api calls interfacing hardware described 
features rcx nqc ones translation 
sensors actuators rcx rcx sensors actuators various kinds 
possible sensors light sensitive sensors touch sensitive sensors 
attributes associated physical sensor 
attributes type mode sensor con gured sensor 
con guration sensor attribute value read 
tasks accomplished rcx api calls prototypes stated void sensor type con gures sensor type 
void sensor mode con gures sensor mode 
int sensor reads sensor value 
nqc provides macro de nitions 
arguments sensor type mode functions nqc macro ones listed tables 
sensor sensor sensor sensor type sensor type touch sensor type temperature sensor type light sensor type rotation possible value mode argument domain value returned call table mode domain sensor values sensor mode raw sensor mode bool sensor mode percent sensor mode rotation ticks revolution nqc argument api call listed macro 
example second line code correct int sensor mode bool sensor code replaced correct nqc code sensor sensor mode bool possible actuators rcx motors lights actuators build 
actuator attributes con gured mode direction power 
con guration accomplished rcx api calls prototypes stated void setoutput output mode switches actuator void output dir switches rotation direction motor 
void output power sets power min 
max 
power 
possible values attributes output mode dir power listed output mode flip dir fwd rev toggle power input attributes rcx api calls syntactical correct arguments exception power argument macro listed tables :10.1.1.43.9418
sensor actuator attributes default values attributes con gured programmer 
default values see dave baum nqc programmer guide 
infrared messages rcx infrared transmitter receiver communicate rcx enable easy downloading control programs 
bu er incoming mes sages size message stored 
message integer value range 
default value message bu er 
api calls concerning messages available prototypes void sets value message bu er 
void sendmessage sends message value 
int message returns value message bu er 
sendmessage call sends message rcx close including 
note call rcx certain system value message bu er regarded global value 
rcx read write value message bu ers rcx contain value 
timers rcx handle maximum timers clocks 
timer identi ed unique natural number range 
timer resolution ms means timer value increased ms api calls available prototypes void resets timer zero 
int timer returns value timer 
variables tasks subroutines rcx handle maximum bit signed integer variables 
means nqc program variables 
rcx feature maximum tasks scheduled roundrobin way de ned 
nqc program task main task 
main task start tasks nqc program 
rcx maximum subroutines 
details tasks subroutines nqc general see dave baum nqc programmer guide 
uppaal uppaal uses theory timed automata model simulate verify systems real time controllers 
ease usage main reason choose tool 
brief uppaal de nitions descriptions uppaal nutshell section :10.1.1.43.9418
sections referred uppaal current version time report version meant 
uppaal model consists general network timed automata nite control structure real valued clocks communicate channels shared variables 
timed automaton tuple act inv nite set locations initial location act nite set sending receiving actions internal action nite set integer valued variables nite set real valued clocks inv partial mapping assigns location invariants locations act corresponds set edges 
set guards set assignments actions synchronization automata system 
action sending action uppaal denoted receiving action uppaal denoted 
example automaton enabled edge action 
automaton enabled edge action execute transition step 
details actions synchronization see uppaal nutshell timed automata :10.1.1.43.9418
location invariant form control certain location location invariant location violated 
location invariants insure progress 
default location invariant true 
guard sets conjunction timing data constraints 
timing constraint form data constraint similar form default guard edge true 
assignment form clock integer variable expression 
uppaal clock assignments resets simple form integer assignments may complex forms see help menu tool uppaal 
de nition uses power set assignments 
means edge labeled arbitrary number assignments 
semantics uppaal model de ned underlying transition system timed automata 
kinds transitions possible action transitions automata synchronize certain state means location edge enabled enabled edges contain complementary actions take edge leading single step new state 
automaton internal edge enabled edge labeled action edge taken synchronization 
delay transitions certain state long automata violates location invariant current location time may progress ecting current location automata clock values incremented elapsed duration time 
uppaal provides syntactical semantical additions de nitions 
notions urgent channels actions urgent locations committed locations 
meaning urgent channel delay transition synchronization action urgent channel enabled 
meaning urgent location extra clock reset zero going transitions location 
extra guard added location invariant 
intuitively means delay location 
meaning committed location certain automaton urgent location action transition involve particular automaton 
model rcx controllers uppaal project build real time system adding control software existing hardware 
uppaal model translated control software existing situation 
consider case lego real time system certain number rcx computers 
situation general exist reasons 
rst reason rcx computer limited resources maximum sensors actuators 
second reason real time system consist independent subsystems physical connected interact 
uppaal model translated equal number nqc programs nqc program rcx computer 
controller realized certain platform user able include aspects properties platform model 
target platform rcx possible model sensor actuator attributes ir bu er explained section 
considerations give rise problems distribution lego real time system consists general rcx 
translation uppaal model system result nqc programs rcx 
problem nd automata uppaal model nqc program 
furthermore uppaal model contain automata model environment system veri cation simulation purposes 
environment automata translated nqc 
automata recognized 
rcx speci properties user able model aspects rcx uppaal 
natural model attributes sensor values actuator modes integer variables 
problem nd variable uppaal model models aspect rcx 
annotation method introduced solve problems 
user add certain uppaal comments integer variable declarations process de nitions uppaal model 
placed integer declaration comment tells compiler aspect modeled integer variable 
placed process de nition comment tells compiler automaton models environment nqc program 
compiler directives recognizable keyword rcx formally explained sections 
trains gates uppaal example experimental lego setup built kun jeroen 
setup consists interwoven tracks circular railroad track train circular track followed car 
tracks intersect twice 
rst intersection bridge second intersection railroad crossing guarded gates 
setup uses rcx 
rcx controlling train drives circles railroad track 
rcx controlling railroad crossing 
third rcx controlling car follows track encounters railroad crossing 
project rcx control train crossing considered 
rcx controls crossing uses motor lower raise gates 
uses warning lights signal car gates lowered 
rcx receives input light sensors signal approach departure train 
receives input touch sensor determine gates lowered successfully 
rcx controls train uses motors driving 
rcx communicate infrared channel 
example gates lowered successfully train warned dangerous situation failure message 
train passed gates rcx controls crossing signals train speed ok message 
control programs rcx exclude certain dangerous situations collisions train car 
order obtain programs controller software run rcx control train crossing modeled uppaal uppaal model compiled nqc programs 
uppaal model 
process de nition section system de nition displayed 
comments process de nitions train trainalarm direct automata nqc program train 
comment process de nition gate directs automaton nqc program gate 
comment process de nition env de nes automaton automaton models environment 
rcx block train train failure ok rcx block train trainalarm rcx block gate gate failure ok sns sns sns rcx environment env sns sns sns system train trainalarm gate env global declarations section uppaal model displayed 
second comment rcx ir compiler directive 
means global variable ir models ir bu er rcx system 
third fourth fth comment de ne associated global variables model sensor values 
message constants const failure const ok rcx ir int ir chan start alarm alarm rcx sns value int sns rcx sns value int sns rcx sns value int sns templates process de nition section de ne automata system 
template de ned 
local declarations 
variables pow pow model power attributes output output rcx controls train 
variables left dir right dir model directions variables left right model mode outputs 
const const rev rcx power int pow rcx power int pow rcx direction int left dir rev rcx direction int right dir rev rcx mode int left rcx mode int right shows template models controller train 
train simple automaton 
transitions contain synchronization action start alarm 
alarm possibly started variable models ir bu er rcx contains value failure 
alarm stopped variable models ir bu er rcx contains value ok const failure ok idle alarm ir failure pow pow start alarm 
ir ok pow pow alarm 
template 
second template de ned 
local declarations 
variable alarm light models mode attribute output rcx controls train 
alarm light train ash failure message received 
clock int light const const rcx mode int alarm light shows template models alarm train 
job automaton light ash 
modeled switching value variable alarm light models output mode actuator values 
idle alarm light light start alarm 
alarm light alarm 
light light alarm light light light alarm light template 
third template de ned 
automaton gate instance template controls railroad crossing directed nqc program automata train trainalarm 
local declarations 
variables linked compiler directives output rcx md mp model motor raises lowers gates 
values initialized way motor turned gates raised 
variables linked output rcx model warning lights gate 
initialized way variables model type mode attributes touch sensor senses physical gates lowered 
variable models value parameter template declared globally 
way variable shared automaton environment automaton necessary veri cation simulation purposes 
holds light sensors detect approach departure train 
clock threshold value train approach const tr app threshold value gate closed const gt cl constants nqc macro const const const rev const fwd const sensor type touch const sensor type light const sensor mode raw const sensor mode percent rcx direction int md fwd rcx power int mp rcx mode int rcx power int rcx mode int rcx power int rcx mode int rcx sns type int sensor type touch rcx sns type int sensor type light rcx sns type int sensor type light rcx sns mode int sensor mode percent rcx sns mode int sensor mode percent rcx sns mode int sensor mode percent shows template models controller gate :10.1.1.43.9418
initial location assumes train far away gates raised assigning right value variables modeling actuators gate see model local declarations 
location idle gate waits light sensors senses const failure ok int idle wait car wait close closed closed opening open gate init wait train leave md rev gt cl ir failure ir ok md fwd ir ok md fwd md fwd md fwd template 
approach train 
transitions location wait car switch warning lights car gate 
control remains time units location wait car possibly car move railroad closing gate 
transition wait close activates actuator closes gate 
gate closed properly sensed touch sensor actuator closes gate turned control passed closed 
time units elapse sensor reporting properly closed gate control passed closed actuator closes gate turned failure send 
locations closed closed transitions opening train leave di erent directions 
happens location closed ok send 
control remains location opening gate open control passed wait train leave 
ect location period sensors 
necessary due possible slowness physical train 
timing constants occur result experiments jeroen 
template de ned 
local declarations variable arguments 
arguments model value attribute sensors rcx controls crossing 
template 
job automaton provide sensor input 
shows template models environment system 
int template 
veri cation purposes properties model proved uppaal 
property states controller gate location closed means physical gate probably closed closed variable ir models ir bu er rcx value failure 
gate closed imply ir failure property states liveness property 
executions model reach location controller gate location opening 
gate opening property states controller gate location closed means physical gate closed variable ir models ir bu er rcx value ok 
variable ir messages sent 
gate closed imply ir ok ir property states controller train location alarm alarm light train moving slow 
train alarm imply trainalarm train pow train pow properties relatively straightforward 
dicult imagine models real time controllers things complicated 
cases uppaal provides easy way model large prove disprove properties 
parsing uppaal system de nition les rst step realizing uppaal model parsing le contains system de nition 
unix tools yacc lex construct parser le format 
parser recognize conditional assignments id avoided transitions 
noted assumed grammar probably completely correct derived structure les bnf grammar help menu tool uppaal 
bnf grammar contain rules generate les 
testing tool uppaal nqc parser job 
set timed automata system listed system de nition section le extracted 
templates instantiated corresponding arguments listed process de nition section 
process integer variables constants clocks model renamed 
constants nqc macro see section renamed 
integer variables constants clocks globally declared uppaal model keep names 
integer variables constants clocks local automaton uppaal model pre xed name automaton underscore 
integer variables constants clocks arguments automaton resolved name case constants value global parameter 
successful parsing le result set timed automata de ned section extended extra information extra information originating uppaal notions constants arrays urgency commitment 
mentioned section user include extra information realization controller model dicult called type mapping de ned explained section 
second user assign automaton nqc program 
explained section 
constructing type mapping section pointed sensor actuator attribute ir bu er rcx modeled uppaal model 
realize model necessary know variable models attribute variable models ir bu er 
information included uppaal model form comments variable declarations 
type mapping constructed maps variable uppaal model set denoted type sns type sns mode sns val sns type sns mode sns val sns type sns mode sns val mode dir power mode dir power mode dir power ir rst elements express sensor actuator attribute modeled 
type ir express variable models ir bu er rcx system 
mentioned section values ir bu ers nqc program system uses call 
ir bu ers modeled variable 
type express fact uppaal variable model sensor actuator attribute model ir bu er 
variables called internal variables 
integer variable annotations compiler directives placed variable declarations uppaal model user 
compiler directives regarded uppaal comments parser recognize process 
general form compiler directives integer variables rcx compiler directive stated declaration variable type mapping updated integer variable compiler directive assumed type 
controller environment automata section pointed exist compiler directives process de nitions uppaal model 
rst environment directive rcx environment compiler directive means automaton de ned directly environment automaton added set timed automata result parsing step 
mentioned section uppaal model general result nqc programs 
de ne automata program compiler directive rcx block compiler directive means automaton de ned directly construct nqc program name compiler directives placed process de nition 
processes de ned process de nition section uppaal model environment compiler directive block compiler directive 
realization controllers result previous step parsing le set timed automata extended extra information speci ed section 
automata directed nqc program user translated single nqc program 
example automata train trainalarm construct nqc program automaton gate construct nqc program 
general result parsing step set timed automata fa partitioned blocks compiler directives described section 
block translated nqc program 
set nqc programs simulate underlying transition system uppaal model system de nes semantics model :10.1.1.43.9418
nqc program simulates transition system de ned automata certain block blocks translated nqc uppaal model approximately realized concurrent execution programs 
subsections translation block nqc program described top way 
general control structure simulate transition system execution model implemented nqc 
main task subroutines explained sections 
main task nite loop interleave transitions automata block nest possible way 
automaton execute zero action transition iteration body loop 
automaton determine take action transition input read call subroutine read input 
alternative read input needed evaluation guards edges 
result scheme choice edge take possibly di erent input values 
top probably ecient keep local copy input values copies evaluation reading input time needed hardware 
order implement execution model active location automaton held global variable program counter automaton 
name variable name automaton pre xed pc 
program counter initialized initial location corresponding automaton declaration 
program counter values de ned location names automaton special value deadlocked see section 
location names de ned macro nqc program explained section 
example global declarations initializations program counters global structure main task block train example section depicted definitions macro see section declaration initialization program counter int pc train idle pc trainalarm idle clocks input variables subroutines see section task main declaration local variables see section initialization output attributes see section reset timers see section transitions automaton train read input pc train idle transitions see section pc train alarm transitions see section transitions automaton trainalarm read input pc trainalarm idle transitions see section pc trainalarm transitions see section example seen automaton program counter value deadlocked executes action transitions anymore 
zero action transitions executed automaton letting automata block execute zero action transitions 
execution model implicates action transitions taken soon enabled certain timing uncertainty discussed section 
translation uppaal constants location names nqc compiler provides possibility macro de nitions translate constants uppaal model 
consider constant value automaton block 
arguments api calls section prede ned nqc 
string equal argument done nqc compiler handle macro 
line form added nqc program define section mentioned location timed automaton block mapped natural number macro de nition ect location names nqc program 
locations set locations block mapping locations constructed 
locations line form added define macro de ned deadlocked state automaton 
constant natural numbers chosen equal value mapping macro define deadlocked macro de ned nqc program results translation block train example constant block train define failure define ok location block train define idle define alarm define define deadlocked note constants rev nqc macro de ned 
translation uppaal clocks easy natural way translate clocks automata certain block hardware timers rcx 
hardware timers identi ed natural number mapping cb cb set clocks block constructed block assign unique number clock 
uppaal clocks value execution begins clocks reset zero just start nite loop 
achieved adding line main task start loop clock cb exact position lines see section 
example uppaal model translation block train gives clock resets reset timer zero translation uppaal integer variables set variables uppaal model partitioned input variables output variables internal variables 
sets treated di erent translation 
output variables uppaal integer variables mapped sns value ir modeling output attributes 
variables declared nqc program 
choice saves signi cant number variables 
remember nqc program variables 
output variables initialized uppaal model 
initial value output attributes expressed start nite loop 
example variable initialized uppaal model value translation adds line form main task loop sns mode add sensor 
sns type add sensor 
mode add setoutput 
direction add 
power add 
exact position lines see section 
example uppaal model translation block train gives output attribute initializations initialize output variable rev rev setoutput setoutput setoutput input variables input subroutine values integer variables mapped type sns value ir clock values continually changing due environment elapse time 
input program read nite loop main task 
reasons mentioned section copy input value kept integer variable nqc program 
values updated call subroutine read input 
fact subroutines handle arguments return values variables contain input values declared globally 
ib set integer variables block global integer variable declaration added ib sns value ir 
declaration variable added cb see section 
exact position declarations see section 
lines added body subroutine read input update values input variables cb add line timer ib sns value add 
ir add line message example uppaal model translation block train gives additional global declarations input subroutine declaration clock int trainalarm ir variable int ir sub read input read rcx timer trainalarm timer read ir value ir message internal variables set variables type 
internal variables translated variables local main task 
initial value assumed zero initialized uppaal model uppaal assumes 
exact position declarations see section 
example uppaal model translation block train gives declaration declaration local variable int trainalarm light deadlock subroutine imaginable realization uppaal model certain point time satisfy location invariant 
example occur action transitions forced time interval rcx handle 
translation choosen rcx satisfy location invariant 
order achieve second subroutine named deadlock automata created 
subroutine sets program counters deadlocked location outgoing transitions switches motors rcx example uppaal model translation block train gives deadlock subroutine sub deadlock automata pc train deadlocked pc trainalarm deadlocked setoutput setoutput setoutput translation transitions step translate action transitions uppaal model 
separated action transitions synchronization action synchronization action 
location automaton named block outgoing transitions translated 
transition transition synchronization action 
transition straightforward translated nqc code translation guard set translation assignment set new location name pc new location transition translated location parenthesis keyword removed 
parenthesis keyword left 
sure action transition starting location executed 
global control structure explained section assures automaton executes maximum action transition 
transition synchronization action 
matching transitions automata block 
transitions automaton am match code added translation transitions location pc pc new location pc new location code name location translation guard set translation assignment set new location name symmetrically translation guard set translation assignment set new location name rests translation location invariants guards assignments 
location invariants guards uppaal model literally included nqc program 
translation assignment assignment set follows sns mode add sensor 
sns type add sensor 
mode add setoutput 
direction add 
power add 
ir add sendmessage cb add add transitions automaton trainalarm location example translated follows pc trainalarm trainalarm deadlock automata ir ok pc train alarm setoutput pc trainalarm idle pc train idle trainalarm light trainalarm trainalarm light setoutput pc trainalarm trainalarm light trainalarm trainalarm light setoutput pc trainalarm fragment shows translation edge contains synchronization 
note transition exists automaton train nqc code 
complete translation uppaal model see appendix 
urgency commitment arrays aspects uppaal model translated 
restrictions uppaal models section easy straightforward translation uppaal models nqc programs proposed 
translation gives rise requirements uppaal models satisfy proposed translation possible 
section requirements identi ed 
note requirements avoided weakened smarter translation 
time available project construct smarter translation 
tool uppaal nqc checks requirements de ned subsections 
uppaal model consist set fa timed automata 
user de nes partition fb bm set type mapping block partition block compiler directive see section translated nqc program 
subsections cb denote set clocks block ib denote set integer variables block synchronizations translation synchronizations explained section assumes automata actions common rcx brick 
case translation synchronization dicult 
blocks partition closed respect synchronization actions 
blocks partition hold act am clocks rcx timers 
means nqc program maximum clocks restriction concerning clocks originating translation di erent blocks share clocks 
re ected property cb cb rcx capability reset clocks zero 
straightforward translation assignments see section requires clock assignment network equal 
integer variables blocks variable may model ir bu ers ir property states certain block integer variables 
translation declares jb program counters clock variables ji global variables 
fourth term number sensor value attributes 
attribute global variable declared 
term number internal variables block 
variable local main task declared internal variable 
translation requires hold jb ji sns value gj gj property means certain block variable denote certain input output attribute 
blocks satis es property nqc program results translation inputs outputs 
hold irg assignments guards translation assignments possibly involves api calls section 
strict syntactical forms calls variable arguments easy translation assume proper values described section assigned output variable uppaal model 
achieved de ning values uppaal constants 
see example local declarations template example uppaal model section 
assignment easily translated api call way 
rst argument api call provided type mapping second argument assigned value 
exactly assumed 
atomic assignment integer variable assignment set automaton network requirements identi ed sns value sns mode sensor mode raw sensor mode bool sensor mode percent sensor mode sns type sensor type touch sensor type light sensor type temperature sensor type mode direction fwd rev guard guard set automaton 
clock guard integer expression 
integer guard integer expressions 
integer expressions possibly contain integer variables constants 
integer variables denoted hold ir sns value sns value sns means uppaal variables model sensor mode type attributes output mode power direction attributes guards 
due fact called output variables see section declared nqc program straightforward translation guards doesn support output variables guards uppaal model 
possibility overcome restriction extra internal variable uppaal mimics attribute 
done automaton trainalarm variable light mimics variable alarm light 
result achieved encoding value output variable control structure automaton 
note uppaal equivalent nqc macro section guards 
values nqc may di er values uppaal model 
relation model realization translating formal model implementation semantics changed 
timed automaton depicted example realized 
ir fact physical systems impossible time events nite precision attempts assign value variable ir exactly time fail 
take closer look general control structure nqc program results proposed translation 
clear assignments overhead control structure reading input values take time 
uppaal assumed assignments action transition decision transition execute executed passing time rcx achieve performance 
fact number consequences explained 
rcx execute certain nite number action transitions nite amount time 
uppaal model control program runs certain rcx forces action transitions certain amount time rcx handle control program deadlock 
related requirement timed automata model necessary executability 
uppaal assumes assignments executed elapse time 
clear realized 
sensitive systems give problems 
example uppaal model motors shut time re ected assignments edge realization happen time 
motor shut fraction second motor shut 
exists uncertainty timing action transitions 
due mentioned overhead nqc program implicitly delay transition possibly action transition executed 
estimate timing uncertainty assume body nite loop executes rcx clock tick ms timers rcx perfect 
execution returns certain time start loop 
value clock read 
value example occur value clock automaton read enabled execute action transition 
behavior avoided 
typically uppaal model certain location action transition location enabled clock value action transition occurs corresponding rcx timer interval realization 
body loop executed rcx clock tick rcx timers perfect subset executions model realized 
ir edges model contain assignment model approximately realizable explained 
furthermore dicult construct uppaal models satisfy requirements section realizable 
job user think properties consequences translation decide realization acceptable 
validation translation experimental lego setup jeroen build provided ready available test case translation 
earlier version uppaal model section translated nqc programs 
rst experimental tests code lego construction revealed model accurate 
example extra assignments variables modeling direction attribute actuators added 
minor changes initial model resulting model section new experiments showed nqc code generated new model behaved expected 
shortcomings model foreseen additional veri cation properties checked 
uppaal model nqc programs result available project web site 
project presents simple translation uppaal models real time controllers nqc programs 
modeling controllers uppaal provides way verify requirements controllers 
user directs translation de ning type variable model assigning automaton model controller 
translation implemented tool uppaal nqc results set nqc programs nqc programs run concurrently approximately realizes subset executions model 
uppaal model controllers experimental lego setup translated resulting nqc programs run setup validate translation 
proposed translation platform dependent 
user essentially model desired behavior various rcx bricks system 
model annotated compiler directives facilitate realization model rcx bricks 
exist numerous modeling pitfalls avoided user knows limitations translation 
validation translation showed veri cation properties possible checked 
done problems initialization problems encountered validation translation discovered 
open issue exact relation uppaal models nqc programs resulting translation clear 
research may focus relation 
veri cation uppaal models useful exact link model realization established 
method automatic veri cation real time control programs running lego rcx brick uppaal 
constructed rcx uppaal compiler uses hardware speci properties rcx construct uppaal model rcx byte code control program 
research may focus combination compilers 
provide way model real time controllers uppaal generate lego control programs models nally verify lego control programs 
vaandrager useful discussions suggestions reviews report intermediate reports 
jozef reviews report general comments conducting research writing papers presenting 
thomas kim larsen paul pettersson guided synthesis control programs uppaal proceedings ieee icdcs international workshop distributed systems veri cation validation 
www brics dk papers index html kim larsen paul pettersson wang yi uppaal nutshell int :10.1.1.43.9418
journal software tools technology transfer pages 
springer verlag 

www uppaal com information modeling validation veri cation tool uppaal www uppaal com information lego lego com dave baum nqc programmer guide version 
document www com nqc index html jeroen report lego railroad crossing kun www cs kun nl ita report ps gz alur timed automata nato asi summer school veri cation digital hybrid systems 
website project www sci kun nl rl html model checking real time control programs verifying lego systems uppaal proc 
th euromicro conference real time systems ieee computer society press june 
abadi lamport old fashioned recipe real time real time theory practice rex workshop lncs pages 
springer verlag 
appendix le gate nqc results compilation uppaal model de ned section tool uppaal nqc 
file generated uppaal nqc version block gate includes gate constant block gate define gate tr app define gate gt cl define failure define ok location block gate define idle define wait car define wait close define closed define closed define opening define open gate init define wait train leave define deadlocked declaration clock int gate declaration input variable int sns sns sns ir variable int ir declaration initialization program counter int pc gate open gate init sub read input read rcx timer gate timer read sensor value sns sns sns read ir value ir message sub deadlock automata pc gate deadlocked setoutput setoutput setoutput task main initialize output variable fwd setoutput setoutput setoutput sensor sensor type touch sensor sensor type light sensor sensor type light sensor sensor mode percent sensor sensor mode percent sensor sensor mode percent reset timer zero transitions automaton gate read input pc gate idle sns setoutput setoutput pc gate wait car sns setoutput setoutput pc gate wait car pc gate wait car gate deadlock automata gate rev setoutput pc gate wait close pc gate wait close gate deadlock automata sns gate gt cl setoutput pc gate closed gate sns sendmessage failure setoutput pc gate closed pc gate closed sns fwd setoutput pc gate opening sns fwd setoutput pc gate opening pc gate closed sns sendmessage ok fwd setoutput pc gate opening sns sendmessage ok fwd setoutput pc gate opening pc gate opening gate deadlock automata gate setoutput setoutput setoutput pc gate wait train leave pc gate open gate init gate deadlock automata gate setoutput pc gate idle pc gate wait train leave gate deadlock automata gate pc gate idle le train nqc results compilation uppaal model de ned section tool uppaal nqc 
file generated uppaal nqc version block train includes train trainalarm constant block train define failure define ok location block train define idle define alarm define define deadlocked declaration clock int trainalarm ir variable int ir declaration initialization program counter int pc train idle pc trainalarm idle sub read input read rcx timer trainalarm timer read ir value ir message sub deadlock automata pc train deadlocked pc trainalarm deadlocked setoutput setoutput setoutput task main declaration local variable int trainalarm light initialize output variable rev rev setoutput setoutput setoutput reset timer zero transitions automaton train read input pc train idle ir failure pc trainalarm idle setoutput trainalarm light pc train alarm pc trainalarm pc train alarm ir ok pc trainalarm setoutput pc train idle pc trainalarm idle transitions automaton trainalarm read input pc trainalarm idle ir failure pc train idle setoutput trainalarm light pc trainalarm pc train alarm pc trainalarm trainalarm deadlock automata ir ok pc train alarm setoutput pc trainalarm idle pc train idle trainalarm light trainalarm trainalarm light setoutput pc trainalarm trainalarm light trainalarm trainalarm light setoutput pc trainalarm 
