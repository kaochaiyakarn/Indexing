principled design modern web architecture roy fielding day software richard taylor university california irvine world wide web succeeded large part software architecture designed meet needs internet scale distributed hypermedia application 
modern web architecture emphasizes scalability component interactions generality interfaces independent deployment components intermediary components reduce interaction latency enforce security encapsulate legacy systems 
article introduce representational state transfer rest architectural style developed model web architecture guide redesign definition hypertext transfer protocol uniform resource identifiers 
describe software engineering principles guiding rest interaction constraints chosen retain principles contrasting constraints architectural styles 
compare model currently deployed web architecture order elicit mismatches existing protocols applications intended support 
categories subject descriptors software engineering software architectures hypertext hypermedia architectures information storage retrieval line information services web services general terms design performance standardization additional key words phrases network applications rest world wide web partially supported defense advanced research projects agency air force research laboratory air force materiel command usaf agreement number originated author university california irvine 
earlier version appeared proceedings nd international conference software engineering limerick ireland june icse 
authors addresses fielding day software corporate plaza suite newport beach ca email roy fielding day com taylor information computer science university california irvine ca email taylor ics uci edu 
permission digital hard copies part personal classroom granted fee provided copies distributed profit direct commercial advantage copies show notice page initial screen display full citation 
copyrights components owned acm honored 
abstracting credit permitted 
copy republish post servers redistribute lists component works requires prior specific permission fee 
permissions may requested publications dept acm broadway new york ny usa fax permissions acm org 
acm acm transactions internet technology vol 
may pages 
fielding taylor 
efforts internet engineering define existing hypertext transfer protocol berners lee design extensions new standards fielding uniform resource identifiers uri berners lee recognized need model world wide web www simply web 
idealized model interactions web application refer representational state transfer rest architectural style foundation modern web architecture providing guiding principles flaws existing architecture identified extensions validated prior deployment 
software architecture abstraction runtime elements software system phase operation fielding 
system may composed levels abstraction phases operation software architecture 
architecture determines system elements identified allocated elements interact form system amount granularity communication needed interaction interface protocols communication 
architectural style coordinated set architectural constraints restricts roles features architectural elements allowed relationships elements architecture conforms style 
style provides name refer packaged set architectural design decisions set architectural properties induced applying style 
rest coordinated set architectural constraints attempts minimize latency network communication time maximizing independence scalability component implementations 
achieved placing constraints connector semantics styles focused component semantics 
rest enables caching reuse interactions dynamic substitutability components processing actions intermediaries order meet needs internet scale distributed hypermedia system 
edition rest developed october august primarily means communicating web concepts developing specification initial proposal 
iteratively improved years applied various revisions extensions web protocol standards 
rest originally referred object model name led misinterpretation implementation model server 
name representational state transfer intended evoke image designed web application behaves network web pages forms virtual state machine allowing user progress application selecting link submitting short data entry form action resulting transition state application transferring representation state user 
modern web instance rest style architecture 
webbased applications include access styles interaction central focus protocol performance concerns distributed hypermedia 
rest acm transactions internet technology vol 
may 
modern web architecture elaborates portions architecture considered essential internet scale distributed hypermedia interaction 
areas improvement web architecture seen existing protocols fail express potential semantics component interaction details syntax replaced efficient forms changing architecture capabilities 
likewise proposed extensions compared rest see fit architecture usually efficient redirect functionality system running parallel applicable architectural style 
article presents rest years architectural standards modern post web 
details web architecture standards 
focus rationale modern web architectural design software engineering principles 
process identify areas web protocols failed match style extent failures fixed immediate protocol enhancements lessons learned interaction style guide design distributed architecture 

www requirements architecting web requires understanding requirements 
berners lee writes web major goal shared information space people machines communicate needed way people store structure information permanent ephemeral nature usable able structure information stored necessary keep maintain local copies 
intended users system located world various university government high energy physics research labs connected internet 
machines heterogeneous collection terminals workstations servers supercomputers requiring operating system software file formats 
information ranged personal research notes organizational phone listings 
challenge build system provide universally consistent interface structured information available platforms possible incrementally deployable new people organizations joined project 
low entry barrier participation creation structuring information voluntary low entry barrier necessary enable sufficient adoption 
applied users web architecture readers authors application developers 
hypermedia chosen user interface due simplicity generality interface regardless information source acm transactions internet technology vol 
may 
fielding taylor flexibility hypermedia relationships links allows unlimited structuring direct manipulation links allows complex relationships information guide reader application 
information large databases easier access search interface browsing web incorporated ability perform simple queries providing user entered data service rendering result hypermedia 
authors primary requirement partial availability system prevent authoring content 
hypertext authoring language simple capable created existing editing tools 
authors expected keep things personal research notes format directly connected internet fact referenced information unavailable temporarily permanently allowed prevent reading authoring available information 
similar reasons necessary able create information target available 
authors encouraged collaborate development information sources needed easy communicate form email directions written back napkin conference 
simplicity goal sake application developers 
protocols defined text communication viewed interactively tested existing network tools 
enabled early adoption protocols take place spite lack standards 
extensibility simplicity possible deploy initial implementation distributed system extensibility allows avoid getting stuck forever limitations deployed 
possible build software system perfectly matches requirements users requirements change time just society changes time 
system intending long lived web prepared change 
distributed hypermedia hypermedia defined presence application control information embedded layer presentation information 
distributed hypermedia allows presentation control information stored remote locations 
nature user actions distributed hypermedia system require transfer large amounts data data stored 
web architecture designed large grain data transfer 
usability hypermedia interaction highly sensitive user perceived latency time selecting link rendering usable result 
web information sources distributed global internet architecture needs minimize network interactions round trips data transfer protocols 
acm transactions internet technology vol 
may 
modern web architecture internet scale web intended internet scale distributed hypermedia system means considerably just geographical dispersion 
internet interconnecting information networks multiple organizational boundaries 
suppliers information services able cope demands scalability independent deployment software components 
scalability 
software systems created implicit assumption entire system control entity entities participating system acting common goal cross purposes 
assumption safely system runs openly internet 
scalability refers need architectural elements continue operating subjected unanticipated load malformed maliciously constructed data may communicating elements outside organizational control 
architecture amenable mechanisms enhance visibility scalability 
scalability requirement applies architectural elements 
clients expected maintain knowledge servers 
servers expected retain knowledge state requests 
hypermedia data elements retain back pointers identifier data element number resource proportional number people interested information 
particularly information lead flash crowds sudden spikes access attempts news availability spreads world 
security architectural elements platforms operate significant concern 
multiple organizational boundaries imply multiple trust boundaries communication 
intermediary applications firewalls able inspect application interactions prevent outside security policy organization acted 
participants application interaction assume information received untrusted require additional authentication trust 
requires architecture capable communicating authentication data authorization controls 
authentication degrades scalability architecture default operation limited actions need trusted data safe set operations defined semantics 
independent deployment 
multiple organizational boundaries mean system prepared gradual fragmented change old new implementations exist preventing new implementations making extended capabilities 
existing architectural elements need designed expectation architectural features added 
likewise older implementations need easily identified legacy behavior encapsulated adversely impacting newer architectural elements 
architecture designed acm transactions internet technology vol 
may 
fielding taylor fig 

rest derivation style constraints 
ease deployment architectural elements partial iterative fashion possible force deployment orderly manner 
evolving requirements project goals information system characteristics fed design web architecture 
web matured additional goals added support greater collaboration distributed authoring fielding 
new goal presents challenge introduce new set functionality architecture widely deployed ensure adversely impact destroy architectural properties enabled web succeed 
questions motivated development rest architectural style 

deriving rest hybrid architectural style rest architectural style consists set architectural constraints chosen properties induce candidate architectures 
constraints considered isolation describing terms derivation common architectural styles easier understand rationale selection 
depicts derivation rest constraints graphically terms network architectural styles examined fielding 
relevant base styles rest derived include replicated repository rr cache client server cs layered system ls stateless virtual machine vm code demand cod uniform interface 
null style simply empty set constraints 
architectural perspective null style describes system distinguished boundaries components 
starting point description rest 
acm transactions internet technology vol 
may 
modern web architecture constraints added hybrid style client server architectural style cs 
separation concerns principle client server constraints 
separating user interface concerns data storage concerns improve portability user interface multiple platforms improve scalability simplifying server components 
significant web separation allows components evolve independently supporting requirement multiple organizational domains 
add constraint client server interaction communication stateless nature client stateless server css style request client server contain information necessary understand request take advantage stored context server 
session state kept entirely client 
constraint induces properties visibility reliability scalability 
visibility improved monitoring system look single request datum order determine full nature request 
reliability improved eases task recovering partial failures waldo 
scalability improved having store state requests allows server component quickly free resources simplifies implementation server doesn manage resource usage requests 
architectural choices stateless constraint reflects design tradeoff 
disadvantage may decrease network performance increasing repetitive data interaction overhead sent series requests data left server shared context 
addition placing application state client side reduces server control consistent application behavior application dependent correct implementation semantics multiple client versions 
order improve network efficiency add cache constraints form client cache stateless server style ss 
cache constraints require data response request implicitly explicitly labeled cacheable 
response cacheable client cache right reuse response data equivalent requests 
advantage adding cache constraints potential partially completely eliminate interactions improving efficiency scalability user perceived performance reducing average latency series interactions 
tradeoff cache decrease reliability stale data cache differs significantly data obtained request sent directly server 
early web architecture defined client cache stateless server set constraints 
design rationale web architecture prior focused stateless client server interaction exchange static documents internet 
protocols communicating interactions rudimentary support nonshared caches constrain interface consistent set semantics resources 
web relied common client server implementation library cern maintain consistency web applications 
acm transactions internet technology vol 
may 
fielding taylor developers web implementations exceeded early design 
addition static documents requests identify services dynamically generated responses image maps server side scripts 
begun intermediary components form proxies luotonen shared caches glassman extensions protocols needed order communicate reliably 
remaining constraints added web architectural style order guide extensions form modern web architecture 
central feature distinguishes rest architectural style network styles emphasis uniform interface components 
applying software engineering principle generality component interface system architecture simplified visibility interactions improved 
implementations decoupled services provide encourages independent evolvability 
tradeoff uniform interface degrades efficiency information transferred standardized form specific application needs 
rest interface designed efficient hypermedia data transfer optimizing common case web resulting interface optimal forms architectural interaction 
order obtain uniform interface multiple architectural constraints needed guide behavior components 
rest defined interface constraints identification resources manipulation resources representations self descriptive messages hypermedia engine application state 
constraints discussed section 
order improve behavior internet scale requirements add layered system constraints 
layered system style ls allows architecture composed hierarchical layers constraining component behavior component see immediate layer interacting 
restricting knowledge system single layer place bound system complexity promote substrate independence 
layers encapsulate legacy services protect new services legacy clients simplifying components moving infrequently functionality shared intermediary 
intermediaries improve system scalability enabling load balancing services multiple networks processors 
primary disadvantage layered systems add overhead latency processing data reducing user perceived performance clark tennenhouse 
network system supports cache constraints offset benefits shared caching intermediaries 
placing shared caches boundaries organizational domain result significant performance benefits wolman 
layers allow security policies enforced data crossing organizational boundary required firewalls luotonen 
combination layered system uniform interface constraints induces architectural properties similar uniform pipe filter style 
rest interaction way large grain dataflows hypermedia acm transactions internet technology vol 
may 
modern web architecture interaction processed dataflow network filter components selectively applied data stream order transform content passes brooks 
rest intermediary components actively transform content messages messages semantics visible intermediaries 
final addition constraint set rest comes code ondemand style cod 
rest allows client functionality extended downloading executing code form applets scripts 
simplifies clients reducing number features required 
allowing features downloaded deployment improves system extensibility 
reduces visibility optional constraint rest 
notion optional constraint may 
purpose architectural design system encompasses multiple organizational boundaries 
means architecture gains benefit suffers disadvantages optional constraints known effect realm system 
example client software organization known support java tm applets flanagan services organization constructed gain benefit enhanced functionality downloadable java tm classes 
time organization firewall may prevent transfer java tm applets external sources rest web appear clients support demand 
optional constraint allows design architecture supports desired behavior general case understanding may disabled contexts 

rest architectural elements representational state transfer rest style abstraction architectural elements distributed hypermedia system 
perry wolf distinguish classes architectural elements processing elements components data elements connecting elements connectors 
rest ignores details component implementation protocol syntax order focus roles components constraints interaction components interpretation significant data elements 
establishes fundamental constraints components connectors data define basis web architecture essence behavior network application 
software architecture framework perry wolf define architectural elements rest examine sample process connector data views prototypical architectures gain better understanding rest design principles 
data elements distributed object style chin data encapsulated hidden processing components nature acm transactions internet technology vol 
may 
fielding taylor table rest data elements data element modern web examples resource intended conceptual target hypertext resource identifier url urn representation html document jpeg image representation metadata media type modified time resource metadata source link alternates vary control data modified cache control state architecture data elements key aspect rest 
rationale design seen nature distributed hypermedia 
link selected information needs moved location stored location cases human reader 
distinct contrast distributed processing paradigms andrews fuggetta efficient move processing entity data move data processor 
distributed hypermedia architect fundamental options render data located send fixed format image recipient encapsulate data rendering engine send recipient send raw data recipient metadata describes data type recipient choose rendering engine 
option advantages disadvantages 
option traditional client server style sinha allows information true nature data remain hidden sender preventing assumptions data structure making client implementation easier 
severely restricts functionality recipient places processing load sender leading scalability problems 
option mobile object style fuggetta provides information hiding enabling specialized processing data unique rendering engine limits functionality recipient anticipated engine may vastly increase amount data transferred 
option allows sender remain simple scalable minimizing bytes transferred loses advantages information hiding requires sender recipient understand data types 
rest provides hybrid options focusing shared understanding data types metadata limiting scope revealed standardized interface 
rest components communicate transferring representation data format matching evolving set standard data types selected dynamically capabilities desires recipient nature data 
representation format raw source derived source remains hidden interface 
benefits mobile object style approximated sending representation consists instructions standard data format encapsulated rendering engine java tm 
rest gains separation concerns client server style server scalability problem allows information hiding acm transactions internet technology vol 
may 
modern web architecture generic interface enable encapsulation evolution services provides diverse set functionality downloadable 
resources resource identifiers 
key abstraction information rest resource 
information named resource document image temporal service today weather los angeles collection resources object person 
words concept target author hypertext fit definition resource 
resource conceptual mapping set entities entity corresponds mapping particular point time 
precisely resource temporally varying membership function time maps set entities values equivalent 
values set may resource representations resource identifiers 
resource map empty set allows concept realization concept exists notion foreign hypertext systems prior web gr trigg 
resources static sense examined time creation correspond value set 
high degree variance value time 
thing required static resource semantics mapping semantics distinguishes resource 
example authors preferred version mapping changed time mapping published proceedings conference static 
distinct resources map value point time 
distinction necessary resources identified referenced independently 
similar example software engineering separate identification version controlled source code file referring latest revision revision number revision included orange release definition resource enables key features web architecture 
provides generality encompassing sources information artificially distinguishing type implementation 
second allows late binding representation enabling content negotiation take place characteristics request 
allows author concept singular representation concept removing need change existing links representation changes 
rest uses resource identifier identify particular resource involved interaction components 
rest connectors provide generic interface accessing manipulating value set resource regardless membership function defined type software handling request 
naming authority assigned resource identifier making possible resource responsible maintaining semantic validity mapping time ensuring membership function change values change 
acm transactions internet technology vol 
may 
fielding taylor traditional hypertext systems gr trigg typically operate closed local environment unique node document identifiers change time information changes relying link servers maintain separately content 
centralized link servers immense scale domain requirements rest relies author choosing resource identifier best fits nature concept identified 
naturally quality identifier proportional amount money spent retain validity leads broken links ephemeral poorly supported information moves disappears time 
representations 
rest components perform actions resource representation capture current intended state resource transferring representation components 
representation sequence bytes plus representation metadata describe bytes 
commonly precise names representation include document file message entity instance variant 
representation consists data metadata describing data occasion metadata describe metadata usually verifying message integrity 
metadata form name value pairs name corresponds standard defines value structure semantics 
response messages may include representation metadata resource metadata information resource specific supplied representation 
control data defines purpose message components action requested meaning response 
parameterize requests override default behavior connecting elements 
example cache behavior modified control data included request response message 
depending message control data representation may indicate current state requested resource desired state requested resource value resource representation input data client query form representation error condition response 
example remote authoring resource requires author send representation server establishing value resource retrieved requests 
value set resource time consists multiple representations content negotiation may select best representation inclusion message 
data format representation known media type postel 
representation included message processed recipient control data message nature media type 
media types intended automated processing rendered viewing user appropriate 
composite media types enclose multiple representations single message 
design media type directly impact user perceived performance distributed hypermedia system 
data received recipient rendering representation adds latency interaction 
data format places important rendering acm transactions internet technology vol 
may 
modern web architecture information front initial information incrementally rendered rest information received results better user perceived performance data format received entirely rendering 
example web browser incrementally render large html document received provides significantly better user perceived performance waits entire document received prior rendering network performance 
note rendering ability representation impacted choice content 
dimensions dynamically sized tables embedded objects determined rendered occurrence viewing area hypermedia page increase latency 
connectors rest uses various connector types encapsulate activities accessing resources transferring resource representations 
connectors interface component communication enhancing simplicity providing clean separation concerns hiding underlying implementation resources communication mechanisms 
generality interface enables substitutability users access system interface implementation replaced impacting users 
connector manages network communication component information shared multiple interactions order improve efficiency responsiveness 
rest interactions stateless 
request contains information necessary connector understand request independent requests may preceded 
restriction accomplishes functions removes need connectors retain application state requests reducing consumption physical resources improving scalability allows interactions processed parallel requiring processing mechanism understand interaction semantics allows intermediary view understand request isolation may necessary services dynamically rearranged forces information factor reusability cached response request 
connector interface similar procedural invocation important differences passing parameters results 
parameters consist request control data resource identifier indicating target request optional representation 
parameters consist response control data optional resource metadata optional representation 
viewpoint invocation synchronous parameters passed data streams 
words processing invoked value parameters completely known avoiding latency batch processing large data transfers 
primary connector types client server 
essential difference client initiates communication making request acm transactions internet technology vol 
may 
fielding taylor table ii 
rest connector types connector modern web examples client perl server apache api cache browser cache akamai cache network resolver bind dns lookup library tunnel socks ssl connect server listens connections responds requests order supply access services 
component may include client server connectors 
third connector type cache connector located interface client server connector order save cacheable responses current interactions reused requested interactions 
cache may client avoid repetition network communication server avoid repeating process generating response cases serving reduce interaction latency 
cache typically implemented address space connector uses 
cache connectors shared meaning cached responses may answer client response originally obtained 
shared caching effective reducing impact flash crowds load popular server particularly caching arranged hierarchically cover large groups users intranet customers internet service provider universities sharing national network backbone 
shared caching lead errors cached response match obtained new request 
rest attempts balance desire transparency cache behavior desire efficient network assuming absolute transparency required 
cache able determine response interface generic specific resource 
default response retrieval request cacheable responses requests 
form user authentication part request response indicates shared response cacheable nonshared cache 
component override defaults including control data marks interaction cacheable cacheable limited time 
resolver translates partial complete resource identifiers network address information needed establish intercomponent connection 
example uri include dns hostname mechanism identifying naming authority resource 
order initiate request web browser extract hostname uri dns resolver obtain internet protocol address authority 
example identification schemes urn sollins masinter require intermediary translate permanent identifier transient address order access identified resource 
intermediate resolvers improve longevity acm transactions internet technology vol 
may 
table iii 
rest component types modern web architecture component modern web examples origin server apache httpd microsoft iis gateway squid cgi reverse proxy proxy cern proxy netscape proxy user agent netscape navigator lynx resource indirection doing adds request latency 
final form connector type tunnel simply relays communication connection boundary firewall lower level network gateway 
reason modeled part rest abstracted away part network infrastructure rest components may dynamically switch active component behavior tunnel 
primary example proxy switches tunnel response connect method request allowing client directly communicate remote server different protocol tls doesn allow proxies 
tunnel disappears ends terminate communication 
components rest components processing elements typed roles application action 
user agent uses client connector initiate request ultimate recipient response 
common example web browser provides access information services renders service responses application needs 
origin server uses server connector govern namespace requested resource 
definitive source representations resources ultimate recipient request intends modify value resources 
origin server provides generic interface services resource hierarchy 
resource implementation details hidden interface 
intermediary components act client server order forward possible translation requests responses 
proxy component intermediary selected client provide interface encapsulation services data translation performance enhancement security protection 
gateway reverse proxy component intermediary imposed network origin server provide interface encapsulation services data translation performance enhancement security enforcement 
note difference proxy gateway client determines proxy 

rest architectural views understanding rest architectural elements isolation architectural views perry wolf describe acm transactions internet technology vol 
may 
fielding taylor fig 

process view rest architecture instance time 
user agent portrayed midst parallel interactions interactions satisfied user agent client connector cache request routed resource origin properties resource identifier configuration client connector 
request sent local proxy turn accesses caching gateway dns lookup forwards request satisfied origin server internal resources defined encapsulated object request broker architecture 
request sent directly origin server able satisfy request cache 
request sent proxy capable directly accessing wais information service separate web architecture translating wais response format recognized generic connector interface 
component aware interaction client server connectors process topology artifact view 
elements form architecture 
types view process connector data useful illuminating design principles rest 
process view process view architecture primarily effective eliciting interaction relationships components revealing path data flows system 
unfortunately interaction real system usually involves extensive number components resulting view obscured details 
provides sample process view rest architecture particular instance processing parallel requests 
client server andrews separation concerns simplifies component implementation reduces complexity connector semantics improves effectiveness performance tuning increases scalability pure server components 
components connected dynamically arrangement function particular application action characteristics similar pipe filter style 
rest components communicate bidirectional streams processing direction independent acm transactions internet technology vol 
may 
modern web architecture susceptible stream transducers filters 
generic connector interface allows components placed stream properties request response 
services may implemented complex hierarchy intermediaries multiple distributed origin servers 
stateless nature rest allows interaction independent removing need awareness component topology impossible task architecture allowing components act destinations intermediaries determined dynamically target request 
connectors need aware existence scope communication 
connector may cache existence capabilities components performance reasons 
connector view connector view architecture concentrates mechanics communication components 
rest architecture particularly interested constraints define generic resource interface 
client connectors examine resource identifier order select appropriate communication mechanism request 
example client may configured connect specific proxy component acting annotation filter identifier indicates local resource 
likewise client configured reject requests subset identifiers 
web primary transfer protocol architecture includes seamless access resources originate pre existing network servers including ftp postel reynolds gopher wais davis 
interaction services restricted semantics rest connector 
constraint sacrifices advantages architectures stateful interaction relevance feedback protocol wais order retain advantages single generic interface connector semantics 
generic interface possible access multitude services single proxy connection 
application needs additional capabilities architecture implement invoke capabilities separate system running parallel similar web architecture interfaces telnet mailto resources 
data view data view architecture reveals application state information flows components 
rest specifically targeted distributed information systems views application cohesive structure information control alternatives user perform desired task 
example online dictionary application museum tour set class notes 
component interactions occur form dynamically sized messages 
small medium grain messages control semantics bulk acm transactions internet technology vol 
may 
fielding taylor application accomplished large grain messages containing complete resource representation 
frequent form request semantics retrieving representation resource get method cached reuse 
rest concentrates control state representations received response interactions 
goal improve server scalability eliminating need server maintain awareness client state current request 
application state defined pending requests topology connected components may filtering buffered data active requests connectors dataflow representations response requests processing representations received user agent 
application reaches steady state outstanding requests pending requests responses current set requests completely received received point treated representation data stream 
browser application state corresponds web page including primary representation ancillary representations line images embedded applets style sheets 
significance application steady states seen impact user perceived performance burstiness network request traffic 
user perceived performance browser application determined latency steady states period time selection hypermedia link submit button web page point usable information rendered web page 
optimization browser performance centered reducing latency leads observations efficient network request doesn network 
words reusing cached response results best performance 
cache adds latency individual request due lookup overhead average request latency significantly reduced small percentage requests result usable cache hits 
control state application resides representation requested resource obtaining representation priority 
incremental rendering response representation considerably reduce latency representation rendered received response completed 
incremental rendering impacted design media type early availability layout information visual dimensions line objects 
application state controlled stored user agent composed representations multiple servers 
addition freeing server scalability problems storing state allows user directly manipulate state web browser history anticipate changes state link maps prefetching representations jump application bookmarks uri entry dialogs 
acm transactions internet technology vol 
may 
modern web architecture model application engine moves state examining choosing alternative state transitions current set representations 
surprisingly exactly matches user interface hypermedia browser 
style assume applications browsers 
fact application details hidden server generic connector interface user agent equally automated robot performing information retrieval indexing service personal agent looking data matches certain criteria maintenance spider busy information broken modified content fielding 

related garlan shaw provide software architecture research describe pure styles 
differs significantly framework perry wolf article due lack consideration data elements 
observed characteristics data elements fundamental understanding modern web architecture simply adequately described 
seen comparison mobile code paradigms fuggetta analysis go mobile depends active comparison size code transferred versus preprocessed information transferred 
bass devote chapter architecture world wide web description encompasses implementation architecture cern developed client server libraries jigsaw software 
implementations reflect design constraints rest having developed people familiar intended architectural style real www architecture independent single implementation 
web defined standard interfaces protocols interfaces protocols implemented piece software 
rest style draws preexisting distributed process paradigms andrews fuggetta communication protocols software fields 
rest component interactions structured layered client server style added constraints generic resource interface create opportunity substitutability inspection intermediaries 
requests responses appearance remote invocation style rest messages targeted conceptual resource implementation identifier 
attempts model web architecture form distributed file system distributed object system manola 
exclude various web resource types implementation strategies interesting fact presence invalidates assumptions underlie models 
rest works limit implementation resources certain predefined models allowing application choose implementation best matches needs enabling replacement implementations impacting user 
acm transactions internet technology vol 
may 
fielding taylor interaction method sending representations resources consuming components parallels event integration ebi styles barrett rosenblum wolf sullivan notkin 
key difference ebi styles push 
component containing state equivalent origin server rest issues event state changes component interested listening event 
rest style consuming components usually pull representations 
efficient viewed single client wishing monitor single resource scale web unregulated push model infeasible 
principled rest style web clear notion components connectors representations relates closely architectural style taylor 
style supports development distributed dynamic applications focusing structured connectors obtain substrate independence 
applications rely asynchronous notification state changes request messages 
event schemes nominally push architecture operate rest pull style emitting notification receipt request 
style lacks intermediary friendly constraints rest generic resource interface guaranteed stateless interactions intrinsic support caching 

experience evaluation ideal world implementation software system exactly match design 
features modern web architecture correspond exactly design criteria rest uri berners lee resource identifiers internet media types postel identify representation data formats 
aspects modern web protocols exist spite architectural design due legacy experiments failed retained backwards compatibility extensions deployed developers unaware architectural style 
rest provides model development evaluation new features identification understanding broken features 
rest intended capture possible uses web protocol standards 
applications uri match application model distributed hypermedia system 
important point rest capture aspects distributed hypermedia system considered central behavioral performance requirements web optimizing behavior model result optimum behavior deployed web architecture 
words rest optimized common case constraints applies web architecture optimized common case 
rest applied uri uniform resource identifiers uri simplest element web architecture important 
uri known acm transactions internet technology vol 
may 
modern web architecture names www addresses universal document identifiers universal resource identifiers berners lee combination uniform resource locators url berners lee names urn sollins masinter collectively referred uri 
aside name uri syntax remained relatively unchanged 
specification web addresses defines scope semantics mean resource changed early web architecture 
rest define term resource uri standard berners lee semantics generic interface manipulating resources representations 
redefinition resource 
early web architecture defined uri document identifiers 
authors instructed define identifiers terms document location network 
web protocols retrieve document 
definition proved unsatisfactory number reasons 
suggests author identifying content transferred imply identifier change content changes 
second exist addresses corresponded service document authors may intending direct readers service specific result prior access service 
exist addresses correspond document periods time document exist address solely naming locating information 
definition resource rest simple premise identifiers change infrequently possible 
web uses embedded identifiers link servers authors need identifier closely matches semantics intend hypermedia allowing remain static result accessing may change time 
rest accomplishes defining resource semantics author intends identify value corresponding semantics time created 
left author ensure identifier chosen identify intended semantics 
manipulating shadows 
defining resource uri identifies concept document leaves question user access manipulate transfer concept get useful hypertext link selected 
rest answers question defining things manipulated representations identified resource resource 
origin server maintains mapping resource identifiers set representations corresponding resource 
resource manipulated transferring representations generic interface defined resource identifier 
rest definition resource derives central requirement web independent authoring interconnected hypertext multiple trust domains 
forcing interface definitions match interface requirements causes protocols vague just interface acm transactions internet technology vol 
may 
fielding taylor manipulated interface implementation 
protocols specific intent application action mechanism interface decide intention affects underlying implementation resource mapping representations 
information hiding key software engineering principles motivates uniform interface rest 
client restricted manipulation representations directly accessing implementation resource implementation constructed form desired naming authority impacting clients may representations 
addition multiple representations resource exist time accessed content selection algorithm dynamically select representation best fits capabilities client 
disadvantage course remote authoring resource straightforward remote authoring file 
remote authoring 
challenge remote authoring web uniform interface due separation representation retrieved client mechanism server store generate retrieve content representation 
individual server may map part namespace filesystem turn maps equivalent inode mapped disk location underlying mechanisms provide means associating resource set representations identifying resource 
different resources map representation resources may representation mapped 
order author existing resource author obtain specific source resource uri set uri bind handler underlying representation target resource 
resource map singular file resources static derived resources derivation tree author eventually find source resources edited order modify representation resource 
principles apply form derived representation content negotiation scripts servlets managed configurations versioning binding semantics uri 
semantics byproduct act assigning resource identifiers populating resources representations 
time whatsoever server client software need know understand meaning uri merely act conduit creator resource human naming authority associate representations semantics identified uri 
words resources server just mechanisms supply answers interface defined resources 
may odd essence web different implementations 
nature engineer define things terms characteristics components compose finished product 
web doesn way 
web architecture consists constraints acm transactions internet technology vol 
may 
modern web architecture communication model components role component application action 
prevents components assuming resource abstraction hiding actual mechanisms side interface 
rest mismatches uri 
real world systems components deployed web architecture obey constraint architectural design 
rest means define architectural improvements identify architectural mismatches 
mismatches occur due ignorance oversight software implementation deployed violates architectural constraints 
mismatches avoided general possible identify standardized 
uri design matches rest architectural notion identifiers syntax insufficient force naming authorities define uri resource model 
form abuse include information identifies current user uri referenced hypermedia response representation 
embedded user ids maintain session state server track user behavior logging actions carry user preferences multiple actions hyper gateways maurer 
violating rest constraints systems cause shared caching ineffective reduce server scalability result undesirable effects user shares 
conflict resource interface rest occurs software attempts treat web distributed file system 
file systems expose implementation information tools exist mirror information multiple sites means load balancing redistributing content closer users 
files fixed set semantics named sequence bytes duplicated easily 
contrast attempts mirror content web server files fail resource interface match semantics file system data metadata included significant semantics representation 
web server content replicated remote sites replicating entire server mechanism configuration selectively replicating resources representations known static content distribution networks contract web sites replicate specific resource representations edges internet order reduce latency distribute load away origin server 
rest applied hypertext transfer protocol special role web architecture primary application level protocol communication web components protocol designed specifically transfer resource representations 
uri large number changes needed order support modern web architecture 
developers implementations conservative adoption proposed enhancements extensions needed proven subjected acm transactions internet technology vol 
may 
fielding taylor standards review deployed 
rest identify problems existing implementations specify interoperable subset protocol berners lee analyze proposed extensions fielding provide motivating rationale deploying 
key problem areas identified rest include planning deployment new protocol versions separating message parsing semantics underlying transport layer tcp distinguishing authoritative responses fine grained control caching various aspects protocol failed self descriptive 
rest model performance web applications anticipate impact extensions persistent connections content negotiation 
rest limit scope standardized extensions fit architectural model allowing applications misuse influence standard equally 
extensibility 
major goals rest support gradual fragmented deployment changes deployed architecture 
modified support goal versioning requirements rules extending protocol syntax elements 
protocol versioning 
family protocols distinguished major minor version numbers share name primarily correspond protocol expected communicating directly service url namespace 
connector obey constraints placed version protocol element included message mogul 
version message represents protocol capabilities sender gross compatibility major version number message sent 
allows client reduced subset features making normal request time indicating recipient capable supporting full communication 
words provides tentative form protocol negotiation scale 
connection request response chain operate best protocol level spite limitations clients servers parts chain 
intention protocol server respond highest minor version protocol understands major version client request message 
restriction server optional features higher level protocol forbidden send older version client 
required features protocol minor versions major version incompatible change require change major version 
features depend minor version number change interpreted immediate neighbors acm transactions internet technology vol 
may 
modern web architecture communication require entire request response chain intermediary components speak version 
rules exist assist deploying multiple protocol revisions preventing architects forgetting deployment protocol important aspect design 
making easy differentiate compatible changes protocol incompatible changes 
compatible changes easy deploy communication differences achieved protocol stream 
incompatible changes difficult deploy require determination acceptance protocol protocol stream commence 
extensible protocol elements 
includes number separate namespaces differing constraints share requirement extensible bound 
namespaces governed separate internet standards shared multiple protocols uri schemes berners lee media types freed mime header field names freed borenstein charset values language tags governed including namespaces method names response status codes header field names values standard header fields 
early define consistent set rules changes namespaces deployed problems tackled specification effort 
request semantics signified request method name 
method extension allowed set semantics shared client server intermediaries may 
unfortunately early extensions specifically head method parsing response message dependent knowing semantics request method 
led deployment contradiction recipient needs know semantics method safely forwarded intermediary intermediaries updated new method deployed 
deployment problem fixed separating rules parsing forwarding messages semantics associated new protocol elements 
example head method content length header field meaning signifying message body length new method change message length calculation 
get head methods conditional request header fields semantics cache refresh methods meaning precondition 
likewise needed general rule interpreting new response status codes new responses deployed significantly harming older clients 
expanded rule status code belonged class signified digit digit decimal number indicating message contains provisional information response indicating request succeeded indicating request needs redirected resource indicating client error repeated acm transactions internet technology vol 
may 
fielding taylor indicating server encountered error client may get better response server 
recipient understand specific semantics status code message treat way code class 
rule method names extensibility rule places requirement current architecture anticipates change 
changes deployed existing architecture fear adverse component reactions 
upgrade 
addition upgrade header field reduces difficulty deploying incompatible changes allowing client advertise willingness better protocol communicating older protocol stream 
upgrade specifically added support selective replacement protocols efficient tasks 
supports internal extensibility complete replacement active connection 
server supports improved protocol desires switch simply responds status continues request received upgraded protocol 
self descriptive messages 
rest constrains messages components self descriptive order support intermediate processing interactions 
aspects early failed including lack host identification requests failure syntactically distinguish message control data representation metadata failure differentiate control data intended immediate connection peer versus metadata intended recipients lack support mandatory extensions need metadata describe representations layered encodings 
host 
worst mistakes early design decision send complete uri target request message send portions setting connection 
assumption server know naming authority ip address tcp port connection 
failed anticipate multiple naming authorities exist single server critical problem web grew exponential rate new domain names basis naming authority url namespace far exceeded availability new ip addresses 
solution defined deployed include target url host information host header field request message 
deployment feature considered important specification requires servers reject request doesn include host field 
result exist large isp servers run tens thousands name virtual host websites single ip address 
layered encodings 
inherited syntax describing representation metadata multipurpose internet mail extensions mime freed borenstein 
mime define layered media types preferring acm transactions internet technology vol 
may 
modern web architecture include label outermost media type content type field value 
prevents recipient determining nature encoded message decoding layers 
early extension worked failing listing outer encodings separately content encoding field placing label innermost media type content type 
poor design decision changed semantics content type changing field name resulting confusion older user agents encountered extension 
better solution continue treating content type outermost media type new field describe nested types type 
unfortunately extension deployed faults identified 
rest identify need layer encodings placed message connector order improve transferability network 
new layer called transfer encoding similar concept mime allows messages encoded transfer implying representation encoded nature 
transfer encodings added removed transfer agents reason changing semantics representation 
semantic independence 
described message parsing separated semantics 
message parsing including finding header fields occurs separately process parsing header field contents 
way intermediaries quickly process forward messages extensions deployed breaking existing parsers 
transport independence 
early including implementations underlying transport protocol means signaling response message 
server indicate response message body closing tcp connection 
unfortunately created significant failure condition protocol client means distinguishing completed response truncated network failure 
solve content length header field redefined indicate message body length bytes length known advance chunked transfer encoding introduced 
chunked encoding allows representation size unknown generation header fields sent boundaries delineated series chunks individually sized sent 
allows metadata sent message trailers enabling creation optional metadata origin message generated adding response latency 
size limits 
frequent barrier flexibility application layer protocols tendency specify size limits protocol parameters 
practical limits implementations protocol exist available memory specifying limits protocol restricts acm transactions internet technology vol 
may 
fielding taylor applications limits regardless implementation 
result lowest common denominator protocol extended vision original creator 
protocol limit length uri length header fields length representation length field value consists list items 
older web clients known problem uri consist characters sufficient note problem specification require servers limited 
reason protocol maximum applications controlled context intranet avoid limits replacing older components 
need invent artificial limitations need define appropriate set response status codes indicating protocol element long server process 
response codes added conditions request uri long header field long body long 
unfortunately way client indicate server may resource limits leads problems resource constrained devices pdas attempt device specific intermediary adjusting communication 
cache control 
rest tries balance need efficient behavior desire semantically transparent cache behavior critical allow application determine caching requirements hard code protocol 
important thing protocol fully accurately describe data transferred application fooled thinking thing 
addition cache control age etag vary header fields 
content negotiation 
resources map request consisting method identifier request header fields representation response consisting status code response header fields representation 
request maps multiple representations server server may engage content negotiation client order determine best meets client needs 
really content selection process negotiation 
implementations content negotiation deployed included specification interoperable subset implementations time published 
partly due poor implementation ncsa mosaic send kb preference information header fields request regardless resource 
far uri negotiable content result substantially increased request latency little gain led browsers disregarding negotiation features 
preemptive server driven negotiation occurs server varies response representation particular request method identifier status code acm transactions internet technology vol 
may 
modern web architecture combination value request header fields external normal request parameters 
client needs notified occurs cache know semantically transparent particular cached response request user agent supply detailed preferences normally send knows having effect received response 
introduced vary header field purpose 
vary simply lists request header field dimensions response may vary 
preemptive negotiation user agent tells server accept 
server supposed select representation best matches user agent claims capabilities 
problem requires information ua accept accepts feature purpose users intend put representation 
example users want view image screen prefer simple bitmap representation users browsers may prefer postscript representation intend send printer 
depends users correctly configuring browsers personal content preferences 
short server rarely able effective preemptive negotiation form automated content selection defined early 
added notion reactive agent driven negotiation 
case user agent requests negotiated resource server responds list available representations 
user agent choose best capabilities purposes 
information available representations may supplied separate representation response inside response data conditional html supplement response 
works best web additional interaction necessary user agent decides variants better 
reactive negotiation simply automated reflection normal browser model means take full advantage performance benefits rest 
preemptive reactive negotiation suffer difficulty communicating actual characteristics representation dimensions say browser supports html tables insert element 
reactive negotiation distinct advantages having send preferences request having context information decision faced alternatives interfering caches 
third form negotiation transparent negotiation license intermediary cache act agent behalf agents selecting better representation initiating requests retrieve representation 
request may resolved internally cache hit possible additional network request 
doing performing server driven negotiation add appropriate vary information outbound caches won confused 
acm transactions internet technology vol 
may 
fielding taylor performance 
focused improving semantics communication components improvements user perceived performance albeit limited requirement syntax compatibility 
persistent connections 
early single request response connection behavior simple implementations resulted inefficient underlying tcp transport due overhead interaction set costs nature tcp slow start congestion control algorithm heidemann 
result extensions proposed combine multiple requests responses single connection 
proposal define new set methods encapsulating multiple requests single message returning response mime multipart 
rejected violated rest constraints 
client need know requests wanted package request written network request body length delimited content length field set initial request header fields 
second intermediaries extract messages determine ones satisfy locally 
effectively doubles number request methods complicates mechanisms selectively denying access certain methods 
adopted form persistent connections uses messages order send multiple messages single connection padmanabhan mogul 
done keep alive directive connection header field 
unfortunately general header field forwarded intermediaries intermediaries understand keep alive resulting dead lock condition 
eventually settled making persistent connections default signaling presence version value connection directive close reverse default 
important note persistent connections possible messages redefined self descriptive independent underlying transport protocol 
write caching 
support write back caching 
cache assume gets written retrievable subsequent request resource cache put request body reuse get response 
reasons rule metadata generated scenes access control get requests determined put request 
write actions web extremely rare lack write back caching significant impact performance 
rest mismatches extensions 
architectural mismatches due rd party extensions deployed external standards process due necessity remaining compatible deployed components 
acm transactions internet technology vol 
may 
modern web architecture differentiating responses 
weakness exists consistent mechanism differentiating authoritative responses generated origin server response current request responses obtained intermediary cache accessing origin server 
distinction important applications require authoritative responses safety critical information appliances health industry times error response returned client left wondering error due origin intermediary 
attempts solve additional status codes succeed authoritative nature usually orthogonal response status 
add mechanism control cache behavior desire authoritative response indicated 
cache directive request message requires cache forward request origin server cached copy requested 
allows client refresh cached copy known corrupted stale 
field regular basis interferes performance benefits caching 
general solution require responses marked action result contacting origin server 
warning response header field defined purpose widely implemented practice 
cookies 
site wide state information form cookies kristol example inappropriate extension protocol 
cookie interaction fails match rest application state model resulting confusion typical browser application 
cookie opaque data assigned origin server user agent including set cookie response header field intention user agent include cookie requests server replaced expires 
cookies typically contain array user specific configuration choices token matched server database requests 
problem cookie defined attached requests set resource identifiers usually encompassing entire site associated particular application state set currently rendered representations browser 
browser history function back button subsequently back view prior reflected cookie browser application state longer matches stored state cookie 
request sent server contain cookie current application context leading confusion sides 
cookies violate rest allow data passed sufficiently identifying semantics concern security privacy 
combination cookies referer sic header field possible track users browse sites 
result cookie applications web reliable 
functionality achieved anonymous authentication acm transactions internet technology vol 
may 
fielding taylor true client side state 
state mechanism involves preferences efficiently implemented judicious context setting uri cookies judicious means uri state unbounded number uris due embedding user id likewise cookies identify user specific shopping basket server side database efficiently implemented defining semantics shopping items hypermedia data formats allowing user agent select store items client side shopping basket complete uri check client ready purchase 
mandatory extensions 
header field names extended information contain required properly understanding message 
mandatory header field extensions require major protocol revision substantial change method semantics proposed nielsen 
aspect modern web architecture match self descriptive messaging constraints rest architectural style primarily cost implementing mandatory extension framework existing syntax exceeds clear benefits gained mandatory extensions 
reasonable expect mandatory field name extensions supported major revision existing constraints backwards compatibility syntax longer apply 
mixing metadata 
designed extend generic connector interface network connection 
intended match characteristics interface including delineation parameters control data metadata representation 
significant limitations protocol family fails syntactically distinguish representation metadata message control information transmitted header fields allow metadata effectively layered message integrity checks 
rest identified limitations protocol early standardization process anticipating lead problems deployment features persistent connections digest authentication 
workarounds developed including adding connection header field identify connection control data unsafe forwarding intermediaries algorithm canonical treatment header field digests franks 
mime syntax 
inherited message syntax mime freed borenstein order retain commonality internet protocols reuse standardized fields describing media types messages 
unfortunately mime different goals syntax designed mime goals 
mime user agents send bunch information treated coherent unknown recipients directly interact 
mime assumes agents want send information acm transactions internet technology vol 
may 
modern web architecture message sending multiple messages internet mail efficient 
mime syntax constructed package messages part multipart way postal carriers wrap packages extra 
packaging different objects single message doesn sense secure encapsulation packaged archives efficient separate requests documents cached 
applications media types html containers package user agents choose parts package retrieve separate requests 
possible multipart package non uri resources included part hasn demand 
problem mime syntax assumes transport lossy deliberately corrupting things line breaks content lengths 
syntax verbose inefficient system lossy transport inappropriate 
support deployment incompatible protocols retaining mime syntax won necessary major version continue standardized protocol elements representation metadata 

world wide web arguably world largest distributed application 
understanding key architectural principles underlying web help explain technical success may lead improvements distributed applications particularly amenable similar methods interaction 
network applications system performance dominated network communication 
distributed hypermedia system component interactions consist large grain data transfers computation intensive tasks 
rest style developed response needs 
focus generic connector interface resources representations enabled intermediate processing caching substitutability components turn allowed web applications scale requests day requests day 
rest architectural style succeeded guiding design deployment modern web architecture 
validated development berners lee fielding standards elaboration uri berners lee relative url fielding standards successful deployment dozen independently developed commercial grade software systems modern web architecture 
rest served model design guidance acid test architectural extensions web protocols 
date significant problems caused new standards subject gradual fragmented deployment alongside legacy web applications 
furthermore new standards positive effect robustness web enabled new acm transactions internet technology vol 
may 
fielding taylor methods improving user perceived performance caching hierarchies content distribution networks 
focus extending architectural guidance development replacement protocol efficient tokenized syntax losing desirable properties identified rest 
interest extending rest consider variable request priorities differentiated quality service representations consisting continuous data streams generated broadcast audio video sources 
independent original authors public discussion list collaboratively authored web forum baker created explore rest architectural style examine constraints selectively applied software systems 
acknowledgments article subset author dissertation fielding 
acknowledge mark ackerman introducing web developer community david rosenblum internet scale software architectures inspired research terms architecture simply hypermedia application layer protocol design 
kari assisted writing article extracting relevant parts dissertation updated original publication helping sense context 
web architectural style developed iteratively year period primarily months 
influenced countless discussions researchers uci staff world wide web consortium engineers uri working groups internet engineering ietf 
tim berners lee henrik frystyk nielsen dan connolly dave rohit khare jim whitehead larry masinter dan thoughtful conversations regarding nature goals www architecture 
andrews 
paradigms process interaction distributed programs 
acm computing surv 
march 

internet gopher protocol distributed document search retrieval protocol 
internet rfc march 
baker 

conveyor com cgi april 
barrett clarke tarr wise 
framework event software integration 
acm trans 
soft 
eng 
methodol 
oct 
bass clements kazman 
software architecture practice 
addison wesley reading ma 
berners lee 
universal resource identifiers www 
internet rfc june 
berners lee masinter 
uniform resource locators url 
internet rfc dec 
berners lee connolly 
hypertext markup language 
internet rfc nov 
berners lee 
www past 
computer oct 
berners lee fielding nielsen 
hypertext transfer protocol 
internet rfc may 
acm transactions internet technology vol 
may 
modern web architecture berners lee fielding masinter 
uniform resource identifiers uri generic syntax 
internet rfc aug 
brooks mazer miller 
application specific proxy servers stream transducers 
proceedings fourth international world wide web conference boston ma dec 
chin 
distributed object programming systems 
acm comput 
surv 
march 
clark tennenhouse 
architectural considerations new generation protocols 
proceedings acm sigcomm symposium philadelphia pa sept 
davis 
wais interface protocol prototype functional specification 
thinking machines apr 
fielding 
relative uniform resource locators 
internet rfc june 
fielding 
maintaining distributed hypertext welcome web 
comput 
net 
isdn syst 
nov 
fielding 
architectural styles design network software architectures 
phd dissertation 
dept information computer science university california irvine 
fielding gettys mogul nielsen masinter leach berners lee 
hypertext transfer protocol 
internet rfc june 
fielding whitehead jr anderson taylor 
web development complex information products 
commun 
acm aug 
flanagan 
java tm nutshell rd ed 
reilly associates sebastopol 
franks hallam baker lawrence leach luotonen sink stewart 
authentication basic digest access authentication 
internet rfc june 
freed borenstein 
multipurpose internet mail extensions mime part format internet message bodies 
internet rfc nov 
freed postel 
multipurpose internet mail extensions mime part registration procedures 
internet rfc nov 
fuggetta picco vigna 
understanding code mobility 
ieee trans 
soft 
eng 
may 
garlan shaw 
software architecture 
eds 
advances software engineering knowledge engineering vol 
ii world scientific 
glassman 
caching relay world wide web 
comput 
net 
isdn syst 
nov 
gr trigg 
design issues dexter hypermedia system 
commun 
acm feb 
heidemann obraczka touch 
modeling performance transport protocols 
ieee acm trans 
net 
oct 

transparent content negotiation 
internet rfc march 
kristol 
state management mechanism 
internet rfc feb 
luotonen 
world wide web proxies 
comput 
net 
isdn syst 
nov 
manola 
technologies web object model 
ieee internet comput 
jan feb 
maurer 
generation web solution 
addison wesley harlow england 
mogul fielding gettys nielsen 
interpretation version numbers 
internet rfc may 
nielsen leach lawrence 
extension framework internet rfc feb 
acm transactions internet technology vol 
may 
fielding taylor padmanabhan mogul 
improving latency 
comput 
net 
isdn syst 
dec 
perry wolf 
foundations study software architecture 
acm sigsoft soft 
eng 
notes oct 
postel 
media type registration procedure 
internet rfc nov 
postel reynolds 
file transfer protocol 
internet std rfc oct 
rosenblum wolf 
design framework internet scale event observation notification 
proceedings th european software engineering conference th acm sigsoft symposium foundations software engineering zurich switzerland sept 
sinha 
client server computing 
commun 
acm july 
sollins masinter 
functional requirements uniform resource names 
internet rfc dec 

analysis performance problems 
published web metalab unc edu release prob html 
sullivan notkin 
reconciling environment integration software evolution 
acm trans 
soft 
eng 
methodol 
july 
taylor medvidovic anderson whitehead jr robbins 
component message architectural style gui software 
ieee trans 
soft 
eng 
june 
waldo wollrath kendall 
note distributed computing 
tech 
rep tr sun microsystems laboratories nov 
wolman voelker sharma cardwell brown karlin levy 
organization analysis web object sharing caching 
proceedings nd usenix conference internet technologies systems oct 
received december revised february accepted april acm transactions internet technology vol 
may 
