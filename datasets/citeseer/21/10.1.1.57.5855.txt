optimal code generation embedded memory non homogeneous register architectures guido araujo sharad malik department electrical engineering princeton university princeton nj examines problem code generation expression trees non homogeneous register set architectures 
proposes proves optimality algorithm tasks instruction selection register allocation scheduling class architectures defined model 
optimality guaranteed sufficient conditions derived register transfer graph rtg structural representation architecture depends exclusively processor instruction set architecture isa 
experimental results tms target processor show efficacy approach 
non homogeneous register architectures frequently encountered application specific instruction set processors asips 
processors usually set specialized functional units associated registers efficiently implement operations hard performance requirements frequently occur application domain processor 
examples type units multiply accumulate units mac address calculation units acu 
time performance area constraints design asip commonly result data paths restricted connectivity 
specialization reflected instruction set architecture isa design processors typically specialized instructions take operands store resulting computation defined registers 
result limited freedom available code generation algorithm 
class non homogeneous architectures refers called model 
subset memory register architectures infinite amount memory particular storage resource type called locations available 
notorious instance class tms processor considered target architecture rest 
main problems generating code programs basic blocks select best com partially supported cnpq brazil fellowship award bination processor instructions optimally implement operations basic block direct acyclic graph dag representation 
task called instruction selection equivalent problem known np complete 
approach ease problem split dag expression trees perform tree separately 
code generation expression trees divided individual problems instruction selection register allocation scheduling 
propose optimal phase algorithm performs instruction selection register allocation instruction scheduling expression tree polynomial time constraints target processor fit model isa processor satisfy easy 
optimality criterion define 
pass algorithm described sec performs instruction selection register allocation simultaneously variation aho johnson algorithm extend non homogeneous architectures parsing 
second pass described sec algorithm takes optimally covered expression tree schedules instructions memory spills required 
algorithm propose phase uses concept register transfer graph rtg define 
provide criterion rtg enables asip designer verify exclusively isa target architecture code resulting scheduling trees isa potential optimal 
section sec contains results applying algorithm expression trees extracted dsp benchmarks 
section sec summarize major contributions provide directions extended 
optimal instruction selection register allocation algorithms instruction selection usually pattern matching techniques 
equally effective approach trellis diagrams 
method describe tree pattern matching aims provide easy fast retargetability 
context code generation tree covering expression tree pattern matching task instructions target processor represented ir tree patterns 
pattern associated cost reflects number execution cycles instruction corresponding pattern take execute 
tree covering task problem covering expression tree set patterns total number execution cycles minimized 
homogeneous register architectures selection instruction connection whatsoever types registers instruction uses 
selecting instructions non homogeneous register architectures usually requires allocating register types operands resulting data 
consequence ir patterns associated instructions kind processor carry information regarding type register instruction uses 
furthermore strong binding instructions register types suggests instruction selection register allocation tasks performed 
instruction dest 
cost pattern add plus plus minus mul mul const lack const pac sacl lac lt table partial isa tms processor consider example ir patterns tab corresponding subset instructions tms isa 
tab instruction associated tree pattern nodes composed operations plus minus mul registers constants const memory 
notice instruction implicitly defines registers uses 
example instruction take operands registers computes result back transference instructions pac transfer data represented way source register ir pattern 
problem definition problem address problem determining best cover expression tree cost pattern match depends number cycles associated instruction number cycles required move operands location currently location instruction requires 
problem solution tree grammar parsers way implement code generators 
combine dynamic programming efficient tree pattern matching algorithms optimal instruction selection 
tools automatic generation code generators tree grammars parsing effective way provide fast retargetability 
extremely desirable design process involves asips typically possible architectures evaluated selected 
observations implemented instruction selection register allocation algorithm olive simple fast easy code generator generator 
olive takes input set grammar rules tree patterns described prefixed linearized form similar notation tab 
similarly grammar description programming languages tree grammars formed terminals non terminals called grammar symbols 
register allocation specified assigning grammar non terminal location architecture data stored 
done olive rules assume format location pattern 
location non terminal node representing storage resource instruction result stored 
pattern ir tree corresponding processor instruction containing grammar terminals non terminals 
cost piece code computes cost matching subtree expression tree pattern 
action piece code emit instruction corresponding pattern 
consider example olive description tms architecture fig obtained ir patterns tab 
notice non terminals represented lowercase letters terminals capital letters 
rules correspond plus add plus minus mul mul const const lack pac sacl lac lt partial olive specification tms processor instruction numbers names right part specification instructions take operands store final result particular register respectively rule describes immediate load register rules associated data transference instructions play important role implementation proposed algorithm responsible bringing cost moving data data path total cost match 
point sake simplicity represent fig patterns corresponding commutative operations assume existence required 
consider instruction scheduling associated spills point algorithm proposed optimal refer proof 
scheduling optimal instruction selection register allocation expression tree produce optimal code 
optimal code instructions scheduled way additional memory spills introduced 
optimal algorithms exist scheduling problem class homogeneous register architectures 
sethi ullman algorithm schedules instructions pass approach 
resulting code possible number instructions corresponding fewest number memory spills registers 
aho johnson showed dynamic programming optimal code generated linear time wide class homogeneous register set architectures 
schedule proposed strong normal form theorem 
code sequence snf formed set code subsequences separated memory storages code sub sequence determined strongly contiguous schedule sc schedule 
code sequence sc schedule formed follows selected match children subtrees continuously schedule instructions corresponding subtree followed instructions corresponding sc schedules effective approach code generation non homogeneous architectures 
problem definition sc schedules non homogeneous register architectures derives fact architectures final code sequence extremely dependent order subtrees evaluated 
consider example ir tree fig 
expression tree matched algorithm proposed sec tms isa 
takes variables memory positions stores resulting computation variable memory position temporary storage 
code sequences generated different schedules shown fig 
memory position spilling location required scheduler 
code fig left subtree node scheduled followed right subtree instruction corresponding node operation 
opposite approach obtain lt lt lac lac add pac add sacl sacl sacl lt lac add lt pac sacl pac lt lt sacl lac pac sacl lt sacl sacl matched ir tree tms sc left schedule sc right schedule optimal schedule code fig 
notice sc schedules fig sc schedule produce optimal code 
obtained non sc schedule schedules addition rest tree fig 
question raised example exists guaranteed schedule spilling required 
prove schedule exist certain conditions depend exclusively isa target processor aho johnson snf schedule 
problem solution section define concept rtg show derive sufficient conditions optimal code generation architectures 
result propose linear time algorithm optimal snf code scheduling expression trees architectures prove optimality 
expression tree unary binary operations 
function maps nodes set fr ng set registers set memory locations 
root expression tree children consider allocation performed registers assigned respectively 
subtrees rooted fig 
results valid expression tree operands pattern storage locations operands immediate values indexing registers 
definition allocation deadlock say expression tree contains allocation deadlock conditions true exist nodes 
definition allocation deadlock visualized fig 
see situation sibling subtrees contain node allocated register register assigned root sibling tree 
definition possible propose result 
lemma node expression tree tu subtree rooted spill free schedule contains node tu allocation deadlock 
tree allocation deadlock trees allocation deadlock proof 
assume nodes tu free allocation deadlocks valid schedule exist definition allocation deadlock 
case happen non unary operator expression tree takes operands simultaneously location location memory 
case sc schedule schedule 
node exist 
case possible schedule followed instruction corresponding node fig 
node exist 
symmetric previous case see fig 
nodes exist 
case trivial sc schedule results valid schedule fig 
conditions applied node valid schedule free memory spilling code 
contradicts initial assumption 
corollary free schedule nodes free allocation deadlocks optimal schedule require memory spilling 
schedule determined recursively proceeding follows node schedule child node contained subtree rooted sibling proof 
directly lemma 
definition rtg rtg directed labeled graph node represents location data path architecture data stored 
edge rtg node node labeled instructions isa take operands location store result location nodes rtg divided types single register simply register nodes register files memories nodes 
memory nodes register file nodes represent set locations type store multiple operands 
rtg distinguished register nodes means double circle 
notice rtg labeled graph edge labels corresponding instructions require operation 
definition rtg criterion nodes rtg incoming edges register nodes edges common label exists directed cycle nodes say rtg criterion satisfied exists memory node cycle fig 
rtg satisfies rtg criterion tms architecture satisfies rtg criterion example consider example partial olive description fig isa tms processor 
rtg fig formed description 
numbers parenthesis right side fig label edge graph 
notice registers destinations instructions take locations operands 
cycles locations contain say tms architecture satisfies rtg criterion 
theorem rtg theorem isa satisfies rtg criterion expression tree exists schedule free memory spills 
rtg theorem proof 
expression tree rooted children subtrees rooted nodes subtrees root result operation stored memory 
define dark areas fig subtrees formed removing nodes subtrees show rtg criterion satisfied optimal schedule determined properly ordering schedules gamma gamma address cases corresponds rtg node allocation deadlock possibly occur conditions definition satisfied scheduled schedule determined corollary consider corresponds rtg node allocation deadlock possible fig 
see fig rtg criterion satisfied node allocated path goes ancestor allocated necessarily pass node allocated notice recursively schedule subtrees root allocated memory corresponds emitting advance instructions store results done memory locations live remaining subtree contains instruction uses tree scheduled corollary spill required 
notice result obtained recursively schedule subtrees gamma white areas fig followed applying corollary schedule subtree fug 
optimal scheduling algorithm fig pass algorithm proof theorem 
algorithm takes allocated expression tree resulting approach described sec produces spill free code 
pass represented procedure fig algorithm preorder traversal tree 
node sets computed memset 
set memset contains pointers nodes inside allocated node allocated path node fig 
set keeps names registers allocated nodes subtrees memset oe oe match memory match foreach children match memory memset memset fvg memset memset memset endif endfor foreach memset foreach children emit match memory return leaf unique children foreach children endif emit pass second pass second pass executes series tasks 
memset recursively schedules subtrees rooted scheduling algorithms tree origin lr rl os real updates complex update iir fir filt lag interp table number cycles compute expression trees right left rl left right lr os subtrees correspond blank areas inside fig 
finished different memory positions live conflicting subtrees reduced respectively 
second procedure fig implementation proof corollary traverses subject tree preorder 
node uses function unique determine child say match register child existence guaranteed shown theorem 
determined algorithm schedules subtree followed theorem algorithm optimal running time number nodes subject tree proof 
part trivial implements proof theorem 
theorem see algorithm touches node 
algorithm running time 
results proposed approach applied expression trees extracted ir form set programs 
tab trees dsp kernel programs benchmark 
trees extracted set programs implement signal processing speech encoding decoding cellular telephone unit 
metric compare code number cycles takes compute expression tree target processor 
possible considering instruction level parallelism ilp 
tab see algorithm os produces best code compared sc schedules expected proved optimality 
notice sc schedules occasionally produce optimal code generate bad quality code case expression tree 
notice numbers tab take consideration cost instructions required compute address variables memory 
minimizing cost problem known offset assignment efficiently solved technique proposed 
proposed optimal instruction selection register allocation instruction scheduling algorithm class non homogeneous architectures satisfy model rtg criterion define 
shown rtg model effectively improve understanding interaction isa design code generation task 
target architecture described olive efficient easily retargetable code generator generator 
currently working generalization approach broad architecture model model classes registers registers available 
aho sethi ullman 
compilers principles techniques tools 
addison wesley boston 
garey johnson 
computers intractability 
freeman new york 
aho johnson 
optimal code generation expression trees 
journal acm july 
wess 
automatic instruction code generation trellis diagrams 
proc 
int 
conf 
circuits systems volume pages 
aho ganapathi tjiang 
code generation tree matching dynamic programming 
acm trans 
prog 
lang 
systems october 
fraser hanson proebsting 
engineering simple efficient code generator 
journal acm march 
tjiang olive twig 
technical report synopsys 
sethi ullman 
generation optimal code arithmetic expressions 
journal acm october 

dsp benchmarking methodology 
technical report aachen university august 
liao devadas tjiang wang storage assignment decrease code size 
accepted publication acm conference programming language design implementation 
