optimal service selection universit di napoli federico ii napoli italy na infn works devoted service matchmaking modeling nonfunctional properties problem matching service requests offers optimal way extensively studied 
formalize kinds optimal service selection problems different criteria 
study complexity implement solutions 
prove time costs optimal selection problem computationally hard absence costs problem solved polynomial time 
designed implemented exact heuristic suboptimal algorithms hard case carried preliminary experimental evaluation interesting results 
categories subject descriptors online information services web services algorithms problems computations discrete structures general terms algorithms experimentation theory keywords service selection problem automatic service composition service matchmaking nonfunctional properties 
exists increasing body automated service selection criteria quality service qos trust cost works focus service matchmaking process service request returns set available services fulfill request offers may ranked similarity request 
papers focus modelling nonfunctional properties criteria induce preference orderings available services 
tackles depth optimization problem follows matchmaking nonfunctional property partially supported eu fp network excellence rewerse ist 
copyright held international world wide web conference committee iw 
distribution papers limited classroom personal 
www may chiba japan 
acm 
universit di napoli federico ii napoli italy paola evaluation best way binding service request matching service 
problem may nontrivial optimization involves multiple service requests 
consider example composite services modelled workflows activity potentially corresponds different service 
framework decision problem consists finding optimal matching adopted criteria set activities occurring workflow set available services carry activities 
consider optimal service selection set service requests activities occurring workflow set service offers available services result matchmaking process associates request set offers satisfy numeric preference measure 
numeric measures suited number preference criteria practical interest costs various sorts bandwidth trust qos criteria 
different criteria merged single numerical value 
preferences costs may associated services service invocations illustrated examples trust associated services service invocations 
user preferences driven privacy protection security usually refer services independently specific call 
information service may trusted queries case trust associated individual invocations 
services activation cost registration cost paid time service invoked 
costs associated services depend number calls nature 
services pay basis downloads digital library electronic purchases 
case costs preferences may depend specific request associated service invocation 
services cost activation cost telephone providers 
bandwidth transmission speed may vary different service calls 
example service may faster certain times day 
example connection costs depend duration particular call 
shall contribute understanding service selection problem ssp short formalizing studying classes ssp problems selection costs different qos criteria respectively 
simplicity assume costs preferences totally ordered static time independent partially ordered dynamic nonfunctional properties dealt forthcoming 
shall prove general despite aforementioned simplifying assumptions optimal service selection problem harder np polynomial hierarchy collapses 
precisely fp np famous hard optimization problems checking optimal cost equals constant dp complete 
shall identify practical cases problem solved polynomial time 
particular show high computational complexity service selection problem caused time costs associated service offers initialization registration costs 
absence time costs optimal selection problem solved polynomial time applying greedy approach 
shall illustrate results experimental evaluation exact heuristic algorithms different classes problem instances 
organized follows 
section recall definition complexity classes needed 
section service selection problems formalized 
section contains complexity results algorithms class cost criteria reports experimental results algorithms 
section illustrates complexity results algorithms remaining classes qos criteria 
section concludes discussion results list interesting directions 

preliminaries complexity assume reader familiar basics computational complexity 
refer details 
class dp class decision problems containing np 
dp defined class languages np np 
complete np np respectively complete dp 
class fp np class function problems problems compute value answer solved polynomial time deterministic turing machine oracle np 
standard optimization problems complete fp np example traveling salesman problem max weight sat fp np complete chapter 

problem formalization instances service selection problems ssp addressed tuples 
nonempty set service requests 
nonempty set service offers matching requests offers intuitively request satisfied decision phase reached function assigns cost quality measure cs offer function assigns cost quality measure krs pair possible service call 
goal finding binding requests offers compatible matching optimal preferences associated services invocations 
formally binding total function condition ensures binding exists 
anticipated optimality bindings evaluated different objective functions 
objective function denoted cb appropriate criteria totally ordered costs money time cost binding obtained summing costs calls specified binding plus time costs associated called services initialization registration costs 
precisely denote range informally speaking set services total cost binding cb kr cs 
second objective function denoted qb appropriate qos criteria 
suppose aim optimization problem case maximizing simultaneously quality requested service 
quality binding modelled summing qualities selected request offer match qb kr cb 
computes quality solution provided selected service request appropriately combining measure kr associated service call measure cb associated service 
assume computed polynomial time instance different applications may require different functions example suppose satisfied invoking network connection 
packet rate influenced server speed bandwidth allowed intermediate routers lowest rate determines rate connection 
suppose values kij measures inclusion means requests totally ordered costs typically appropriate uniform costs multi dimensional costs total preference dimensions money time 
packet rate allowed connection values cj measure packet rate servers appropriate set min 
example suppose values kij measure quality connections values cj measure level trust information released service service may preferred quality connection time ii level trust high 
case min adequate sensitive increment maximal argument forces simultaneous improvement values kij cj 
function sensitive parameters appropriate may adopt 
third objective function denoted appropriate qos criteria 
compound service quality worst component service affects quality entire service 
example privacy preservation degree compound service issuing set requests determined minimal privacy preservation degree service components individual invocations 
kind scenario quality estimates kr cb combined minimum min kr cb 
objective functions cb qb induce classes ssp sspc ssp instance find binding minimizes cost function cb 
ssp instance find binding maximizes quality function qb 
ssp ssp instance find binding maximizes quality function problems qb different stated result theorem 
ssp instance 
solutions solutions ssp 
conversely solution ssp solution 
intuitively reason ssp considers bottlenecks tries improve services 

complexity algorithms sspc prove sspc np hard reduction uncapacitated facility location problem uflp defined follows 
bipartite graph set facilities cities fj represent cost opening facility location cij represent cost serving city open facility goal find subset assignment function assign cities total cost minimized 
great variety types facility location problems depending features components contribute model definition 
basic classes facility location problems listed 

upper bounds number cities facility serve corresponding problem classified capacitated facility location problem 

data probability distribution problem considered stochastic referred deterministic 

decision process concerned location facilities open moment opening corresponding problem called dynamic facility location problem called static facility location problem 
uncapacitated facility location problem need static deterministic admits integer programming formulation 
mx nx nx uflp min cij xij nx xij yj xij xij yj constraints impose city assigned facility constraints restrict assignments open facilities 
despite simple formulation location problems difficult solve 
special cases decision version solution cost 
shown np hard reduction vertex cover problem membership np straightforward 
extensive survey location problems complexities applications book edited francis 
setting cj fj kij cij uflp reduced sspc viceversa 
prove result proposition 
deciding optimal cost instance sspc equals rational np complete 
result express optimality check conjunction np complete test npcomplete test get theorem 
theorem 
deciding optimal cost instance sspc equals rational 
optimal cost computed binary search proposition oracle np 
procedure provides upper bound complexity optimization problem 
theorem 
computing optimal cost instance sspc fp np note theorem optimization problem harder np polynomial hierarchy collapses 
source complexity lies time costs associated services shown subsections 
exact approximated algorithms algorithms described section accept slightly modified instances sspc function extended setting kij algorithm solves exactly problem obvious way exhaustively trying possible bindings 
optimization consists aborting tentative binding construction value current partial binding exceeds best cost far 
intractable nature problem approximate solutions natural choice dealing large instances 
constant factor approximation algorithm facility location problems due shmoys appeared literature 
guha khuller proved impossible get approximation guarantee np dtime log log 
scientific papers published line research 
exploration approximate solutions implemented best known approximation algorithm algorithm proposed 
algorithm ensures ratio cost returned solution optimal cost bounded 
algorithm combines greedy algorithm proposed jain algorithm idea cost scaling implemented quasi linear time showed authors result thorup 
investigated simple heuristic approach requiring time mn 
algorithm consists phases greedy adaptive construction phase line calling algorithm local search phase lines 
algorithms sets requests rs served service formally defined rs algorithm algorithm return inverse bindings represented pairs rs boolean vector ys iff offer binding ii family rs defines offer requests satisfied starting empty solution phase algorithm iteratively constructs feasible solution greedy adaptive fashion greedy function defined matching service costs 
iteration new matching determined unmatched request convenient offer 
iterations cost offer considered evaluating greedy choice greedy adaptive schema 
running time algorithm performs phase mn 
starting feasible binding construction phase local search phase tries time mn find better binding slightly perturbing 
particular invoked offer 
algorithm looks alternative convenient offer serve requests currently matched may associated requests necessarily 
service requests served redirected strategy expected especially presence multi function services discounts users register service options 
case heavy functionalities algorithm algorithm ur bc inputs ur unmatched requests called offers partial cost bc best cost vector costs associated services matrix costs associated invocations 
outputs best cost optimal binding bc return bc abort search keep current best cost ur better complete solution bc save current binding return new best cost choose ur krs bind cs krs cs krs cs bc ur cs bc return bc find service convenient time cost higher competing services 
experimental evaluation algorithms discussed section 
polynomially solvable subclass suppose time costs associated services null cs 
costs krs associated service invocations may greater zero 
special case ssp equivalent special transportation problem polynomially solved greedy approach greedy function optimal solution activates services simply matches service request cheapest service 
easy show optimal cost computed algorithm null input cost vector theorem 
binding corresponding values rs returned algorithm optimal null 
note case pure greedy algorithm running mn time 
corollary follows immediately 
corollary 
holds sspc solved time mn 
source complexity sspc light section interesting investigate complexity sspc invocation costs null krs algorithm approx outputs approximate binding represented rs cost rs jain bool true bool max ys krs krs krb max cs cs max cs cs qv max yv dv rv qv rv dj dj rj rj rj yj bool false return algorithm jain outputs approximate binding represented rs cost budget ys exists 
budget budget ys budget krs budget krs krb krs krb krs cs ys rj rj dj dj rj yj rs rs ds ds budget krs rs rs ds ds krs ys cs ds return rs algorithm outputs suboptimal binding represented rs cost rs local search phase ys improved false improved rs gain cs ds cl yl gain rl rl rs dl dl rs ds ys yl improved true gain return rs algorithm outputs suboptimal binding represented rs cost costs see 
init structures rs ys ds total cost calls min min cs ys krs min cs ys krs best min kr best return rs costs cj may nonzero 
case sspc remains difficult 
computational complexity remains high holds costs cj identical nonzero cs ct 
prove note hitting set problem reduced decision version sspc satisfying 
hitting set problem formulated follows finite set collection sets si positive decide exists 
si hitting set problem known np complete 
hitting set problem reduced decision version sspc restrictions defining 
may assume finite initial segment si analogy cost estimates general case prove class sspc instances satisfying checking optimal cost equals rational dp complete 
computing optimal cost fp np result results previous section conclude costs cj associated services entirely responsible high computational complexity sspc 
holds service offers cost 
intuitively case hard choose services activation cost compete offering different partially overlapping sets free functionalities 
experimental results performed preliminary experiments algorithms implementation running pentium ghz mb 
compare algorithms applied set randomly generated instances criteria 
recall number requests number offers 
considered instances assuming set offers practice significantly larger set requests workflow 
fixed range invocation costs range time costs order check influence relative weight triple instances randomly generated 
runs longer hour killed 
algorithm computes optimal solution exhibited satisfactory performance instances 
maximal elapsed time seconds 
performance started decrease 
maximal elapsed time decision version sspc ssp instance cost decide solution cost runs killed maximal elapsed time runs runs killed maximal elapsed time non killed runs minutes 
algorithms faster course 
killed killed 
average time algorithm minutes 
algorithm faster average seconds extensive experimentations needed confirm explain observation 
average execution times algorithm reported 
illustrates execution time grows size problem instance influence time costs performance 
particular appears time costs negligible algorithm faster 
upper bound time costs random generator tenth upper bound costs average time drops seconds 
measured quality approximate solutions returned algorithm evaluating relative error solution relative error ap proximate cost optimal cost computed error instances optimal cost available exact algorithm killed 
average errors bad naive heuristics 
case need experiments validate observation 

complexity algorithms ssp sspc ssp easy 
problems solved way 
algorithm solves version objective functions qb 
algorithm outputs optimal binding quality level krs cs krs cs best best return solve version change algorithm required replace line min hard prove correctness versions algorithm ssp property straightforward analysis algorithm conclude theorem 
ssp solved time mn 
approach easily extended objective function similar polynomially computable monotonic combination functions min 
details extended version 

summarizing formalized kinds optimal service selection problems cost minimization different quality maximization criteria proved cost minimization problem sspc generally hard quality maximization problems ssp solved polynomial time 
particular sspc fp np harder np polynomial hierarchy collapses 
proved reason high computational complexity sspc lies time costs associated service offers initialization registration costs 
costs null sspc solvable polynomial time contrary absence costs problem easier 
designed implemented algorithms computing exact solutions versions ssp 
exact algorithm sspc algorithm evaluated experimentally 
current results instances requests offers nicely handled algorithm larger instances performance quickly decreases making algorithm inapplicable 
designed implemented suboptimal solutions evaluated experimentally 
currently algorithm guaranteed bound relative error slow real time service selection large workflows offer sets 
heuristic algorithm algorithm faster guarantees quality solution 
planning carry experiments validate refine preliminary observations 
trying sharpen complexity bounds know sspc complete fp np 
generalizing framework considering optimization problems involve simultaneous cost minimization quality maximization multidimensional measures induce partially ordered measures nonfunctional properties cases multiple criteria reduced single totally ordered numeric measures 
direction generalization concerns time dependent costs preferences 

acknowledgments authors grateful anonymous referees insightful constructive comments alessio help implementation experimentation phase 
partially supported network excellence rewerse eu sixth framework program ist 
time sec 
influence problem size offers sec offers sec requests aberer 
grid self organizing access structure information systems 
cooperative information systems th international conference coopis volume lncs pages 
springer 

service description logics 
logics artificial intelligence european conf jelia volume lncs pages 
springer 
binder faltings 
extensible directory enabling efficient semantic web service integration 
rd international semantic web conference iswc hiroshima japan november 
faltings binder 
type composition information services large scale environments 
ieee wic acm international conference web intelligence wi beijing china september 
shao gray 
quality service management framework user expectations 
service oriented computing volume lncs pages 
springer 

service discovery orchestration distributed service repositories 
service oriented computing volume lncs pages 
springer 
garey johnson 
computers intractability guide theory np completeness 
freeman 
guha khuller 
greedy strikes back improved facility location algorithms 
journal algorithms 
jain 
new greedy approach facility location problems 
th annual acm symposium theory computing pages 
time sec performance algorithm influence time costs average max max ratio jain vazirani 
approximation algorithms metric facility location median problems primal dual schema lagrangian relaxation 
journal acm 
kawamura 
hasegawa paolucci sycara 
preliminary report public experiment semantic service matchmaker uddi business registry 
service oriented computing volume lncs pages 
springer 
lassila 
interleaving discovery composition simple workflows 
semantic web services aaai spring symposium series 
aaai 
li horrocks 
software framework matchmaking semantic web technology 
proceedings twelfth international world wide web conference www pages 
acm 
ye zhang 
improved approximation algorithms metric facility location problems 
th international workshop randomization approximation techniques computer science approx pages 
springer verlag 
ye zhang 
approximation algorithms metric facility location problems 
submitted siam journal computing 
mart az ruiz cort dur 
automating procurement web services 
service oriented computing volume lncs pages 
springer 
pernici 
reflective architectures adaptive information systems 
service oriented computing volume lncs pages 
springer 
francis 
discrete location theory 
john wiley sons 
oaks ter hofstede edmond 
describing services 
service oriented computing volume lncs pages 
springer 
omicini zambonelli klusch tolksdorf editors 
coordination internet agents models technologies applications 
springer 
paolucci kawamura payne sycara 
semantic matching web services capabilities 
proceedings st international semantic web conference iswc 
papadimitriou 
computational complexity 
addison wesley 
shmoys tardos 
approximation algorithms facility location problems 
th annual acm symposium theory computing pages 
singh liu 
trustme anonymous management trust relationships decentralized systems 
rd international conference peer peer computing pages 
ieee computer society 

improved approximation algorithm metric uncapacitated facility location problem 
th conference integer programming combinatorial optimization pages 
sycara lu klusch 
matchmaking heterogeneous agents internet 
proc 
aaai spring symposium intelligent agents cyberspace 
thorup 
quick facility location 
th acm siam symposium discrete algorithms pages 
wang 
semantic structure matching assessing web service similarity 
service oriented computing volume lncs pages 
springer 
wang vassileva 
bayesian network trust model 
ieee wic international conference web intelligence wi pages 
ieee computer society 
xiong liu 
peertrust supporting reputation trust peer peer electronic communities 
ieee trans 
knowledge data engineering 
