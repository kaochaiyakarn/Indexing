proving termination ac rewriting extended rules cristina albert rubio universitat de vic spain email cristina uvic es universitat polit de catalunya barcelona spain email rubio lsi upc es 
polynomial interpretations rpo orderings allow prove termination associative commutative ac rewriting checking rules rewrite system considering called extended rules 
methods important limitations termination proving tools 
overcome limitations powerful methods dependency pairs method extended ac case 
unfortunately order ensure ac termination extended rules general hard prove added rewrite system 
new automatable ordering termination proving method ac rewriting need consider extended rules 
due easily prove non trivial examples appearing literature knowledge handled automatic method 
programming theorem proving common binary operators satisfy associative commutative properties 
axioms treated additional rules rewrite system commutativity oriented founded ordering require special treatment 
common approach deal ac symbols rewriting modulo ac rewriting matching modulo associativity commutativity detect applicability rules 
example taken mu describes addition multiplication natural numbers binary notation defined constant denoting empty sequence digits unary functions add right 
instance written 
example 
example ac symbols 




due fact rewriting performed modulo ac axioms proving termination difficult task 
particular applied method ac compatible roughly means terms class treated way 
ordering termination proof method ac compatibility means term greater term term ac equivalent greater term ac equivalent efforts bcl bp dp rn ks rub order obtain ac compatible simplification orderings monotonic orderings including subterm relation extending methods standard rewriting 
methods general suited automation 
standard rewriting ac compatible simplification orderings important limitations termination proving tools 
instance term rewrite systems trss terminating contained simplification ordering simply terminating 
mu kt dependency pairs method ag prove termination trss simply terminating adapted deal ac rewriting gk adapted rewriting modulo general equational theories 
ac versions dependency pairs method need consider called extended rules 
ac case means add set rules extended rule new variable rule headed ac symbol previous example add 



extended rules needed ensure monotonicity respect 
adding system usually termination proof harder 
alternative dependency pair method monotonic semantic path ordering mspo bfr monotonic version semantic path ordering spo kl 
spo generalizes path orderings recursive path ordering rpo der replacing precedence measure defined quasi ordering involving term head symbol 
aim adapt mspo deal ac symbols obtaining fully monotonic ac ordering allows avoid extended rules 
ideas adapt rpo ac case rub spo adapted obtain associative commutative spo acspo 
monotonic version acspo called obtained 
acspo acrpo share structure finding appropriate formulation ordering easy task 
order ensure properties acspo new conditions underlying quasi ordering inside spo needed 
conditions tight ordering weak 
additionally ensure stability substitutions necessary linearize variables terms fortunately shown required single case 
able obtain simple termination proof ternary integral arithmetic example cmr computing addition multiplication integers balanced ternary notation unary functions representing respectively gamma see knu pages details 
example 
ac symbols 






gamma opp opp opp 
opp opp 
opp opp 
opp 

opp proving termination example trivial 
cmr quite complex ad hoc hand tailored proof termination lexicographic combination interpretations non negative integers 
mu ac version dependency pairs method ag proving termination example extended rules ac marked symbols necessary deal example turned unsound 
shown mspo br method fully automated constraint solving system see section details 
organized follows 
section devoted preliminaries orderings ac rewriting 
section ac semantic path ordering acspo build method introduced 
monotonic version acspo section 
section check termination examples section shown implemented fully automated termination proving tool constraint framework similar dependency pairs method 
discussed section 
due lack space included proof properties orderings 
br 
ac rewriting termination consider set function symbols fac subset containing ac symbols set variables set terms built rewriting modulo ac ac rewriting consists rewriting equivalence classes defined associativity commutativity axioms 
syntactic equality rewriting modulo ac considers ac congruence generated associativity commutativity axioms symbols fac trs term rewrites modulo ac denoted ac ac loe rule term position substitution oe ac roe arbitrary terms function symbol oe substitution 
quasi ordering transitive reflexive relation 
strict part strict ordering iff 
equivalence note disjoint union denotes syntactic equality quasi ordering strict part quasi ordering monotonic implies stable substitutions implies soe toe 
strict partial ordering transitive irreflexive relation 
monotonic implies stable substitutions implies soe toe 
monotonic orderings stable substitutions called rewrite orderings 
reduction ordering rewrite ordering wellfounded infinite sequences rewrite relation defined ac equivalence classes ordering prove termination ac rewriting ac compatible 
definition 
relation said ac compatible compatible ac relation 
particular ac compatible ac ac implies ac compatible ac ac implies theorem 
ac compatible reduction ordering trs 
rules terminating rewriting modulo ac 
ac multiset extension ac compatible ordering defined standard way ac equality syntactic equality 
common way easily obtain ac compatibility consider terms flattened wrt 
ac symbols 
flat form denoted normal form wrt 
infinite set rules gamma xn gamma xn fac 
note due flattening need consider variable arities greater equal symbols fac follows easy induction ac iff equal permutation arguments ac symbols 
denote ac equality permutation arguments ac symbols ac standard extension ac multisets 
terms assumed flattened form 
considering flattened terms orderings frequently loses monotonicity 
instance recursive path ordering rpo symbol greater symbol ac symbol rpo rpo flattened form rpo 
usual way recover monotonicity consists giving special treatment small symbols occur big ac symbol term flattened form adding context flattening rules need applied top position arguments 
define top flattening term wrt 
denoted tf tf tf top tf flattened form flattened term flattened context 
give definitions concerns ac symbols 
strict ordering ac monotonic implies tf tf fac quasi ordering ac monotonic implies tf tf fac fulfils ac deletion property fac 
acrpo give restricted version acrpo rub precedence founded quasi ordering set function symbols total arguments compared multisets 
definition acrpo main difference rpo appears comparing terms headed ac symbol case order ensure monotonicity give different treatment arguments headed symbols bigger arguments headed symbols smaller reason need define multi sets terms 
definition 
term form fac multiset arguments headed big symbol denoted defined fs top fg multiset arguments headed symbol smaller denoted defined fs top set terms embedded argument headed small symbol denoted defined ff tf note difference includes variables arguments 
ac equivalent terms multi sets coincide modulo ac 
instance fac fh ag fx ag ff additionally need count number arguments term headed ac symbol order preserve stability substitutions describe counting means expression variables 
definition 
term form fac expression variables positive integers defined variable 
example means arguments coming applying substitution flattening ones coming plus 
compare amount arguments terms checking necessary achieve stability substitution 
ac equivalent terms counting coincides 
definition 
founded total precedence terms 
acrpo 
acrpo ng 
acrpo mg 
fac fs ng acrpo ft ng 
fac acrpo 
fac acrpo acrpo acrpo fs ng acrpo ft mg acrpo acrpo ac acrpo ac multiset extension acrpo condition ensures variable taken care variable argument headed big symbol 
instantiation variable term headed big symbol know argument instantiation headed big symbol takes care 
examples show behavior ordering comparing terms headed ac symbol 
example 
fac fac take precedence 
acrpo case implies tf 

acrpo case case fh acrpo fh acrpo 

acrpo case acrpo applying case acrpo case fh 

acrpo case fh fh fh ag acrpo fh bg 

acrpo case fh yg acrpo fyg fh acrpo acrpo case fh yg fh 
ac compatible polynomial interpretations polynomial interpretations prove ac termination 
achieve ac compatibility need define polynomial interpretations ac equivalent terms interpretation 
polynomial interpretations ingredient termination proofs 
define quasi ordering strict ordering interpretations follows iff iff 
ensure monotonicity consider polynomial interpretations non negative integer coefficients 
note included coincide strict part reason making distinction stable substitutions strict part shown example replacing 
instantiation compare strict part instantiation 
defined strict ordering stability problem 
lemma gives sufficient condition ensure ac compatibility 
lemma 
bcl polynomial interpretation 
ac symbol form axy ac ac compatible 
instance ac symbols interpretation defined fulfills conditions 
spo conclude preliminaries recall briefly definition semantic path ordering kl 
spo generalization rpo comparison precedence replaced comparison underlying involving term 
slightly modified version spo underlying quasi ordering compatible ordering pair includes quasi ordering strict ordering compatible done order polynomial interpretations underlying seen strict polynomial ordering defined coincide strict part polynomial quasi ordering stable substitutions see section 
definition 
quasi ordering ordering 
hq compatible ordering pair compatible implies founded 
stable substitutions 
compatible ordering pairs defined polynomial interpretations standard term interpretations term ordering 
possibility combine lexicographically precedence quasi orderings obtained interpretations 
compatible ordering pair build spo recursive way path ordering scheme 
definition 
spo 
hq compatible ordering pair 
terms 
spo 
spo ng 
spo mg 
fs ng spo ft mg spo spo spo multiset extension spo semantic path ordering founded ordering stable substitutions 
unfortunately general monotonic 
ac semantic path ordering section define ac compatible version spo definition acrpo 
case able adapt acrpo scheme need restrict family underlying orderings inside spo precedence lexicographically quasi ordering comparing terms 
additionally order ensure stability substitutions need impose extra conditions quasi ordering 
definition 
quasi ordering ordering 
hq ac compatible ordering pair hq compatible ordering pair 
ac compatible 
fulfils ac deletion property 
addition say hq ac monotonic ac monotonic 
conditions relating precedence 
fac xn implies fac due unavoidable condition ac compatible conditions easily satisfied 
condition impact symbols smaller precedence ac symbol 
allowed classes quasi orderings turn powerful obtain simple proofs termination non trivial examples 
additionally due stability substitutions need linearize variables comparing terms headed equivalent 
definition 
terms top top fac set variables linearization wrt 
defined lin lin new example 
fac fzg hs ti lin hf give definition acspo 
simplicity reasons considered total precedences acrpo condition removed 
hand consider union syntactic equality flat form defined normal form wrt 
rules gamma xn gamma xn fac definition 
acspo 
total founded precedence implies fac fac hq ac monotonic ac compatible ordering pair fulfilling conditions 
terms 
acspo 
acspo ng 
fac acspo 
acspo mg 
fac fs ng acspo ft ng 
fac acspo acspo acspo fs ng acspo ft mg acspo acspo ac acspo ac multiset extension acspo lin set variables fx acspo definition section 
note linearization needed case checking recursively terms 
case required acspo ensures variable occurring argument acspo fxg occurrences argument argument linearization occurrences variables arguments renamed 
theorem 
acspo founded ac compatible ordering stable substitutions 
monotonic ac semantic path ordering obtain monotonic version technique mspo bfr considering ac reduction triplets form definition 
quasi ordering monotonic wrt 
implies note fac may need apply flattening 
ac reduction triplet hq ac monotonic ac compatible ordering pair ac compatible monotonic stable substitutions quasi ordering monotonic wrt 
definition 

precedence ac reduction triplet satisfies conditions 
iff acspo note fulfil condition required definition acspo 
theorem 
ac compatible reduction ordering 
result implies suitable method proving need considering extension rule 
order method practice need build actual adequate triplets fulfilling requirements 
cases define respectively application respectively terms applying renaming non ac head symbols dependency pairs method 
iff respectively iff renaming mapping applied top positions non ac symbols 
case monotonicity wrt 
implied monotonicity examples considered renaming needed hq coincide 
pair defined polynomial interpretation seen section 
pair obtained standard term interpretations straightforward conditions ensure properties ac compatible reduction ordering terms acrpo similar way done dependency pairs method mspo 
furthermore hq coincide conditions imposed satisfied check ac monotonic ac compatible ordering pair apart monotonicity required satisfies 
lemma provides sufficient conditions polynomial interpretation satisfy required properties 
polynomial interpretations said strictly positive symbol interpreted interpretation symbol said fully argument dependent xn depends xn lemma 
precedence polynomial interpretation nonnegative integer coefficients 
pair ac monotonic ac compatible ordering pair monotonic satisfies ac symbol axy 
ac 
strictly positive 
symbol ac symbol 
strictly positive interpretation fully argument dependent 
xn xn polynomial 
similarly impose simple condition term interpretations order satisfy required properties 
examples section examples ingredients precedence polynomial interpretation required show termination 
examples checked rules included detailed example 
section assume ingredients provided user need check rules definition usually done path orderings 
section way automatically generate ingredients studied 
start simple example 
example 
ac symbols 
minus minus minus quot quot quot minus rules included precedence quot minus hq polynomial interpretation quot minus example comes complete proof showing rules included ingredients precedence polynomial interpretation 
example 
binary arithmetic 
recall rules ac symbols 




take precedence hq polynomial interpretation show definition checking rules 
check rules included definition means acspo pi prove pi show acspo 
acspo case acspo case acspo case acspo case acspo applying case twice acspo case acspo applying case twice acspo case acspo case acspo applying case twice acspo applying case twice acspo case acspo case acspo case acspo case acspo case acspo case acspo case acspo case come back second example 
provide ingredients proof 
note polynomial interpretation simple shows precedence crucial 
example 
ternary integral arithmetic example 
proved included follows take precedence gamma opp hq polynomial interpretation opp gamma example include ac symbol proved terminating combination rules ternary integral arithmetic previous example 
trs cmr describe rational numbers 
example 
ternary integral arithmetic cont 
sign sign sign sign sign sign sign sign sign abs abs abs abs abs abs abs abs abs abs abs opp min min abs gamma abs min min abs gamma abs min min abs gamma abs min min min min min min min min min rules example rules 
proved included precedence min min min min 
abs abs 
gamma opp hq polynomial interpretation opp gammay sign sign abs abs min min min min constraints proving termination translated constraint solving problem way done mspo bfr implemented fully automated system called br 
idea extract set constraints application definition set rules 
solve constraints proof termination trs 
obtain set constraints condition definition applied rules 
automatically generate precedence application acspo 
note theoretically exponentially possibilities practice done efficiently non ac case 
obtain constraints applying definition acspo 
instance example guessing precedence assuming simplicity reasons resp 
resp 
coincide constraints 
set coming condition definition second set coming recursive application definition acspo adding conditions fact find chosen path definition acspo taken path proof example 
example comparisons solved subterm case ac embedding case precedence case constraint second set constraints handled solved finding appropriate polynomial interpretation done instance cime system 
currently working implementation method inside system 
method simplification ordering prove ac termination considering extended rules 
allow prove simple way non trivial examples literature 
order ensure monotonicity stability substitutions needed impose additional conditions underlying orderings acspo 
conditions relaxed adding checking acspo linearizations restrict applicability method 
trade conditions imposed underlying orderings conditions required checking acspo analyzed 
nice property method strongly believe easily combined methods extended rules 
fact obtain simpler ac compatible version spo called needs consider extended rules 
case need flatten terms require underlying quasi ordering ac compatible 
resulting method similar existing ac versions dependency pairs method 
currently working combination ac extensions spo acspo aim obtaining method ac symbol choose add extended rules 
ac symbol treated acspo extended rules included treated symbols 
way get best methods 
ag arts giesl 
termination term rewriting dependency pairs 
theoretical computer science 
bcl ben pierre lescanne 
termination rewriting systems polynomial interpretations implementation 
science computer programming 
bfr ferreira rubio 
complete monotonic semantic path orderings 
proc 
th int 
conf 
automated deduction lnai 
bp bachmair plaisted 
termination orderings rewriting systems 
journal symbolic computation 
br rubio 
monotonic higher order semantic path ordering 
proc 
th int 
conf 
logic programming artificial intelligence reasoning lpar lnai 
br rubio 
termination proof techniques automation 
available www lsi upc es albert 
br rubio 
proving termination extended rules 
long version 
available www lsi upc es albert 
march urban 
cime system 

available cime lri fr 
cmr march 
rewrite systems natural integral rational arithmetic 
proc 
th int 
conf 
rewriting techniques applications rta lncs 
der nachum dershowitz 
orderings term rewriting systems 
theoretical computer science 
dp catherine laurence 
extension associative path ordering chain associative commutative symbols 
proc 
th int 
conf 
rewriting techniques applications rta lncs 
gk giesl kapur dependency pairs equational rewriting 
proc 
th int 
conf 
rewriting techniques applications rta lncs 
kl kamin levy 
generalizations recursive path ordering 
unpublished note dept computer science univ illinois urbana il 
knu knuth 
art computer programming 
vol 
algorithms 
third edition 
addison wesley 
ks kapur sivakumar 
proving associative commutative termination rpo compatible orderings 
proc 
automated deduction classical non classical logics lnai 
kapur sivakumar zhang 
path ordering proving termination ac rewrite systems 
journal automated reasoning 
kt toyama 
proving ac termination pairs 
ieice transactions information systems 
mu claude march xavier 
termination rewriting dependency pairs 
proc 
th int 
conf 
rewriting techniques applications rta lncs 
rn rubio nieuwenhuis 
total ac compatible ordering rpo theoretical computer science 
rub rubio 
fully syntactic ac rpo 
information computation 

approche incr des de 
phd thesis universit paris sud scientifique orsay 

