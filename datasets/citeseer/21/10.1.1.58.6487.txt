pattern language design aspect languages aspect composition frameworks uwe zdun new media lab department information systems vienna university economics austria zdun acm org aspects avoid tangled solutions cross cutting design concerns 
unfortunately various reasons may hard aspect language aspect composition framework solution developers faced crosscutting design concerns tangled code structures 
instance certain limitations specific aspect composition frameworks hinder aspects 
particular project requirements constraints programming language limitations performance memory developers able existing aspect composition framework 
cases developers benefit better understanding existing aspect composition frameworks 
help developers customize existing techniques implement simple aspect composition frameworks scratch 
purposes pattern language tracing manipulating software structures dependencies explain different existing aspect composition frameworks sequences pattern language 
evaluate alternative designs common design trade offs design decisions implementing aspect composition frameworks 
addresses implementation techniques composing weaving aspects 
different composition frameworks aspect oriented programming aop distinct comparable 
number languages frameworks tools proposed aop 
date works commonalities aop approaches 
works propose integrating terminology model different aop approaches 
filman friedman instance propose generic definition aop 
understand aop quantified programmatic assertions programs written programmers oblivious assertions 
kiczales implement number aop concepts simple object oriented language pointcuts advice traversal specification class hierarchy composition open classes 
implementations compare different aop concepts realize modular cross cutting 
authors generalize concrete aop implementations providing design languages aspects 
instance clarke walker provide uml modeling language aop concepts 
authors propose formal models specific aspect oriented concepts 
instance propose formal model method call interception 
works summarized provide understanding aop single implementation 
approaches focus concepts aop 
take different stance concentrate internal implementation aspect composition frameworks cases implementations visible aspect composition framework user 
explain compare aspect composition framework implementations pattern approach 
basic idea common distinctive properties design aspect composition framework implementations explained pattern language tracing manipulating software structures dependencies 
discuss patterns implementing successful aspect composition frameworks 
purpose propose new aspect concept explain evaluate existing technical solutions 
describing pattern language briefly concentrate different implementations aspect composition frameworks 
explained sequences pattern language particular discuss generative aspect language implementations example aspectj discuss hyper example byte code manipulation approach composition rules discuss jac jboss aop examples load time byte code manipulation implementing dynamic wrappers message interception discuss aspects dynamic message redirection examples xotcl message interceptors message interceptors popular middleware discuss aspects class graph traversals example dj discuss approaches interesting characteristics briefly 
pattern language evaluate alternatives common design trade offs design decisions implementing aspect composition frameworks 
aop terms briefly introduce terms quite accepted aop community subsequent examples 
terms originate aspectj terminology 
describe constituents aspect number aop approaches note kinds aspects joinpoints specific defined events control flow executed program 
advice behavior triggered certain event inserted control flow specific joinpoint reached 
advices allow transparently apply behavior control flow 
pointcuts glue joinpoints advices pointcut declaration tells aspect composition framework advices applied joinpoints 
generic term aspect composition framework aspect language aop implementations include aspect language 
aspect language provides framework composing aspects 
introductions change structure object system 
typical introductions add methods fields existing class change interfaces existing class 
introductions supported aspect composition frameworks 
motivation target audience targets developers need understand aspect composition frameworks realized 
conceptual understanding internals required effectively working aspect composition framework 
help select best solution task comparing different implementations trade offs 
cases existing aspect composition frameworks languages provide suitable solution developers additions customizations existing implementations develop house aspect composition framework 
remainder section discuss number motivations lead situations 
number potential practical problems existing aspect composition framework implementations aspect composition frameworks exist programming languages language aop support especially legacy system context 
computation environment limited embedded systems problematic current aop systems produce memory performance overheads runtime environment conceptual point view aspect concept reduce eliminate overheads 
instance small components project implements things project specific aspect composition frameworks avoiding overhead runtime environment 
simply business decision third party language extensions project 
aspect models quite complex languages 
solving simplistic aop problems required learning effort large writing simple project specific aspect composition framework effort 
main motivation observation current aspect constructs completely concerns lead novel aspect concepts implementations 
issue discussed aop community 
instance guerraoui report experiences automatically non transaction code transactions doomed failure 
separating transaction interfaces aspects problematic leads artificial separation transaction aspect object applies 
rashid propose aop techniques effective means modularized persistence 
identify limitation trade offs reusability performance persistence aspects need 
available aop tools provide optimal aspect constructs implementing persistence aspects 
soares successfully aspectj distribution persistence aspects web information system 
identify number drawbacks 
instance aspects unintended side effects hard foresee 
problems regarding reuse aspects aspect specifications lexically refer elements system applied 
concrete case aspectj pointcuts adopt system naming conventions reusable systems 
important note term aspect broader aop concepts currently realized aspect composition frameworks 
primarily realize extensional called superimposed aspects separated object oriented language construct class structure aspectj aspect executed certain events call flow 
kind aspects just possible interpretation term aspect realm software engineering 
design disciplines example know interpretations reason believe interpretations relevant software engineering discipline 
instance sees aspect orientation way aspects design programming software 
context reengineering example important able separate aspects extract existing source code 
existing aop languages help architecturally separate parts aspects aspects hardly completely 
understanding software structure dependency tracing manipulation pattern language section pattern language tracing manipulating software structures dependencies 
pattern proved solution problem context resolving set forces 
detail context refers recurring set situations pattern applies 
problem refers set goals constraints typically occur context called forces pattern 
forces set factors influence particular solution pattern problem 
element language pattern instruction resolve system forces context relevant 
pattern language collection patterns solve prevalent problems particular domain context language patterns especially focuses pattern relationships domain context 
aspect composition framework require way find trace joinpoints software system 
need manipulate spots apply aspects 
tracing manipulating software structures dependencies common problem software engineering fields 
instance software maintenance reengineering projects need find existing structures relationships software system 
development tools ides profilers architecture visualizations need trace structures dependencies source code call flow 
programming language implementations programming language extensions need find existing structures dependencies source code parsing 
meta object protocols mop meta level architectures require runtime structure information base level objects order control meta level 
application fields quite diverse implementations set common patterns structure dependency tracing manipulation 
aspect oriented systems interpret potentially manipulate software structures call flow implemented structure dependency tracing manipulation techniques 
note application fields closely related aop programming language extensions mops 
overview pattern language structure dependency tracing manipulation 
remainder section pattern briefly explaining context problem solution example possible pattern typical aop context example aop solution 
note individual patterns limited aop domain generic detailed description patterns pattern byte code manipulator command language explained patterns pattern language font external patterns italics 

invocation context introspection option message interceptor indirection layer message redirector hook injector implements provides uses byte code manipulator trace callback parse tree interpreter implement dynamic indirection layer metadata tags get invocation information runtime get structure information runtime implements provides uses command language implement static indirection layer uses byte code injection invokes uses source code injection specify hook injection specify hook injection specify indirection specify indirection 
important relationships patterns represented labeled arrows parse tree interpreter consider aspect composition framework composing aspects compile time 
requires information source code formal source documents 
consider parser source language available reused effort write full parser source language 
note aspect composition framework offers aspect language language parsed 
parse tree interpreter parses sources existing source language parser uses parser outputs create parse tree 
parse tree interpreter offers api interpret possibly modify parse tree application specific way 
example shows typical parse tree interpreter aspect composition framework 
parses source files builds token tree source document 
api parse tree interpreter find modify joinpoints focus aspects 
modified code emitted handed aspect compiler 
indirection layer addition information available source documents aspect composition frameworks require runtime call flows data flows 
indirection layer traces relevant static dynamic information runtime 
layer application logic instructions sub system traced 
general term instructions refer programming language refer public interface component sub system 
indirection layer wraps accesses relevant sub system bypassed 
hooks provided trace manipulate relevant information 
typical hooks provided aspect composition framework joinpoints 
aspect weaver parser parse tree interpreter parse tree builder token tree parse file myclass java parse document read file add token add aspect joinpoints create token tree element instrument token tree source document myclass java emit modified code 
parse tree interpreter aspect weaver shows indirection layer consisting number wrappers 
wrappers invoking elements sub system 
wrappers provide hooks invoke code actual invocation 
indirection layer wrapper client client client layer sub system wrapper wrapper invoke wrapper advice invoke hidden layer elements advice 
return result 
indirection layer consisting number wrappers indirection layer generalization patterns wrapping implementation layer symbolic language object system layer microkernel virtual machine interpreter 
pattern language general indirection layer pattern abstraction individual patterns 
trace callback consider specific structures runtime system need traced 
known runtime structures traced 
trace callbacks permit developer trace specific runtime structures large performance penalties untraced structures 
trace callback interface provided indirection layer structures traced accessed indirection layer 
interface dynamically add remove trace callback specific runtime structure indirection layer 
adding removing trace callback developer specifies type traced runtime structure callback event callback operation 
callback operation user defined operation handling callback event 
callback event happens specified runtime structure callback operation executed indirection layer implementation automatically 
shows example trace callback method invocation 
indirection layer adds trace object 
specified method invoked object invokes trace callback automatically 
indirection layer trace manager client client client layer object object invoke object invoke client callback object invoked method object invoke client callback add trace 
trace callback method invocation message redirector indirection layer intermediate layer application logic subsystem 
object oriented systems means intercepts adapts individual messages sent application logic subsystem 
message redirector facade indirection layer 
application layer objects access indirection layer objects directly send symbolic string invocations message redirector 
message redirector dispatches invocations respective method object 
message redirector benefits compared indirection layer scattered wrappers 
provides transparent control complete call flow client need know wrapper implementation object 
central instance message redirector handle issues cutting multiple instances manage common state call stack 
shows message redirector indirection layer 
invocation pass complete control call flow indirection layer 
byte code manipulator programming languages java tcl compiled native machine code intermediate representation internally called byte code 
byte code interpreted language small easy understand set instructions 
low level instructions interpreted indirection layer called virtual machine 
consider instance want implement language extensions aspects access source code want apply aspects load time runtime 
cases option manipulate byte code source code 
byte code low level representation contains relevant information program instance java byte code contains constants interfaces classes methods class attributes exceptions 
typically want deal low level byte code instructions 
indirection layer message redirector object object object client client client layer invoke message redirector object 
lookup object lookup invoke method return result return result 
message redirector implement indirection layer depicted byte code manipulator looks program structure class repository 
byte code parsed runtime representation byte code produced 
language element represented byte code byte code manipulator offers operation querying manipulating 
byte code manipulator provide source level abstractions operation find methods class operation addmethod add method class 
alternatively provide high level api access manipulate elements byte code 
source level abstractions typically easier understand byte code details 
typically byte code details directly reflected source level abstractions 
language compiler creates byte code class files produced java compiler byte code manipulator change class files disk manipulate classes load time class loader generate new classes load time 
scripting language supports fly byte code compilation runtime tcl byte code manipulator handle interaction script interpreter fly byte code compiler 
class parser class repository byte code manipulator aspect composer get class lookup class byte code runtime representation creates parse byte code query manipulate byte code query manipulate 
byte code manipulator aspect composer hook injector structure tracing behavior modification provided message redirector 
usually requires sub system clients changed possible wanted 
hook injector traces specific defined points program injecting indirection hooks points 
done parse tree interpreter byte code manipulator 
manipulated source code byte code emitted 
manipulated program compiled interpreted original program 
semantically new code equivalent original code exception injected hooks extracting modifying relevant invocations 
shows hook injector injects hooks parsing document modifying representation memory parse tree writing modified source document back 
document interpreted compiled original source document 
hook injector parse tree interpreter client inject hooks parse document modified source document void string string params new string params push params logger name pop 
source document void string name 
parse document modify parse tree write parse tree write modified document 
hook injector implemented parse tree interpreter message interceptor controlling call flow indirection layer done message redirector hook injector 
patterns provide low level support tracing modifying adapting message invocations tasks hard coded message redirector hook implementations 
message interceptors express dynamic message traces modifications adaptations class entities indirection layer 
message interceptors invoked standardized invocation events observable indirection layer method invocation method invocation invoking method 
done callback mechanism built indirection layer 
callback mechanism triggered message redirector hooks hook injector 
optionally message interceptor specify conditions evaluated invocation event happens executed condition true 
shows message interceptors implemented message redirector 
registered interceptors invoked invoked method 
message interceptors registered interceptor 
invoked method invocation returns 
indirection layer message redirector object client client layer interceptor invocation object invoke object invoke interceptor invocation object invocation object 
message interceptors implemented message redirector introspection option aspect composition framework requires information software structures dependencies runtime 
structures dependencies include dynamic structures change runtime static structures defined compile time change runtime 
programming languages integrated extensible way obtain information runtime 
introspection options gather provide information structures dependencies indirection layer 
messages creating changing structures dependencies pass indirection layer traced 
addition pre defined structures dependencies simple extension api adding new domainspecific introspection options offered 
shows example wrapper classes indirection layer implement method info provides introspection options structures dependencies 
clients access method message redirector 
indirection layer message redirector object object object client client client layer invoke object info methods return method list return method list get method list invoke object info methods 
introspection options objects indirection layer invocation context invocation information important object oriented adaptations rely message exchanges 
instance aspect requires knowledge invoking invoked object method 
invoking method provide invocation information parameter aspect applied transparently 
invocation context obtain invocation information inside invoked method wrapper method 
invocation context contains information identify calling called method object class 
distributed context location information caller callee required 
indirection layers usually maintain runtime invocations including information caller called object invocation parameters invoked method scope call information 
means context indirection layer invocation context essentially top level entry 
shows message redirector puts invocation 
interceptor able obtain current invocation context containing information intercepted invocation 
indirection layer message redirector call stack object client client layer push entry log interceptor invocation object invoke object get invocation context log invoke pop entry 
invocation context obtained metadata tags consider relevant information required aspect composition framework source documents 
instance proper language resource specify aspects 
solution provide standard notation embedding metadata tags code configuration files 
metadata tags contain additional information aspect specifications 
typically metadata tags provided hierarchical key value lists 
shows example aspect composer obtains aspect composition information xml configuration file 
metadata needs parsed interpreted aspect composer query information 
command language metadata tags handling simple structured configuration options declarative manner 
hard deal configuration options require behavioral specifications programming constructs conditions parser metadata interpreter aspect composer parse document class methodname set class metadata runtime representation parse metadata build query query metadata parse config file 
aspect metadata tags configuration file loops blocks substitutions expressions 
solution extend metadata tags syntax command language 
means tag implemented command class implemented indirection layer 
interpreter command language uses symbolic names command language representation maps commands 
commands pre defined user provide new commands 
typically general purpose command language pre defined commands conditions loop statements command language configuring aspect composition framework commands annotating aspects usually pre defined 
user able define customization commands specific aspects 
instance persistence aspect requires configuration objects classes persistent 
means example pointcuts configured command language 
command language interpreter parse document command implementation persistence aspect string string 
aspect config file command language 
aspect composer map commands aspect components register configure aspects 
persistence aspect configured command language patterns pattern language number patterns patterns pattern language 
parse tree interpreter requires means traverse parse tree 
typical traversal functionality hook injector 
needs deal elements parse tree involved injection process 
different patterns provide solutions problem visitor visit nodes parse tree perform operations implemented object 
iterator walk nodes pass nodes linearized order node list 
composite implement operations performed nodes tree 
note patterns traversing runtime representation program class graph obtained introspection options 
parse tree interpreter byte code manipulator build runtime representation parsed data 
typically different node types created linked graph structure tree 
factory builder create node structures 
message interceptor applies message invocation interceptors need applied order 
typically ordered chain responsibility iterator walk message interceptor chain 
frameworks allow structuring message interceptors composites 
message redirector usually facade indirection layer 
pattern sequences aspect composition frameworks section explain current aspect composition techniques sequences pattern language 
alexander points pattern descriptions really allow person generate design step step concentrate content patterns laying emphasis morphological unfolding 
creative power lays sequences patterns applied 
task number possible sequences huge compared number sequences comparison tiny 
important document inherent knowledge pattern language form sequence examples proved practice 
discussing pattern sequences technical implementation aspect composition frameworks focus remainder 
compare sequences order evaluate common trade offs implementing aspect composition frameworks section 
aspectj currently common way implement aspects generative environments aspectj tool adding composition filters java 
byte code manipulation hyper jac follow similar sequence notable differences see sections 
illustration generative sequence give examples aspectj 
aspectj aspects described extension java language consisting set additional instructions 
aspect language added code written base language 
consider java class point exists want assert certain properties aspectj 
class point void setx int 
additional statements aspectj introduces aspect statement pointcuts call target args advices aspect point int target args call void setx int system println illegal value return aspect contains advice 
advice consists advice head pointcut definition advice body 
advice head defines type advice advice parameters 
pointcut definition defines set joinpoints advice applied 
pointcut includes joinpoints call void method setx int argument 
target type call point int argument bound identifier advice means statement advice body executed specified joinpoints reached 
note elements joinpoint target determined runtime depend control flow program 
contrast joinpoints call pointcut determined statically analyzing program text 
advice body defines actions taken joinpoint executed 
runtime advice parameters passed advice body current values 
aspectj compiler composes aspect language statements base language 
required information task contained aspect language java class method structure spots invocations sent received handle call flow 
aspectj compiler inherits java compiler class aspectj syntax extended java syntax 
part aspectj compiler aspectj parser 
aspect language parser inherits java parser 
aspectj compiler implements parse tree interpreter parses program text files creates parse tree 
aspectj parser builds parse tree aspectj java parts system 
aspectj uses syntax tree ast java aspectj statement represented node tree object 
type statement class inheriting class 
instantiated syntax tree factory class ast 
hook injector injects hooks respective joinpoints process called inlining 
aspect language code replaced base language primitives byte code instructions virtual machine 
parsing parse tree interpretation hook injection organized multiple compiler passes create transform information syntax tree iterating compilation units iterator 
initial parser pass compiler passes interpreting java structures type graph signatures bindings forward follow 
joinpoints collected static joinpoints planned control flow exceptions checked advices planned woven 
static joinpoints instantiated steps plans composing 
weaving pass plans implemented 
means joinpoints woven correct order connectors 
helper passes follow 
passes source code byte code generation process parsing inlining 
results hook injection visible user 
hook injector inserts hooks existing base language program 
injected hooks invoke objects implementing indirection layer part runtime environment woven application 
hooks respective implementations static form message interceptors 
aspectj message interceptor implementation realized advice injected hooks call advices 
runtime woven program aspect language runtime environment implemented indirection layer 
aspectj implements static weaving process 
words message interceptors composed runtime 
tasks handled dynamically indirection layer 
instance aspectj provides partly dynamic joinpoint model specify control flows cflow pointcut elements dynamically computed control flow stack 
runtime environment indirection layer bound aspectj application 
contains dynamic parts aspectj joinpoint model 
joinpoint implementation provides variant invocation context pattern aspects containing invocation information dynamic pointcuts target joinpoint current object joinpoint arguments joinpoint args 
obviously information statically determined compiler 
seen example information connected static part joinpoint 
dynamic part joinpoint offers introspection options static parts joinpoint kind signature source location string representation 
benefit runtime joinpoint model permits pointcuts advices retrieve certain invocation context information call flow current joinpoint runtime 
drawback runtime environment consumes additional runtime resources 
see code fragment aspectj code runtime joinpoint implementation offers invocation context information connection static part offers respective introspection options class implements joinpoint org aspectj lang joinpoint public object return public object return target public object return args public string return public signature return public return public final string tostring return tostring 
introspection options connect static dynamic part joinpoints 
introspection options java class method structure offered java reflection api 
aspectj original class implementation extended introductions 
instance example sense method checking assertion method requires self current object 
method point class 
aspect introduce method existing class aspect private boolean point int return point int target args call void setx int 
generative environment introductions implemented injecting hooks respective classes hook injector 
hyper hyper supports multi dimensional separation integration concerns java 
object oriented languages promote decomposition classes single decomposition dimension 
classes kinds concerns encapsulated easily implementations scattered class hierarchy 
hyper provides means decompose program concerns 
hyper tool provides place sophisticated hook injector 
tool includes byte code manipulator source code java classes required 
hooks injected specifications different kinds files hyperspace specification concern mapping files hypermodule specifications 
contain primarily command language instructions describing de compose concerns 
hyperspaces identify dimensions concerns importance seen kind project definition 
dimensions group related concerns instance 
concern mappings describe various elements java classes address different concerns hyperspace 
java elements mapped dimensions concerns package class interface operation field 
hypermodule specification particular composition units selection concerns hyperspace 
identifies dimension concern names called hyperslices composed context hyperspace 
composition follows general composition strategies specified developer means units named hyperslices merged new unit 
means units different hyperslices name connected 
indicates units named hyperslices connected override relationship hyperslice hypermodule specification overrides 
addition default composition strategies exceptions declared specific composition rules 
composition rules units declared equate order specified units renamed units merged specific actions defined override actions unit declared match set units methods bracketed 
bracket composition rule specific interest permits define operation message interceptor operations instance bracket foo action application concern class bar feature logging classname feature logging declaration means methods names foo class input hyperslices bracketed methods feature logging feature logging 
optional clause restricts calling context bracket methods invoked 
example clause bracket relationship defined indicates methods invoked foo methods called method application concern class bar 
note static alternative invocation context dynamic environment limit caller message interceptor 
jac jac framework dynamic distributed aspect components java 
dynamic means aspects deployed un deployed runtime 
prepare java classes aspects byte code manipulator applied load time 
jac version earlier versions javassist 
offer high level api access manipulate byte code details 
byte code manipulator hook injector jac 
inserted hooks responsibility indirect invocations jac indirection layer implements jac aop features 
main features support dynamic aspects jac aspect components dynamic wrappers domain specific languages 
aspect components classes subclass class 
jac runtime meta model called rtti runtime type information defined provides introspection options base program elements 
rtti structural changes class level similar aspectj introductions 
pointcuts defined add behavior base methods 
contrast aspectj method focus aspects specified strings looked introspection options 
pointcuts aspect components invoke message interceptors defined dynamic wrappers see 
pointcut hooks introduced respective joinpoints hook injector 
dynamic wrappers seen generic advice 
implemented classes extending class wrapper 
wrappers ordered wrapping chains 
method proceed invoked inside wrapper method 
forwards invocation wrapper wrapper chain wrapped method 
methods wrapper parameter type interaction 
class implements invocation context containing information wrapped object method arguments wrapping chain invocation 
third feature jac domain specific languages defined configuring aspects 
simple metadata tags jac provides command language extended user operations aspect component provided command implementations invoked configuration file 
way aspect define configuration language 
instance predefined authentication aspect component jac offers configuration method void string username method invoked command language script renaud renaud jboss aop jboss java application server contains stand aspect composition framework 
implements similar sequence pattern language jac interesting differences design decisions 
hooks injected advisable classes hook injector internally uses byte code manipulator javassist load time 
javassist provides source level abstraction byte code 
advice implemented message interceptor 
message interceptors implement interface public interface interceptor public string getname public invoke invocation invocation throws throwable name returned getname symbolic interceptor name 
invoke callback method called advice executed 
parameter type invocation invocation context containing invocation method parameters 
contrast frameworks response stored invocation object object returned 
forwarding interceptor intercepted method done method invocation context object invocation pointcut definitions xml metadata tags instance class attribute interceptor pointcut take regular expression argument 
instance expression 
intercept messages sent members particular package 
support level composition predefine set interceptor chains referenced called interceptor stacks 
jboss aop provides runtime interface manipulate interceptors advised class 
interceptors appended pre removed interceptor chain runtime 
invocation context provides introspection option access specific metadata tags runtime 
way aspects metadata tags aspect configuration 
pointcuts defined metadata tags 
introduce interfaces class plus mixin class implements interfaces 
extended object tcl xotcl dynamic composition aspects required 
jboss aop instance supports dynamic configuration message interceptors 
note imply dynamic aspect composition framework classes instrumented byte code manipulator load time 
really dynamic aspect composition process implemented pattern message redirector indirection layer 
message redirector receives symbolic invocations indirected actual implementations objects system 
message interceptor dynamically intercept message call flow dispatched message redirector 
xotcl object oriented tcl variant uses pattern message redirector implementation 
symbolic invocations received message redirector strings extracted program code 
invocations indirected tcl xotcl implementation written loaded components 
idea applying aspects dynamic message interceptors top message redirector architecture quite simple specify calls focus aspect criteria message interceptor message redirector execute message interceptor time messages called implement aspect relies message exchanges 
receive necessary information dealing invocations message interceptor able obtain invocation context find method called object callee 
calling object method required 
introspection options typically obtain structure information 
instance xotcl code corresponding aspectj point class example section looks follows class point 
class return return setx puts illegal value point corresponding code class aspect implemented class defined 
dynamically classes registered instance mixin class message interceptor points calls method setx intercepted mixin named method setx 
common ways ensure non aspects obliviousness property terminology filman friedman mixins mixins applied superclass interface automatically applied subclasses class hierarchy 
developers subclasses oblivious aspect 
mixin registered set classes introspection options 
instance apply mixin class names starting point 
way mixins applied non invasive way kind criteria pointcuts specified dynamic introspection options xotcl 
instruction responsible forwarding invocation 
handles non invasive ordering message interceptors chain responsibility 
chain comes invoked method 
placement instruction enables implement behavior message interceptor 
contrast aspectj introduce method point mixin shares object identity class extends 
cases want change class structure 
xotcl time new method defined xotcl structures fully dynamic 
kinds dynamics require introspection options ensure violate architectural constraints re structuring architecture 
instance example check runtime method defined point introduce point info point return return case xotcl tcl trace callbacks variable slots supported 
dynamically observe specified variables accessed indirection layer 
mechanism similar message interceptors finer granularity observe single variables 
means cases trace callback smaller performance impact message interceptor applicable observing larger structures multiple callbacks 
instance code invokes trace callback method variable read written 
trace introduced constructor init variable point instance traced point var sub op puts self var accessed point init args trace variable rw self 
apache axis handler chains message interceptors message redirector distributed object systems 
symbolic invocations received message redirector remote calls sent network 
interceptor pattern describes variant message interceptors 
apache axis implements message interceptor framework distributed object systems examples orbix tao 
note message interceptor primarily designed aop infrastructure aop solution 
axis remote messages sent client server handled client side server side handler objects arranged chain responsibility 
handler provides operation invoke implements handler task 
operation invoked message passes handler handler chain 
client proxy passes request message client side handlers handler chain reached 
handler axis called sender responsible sending message network axis framework 
server side request message received server request handler passed server handler chain handler axis called provider reached 
provider invokes web service object 
web service object returned provider turns request response 
response passed reverse order respective handler chains server side client side 
handlers client proxy sender client side handlers server request handler provider message interceptors 
client proxy server request handler act message indirect remote message handler chain 
invocation context axis called created message sent handler chain 
way different handlers retrieve data message possible manipulate 
invocation context client server side 
message context object associated message objects request message response message 
note infrastructure aop framework 
missing way specify pointcuts apply 
done quite easily hand necessary information provided message interceptors invocation context 
information type joinpoints specified remote invocations 
simple implementation variant invoke template method defined class 
aspect handlers inherit class implement method 
method called pointcut current aspect message context defined 
public class extends public boolean check pointcuts apply return true false public void invoke throws true public void dj dj variant dynamic aspect composition scheme provide message interceptors uses traversal strategies visitors 
class graph traversed follows static final cg new cg traverse schema typedef attrs attribute new visitor void attribute host host name equals name def add host value 
cg object message redirector creates reusable traversal graph object structure traversed 
dj information class graph obtained introspection options demeter class dictionary files behavior files 
step traversal fields methods current object methods visitor object inspected invoked introspection options obtained java reflection api 
visitors programmer define typed methods executed object certain type traversed 
methods executed start finish traversal defined 
aspect composition frameworks section want discuss interesting aspects solutions discussed 
provide composition filter consisting java part composition filter part written composition filter syntax 
composition filter part written command language refers java class name 
tells compiler compose base classes composition filter class 
small components project implements projects specific aspect composition framework things solely generative techniques 
goal avoid overheads aspect runtime environment embedded systems 
reach goal compositional information metadata tags 
particular class structure xmi model template classes metaclasses mapping files config files define various component composition aspects structures instantiation threading parameters instance container mapping security settings 
various approaches combine implementation approaches 
instance approaches integrate benefits dynamic aspect composition generative environments 
solution generative aspect model allows activating deactivating aspects runtime 
done central registry aspects 
registry serves central message redirector class registered contains superimpose statement 
hook injector injects hooks method classes 
hooks call registry case method dispatch enter exit event 
corresponding message interceptor registered advice called registry original call 
sense apply different aspect interpretation models 
instance aspectj design checker extension aspectj uses logic meta programming engine finding errors problems aspectj code 
generates facts rules parse tree compiled provides rules retrieving trace information subclass relationships 
interpret output 
additional statements understood define errors problems aspectj code syntax embedded pointcut language 
evaluation pattern sequences explained applying individual patterns necessarily lead successful solution 
important understand sequences combinations patterns practice 
explained individual sequences combinations patterns previous section 
section want categorize revisit general sequences successful solutions 
compare main features exposed individual solutions 
describe generic pattern sequences discuss trade offs 
comparing features pattern sequences section summarize main design decisions aspect composition framework important features aspect composition frameworks discussed previous section 
illustrates feature diagram main design decisions considered functionalities aspects provide 
way joinpoints extracted 
aspects composed system 
context environment information available application aspects 
aspect language aspect configuration syntax aspects specified 
note technical considerations implementation aspect composition framework 
course design decisions alternatives heavily influenced concepts realized aspect composition framework 
aspect composition framework joinpoint extraction dynamic static message redirector trace callback parse tree interpreter byte code manipulator aspect composition dynamic static message redirector message interceptor trace callback hook injector static message interceptor static trace callback message redirector registry aspect inlining language runtime aspect language command language introspection options base language parse tree interpreter api gui context environment information invocation context introspection options aspect functionality message interception tracing specific structures introductions aspect configuration metadata tags command language static pointcut information aspect specification 
feature diagram aspect composition frameworks pattern language obvious distinction aspect composition frameworks main functionalities provided aspects aspect languages able manipulate message invocations 
done inlining aspect code message interceptors 
alternatively specific structures focus aspect 
done inlining aspect code trace callbacks 
aspect languages support introductions 
obvious commonality different aspect composition frameworks require joinpoint model 
aspect sequence provides way extract information 
pattern language offers alternatives alternatives static joinpoint extraction parse tree interpreter extract manipulate information source code 
byte code manipulator find manipulate joinpoints byte code 
alternatives joinpoint extraction runtime message redirector trace invocations sub system 
trace callback traces accesses specific structure variable 
extracted relevant joinpoints aspect composed 
aspect composed statically dynamically primary pattern implementing static composition hook injector 
hook injector produce program code base language manipulate byte code 
multiple alternatives hook injector inline complete aspect code joinpoint 
resulting byte code source code allow central management joinpoints runtime 
variant minimize runtime overhead 
hook injector inline invocation static message interceptor dealing message 
hook injector inline invocation static trace callback 
hook injector inline invocation message redirector invokes message interceptor 
variant allows limited dynamics turning aspects 
variants dynamic aspect composition message interceptors registered message redirector 
trace callbacks registered structure focus aspect 
note variant completely inlines aspects require indirection layer runtime 
dynamic variants usually larger performance memory impact dynamic ones 
aspects applied context pointcut 
cases advice needs extra information context invocation runtime environment simple way provide information pass static information provided pointcut specification instance parameters advice implementation 
indirection layer supported build dynamic invocation context information instance implement dynamic joinpoints 
language structures dynamic may require dynamic introspection options 
language supported reflection api java 
additional introspection options aspect structures 
introspection options dynamic parts static parts aspect model discussed static joinpoint parts dynamic joinpoint parts aspectj 
important issue aspects pointcuts specified provide aspect language want base language syntax compiled language typically parse tree interpreter hook injector 
want base language syntax dynamic interpreted language alternatively extend language new aspect constructs 
write system back file manipulations program serializer 
serializer structures introspection options re builds program text 
variant necessary program structures introspective serialized 
simple way implement aspect composition framework provide simple api base language 
aspect extension cumbersome dedicated aspect language constructs 
variant message interceptors middleware environments 
approaches provide gui aspect configuration 
variant internally variants 
aspect configuration language simple aspect configurations annotate program metadata tags containing aspect 
sophisticated aspect specifications command language 
revisiting pattern sequences trade offs section want revisit important combinations patterns solutions discussed section discuss common trade offs different sequences 
sequence composing aspects parse tree interpreter aspectj depicted 
parse tree interpreter extracting information parse tree including specification pointcuts introductions 
hook injector injects hooks introductions 
optionally indirection layer added allows limited runtime dynamics introspection 
benefit sequence aspects expressed syntax similar base language 
easy change extend aspect language full parser available 
potentially generative aspect composition framework offer performance close base language largely depends dynamics supported indirection layer 
main drawback parse tree interpreter aspect composition framework dynamic aspect composition possible 
message redirector turn aspects approach influences performance negatively 
main drawback source code classes available 
suitable parser available sequences requires substantial implementation effort 
message interceptor indirection layer hook injector parse tree interpreter builder build full parse tree factory interpret parse tree extract aspect language add hooks invoking aspect runtime add introductions insert hooks call aspect language runtime hooks call message interceptors 
aspect composition parse tree interpreter sequence load time composition approaches hyper jac jboss 
hook injector byte code manipulator read classes byte code add hooks introductions generate new classes 
pointcuts introductions specified metadata tags command language 
hooks injected introductions calls indirection layer message interceptors 
seen indirection layer provide dynamics introspection message interceptors jac jboss message interceptors static context information hard coded pointcuts hyper general benefits compared parse tree interpreter sequence sequence supports load time aspect composition 
means source code need available third party code instrumented 
benefit binding time postponed 
important server environments jac jboss support deployment classes server runs 
sequence assume base language code accessible sense specify aspects base language syntax 
way configure aspects 
done metadata tags command language 
performance impact largely depends indirection layer designed residual performance impact classes aspects applied 
message interceptor indirection layer hook injector byte code manipulator insert hooks call aspect language runtime environment hooks call message interceptors metadata tags command language specify pointcuts introductions read classes add hooks introductions generate new classes 
aspect composition hook injector byte code manipulator binding compile time load time sequences explained 
environments dynamic runtime runtime aspect composition required 
dynamic message interceptors provided different environments especially programming languages xotcl middleware environments orbix tao apache axis described interceptor pattern 
dynamic aspect composition implemented approaches sequence invocation application logic layer evaluated message redirector 
message redirector maps called symbolic instruction implementation object indirection layer 
message interceptors trace callbacks applied 
message redirector implements command language dynamic language features implement introductions xotcl 
message interceptor indirection layer shields provides invocation context message redirector invokes dynamically invokes dynamically trace callback invokes callback operation command language optional provide introductions language dynamics 
aspect composition message redirector main benefit message redirector aspect composition applying message inter completely dynamic 
message redirector performance penalty due indirection 
discussed environments xotcl distributed object frameworks message redirector aop 
benefit compared hook injector variants change classes implementation source code byte code overhead aspect applied 
requires implement message redirector byte code manipulator parse tree interpreter 
message redirector easy provide invocation contexts introspection options necessary information go message redirector 
contrast injected hooks scattered code message redirector central runtime instance managing aspects runtime 
message redirector provide base language syntax part language implementation words language command language xotcl 
system message redirector requires client sub system changed 
combining patterns message redirector hook injector drawbacks solution avoided 
pattern indirection layer central aop sequences require runtime indirection aspect management 
indirection layer supported message interceptors sequences introduced typically extended sequence depicted 
note degree dynamics message interceptors trace callbacks context information invocation contexts details introspection options varies 
main benefit adding indirection layer provide information invocation contexts introspection options runtime 
message interceptors dynamically configurable 
drawbacks sequence performance memory overheads required addition 
invocation context introspection option message interceptor get structure information runtime metadata tags command language configure aspect trace callback indirection layer get structure information runtime get invocation information runtime provided provided 
message interceptor indirection layer runtime trace callbacks alternative message interceptors 
trace callbacks applied locally implementations structures traced 
benefit performance impact message interceptors untraced structures 
message interceptors applied central instance message redirector hook injector 
easier trace complex structures non invasive way 
aspects specified programming language syntax aspectj xotcl 
alternative aspect configuration syntax 
metadata tags command language 
command language available implementing simple metadata tags syntax xml 
command language xotcl jac provide domain specific language aspect configuration rapidly 
course language understood developers understand command language metadata tags 
described current aop implementation approaches pattern language structure dependency tracing manipulation 
realm believe patterns capture major implementation variants existing solutions 
forces consequences patterns lead choice appropriate patterns pattern variants 
central domain specific issues performance flexibility memory usage program length program complexity learning effort highly different different solutions 
pattern language sequences illustrate existing solutions 
sequences help developers better understand existing aop implementation choices 
understanding enable developers customize implement aspect composition frameworks 
patterns pattern sequences discuss main trade offs current aop implementations developers clear criteria select aspect functionalities properties required particular task 
sufficient implementation existing criteria help choose appropriate patterns developing house domain specific aspect composition framework particular project 
acknowledgments substantially extended version structure dependency tracing patterns aspect composition rd workshop aspect oriented software development essen germany march 
stefan helpful comments markus discussion pattern language 
steve provided lot valuable feedback europlop shepherd pattern language 
alexander 
timeless way building 
oxford univ press 
alexander 
com 
www com 
apache software foundation 
apache axis 
ws apache org axis 
bergmans aksit 
composing crosscutting concerns composition filters 
communications acm oct 
burke 
jboss aspect oriented programming 
www jboss org developers projects jboss aop jsp 
buschmann meunier rohnert stal 
pattern software architecture system patterns 
wiley sons 
chiba 
javassist 
www csg titech ac jp chiba javassist 
clarke walker 
standard design language aosd 
proceedings st international conference aspect oriented software development pages enschede netherlands april 
dahm 
bytecode engineering library 
jakarta apache org 
de 
type oriented logic meta programming 
phd thesis vrije universiteit brussel 
filman friedman 
aspect oriented programming quantification obliviousness 
oopsla workshop advanced separation concerns minneapolis usa october 
gamma helm johnson vlissides 
design patterns elements reusable object oriented software 
addison wesley 
garcia martin martin 
virtual machines compilers compiler pattern language 
proceedings europlop pages germany july 
neumann zdun 
object system layer 
proceedings europlop pages germany july 

specifying aspect oriented design constraints aspectj 
workshop tools aspect oriented software development oopsla pages seattle usa nov 
iona technologies orbix architecture august 
kang hess novak peterson 
feature oriented domain analysis feasibility study 
technical report cmu sei tr carnegie mellon university software engineering institute sei 
kiczales hilsdale hugunin kersten palm griswold 
getting started aspectj 
communications acm oct 
kiczales lamping mendhekar maeda lopes loingtier irwin 
aspect oriented programming 
proceedings european conference object oriented programming ecoop pages june 
springer verlag 
guerraoui 
aop sense 
case concurrency failures 
proceedings th european conference object oriented programming pages malaga spain june 

semantics implementation method call interception 
draft homepages cwi nl ralf accepted publication iee proceedings software 
lopes 
language framework distributed programming 
phd thesis college computer science northeastern university dec 
kiczales 
modeling crosscutting aspect oriented mechanisms 
proceedings th european conference object oriented programming pages darmstadt germany july 

aspect oriented tailoring object oriented applications 
proceedings st information system research seminar iris pages aalborg university denmark august 
neumann zdun 
xotcl object oriented scripting language 
proceedings tcl th usenix tcl tk conference pages austin texas usa february 
orleans lieberherr 
dj dynamic adaptive programming java 
reflection meta level architectures separation crosscutting concerns pages kyoto japan sep 

jac flexible framework aop java 
reflection meta level architectures separation crosscutting concerns pages kyoto japan sep 
rashid 
persistence aspect 
proceedings nd international conference aspect oriented software development pages boston massachusetts usa march 
schmidt stal rohnert buschmann 
patterns concurrent distributed objects 
pattern oriented software architecture 
wiley sons 
soares 
implementing distribution persistence aspects aspectj 
proceedings th acm conference object oriented programming systems languages applications oopsla pages seattle wa usa november 
tarr 
hyper www research ibm com hyperspace htm 
tarr ossher harrison sutton 
degrees separation multi dimensional separation concerns 
proceedings st international conference software engineering icse pages los angeles ca usa may 

small components project 
www de projects html 
zdun 
object oriented remoting pattern language 
proceedings nordic conference pattern languages programs pages denmark sep 
wang schmidt 
meta programming mechanisms object request broker middleware 
proceedings th usenix conference object oriented technologies systems coots san antonio tx usa jan feb 

homepage 
cs utwente nl prototypes 
zdun 
patterns tracing software structures dependencies 
proceedings europlop germany june 

