better streaming algorithms clustering problems moses charikar princeton university study clustering problems streaming model goal cluster set points making pass passes data small amount storage space 
main result randomized algorithm median problem produces constant factor approximation pass storage space 
significant improvement previous best algorithm yielded approximation space 
give streaming algorithm median problem arbitrary distance function 
study algorithms clustering problems outliers streaming model 
give guarantees producing constant factor approximations increasing allowed fraction outliers slightly 
categories subject descriptors theory computation analysis algorithms problem complexity computations discrete structures general terms algorithms theory keywords clustering median streaming algorithm 
years dramatic growth interest developing algorithms massive data sets 
email moses cs princeton edu 
research supported nsf itr ccr doe early career principal investigator award de fg er 
email loc cs stanford edu 
research supported nsf iis arcs scholarship 
email cisco com 
permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
stoc june san diego california usa 
copyright acm 
callaghan stanford university rina panigrahy cisco systems particular streaming model received lot attention :10.1.1.32.1927
algorithm process input making pass small number passes limited amount memory 
common model settings size input far exceeds size main memory available feasible access data making passes 
examine clustering problems model 
clustering problems studied extensively disciplines 
typically formulated optimization problems input set points distance function defined goal find clustering solution clusters optimizes certain objective function 
specified discussion assume distance function metric symmetric satisfies triangle inequality 
common clustering objective function median find centers medians set points minimize sum distances points closest centers 
research led development approximation algorithms problem :10.1.1.129.4996
classical clustering objective center goal find centers minimize maximum distance point closest center 
known approximated factor 
guha gave space algorithm guaranteeing approximation median problem streaming data 
earlier charikar gave streaming algorithm center problem gives constant factor approximation space 
fact algorithm maintains clusters times modifies clustering solution restricted set operations allow existing cluster broken points distributed different clusters 
charikar panigrahy gave streaming algorithm objective finding clusters minimize sum cluster diameters 
streaming algorithm requires space achieves constant factor approximation increases number centers constant factor works set restricted cluster update operations 
intuitively streaming algorithm clustering maintains small amount state maintain succinct representation clustering solution usually just set cluster centers plus additional information 
addition ally maintain implicit lower bound optimal solution sequence seen far 
appears clustering objective function admits clustering algorithm succinct lower bound certificates cost optimal solution 
center objective minimize maximum cluster radius succinct certificate follows directly analysis offline center problem 
existence certificate basis streaming algorithm clustering center objective 
case sum diameters objective succinct lower bound certificate non trivial lower bound certificate consisting carefully chosen points obtained careful analysis primal dual lp formulations problem 
streaming algorithms center sum cluster diameters space yield constant factor approximations currently best known streaming algorithm median requires space produces approximation 
research motivated question left open guha possible devise streaming algorithm median problem uses space produces constant logarithmic approximation factor results main result solves open problem 
give streaming algorithm median problem uses space produces constant factor approximation algorithm randomized works high probability 
roughly speaking algorithm guha performs clustering levels level blocks input size clustered 
cluster centers level form input level 
points processed simultaneously algorithm needs levels process entire input 
analysis shows approximation factor increases constant factor going level algorithm gives approximation guarantee algorithm summarized follows obtain clustering solution log medians constant factor worse optimal medians 
final medians obtained solving median problem log medians appropriately weighted 
approach maintaining constant factor approximate solution log medians space streaming model 
respect approach parallels gilbert approximate histogram maintenance streaming model 
order obtain approximation best bucket histogram maintain solution larger number buckets solution obtain bucket solution 
algorithm operates phases lower bound optimal cost updated phase phase 
phase uses online facility location algorithm meyerson 
facility location algorithms solve median previous works jain vazirani 
meyerson algorithm guarantees log approximation online facility location able exploit maintain constant factor approximation median increasing algorithm gives expected log approximation inputs arrive random possibly number centers log factor 
analysis similar shows updating solution phase phase face potential multiplicative increase approximation ratio show overcome problem guarantee constant factor approximation 
study asymmetric median problem 
upper bound ratio maximum distance minimum distance give streaming algorithm log log passes uses space log log produce approximate solution uses log log centers log increase number centers inevitable problem 
study outlier formulations clustering problems streaming model parameter find solution clusters fraction points optimizes objective function chosen points 
words allowed exclude fraction points called outliers clustering 
charikar introduced outlier formulations gave constant factor algorithms outlier versions center median problems 
obtain approximations problems streaming model log space increasing fraction outliers slightly guarantee 
note median problem outliers offline setting known obtain solution constant factor approximation maintaining fraction outliers optimal solution 
algorithms problems extremely simple efficient viewed offline algorithms 
show problems solving outlier clustering problem random sample size log gives solution entire data set 
case obtain implicit representation solution form cluster centers distance threshold points cluster center distance threshold considered outliers rest assigned closest centers 
related plaxton considered version median problem called online median problem goal order set points way points treated median solution approximation best median solution 
previous papers developed time efficient algorithms median problem 
example indyk thorup gave efficient algorithms median sampling 
meyerson devised sampling algorithms median run time log independent assuming cluster size fraction points treated outliers 
results related different algorithmic techniques assume different input model 
particular assume random access data points available stream goal avoid running time dependence mishra gave sampling algorithm probability produces median clustering cost opt opt optimum median cost input parameter 
running time depends order gives expected constant factor approximation 
diameter data set case general metric space log 
plaxton gave algorithm repeated sampling high probability produces approximate solution median long range distances bounded log algorithm runs logn log time nk log ando log 
showed range distances large nk time randomized algorithm guarantee constant approximation median nonnegligible probability 
results outlier versions clustering problems closely related alon testing clustering 
considered problem distinguishing case set points divided clusters maximum radius case fraction points removed set clustered clusters maximum radius showed distinguish cases small random sample detailed analysis case points lin vitter gave lp algorithms median problem arbitrary distances 
filtering technique gets approximation ln centers 
young improved results giving greedy algorithm produces approximation ln centers 

median streams set points metric space integer andk members 
ck metric space say median cost 
ck medians simply median cost 
ck min dist ci 
thatis medians value median objective function medians 
section introduce pls ak median algorithm streams runs polylogarithmic space 
input stream points desired number medians cost lowest cost median solution pls finds medians cost times pls requires subroutine online fl described shortly point stream finds set medians initial segment stream 
mentioned pls operates phases segment input stream consumed 
phase pls invokes online fl modified version xi original input stream calculates median online fl xi called weight median assigned median phase associated weight weighted set medians stored solution phase input phase solution phase concatenated remaining unread points words xi just medians phase replacing initial segment read phase 
segment xi solution phase consists points possibly non unit weights second part unit weights 
subroutine online fl invoked phase pls meyerson online facility location algorithm 
give brief review meyerson algorithm recast guarantee form convenient proofs rest section 
online fl data stream facility cost 
pass performing steps 
distance current point closest open facility 

probability probability open new facility new point assigned closest open facility 
recall apply online fl phase weighted point set 
processing point weight probability building facility step algorithm min 
consider instance median op cost optimal solution instance 
lower bound op 
explain lower bound obtained 
run facility location algorithm facility costs proof log lemma follows proof technique 
lemma 
expected number medians solution produced online fl log op 
expected cost op proof 

medians optimal solution 
denote distance point nearest median optimum solution 
de note set points assigned median dist 
define 
optimum cluster 
log set points median 
note sj empty log 
consider points sj 
expected service cost sum distances points medians paid median opened point sj subsequent point sj distance median 
service cost paid subsequent point bounded hand probability median opened consider set points optimum median expected service cost paid median opened set median opened set distance subsequent point nearest median service cost paid subsequent point bounded hand probability median opened bound separately expected number medians opened algorithm expected service cost paid algorithm 
expected number medians opened algorithm points bounded log logn summing clusters 
total number medians opened algorithm bounded log op 
bound expected service cost paid algorithm 
expected service cost paid points ci bounded log summing clusters expected service cost paid algorithm op corollary lemma follows simple application markov inequality union bound 
corollary 
probability algorithm online fl produces solution cost op log opt medians 
phases phase transitions details algorithm median streams 
algorithm subroutines invoked mark points stream read processed 
change phases algorithm see point mark read 
notion read points obtain bound number phases ensuring phase progress marks new point read 
denote number phases 
ease exposition initially describe simpler slightly incorrect algorithm analyze assuming section modify algorithm ensure number phases algorithm pls follows constant explained assumed 
pls point stream integers 
set lb 

unread points mi para cluster li xi xi mi ri li li 
return mi medians invocation para cluster 
call pls sets lower bound procedure set lb set lb point stream integer 
marking points read equal distance closest pair members order 
return step pls para cluster returns mi set weighted medians part xi read 
step ri defined formally portion unread phase ri concatenation mi ri 
description para cluster follows 
description constants chosen satisfy condition para cluster point stream lower bound li integers 
run log parallel invocations online fl li log input 
invocation run long number medians exceed log cost solution modified input exceed li 
conditions violated particular invocation running invocation 

continue invocations stopped 

invocation finishes mark read points seen invocation point cause median limit cost limit exceeded return medians invocation 
ith phase pls consists ith call routine para cluster consumes initial segment modified stream xi passed parameter 
result phase members xi seen ith call para cluster point seen marked read unread points appended untouched set medians para cluster xi 
prove cost medians returned pls constant times cost best median solution phases 
notation useful proofs 
definition 
positive integer subsets common metric space minimum mint dist 
cost best medians medians allowed chosen 
definition 
denote subset marked read phases si denote subset seen algorithm phases note ri si phases si contains point ri point seen returned unread latest finishing invocation online fl phase pri si 
definition 
op ti si 
recall si subset seen phases 
note solution attains cost op ti si may include medians si 
definition 
define denote cost medians mi ri points read marked read phase fact 
new point marked read pls adds current value facility cost point read solution cost 
fact 
value returned set lb pls lower bound 
proof 
note fact implies points guaranteed read phase 
lemma 
denote event ai li denote event li li op ti 
appropriate choice poly hold 
proof 
show 
show holds probability holds 
number phases pls follow probability hold 
holds trivially long 
holds follows condition guaranteed exceed andl 
true set times lower bound 
prove high probability hold phases 

show high probability holds holds 
suppose contradiction op ti li 
op mi si si cost members cost modified input seen phase optimal 
note solution attains cost op ti mi si si medians outside set points seen phases ai op ti proof similar proof theorem op li 
modified instance seen phase feasible solution costing li corollary invocation probability member si limits cost number medians 
invocations reading point contradiction op ti li probability event occurred 
need ensure ai li 
ci denote cost mi mi ri ri modified input read phase definition algorithm ci li 
note cost mi respect ri points marked read phase li 
ai cost solution algorithm phase measured respect original input points ri ai ci 
condition follows ai ci li holds 
holds phase fails 
seen phase holds failure probability section show phases modifying algorithm slightly 
phases probability fails holds lp op tp 
op tp certainly op tp lp op tp 
phase finds solution costing lp medians produced phase cost op tp 
bounding number phases analysis previous section assumes phases algorithm phase changes may occur consumption new input number phases higher see ensure phase marks new point read denote point data stream seen marked read phase want ensure marked read phase 
recall op ti si cost optimal solution si ri 
compute improved lower bound li op ti ensure op ti li 
follow termination phase high probability cost optimal solution points seen far exceeds li phase marks read terminating 
compute approximate median solution modified instance consisting mi weighted medians phase order algorithm median 
denote value approximate solution obtained 
set li follows li max li previous section proved invariant ai li maintained algorithm 
note new procedure setting li violate invariant 
furthermore examining proof previous section easy see algorithm maintains stronger invariant ai li 
need condition note contradict condition imposed 
prove li valid lower bound optimal cost 
lemma 
li op ti 
proof 
know op ti li 
need prove op ti 
recall op ti value optimal median solution ri 
medians outside ri 
recall ai cost assigning points ri medians mi 
implies median solution weighted points mi cost op ti ai op ti li 
medians outside mi 
transform solution solution uses medians mi op ti li 
approximation algorithm compute median solution instance op ti li 
op ti li op ti li op ti inequality follows li op ti 
prove op ti upper bounded li ensures progress phase 
state prove bound need proof 
claim 
op ti ai 
proof 
statement claim equivalent ai op ti 
cost median solution weighted medians mi point ai cost assigning points ri medians mi 
combining solutions get feasible median solution points ri cost ai 
ti cost optimal solution instance follows ai op ti 
lemma 
op ti li 
proof 
ai op ti li op ti li op ti op ti ai step follows chosen holds 
final medians order produce final medians simply solve median problem final set log medians treating medians points weighted number points assigned 
op value optimal solution 
suppose solution log centers cost op constant 
exists solution weighted instance medians points cost op 
proof follows theorem 
approximation algorithm median instance get solution cost op weighted instance going points original points pay additional op yielding solution cost op original set points 
theorem 
streaming algorithm median produces approximation pass probability space required space repre poly sent log points stream 

algorithms asymmetric median algorithms solving median sets asymmetric distance functions 
distances directed dist 
point set dist dist dist dist distances obey directed triangle inequality 
initially assume inter point distances finite positive show modify algorithm case inter point distances zero 
algorithms idea growing larger clusters medians points assigned 
initially small coverage radius set points regarded unassigned 
point minimum fraction points assigned cost apiece median neighbors marked assigned covered terms assigned covered interchangeably 
points neighbors increased doubled say procedure 
show time increase radius number points assigned algorithm number assigned old coverage radius optimum median solution 
non streaming algorithm 
points possibly asymmetric distance function ratio largest distance dmax smallest inter point positive distance dmin known input parameters algorithm produce solution log medians cost constant times optimum cost 
algorithm proceeds log phases radius ri phase ri 
discuss find value assume 
definition 
said cover point dist ri 
initially points unassigned phase cover points assign new medians 
phase call phase ui denote number points unassigned phase define phase consider turn point xi covers ui unassigned points mark covered 
phase set ri ri phase 
continue points assigned 
lemma 
point data set denote median assigned optimal solution 
dist ri number points cost ri optimal solution 
phase ui ui 
proof follows fact point covers fraction remained unassigned phase particular optimum medians 
set arbitrary inter point distance observe dmin 
suppose 
fact min log log trivial solution medians feasible framework 
theorem 
algorithm finds log medians cost constant times optimum median cost 
proof 
opt denote cost optimum ans cost cost medians algo rithm described 
ri ri ui cost ri ri ui ri ri ri ri ui ri ri ui 
lows opt cost 
note opt dmin opt 
cost opt algorithm gives approximation 
lower bound smallest inter point distance algorithm terminate log rounds ri reaches need expanded 
log medians produced 
streaming algorithm 
describe apply algorithm memory small number log passes 
new algorithm uses log space 
memory scarce counting number new points covered requires pass deciding note point need considered phase potential median 
estimate true coverage pre drawn sample 
guarantee condition lemma holds show high probability round covers large proportion points covered optimal algorithm 
set choose medians phases 
phase passes pass choose independent random samples set points covered 
second pass data set examining point making median estimated coverage high 
third pass find ui number points covered 
phase samples taken ui 
algorithm follows linear passes noted stream data set integer 
set 


log set 
pass draw independent samples si log nk log si points drawn uniformly random replacement ui unassigned points 
second pass exit pass go step examined 
covers log remaining points pth sample si median current ith phase 
call median mi ii 

iii 
remove si points covered medians mi mi si empty removal continue increasing removing covered points si si non empty removal step 
third pass point stream set samples exhausted 
perform pass identify points covered medians mi mi 
ri ri 
sample size condition median chosen lemma holds high probability 
condition median point high coverage unassigned points current pth sample 
size samples fact drawn independently earlier medians picked basis points cover samples large coverage sample implies high probability large coverage set unassigned points 
chernoff bounds guarantee phase covers points left unassigned th phase probability greater nk log cover log points current sample median 
phase terminates probability counting done single pass note determining specific point covered accomplished computation distance existing median 
log ui unassigned points assignment distances optimum solution ri 
log phases probability lemma holds execution algorithm 
log medians produced 
zero distances 
points zero assignment cost optimal solution algorithm may assignments costing zero cost solution 
running zp preprocessing algorithm amounting execution stream modifications solves problem 
zp adds log passes finds log additional medians 
changes follows 
setting initial radius log phases new radius ri coverage radius phase log phases 
sample size change log nk log covering changed covering covers dist 
dispense step 
zp conclude clean step exactly member unassigned phases point median 
zp log medians 
suppose optimal solution medians exactly members assignment distance call cheap points rest expensive quantity known zp 
start members unassigned ui denote number cheap points unassigned phase zp 
phase log ui 
log phases probability number unassigned cheap points 
optimal solution zero cost single unassigned point may remain clean step removes 
cheap points remain zp finishes 
denote number members remain unassigned zp 
note points ex positive assignment distance optimal solution 

zero cost solution albeit log medians return solution running rest algorithm 
run algorithm stream members feasible medians trying cover unassigned points 
return log medians zp log medians stream 
half points optimal solution assignment cost dmin opt 
case analysis cost approximation factor previous section hold 
suppose 
opt denote sum assignment distances remaining points optimal solution 
opt opt dmin case analysis previous section shows cost solution find opt 

center outliers section algorithm center problem metric distance function 
general object center problem find cluster centers associate points centers minimize largest cluster radius 
radius jth cluster cj distance center cj farthest member cj 
problem requirements relaxed small fraction points excluded assigned clusters cheaper solutions may available 
clearly number may excluded increases lowest achievable cost rise 
suppose set smallest maximum radius achieved fraction excluded 
pass algorithm space complexity log high probability find solution excludes bit fraction achieves maximum radius constant times algorithm principle random sample taken roughly 
particular set centers covers radius centers cover approximately fraction sample radius 
describe model algorithm formally 
solution center denoted set ck ci centers radius 

ck center solution set assigned ci dist ci point assigned call solution points assigned solution subset viewed solution radius change reinterpreted solution radius may exclude different fraction valid solution contains centers solution similarly interpreted solution assume existence center algorithm takes data set integer returns centers 
assume constant smallest radius solution returns solution algorithm data set integer 
take sample points uniformly random replacement 

ck output 

return interpreted solution may exclude different fraction shall see probability exclude fraction times smallest possible radius solution excludes fraction lemma 
sample points taken uniformly random solution probability excludes fraction proof 
chernoff bounds chance fraction fraction excluded ln algorithm 
lemma 
sample lnn points taken uniformly random replacement consider solution solution probability proof 
fewer solutions radius exclude fraction chernoff bounds guarantee probability solution excludes regardless probability solution exclude theorem 

ck solution produced 
suppose solution probability true optimal solution excludes fraction radius proof 
suppose solution lemma probability solution radius excludes 
case solution returned solution lemma probability solution exclude theorem follows 

median outliers give similar algorithm median outliers recall median objective sum average assignment distances 
solution allowed exclude outliers cost average cost distance closest median points excluded 
pass log space algorithm best solution excludes fraction points average assignment distance algorithm finds solution excludes slightly fraction achieves average assignment distance 
median data set points consist set 
ck medians 
denote closest median ci cj ci dist ci dist cj 
call dist radius exclude fraction course exclude members highest radii 
excluded assigned called assignment distance called solution average assignment distance assigns fraction points solution interpreted solution vice versa 
case reinterpret solution solution vice versa keep medians necessarily radius fraction excluded 
assume existence median algorithm takes data set integer anda returns medians 
assume cost solution average assignment distance radii counted 
constants smallest radius solution returns solution 
data set integer 
take sample points uniformly random replacement 

ck output 

return interpreted solution lemma 
sample points drawn uniformly random replacement lnn lnn max 
ln solution probability solution proof 
chernoff bounds upper bound high probability maximum cheapest assignment distances apply limit average assignment distance lemma 
sample points taken uniformly random replacement assume max lnn ln ln consider rs solution probability exist rs solution proof 
specific solution rs steps show high probability exist rs solution step show high probability lower bound highest assignment distance exclude second step show high probability lower bound average assignment cost excluded 
follows probability excludes average radius higher rs 
conclude proof noting upper bound number possible solutions probability particular type considered rs solution ln lnn product numbers regardless probability rs solution average assignment cost rs exclude theorem 
solution input 
suppose solutions exclude fraction points lowest possible average assignment distance 
probability solution proof similar theorem 
ajtai jayram kumar andd sivakumar approximate counting inversions data stream 
proc 
th stoc 
algorithm 
example 
alon dar parnas ron 
testing clustering 
proc 
st focs 
alon matias szegedy 
space complexity approximating frequency moments 
jcss 
arora raghavan rao 
approximation schemes euclidean median related problems 
proc 
stoc 
arya garg meyerson pandit 
local search heuristics median facility location problems 
proc 
stoc 
bar yossef kumar sivakumar 
reductions streaming algorithms application counting triangles graphs 
proc 
soda 
charikar chekuri feder motwani 
incremental clustering dynamic information retrieval 
proc 
stoc 
charikar guha 
improved combinatorial algorithms facility location median problems 
proc 
focs 
charikar guha tardos shmoys 
constant factor approximation algorithm median problem 
proc 
stoc 
charikar khuller mount narasimhan 
algorithms facility location problems outliers 
proc 
soda 
charikar panigrahy 
clustering minimize sum cluster diameters 
proc 
stoc 
dyer frieze 
simple heuristic center problem 
operations research letters 
feigenbaum kannan strauss viswanathan 
approximate difference algorithm massive data streams 
proc 
focs 
gilbert guha indyk kotidis muthukrishnan strauss 
fast small space algorithms approximate histogram maintenance 
proc 
stoc 
guha koudas shim 
data streams histograms 
proc 
stoc 
guha mishra motwani callaghan 
clustering data streams 
proc 
focs 

algorithmic approach network location problems part ii medians 
siam journal appl 
math 
henzinger raghavan rajagopalan 
discrete mathematics theoretical computer science 
hochbaum shmoys 
best possible approximation algorithm center problem 
mathematics operations research 
indyk 
sublinear time algorithms metric space 
proc 
stoc 
indyk 
sublinear time approximation scheme clustering metric spaces 
proc 
focs 
indyk 
stable distributions pseudorandom generators embeddings data stream computation 
proc 
focs 
jain vazirani 
approximation algorithms metric facility location median problems primal dual scheme lagrangian relaxation 
journal acm 
plaxton rajaraman 
analysis local search heuristic facility location problems 
proc 
soda 

lin vitter 
approximation algorithms geometric median problems 
information processing letters 
vitter approximations minimum packing constraint violation 
proc 
stoc 
manku rajagopalan lindsay 
random sampling techniques space efficient online computation order statistics large datasets 
proc 
sigmod conference 
plaxton 
online median problem 
proc 
focs 
plaxton 
optimal time bounds approximate clustering 
proc 
uai 
meyerson 
online facility location 
proc 
focs 
meyerson callaghan plotkin 
approximating median sampling approach 
unpublished manuscript 
mishra pitt 
sublinear time approximate clustering 
proc 
soda 
thorup 
quick median center facility location sparse graphs 
proc 
icalp 
young 
medians facility location chernoff wald bound 
proc 
soda 
