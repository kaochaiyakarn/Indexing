vol 
special issue oops track sac nicosia cyprus re classification multi threading damiani dip 
di informatica univ di torino italy dezani ciancaglini dip 
di informatica univ di torino italy paola giannini dip 
di informatica univ del italy consider re classification presence multi threading 
aim define multi threaded extension language fickle call 
define operational semantics type effect system language 
method signature carries information possible effects method execution 
type effect system statically checks information 
operational semantics uses information order delay execution threads cause access non existing members objects 
show execution typed expression delays produce deadlock 
lastly discuss translation java showing operational semantics implemented standard java multi threading constructs 
re classifiable objects support modification object behavior changing class membership runtime see 
language fickle particularly interesting java language combines features object re classification strong type system 
consider issue dealing re classification presence multithreading 
aim define multi threaded extension language fickle call 
expression spawn starts evaluation expression new thread current thread continues evaluating expression spawn 
new current thread common heap containing set defined objects aliasing re classification may change class membership objects threads 
basic problem design languages re classification features ensure objects may re classified classes different members attempt access non existing members object 
single threaded language fickle achieved static type effect system conservatively estimates re classifications may caused execution expressions changes types variables may refer re classified object 
multi threaded environment object referred variable re classified thread 
prevent executions thread object executing method object 
achieve cite article follows damiani dezani ciancaglini paola giannini re classification multi threading journal object technology vol 
december special issue oops track sac nicosia cyprus pp 
www fm issues issue article re classification multi threading combining static type effect system synchronization mechanism effect information 
method declaration gathers addition information classes objects may re classified fickle information classes re classifiable objects may receive messages 
operational semantics uses previous information delay threads re classify objects threads invoke methods objects re classified 
prove execution typed expression cause access non existing members objects delays introduced cause deadlocks 
model multi threading level aim study interaction re classification 
multi threaded java languages consider semantics closer implementation 
investigate practicality ideas provide translation java 
translation extends previous translation fickle java see improved version 
implement delays needed method calls standard synchronization constructs java 
translation preserves behavior expressions 
organized follows section provides brief overview 
section presents operational semantics section introduces type effect system 
section translation java defined 
sections revised improved version particular operational semantics effect system simpler 
nutshell typed imperative class language classes types subclasses subtypes methods defined inside classes selected depending class object method invoked 
syntax pseudo grammar pair means optional means zero repetitions omit separators obvious 
programs ranged subscripts superscript needed types effects expressions values program sequence class definitions 
class definition may preceded keyword root state 
subclasses root class state classes superclasses root class non root non state classes 
root state classes possible sources targets re classification static typing guarantees source target re classification subclasses root class 
journal object technology vol fickle mt nutshell class class root state class extends field meth field meth bool new spawn true false null conventions ci 
class names fi 
field names mi 
method names syntax objects created expression new may class including state class 
expression changes class object pointed values fields declared common root superclass preserved fields initialized default value associated type true bool null classes 
field types method result types parameter types state classes objects pointed may re classified classes different members attempt access non existing members 
contrast static type may state class 
ensure attempt access non existing members take place possible re classification object pointed affect static type 
methods defined state classes called state methods 
calls state methods traced due usual scoping rules methods methods access fields defined state classes 
methods parameter declared result type type formal parameter effect method body 
effect pair fickle state classes alternative cumulative example roles 
see major technical problems considering different design choice spirit roles requires re classification keep value fields previous time re classified object state class investigation issue outside scope 
vol journal object technology re classification multi threading called re classification effect set root classes conservatively estimates set classes objects re classified evaluation called receive effect set root classes conservatively estimates set classes objects receive calls state methods re classified evaluation implies 
receive effect synchronization mechanism plays crucial role guaranteeing safety presence multi threading 
program formed require effect state method defined state class subclass root class 
ensures execution method object state class receiver state method root super class occurs effect method way assure object re classified thread thread uses receiver state method 
condition enforced receive effects considered 
note effects state methods non empty effects non state methods empty non empty 
particular non state methods re classify objects call state methods empty effect 
expression spawn causes execution expression new thread 
spawned expression inside original method body require occur typing body method involves environments mapping parameter name type metavariable class 
environments denoted lookup id update id usual meaning 
typing expression context program environment involves components type value returned evaluation type execution effect example give program pl defines classes inspired adventure games 
typing judgements class re classification effect track receivers methods change class 
example frog prince see typing rules ppl null vocal frog ppl prince prince prince player ppl sword new weapon weapon prince example multi threaded variant example proposed 
journal object technology vol fickle mt nutshell class weapon extends object bool swing class vocal extends object bool blow root class player extends object bool brave bool wake player weapon kissed player vocal player state class frog extends player vocal bool wake player blow brave weapon kissed player null prince sword new weapon vocal player state class prince extends player weapon sword bool wake player sword swing brave weapon kissed player sword vocal player frog new vocal class game extends object bool play player spawn wake kissed row spawn wake wake row program pl players re classifications body method kissed class frog typed 
receiver effect added correctly deal multi threading 
consider instance expression new game play new frog method play spawns threads 
need avoid execution receiver method wake thread created row initially frog due concurrent execution method kissed thread created row prince body wake vol journal object technology re classification multi threading class frog produce field error 
realized account game player method calls typing pl kissed weapon game player typing pl wake bool game player respectively 
crucial observation objects heap object pointed re classified method kissed thread time receiver method wake thread 
explicit fact class frog object pointed super class player re classification effect kissed receiver effect wake 
avoid problems require object re classified thread concurrently re classified receiver state methods 
requirement enforced introducing mapping root class names integers 
mapping called re classification counter identifies objects may re classified objects may receive messages active methods 
executing method call rules operational semantics check information re classification counter method effect sufficient condition requirement delay execution method call satisfied 
instance expression new game play new frog considered method call kissed thread created row executed execution method call wake row method calls wake row call terminated second started execution second call wake row 
note simultaneous execution method calls wake different threads allowed cause access non existing members objects 
operational semantics semantics small step operational semantics style advocated 
model multi threaded computations consider multi threaded configurations composed exactly heap re classification counter shared threads set tuples single threaded configurations stack effect expression tuple thread 
reclassification counter structure detailed page effects threads keep information threads active objects 
notice syntax thread may access fields defined state class executing state method call 
evaluation expression spawn current threads creates new thread runs expression parallel current threads 
journal object technology vol operational semantics call return call return ret return ret return new new undefined fs fr vl initial fl fr vr rec fr vr fs fr vl fl fs fr fr fr vl initial fl udf operational semantics reduction rules semantics specifies multi threaded configuration rewrites respect program defined reduction relation cnt eff cnt eff exc defined terms reduction relation specifying sequential reduction step rewrites heap re classification counter exactly single threaded configuration cnt eff cnt eff exc typed program terminates normally special term special term exc modeling null pointer exceptions source abnormal termination typed programs 
gives interesting reduction rules sequential reductions rules multi threaded reductions 
semantic categories involved definition vol journal object technology re classification multi threading 

step spawn 
true 
null 

exc val 
exc operational semantics reduction rules addresses assume denumerable set addresses 
extended expressions defined adding clauses return pseudo grammar defining expressions address 
extended values val defined adding clause pseudo grammar defining values address 
set extended values true false null objects fn fin val cn pairs finite mappings field names fn values class names cn denoted fr vr denote object heaps fin finite mappings addresses objects 
objects denote heap 
frames val mappings parameter values metavariable addresses null 
denoting update conventions heaps 
stacks finite sequences frames bottom stack top stack 
non empty stacks ranged 
re classification counters cnt mappings root class names integers greater equal 
exactly threads objects belonging subclass receivers state methods re classify object belonging subclass exactly thread executes journal object technology vol exc spawn operational semantics methods objects belonging subclass methods re classify objects belonging subclass denoting update conventions heaps 
effects eff pairs disjoint finite sets root class names 
component pair re classification effect second receive effect 
union effects defined component wise preserving condition intersection re classification component receive component effect empty sub effect iff get definition inclusion effects redexes new return null null null evaluation contexts return null null initial configuration evaluating expression program empty heap root classes occur null typical configuration thread return return contain occurrences return outermost return corresponds bottom frame innermost return corresponds top frame discussing reduction rules introduce notation 
function gives definition method class vol journal object technology re classification multi threading term denotes superclass state class state class unique root superclass method calls distinguish standard non standard method calls rules call call 
standard method call rule call executed changes statically declared effect re classification counter 
non standard method call rule call executed 
objects re classified execution method receivers state method calls threads 
objects method execution call state methods method state receiver object currently re classified threads 
objects re classified execution method call belong subclass class re classification effect method 
objects receive state methods execution method call including receiver method call method state method re classified execution method call belong subclass receiver effect method 
conditions 

implied conditions 
method call effect set re classification counter updated putting root classes root classes 
formed programs see page effects inner method calls method calls done inside method call sub effects corresponding top level call 
non standard method calls exactly toplevel calls methods set empty 
current stack empty contains exactly frame top level evaluations 
justifies conditions denotes number frames stack rules call call 
standard non standard method calls push evaluation frame body call stack 
frame binds formal parameter value actual parameter receiver call 
method call rewritten return expression return indicates kind method call standard non standard body method 
return standard method call rule ret leaves effect reclassification counter unchanged 
return non standard method call rule ret restores value effect updates value re classification counter 
rule new creates new object class address 
term fs denotes set fields defined class type field class journal object technology vol typing re classification expressions object bound class replaced new object class fields belonging root superclass preserved fields initialized types 
term denotes value field object address 
updating frames heaps done respectively rules 
rule step allows perform sequential reduction step inside single threaded configurations composing multi threaded configuration 
rule spawn generates new thread evaluation expression initially empty effect expression spawn replaced constant true evaluation expression containing spawn expression proceed old thread 
stack new thread generated evaluation expression contains frame bound current value old thread bound null 
threads share objects heap value bound variable address 
bound boolean value considered input value new thread 
value bound null spawned expression contain occurrences see page 
normal termination dealt rules val rule exc propagates exc 
typing section illustrate type effect system 
receive effects main novelty respect typing rules allow object bound re classified expression occurring statement position test conditional receiver parameter method call left hand side right hand side assignment 
claim choice gives cleaner re classification making programs easier read 
examples fickle programs satisfy requirement 
interesting typing rules expressions discuss formed classes programs 
typing rules expressions consider 
information class receiver appears rule seq 
second expression typed updated environment class evaluation expression effect composition union effects components 
rule cond branches may cause different re classifications 
evaluation assert belongs upper bound respect subclass hierarchy program condition re classification effect vol journal object technology re classification multi threading bool 
seq cond rs object object spawn bool typing rules expressions spawn contain root superclass class ensures object bound re classified test part conditional 
consider rule meth evaluation method body modify class calling expression 
happen superclass class calling expression re classification effects called method 
existence class implies uniqueness effects sets root classes 
account define application re classification effects classes cn ci ci 
method calls lookup function definition method class receiver 
class receiver state root class occur re classification effect add class receive effect 
aim define term set state root class empty set 
re classification type correct environment formed shape bool non state class class expressed condition 
target re classification root state class expressed condition rs class re classification class subclasses root class 
re classification effect 
journal object technology vol meth typing formed program see occur expression shape spawn 
spite need type environment typing inside spawn example rules cond meth 
rule spawn assume type object environment type expression recall evaluated new thread value new thread null 
program formed inheritance hierarchy formed classes formed 
fields may redefine fields superclasses method may redefine superclass method name argument result type effect sub effect overridden method 
recall sub effect instance player sub effect player example definitions method class frog method kissed class prince correct 
method bodies formed return value appropriate method signature effect sub effect signature 
effects state methods contain root superclass state class defining state method 
arguments spawn expressions contain occurrences 
section stating soundness property operational semantics type system assure starting typed expression obtain typed expressions reach deadlock 
need definitions 
definition 
environment agrees program heap frame bool true false cx cx 
expression typable program heap frame type class effect environment agrees 

multi threaded configuration reachable formed program notation expression typable 
initial configuration defined page 
note definition requires run time value method argument receiver exactly type specified type environment 
condition vol journal object technology re classification multi threading relaxed asking method argument receiver subtype type specified environment 
choose current definition avoid introducing subtype relation resulting notions typability coincide 
theorem type preservation 
typable 
observed referee formulation type preservation quite weak 
stronger formulation reported requires definitions 
theorem progress exc translation java translation define translation fickle java described revised improved version 
order simplify presentation consider target language idealized java java declarations may initializations declarations statements may interleaved block extended block expressions blocks containing declarations statements regular blocks final expression 
block expression evaluated standard java block statement left right occurs expression position yields value expression 
example see translation re classification 
translation mapping defined cases various syntactic constructs programs classes field declarations method declarations expressions 
main difference respect translation presence new translation mapping op expressions java introduced order correctly translate expressions occurring arguments spawn expressions 
order self contained describe translation full 
state formal result correctness translation need give operational semantics subset java target translation 
prove computation expression simulated computation translated expression vice versa 
outside scope 
general may extended expression need typing rules extended expressions done 
journal object technology vol translation fickle mt java class identity extends object imp class extends object identity id class gamma class class class class class class translation programs classes identity translation translation java idea object encoded pair id imp objects call id identity object imp imp implementor object id roughly speaking id provides identity imp behavior re classification changes imp id method invocations resolved imp objects accessed id implementors paired identity represent object different execution stages 
implementor objects belong class contains field id type identity 
identity objects belong class identity contains field imp type see definition classes 
variables original program type class translated variables type identity 
classes declared program subclasses 
translation programs program sequence class declarations class 
translation mapping programs defined labeled programs 
labeled program program occurrence spawn expression spawn marked distinguished label consider denumerable set labels ranged producing labeled spawn expression spawn 
applying translation mapping program transform labeled program labeling fresh labels occurrences spawn expressions translation labeled program contains translation classes defined program plus number extra classes vol journal object technology class extends thread private thetype public thetype re classification multi threading public void run op object type parameter method contains classes classes identity classes label occurring class gamma needed bookkeeping 
assume name clashes extra classes classes declared translation labeled programs defined 
classes identity discussed classes defined gamma defined figures 
classes extend java library class thread 
class field storing copy parameter method containing spawn expression labeled field 
constructor initializes field see translation spawn 
correct type field obtained applying operator taken thetype current type parameter 
identity class body method run translation op see page expression argument spawn 
remarked translation expressions depends types program environment passed argument corresponding translation functions 
environment translation maps type parameter method containing spawn object accord typing rule spawn 
recall contain occurrences 
journal object technology vol translation fickle mt java class gamma extends object private static map gamma new hashmap public static void set phi set psi phi psi wait phi psi public static void set phi set psi phi psi notifyall private static bool set phi set psi private static void set phi set psi private static void set phi set psi class gamma application translation mapping op occurrences op replaced 
notice run time program generated translation kinds objects objects extending generated translation removing re classification objects contain expressions inside spawn threads 
objects classes receivers method call start method java library class thread executes method run 
class gamma implements re classification counter represented private static field gamma computations needed nonstandard method calls 
want thread time modifies public methods gamma synchronized 
precisely field gamma contains mapping defined page root class names represented strings integers 
mapping checked updated rules call ret 
methods implement respectively done rules synchronized assures thread read modify field gamma 
rule call allows execution method call condition vol journal object technology re classification multi threading private static bool set phi set psi iterator phi iterator hasnext string string gamma gamma get 
return false iterator psi iterator hasnext string string gamma gamma get return false return true private static void set phi set psi iterator phi iterator hasnext gamma put iterator psi iterator hasnext string string gamma gamma put gamma get gamma put private static void set phi set psi iterator phi iterator hasnext gamma put iterator psi iterator hasnext string string gamma put gamma get private methods class gamma satisfied 
method evaluates condition 
condition journal object technology vol translation fickle mt java satisfied rule call updates follows method modifies gamma 
rule ret updates follows method implements updating 
method calling notifies change gamma threads change may allow threads execute method calls 
simplicity methods omit wrapping int integer vice versa 
needed java library class hashmap maps object object 
translation classes fields method declarations gives translation classes fields method declarations 
translated class extends class translation preserves inheritance hierarchy 
useful introduce operator object class translated single java class containing translation field method declarations translation declarations kind class 
fields just translate type function thetype defined 
program class passed parameter translation function methods translation expression method body depends typing judgement typing judgement turn depends program current class type 
translating method consists removing effect annotation translating return type parameter type body 
translation function method body pass program typing environment current class bound type parameter translation expressions expressions translation functions expr op 
starting translation expr defined vol journal object technology re classification multi threading root state class extends tn fn meth methm class class extends thetype thetype tn fn meth meth methm meth meth thetype thetype expr translation classes fields method declarations extend expr adding clause spawn expressions language define op extended expr expr plus clause spawn expressions modifying translation method calls insert checks delays needed non standard calls 
translation expr expressions contexts know method calls occurring expression standard 
applied bodies methods classes program calls inner calls standard see 
translation op intended expressions contain non standard method calls 
expressions top level method calls 
expressions expressions inside spawn operational semantics evaluated top level initial expression evaluate 
expressions inside spawn bodies run methods classes see 
translation expr clauses translation expr 
clauses 
recall object encoded pair objects id imp respectively fields id imp pointing translation object corresponding id object 
means order access current implementation object select field imp object translation 
field access field update method call cast field imp needed field imp type 
clauses field update method call simplified corresponding clauses 
simplification comes fact re classified expressions statement position 
consider clause method call similar field update 
evaluate receiver assign value variable recall journal object technology vol translation fickle mt java expr expr expr id expr expr imp expr expr expr expr expr expr expr expr expr expr identity expr null throw new nullpointerexception imp expr expr identity expr null throw new nullpointerexception imp expr new expr new identity new identity id imp expr new identity id imp id imp fr fr fr fields class spawn expr new start true translation expressions expr vol journal object technology re classification multi threading return type effect method class op identity op null throw new nullpointerexception imp op thetype result identity op null throw new nullpointerexception set phi new add add set psi new add add gamma phi psi result imp op gamma phi psi result translation method calls op translation values expressions booleans objects class identity 
reason declare object class identity 
null pointer raise exception 
call method object refereed imp translation actual parameter 
translation object creation creates identity object implementor object binds 
identity object returned 
re classification new implementor object created 
fields root superclass previous implementor copied new implementor substitutes old 
translate occurrence expression spawn creating new object class 
argument constructor parameter argument assigned field see definition class 
start thread send method start new object class return value true agreement rule spawn 
method start method java library class thread starts execution method run 
journal object technology vol translation fickle mt java class extends spawn private identity public identity public void run identity result identity null throw new nullpointerexception set phi new set add player set psi new set gamma phi psi result player imp kissed gamma phi psi result translation op class clauses mapping op method call corresponding ones expr 
clause method call 
translation needs take account call return rules 
look class context program environment 
effect method class translation mapping expr call ret apply 
rules call ret 
declare local variable result type thetype return type method class build sets strings phi psi containing respectively root class names represented strings 
explained method call gamma checks gamma possibly changes 
execute method call ends restore initial conditions gamma described rule ret 
example sketch translation spawn kissed op pl vol journal object technology re classification multi threading label spawn expression game player program pl 
translation expression new start true declaration class 
extension multi threaded class language objects may change class run time 
combination static type effect system mechanism delaying execution method calls allows re classification safely presence multi threading 
delays introduced cause deadlock 
translation java 
translation shows realize non standard method call return rules standard multi threading constructs synchronized methods java 
aim analyze interaction multi threading re classification considered minimal extension fickle including primitive spawn starting expression new thread 
plan apply technique standard multi threading java definition subclasses thread explicitly created started 
working side proof soundness current language extends sketch proof soundness translation 
need formalize significant subset java includes static members classes threads synchronized methods 
noticed referee approach unnecessarily limit multithreading situations 
instance thread executing method may point re classify set objects subclass root class thread block thread attempts execute method may invoke methods disjoint set objects subclass possibility overcoming problem object level locking class level locking 
think better program design declaring different classes sets disjoint objects 
believe order exploit potentiality object level locking necessary rely dynamic information statically known approximation guaranteeing absence deadlocks theorem class locking leads enforce limitations multi threading similar ones 
journal object technology vol anonymous referees detailed thoughtful comments suggestions improve presentation 
ancona anderson damiani drossopoulou giannini zucca 
effective translation java 
restivo ronchi editors volume lncs pages 
springer 
ancona anderson damiani drossopoulou giannini zucca 
correct translation java 
technical report part deliverable ist dart project www hw ac uk dart 
anderson 
implementing fickle imperial college final year thesis june 
arnold gosling holmes 
java tm programming language third edition 
addison wesley 
knapp reus wirsing 
event operational semantics multi threaded java 
alves foss editor volume lncs pages 
springer 
chambers 
predicate classes 
nierstrasz editor ecoop volume lncs pages 
springer 
damiani dezani ciancaglini giannini 
re classification multi threading 
haddad omicini wainwright editors oops track sac volume pages 
acm press 
damiani drossopoulou giannini 
refined effects unanticipated object re classification fickle extended 
blundo laneve editors volume lncs pages 
springer 
drossopoulou 
case studies 
technical report imperial college 
drossopoulou damiani dezani ciancaglini giannini 
fickle dynamic object re classification 
knudsen editor ecoop volume lncs pages 
springer 
vol journal object technology re classification multi threading drossopoulou damiani dezani ciancaglini giannini 
dynamic object re classification 
acm transactions programming languages systems 

extending imperial college final year thesis june 
ghelli 
foundations extended objets roles extended 
fool 
laneve 
type system jvm threads 
theoretical computer science 
serrano 
wide classes 
guerraoui editor ecoop volume lncs pages 
springer 

implementing jvm imperial college final year thesis june 

object oriented programming modes 
journal object oriented programming 
felleisen 
syntactic approach type soundness 
information computation 
authors damiani researcher dipartimento di informatica universit degli studi di torino italy 
reached damiani di 
home page www di damiani 
dezani ciancaglini full professor dipartimento di informatica universit degli studi di torino italy 
reached dezani di 
home page www di dezani 
paola giannini associate professor dipartimento di informatica universit del italy 
reached giannini di 
home page www di giannini 
partially supported eu fet global computing initiative project dart ist 
partially supported eu fet global computing initiative project ist murst project 
partially supported eu fet global computing initiative project dart ist murst project 
journal object technology vol 
