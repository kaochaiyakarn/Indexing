xpi typed process calculus xml messaging lucia michele boreale laboratoire informatique universit de provence marseille 
dipartimento di sistemi informatica universit di firenze 
lucia lif univ fr boreale dsi 
xpi core calculus xml messaging 
xpi features asynchronous communications pattern matching name code mobility integration static dynamic typing 
flexibility expressiveness calculus illustrated examples concerning description discovery web services 
xpi type system disciplines xml message handling level channels patterns processes 
run time safety theorem ensures typed systems service receive documents understand offered services re defined comply declared channel capacities 
design globally distributed systems web services ws business business applications centered passing messages form xml documents 
major reasons emergence message passing conceptual simplicity minimal infrastructural requirements neutrality respect back ends platforms services 
features greatly ease interoperability integration 
generally recognized proposed languages standards ws draw inspiration calculus 
conveys message passing paradigm distilled form 
practice extreme find languages wsdl useful describe service interfaces saying little behaviour 
extreme find proposed standards bpel ws oriented detailed descriptions services hardly amenable formal analysis 
words experimenting significant gap theory formal models analysis techniques practice programming field distributed applications 
step filling gap aim giving concise semantic account xml messaging related typing issues 
purpose xpi process language asynchronous calculus 
prominent features xpi patterns generalizing ordinary inputs ml pattern matching integration static dynamic typing 
objective study issues raised features connection name code mobility 
precise account contributions follows 
syntax reduction semantics untyped xpi introduced section 
xpi resource addresses net represented names generally understood channels services listening 
messages passed xml documents represented tagged nested lists vein xduce :10.1.1.12.9903
services clients processes may send messages channels query channels retrieve messages obeying patterns 
messages may contain names passed output capability 
practically means client receiving service address partially supported eu ist fet global computing initiative project 
address re define service 
assumption perfectly sensible simplifies typing issues affect expressive power see 
messages may contain mobile code form abstractions roughly functions take argument yield process result 
precisely abstractions consume messages pattern matching supplying actual parameters contained code starting execution 
mechanism allows considerable expressiveness 
example show permits clean encoding encryption primitives spi calculus xpi 
types section discipline processing messages level channels patterns processes 
time creation channel capacity type specifying format messages travel channel 
subtyping arises presence star types arbitrary length lists union types lifting level messages subtyping relation existing basic values 
presence top type enhances flexibility allowing types documents external tag containing tag written 
subtyping contravariant channels natural thinks services roughly functions receiving arguments channels 
contravariance calls bottom type allows express sets values channels transport documents type written ch 
abstractions safely consume messages type type abs 
interplay pattern matching types capacities raises interesting issues concerning type safety section 
stated terms services accessible channels run time safety theorem ensures typed systems service receive documents understand second offered service re defined comply statically declared capacities 
property simply means process output messages violating channel capacities 
second property means service hang due input pattern consistent channel capacity form pattern consistency 
type checking entirely static sense run time type check required 
type system partially inspired xsd rich say language 
particular preferred omit recursive types 
certainly useful full blown language recursion raise technicalities hinder issues concerning name code mobility 
pattern language quite basic partly similar reasons simplicity partly sophisticated patterns easily simulated 
calculus described far enforces strictly static typing discipline 
consider extension calculus dynamic abstractions section useful little known actual types incoming messages 
dynamic abstraction run time type checks ensure substitutions arising pattern matching respect types statically assigned variables 
shall argue dynamic abstractions combined code mobility subtyping provide linguistic support tasks publishing querying services 
run time safety carries 
number proposals integrating xml manipulation primitives statically typed languages 
conclude section discussion related field directions extensions 
untyped xpi syntax assume countable set variables ranged 
set tags ranged 
set basic values bv 
leave bv unspecified contain values integers strings java objects assume bv contains countable set names ranged 
partitioned family countable sets called sorts 
range denote tuples variables 
message value var tag lm list abstraction list lm empty list var lm concatenation abstraction pattern continuation var pattern value var tag lq list list lq empty list var lq concatenation process output ai ai guarded summation parallel replication restriction table 
syntax xpi messages patterns processes 
definition messages patterns processes 
set xpi messages set xpi patterns set xpi processes defined syntax table 
impose linearity condition tuple distinct names xi occurs style xduce xml documents represented xpi tagged ordered list arbitrarily nested messages exchanged processes :10.1.1.12.9903
message basic value variable tagged message list messages abstraction 
take form variables represent formal parameters replaced actual parameters run time 
pattern simply abstraction free open message 
sake simplicity ignored tag variables easily accommodated 
note patterns allow direct decomposition documents sublists akin pattern xduce 
easily encoded show section 
process syntax variation calculus 
particular asynchronous non blocking output channel written said occur output subject position 
nondeterministic guarded summation ai ai waits message matching ai pattern channel ai consumes message continues prescribed ai names ai said occur input subject position 
note syntax forbids variables input subject position received name input channel words names passed output capability 
parallel composition represents concurrent execution 
process behaves internal reduction reduces operator useful coding burden dealing explicit negation pattern 
replication represents parallel composition arbitrarily copies restriction creates fresh name initial scope usual binding conventions notations alpha equivalence free bound names fn bn free bound variables fv bv apply 
cl set closed messages cl set closed processes 
notations abbreviations messages patterns mk mk stands mk mk mk mk stands mk mk 
abbreviations processes stand pi respectively stands save subscripts marking binding occurrences variables abstractions symbol replacing binding occurrence variable don care symbol variable occur continuation process 

stands fv 
list representation xml ignores algebraic properties concatenation associativity see 
simply take granted translation actual xml documents syntax 
example illustrates informally translation look 
example 
xml document encoding address book left representation xpi right addrbook addrbook person name john smith person tel name john smith name email john smith tel tel email smith john email john smith email person name eric brown email smith john email tel person person name eric brown name tel tel person addrbook 
shall prefer typewriter font useful improve readability 
com fn table 
structural congruence 
match ai ai struct ctx table 
reduction semantics 
note sequence tagged documents tag tag tag tag rendered ordered list tag tag 
pattern extracts name telephone number person address book qxy addrbook person name tel 
reduction semantics reduction relation describes system evolution internal communications 
xpi reduction semantics structural congruence defined congruence processes satisfying laws table permit rearrangement parallel composition replication restriction 
relation extends abstractions messages expected manner 
reduction semantics relies standard matching predicate matches linear pattern closed message yields substitution 
definition substitutions matching 
substitutions finite partial maps set variables set cl closed messages 
denote empty substitution 
term denotes result applying alpha renaming bound names variables needed 
closed message linear pattern match holds true dom fv case say matches definition reduction 
reduction relation pcl pcl binary relation closed processes satisfying rules table 
derived constructs examples xpi allows straightforward definition powerful constructs examples 
shall freely recursive definitions processes coded replication 
application functional application abstractions defined fn 
case ml style pattern matching construct relying match policy written case qk xk pk evolves matches substitutions involved evolves matches match process stuck 
construct defined xpi follows assuming precedence right associativity qk xk pk decomposition 
process attempts decompose message sublists satisfy patterns proceeds substitutions involved possible stuck written defined recursive process case case case 
list append function easily defined call suitable recursive process 
common list manipulation constructs easily coded style 
shall pursue direction 
example web service 
consider web service ws offers different services audio streaming service offered channel stream download service 
clients request service specify channel streaming bandwidth high low ws stream mp files vlow vhigh appropriate 
clients request download specify channel player received 
client run downloaded player locally supplying appropriate parameters local streaming channel bandwidth 
represent streaming simply output action channel player abstraction ws stream req stream bandwidth low channel vlow stream req stream bandwidth high channel vhigh download req player 
player req stream bandwidth channel case low vlow high vhigh 
client asks low bandwidth streaming listens proceeds stream req stream bandwidth low channel 
client asks download runs player locally listening local high bandwidth channel defined download req xp xp req stream bandwidth high channel 
encryption decryption cryptographic primitives distributed applications guarantee secrecy authentication 
testbed expressiveness show encode shared key encryption decryption primitives la spi calculus xpi 
shall see example application encodings section 
introduce xpi cr cryptographic extension xpi subsumes shared key spi calculus show encode xpi cr xpi 
messages extended extra clause represents encryption key encryption contain abstractions encryptions 
processes extended operator attempts decryption key successful binds result variable case decryption contain abstractions encryptions variable message form binds patterns remain unchanged particular may contain encryptions abstractions 
additional reduction rule dec case 
translation functions messages processes defined xpi cr xpi 
relevant clauses definition structural induction functions just go structure terms case 
define barb predicate follows input summand output scope guarded summation 
encoding defined correct sense preserves reductions barbs directions stated proposition 
note compositionality implies encoding fully barbed equivalence see 
proposition 
suppose closed process xpi cr 

xpi cr 
type system section define type system xpi disciplines messaging level channels patterns processes 
system guarantees typed processes respect channels capacities runtime 
words services guaranteed receive requests understand conversely services offered channel comply types bt basic type bt bt top bottom tag lt list union abs abstraction list types lt empty star lt concatenation table 
syntax types 
type declared channel 
xpi type system draws inspiration rich xml schema 
system permits specify types basic values string int provides tuple types fixed length lists star types arbitrary length lists 
sake simplicity omitted attributes recursive types 
system provides abstraction types code mobility 
message types subtyping assume unspecified set basic types bt bt bt include int string boolean java classes 
assume bt contains countable set sort names correspondence sorts slight abuse notation denote sort names corresponding sorts 
definition types 
set types ranged 
defined syntax table 
note presence types 
simply type messages 
contrary message type type extremely useful purpose defining channel types shall see 
note abstraction type abs pattern type specified abs just keyword 
example 
type address books left see message example type soap messages consisting optional header body enclosed envelope right addrbook person name string envelope header tel int body email string 
associate types channels precisely sorts 
done introducing capacity function 
definition 
capacity function surjective map set sorts set types 
sequel fix generic capacity function 
shall denote ch generic sort mapped note surjectivity capacity function type sort ch 
particular ch sort channels transport 
practice determining capacity channel belongs ch implemented sub top sub basic bt bt bt bt sub star sub star sub sort ch ch sub bottom sub tag sub star sub list lt lt lt lt lt lt sub union sub union table 
rules subtyping 
variety mechanisms attaching explicit definition 
away details 
list star types presence naturally induce subtyping relation 
example service capable processing messages type int capable processing messages type int int subtype subtyping serves lift generic subtyping preorder basic types types 
definition subtyping 
subtyping relation reflexive transitive relation closed rules table 
note disallow subtyping abstractions 
reason limitation discussed shortly presenting type checking system see 
note subtyping contravariant sorts capacities rule sub sort natural thinks name capacity roughly function take arguments type consequence contravariance ch ch ch type channels 
type checking basic typing relation bt basic values basic types presupposed required respect subtyping bt bt bt bt 
require bt bt set bt bt minimal element 
names sort names basic typing relation iff contexts finite partial maps variables types denoted sets variable bindings xi ti xi distinct 
denote empty context 
assume set variables denote context obtained removing bindings variables context obtained restricting bindings variables subtyping relation extended contexts letting iff dom dom dom holds 
union contexts having disjoint domains written ambiguity arises 
sum contexts written defined dom dom dom 
type checking relies type pattern matching predicate tpm role twofold extracts types expected variables matching messages type yielding context checks consistent type subtype 
definition type pattern match 
predicate tpm defined rules table 
tpm top tpm empty tpm tpm value tpm star tpm union bt tpm bt fv tpm tpm var tpm tag tpm tpm tpm tpm tpm star tpm tpm lq tpm lq tpm list tpm tpm lt lq tpm lt lq tpm tpm tpm tpm tpm tpm ti tpm ti mod table 
matching types patterns 
expected type checking works annotated syntax decorated context binding variables written dom simply understood binding variables dom 
notational simplicity shall abbreviations assume don care variables annotated reduction semantics carries annotated closed processes formally unchanged 
follows shall additional notation terminology 
say type abstraction free contains subterms form abs 
context abstraction free dom abstraction free 
ch abbreviation ch ch 
type checking system consists sets inference rules messages processes displayed table respectively 
systems mutually dependent abstractions may contain processes processes may contain abstractions 
note system entirely syntax driven process resp 
pair determines rule applied check resp 

interesting rules tm abs 
informally abs ensures true abstraction behaves safely consuming messages type type actual parameters received subtype type declared formal parameters ok pattern consistent type essentially run time type subtype type pattern match 
guarantees existence message type matches pattern 
ill formed pattern generated abstraction freeness 
rule checks abstraction residing channel ch safely consume messages type exist messages type match pattern conversely checks messages sent type input summation rule sum dealt separately notational convenience 
worth notice definition rule tm value entails subsumption channels implies 
remaining rules self explanatory 
sequel closed annotated processes shall write ok ok say typed 
similarly closed annotated 
tm empty tm value tm tag bt bt tm star tm abs rep res tm top tm var tm list tm union tm star lm lt lm lt lm lm tpm ok abs dom fv abstraction free table 
type system messages 
ch ok ok ok ok ok ch abs ok sum ai ai ok ai ai ok par table 
type system processes 
ok ok ok ok ok ok example 
assume ch int ch int int 
ok int int note change sort ch int int int typed rule tm abs fails int intuitively correct possible runtime type int int int int abs consistent capacity associated int int int 
illustrate ch ch contravariance sort names consider link process constantly receives name sends written ch process typed provided ch ch ch ch 
abstractions subtyping 
see disallow subtyping abstractions consider types int int int 
clearly 
assume defined subtyping covariant abstractions abs abs 
clearly abs abs condition tm abs fails 
words crucial subtyping property violated 
hand assume defined subtyping contravariant abstractions abs abs 
consider int int int clearly abs abs simply type pattern match 
violate subtyping property 
typing rules application case rules easily derived translation derived constructs application case base syntax 
tm denote exact type obtained replacing name ch ch type bt bt recursively abstraction subterm tq abs 
rule application appl tm abs ok easily proven sound recalling fresh assuming chosen ch tm 
concerning case note typed version construct annotated patterns case qk pk ok relying rule application typing rule case written case qi qi pi ok case qk qk pk ok example web service continued 
consider service defined example 
assume basic type mp mp files vlow vhigh mp basic type mp low quality mp files vlow mp vhigh mp 
assume mp mp note implies ch mp ch mp channel streaming generic files streaming low quality files fits intuition 
req stream bandwidth string channel ch mp fix capacities channels stream download stream ch download ch req ch abs 
annotated version ws permits principle static optimization channels assuming allocation low quality channels expensive generic channels ws stream req stream bandwidth low channel ch mp vlow stream req stream bandwidth high channel ch mp vhigh download req ch abs player player obvious annotated version player example 
easy check player abs ws ok run time safety safety property interest defined terms channel capacities message types consistency 
formal definition pattern consistency 
definition consistency 
type consistent consistent message matches occur pattern note sort names including ch consistent types definition 
safe process output input actions agreement channel capacities stated definition 
course input actions sense require consistency condition input channel turn consistent capacity 
definition safety 
annotated closed process 
safe name ch 

suppose consistent 
guarded summation summand pattern consistent 
theorem type safety 
annotated closed process suppose ok safe 
subject reduction relies lemmas 
lemma subtyping 
lemma matching 
closed message 
match tpm dom 
lemma substitution 
ok ok theorem subject reduction 
annotated closed process 
ok ok proof induction rules reduction 
interesting rule com 
rule ai ai match 
prove ok ai ai ok deduce ok implies ch ai ai ok deduce abs 
rule tm abs infer tpm ok lemma matching match tpm dom lemma subtyping 
ok lemma substitution ok corollary run time safety 
closed annotated process 
ok safe 
dynamic abstractions satisfactory cases static typing scenario appropriate situations little known advance actual types data received network 
example directory services 
suppose program online directory services 
request service type directory lookup catalog respond sending channel type ch reply channel 
reply channel fixed statically capacity ch channel 
client receives name channel mechanism cast runtime generic type subtype ch means going static typing 
reply channel provided clients proper capacity situation get better 
consider syntactic sugar sake readability request req td ch tr lookup lookup function type td type descriptors type channels ch 
clear capacity tr return channel variable assigned 
choice process typed tr ch transport channel 
client call service request req capacity ch typed ch ch ch ch subtype ch tr ch ch 
ignoring static vs dynamic issue types passed explicitly form type encoding xml comes play unsatisfactory level abstraction 
shall see dynamic abstractions solve problems 
scenario illustrated example motivates extension calculus preceding sections form dynamic abstraction 
main difference ordinary abstractions type checking pattern variables moved run time 
reflected additional communication rule explicitly invokes type checking 
describe necessary extensions syntax semantics 
extend syntactic category abstractions dynamic abstraction dom 
range dynamic abstractions abstractions 
add new reduction rule com match dom ai ai add new type checking rule 
need additional notation 
write dom dom dom consistent type 
tm abs tpm ok abs fv abstraction free 
existence common consistent subtype ensures form dynamic consistency detailed 
discuss extension run time safety 
safety property needs extended inputs formed dynamic abstractions 
stronger form pattern consistency needed 
definition dynamic consistency 
annotated pattern fv dom dynamically consistent message match dom 
definition dynamic safety 
annotated closed process 
dynamically safe name ch conditions definition hold condition true suppose consistent 
guarded summation summand annotated pattern dynamically consistent 
theorem run time dynamic safety 
annotated closed process extended language 
ok dynamically safe 
example directory services continued 
consider directory services 
clients request service type sending message channel discovery request directory update catalog new service channel publish 
request discovery contain type information allow directory select service type subtyping account 
types passed explicitly 
pass dynamic abstraction selection behalf client return result back client private channel 
catalog maintained channel cat local directory 
directory process defined follows capacities assumed discovery ch ch abs publish cat ch ch 
directory cat cat ci publish ch discovery ch cat abs cat note ch abs type abstractions consume channel 
client wants publish new service accepts messages type new channel ch publish 
client wants retrieve service type subtype discovery ch ch 
suppose ch ch 
assuming typed ch easily checked global system directory typed 
reality solution run security problems directory executes blindly abstraction received clients cat 
services authenticated clients published 
avoid problems encryption authenticate abstractions published services 
rely encoding encryption primitives described section assume client cj shares secret key directory 
table associating clients identifiers keys maintained channel table local directory secure 
assume identifiers id basic type identifier keys names sort key enc type messages fix capacities cat ch ch table ch id identifier key key publish ch service id identifier channel enc ch discovery ch service id identifier abstr enc ch abs 
process cat keys cat ci table id id key client may rewritten 
publish service id identifier channel zc enc ch table id key xk key case zc ch discovery service id identifier za enc ch table id key xk key case za ch publish service id id channel xk cat abs abs xk cat discovery service id id abstr ch ch 
suppose ch ch ch assume typed appropriate contexts 
global system purpose example extend encoding typed calculus ch case ch 
ps typed 
attacker may intercept messages publish discovery may learn identifiers clients secret shared keys 
consequence publish unauthorized services run unauthorized abstractions 
related xpi type system extended directions 
presently considering types guarantee responsiveness services 
responsive service invoked eventually responds return address possibly collaborating services equally responsive 
extension lines sangiorgi uniform 
system augmented primitives managing quality service terms response time 
number proposals aim integrating xml processing primitives context traditional statically typed languages logics 
related xduce typed functional languages xml document processing 
xpi list representation documents draws inspiration 
tql logic query language xml spatial logic ambient calculus 
languages support query primitives sophisticated xpi patterns issues raised communication code name mobility main focus course absent 
early works aiming integration xml process calculi vice versa 
xd calculus describing interaction data processes distributed locations focused process migration communication 
type system provided 
iota concurrent xml scripting language home area networking 
relies syntactic subtyping xpi characterized different approach xml typing 
fact iota type system ensures formedness xml documents stronger validity considered 
roughly contemporary goals similar 
language duce features asynchronous communication code name mobility 
similarly xduce duce pattern matching embodies built type checks may expensive run time 
language basically calculus enriched rich form semantic subtyping pattern matching 
code mobility addressed 
pattern matching similarly duce performs type checks messages 
contrast xpi static type checks plain pattern matching suffice types pattern variables checked statically channel capacities 
confine dynamic type checking dynamic abstractions refined typing information incoming messages available channels capacity 
type systems guarantee form absence deadlock presupposes basic values appear patterns 
xpi thought important allow basic values patterns expressiveness reasons crucial encoding spi calculus section 

abadi gordon 
calculus cryptographic protocols spi calculus 
information computation academic press 

andrews curbera thatte 
business process execution language web 
ifr sap com bpel ws 

benzaken castagna frisch 
xml centric general purpose language 
proceedings acm international conference functional programming 

bierman sewell 
iota concurrent xml scripting language applications home area networking 
technical report university cambridge computer laboratory 

biztalk server home 
www microsoft com biztalk 

meredith 
contracts types 
communication acm october 

boreale 
expressiveness internal mobility name passing calculi 
theoretical computer science 

brown laneve meredith 
duce process calculus native xml datatypes 
unpublished 


cardelli ghelli 
tql query language data ambient logic 
mathematical structures computer science 

cardelli gordon 
mobile ambients 
theoretical computer science 

castagna de nicola 
semantic subtyping calculus 
unpublished 


christensen curbera meredith weerawarana 
web services description language 
note 
www org tr note wsdl 

fallside 
xml schema part primer 
recommendation 
www org tr rec xmlschema 

gardner maffeis 
modeling dynamic web data 
proceedings dbpl volume lncs 
springer 

hosoya pierce 
regular expression pattern matching xml 
journal functional programming 

hosoya pierce 
xduce statically typed xml processing language 
proceedings acm transaction internet technology 


locality asynchronous name passing calculi 
proceedings fossacs volume lncs pages 
springer 

milner 
polyadic calculus tutorial 
technical report ecs lfcs lfcs dept computer science edinburgh university 

milner parrow walker 
calculus mobile processes part ii 
information computation 

pierce sangiorgi 
typing subtyping mobile process 
mathematical structures computer science 

sangiorgi 
name discipline uniform 
theoretical computer science 

sangiorgi milner 
barbed bisimulation 
proc 
concur lncs springer 

web services activity web site 
www org ws 
