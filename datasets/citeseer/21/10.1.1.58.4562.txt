supporting user programming context aware applications anind dey tim sohn anind intel research net cs berkeley edu emergence context aware applications take account context shown ability rich interaction surrounding environment 
applications developed proliferation context aware applications inhibited lack programming support rapidly develop 
currently develop context aware application developers required design implement application scratch requiring write code directly interacting devices toolkit hides lot device details 
low level toolkit support acquiring context experienced developers required write large amount code develop relatively simple applications 
order ubiquitous computing applications superset contextaware applications truly ubiquitous things need occur 
applications easier design prototype test supporting faster iterations design prototype evaluation cycle 
second designers users need empowered build applications 
empowering designers allow people superior creative skills build innovative applications having expert programmers 
empowering users allow users build applications customized appropriate 
leaving control systems hands programmers live users control 
previous research looked making easier programmers build context aware applications context toolkit removed need deal underlying details sensors similar way graphical user interface toolkits removed need deal low level details building interfaces 
eased burden programmers remove burden certainly open space designers users way systems agentsheets stick notes 
issues concentrating 
initial implementation visual environment supporting user prototyping ideas user prototyping environments 
visual prototyping icap system icap intermediate layer low level toolkits users providing powerful tool developing interesting complex context aware applications allowing developers prototype applications writing code 
context aware application typically consists infrastructure capture context rules governing application respond changes context 
icap informal pen tool allows users quickly define input devices collect context output devices support response create application rules test rules interacting devices run mode 
behavior created devices simulated tool mapped actual devices 
built icap java sdk version top satin toolkit building informal pen interaction systems 
icap interface icap window main areas see 
left tabbed window repository user defined inputs outputs rules 
input output components associated graphical icons dragged center area construct conditional rule statement 

icap user interface example rule uses sheets 
center area contains elements conditional rule statement inherent context aware applications 
example rule john office pm temperature degrees jane bedroom temperature degrees turn heater house 
left side represents portion rule conditional split sheets 
inputs single sheet related conjunction multiple sheets related disjunction 
right side area represents portion rule condition 
disjunction different outputs rare single output sheet currently supported 
implemented pane myers matching scheme allow users visually specify boolean logic rule 
traditional pull menus executing commands pie menus better support pen interaction 
addition support gestures issuing common commands cut copy paste inputs outputs 
interaction icap involves specifying inputs outputs elements construct application rules testing entire set rules run mode 
creating inputs outputs input output component icap associated graphical icon 
icons sketches drawn user creation component 
icon colored differently depending input output device 
repository window pie menu supports creation inputs 
input contains suffix degrees celsius temperature type integer string categories primary types context activity identity location time 
input potential values provided range list 
outputs created manner inputs contain different parameters specify 
output binary gradient device 
default number levels gradient device inclusive 
addition categories output device associated corresponding human senses sight sound smell taste touch 
constructing rules rules constructed dragging dropping inputs outputs sheets rule 
example user interested temperature sensor define temperature input drag corresponding icon respective sheet 
dragging corresponding icon user needs setup certain parameters conditions governing behavior input 
temperature sensor user may want know temperature degrees possibly degrees 
allow user specify conjunction conditions operators equal greater equal equal 
multiple condition sets defined related disjunction 
evaluating application number rules defined entire rule set tested icap engine run mode 
engine set simulate context aware environment conjunction real context aware environment 
users interact engine change value defined inputs evaluate behavior rules tested 
engine users able quickly design test applications having create entire infrastructure collecting simulating context writing code 
prototyping environments focused attention visual environment supporting users designers building context aware applications ideas prototyping environments 
context aware applications focused physical phenomena prototyping environments exist outside graphical world physical world 
idea environment create physical representations graphical icons 
physical representations detailed familiar graphical icons leverage known benefits tangible user interfaces 
prototyping environment similar icap rules constructed basic input output elements 
believe elements appropriate physically applications implementing environment test hypothesis 
idea physically context aware prototyping environment allow users create rules acting behaving naturally 
commonly known programming demonstration 
create rule turn light user entered room user enter room turn light 
number training examples necessary greater number rule complexity increases underlying learning system understand rule 
implementation environment complex requiring instrumentation user environment sophisticated learning system 
requirement necessary executing context aware application burden 
need second balanced advantage natural programming user 
directions received informal feedback local designers context aware systems planning conduct formal study icap number real users see features improve interaction system 
goal enable designers users ability create modify context aware applications giving power programmers enjoy today 
gain experience icap look building physically prototyping environments 

cypher eager programming repetitive tasks example proceedings chi pp 



dey salber abowd conceptual framework toolkit supporting rapid prototyping context aware applications human computer interaction journal pp 



hong landay satin toolkit informal ink applications proceedings user interface software technology pp 



ishii ullmer tangible bits seamless interfaces people bits atoms 
proceedings chi pp 



mozer neural network house environment adapts inhabitants proceedings aaai spring symposium intelligent environments pp 



pane myers tabular textual methods selecting objects group proceedings international symposium visual languages pp 



pascoe stick note architecture extending interface user proceedings intelligent user interfaces pp 



repenning creating user interfaces agentsheets proceedings symposium applied computing pp 


