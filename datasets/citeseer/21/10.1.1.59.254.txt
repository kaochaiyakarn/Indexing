distributed parallel databases springer science business media manufactured netherlands 
facilitating rapid development scalable orchestration composite web services benatallah cse unsw edu au school computer science engineering university new south wales sydney nsw australia dumas dumas qut edu au centre information technology innovation queensland university technology gpo box brisbane qld australia quan sheng cse unsw edu au school computer science engineering university new south wales sydney nsw australia recommended bouguettaya 
development new web services composition existing ones gained considerable momentum means realise business business collaborations 
unfortunately services developed ad hoc fashion manifold technologies standards connecting coordinating order build composite services delicate time consuming task 
describe design implementation system services composed model driven approach resulting composite services orchestrated peer peer paradigm 
system provides tools specifying composite services statecharts data conversion rules multi attribute provider selection policies 
specifications interpreted software components interact peer peer way coordinate execution composite service 
report results experimental evaluation showing relative advantages peer peer approach respect centralised 
keywords web service web service composition web service orchestration dynamic provider selection peer peer interaction statechart 
web services gaining considerable momentum means architect implement integrated enterprise applications business business collaborations government systems 
web service essentially semantically defined abstraction set computational physical activities involving number resources intended fulfill customer need business requirement 
web service allows applications services programmatically interact example research partly supported australian research council arc discovery number dp 
correspondence addressed 
benatallah dumas sheng information sources application programs business processes 
example web service flight booking system accessible soap 
web services composed context inter organisational business processes leading composite web services 
composite services allow organisations form alliances outsource functionalities provide shops customers 
example composite service travel booking system integrating flight booking accommodation booking travel insurance car rental web services 
aim reported enhance fundamental understanding facilitate rapid scalable composition web services 
specifically addresses key issues related service composition rapid composition part web services composition widely understood 
technology part compose web services appropriate kept pace growth volatility available opportunities 
development integrated web services largely ad hoc time consuming requiring considerable effort low level programming 
approach hardly applicable volatility size web 
agile approaches model driven service composition required 
adaptation large dynamic environments set services composed may large continuously changing 
consequently approaches development composite service requires understanding underlying services inappropriate 
divide conquer approach adopted services addressing similar customer needs substitutable services grouped groups take responsibilities service composition 
distributed orchestration orchestration composite services existing techniques usually centralised participating services distributed autonomous 
centralised orchestration model drawbacks respect scalability availability 
highly dynamic distributed nature web services believe novel techniques involving peer peer orchestration services increasingly attractive 
peer peer execution model distributed service components similar capacity collaborate directly need establish hierarchical relationship 
peer peer computing gaining considerable momentum naturally exploits distributed nature internet 
self serv system described addresses issues providing middleware tool support facilitating composition orchestration web services 
self serv web services composed model driven approach resulting composite services executed decentralised way dynamic environment 
salient features contributions self serv language process composition web services statecharts widely formalism area reactive systems emerging standard process modeling integrated unified modeling language uml 
statecharts support expression control flow dependencies branching development orchestration composite services merging concurrency provide implicit style expressing data flow dependencies global variables 
concept service community provides means compose potentially large number services flexible manner 
service communities essentially containers substitutable services 
provide descriptions desired services providing flight booking interfaces referring actual provider 
actual providers register community interest offer desired service 
run time community responsible selecting service offer best fits particular user profile specific situation 
peer peer orchestration model responsibility coordinating execution composite service distributed software components called coordinators 
coordinators attached involved service 
charge initiating controlling monitoring associated services collaborating peers orchestrate service execution 
knowledge required runtime coordinators composite service location peers routing policies statically extracted service statechart represented tabular form 
way coordinators need implement complex scheduling algorithm 
rest organised follows 
section describes self serv approach service composition specification control flow data flow selection policies 
section discusses peer peer orchestration approach analytically compares centralised 
section describes system architecture implementation self serv 
section describes experimental setup deployment execution costs peer peer approach evaluated compared centralised 
section provides overview related section draws 

service composition model self serv distinguishes types services elementary services composite services service communities 
service access point application rely web service fulfill user requests 
self serv system assumed elementary service provides programmatic interface soap wsdl 
exclude possibility self serv integrate legacy applications written corba 
applications composed self serv appropriate adapters developed 
composite service umbrella structure brings composite elementary services collaborate implement set operations 
services brought composite service referred component services 
composite service travel preparation service integrating services booking flights booking hotels searching attractions concept service community solution problem composing potentially large number dynamic web services 
community describes capabilities desired service referring actual web service providers 
words community benatallah dumas sheng defines request service abstraction underlying providers 
order accessible communities pre existing web services register 
services leave reinstate communities time 
runtime community receives request executing operation selects current members delegates request 
elementary composite community web service specified identifier url set attributes operations 
attributes service provide information useful service potential consumers public key certificates 
consider specification richer abstractions service conversations 
details service conversation support approach refer reader 

community services community aggregator service offers unified interface 
intended means support composition potentially large number dynamic web services 
description community contains set operations interact community underlying members 
operations described referring definitions local services members 

service registration 
registration service community requires specification mappings operations service community 
example mapping source target operation mappings search flight search ticket operation fbs book flight book ticket example flight resp book flight ofthe community flight bookings mapped operation search ticket resp book ticket service 
may concern subset operations community 
web services flexibility register operations provide 
instance bookings provides operations searching search flight buying book flight flight tickets 
web service provides operations register operation provides 
service register communities 
community registered community 
example web services pacific registered community flight bookings registered travel arrangements 

multi attribute service selection policies 
community associated scoring service interprets selection policy 
policy specifies preferences development orchestration composite services services community 
consists multi attribute utility function form wi sa scoring function value attribute service returns score positive integer value 
sa set selection attributes 
wi weight assigned attribute scoring service computes weighted sum service attribute scores weight property selection attribute 
selects service produces higher score multi attribute utility function 
selection attributes belong categories advertised provider supplied community supplied 
advertised attributes attributes service provider available registration time service member community 
example service provider may advertise expected duration operation invocation 
provider supplied attributes available service providers request 
instance price product defined provider supplied attribute 
community supplied attributes attributes derived community level past execution logs 
instance values service quality attributes reliability availability estimated past execution logs 
self serv supports predefined set generic attributes allows developers introduce new attributes 
table lists predefined attributes corresponding scoring functions 
scoring function provided selection attribute 
simplicity assume value scoring function scaled interval higher value indicates better quality 
instance scoring function associated duration ed short op op higher execution duration lower score 
noted method table 
service quality attributes 
quality attribute quality functions execution price op represents amount money service requestor pay executing operation op service execution duration op measures expected delay seconds request executing operation op sent results received 
reputation measure trustworthiness depends users experiences service reliability probability request correctly processed maximum expected time frame 
availability probability request accessible 
benatallah dumas sheng estimating value community supplied attribute unique set selection attributes 
selection policies provided communities 
consumers customise policies providing weights selection attributes 
community may provide alternative multi attribute utility functions correspond different selection policies 
consumers choose policies depending preferences 
automatic construction attribute scoring functions addressed self serv 
issue fact addressed area preference product recommendation systems 
systems consumers specify preferences questionnaires 
information extracted questionnaires construct attribute scoring functions 
note focus specifying selection policies 
mention aspect sake completeness 
service selection described 

composite services operations composite service expressed compositions operations offered web services statecharts 
choice statecharts language capturing flow operation invocations self serv motivated reasons 
statecharts possess formal semantics essential analysing composite service specifications 
statecharts known supported behaviour modelling notation part unified modeling language uml 
furthermore statecharts offer control flow constructs existing process description languages sequence branching concurrent threads cycles 
dumas ter hofstede show suitable expressing typical control flow dependencies 
specifically shown statecharts capture relatively high number workflow patterns identified 
process modelling languages languages petri nets process algebra transaction logic statecharts relative advantages drawbacks 
particular statecharts provide direct support modelling called multiple instances patterns situations multiple copies activity executed simultaneously copies need synchronize completion 
characteristic shared proposals area business process execution language web services bpel ws currently emerging implementation level standard area web service composition 
case fundamental ideas approach peer peer orchestration late service selection communities applied process modelling languages statecharts algorithms composite service orchestration differ depending language chosen 

overview statecharts 
statechart states transitions 
transitions labeled eca event condition action rules 
occurrence event fires transition machine source state transition ii type event occurrence matches event description attached transition iii condition development orchestration composite services transition holds 
transition fires action part executed target state entered 
event condition action parts transition optional 
transition event said 
states basic compound 
self serv basic state corresponds invocation service operation elementary service community composite service 
accordingly basic state labelled invocation service operation 
state entered invocation performed 
state normally exited transitions execution induced invocation completed 
state outgoing transitions labeled events occurrence events causes state exited ongoing execution cancelled 
compound states provide mechanism nesting statecharts inside larger statechart 
types compound states states 
contains arbitrary statechart nested inside executed compound state entered 
state hand contains statecharts separated dashed lines executed concurrently compound state entered 
statecharts contained state usually called component orthogonal component choose term concurrent region avoid confusion term component service introduced earlier 
origin terms state state explained follows 
states statechart contained state substates state related exclusive relationship sense state equivalent exactly substates 
state equivalent concurrent regions contained state 
operational perspective compound state entered initial state statechart nested active 
execution compound state considered completed reached final state 
initial states denoted filled circles final states denoted concentric circles 

data flow conversion 
operation composite service described input parameters output parameters consumed produced events statechart glueing elements 
input output parameters mapped variables statechart referenced conditions actions statechart 
similarly consumed events appear event parts statechart transitions produced events generated actions transitions 
statechart contains set invocations component services 
invocations described name service name operation expression compute effective input parameters variables statechart outputs operation assigned 
data flow states statechart specified variables 
variable statechart composite service operation input parameter composite service operation output parameter composite service operation internal local variable 
value internal variable may obtained output service invocation mentioned ii requested user execution composite service iii derived input parameters benatallah dumas sheng composite service operation internal variables query 
cater cases adopt syntax invoking service operations qn vn semantics expression invocation service input parameters provided queries qn outputs invocation assigned variables vn 
qi simply variable name query 
self serv adopts xpath query language 
cater second third cases self serv recognizes action parts statechart types expressions user value internal variable supplied user ii value result 

example 
contains statecharts composite services complete travel services cts intl travel arrangements service 
invoked 
statechart composed state search attractions performed parallel bookings flight accommodation 
threads complete car rental booking performed major attraction far booked accommodation 
table describes signature cts signatures services invokes 
describe signatures services notations cts denotes invocation operation provided 

travel solution composite service 
development orchestration composite services table 
signatures operation provided cts signatures service operations invokes 
cts date date date string destination string name float crs booking string city string name date date float price abs booking string city string name date date int float price string city attractions booking date date date string destination string name date float price booking date date date string destination string name date float keyword indicates parameter passed value 
instance date indicates parameter type date passed value 
keyword indicates parameter passed variable 
example float means service operation returns value value assigned variable place parameter 
table details invocations states composite service cts 
row left column table contains name state table 
table invocations cts composite service operation 
state invocation destination attractions dfb booking destination name ita destination name ab abs booking destination name cr crs destination name benatallah dumas sheng right column provides name service operation invoked state entered followed effective parameters 
variables appearing associated table input parameters cts destination internal variables 
internal variables involved example store outputs component services invocations 
addition values internal variables input parameters component services invocations 
example store outputs invocation operation booking provide value input parameter booking booking 
statechart features conditions transitions 
conditions modeled calls boolean functions take parameters queries involving input parameters composite service internal variables 
example condition domestic destination function call parameter directly obtained inputs service cts 
near major attraction accommodation function call parameters values internal variables 
shown statechart clarity reasons value attraction derived value xml document xpath expression 
shown statechart fact value internal input parameter booking requested user runtime just flight booking completed 
situation expressed user 

peer peer orchestration section starts overview illustration basic concepts service execution model self serv 
overview illustration formal description concepts algorithms 

overview execution model self serv idea state st appearing composite service specification represented state coordinator responsible receiving notifications completion state coordinators determining notifications state st entered 
notifications completion include relevant data items values variables gathered previous states visited execution 
invoking service operation labelling st preconditions entering st met 
invocation done sending message service waiting reply 
completion service execution started previous step notifying completion coordinators states may need entered 
development orchestration composite services notifications completion contain data items need passed state coordinators 
state st active receiving notifications external events cancellation determining st exited due event occurrences 
state coordinator interrupt ongoing service execution send notifications completion coordinators states potentially need entered 
user input needed order determine value variable state requesting value initial coordinator perform necessary user interaction 
essence coordinator state lightweight scheduler determines state entered done state exited 
knowledge needed coordinator order answer questions runtime statically extracted statechart describing composite service operation represented form routing tables detailed 
composite service execution orchestrated peer peer message exchanges coordinators states service description message exchanges coordinators component services 
messages exchanged coordinators purpose notifying state may entered called control flow notifications 
flow notification sent coordinator coordinator expresses fact execution state represented completed believes state represented needs entered 
notification message contains date values internal variables statechart needs transmit 
onthe hand messages exchanged state coordinators component services called service invocations completions 
service invocations performed soap service self serv elementary composite community provides soap entry point 
initial coordinator composite service special type coordinator acts entry point service 
composite service invoked initial coordinator sends control flow notification coordinators states need entered place 
point execution composite service orchestrated peer peer interactions state coordinators 
initial coordinator receives back control flow notifications indicating execution service instance terminated 
initial coordinator return completion message invoker 
addition initial coordinator composite service responsible detecting handling failures processing external events 
specifically initial coordinator receives processes failure notifications issued state coordinators controlflow notification needs sent delivered retries 
initial coordinator detects timeouts may indicate composite service execution stalled node 
timeouts occur initial coordinator identifies point failure selects alternative service possible notifies failure invoker 
external events directed instance composite service benatallah dumas sheng 
interactions coordinators component services execution 
suspending execution handled initial coordinator forwards events appropriate state coordinators 

orchestration example diagram shows messages exchanged coordinators component services particular execution service cts see 
layout arrows indicate type message control flow notification service invocation result explained legend 
numbers labelling arrows capture temporal relationships messages 
instance message sent message sent message 
messages exchanged part concurrent threads 
case messages serial number followed character 
instance messages starting sent concurrent threads 
messages sent thread identified serial numbers thread 
instance message sequential messages exchanged thread 
execution diagram starts user application invokes service cts initial coordinator message 
assuming trip international initial coordinator cts sends control flow notification coordinators ita message coordinator message 
coordinators trigger respectively 
returns output coordinator sends control flow notification initial coordinator cts coordinator cr possible determine major attraction near accommodation accommodation booked done separate concurrent thread 
initial coordinator starts execution composite service sending control flow notification coordinator ifb message invokes 
execution continues course eventually termination message sent initial coordinator 
service returns result coordinator ita sends notification coordinator ab 
development orchestration composite services coordinator sends notifications initial coordinator coordinator major attraction accommodation evaluated point time 
coordinator cr initial coordinator cts evaluate major attraction accommodation condition true coordinator cr invokes service crs messages 
invocation completed notification sent initial coordinator execution completed 

preconditions postprocessing actions extracting knowledge required state coordinator statechart implementing composite service operation involves answering questions preconditions entering state 
source states transitions leading state conditions need satisfied transition taken 
execution state completed successfully signal states may need entered 
process coordinator notifies state exited relevant peer coordinators called postprocessing 
behavior state coordinator captured sets set preconditions state entered preconditions met ii set postprocessing actions indicating coordinators need notified state exited 
preferably sets preconditions postprocessing actions defined way ensure minimal communication overhead 
words state exited states potentially need entered notified 
definitions formalize meant state potentially needed entered 
order identify states accessible single step introduce concept compound transition 
intuitively compound transition path list linked transitions going basic state basic state passing basic state 
definition compound transition 
compound transition ct sequence transitions tn belonging statechart source basic state target tn state target ti isthe final state region belonging compound state source ti source ti isthe initial state region belonging compound state target ti 
benatallah dumas sheng conditions ct said connect source target tn source ct source target ct target tn 
condition part ct noted cond ct conjunction conditions labelling tn 
example compound transition elements going state state cr going ab cr 
cases condition compound transition true near major attraction accommodation 
state exited states potentially need entered target compound transition condition part true ii condition part fully evaluated part evaluated true 
definition minimal postprocessing action state 
minimal postprocessing table state st set rules form st exists compound source ct st target ct st conjuncts conjuncts cond ct conjuncts cn cn 
conjuncts conjuncts cond ct elements conjuncts conds ct conjuncts exactly evaluated time state st exited 
stands set difference operator 
example postprocessing true notify cr true notify identifier initial coordinator composite service cts 
notice condition near major attraction accommodation evaluated coordinator involves information known accommodation selected done separate concurrent region 
service labelling state completes execution coordinator state evaluates condition part entries appearing postprocessing table 
entry condition evaluates true sends notification message coordinator state referenced entry 
constraints imposed definition ensure receive notification completion needs entered ii possible determine state st entered 
case decision st entered coordinator st preconditions table defined 
definition minimal preconditions state 
minimal preconditions table state st composite service specification set rules conjunction events form ready st 
event ready st notification completion received coordinator attached conjunction events noted semantics occurrence occurrence registered order occurrence generated 
development orchestration composite services exists compound st conjuncts conjuncts cond ct conditions care exactly evaluated coordinator respect preconditions ab ready ita true ready dfb true meaning entered message received coordinator 
similarly preconditions cr ready ab ready near major attraction accommodation 
rule preconditions table triggered event occurrence matches event part rule rule condition evaluates true state st entered service labels invoked coordinator 
third item definition ensures coordinator st evaluate conditions previously evaluated coordinators referenced event part rule 

routing tables generation describe turn algorithms generating postprocessing preconditions tables state 
sake simplicity space reasons restrict presentation case transitions labeled conditions event action part 
discuss transitions labeled user defined events actions accommodated 

actions generation 
order derive postprocessing table state outgoing transitions analyzed postprocessing actions generated 
algorithm generating postprocessing table state see relies auxiliary algorithm 
algorithm generation postprocessing actions 
benatallah dumas sheng takes input transition returns set postprocessing actions need undertaken taken 
discuss outgoing transition generate set postprocessing actions 
simplest case transition leads basic state target labeled condition cond 
postprocessing action cond notify target included postprocessing table meaning true notification sent coordinator 
outgoing transition points compound state cst postprocessing action generated initial transitions cst 
condition labelling added conjunct condition guarding postprocessing actions true actions undertaken 
process carried recursively initial transitions cst points compound state cst postprocessing action generated initial transition cst 
outgoing transition points final state compound state cst outgoing transitions cst considered turn postprocessing actions generated 
emanating case state state 
case condition included conjunct guards postprocessing actions generated inthe case condition labelling included guards postprocessing actions generated evaluation condition may require information available st exited 
example case condition attractions far accommodation appear postprocessing table evaluated exited region concurrent 
outgoing final state composite service postprocessing action generated transition involve initial coordinator composite service 
words transition taken control flow notification sent initial coordinator 

preconditions generation 
preconditions table state generated determining incoming transitions state conditions met transition taken 
function precond st see computes preconditions state st written terms auxiliary computes preconditions 
distinguishes cases source transition basic state initial state state anand state inthe case precondition transition source state exited condition transition taken 
second case transition stems initial transition preconditions identical preconditions entering superstate oft contain condition transition conjunct 
notice superstate topmost state statechart tis transition composite development orchestration composite services 
algorithm generation preconditions 
service taken composite service initial coordinator sends order execute service 
case transition stems compound state cst treated recursively applying final transitions merging resulting preconditions tables 
case state merging simple set union 
case anand state concurrent region treated state preconditions tables obtained concurrent region merged cartesian product meaning state exited final transitions concurrent regions taken 
proven structural induction tables generated proc fulfill conditions definition definition respectively 
follows runtime control flow message sent coordinator coordinator compound transition state ofc ofc state needs entered impossible determine state ofc needs entered 
noted changes composite services remove state statechart composite service considered 
authors area change management integrated services 
benatallah dumas sheng algorithms assume transitions statechart event action part conditions considered 
reality statechart transitions labelled events may interrupt execution service invocation labelling source state actions may manipulate variables statechart 
order accommodate transitions events algorithm requires modifications 
specifically needs generate rules potentially event part addition compulsory condition action parts 
coordinator receives event occurrence sent initial coordinator checks event occurrence matches event part rules postprocessing table evaluates condition part rule executes required notification actions 
similarly order accommodate transitions actions algorithm computing preconditions state compute actions executed state entered 
done modifying algorithm precond sothat postprocessing rules generates action part addition event condition part 

analysis centralised orchestration orchestration approach coordinator state placed machine service invoked control flow notification potentially entails physical message exchange message exchange different physical machines 
hand invocation component service involve physical message exchange 
practice coordinator component service invokes located separate machines case message coordinator component service entails physical message exchange 
furthermore coordinators placed physical machine control flow notification exchanged coordinators entail physical message exchange 
extreme case coordinators placed physical machine 
subsequently call orchestration approach centralised set coordinators placed single physical machine seen forming central scheduler 
sequel compare centralised approaches terms physical message exchanges 
specifically estimate maximum number physical message exchanges required composite service execution terms number invocations component services involved execution 
physical message exchanges result control flow notifications invocations component services 
centralised approach 
worst case number physical message exchanges required execution composite service involving invocations component services approach invocations component services entail physical message exchanges control flow notifications 
invocation development orchestration composite services component service requires messages coordinator component service component service back coordinator 
approach 
worst case number physical message exchanges required execution composite service involving invocations component services bounded number basic states corresponding statechart 
reasoning bound 
note control flow notifications require physical message exchanges invocations component services require coordinator performs invocation located machine component service invoked 
note time basic state exited control flow notifications sent coordinator state fellow coordinators initial coordinator 
invocation component service completed corresponding state exited physical message exchanges entailed control flow notifications take place 
composite service execution involves invocations component services physical message exchanges take place 
composite service begins execution messages sent initial coordinator coordinators 
worst case number physical message exchanges 
tight bound evidenced example 
example time states labelled sm exited corresponding coordinator send control flow notification coordinators initial coordinator 
worst case coordinators able fully evaluate conditions conditions may involve data item invocations sm sothat coordinator send data item collects coordinators evaluate conditions data items required 
invocation component service followed control flow notifications leading total physical message exchanges 
added messages coordinator composite service needs send coordinators states labelled sm yields exactly bound 
extreme case 
practice provided states 
worst case scenario orchestration approach 
benatallah dumas sheng followed conditional branches expect approach requires physical message exchanges centralised 

implementation self serv self serv system consists service composition environment called service manager defining deploying composite services communities runtime environment acts middleware orchestrating composite services performing dynamic provider selection :10.1.1.13.5710
service composition environment runtime environment implemented java 
services registered self serv form called pool services composed form new services see registered added pool 
services provide soap programmatic interface 
elementary services typically wrap application programs workflows databases 
architecture self serv prototype 
development orchestration composite services 
service composition environment service composition environment consists set integrated tools allow service developers users create execute services 
composed component tools service discovery engine service builder service 
service discovery engine 
service discovery engine facilitates advertisement location services see 
implemented soap wsdl uddi 
service registration discovery invocation implemented soap calls 
service registers discovery engine uddi soap request containing service description wsdl sent uddi registry 
service registered uddi registry located sending uddi soap request business name service type uddi registry 
discovery engine implemented ibm web services toolkit 
provides components tools web service development uddi wsdl soap 
particular uddi java api uddi access private uddi registry hosted self serv platform wsdl generation tool creating wsdl documents soap service descriptors required 
service discovery engine 
benatallah dumas sheng discovery engine 
details implementation discovery engine 
service builder 
service builder assists developers creation maintenance communities composite services 
provides editor describing statechart diagram composite service operation creating configuring service communities importing operations existing self serv services composite services communities 
search browse facility offered locate component services service discovery engine import operations states 
service 
service responsible generating precondition postprocessing tables state composite service statechart algorithms section 
input programs implementing algorithms statecharts represented xml documents generated service builder outputs routing tables formatted xml 
tables generated service assists service composer process uploading tables hosts corresponding component services setting initial coordinator composite service 
security issues related uploading tables considered 

runtime environment runtime environment self serv consists classes community coordinator 
classes relatively lightweight infrastructure require standard java libraries compliant xml parser soap server 
current implementation oracle xml parser ibm apache axis 
default xml documents containing routing tables stored plain files need dbms site installation 
administrator decides store documents dbms customize class coordinator accordingly 
class community provides method invoke service operation community 
method invokes scoring service find suitable member handling invocation invokes selected member service 
scoring service java method takes input selection policy queries service descriptions returns identifier members registered community 
descriptions selection attributes represented xml 
class community provides operations managing membership community join quit community 
class hand provides methods invoking operation composite service 
method invoked initial coordinator reads table initial state corresponding statechart sends controlflow notification message coordinators states need entered 
coordinators interact peer peer way coordinators eventually coordinators states exited send control flow development orchestration composite services notifications back initial coordinator 
control flow notifications received outputs service invocation available 
class coordinator provides methods processing generating control flow notifications 
class implements software component container object pool 
container process runs continuously waiting control flow notifications coordinators 
receives message coordinator examines identifier composite service instance message relates proceeds follows identifier composite service instance unknown container time control flow notification related instance received new coordinator object created object access routing tables receiver state indicated message identifier 
task handling notification forwarded newly created object invoking method process notification 
control flow notifications related composite service instance expected arrive subsequently object temporarily added object pool treat arrive 
hand container previous knowledge composite service instance control flow notification relates notification forwarded coordinator object created message related instance received 
object retrieved object pool method process notification invoked object 
object pool dedicated particular composite service instance processes incoming control flow notifications related instance 
keeping track notifications having access relevant preconditions tables object able detect state composite service entered 
coordinator object detects state composite service needs entered sends invocation message service 
corresponding completion message received object polls result parameters service generates control flow notification messages information contained relevant table dispatches messages 
coordinator object longer needed removed pool destroyed garbage collection 

performance evaluation evaluate proposed approach conducted experiments implemented prototype system 
section presents experimental results 
experiment shows cost deploying composite services self serv 
second experiment compares number messages required execute composite services orchestration approach centralised orchestration approach 
experiment shows workload distribution models 
third experiment compares execution time execution models different message sizes 
experiments designed scenario complete travel planning service shown 
conducted experiments cluster pcs running prototype benatallah dumas sheng 
complete travel planning service 
system 
pcs configuration pentium iii mhz gb ram 
pc runs debian linux java standard edition 
machines connected lan mbits sec ethernet cards 
dedicated servers component services 

deployment cost purpose experiment measure deployment cost time required deploy service composite service self serv 
experiment created composite services different number component services recorded time taken deployment composite service 
services created randomly adding states composite 
deployment procedure involved generating precondition postprocessing tables component service uploading tables corresponding host machines 
deployed composite service times computed average deployment time 
table plots time deploying composite service terms number component services 
table shows large composite services deployment speed tends component services second 

number exchanged messages purpose experiment study compare performance orchestration model centralised 
comparison done measuring development orchestration composite services table 
deployment cost composite services 
component service deployment cost second 
component service deployment cost second number physical message exchanges ii distribution workload number messages handled host participant hosts 
implementation centralised approach central scheduler responsible sending receiving messages component services 
central scheduler located machine component services located machines 
physical message exchanges centralised model correspond messages exchanged central scheduler component services 
hand implementation approach coordinator state component service invoked state located machine pair state coordinator component service located separate machine initial coordinator located machine 
physical message exchanges approach correspond messages exchanged initial coordinator state coordinators exchanged state coordinators 
executed counted number messages orchestration models 
note branches composite service possible combinations truth values branching conditions 
table shows results simulations 
table see possible combination model requires physical message exchanges centralised 
example case table flight international customer rent bicycle events need booked customer book taxi messages exchanged centralised model messages exchanged model 
words centralised model needs nearly exchanged messages model 
average number physical message exchanges model centralised 
shows realistic scenarios model require physical message exchanges centralised conjectured section 
measured workload allocation participant hosts hosts components counting number messages received participant host 
shows results case 
cases yielded similar results 
results show centralised model messages distributed evenly 
particular machine hosting central scheduler receives messages messages example 
hand machines receives message 
half messages received central scheduler 
contrast centralised model workload model distributed gracefully machines 
receives message total messages 
experiments consider benatallah dumas sheng table 
number exchanged messages execution 
combination branch conditions branching conditions number messages 
domestic available centralised average 
workload allocation execution 
execution estimate messages handled central scheduler executions run concurrently 
model wrapper receive messages 
result execution model scalable 
development orchestration composite services 
execution time composite 

execution time versus message size aim experiment investigate execution performance centralised execution models different size exchanged messages 
experiment assume size exchanged messages remains service execution 
size messages ranges values message size times computed average execution time 
results case shown 
similar results obtained cases 
see centralised approach execution time change greatly size messages small 
example approach execution time seconds message size seconds message size reaches execution time changes seconds seconds message size grows note size messages increases execution time centralised approach increases sharply approach larger approach 
due reasons 
number exchanged messages approach centralised 
second messages centralised approach need systematically transit central scheduler constitutes bottleneck 

related service composition active area research development 
section examine component middleware web services standards 
look existing service composition approaches 
benatallah dumas sheng 
component middleware component middleware ibm sanfrancisco typically rely distributed object frameworks corba dcom ejb stateof art technologies enterprise application integration ibm mqseries enterprise resource planning suites sap database gateways transaction monitors 
component middleware provides standard data application integration facilities pre built application adapters data transformations messaging services heterogeneous systems supporting uniform access heterogeneous applications 
approach composite services ordering product assembled independently developed components checking inventory delivering goods payment 
composition services realised ad hoc code development 
static ad hoc composition approach hardly scalable large number partners may involved composition loosely coupled possibly dynamic nature web services 
hard coding composition flow definition deployment evolution services difficult time consuming 
component middleware appropriate integration small numbers tightly coupled services stable interfaces 
approach focuses composition deployment potentially large number loosely coupled dynamic services 
component middleware efforts complementary approach 
intra enterprise application developed component middleware wrapped elementary service composed services approach 

web services standards standards aim providing infrastructure support web services interoperability emerged including soap wsdl uddi bpel ws wscl 
provide building blocks service invocation description advertisement discovery orchestration 
soap provides xml protocol exchanging information requesting services 
wsdl xml language describe service operations 
uddi provides registry advertising discovering web services 
bpel ws wscl build wsdl support interactions services 
wscl describe conversations service supports supported operations legal order invocations 
bpel ws describe behavior service terms supported flows operation invocations specify composite services 
application development platforms microsoft net ibm websphere sun bea weblogic integrator provide support web services standards 
standards platforms complementary approach 
approach builds building blocks standards soap uddi extends significant ways 
provide scalable service mediation framework provides high level support defining composite web services involving variable number participants development orchestration composite services resulting composite services enacted decentralised way dynamic environment 
note efforts interaction standards edi rosettanet ebxml provide common building blocks documents business processes semantics syntax message exchanges classes applications 
incorporation interaction standards web service infrastructures enable organisations web services carry conversations standards 

service composition approaches cmi platforms specifying enacting monitoring composite services 
platforms underlying execution model centralised process engine responsible scheduling dispatching controlling execution instances composite service 
contrasts self serv peer peer execution approach 
cmi support dynamic provider selection concept community provided self serv explicitly supported 
concept community self serv stems concept push community sketched 
provide means specifying global view composite service ii multi attribute provider selection policies 
crossflow wise inter organisational workflow management platforms focus inter connecting business processes commerce 
consider important requirements applications dependability external manageability 
differ self serv consider issue multi attribute provider selection dynamic environment providers join leave communities continuously peer peer orchestration process definitions 
cpm supports execution inter organisational business processes peerto peer collaboration set workflow engines representing player process 
major difference cpm self serv cpm number messages exchanged players optimised 
time process terminates task notify players 
process involves tasks players execution requires exchange messages far required shown experiments 
cpm requires players participating inter organisational process deploy full fledged workflow engine cater coordination players self serv coordination entities handled lightweight schedulers state coordinators 
self serv peer peer orchestration model similarities mentor distributed workflow system 
workflow specified state activity chart mentor partitions sub workflows encompassing activities executed entity organisation assuming information statically known 
sub workflows specified statechart 
muth describes optimization techniques reduce number size messages exchanged sub workflows leading weak synchronisation model close different techniques self serv 
benatallah dumas sheng context mentor project consider issue configuring distributed workflow system order meet performance availability constraints minimising system costs 
mentor approach differs self serv applicable assignment activities executing entities known deployment workflow restrictive assumption context service composition providers leave join community alter characteristics offers qos price composite service defined deployed 
adept multi agent platform designed support inter organisational business process definition enactment 
adept workflow recursively decomposed smaller sub workflows leading tree structure similar induced relationship composite services components self serv 
subworkflow adept assigned autonomous agent 
agent responsible workflow needs invoke sub workflow negotiate agent provide 
contrasts self serv selection component service community done evaluation selection policy 
sense adept self serv complement 
fusion framework building managing service portals 
provides description model web service methods web services execution specification language 
optimal execution plan automatically generated requirements specified language 
sense self serv fu sion aim facilitating rapid composition web services 
self serv differs fusion considers peer peer orchestration composite services 
issue deriving optimal execution plan considered self serv self serv supports dynamic service selection notion service community 
daml focuses enhancing descriptions services higher level abstractions constraints operations legal order invocations order capture service behaviour users better understand service execution semantics interact :10.1.1.142.1846
specifically daml aims defining ontologies service description allow software agents reason properties services 
mention web service modeling framework wsmf combines web semantics web service technologies integrated framework 
issues addressed area complementary addressed self serv 

self serv framework supporting model driven development decentralised execution composite web services 
main features self serv approach model composite web services statecharts 
xml code capturing logic composition generated directly resulting models facilitating agile software development approaches 
development orchestration composite services conquer approach manage large amounts services grouping communities communities responsible management membership runtime selection services user profiles 
decentralised execution model providers participating composite service interact peer peer way ensure control data flow dependencies expressed schema composite service respected 
self serv implemented platform provides graphical tools specifying schema composite services ii deploying specifications network iii running instances deployed composite services iv managing communities services 
tools provide environment rapid development testing composite web services 
self serv platform validate feasibility benefits proposal 
particular relatively large composite services specified deployed platform 
results encouraging services nodes complex control data flow dependencies specified hour services components deployed seconds 
addition platform experimentally measure performance peer peer orchestration approach respect centralised approach 
results experiments show peer peer orchestration leads load distribution participants result lower execution times 
handle case component services fails unavailable considering extending composition model integrate transactional semantics group states statechart 
interesting extension reported study self adaptability composite services 
idea history past executions composite service dynamically optimise ongoing execution set parameters time price quality service runtime optimisation service executions self serv done independently node composite service community decides locally members execute service invocation 
global optimisation approach lead better execution respect parameters 
acknowledgments authors marie christine anne ngu nguyen fruitful discussions regarding design self serv 
oi yan mak nathan wong alex yue fai tang murray participation implementation self serv 
notes 
notice definition compound transition adopt slightly different 

source denotes source state transition target denotes target state benatallah dumas sheng 
van der aalst ter hofstede kiepuszewski barros workflow patterns distributed parallel databases vol 
pp 


microsoft ibm universal description discovery integration business web www uddi org 

benatallah casati eds special issue web services distributed parallel databases international journal 

benatallah casati conceptual modeling web services proc 
th international conference advanced information systems caise austria june 

benatallah dumas paik self coordinated self traced composite services dynamic provider selection technical report unsw cse tr school computer science engineering university new south wales may 
available www cse unsw 
edu au ps gz 

benatallah dumas sheng ngu declarative composition peer peer provisioning dynamic web services proc 
th ieee international conference data engineering icde san jose usa pp 


benatallah sheng dumas self serv environment web services composition ieee internet computing vol 
pp 


bussler casati ceri georgakopoulos zsu shan eds proceedings st vldb workshop technologies services cairo egypt may 

casati georgakopoulos shan eds special issue services vldb journal vol 


casati 
shan dynamic adaptive composition services information systems vol 
pp 


chen hsu inter enterprise collaborative business process management proc 
th international conference data engineering icde heidelberg germany ieee computer society april pp 


clark derose xml path language xpath version 

cobb evolution distributed component architectures proc 
th international conference cooperative information systems coopis trento italy sept pp 


curbera goland klein leymann roller thatte weerawarana business process execution language web services dev dev bea com bpel ws jsp 

dogac ed special issue electronic commerce acm sigmod record vol 


dogac ed special section data management issues commerce acm sigmod record vol 


dogac survey comparison business business commerce frameworks acm exchanges vol 
pp 


dogac kurt ebxml infrastructure implementation uddi registries rosettanet pips proc 
acm sigmod international conference management data madison wisconsin usa june 

dumas ter hofstede uml activity diagrams workflow specification language proc 
international conference unified modeling language uml toronto canada oct 

elmagarmid mciver ongoing march digital government ieee computer vol 


fensel bussler web service modeling framework wsmf electronic commerce research applications vol 
pp 


wei weikum performance availability assessment configuration distributed workflow management systems proc 
th international conference extending database technology edbt konstanz germany march pp 

development orchestration composite services 
grefen aberer ludwig crossflow cross organizational workflow management service outsourcing dynamic virtual enterprises special issue infrastructure advanced services bulletin technical committee data engineering vol 


harel naamad statemate semantics statecharts acm transactions software engineering methodology vol 
pp 


ibm toolkit alphaworks ibm com tech 

jennings norman faratin brien autonomous agents business process management journal applied artificial intelligence vol 
pp 


alonso schuldt schuler wise approach electronic commerce journal computer systems science engineering vol 


bouguettaya ouzzani infrastructure government web services ieee internet computing vol 
pp 


muth dittrich weikum centralized workflow specification distributed workflow execution journal intelligent information systems vol 


mcilraith simulation verification automated composition web services proc 
th international world wide web conference www honolulu usa may 

kelly content process integration www com nov 

schuster georgakopoulos cichocki baker modeling composing service process multi enterprise processes proc 
th international conference advanced information systems engineering caise stockholm june 

web services description language wsdl www org wsdl 

shan zhang eds proceedings th international workshop research issues data engineering san jose usa feb 

sheng benatallah dumas mak self serv platform rapid composition web services peer peer environment proc 
th international conference large data bases vldb hong kong china aug 

sheng benatallah stephan mak zhu services uddi self serv proc 
international conference business beijing china may pp 


simple object access protocol soap www org tr soap 

utility decision tree optimization framework adaptive interviewing proc 
th international conference user modelling germany pp 


datta dutta thomas ramamritham navathe fusion system allowing dynamic web service composition automatic execution proc 
ieee international conference commerce cec california usa june pp 


web services conversation language wscl www org tr wscl 

yang garcia molina comparing hybrid peer peer systems proc 
th international conference large data bases vldb roma italy 

zeng benatallah dumas sheng quality driven web services composition proc 
th international world wide web conference www budapest hungary may 

zeng benatallah ngu demand business business integration proc 
th international conference cooperative information systems coopis trento italy sept pp 

