search engine natural language applications michael cafarella department computer science engineering university washington seattle wa cs washington edu modern natural language processing applications utilize search engines locate large numbers web documents compute statistics web corpus 
web search engines designed optimized simple human queries suited support applications 
result applications forced issue millions successive queries resulting unnecessary search engine load slow applications limited scalability 
response introduces bindings engine supports queries containing typed variables string processing functions 
example response query powerful noun return nouns index immediately follow word powerful sorted frequency 
response query cities head nounphrase return list proper nouns city names 
novel neighborhood index enables random disk seeks serial disk reads number non variable terms query 
result yield orders magnitude speedup largescale language processing applications 
main cost modest increase space store index 
report experiments validating claims analyze space time tradeoff scales size index number variable types 
describe application extracts thousands facts web interactive speeds response simple user queries 
categories subject descriptors information systems content analysis indexing information systems information search retrieval data data storage representations general terms algorithms design experimentation performance keywords search engine indexing variables query corpus language information extraction copyright held international world wide web conference committee iw 
distribution papers limited classroom personal 
www may chiba japan 
acm 
oren etzioni department computer science engineering university washington seattle wa etzioni cs washington edu 
motivation modern natural language processing nlp applications perform computations large corpora 
increasing frequency nlp applications web corpus rely queries commercial search engines support computations :10.1.1.24.1965:10.1.1.1.1636
search engines designed optimized answer people queries building blocks nlp applications 
result applications forced issue literally millions queries search engines overload search engines limit speed scalability applications 
response google created google api programmatic queries away google com placed hard quotas number daily queries program issue api 
search engines introduced mechanisms block programmatic queries forcing applications introduce courtesy waits queries limit number queries issue 
having private search engine enable nlp application issue larger number queries quickly efficiency problem 
support application document matches query retrieved random location disk 
number random disk seeks scales linearly number documents retrieved 
index sizes grow number matching documents tend increase 
nlp applications require extraction strings matching particular syntactic semantic types page 
lack nlp type data search engine index means pages fetched processed query time discarded irrelevant 
consider specific nlp applications illustrate sorts computations perform 
consider turney widely pmi ir algorithm 
pmi ir computes pointwise mutual information pmi terms estimating occurrence frequency hit counts returned search engine 
turney pmi ir classify words positive negative computing pmi positive words excellent subtracted pmi negative words poor 
turney applied word classification technique large number adjectives verbs adverbs drawn product reviews order classify reviews positive negative 
approach number search engine queries scales linearly number words clas course may possible distribute load large number machines embodies efficient solution 
limits speed scale pmi ir applications 
second example consider knowitall information extraction system 
inspired hearst early knowitall relies set generic extraction patterns class including extract facts text 
knowitall instantiates patterns names predicates interest class instantiated films sends instantiated portion pattern search engine query phrase query films including order discover pages containing sentences match patterns 
knowitall designed quickly extract large number facts web pmi ir limited number rate search engine queries issue 
general statistical nlp systems perform wide range corpora computations including training parsers building gram models identifying collocations 
database researchers begun corpus statistics order better understand data schema semantics 
requirements large diverse body applications concise set desiderata search engines support nlp applications 
desiderata satisfy broad set computations nlp applications perform corpora need search engine satisfies desiderata support queries contain typed variables powerful noun 
provide facility defining variable types syntactic types verb semantic ones address efficiently assigning types strings index creation time 
support queries contain simple string processing functions variable bindings books head nounphrase 
require random disk seeks correctly answer queries containing variables number concrete terms variables query 
process queries contain concrete terms just efficiently standard search engine 
minimize impact index construction time space 
main contribution fully implemented bindings engine satisfies desiderata introducing query language augmented inverted index called neighbor index efficient algorithm processing queries 
second contribution asymptotic analysis comparing standard search engine see table function head extracts head noun noun phrase function boolean valued function determines argument proper noun 
section 
analysis shows number random disk seeks standard search engine number variables number possible bindings 
number random seeks 
large expect sizable corpus faster standard engine 
standard engine space store index increases linearly number documents indexed 
third contribution set experiments aimed measuring performance practice 
broad range queries orders magnitude faster standard search engine 
query time efficiency paid factor increase index size corresponding increase time 
final contribution enables interactive information extraction users employ simple queries extract large amounts information web interactive speeds 
example person query application word insects receive results shown 
reminder organized follows 
section introduces query language followed description neighbor index query processing algorithm section 
section presents experimental results section sketches different applications capabilities 
conclude related directions 

query language section introduces query language focusing query variables types functions handled 
standard search engine query consists words terms optional logical operators quotation marks indicate phrase query 
extends query language adding variables type 
processes variable returning possible string corpus substituted variable satisfy user query matching type 
call string meets requirements binding variable question 
example query president name clinton return bindings distinct strings type name corpus appearing occurrences president clinton see full query language 
type system provided type name type recognizer find instances appropriate strings corpus 
reasonable types include syntactic categories noun phrases adjectives adverbs semantic categories names addresses phone numbers 
course allow untyped variables simply match adjacent term 
example query strong term return indexed strings right word strong index 
accepts arbitrary set type recognizers set types tailored intended applications index construction time 
types fixed index computed 
query include functions apply binding string return processed version string 
type recognizers set functions supplied system run 
apply functions query time bindings index 
example op op op op near term ph ph ph term ph ph term ph term ph ph term type func ph ph examples president bush verb cities head nounphrase nounphrase capital nounphrase grammar query language 
grammar specifies phrase consist term variables nonconsecutive 
non terminal symbols caps novel operations appear boldface 
term whitespace delimited string corpus 
type member set string types determined index time 
search engine binds items angled brackets specific strings corpus documents 
func binding processor function accepts single string returns modified version string 
stead creating indexed type name create general purpose nounphrase constrain name function returns human names inside binding nounphrase functions convenience query processing 
discussion formulated query language variables non consecutive variables neighboring concrete term 
constrains number positions document successful variable assignment important efficient query processing see section 
possible process variables neighbor concrete terms sheer number bindings means query useful efficiently processable 
chosen exclude language 
common question queries differ near operator 
near takes terms arguments 
terms appear words document document returned search engine 
near find matching documents allowing certain positions text remain unspecified 
think word document text occurs near terms kind wildcard match 
queries powerful near reasons 
queries enforce ordering constraints terms query near enforces proximity 
second near query recover actual values wildcards 
determines terms proximate 
contrast key aspect queries return bindings matching variables query 
queries constrain matching variable bindings type near operator notion type 
describe queries implemented minimize number disk accesses query 

index query processing inverted index allows standard queries processed efficiently billions indexed documents 
term corpus inverted index builds list document position term 
enables fast document finding query time 
section describe standard inverted index insufficient executing queries introduced earlier 
introduce neighbor indexing novel addition inverted index efficiently execute new queries retain advantages inverted index 
standard implementation language applications forced inefficient implementation queries 
systems operate roughly follows query cities nounphrase 
perform traditional search engine query find urls containing non variable terms cities 
url obtain document contents find searched terms cities document text run noun phrase recognizer determine text cities satisfies type requirement return string divide algorithm stages obtaining list urls processing find nounphrase bindings 
stage lookup standard inverted index 
described processing query consists retrieving sorted document list query term stepping parallel find intersection set 
course proximity desired near operator added query language 
standard inverted index term docs docid offset block positions neighbor neighbor pos pos pos pos pos block block block neighbors neighbor str neighbor str neighbor nbrs str nbrs pos block 
pos block docs neighbor block pos offset np left seattle term left seattle term right document docid seattle docid docs detailed structure single term list index 
top levels enclosed bold line consist document information standard inverted index 
index adds information document position pair 
additional structure holds neighbors document position question 
neighbor set consists typed strings immediately left right position 
reading left right neighbor index structure adds offset block irrelevant instances easily skipped number neighbors location series neighbor string pairs 
neighbor value identifies type left right 
string available binding location 
phrase queries examine positions document ensure words appear sequentially 
system reads document list straight start finish list arranged disk single stream 
system require time consuming random disk seeks step single term list 
disk prefetching helpful 
possible large search installations keep substantial portion index memory case system avoid sequential disk reads 
second stage standard algorithm slow fetching document result random disk seek read text 
naturally disk access slow regardless happens locally cached copy remote document server 
neighbor indexing section introduce neighbor index augmented inverted index structure retains advantages standard inverted index allowing access relevant parts corpus text 
depicted 
neighbor index retains structure inverted index 
term corpus index keeps list documents term appears 
documents index keeps list positions term occurs 
neighbor index maintains additional data position 
position keeps list adjacent document text string satisfies target types 
strings call neighbor 
document position left hand righthand neighbor type 
mentioned set types determined set type recognizers applied corpus index construction 
certain types term may position corpus 
types nounphrase start certain places corpus 
position neighbors may include types available 
algorithm processing query break query clauses separated logical operators 
clause consists set elements ee concrete terms variables 
heart algorithm evaluation clause proceeds follows 
ei concrete term create pointer corresponding term lists li initialized document list 
refer current head document list li li 

increment li pointer li lowest lq pointer advances list 
advance term list pointers document non variable elements ei appear remaining documents 
lists exhausted processing clause complete 
refer head position list li li 
concrete terms advance term list pointer li lowest li lq 
term list pointer reaches positions exit loop continue document 
may elements ei variables concrete terms 
ei ei guaranteed concrete term 
ei concrete note li start neighbor block ei contain information indexed strings right li 
examine right hand neighbor desired typeof ei 
ei concrete li start neighbor block ei contains information indexed strings left li 
examine left hand neighbor desired typeof ei 
find bindings variables ei way 
step checked lq elements concrete terms 
check adjacency 
adjacent concrete terms indices check li lj 
adjacent element indices concrete terms variable check li ej lk 
variable element ei fall concrete variables simply check ei non zero 
adjacency test succeeds record query variable bindings continue 
adjacency tests fail simply continue 
inverted index term list processed start finish kept disk contiguous piece 
relevant string variable binding included directly index 
need disk seek fetch source document 
neighbor index avoids need return original corpus consume large amount disk space 
depending variable types available corpus text may folded index times 
conserve space perform simple dictionary lookup compression strings index 
query time index space standard engine table query time index space methods implementing query language 
query time expressed function number disk seeks 
number concrete terms query expect grow small number 
number bindings processing query grow size corpus 
number indexed types number documents indexed 
typical values thousands typical values smaller faster standard engine 
typical values small space cost manageable 
neighbor index reads variable bindings disk sorted source document id secondarily position document 
ordering critical processing intersections separate term lists 
document id ordering probably unhelpful applications 
finds available bindings sorts returning query results 
general facility defining sorting functions bindings 
implementation sort bindings ascending alphanumeric order frequency appearance los angeles sorted higher va 
reasonable sort orders 
example bindings sorted weight indicates trustworthy source document allows sorting arbitrary criterion 
support statistical nlp applications pmi ir associate hit count binding returns 
hit count records number times particular binding appeared index 
important capability discussed section 
asymptotic analysis section provides asymptotic analysis behavior compared standard implementation today 
query time expressed function number random disk seeks dominate processing times 
index space simply number bytes needed store index including corpus 
table shows requires random disk seeks process queries arbitrary number variables standard engine takes 
performance standard search engine queries containing concrete terms 
queries expect large faster 
embodies time space tradeoff 
size index number documents index number variable types 
contrast size standard inverted index 
typical web applications expect billions smaller 
expect index size increase sub linearly elements type occur fraction terms index 
note atomic parts speech noun verb mutually exclusive tagging terms number types double index 
semantic types zip code rare add small space overhead 
neighbor index shows strength query time analysis 
seeks needed find term lists concrete query terms 
contrast standard implementation seeks times perform inverted index lookup fetches document disk bindings 
incur higher storage costs standard method 
standard method inverted index neighbor index grow linearly size number indexed documents 
grow number indexed types additional type increases space index single document 
implementation search engine draws heavily code lucene nutch open source projects 
lucene program produces inverted search indices documents 
nutch search engine including page database crawler scorer components uses lucene indexer 
lucene nutch written java 
type recognizer uses optimized version brill tagger assign part speech tags identifies noun phrases regular expressions tags 

experimental results section experimentally evaluates benefits costs search engine 
source code comes nutch project separate unchanged nutch instance serves benchmark standard search engine experiments 
nutch experiments described refer standard implementation section traditional nutch index 
nutch experiments carried corpus web pages downloaded late august 
ran query processing indexing cluster dual xeon machines local gb disks gb ram 
corpus compute index regular nutch index 
local nutch instance commercial web search engine allows control network latency machine configuration corpus size 
set configuration values exactly nutch 
ran test full fledged information extraction system uses queries comparing standard implementation google api versus 
benefit query time recorded query processing time different queries nutch 
generated queries various patterns nounphrase nounphrase instantiating set classes cities countries films 
query measured time necessary find bindings corpus 
nutch queries fact multiple bindings document possible single seek multiple assume bindings evenly distributed corpus general number seeks grows time process secs total phrase occurrences corpus nutch processing times queries search engine standard implementation nutch 
corpus size hosted locally 
nutch processing times range seconds times range seconds 
straight line linear trend nutch extraction times 
speedup ranges factor factor 
distributed evenly machines cluster 
waited system return answers query submitting 
plots number times query phrase appears corpus versus time required processing query 
shows large improvement 
single query took seconds nutch took seconds 
processing time function number times query appears corpus 
speedup ranges factor factor queries experiments 
speedup correspondingly greater queries returned additional matches due larger index 
page index expect speedups orders magnitude 
nutch case include time spent post retrieval processing recognize particular types 
benefits moving type recognition indexing time 
measurements benefit 
inclusion type recognition time increase nutch query processing time average making speedup greater 
addition testing nutch queries ran full fledged information extraction test knowitall system introduced 
knowitall natural consumer power designed high throughput extraction system routinely exhausts daily queries allotted google api 
created versions knowitall uses standard implementation google api uses 
measurements seconds real time 
num 
extractions google secs secs speedup secs secs speedup secs table time needed find knowitall fact extractions mixture city actor film titles standard implementation google api versus 
column constant seconds real time returns single binding matches query 
size gb nutch compressed corpus nutch uncompressed corpus compressed corpus corpus index comparison storage requirements page index 
nutch index standard inverted index document position information 
index includes types term word corpus nounphrase structures text 
traditional index plus uncompressed text point 
impact knowitall speed shown table 
see relying google knowitall processing time dominated large number queries required courtesy waits queries 
furthermore knowitall processing time increases roughly linearly number extractions finds 
contrast knowitall uses times faster speedup increases number extractions grows 
able return extractions due limited index size experiments pages 
analysis section shows expect speedup increase linearly larger index sizes 
costs engine trades massive speedup query time increase time space costs incurred indexing time 
section measures costs argues manageable 
shows roughly gb necessary hold nutch index web pages corpus run time hours nutch type recognizer indexer time necessary compute nutch index vs time compute index 
cases distributed index computation cluster machines 
gb necessary store compressed nutch corpus 
necessary nutch need find documents relevant query examine non query text documents 
storing corpus locally obviates re downloading pages 
total storage necessary run nutch gb 
space necessary hold corresponding index gb roughly factor 
require copy corpus document text useful binding incorporated neighbor index 
compressed corpus useful traditional search tasks generating query sensitive document summaries include column 
measurements reported types term nounphrase adding additional types worst case double amount space required 
fact expected increase space smaller reasons 
substantial fraction space cost conventional inverted index component fixed add new types 
second new type verb adjective cause store smaller objects noun phrase rarer objects term believe addition types result increase storage requirements practice 
comparison sake uncompressed corpus size 
predicted size index depends factors types indexed frequently type appears effectiveness dictionary lookup compression scheme 
scale roughly amount corpus text 
example includes type term adds entry index term corpus 
essence think neighbor index method rearranging corpus text amenable extraction bind frequently seen extractions query insects 
score extraction number times retrieved extraction phrases 
ings query variables 
surprising size roughly corpus 
shows time needed compute index 
time broken components time run type recognizers time build index 
included types term nounphrase recognizer time includes time run brill tagger check regular expressions tags 
different type recognizers may take varying amounts time execute recognizer single pass corpus total recognizer overhead index time linear number documents 
measurements provide evidence designing search engine support information extraction offers potential substantial speedup query time exchange modest overhead space index construction time 
argued section believe holds broad set nlp applications 

applications previous section showed information extraction system knowitall leverage 
section sketches additional applications illustrate broad applicability capabilities 
interactive information extraction configured application support interactive information extraction response simple user queries 
example response user query insects application returns results shown 
application generates list query term instantiate set generic extraction phrase queries insects nounphrase 
effect application doing kind query expansion enable naive users extract information 
effort find high quality extractions sort list hit count binding summed queries 
kind querying limited single terms 
example binary relation query cities capital yields extractions shown 
application generates list follows cities generate comprehensive list cities insects 
second query term capital instantiate set generic extraction patterns nounphrase capital nounphrase 
third queried instantiated patterns 
application receives set binding pairs removing pairs nounphrase highly scored member cities list 
choose frequently seen capital binding city sort list number times binding 
kind interactive extraction similar web question answering systems mulder ask msr 
key difference larger volume information returns response simple keyword queries 
large scale information extraction system exist web domain specific extraction occurs line limits set queries systems support 
key difference application domainindependent information extraction systems know enables extraction interactive speeds average time expand respond user query seconds 
additional optimization believe reduce time seconds 
pmi ir turney pmi ir scores widely tasks finding words semantic orientation synonym finding frequently seen extractions query cities capital 
show city picking frequently seen binding capital slot 
score extraction number times capital relation extracted 
query require second extracted object country 
chinese provincial capital appear result 
antonym finding 
knowitall uses assessing quality extracted information 
useful compute large number pmi ir scores 
example may want assess pmi ir score possible extraction corpus 
compute pmi ir score cities extraction phrase need solve cities values single extraction phrase require hit count queries traditional search engine 
small amount additional compute values just single query 
compute numerators corpus issuing query counting times unique value returned 
pre defined string types interest index construction time compute denominator list type 
simply list unique typed string say noun phrase neighbor index followed number times string appears 
denominator list may large neighbor index grows number corpus documents number types 
larger fraction neighborhood index includes left right hand copies typed string 
denominator list amenable compression methods front coding 
pmi ir query processing engine takes standard results compile sorted list bindings hit count 
intersects list denominator list generating new pmi ir score time string lists 
execute quickly single linear pass denominator list 
constructing denominator list side effect constructing neighborhood index 
type recognizer finds string add special denominator list file neighborhood index 
neighborhood index complete denominator list file sorted 
count adjacent identical items merging adding count value 

plans center making suitable interactive speed information extraction system 
plan study extraction ranking schemes depth see extractions improve traditional search engine improve query execution speed 
ranking simple list documents studied problem search engines 
ranking results extraction query new unexamined problem 
consider list city state pairs 
competing criteria include confidence extraction confidence extraction source web pages content specific sorting demands population geography 
addition system improve standard search engine result ranking 
bindings requested query index provide clues document content 
example bindings type nounphrase useful clustering search results subsets 
expect system perform phrase queries average search engine want optimize queries possible 
index pairs search terms single terms effort cut average list length 
possibility index described detail section 

related substantial query languages structured data wholly appropriate search engine 
websql database systems create special schema querying set web objects 
traditional databases consider web fast changing object stored entirely locally possibly requiring database system go web service query 
traditional databases process arbitrary sql queries defined schema 
queries limited just text generally expressive queries 
text treated special way certainly idea text type 
database driven systems offer general text indexing support suffer poor performance general purpose search engine 
lapis system contains sophisticated algebra defining text regions document 
users define text regions physical relationship tokens regions text stream 
addition named patterns function loosely arbitrary text types 
text types classified arbitrary code 
lapis query languages directly comparable wide set text adjacency queries lapis process 
lapis query language powerful runtime performance quite poor scale 
lapis system designed tested small sets documents scale 
inverted index structure investigate document order process query 
query performance worse standard implementation efficiently finds relevant document set 
agrawal srikant conducted interesting study documents numerical data amenable search engine style queries 
central idea search query contains numerical quantity elicit documents containing quantities numerically similar textually distant 
system requires preprocessing corpus standard inverted index extensions query algorithm 
task basic document finding 
engine return text regions documents executing style queries involve fetching individual document text 
linguist search engine lse umiacs umd edu resnik tool searching large corpuses parse trees 
computes index advance allow fast query processing 
unfortunately published detail precise query syntax indexing mechanism 
related area index design 
cho rajagopalan build multigram index corpus support fast regular expression matching 
multi gram index inverted index includes postings certain non english character sequences 
query processor finds relevant sequences regular expression query uses inverted index find documents appear 
resulting smaller document set examined full power regular expression parser 
regular expressions express number strings language types generated type recognizers far complex regular expressions 
queries expect execute multigram index finding just set relevant documents 
standard inverted index original documents need fetched performance similar standard implementation 
system search engine answering natural language questions 
annotates corpus extra words called qa tokens 
qa token indicates location phrase useful answering certain kind question 
example qa tokens indicate places corpus years times person names appear 
computes inverted index annotated corpus running original text set qa tokens 
processing user query examines question find kind answer user probably looking 
searching qa token certain type quickly find occurrences say dates 
query language just natural language directly comparable 
neighbor index treating linguistic types index retain actual text value qa tokens 
query processor fetch original texts incur performance hit entails 
course designed find relevant documents 
series articles describes index structure designed speed phrase queries enable amount phrase browsing inverted index term list contains list successor words corpus 
successor word followed position information 
index lacks expressive power performance compared neighbor index 
query phrase index find just right hand single word string 
contrast neighbor index find strings multiple words positions left right query phrase boundaries strings typed 
index processes multi word query phrases serialized stages index lookups neighbor index process multi word queries serialization fully parallelizable 
assuming index lookups run equal speed query time factor smaller multiword queries compared engine utilizes index 

bindings engine consists generalized query language containing typed variables functions neighbor index efficient query processing algorithm 
utilizing reported set experiments provide evidence 
yields orders magnitude speedup supporting information extraction 
second speedup comes cost modest increase space time 
section analyzed performance scales relevant parameters showed potential enormous speedups page indices constant factor space increase fixed set variable types 
support broad range novel applications 
example sketched application extracts large amounts information web response simple user queries interactive speeds 
acknowledgments authors doug cutting jeff dean steve gribble brian contributors knowitall lucene nutch projects 
krzysztof gajos julie stephen soderland dan weld provided helpful feedback 
research supported part nsf iis darpa contract onr gift google 

corpus 
economist jan 
agrawal srikant 
searching numbers 
www pages 
acm press 
baeza yates ribeiro neto 
modern information retrieval 
addison wesley 
williams zobel 
optimised phrase querying browsing text databases 
editor proceedings australasian computer science conference pages gold coast australia jan 
williams zobel 
efficient phrase querying auxiliary index 
proceedings acm sigir conference research development information retrieval pages 
brill 
advances rule part speech tagging 
aaai pages 
brill dumais banko 
analysis question answering system 
emnlp 
brill lin banko dumais ng 
data intensive question answering 
trec proceedings 
cho rajagopalan 
fast regular expression indexing engine 
proceedings th international conference data engineering 
etzioni cafarella downey 
popescu shaked soderland weld yates 
web scale information extraction knowitall 
proceedings th international world wide web conference 
etzioni cafarella downey 
popescu shaked soderland weld yates 
unsupervised named entity extraction web experimental study 
artificial intelligence 
halevy madhavan 
corpus knowledge representation 
proceedings international joint conference artificial intelligence pages 
hearst 
automatic acquisition hyponyms large text corpora 
proceedings th international conference computational linguistics pages 
kwok etzioni weld 
scaling question answering web 
proceedings th international world wide web conference pages 
madhavan bernstein doan halevy 
corpus schema matching 
proceedings international conference data engineering tokyo japan 
manning sch tze 
foundations statistical natural language processing 
mit press 
mendelzon milo 
querying world wide web 
international journal digital libraries 
miller myers 
lightweight structured text processing 
proceedings usenix annual technical conference pages monterey ca 
prager brown radev 
question answering predictive annotation 
rd annual international acm sigir conference research development information retrieval pages 
spertus stein 
structured query language web 
proceedings th international world wide web conference www pages 
turney 
mining web synonyms pmi ir versus lsa toefl 
proceedings twelfth european conference machine learning 
turney 
thumbs thumbs 
semantic orientation applied unsupervised classification reviews 
acl pages 
williams zobel anderson 

index structures efficient phrase querying 
roddick editor proceedings australasian database conference pages auckland new zealand 
