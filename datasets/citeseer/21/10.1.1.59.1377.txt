mapping case level aspects java stephan herrmann christine technical university berlin stephan cs tu berlin de aspect oriented software development aims supporting separation crosscutting concerns full software lifecycle 
contribution focus lifecycle support crosscutting concerns internal structure complex behaviour 
order transitions phases seamless support concerns needed phases 
past programming language java developed supports encapsulation role collaborations suitable target platform complex crosscutting concerns 
demonstrate develop requirements analysis design models target language 

aspect oriented software development aosd aims support separation concerns crosscutting respect pure object oriented modularisation structures 
extension object orientation aosd provides new structuring constructs avoid tangling unrelated concerns prevent scattering concern locations 
advanced modularisation techniques allow encapsulation concerns called aspects 
majority existing aosd approaches mainly address implementation aspects focusing aspect oriented programming languages 
concerns emerge earlier phases development process desirable provide aspects requirements modeling analysis design 
known aspect oriented programming languages aspectj aspects tend suffer restrictions comparing regular classes 
restrictions mainly affect ability instantiate activate aspects programmatically limitations inheritance polymorphism 
aspects full blown class programming entities 
provide flexible instantiation activation aspects provide encapsulation specialisation collaborating aspects developed programming language java :10.1.1.11.5172
language java classes roles serve implement potentially crosscutting concerns 
role behaviour intrinsically bound class behaviour intercepting method calls java objects forwarding role supported german federal ministry education research isc project 
instance methods objects 
collaboration roles encapsulated package structure called team properties class 
java language matured starting non academic context aiming full lifecycle support 
vein step provide design support means extension uml class diagrams called uml aspects ufa allows modeling java relevant features 
extension uml sequence diagrams developed shows role class interactions 
publications provide considerable advances aosd earlier phases software lifecycle see issues need addressed full lifecycle support aspects 

requires isolated proposals aspect oriented modeling integrated continuous method 

relevant cases may need refinement phases yielding structured sub models 
cases identified aspects model aspects needed specifically supports structural behavioural refinement 
regarding issue sketch transition aspect oriented case model aspectoriented design major remaining gap life cycle 
projecting typical non functional aspects analysis level aspects shrink single sentence objects class foo persistent easily modeled tagged value uml model requiring modeling support 
complexity concerns introduced phases 
identifying cases aspects mainly reveals aspects bear internal complexity workflows collaborations communicating entities 
java specifically supports collaborations believe potential desired full lifecycle 
reviews regarding cases aspects section 
outline process section 
section illustrates requirements elicitation aspect mapping design java simple example 
discuss emerging lifecycle support aosd section conclude section 
case driven approach background different approaches proposed model crosscutting concerns case level 
sousa propose model crosscutting concerns cases provide new relationship cases called crosscut 
relationship defines condition extension affected points execution affected case terms steps called composition rule operator 
operator follows ideas aspectj override wrapping mode composition 
refer composition rule operator simply mode 
example notation refer 
invasive nature extend relationship approach uses non invasive specification joinpoints rsp 
pointcuts 
places execution trigger execution crosscutting cases defined crosscut basic case 
authors provide heuristic distinguish include relationship extend relationship newly defined crosscut assume heuristic cases execution case represents course needs applied case case depend execution case accomplish primary goal ii case specific course case applied cases case crosscuts case 
provides aspect oriented extension cases 
introduces aspect entity structured similarly aspectj aspect consisting pointcuts advices 
pointcut language matches steps cases provides binding predicates match context entities involved steps 
non invasive approach joinpoints specified basic cases 
advices contain steps extensions cases 
extensions elements case specifies case complete main scenario 
advice specifies aspectj manner executed rsp 
specified step 
advice contains extension aspect wants abort rest case 
extend extension points explicitly listed extended case 
approach dealing aspects internal structure complex behaviour advocate approach encapsulates aspects cases 
see language java suitable target platform internally structured aspects supports collaboration roles :10.1.1.11.5172
transformation requirements analysis design seamless 
approach aims covering development lifecycle including phases requirements modeling analysis design implementation shortly sketch intention phases 
requirements modeling requirements modeling concerned providing rigorous case models 
models consists graphical case diagrams detailed descriptions case containing main secondary scenarios terms steps triggers pre postconditions 
activity diagram specify case steps formally 
contribution base development process aspect oriented extension cases 
approach seen refinement standard case driven modeling 
general development process targeting java design implementation platform start refined case modeling standard case modeling 
refined modeling criteria explicit steer subsequent analysis design process criteria applied starting standard case modeling approach 
contribution consider non functional requirements nfrs 
consider viewpoint driven requirements modeling fit 
analysis view analysis step correspondence standard object oriented analysis 
step takes input domain model sequence oriented activity diagrams rsp 
case steps identify collaboration nested method calls domain entities 
addition new objects identified user interface system boundary behaviour case 
analysis results mainly providing scenarios identified collaborations means uml interaction diagrams form sequence diagrams 
flight booking domain class diagram standard uml stereotypes profile software development processes classifying domain objects newly introduced objects 
boundary object represents system boundary handles user input 
object steers control flow case 
entity object represent passive objects participating number collaborations see graphical notations stereotypes 
perform kind analysis crosscutting cases 
note sequence diagrams describe complete class behaviour 
omit showing new objects methods reflected augmenting class diagram 
note analysis step independent target language java distinguish classes roles teams 
design design targets java :10.1.1.11.5172
design takes previously developed analysis models input aims identifying classes roles teams 
objects different cases rsp 
analysis sequence diagrams merged classes roles 
collaboration objects sequences correspondingly transformed class role interaction 
capture designs target developed uml profile called ufa class diagrams 
ufa captures relevant concepts java needed design concepts teams roles 
sequence diagrams extended show role behaviour 
implementation designs ufa extended sequence diagrams easily implemented java programming language 
go details 
implementations java 

mapping aspects section demonstrate identify crosscutting cases internal structure behaviour map design java 
illustrate concepts running example flight booking system 
flight booking example passengers book flights consisting individual segments 
passengers registered system staff member staff member book flight cancel booking administer flight unregister bonus passenger administer passenger administer segment register bonus passenger flight booking cases book flight administer passenger register bonus passenger condition bonus passenger mode step book segments crosscut include extend earn bonus include select passenger extension points find passenger condition passenger registered extension point find pass 
condition bonus collected mode override step transfer money pay crosscut pay bonus refined flight booking cases tered 
conducted staff members behalf passengers 
flights flight segments administered staff members 
flights possible 
passengers register bonus scheme enables collect bonus miles flights book 
flight booked bonus collected depending length flight segments possibly depending conditions example number segments flight 
requirements modeling shows simple initial class diagram flight booking domain 
passenger books flights consist segments 
passenger registered bonus scheme 
note diagram specifies structure domain entities developed parallel initial specification system behaviour means cases 
shows initial case diagram identifying main tasks staff member 
shows subset cases related case book flight refined additional cases case relationships 
provide detailed description cases interest 
case book flight includes case select passenger ex tended case administer passenger meaning included case mandatory extension needed passenger data system 
case book flight includes case pay 
steps case book flight described table 
precondition case client wishing booking 
steps activity diagram 
case book flight actor staff member trigger passenger gives booking order staff member precondition flight exists postcondition segment flight booked main scenario 
select flight 
select passenger 
reserve segments 
book segments 
pay table case book flight focus lies bonus requirements 
refining book flight case defined case earn bonus 
case describes registered bonus passenger able receive bonus booked flight 
consider crosscutting case bonus collection essential part booking contribute goal booking 
fulfills criterion crosscutting relationships outlined 
small scale example discuss criterion case contributes cases 
quite common today bonus system apply booking flights purchasing goods 
case earn bonus actor staff member trigger purchase bonus segments precondition passenger registered postcondition bonus segment earned main scenario 
get segment distance 
calculate bonus segments 
sum 
credit table case earn bonus technically stereotype crosscut denote special relationship cases 
condition case earn bonus executed denoted bonus passenger saying passenger registered bonus order collect bonus 
step case execute book segments 
mode saying bonus collected booking completed 
steps case earn bonus table 
trigger case user interaction case book flight activity case suitable earning bonus 
activity diagram book flight activity diagram earn bonus case pay bonus considered crosscutting assuming bonus passenger checked automatically pay bonus assuming applied paying goods 
example discussed contribution 
analysis explained approach highly creative phase requires translate sequence oriented activities steps message rsp 
method oriented object collaborations nesting calls 
show translation case book flight 
translation involves domain classes see identifying objects involved case 
involves new objects 
example identify boundary object interaction staff see 
object controls booking sending corresponding messages entity objects passenger flight segments encapsulating correspond domain classes 
typically steps see table rsp 
activities see mapped method call 
instance activity book segments mapped method call passenger segments link passenger segments see class diagram 
call mediated example flight object 
boundary object entity analysis sequence diagram book flight envision translation crosscutting cases earn bonus resulting sequence diagram 
apparently case triggered staff member interaction 
invent method call earn flight bonus trigger saying point time relates step book segments chosen trigger case diagram 
consider design phase 
apart sequence diagram established usual 
contains object entity objects passenger segments 
note step distinguish passenger involved booking passenger involved claiming bonus obvious different parts behaviour participate different sequence diagrams 
sequence diagrams different views domain entity 
design ufa extended sequence diagrams uml aspects ufa extension uml concepts programming language java 
ufa captures programming model java allows straight forward mapping java 
basic idea programming model decorate classes roles special classes 
decorated class called base 
object role instance seen aggregated entity 
role instance interact decorated object ways intercept method calls decorated object 
called callin 
type replace 
role call analysis sequence diagram earn bonus methods decorated object specifying object 
called callout 
kind interactions referred method bindings 
teams structuring concept encapsulate collaborating roles 
teams class features 
base object role instance role class team instance 
callin method call interception compared advice weave aspect oriented programming 
roles enclosing teams encapsulate crosscutting behaviour 
java provides fine grained programmatic control activation teams controls behaviour role instances regard 
team instance active meaning executed 
callin implicitly create role instance didn exist 
inactive meaning callin executed 
frozen meaning existing roles executed 
roles implicitly created 
independent activation role created explicitly team level methods special role signature containing base class role class 
ufa diagrams capture roles teams decoration base classes method binding roles base classes see 
teams share standard behaviour class denoted team stereotype uml package contain role classes 
roles team decorate base classes base classes encapsulated package 
team said adapt base package denoted stereotyped dependency adapt packages 
role uml class extensions 
role bound role name followed decorated base class name 
ufa diagram method bindings separate compartment roles 
kind bindings 
intercept base method calls map role methods denoted left pointing arrow 
role methods mapped base class methods denoted right pointing arrow 
sequence diagram notation takes idea integrate aspects main flow control depict method call intercepted drawing circle cross message arrow sequence diagram 
circle linked icon stands aspect entity 
adapted part notation method call interception see omit link aspect entity 
notation goes showing behaviour exhibited behalf aspect rsp 
entities 
adapting java means show additional messages interchanged roles teams 
introduced new stereotype role object denoted graphically dice shadow see 
teams depicted grey box enclosing role instances 
activation bars role instances shaded order indicate control flow executed team 
design mapping achieve desirable keep case modularity design 
pointed deal cases identified crosscutting cases ii refined object oriented collaboration complex structure behaviour 
detailed analysis collaborations results characteristics 
note true crosscutting case refined complex collaboration 

crosscutting case refined collaboration number different objects different relationships 

crosscutting case needs context information operate 

relationship objects collaboration refining crosscutting case differs relationship objects collaboration refining base case 

objects collaboration refining crosscutting case different domain objects base case share certain attributes 
characteristic asserts case reasonable complex refinement means collaboration 
design desirable encapsulate collaboration 
characteristics describes interface collaboration context precisely objects 
design desirable provide control interface 
team supports kind encapsulation providing controllable interface part environment base classes 
characteristics supported concepts team roles 

complex structure supported role attributes associations roles 

role instances obtain information decorated objects 

roles associations roles corresponding associations base class level 

roles base instances conceptually entity roles share attributes base 
conclude team ideal candidate mapping crosscutting case 
main design principle 
note order apply principle map crosscutting case team characteristics fulfilled 
apply main design principle flight booking example 
note context consider design single threaded environment 
multithreaded context 
case earn bonus considered candidate team 
addition identified crosscutting behaviour different view domain entities instance case book flight 
analysis know entities passenger segment appear different collaborations 
exhibit different behaviour analysis sequence diagram 
obvious passenger booking flight passenger earning bonus share certain properties identity 
overlap structure roles decorating classes 
resulting roles depicted 
object team 
main task take control instantiation collaboration implemented explained 
case diagram know behaviour case earn bonus executed step book segments case book flight 
hint callin expressed terms method calls analysis sequence diagram 
fairly straight forward determine method call book segments candidate callin method call involved booking 
mode kept 
behaviour inserted described analysis case earn bonus 
method get bonus executed callin role decorating segment call earn flight bonus redundant 
depicted circle cross branching call book segments 
subsequently segment role determine distance accessing base class segments 
note stars method calls denote calls executed times target 
calculating bonus segment credit bonus passenger known segment analysis case book flight 
assumed known analysis earn bonus 
second callin passenger available role context segment role collaborate 
method book called passenger callin passenger role method buy 
method stores passenger role inside team subsequent calls 
method buy callin replaces original method book 
calls original method inside buy similar proceed advice aspectj 
replace callin buy change passenger role inside team 
preparation segment role call credit passenger role 
base method call replace call set null 
circle dot denotes replace callin see 
approach requires corresponding team instance activated 
order control bonus passenger role instance steps taken team frozen bonus passenger roles created team level method public void register passenger empty 
replace callin sets team activation active calls base method sets team activation frozen 
team activation call book segment trigger callin 
note role rsp 
team behaviour triggered single method call base subsequent calls 
team active specific kind control flow happening base 
surprising set map cases complex internal behaviour aspect oriented programming 
may include case control flow crosscutting case depends control flow base case 
staff member passenger flight segments book book flight role decorated object book callin buy passenger role segment role callin book book segments credit replace callin base call get bonus get dist sequence diagram roles demonstrate complete behaviour cases book flight earn bonus 
final ufa diagram show java base classes see refinements domain classes 
having finished ufa sequence diagram point straight forward derive implementation java models 
example implementation 

related jacobson argues aspect oriented programming provides missing link order keep case modularity design implementation 
proposes map extension cases aspects cases mapped standard object oriented components 
extension case refers extension points inserted sequence actions extended case 
contrast crosscut relationship require prepare extended case extension 
model driven architecture mda approaches taken ideas aosd 
specific approach called executable uml proposes strictly separate concerns called domains specify automated integration extensively aosd concepts joinpoints method call interception weaving 
approach coarsely sketches ideas instantiated 
comparable goals envisions weaving richly structured aspects 
similar respect process proposed language case level aspects envisions partial generation subsequent models 
theme uml provides notation parameterising packages methods 
sequence diagrams contained package parameters triggers sequences 
diagrams go step anal ysis sequence diagrams crosscutting cases show sequences triggered method calls different analysis sequence diagrams 
theme uml packages bound packages parameter methods bound actual methods meaning actual methods intercepted 
extended sequence diagram notation goes step specifying integrated sequence 
role modeling long tradition 
ideas programming language java combining concepts aspect oriented programming method call interception 

outlook described concepts process elicit consistently refine aspects internal structure complex behaviour 
demonstrated example transformation standard object oriented analysis design object teams java guided design principles 
transformation analysis collaborations collaborations roles classes results applying principles documents design apart purely structural ufa diagrams 
case model provides advantage standard case modeling feel relationships ordinary crosscutting cases manifold currently captured 
example gave turned method call interception needed specify collaborations different cases intertwined 
main point isolated steps single triggers fall short identifying dependencies complex behaviour 
data dependencies dealt 
plan integrate view points proposed process 
believe technique may source deriving richly structured aspects 

proc 
international conference aspect oriented software development enschede netherlands 
acm press 
sanchez 
incorporating aspects uml 
proc 
workshop aspect oriented modeling aosd 

erweiterung eines uml um modellierung object teams german 
master thesis technical university berlin preparation 
clarke walker 
standard design language aosd 
aosd pages 
object management group 
unified modeling language 
www omg org 
herrmann 
composable designs ufa 
workshop aspect oriented modeling uml international conference aspect oriented software development aosd 
herrmann :10.1.1.11.5172
object teams improving modularity crosscutting collaborations 
aksit mezini editors proc 
net object days volume lecture notes computer science 
springer 
jacobson 
cases aspects working seamlessly 
journal object technology 
kiczales hugunin kersten palm 
overview aspectj 
proc 
th ecoop number lncs pages 
springer verlag 

rational unified process 
addison wesley 
object teams home page 
www org 
rashid moreira araujo 
modularisation composition aspectual requirements 
aosd pages 
rashid sawyer moreira araujo 
early aspects model aspect oriented requirements engineering 
proc 
ieee joint international conference requirements engineering pages 
ieee computer society press 
mellor 
executable uml 
addison wesley 
eisenberg 
case level pointcuts 
proc 
ecoop oslo norway june 
sousa soares castro 
separation crosscutting concerns requirements design adapting case driven approach 
proc 
early aspects workshop aosd 
home page 
www de 
herrmann 
model view controller object teams perfect match paradigms 
proc 
aosd boston usa march 
acm press 
