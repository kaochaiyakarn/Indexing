overcite cooperative digital research library jeremy stribling isaac li frans kaashoek david karger robert morris scott shenker citeseer known online resource computer science research community allowing users search browse large archive research papers 
unfortunately current centralized incarnation costly run 
members community presumably willing donate hardware bandwidth sites assist citeseer current architecture facilitate distribution resources 
overcite proposal new architecture distributed cooperative research library distributed hash table dht 
new architecture harness resources sites able support new features document alerts scale larger data sets 
citeseer premier repository scientific papers computer science community supporting traditional keyword searches navigation web citations papers :10.1.1.17.1607
citeseer ranks papers authors various ways identify similarity papers 
useful services vital resource academic computer science community 
despite community value citeseer uncertain sustainable model community support 
initial period development deployment nec citeseer went volunteer research group pennsylvania state university took considerable task running maintaining system see table 
citeseer required support queries implement new features significantly expand document collection user base resources required quickly psu single noncommercial institution easily provide 
commercially managed system google scholar mit computer science artificial intelligence laboratory kaashoek karger rtm csail mit edu psu school information sciences technology psu edu uc berkeley icsi shenker icsi berkeley edu research conducted part iris project project iris net supported national science foundation cooperative agreement 
ani 
isaac receives support nsf iis microsoft research 
feasible solution citeseer value community institutions willing donate machines bandwidth sites return control evolution 
citeseer grow noncommercial enterprise adapted run distributed set donated nodes 
overcite design allows aggregation distributed resources dht infrastructure 
emphasis novelty design benefits 
dht role distributed storage layer coupled robust scalable models data management peer communication allows decentralization citeseer infrastructure inclusion additional cpu storage resources 
serving distributed robust archive data dht simplifies coordination distributed activities crawling 
dht acts rendezvous point producers consumers meta data documents 
potentially aggregating resources manner citeseer offer documents features enabling play central role community 
currently developing overcite prototype hope available service community 
citeseer background citeseer major components interact follows 
web crawler visits set web pages contain links pdf postscript files research papers 
sees link hasn fetched citeseer fetches file parses extract text citations checks format looks academic 
applies heuristics check document duplicates existing document adds meta data document tables adds document words inverted index 
web user interface accepts search terms looks inverted index displays data resulting documents 
citeseer assigns document id document pdf postscript file citation id cid bibliography entry document 
citeseer knows titles authors papers file property measurement number papers dids new documents week html pages visited total document storage gb avg 
document size kb total meta data storage gb total inverted index size gb hits day searches day total traffic day gb document traffic day gb avg 
number active avg 
load cpu table statistics psu citeseer deployment 
seen citations 
reason citeseer assigns group id gid title author pair contexts file required 
citeseer uses tables 
document meta data table indexed records document authors title year gid document citations number citations document 
citation meta data indexed cid records citation gid citing document 

table mapping gid corresponding exists 

table mapping gid list cite 

inverted index mapping word dids documents contain word 

table indexed checksum fetched document file decide file processed 

table indexed hash sentence cite seer seen document gauge document similarity 

url status table keep track pages need crawled 

table mapping titles authors corresponding gid find target citations observed bibliographies 
table lists statistics current deployment citeseer psu 
citeseer uses servers ghz processors 
cpu time satisfy user searches 
main costs searching lookups inverted index collecting displaying meta data search results converting document files user requested formats 
primary costs inserting new documents citeseer extracting words newly documents adding words inverted index 
takes seconds cpu time process new document 
overcite design primary goal overcite spread system load volunteer servers 
overcite partitions inverted index participating nodes node indexes fraction documents 
creating updating searching index 
overcite executes user interface nodes spreading serving files converting file formats 
overcite stores document files dht spreads burden storing 
overcite stores meta data dht convenience data available nodes reliability 
choice dht shared storage medium ensures robust scalable storage efficient lookup management documents meta data 
overcite partitions index document keyword avoid expensive joins multi keyword queries limit communication necessary document insertions :10.1.1.12.3396:10.1.1.12.6196:10.1.1.10.9602:10.1.1.19.7944
architecture overcite nodes active components dht process index server web crawler web server answers queries 
isolating components manner allows treat independently example inverted index tied particular document storage solution 
describe component turn 
dht process 
overcite nodes participate dht 
dht provides robust storage documents metadata helps coordinate distributed activities crawling 
overcite intended run stable nodes dht node keep full routing table provide hop lookups :10.1.1.1.5939
expect failed nodes return system disks intact cases data soft state dht lazy re replicating data stored failed nodes 
index server 
avoid broadcasting query node overcite partitions inverted index document index partitions 
document indexed just partition 
node maintains copy index partition nodes copies index partition 
overcite sends copy query server partition servers involved query 
servers uses th cpu time required search single full size inverted index 
server returns dids highest ranked documents specified criterion citation count response query 
reduce query load observing queries citeseer data involve titles authors 
fact analysis october trace citeseer queries shows answerable queries match title author list document 
furthermore complete index just metadata citeseer papers mb 
effective optimization may replicate full meta data index nodes keep memory way satisfy queries quickly locally 
option replicate index containing common search terms nodes 
replicate full text index nodes faster queries may able differential updates keep nodes date periodic basis saving computation node updating index 
plan explore possible optimizations distributed search threshold aggregation algorithms query scalability issue plan explore techniques dht search proposals unstructured peerto peer search optimizations :10.1.1.14.7680:10.1.1.1.3782:10.1.1.12.5100:10.1.1.10.5444
web crawler 
overcite crawler design builds existing proposals distributed crawling :10.1.1.162.194:10.1.1.127.5054:10.1.1.160.6666
nodes coordinate crawling effort list crawled page urls stored dht 
crawler process periodically chooses random entry list fetches corresponding page 
crawler finds new document file extracts document text words citations stores document file extracted words document meta data dht 
node adds document words inverted index sends message server index partition telling fetch document words dht index 
node keeps cache meta data documents indexed particularly number citations order able rank search results locally 
enhancements basic design locality crawling intelligent url partitioning possible desirable defer complete discussion overcite crawler design 
web front 
subset overcite nodes run web user interface round robin dns spread client load 
front accepts query words user sends inverted index servers collects results ranks fetches meta data dht top ranked results displays user 
front retrieves document files dht optionally converts user specified format sends user 
name key value docs fid gid cites cid gid groups gid cid list files fid document file hash shingle list dids crawl list page urls urls hash doc url date file fetched titles hash ti au gid table data structures overcite stores dht 
tables table lists data tables overcite stores dht 
tables explicitly distinct entities dht 
overcite uses dht single large key value table system interprets values retrieved dht context key 
tables patterned citeseer adapted storage dht 
main differences files table holds copy document pdf postscript file keyed fid hash file contents 
sentence level duplicate detection results large tables sentences overcite uses shingles known effective technique duplicate detection :10.1.1.24.779
table keyed hashes shingles documents value list dids having shingle 
crawl key value pair contains list urls pages known contain document file urls single dht block known key 
urls table indicates document file url fetched 
allows crawlers periodically re fetch document file check changed 
addition tables stored dht node stores partition inverted index locally 
index sufficiently annotated satisfy queries documents citations just current citeseer 
calculations overcite requires communication resources citeseer order manage distribution result server 
section calculates resources consumed overcite comparing costs citeseer 
maintenance resources crawling fetching new documents take approximately times bandwidth citeseer uses total spread servers 
link postscript pdf file node finds performs lookup urls see download file 
download crawler process checks duplicate document 
requires looking fid file files searching existing document title authors titles verifying shingle level document sufficiently differs 
lookups constant document inexpensive relative downloading document 
steps occur process parses document converts text extracts metadata 
document duplicate crawler process inserts document files postscript pdf costs downloading file times overhead due storage redundancy dht 
node inserts text version document files updates docs cites groups titles reflect document meta data 
node add document local inverted index partition stored total nodes 
additional node index partition need fetch text version file files average tenth size original file 
nodes indexes document incurring cost cpu time 
additional system bandwidth required overcite crawl insert new document dominated costs inserting document dht nodes retrieve text document 
assume average original file size size text files average approximate bandwidth overhead document fx bytes 
estimate amount storage needed node follows 
dht divides document table storage nodes system requires gb amount storage documents meta data tables respectively 
furthermore node stores partition inverted index gb total index size 
bandwidth storage requirements depend course system parameters chosen overcite 
reasonable design choices roughly planetlab obtained donations nodes need index full text new document value dhash uses 
parameter choices measurements citeseer table find overcite require mb additional bandwidth document mb citeseer currently uses gb storage node 
calculations ignore cost dht routing table timeline query overcite steps involved 
vertical bar represents node different index partition 
data maintenance traffic 
practice expect costs traffic serve documents assume nodes relatively stable 
query resources overcite partitions inverted index document query needs broadcast parallel nodes index partitions 
node caches meta data documents index partition order rank search results cache need date 
nodes return top matches context matches value rank metric originating node looks meta data top matches 
depicts process 
packets containing queries relatively small response contain identifiers matching document context match value rank metric 
participating nodes bytes context rank metric value bytes query consumes mk bytes traffic 
assuming searches day returning results query node query design adds gb traffic day network mb node 
reasonably small fraction traffic currently served citeseer gb 
include meta data lookup traffic top matches smaller reasonable value 
serving document contributes additional cost overcite web front retrieve document fragments dht returning user 
approximately double amount traffic downloads cur assume queries match meta data index worst case calculations 
rently gb load spread nodes 
imagine optimization involving redirecting user cached pre constructed copies document specific dht nodes saving addition bandwidth cost 
overcite spreads cpu load performing query multiple nodes cost inverted index lookup linear number documents index 
user delay user perceived delay problem overcite constructing web page requires multiple dht lookups 
lookups parallelizable assume hop dht total latency low 
example consider page generated user keyword query 
node initially receiving query forwards query parallel nodes 
receiving responses nodes node looks meta data top matches parallel 
expect node generate page response search twice average round trip time network plus computation time 
generating page document includes document citations documents cite take additional delay looking extra metadata expect pages take average round trip times 
features potential impact additional resources available overcite design wider range features possible long run impact new capabilities way researchers communicate may main benefit scalable citeseer 
section sketches potential features 
document alerts field computer science grows harder researchers keep track new relevant interests 
overcite help providing alert service mail researcher entered database interest 
users register queries overcite run daily alert new papers distributed hash table authored druschel 
service clearly benefits overcite dht infrastructure additional query load due alerts distributed nodes 
proposal describes alert system citeseer 
document recommendations overcite provide recommendation feature similar popular web sites amazon 
require overcite track individual users activities 
overcite recommend documents previous downloads previous queries downloads similar interests 
plagiarism checking plagiarism occasional problem major conferences increasing volumes papers pressure publish problem serious 
overcite database shingles available wish check text significantly overlaps papers 
documents authors explicitly submit newly written papers citeseer 
rely citeseer crawl conference web pages find new content 
citeseer far valuable community support larger corpus particular included preprints written material 
faster frequent crawling help regard situation substantially improved authors took active role adding material 
extreme case imagine funding agencies conferences require publications submissions conference entered overcite making immediately available community 
going step imagine program committees annotate submissions overcite comments contributions 
users decide comments pc papers read document alert feature 
approach additional benefit users access papers today rejected conference due limited program time slots 
potential impact radical changes process dissemination scientific results happen incremental steps question 
theoretical physics example uses preprint collection main document repository insertion repository counts publication date resolving credit disputes importantly researchers routinely scan list new submissions find relevant papers 
manual mode works computer science due part diverse set large number papers 
overcite enabler changes computer science scalable capacity ability serve queries 
acknowledgments comments kannan beverly yang sam madden anthony joseph mit pdos research group anonymous reviewers greatly improved require rethinking anonymous submissions providing support anonymous submissions overcite 

lee giles continued support psu 
bawa manku raghavan sets search enhanced topic segmentation 
proceedings sigir july 
broder resemblance containment documents :10.1.1.24.779
proceedings compression complexity sequences june 
burkard herodotus peer peer web archival system 
master thesis massachusetts institute technology may 
chawathe ratnasamy breslau lanham shenker making gnutella systems scalable 
proc 
sigcomm august 
cho garcia molina parallel crawlers 
proceedings www conference may 
dabek kaashoek li morris robert son sit designing dht low latency high throughput 
proceedings st nsdi march 
fagin lotem naor optimal aggregation algorithms middleware 
journal computer system sciences 
keyword set search system peer peer networks 
master thesis massachusetts institute technology june 
gupta liskov rodrigues efficient routing peer peer overlays 
proceedings st nsdi mar 
huebsch hellerstein lanham loo shenker stoica querying internet pier 
proceedings th vldb sept 
kannan yang shenker sharma basu lee continuous queries citeseer 
tech 
rep ucb csd uc berkeley computer science division jan 
lawrence giles bollacker digital libraries autonomous citation indexing :10.1.1.17.1607
ieee computer 
www citeseer org 
li loo hellerstein kaashoek karger morris feasibility peer peer web indexing search 
proceedings nd iptps feb 
li stribling kaashoek morris bandwidth efficient management dht routing tables 
proceedings nd nsdi may 
litwin neimat schneider lh scalable distributed data structure 
acm transactions database systems 
loo cooper krishnamurthy distributed web crawling dhts 
tech 
rep ucb csd uc berkeley computer science division feb 
loo huebsch stoica hellerstein case hybrid search infrastructure 
proceedings rd iptps feb 
reynolds vahdat efficient peer peer keyword searching 
proceedings th international middleware conference june 
shi yang wang yu qu chen making peer peer keyword searching feasible multi level partitioning 
proceedings rd iptps feb 
singh liu miller apoidea decentralized peer peer architecture crawling world wide web 
proceedings sigir workshop distributed information retrieval aug 
suel mathur wu zhang long shanmugasundaram peer peer architecture scalable web search information retrieval 
proceedings international workshop web databases june 
tang dwarkadas hybrid global local indexing efficient peer peer information retrieval 
proceedings st nsdi mar 
yang garcia molina improving search peerto peer networks 
proceedings nd icdcs july 
