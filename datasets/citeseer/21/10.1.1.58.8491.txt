preliminary version megamodel model software evolution transformations jean marie favre tam nguyen laboratoire lsr imag university grenoble france www adele imag fr model driven engineering approach lead emergence new paradigm software evolution model driven software evolution 
models metamodels transformations cornerstones approach 
combining concepts leads complex structures revealed difficult understand especially different technological spaces considered technology xml bnf uml sql concepts model metamodel transformation usually ill defined industrial standards mda xml 
provides conceptual framework called megamodel aims modelling large scale software evolution processes 
processes modeled graphs systems linked defined set relations representationof conformsto 
key words model driven engineering meta model software evolution mda megamodel model driven engineering mde promising approach develop evolve software 
model metamodel transformations basic concepts mde 
concepts far new 
ancient egypt formalized 
concepts studied fields computer science may different perspectives terminology 
model driven architecture mda standard launched omg just popularized vision models metamodels transformations play central role software engineering 
imag fr preliminary version 
final version published electronic notes theoretical computer science url www elsevier nl locate entcs favre nguyen omg gran vision presenting mda paradigm software engineering source strong debate 
mda poorly defined complex restrictive imposed mof standard 
importantly previous similar approaches syntax driven approaches failed find path industry 
fact believe new mda thats may time episode 
mda successful previous software engineering community mature concepts better understood tools 
mde technological spaces mde mda 
fact mda just specific incarnation model driven engineering approach applied software systems 
mde means restricted mda standard 
fact mde approach restricted development evolution software systems concentrate 
mda complex set technologies dominated mof god episode ii 
mde contrary open integrative approach embraces technological spaces tss uniform way 
focus software technological spaces produce software 
emphasis mde bridges technological spaces integration bodies knowledge developed different research communities 
examples tss include mda mof bnf xml sql uml space concepts model metamodel transformation take different incarnation 
instance called metamodel corresponds called schema grammar viewpoint software architecture community 
fact concept model metamodels transformation poorly defined mda standards xml 
true essence concepts deeply buried complex technologies 
modelling software evolution getting better understanding concepts important particular model software evolution 
focus small scale software 
software products evolved problem ad hoc way 
contrary interested evolution large evolution large scale industrial software systems 
evolution systems involve various spaces time various tss usually time 
technology recognizing concepts model metamodels important context 
particular concepts explain metamodel model favre nguyen evolution 
notion model required understand model code evolution problems theoretical 
correspond actual issues strong implication software industry development processes 
megamodel mde series ancient egypt model driven engineering goal provide megamodel describe mde 
simply put megamodel model mde explain model metamodel transformation transformation model model transformation model model metamodel transformation combination terms 
megamodel possible reason complex software engineering process entering details technological space involved 
obviously results obtained reasoning megamodel consistent obtained directly reality 
technically megamodel metamodel model 
terms defined megamodel calling metamodel confusing 
goal means invent new concepts 
contrary just want model exist 

defining new words relies existing research mde 
describes informally models meta models 
zivin identifies fundamental relations coined representationof conformsto 
atkinson study relationship mda ontologies 
pieces carried define mde concepts specific restricted particular ts expressed plain english 
contrast mega model expressed uml ocl constraints 
presents current version megamodel built far 
megamodel carefully designed importantly validated large number examples different technological spaces 
study mde taken historical perspective shown artefacts ancient egypt modern software technologies conform megamodel smooth way 
megamodel summarized 
core associations 
describes concepts model language metamodel transformation 
reader invited refer series ancient egypt model driven engineering association described different episode plenty concrete examples 
instance episode concentrates models 
episode ii concentrates languages metamodels 
episodes construction 
structure favre nguyen remainder structured 
basics megamodel section 
transformations introduced section 
section shows results modelling evolution section concludes 
models languages metamodels shown uml class diagram core mde megamodel centered relations 
relation briefly discussed separate section 
information models refer episode languages metamodels please refer episode ii 
elementof composite part element set set system sus model metamodel representationof conformsto notempty metamodel set model asset fig 

megamodel systems parts shortcuts representationof elementof conformsto sus system primary element discourse talking mde 
definition just ensure broad application megamodel 
short system term system really important 
systems simple 
instance trigonometric value system 
pair system 
complex system decomposed subsystems parts leading definition relation 
composite part fig 

megamodel system instance just indicates second system part system 
information represented link favre nguyen uml object diagram save space prefer traditional xry mathematical notation shortcut remember relations simply set pairs set theory 
models representationof providing definition model lets cite existing definitions 
model abstraction physical system certain purpose uml std 
model simplification system built intended goal mind 
model able answer questions place actual system 
model set statements system study sus 
definitions identify notions notion model notion system study sus relationship notions 
relation called representationof kept terminology 
just shortcut avoid wrong connotations 
association depicted episode dedicated study association 
system sus model representationof fig 

megamodel lets just summarize main properties relation 
key recognize notion model relative 
intrinsic property system 
instance system just system 
state system plays role model arguing 
interpret parts pair sequence bits result decimal representation value 
state 
example shows links combined 
combination links leads notion interpretation explained 
languages sets elementof language theory language defined set sentences 
instance set ho hoo 
language words start continue letters 
lets call set hol 
language theory built set theory 
megamodel association elementof models concept see 
elementof favre nguyen element set set system fig 

megamodel association denotes set theory 

relationship megamodel set theory language theory described 
language set hol holds 
example java language infinite set java programs 
uml modelling language 
set uml models uml 
metamodels conformsto languages systems 
need practical means deal languages leading derived notion model language 
new languages just particular systems 
instance regular expression model language hol described hol 
grammar model language language 
xml dtd lets say dtd model language language 
known language modelled models expressed language different languages 
technological space fact expressed saying grammars single language various grammar languages express grammars bnf yacc 
example hol 
regular expressions hol language modelled grammar expressed bnf yacc 
models languages confused languages models 
modelling languages common name languages models 
fact important concept mde concept models languages models models modelling languages 
models called metamodels 
concept leads association conformsto megamodel 
model conform metamodel 
relation different incarnations depending technological space considered 
instance ts phrase conform grammar ts xml document conform dtd ts content database conform schema database 
shown episode ii association identified foundation mde contribution show basic association previously thought 
conformsto contrary system metamodel favre nguyen conformsto notempty metamodel set model asset fig 

megamodel derived association shown 
fact conformsto takes root set theory summarize particular composition links 
merges notion set notion models 
notion metamodel compatible definition 
instance definitions consistently express fact metamodel model language models meta model model defines language expressing model 
metamodel specification model class sus sus class valid model expressed certain modelling language 
transformations initial version mda standard put emphasis transformations really core concept mde just model metamodel 
furthermore transformations fundamental software evolution 
particular model driven software evolution called transformation driven evolution 
unfortunately notion transformation intuitive consensual terminology term refer distinct concepts 
clarify notion 
important distinguish transformation instances transformation functions transformation models transformation modelling languages transformation metamodels 
goal means define standard terminology 
just show serious issue megamodel improve understanding reasoning mde 
transformation instances set theory style say system transformed system modelling simple pair 
introduce association megamodel 
done left 
example means integer 
pair called transformation instance transformation application 
plays role source transformation plays role target 
system source target shortcut favre nguyen system target source fig 

megamodel transformation instances called transformation instance programs means program program 
program transformation instance 
important note constraint transformation instances complexity transformation 
simply correspond addition white space modification algorithm renaming procedure complete reimplementation program 
reader noticed fact defined system association general 
combined arbitrarily associations introduced far 
instance say model transformed model metamodel transformed metamodel model transformed metamodel example strange sight just consider tools able extract dtd dtd xml file xml 
file dtd incarnation metamodel technological space xml model 
situation modelled facts xml dtd xml dtd 
shown graph pattern transformation incarnation metamodel inference 
commercial tools 
transformation instances systems considering transformation instances class entities bring power megamodel 
transformation instances systems 
associative class right class association 
class called unfortunately association received name name defined uml element 
anyway objects associative class origin destination link uml semantics 
exactly needed 
particular links combined ways leading complex graphs 
instance source target transformation instance transformation instance 
power higher order functions known computer science exactly happen various technological spaces terms necessarily 
seeing transformation instances systems means combined associations megamodel 
favre nguyen necessary model realm software development 
instance assume want analyse transformation instance program program pair 
result analysis xml file diff xml models differences source target 
want smarter output unix diff tool 
diff xml 
diff xml model transformation instance 
continuing example xml file composed transformation instances 
instance function part transformed function 
diff xml 
analysing transformation instance producing summary diff xml useful understand program evolution 
modelled facts diff xml diff xml 
occurrence pattern involving opposite direction deduced reverse engineering transformation applies transformation instance concrete operation example transformation instance reverse engineering 
transformation functions far seen individual systems transformed individual systems 
software evolution seen succession transformation instances weak result brings concrete benefits 
contrary challenge mde automate transformations far possible 
done transformation instances considered isolation 
described higher level abstraction individuals systems set systems 
transformation function transformation short function mathematical sense term set pairs constraint value map domain maps value range 
precise transformation function set transformation instances 
transformation instance elementof zero transformations 
domain transformation function set systems transformed 
range transformation function set systems obtained transformation 
modelling directly comes set theory mathematical language 
just term transformation function simply transformation function term software evolution functions popular software evolution transformations 
transformation function 
fact correct term transformation function 
instance means integer value transformed 
set 
transformation function elements transformation instances 
lets call transformation add mul refer transformation 
favre nguyen source system target element elementof set called transformation set instances transformation element forall tis element set tis forall ti self element includes ti source self element includes ti target tis exist ti ti ti ti target ti target fig 

megamodel functions vs transformation instances example see transformation instance element various transformation function add mul 
classifying transformation instances terms existing transformation known problem evolution analysis 
instance goal recognize refactorings transformation instance 
case tries observing difference successive versions program changed set change transformation instance classified 
refactoring rename method transformation function particular application refactoring transformation instance 
transformation models transformation functions defined systems operational 
required mde concrete means describe transformations 
naturally leads transformation models 
transformation model model transformation function 
instance lets call program int int return dblp pascal program function integer integer return program int int return 
clear mul dblp mul mul 
suggested example plenty ways languages write transformation models 
example simple representative software evolution transformation 
compiler refactoring tool yacc tool better examples transformation models software evolution transform models 
transformation models confused functions transformation instances 
technological space xslt stylesheet example transformation model 
models transformation function defined xml files 
transformation expressed language instance xquery 
application stylesheet particular xml file leads transformation instance 
application compiler particular program application yacc particular grammar examples transformation instances 
modification seen transformation instance 
fact favre nguyen huge majority transformation instances applied software evolution ad hoc 
elements existing transformation functions 
software engineers just change programs wondering instance transformation 
refactorings examples transformations modeled automated isolated examples 
fact currently software evolution driven ad hoc transformation instances goal model driven engineering drive process set reusable transformation functions 
applying megamodel software evolution believe software evolution processes modelled graph megamodel 
example graphs provided form uml object diagrams episode ii static vision 
considering transformation evolution lets consider static vision 
simply put version large scale software complex system version modelled graph built elements links instance model fact software study packages source files functions links instance model model specification ada program 
links instance model xml model pertains domain specific language dsl 
languages considered integral parts software especially long term invariably evolve 
links instance model fact xml model conform dtd model dsl mentioned 
model conformity ada program checked ada compiler metaware tool 
links instance model fact binary file produced ada source file produced specification model 
version represented graph 
evolution software modelled composition graphs links 
just obtain bigger graph kind links 
megamodel means restricted model evolution software evolution 
system transformed 
system source target link 
required large software companies evolve soon 
fact evolution modelled combination links kind links determining kind evolution 
consider evolution large languages evolve 
metamodels evolve 
transformation models evolve 

favre nguyen systems connected link evolve leads coevolution issues 
consistency maintained ends link 
examples evolution include instance model code evolution 
metamodel model evolution example 
sequence greek letters ambiguous particular formal rule ordering letters 
concepts described corresponds graph patterns simply sequences 
identified lot interesting patterns corresponds known concepts 
examples provided 
forward engineering transformation system driven evolution metamodel reverse engineering transformation model driven evolution reflexive metamodel model system evolution metamodel engineering round trip evolution metamodel reverse engineering fig 

megamodel examples interesting mega patterns metamodel model evolution metamodel inference introduced megamodel describe mde concepts relationships 
megamodel summarized 
view corresponds simplified purpose 
complete view making explicit relationships megamodel set theory language theory 
fact megamodel discovered powerful expected 
really helped connect concepts technologies apparently disconnected 
surprisingly discovered lot composite part source target system sus favre nguyen model metamodel element elementof called transformation set set instances transformation representationof conformsto fig 

megamodel overview notempty metamodel set model asset element forall tis element set tis forall ti self element includes ti source self element includes ti target tis exist ti ti ti ti target ti target known issues model graph patterns 
discovering new ones 
respect form megamodel language uml building incarnations megamodel 
time writing working version prolog 
megamodel expressed different languages 
interestingly prolog megamodel executable automatically recognize patterns mentioned derive new facts model expressed megamodel 
program results transformation uml megamodel transformation ocl constraints prolog rules 
words thats megamodel transformation applied mde megamodel 
practice problem really semantics megamodel interpretation 
formalizing metamodel really important issue 
mde se formal system problem represent mde real world language describe resulting model 
words issue extract model software evolution process 
ease task process defining systematic mapping megamodel concrete incarnations technological spaces 
experiments done far promising 
surprising building metamodels reflect practical knowledge existing technological spaces 
claim megamodel complete perfect 
model megamodel certainly presents lot room improvements 
instance model evolution phenomena necessary include notion distance express extent model conforms metamodel metamodel model evolution model representation code model code evolution 
adding notion metrics 
favre nguyen reader wonder research 
code 
new 
just consider things different perspective 
mda standards pages 
full complex technologies plenty commercial tools claim mda compliant 
standard years old 
major actors software industry microsoft ibm announced mde integral part strategy 
despite people academy wonder metamodel transformation metamodel driven evolution process model driven evolution process transformation 
term meta adopted software industry leaders considered suspicious 
goal just improve understanding mde concepts accessible 
believe issue software evolution 
years empirical software evolution doubt software evolved ad hoc way 
needed new paradigm software evolution 
mde candidate 
acknowledgments anonymous reviewers comments 
jean jacky estublier german vega members mda project attendee seminar mda fruitful discussions topic 
atkinson hne 
model driven development metamodeling foundation 
ieee software september 
zivin 
search basic principle model driven engineering 
journal special issue march april 
series ancient egypt model driven engineering 
imag fr mda 



french 
favre 
meta models models evolution software space 
workshop evolution large scale industrial software applications elisa joint workshop icsm sept 
available imag fr 
favre 
foundations model driven reverse engineering models episode stories fidus papyrus solarus 
post proceedings dagstuhl seminar 
episode 
favre nguyen favre 
foundations meta pyramids languages metamodels episode ii story baboon 
post proceedings dagstuhl seminar 
episode 
favre 
basic theory modelling model driven engineering 
proceedings november 
available imag fr 
ieee 
ieee recommended practice architectural description systems ieee std 
zivin 
precise definition omg mda framework 
proceedings ase november 
kleppe warmer bast 
mda explained 
model driven architecture practice promise 
addison wesley 
klint mmel 
engineering discipline 
technical report submitted publication cwi 
available homepages cwi nl ralf 
zivin aksit 
technological spaces initial appraisal 
coopis doa federated conferences industrial track irvine 
omg 
mda web site 
www omg org mda 
omg 
omg model driven architecture mda 
cwi july 
available www omg org mda 
omg 
meta object facility mof specification version 
technical report april 
available www omg org mda 

models mean 
ieee software september 
spivey 
notation manual 
prentice hall 

