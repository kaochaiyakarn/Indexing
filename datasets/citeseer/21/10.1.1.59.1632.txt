distributed object oriented language session types dezani ciancaglini nobuko yoshida alexander ahern sophia drossopoulou dipartimento di informatica universit di torino department computing imperial college london 
age world wide web mobile computing programming communication centric software essential 
programmers program designers exposed new levels complexity ensuring correct composition communication behaviours guaranteeing protocols 
proposes language simple distributed object oriented language augmented session communication primitives types 
provides flexible object oriented programming style structural interaction protocols prescribing channel usages signatures distributed classes 
develop typing system prove soundness respect operational semantics 
show typed program connection error communication error incorrect completion server client interactions 
results demonstrate consistent integration object oriented language features session types statically check consistent composition communication protocols 
distributed systems physically separated potentially mobile computational entities cooperate compete passing code data 
existing theoretical foundations successful sequential programming structured programming type disciplines programming languages require non trivial extensions distributed setting 
new issues arise setting including structure communication software guarantee security concerns confidentiality integrity identify correct behaviour concurrent programs safely discuss example optimisation distributed software 
scenario considering set users different locations interacting means object oriented code 
distributed objects popular programming paradigms today computing environments naturally extending sequential message passing oriented paradigm objects 
current partially supported royal society eu fet global computing initiative project dart ist epsrc advanced fellowship gr epsrc gr gr gr 
dezani yoshida ahern drossopoulou practice code written terms bare socket communications consists isolated method invocations returns way ascertain code conforms intended structure interaction 
quest frameworks enable expression structured interaction ways assure safety resulting interaction protocols structure concerns paramount importance 
session types introduced specify protocols communication describing sequence types entities read channel :10.1.1.45.1355
example session type int int bool expresses int values sent bool value expected input protocol completed 
session types provide natural way specify communication behaviour piece software allow verification pieces software safely composed 
session types widely describe protocols different settings calculus formalisms corba calculus side effects multi threaded functional language standard description language web services called choreography description language cdl :10.1.1.45.1355:10.1.1.110.4730:10.1.1.45.1431
knowledge integration session types object oriented language small core calculus attempted far :10.1.1.14.5415
argue seamless integration class objectoriented programming session types possible resulting combination offers powerful framework writing safe structured distributed applications formal foundation 
substantiate proposal language distributed object oriented language session types 
extending class method signatures include types sessions achieved clean integration session types class object oriented paradigm 
combination remote method invocation rmi standard distributed primitive objects session distributed primitives linear interactions obtained flexible high level programming style remote communication :10.1.1.45.1431
functionality branching selection constructs session types compensated methods natural notion branching objects 
subtyping branching types formalised standard inheritance mechanism :10.1.1.110.4730
include branching selection constructs include specialized construction conditional iterative session types 
example conditional session type int char float int expresses integer sent followed boolean 
boolean true character received float sent 
integer sent session complete 
similarly iterative session type int char float int expresses integer sent followed boolean 
boolean true character received float sent process iterate false sent 
integer sent session complete 
types allow express protocols require conditionals repetition channel 
distributed object oriented language session types focus session types include language features exceptions synchronisation serialisation class loading code agent mobility polymorphism recursive types correspondence assertions :10.1.1.10.1274:10.1.1.59.5149
believe inclusion features possible albeit necessarily trivial 
key point safety session communication channel linearity 
check linearity typing imperative object oriented setting object fields contain channels requires sophisticated types see example :10.1.1.45.1355
channel linearity comes creating private fresh channel name time session starts 
typing ensures communication current session uses new channel session completed occurrences channel 
way avoid need deal opening closing operations channels 
apart guaranteeing communications expected types soundness type system guarantees typed program connection error request accept channel type communication error simultaneous send receive channel incorrect completion server client interactions session started complete participants exception divergence unsuccessful attempt start session 
type system statically check consistent composition communication protocols 
soundness system weaker systems session types calculus processes :10.1.1.45.1355:10.1.1.110.4730:10.1.1.45.1431
fact systems assure perfect pairing processes willing communicate 
obtained simply checking compatibility type environments putting processes parallel 
system approach ensures communication safely evolve starting guarantee processes ready start session find companion 
difficult add system compatibility check environments ensure stronger soundness discussed chose avoid aim model open distributed system new processes appear run time global assumption safety liveness guaranteed 
remainder section illustrates basic ideas example 
section defines syntax language 
section presents operational semantics 
section illustrates typing system 
section devoted basic theorems type safety communication safety 
section concludes 
preliminary version 
example example demonstrates features 
describes situation seller employs agent sell item buyer best price possible note order write example naturally constructs part minimum language types float void methods parameters local variables conditionals easily added 
dezani yoshida ahern drossopoulou agent begins negotiations asking seller price minimum price 
agent sends price buyer 
buyer receipt price offer sends agent 
agent calculates offer exceeds minimum price notifies seller buyer accordingly 
offer exceed minimum price agent invites seller lower minimum price negotiation iterates 
note agent may communicate different buyer continue communicating seller 
example consists classes agent buyer seller shall discuss separately class agent extends object float price minprice seller asking minimum price float offer offer buyer bool float 
float 
bool connect buyer request float 
float 
bool send price offer receive send offer minprice return offer minprice void mediate float float 
float connect seller request float 
float 
float price receive minprice receive value true minprice receive class agent represents agent fields price store asking price minprice store minimum price 
signature method contains type channel float float bool indicating send float value receive float value send bool value 
body method agent asks connection buyer channel statement request matched statement accept node network 
general accept represents creation new server side socket java net class 
public channel name line class buyer variable value public channel name cases name analogous port instantiate port server listen connections 
execution proceeds node network contains statement request name variable value statement request similar creation new client side socket java net socket class 
name thought corresponding hostname port number server socket 
match execution continues new private channel created connect distributed object oriented language session types nodes 
execution proceeds concurrently occurrences occurrences replaced name just created channel 
public channel names channel variables play role placeholders session bodies replaced restricted fresh channel names 
method connection established body request agent sends asking price send price receives buyer offer channel offer receive 
lastly compares offer minimum price decides behalf buyer offer successful tells buyer send offer minprice 
signature method mediate contains type channel float float float iterative session type indicates receive floats send bool boolean true iterate session 
body method mediate asks connection channel receives asking minimum price channel attempts sale method returns boolean 
sends value channel seller value true iterates receiving new asking price channel 
class buyer extends object float price seller asking price float offer offer buyer void buy float 
float 
bool accept float float 
bool connect agent price receive offer send offer receive 
class buyer represents buyer fields price offer obvious meaning 
method buy buyer connects agent receives asking price calculates offer send 
receives boolean indicating seller agent accepted bid proceeds appropriate actions 
signature method buy contains type channel float float bool 
notice type describes session viewpoint agent dual buyer 
class seller represents seller fields price minprice asking minimum price 
type channel method sell mediate agent 
method sell starts calculating asking minimum prices 
connection channel established seller sends asking minimum prices newly created channel 
receives boolean value indicating negotiations need continue 
seller proceed body statement calculate new minimum price send channel agent 
process repeated seller receives false negotiations required 
dezani yoshida ahern drossopoulou example demonstrates session types particular branching iterative session types express repetition conditional execution channel 
class seller float price minprice asking price minimum price void sell float float 
float price 
minprice 
connect agent accept float float 
float send price send minprice value received true minprice 
send minprice example seen simplified object oriented version auctioneer example main difference type system correspondence assertions detect bad behaviours type correct system 
type system guarantees consistent composition communication protocols various participants 
guarantees communications expected types method buy line expression receive return float line expression return bool 
connection error line method mediate establishes connection channel appropriate type 
communication error line method mediate performs receive simultaneous receive channel 
incorrect completion server client interactions session line mediate started complete participants exception divergence 
particular notice iterations line successful 
distributed object oriented language sessions user syntax distinguish user syntax programs local node runtime syntax occurs runtime intermediate forms 
introduce user syntax fig 

extension fj mj dj omitting new distributed primitives introduced augmented primitives session communication :10.1.1.45.1355:10.1.1.59.5149:10.1.1.14.5415
earlier shown sessions class values objects containing session channels assigning session values session variables session types carrying session types nesting sessions 
constructs sufficient enforce repeated execution channel 
distributed object oriented language session types type bool direction 
part session session meth sig class sig csig csig class extends field session env class table ct ct class class class class extends field meth field field method meth expression true false new receive send request accept identifier value null fig 

user syntax metavariable ranges types channels expressions ranges class names ranges session types 
means input means output ranges indicates session 
metavariable describes parts session 
conditional session part sends boolean value proceeds value true value false 
similarly receives boolean value proceeds value true false 
iterative session part sends boolean value value true continues iterating 
value sent false session part finishes 
meaning similar 
note closing session appear conditional iterative session part 
supports design principle sessions closed level opened words responsibility closing session stays party opened 
prescribe channel usage method introduce session environments map channels session types 
method declarations shape tm tx standard addition 
class signature csig denotes class interface contains types fields superclass name method signatures :10.1.1.59.5149
provides lightweight mech dezani yoshida ahern drossopoulou type 
chan identifier 
value 
expression 
thread store network ct fig 

runtime syntax anism determining type remote methods 
assume csig available globally restrict generality standard implementations uniqueness class maintained digital signature 
contrast class tables containing method bodies maintained location basis 
syntax expressions standard pairs communication primitives 
lines express standard syntax parameter value receiver literals true false sequence expressions object creation assignment parameters fields field access method call 
lines describe communication pairs 
pair exchange values channels receive receives value channel send evaluates expression sends result second pair conditional communication receives value true continues expression evaluates boolean expression sends result result true continues third pair iterative communication receives value true continues iterates ends 
expression evaluates boolean expression sends result result true continues iterates ends 
pair establishing connections request clients accept servers 
channel denotes shared interaction point creating new channels 
request accept term called session body denotes block sequence expressions new channel created discarded session prescribes communication protocol opened request accept 
runtime syntax runtime syntax fig 
extends user syntax represents distributed state multiple sites communicating 
syntax uses location names thought ip addresses network 
metavariable extended runtime channel types denoting channel types method invocations 
identifiers values extended allow object identifiers denote instances classes 
shall distributed object oriented language session types frequently write id brevity shall call names 
extend expressions denoting null pointer error 
threads ranged says running parallel 
store contains local variables objects short hand sequence 
fn vn apply similar abbreviations sequences 
sequences contain duplicate names 
networks written comprise zero located configurations executing parallel 
denote empty network ct denote thread executing location store class table ct parallel composition networks identifier local binding standard fn fv denote set free names variables 
say class name occurs free expression contains new function fcl returns set free class names operational semantics section presents operational semantics extends standard small step call value reduction :10.1.1.14.5415
reduction relation modulo standard structural equivalence rules calculus written 
define multi step reduction def discuss interesting rules 
start listing evaluation contexts 
send notice request accept evaluation contexts 
request accept evaluation contexts allow session bodies run start session parts conditional iterative session run determining conditional branch selected iteration continue 
local expressions rules execution expressions correspond sequential part language standard :10.1.1.14.5415
local store modified rules involve local store local class table 
fig 
give rules object creation method invocation 
request evaluation context replace name channel replacing example session type state applying rule rn request receive accept send request receive accept send receive send execution stuck 
similar reasons accept context 
dezani yoshida ahern drossopoulou rc new fields new ct null ct dom ct rc 
mbody ct mtype ct ct fig 

expression reduction allocation new objects described rc new explicitly restricts identifiers representing freshness uniqueness address store 
function fields examines class signature returns field declarations method invocation rule rc function mbody ct looks local class table returns pair consisting method code formal parameter name 
function mtype looks global class signature returns type method 
receiver method body new store entry allocated formal parameter communication kinds communication rules remote method field invocation session communication inspired calculus rules 
fig 
defines reduction remote method field invocation rules congruence fourth rule structural 
rule rn fld allows reading location field object stored different location similarly rn allows code location assign value field stored different location rule rn describes remote method call location executes method call receiver object stored different location new runtime private channel shared created method call executed rule rc result safely sent back new private channel rn linear channel sense discarded 
session communication main session communication rules formalised fig 

rule rn describes opening sessions location requires session location accepts session values channel name new private channel created replaced session bodies standard way noting request request accept accept rn fld distributed object oriented language session types rn conf ct ct ct ct rn res rn par rn str fi ct ct vi ct ct rn ct ct ct ct rn domo ct ct chan receive ct send ct rn 
mtype fresh chan send ct receive ct null ct ct importantly fig 

network communication request request accept accept substitutions synchronisation channel names move inside nested sessions synchronising name 
freshness guarantees privacy linearity session communication notice stores associate values variables variable type channel name similarly dezani yoshida ahern drossopoulou rule rn formalises session communication sent value type series applications rule session completes channel type 
rules rn true rn false boolean exchanged value boolean execution proceeds second branches 
rule rn simply expresses iteration means conditional 
rn request ct accept ct ct ct fresh channel name rn send ct receive ct null ct ct rn true true ct ct ct ct rn false false ct ct ct ct rn ct ct 
null ct null ct fig 

session communication session types typing system distributed object oriented language session types type system kinds typing judgments 
judgments threads nets standard just tell certain assumptions types variables ids channels thread respectively net wellformed 
judgments shape environment defined thread net chan typing expressions need take account session types consumed input output communication prescribed session type takes place receive send instruction 
reason add session environments sides typing judgments giving shape environment type give session types channels evaluation call pre post session environment respectively 
notice request accept instructions contain session types connecting channels method declarations contain session environment session types channels avoid global assumptions session types channel names 
cost run time check session types request accept coincide starting sessions 
subsections discuss interesting rules 
mention standard subtyping denoted assume causes cycle judged class signature :10.1.1.14.5415
formed class tables methods classes class tables formed respect environment contain session environments methods 
prescribed rule checking method ok ok mtype environment propagated rules checking formedness classes class tables 
notice pre post session environments typing method body empty 
ensures send receive instructions inside sessions see discussing thread network typing 
dezani yoshida ahern drossopoulou expression typing rule typing expression composition illustrates session environments te seq post session environment typing pre session environment typing typing rule method calls te meth mtype demands method signature determined method signature look function contained environment 
session environments agree rule te seq 
type conform method type returned look function mtype 
session typing importance session environments expression typing clear rules typing send receive te send object te receive key observation cases typing consumes exactly output input type heads session type current channel typing send takes account typing modify session environment 
typing rules opening sessions te req fn dom te acc request fn dom accept denotes dual session type defined inductively substitution obeys conditions section 
notice name channel replaced fresh channel name may variable contains constant channels allows type nested session openings name request request 
distributed object oriented language session types key point rules ensure linear runtime session channels new session exactly receiver waiting receive sender waiting send guaranteed replacing opening channel fresh channel type post session environment typing ensures session completed evaluation notice appear 
remaining rules give types conditional iterative session types 
note iterations depending value received sent channel rules te te forbid communication open channel typing rules require communication receive send 
communication enclosed inner accept 
request 
constraint clearly necessary order get soundness communications theorem 
te te bool te te bool thread network typing rule tt start promotes expressions threads channels post session environment completed typed sessions pre session environment conform environment 
tt start si si thread notice send receive operations inside sessions pre post session environments typing empty 
rule tn conf states location typed network environment thread typed store class environment free classes superclasses denote set fcl locally available guaranteed requirement fcl dom ct dezani yoshida ahern drossopoulou condition 
tn conf thread ok ct ok fcl dom ct dom ct fcl ct dom ct ct net type safety communication safety expected type system section satisfies subject reduction property formulated follows 
theorem subject reduction 
ok ct ok ct ct ok thread ok ct ok ct ct thread ok net net 
proof generation lemmas substitution lemmas detailed analysis channel 
interesting subject reduction properties connection error occur request accept channel session type communication error occur net sends receives channel session begun required communications executed expected order session begun required communications executed situations occurs null pointer exception thrown computation diverges request accept instruction waiting dual instruction 
properties hold network obtained reduction initial network 
say network initial writing ni nn net derivable rule tt start empty session environments premises li ei cti ei user expression closed 
distributed object oriented language session types notice condition rule tt start satisfied send receive instructions inside method bodies natural choice object oriented paradigm 
order formulate properties add new constant connection communication error network rule ct ct clashes clashes receive send request accept occur premise rules fig 

words belong set clash receive send request accept vice versa 
prove initial nets reach configuration containing expressions 
theorem freedom 
suppose initial net contain exist 
proof theorem straightforward subject reduction theorem 
properties formulate soundness theorem theorem soundness 
initial net def rule rn 
produce diverge request accept instruction waiting dual instruction fn exactly application rule rn channel rule involving channel rn true application rules gives rn false application rules gives dezani yoshida ahern drossopoulou rule involving channel rn application rules gives 
soundness proof requires careful analysis evaluation order invariant properties networks 
get theorem completion sessions 
suppose initial net li ei cti irreducible 
ei values ej request accept 
session types successfully applied theoretical settings calculus multi threaded functional language practical settings corba web services description language :10.1.1.45.1355:10.1.1.110.4730:10.1.1.45.1431
aimed link language development engineering standardisation practice 
knowledge application session types distributed object oriented class programming language 
design aims restrict number novel features introduced object oriented language added pairs primitives standard session communication user syntax obtain simple typing system extending class method signatures contain usage channels assigned session types 
written example programs demonstrating express communication style natural programmers object oriented community 
worthwhile notice session types regular expressions limited shape denoted sum recursion 
branching types variant types recursive session types richer :10.1.1.110.4730
subtyping relation session types considered covariant input contravariant output allow change number branches branching types :10.1.1.110.4730
session types regular expressions inclusion regular languages induces natural notion subtyping simple interesting lacks covariance contravariance inputs outputs 
plan investigate extensions allow channels carry channels channels passed parameters methods 
particular want allow passing linear channels types parameter types hand order ensure linearity forbid types types local variables fields 
furthermore re evaluate design decision omitting selection primitives session types 
traditional session types function names included types sell float float float session type seller included float float float type channel sell 
design decision structure program primarily distributed object oriented language session types reflected classes methods method names part sessions types 
wish evaluate various designs sequence case studies develop type checking algorithms 
grateful anonymous referees kohei honda simon gay pointing errors examples weaknesses presentation 
indebted dimitris insightful comments 
presentation interesting questions suggestions participants particular rocco de nicola mark miller eugenio moggi davide sangiorgi 
surely subject strongly influenced useful interaction 

alexander ahern nobuko yoshida 
formalising java rmi explicit code mobility 
oopsla appear th annual acm sigplan conference object oriented programming systems languages applications 
acm press 

davide ancona giovanni elena zucca 
simplifying types calculus java exceptions 
technical report disi universit di genova 

gavin bierman matthew parkinson andrew pitts 
mj imperative core calculus java java effects 
technical report university cambridge computer laboratory april 

eduardo adriana gunter 
typechecking safe process synchronization 
entcs 

eduardo adriana gunter 
correspondence assertions process synchronization concurrent communications 
appear 

gilad bracha martin odersky david stoutamire philip wadler 
making safe past adding genericity java programming language 
oopsla pages 
acm press 

luca cardelli andrew gordon 
mobile ambients 
theoretical computer science 
special issue coordination le tayer editor 

dezani nobuko yoshida alexander ahern sophia drossopoulou 
distributed object oriented language session types 
preliminary proceedings 
www cs unibo 

edsger dijkstra 
discipline programming 
prentice hall 

sophia drossopoulou 
advanced issues object oriented languages course notes 
www doc ic ac uk scd teaching html 

sophia drossopoulou giovanni susan eisenbach 
flexible models dynamic linking 
esop volume lncs pages 
springer verlag 

manuel fahndrich robert deline 
adoption focus practical linear types imperative programming 
pldi pages 
acm press 

simon gay malcolm hole 
types subtypes client server interactions 
esop volume lncs pages 
springer verlag 

simon gay vasco vasconcelos ant nio 
session types inter process communication 
tr department computing university glasgow march 
dezani yoshida ahern drossopoulou 
kohei honda 
types dyadic interaction 
concur volume lncs pages 
springer verlag 

kohei honda 
composing processes 
popl pages 
acm press 

kohei honda vasco vasconcelos makoto kubo 
language primitives type disciplines structured communication programming 
esop volume lncs pages 
springer verlag 

atsushi igarashi benjamin pierce philip wadler 
featherweight java minimal core calculus java gj 
acm transactions programming languages systems 

naoki kobayashi benjamin pierce david turner 
linear types calculus 
popl pages 
acm press 

sun microsystems java home page 
www javasoft com 

sun microsystems java tutorial sockets 
java sun com docs books tutorial networking sockets 

robin milner joachim parrow david walker 
calculus mobile processes parts ii 
information computation 

benjamin pierce 
types programming languages 
mit press 

benjamin pierce davide sangiorgi 
typing subtyping mobile processes 
logic computer science 
full version mathematical structures computer science vol 


takeuchi kohei honda makoto kubo 
interaction language typing system 
parle volume lncs pages 
springer verlag 

antonio vasco vasconcelos ant nio 
typing behavior objects components session types 
volume entcs 
elsevier 

vasco vasconcelos ant nio simon gay 
session types functional multithreading 
concur volume lncs pages 
springer verlag 

jan vitek giuseppe castagna 
seal framework secure mobile computations 
internet programming languages volume lncs pages 

web services choreography working group 
web services choreography description language 
www org ws chor 
