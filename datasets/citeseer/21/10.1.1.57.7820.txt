architecture design adaptive object models joseph yoder federico ralph johnson software architecture group software architecture group software architecture group department computer science department computer science department computer science univ illinois urbana champaign univ illinois urbana champaign univ illinois urbana champaign urbana il urbana il urbana il yoder com cs uiuc edu johnson cs uiuc edu object oriented information systems share architectural style emphasizes flexibility run time adaptability 
business rules stored externally program database xml files code 
object model user cares part database object model code just interpreter users object model 
call systems adaptive object models users object model interpreted runtime changed immediate controlled system interpreting 
real power adaptive object models definition domain model rules integrity configured domain experts external execution program 
describes adaptive object model architecture strengths weaknesses 
illustrates adaptive object model architectural style describing framework medical observations fowler analysis patterns built 
keywords adaptive object model adaptive systems dynamic reflection reflective systems meta modeling meta architectures metadata patterns 

era business rules buried code coming 
users want change business rules writing new code 
customers require systems adapt easily changing business needs meet unique requirements scale large small installations 
information systems today need dynamic configurable quickly change adapt new business needs 
usually done moving certain aspects system business rules database easily changed 
resulting model allows system quickly adapt changing business needs simply changing values database code 
encourages development tools allow decision makers administrators introduce new products programming changes business models runtime 
permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
conference month city state 
copyright acm 
reduce time market new ideas months weeks days 
power customize system placed hands business knowledge 
architectures dynamically adapt runtime new user requirement called reflective architecture meta architecture 
focuses particular kind reflective architecture names 
called type instance pattern tutorial oopsla 
calls adaptive object model architecture 
systems seen adaptive object model business systems manage products sort extended add new products called user defined product architecture past 
systems called active object models dynamic object models 
martin fowler usually just name adaptive object model 
adaptive object model system represents classes attributes relationships metadata 
system model instances classes 
users change metadata object model reflect changes domain 
changes modify system behavior 
word stores object model database interprets 
consequently object model active change system changes immediately 
kind architecture represent insurance policies bill telephone calls check equipment configuration 
model workflow model documents model databases 
probably lot things just ones seen allowed talk 
noticed projects applying adaptive serious gap architects developers 
gap includes different point views design vs implementation fundamental abstractions elements problem 
due partly adaptive object model levels abstraction places changed 
adaptive object model extra machinery interpret execute rules define relationships attributes entities 
definitions external running program 
disconnection model behavior indirect 
programmer building machine execute model building model 
programmer doing 
developers just capable working kinds projects 
feel problem caused poor understanding technology 
clear understanding problem representation solution design solve 
adaptive object model style described architects don realize widely 
describes details adaptive architectural style 
describes results implementing adaptive object model observation pattern illinois department public health 
goal help people understand adaptive object models appropriate correctly 

style adaptive object models provide alternative traditional object oriented design 
traditional object oriented design generates classes different types business entities associates attributes methods 
classes model business change business causes change code leads new version application 
adaptive object model model business entities classes 
modeled descriptions interpreted run time 
business change needed descriptions changed immediately reflected running application 
adaptive object model architectures usually smaller patterns 
separates entity 
entities attributes implemented property pattern pattern second time separate attributes 
strategy pattern define behavior 
common entity relationship modeling adaptive object model usually separates attributes relationships 
usually interface define new 
object oriented languages structure program set classes 
class defines structure behavior objects 
object oriented systems generally separate class kind object introducing new kind object requires making new class requires programming 
developers large systems usually face problem having class create unknown number subclasses 
subclass abstraction element changing domain 
differences subclasses small parameterized setting values objects representing algorithms 
unknown subclasses simple instances generic class see new classes created dynamically run time means instantiation generic class 
objects created traditional hierarchy created making explicit relationship type 
presents simple example hierarchy represented class instances class entity 
replacing hierarchy possible behavior subclasses similar broken separate objects 
primary subclasses attributes 
factory scheduling system replace subclasses product machine instances 
airline scheduling system replace subclasses airplane instances 
telecommunications billing system replace subclasses instances 
observation model represent relationship observation see 
cases type object primarily data values behavior pattern works 
subclass subclass entity fy pt tvd 
property attributes object usually implemented instance variables 
class defines instance variables 
objects different types class attributes vary 
solution implement attributes differently 
attribute different instance variable instance variable holds collection attributes 
done dictionary vector lookup table 
example property holds name attribute type current value 
entity string entity property name string type value properties adaptive object model architectures contain property patterns 
pattern divides system entities 
entities attributes defined properties 
property type called propertytype specify types properties entities 
represents resulting architecture applying patterns call 
keeps track name property value property number date string result object model similar objects differ having different properties 
example system just reads writes database record set properties represent single record propertytype represent table 
entity type properties property properties propertytype type different kinds objects usually different kinds behaviors 
example records need checked consistency written database 
tables simple consistency check ensuring numbers certain range complex consistency checking algorithm 
property isn eliminate need subclasses 
adaptive object model needs way describe change behavior objects 
strategies strategy object represents algorithm 
strategy pattern defines standard interface family algorithms clients 
object behavior defined strategies behavior easy change 
application strategy pattern leads different interface different class hierarchy strategies 
database system strategies associated property validate 
strategies public operation validate 
strategies associated fundamental entities modeled implement operations methods 
strategies evolve complex business rules built interpreted runtime 
primitive rules combination business rules application composite pattern 
uml diagram applying pattern twice property pattern adding strategies representing behavior 
resulting architecture seen adaptable systems knowledge levels described 
business rules workflow nature micro workflow architecture described manolescu 
describes classes represent workflow structure combination rules repetition conditional sequential forking primitive rules 
rules built runtime represent particular workflow process 
rules built table driven systems may grammar oriented 
grammar oriented approach called grammar oriented object design 
complicated rules dynamic guis usually hardest part adaptive object models generic frameworks 
type properties properties rules entity relationship attributes properties usually refer primitive data types numbers strings dates 
associations usually way 
relationships properties refer entities 
relationships usually way associations gene father carol carol daughter gene 
distinction long part classic entityrelationship modeling modem object oriented modeling notations usually part adaptive object model architecture 
distinction leads subclasses properties attributes relationships 
way separate attributes associations property pattern twice attributes associations 
way subclasses property attribute association 
association called accountability fowler know cardinality 
third way separate attributes associations value property 
suppose class value subclasses immutable 
typical values numbers strings quantities numbers units colors 
property value entity represents association property value primitive data type attribute 
interesting note language designers feel need represent relationships designers systems adaptive object models 
representing relationships objects allows runtime manipulated allowing power user immediately adapt changing business requirements 
user interface defining types main reasons design adaptive object model enable users domain experts change behavior system defining new entities relationships rules 
goal enable users extend system programmers 
developers define new entities rules common build specialized user interface defining 
example insurance framework user interface defining new kinds insurance including rules calculating price 
telephone billing system user interface defining geographical regions monetary units billing rules different geographical regions expressed various monetary units 
argos school administration system user interface defining new document types workflows 
types stored centralized database 
means defines new types applications having recompiled 
applications able new types immediately times cache type information refresh caches able new types 
alternative having user interface creating editing type information write programs 
fact programmers ones creating type information easier writing programs usual programming environment purpose 
way get non programmers maintain type rule information give simple tools 
design adaptive object models design adaptive object models involves major activities defining business entities rules relationships developing design engine instantiating manipulating entities rules application developing tools describing entities rules relationships 
activities achieved applying previously mentioned patterns conjunction design patterns composite interpreter builder 
composite building dynamic tree structure types rules 
example entities composed dynamic tree structure composite pattern applied 
builders interpreters commonly building structures meta model interpreting results 
just patterns framework building adaptive object models 
adaptive object model framework sort generic framework building 
set patterns commonly applied adaptive object model architectural style 
adaptive object model build hardest know patterns understand 

example medical observations people built adaptive object models seen 
built particular described observation pattern 
applications illinois department public health dph manage information patients people close patient parents doctors 
programs vary kind information representation manage 
core pieces information common applications shared applications 
typically information shared dph applications set observations people 
observation describes phenomenon period time 
observations play large role medical domain associate specific conditions measurements people point time 
typical medical observations eye color blood pressure height weight 
way implement observations build class hierarchy describing kind observation associate observations patients 
approach works domain known little change set observations 
example applications dph screens newborn infants genetic diseases 
application certain observations infant time birth height weight feeding type age mother hepatitis indication 
natural implementation create class infant create set classes associate infant capture observations 
application high risk infants 
application needs capture observations infant infant mother hiv status drug alcohol history hepatitis background age weight birth 
type objects properties applications shared similar hierarchy required observations captured program eventually applications 
noted really basic kinds observations 
kind deals discrete set values blood type eye color 
kind continuous values weight grams height feet inches 
uml class diagram implementing complete observation model fowler book page 
model class called linked category 
model replaced traits categories replaced literal values class model 
dph system includes property pattern observation property person 
observations features duration properties properties observations observations properties 
quantity trait symbol class diagram basic observation model simple instance diagram example person named smith 
smith height observation value feet eye color observation value blue 
note observation object height quantity object representing feet second observation value blue 
value entered observation observation validation 
shown instance kind observation 
add new kind observation create new instance add model 
allows new type observation created requiring new version application 
name am value unit type value instance diagram basic observation model applying composite pattern model represent observations 
observations complicated 
example observation patient composed independent measures hdl ldl 
hdl ldl modeled observations 
hdl observation independently ldl observation considered hdl observation value high 
example composite observation blood test results 
single blood test contain observations 
may measurements white blood cell count may traits blood types 
observation patient health includes observations blood pressure pulse vision reflexes 
fowler model directly consider multi value observations 
fowler allows observations modeled independent observations doesn treat group observations single observation 
model allows compound units observations represent values area square yards speed feet second 
composite observations observations composed independent observations 
user perspective say units atomic observations need combined 
fowler model allows observations associated allow observations linked diagnostic manner example thirst indicates diabetes 
useful concept medical domain match wanted represent multi valued observations 
composite pattern allows observations composed observations 
observation composed observations hdl ldl 
composition allowed capture compound units observations allowed complicated observations 
easier observations hdl independently observation part 
example blood pressure instance contain kind observation composite pattern 
way possible define complex observation basic atomic ones 
pressure systolic pressure observation blood pressure observation composite observation shown 
notice instance type instances measurement associated instances example 
helps clarify difference observations 
applying strategy pattern places constraints value observation type 
way implement constraints responsible checking value observation legal 
knows set possible values 
sets different observation quantifying presence illness possible values unknown 
sets objects tell value valid 
just kinds observation types measurements traits kinds 
represents range measurements represents set traits 
validator just algorithm telling value valid strategy 
resulting architecture shown 
unit unit quantity ua unit family quantity nt des quantity am ou nt architecture observation validation phenomenon symbol boolean observation corn observation re ate ate prim values quantity ator unit unit collection collection symbol class diagram final architecture just describing types values expecting store variable 
having classes representing traits measurements single class representing model measurements traits 
represents trait measurement depends class 
observation model validators represent strategies deciding value observation valid 
business rules validators represented parameterizing differences valid results different types 
analysis revealed models complicated business rules allowed composite business rules logic 
final observation architecture shows resulting class diagram implementation observations 
observations 
observation associated describes structure observation hangs validation rules relevant validator 
validate structure values 
takes care structural properties observation describing 
example create validate kind defines structure 
describe possible quantity discrete values validation rules 
note instances class understand method responsibility directly delegated associated observation 
enhanced allow multiple values 
example language person understands set 
interval set quantities describe sets valid values 
validation checks components valid 
enhanced allow composite function validating types observations 
knows create instances type 
trivial structure structure correctly established 
typical implementation factory creating observations 
final architecture relationship example 
useful defining set observations party system attached 
user interfaces defining types provided tools creating maintaining instances hierarchy validator hierarchy 
software developers analysts create new types observations define validation business rules easily 
instances created type editor type editor 
developer business expert define types observations application 
instances discrete validator editor validator editor assist developers business experts creating maintaining validation business rules 
created selecting list observations part component 
named associated validator 
define primitive types observation values relevant validating business rules 
phenomenon validation policy allows multiple values phenomenon va id io ir policy available 
included 
refactoring updating database took days change mapping schema classes update table definitions migrate data 
ir ranges unit new range editors version editors required analyst developer understand business rules build observations early versions editor include error checking 
common software development energy put developing application put developing support tools 
answer clear usually depends amount resources available amount applications maintained pain caused editors 
example model result new requirement produced user review 
users required observations value examples requirement observations ethnicity language race 
developers decided create new instances 
new collection appropriate primitive type language ethnicity race 
unfortunately new language needed added system needed edited 
similarly needed select value observation designate composites wanted select 
just don select observation doesn imply saying 
modeling values language creating certain undesired meaning added system 
solved problem changing cardinality association observation possible values making responsible knowing allows multiple values 
changing documentation took minutes changing smalltalk code took hours name validator editors 
implementation issues primary implementation issues need addressed developing adaptive object models store model database domain elements user maintain model 
adaptive object models expose metadata regular objects means metamodel stored databases known techniques 
object oriented databases easiest way manage object persistence 
possible manage model persistence relational database 
example adaptive object model distributed number different sites 
site database manager ranging single user databases powerful multi users database managers 
describe standard ways mapping objects relational databases 
developed mapping object standards combination techniques 
application persistence mechanism metadata domain repository namespace objects tl xm xmi storing retrieving metadata possible store metadata xml extensible markup language xmi xml metadata interchange format 
note matter metadata stored system able read storage populate adaptive object model correct configuration instances 
gui issues needed considered implementing dynamic architecture 
model part example easy create new observation domain objects values need entered final users 
impractical resource demanding develop dedicated widgets kind observation 
solution develop set widgets able get information metamodel customize metadata 
needed half dozen different types widgets differed validation business rules described 
example presenting ranged value discrete set values list textual string 
types guis developed associated types 
differences types values displaying validating 
example seen application developed dph screening accepted country see 
application captures observations people enter country 
widget bottom half observation 
observations example ranged values blood pressure pulse temperature discrete values heart lungs abdomen skin 
introducing observation model tracking system delicate task 
developers hard understand model documentation significant parts model stored metadata database 
result growing numbers mistakes duplications 
example observations measuring height different units inches centimeters feet created included quantity model able handle unit conversions 
part solution develop test cases developers running examples order understand model worked 
initial period learning experimentation developers system able successfully create remaining observations just days 
people started seeing power model easier change business rules classes code debug maintain 
model able store metadata wellestablished mapping relational databases straightforward developer analyst put data database 
learn objects saved database proper semantics describing business rules 
common solution develop editors programming tools assist users black box components 
part evolutionary process adaptive object models sense black box frameworks mature need editors support tools aid describing maintaining business rules 

consequences people building systems metadata adaptive object models ground variety reasons 
ecoop oopsla workshop participants identified issues relating want build types systems reasons cause adaptive object models fail 
main advantage adaptive object model ease change 
adaptive object model system constantly changing want allow users dynamically configure extend system 
adaptive object model lead system allows users program programming 
alternatively adaptive object model evolve domain specific language 
turning program adaptive object model usually smaller number classes 
information encoded program encoded database 
new class structure doesn change 
changes specification lead changes content database 
main business case adaptive object model possible develop change software quickly 
adaptive object models reduces time market giving immediate feedback new application looks works allowing users system experiment new product types 
noted higher initial cost associated developing adaptive object model 
primarily harder develop general solution problem 
usually requires iterations 
customer feedback important 
important know customers really 
going programmers changes framework add new business rules going users application 
iterating regularly releasing software help ease problem paying framework help give needed customer feedback framework evolves 
primary disadvantage systems hard build 
harder understand existing object systems interpreter written objectoriented programming language adaptive object model interpreted 
classes represent business abstractions information business database 
adaptive object models generally need tools support guis defining objects system 
adaptive slower usually interpreting representation object model 
experience lack understanding bigger problem lack speed 
adaptive object model requires system interpret model 
adaptive object model embedded system execution 
adaptive require adequate software support 
adaptive object models leads domain specific language 
easier users understand domain specific language general purpose language developers adaptive object model inherit problems associated developing language providing debuggers version control documentation tools 
problems involved training 
ways problems problems faced 
adaptive object models solution problem 
require sustained commitment investment flexibility power harder understand maintain 
undertaken products rules associated products rapidly changing users demand highly configurable systems 

alternatives related techniques applied years moving business rules code making systems adaptable new requirements 
best known alternatives related techniques building types systems code generators generarive programming metamodeling systems business rules research 
code generators produce executable code sourcecode 
technique focuses automatic generation systems high level descriptions 
context arguable high level description acts meta model generated system 
related adaptive object model functionality systems directly produced programmers specified domain related constructs 
editors commonly built describing metadata generating code 
techniques adaptive object models primarily decouples meta model system 
adaptive object models immediately reflect changed business requirement code generation recompilation 
generarive programming provides infrastructure transforming descriptions system code 
generarive programming deals wide range possibilities including aspect oriented programming intentional programming 
generarive programming exclude adaptive object models techniques deal generating code descriptions 
descriptions provided primitive structures elements evolve visual language domain 
file view options help address st urbana il champaign phone number type fii catholic cha assigned site 
nelson health visited 
nel health blood pressure pulse beats temp weight nml abn description nml abn spine skin lungs neurological abd 

hes std tracking system central concept generative programming generarive domain model 
generarive programming model cover family problems just solution application 
furthermore high level domain specific representation allows specify define concrete instance family 
configuration knowledge maps problem description solution space 
key point possible technology mappings generarive domain model 
domain specific specification means implemented new textual graphical language implemented right programming language enumeration types realized wizards gui forms 
mapping specification solution space done code generation dynamic reflection including adaptive simply factory pattern name alternatives 
cases embedded systems static configuration sufficient case code generation appropriate 
cases dynamic configuration reconfiguration necessary case dynamic metaprogramming adaptive object models way go 
ideally encode configuration knowledge just form able decide static dynamic configuration independently form context 
closely corresponds partial evaluation 
think adaptive object model possibility encode adaptive object model able interpret compile dynamic flexibility away time 
background comparison adaptive object models generarive programming 
generarive programming focuses system families adaptive object models system families code frameworks 
adaptive object model focuses objects name suggests generarive programming independent oo 
adaptive object model possible technology mapping generarive programming 
metamodeling techniques include variety approaches generarive nature 
general techniques focus manipulating model meta model system supporting valid transformations representations 
quite attention meta model model generating model final application reflect business requirements 
related adaptive object models meta model describing reflect business domain usually special gui tools manipulating model metadata usually interpreted creation actual model 
primary difference metamodeling techniques provided case tools generate code descriptive information adaptive object models interpret descriptive information run time 
change business information case tool generate new program compile release users 
adaptive object model change business information usually stored shared database running systems access 
information available system immediately reflects new changes having release new system 
riehle describes uml virtual machine adaptive object model immediately reflect changes metamodel 
table driven systems early database days 
quite differences business rules parameterized 
storing differences database running system interpret changes database table appropriate function called differing values database 
built triggers stored procedures 
lot done looking ways represent business rules specifically allowing rules dynamically change 
couple workshops sponsored oopsla focused just topic papers describing working systems research area 

adaptive object models provide alternative usual object oriented design 
conventional object oriented design generates classes different types business entity associate attributes methods 
business change system needed developer change code release new version application change take affect 
adaptive model business entities class objects 
modeled description structures constraints rules domain 
description interpreted translated meta model drives way system behaves 
business change needed descriptions change immediately reflected running application 
important design patterns needed implementing types dynamic systems properties composite strategy 
architects develop types systems usually proud claim best systems developed 
developers extend maintain usually complain hard understand convinced great architect claims 
usually lack understanding types systems 
architectural style useful systems specifically systems emphasizes flexibility need dynamically configurable 
style documented hard understand primarily due levels abstraction 
important prepared users system try model cases add rule language definitions 
expect adaptive object model grow meet descriptive power users need keep actively involved making sure needs covered doesn get hand similar framework author 
describes architectural style adaptive object models including process developing advantages disadvantages 
hope help architects developers understand develop maintain systems adaptive object model 

acknowledgments people valuable input greatly improved specifically ali john brant krzysztof czarnecki brian foote martin fowler garrido mike manolescu brian reza nicolas dirk riehle don roberts andrew rosenfeld gustavo rossi rebecca wirfs brock 

ali 
rule object pattern language 
proceedings plop 
technical report wucs dept computer science washington university department computer science october 
ali 
grammar oriented object design seamlessly map business models component software architectures proceedings international association science technology development pittsburgh pa krzysztof czarnecki ulrich eisenecker 
programming methods tools applications 
addison wesley 
peter coad object oriented patterns 
communications acm 
september 
brian foote joseph yoder 
metadata active object models 
proceedings plop 
technical report wucs dept computer science washington university department computer science october 
url cs uiuc edu plop plop 
martin fowler 
analysis patterns reusable object models 
addison wesley 

eric gamma richard helm ralph johnson john 
design patterns elements reusable object oriented software addison wesley reading ma 
erich gamma richard helm john design patterns applied tutorial notes oopsla 
david hay 
data model patterns convention thought 
house publishing 
wolfgang keller jens 
accessing relational databases 
pattern languages program design 
wesley 
ralph johnson bobby wolf 
type object 
pattern languages program design 
wesley 
ralph johnson jeff user defined product framework 
url st cs uiuc edu pub papers udp manolescu 
micro workflow workflow architecture supporting compositional object oriented software development 
phd thesis computer science technical report uiucdcs 
university illinois urbana champaign october urbana illinois 
alan perkins 
business rules meta data 
proceedings th international conference technology object oriented languages systems 
page 
blanc 

meta modeling formalisms rule model transforms comm 
ecoop workshop sophia antipolis cannes france june 
nicolas joseph yoder 
adaptive object models metamodeling techniques ecoop workshop reader lecture notes computer science springer verlag 
riehle johnson 
dynamic object model 
proceedings plop 
technical report wucs dept computer science washington university department computer science october 
url ierr cs uiuc edu plop plop 
riehle lassen 
architecture uml virtual machine 
proceedings conference object oriented program systems languages applications oopsla october 
don roberts ralph johnson 
patterns evolving frameworks 
pattern languages program design 
wesley 

mckee 
extending business objects business rules 
proceedings technology object oriented languages 
page roy kelso standing 
visual programming environment software development 
proceedings software engineering education practice 
page 
rumbaugh blaha premerlani eddy lorensen 
object oriented modeling design prentice hall 

reflective repository framework 
implementing application frameworks wiley 
page 
yoder johnson wilson 
connecting business objects relational databases 
proceedings plop 
technical report wucs dept computer science washington university department computer science october 
url cs uiuc edu plop plop 
joseph yoder brian foote dirk riehle michel 
metadata active object models workshop results submission oopsla addendum 
joseph yoder reza 
metadata adaptive object models ecoop workshop reader lecture notes computer science vol 
springer verlag 
joseph yoder ralph johnson 
implementing business rules adaptive object models 
business rules approach 
prentice hall 

