percolation search power law networks making unstructured peer peer networks scalable nima department electrical engineering ucla nima ee ucla edu introduce scalable searching protocol locating retrieving content random networks power law pl heavy tailed degree distributions 
proposed algorithm capable finding content network probability time log total traffic provably scales sub linearly network size protocol finds contents reliably node network starts unique content 
scaling behavior size giant connected component random graph heavy tailed degree distributions bond percolation heart results 
percolation search algorithm directly applied unstructured peer peer networks gnutella limewire file sharing systems naturally display heavy tailed degree distributions scale free network structures scalable 
example simulations protocol limewire crawl number network consisting links nodes show snapshot networks traffic reduced factor achieving hit rates greater :10.1.1.139.1580
motivation peer peer networking systems consist large number nodes computers operate decentralized manner provide reliable global services query resolutions database searches ad hoc point topoint communications cluster computing 
existing schemes broadly categorized types unstructured networks networks include popular music video download services gnutella limewire kazaa morpheus 
account millions users dynamically connected ad hoc fashion creat oscar department electrical engineering ucla ee ucla edu roychowdhury department electrical engineering ucla ee ucla edu ing giant federated data base 
salient feature networks data objects global unique ids queries done set key words 
structured networks include systems development including tapestry chord past viceroy characterized fact content item unique identification tag key bit hash content common choice leading popular characterization networks dht distributed hash table systems 
opposed unstructured networks millions users structured systems various stages development clear system best suited provide reliable load balanced fault tolerant network 
unstructured searches key words constitute dominant mechanism locating content resources merging mining existing heterogeneous sets data bases 
unstructured networking continue remain important application domain 
spite great popularity unstructured networks systematic designs provably robust scalable networks proposed networks currently ad hoc ingenious designs 
major problems designing unstructured systems lack systematic protocols generating global networks predictable topological properties number studies shown structures existing networks complex network characteristics including approximate power law degree distributions small diameter tolerance node deletions client protocols guarantee global emergence scale free networks tunable properties implemented 
addressed open problem provided client level distribution said power law pl distribution called exponent distribution 
protocols guarantee emergence pl networks tunable exponents 
ii scalability straightforward approach query resolution order find object nodes network need addressed leading total queries network single query 
results significant scaling problems ripeanu estimated december gnutella traffic accounted internet backbone traffic :10.1.1.139.1580
reviewed section number ad hoc measures ranging forcing ultra peer structure network random walk protocols searching content proposed 
measures provides true solution underlying scalability problem 
iii vulnerability targeted attacks known crawl networks identify high degree nodes quite quickly potentially disrupt network attacking high degree nodes 
protocols identifying compensating attacks recovering efficiently attack disrupted network designed 
provide systematic solution scalability problem unstructured networks 
show perform scalable parallel search random power law networks exponents heavy tailed degree distribution networks variance larger average degree node starts unique content queries randomly contents nodes section 
key steps search algorithm content caching initial time replication node content list directory nodes visited short random walk ii query implantation node wants query executes short random walk implants query request nodes visited 
iii bond percolation probabilistic broadcast scheme propagating queries graph theoretic terms implementation bond percolation underlying networks 
example pl network exponent maximum degree kmax show con tent network probability time log generating traffic log kmax kmax query 
kmax cn case random pl network traffic scales log query kmax case grown graphs traffic scales log query 
design protocol fairly involved theoretical concepts final protocol straightforward easy implement 
provide simulation analytical studies improvements accrued percolation search algorithms implemented gnutella crawl networks section iv 
traffic scaling problem prior scaling problem associated key word searches networks described terms gnutella real world network employs broadcast search mechanism allow searching computer files 
various additions original protocol model essentially query unique identifier time live ttl 
node receives query checks identifier verify processed query 
node previously processed query checks local files responds query finds match 
ttl greater decrements ttl passes query nodes connected node received query 
unique identifier prevents loops query routing 
ttl greater diameter network query passes link exactly nodes receive query 
means average node send receive query number times equal average degree network means total communication cost query 
node process queries 
problem manifests important ways 
low capacity nodes quickly overloaded fragment network second total traffic node increases linearly size network 
give idea magnitude communication required ripeanu estimated december gnutella traffic accounted internet backbone traffic :10.1.1.139.1580
account important attempts mitigating traffic scaling problem 
ultra peer structures cluster designs non uniform architecture explicit hierarchy quickest fix 
motivated fact nodes network homogeneous large fraction nodes small capacity dial modems small fraction virtually infinite capacity 
idea assign large number low capacity nodes ultra peers 
ultra peer knows contents leaf nodes sends relevant queries 
ultra peers perform usual broadcast search 
ultra peer solution helps shield low bandwidth users design non uniform explicit hierarchy imposed nodes 
fact level hierarchy scalable strict sense 
growth mitigated somewhat ultra peers discuss section 
believed happened original gnutella august 
network problem start appear ultra peers protocol augmented accommodate third level hierarchy 
strict theoretical sense traffic scales linearly constant factor determined average number nodes ultra peer original gnutella system 
results considered alternative artificially imposing hierarchical structure percolation search algorithm search automatically ultra peer subnetwork external hierarchy needs imposed 

random walk searches content replication lv analyze random walk searches file replication 
random walk search idea simple query random walker starts initiator asks nodes way file finds match 
replicas file network query successfully answered steps 
assumed fraction nodes file consider case depend probability qi requesting content show assumptions performance optimal qi 
scheme disadvantages 
high connectivity nodes incoming edges random walks high connectivity nodes 
rare item low connectivity node 
mitigate problems suggests avoiding high degree nodes topology 
scheme scalable strict sense uniform caching assumption satisfied design requires replications content assuming node unique content require total replications average cache size 
scaling differs constant factor straightforward scheme nodes caching files 

random walk power law graphs contrast approach adamic proposed algorithm takes advantage existence high degree nodes random walker starts node resolve query 
step walk scans neighbors second neighbors node visits hits 
power law graph random walk quickly converges high degree nodes 
nodes expected neighbors answer queries 
attempt derive scaling behavior search time size network analytically 
scheme suffers number drawbacks see details actual performance algorithm far worse theoretically predicted scaling laws 
example scanned predicted scaling actual scaling observed power worse 
ii random walk search serial operation assuming predicted scalings accurate search time finding node content network polynomially long example value observed early gnutella networks predicted search time scaling 
iii shortest search times obtained expense large cache size requirements node 
noted show long network topology random appropriately heavy tailed degree distribution pl networks exponent design search protocol characteristics node start unique content assumption relative abundance content necessary search algorithm succeed 
ii parallel probabilistic broadcast search performed sequential random walk search protocols discussed finds content residing low degree high degree node probability time logarithmic size network 
iii algorithm truly decentralized carried local decisions iv explicit hierarchy central control needs imposed operation network 
percolation search algorithm scaling properties percolation search algorithm described follows content list implantation node network size duplicates content list directory random walk size starting 
exact form depends topology network pl networks general sub linear function total amount directory storage space required network nl average cache size 
note borrowing terminology gnutella protocol length implantation random walks referred ttl time live 
ii query implantation start query query request implanted random walk size starting requester 
iii bond percolation search begins node query implantation starts probabilistic broadcast search sends query neighbors probability qc qc percolation threshold 
derive scaling performance measures algorithm 
derivations follow steps define high degree nodes compute number high degree nodes network 
second show probabilistic broadcast step performing bond percolation query routing step query received members connected component implant query belongs 
show diameter connected components log query propagates quickly 
third show random walk length starting node pass highly connected node probability approaching 
ensure pointer content owned highly connected node ii implant query high degree nodes 
examine scaling maximum degree network kmax give scaling query costs cache sizes terms size entire network show cache size query cost scale sublinearly scale log proper choice kmax 
high degree nodes section define notion high degree node 
node degree say high degree node kmax 
assume deal random power law graphs degree distribution pk ak kmax riemann zeta function 
approaches approximate value quickly kmax gets large considered constant 
number high degree nodes kmax kmax decreasing positive dk dk dk bound max kmax max kmax kmax max shown 
discuss sec max tion choices scaling kmax 
put prior limit kmax scale 
discuss may consider kmax 
note scaling law gives constant number high degree nodes system scales 
second gives 
scaling sublinearly sections show explicitly identifying arranging high degree nodes network access resources network efficiently searchable 
high degree nodes giant component conventional percolation studies guaranteed long qc constant independent size network giant connected component graph 
case pl networks limn qc example qc log kmax pl net kmax exponent traffic number edges traversed scales nq afford constant qc traffic scale linearly 
percolate constant threshold multiple threshold qc 
consider problem detail separate 
result follow random edge graph probability reaches infinite component kmax constant depends kmax 
high degree node kmax degree average number edges high degree node connect infinite component kmax kmax kmax 
probability high degree node link infinite component kmax kmax kmax average number degrees high degree node giant component probability high degree node edge giant component independent kmax 
scale kmax expect high degree nodes stay connected giant component 
larger decreasing particularly 
remains shown diameter connected component order log 
see log approximate formula log diameter random graph size average degree know size graph nz kmax average degree approximately 
diameter giant component log log nz kmax log log log kmax log 
log point main result 
cache content high degree nodes query percolation starting high degree node find content looking 
addressed node find high degree node 
section show short random walk network reach high degree node high probability gives final piece need network searchable nodes 
random walks reach high degree nodes consider random pl network size maximum node degree kmax 
want compute probability randomly chosen link arrives high degree node 
find probability consider generating function degree nodes arrived random link kmax xk kmax arriving node degree greater kmax results probability kmax kmax 
degrees nodes network independent step random walk independent sample trial 
probability reaching high degree node steps steps high degree node encountered random walk path high constant probability 
need compute 
decreasing positive dk dk dk bound sums 
probability arriving node degree greater kmax kmax kmax log kmax log kmax log kmax log kmax get log 
log kmax log kmax steps reached high degree node 
probability arriving node degree greater kmax kmax kmax ck max kmax 
get 
max max steps reached high degree node polynomially large kmax logarithmically large case 
sequential random walk requires max time steps traverse max edges query implantation time dominate search time making search time scale faster log 
recall percolation search step require log time irrespective value 
log time parallel query implementation scheme described search time independent 
communication cost traffic scaling time want cache content send random walk edges 
query reach giant component edge passes probability don reach giant component constant number edges pass query 
total communications traffic scales qe qc 
qc 
max 
log kmax gives log kmax constant gives maxn section showed number high degree nodes max 
know log kmax max 
rewrite communication scaling terms high degree nodes 
see communication costs scales linearly square length walk high degree nodes 
meets intuition high degree nodes nodes store cache answer queries 
section discuss explicit scaling kmax get communication cost scaling function table shows scaling cache communication cost see sublinear communication cost scaling maximum degree kmax ways generate random pl network fix kmax normalize distribution pk ak kmax kmax 
construct random pl graphs samples drawn distribution 
reasons choice kmax recommended literature scaling calculations table follow upper bound 
ii priori bound maximum placed samples drawn distribution pk ak quite straightforward show surely kmax 
kmax cn method generating random pl graphs 
potential problem larger values kmax method ii assumption links chosen independently violated 
random graph assumptions shown hold maximum degree power law random graph kmax 
necessarily mean scaling calculations previous section hold kmax 
fact extensive largescale simulations see section suggest get close poly logarithmic scaling traffic log predicted scaling calculations section 
practical reasons bounding kmax 
grown random graphs kmax scales grown random graphs display inherent correlations compare scaling predictions performance search algorithm implemented grown graphs 
scaling laws relevant systems correspond case bounded kmax 
second high degree nodes handling bulk query traffic preferable keep maximum degree low 
example traffic generated order maximum degree kmax providing balance traffic traffic handled high degree nodes individually 
case cache size query cost log log case cache size query cost log log table 
scaling properties proposed algorithm kmax top case kmax bottom case 
simulations random pl networks gnutella crawl networks figs 
provide simulation results verifying performance scaling predictions analysis previous section 
note simulations ttl refers length random walks performed content list replication query implantation 
concluding remarks novel scalable search algorithm uses random walks bond percolation random graphs heavy tailed degree distributions provide access content node probability 
hit rate unique copy copies fraction links traversed 
considered unique replica content exist network 
performance search algorithm improves considerably predicted values realistic case copy contents exist network 
example case replicas content randomly spread network considered pl network average degree 
contents original traffic 
concepts involved design search algorithm deep theoretical underpinnings implementation straightforward easily incorporated software system protocol 
extensive simulation results random pl networks gnutella crawl networks show unstructured networks scalable 
ongoing involves design systematic protocols guarantee emergence scale free network topologies participating nodes different bandwidth capacities 
example local protocols allow different categories nodes different degree distributions 
dominant categories nodes existing networks modems dsl subscribers connected high speed connections 
modem users expected constant maximum degree network desired degree distribution category exponential distribution 
categories heavy tailed degree distributions different cut offs 
protocols heterogeneous sets nodes characteristics networking protocol client level nodes node seeking new connection need know category nodes network ii different categories nodes tune degree respective distributions local decisions refusing accept connections logging faster rate 
added advantage nodes having declare belonging particular category depending hit rate fraction links traversed try try tries tries tries 
performance percolation search algorithm gnutella crawl graph hit rate function fraction links search limewire crawl number 
crawl covers links nodes 
hit rate different number trials depicted separately 
ttl query content implant length 
shows snapshot network traffic reduced factor hit rate greater attempts 
available resources dynamically part category choice 
iii long number nodes willing high connectivity degree distribution emergent network guaranteed mixture heavy light tailed distributions 
shown networks different categories nodes percolation search algorithm exhibits favorable scaling features discussed 
naturally shields nodes light tailed degree distributions traffic 
percolation search algorithm combined new generation networking protocols potential lead systematic truly decentralized designs scalable robust unstructured networks 
peer peer kazaa media desktop kazaa website www kazaa com help htm 
homepage www morpheus com index html 
homepage www com 
adamic lukose huberman search power law networks phys 
rev 
william aiello fan chung lu random graph model massive graphs proceedings nd annual acm symposium theory computing acm press pp 

random evolution massive graphs ieee symposium foundations computer science 
druschel rowstron past large scale persistent peer peer storage utility proceedings eigth ieee workshop hot topics operating systems hotos germany may 
rfc gnutella sourceforge net 
qin lv pei cao cohen kai li scott shenker search replication unstructured peer peer networks proceedings th international conference supercomputing acm press pp 

malkhi moni naor david viceroy scalable dynamic emulation butterfly proceedings annual symposium principles distributed computing pp 

newman strogatz watts random graphs arbitrary degree distributions applications phys 
rev 
ripeanu ian foster adriana iamnitchi mapping gnutella network properties large scale peer peer systems implications system design ieee internet computing journal :10.1.1.139.1580
christopher limewire design lime wire documents www limewire org project www design html 
rowstron druschel storage management caching past large scale persistent peer peer storage utility proceedings th acm symposium operating systems principles sosp chateau lake louise banff canada october 
saroiu gribble krishna gummadi measurement study peer peer file sharing systems proceedings multimedia computing networking mmcn january 
nima oscar roychowdhury percolation multiple threshold 
scalable percolation search power law networks preprint xxx lanl gov abs cond mat 
nima roychowdhury scale free stable structures complex ad hoc networks phys 
rev 
nima roychowdhury scale free structures heterogeneous ad hoc networks 
stoica morris karger kaashoek balakrishnan chord scalable peer peer lookup service internet applications proceedings acm sigcomm technical conference san diego usa august 
ben zhao john kubiatowicz anthony joseph tapestry infrastructure fault tolerant wide area location routing tech 
report csd berkeley apr 
fraction links traversed search fraction links traversed simulated network size nodes simulated 
scaling behavior fraction links traversed traffic fixed hit rate function network size network 
top maximum degree scaled scaled bottom 
note predicted scaling kmax log actual scaling better 
true kmax 
