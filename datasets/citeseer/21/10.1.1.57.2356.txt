decidable logic describing linked data structures michael benedikt thomas reps mooly sagiv bell laboratories lucent technologies benedikt research bell labs com university wisconsin reps cs wisc edu tel aviv university sagiv math tau ac il 

aims provide better formalism describing properties linked data structures lists trees graphs intermediate states arise structures destructively updated 
defines new logic suitable purposes called lr logic reachability expressions 
show lr decidable explain lr relates previously defined formalisms path matrices static shape graphs showing arbitrary shape descriptor formalisms translated lr formula 
aims provide better formalism describing properties linked data structures lists trees graphs 
past motivation variety different formalisms developed including static shape graphs path matrices graph types adds annotation formalism previously known formalisms exploited including graph grammars monadic second order logic 
lack better term phrase structure description formalisms refer formalisms generic sense 
define new logic called logic reachability expressions show suitable describing properties linked data structures 
show decidable 
show detail relates previously defined structure description formalisms section show generalization hendren path matrix descriptors represented formulae section show variant static shape graphs defined represented formulae :10.1.1.152.1240
way provides insight expressive power path matrices static shape graphs 
benefits include logic annotation language express loop invariants pre post conditions statements procedures 
annotations important means documenting programs basis analyzing reasoning programs modular fashion 
advantages ffl logic quite expressive strictly expressive formalism hendren 
added expressibility important describing intermediate states arise linked data structures destructively updated 
ffl logic decidable means algorithm determines formula logic formula satisfiable 
words possible determine store satisfies formula 
principle ability provide sanity checks formulae user employs warning issued user employs formula unsatisfiable 
contributions question extracting information results program analysis subject primarily algorithms analyzing programs manipulate linked data structures decidability constructions sections encoding structure description formalisms interesting consequences extracting information results program analyses provides way amplify results obtained known pointer analysis alias analysis shape analysis algorithms ways ffl structure description formalism structure descriptor corresponds formula case path matrices section static shape graphs section possible determine store corresponds structure descriptor 
lets determine structure descriptor contains useful information 
ffl pointer analysis alias analysis shape analysis algorithms necessarily compute structure descriptors approximate pointer alias shape relationships arise 
kind loss precision intrinsic static analysis techniques proposed literature feature additional imprecision crops information extracted structure descriptor particular program point 
instance logic shape analysis formula queries specific piece information evaluates unknown stores static shape graph represents formula evaluates definite true false value 
structure description formalism structure descriptor corresponds formula decidability gives mechanism reading information obtained existing algorithms additional loss precision formula represents shape descriptor formula represents query interested holds equivalently unsatisfiable 
principle machinery developed allows take structure descriptors computed existing techniques extract information precise envisioned inventors formalisms 
structure description formalisms literature little known basic decision problems associated 
mapping structure description formalism provide way analyze basic decision problems instance decision problem special interest structure description formalisms interpretation inclusion problem set stores structure descriptor represents subset set stores represents 
inclusion problem decidable possible check structure descriptor subsumes second need retained ii simpler structure descriptor conservative replacement larger useful widening 
inclusion problem important reducing time space interpretation 
structure description formalism structure descriptor corresponds formula inclusion structure descriptor represented formula represented matter testing holds equivalently unsatisfiable 
date concern developing tools describing properties linked data structures obtaining logic decidable 
developed decision procedure procedure yield practical algorithm 
investigated complexity decision problem looked heuristic methods acceptable performance practice plan 
programs illustrate shown 
remainder organized sections section presents logic describing properties linked data structures 
section shows generalization hendren path matrix descriptors represented formulae 
section shows variant static shape graphs represented formulae 
section discusses issue formulae extract information results program analyses 
section gives sketch proof decidable 
section discusses related 
language stating properties linked data structures definition pvar finite set pointer variables program 
sel set pointer selectors pointer valued fields structures program 
define alphabet sigma finite set symbols sigma sel 
pvar pvar 
pvar intended meaning pvar 
denotes cell pointed pointer variable pvar pvar 
denote cells pointed pvar 
formula typedef struct elem list struct int val struct elem list struct cdr elements elements elem reverse elements acyclic list elements null null acyclic list acyclic list disjoint lists cdr cdr acyclic list return bool elem delete int elements acyclic list elements elem prev prev null elem elem null prev elem elem elem cdr elem val prev null elem cdr prev cdr elem cdr free elem return true acyclic list return false fig 

declaration linked list type 
program uses operations reverse list 
program searches list pointed variable trailing pointer prev deletes element val field equals 
logic defined follows phi pe pe equality pointer exps 
ffl empty path pe reachability constraint empty lang 
hs heap sharing constraint oe oe sigma allocation constraint concat 
phi negation jr union phi phi conjunction kleene star phi phi disjunction pe pvar pointer var 
phi phi implication pe sel sel sel call terms routing expressions refer occurrences pvar 
pvar 
routing expressions pointer variable 
shorthand notations hs shorthands hs respectively 
similarly hs sel sel shorthands hs respectively 
pe pe shorthand pe pe 
phi phi shorthand phi phi phi phi 
example pointer variable formula acyclic list def ix hs states points unshared acyclic list 
term ix signifies traversal starts cell pointed follows cdr fields returns cell pointed term hs signifies traversal starts cell pointed follows zero cdr fields leads cell heap shared 
cell heap shared cells fields point cell car cdr point :10.1.1.152.1240
loop invariant program elem reverse written follows cdr cdr acyclic list acyclic list iy iz ix ix line states cdr refer list element allocated 
subformulae line states list disjoint list list 
example loop invariant program elem delete written follows acyclic list prev prev cdr elem prev elem subformula states elem points list pointed subformula line states prev allocated null elem point different locations 
conclude location released statement free elem pointed pointer variable routing expressions illustrated examples 
define semantics formulae definition store represented tuple env loc set locations env functions env pvar 
loc sel 
loc 
loc strict 
meaning pointer expression pe store denoted pe pe loc defined inductively follows pvar env pvar pe sel sel pe language routing expression defined usual regular expressions 
word contain occurrences form pvar 
pvar meaning word slightly nonstandard meaning word store denoted loc 
loc defined inductively follows ffl sel sel pvar ae env pvar pvar ae env pvar meaning formula store defined inductively follows pe pe pe pe pe exists pe pe pe loc hs exists pe loc exist loc sel sel sel sel sel ii sel sel exists pe loc phi phi false phi phi phi true phi true phi phi phi true phi true phi phi phi true phi true representing path matrices formulae section study relationship logic variant path matrix structure description formalism 
path matrix records information possibly empty set paths exist pairs pointer variables program 
version path matrices described generalization original version described 
show path matrix extended version formalism represented formula logic definition path matrix pm contains entry pm pair pointer valued program variables entry pm describes set paths cell pointed cell pointed entry pm value form hr qi regular expression sigma standing possible path standing definite path 
notions possible paths definite paths somewhat subtle names possible paths definite paths adopted somewhat misleading 
discussion store path matrix pm represents paths denote set paths cell pointed program variable cell pointed entry pm value di means path cell pointed program variable cell pointed rd 
words paths rd note paths rd need path paths pm di satisfied 
entry pm value hrp means rp set paths cell pointed cell pointed words paths rp alternative way think follows really mean represents possible paths store rp sigma gamma rp set impossible paths entry pm value hrp means paths cell pointed cell pointed rp 
paths rp ways looking things equivalent shown derivation paths rp paths gamma rp paths rp instructive consider simple examples possible path matrix entries entry pm value represents fact path cell pointed program variable cell pointed entry pm value hffl di represents fact aliases point cell stores path matrix represents 
contrast entry pm value hffl represents fact may aliases point cell stores path matrix represents possible stores path matrix represents path cell pointed cell pointed generally value hr entry pm ffl means may aliases 
language gamma ffflg represents possible paths cell pointed cell pointed possible stores path matrix represents path cell pointed cell pointed note path matrix represents smaller set stores language entry smaller language entry smaller see 
example path matrix expresses loop invariant loop elem reverse pm hffl di hffl di di hffl di fact pm di signifies cdr point cell points 
example path matrix expresses loop invariant loop elem delete pm prev elem prev hffl di elem hffl di prev cdr hffl di fact pm prev elem signifies prev cdr may point cell pointed elem may point cell elem point fact case loop iteration 
similarly fact pm prev signifies prev may reachable fact pm elem entry prev cdr signifies elem point cell traverse list pointed reach cell pointed prev cell pointed elem 

routing expressions allow path matrices general ones allowed way allow arbitrary alternations just 
follow allowing pointer variable prev prev routing expressions 
comes handy cases paths depend cf 
pm elem entry path matrix 
general language routing expressions motivated need able compute efficiently safe approximation path matrix program point 
path matrices intuitive notation spend space directly formalizing meaning path matrices terms sets stores 
define meaning path matrix formula language characterizes set stores path matrix represents 
definition regular expression denote complement regular expression sigma gamma 
path matrix pm define formula pm follows pm def pvar hr di pm pvar hr pi pm definition justified discussion follows definition 
example path matrix expresses loop invariant loop elem reverse see example corresponds formula xh sigma iy xh sigma iz yh sigma ix zh sigma ix zh sigma iy formula informative loop invariant formula example 
example formula known points list cyclic stores form shown satisfy 
delta delta delta delta delta delta fig 

store shared node 
example path matrix expresses loop invariant loop elem delete see example corresponds formula sigma ic sigma sigma ic prev formula informative loop invariant formula example 
contrast formula formula conclude free elem delete correct conclude location released statement free elem pointed representing shape graphs formulae section study structure description formalism called static shape graphs addition reachability information allow certain topological properties stores represented 
ways define static shape graphs 
simplicity consider variant static shape graphs defined :10.1.1.152.1240
section give formal definition static shape graphs 
section construct formula exactly characterizes set stores represented static shape graph 
static shape graphs formally define static shape graphs 
stores defined section static shape graphs priori bounded size number shape nodes depends size program analyzed 
needed shape analysis algorithms iterative shape analysis algorithm computes static shape graphs program point terminate 
definition static shape graph ssg finite directed graph consists kinds nodes variables pvar shape nodes kinds edges variable edges selector edges 
shape graph represented quadruple isi finite set shape nodes 
shape node form nx pvar node describes cells simultaneously pointed pointer variables graphically denote shape nodes circles 
node represents cells directly pointed pointer variable represented dotted circle 
graph set variable edges denoted pair form nx pvar nx assume pvar variable edge nx exists graphically denote variable edges solid edges exist 
graph set selector edges denoted triple form sel nx sel fcar 
assume pvar sel fcar shape node nx nx selector edge sel exists 
contrast may selector edges hn sel corresponding different selector edges emanating cells represented graphically denote selector edges dotted edges may may exist 
standing shared function type trueg 
serves constraint restrict set stores represented shape graph 
incoming selector edge false know memory cell represented concrete representatives selector edges incoming edge graphically denote fact nx shared node putting inside circle 
example ssg represents store shown shown 
abc fxg cdr cdr fig 

ssg corresponds store shown 
static shape graph formula ready show construct formula captures meaning static shape graph 
definition sg isi ssg 
define graph sg directed graph sg edges labeled letters sigma contains nodes shape node theta contains types labeled edges ffl shape node nx nx nx delta delta delta nx nx nx delta delta delta nx edge outi labeled delta delta delta delta delta delta 
ffl selector edge sel edge nx nx labeled sel 
sigma maps edges labels 
nodes nx nx ny regular path expression sigma describes paths sg nx computed known methods 
finite set regular expressions fr denotes regular expression jr delta delta delta jr regular expression regular expression sigma describes non existing words sigma gamma define formulae characterize different aspects sg phi val pvar ev phi gamma val pvar ev phi pvar nx ev phi gamma pvar nx ev ev phi gamma pal pvar ev nx ny phi gamma nx ev ny iy phi gamma hs pvar ev hs ny nx ny formula phi sg conjunction formulae 
lemma store ssg sg represented sg phi sg true 
extracting information program analyses formulae interesting properties linked data structures expressed formulae example formula psi def cdr expresses property points cell self cycle 
information optimizing compiler determine profitable generate pre fetch element 
possible express pointer access paths point different memory cells may aliases important optimization tools aiding software understanding 
reachability sharing predicates useful example improve performance garbage collection algorithms parallelize programs 
principle provides uniform basis results analyses yield path matrices static shape graphs program optimizers tools aiding software understanding 
instance shows ssgs sg arises loop header analysis elem reverse 
shown psi satisfiable store represented sg 
means point cell self cycle stores sg represents 
determined automatically approach showing phi sg psi satisfiable 
similarly translating path matrix obtained path matrix program analysis algorithm corresponding formula phi checking phi psi satisfiable verify automatically point cell self cycle stores represented abc fxg cdr cdr fig 

ssg sg represents acyclic lists length pointed variable decidability theorem decidable 
sketch proof prior directly approaching question decidability proves normalization lemma showing routing expressions mentioned formulae rewritten way deal paths avoid nodes pointed pointer expressions mentioned formula pointer expressions occur constraint program variables occur pointer variable interrogation 
assert reachability shared nodes pointer expressions paths traverse nodes heap 
proves normalization lemma breaking path expressions may cross mentioned pointer expressions component path expressions cross mentioned pointer expressions 
decidability logic follows showing bounded model property computable numerical function sentence oe consistent model size bounded joej 
technique common logical decision procedures 
immediately shows existence crude decision procedure enumerates possible stores size joej searching model 
note approach sketched intended give comprehensible demonstration decidability give practical decision procedure 
proof bounded model property proceeds starting arbitrary concrete store satisfying formula oe showing diminished model size jf joej particular proof preserving atomic formulae oe 
normalization theorem implies shrinking process preserve properties deal paths heap reachability heap sharing equalities inequalities fixed set pointer expressions 
shrinking done phases original store pruned get model union trees process information sharing nodes lost extra labels added nodes maintain information 
auxiliary labels indicate certain nodes tree correspond nodes associated particular pointer expression original store certain nodes tree shared original store 
classical decidability results reachability expressions finite trees summarized shrink trees smaller trees satisfy properties union trees produced stage 
properties mentioned obtained original reachability heap sharing allocation constraints transforming expressions monadic second order logic express reach auxiliary labels mentioned 
shrunken set trees glued restore sharing information lost phase multiple nodes annotated associated pointer expression identified nodes annotated shared heap nodes shared nodes 
normalization results crucial way glueing stage glueing create new paths represented store 
glueing create new paths heap store glueing process identifies nodes associated pointer expressions mentioned formula unshared paths leading nodes 
normalization implies concerned preserving existence nonexistence paths lie strictly heap sufficient 
figures show proof formula phi phi def iy xh cdr cdr iy xh cdr cdr cdr iy iz yh cdr cdr cdr iz start store satisfies phi prune set trees 
auxiliary labels keep track fact nodes tree point pointed trees decreased size preserving analogs reachability statements node labeled reach copy node cdr cdr cdr path reach copy cdr cdr cdr path 
final stage tree model glued form traditional store satisfies phi 
fig 

pruning stage proof related jensen defined decidable logic describing properties linked data structures 
interesting compare approaches logic jensen allows quantifications pointer expressions forbidden allows stating sharing constraints fig 

shrinking glueing stages proof allocation constraints 
encoded logic ffl sharing constraints encoded quantifications 
ffl allocation constraints encoded tests null routing expressions 
imposes limitation routing expressions forbidding testing null garbage cells 
hand generalizes logic jensen ways ffl allows multiple selectors enables formulae describe properties general directed graphs opposed just lists 
ffl reachability constraints formulae allow test simultaneous pointer crucial capturing strength variant static shape graphs defined :10.1.1.152.1240
summary formulae jensen expressive formulae state properties lists trees state properties arbitrary graph data structures 
klarlund schwartzbach defined language defining graph types tree data structures non tree links defined auxiliary tree path expressions 
application envision programmer able declare variables graph type write code mutate tree sketches extension technique trees involves multiple selectors handle general directed graphs 
backbone structures 
mutation operation runtime system automatically apply update operation define updates non tree links 
graph type definition language unsuitable describing arbitrary store graphs fact update operations limited allow programmer write arbitrary pieces code 
property significant advantage intended application programming language supporting controlled destructive updating graph data structures 
adds formalism hendren annotation language expressing loop invariants pre post conditions statements procedures 
programmer point view advantage logic adds strong allow stating properties kind arise intermediate points procedure data structure process traversed destructively updated 
example adds state loop invariant example relationship expressed 
lacking expressive power adds mainly useful documentation notation type definitions function arguments function return values 
hendren propose handle limitation adds extending ability certain limited class reachability properties variables kind path matrices defined 
goes adds ways permits stating properties cyclic data structures 
routing expressions formulae general regular expressions pointer variable 
closed conjunction negation 
contrast adds express loop invariant example implication 
noted currently notion heap sharing weaker adds notion dimension 
easy generalize include concept affecting decidability 
wanted stay selectors 
noted adds allow stating connectivity properties form believe generalized handle 
limited form connectivity properties restricted form xh yh proposed 
incomparable deutsch symbolic aliases symbolic aliases allow full blown arithmetic decidable logic 
hand symbolic alias expressions closed negation 
instance way express alias relationships symbolic aliases 
loop invariant example expressed symbolic aliases 
fradet le graph grammars express interesting properties data structures language 
graph grammars natural formalism logic describing certain topological properties stores 
graph grammars closed intersection negation problems inclusion problem decidable 
terms expressive power structure description formalism incomparable proposed 
noted approach limited ways approach taken develop decidable logic languages capturing topological properties broad class linked data structures 
undecidability results predicate logic give hard limitations expressiveness languages example language exists closed order quantification boolean connectives 
logic formalisms succinct expressing properties linked data structures verbose particular output translation algorithms significantly verbose input 
example translation static shape graph sg formula phi sg section size phi sg exponential 
properties expressed including store contains garbage cell cell accessible variable ii tree balanced balanced condition avl trees 
may difficult extend handle sorts properties 
properties go scope current optimizing compilers tools aiding software understanding 
supported part nsf ccr ccr united states israel binational science foundation associate award univ wisconsin 


interprocedural heap analysis parallelizing imperative programs 
shriver editors programming models massively parallel computers pages washington dc september 
ieee press 

gurevich 
classical decision problem 
springer verlag 

chase wegman zadeck 
analysis pointers structures 
sigplan conf 
prog 
lang 
design impl pages new york ny 
acm press 

deutsch 
model aliasing abstractions finite representations right regular equivalence relations 
ieee international conference computer languages pages washington dc 
ieee press 

deutsch 
interprocedural may alias analysis pointers limiting 
sigplan conf 
prog 
lang 
design impl pages new york ny 
acm press 

pascal fradet daniel le metayer 
shape types 
symp 
princ 
prog 
lang new york ny 
acm press 

ghiya hendren 
putting pointer analysis 
symp 
princ 
prog 
lang new york ny 
acm press 

ghiya hendren 
connection analysis practical interprocedural heap analysis proc 
th int 
workshop lang 
comp 
par 
comp number lec 
notes comp 
sci pages columbus ohio august 
springer verlag 

hendren 
parallelizing programs recursive data structures 
phd thesis cornell univ ithaca ny jan 

hendren hummel nicolau 
abstractions recursive pointer data structures improving analysis transformation imperative programs 
sigplan conf 
prog 
lang 
design impl pages new york ny june 
acm press 

hendren nicolau 
parallelizing programs recursive data structures 
ieee trans 
par 
dist syst january 

horwitz pfeiffer reps dependence analysis pointer variables 
sigplan conf 
prog 
lang 
design impl pages new york ny 
acm press 

jensen klarlund schwartzbach 
automatic verification pointer programs monadic second order logic 
sigplan conf 
prog 
lang 
design impl 

jones muchnick 
flow analysis optimization lisp structures 
muchnick jones editors program flow analysis theory applications chapter pages 
prentice hall englewood cliffs nj 

jones muchnick 
flexible approach interprocedural data flow analysis programs recursive data structures 
symp 
princ 
prog 
lang pages new york ny 
acm press 

klarlund schwartzbach 
graph types 
symp 
princ 
prog 
lang new york ny january 
acm press 

larus hilfinger 
detecting conflicts structure accesses 
sigplan conf 
prog 
lang 
design impl pages new york ny 
acm press 


luk mowry 
compiler prefetching recursive data structures 
proceedings seventh international conference architectural support programming languages operating systems pages october 

plevyak chien karamcheti 
analysis dynamic structures efficient parallel execution 
banerjee gelernter nicolau padua editors languages compilers parallel computing volume lec 
notes comp 
sci pages portland august 
springer verlag 

sagiv reps wilhelm 
parametric shape analysis valued logic 
tech 
rep tr comp 
sci 
dept univ wisconsin madison wi july 
available www cs wisc edu papers parametric ps 

sagiv reps wilhelm 
solving shape analysis problems languages destructive updating 
trans 
prog 
lang 
syst january 

sagiv reps wilhelm 
parametric shape analysis valued logic 
symp 
princ 
prog 
lang 
available www cs wisc edu papers popl ps 


lattice interpretation dynamic lisp structures 
inf 
comp nov 

tarjan 
fast algorithms solving path problems 
acm 

tarjan 
unified approach path problems 
acm 

thatcher wright 
generalized finite automata application decision problem second order logic 
math 
syst 
theory 


wang 
analysis recursive types imperative language 
phd thesis univ calif berkeley ca 
