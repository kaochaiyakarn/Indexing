program generators tools yannis smaragdakis shan shan huang david college computing georgia institute technology atlanta ga usa yannis ssh cc gatech edu program generation promising techniques effort increase automation programming tasks 
discuss potential impact research value program generation give examples research area outline direction consider interesting 
specifically discuss program generators significant applied potential 
time argue research topic meta programming tools language tools writing program generators may greater value 
illustrate views generators meta programming tools latest meta aspectj metaprogramming language generator 
examine problem statically determining safety generator intricacies 
limit focus particular kind guarantee generated code ensuring generated program free compile time errors 
believe research direction see significant attention difference mainstream adoption meta programming technology 
categories subject descriptors programming techniques automatic programming program synthesis program transformation program verification programming languages processors general terms design languages keywords program generators meta programming safety guarantees permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
pepm august italy 
copyright acm 

program generators meta programming general thoughts program generators 
concentrate frequently asked questions nature value generators research promise area 
program generators 
program generator just generator program generates programs 
broad definition qualified include constraints generated program expressed high level programming language 
definition offers strict boundaries distinguishing generators traditional compilers text generating programs really constitutes generator determined intuitively reflect technical distinction emphasis development generator 
related concept meta programming 
metaprogramming described creation program computes programs reasons programs 
meta programming tools constitute general platform implementing generators language setting 
understand generators look common uses 
practice generators typically compilers domain specific languages dsls 
domain specific language special purpose programming language particular software domain 
domain defined technical structure domain reactive real time programs domain lalr language parsers real world applications database domain telephony domain 
purpose restricting attention specific domains exploit domain features knowledge increase automation 
view generators compilers dsls worth asking differ general purpose language compilers 
research practice program generators distinctly different general purpose compilers 
general purpose language compiler implements stable separately defined specification take man years develop 
contrast generator typically designed dsl implements 
emphasis deeply analyzing program infer properties designing dsl properties clearly exposed having generator exploit little effort possible 
effort implementing program generator typically small comparable effort implementing software library domain 
largely result leveraging high level language commonly called object language generated programs expressed 
features program generators language generator design low effort development define focus research area 
research program generators concentrates specific domains amenable generator approach meta programming tools simplify generator implementation 
care generators 
program generators active research focus early days computer science 
main reasons researchers attracted program generators inherently interesting conceptual problems meta programming potential practical benefit 
researchers meta programming intellectually fascinating topic 
computer scientists people find computations interesting 
interesting computing computations 
canonical example self generating programs 
easy intrigued programs task output program text 
example lambda list list quote lambda list list quote lisp main main printf printf time researchers hold belief software engineering tasks substantially automated program generation 
everyday programming involves rote coding pieces functionality 
generated mechanically long domain specific knowledge suitably encoded 
programming practitioners confident achieve far greater code reuse appropriate domain specific tool 
fact encountered cases people overestimate potential automation experience small set examples 
question engineering balance cost developing dsl benefit 
software development arena program generators compete primarily lower benefit tools domain specific libraries apis 
currently thousands specialized software libraries various domain specific tasks 
realistic software application employs hundreds predefined apis manipulating strings file processing math functions abstractions streams sockets graphical interfaces replacing apis domain specific languages implemented program generators may result significant simplification programming tasks domain 
libraries apis thought crude programming languages 
simplistic syntax function call syntax allowed syntax checking limited checking number arguments 
semantic restrictions arguments need satisfy preconditions calls may affect state system needing occur specific ordering patterns 
limited static error checking takes place type checking function calls host language 
libraries apis simple optimization typically offer multiple hand specialized versions operations different kinds arguments special purpose multiplication operators sparse arrays scientific computing library 
user needs pick appropriate operations ensure safety 
users standard libraries apis constrained library semantics semantics host programming language 
common sentiment users large parallel processing scientific computing libraries mpi lapack 
expressed programmers large projects part code needs support conventions parts 
case domain project 
microsoft programmer told don program program word internal api software engineering benefit domain specific languages relative function libraries apis exactly addressing deficiencies syntax safety performance 
domain specific language offer concise syntax increasing ease development maintenance perform static error checking detect common violations library semantics offer better performance domain specific optimizations 
common argument especially partial evaluation community advantages program generation expressed entirely performance axis 
performance concern syntax safety benefits domain specific language achieved just interpreter 
subsequently better performance required achieved specializing interpreter 
specialization occur general purpose partial evaluator program generation 
view program generation alternative partial evaluation entirely code specialization 
tempting useful think entirely performance terms note view accurate program generators actual 
practice program generators employed reasons performance reasons dictated modularity 
generation tasks performed produce code satisfies conventions existing external libraries run time systems example domain specific language telephony generating code form needed interface specific telephony standard api 
generator yields components loaded java application server 
tasks performance related programs need generated specific form order interface external clients 
research value meta programming program generators interesting structure valuable practice individual generators ideal targets research 
reason domain specificity generators 
domain knowledge far primary element successful generator 
unfortunately domain knowledge accessible non domain experts 
research concerned encoding transmission reusable knowledge domain specificity generators limits research impact narrow communities 
domainindependent results hard speak research generators 
contrast believe meta programming infrastructure promising research target especially programming languages tools research community 
meta programming tools domain independent part program generation 
pose interesting conceptual research problems program generation large applied value 
terms technical problems metaprogramming need better language constructs type systems analyses ensure safety additionally meta programming stresses limits language processing analysis technology parsing generated code fragments small appear final program context 
terms applied value benefit generators tied ease implemented 
successful meta programming tool significantly simplifies generator implementation 
simplification result added expressiveness easy program generation transformation added safety avoiding errors coding generators 
surprisingly potential impact metaprogramming tools lower mature understood high value domains 
domains importance domain abstractions high better metaprogramming infrastructure matter 
instance hard imagine meta programming tools difference parser generation generators yacc antlr string system command processing implementations scripting languages perl database processing languages sql 
general systems technically translators dsls part focus program generation 
meta programming tools greater impact mature domains clear applying domain specific language approach appropriate 
meta programming infrastructure bridge implementation effort gap library generator making program generation cost feasible domains 

meta aspectj section discuss meta aspectj meta programming tool program generator 
artifacts illustrate earlier points regarding conceptual applied value meta programming kinds generators meta programming tools support 
meta aspectj meta aspectj maj language tool generating java aspectj programs code templates quote unquote operators 
elements maj quite interesting 
believe aspectj language back simplifies task writing generator 
second maj technically mature meta programming tool respects advanced meta programming tool java 
instance maj reduces need deal low level syntactic types quoted entities expres sion statement identifier type inference context sensitive parsing algorithm 
aspects generation 
aspectj language extension java tool aspect oriented programming aop methodology advocates decomposing software aspects functionality may affect functional units 
aspectj supports defining aspects separately main application code subsequently merging code 
purposes discussion view aspectj sophisticated code manipulation tool 
aspectj user add superclasses interfaces existing classes interpose arbitrary code method executions field exception throwing 
complex enabling predicates determine code interposed certain point 
predicates include instance information identity caller callee call method call certain method stack aspectj maj tied aop methodology 
main observation meta aspectj generators aspectj backend language 
generator output aspectj file passed aspectj compiler existing java program 
generated aspectj file aspectj compiler transform java program 
aspectj offers convenient vocabulary expressing program inspection transformation 
functionality crucial program generators 
generator needs inspect existing program generate code field method field assignment encountered 
time generator needs transform input program call newly generated code 
transformations conveniently expressed aspectj vocabulary 
example consider simple transformation java program 
may want take input class add interface definition clause 
source code level means transforming code class 
class implements 
standard way effect code transformation parse input find definition class add implements clause branch syntax tree representing definition 
time need careful find right class instance local class name preserve existing superclasses interfaces alternative way transformation emit aspectj code aspect declare parents implements way simpler relieves dealing low level details 
example admittedly simple 
complicated code transformations sites field value may changed transforming instantiations class instantiations different class benefit expressing aspectj strictly increases 
aspectj offers convenient level abstraction transforming programs 
aspectj manipulate low level code find statements loops program change transform externally visible element java class methods fields type information 
added practical advantage aspectj features mature compiler implementation directly outputs java bytecode 
maj technically maj extends java code template operators creating aspectj code fragments 
quote expr just identifier unquote 
ellipses expr identifier meta variables matching syntax expressions identifiers respectively 
quote operator creates syntax tree representations aspectj code fragments 
parts representations variable designated unquote operator instances unquote occur inside quoted code fragment 
example value maj expression call data structure represents syntax tree fragment aspectj code call 
aspectj expression matches method calls method argument list return type 
similarly maj expression classname quoted pattern part 
value depends value variable classname 
instance classname holds identifier value classname syntax tree expression 
maj introduces new keyword infer place type name new variable declared initialized quoted expression 
example write infer pct call declares variable pct just program variable 
instance unquote infer adv void pct creates syntax tree piece aspectj code defining happen case time method gets called 
example inferred type variable adv advice declaration types aspectj syntax tree nodes maj defines 
full set permitted type qualifiers contains types including identifier modifiers stmt addition variable definitions types explicitly quote unquote operators 
instance fully qualified version adv example adv void pcd pct inference qualifiers types variables holding syntax trees relieves user dealing specifics syntax tree types maintaining static checking formedness trees 
feature distinguishes maj meta programming tools 
having multiple quote unquote operators norm meta programming tools languages rich surface syntax meta programming tools java 
instance examine jts tool java meta programming closest comparable maj jts introduces different kinds quote unquote operators exp exp exp stm stm stm mth mth mth cls cls cls additionally just maj jts distinct types syntax tree form ast exp ast stmt ast ast class maj jts user needs specify explicitly correct operator tree type generated code fragments 
instance consider jts fragment ast exp exp exp ast stm stm return exp stm written maj simply infer infer return inference type qualifiers maj requires sophistication implementation metaprogramming tool 
meta programming tool needs full fledged compiler type system naive pre processor translating object language relying language type system checking 
additionally parsing context sensitive type variable determines certain piece syntax parsed puts parsing task capabilities context free grammar parser generator 
see points consider maj code fragment infer foo class inferred type depends type foo 
instance foo type modifiers value public code equivalent modifiers foo class foo type import value import java io code equivalent import foo class able infer type quoted expression need know types expressions 
furthermore types expressions influence parsing translation quoted code 
possible syntax trees isomorphic 
type foo modifiers result entirely different parse translation quoted code type foo import 
case foo just describes modifier branch syntax tree definition class case syntax tree value foo level tree class definition 
maj type system simple fixed set types subtyping relations couple ad hoc conversion rules java strings maj identifiers 
type inference quite straightforward deriving type expression types component subexpressions known specific type expression 
recursion possible inference logic infer keyword variable declarations variable initialization expression allowed java 
added advantage having full compiler metaprogramming tool emit better error messages 
maj differentiates maj type errors syntactically invalid generated code regular parse errors maj language 
emits accurate error messages relative original maj source 
applications generator briefly describe generator 
interesting elements 
implemented producing aspectj code representative generators maj support 
second shows kinds program manipulations need handle meta programming tools 
section discussing directions statically safe meta programming refer examples tasks 

general object ejb conversion helper program generator java server side components 
takes input java program annotated javadoc comments describe parts functionality remotely executable 
transforms parts program execute network running local machine 
middleware platform distributed computing ee protocol enterprise java beans ejb 
takes care generating code adhering ejb conventions ejb session beans methods construction calls execute remote machine 
internally modification application performed generating aspectj code transforms existing classes 
originally implemented simple text meta programming tool 
subsequently expressed safely conveniently maj interesting look specific program inspection generation tasks performs 
include java class appropriate input annotation generates isomorphic interfaces java interfaces methods correspond public methods class 
local remote interfaces required session bean ejb specification 
ejb class session bean generated cloning functionality original java class 
session bean declares implements generated local remote interfaces modifies original method signatures throw exceptions required distribution middleware 
aspectj aspect generated intercept instantiations calls methods original java class 
object creations client calls performed ejb class 
aspect generated parameter types serializable passed copy arguments remote calls necessary user supplied annotations 
aspectj illustrates value aspectj generator back 
transformations performed changing client calls making parameter types serializable harder aspectj 
hand aspectj able handle tasks 
activities previously shown impossible automate just aspectj 
example aspectj create interface isomorphic public methods class 
additionally aspects static need custom generated particular input application 
customization just respect names classes need transformed 
complex decisions may need 
instance logic making method parameter types serializable roughly type serializable supertypes declared serializable primitive type tests expressed aspectj easy compute arbitrary java code reflection 
right custom aspect gets generated applicable 

guaranteed legal generators section thoughts valuable research directions meta programming tools 
discuss motivation statically safe program generation state art needs addressed support powerful generators 
guaranteed legal generation need 
saw earlier value maj quoted code fragment syntax tree code fragment 
representing generated program syntax trees standard technique structured meta programming tools contrasted unstructured text tools 
statically ensures generated code syntactically correct requiring tree formed 
property described type safety generator implies syntactic correctness generated program go mere syntax checking 
generated program may contain semantic errors 
offering guarantees generated code interesting issues meta programming 
interested statically safe program generation statically checking generator enforce safety generated program 
space program safety properties huge properties undecidable limit attention language legality checking 
want ensure generated program suffer errors typically detected conventional compiler type mismatch errors undeclared variables duplicate variable definitions term guaranteed legal describe generator generates programs compile correctly 
meta programming infrastructure statically ensures generator guaranteed legal legal inputs 
course having kind sound static safety check means putting restrictions expressible programs 
safe generators conservatively rejected 
challenge design static checking mechanism expressive common program generators program manipulations 
debated static legality checking valuable feature 
generated program checked statically runs try catch errors program generated 
answer static checking intended detect errors generated program errors generator input errors generator 
errors detected compile time generated program late run time generator 
static legality checking generators analogous static typing regular programs 
desirable property increases confidence correctness generator inputs just inputs generator writer tested generator 
see problem example consider program generator emits programs depending input related conditions pred emit int pred emit input pred imply pred generator emit variable having generated definition error generator responsibility metaprogramming language tool prevent errors statically examining generator 
course easy catch error generation time fragment just shifts blame generator produce invalid program fails produce 
fact error may occur generator writer tested widely deployed generator 
error detected random user 
analogy compilers general purpose languages interesting 
consider compiler perfectly legal inputs produces executable files illegal binary format illegal elf exe files machine code wrong architecture 
files represent programs fail run time operating system reject load time 
small compiler author artifact deployed containing basic errors failed run time 
existed language tool purpose help compiler writers desirable statically check compiler produces legal executables legal inputs 
general meta programming problem pronounced due multitude potential generators relative small number compilers harder due richness target high level languages relative shallow rules binary executable formats 
state art need static safety checking hard property ensure limit attention language legality checks 
interesting special case program generation offers strong legality guarantees gener ated programs 
specifically multi stage languages metaml metaocaml guarantee generated program type correct statically checking generator 
sense multi stage languages represent state art static safety checking generators 
see staging applies severe restrictions structure generator prohibits expression arbitrary generators 
staging language constructs fairly common partial evaluation community 
comprise primitives quoting performing run time evaluation eval run construct code representations 
focus multi stage languages performance 
multi stage languages serve assembly languages partial evaluation 
staging primitives sufficient expressing partial evaluation task hand staged derived automatic partial evaluator binding time analysis 
staging differs general program generation 
hallmark property multi stage languages erasure property erasing staging constructs yield meaningful program 
clearly property hold arbitrary program generation meta language object language 
maj instance write infer class removing quote construct result legal java program 
example staged program consider simple exponentiation function maj style quotes function shown ml pseudo code avoid low level complexities explicit typing exp exp stage function respect statically known exponent result exp exp easy see erasing staging constructs second exp function yield exactly 
side note example exp functions exactly equivalent 
exp generator involved values known exp yield 
run eval primitive evaluate expression 
order offer type correctness guarantees generated code multi stage languages place rigid syntactic restrictions generator 
restriction binding identifier clear generator code 
specifically way quote code fragment containing free variables scope quote contains definitions variables 
write int fun fragment occurs free inner quote bound definition outer quote 
write independent quote expressions containing separate definition int serious restriction arbitrary program generation 
supporting separate variable definition structure generator source code structure generated program allowing freedom writing generator 
main problem scoping imagine namespace construct ties independent variable definitions 
greater issue control flow 
just saw section separating definitions result generated programs referencing undeclared variables 
furthermore quoted definition may create multiple actual variable definitions generated program 
instance consider fragment pred emit int 
may distinct definitions generated quoted fragment int 
may problem name conflicts definitions 
meta programming system rename actual variable names unique identifier iteration avoid accidental name conflicts user supplied code generated declarations 
part studied hygiene problem metaprogramming 
important issue clear binding intended generated expression 
current systems offer static legality guarantees restrict names generated program 
multistage languages legal unquote identifier binding position 
names definitions constants 
instance possible generate definition variable name determined generator run time emit int name severe limitation 
recall program manipulations performed 
straightforward ones generate isomorphic interfaces input class 
interfaces need methods names depend generator input 
general program generators commonly emit definitions names statically known 
instance generated program may calling existing methods classes names discovered generation time 
allowing non constant names quoted expressions issue data flow generator 
example consider generator introduces new names lexical context emit int name int name static language legality checking need know name name hold value duplicate variable definition generated program 
open problems promising directions observations meta programming tools need advance support realistic guaranteed legal generators 
general design direction pursuing consider particularly promising 
problem data control flow analysis generator expect easy meta programming language beneficial 
instance consider sub turing computable language controlled iteration selection 
language integrate reflective mechanism analyzing input program extract elements program generation 
language define iterators existing programs 
iterators range say fields class arguments method classes package program generation predicated iterator copies quoted code generated iteration 
example code generation expression field type name primitive part invented syntax usual 

field type name iterator functions 
example definitions variables generated 
generated variable names statically known depend existing names 
static checking done assumption input program legal 
instance code fragment generate duplicate definition generated names mapping fields input class guaranteed uniquely named 
similarly generating iterators match generated definitions 
instance refer variables generated fragment code field insert name know emitted code refers valid variable names iterator ranges values fields class generating definitions 
specifically want define collections elements existing programs relational view 
treat input program set relations single big relation matching packages classes classes fields methods arguments iterators defined relational calculus query 
define iterators selecting elements relation logical language supports universal existential quantifiers 
instance define iterator classes synchronized method 
similarly define iterator classes supporting methods certain interface interface method method class identical name type signature 
subsequently iterators determine control data flow program generation 
controlled iteration language able interface general purpose language analysis limited controlled iteration language 
complete example consider routine generating isomorphic interface input class 
syntax written input cl class pm class method public modifier total interface name cl isomorphic pm cl name args type arg name input clause program declares cl input class relation 
pm defined iterator public methods class 
generator function total generates interface named input class appended suffix isomorphic contains public methods cl identical signatures 
arguments named arg name code actual names matter generated names unique avoid conflicts 
description sketchy omitted specifics syntax semantics proposed language language constructs conditional generation example hopefully sufficient outline interesting conceptual problems 
order match definitions type checking checking undeclared variable need know definitions generated conditions generating 
recall problem section pred emit int pred emit need know pred implies pred 
controlled language generation predicated iterator 
problem containment relations ranged iterators 
decidable problem full relational calculus known restrictions result decidable containment problems 
restriction imposed syntax reasoning power 
outlined just design direction space guaranteed legal meta programming 
right solution engineering tradeoff expressiveness safety 
interesting open issues remain explored immediate vicinity ideas outlined powerful data control flow analysis general purpose turing complete language support static legality checking allowing express common generation tasks 
controlled iteration languages sketched expressive logic allows decidable containment checking 
balance run time complexity containment checking expressiveness logic 

gave focused overview program generation meta programming tools 
purpose offer comprehensive survey surveys program generation exist 
notably jones offer extensive survey program generation pertains partial evaluation 
views practical value program generators research value meta programming 
arguments meta programming infrastructure affects generators illustrated research artifacts meta aspectj tool generator 
discussed promising directions meta programming research 
hope meta programming soon mature valued tool arsenal sophisticated programmer making program generation viable option multitude software domains 

acknowledgments research supported nsf ccr ccr georgia electronic design center 
want pete members ifip wg valuable discussions inspiration 
peter sestoft walid taha comments draft improved quality 

batory smaragdakis 
jts tools implementing domain specific languages 
proceedings fifth international conference software reuse pages victoria bc canada 
ieee 
taha huang leroy 
implementing multi stage languages asts gensym reflection 
generative programming component engineering conference lncs pages 
springer 
chiba 
metaobject protocol 
acm conference object oriented programming systems languages applications oopsla sigplan notices pages austin texas usa oct 
clinger 
macros 
proceedings th acm sigplan sigact symposium principles programming languages pages 
acm press 
jones 
program generation termination binding time analysis 
generative programming component engineering conference lncs pages 
springer 
kiczales hilsdale hugunin kersten palm griswold 
getting started aspectj 
communications acm 
kohlbecker friedman felleisen duba 
hygienic macro expansion 
proceedings acm conference lisp functional programming pages 
acm press 
smaragdakis batory 
scoping constructs program generators 
generative component software engineering symposium 
earlier version technical report tr 
smaragdakis batory 
application generators 
encyclopedia electrical electronics engineering 
webster ed john wiley sons 
soares 
implementing distribution persistence aspects aspectj 
acm conference object oriented programming systems languages applications oopsla pages 
acm press 
stevens web site sourceforge net 
taha sheard 
multi stage programming explicit annotations 
partial evaluation semantics program manipulation amsterdam netherlands june pages 
new york acm 
smaragdakis 
server side distribution 
proceedings automated software engineering ase conference 
ieee press october 
visser 
meta programming concrete object syntax 
generative programming component engineering conference lncs pages 
springer 
weise crew 
programmable syntax macros 
sigplan conference programming language design implementation pages 
huang smaragdakis 
generating aspectj programs meta aspectj 
proceedings generative progamming component engineering conference 
springer verlag appear 
