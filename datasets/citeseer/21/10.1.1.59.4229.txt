polymorphic bytecode compositional compilation java languages davide ancona disi universit di genova davide disi unige sophia drossopoulou dep 
computing imperial college sd doc ic ac uk define compositional compilation ability typecheck source code fragments isolation generate corresponding binaries link fragments mutual assumptions satisfied code 
compositional compilation highly desirable feature java languages hardly achieved 
due fact bytecode generated fragment say class uniquely determined source code depends compilation context 
propose way obtain compositional compilation java introducing polymorphic form bytecode containing type variables ranging class names equipped set constraints involving type variables 
polymorphic bytecode provides representation standard bytecode obtained replacing type variables classes satisfying associated constraints 
illustrate proposal developing typing linking algorithm 
typing algorithm compiles class isolation generating corresponding polymorphic bytecode fragment constraints classes depends 
linking algorithm takes collection polymorphic bytecode fragments checks mutual consistency possibly simplifies specializes 
particular linking self contained collection fragments fails produces standard bytecode produced standard compilation fragments 
categories subject descriptors programming languages language constructs features classes objects programming languages formal definitions theory syntax semantics programming languages processors incremental compilers permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
popl january long beach california usa 
copyright acm 
damiani dip 
di informatica universit di torino damiani di elena zucca disi universit di genova zucca disi unige general terms languages theory design keywords type systems compositional analysis 
compilers main tasks check source code adheres language rules usually means typechecks produce target code 
originally compilers process complete source application apply global compilation 
strongly typed languages execution globally compiled application guaranteed type safe 
inspired parnas ideas data types languages mesa lis modula ada introduced separate compilation application consist fragments modules packages classes 
fragment compiled separately context fragments 
produced target code fragment reflect fragments reflect compilation environment created 
application put safe linking target fragments linking target fragments legal target fragments corresponded compilation environment created 
linking preserved correspondence compilation execution environment ensuing application correspond globally compiled type safety guarantees 
years java adopted separate compilation approach combined dynamic linking fragments case classes binary form loaded lazily run time 
dynamic linking attempt preserve correspondence compilation execution environment ensuing application correspond globally compiled type safety achieved runtime verification checks 
argue java clash philosophy compilation execution 
adoption separate compilation means target separate compilation confused independent compilation introduced fortran ii type information fragments guarantee type safety 
fragments reflect compilation environment created adoption dynamic linking means correspondence compilation execution environment 
example compilation source method declaration md return environment containing class field type class field type generates bytecode md annotations reflect classes fields types return hand compilation md environment containing class field type class field type subclass generates different bytecode md return importantly execution md environment throw compilation subsequent execution md environment successful 
lazy nature java dynamic linking separate compilation sense eager context dependent 
consider compositional compilation target fragments reflect compilation environment created linking produces application corresponds globally compiled type safety guarantees 
define compositional compilation ability typecheck source code fragments isolation generate corresponding binaries link fragments mutual assumptions satisfied code 
illustrate new approach compilation linking java languages support compositional compilation 
propose polymorphic form bytecode containing type variables ranging class names equipped set constraints involving type variables 
polymorphic bytecode provides representation standard java bytecode obtained replacing type variables class names satisfying associated constraints 
terms example md compiled isolation set polymorphic constraints associated md type variables constraint shape expresses type expected declare inherit field type furthermore polymorphic bytecode md generated return approach supports linking checks polymorphic bytecode various fragments satisfies example shows sense simple case dependency generated bytecode context java features method overloading field hiding complicate matters essence problem remains 
requirements inspecting code 
process involves replacement type variables concrete class names 
example linking md environment leads md linking md environment leads md 
rest organized follows 
section define schema formalizing global compositional compilation introduce notions soundness completeness compositional compilation global compilation give sufficient conditions guaranteeing 
conditions place requirements linking process relation global compositional compilation class 
sections instantiate schema model global compilation compositional compilation small java language :10.1.1.109.1141
section give algorithm linking satisfies properties required theorems section 
section discuss related applicability approach 
preliminary version material appeared 
proofs main results extended version 

formalizing compilation section define schema formalizing global compositional compilation 
start listing basic syntactic categories judgments type system define 
terminology significant class languages schema instantiated java particular sections instance defines global compositional compilation featherweight java :10.1.1.109.1141
schema general appropriate language roughly speaking generated binary code context dependent 
class thought general terms language entity 
source binary class declarations 
source fragments sequences source class declarations binary fragments sequences binary class declarations 
class type environments sequences class type assignments 
class type assignment thought type information extracted class declaration metavariables class type environment corresponds sequence source class declarations deprived bodies 
global compilation class read source class declaration type compiles class type environment 
type constraint environments sequences type constraints 
type constraint expresses expectations classes class field type 
compositional compilation class read source class declaration type compiles type constraints 
linking read class type environment type constraints simplified binary fragment empty class type environments empty type constraint environments denoted 
ingredients model different approaches compilation 
approach code fragments compiled context full type information fragments formalized class type environment shown rules fig 
global compilation fragment judgment means fragment type compiles represents full type information related classes compiled libraries 
particular models compilation self contained fragment 
frag si bi frag 
sn 
bn global compilation fragment second approach code fragments compiled isolation producing binary code equipped type constraints binary code type constraints contain type variables denoting unknown classes 
possible link successfully compiled collection fragments obtaining mutual requirements compatible new binary fragment simplified type constraints 
notice check depend source code 
shown rules fig 
compositional compilation fragment judgment means source fragment type compiles type constraints 
frag frag si 
sn compositional compilation fragment rule frag assume operator sequence pairs consisting type constraint environment binary fragment gives new pair intuitively obtained combining avoiding interferences typically operator eliminate clashes type variables renaming 
iterating process eventually obtain fragment type constraints left judgment means obtained selfcontained fragment 
case expect obtained result global compilation compositional compilation sound global compilation conversely compositional compilation complete global compilation 
approximation soundness completeness expressed follows compositional compilation obviously expected incremental global compilation allows import library classes binary may available source may available claim generalized order deal open source fragments fragments needed class missing 
say class type environment consistent global compilation definition 
say compositional compilation sound global compilation iff consistent imply state sufficient conditions soundness 
conditions analogously guarantee completeness provide general schema proving compositional compilation sound resp 
complete 
allow split proof parts checking compositional compilation single class sound complete conditions theorems 
second checking linking satisfies requirements behaviour conditions theorems 
particular conditions related vertical sequential composition conditions horizontal composition linking steps 
conditions require linking steps sequence allow eliminate type constraints requires type information classes starting richer type information steps combined just step conversely linking step allows eliminate type constraints type information classes start partial type information possible perform partial simplification type constraints 
conditions require linking step allows eliminate combination type constraint environments possible eliminate component conversely 
condition theorem just trivial requirement needed express soundness closed fragments particular case soundness 
note order prove soundness completeness necessary linking behaved type constraint environments obtained compilation linking process 
formalized definition definition 
relevant type constraint environments inductively defined clauses holds relevant definition assumes fact libraries global compilation obtained correctly compiling code 
relevant holds relevant relevant bi bn relevant 
fact 
holds relevant 
theorem sufficient conditions soundness 
compositional compilation sound global compilation conditions hold 
consistent imply 
implies 
relevant imply 
relevant bi bi imply 
note theorems imply soundness completeness closed fragments 
take applying theorem get soundness closed fragments implies hand exist get applying rule frag obtain completeness closed fragments implies 
fj global compilation section formalize global compilation small java language 
models standard type checking java languages see bytecode generation :10.1.1.109.1141
syntax source language defined fig 
basically featherweight java fj sequel functional subset java primitive types :10.1.1.109.1141
sn class extends fds mds object fds cn fn md md mds md mh return mh cn xn new field method parameter names fds mds mh distinct source language 
relevant imply 
bi bn relevant implies bi 

definition 
say compositional compilation complete global compilation iff implies minor difference class constructors implicitly declared 
class contain instance field method declarations constructor parameters correspond class fields inherited declared order declaration 
class declarations assume name class object 
method overloading field hiding supported 
expressions variables field access method invocation stance creation casting keyword considered special variable 
order simplify presentation assume field names fds method names mds theorem sufficient conditions completeness 
compositional compilation complete global compilation conditions hold parameter names mh distinct 
fig give syntax bytecode generated global compilation abstraction standard java bytecode 
bn class extends fds mds mds md md md mh return new cn fds mh defined fig method names mds distinct standard bytecode notion bytecode differences source code bytecode interest annotations needed jvm verifier recall java bytecode field access annotated static type receiver type field method invocation static type receiver type parameters return type instance creation type parameters 
fig define class type assignments 
class type assignment collects type information needed compiling classes extracted class declaration tuple consisting name class name parent class set field signatures type name declared fields set method signatures return type name parameter types declared methods 
assume existence function type extracting type fss mss fss fs 
fs mss ms 
msn ms class type assignments information source class declaration 
write type fds type mds denote set field signatures set method signatures extracted field declarations fds method declarations mds respectively 
straightforward definition type omitted 
typing rules defining global compilation class fig 
standard rules analogous type systems java languages 
auxiliary judgments mds mds meaning method declaration mds class type environment current class needed assigning right type compile mds meaning expression class type environment local type environment maps method parameters class names type compiles rule class compiling class class type environment check formed judgment compile method body current class class type environment formed multiple type assignments class name inheritance relation acyclic extended class available field hiding java rule overriding respected overloading conditions correspond requirement class may declare method name different return parameter types inherited method 
note class type may assignment 
definition formedness exactly models checks java compilers perform needed compilation context formal definition 
easy see notion formed class type environment concrete version fj case general notion consistent class type environment introduced section see details 
rules compiling expressions auxiliary judgment form meaning class type environment type constraint holds 
type constraints listed fig 
informal meaning means subtype 
means defined 
means provides field type 
type constraints means provides method applicable arguments type return type parameters type means provides constructor applicable arguments type parameters type 
note constraints implicitly include constraint rules defining judgment fig intuitive self explanatory 
rule side condition fss means declared fss analogously rule mss means declared mss 
type constraints fig rules fig essentially subset defined type constraints called local type assumptions 
rules compilation class fig general rules global compilation fragment fig provide instantiation fj global compilation schema introduced section 
fj compositional compilation section formalize compositional compilation small java language introduced section 
classes compiled isolation polymorphic bytecode 
bytecode annotations may contain type variables denoting names unknown classes 
syntax polymorphic bytecode described productions fig defining binary fragments class declarations method sequences methods respectively productions fig defining binary expressions 
new tn polymorphic bytecode expressions presence type variables difference polymorphic standard bytecode presence polymorphic casting annotated expression type variable substituted specialized holds casting holds casting said polymorphic casting annotation different notation double angle brackets parentheses annotation allowed polymorphic bytecode 
polymorphic bytecode comes sequence polymorphic type constraints involve type variables class names 
listed fig 
polymorphic bytecode meta variable denotes type variable class name 
presence type variables mds mds class class extends fds fss mss class extends fds methods mds md md md md md method parameter meth call new downcast xn cn cn xn return es cn xn return eb ci field access es eb es es 
esn eb eb 
eb 
cn ci new es new eb es eb polymorphic type constraints difference polymorphic type constraints type constrains listed fig presence constraint fig informal meaning means comparable constraint generated compiling cast 
polymorphic type constraints containing type variables called monomorphic type constraints 
rules defining judgement compositional compilation classes fig 
auxiliary judgments mds mds meaning method declaration mds current class needed assigning right type compile mds polymorphic type constraints 
meaning expression local type environment maps method parameters class names type compiles polymorphic type constraints 
intuition compositional compilation rules extract polymorphic type constraints necessary compile source fragment certain polymorphic binary fragment 
cn global compilation es eb type mds mss type fds fss ci note rules check inferred collection constraints satisfiable fragment possible derive judgment statically correct 
consistency checks performed rule linking judgment see 
approach advantage typing rules separate compilation simple implemented straightforward way 
note type system unique judgment derived class declaration proof immediate easily define type inference algorithm effective way deducing just single declaration class type polymorphic bytecode required type constraints 
possible systems needs know environment compiled 
define linking judgment linking fragment polymorphic bytecode equipped polymorphic type constraints class type environment amounts finding suitable substitution mapping type variables class names 
substitution instantiates polymorphic type constraints monomorphic type constraints hold instantiates variables correspondingly constraints eliminated leaving constraints particular constraints eliminated obtain fragment standard bytecode produced global compilation 
instantiation substitution denoted omitted trivial inductive definition coincides conventional variable substitution 
instantiation denoted needed refl fss mss fss mss trans obj object obj object fss mss fss fss mss fss mss fss fss mss ci fss mss cn mss fss mss fss mss object mss fss mss ck fss mss ci fss mss cn fss ck fk 
cn fn entailment judgement rules type constraints fig entailment judgement rules type constraint dealing case 
cases instantiation polymorphic bytecode corresponds variable substitution 

note ability instantiating polymorphic bytecode different kinds standard bytecode instructions key feature dealing important issues resolution java syntax ambiguities see example ambiguities wider context code optimization 
fact monomorphic type constraint holds class type environment expressed judgement defined rules fig fig 
linking ls linking linking judgement formally defined rule linking fig 
rule parameterized linking simplification relation ls linking simplification relation models particular way finding suitable substitutions simplifying type constraints class type environments 
formal definition formed type environments compositional compilation 
judgment liberal allows extended classes undefined 
check global compilation rule class models behaviour standard java compilers 
hand premise rule linking corresponds intrinsic notion consistency expresses additional constraints compiled class satisfied declaration parent class conflicting field method declarations parent class subtype constraints equivalently generated compositional compilation class done preferred compact efficient formulation 
note fj check constraints moved part formedness class type environment classes mentioned field method declarations true general instance local variables 
rules compilation class fig rule linking fig general rules compositional compilation fragment fig provide instantiation fj compositional compilation schema introduced section 
case operator rule frag fig section just corresponds pairwise concatenation sequences constraints binary fragments respectively proper renaming order avoid conflicts type variables 
note type variables occurring compositional compilation judgement implicitly universally quantified 
fact class compilation judgement triple represents standard binary class declarations form class mds mds class class extends fds fss mss class extends fds md methods md md md 
md md method parameter meth call new cast xn cn cn xn return es ci cn xn return eb field access es eb fresh ti es es esn 
tn eb eb 
eb fresh ti new es 
tn new eb compositional compilation type environment substitution 
prove suitable hypothesis relation compositional compilation defined fj safely place global compilation sound complete global compilation sense def def section 
start stating properties entailment needed proof hold independently linking simplification relation choose 
substitutions finite mappings type variables class names 
denotes unique substitution 
empty substitution denoted 
denotes sequence constraints obtained removing constraints vars resp 
vars denotes set type variables appearing resp 

proposition 
implies 
proposition 
exist dom vars 
proposition weakening entailment 
implies 
proposition 
implies 
note prop hold judgment defining formed type environments global compilation holds class hierarchy upward complete 
fresh type mds mss type fds fss order establish assumptions theorem theorem require simplification relation satisfy properties listed theorem informal meaning 
ls sound guarantees simplification step sound sense applying substitution eliminates type constraints hold current class type environment 
ls complete guarantees contains type information satisfy type constraints simplification step possible ls ls complete handles case type information class type environment say guarantee constraints hold 
possible eliminate type constraints larger class type environment possible partially simplify obtaining note requirement allows different strategies ls including strategy simplification just class type environment contains sufficient information simplify type constraints case applies substitutions 
algorithms implementing ls attempt find simplifications possible step 
algorithm section 
theorem 
linking simplification relation ls satisfies properties ls sound relevant ls imply dom vars ls complete relevant dom vars imply ls 
ls complete relevant ls imply 
ls ls compositional compilation fj sound complete global compilation 

linking algorithm section describe particular linking algorithm making rule linking effective sketch proof algorithm correct implementation ls relation 
start basic definitions specify problem aiming solve 
basic definitions specified section consider type environments possibly open environments multiple type assignments class name inheritance cycles field hiding bad method overriding 
furthermore convenient treat sets elements regardless possible repetitions standard set theory notations 
imprecise attempt problem informally stated follows type environment sequence constraints find possibly maximal satisfies note interested incremental linking satisfy environment 
problem statement satisfaction type constraints specified object tempted assert satisfied originally possible solution considered valid sensitive extensions 
instance take discover longer valid solution satisfied 
terms linking process means need backtrack adding class specified formalize reasoning 
solution substitution type variables satisfies valid 
second order avoid backtracking unique possible choice inclusion maps extensions 
definition 
substitutions say iff dom dom dom 
definition 
sequence constraints solution iff 

fact 
solution 
formalized notion solution consider detail situation solution said situation occurs quite naturally considering incremental linking incomplete may contain insufficient information compute solution 
algorithm able identify subsequence solution perform simplification step constraints removed order avoid unnecessary checks linking steps applied remaining constraints returning sequence note algorithm smart maximal exist solution 
distinguish possible situations remaining constraints exists extension gives solution algorithm detect linking error 
case say inconsistent 
linking succeeds constraints need satisfied obtained fragment needs linked execution 
case say undetermined 
definition 
sequence constraints inconsistent iff consistent 
sequence constraints inconsistent called inconsistent 
conversely sequence constraints consistent called consistent 
definition 
sequence constraints determined iff solution inconsistent undetermined 
definition 
sequence constraints determined iff exists determined undetermined 
proposition 
constraint determined iff matches patterns order prove algorithm implements ls relation satisfying properties ls sound ls complete ls complete theorem soundness completeness compositional compilation global compilation guaranteed show relevant set constraints satisfies quite intuitive syntactic property constraint sets satisfy syntactic property define algorithm satisfies conditions theorem 
syntactic property topological relation constraints intuitive meaning processed prior define predicates expressing appears position needs substituted processed expressing appears position processing provide substitution variable 
obvious meaning set variables set variables 
definition 
define input formed argument formed output fails inconsistent returns transforms solution solution pseudo code subs solve env throws fail topologically sorted order try apply remove update catch undetermined return constraint solving algorithm solve 
iff 
iff 

definition 
topological relation defined type constraints iff 
definition 
denote transitive closure set constraints formed iff 


description algorithm java pseudo code main algorithm defined 
method solve takes class type environment returns substitution declared class implementing sequences constraints denotes certain 
invoked method solve throws fail returns substitution simplify invocation throw exception fail inconsistent inconsistent 
method solve returns subsequence solution modified removing applying 
see maximal proving solution 
possible simplifications performed inconsistencies may discovered new fragment linked mainly constraint checked separately 
instance object class names distinct solve returns empty substitution modify clearly inconsistent inconsistency captured performing linking steps 
instance take object solve throws fail clearly inconsistent constraints processed respecting topological order definition possible scan failing simplify constraints 
see topological sorting needed consider instance topologically sorted object 
constraint processed kept undetermined 
constraint removed solution examined constraint instantiated removed 
solve fails perform simplification step 
note assumed formed topologically sorted 
processed instantiated current 
method checks solution returns corresponding substitution throws fail inconsistent undetermined undetermined 
explained fail propagated solve undetermined captured way constraint removed current substitution updated solve continues constraint 
contains pseudo code class representing constraints form cases 
left right hand side constraint variable constraint undetermined corresponding exception thrown 
constraint ground check satisfied 
trivial cases apply reflection top type perform inheritance graph traversal object terminate different ways constraint satisfied return empty substitution object reached finding constraint inconsistent fail thrown traversal stops method superclass throws undetermined superclass included 
case exception caught constraint inconsistent exists 
reason new traversal started looking superclass included contained set superclasses included collected traversal 
class fail thrown superclass throws undetermined object reached undetermined thrown 
correctness algorithm sequel ls denote relation implemented solve relation defined follows ls iff solve returns transforms subs env throws undetermined fail assumed formed lhs var rhs var throw undetermined lhs rhs equals equals object return contain try object superclass add equals return throw fail chain complete object catch undetermined fail object superclass contains throw fail throw undetermined definition propositions ensure ls leads sound complete compositional compilation fj global compilation 
proposition 
relevant formed 
proposition 
relation ls satisfies properties ls sound ls complete ls complete theorem formed 
note prop 
ensures solve invoked sequences constraints sorted topological order defined definition 

related formal model separate compilation linking developed cardelli seminal considered milestone area 
develops simple formal framework separate compilation sake simplification considered consist typechecking linking 
framework considered embody notion compositional compilation formalized 
main differences interested code generation general framework section abstracts particular programming language parametric definition separate compilation linking judgments 
illustrates concepts simple lambda calculus linking just amounts checking entity required type replacing name definition 
consider issue properties compositional compilation satisfy order produce final result global compilation 
properties correspond form soundness completeness described 
firstly introduced formalized general framework separate compilation linking especially suited java languages similar introduced 
framework take account possible specialization bytecode linking linking reduced inter checking checking mutual assumptions fragments satisfied 
consequence framework featherweight java code generated separate compilation standard java bytecode polymorphic bytecode introduced generated bytecode context dependent separate compilation class possible type constraints equivalently possible resulting bytecode 
result important type system java language firstly formally proved guarantee sound complete inter checking point view support principal typings see 
practical side type systems see constitute basis selective recompilation exploited full java possible check change source fragment affects fragments simply checking requirements hold type inference type constraints needed compiling class inferred just inspecting source code 
words compositional compilation meant compilation fragment isolation possible type constraints inferred resulting bytecode 
difference clearer discussing relation approach notion principal typing 
wells typing term collection information appears final judgement proof derivation showing typable roughly speaking typing term principal represents typings see pointed principal typing property typable term principal typing plays key role compositional type inference 
formalized compilation including code generation means type system 
framework performing compilation amounts performing type inference 
type system principal typing property holds terms pairs consisting source binary fragment words bytecode considered part term 
type system compositional compilation proposed principal typing property holds terms source fragments typing triple note bytecode considered part typing system principal typing property source fragment typing modulo renaming type variables derived 

addressed problem supporting compositional compilation languages java binary code depends compilation context 
defined schema formalizing global compositional compilation languages instantiated providing algorithms supporting compositional compilation featherweight java 
best knowledge compositional compilation procedure java language 
believe results exploited different ways 
firstly directly applied development new generation compilers interpreters linkers supporting compositional compilation real languages java 
approach polymorphic bytecode instantiated eagerly step corresponding 
compilers naturally support selective recompilation mechanisms spirit 
respect note application approach full java pose substantially new problems obviously involved forms type constraints briefly discuss 
type constraints modeling field hiding method overloading non polymorphic approach omitted simplicity 
roughly speaking allowing method overloading simply leads different interpretation type constraint call method receiver type arguments type specific method return type parameters type analogously field hiding 
rule meth call fig affected rules defining entailment judgment type constraint fig change order reflect type constraint holds return parameter types specific method call class type environment 
linking simplification algorithm change accordingly 
type constraints modeling relevant java features checked exceptions accessibility levels unreachable code compile time constants 
shown deal java peculiar feature ambiguity expression secondly results lead development flexible run time support java languages allowing execution bytecode containing type variables 
approach polymorphic bytecode instantiated lazily dynamic linking loading initial exploration appears 
includes extensions polymorphic model java features adapting polymorphic case results mentioned interestingly polymorphic methods classes introduced gj java 
plan investigate extension source language may contain type variables 

grateful anonymous referees detailed insightful comments suggestions alex buckley feedback 
instance class static field field class nested class static fied package class field 
partially supported dynamic assembly reconfiguration type checking ec project ist ii thematic network ist 

ancona damiani drossopoulou zucca 
principal typings java languages 
th intl 
workshop formal techniques java programs june 
ancona damiani drossopoulou zucca 
polymorphic bytecode compositional compilation java languages 
technical report dipartimento di informatica scienze dell informazione universit di genova november 
extended proofs available ftp ftp disi unige pub person pdf 
ancona 
stronger typings smarter recompilation java languages 
journal object technology june 
special issue ecoop workshop formal techniques java programs 
ancona zucca 
true separate compilation java classes 
acm sigplan conference principles practice declarative programming ppdp pages 
acm press 
ancona zucca 
principal typings java languages 
acm symp 
principles programming languages pages 
acm press january 
alex buckley sophia drossopoulou 
flexible dynamic linking 
th intl 
workshop formal techniques java programs june 
cardelli 
program fragments linking modularization 
acm symp 
principles programming languages pages 
acm press 
sophia drossopoulou susan eisenbach 
java type system sound 
th european conference object oriented programming ecoop volume lncs pages 
springer verlag june 
igarashi pierce wadler :10.1.1.109.1141
featherweight java minimal core calculus java gj 
acm symp 
object oriented programming systems languages applications pages november 
jim 
principal typings 
proceedings rd acm sigplan sigact symposium principles programming languages pages 
acm press 

smart compilation manager java 
blundo laneve editors italian conf 
theoretical computer science number lecture notes computer science pages 
springer october 

step smart compilation manager java 
haddad andrea omicini roger wainwright lorie editors acm symp 
applied computing sac special track object oriented programming languages systems pages 
acm press march 

capturing ghost dependencies java sources 
journal object technology 
appear 

type systems java separate compilation selective recompilation 
phd thesis dipartimento di informatica scienze dell informazione universit di genova may 
robert 
concepts programming languages 
addison wesley 
seventh edition 
von oheimb nipkow 
java type safe definitely 
acm symp 
principles programming languages acm press 
wells 
essence principal typings 
international colloquium automata languages programming number lecture notes computer science pages 
springer 
