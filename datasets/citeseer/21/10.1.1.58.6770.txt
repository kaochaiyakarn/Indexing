eurographics 
cani slater guest editors point cloud collision detection jan klein gabriel zachmann heinz institute institute computer science university paderborn germany department computer science ii university bonn germany volume number past years efficient rendering surface reconstruction algorithms point clouds developed 
collision detection point clouds considered prerequisite interactive animated graphics 
novel approach time critical collision detection point clouds 
solely point representation detect intersections underlying implicit surfaces 
surfaces need closed 
construct point hierarchy node stores sufficient sample points plus sphere covering part surface 
derive criteria guide hierarchy traversal increase convergence 
prune pairs nodes prioritize visited pairs nodes 
leaves efficiently determine intersection estimating smallest distance 
tested implementation large point cloud models 
results show fast precise answer collision detection queries 
categories subject descriptors acm ccs numerical analysis approximation surfaces contours computer graphics computational geometry object modeling geometric algorithms languages systems object hierarchy physically modeling computer graphics dimensional graphics realism animation virtual reality 
point sets hand popular shape representation past years 
due factors scanning devices affordable widely available second points attractive primitive rendering complex geometry reasons rl 
interactive computer graphics hand requires object representations provide fast answers geometric queries 
virtual reality applications games particular need fast collision detection queries 
prerequisite order simulate physical behavior order allow user interact virtual environment 
far little research point cloud representations suitable interactive computer graphics 
particular virtually literature determining collisions sets points 
novel algorithm check collision point clouds 
eurographics association blackwell publishing 
published blackwell publishing road oxford ox dq uk main street ma usa 
algorithm treats point cloud representation implicit function approximates point cloud 
note explicitly reconstruct surface 
avoid additional storage overhead additional error introduced polygonal reconstruction 
novel algorithm constructing point hierarchies repeatedly choosing suitable subset 
incorporates hierarchical sphere covering construction motivated geometrical argument 
hierarchy allows formulate criteria guide traversal parts tree collision 
way obtain time critical algorithm returns best effort result time budget exhausted 
addition point hierarchy possible application specify maximum collision detection resolution time budget 
section review related 
section describes overview approach section shows details 
section provides var ious results benchmarks new approach 
section draws describes possible avenues 

related wealth literature problem efficient high quality rendering point clouds little geometric queries object representations 
elementary query considered intersecting point clouds rays aa sj aa 
idea sj intersect ray set discs surfels 
octree acceleration structure performance significantly slower polygonal reconstruction 
aa aa intersect ray continuously defined surface point cloud 
exact intersection point approximated successive polynomial local reconstructions 
construct sphere covering hierarchical 
addition exact construction hierarchical sphere covering theoretically better motivated 
related ad 
algorithm perform boolean operations solids 
problem constructing new solid boolean operations problem detecting intersection time critical scenario somewhat related obvious significant differences 
addition ad represent objects surfels 
contrast consider continuous surface defined set points 
furthermore approach handle solids partition space inside outside octree 
approach general handle non closed geometry 
efficiently rendering point clouds researchers point hierarchies see rl dvs 
suited collision detection 
collision detection rigid polygonal objects bounding volume bv hierarchies proven efficient data structure hub glm zac 
new algorithm utilizes auxiliary bvs enclose points different levels hierarchy 
principle bv types just mentioned choose yields best performance 
bv hierarchies lend time critical collision detection scheduler interrupts traversal time budget exhausted hub kz 
applied polygonal objects point clouds estimation intersection probabilities done completely different 

overview approach point cloud pa viewed way define function fa implicit fa approximates klein zachmann point cloud collision detection approach constructs point hierarchy node stores sample points underneath yields different levels detail surface 
addition store sphere covering surface node 
note compose sphere covering spheres 
pa point clouds pa pb pursue hierarchical approach quickly determine points fa fb exploiting spatial knowledge surface 
idea algorithm create hierarchy points stored leaves 
inner node store sample point cloud underneath simple bv box sphere covering part surface corresponding node see fig 

point cloud samples effectively represent simplified surface sphere coverings define neighborhood contains original surface 
sphere coverings hand quickly eliminate possibility intersection parts surface 
simplified point clouds hand sphere coverings determine kind likelihood intersection parts surface 
point cloud hierarchies objects tested collision simultaneous traversal see fig 
controlled priority queue 
pair nodes needs visited algorithm tries estimate likelihood collision assigns priority descends pairs largest priority 
pair leaves number test points 
order point hierarchy memory efficient compute optimal sphere covering eurographics association blackwell publishing 
traverse simple bvs overlap return sphere coverings overlap return leaves return approx 
distance surfaces inside children ai compute priority pair ai bj traverse ai bj largest priority outline hierarchical algorithm point cloud collision detection 
compute optimal sample inner node 
combine sphere centers sample 

constructing data structure section describe construction data structures hierarchical collision detection algorithm 
treat terms bounding volume bv node hierarchy synonymous 
denote bvs different hierarchies 
sake accuracy conciseness introduce definitions 
definition cloud point point point cloud denoted cloud point 
set cloud points lying bv border see previous section denoted pa definition sample point inner node hierarchy stores sample cloud points lying border 
sample points denoted pa 
definition test point test point arbitrary point necessarily contained point cloud 

surface definition define surface point cloud implicitly weighted squares 
sake completeness give quick recap surface definition section please refer aa details 

implicit distance function points pi 
implicit function describes distance point plane point normal klein zachmann point cloud collision detection point weighted average ni pi pi pi eurographics association blackwell publishing 
set convex hulls induced leaves underneath inner node hierarchy covered spheres obtaining neighborhood containing surface 
normal defined weighted squares minimizes pi pi fixed constraint 
exactly smallest eigenvector matrix bi pk pki pk kernel global parameter called bandwidth allows tune decay influence points theoretically unbounded 
details section 

horizon influence practice consider point pi pi defines horizon influence pi 
regions small number pi taken account computing 
amend points number pi taken account small note independent parameters 
aa proposed amendment differently specified differently motivated 
surface defined constrained equ 
implies log 
approximate distance point surface 
limit region influence points need consider points inside bv plus points border 

point cloud hierarchy section describe method construct hierarchy point sets organized tree hierarchical sphere covering surface 
step construct binary tree leaf node associated subset point cloud 
order efficiently recursively split set points top process 
create leaf number cloud points threshold 
store suitable bv node collision detection process 
striving maximum collision detection performance split set minimize volume child bvs zac 
note far partitioned point set assigned subsets leaves 
second step construct simplified point cloud sphere covering level hierarchy 
set sphere centers exactly simplified point cloud 
advantages need virtually extra memory store simplified point cloud 
derive construction sphere covering node hierarchy centers spheres chosen points assigned leaves underneath 
order minimize memory usage spheres node radius 
problem bears relationship general mathematical problem sphere coverings see cs instance different constraints goals 
specifically node sphere covering determined 
ln leaves underneath denote pi cloud points lying li border ch pi convex hull 
pa pi 
moment assume surface borders intentional holes 
li ch pi 
ch pi 
trying find sphere covering surface contained directly goal find set ki spheres centered ki common radius ra vol vol ki minimal constraints ki pa covers bounded size see fig 

problem solved fast randomized algorithm need explicit representation convex hulls see 
exact solution expensive combinatorial optimization problem exponential number possible sets ki 
addition constructing convex hulls minimal enclosing spheres fairly expensive 
section derive suitable bounds size klein zachmann point cloud collision detection bvs sphere coverings stored node quickly exclude intersections parts surfaces 
propose randomized algorithm tries determine sample pa sphere centers ki computes appropriate ra 
stages basic operation construction random point convex hull set points trivial 

construction idea choose sample points ki pa interior distances order 
sphere covering ki fairly tight thin 
choose random point lying bv find closest point pa equivalent randomly choosing voronoi cell pa probability depending size add set repeat random process contains desired number sample points see section 
order obtain evenly distributed ki better quasi random number sequences 
want prefer random points interior points close border compute weighted average points pi randomly chosen li 

determining ra conceptually construct voronoi diagram ki intersect ch pi determine radius remainder voronoi cell take maximum 
construction voronoi diagram takes number sites propose method similar monte carlo integration follows 
initialize ra 
generate randomly independently test points determine minimal distance set ra repeat process sufficient number test points words continuously estimate vol vol points points eurographics association blackwell publishing 
fa fb klein zachmann point cloud collision detection neighborhood fb sample nodes efficiently determine intersection nodes 
increase ra find fraction 
order improve estimate apply kind stratified sampling choose test points neighborhood instance uniform distribution confined box 

simultaneous traversal point cloud hierarchies section explain details algorithm determines intersection point hierarchies constructed 

exclusion criterion utilizing sphere coverings node quickly eliminate possibility intersection parts surface see fig 

note need test pairs spheres 
bvs node eliminate spheres outside bv node 

priority criterion mentioned strive time critical algorithm 
need way estimate likelihood collision inner nodes guide algorithm shown fig 

assume moment sample points describe closed manifold surfaces fa fb resp 
certain intersection find points fa different sides fb 
achieve heuristic 
assuming points close surface close fb look points fig 

order improve heuristic consider test points outside rb neighborhood eurographics association blackwell publishing 
visualization implicit function noisy point cloud black dots 
points shown magenta 
red denotes blue denotes 
normal flips red dashed line 
fb decreases probability sign fb fb equal 
estimate likelihood intersection proportional number points sides 
argument holds course normal nb equation change sides bv experience fortunately appears rarely case particular uses covariance matrix centered proposed equ 
see fig 


intersection test leaf nodes traversal reached leaf nodes just apply traversal criterion return intersection met 
ideally find test point fa fb fa fb defined pa pb resp 
practice point reasonable amount time generate randomly independently constant number test points lying sphere covering object see left fig 

take dab min fa fb estimate distance surfaces see right report intersection dab 
note sufficient compute distances points stored intersection point necessarily close cloud point 
order obtain better estimate perform iterative approximation pair closest points surfaces experience simplistic approach worked remarkably 
klein zachmann point cloud collision detection order efficiently estimate distance surfaces contained pair leaves generate number random test points left estimate distance right 

time critical collision detection traversal prioritization leaf intersection test described facilitate time critical approach hand time budget exhausted collision detection process returns best effort answer collision query 
needed time critical applications real time response needed circumstances 
hand time left algorithm spend time collision detection leaf nodes increase accuracy 
done trying spend time tmax collision query adjusting number test points distance objects see section 
time needed larger tmax number test points gradually decreased increased vice versa 

automatic bandwidth detection sampling radius estimation algorithm evaluate subsets different sampling densities 
consequence automatically adjust bandwidth section sampling density holes appear higher point cloud hierarchy 
course inevitable intentional holes surface closed higher levels just produces false positives traversal 
definition sampling radius consider volume point set pa subset pa consider set spheres centered cover surface defined pa inside spheres equal radius 
define sampling radius minimal radius sphere covering 
define sampling radius set pa special case pa definition 
special case define sampling radius point cloud root bv definition 
surfaces interpolate point cloud notion sampling 
addition believe definition practical 
determine bandwidth points distance times sampling radius influence equ 
close surface log 
follows equ 
notion horizon influence see section 
obviously plug ra sampling radius inner nodes 
overestimate spheres constructed section cover intentional holes results imprecise alternatively estimate follows 
assume implicit surface sa point set pa approximated surfels discs equal size 
assume approximated surfels pa contain significant discrepancies local sampling radius vary 
surface area fa estimated follows fa pa pa pa pa 
derive estimate number sample points needed node order achieve radius pa pa 
consequence sampling radius point hierarchy points node stored 
largest sampling radius root node sampling radius leaves 
instance sampling radius node point cloud consists points points node need stored 
practice compromise number points corresponding quality 

fast function evaluation bv traversal equation needs evaluated times 
order achieve maximum performance procedure 
compute eigenvalues determining roots cubic characteristic polynomial smallest 
compute associated eigenvector cholesky decomposition eurographics association blackwell publishing 
klein zachmann point cloud collision detection happy buddha elephant grid cloud points sample points avg 
depth node table comparison number cloud points sample points average depth node hierarchy objects appreciably different values listed 
time sec 
hierarchy construction cloud points plot shows build time point cloud hierarchies various objects 
second step possible positive semi definite smallest eigenvalues 
cholesky decomposition performed full pivoting done hig 
experience method faster jacobi method factor faster singular value decomposition factor 
results implemented new algorithm 
implementation fully optimized 
results obtained ghz pentium iv 
timing performance measuring quality set objects see fig 
varying complexities respect number points 
benchmarking performed procedure proposed zac computes average collision detection times range distances identical objects 

hierarchy construction point cloud hierarchies built fairly short time construction performed startup time see fig 

memory consumption hierarchy fairly low node store bv pointer child nodes float radius ra constant number pointers sample cloud points lying number pointers points border bv 
eurographics association blackwell publishing 
means need bytes node 
practice bytes node needed 
example hierarchy largest model grid consisting nodes consumes mb main memory 
course store cloud points main memory 
table gives overview number generated sample points average depth node hierarchy 

time quality plot fig 
left fig 
left shows average runtime model test suite range artificial models considered section 
new algorithm suitable real time applications particular simulation interactive applications 
approach see section detection time decreased collisions going 
object test suite compared outcome new algorithm traditional polygonal collision detection high resolution polygonal model 
way give experimental hints error probability new algorithm 
note polygonal models tessellation true implicit surface just tessellation point cloud 
results fig 
right fig 
right show difference relatively low average 
distances happy buddha elephant different answers reported 
collision tests considered root bvs intersect 
differences explained facts implicit surface defined vertices polygonal object obviously different polygonal model 
second intersection finding algorithm leaf nodes simplistic moment 
equivalent measurements artificial models fig 

note models boundaries spheres model consists unconnected components 
obviously approach achieves results models 
grid model causes differences compared polygonal collision detection 
probably surface definition section valid manifold objects 
time klein zachmann point cloud collision detection timings various objects buddha elephant distance different answers difference polygonal collision detection various objects buddha elephant distance left timings different objects see fig 

right differences polygonal collision detection differences measure errors number different reports point versus polygonal collision detection algorithms 
note polygonal models tessellation true implicit surface just mesh densest point cloud 
results teddy similar omitted 
time timings happy buddha distance different answers difference polygonal collision detection happy buddha distance left timings different object complexities points happy buddha model 
right differences polygonal collision detection objects 

time critical collision detection time critical algorithm section tries spend amount time tmax collision query 
results fig 

obviously time critical algorithm spends amount time collision detection 
adapt number test points leaves point hierarchy better 
note measured average collision query time lower tmax result achieved earlier traversal doesn reach leaf nodes 

novel approach collision detection point clouds best knowledge 
works non closed surfaces base weighted squares approach 
proposed efficient algorithm constructing point hierarchies incorporating hierarchical sphere covering suited collision detection 
described method automatic bandwidth sampling rate detection different levels hierarchy 
sphere covering implicit function derived criterion prioritizing traversal find intersections quickly 
collision detection algorithm time budget returns best effort result guarantee real time response circumstances 
performed measurements show models collision queries done short time little error 
avenues 
hand performance accuracy increased traversal point hierarchies 
instance faster convergence leaves intersection point 
inner nodes traversal criteria probably improved instance applying knowledge separation eigenvalues 
hand point hierarchy hierarchical sphere covering improved allow faster collision detection 
instance sphere covering tighter definition surface eurographics association blackwell publishing 
time time 
klein zachmann point cloud collision detection timings artifical models grid spheres distance difference answers difference polygonal collision detection artifical models grid spheres distance timings difference polygonal collision detection artificial models 
timings time critical collision detection grid time critical elephant time critical grid non time critical elephant non time critical distance different answers difference polygonal collision detection grid time critical elephant time critical grid non time critical elephant non time critical distance timings differences time critical non time critical algorithms 
improved 
additionally method combined cbc 
partially supported dfg da analyse von dfg program informatik za 
aa adamson alexa approximating intersecting surfaces points 
proc 
eurographics symposium geometry processing spg aachen germany june pp 

aa adamson alexa approximating bounded non orientable surfaces points 
shape modeling international 
accepted 
amenta choi dey simple algorithm homeomorphic surface reconstruction 
proceedings sixteenth annual symposium computational geometry acm press pp 

eurographics association blackwell publishing 
ad adams interactive boolean operations bounded solids 
proc 
siggraph july vol 
pp 

bala walter greenberg combining edges points interactive high quality rendering 
proc 
siggraph july vol 
pp 

kobbelt efficient high quality rendering point sampled geometry 
proc 
eurographics workshop rendering pp 

cbc carr beatson mitchell fright mccallum evans reconstruction representation objects radial basis functions 
proc 
siggraph pp 

cs conway sloane sphere packings lattices groups ed 
springer verlag new york 
de berg van kreveld overmars schwarzkopf computational geometry algorithms applications nd ed 
springer verlag berlin germany 
sullivan graceful degradation collision handling physically ani klein zachmann point cloud collision detection models test suite courtesy left right polygon technology stanford 
artificial models spheres grid show approach works non closed geometry 
numbers sizes respective point clouds 
mation 
proc 
eurographics aug vol 
pp 

dvs stam sequential point trees 
proc 
siggraph acm trans 
graphics san diego california july vol 
pp 

glm gottschalk lin manocha obb tree hierarchical structure rapid interference detection 
proc 
siggraph aug pp 

hig higham analysis cholesky decomposition semi definite matrix 
reliable numerical computation cox hammarling eds oxford university press pp 

hub hubbard approximating polyhedra spheres time critical collision detection 
acm transactions graphics july 
kz klein zachmann time critical collision detection average case approach 
proc 
acm symp 
virtual reality software technology vrst osaka japan oct pp 

press flannery teukolsky vetterling numerical recipes nd ed 
cambridge university press cambridge england 
pfister zwicker van baar gross surfels surface elements rendering primitives 
proc 
siggraph pp 

rusinkiewicz hall holt levoy real time model acquisition 
acm transactions graphics july 
rl rusinkiewicz levoy multiresolution point rendering system large meshes 
proc 
siggraph pp 

sj jensen ray tracing point sampled geometry 
proc 
eurographics workshop rendering techniques brno czech republic june springer verlag pp 

van den bergen efficient collision detection complex deformable models aabb trees 
journal graphics tools 
zac zachmann minimal hierarchical collision detection 
proc 
acm symposium virtual reality software technology vrst hong kong china nov pp 

zwicker pfister van baar gross ewa splatting 
ieee transactions visualization computer graphics july sept 
eurographics association blackwell publishing 
