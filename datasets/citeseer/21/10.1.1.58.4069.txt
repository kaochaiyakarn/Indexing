comparison coverage distribution techniques filtering prioritizing test cases david leon andy podgurski electrical engineering computer science department case western reserve university euclid avenue cleveland oh usa edu andy eecs edu presents empirical comparison different techniques filtering large test suites test suite minimization prioritization additional coverage cluster filtering cluster sampling failure pursuit sampling 
techniques selecting subsets maximize code coverage quickly possible analyzing distribution tests execution profiles 
techniques compared data sets obtained large subject programs gcc jikes javac compilers 
results indicate techniques efficient efficient revealing defects coverage techniques kinds techniques complementary sense find different defects 
accordingly simple combinations techniques evaluated test case prioritization 
results indicate techniques create efficient generated prioritization additional coverage 

desirable filter pool test cases program order identify subset executed audited checked conformance requirements particular time 
example suite regression tests long lived system may large feasible execute fraction program modified 
deployed application may instrumented capture executions developers replay audit captured inputs refresh regression test suite 
number executions captured may exceed number feasible audit 
automatic test data generator may capable producing tests tester able run audit 
naturally desirable select test cases reveal defects program test 
worthwhile sum cost filtering process costs executing auditing selected tests cost executing auditing tests original pool 
note necessary audit test executions manually case cost auditing typically dominates costs 
papers investigated techniques test case filtering closely related problem test case prioritization analyzing profiles test executions 
profiles characterize aspects test executions thought relevant tests reveal defects 
example profile may indicate statements conditional branches data flow relationships program covered test 
approaches filtering prioritizing regression tests employ profiles collected testing previous versions program 
approaches emphasize economical reuse test cases applicable new tests cases 
example basic forms filtering regression testing involves eliminating old tests execute code changed time tests run 
approaches employ profiles produced executing current version program test entire pool test cases 
approaches focus reducing cost auditing test executions applicable new test cases old ones 
reports results empirical comparison basic approaches filtering prioritizing test cases 
approach greedily maximizing code coverage achieved selected set tests selecting test case covers largest number statements selecting test case covers largest number statements covered 
approach called test suite minimization literature greedy selection algorithm viewed attempting find minimal test set covers code covered original pool test cases 
approach test case filtering prioritization consider execution profiles induced test cases distributed profile space 
illustrated closely related techniques cluster filtering failure pursuit 
cluster filtering calls automatic cluster analysis partition pool test cases similar corresponding profiles measured dissimilarity metric 
tests selected cluster particular clusters 
example cluster sampling calls randomly selecting test cluster 
failure pursuit sampling extension cluster sampling calls selecting nearest neighbors failures auditing sample tests 
additional failures nearest neighbors selected additional failures 
maximizing code coverage fundamental idea software testing 
motivated idea confidence parts program executed testing 
argued code coverage adequate criterion selecting test cases testers achieve high coverage selecting simple test cases reflect program practice 
techniques cluster filtering failure pursuit sampling idea distribution test profiles reflects additional information test cases useful filtering prioritizing 
example distribution synthetic tests may indicate test cases unique similar possibly redundant distribution operational tests indicates kinds executions common field kinds rare 
course distribution test profiles depends nature profiles dissimilarity profiles measured 
example distribution code coverage profiles may quite different distribution variable value profiles 
focus code coverage profiles different granularities 
distribution filtering prioritization techniques exploit information coverage profiles ignored coverage maximization magnitude execution counts additive nature common dissimilarity metrics discriminate finely tests 

related number empirical studies comparing different regression test selection prioritization techniques terms defect detection effectiveness reported 
note study reported address regression testing techniques particular information program changes 
wong studied effectiveness test suite reduction techniques 
graves examined costs benefits regression test selection techniques including test suite minimization greedy coverage maximization dataflow technique safe technique random selection 
separate studies rothermel compared test case prioritization techniques including ones code coverage estimated fault proneness factors 
kim porter evaluated regression test selection techniques technique prioritization technique invention exploits historical execution data 
selection prioritization techniques considered aforementioned studies distribution 
distribution filtering prioritization techniques examples observation testing described 
cluster filtering variants evaluated empirically 
failure pursuit sampling compared empirically cluster filtering 
previous distribution filtering techniques address effects profile granularity distribution techniques reveal different defects techniques greedy coverage maximization 

test case selection prioritization goal test case filtering select relatively small subset test suite finds large portion defects test suite 
examine case resources execute profile tests resources manually audit 
different regression testing scenario profiles available old version program tests designed self validating manual auditing required goal reduce total cost running tests new version 
uncertain tests run audited advantageous order test cases defects early permits developers start fixing problems quickly 
idea called test case prioritization 
note test case filtering prioritization closely related 
fact prioritization test cases filter simply choosing tests ordering 
test case prioritization algorithm test case selection algorithm 
reverse true general 
evaluating test case prioritization techniques take account number defects function time 
test case prioritization literature uses weighted average percentage faults detected apfd 
apfd basically area curve plot defects versus time 
figures examples plots 
value apfd metric ranges higher values indicating defects earlier 
measure evaluating prioritization techniques 

coverage techniques important idea traditional software testing test suite execute cover program test 
program element certain kind function statement branch def chain test exercises element 
generally agreed test set achieve high code coverage order considered thorough 
code coverage principal determinant quality test set particular class programs selecting test cases audited pool test cases program may desirable select smallest subset pool covers program elements entire pool 
called test suite minimization regression testing literature 
code coverage principal determinant test set quality may desirable select subset step complex selection procedure 
selecting smallest subset test pool maximizes code coverage instance set cover problem np complete admits greedy approximation algorithm 
iterations manual effort needed initially determine expected output manual effort required self validating tests reused 
software defects property test case exercises defective code induce observable failure 
greedy algorithm selects test covers largest number elements covered previously selected tests 
sequel refer technique basic coverage maximization emphasize code coverage basis selecting test cases 
extend selection technique order prioritize test cases test suite place test cases non decreasing order respect perceived likelihood revealing defects 
approach call additional coverage prioritization involves running greedy coverage maximization algorithm repeatedly set test cases prioritized 
priority test case corresponds order selected process 
earlier test case selected higher priority sequel refer prioritization technique repeated coverage maximization 

distribution techniques basic repeated coverage maximization filter prioritize test cases respectively incremental contribution maximizing code coverage distribution techniques select prioritize test cases profiles distributed multidimensional profile space defined particular dissimilarity metric 
dissimilarity metric function pair profiles outputs real number representing degree dissimilarity 
example profile space dimensional space defined applying euclidean distance metric profiles record basic block execution counts program basic blocks 
note euclidean metric accurately reflects magnitude execution counts greedy coverage maximization applied profiles consider basic blocks executed 
tester free choose dissimilarity metric emphasizing aspects available profiles believes relevant revealing defects 
typical dissimilarity metrics take form possibly weighted sum term profile feature execution count 
demonstrate idea profile space consider presents multidimensional scaling plot dissimilarity metrics gcc data sets experiments 
mds technique produces plot distance points approximate distance dissimilarity metric 
analyzing notice example region set points bottom right separate rest 
represent tests compiler executed optimizations 
likewise see outliers clusters similar executions 
multidimensional scaling display gcc dataset 
points represent test executions 
distribution techniques filtering prioritizing test cases identify features profile distribution potentially relevant revealing failures features guide selection prioritization process 
example clusters similar profiles may indicate redundant tests case may suffice select representatives cluster 
isolated profiles may indicate tests inducing unusual conditions may especially cause failures 
operational executions low density regions profile space may indicate uncommon user behaviors warrant investigation 
leon linear regions correspondence analysis display compiler tests corresponded files compiled optimization level 
consider types distance filtering prioritization techniques cluster filtering failure pursuit 
cluster filtering automatic cluster analysis 
cluster analysis multivariate analysis method finding groups clusters population objects 
cluster analysis algorithms dissimilarity metric euclidean distance manhattan distance partition population clusters 
objects placed cluster similar objects clusters 
cluster filtering uses cluster analysis partition set tests clusters dissimilarity profiles 
test selected audit cluster particular clusters 
cluster filtering procedure defined choice clustering algorithm dissimilarity metric cluster count sampling method 
example sampling method cluster opc sampling 
name suggests calls selecting exactly test cluster 
sampling desirable properties redundancy selected subset minimized test selected cluster similar tests 
unusual executions selected usually placed cluster 
selected tests exercise distinct program behavior represented cluster tests 
failure pursuit sampling adaptive extension cluster filtering seeks exploit observation failed tests clustered small clusters 
failure pursuit calls selecting nearest neighbors failures auditing initial subset tests 
additional failures nearest neighbors selected additional failures 
experiments reported 
failure pursuit effective revealing failures experiments reported clear adaptive phase revealed different defects cluster filtering phase 
address issue section 
experimental results performed experiments real world programs evaluate defect detection efficiency properties basic coverage maximization repeated coverage maximization cluster sampling failure pursuit 
specifically investigated questions techniques compare 
best technique terms efficiency selecting subsets various sizes 
distribution techniques find defects coverage techniques 
profile granularity affect efficiency different techniques 
presenting experimental results concerning filtering techniques consider new prioritization techniques formed combining filtering techniques compare repeated coverage maximization random ordering 

subject programs test suites study experimented large programs different profile granularities 
part data set 
profiles finer granularities table results basic coverage maximization selected defects gcc function edges jikes function edges javac function programs 
compilers study 
gcc compiler version ibm jikes compiler java version sun javac java compiler build 
self validating test suites available compilers 
gcc tested part test suite distributed gcc team 
test suite shipped gcc contains tests defects gcc 
regression test suite maintained developers program 
bug fixed compiler test case added test suite sure similar problems caught 
chose execution tests test suite tests input accepted compiler resulting program tested 
tests failed 
jikes javac tested test suite tests adherence java language specification 
test suite maintained separately compiler projects includes tests section language specification 
tests jikes failed tests javac failures 
difference size comes compiler specific tests 
failures occurred test suites executed classified manually groups failures believed cause 
done part previous order validate automated technique classifying failures see details 
resulting classification distinguish failures caused different defects 
observed failures associated defects gcc jikes javac respectively 
gcc jikes profiled profiler distributed gcc 
relies instrumentation placed gcc basic block gather profiling information sampling stack fixed time intervals common profilers making accurate testing purposes 
modified allow retrieve raw output profiler 
able obtain profiles program including execution counts different granularities functions basic blocks control flow edges basic blocks 
postprocessing redundant information removed 
example basic blocks count counts removed 
step gcc function execution counts basic block execution counts basic block edge execution counts jikes function execution counts basic block execution counts basic execution counts 
javac written java profiled simple profiler written java virtual machine profiling interface 
able obtain function call profiles javac unable program studying effect granularity test case filtering prioritization techniques 
data helps evaluate generalize different programs 

experimental setup basic repeated coverage maximization implemented greedy algorithm described section 
overlooked property algorithm encounter ties doing greedy selection 
common solution pick test input optimal 
study effect property ran replications program granularity combination shuffling order test running algorithm 
recorded tests failures defects selected order apfd results prioritization technique 
experiments cluster sampling failure pursuit necessary choose dissimilarity metric clustering algorithm 
dickinson report experiments different dissimilarity metrics cluster filtering failure pursuit 
techniques best proportional binary metric modified euclidean distance formula takes account element covered count times element executed adjusting differences scale counts 
define ci count number times element executed test run define pi ci min ck pi max ck min ck pi normalized counts 
define bi pi 
distance runs term failure refer failed test case opposed defect refers actual defect detected failure 
defects detected pn pm bn bm tests selected functions edges random cluster sampling results gcc 
metric emphasizes effect coverage account actual value counts 
clustering algorithm hierarchical agglomerative clustering average linkage 
algorithm starts placing test execution separate cluster iteratively finds similar clusters joins larger 
dissimilarities updated iterations reflect average distance components new cluster 
algorithm stops requested number clusters reached 
experiments cluster sampling failure pursuit involved doing replications techniques recording number tests failures defects selected selected sample test suite selected basic coverage maximization 
experiment done defects detected tests selected functions edges random cluster sampling results jikes 
defects detected combination program profile granularity 
number clusters algorithms varied correspond different percentages size test suite 
sizes test suite size coverage test suite selected comparison 

effects granularity section study effects profile granularity coverage distribution filtering techniques 
gcc jikes data sets considered javac profiled granularity level 
table shows average results basic coverage maximization programs 
interesting note full coverage achieved relatively small subset 
basic block edges size selected subset original size 
increasing detail profile increases defects detected tests selected functions edges random failure pursuit results gcc 
tests selected functions edges random failure pursuit results jikes 
defects detected tests selected cov 
fn cov 
bb cov edges coverage random repeated coverage results gcc 
circles mark results basic coverage maximization 
number tests selected number defects expected amount subset size increases surprising 
gcc selected subset control flow edges times size functions 
likewise jikes covering edges requires times tests required covering functions 
hand finest granularity level basic coverage maximization finds best defects 
considering cluster sampling failure pursuit little difference results different granularities 
example figures show number defects vs number tests selected cluster sampling failure pursuit gcc jikes 
data sets results different granularities close subset size 
jikes results nearly identical gcc function call counts yields better results granularities small subset sizes worse larger subsets 
case jikes numbers defects similar subset sizes gcc 
fact gcc numbers sample size cases 
granularity small effect results function level granularity presenting results section 
repeated coverage maximization technique effects changing granularity different program 
figures show results repeated coverage maximization technique subset sizes total 
programs coverage pass works sense basic coverage finds large proportion defects 
gcc subsequent coverage passes inefficient point defects detected tests selected cov fn cov 
bb cov edges coverage random repeated coverage results jikes 
circles mark results basic coverage maximization 
total efficiency technique quickly drops expected random subset 
jikes repeated coverage passes better function call data set finds slightly defects 

comparison filtering techniques results comparing basic coverage maximization repeated coverage maximization cluster sampling failure pursuit 
figures show plots subset size vs defects different techniques subject programs 
figures include results random sampling serves control technique 
general see techniques possible select test cases way reveals defects simple random sampling 
overview results program general drawn 
interestingly trends gcc jikes different depending subset size 
gcc subsets size entire test pool efficient technique sampling followed closely basic coverage maximization failure pursuit 
larger sample sizes failure pursuit cluster sampling find similar number defects 
interesting note repeated coverage maximization perform data set providing efficiency similar simple random sampling sample size greater needed basic coverage 
jikes failure pursuit sampling smaller sample sizes better larger samples sizes 
defects tests selected opc functions pursuit functions cov edges random coverage comparison techniques gcc 
best granularity technique shown 
circles mark results basic coverage maximization 
techniques better basic repeated coverage maximization repeated coverage maximization perform badly gcc 
javac basic coverage maximization better cluster sampling failure pursuit small sample size needed full coverage 
efficiency repeated coverage maximization quickly drops cluster sampling failure pursuit 
cluster sampling efficient failure pursuit 
draw techniques small sample sizes basic coverage maximization find defects efficiently 
cluster sampling defects tests selected opc pursuit coverage cov 
random comparison techniques javac 
circle marks result basic coverage maximization 
defects tests selected opc functions pursuit functions cov fn coverage random comparison techniques jikes 
best granularity technique shown 
circles mark results basic coverage maximization 
achieves comparably better results necessarily achieve full coverage 
technique selecting small sample 
running tests selected basic coverage maximization efficient cluster sampling failure pursuit repeated coverage maximization 
smaller sample sizes sampling efficient efficient failure pursuit converse true larger sample sizes 
means sample size taken consideration selecting technique 
studying failure pursuit important question efficient simply increase sample size cluster sampling 
failed tests selected tests selected opc pursuit coverage random number failed test cases selected gcc cluster sampling failure pursuit 
function call profiles 
table apfd results various prioritization techniques 
best result row boldface 
program granularity random cov 
basic coverage random gcc turns larger sample sizes failure pursuit finds new defects efficiently efficiently simply increasing sample size cluster sampling 
somewhat surprising failure pursuit looks executions profiles similar known failures 
expect failures similar profiles cause 
practice failure pursuit new old defects 
fact failure pursuit similar larger number new defects cluster sampling selected tests revealed defects repeatedly 
example effect see shows number failure causing test cases selected gcc 
see failure pursuit selects failure causing test cases cluster sampling shows find similar number defects 
notice having multiple example failures caused defect aid debugging failure pursuit provides sacrificing efficiency finding new defects 
question interest coverage techniques distribution techniques select similar tests 
program granularity compared subsets selected basic coverage maximization subsets selected cluster sampling 
similar sample sizes cluster sampling finds defects basic coverage maximization plus number defects 
indicates techniques find different defects 
experimented combining techniques simply running basic coverage maximization cluster sampling followed failure pursuit 
result doing function level negligible coverage finds failures 
finer granularities large cluster samples results slightly better comparable failure pursuit gcc similar jikes 

combining coverage techniques mentioned fault detection efficiency cov 
opc pursuit random opc pursuit random opc pursuit cov 
random functions edges jikes functions edges javac functions repeated coverage maximization technique drops coverage pass falling random sampling data sets 
explore possibility knowledge learned section order create prioritization algorithm performs better data sets 
key observations coverage maximization pass efficient revealing defects 
cluster sampling failure pursuit efficient selecting test sets larger selected basic coverage maximization 
additional tests required random sampling 
examine idea prioritizing test cases running combinations algorithms basic coverage maximization random basic coverage maximization cluster failure pursuit random 
cluster failure pursuit random cluster failure pursuit basic coverage maximization random example second technique listed execute tests selected basic coverage maximization algorithm order algorithm selects 
execute tests selected cluster sampling sample size ones selected failure pursuit 
cluster sampling clusters processed order create clustering algorithm implies tight clusters processed 
remaining tests ordered randomly 
ran replication coverage cluster sampling pursuit parts 
notice simple way combining techniques 
explore better ways creating prioritization techniques 

comparison prioritization techniques table shows apfd results different techniques evaluated 
results confirm previous observation random ordering outperforms defects repeated coverage maximization gcc jikes javac 
interesting note gcc basic block arc granularity efficient technique simply coverage maximization pass order remaining test cases randomly 
figures show results comparing best composite techniques program repeated coverage maximization technique 
jikes javac efficient prioritization algorithm basic coverage maximization cluster sampling pursuit random done function call level 
gcc combination second efficient efficient basic coverage maximization random basic blocks apfd larger function call profiling done efficiently combination attractive practice 
defects detected test number random cov 
functions cov 
cov 
edges fn cov opc pursuit bb cov rand gcc prioritization results 
test number cov 
cov opc pursuit rand random javac prioritization results 
defects test number cov 
functions cov 
cov 
edges random fn cov opc pursuit edges opc pursuit cov jikes prioritization results 

results suggest research different related directions intend evaluate distribution techniques new prioritization techniques setting regression testing profiles available come previous version software 
expect results extend settings similar 
part techniques extended information elements program changed old new versions done past coverage techniques 
intend improve distribution prioritization algorithms results show order test set executed optimal 
different heuristics order tests 
alternative take advantage hierarchical nature clustering algorithm 
favor selection small clusters contain failures larger clusters 
likewise integrate coverage techniques tightly avoid redundant testing 

experimental results show distribution filtering techniques exhibit defect detection efficiency 
results suggest selecting test sets larger selected basic coverage maximization techniques efficient repeated coverage maximization method 
significantly results suggest coverage distribution techniques complementary find different defects 
accordingly simple combinations techniques evaluated exhibit higher defect detection efficiency repeated coverage maximization 
order determine generality results necessary replicate variety subject programs 

validation verification testing computer software 
acm computing surveys june 
borg groenen modern multidimensional scaling theory applications springer 
dickinson leon podgurski finding failures cluster analysis execution profiles 
proceedings rd international conference software engineering toronto may 
dickinson leon podgurski pursuing failure distribution program failures profile space 
proceedings th european software engineering conference th acm sigsoft symposium foundations software engineering vienna september acm press 
rothermel prioritizing test cases regression testing 
proceedings international symposium software testing analysis portland august 
rothermel test case prioritization family empirical studies 
ieee transactions software engineering february 
gcc 
gcc home page www gnu org software gcc gcc html free software foundation 
graves harrold kim porter rothermel empirical study regression test selection techniques 
acm transactions software engineering methodology april 
harrold gupta soffa methodology controlling size test suite 
acm transactions software engineering methodology july 
harrold rothermel wu yi empirical investigation program spectra 
acm sigplan sigsoft workshop program analysis software tools engineering montreal canada june 
hochbaum 
editor 
approximation algorithms np hard problems 
pws publishing boston ma 
international business machines project www ibm com developerworks oss cvs 
java language specification sun microsystems java sun com docs books second edition html tit le doc html 
virtual machine profiler interface jvmpi 
java sun com se docs guide jvmpi jvmpi html 
javac sun microsystems java platform standard edition java sun com se jikes ibm developerworks www ibm com developerworks opensource jikes 
jain dubes algorithms clustering data prentice hall 
kim porter history test prioritization technique regression testing resource constrained environments 
proceedings th international conference software engineering orlando fl may 
leon podgurski white multivariate visualization observation testing 
proceedings nd international conference software engineering limerick ireland june acm press 
craft software testing subsystem testing prentice hall englewood cliffs nj 
podgurski 
leon francis sun wang automated support classifying software failure reports 
proceedings rd international conference software engineering portland may 
rothermel harrold safe efficient algorithm regression test selection proceedings conference software maintenance september pages 
rothermel harrold von hong empirical studies test suite reduction 
journal software testing verification reliability december 
rothermel chu harrold test case prioritization empirical study 
proceedings international conference software maintenance august 
rothermel chu harrold prioritizing test cases regression testing 
ieee transactions software engineering october 
steven chandra fleck podgurski capture replay tool observation testing 
proceedings international symposium software testing analysis portland oregon august 
wong horgan london mathur effect test set size minimization fault detection effectiveness 
software practice experience april 
wong horgan mathur test set size minimization fault detection effectiveness case study space application 
proceedings st annual international computer software applications conference washington august 
