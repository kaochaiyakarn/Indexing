miro middleware autonomous mobile robots stefan hans stefan steffen simon gerhard nther palm neural information processing department university ulm phone fax steve stefan simon palm neuro informatik uni ulm de implementing software autonomous mobile robots non trivial task robots incorporate sensor systems actuators controlled simultaneously heterogeneous ensemble networked computers microcontrollers 
additionally modern software engineering technologies object oriented distributed programming client server architectures essential order maintain program code effectively 
miro new corba robot programming framework allows rapid development reliable safe software heterogeneous computer networks supports mixed programming languages 
copyright ifac keywords autonomous mobile robots operation distributed control multilevel control object oriented programming 
today autonomous mobile robots quite complex machines contain sensors actuators 
controlling devices simultaneously requires enormous computational power 
especially cameras laser scanners require high bandwidths necessary distribute computing multiple machines 
example robot comes built pentium pcs hardware interfacing extra laptop pc user interfacing see figures 
additionally user wants monitor robot performance give commands stationary terminal distributed computing modern robotics 
hand robotics projects currently developed predominantly university research groups spatially distributed groups people develop large system 
important software interfaces clear documented code reused existing code understandable secure additionally desirable independent particular computer hardware operating systems 
times mixing programming languages important requirement order exploit respective different languages 
think hardware near time critical sensing system written web client displaying sensor data written java 
unfortunately existing robot control software years old incorporate software engineering standards software distributed commercially offers opportunities changes 

robot rwi 
overview software frameworks mobile robots konolige software development environment delivered pioneer mobile robot family 
pioneer family features differential drive bases includes odometry sonars sensors 
optional extensions include laser scanner camera gripper module radio communications 
sensors actuators controlled microcontroller boards linked single host pc system may onboard embedded pc pioneer serial radio link 
applications structured client server applications 
robot sensing acting functionalities addressed uniform interface provided pioneer server program 
developer writes client program connects server serial port library 
library programmer implicitly imports elements particular robot control architecture including mechanisms state reflection kind implicit communication client programs server data structures local perceptual space lps global perceptual space gps fuzzy control behavior specification language language reactive control konolige 
system comes predefined client allows operate pioneer robot hour installation 
number predefined functions tasks sensor interpretation fusion detection higher level concepts walls corridors lps gps plus number predefined behaviors ease client program construction long programmer sticks basic idea robot control implied 
problems arise cases integrating hardware vision systems manipulators manufacturers requires building lowlevel interfaces 
furthermore programmer carefully communication client programs add hardware basic control loop 
ii building robust reliable client programs communicate programs including robots tcp ip troublesome 
support directly programmer take care synchronization latency communication failures 
development environment implemented rwi family robots early nineties rea 
implementation draws heavily contributions research labs including carnegie mellon university brown university university bonn buhmann 
designed time ago obviously lacks benefits developments software engineering techniques 
implemented available unix environments 
mainly addresses hardware devices connected serial port bus multiple onboard pcs 
communication onboard pcs radio lan connected workstations protocol developed cmu simple message passing protocol language bindings 
typechecking performed compile time 
sufficient set communications small number programs scale larger scenarios involving robots embedding enterprise software framework 
robots robotics research labs porting local developments new platform requires substantial time effort 
wide succeeded mobility see 
extension code base developed schlegel rz schlegel rz 
provides object oriented class wrappers procedural interfaces environment 
allows access sensors actuators objects call provided object methods 
class wrappers provided additional sensors laser scanners cameras directly supported 
distributed computing provides communication templates implemented underlying communications primitives 
design limitations protocol 
particular data types easily communicated programmer stubs skeletons communicate complex data structures dynamically sized objects 
automated type safety checking compile time available 
design programming errors area shown especially difficult time consuming debug 
mobility mobility distributed object oriented software development framework family robots manufactured rwi rea 
requires robots controller microcontroller family developed rwi 
parts code available binaries mobility evaluated investigating documentation header files 
mobility corba communications middleware meets number needs mobile robot software development projects 
scales respect user interaction client libraries visualization remote access sensory information 
client libraries available java 
mobility suffers poor object oriented design 
example parts mobility oriented return value approach error handling underlying corba middleware uses adequate exception handling mechanism 
previous sections discussed state ofthe art robot control architectures currently suitable software implementation platform developing mobile robot software available 
environments provided vendors suffer severe limitations regarding flexibility portability scalability 
usually support teleoperation multi robot applications missing 
hand available environments developed research labs usually products research developments 
accordingly limited attention paid issues interoperability reliability efficiency ease 

solution approach miro years developing software different mobile robot platforms different operating systems different programming languages different development environments number collaborators decided start developing framework making software development mobile robots easier productive consistent 
miro software framework address design challenges discussed lay foundation implementing robust reliable robot control architectures 
miro designed implemented rigorously applying object oriented design implementation techniques foster code reuse structured debugging scalability maintainability portability 
miro core containing functionality primary sensory data processing actuator control entirely implemented allows high runtime efficiency 
miro builds widely middleware packages open source available wide range hardware operating system platforms 
design goals designing new robot middleware approach goals mind object oriented design middleware designed object oriented paradigm thoroughly 
object oriented concepts information hiding name spaces prevent naming ambiguities multiple mutually independent libraries exception handling separate normal program control flow error recovery abstraction type polymorphism inheritance significantly contribute improve design implementation mobile robot software applied deliberately 
distributed computing support possible easily implement distributed robot control programs designing independent modules interfaces 
inter module communication radio lan transparent far possible 
web clients supported explicitely 
support heterogeneous environments heterogeneous hardware environments operating systems supported multiple programming languages 
java client running mac able invoke service written running unix machine 
usage established technology goal reliable technology established industry years 
reliability safety desired framework allows type safe interface definitions exception handling 
able catch module internal exceptions arising hardware problems communication errors due network problems 
multirobot extension framework adaptable different kinds robots 
able control multiple robots different kinds simultaneously 
scalability required functionality successful mobile robot applications significantly larger current system features today 
system design provide sufficient leverage growth compromising code readability maintainability runtime efficiency 
miro architecture miro provides sets functionalities 
contains set services address sensory facilities mobile robot platforms 
second provides framework classes implement design patterns mobile robot control 
sensors actuators naturally modeled objects controlled queried respective methods 
robots viewed aggregations sensory cognitive objects trade information services agent manner 
general structure miro illustrated 
miro class framework robot application ace os tao corba miro sensor actuator services 
miro middleware robots 
essential abstractions designed miro objects provide services merely interfaces 
proved important achieving robot platform independence 
example allowed provide motion service consistently implemented ported mobile robot platforms 
inheritance provide refined interfaces common sensor actuator services 
mechanism enables individual service implementations provide access special features available specific hardware devices 
investigating desired functionality corba system choice corba standard helps fulfill lot design goals mentioned 
established reliable corba implementations tao orb comes ace schmidt 
ace distributed programming library freely available unix windows realtime operating systems 
interface definition language idl provides type safety adequate flexibility implement complex interfaces 
additionally supports multiple programming languages 
current state currently miro implemented mobile robot platforms equipped different sensors actuators computational equipment 
different scenarios ranging office delivery scenarios highly dynamic soccer games 
platforms robot equipped bumpers irs sonars laser range finder vision system 
features synchro drive mobile base controlled onboard pcs 
pioneer robot differential drive robot equipped sonar sensors controlled onboard laptop host pc serial radio link 
sparrow robot custom built robots developed lab robocup 
sensors include sonars camera 
mobile base differential drive system 
robot pan tilt unit special purpose kicker 
controlled onboard embedded pc 
current miro version services provided service controls base motors encoders offers commands set speed mm rotate rad 
holds robot position odometry 
works sick laser scanner currently provides laser scans scans second 
services provide scans sonar ir tactile sensors 
provides images different formats full frame rate shared memory 
interface transfering images computer lower framerate 
additionally service different client programs provided structured follows sample programs clients held simple possible order show usage respective service functionality 
test programs clients debugging 
call provided service check result 
monitoring programs clients implement visual interface services 
useful normal robot execution monitoring data 
see example monitoring client 

evaluation experiments miro implemented powerful robot application office delivery tasks 
part application robot gather information environment build internal world model 
world model robot localize perform simple tasks moving room room avoiding contact obstacle 
able monitor internal world model robot behaviour specify tasks pc concurrently 
shows available computers inside robot externally connected radio lan 
laptop pc pc pc robot radio lan workstation workstation workstation workstation 
computer network robot experiments 
addition miro servers mentioned implemented high level services yielding complete robot control system self localization module laser range data fox grid mapping system sonar laser data thrun cken region world modeling system hierarchical path planning module behaviour path execution module experiments ran robot fig 

experiment order investigate stability software performed experiment 
robot task move robot lab unexplored room lower left corner rooms back lab 
additionally placed obstacles way intentionally provoked plan failures closing doors order investigate stability approach 
left side see robot inside corridor front artificial obstacle 
right image internal representation shown 
main interface task description monitoring 

inside corridor front obstacle 
trajectory moved robot visible 
blue obstacle drawn manually clarity 
performing described experiment week conclude servers started morning ran stable crashing restarted 
possible monitor robot data workstations time 
possible place tasks different workstations time 
tasks reliably scheduled path planner cor rectly communicated executed path execution module 
hardware exceptions due intentionally disconnected sensor handled respective service exception correctly communicated clients 

steps implementing miro extending number provided services increasing efficiency services 
additionally port miro robot systems improve multirobot support 
done exploit corba event channels implementations repository automatic startup needed services 

investigating implementation process mobile robot software adequate framework exists supporting object oriented distributed computing specific properties autonomous robots 
developed miro new robot programming framework simplifies development stable secure robot control software 
miro corba comes ready servers clients accessing number sensor actuator devices 


pioneer software manual 
rwi 
nh 
buhmann burgard cremers dieter fox hofmann schneider thrun 
mobile robot rhino 
ai magazine 
stefan gerhard stefan nther palm 
sensor interpretation learned laser data 
proceedings 
christopher 
interprocess communication system building robotic architectures 
technical report 
cmu robotics institute 
fox dieter 
markov localization probabilistic framework mobile robot localization navigation 
phd thesis 
university bonn 
bonn germany 
konolige 

language control 
german conference artificial 
freiburg 
rea 
user guide software 
rea 
mobility robot integration software user guide 
stefan 
region representation spatiotemporal concepts 
dissertation 
university ulm 
ulm germany 
preparation 
stefan stefan mark thomas bo mohammed michael dietz jan urban heiko alexander peter schaeffer marcus ritter hans dominik gerhard rg kaiser nther palm 
ulm 
robocup robot soccer world cup iii 
lecture notes computer science 
springer 
berlin germany 
schlegel christian robert rz 
smart soft 

schlegel christian robert rz 
interfacing different layers multilayer architecture sensorimotor systems objectoriented framework 
third european workshop advanced mobile robots 
rich switzerland 
schmidt douglas 

adaptive communication environment object oriented network programming components developing client server application 
th sun users group conference 
thrun sebastian arno cken 
learning maps indoor mobile robot navigation 
technical report cmu cs 
carnegie mellon university 
school computer science pittsburgh pa 
hans 
quo 
navigation mobile 
diplomarbeit 
university ulm 
ulm germany 
german 
