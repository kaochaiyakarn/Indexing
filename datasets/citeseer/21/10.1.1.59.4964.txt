collusion resistant broadcast encryption short ciphertexts private keys dan boneh cs stanford edu craig usa com brent waters cs stanford edu describe new public key broadcast encryption systems stateless receivers 
systems fully secure number colluders 
construction ciphertexts private keys constant size group elements subset receivers 
public key size system linear total number receivers 
second system generalization provides tradeoff ciphertext size public key size 
example achieve collusion resistant broadcast system users ciphertexts public keys size subset receivers 
discuss applications systems 
broadcast encryption scheme fn broadcaster encrypts message subset users listening broadcast channel 
user private key decrypt broadcast 
users outside collude obtain information contents broadcast 
systems said collusion resistant 
broadcaster encrypt subset choice 
denote total number users 
broadcast encryption applications including access control encrypted file systems satellite tv subscription services dvd content protection 
see section distinguish types applications applications broadcast large sets sets size best systems nnl hs gst achieve broadcast message containing ciphertexts user private key size log 
applications broadcast small sets sets size best known solution trivial encrypt broadcast message recipient key 
broadcast message contains ciphertexts user private key size 
construct fully collusion secure broadcast encryption systems short ciphertexts private keys arbitrary receiver sets 
constructions groups efficiently computable bilinear map 
construction provides system broadcast message user private keys constant size precise statement section 
supported nsf 
matter receiver set broadcast ciphertext contains group elements 
user private key just single group element 
example broadcasting small sets system far better trivial solution discussed 
point public key size system linear number recipients 
large problem applications encrypted file systems receivers access large shared storage medium public key stored 
applications content protection need minimize public key ciphertext size 
second system generalization enables tradeoff public key size ciphertext size 
interesting parametrization scheme gives system public key ciphertext size 
means attach public key encrypted broadcast achieve ciphertext size 
consequently obtain fully collusion secure broadcast encryption scheme ciphertext size subset users users constant size private key 
section defines security model complexity assumption 
section describe systems prove security 
section discuss detail applications systems 
related fiat naor fn formally explore broadcast encryption 
solution secure collusion users ciphertext size log log 
naor nnl fully collusion secure broadcast encryption system efficient broadcasting small set revoked users 
scheme useful content protection broadcasts sent small set receivers keys compromised 
scheme encrypt users header size elements private keys size log 
improvements hs gst reduce private key size log 
dodis df extend nnl subtree difference method public key broadcast system small size public key 
broadcast encryption methods large sets include naor pinkas np dodis df 
fixed systems revoke users ciphertexts size private keys constant size 
running log systems parallel revocation bound th system ti obtains broadcast encryption system parameters gst 
private key size log revoking users ciphertext size proportional log 
simple extension naor pinkas system gives broadcast system similar parameters latest nnl derivative 
wallner wha wong independently discovered logical tree hierarchy scheme lkh group multicast 
methods receivers maintain state remain connected receive key updates 
parameters original schemes improved cgi cmn sm 
security broadcast encryption relies computational assumptions 
works sti st sw gsw explore broadcast encryption tracing information theoretic perspective 
boneh silverberg bs show linear maps give ultimate fully collusion secure scheme constant public key private key ciphertext size 
currently known implementations cryptographically useful linear maps 
results show come fairly close bilinear maps 
preliminaries formally defining secure public key broadcast encryption system 
simplicity define broadcast encryption key encapsulation mechanism 
state complexity assumption needed proof security 
broadcast encryption systems broadcast encryption system randomized algorithms setup takes input number receivers outputs private keys 
dn public key encrypt takes input subset 
public key outputs pair hdr hdr called header message encryption key 
refer hdr broadcast ciphertext 
message broadcast set cm encryption symmetric key broadcast users consists hdr cm 
pair hdr called full header cm called broadcast body 
decrypt di hdr takes input subset 
user id 
private key di user header hdr public key algorithm outputs message encryption key key decrypt broadcast body cm obtain message body usual require system correct 

dn setup hdr encrypt decrypt di hdr define chosen ciphertext security broadcast encryption system static adversary 
security defined game attack algorithm challenger 
challenger total number users input 
init 
algorithm begins outputting set 
receivers wants attack 
setup 
challenger runs setup obtain public key private keys 
dn 
gives public key private keys dj query phase 
algorithm adaptively issues decryption queries 
qm decryption query consists triple hdr challenger responds decrypt du hdr 
challenge 
challenger runs algorithm encrypt obtain hdr encrypt challenger picks random 
sets kb picks random gives hdr algorithm query phase 
algorithm continues adaptively issue decryption queries qm 
qi hdr constraint hdr hdr challenger responds phase 
guess 
algorithm outputs guess wins game denote probability wins game challenger input 
definition 
say broadcast encryption system qd cca secure time algorithms total qd decryption queries 
game models attack users set collude try expose broadcast intended users 
set chosen adversary 
note adversary non adaptive chooses obtains keys users outside sees public key adaptive adversary request user keys adaptively 
prove security system non adaptive settings described 
open problem build broadcast encryption system performance system secure adaptive adversaries 
note similar formal definitions broadcast encryption security bs df 
semantic security 
usual define semantic security broadcast encryption scheme preventing attacker issuing decryption queries 
definition 
say broadcast encryption system semantically secure cca secure 
section construct semantically secure systems constant ciphertext private key size 
come back chosen ciphertext security section 
bilinear maps briefly review necessary facts bilinear maps bilinear map groups 
standard notation jou jn bf 
multiplicative cyclic groups prime order 
generator 
bilinear map 
groups 
bilinear map map properties 
bilinear ab 
non degenerate 
say bilinear group group action computed efficiently exists group efficiently computable bilinear map 
note symmetric ab 
complexity assumptions security system complexity assumption called bilinear diffie hellman exponent assumption bdhe 
assumption construct hierarchical identity encryption system constant size ciphertext bbg 
bilinear group prime order bdhe problem stated follows vector elements 

input output 
note input vector missing term bilinear map little help computing required shorthand specified gi denote gi algorithm advantage solving bdhe pr 

probability random choice generators random choice zp random bits decisional version bdhe problem defined analogously 
yg 


algorithm outputs advantage solving decision bdhe pr yg pr yg probability random choice generators random choice zp random choice random bits consumed refer distribution left distribution right 
definition 
say decision bdhe assumption holds time algorithm advantage solving decision bdhe problem occasionally drop refer decision bdhe note bdhe assumption natural extension bilinear assumption previously bb dy 
furthermore boneh bbg show bdhe assumption holds generic bilinear groups sho 
construction ready broadcast encryption system 
special case system ciphertexts private keys constant size public key grows linearly number users 
generalization allows balance public key size ciphertext size 
private keys constant size 
prove security general system 
special case describing broadcast encryption system users ciphertexts private keys constant size public key grows linearly number users 
setup bilinear group prime order algorithm picks random generator random zp 
computes gi 


picks random zp sets public key 
gn gn 
private key user 
set di note di algorithm outputs public key private keys 
dn 
encrypt pick random zp set gn value gn computed gn 
set hdr gn output pair hdr 
decrypt di hdr hdr recall di output gi di gn note private key group element ciphertext hdr group elements 
furthermore gn precomputed encryption requires pairings 
system able broadcast subset users fully collusion resistant 
prove security section discuss general system 
verify system correct decryption algorithm works correctly 
gi suppose user decrypts gi di gn fact required 
gn gn gn gn gn gn gn gn gn gn gn gn efficient implementation 
large number receivers decryption time dominated group operations needed compute gn observe receiver previously computed value gn receiver set similar receiver compute gn just group operations cached value size set difference observation especially useful broadcast system intended broadcast large sets sets size private key di include value gn enable receiver decrypt group operations 
furthermore user need elements public key note computation time encryption similarly dominated group operations compute gt similar performance optimizations precomputing gn apply 
note secret key settings encryptor allowed keep secret information encryptor need store opposed storing entire public key vector 
general construction general broadcast encryption system 
idea run parallel instances system previous section instance broadcast users 
result handle ab users 
substantially improve performance sharing information instances 
particular instances share public key values 


generalized system enables tradeoff public key size ciphertext size 
setting gives system previous section 
setting gives system public key ciphertext size elements 
note way private key just group element 
fixed positive integer 
broadcast encryption system works follows algorithm set instances scheme 
bilinear group prime order algorithm picks random generator random zp 
computes gi 


picks random 
zp sets 
va public key 


private key user 
defined follows write mod 
set private key user di note di algorithm outputs public key private keys 
dn 
encrypt 
define subsets 

words contains users fall th interval length contains indices users relative interval 
pick random zp set gb value gb computed gb 
set hdr gb 
va gb sa output pair hdr 
note hdr contains elements 
decrypt di hdr hdr 
ca recall di write gb ca di gb verifying decryption algorithm works correctly analogous calculation previous section 
note obtain system previous section 
efficiency user private key size consist group element 
ciphertext consists group elements public key elements 
choice depends application 
see cases want obtain smallest possible ciphertext 
cases want minimize concatenation ciphertext public key 
decryption time user dominated sa group operations 
similar caching techniques described section improve performance 
security sa prove semantic security general system section 
theorem 
bilinear group prime order positive integers broadcast encryption system semantically secure assuming decision bdhe assumption holds proof 
suppose exists time adversary system parameterized build algorithm advantage solving bdhe problem algorithm takes input random bdhe challenge yg yg 

random element recall gi 
algorithm proceeds follows 
init algorithm runs receives set users wishes challenged 
setup needs generate public key private keys di crux proof choice 
va algorithm chooses random ui zp define subsets si si si 
ib si ib si 

algorithm sets vi gui si gives public key 


note ui values chosen uniformly random public key identical distribution actual construction 
adversary needs private keys target set write algorithm computes di di ui gb sa ui di sa gb required 
main point know sa algorithm necessary values compute di 
challenge generate challenge computes hdr 
ua 
randomly chooses bit sets kb picks random 
gives hdr challenge claim gb input bdhe tuple hdr valid challenge real attack 
see write gt unknown zp 

ui ui ui gb gb vi gb si definition 
ua valid encryption key gb furthermore gb gb kb hdr valid challenge hand random input random tuple just random independent elements 
guess adversary outputs guess algorithm outputs indicating gb 
outputs indicating random 
see yg sampled pr yg yg sampled pr yg 
follows advantage solving bdhe concludes proof theorem 
note proof theorem random oracle model 
system proved secure weaker computational bdhe assumption opposed decision bdhe random oracle model 
case advantage simulator maximum number random oracle queries adversary 
si si applications describe system number specific applications 
application file sharing encrypted file systems example broadcasts small sets 
second application encrypted email large mailing lists shows majority public key shared broadcast systems public key new broadcast system constant size 
third application dvd content protection example broadcasts large sets 
file sharing encrypted file systems encrypted file systems users encrypt files disk 
example windows efs encrypts file contents file encryption key kf places encryption kf file header 
users access file efs encrypts kf public keys users places resulting ciphertexts file header 
related designs sirius plutus krs file systems 
abstractly access control encrypted file system viewed broadcast encryption problem 
file system broadcast channel key kf broadcast file header subset users access file encrypted file systems implement straight forward broadcast system number ciphertexts file header grows linearly number users access file 
result hard limit number users access file 
example quote microsoft knowledge base efs limit kb file header efs metadata 
limits number individual entries file sharing may added 
average maximum individual users may added encrypted file natural question implement file sharing encrypted file system resorting large headers 
remarkably known combinatorial solution performs better straight forward solution efs 
broadcast system section performs far better provides system parameters public key size linear stored file system 
large organization users file mb long standard security parameter group element bytes 
user private key contains group element 
file header contains description set users access fixed size ciphertext consisting group elements 
tends small relative shortest description simply enumeration users assuming bit user id description set size takes bytes 
file header grows size rate bytes user 
efs header grows public key ciphertext user 
comparison accommodate sharing users header size bytes far efs header size 
efs short elgamal ciphertexts elliptic curves headers grow bytes user result headers times bigger headers system 
system properties especially useful cryptographic access control 
describe 

incremental sharing 
suppose file header contains ciphertext encryption kf certain set users 
gt gn suppose file owner wishes add access rights user 

easy simply set gt similarly revoke access rights user set gt incremental sharing mechanism requires file owner remember random value zp file 
alternatively file owner embed short nonce tf file header derive value file setting tf secret key known file owner 
changing access permissions done efficiently file owner having remember single key note access rights file change desirable pick new key knew modifying existing header encrypt new knew updated access list just easy 

incremental growth number users 
cases broadcast encryption system able handle incremental addition new users 
desirable system priori restrict total number users handle 
system supports slowly expanding public key number users system grows 
system initialization setup algorithm picks large value say larger maximum number users system 
time users system public key gn 
gn gn 
gn new user joins system simply add elements public key 
note user gi part private key remains 
sending encrypted email mailing lists interesting aspect system public values yg 
gn gn 
shared broadcast systems erased 
suppose yg distributed globally large group users example imagine yg pre installed computer 
creating new broadcast system done simply choosing random zp setting assigning private keys di broadcast systems pre distributed yg actual public key new broadcast system just element theorem shows yg broadcast systems secure 
illustrate property example secure mailing lists 
sending encrypted email members mailing list example broadcast encryption system 
suppose global public vector yg shipped operating system installed computer 
arbitrarily set case size yg mb 
secure mailing list administrator creates separate broadcast encryption system 
mailing list identified public key assume maximum number members mailing list larger lists partitioned multiple smaller lists 
time new user added list user assigned previously unused index 
secret key di broadcast set updated include mailing list members notified change similarly user index removed list removed set members notified 
note member need store member need store value sj gn needed decryption 
member updates value time membership update message sent 
send email mailing list public key server simply broadcast encryption current set members yg public key 
mail system header email messages sent list constant size 
similarly membership update messages constant size 
mailing list member needs store group elements list belongs keep mind cost storing yg amortized mailing lists 
interesting compare solution lkh scheme wha 
lkh email messages encrypted group key 
type system update message contains log ciphertexts private keys size log system current group size 
system update messages private user storage smaller 
content protection broadcast encryption applies naturally protecting dvd content goal revoke compromised dvd players 
recall public key system needed decryption embedded header dvd disk 
consequently interested minimizing total length header public key minimize hdr 
total number dvd players number revoked players 
id log id size group element bits 
broadcast system broadcast sets size parameters priv key size hdr id comparison nnl system nnl derivatives hs gst broadcast sets size priv key size log header size id length symmetric key bits 
note broadcast header grows id bits revoked player 
system broadcast header grows id bits revoked player 
example 
plugging real numbers obtain 
bytes id bytes header size system mb revocation adds bytes header 
nnl systems bit symmetric keys revocation adds bytes header upfront mb fixed cost 
best system obtained combining nnl system nnl system 
long things stable dvd disk distributors nnl 
case disaster say dvd player manufacturer loses large number player keys dvd disk distributors switch system header size grows slowly 
chosen ciphertext secure broadcast encryption show extend system section obtain chosen ciphertext security 
basic idea compose system ibe system bb apply ideas chk 
resulting system chosen ciphertext secure random oracles 
need signature scheme sign verify 
need collision resistant hash function maps verification keys zp 
carry hash function simply assume signature verification keys encoded elements zp 
greatly simplifies notation 
see security cca secure broadcast system users bdhe assumption opposed bdhe assumption system section 
keep notation consistent section describe cca secure system users security depend bdhe assumption 
system works follows setup section 
pick random generator random zp 
compute gi 
public key 
gn gn 
private key user 
set di algorithm outputs public key private keys 
dn 
encrypt run algorithm obtain signature signing key verification key 
recall simplicity assume zp 
pick random zp set gn set hdr sign sig sig gn output pair hdr 
note change ciphertext section term additional signature data 
decrypt di hdr hdr 
verify valid signature key 
invalid output 

pick random zp compute gn gn gig di 
output 
correctness shown similar calculation section 
note private key size ciphertext size unchanged 
system section decryption requires randomization value zp 
randomization ensures pair chosen distribution gn uniform zp 
note distribution independent implying members generate sample distribution 
randomization slows decryption factor necessary proof security 
proving security briefly recall signature scheme sign verify strongly existentially unforgeable time adversary signature queries able produce new message signature pair probability 
complete definition chk 
theorem proves chosen ciphertext security 
theorem 
bilinear group prime order positive integer broadcast encryption system cca secure assuming decision bdhe assumption holds signature scheme strongly existentially unforgeable 
proof 
suppose exists time adversary 
build algorithm advantage solving bdhe problem algorithm takes input random bdhe challenge yg yg 
gn gn 
gn random element recall gi 
algorithm proceeds follows 
init 
algorithm runs receives set users wishes challenged 
setup 
needs generate public key private keys di algorithm runs algorithm obtain signature signing key sig verification key sig zp 
chooses random zp sets sig gn gives public key 
gn gn 
note chosen uniformly random public key identical distribution actual construction 
adversary needs private keys target set algorithm computes di di di sig gn sig gn required 
important thing note algorithm necessary values compute di 
query phase 
algorithm issues decryption queries 
hdr decryption query hdr algorithm responds follows 
run verify check signature verification key sig 
signature invalid responds 

sig sig algorithm outputs random bit aborts simulation 

challenger picks random zp sets sig gr sig 
responds 
see response real attack game define sig gn sig observe furthermore uniform zp know uniform zp 
response identical decrypt du hdr required 
challenge 
generate challenge computes hdr sign sig sig randomly chooses bit sets kb picks random 
gives hdr challenge claim gn input bdhe tuple hdr valid challenge real attack 
see write unknown zp 
sig gn sig gn sig gn definition valid encryption key gn furthermore gn gn kb hdr valid challenge hand random input random tuple just random independent elements 
query phase 
query phase 
guess 
adversary outputs guess algorithm outputs indicating gn 
outputs indicating random 
abort event aborted simulation 
yg sampled see yg sampled pr yg pr yg pr abort pr abort inequality follows fact yg sampled simulation perfect abort 
follows advantage pr abort solving bdhe 
conclude proof theorem remains bound probability aborts simulation result decryption queries 
claim pr abort 
forge signatures probability 
briefly construct simulator knows private key receives sig challenge existential forgery game 
experiment causes abort submitting query includes existential forgery sig ciphertext 
simulator able forgery win existential forgery game 
note game adversary chosen message query generate signature needed challenge ciphertext 
pr abort 
follows advantage required 
completes proof theorem 
note proof theorem random oracle model implying system chosen ciphertext secure standard model 
note signature method chk efficient mac method bk 
chose construction signature method simplify proof 
mac method 
open problems fully collusion resistant broadcast encryption scheme constant size ciphertexts private keys arbitrary receiver sets 
section built chosen ciphertext secure broadcast system parameters 
generalization basic scheme gave tradeoff public key size ciphertext size 
appropriate parametrization achieve broadcast encryption scheme ciphertext public key size 
discussed applications encrypted file systems content protection 
leave open problem question building public key broadcast encryption system parameters secure adaptive adversaries 
note non adaptive scheme secure secure adaptive adversaries 
practice reduction meaningful small values problem build tracing traitors system cfn parameters system 
ideally combine systems obtain efficient trace revoke system 
interesting explore alternate systems similar performance proved secure weaker assumption 
bb dan boneh xavier boyen 
efficient selective id identity encryption random oracles 
proceedings eurocrypt lncs pages 
springer verlag 
bbg boneh boyen goh 
hierarchical identity encryption constant size ciphertext 
proceedings eurocrypt 
appear 
bf dan boneh matt franklin 
identity encryption weil pairing 
joe kilian editor proceedings crypto volume lncs pages 
springer verlag 
bk dan boneh jonathan katz 
improved efficiency cca secure cryptosystems built identity encryption 
submitted publication 
bs dan boneh alice silverberg 
applications multilinear forms cryptography 
contemporary mathematics 
cfn benny chor amos fiat moni naor 
tracing traitors 
proceedings crypto volume lncs pages 
springer 
cgi ran canetti juan garay gene daniele micciancio moni naor benny pinkas 
multicast security taxonomy efficient constructions 
proc 
ieee infocom volume pages new york ny march 
ieee 
chk ran canetti shai halevi jonathan katz 
chosen ciphertext security encryption 
proceedings eurocrypt lncs pages 
cmn ran canetti tal malkin nissim 
efficient communication storage tradeoffs multicast encryption 
proceedings eurocrypt pages 
df dodis 
public key broadcast encryption stateless receivers 
proceedings digital rights management workshop volume lncs pages 
springer 
df dodis 
public key broadcast encryption secure adaptive chosen ciphertext attack 
workshop public key cryptography pkc 
dy dodis 
verifiable random function short proofs keys 
proceedings workshop theory practice public key cryptography 
fn fiat naor 
broadcast encryption 
proceedings crypto volume lncs pages 
springer verlag 
gem peter 
threshold cryptography 
rsa cryptobytes 
goh shacham boneh 
sirius securing remote untrusted storage 
proceedings internet society isoc network distributed systems security ndss symposium pages 
gst goodrich sun tamassia 
efficient tree revocation groups low state devices 
proceedings crypto volume lncs 
gsw juan garay jessica staddon wool 
long lived broadcast encryption 
crypto proceedings th annual international cryptology conference advances cryptology pages 
springer verlag 
eli gafni jessica staddon lisa yin 
efficient methods integrating traceability broadcast encryption 
crypto proceedings th annual international cryptology conference advances cryptology pages 
springer verlag 
hs halevy shamir 
lsd broadcast encryption scheme 
proceedings crypto volume lncs pages 
jn antoine joux kim nguyen 
separating decision diffie hellman diffie hellman cryptographic groups 
cryptology 
early version cryptology eprint archive report 
jou antoine joux 
round protocol tripartite diffie hellman 
editor proceedings ants iv volume lncs pages 
springer verlag 
krs mahesh erik riedel ram swaminathan kevin fu 
plutus scalable secure file sharing untrusted storage 
proceedings nd usenix conference file storage technologies fast 
nnl naor naor 
revocation tracing schemes stateless receivers 
proceedings crypto volume lncs pages 
np naor pinkas 
efficient trace revoke schemes 
financial cryptography volume lncs pages 
springer 
sho victor shoup 
lower bounds discrete logarithms related problems 
proceedings eurocrypt 
springer verlag 
sm alan sherman david 
key establishment large dynamic groups way function trees 
ieee trans 
softw 
eng 
st doug stinson tran van 
new results key distribution patterns broadcast encryption 
des 
codes cryptography 
sti doug stinson 
methods unconditionally secure key distribution broadcast encryption 
des 
codes cryptography 
sw stinson wei 
combinatorial properties constructions traceability schemes codes 
siam 
math 
wong gouda lam 
secure group communications key graphs 
proceedings sigcomm 
wha wallner harder 
key management issues architectures 
ietf draft wallner key 
threshold key generation file system application section administrator hands private keys users 
note administrator decrypt files disk 
standard approach mediating risk single trusted administrator threshold cryptography gem 
briefly sketch administrator secret key broken shares private key di derived threshold fashion 
simplicity assume trusted dealer generates shares 
setup 
bilinear group order pick random generator random zp usual define gi output public key 
gn gn 
section 
dealer generates shares 
shamir secret sharing generate shares 
zp random polynomial degree satisfying 

th share defined sj zp 
note subset shares 
st isi appropriate lagrange interpolation coefficients 
suppose user 
wants private key dk picks administrator servers help generate dk 
loss generality assume picks servers 
generate dk 

receives si ith administrator 

computes private key dk gsi dk isi required 
usual assume messages sent administrators user private channel 

