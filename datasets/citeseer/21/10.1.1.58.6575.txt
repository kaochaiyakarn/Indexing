linguistic symbiosis object oriented logic programming language johan kris wuyts programming technology lab informatica vrije universiteit brussel belgium johan kris vub ac software composition group institut informatik universit bern switzerland wuyts iam unibe ch 
reflective systems causally connected metalevel representation 
reflective systems language reason metalevel representation language reason domain 
symbiotic reflection different language metalevel 
practical usability symbiotic reflection enhanced linguistic symbiosis accomplished integrates languages 
implementing linguistic symbiosis relatively straightforward meta language base language share programming paradigm 
problem far complex paradigms differ 
describes extension symbiotic reflective system soul linguistic symbiosis logic meta language object oriented base language 
reflection technique realizes flexible systems 
reflective system manipulate data representation computation called causally connected self representation 
reflective system adapt computation 
example truly reflective programming languages smalltalk clos allow introduce new language features change internal workings existing ones 
typically causally connected self representation programming language expressed programming language 
exist reflective languages expressed different programming language agora 
johan kris research assistants fund scientific research flanders belgium johan language adheres programming paradigm base language object orientation allows relatively straightforward integration 
integration called linguistic symbiosis means program elements language transparently language vice versa 
means language implemented language enables mutual reflective capabilities 
describe linguistic symbiosis logic object oriented programming language 
linguistic symbiosis particularly hard achieve paradigms fundamentally different 
general object oriented programs consist objects containing state communicate messages 
control flow explicitly programmed 
logic programs consist rules describe certain fact true conditions 
control flow implicit interpreter prove certain fact true proving conditions 
message send fundamentally different predicate call 
message returns single result provided fixed number arguments predicate return multiple results multiple variables left unbound predicate call 
numerous object oriented extensions logic programming languages exist 
basically extensions enhance logic programming modularization inheritance late binding paradigm remains logic programming 
fundamentally different extending object oriented language logic programming paradigm 
wuyts previously system symbiotic reflection introduced object oriented base language logic meta language 
resulting system soul expressed logic language shown particularly useful logic programming languages better suited express reasoning algorithms type inferencing design pattern extraction architectural conformance checking 
current implementation soul allows multi paradigm programming logic object oriented paradigms values exchanged programs written different paradigms 
soul introduce linguistic symbiosis 
invoke programs implemented object oriented language way programs implemented logic language 
solve problem introduce complete linguistic symbiosis logic object oriented programming language apply soul 
allows object oriented programs transparently libraries logic programs designed reflective programming method execution 
implementer library full power logic environment regular object oriented programmer exposed 
organized follows 
section describe soul symbiotic reflective system soul smalltalk cross bound 
section describes extensions soul accomplish linguistic symbiosis soul smalltalk 
section describe example application section discusses open issues 
soul linguistic symbiosis 
soul smalltalk open unification language logic programming language implemented smalltalk 
soul offers ability write prolog logic programs supports embedding smalltalk expressions logic program executed part inference process 
smalltalk expressions logic variables smalltalk objects unified logic variables 
furthermore logic programs invoked smalltalk program invoking query 
section shows integration smalltalk soul accomplished 
detailed discussion 
give brief overview logic programs soul differ prolog programs 
differences prolog differences prolog soul syntactic 
variables soul start question mark var 
lists enclosed 
rules written keyword symbol 
modules encapsulate logic declarations facts rules 
logic declaration belongs module visible module defined querying modules rule module invoke query module operator 
example invoking query module called written follows cross binding smalltalk soul smalltalk soul invocation smalltalk programs logic soul programs accomplished special constructs called smalltalk term smalltalk clause 
furthermore smalltalk objects treated constants 
smalltalk object special constructs new kind logic terms direct result integration 
describe construct detail 
smalltalk term term contains smalltalk expression enclosed square brackets 
time inference engine unify term term expression evaluated resulting smalltalk object complete unification binding logic variable 
real smalltalk objects bound logic variables done explained 
furthermore smalltalk expression allowed contain logic variables 
example soul declaration object object new logic fact smalltalk term single argument contains instance object just notation 
modules syntactic notation 
built scope 
johan smalltalk clause predication syntactically smalltalk term embedded expression evaluate true false 
example soul declaration smaller logic rule uses smalltalk clause compare values smalltalk object objects get bound logic variables result unification smalltalk term logic variable 
extend unification scheme soul include smalltalk objects treated constants 
means objects unify free variables 
generate predicate generate predicate predicate decomposes smalltalk collection object subsequent results variable similar member logic lists 
example query generate smalltalk returns results classes smalltalk image 
expression smalltalk returns collection object generate predicate subsequently binds element collection 
soul smalltalk soul implemented smalltalk smalltalk programs soul implementation start logic queries 
transparent invocation mechanism soul query invoked sending message class iterate returned results evaluation 
part smalltalk method containing invocation query 
results eval member 
results iftrue 
iffalse 
example shows query member invoked value logic variable value smalltalk variable query succeeds evaluator return instance class indicating success query holding collection successful variable bindings 
values bindings get converted logic terms smalltalk equivalents follows easily manipulated smalltalk programmer smalltalk objects trivially mapped 
logic constants mapped smalltalk symbol 
logic integers mapped smalltalk integer 
logic lists mapped smalltalk 
logic functor terms mapped special class query fails evaluator returns instance class indicating query failed 
symbiotic reflection soul interpreter reflective system implemented smalltalk smalltalk meta object protocol linguistic symbiosis 
investigate adapt implementation 
allowing smalltalk objects soul language soul programmer access mop reify smalltalk program soul 
soul symbiotic reflection smalltalk 
example rules reify smalltalk classes logic declarations class var generate smalltalk 
class var smalltalk includes 
rule implements possible usage class predicate variable bound value 
rule subsequently bind smalltalk class 
second rule implements case bound value check value smalltalk class 
invoke query gather classes invoke query check class symbol exists class 
class symbol 
smalltalk system reified soul power offered logic programming express design patterns programming conventions software architectures name 
linguistic symbiosis linguistic symbiosis smalltalk soul means smalltalk program transparently call soul program smalltalk program soul program transparently call smalltalk program soul program 
result meta programmer full power symbiotic reflection smalltalk programmer reflective facilities offered soul knowing implemented logic programs 
integration smalltalk soul described explicitly coded logic program smalltalk program soul smalltalk calling smalltalk program soul explicit smalltalk term clause smalltalk term clause 
smalltalk soul calling soul program smalltalk explicit sending query message class 
accomplish linguistic symbiosis logic object oriented languages map main concepts paradigms 
basically chose map message sends object oriented paradigm queries logic paradigm 
invocation query message send vice versa 
propose mapping johan 
smalltalk classes soul modules 
smalltalk message sends soul predicates 
smalltalk collections soul query results 
sections explain mapping detail 
smalltalk classes soul modules namespace smalltalk classes soul namespace modules combined namespace accessible soul smalltalk environment 
results combined dictionary logic modules object oriented classes 
smalltalk classes encapsulate methods soul modules encapsulate logic facts rules 
difference apparent sending messages invoking queries smalltalk classes instances soul modules 
querying smalltalk objects order able transparently send messages soul program message sends expressed queries 
result messages need representation form predicate 
define straightforward mapping messages predicates 
predicate name message selector predicate arguments message arguments extra argument return value message 
example soul query array new instance instance put corresponds message instance array new 
instance put 
example array size created stored variable instance 
integer stored position returning value message stored variable 
sending messages soul modules conversely order able transparently invoke soul queries smalltalk methods query expressed message send 
result soul predicates smalltalk message representation 
define mapping logic predicates smalltalk messages smalltalk keyword messages 
keyword messages consist selector arguments interleaved keywords selector keywords colon index put anobject 
keyword messages allow non ambiguous mapping logic queries smalltalk messages require names logic predicates signature keyword message 
means predicate name consist keywords predicate number arguments 
linguistic symbiosis 
furthermore mapping requires keywords unique predicate defined module 
benefit keyword messages explained 
example logic declarations naming convention add result method method class class class 
course problem logic query return multiple results multiple variables opposed smalltalk method returns single result 
logic predicate multiple ways arguments bound arguments unbound bound 
problems addressed subsections 
translating multiway predicates messages translate multi way property logic predicates smalltalk logic module automatically understands message way logic predicate module 
single predicate logic module possibly implemented different logic facts rules corresponds set smalltalk messages sent logic module 
name predicate uses keyword message signature signatures corresponding smalltalk messages easily derived name predicate 
mapping logic predicates smalltalk messages easily explained considering write invocation particular predicate smalltalk message 
explained naming convention predicates name consists keyword argument predicate takes method selectors smalltalk 
want invoke predicate sending message logic module simply concatenate keywords get selector message intervening colons want bind value logic variable 
keywords arguments omitted corresponding parameters bound 
case arguments left unbound keyword message selector colon 
example logic predicate add arithmetic module defines addition relation invoked multiple ways 
arithmetic module understands messages shown table corresponding query shown 
illustrate example queries corresponding smalltalk messages calculate addition numbers arithmetic add result result result arithmetic add 
calculate argument addition second argument result johan message query add add add add res add add res add add res add res add add add add table 
mapping multi way predicate messages add arithmetic 
consequence approach message document variables returns arguments left unbound corresponding query particular message 
examples messages return single result single variable table possible messages need return results variable 
returning multiple variables message send leads invocation query returns binding variable results returned smalltalk instance 
break linguistic symbiosis document return result particular message example logic query calculate arguments addition results add corresponds smalltalk program arithmetic 
example variables need returned means smalltalk collection returned containing required value 
showed possible pair results possible results 
returning multiple results variable returning multiple results variable complex part linguistic symbiosis 
logic query returns result variable returns decide hide smalltalk programmer explicitly return collection 
returning subsequent results explicit collection semantics clear linguistic symbiosis 
disadvantage smalltalk programmer probably experiences invoking soul query 
example consider smalltalk program invokes add logic predicate prints results transcript 
arithmetic 
transcript show subsequent results returned explicit collection smalltalk program explicitly enumerate results 
solution experimented hide collection smalltalk programmer represent single result 
return value appears single result programmer represents subsequent results 
internally means kind collection message sent implicit collection message automatically dispatched values collection 
example implicit collection solution write program follows arithmetic 
transcript show mind program explicit collection solution collection printed transcript 
hidden collection provides desired result cases leads confusing erroneous behaviour smalltalk programs messages side effects executed multiple times 
improvement solution researched 
continue solution explicit collections 
practical section example system implemented logic oo programming 
example ecommerce system prices products adapted take account reductions granted specific user system 
reductions applicable typically depends number things customer history coupons logic programming lends expressing rules governing applicability reductions 
master thesis describes architecture commerce systems allows knowledge reduction rules described logic programming rest system implemented oop 
identified need able easily interchange information control soul smalltalk programs 
linguistic symbiosis mechanism fulfill need 
example consider simple commerce system important classes product customer 
message price instance product retrieve price 
johan want apply changes return value price method reflect price reductions granted current user system 
adaptation typically done smalltalk object wrappers 
similarly defined logic module wrapper simply special kind logic module wrapper object 
message sent wrapper forwarded wrapped object message understood module sense defines predicate maps message 
wrapper product instances need defines predicate price follows price wrapped price findall reduction reduction reduction reductions reduced reductions variable wrapped defined wrapper module referring wrapped object 
get answer price message wrapped product instance 
definitions reduction predicate give simple example reduction customer customer customer age age greaterthan age rule expresses special senior reduction applicable customers aged older 
furthermore wrapping instances occur run time 
smalltalk reflective facilities offer functionality 
smalltalk method runs periodically wraps products eligible reductions product knowledgebase product iftrue product wrap new symbiotic reflection linguistic symbiosis easy describe product eligible reduction 
logic rules exactly called smalltalk program 
product result product kind toys date today date date month november 
rule describes toys feature price reduction november 
discussion describe ongoing linguistic symbiosis soul smalltalk 
soul logic meta language object oriented base language symbiosis requires mapping modules classes messages queries 
advantage linguistic symbiosis 
symbiosis base programmer meta programs implemented base language 
furthermore provides opportunity optimize parts logic meta programs transparently replacing smalltalk meta programs 
enhancing practical symbiotic reflection linguistic symbiosis benefit non reflective programming 
programs reflective programming power logic programming language 
linguistic symbiosis introduced multi paradigm programming smalltalk object oriented logic paradigms 
tackled issues linguistic symbiosis remain open 
summarize important results elaborate open issues 
results trivially obtain linguistic symbiosis shared namespace languages exist allow access global entities languages 
case namespace contains classes logic modules 
entities look feel languages need define mapping 
particular case means need map predicates messages 
mapping syntactic aspect semantic aspect 
syntactic mapping defines common look semantic mapping concerned common feel 
syntactic mapping language specific semantic mapping 
object oriented language java semantic mapping multi way logic predicate set methods remain totally different syntactic mapping needed 
furthermore return multiple variables logic predicate container 
returning multiple results variables correspond returning explicit container 
solution proposed hide implication mapping researched 
open issues multi way methods 
linguistic symbiosis defined treats methods uni way logic predicates 
issue remains defined method correspond multi way logic predicate 
clearly trivial issue involve implementation method way predicate called 
envision system group methods implemented pattern gives rise single predicate way logic predicate mapped multiple methods 
hand exist reasonable amount logic predicates multi way 
trade acceptable 
multiple results 
mentioned logic query return multiple results multiple variables 
multiple results johan hidden object oriented programmer lead strange behaviour object oriented programs messages get executed times 
backtracking side effects 
complex issues arise backtracking occurs logic program methods perform side effects executed 
course true pure logic programs logic predicates execute side effects 
cross language inheritance 
issue mention inheritance relation implemented logic modules object oriented classes 
consider topic 
paradigm leaks discussed problems multiple results backtracking side effects collectively described paradigm leaks 
symbiosis mechanism creates leak rules paradigm programming language paradigm 
dealing backtracking multiple results smalltalk considered part object oriented paradigm side effects normally avoided logic programming 
leak undesirable effect cases remains investigated 


personalization object oriented systems 
master thesis vrije universiteit brussel 

matsuoka yonezawa 
reflective objectoriented concurrent language run time kernel 
proceedings international workshop new models software architecture imsa reflection meta level architecture pages 

mens wuyts 
supporting software development declaratively codified programming patterns 
proceedings th conference pages 
knowledge systems institute 

mens 
declarative evolution framework objectoriented design patterns 
proceedings int 
conf 
software maintenance 
ieee computer society press 


story simplest mop world scheme object orientation 
prototype programming pages 
springer verlag 

wuyts 
declarative reasoning structure objectoriented systems 
proceedings tools usa 
linguistic symbiosis 

wuyts 
logic meta programming approach support evolution object oriented design implementation 
phd thesis vrije universiteit brussel 

wuyts ducasse 
symbiotic reflection object oriented logic programming language 
ecoop international workshop multiparadigm programming object oriented languages 
