build highly available system consensus butler lampson microsoft lake view av cambridge ma 
lamport showed replicated deterministic state machine general way implement highly available system consensus algorithm replicas agree input 
paxos algorithm fault tolerant way get consensus real time guarantees 
general consensus expensive practical systems reserve emergencies leases locks time computing 
explains general scheme efficient highly available computing gives general method understanding concurrent fault tolerant programs derives paxos algorithm example method 
system available provides service promptly demand 
way highly available system available components redundancy system parts broken 
simplest kind redundancy replication copies replicas part 
explains build efficient highly available systems replicas gives careful specification informal correctness proof key algorithm 
nearly ideas due leslie lamport replicated state machines paxos consensus algorithm methods specifying analyzing concurrent systems 
wrote read lamport papers took long time understand methods effectively 
surprisingly people know spite elegance power 
section explain build replicated state machine efficient highly available fault tolerant algorithm consensus 
section gives background consensus problem applications 
section reviews method writing specifications uses give precise specification consensus forms 
section introduce basic idea paxos algorithm consensus derive algorithm idea specification 
explain important optimizations summarize 
email microsoft com 
www research microsoft com 
lampson replicated state machines redundancy useful coordinated 
simplest way non faulty replica thing 
non faulty replica provide outputs replicas fail requiring output replicas tolerate faults 
complicated kinds redundancy error correcting codes cheaper depend special properties service provided 
section explain coordinate replicas fully general highly fault tolerant way 
explore optimization called leases coordination efficient nearly cases 
coordinating replicas arrange replica thing 
adopting scheme proposed lamport build replica deterministic state machine means transition relation function state input new state output 
customary call replicas process 
processes start state see sequence inputs thing state produce outputs 
need high availability ensure non faulty processes see inputs 
technical term consensus called agreement reliable broadcast 
informally say processes achieve consensus agree value give formal definition 
processes implementing deterministic state machine achieve consensus values order inputs thing 
way possible replicate arbitrary computation highly available 
course order part input value defining total order set inputs instance numbering 
applications inputs requests clients replicated service 
example replicated storage service read write inputs airplane flight control system inputs 
different clients usually generate requests independently necessary agree requests order serve 
simplest way number consecutive integers starting 
done primary copy replication easy process primary assign consecutive numbers 
storage service agree input write input read 
schemes achieving consensus order requests total order derived consecutive integers see schneider survey 
schemes label input value totally ordered set instance client uid timestamp pairs devise way certain seen inputs exist labels smaller value 
complicated practical systems usually primary sequence inputs 
lampson leases efficient highly available computing fault tolerant consensus expensive 
exclusive access single process known locking cheap fault tolerant process fails holding lock access resource 
adding timeout lock fault tolerant lock lease 
process holds lease state component resource expiration time say process master resource holds lease 
process touch resource lease expires 
course processes synchronized clocks 
precisely maximum skew clocks processes process lease expires time knows process touch resource time clock 
holds lease master read write resource freely 
writes take bounded time guaranteed fail precede operation starts lease expires serious problem resource scsi disk weak ordering guarantees long upper bound time write take 
locks transaction processing systems usually leases expire transaction aborted means writes undone transaction equivalent skip 
process uses leases outside scope transaction take care provide atomicity necessary example ensuring resource state atomic write called careful writes standard redo undo methods logs 
certainly necessary resource leased replicated 
process keep control resource lease expires 
release lease demand 
talk process holds lease failed wait lease expire touching resource 
tradeoff cost lease time wait lease expire possible failure 
short lease means short wait recovery higher cost renew lease 
long lease means long wait recovery lower cost renew 
lease give process right cache part state instance contents cache line file knowing change 
lease kind lock mode determines operations holder 
lease exclusive process change leased state freely 
owner access cache line ownership multi ported disk 
hierarchical leases fault tolerant system leases granted renewed running consensus 
consensus expensive solution hierarchical leases 
run consensus elect give lease large part state 
gives sub leases masters 
master controls resources 
masters renew sub leases 
cheap doesn require coordination 
lease consensus 
costs lease 
simple fail longer lease may acceptable 
hierarchical leases commonly replicated file systems clusters 
lampson combining ideas consensus leases hierarchy possible build highly available systems highly efficient 
consensus processes achieve consensus agree allowed value called outcome agree value solution trivial agree 
interface consensus actions allow value read outcome 
consensus algorithm terminates non faulty processes know outcome 
number specialized applications consensus addition general replicated state machines 
popular ones distributed transactions processes need agree transaction commits aborts 
transaction needs separate consensus outcome 
membership group processes cooperating provide highly available service need agree processes currently functioning members group 
time process fails starts working new consensus 
electing leader group processes knowing exactly members 
consensus easy faults 
simple implementation 
fixed leader process 
gets allow actions chooses outcome tells 
fail luck 
standard phase commit works way allowed value commit participants prepared abort failed 
leader fails outcome may unknown 
simple implementation set processes choosing value 
majority choose value outcome possible subsets property non empty intersection 
processes choose majority value outcome 
members majority fail outcome unknown 
consensus tricky faults 
asynchronous system non faulty process take arbitrary amount time transition perfect links faulty process algorithm consensus guaranteed terminate 
synchronous system consensus possible processes arbitrary malicious faults byzantine agreement expensive messages sent time 
specifications studying systems state element necessarily finite state space set actions necessarily deterministic take system state 
data abstractions concurrent programs distributed systems fault tolerant systems modeled way 
usually describe state spaces cartesian product smaller spaces called variables 
lampson specify system state specifying system designate actions variables external rest internal 
care sequence external actions equivalently sequence values external variables assume observe internal actions variables outside system 
call sequence trace system 
specification set traces equivalently predicate traces 
set called property 
define special kinds property 
informally safety property asserts bad happens generalization partial correctness sequential programs 
liveness property asserts eventually happens generalization termination 
tell trace safety property looking finite prefix liveness property 
property set sequences actions intersection safety property liveness property 
deal safety properties 
appropriate know terminating algorithm asynchronous consensus 
fortunate liveness properties harder handle 
convenient define safety property state machine actions divided external internal ones 
sequences external actions machine define safety property 
confuse specification state machines replicated state machines implement consensus 
define means system implement system follows trace trace safety property implies safety property 
liveness property implies liveness property 
requirement ensures tell observing isn bad wouldn 
second ensures things supposed 
won say liveness 
method specify system state define state space describe actions 
choose state space spec clear reflect state implementation 
action say state external internal 
model action parameters results read family actions read returning action happens client reads result 
helpful hints writing specs 
notation important helps think going 
invent suitable vocabulary 

fewer actions better 
non determinism better allows implementations 
sorry wrote long letter didn time write short 
pascal lampson specifying consensus ready give specifications consensus 
outcome variable initialized nil action allow invoked number times 
action outcome read outcome variable return nil argument allow action return precisely requirements agreement non nil result outcome 
validity non nil outcome equals allowed value 
validity means outcome arbitrary value value allowed 
consensus reached choosing allowed value assigning outcome 
spec choice fly allowed values arrive 
precise version spec call gives state actions state machine 
state outcome actions value nil initially nil name guard effect allow choose outcome nil outcome skip outcome choose return outcome return nil external actions marked 
guard precondition true current state action happen true denoted blank actions 
choose denotes non deterministic choice dijkstra guarded commands 
note outcome allowed return nil choice 
reflects fact implementation replicas outcome implemented talking just replicas replica may learned choice 
give spec consensus termination 
internal terminate action happened outcome guaranteed nil 
find algorithm terminated calling done 
mark changes boxing 
state outcome value nil initially nil done bool initially false lampson name guard effect allow choose outcome nil outcome skip outcome choose return outcome done return nil done return done terminate outcome nil done true note spec says termination occur 
implementation outcome returns nil satisfies may unsatisfactory best asynchronous implementation 
words stronger spec rule asynchronous implementation 
complicated spec deferred consensus 
accumulates allowed values chooses internal action agree 
state outcome value nil initially nil done bool initially false allowed set value initially name guard effect allow allowed allowed outcome choose return outcome done return nil done return done agree outcome nil allowed outcome terminate outcome nil done true fairly clear implements prove abstraction function method described section requires variable backward simulation choose outcome soon see allowed value implementation may choice 
reasons giving spec 
people find easier understand state actions 
move need variable proof implements simplifying subtle proof paxos implements lampson implementation section explain abstraction function method showing implementation meets specification 
method general practical 
discuss hints designing understanding implementations illustrate method hints abstraction functions simple implementations earlier 
section shows method hints derive lamport paxos algorithm consensus 
proving implements definition implements tells ignoring liveness show trace trace doing scratch painful general trace infinite length infinite number traces 
proof require induction proof method induction 
fortunately general method proving implements reasoning explicitly traces case 
method originally invented hoare prove correctness data abstractions 
generalized lamport arbitrary concurrent systems 
method works 
define abstraction function state state show simulates maps initial state initial state action reachable state sequence actions empty externally diagram commutes 
actions action sequence actions externally action internal actions discarded 
action internal actions internal 
action external actions internal action 
straightforward induction shows implements behavior construct behavior externally map sequence actions externally 
sequence actions externally original sequence actions 
implements possible prove method 
answer 
may necessary modify adding auxiliary history variables certain rules ensure modified lampson exactly traces 
right history variables possible find abstraction function 
equivalent alternative abstraction relation abstraction function backward simulation forward simulation just described 
mention complications completeness avoid 
order prove simulates usually need know reachable states won true action arbitrary state simulates sequence actions fact abstraction function defined arbitrary state convenient way characterize reachable states invariant predicate true reachable state 
helpful write invariant conjunction call conjunct invariant 
common need stronger invariant simulation requires extra strength stronger induction hypothesis possible establish simulation require 
structure proof goes define abstraction function 
establish invariants characterize reachable states showing action maintains invariants 
establish simulation showing action simulates sequence actions externally 
method works actions require reasoning traces 
furthermore deals action independently 
invariants connect actions 
change add action need verify new action maintains invariants simulates sequence actions externally 
light method hints deriving understanding proving correctness implementation 
write specification 
dream idea implementation 
crucial creative step 
usually embody key idea abstraction function 
check implementation action simulates spec actions 
add invariants easier 
action maintain 
change implementation spec works 
implementation correct efficient 
efficiency means complicated invariants 
need change spec get efficient implementation 
efficient program exercise logical dijkstra follows give abstraction functions implementation consider invariants paxos algorithm 
actual proofs invariants hold action simulates suitable sequence actions routine omit 
lampson abstraction functions simple implementations recall simple non fault tolerant implementations 
single leader process state specification tells outcome phase commit works 
abstraction function outcome outcome coordinator 
done gotten outcome 
fault tolerant fails leader fails 
second set processes choosing value 
majority choose value outcome 
abstraction function outcome choice majority nil majority 
done gotten outcome 
fault tolerant fails majority doesn agree member majority fails 
paxos algorithm section describe lamport paxos algorithm implementing consensus 
algorithm independently invented liskov oki part replicated data storage system 
heart best known asynchronous consensus algorithm 
essential properties run set leader processes guide set agent processes achieve consensus 
correct matter simultaneous leaders matter leader agent processes fail recover slow messages lost delayed duplicated 
terminates single leader long time leader talk majority agent processes twice 
may terminate leaders fortunate know guaranteed termination impossible 
get complete consensus algorithm combine sloppy algorithm choosing single leader 
sloppy algorithm leaves leader leader time consensus algorithm may terminate time 
sloppy algorithm produces single leader long algorithm terminate matter messy things earlier 
explain simplest version paxos worrying amount data stored sent messages describe optimizations reasonably efficient 
get really efficient system usually necessary leases 
lampson idea review framework described 
set agent processes indexed set behavior agent deterministic agent told 
agent persistent storage survives crashes 
set agents fixed single run algorithm changed paxos algorithm 
leader processes indexed totally ordered set tell agents 
leaders come go freely deterministic persistent storage 
key idea paxos comes non fault tolerant majority consensus algorithm described earlier 
algorithm gets trouble agents agree majority members majority fail rest unsure consensus reached 
fix problem paxos sequence rounds indexed set round single leader tries get majority single value round gets trouble fresh start 
round achieves majority outcome 
clearly rounds achieve majority value 
tricky part paxos algorithm ensure property 
round leader queries agents learn status past rounds chooses value commands agents trying get majority accept successful distributes value outcome 
takes total round trips successful round 
leader fails repeatedly leaders fight may take rounds reach consensus 
state abstraction function state agent persistent status variable round persistent means affected failure agent 
status value special symbols neutral 
agent actions defined status change neutral 
agent state defined array state si value neutral initially neutral round dead majority status successful majority status value 
state leader round currently working nil isn working round value round nil hasn chosen leader idea allowed set 
state nil initially nil value nil initially nil allowed set value initially lampson abstraction function allowed just union leaders sets af allowed allowed define value round follows vn agent value si si nil defined invariant round value 
round agents value value 
give abstraction function outcome af outcome vn successful round nil successful round 
defined invariant successful rounds value 
maintain invariant round value ensuring leader works round time reuses round number round leader 
guarantee condition leader identity part round number sequence number leader identity pairs round numbers 
totally ordered set usually integers 
leader chooses nl 
instance current value local clock 
shall see avoid stable storage leader choosing invariants introduce notion stable predicate state predicate true remains true henceforth 
important safe act truth stable predicate 
change concurrency crashes 
non neutral value change predicates stable dead successful complex stable predicate anchored dead words anchored iff look back rounds skipping dead rounds see value preceding rounds dead anchored lampson matter value defined need total ordering lexicographic ordering 
maintain invariant making progress successful round 
see maintain invariant strengthen get form easily maintain distributed algorithm set actions uses local state process 
invariant successful rounds value 
follows invariant successful nil follows invariant dead nil rearrange predicate calculus dead nil nil dead nil anchored choose non nil anchored 
rest algorithm obvious 
algorithm leader choose value round round anchored 
accomplish leader chooses new nl queries agents learn status rounds numbers nl values rounds 
agent responds changes neutral status round earlier nl leader information anchor round 
responses query majority agents give leader information round nl anchored follows leader looks back nl skipping rounds value status reported dead remember heard majority reported status value 
comes round value status chooses value vn ul 
anchored invariant rounds nl dead nl anchored ul value 
previous rounds dead leader chooses allowed value case certainly anchored 
anchored dead stable properties state change invalidate choice 
lampson second round trip leader commands accept ul round nl 
agent neutral round nl hasn answered query round accepts changing status ul round nl case reports status leader 
leader collects ul reports majority agents knows round nl succeeded takes ul agreed outcome algorithm sends fact processes final half round 
entire process takes messages round trips 
note round succeeds agree action spec happens outcome changes instant agent forms majority accepting value agent leader knows time happened 
fact possible round succeed leader knowing fact agents fail accepting getting reports leader leader fails 
example may help intuition works 
table shows rounds different runs algorithm agents allowed 
left run rounds dead leader hears agents knows free choose allowed value 
leader hears knows round dead know round dead choose 
hears know round dead choose 
right run matter agents leader hears know round dead 
fact successful leader hears doesn know 
choose sees value latest non dead round 
successful round acts barrier prevents round choosing different value 
status vn sa sb sc vn sa sb sc round round round leader choices round report report report matter majority reports presumably reason rounds runs different leaders involved leader failed completing round 
round succeeded 
leaders keep overtaking forcing agents set earlier status earlier rounds reach command phase algorithm continue indefinitely 
details algorithm 
actions ones described table boring actions send receive messages 
lampson choose new leader message agent query majority agents status choose keep anchored 
dead choose allowed command majority agents accept query neutral report command nl neutral nl report nl majority accepts pub outcome ul outcome ul algorithm minimal demands properties network lost duplicated reordered messages ok nodes fail recover better network doesn things simpler 
model network broadcast medium leader agents practice usually implemented individual messages agent 
leaders agents retransmit practice agents retransmit response leader retransmission 
complete proof requires modeling communication channels processes set messages lost duplicated proving boring invariants channels form message report channel si agrees neutral components termination choosing leader algorithm terminate 
leader starts round existing successful algorithm definitely terminates soon leader succeeds querying commanding majority 
doesn majority agents don time 
want single leader runs round time 
leaders running biggest round eventually succeed new leaders keep starting bigger rounds may succeed 
saw little behavior example 
fortunate know fischer lynch paterson result algorithm guaranteed terminate 
easy keep having leaders failures processes clocks usual maximum time send receive process message known lampson potential leader broadcasts name 
leader round trip time doing broadcast received broadcast bigger name 
course algorithm fail messages delayed processes late responding messages 
fails may leaders 
running largest round succeed problems cause leader arise 
optimizations necessary store transmit complete agent state 
encoded small fixed number bits follows 
relevant part si just value states si si si neutral 
encode 
agent needs store report 
similarly leader needs remember reports largest round value reported agents reported 
simply count reports report messages duplicated retransmissions 
leaders need processes agents usually 
leader doesn really need stable state algorithm allows choose hasn 
poll majority failure choose bigger yield larger leader appeared command message far get command message having value majority agents need 
paxos achieve consensus non blocking commit algorithm round trip query report combined prepare message response 
important optimization sequence consensus problem usually successive steps replicated state machine 
try stay leader usually called primary run sequence instances paxos numbered index state agent state value neutral initially neutral fixed size state agent encode 
query needs done time leader changes 
piggyback outcome message command message instance paxos 
result messages round trip consensus 
lampson showed build highly available system consensus 
idea un replicated deterministic state machine get consensus input 
efficient leases replace consensus steps actions process 
derived fault tolerant algorithm consensus real time guarantees 
lamport paxos algorithm repeating rounds get majority ensuring round majority value 
saw implement small messages round trip consensus sequence leader 
explained design understand concurrent fault tolerant system 
recipe write simple spec state machine find abstraction function implementation spec establish suitable invariants show implementation simulates spec 
method works lots hard problems 

abadi lamport 
existence refinement mappings 
theoretical computer science may 

alpern schneider 
defining liveness 
information processing letters 

fischer lynch paterson 
impossibility distributed consensus faulty process 
acm april 

gray reuter 
transaction processing concepts techniques 
morgan kaufmann 

lamport 
implementation reliable distributed multiprocess systems 
computer networks 

lamport 
simple approach specifying concurrent systems 
comm 
acm jan 

lamport 
part time parliament 
technical report systems research center digital equipment palo alto sep 

liskov oki 
replication proc 
th podc aug 

lynch 
distributed algorithms 
morgan kaufmann 

lynch vaandrager 
forward backward simulations timing systems 
lecture notes computer science springer 

schneider 
implementing fault tolerant services state machine approach tutorial 
computing surveys dec 
lampson 
