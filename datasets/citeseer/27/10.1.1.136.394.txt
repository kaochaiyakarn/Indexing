arti cial intelligence 
remote agent boldly go ai system gone nicola muscettola nayak barney pell brian williams nasa ames research center ms mo ett field ca 
email nayak pell ptolemy arc nasa gov renewed motives space exploration inspired nasa goal establishing virtual presence space heterogeneous eets robotic explorers 
information technology arti cial intelligence particular play central role endeavor endowing explorers form computational intelligence call remote agents 
describe remote agent speci autonomous agent architecture principles model programming board deduction search goal directed closed loop commanding takes signi enabling 
architecture addresses unique characteristics spacecraft domain require highly reliable autonomous operations long periods time tight deadlines resource constraints concurrent activity tightly coupled subsystems 
remote agent integrates constraint temporal planning scheduling robust multi threaded execution model mode identi cation recon guration 
demonstration integrated system board controller deep space nasa rst new millennium mission scheduled period week late 
development remote agent provided opportunity ai conventional wisdom challenges implementing embedded systems tractable reasoning knowledge representation 
discuss issues contrary experiences 
keywords autonomous agents architectures constraint planning scheduling execution reactive systems diagnosis recovery model reasoning authors alphabetical order 
recom technologies riacs space exploration robotic intelligence amazing hold public imagination particularly vision 
example science ction classic space odyssey ered established earth amply populated moon bases space stations 
time intelligence established impressive hal computer created urbana illinois january 
fact january th passed moon base hal computer sight 
international space station launch space year reaching completion 
space station far modest scope 
reality far ambitious dreams humans space space exploration surprising di erent particularly exciting robotic exploration information technology community play central role enabling vision nasa open space frontier 
people think space think rocket plumes space shuttle 
space information technology 
establish virtual presence space planets aircraft spacecraft 
daniel goldin nasa administrator sacramento california may providing virtual human presence universe actual presence plethora robotic probes requires strong motive mechanical means computational intelligence 
brie consider scienti questions motivate space exploration mechanical means exploring questions focus remainder progress endowing mechanical explorers form computational intelligence call remote agents 
development remote agent tight time constraints forced reexamine places call question ai conventional wisdom challenges implementing embedded systems tractable reasoning representation 
topic addressed variety places 
establishing virtual presence space renewed motives space exploration ered 
prime example series scienti discoveries suggest new possibilities life space 
best known example evidence summer suggesting primitive life existed mars years ago 
speci cally discovery extremely small bacteria earth called led scientists examine martian ne resolution evidence suggestive native features characteristic life evidence complex organic chemistry 
extending virtual presence con rm ndings requires new means exploration higher performance cost ective traditional missions 
traditional planetary missions galileo planned concept missions extend human virtual presence universe 
mars sample return missions courtesy nasa johnson space center europa exploration courtesy jpl ds formation ying optical interferometer courtesy jpl mars solar airplane courtesy nasa ames research center 
jupiter mission cassini saturn mission price tags excess dollars ground crews ranging personnel entire life mission 
mars path nder mission introduced paradigm shift nasa lightweight highly focused missions tenth cost operated small ground teams 
viability ofthis concept demonstrated summer landed mars enabled sojourner micro rover rst mobile robot land surface planet 
path nder sojourner demonstrate important mechanical means achieving virtual presence currently lack board intelligence necessary achieve goals challenging missions 
example operating sojourner month life span extremely small ground crew 
mars rovers expected operate emphasizing need development remote agents able continuously robustly interact uncertain environment 
rovers means exploring mars 
innovative concept solar airplane study nasa lewis nasa ames 
thin atmosphere mars plane ying feet martian surface terrestrial plane ying feet sea level 
height reach existing planes 
developing martian plane autonomously survey mars long durations surviving idiosyncrasies martian climate requires development remote agents model quickly adapt environment 
second example discovery rst planet star raises intriguing question earth planets exist 
search earth planets nasa developing series telescopes new millennium deep space ds mission 
identify categorize planets measuring star induced orbiting planets 
accurate pointed california washington dc measure thickness single piece 
ds achieves requirement placing optical units separate spacecraft ying tight formation kilometer apart 
extends computational challenge development multiple tightly coordinated remote agents 
nal example question form life exist beneath europa frozen surface 
february galileo mission identi ed features europa relatively smooth surface ice lend support idea europa may subsurface oceans hidden thin icy layer 
nasa intriguing concepts exploring subsurface ocean ice penetrator submarine called autonomously navigate beneath europa surface 
need operate autonomously environment utterly unknown 
taken examples small explorers including micro rovers airplanes formation ying provide extraordinary opportunity developing remote agents assist establishing virtual presence space land air sea 
requirements building remote agents level board autonomy necessary enable missions unprecedented 
added challenge fact nasa need achieve capability fraction cost design time previous missions 
contrast dollar cassini mission nasa target missions cost dollars developed years operated small ground team 
ambitious goal achieved apollo era pace new millennium program low cost technology demonstration missions 
rst new millennium probe deep space ds development time scheduled mid launch 
unique challenge developing remote agents controlling space explorers driven major properties spacecraft domain 
spacecraft carry autonomous operations long periods time human intervention 
requirement stems variety sources including cost limitations deep space communication network spacecraft dark side planet communication delays 
example cassini spacecraft perform critical saturn orbit insertion maneuver human assistance due saturn 
second autonomous operations guarantee success tight deadlines re source constraints 
tight stem orbital dynamics rare celestial events include examples executing orbit insertion maneuver xed time window asteroid images narrow window time closest approach imaging comet ery descent jupiter 
tight spacecraft resources renewable power non renewable carefully managed mission 
third spacecraft expensive designed unique missions spacecraft operations require high reliability 
highly reliable hardware harsh environment space cause unexpected hardware failures 
flight software compensate failures repairing recon guring hardware switching possibly degraded operation modes 
providing capability complicated need rapid failure responses meet hard deadlines conserve precious resources due limited observability spacecraft state 
stems limited board sensing additional sensors add weight increase mission cost 
furthermore sensors reliable associated hardware making di cult deduce true spacecraft state 
fourth spacecraft operation involves concurrent activity set tightly coupled subsystems 
typical spacecraft complex networked multi processor system ight computers communicating bus sophisticated sensors star trackers sun sensors actuator subsystems reaction wheels main engines science instruments 
hybrid hardware software subsystems operate concurrent processes coordinated enable synergistic interactions control negative ones 
example camera picture attitude controller hold spacecraft speci ed attitude main engine produce vibration 
reasoning spacecraft re ect concurrent nature 
remote agent architecture announcement new millennium program early spacecraft engineers jpl challenged group ai researchers nasa ames jpl demonstrate short span months fully capable remote agent architecture spacecraft control 
evaluate architecture jpl engineers de ned new millennium autonomy architecture prototype simulation study cassini mission retains challenging aspects 
spacecraft scaled version cassini nasa complex spacecraft date 
scenario complex mission phase cassini successful insertion saturn orbit event single point failure 
remote agent architecture developed scenario integrated constraint planning scheduling robust multi threaded execution model mode identi cation recon guration 
overview architecture provided section 
additional details including description scenario may 
success demonstration resulted remote agent selected technology experiment ds 
experiment currently scheduled late 
details experiment :10.1.1.48.3347
development remote agent architecture provided important opportunity ai conventional wisdom includes generative planning scale practical problems 
reactive systems proving theorems question justi cation logical truth maintenance systems proven inadequate 
ine cient time space qualitative equations far general practical 
examine statements detail 
rst highlight important guiding principles underlying design remote agent architecture 
principles guiding design remote agent agent architectures ai community particularly eld indoor outdoor mobile robots 
remote agent architecture distinctive features 
largely programmable set compositional declarative models 
refer model programming 
second performs signi cant amounts board deduction search time resolutions varying hours hundreds milliseconds 
third remote agent designed provide high level closed loop commanding 
model programming reduce software development cost software plug play amortize cost software successive applications 
di cult achieve breadth tasks constitute autonomous system architecture task requires programmer reason system wide interactions implement appropriate function 
example diagnosing failed thruster requires reasoning interactions attitude controller star tracker bus controller thruster valve electronics 
software lacks modularity restricted particulars hardware 
kind nature nasa explorers means cost reasoning system wide interactions amortized paid new explorer 
addition complexity interactions lead cognitive overload programmers causing suboptimal decisions outright errors 
solution problem called model programming introduced 
model programming observation programmers operators generate breadth desired functionality common sense hardware models light mission level goals 
addition model perform tasks 
ight software highly reusable modeling knowledge generate software highly reusable 
support plug play remote agent programmed possible specifying plugging declarative component models hardware software behaviors 
remote agent responsibility automating reasoning system wide interactions models 
example model mode identi cation recon guration component remote agent uses compositional declarative concurrent transition system model combination probabilistic deterministic transitions see section 
similarly scheduling component operating declarative domain model generate plan rst principles see section 
executive component primarily programmed sophisticated scripting language uses declarative models device properties interconnections possible generic procedures written scripting language operate directly declarative models 
board deduction search task automating reasoning system interactions natural question remote agent board real time board compile time 
need fast reactions suggests responses pre computed 
space explorers operate harsh environments long periods time large number failures frequently appear mission critical phases 
pre enumerating responses possible situations quickly intractable 
writing ight software traditional spacecraft tractability usually restored simplifying assumptions local suboptimal control laws assuming single faults ignoring sensor information ignoring subsystem interactions 
unfortunately result systems brittle grossly ine cient reason human operators needed control loop 
di culty pre computing responses requirement highly survivable systems means remote agent models synthesize timely responses anomalous unexpected situations real time 
applies equally highlevel planning scheduling component low level fault protection system respond time critical novel situations performing deduction search real time course time scale planning signi cantly larger fault protection 
goal goes directly counter conventional ai wisdom robotic executives avoid deduction reactive loop costs 
wisdom emerged late mathematical analysis showed surprisingly simple deductive tasks np hard 
example proving formulation strips style planning np hard david chapman concluded hoping best amounts arguing particular cases come practice extensions current planning techniques happen cient 
intuition case 
ip side ers hope empirical developed early hard satis ability problems 
satis ability problems quickly shown satis able unsatis able 
surprisingly elusive hard problems lie phase transition solvable unsolvable problems 
hard problems space randomly generated problems suggests real world problems may tractable 
raises possibility carefully designed constrained deductive kernel perform signi cant deduction real time 
example diagnosis recovery component remote agent adopts risc approach wide range deductive problems reduced queries highly tuned propositional best rst search kernel 
planning component exploits set assumptions domain structuring generate plans acceptable ciency simple search strategy simple language writing heuristic control rules 
goal directed closed loop commanding mission cassini requires ground crew personnel di erent mission stages 
driver large team cassini nominal mission ort required robustly respond extraordinary situations 
likewise need extreme robustness extensive ground interaction remote agent de ning requirement 
traditional spacecraft commanded time stamped sequence extremely low level commands open valve exactly 
low level direct commanding rigid time stamps leaves spacecraft little exibility failure occurs unable shift time commanding change hardware achieve commands 
fundamental concept supporting robustness classical control systems feedback control 
feedback control avoids brittleness direct commanding set point trajectory input feedback mechanism senses system actual trajectory commanding system error actual intended trajectories eliminated 
set point trajectory simple speci cation intended behavior gives feedback controller freedom determine commands necessary achieve behavior remote agent embodies concept level 
commanded goal trajectory mission pro le speci es high level goals di erent mission segments performing engine calibration activity hour window approaching target 
gives remote agent considerable exibility goals achieved 
achieve robustness remote agent uses sensor information continuously close feedback loop goal level quickly detecting compensating anomalies cause system deviate goal trajectory 
traditionally feedback loop closed ground crew 
popular example highlights diverse actions humans take close loop extraordinary situations apollo crisis 
crisis began quintuple fault occurred consisting electrical shorts tank line pressure jacket bursting 
rst challenge ground crew accurately assess health state spacecraft limited sensor information 
repair spacecraft get mission back track moon second challenge involved quickly designing new mission mission manager planner scheduler remote agent planning experts smart executive mode id monitors real time control remote agent architecture embedded ight software 
ground system flight sequence allow apollo capsule return earth state 
recall astronaut worked extensively ground simulator search novel command sequence severe power limitations spacecraft 
ultimately achieved novel unintended spacecraft hardware drew current lunar module battery 
lovell challenge quickly assembling procedures guide capsule new mission sequence 
example highlights basic roles performed humans embodied albeit simpler form remote agent 
rst roles diagnosis multiple failures novel recon guration hardware performed remote agent model mode identi cation recon guration component 
generation new mission sequences tight resource constraints performed remote agent planner scheduler 
flexible assembly execution ight procedures implement new changing mission sequences implemented remote agent executive component 
section discuss components interact remote agent architecture 
focus technical lessons related components remote agent discuss key technology insertion lessons 
remote agent architecture section provides overview remote agent ra architecture 
architecture designed address domain requirements discussed section 
need autonomous operations tight resource constraints hard deadlines dictated need temporal planner scheduler ps associated mission manager mm manages resources develops plans achieve goals timely manner 
need high reliability dictated reactive executive exec provides robust plan execution coordinates execution time activity model mode identi cation recon guration system mir enables rapid failure responses spite limited observability spacecraft state 
need handle concurrent activity impacted representation formalisms ps models domain concurrently evolving state variables exec uses multiple threads manage concurrency mir models spacecraft concurrent transition system 
ra architecture relationship ight software embedded shown 
viewed box ra sends commands real time control system rt 
rt provides primitive skills autonomous system take form discrete continuous real time estimation control tasks attitude determination attitude control 
rt responds commands changing modes control loops states devices 
information status rt control loops hardware sensors passed back ra directly set monitors 
planner scheduler ps mission manager mm ps constraint integrated temporal planner resource scheduler activated mm new plan desired exec 
requested exec mm formulates shortterm planning problems ps long range mission pro le 
mission pro le provided launch updated ground necessary 
contains list nominal goals achieved mission 
example ds mission pro le contains goals optical navigation goals specify duration frequency time windows spacecraft take asteroid images orbit determination board navigator 
mm determines goals need achieved horizon week long combines initial projected spacecraft state provided exec 
decomposition long range mission planning short term detailed planning enables ra undertake extended diverse mission minimal human intervention 
ps takes plan request formulated mm uses heuristic guided backtrack search produce exible concurrent temporal plan 
plan constrains activity spacecraft subsystem duration plan leaves exibility details resolved execution 
plan contains activities information required monitor progress plan executed 
plan contains explicit activity initiate round planning 
example typical ds plan achieve optical navigation goal requires camera turned spacecraft pointing asteroid image taken 
plan leaves temporal exibility exactly events take place constrain particular mode attitude controller ecting turn 
board software systems called planning experts participate planning process requesting new goals answering questions ps 
example navigation planning expert requests main engine thrust goals determination spacecraft orbit attitude planning expert answers questions estimated duration speci ed turns resulting resource consumption 
smart executive exec exec reactive plan execution system responsibilities coordinating execution time activity 
exec executes plans decomposing high level activities plan commands real time system respecting temporal constraints plan 
exec uses rich procedural language esl de ne alternate methods decomposing activities 
example high level activity ds thrusting main engine decomposed coordinated commands main engine start thrusting attitude controller switch thrust vector control mode executed previous optical navigation window ended 
exec achieves robustness plan execution exploiting plan exibility able choose execution time speci ed windows able select different task decompositions high level activity 
exec achieves robustness closed loop commanding receives feedback results commands directly command recipient inferences drawn mode identi cation component mir 
example exec turns camera prepare imaging mir uses information switch current sensors con rm camera turn 
method achieve task fails exec attempts accomplish task alternate method task de nition invoking mode recon guration component mir 
instructed request new plan currently executing plan exec provides mm projected spacecraft state current plan requests new plan 
exec unable execute repair current plan aborts plan cleans executing activities puts controlled system stable safe state called standby mode 
exec provides mm current state requests new plan maintaining standby mode plan received 
mode identi cation recon guration mir mir component ra provided livingstone discrete model controller 
livingstone distinguished single declarative spacecraft model provide functionality deduction search reactive control loop 
livingstone sensing component called mode identi cation mi tracks spacecraft states identifying states models consistent sensed monitor values commands sent real time system 
mi reports inferred state changes exec provides level abstraction exec enabling reason purely terms spacecraft state 
example particular combinations attitude errors allow mi infer particular thruster failed 
exec informed failed state thruster observed low level sensor values 
livingstone commanding component called mode recon guration uses spacecraft model nd cost command sequence establishes restores desired functionality recon guring hardware repairing failed components 
ps reactive focus enabling rapidly suggest command sequences 
ra architecture invoked exec recovery request speci es set constraints established maintained 
response produces recovery plan executed exec moves spacecraft current state inferred mi constraints satis ed 
example mi determines camera turn commanded exec request repair camera 
respond instructing exec retry command 
planning scheduling planner scheduler ps remote agent provides high level deliberative planning component architecture 
extended duration space mission coupled unpredictability actions thrusting poses challenge planning impossible plan entire mission lowest level detail 
approach ra perform periodic planning round planning restricted scheduling horizon 
raises potential coherence problem activities horizon compromise activities mission example aggressive maneuvers early mission may exhaust needed mission goals 
ra addresses problem mission manager mm component 
mm extracts goals upcoming round planning extracts constraints associated waypoint mission pro le 
example waypoint constraint speci es amount available 
adding waypoint constraints current plan request mm restricts ps generate plans coherent mission plan 
ps receives mm exec initial spacecraft conditions goals scheduling horizon waypoint constraints 
produces plan viewed high level program exec follows order achieve required goals 
shows structure ps see details 
general purpose planning engine provides problem solving mechanism reused di erent application domains 
special purpose domain knowledge base characterizes application 
planning engine consists plan database search engine 
plan database provided heuristic scheduling testbed system hsts framework 
search engine calls plan database record consequences problem solving step require consistency maintenance propagation services 
search engine iterative re nement search irs chronological encodes set methods usable extend partial plan 
programming planning engine speci application requires description domain domain model methods irs choose branching alternatives search process domain heuristics 
crucial aspect success ps ability provide model domain constraints 
ps uses domain description language ddl part hsts framework 
models expressed ddl strong domain organizational principles foundation hsts 
structures description system nite set state variables 
plan describes evolution system set parallel histories timelines linear continuous time state variable 
second uses uni ed representational primitive token describe actions state literals 
token extends 
description system consists constraints tokens satis ed plan represent legal behaviors controlled system 
discuss structural principles section 
planning experts goals initial state planning engine search engine plan database heuristics domain model knowledge base ps architecture diagram 
plan ps generates complex plans performance acceptable board spacecraft application simple search strategy simple heuristic language program search engine 
constraint posting propagation primary problem solving method restrictions topology constraint networks imposed structural principles hsts 
ps concrete example fact solely relying concepts techniques ai planning scheduling research possible solve complex problems practical signi cance 
techniques include subgoaling temporal reasoning constraint propagation heuristic search 
furthermore believe current time ai planning scheduling techniques provide viable software engineering approach development high level commanding software highly autonomous systems 
bears great promise technology 
discuss points detail 
non classical aspects ds domain complex mission critical application ds serious stress test classical ai planning scheduling technology 
classical ai planning problem achieve set goal conditions initial state description controlled system set planning operators 
classical ai planners representations world derived strips sees world alternation inde nitely persistent states instantaneous actions 
classical schedulers hand see world set resources structured task networks task having duration known priori 
solving problem involves allocating start time resource task guaranteeing deadlines resource limits satis ed 
ds domain forces view world merges planning scheduling introduces need signi cant extensions classical perspective 
quick review types constraints system dynamics types goals ps handle 
system dynamics describe dynamics spacecraft hardware real time software nd need express state action constraints preconditions take picture camera continuous time management nite resources electric power 
classical planning classical scheduling cover aspects 
modeling constraints equally important outside classical perspective 
persistent parallel threads separate system components evolve loosely coupled manner 
represented parallel execution threads may need coordination relative operational modes 
typical examples threads various control loops attitude control ion propulsion system control terminate switch di erent operational modes 
functional dependencies parameters model best represented functions parameters 
example duration spacecraft turn depends pointing direction turn starts turn ends 
exact duration turn known priori computed ps decides sequence source destination turn inserted 
continuous parameters addition time planner keep track status continuous parameters 
include level renewable resources battery charge data volume non renewable resources 
example ds ion propulsion system ips engine accumulates thrust long periods time order months 
thrust accumulation activities executed require engine shut activity going 
interruptions plan keep track previously accumulated amount thrust shoot shoot total requested thrust 
planning experts unrealistic expect aspects domain encoded ps 
cases sophisticated software modules available ectively model subsystem behaviors mission requirements 
ps able exchange information planning experts 
example ds ps navigation expert manages spacecraft trajectory 
navigation expert charge feeding ps beacon asteroid observation goals determine trajectory error thrusting maneuver goals correct trajectory 
goals ds problem expressed making disparate set classical nonclassical goal types 
problem requirements include conditions nal states scheduling horizon camera classical planning goals requests scheduled tasks temporal constraints communicate earth pre de ned deep space network classical scheduling goals 
non classical categories goals include periodic goals example optical navigation activities naturally expressed periodic function take asteroid pictures navigation hours days plus minus hours 
accumulation goals arise handling continuous level resources 
example ds goal expresses requested thrust accumulation duty cycle percentage scheduling horizon ips engine thrusting 
ps choose speci time intervals ips thrusting 
trading ips requirements goals 
default goals specify conditions system satisfy trying achieve goal 
example order facilitate possible emergency communications spacecraft keep high gain antenna pointed earth goal requiring point erent direction 
domain structure principles mentioned ps strong structural principles regarding represent domain models 
call state variable principle token principle 
discuss detail 
state variable principle evolution system time entirely described values nite set state variables 
state variables generalization resources classical scheduling 
scheduling evolution system description task allocation resources 
similarly literal inside plan associated state variable 
literal represents value assumed state variable time state variable assume value point time 
building plan involves determining complete evolution system state variables horizon nite duration 
rst glance structuring model nite set state variables appear quite restrictive 
analysis see perspective quite natural domains typically addressed classical planning 
example monkey bananas world actions state literals assigned values state variables location monkey location block location bananas elevation monkey monkey oor climbing block top block 
state variables advantageous problem solving 
results planning research suggest planners representational devices similar state variables seriously outperform planners state variable constraints satplan mutex relations graphplan 
token principle distinction needs representational primitives actions states 
single representational primitive token su cient describe evolution system state variables time 
structural principle challenges fundamental tenet classical planning dichotomy actions states 
illustrate dichotomy problematic consider example drawn spacecraft operations domain 
attitude spacecraft orientation dimensional space supervised closed loop attitude control system acs 
asked achieve maintain certain attitude acs determines discrepancy current desired attitude 
appropriately commands ring spacecraft function discrepancy maximum acceptable attitude error 
cycle continuously repeated attitude error acceptable 
controlled acs spacecraft possible modes 
turning changing attitude initial pointing nal pointing 
constant pointing maintaining attitude classical planning representation model attitude need map modes di erent kinds literals state literals representing persistent conditions action literals representing change 
problem spite appearances means easy choose mapping system modes states actions 
people probably nd natural map constant pointing state literal turning action literal 
certainly reasonable focuses value time actual orientation spacecraft 
may want take di erent perspective consider level activity attitude control 
usually active acceptable error attitude smaller 
fact red frequently maintaining constant pointing state low error tolerance executing turning may su cient re turn start turn 
case conclude fact turning constant pointing best represented actions 
opposite perspective possible 
focus exec executing literals plan see exec communicating acs appropriate control law set point cause required spacecraft attitude behavior 
point view reasonable see constant pointing turning di erent parameter settings acs control system conceptually best represented state literals 
example distinction actions states clear 
observations ps takes radical view gives status literals 
precisely plan literal describes process dynamic stationary occurs period time non negative duration 
purposefully remove state action dichotomy neutral term token refer temporally scoped assertions 
domain model contains constraint patterns consistent plan 
example gives ddl construct representing token conditions needed plan ds microelectronics integrated camera spectrometer micas take image 
action represented plan token micas actions sv take image id orientation exp time settings meaning state variable actions sv system component micas assumes ground value matching take image predicate duration token 
constraint descriptor includes speci cation functional dependency parameters token 
example function compute image duration computes value token duration special variable duration function value token arguments exp time setting 
descriptor includes temporal relations satis ed tokens order plan consistent domain model 
example constraints follow temporal relations keyword 
state micas actions sv state variable idle immediately take image token take image consumes watts power take image spacecraft constant pointing requested orientation take image micas health micas available token ready 
constraint template closely related temporally scoped operators temporal planning approaches 
consequence token principle framework allows expression similar constraint patterns state tokens micas actions sv idle 
reality equally important able express constraints actions states 
example functional duration constraint may need apply turning duration depends angle constant pointing maximum duration may depend relative orientation sun respect ects satisfaction solar exposure constraints sensitive subsystems 
plans constraint networks ps plans ectively programs exec interprets run time generate single acceptable consistent behavior spacecraft 
ensure execution robustness plans possible avoid single completely speci ed behaviors 
compactly describe behavior envelope set possible behaviors 
exec incrementally select appropriate behavior envelope responding information available execution time 
ps satis es requirement representing plans constraint networks 
example start times tokens integer valued variables interconnected simple temporal constraint network 
relate parameters assume value plan execution 
functional dependencies represented 
example tokens describe thrust accumulation ips engine contain constraints micas actions sv take image id orientation exp time settings parameter functions duration compute image duration exp time settings temporal relations met micas actions sv idle meets micas actions sv idle equal power availability sv delta contained spacecraft attitude sv constant pointing orientation contained micas health sv micas available contained micas mode sv ready picture board micas camera 
relate initial accumulation due previous thrust accumulation tokens nal accumulation duration token 
plan construction ps tries enforce compatibility constraints posts portions constraint network plan database 
plan database enforces consistency checking propagating new constraints rest network 
constraint network consistent constraint propagation deduces acceptable ranges values variable 
plans intrinsically exible 
plan execution exec interprets plan constraint network order select speci values plan variables 
example plan speci es acceptable range start time token exec freedom start token execution range values 
decision ect value range start tokens 
adjust value ranges exec able propagate constraints run time 
exec constraint propagation di erent requirements ps see section 
practical generative planning outlines ps search process 
partial plan plan database aws ps selects extends plan constraint network 
plan database performs arc consistency propagation detect inconsistencies restrict variable value backtrack unscheduled goal token plan flaws underconstrained parameter plan consistent plan uninstantiated temporal subgoal ps problem solving cycle 
instantiate temporal subgoal schedule token state variable heuristics ranges 
propagation detects inconsistency ps chronologically backtracks 
plan database contains aws plan returned 
aw detection repair process analogous classical planning algorithms 
ps recognizes kind aws 
lists 
uninstantiated temporal subgoal aw refers single temporal relation token compatibility resolved analogously open precondition aws classical planning 
unscheduled goal token aws refer goal tokens legal position state variable 
ps resolves aw nding legal position position rejecting goal 
underconstrained variable value aw handled restricting value range variable subrange possibly single value original range 
handling aw analogous value selection constraint satisfaction search 
prioritization open aws selection alternatives aw handling relies simple heuristics 
example uninstantiated temporal compatibilities assigned numeric priority value range variables involved aw moment aw rst appears plan 
search strategy heuristic language simple ps solve problems size complexity adequate practical application domains 
example ds remote agent experiment domain consists state variables token predicates compatibility speci cations 
largest plan nominal remote agent experiment scenario tokens temporal constraints tokens 
translates underlying constraint network variables constraints 
variables temporal bound constraints constitute simple temporal subnetwork relates start times tokens 
constraints rest network arity number variables related constraint 
number nodes expanded plan generation search ciency 
search ciency measured ratio number nodes path solution total number expanded nodes 
search ciency indicates backtracking 
previous description conclude ps purely generative planner operates single abstraction level 
importantly pre compiled plan fragments assembles plan atomic components 
di ps practical applications planning technology date 
systems rely hierarchical task network htn planning comes hand generated task networks patched plan 
notable absence generative planning successful applications led commonly shared view htn planning true utility respect automatic solution planning problems commercial signi cance 
pre compiling token networks htn powerful problem solving technique choice pure generative planning accidental 
domains equally amenable htn approach 
example ds task decomposition hierarchy shallow useful pre compiled task networks assemble small number tokens 
conditions pre compiled task networks signi cantly di er domain compatibilities htn clear advantage respect generative planning 
second replanning especially degraded capabilities relies representation domain level constraints activities goals included htn representations 
third importantly htn formalism provide strong separation encoding domain model problem solving heuristics 
valid independent goals speci planning problem function ensure acceptable performance quality solution speci planning problems 
approach clearly separates domain model heuristics 
shall see section separation domain models problem solving heuristics crucial facilitate validation big impact acceptability mission critical applications 
summary ps constraint temporal planner provides high level commanding capability remote agent architecture 
experience take lessons classical planning classical scheduling combined augmented autonomous commanding complex systems 
classical action state dichotomy problematic substituted uni ed concept token 
constraint plan representation organized state variables powerful problem solving framework planning 
heuristic generative planning solve problems practical signi cance 
separation domain models problem solving heuristics important validating planners real world domains 
executive exec robust event driven goal oriented multi threaded execution system 
provides language framework software designers express planning control diagnosis recon guration capabilities integrated autonomous system 
request execute plans involving concurrent activities may interdependent success timing outcomes activities may uncertain 
provides language expressing goal decompositions resource interactions 
interpreting language run time executive automates decomposition goals smaller activities executed concurrently 
automates aspects labor intensive sequencing function spacecraft operations raises level abstraction ground system board planner reason 
exec design supports close integration activity decomposition fault responses 
leads robust execution avoids loss mission objectives improves mission reliability resource utilization simpli es design entire software system 
exec built execution support language esl provides sophisticated control constructs loops parallel activity synchronization error handling property locks 
language features exec implement robust schedule execution hierarchical task decomposition context dependent method selection routine con guration management event driven responses 
ra architecture exec plays main coordination role intermediary ight software modules internal external ra 
concentrate main aspects exec behavior periodic planning extended missions exec periodically ask ps new tasks coordinate ps operation tasks executed 
operations interrupted capabilities lost 
exec ask new plan communicating ps available capabilities 
robust plan execution exec successfully execute plans presence uncertainty failures 
exibility allowed plan exploited hybrid procedural deductive execution strategy performs context dependent method selection guided state inference model diagnosis 
local recovery faults involves planning guided constraints current plan execution context 
planning assumptions violated standby mode plan failure plan failure standby plan request horizon plan request running plan get plan planner periodic planning replanning cycle 
periodic planning extended missions plan ready shows major branches periodic planning replanning cycle ra nominal execution plan failure execution 
nominal execution occurs plan tokens execute mir exec detecting execution failure 
case plan execution proceeds current scheduling horizon 
pre de ned point plan exec invokes ps continues executing waiting new plan smoothly installs new plan current execution context 
plan execution failure occurs mir exec encounter unrecoverable failure 
event exec aborts current activity standby mode serves design de ned invocation point planning 
exec requests new plan state possibly updating planner degraded capabilities starts executing plan soon receives back ps 
smooth execution periodic planning cycle requires exec coordinate generation new plan activities communicate information available system capabilities ps mm 
planning plan spacecraft domain planning informational preconditions planning relies input planning experts need complete activity suitable input state preconditions hard plan things changing quickly unpredictably consumes scarce computational resources 
ra invoking planner analogous commanding subsystems propulsion attitude control 
planning activities appear plans timeline 
domain constraints enforced plan ensure resources preconditions achieved goal cruise target planning idle planning nav imaging idle imaging contained idle attitude dead reckoning orbit calc idle point turn point turn sample plan fragment 
fore planning invoked 
aspect planning plan considered form meta planning 
ra approach planning plan illustrated 
example plan fragment constraint round planning occur navigation expert performed new orbit calculation 
calculation relies analysis pictures ps inserts plan supporting imaging activities turns required point camera corresponding targets 
execution exec initiate round planning executes planning token installed plan 
constraints explicit plan happen activities required planning successfully completed 
concurrent planning execution pre scheduled times limited computational resources available planning combined di culty planning severe resource limitations cause round planning take long time complete 
process spacecraft need operate full capabilities 
example current board processor capabilities reasonable expect ps take hours generate plan week operation 
adds percent total mission time spent generating plans 
reach designated targets ips propulsion may need operate high duty cycles excess available time 
activities require ips engine scienti experiments observations omitting ips thrusting planning leave insu cient total thrust accumulation reach target 
exec continues plan execution ps planning 
necessitates tracking changes planning assumptions planning currently executing plan prediction activities happen planning period underway 
replanning degraded capabilities operating extended periods time spacecraft face problems arising aging capabilities hardware control system may diminish time 
failures recognized combination monitoring diagnosis see section exec keep track degradation commanding planning cycles 
example fault mode ds stuck shut 
attitude control software redundant control modes enable maintain control loss single thruster ect turns take longer complete 
exec noti ed permanent change mir passes health information back tops 
robust plan execution seen nominal operations exec invokes planning machinery byproduct plan execution ensures resources available planning projected state basis planning de ned 
execution fails planning activity properly prepared executed agent needs way generate plan continue making progress mission goals 
ra addresses problem follows exec unable execute repair current plan aborts plan cleans executing activities puts controlled system standby mode serves design awell de ned invocation point planning 
entering standby mode plan failure costly respect mission goals interrupts ongoing planned activities important mission opportunities may lost 
example plan failure causing exec enter standby mode comet cause loss encounter science time re plan comet passed sight 
concerns motivate strong desire plan robustness plan execution continue successfully presence uncertainty failures 
ra achieves robust plan execution executing exible plans running multiple parallel threads fast constraint propagation algorithms exec exploit plan exibility 
choosing high level abstraction planned activities delegate detailed activity decisions possible procedural executive 
handling execution failures combination robust procedures deductive repair planning 
executing exible plans discussed section plans constraint networks representing envelopes desirable behaviors system 
exec incrementally interprets plans doing determines run time actual behavior system 
process involves propagating execution time information plan constraint networks 
process interpreting plan carried exec plan runner 
brief sketch plan runner works 
plan runner treats state variable separate thread execution 
token state variable corresponds program runs thread 
transition token state variable represented time point time variable underlying plan constraint network 
starting terminating execution tokens involves certain amount processing done time point plan 
plan runner wait time point enabled time points precede executed current time time bound 
time point canbe executed plan runner executes cycle 
set execution time time point tobe current time 
set parameters tokens started time point acceptable values 
propagate consequences previous value assignments rest plan 
terminate execution tokens time point 
start execution tokens starting time point execution previous cycle plan runner waits current time enters time bound enabled time point 
note step adjusts set possible values start time bounds parameters tokens 
making plan runner real world application raised issue overlooked ai execution research need exec give real time guarantees operation 
real time guarantee seen way quantify reactivity agent 
way problem arises plan runner 
processing execution cycle takes time execution latency show exec unable guarantee exact execution time time point precision ner latency 
words exec asked execute event precisely time guarantee actual event execution time interval order produce highly reactive temporally precise agent guarantee picture target milliseconds time necessary reduce execution latency minimum 
reduce speed execution time constraint propagation 
ra address speed problem propagation time constraint network 
show possible transform simple temporal constraint network equivalent represents set consistent time assignment time points minimal 
means exec time propagation need propagate execution time immediately adjacent time points temporal constraint network 
minimal means network contains minimum networks 
means exible temporal constraint networks ps gives exec execution fastest possible 
alternative approach real time execution guarantees addressed circa architecture 
thrust goals engine attitude acs mode delta direction magnitude rcs mode thrust segments point tokens mode plan fragment achieving change spacecraft velocity 
delegating activity details execution generation plans temporal exibility follows ps constraint commitment planner 
complementary source plan robustness relies careful knowledge representation domain 
approach choose appropriate level abstraction activities planned ps leave details possible resolved exec execution 
ps token abstracted sense provides envelope resources execution time maximum allocated power consumption 
token type exec task decomposition detailed activities absence exogenous failures guaranteed design executable resource envelopes 
example ds illustrates approach see 
delta goal token requires achievement certain change delta velocity spacecraft 
velocity changes achieved thrusting engine amount time pointing spacecraft certain direction 
total velocity change achieved series shorter thrust time segments segment engine thrust stopped spacecraft turned direction required segment 
constraint thrust vector control mode shortly ips started thrusting reaction control system rcs control mode termination thrusting activity 
initiating thrust activity involves performing number complex operations engine considerable long initiation takes thrust starts accumulating 
translates uncertainty switch attitude control modes thrust accumulated segment mode spacecraft turned steering main engine gimbal acs mode spacecraft turned small attitude 
gimbal drive electronics engine gimbal solar panel gimbal interacting gimbal subsystems ds 
thrust segments necessary achieve total desired thrust 
ra takes approach problem 
ps inserts thrust tokens plan may need executed 
exec tracks thrust achieved executes thrust tokens associated turns long thrust necessary 
similarly ps delegates exec coordination activity details subsystems level visibility ps 
example represent exec domain knowledge constraint engine thrust activity control mode acs 
result plan execution robust variations engine setup time thrust achievement 
note delegation labor ps exec relies capabilities sophisticated procedural execution system 
hybrid procedural deductive executive preceding discussion described ways achieve robust execution primarily presence uncertainty timing task progress 
major cause execution failure spacecraft domain activity failure due problems hardware 
properties spacecraft domain drove design executive combines rich procedural execution language local recovery planning 
challenging properties include tight coupling subsystems irreversible actions complex internal structure 
example tight coupling subsystems consider spacecraft subsystems ds see engine gimbal solar panel gimbal 
gimbal enables engine nozzle rotated point various directions changing spacecraft orientation 
solar panels independently rotated track sun 
ds sets communicate main computer common gimbal drive electronics gde board 
system experiences communications failure way reset system power cycle turn gde 
resetting gde system resets communication system 
particular resetting engine gimbal engine problem causes temporary loss control solar panels 
xing problem cause new problems 
avoid recovery system needs take account global constraints nominal schedule execution just making local xes incremental fashion recovery may sophisticated plan involving operations subsystems 
problem stems need repair systems complex internal structure irreversible actions 
example propulsion system cassini spacecraft fuel valve pyro valve solid black indicates closed valve simpli ed schematic cassini spacecraft propulsion system 
complex set valves see including explosive pyro valves states ordinary valves varying amounts wear tear 
di cult express right valve choices redirect uid ow minimizing costs risks wide variety situations ight 
examples drove design ra hybrid execution system integrates exec procedural executive generic procedures mir deductive model executive see section provides algorithms sophisticated state inference optimal failure recovery planning 
ra integrated executive enables designers encode knowledge combination procedures declarative models yielding rich modeling capability suitable challenges real spacecraft control 
interface executives ensures recovery sequences consistent high level schedule execution high degree reactivity retained ectively handle additional failures recovery 
need integrate exec local recovery planning ability mir signi cant impact design exec 
particular integration approach required synchronization constructs execution languages 
ra prototype exec language provided raps 
raps supports robust execution de nition multiple methods procedure 
method fails rap interpreter selects alternate methods variable bindings run options case entire procedure fails 
ectively raps handles failures activity activity basis 
ra prototype followed similar approach exec invoked mir plan recovery activity separately 
design real ight software ds introduced problems tightly interacting subsystems described 
caused re design interface exec suspend failed activities provide global constraints preserve health functioning subsystems part request repair failures 
turned extremely di cult raps reasons 
raps constructs tasks describe properties need maintained successful execution 
second raps support nested contexts recovery procedures tasks respond failures ultimately draw generic recoveries 
third raps support suspending threads external interrupts global recovery progress 
di culties motivated design new execution language esl facilities easy language extension exible notion concurrent activity interrupts hierarchical recovery procedures declarations required properties 
summary exec robust event driven goal oriented multi threaded execution system coordinates activity ight software modules internal external remote agent 
section discussed major points coherent autonomous operation long term mission achieved periodic planning guided mission pro le 
executing exible constraint plans bounded execution time propagation results robust plan execution guaranteed real time behavior 
procedural deductive capabilities integrated reactive execution loop 
enhanced synchronization primitives track state requirements necessary concurrent execution systems 
robust multi threaded executive provides core capabilities support architecture autonomous operations extended missions 
model mode identi cation recon guration mode identi cation recon guration component remote agent architecture provided livingstone system 
livingstone discrete model controller sits nexus high level feed forward reasoning classical planning scheduling systems low level feedback control continuous adaptive methods see 
discrete controller sense constantly attempts put spacecraft hardware software con guration achieves called con guration goal called mode identi cation commanding component called mode recon guration 
model sense uses single declarative compositional spacecraft model mi con guration goal speci cation set hardware software con gurations modes 
con guration satisfy con guration goal corresponding similar concerns apply procedural execution systems prs rpl interrap golog 
model monitored values state updates mi planner executive goals spacecraft 
cmds 
livingstone architecture diagram 
commands di erent con gurations achieve thrust 
circled valve failed 
line functional redundancy 
example shows con gurations satisfy goal providing thrust right circled valve fails 
con gurations corresponding di erent combinations open valves handle valve failures 
livingstone sensing component mode identi cation mi provides capability track changes spacecraft con gurations due executive commands component failures 
mi uses spacecraft model executive commands predict nominal con guration 
compares sensor values predicted con guration actual values monitored spacecraft 
discrepancies predicted monitored values signal failure 
mi isolates fault diagnoses cause identifying actual spacecraft con guration algorithms adapted model diagnosis 
mi provides avariety ra architecture including mode con rmation provides con rmation exec particular spacecraft com mand completed successfully 
anomaly detection identi es observed spacecraft behavior inconsistent expected behavior 
fault isolation diagnosis identi es components failures explain detected anomalies 
cases models component failure exist identi es particular failure modes components explain anomalies 
token tracking monitors state properties interest executive allowing monitor plan execution 
current con guration ceases satisfy active con guration goals livingstone mode recon guration capability identify cost set control procedures invoked take spacecraft new con guration satis es goals 
support avariety functions including mode con guration place spacecraft cost con guration exhibits desired behavior 
recovery move spacecraft failure state restores desired function repairing failed components nding alternate ways achieving goals 
standby sa ng absence full recovery place spacecraft safe state awaiting additional guidance high level planner ground operations team 
ra architecture primarily assist exec generating recovery procedures response failures identi ed mi 
section detailed discussion 
technical features livingstone particularly worth highlighting 
long held vision model reasoning single central model support diversity engineering tasks 
noted livingstone automates variety tasks single model single core algorithm making signi cant progress achieving model vision 
second livingstone representation formalism achieves broad coverage hybrid discrete continuous software hardware systems coupling concurrent transition system models underlying concurrent reactive languages qualitative representations developed model reasoning 
third approach uni es dichotomy ai deduction reactivity con search algorithm coupled fast propositional reasoning :10.1.1.12.1680
discuss points detail 
representation formalism implemented model diagnosis systems traditionally specify behavior constraintbased modeling example see 
formalism system models built compositionally individual component models speci cation connections components 
component model consists set modes corresponding di erent nominal failure modes component 
set constraints characterize behavior component modes 
compositional component nature modeling formalism enables plug play model development supports development complex large scale models increases maintainability enables model reuse 
compositional constraint modeling suited model diagnosis applications signi cant limitation 
widespread restricted fact typically model dynamics words model transitions modes 
modeling dynamics essential livingstone needs track changes spacecraft con gurations determine recon guration sequences 
formalizations model diagnosis hand assumed models speci ed rst order logic 
rst order logic clear understood semantics 
rst order logic accurate re ection existing implementations wholly inappropriate representation formalism building practical diagnosis systems 
hand expressiveness leads computational intractability rst order satis ability semi decidable precluding real time system 
hand rst order logic er particularly natural language describing dynamics state change 
modeling dynamics essential modeling hardware software systems 
rst order logic impractical language writing large scale models structure constants functions relations 
challenge livingstone develop practical modeling language ective compositional modeling represent dynamics hardware software naturally clean underlying semantics computed ciently realtime 
concurrent transition systems overcame limitation coupling compositional constraint modeling concurrent transition systems model reactive software 
formalism component modeled transition system consisting set modes explicit transitions modes 
example shows modes transitions valve valve driver 
transition nominal transition modeling executive command failure transition 
mode associated set constraints describe component behavior mode example inf low outf low constraint closed mode valve 
ensure representation computable de ned semantics restrict constraints nite domains compile propositional logic 
terms dynamics nominal transitions preconditions model conditions open closed inflow cmd open cmd close valve stuck open stuck closed cmd cmd reset cmd cmd valve driver failure permanent failure transition systems valve valve driver 
shaded modes failure modes 
fractional numbers represent transition probabilities numbers represent transition costs 
transition may taken 
example absence failure valve transitions open closed receives close command 
time exactly nominal transition enabled zero failure transitions may possible example closed fail transitioning stuck open stuck closed modes 
transitions associated probabilities model likelihood failure occurring 
probabilistic failure transitions model valve driver may fail transitioning failure mode may transition back explicit command 
nominal transitions associated costs providing way model di erent costs command sequences 
example cost way repairing valve driver exhibiting failure reset turning 
components larger system viewed acting concurrently communicating wires 
constraint modeling system models built compositionally connecting component transition system models 
resulting model concurrent transition system model sense single transition system corresponds concurrent transitions component transition systems 
naturally component transitions consistent component connections 
example open close command input valve directly controllable output valve driver 
transition commanded valve driver 
support large scale modeling built compositional model programming language supports speci cation concurrent transition system models 
speci cation compiled restricted propositional temporal logic formula de ned semantics 
formula directly livingstone mi components 
modeling formalism enabled naturally model discrete digital systems valve driver analog systems qualitative modeling valve real time software spacecraft attitude controller 
primary lesson experience probabilistic concurrent transition systems provide appropriate formalism building model autonomous systems expressive clean semantics tractable 
qualitative modeling noted simple qualitative representations modeling analog systems 
sacks doyle strongly criticized value qualitative representations arguing ambiguous analyze handful simple systems 
conclude critique comment qualitative equations far general practical 

qualitative reasoning model diagnosis focused variety methods try eliminate computation ambiguous values applying quantitative information 
experience quite contrary 
fact model may lead ambiguous values indicator representation su cient 
case diagnosis simply case values su cient precision rule incorrect diagnoses 
second detail modeling information necessary rule incorrect diagnoses little 
example researchers xerox parc tried develop simplest set copier models su cient diagnoses listed human generated diagnostic repair procedure 
representations models far simpler representations sacks doyle asserted impoverished 
lesson adopted modeling formalism livingstone models analog behaviors extremely simple representation qualitative deviations nominal behavior 
representations adequate livingstone mode identi cation recon guration tasks 
furthermore simplicity models important bene ts 
contrast detailed quantitative models easy acquire acquired early stages design process 
tease exact form quantitative equations worry carefully tuning numerical parameters 
enabled rapidly prototype fault protection system concurrently hardware design 
second qualitative models provide measure robustness design changes modeling inaccuracy 
example hardware designers choose substitute di erent thruster valve produce thrust qualitative model change underlying meaning nominal thrust changes qualitative model terms deviations nominal remains 
third qualitative models allow propositional encodings enable fast inference 
essential providing rapid timely response 
discuss point detail shortly 
essential lesson draw experience extremely simple qualitative models appropriate practical signi cant tasks 
reactivity deduction akey contribution livingstone fact uni es dichotomy ai deduction reactivity 
authors principally argued symbolic reasoning methods planning deduction search unable bridge gap perception action timely fashion :10.1.1.12.1680
example discussing construction reactive systems rapidly handle complexity uncertainty immediacy real situations agre chapman claim proving theorems question 

argument goes right way construct reactive systems compile inference network combinational circuits possibly augmented timers state elements leading example subsumption architecture 
solution adequate types reactive systems particularly remote agents 
equally important correct deduction search play role reactive systems 
fast deduction search consider rst question adequacy thesis 
autonomous system deep space probes antarctic martian habitats power computer networks chemical plants assembly lines need operate interruption long periods harsh environments 
systems rapid correct response anomalous situations essential carrying mission 
responding single anomalous situation hardwired network plausible 
length time autonomous operations desired increases combinations anomalous situations may arise grows exponentially 
constructing reactive network responds correctly cascade failures truly daunting task 
compositional model paradigm embodied livingstone ability identify multiple failures synthesize correct responses directly compact declarative model provides practical solution 
concern search deduction su ciently time consuming responses reactive time scales possible 
livingstone addresses concern combination techniques see details 
formulate mi combinatorial optimization problems mi formulated nding transitions consistent observations formulated cost commands restore current con guration goals 
livingstone follow spirit proposed brooks compiling system simple network 
functional network evaluated livingstone compiles models propositional constraint network 
simple deductive search problem highly tune performance 
motive reducing modelbased tasks highly tuned search algorithm propositional constraints parallels intuitions reduced instruction set computers risc 
livingstone solves combinatorial optimization problems con ict directed best rst search coupled fast propositional inference unit propagation 
empirically con icts dramatically focuses search enabling rapid diagnosis response 
unit propagation incomplete inference procedure su ces applications 
reason causal models feedback loops unit propagation complete complete small number carefully chosen prime implicates 
con ict partial assignment assignment containing con ict guaranteed infeasible 
truth maintenance techniques allow livingstone identify modes recon gure hardware evaluating extremely small set candidate solutions 
potentially exponential search appears major part problem 
requirements response times order hundreds milliseconds slow processor unit propagation signi cant problem 
livingstone performance enhanced order magnitude truth maintenance system called incremental truth maintenance system computes unit propagations time 
variant ofthe traditional logic tms optimizes context switching 
computes truth assignments trajectory states event driven manner 
propagates changes truth assignments state performing full unit propagation state 
livingstone sharp contrast model diagnosis systems fundamentally di erent type tms called assumption tms atms 
concerns ciency lead de kleer introduce atms write traditional proven inadequate 
ine cient time space 
advantage atms ability switch contexts label propagation avoiding linear time cost unit propagation 
comes cost exponential time space pre labeling process 
costs particularly problematic embedded real time systems 
various atms focusing algorithms developed alleviate exponential cost labeling restricting atms label propagation just current context 
precise empirical comparisons model diagnosis systems focused unavailable 
perform limited experiments version livingstone contained tms 
tms livingstone run time standard diagnostic test suite comparable diagnostic algorithms sherlock contain atms 
result led revisit technology received little attention decade 
addition traditional signi cantly improved livingstone performance 
hand performance cases far ideal 
best case update linear number labels change successive states 
unfortunately applying livingstone ds spacecraft models spent signi cant percentage time labels remain constant speci cally average worst case 
worst case real systems hard time requirements 
ers aggressive approach label update merely ideal worst case overhead 
tms resulted order magnitude improvement livingstone performance version tms allowed livingstone meet stringent timing requirements ds 
primary lessons discussion search deduction essential reactive systems 
furthermore search deduction carried reactive time scales 
style truth maintenance systems provide essential tool speeding deductive search 
summary livingstone discrete model controller provides mode identi cation recon guration capability remote agent architecture 
experience livingstone provided technical lessons reactive system tasks carried single model 
concurrent transition systems provide appropriate formalism building modelbased autonomous systems 
strikingly simple qualitative models ective real world tasks 
search deduction necessary reactive system 
search deduction carried reactively 
truth maintenance systems powerful tools speeding search 
lessons technology insertion discussion focused technical issues encountered developing ra 
addition raising technical issues process working real mission real mission schedule provided valuable lessons inserting kind technology operational missions 
key technology insertion lessons human centered operations new classes missions may require systems highly autonomous capabilities important systems support operational modes humans exercise tight control system 
validation testing major barrier increasingly autonomous systems concern test validate perform desired 
architectural design choices spacecraft engineers focus domain model problem solving methods signi cantly help address barrier 
schedule impacts putting autonomous system board spacecraft potentially major impact traditional ight software development schedule require knowledge normally codi ed operations system built encoded system early 
developing rst things rst alleviate problem 
montemerlo provides set lessons summarizing earlier experience technology insertion nasa 
model ensuring coherence mental models large software team inordinately time consuming 
motivated develop research paradigm software programmed uni ed modeling language small team supported automated synthesis techniques collaborative modeling environments 
believe lessons generalize situations complex autonomous systems deployed 
brie discuss lessons subsections 
human centered operations ra prototype designed support scenarios involving extremely autonomous operations human communication impossible 
moved prototyping actual ight ground operators extend ra architecture address broader operational context ra 
key insight gained extreme autonomy necessary certain mission phases essential support human interaction interaction possible 
approach ers key bene ts 
ability draw human expertise especially anomalous conditions simplify design system increase chance mission success 
second designers operators automate capabilities incrementally relying fully autonomous system launch time 
help increase con dence improve operator acceptance 
result extensions ra purposes ra features ra shares long range mission pro le ground operators enable asynchronous ground updates ground operators monitor command spacecraft multiple levels detail simultaneously ground operators provide additional knowledge ra parameter updates model updates diagnostic information interfering activities ra leaving system inconsistent state 
additional forms support human interaction remote agents major area ongoing research 
validation testing strict separation modeling problem solving heuristics ps see section addresses lesson learned ds experience 
ai planning research far concentrated problem solving performance mission critical applications validation problem solving system takes prominent role 
interaction spacecraft engineers question asked sure software advertised avoid unintended behavior 
question applies development aspects mission critical embedded software systems ai 
systems ra promise complete autonomy wider variety complex situations previously possible 
face validation systems harder traditional systems 
fortunately nature ai technology allows inspec tion models facilitates deep understanding behavior system unprecedented traditional software development approaches 
declarative approach dictates clean separation models heuristics 
ensures system mission engineers focus guaranteeing requirements met details reasoning engines manipulate models order produce solutions ciently 
strict separation models heuristics allows non ai specialists inspect model understand knowledge embedded system having experts ai problem solving methods 
believe inspectable representational techniques tools automatically analyze models synthesize problem solving heuristics important research areas widen applicability real world applications 
schedule impacts traditional approach spacecraft development designers build ight software capabilities necessary ensure safety system 
goes wrong spacecraft puts safe state waits help ground operators 
approach enables knowledge system interactions remain ed available heads designers 
enables additional automation put ground system typically ight software development 
ra approach building autonomous system board spacecraft designers codify knowledge earlier stage included board models ra 
need earlier modeling potentially major impact traditional 
concern schedule issues play major role success technology insertion especially new era faster development cycles concurrent engineering 
fortunately wehave model programming approach advantages compensate schedule impacts 
declarative models mirror hardware design models easier maintain face changing hardware details compared traditional software keeps hardware design assumptions implicit 
said remains considerable exibility order perform model development 
key lesson learned respect rst things rst focus rst critical models level necessary meet launch requirements 
progressively re ne models provide increased performance capabilities 
approach reduces tendency detailed models components major spacecraft capabilities unmanaged enables model approach risk management approach ight software project 
model creativity speed design time decreases exponentially size team 
lunar mars path nder excellent examples missions developed small teams inexpensive assembled short time span operated 
di cult sustain pace move far capable missions come closer emulating virtual presence 
example ds ight software team comprised individuals broken teams responsible writing hardware speci cations systems engineering speci cations simulators attitude control codes discrete device drivers exec procedures mir models ps models test scripts systems integration 
signi cant fraction development time devoted preparing documents meeting presentations directed knowledge acquisition scoping model de nition validation 
challenging teams mental model spacecraft behaved 
purpose time consuming meetings bring perspectives alignment 
large team size fact models implicit changing miscommunication inevitable making task inordinately time consuming 
research challenge provide development paradigm set tools allow small team dozen develop equivalent system 
tools allow models levels explicit facilitate development single coherent model able easily track dynamically changing hardware design 
paradigm developing call model 
paradigm aspects ight software programmed models 
automated synthesis techniques models generate simulators discrete ight codes continuous attitude control codes test scripts 
facilitate model synergy models developed uni ed model programming language incorporates best ideas encapsulation classical programming languages 
model building disparate team facilitated distributed collaborative modeling environments 
human assessment ofthe ight software capability systems engineers project management facilitated analysis tools generate review documents models 
extensive reusable model library ultimately allow spacecraft plugged past knowledge 
challenge building remote agent assist establishing virtual presence space proved exciting unique opportunity ai 
characteristics domain require highly reliable autonomous operations long periods time tight deadlines resource constraints concurrent activity tightly coupled subsystems led development remote agent architecture principles model programming board deduction search goal directed closed loop commanding 
resulting architecture integrates constraint temporal planning scheduling robust multi threaded execution model mode identi cation recon guration 
components draw research variety di erent areas ai including constraint propagation search temporal reasoning planning scheduling plan execution reactive languages deduction truth maintenance qualitative reasoning model diagnosis 
jumping meet fast paced challenges rst demonstration ds provided invaluable opportunity ai conventional wisdom 
experience sharp contrast conventional wisdom main lessons generative planning scale solve practical problems search deduction carried reactive control loop 
furthermore embedding important real world problem provides fountain interesting research problems ensures relevance research 
sense important lesson experience 
remote agent signi cant step reaching goal providing full autonomy nasa explorers remains done 
remote agents need adaptive react uncertain environment 
need anticipate imminent failures plan contingencies 
need active information seekers better understand environment state 
eets explorers descend distant planets need collaborate achieve mission goals 
expect nasa missions ones highlighted provide concrete challenges require building capable remote agents 
exciting aptly captured vision autonomy autonomy declare sphere limits 
send spacecraft search horizon accepting directly control relying tell tale 
bob rasmussen cassini cognizant engineer new millennium autonomy team 
acknowledgments contributions members ds remote agent teams orts possible douglas bernard steve chien scott davies greg julia dan dvorak chuck fry ed gamble erann gat hansson jordan hayes bob kanefsky ron sandy krasner james kurien jim larson ina bill millar mohan paul morris nourbakhsh chris plaunt gregg rajan nicolas scott sawyer rob sherwood reid simmons ben smith taylor hans thomas yu wen tung todd michael wagner greg david yan 
acknowledge invaluable contributions guy man gregg bob rasmussen promotion spacecraft autonomy 
john bresina dan clancy greg ari jonsson jim kurien paul morris rajan david smith rich washington provided comments earlier drafts 
philip agre david chapman 
pengi implementation theory activity 
proceedings conference american association arti cial intelligence pages 
abdullah douglas bernard daniel dvorak guy man barney pell thomas 
infusion autonomy technology space missions ds lessons learned 
proceedings ieee aerospace conference 
allen 
maintaining knowledge temporal intervals 
communications acm 
david bell daniel bobrow brian falkenhainer markus fromherz vijay saraswat mark shirley 
copier modeling project 
working papers eighth international workshop qualitative reasoning physical systems 
douglas bernard gregory chuck fry edward gamble jr bob kanefsky james kurien william millar nicola muscettola nayak barney pell rajan nicolas benjamin smith brian williams :10.1.1.48.3347
design remote agent experiment spacecraft autonomy 
proceedings ieee aerospace conference 
avrim blum furst 
fast planning planning graph analysis 
arti cial intelligence 
mark boddy thomas dean 
deliberation scheduling problem solving time constraint environments 
arti cial intelligence 
bonasso kortenkamp whitney 
robot control architecture automate space shuttle operations 
procs 
aaai pages cambridge mass 
aaai aaai press 
rodney brooks 
intelligence representation 
arti cial intelligence 
brown bernard rasmussen 
attitude articulation control cassini spacecraft fault tolerance overview 
th aiaa ieee digital avionics systems conference cambridge ma november 
david chapman 
planning conjunctive goals 
arti cial intelligence 
peter cheeseman bob kanefsky william taylor 
really hard problems 
proceedings ijcai pages 
steve chien helen mortensen 
automating image processing scienti data analysis large image database 
ieee transactions pattern analysis machine intelligence 
richard cook 
mars path nder mission operations faster better cheaper mars 
proceedings ieee aerospace conference 
currie tate 
plan open planning architecture 
art 
int 
sam dallas 
space mission 
proceedings ieee aerospace conference 
randall davis 
diagnostic reasoning structure behavior 
arti cial intelligence 
johan de kleer 
choices backtracking 
proceedings aaai pages 
johan de kleer 
exploiting locality 
proceedings aaai pages 
johan de kleer 
focusing probable diagnoses 
proceedings aaai pages 
reprinted 
johan de kleer alan mackworth raymond reiter 
characterizing diagnoses systems 
arti cial intelligence 
reprinted 
johan de kleer brian williams 
reasoning multiple faults 
proceedings conference american association arti cial intelligence pages 
johan de kleer brian williams 
diagnosing multiple faults 
arti cial intelligence 
reprinted 
johan de kleer brian williams 
diagnosis behavioral modes 
proceedings ijcai pages 
reprinted 
johan de kleer brian williams editors 
arti cial intelligence volume 
elsevier 
dean mcdermott 
temporal data base management 
arti cial intelligence 
dechter meiri pearl 
temporal constraint networks 
art 
int may 
doyle 
truth maintenance system 
arti cial intelligence 
oskar dressler adam farquhar 
putting problem solver back driver seat contextual control atms 
lecture notes arti cial intelligence 
springer verlag 
oskar dressler peter struss 
model diagnosis default diagnosis engine ective control strategies practice 
proceedings ecai 
tara estlin steve chien wang 
argument hybrid htn operator approach planning 
procs 
fourth european conference planning 
richard fikes nils nilsson 
strips new approach application theorem proving problem solving 
arti cial intelligence 
james firby 
adaptive execution complex dynamic worlds 
phd thesis yale university 
kenneth forbus johan de kleer 
focusing atms 
proceedings aaai pages 
erann gat 
esl language supporting robust plan execution embedded autonomous agents 
louise pryor editor procs 
aaai fall symposium plan execution 
aaai press 
erann gat barney pell 
resource management unconstrained plan execution system 
proceedings ieee aerospace conference 
michael george amy lansky 
procedural knowledge 
technical report arti cial intelligence center sri international january 
walter hamscher luca console johan de kleer 
readings model diagnosis 
morgan kaufmann san mateo ca 
walter hamscher 
modeling digital circuits troubleshooting 
arti cial intelligence 
scott hubbard 
lunar developing low cost planetary mission 
proceedings ieee aerospace conference 
ieee 
proceedings ieee aerospace conference 
henry kautz bart selman 
pushing envelope planning propositional logic stochastic search 
proceedings aaai pages 
levesque reiter lesperance lin scherl 
golog logic programming language dynamic domains 
journal logic programming 
zohar manna amir pnueli 
temporal logic reactive concurrent systems speci cation 
springer verlag 
david mcallester 
outlook truth maintenance 
memo mit arti cial intelligence laboratory august 
mcdermott 
reactive plan language 
technical report computer science dept yale university 
david mckay everett gibson jr thomas vali christopher simon xavier claude richard 
search past life mars possible activity martian 
science august 
andrew mishkin jack morrison tam nguyen henry stone brian cooper brian wilcox 
experiences operations autonomy mars path nder 
proceedings ieee aerospace conference 
melvin montemerlo 
ai program nasa lessons learned rst years 
ai magazine winter 
muller 
architecture dynamically interacting agents 
int 
journal intelligent cooperative information systems 
muscettola 
hsts integrating planning scheduling 
mark fox monte zweben editors intelligent scheduling 
morgan kaufmann 
muscettola smith chien fry rajan yan 
onboard planning autonomous spacecraft 
proceedings fourth international symposium arti cial intelligence robotics automation space tokyo japan august 

nicola muscettola paul morris barney pell ben smith 
issues temporal reasoning autonomous control systems 
wooldridge 
nicola muscettola paul morris ioannis 
reformulating temporal plans cient execution 
proc 
sixth int 
conf 
principles knowledge representation reasoning kr 
david musliner ed durfee kang shin 
circa cooperative intelligent real time control architecture 
ieee transactions systems man cybernetics 
nayak brian williams 
fast context switching real time propositional reasoning 
proceedings aaai 
barney pell douglas bernard steve chien erann gat nicola muscettola nayak michael wagner brian williams 
autonomous spacecraft agent prototype 
autonomous robots march 
barney pell gregory christian plaunt richard washington 
remote agent executive capabilities support integrated robotic agents 
alan schultz david kortenkamp editors procs 
aaai spring symp 
integrated robotic architectures palo alto ca 
aaai press 
barney pell ed gamble erann gat ron jim kurien bill millar nayak christian plaunt brian williams 
hybrid procedural deductive executive autonomous spacecraft 
wooldridge 
barney pell erann gat ron nicola muscettola ben smith 
robust periodic planning execution autonomous spacecraft 
procs 
ijcai los altos ca 
ijcai morgan kaufman publishers 
barney pell scott sawyer nicola muscettola ben smith douglas bernard 
mission operations autonomous agent 
proceedings ieee aerospace conference 
raymond reiter 
theory diagnosis rst principles 
arti cial intelligence 
reprinted 
sacks jon doyle 
prolegomena qualitative physics 
computational intelligence 
bart selman david mitchell hector levesque 
generating hard satis ability problems 
arti cial intelligence 
peter struss oskar dressler 
physical negation integrating fault models general diagnostic engine 
proceedings ijcai pages 

ioannis nicola muscettola paul morris 
fast transformation temporal plans cient execution 
procs 
aaai cambridge mass 
aaai aaai press 
weld 
commitment planning 
ai magazine 
daniel weld johan de kleer editors 
readings qualitative reasoning physical systems 
morgan kaufmann publishers san mateo california 
david wilkins 
practical planning 
morgan kaufman san mateo ca 
brian williams nayak 
immobile robots ai new millennium 
ai magazine 
brian williams nayak 
model approach reactive guring systems 
procs 
aaai pages cambridge mass 
aaai aaai press 
wooldridge editor 
proceedings second international conference autonomous agents 
acm press 

