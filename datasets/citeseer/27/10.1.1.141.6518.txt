tree dynamic index multi dimensional objects sellis nick roussopoulos christos faloutsos department computer science university maryland college park md problem indexing multidimensional objects considered 
classification existing methods discussion major issues involved multidimensional data indexing 
second variation guttman trees trees avoids overlapping rectangles intermediate nodes tree introduced 
algorithms searching updating initial packing reorganization structure discussed detail 
provide analytical results indicating trees achieve savings disk accesses compared tree searching files thousands rectangles 
university maryland systems research center 
university maryland institute advanced computer studies umiacs 
research sponsored national science foundation cdr 

recognized past existing database management systems dbmss handle efficiently multi dimensional data boxes polygons points multi dimensional space 
multi dimensional data arise applications name important cartography 
maps stored searched electronically answering efficiently geometric queries 
computer aided design cad 
example vlsi design systems need store thousands rectangles representing electronic gates higher level elements 
computer vision robotics 
rule indexing expert database systems 
proposal rules stored geometric entities multi dimensional space defined database 
problem searching applicable rules reduced geometric intersection problem 
database management systems store dimensional data integer real numbers strings considerable interest developed dbmss store multi dimensional data 
sense dbms single means storing accessing kind information required applications complex traditional business applications 
underlying structures data models query languages sufficient manipulation complex data 
problem extending current data models languages considered various people past 
focus problem deriving efficient access methods multi dimensional objects 
main operations addressed past point queries point space find objects contain region queries region query window find objects intersect course operations augmented additional constraints simple dimensional scalar data 
addition operations insertions deletions modifications objects supported dynamic environment 
purpose describe new structure tree 
section surveys existing indexing methods classifies criteria 
sections describe trees algorithms searching updating packing structure 
section presents preliminary analytical results searching performance tree especially compares corresponding performance trees 
conclude section summarizing contributions giving hints research area multi dimensional data indexing structures 

survey section classify briefly discuss known methods handling multi dimensional objects 
main concern storage retrieval rectangles secondary store disk 
handling complex objects circles polygons reduced handling rectangles finding minimum bounding rectangle mbr object 
discussion shall examine methods handling multidimensional points suggest useful ideas applicable rectangles 

methods multi dimensional points common case multi dimensional data studied past case points 
main idea divide space disjoint sub regions usually way sub region contains points 
usually data stored core capacity disk page number data records page hold 
insertions new points may result partitioning region known split 
split performed introducing hyperplanes partition region disjoint sub regions 
attributes split help classify known methods position position splitting hyperplane predetermined cuts region half exactly grid file 
shall call methods fixed 
opposite data points determine position hyperplane trees trees 
shall call methods adaptable 
nievergelt distinction different terminology call fixed methods methods organize embedding space data drawn call adaptable methods methods organize data stored 
dimensionality split done hyperplane cut trees 
opposite split dimensions hyperplanes cut quad trees oct trees 
locality splitting hyperplane splits affected region regions direction grid file 
shall call methods grid methods 
opposite restrict splitting hyperplane extend solely inside region split 
methods referred methods 
methods usually hierarchical decomposition space requiring tree structure 
grid methods multidimensional array 
usefulness classification twofold creates general framework puts known methods map 
second reason allows design new methods choosing position dimensionality locality split suitable application 
table illustrates known methods attributes classification 
notice methods binary trees quadtrees easily extended secondary storage systems 
reason disk page hold order pointers trees nodes large fanout appropriate trees way nodes usually result expensive page faults 

methods rectangles classification brief discussion methods handling rectangles 
main classes methods methods transform rectangles points space higher dimensionality 
example rectangle sides parallel axes characterized coordinates considered point method position dimensions locality point quad tree adaptable tree adaptable grid file fixed grid tree adaptable table illustration classification 
space 
previously mentioned methods storing points chosen 
rosenberg trees 
hinrichs nievergelt suggested grid file rotation axes 
rotation necessary order avoid nonuniform distribution points lead grid file poor performance 
methods space filling curves map space space 
method suitable paged environment suggested orenstein 
idea transform dimensional objects line segments called transform 
transformation tries preserve distance points close space close transformed space 
improved transformations proposed achieve better clustering nearby points gray codes 
original transform induces ordering points quad tree uses scan pixels dimensional space 
transformation rectangle set line segments corresponding quadrant rectangle completely covers 
methods divide original space appropriate sub regions overlapping disjoint 
regions disjoint methods points mentioned decompose space 
complication handled rectangle may intersect splitting hyperplane 
solution cut offending rectangle pieces tag pieces indicate belong rectangle 
gunther suggested relevant scheme general polygon data convex concave 
suggests splitting hyperplanes arbitrary orientation necessarily parallel axes 
proposed overlapping sub regions guttman trees 
trees extension trees multi dimensional objects points regions 
trees balanced leaf nodes appear level desirable feature guarantee space utilization 
trees built dynamic insertion algorithms structure may provide excessive space overlap dead space nodes result bad performance 
packing technique proposed alleviates problem relatively static databases points 
update intensive spatial databases packing applied single insertion 
environment structure described section trees avoids performance degradation caused overlapping regions 
space time comparison approaches interesting problem currently studying 
step section provide analysis tree structures 

trees section introduce tree discuss algorithms searching updating data structure 

description mentioned trees direct extension trees dimensions 
data structure height balanced tree consists intermediate leaf nodes 
data objects stored leaf nodes intermediate nodes built grouping rectangles lower level 
intermediate node associated rectangle completely encloses rectangles correspond lower level nodes 
shows example set data rectangles corresponding tree built rectangles assuming branching factor 
considering performance tree searching concepts coverage overlap important 
coverage level tree defined total area rectangles associated nodes rectangles organized tree tree rectangles level 
overlap level tree defined total area contained nodes 
obviously efficient tree searching demands overlap coverage minimized 
minimal coverage reduces amount dead space empty space covered nodes 
minimal overlap critical minimal coverage 
search window falling area overlapping nodes level height tree worst case paths leaf nodes followed overlapping nodes slowing search page accesses 
example search window shown subtrees rooted nodes searched return qualifying rectangle 
cost operation page access root additional page accesses check rectangles stored clearly hard control overlap dynamic splits trees efficient search degrades may degenerate search logarithmic linear 
shown zero overlap coverage achievable data points known advance packing technique trees search dramatically improved 
shown zero overlap attainable region data objects 
allow partitions split rectangles zero overlap intermediate node entries achieved 
main idea tree structure 
indicates different grouping rectangles shows corresponding tree 
notice rectangle split contained node second data rectangle lower level overlaps rectangle decompose collection non overlapping sub rectangles union original rectangle 
term data rectangles grouped form tree example bad search window tree built rectangle denotes rectangle minimum bounding rectangle object opposed rectangles correspond intermediate nodes tree 
avoiding overlap achieved expense space increases height tree 
space increase logarithmically distributed tree indirect increment height offset benefit searching multiple shorter paths 
example consider cost search operation window notice root tree node need accessed saving page accesses 
trees thought extension cover non zero area objects points rectangles 
improvement trees reduced coverage nodes level necessarily cover initial space 
compared trees trees exhibit searching performance especially point queries expense extra space 
see section analytical results supporting discussion 
brief discussion motivate trees move formally describe structure 
leaf node form oid rect oid object identifier refer object database 
rect describe bounds data objects 
example dimensional space entry rect form low high low high represents coordinates lower left upper right corner rectangle 
intermediate node form rect pointer lower level node tree rect representation rectangle encloses 
tree properties entry rect intermediate node subtree rooted node pointed contains rectangle covered rect 
exception rectangle leaf node case just overlap rect 
entries rect rect intermediate node overlap rect rect zero 
root children leaf 
leaves level 
assume maximum number entries fit leaf intermediate node 
notice property satisfied tree tree leaf node contains entries intermediate node contains nodes root 
trees satisfy property 
robinson showed experimental results storage utilization trees remains acceptable levels average tree utilization 
trees achieve better space utilization expense search performance believe degradation minimal price pay search improvement obtained trees see section 
interesting comment due fact populating nodes possible result decrease height tree expense costly updates 
parameter problem initial packing algorithm populate tree reorganization techniques 
discuss algorithms searching updating tree 
section presents packing algorithm 

searching searching algorithm similar trees 
idea decompose search space disjoint sub regions descend tree actual data objects leaves 
notice major difference trees sub regions overlap leading expensive searching 
searching algorithm shown 
algorithm search input tree rooted node search window rectangle output data objects overlapping method decompose search space recursively search tree 
search intermediate nodes leaf entry rect check rect overlaps search child rect child node pointed 
search leaf nodes leaf check objects rect return overlap searching algorithm 
insertion inserting new rectangle tree done searching tree adding rectangle leaf nodes 
difference corresponding algorithm trees input rectangle may added leaf node reason may broken sub rectangles existing partitions space 
overflowing nodes split splits propagated parent children nodes 
updated split parent node may introduce space partition affects children nodes 
similar downwards split robinson introduced trees 
discuss problem subsection context node splitting algorithms 
illustrates insertion algorithm 
algorithm insert ir input tree rooted node input rectangle ir output new tree results insertion ir method find ir go add corresponding leaf nodes 
search intermediate nodes leaf entry rect check rect overlaps ir 
insert child ir child node pointed 
insert leaf nodes leaf add ir new rectangle inserted entries re organize tree see section 

deletion insertion algorithm deletion rectangle tree done trees locating rectangle deleted removing leaf nodes 
reason rectangles may removed leaf nodes insertion routine outlined may introduce copies newly inserted rectangle 
shows deletion algorithm 
input tree rooted node input rectangle ir output new tree results deletion ir method find ir remove corresponding leaf nodes 

search intermediate nodes leaf entry rect check rect overlaps ir 
delete child ir child node pointed 
delete leaf nodes leaf remove ir adjust parent rectangle encloses remaining children rectangles 
deletion algorithm clearly lot deletions storage utilization deteriorates significantly 
similar situations trees robinson suggests subtrees periodically re organized achieve better performance 
guttman suggests similar procedure utilized nodes emptied orphaned rectangles re inserted top tree 
brevity give detail algorithm tree re organization 
suggest algorithms plan test near 

node splitting node overflows splitting algorithm needed produce new nodes 
require sub nodes cover mutually disjoint areas search partition vertical horizontal decompose space sub regions 
procedure finding partition similar packing algorithm described detail section 
call procedure partition 
notice contrary tree splitting algorithm downward propagation split may necessary 
example suppose parent node turn parent node node split lower level nodes split 
algorithm delete ir nodes splitting rect rect ki lies completely rect 
add nodes corresponding node sn 
propagate node split upward root create new root children 
pr parent node 
replace pr 
pr entries invoke pr 
partition line recursive node splitting due property tree requires rectangle subtree rooted node rectangle associated covers completely 
nodes intersected partition split recursively 
exception leaf nodes 
objects leaf nodes split just efficiency reasons rectangles leaf pages account downward splits 
discuss additional optimization tactics increase space efficiency tree regarding splitting nodes 
node splitting algorithm illustrated 
algorithm input node leaf intermediate output new tree method find partition node split create new nodes needed propagate split upward downward sn 
find partition partition partition routine pack algorithm see section 
rect rectangle pointer respectively associated node denote sub regions resulting partition 
create rect rect nodes resulting split rect rect si 
sn 
populate new nodes put ni nodes pk lies completely recti 
nodes recti just overlap sub region leaf node put new nodes recursively split children nodes partition 
pk pk node splitting algorithm operations ones needed keep tree valid form 
mentioned significant operation initial packing tree 
especially useful file data rectangles system required build tree top file 
case respect criteria initial set achieved carefully grouping rectangles leaf level 
problem subject section 

packing algorithm section describes partition pack algorithms 
described dimensional space generalization straightforward 
partition divides total space occupied dimensional rectangles line parallel axis cut axis cut 
selection cut criteria nearest neighbors minimal total displacement minimal total space coverage accrued sub regions minimal number rectangle splits 
criteria reduce search reducing coverage dead space 
minimization splits fourth confines height expansion tree 
criteria step find space partitioning groups rectangles way locally improves search 
possible criteria computationally exponential algorithm globally minimizes coverage height gear discussion practical locally optimized suboptimal organization tree 
partition uses sweep routine sweeps space fashion parallel axis 
sweep stops ff fill factor rectangles encountered ff capacity node predefined fraction desired loading factor 
suppose sweep performed axis distance origin fill factor axis reached 
sub region contain rectangles coordinate second sub region contain rest rectangles 
sweep line may cut rectangles split smaller rectangles agree disjointness property trees 
algorithm requires rectangles sorted dimension dimension 
complexity order nlogn 
partition algorithm shown 
routine sweep scan rectangles identify points space partitioning possible 
routine similar described shown 
algorithm partition ff input set rectangles fill factor ff sub region output node containing rectangles subregion set remaining rectangles method decompose total space locally optimal terms search performance sub region remaining sub region pa 
partition required total space partitioned contains equal ff rectangles decomposition done node storing entries created algorithm returns empty 
pa 
compute lowest values ox oy lowest coordinates rectangles 
pa 
sweep dimension cx cut sweep ox ff 
cx cost split direction 
pa 
sweep dimension cy cut sweep oy ff 
cy cost split direction 
pa 
choose partition point select cut gives smallest cx cy divide space distribute rectangles splits 
node stores entries sub region created 
denote set rectangles falling second sub region 
return 
partition algorithm algorithm sweep axis oxy ff input axis sweeping performed point oxy axis sweep starts ff output computed properties sub region cut method sweep oxy compute property ff reached sw 
find ff rectangles starting oxy pick ff rectangles list rectangles sorted input axis 
sw 
evaluate partitions compute total value cost measured property organize rectangles nearest neighbor minimal coverage minimal 
return cost largest coordinate ff rectangles 
sweep algorithm step sw evaluates partition criteria mentioned section 
example criterion cost total area covered rectangles returned step sw criterion cost number input rectangles split sweep line 
pack algorithm basically adapted accept grouping selection criteria discussed earlier section 
determines packed populated tree 
packed faster search 
database relatively static highly desirable pack tree capacity 
packing algorithm shown 
algorithm pack ff input set rectangles organized ff tree output tree method recursively pack entries level tree 
packing needed equal ff build root tree return 

initialization set empty 
holds set level rectangles packed 

partition space partition ff partitioning non leaf nodes rectangles split chosen partition recursively propagate split downward necessary propagate changes upward 
append 
continue step empty 

recursively pack intermediate nodes return pack ff pack algorithm notice step expensive due recursive splits see algorithm section 
strong incentive fourth property mentioned section minimal number splits basic criterion partitions 
summary packing algorithm attempts set tree search performance 
matter experimental discover mentioned criteria space partitioning best 
preliminary done analyzing search performance trees 
section briefly presents results 

analysis approach simplifies analysis transform objects points space higher dimensionality 
rectangle aligned axes coordinates uniquely determine coordinates lower left corners 
spaces impossible illustrate examine segments line space rectangles plane space transform segments points space 
segment uniquely determined coordinates start points 
obtaining formulas results line segments step analysis rectangles objects higher dimensionality 
applications line segments orenstein suggests transform map multidimensional space space 
rectangle mapped set line segments point multi dimensional space directly correspond point region queries space 
point density number segments contain 
analysis assumed sets segments set segments size set segments size 
segments set uniformly distributed entire space 
due uniformity assumption point space 
allowing size enables analysis account realistic distributions objects size 
shown analytical results stand case sets segments 
give indicative results search performance trees 
show number disk accesses required search tree tree case point query 
shows disk accesses required searching tree corresponding tree index segments total density 
shows disk accesses required function large segment density large segments account total number segments 
illustrates number disk accesses function number small segments fixed small segment density 
disk accesses trees large segment density trees disk accesses trees trees thousands small segments disk accesses size segments point query function function figures show clearly problem trees handling small segments just lengthy ones 
large density implies long segments 
situations tree may require twice page accesses required tree 
notice performance tree immune changes distribution segment sizes 
second set figures figures illustrate number disk accesses needed performing segment query tree 
query segment chosen order small segments 
decision fact segment queries performed isolate segments space zooming 
graphs show trees suffer cases lengthy segments 
performance improvements savings disk page accesses achieved 
course number large segments approaches total number segments trees lose lengthy segments cause lot splits sub segments 
typical distributions characteristic 
contrary lengthy segments compared small ones vlsi design 
concludes presentation analytical results obtained 
detailed description reader referred 
currently working experimental verification results 
disk accesses trees large segment density trees disk accesses trees trees thousands small segments disk accesses size segments segment query function function 
summary contributions summarized follows variation trees trees introduced 
algorithms needed search update pack structure discussed depth 
main advantage trees compared trees improved search performance especially case point queries savings disk accesses 
structure behaves exactly tree case data points non zero area objects rectangles 
significant sense trees shown experimental results robinson obtained efficient indexing point data 
single structure tree database system order index kind geometric data 
provide initial analytical results comparing search performance trees 
results obtained direction 
results comparison agree completely intuition trees suffer case large data objects force lot forking search 
trees handle cases easily split large data objects smaller ones 
area includes tasks experimentation simulation verify analytical results 
extension analysis rectangles plane eventually spaces arbitrary dimensionality 
design experimentation alternative methods partitioning node compacting tree 
comparison trees methods handling multi dimensional objects 
acknowledgments survey section owes hanan samet 
happy acknowledge help examples book ch 
constructive discussion 

bentley multidimensional binary search trees associative searching cacm pp 
sept 
chang fu picture query languages pictorial data base systems ieee computer november 
database structure manipulation capabilities picture database management system ieee trans 
pattern analysis machine intelligence pami pp 
july 
faloutsos gray codes partial match range queries ieee trans 
software engineering 
appear faloutsos sellis roussopoulos object oriented access methods spatial objects algorithms analysis 
preparation faloutsos sellis roussopoulos analysis object oriented spatial access methods proc 
acm sigmod may 
finkel bentley quadtrees data structure retrieval composite keys acta informatica pp 

gunther cell tree index geometric data memorandum 
ucb erl univ california berkeley dec 
guttman new features relational database systems support cad applications phd thesis university california berkeley june 
guttman trees dynamic index structure spatial searching proc 
acm sigmod pp 
june 
hinrichs nievergelt grid file data structure support proximity queries spatial objects tech 
report institut fur informatik eth zurich july 
dimensional binary search trees means speed associative searches design rule verification integrated circuits journal automation fault tolerant computing pp 
july 
nievergelt hinterberger sevcik grid file adaptable symmetric multikey file structure acm tods pp 
march 
orenstein spatial query processing object oriented database system proc 
acm sigmod pp 
may 
ousterhout mayo scott taylor magic vlsi layout system st design automation conference pp 
june 
preparata shamos computational geometry springer verlag new york 
robinson tree search structure large multidimensional dynamic indexes proc 
acm sigmod pp 

rosenberg geographical data structures compared study data structures supporting region queries ieee trans 
computer aided design pp 
jan 
roussopoulos direct spatial search pictorial databases packed trees proc 
acm sigmod may 
samet quadtrees related hierarchical data structures computer graphics image processing 
preparation stonebraker rubenstein guttman application data types indices cad data bases tech 
report ucb erl electronics research laboratory university california berkeley january 
stonebraker sellis hanson rule indexing implementations database systems proceedings international conference expert database systems april 
