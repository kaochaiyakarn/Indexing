search replication unstructured peer peer networks qin lv pei cao cohen kai li scott shenker decentralized unstructured peer peer networks gnutella attractive certain require centralized directories precise control network topologies data placement 
flooding query algorithm gnutella scale individual query gener ates large amount traffic grows system quickly overwhelmed query induced load 
explores simulation various alternatives gnutella query algorithm data network topology 
propose query algorithm multiple random walks resolves queries quickly gnutella flooding method reducing network traffic orders mag cases 
distributed replication strategy yields close optimal performance 
find various network topologies consider uniform random graphs yield 
computer science community accustomed internet continuing rapid growth observers explosive increase peer peer network usage 
months napster system spread widely measurement data applications having significant rapidly growing impact internet traffic 
important study performance scalability networks 
currently different architectures networks centralized napster similar systems constantly updated directory hosted central locations napster web site 
nodes network issue queries central directory server find nodes hold desired files 
napster extremely successful legal troubles itis clear centralized approaches scale poorly single points failure 
decentralized structured systems central directory server decentralized significant amount structure 
structure mean network topology set connections members tightly controlled files placed random specified locations subsequent queries easier satisfy 
systems loose structure placement files hints freenet network example system 
systems tight structure structure network placement files extremely precise subsequent queries satisfied efficiently 
growing called lookup systems support hash table interface see :10.1.1.110.5867:10.1.1.111.1818:10.1.1.140.3129:10.1.1.105.3673
tightly structured designs quite prevalent research literature completely current network 
isn clear designs extremely transient population nodes characteristic napster community 
decentralized unstructured systems centralized directory control network topology file placement 
gnutella example designs :10.1.1.123.8939
network formed nodes joining network simple loose rules example described 
resultant topology certain properties placement files topology structured designs 
find file node queries neighbors 
typical query method flooding query neighbors certain radius 
designs extremely resilient nodes entering leaving system 
current search mechanisms extremely unscalable generating large loads network participants 
focus gnutella decentralized unstructured systems 
actively large community internet users systems subject serious research empirical studies 
goal study scalable alternatives existing gnutella algorithms focusing replication aspects 
quantify poor scaling properties flooding search algorithms 
propose alternative walker random walk algorithm greatly reduces load generated 
show active replication files may stored arbitrary nodes produces lower query load non active node replication file replicated nodes requesting file 
file replicated path requester destination yields close optimal replication distribution 
show unstructured networks power law random graphs uniform random graphs system adopt graph building algorithms reduce likelihood high degree nodes 
sections 
section describe model unstructured systems 
section discuss limitations flooding approach currently gnutella section propose evaluate various alternative approaches 
discuss replication strategies section evaluate approaches section 
discuss related section conclude section 
modeling evaluation methodology impossible model dynamics system internet 
simple models behavior different algorithms verify behavior algorithms slightly realistic simulations 
looking quantitative results qualitative ones omit modeling simulation 
abstractions look aspects system network topology query distribution replication distribution 
topology mean graph formed nodes network instant 
simplicity assume graph change simulation algorithms 
query distribution mean frequency lookups files 
assume distribution fixed 
replication distribution mean distribution percentage nodes particular file 
study search algorithms assume static replication distributions 
assumption fixed network topology fixed query distributions obviously gross simplifications purpose study assumes time complete search short compared time change network topology change query distribution results obtained settings performance real systems 
network topologies study ffl power law random graph node random graph 
node degrees follow power law distribution ranks nodes connected connected th node iff neighbors constant 
real life networks topologies power law random graphs 
particular graph ff 
graph generated gt itm topology generator 
links power law random graph nodes links random graph nodes random graph links gnutella graph nodes gnutella graph links dimensional grid graph nodes grid graph distribution node degrees network topology graphs 
note log scale gnutella linear scale random grid 
ffl normal random graph random node random graph generated modified version gt generator 
average degree nodes graph 
distribution shown 
ffl gnutella graph gnutella snapshot gnutella network august 
graph nodes 
node degrees roughly follow segment power law distribution shown 
ffl dimensional grid grid node dimension grid 
choose simple graph purposes 
node degree distributions graphs shown 
key statistics graphs table 
nodes total edges avg 
node degree std 
dev 
max degree median random gnutella grid table key statistics network topologies 
query distribution assume objects interest 
terms file object interchangeably 
investigate distributions ffl uniform objects equally popular 
words probability object searched anode network number objects interest 
ffl zipf object popularity follows zipf distribution 
ranks objects popular tothe popular probability th ranked object searched node proportional iff studies shown napster gnutella web queries tend follow zipf distributions 
words query distributions nx qi orm qi zipf gamma qi gamma ff replication distribution simulate ways 
part study focus assume static replication object randomly placed ri nodes ri 
study unstructured networks object replicated ri nodes ri nodes choosen graph 
second part study study different replication strategies impact search efficiency simulate dynamic replication objects 
static replication distributions ffl uniform objects replicated roughly number nodes 
simulation assume object replicated nodes 
ffl proportional replication ratio object proportional query probability object 
assumes nodes requesting object store object replication distribution usually proportional query distribution 
ffl square root replication ratio object proportional square root query probability qi 
square root distribution discussed section 
words replication distributions nx ri theta orm ri ri qi square gamma root ri average replication ratio 
clearly combinations query distribution replication distribution uniform uniform zipf proportional zipf square root 
metrics performance issues real systems extremely complicated 
addition issues load network load network participants delays getting positive answers host criteria success rate search bandwidth selected provider nodes fairness requester provider impossible criteria evaluating search replication algorithms 
focus efficiency aspects algorithms solely simple metrics networks 
metrics simple reflect fundamental properties 
ffl user aspects pr success probability success finding queried object search terminates 
dif ferent algorithms different criteria terminating search lead different probability success various replication distributions 
hops delay finding object measured number hops 
model actual just measure number hops successful search message travels replies originator 
ffl load aspects avg 
msgs node overhead algorithm measured average number search messages network process 
motivation metrics systems notable overhead tend processing load network imposes participant 
load usually interrupt processing message processing directly proportional number messages node process 
nodes visited number network participants query search messages travel 
thisis indirect measure impact query generates network peak msgs identify hot spots network calculate number messages process set queries 
ffl aggregate performance measures query measures calculate performance number performance query convoluted query probability 
object network settings performance measure sum qi lambda 
simulation methodology search method run set simulations combination query distribution distribution report results averaged set simulations 
simulations number objects average replication ratio parameter ff zipf distribution 
set simulations select topology file 
generate sets replica place ments replicas placed randomly network distribution replicas follows specified replication 
replica placement generate different queries specified 
queries simulate searching process designated search method 
run simulation query independent queries object replication fixed running queries concurrently running separately summing results 
statistics collected theta queries 
set simulations 
results different queries 
calculate results way pr success number successful queries divided total number queries generated average number hops taken successful query average number messages generated pr success ttl flooding pr success vs ttl avg msgs node ttl flooding avg msgs node vs ttl probability success node message overhead vary ttl setting 
query divided total number nodes network average number nodes visited received message query average duplication percentage msgs nodes msgs maximal sum messages received single node set divided total number queries set simulation 
averages tables figures 
due space limitation standard deviations associated averages point standard deviation data change 
plan data web site 
final note abstractions metrics stress omit lot issues including node coming going network message delays network actual load network node processing messages models help understand various search replication algorithms 
limitations flooding major load networks load individual network participants 
typically par pcs home office normal entertainment 
pc handle network interrupts joins network user forced take pc network get real done 
turn limits size usefulness network 
unfortunately simple flooding style search gnutella exacerbates problem 
flooding 
difficult choose appropriate time live ttl terminate flood 
typically query ttl assigned 
time propagated node node ttl reduced 
process continues ttl reaches 
node wants find object know widely replicated object picking right ttl tricky 
ttl high node unnecessarily burdens network 
ttl low node find object copy exists 
illustrate problem shows probability success average node message overhead ttl increases 
search object replicated nodes means average nodes need visited find object 
see figures different ttls reach coverage different network topologies 
unfortunately practice replication ratio object unknown users set ttls high ensure success query 
msgs ttl flooding duplicated msgs vs ttl nodes visited ttl flooding nodes visited vs ttl ttl increases percentage query messages duplicates increases node neighbors forwarding messages 
second duplicate messages introduced flooding particularly high connectivity graphs 
messages mean multiple copies query sent node multiple neighbors 
search duplication detection built requiring node detect discard duplicate queries duplicate queries pure overhead flooding 
incur extra network interrupt processing nodes receiving contribute increased chance finding object 
problem worsens increases 
shows percentage duplicate messages number nodes visited ttl increases see graphs ttl increases number unique nodes visited increases time percentage duplicate messages increases 
words flooding possible number nodes covered search increasing duplication search 
limitations mean flooding incurs considerable message processing overhead query load node network expands query rate increases point node loaded leave network 
researchers noted limitations flooding 
simulations show power law random graphs gnutella style graphs particularly bad 
presence highly connected nodes mean duplication ratios higher random graph nodes neighbors overlap 
fact flooding random graph topology true random graph duplication ratio node query fraction nodes visited far long fraction small 
random graph better load distribution nodes 
random graph maximum node logarithmic total number nodes search visits 
contrast high degree nodes gnutella graphs higher load nodes 
due space constraints omit peak messages 
finding better search methods flooding inherent limitations try find scalable search methods unstructured networks 
try aimed addressing ttl selection problem 
stopping ttl replication ratio expanding ring stopping ttl vs replication ratio avg msgs node replication ratio expanding ring avg msgs node vs replication ratio stopping ttl node message overhead expanding ring searching objects replication ratio 
expanding ring tempted solve ttl selection problem asking nodes check original forwarding query neighbors 
way flood called object 
approach lead message implosion requester node 
adopt approach 
successive floods increasing ttls 
node starts flood small ttl waits see ifthe search successful 
node stops 
node increases ttl starts flood 
process repeats object 
expect method perform particularly hot replicated widely cold objects case practice 
call method expanding ring 
understand expanding ring works measure average stopping ttl searches increasing replication ratios 
simulations expanding ring starts expands time 
shows results various topologies 
see expanding ring successfully ttl object replication ratio increases 
searches objects low replication ratio larger searches ttl object replication 
adaptivity necessarily translate lower message overhead successive lead messages 
understand message overhead expanding ring record average number messages node process 
results shown 
comparing message flooding expanding ring see objects replicated nodes flooding uses best ttl network topology expanding ring node 
understand impact expanding rings network simulate completion queries networks different combinations query distribution replication distribution 
results shown expanding ring column tables 
tables comparison various search methods network topologies 
results show despite successive retries expanding ring reduces message overhead regular flooding fixed ttl 
savings obtained query replication distributions uniform replication distributions 
improvements pronounced gnutella graphs graph partly high degree nodes graph reduce incremental retries expanding ring 
expanding ring achieves savings expense slight increase delays find object 
simulate actual network latency number hops estimate latency tables include row distribution model queries hot objects queries query replication metrics flood ring walk state flood ring walk state hops uniform msgs node uniform nodes visited peak msgs hops zipf msgs node proportional nodes visited peak msgs hops zipf msgs node square root nodes visited peak msgs table simulation results search methods random graph 
set columns results queries tothe top hottest objects second set columns results queries 
flood flooding ttl 
ring expanding ring 
walk walker random walk checking 
state walker random walk state keeping 
average number hops indication user experienced delay 
see random average hops increases flooding expanding ring believe tolerable users 
expanding ring solves ttl selection problem address message duplication flooding 
inspection simulation results shows duplication contributes significantly message overhead particularly gnutella graphs 
reduce message duplication try random walk 
random walks random walk known technique 
search object random walk node chooses sends query 
neighbor turns chooses neighbors randomly forwards query 
process continues object 
query copy network call copy walker 
initial attempt standard random walk search method 
expected random walk message overhead significantly order magnitude compared expanding ring network topologies 
efficiency comes order magnitude increase user perceived delay 
investigations show key reducing delay reach desired number nodes quickly 
decide increase number walkers random walk 
just sending query message requesting node sends query messages query message takes 
expectation walkers steps reach number nodes walker lambda simulations confirm 
walkers expect cut delay bya factor multiple walker random walks require mechanism terminate walks experimented ttl checking 
ttl means similar flooding random walk terminates certain distribution model queries hot objects queries query replication metrics flood ring walk state flood ring walk state hops uniform msgs node uniform nodes visited peak msgs hops zipf msgs node proportional nodes visited peak msgs hops zipf msgs node square root nodes visited peak msgs table simulation results search methods power law random graph 
legends asin table 
distribution model queries hot objects queries query replication metrics flood ring walk state flood ring walk state hops uniform msgs node uniform nodes visited peak msgs hops zipf msgs node proportional nodes visited peak msgs hops zipf msgs node square root nodes visited peak msgs table simulation results search methods gnutella graph 
legends table 
distribution model queries hot objects queries query replication metrics flood ring walk state flood ring walk state hops uniform msgs node uniform nodes visited peak msgs hops zipf msgs node proportional nodes visited peak msgs hops zipf msgs node square root nodes visited peak msgs table simulation results search methods grid graph 
legends table 
number hops 
checking means walker periodically checks original requester walking tothe node course checking done node forwarding walker 
checking method uses ttl ttl large mainly prevent loops 
simulations show checking right approach terminating searches random walks 
runs ttl selection issue flooding 
fixed number walkers typically having walkers check back requester lead message implosion node 
course checking overhead check requires message exchange node requester node 
experiments show checking fourth step way strikes overhead checking messages benefits checking 
experimented different number walkers 
walkers find objects faster loads 
number walkers big increasing yield little reduction number hops significantly increases message traffic 
usually walkers give results 
walkers simulations 
due space limitations omit results 
tables compare discussed search methods combinations query replication dis tributions network topologies 
sets columns table set results queries th percentile hottest objects second set results queries 
results show walker random walk reduces message overhead orders magnitude forall queries network topologies expense slight increase number hops increasing 
walker random walk generally outperforms expanding ring particularly graphs 
studied improvement approach asking node keep states 
search walkers tagged unique id id node remembers neighbors queries id new query id arrives node forwards different neighbor randomly chosen 
state keeping accelerates walks walkers cover thesame route visit nodes 
simulation results shown tables confirm improvement 
compared random walks state keeping random walk state keeping shows biggest random grid graphs reducing message overhead reducing number hops 
improvements gnutella graphs small 
depending state keeping network decide separately state keeping worthwhile 
principles scalable searches unstructured networks results show walker random walk scalable search method flooding 
important understanding gained exercise 
summarize 
key scalable searches unstructured network cover right number nodes quickly little overhead possible 
unstructured network way find objects visit nodes statistically speaking nodes object 
reaching required node coverage pay attention ffl adaptive termination important 
ttl mechanism 
adaptive dynamic termi nation mechanism avoid implosion problem requester node 
checking method described example adaptive termination 
ffl message duplication minimized 
query visit node just 
wasteful terms message overhead 
ffl granularity coverage small 
additional step search significantly crease number nodes visited 
fundamental difference flooding random walk 
flooding additional step increase number nodes visited random walk additional step increases number nodes visited constant 
search requires certain number nodes visited extra nodes covered flooding merely increase node load 
constraints search algorithm reduce latency possible 
done exhaustive study search algorithms claim walker random walk 
hope principles aid understanding search optimal methods 
replication theory study previous section examined search object assuming replicated locations network 
certain systems gnutella rigid assumptions replications objects happen system nodes request object copies object 
freenet allow proactive replications objects object may replicated node node requested object 
systems allow proactive replications study question copies object search overhead object minimized assuming total amount storage objects network fixed 
answers question implications non proactive replication systems information object location proactively replicated expedite searches 
formulate question precisely simple model address question theoretically model extensively analyzed 
section simulations analyze question 
consider simple model sites objects 
object replicated ri random distinct sites set pi ri 
assume objects requested relative rates qi setting qi 
convenience assume query replication strategies searches go copy 
cases dealt consistent bit 
search consists randomly probing sites desired object 
probability object th probe ri rin gamma rin gamma average search size ai merely fraction sites replicas object ai nr interested average search size pi pi average search size message overhead efficient searches 
limit ri clearly optimal strategy replicate setting ri searches trivial 
assume average number site ae rn fixed question allocate replicas sites 
simplest replication strategy create number replicas object ri rm call uniform replication strategy 
case average search size qi mae mae independent query distribution 
clear uniformly replicating objects frequently queried 
natural policy results having querying sites cache results query replicate proportional querying rate ri rqi 
reduce search sizes 
quick calculation reveals average remains qi rqi ae proportional uniform replication strategies yield exactly average search size size independent query distribution 
important metric captures load balancing ability replication strategy utilization rate ui rate requests replica object serves random probing search process implies object utilization rate 
note average utilization objects pi fixed replication strategies 
maximum utilization maxi ui 
distributions average search sizes utilization rates object quite different uni form proportional strategies 
uniform replication objects average search size replicas utilization rates proportional query rates 
proportional replication achieves perfect load balancing replicas having utilization rate average search sizes vary popular objects having smaller average search sizes popular ones 
objects query rates greater average greater better proportional replication objects better uniform replication 
interestingly weighted average search sizes objects balances unchanged 
square root replication uniform proportional average search size natural ques tion optimal way allocate replicas average search size minimized 
simple calculation see reveals square root replication optimal minimized ri rp average search size ae pq table lists properties replication strategies 
square root replication average utilization rate vary object variance utilization considerably smaller uniform variance average search size considerably smaller proportional 
ri ai ri ui rqi ae gamma ae gamma ae gamma gamma square root ae gamma pi pj ae gamma pj pj table comparing replication strategies uniform proportional square root 
specific query distributions consider query distributions delta delta delta qm truncated geometric pareto distributions compute average search sizes distributions 
truncated geometric distribution gm defined qi nx gamma gamma normalization factor 
square root replication ri mx gamma gamma mx truncated pareto distribution rm ff truncation objects pareto distribution shape parameter ff 
qi gamma ff gamma bff normalization factor mx gamma ss gamma gamma gamma gamma ln sufficiently large approximate ss ln gamma gamma gamma square root replication obtain ri gamma ff gamma ff average search size ff bff ss ffm gamma ff gamma ff ff ln ff ff ff gamma ff object relative allocation 
trunc pareto alpha root proportional ass object average search size 
trunc pareto alpha root proportional utilization object utilization rate 
trunc pareto alpha root proportional relative allocation ri average search size utilization rate ui uniform proportional square root strategies truncated pareto distribution ff able compute gain factor square root proportional replication 
geometric distribution pareto distribution ff optimal size constant 
gain factor theta 
gain factor theta mff pareto ff ln ff 
helps visualize different properties replication strategies 
uniform square root allocate popular objects fair share popular objects fair share replicas square root lesser extent 
variance average search sizes different square root considerably smaller proportional 
maximum utilization rate square root lower uniform larger proportional provides optimal load balancing 
thesame patterns occur values ff gaps grow skew larger objects larger larger values shape parameter value ff 
achieving square root replication uniform proportional strategies significantly suboptimal respect average query advantage easy implement distributed fashion 
uniform replication merely calls fixed number copies object proportional replication calls fixed number requested object query 
question achieve optimal square root replication strategy distributed algorithm 
assume query keeps track search size probes took finding object assume time query finished object copied number sites proportional number probes 
means average th object replicated ff nri times time query ff arbitrary constant 
number copies ri roughly described ri nr ri time derivative ri 
look ratio objects ask logarithm quantity changes find setting zi ln ffn qjr gamma qi square root replication ri fixed point equation allocation achieved ratios don change constant total number copies changes 
heuristic calculation suggests replicating proportional number sites probed square root replication 
section simulate number replication policies evaluate performance 
analysis implicit assumptions process governing deletion replicas 
inparticular mentioned schemes creation new replicas proportional replication scheme query generates fixed number replicas square root replication scheme query generates numberof replicas proportional search size 
analysis schemes assumes replicas disappear time new replicas created 
steady state achieved creation rate equals deletion rate 
achieve respective fixed points lifetimes replicas independent object identity query rate 
examples deletion processes independence assigning fixed lifetimes fixed distribution replica subject replicas site fifo replacement perform random deletions 
interesting examples deletion processes independence usage replacement policies lru frequently lfu 
policies impede square root scheme recall square root replication different utilization different objects scheme different fixed point lru lfu 
fixedpoint proportional replication replicas utilization rate fixed point lru lfu variance replica lifetime increase stability decrease 
note freenet replication algorithm replication strategies studied attempt group objects certain regions network 
words produce correlation routing object locations structure network 
evaluation replication methods observe replication strategies easily implementable 
owner replication search successful object stored requester node 
path replication search succeeds object stored nodes path requester node provider node owner replication systems gnutella 
path replication systems freenet 
analysis previous section suggests square root replication distribution needed minimize search traffic object replicated number nodes proportional number search probes 
system uses walker random walk search algorithm average numberof nodes requester node provider node total nodes visited 
path replication result square root distribution 
aspect path replication studied previous section tends replicate nodes topologically path 
understand impacts search traffic study third replication algorithm random replication 
random replication search succeeds number nodes path requester provider randomly pick walkers visited replicate object 
random replication harder implement path replication highlights topological impact path replication 
design set dynamic simulations study replication strategies owner replication path replica tion random replication 
look perform random graph network topology 
simulation starts placing distinct objects randomly network 
query generate queries poisson process average generating rate queries second 
query distribution objects follows zipf distribution ff value 
ff value 
run simulations ff ff 
results similar 
foreach query node doesn requested object chosen randomly start query 
search method walker random walk state keeping checking 
node store objects simulations 
time node wants store storage space full object randomly chosen tossed random deletion 
replication ratio normalized object rank replication distribution path replication real root replication ratio normalized object rank replication distribution random replication real root distribution replication ratios path replication random replication 
owner replication path replication random msgs node factor improvement table message traffic different replication strategies 
snapshots taken query chunks 
allow warming process run seconds generate queries generating rate look part simulation 
replication strategy interested questions ffl kind replication ratio distribution strategy generate 
ffl average number messages node system strategy 
ffl distribution number hops system strategy 
shows log log plots distribution replication ratios path replication random repli cation 
plot distribution square root query distribution 
confirming predictions results show clearly path replication random replication generates replication quite close square root query ratios 
due space constraints omit graph owner replication say matches proportional distribution closely 
table lists average number messages node process simulation 
result benefit square root distribution reducing search traffic 
path replication random replication reduces message traffic factor 
proactive replication path improve scalability systems significantly 
traffic reduction comes reducing number hops takes find object 
cumulative hop distribution queries replication strategies 
path replication random replication clearly outperform owner replication example percentage queries finish owner replication results show random replication improves path replication 
topological replicating path hurt performance somewhat 
implementation overly complex system adopt random replication path replication 
queries finished hops dynamic simulation hop distribution owner replication random replication cumulative distribution number hops replication strategies 
systems want store object nodes requested ways search traffic 
think answer 
systems replicate information object stored certain nodes path random replication searches object shortened node randomly delete hint runs space hold 
demonstrated simulation simple step improve scalability system 
related mentioned different kinds networks 
highly structured chord past tapestry precise placement algorithms searching efficient 
systems widely deployed ability operate extremely unreliable demonstrated 
deal partial match queries searching objects titles contain specific words 
loosely structured networks 
freenet examples rapidly growing list 
systems focus trust reputation management security issues peer peer systems 
freenet focus storage aspects system 
loosely structured networks directories placement hints improve scalability search process 
centralized directories don scale don handle partial match queries 
unstructured systems gnutella handle partial match queries main question performance scalable focused 
adopting random walk search method performance search terms load network improved orders magnitude 
network power law degree distribution resemble mesh random graphs networks produce results 
interesting adamic studies random walk search strategies power law networks finds modifying walkers seek high degree nodes search performance greatly increased 
strategies greatly reduce scalability search algorithm focus subject queries sent high degree nodes making bear burden query load network 
random walk search style freenet 
walk guided node uses hints choose node forward query 
uses walker 
comparison focus unstructured network hints available wealth information gnutella web sites www openp com gnutella wego com aware number published research studies gnutella network 
example phenomenon examined topology query distribution studied 
ofthese papers address issue better search algorithms replication algorithms 
reports simulation modeling studies search algorithms replication strategies unstructured peer peer networks 
simulation studies learned scalable search algorithm designs networks con sider properties adaptive termination minimizing message duplication small granularity coverage 
flooding algorithm gnutella satisfy properties 
show generates network traffic scale 
expanding ring approach improves flooding algorithm adaptive termination mechanism 
find data reasonably quickly reducing network traffic substantially order magnitude 
walker random walk checking approach find data quickly reducing traffic order magnitude reduces granularity coverage fixed number random walkers 
study replication strategies show fixed average number replicas node square root replica tion distribution theoretically optimal terms minimizing search traffic 
simulations validated theoretical analysis 
simulated owner path random replications walker random walk keeping 
path random replications lead square root replication distribution message traffic times owner replication approach 
learned simulation studies uniformly random graphs better searching 
high degree nodes power law random graph current gnutella network bear higher load average introduce duplication overhead searches 
results imply better form random network topology graph building algorithms peer peer systems 
study step understanding properties scalable search algorithms replication strate gies network topologies decentralized unstructured peer peer networks 
open issues study 
useful model various search algorithms certain network topologies study 
walker random walk checking state keeping lot rooms improve 
large gap algorithm optimal case terms minimum number hops traffic 
adamic lukose 
search power law networks 
press phys rev vol 
pages 
adar bernardo huberman 
free riding gnutella 
monday www firstmonday dk issues issue adar index html october 
almeida bestavros crovella de oliveira :10.1.1.15.8793
characterizing locality www 
inproceedings international conference parallel distributed information systems pdis 
anonymous 
removed double blind reviewing 
august 
anonymous 
removed double blind reviewing 

clip com 
gnutella protocol specification 
www limewire com developer gnutella protocol pdf 
clip com 
gnutella bandwidth barrier 
preprint www clip com gnutella html november 
open source community 
free network project rewiring internet 
freenet sourceforge net 
open source community :10.1.1.123.8939
gnutella 
gnutella wego com 
roger dingledine michael freedman david molnar 
free haven project distributed service 
proceedings workshop design issues anonymity unobservability lncs july 
dan gallagher wilkerson 
network performance statistics university south carolina 
eddie csd sc edu october 
napster napster homepage 
www napster com 
jovanovic fred kenneth berman 
scalability issues large peer case study gnutella 
technical report www uc edu research html university cincinnati 
jim mccoy 
mojo nation 
www net 
plonka 
uw madison napster traffic measurement 
net doit wisc edu data napster march 
sylvia ratnasamy paul francis mark handley scott shenker 
scalable content addressable network 
proceedings sigcomm august 
jordan ritter 
gnutella scale 
really 
preprint www com jpr doc gnutella html 
rowstron druschel :10.1.1.140.3129
storage management caching past large scale persistent peer utility 
proceedings sosp 
sripanidkulchai 
popularity gnutella queries implications scalability 
reilly openp com february 
ion stoica robert morris david karger frans kaashoek hari balakrishnan :10.1.1.110.5867
chord scalable peer peer lookup service internet applications 
proceedings sigcomm august 
thomas ellen zegura 
gt itm georgia tech internetwork topology models 
www cc gatech edu fac ellen zegura graphs html 
kelly 
gnutella alive changing fast 
preprint www openp com pub html january 
ben zhao john kubiatowicz anthony joseph :10.1.1.105.3673
tapestry infrastructure fault tolerant wide routing 
technical report ucb csd university california berkeley computer science department 

