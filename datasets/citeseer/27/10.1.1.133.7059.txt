annals mathematics computing teleinformatics vol pp agent communication publish subscribe genre architecture mobility scalability applications amir zaslavsky seng wai school computer science software engineering monash university east vic australia zaslavsky monash edu au mobile agent communication multi agent communities research challenge 
analyze discuss suitability current technologies interconnecting heterogeneous agent platforms multi agent systems propose publish subscribe words event notification mechanism efficient effective complementary solution software mobile agent communication 
advocate event communication genre exchanging disseminating large volumes small lightweight messages 
discuss area building content context messaging agent communication ability refer send messages collection agents current context knowing precise identities agents 
investigate feasibility paradigm offer perspective agent communication large scale distributed multi agent systems 
index terms mobile agents publish subscribe communication context messaging multi agent systems developments distributed systems characterized rapid progress sensor technology advances mobile computing including development new communication standards ad hoc network capabilities increase complexity network expectations users better service available information 
envision pervasive networks embedded numerous computing devices different capabilities limitations goals involving heterogeneous software platforms technologies servicing different organizations individuals 
environments need flexible agile fault tolerant face frequent disconnections due unreliable wireless infrastructure appropriate issn technologies computing paradigms contextaware computing 
kind environment autonomy survivability independent distributed components critical feature believe paradigm mobile agents valuable 
complexity systems difficult exercise full centralized control calls autonomy different components facilitating different tasks different users 
unreliable nature underlying wireless network resource limitations devices agent mobility advantage contributes reduction network load enhances system scalability fault tolerance 
mobile agents software components provide agility re configurability system able move invited host fairly autonomous way data transferred code computation state 
agents require mobility property recognized beneficial number large scale distributed applications including information centric applications 
particular various internet scale applications mobile agents useful including distributed information retrieval electronic marketplaces adaptive agile reconfigurable enterprise systems programming large networks embedded systems applications mobile agents include large networks embedded systems wireless ad hoc sensor networks numerous proposals mobile agents network management suggested 
consequently sizable number mobile agent toolkits see rutgers edu sm annals mathematics computing teleinformatics vol pp developed mobile multi agent applications providing toolkit specific communication capabilities platform mobile agents facilitating direct communication agents agent collection known agents 
standards practices mobile agent communication exist problem agent communication run time challenge communication heterogeneous agents words agents diverse platforms environments poses bigger challenge 
complexity multiple agents communicating groups agents multiple diverse gateways effectively communicating relevant information contributes challenge 
propose communication genre complementary communication capability software agents including mobile agents multi agent systems 
paradigm publish subscribe communication popular choice variety applications proven useful asynchronous communication loosely coupled components distributed systems 
research begun look type communication applications wireless networks address variety challenges concerning publish subscribe communication arise environments support disconnected operations 
adding communication capability mobile agents gives rise additional technical hurdles challenges related issues concerning code mobility software agents 
discuss issues provide solution enables publish subscribe communication mobile agents step building content context messaging agent communication 
context refer ability send messages collection agents current context knowing precise identities agents agent context situation agent known agent 
start background discussion section possible agents communication paradigms starting publish subscribe model analyzing different variations including stateless stateful architectures topic content types messaging 
introduce existing agent communication languages highlight benefits genre complementary form communication 
section identify stateless contentbased messaging approach possible desirable form communication multi agent systems provide brief elvin notification system 
section provide motivating discussion publish subscribe genre call context messaging messaging agents context 
section discuss problems arise integrating mobile agents publish subscribe model communication provide solution problems 
implementation experimental evaluation solution approach section testing ability perform event type communication migrating agents built different toolkits 
experimentation identify problem messages lost agent migration analyze problem section set experiments identify parameters influence messages loss 
discuss solution problem complete architecture 
conclude section 
ii 
background observe available communication genres mobile agents multi agent systems existing set agent communication languages acl genre publish subscribe communication perceive complementary form agent communication 
discuss survey existing technologies tools performing types communications 
publish subscribe model common model performing asynchronous communication component environments publish subscribe model 
generally entities wish send messages publish events entities wish receive certain types messages events subscribe register events 
publisher message aware recipients requesting message aware existence 
similarly components receive messages may aware components may listen event receive messages registered 
entity may publisher subscriber sending receiving messages system 
accomplish event model separate broker entity deployed producer consumer message decouples connection entities provides necessary mechanism distributing message registered subscribers 
performance studies publish subscribe systems suggest highly scalable efficient means communication large distributed systems 
original form publish subscribe model stateless characterized fast efficient agent communication publish subscribe genre relatively simple mechanism implement 
pure light weight form publish subscribe model distinguishable stateful implementation common message queuing platforms including bea range applications built java message service standard jms oracle message broker ibm mqseries sun java system message queue 
jms standard defines messaging rules java components assumes existence messaging middleware facilitates communication loosely coupled components 
jms messaging middleware usually comprises messaging servers provides ee applications extended fault tolerance scalability supports point point publish subscribe messaging models 
jms tightly related ee applications message driven enterprise java beans ejbs 
jms part java enterprise environment vendors produced versions jms compliant messaging system 
jms compliant systems represent stateful form publish subscribe model 
exercise complex actions stateless model require elaborate protocols client acknowledgments temporary storage messages 
instance connecting procedure jms broker done building blocks system dependent jms factories creation particular connection 
connections allow setting particular ping intervals detection link problems client agent jms broker 
jms compliant messaging broker manage clients follow connection status messages sent client ids uniquely identify clients subscribe persistent events 
subscriptions events created sessions describe types agents confirm receipt messages 
message delivery guaranteed clients acknowledge received messages automatically manually 
contrast weakness stateless model potential loss messages messages stored model follows light weight fire forget approach provides highly scalable fast communication mechanism 
message queues forward technique guarantees delivery messages results higher latency greater overheads slower message delivery 
distinction event systems evolution subject systems topics message relates group subjects type systems messages relate event types topics content systems subscriber search content appears message 
jms compliant systems message queuing technologies examples systems topic subscription form widely 
form messaging client subscriptions target topic group client receives back events associated specific topic :10.1.1.67.3753
jms standard allows subscribers define message selector object filtration messages published topic 
message filtration done message properties part message body call message content added managed message publisher 
message selector string structure similar sql standard statement 
content approach improves expressiveness subscriptions contain complex queries message content restrictions attachment specific group topic 
topic addressing enables clients subscribe basis message header information combination meta data items content messaging enables subscriptions aspect message content 
provides greater flexibility applications coupling producers consumers messages allows message filtering arbitrary message content 
entities content messaging approach need concerned obtaining knowledge topic names topics cover perform subscription ad hoc basis 
examples type content communication include middleware elvin siena gryphon 
www com example hybrid messaging approach jms message queuing technology additional contentbased support top traditional message selection defined jms standard 
choice event communication type stateless stateful topic content greatly depends specific application needs 
qualitatively compare existing methods performing publish subscribe communication proposing taxonomy publish subscribe key features 
include scalability middleware reliability messaging persistence messages topic vs content type messaging software languages support languages middleware annals mathematics computing teleinformatics vol pp table example publish subscribe products product topic vs contentbased languages supported sun topic java mqseries topic java elvin content cobol pl java perl python gryphon content java siena content java hybrid java narada hybrid java hybrid java offers link jms systems richness expressiveness subscription language available operating systems table table ii provide comparison publish subscribe products different distinguishing parameters 
table focuses parameters relating openness flexibility communication system support languages types messaging 
compare variety products 
table ii looks differentiating factors jms products 
agent communication languages research agent communication languages acl focused providing agents medium communicating information knowledge 
acl paradigm communication autonomous agents distributed environments suitable agents adapt cooperate heterogeneous settings 
offers complex form communication simple message passing remote object invocation considers rules actions associated semantics 
acl provides declarative language describe desired state defines types semantics messages agents able exchange 
messages acl considered speech acts denote intentions states agents follow bdi model modalities belief desire intention 
primary agent communication languages kqml knowledge query manipulation language fipa acl 
languages aspects similar fipa acl syntax identical kqml exception naming conventions share key components basic constructs speech act theory messages perceived actions trigger form action recipient agent 
attempt provide high level messaging protocol autonomous agents communicating variety content possible different underlying semantics 
words languages agents exchange information different languages describing message content variety communication protocols message transfer assume different semantics associated message content 
acl intended handle possible types messages may required agent execution attempt enable meaningful exchange information manner 
perceive event communication agents complimentary mechanism aspects 
firstly publish subscribe communication model naturally clever mapping serve underlying communication protocol acl low level protocols acl smtp tcp ip iiop 
secondly event paradigm intermediary server complementary normal pointto point messaging means exchange additional information provide agent information agent unable request agent directly 
highlight benefits publish subscribe systems dynamic mobile agent environments focus elvin example concept event natural abstraction activities environment interactions places agents 
see event mechanism communication genre complementary means inter agent communication 
transfer large data chunks agents structured conversations inter agent communication mechanisms fipa agent communication language www fipa org 
event service serves means communicating potentially large volumes short messages agents agents events lightweight manner 
messages contain pointers resources interest agents rich media communicate content agents 
publish subscribe middleware provides implicit invocation component invoke component required know name location 
components register interest particular events components announce 
event system notifies invokes doesn know components registered 
agent communication publish subscribe genre table ii differentiating factors jms compliant products product operating systems message selection open source additional features ms windows nt xp hp ux ibm performed client clustering pluggable invocation aix red hat linux sun solaris layers security persistence ms windows nt server xp hp performed broker clustering multi clustering secu ux ibm aix red hat linux sun solaris ms windows nt xp solaris linux hp ux aix open ms windows nt xp hp ux ibm jms aix red hat linux sun solaris ms windows nt server xp hp ux ibm aix red hat linux sun solaris ms windows nt xp hp ux ibm aix red hat linux sun solaris suits dynamic environment need know location continually moving interact components environment knowing details name agents providing scalability 
publish subscribe paradigm independent agent toolkits middleware provide apis implemented different languages elvin implements apis perl python java languages communication agents built different toolkits 
important contribution independent autonomic behavior agents ability communicate agents software components 
publish subscribe genre allows agents different toolkits software components communicate mode 
alleviates existing restrictions mobile agent communication mechanisms designed enable communication agents platform 
having common means communication form shared publish subscribe middleware reduces complexity environment simplifies security mechanisms implemented 
having multiple communication mechanisms consuming different channels communication performed fixed set dedicated ports defined communication mechanism 
iii 
elvin event notification system perceive content communication mechanism heterogeneous multi agent systems powerful means communication agents share similar interests content having prior knowledge 
pure fast scalable lightweight content publish subscribe event authentication framework performed broker clustering dynamic load balancing failover protection message selection content message properties performed client authentication servlet containers integration performed broker authentication distributed transac tions extensible micro kernel performed client clustering distributed local transactions model rich expressive language message subscription useful disseminating large numbers short notifications efficiently agents large scale multi agent system 
elvin representative kind event model realization 
fundamental principles general publish subscribe model mobile agents remains middleware name elvin name specific implementation generic representative class event notification systems 
elvin built client server architecture elvin server responsible managing client connections transferring messages publishers subscribers 
client applications elvin client code api order produce consume information publish subscribe fashion 
consumers notifications register interest specific events server 
receiving notification message producer elvin server forwards notification relevant client subscribers comparing message content list subscriptions holds 
routing message content intended recipients provides flexibility operate dynamic environment independent need configure information relating recipients notification 
notification encapsulated object contains list keyvalue pairs 
notification element supports data types integers floating points strings consumer expresses interest subscription element built special subscription language containing simple logical expressions 
consider subscription expression taken annals mathematics computing teleinformatics vol pp elvin chat user ss subscription expression match notification field string value elvin chat user field matches regular expression ss 
subscription match notification example chat user alice hello timeout message id cf cf characteristics elvin experimentally evaluated performance elvin representing stateless non durable contentbased model www jboss org representing stateful durable topic model 
benchmark conducted remote machines 
machine served host elvin router application server executed client programs sending receiving messages 
depicts size message headers middleware 
jms message publisher consists larger header sizes elvin means messages exactly content jms durable message bytes larger non durable elvin message 
displays creation time message 
note jms durable message publisher millisecond message slower elvin producer 
fig 

message headers time publish messages remote computer depends size message content depicted 
elvin publishes messages relatively smaller size faster durable jms publisher message size reaches kb publisher efficient 
fig 

creation message fig 

publishing messages amount time needed receive messages remote computer depicted 
message producers started locally computer holds broker elvin router order evaluate message receipt independently message sending capabilities 
seen message size increases increase content faster delivery achieved elvin fig 

receiving messages results show elvin ideal sending large volumes small messages performance better smaller messages overheads message 
agent communication publish subscribe genre iv 
context addressing motivating application publish subscribe agents large systems mobile agents large distributed environments generally difficult program various techniques introduced effective communication 
motivating example consider ability refer send messages collection agents current context knowing precise identities agents 
suppose large number mobile agents roaming hosts distributed intelligent building performing various functions hive project hive sourceforge net hive html explicitly addressing agent want send message agents currently hosts situated third floor want send message agents launched belonging john smith want send message agent currently running hosts gigabyte available storage send message agents currently hosts provide directory service send message agents completed tasks currently running hosts connections network traffic increasing want send message agents currently running host disconnected hosts minutes 
messages target agents context agents way refer agents current context names possible find names context query send name host third floor 
think context messaging useful distributed monitoring management control applications 
mobile agents subscribe receive messages notifications matching subscriptions employ mechanism addressing agents way 
agent subscribes messages relate context 
agent particular keywords subscription expression relates context effectively reporting context communication server 
example elvin subscription language agent uses expression listen messages intended agents low credits currently hosts gb free disk space credits low gb subscription expression match notification example carries command agents situation come home credits low gb command come home message id cf cf note attribute names possible values attribute semantics pre defined example ontology context attributes pre defined applications 
note senders command notifications need know identifiers agents situation described power advantage implicit invocation contentbased addressing 
collection name collection agents described situation effectively created 
collection name send message agents asking report individual names query find agents currently particular context 
refer sub collections collection agents adding additional constraints leaving agent check message received applies 
example suppose notification credits low gb group tom command come home message id cf cf agent receive message matches subscription checking belong tom group decide ignore message 
alternatively agent shift filtering communication server reducing network traffic elaborate subscription expression specifies belongs jane group server forward agent messages intended tom group credits low gb group jane agent inform communication server current context way receive messages suited context 
agent effectively modify subscription re subscribing updating context information provides communication server 
subscriptions carry information agents current context notifications particular attributes values target agents specified context way contentbased addressing context attributes utilized agents truthfully report context annals mathematics computing teleinformatics vol pp communication server viewed context addressing 
examples context attributes include location agent status agent task execution fragment agent state description agent current execution environment services available bandwidth relevant connections assuming discrete values context attributes 
ad hoc namespaces suggests possible define namespaces ad hoc collections agents 
example create namespace relates geographical location hosts 
example suppose consider division building logical areas 
building floors floor floor floor floor floor 
floor rooms numbered room room room 
suppose computers room agents residing computer find logical area means map ip addresses logical areas currently send subscription elvin attribute identifying logical area currently 
send message agents room notifications logical area building floor room command come home agents floor subscribe messages floor agents subscription form begins logical area building floor 
agents move update context information elvin subscriptions collection agents referred phrase agents floor change 
namespaces jointly 
example apart partitioning agents geographical location partition agents owners 
refer agents currently floor belong seng send messages agents 
large numbers agents large numbers hosts ubiquitous embedded devices names provide convenient means refer collections agents 
names agents currently floor belong seng programs applications involving agents users want control agents directly example user command agents currently floor move john machine issued 
approach context addressing relies agents proactively reporting current context subscription 
mere reporting subscription carries semantics inviting messages notifications relevant context specified agent subscription effectively saying current context 
please forward messages relate context subsequent messages matching subscription forwarded 
note agents sending subscriptions report contexts sending notifications 
agents send notifications monitoring model agents notify subscribers contexts 
implementing messaging model agents receiving messages context agents send subscriptions notifications 
mix models employed application focus messaging model 
leave designer agents ensure behavior agents creates 
required efficiency agents network capacity application semantics determine agent re issue subscriptions 
integrating mobile agents publish subscribe model application example turn realization 
traditional application objects utilizing mechanisms static sense located host entire lifetime 
contrast mobile agents active software entities migrate different hosts 
lifetime mobile agent execute agent places different times may need communicate mobile agents static objects 
focus publish subscribe middleware provide event communication traditional distributed applications architectures objects remain location middleware unfit part mobile code 
new functionality added facilitate integration 
furthermore aim newly developed capabilities variety mobile agent toolkits restricted specific 
new functionality supports publish subscribe communication mobile code developed integrate easily regular mobile agent code requiring minimal changes agent program 
mobile agent toolkits study ibm aglets www trl ibm com aglets index htm gmbh grasshopper www grasshopper de 
different aspects toolkits provide internal communication mechanism send messages agents implemented toolkit 
added implementation agent communication publish subscribe genre facilitate communication agents different toolkits publish subscribe fashion 
basic elvin client constructs mobility hurdles fundamental constructs performing communication consumer producer objects 
objects part elvin client library enables consumer objects register callback methods activated specific notifications allow producer objects publish new notifications intended listeners consumer object 
elvin server behavior dictates application consumes notifications consumer object exist location originally subscribed particular notification time notification sent server 
elvin connection object describes communication details exists consumer object 
receiving event server broadcast notification event subscribing objects location original subscription took place maintained elvin connection object 
mobile agents publish subscribe general constructs change hosts require receiving notifications 
scenario communication server aware new location host address continues send messages old host 
infeasible return original subscribing location lose notifications sent transit executing nodes 
discuss solutions problem 
illustrates problem mobile agent subscribes events stage migrates host stage 
communication server contains subscription registration agent connection identified old location keeps sending new notifications wrong host 
second important mobility problem concerned migration mobile agents 
transit mobile agent concrete existence particular host unable receive messages 
problem stateless event notification model store messages unable guarantee delivery messages lost transition periods agents 
consider problem detail provide solution 
third hurdle implementing solution mobile agents fact elvin client library objects implemented non serializable 
migrate part mobile agent code new locations 
imposes obvious restrictions way mobile agents existing api provided publish subscribe middleware 
functionality solve mentioned mobility problems new functionality represented class developed added elvin client library 
class supports java serialization transported different hosts part mobile agent 
functionality implemented class follows approach suggested agent removes existing subscriptions migrating new location re subscribes notifications arriving new location 
class embeds kind behavior performs required operations behalf client mobile agent 
object keeps information serializable representation subscriptions connection objects 
consequently mobile agent client needs object predefined states migration right migration 
public methods provided purpose 
client uses method just migrating new location second activated immediately arriving new location 
ideally functions implemented callback functions activated just migration agent toolkit execution environment 
feature event computing common mobile agent toolkits 
code snippet demonstrates elvin classes basic scenario mobile agent subscribes notifications mc new public void object init object subscription sub new subscription class handle notification events nh new sub nh mc sub public void mc public void annals mathematics computing teleinformatics vol pp fig 

connection problem communication server mobile agent nh new mc nh separates different names grasshopper toolkits callback methods similar purpose 
vi 
experimental evaluation communication agents different toolkits current limitation various mobile agents communication mechanisms inability perform outside agent toolkit environment 
previously described implementing class communication server client library enables easy integration solution different mobile agent platforms 
consequently different vendors mobile agents communicate peer peer share knowledge receive multicast notifications 
experiment examined capability perform publish subscribe communication migrating mobile agents 
communication performed agents running different platforms grasshopper aglets 
architecture consisted grasshopper agencies servers representing different hosts 
mobile agents toolkit migrating hosts grasshopper agents grasshopper agencies aglets servers 
mobile agents listening sending notifications static service called simulation monitor receiving notifications 
simulation monitor task consisted obtaining state experiment time terms agents locations messages sent received agents 
information visually expressed verified expected results 
result messages exchanged communication server simulation monitor aware current locations agents messages received monitor obtain messages sent agents simply subscribing 
experiment monitor serves control unit provide information agents actual capabilities communicating receiving messages 
experiment basic architecture depicted 
fig 

constructs experiment architecture illustrate basic communication scenarios formed process experiment 
time agents monitor service subscribe events 
time agents activate functionality 
arrival new location agents activate method call time 
time agents send notifications publishing arrival monitor sending hello messages 
time agents monitor accept elvin notifications 
receiving peer notification agent sends elvin message monitor time 
successful results experiment proven ability elvin serve communication mecha agent communication publish subscribe genre fig 

experiment process flow part ii fig 

experiment process flow part nism mobile agents independent platform considerations 
vii 
analysis solution stateless event mechanism lightweight efficient large volumes messages drawback loss messages agent migration 
mobile agents responsive period transfer code state messages sent time lost 
relatively long migration time compared fast message dissemination observed benchmarks conducted average speed ratio favor light weight message dissemination small size agent migration implies considerable number messages may lost life cycle agent due migration 
migration time period directly affected communication latency specifically network bandwidth 
hypothesize main factors directly affect number lost messages agent communication latency affected bandwidth average amount time agent spends location 
hypothesize better bandwidth contributes reduction lost messages supports faster agent migration periods shorter stay location increases average number lost messages sense shorter execution periods host decrease agent responsiveness time vice versa 
experiment examines effect various parameters amount lost messages conducted simulating close reality mobile agents behavior calculating percentage lost messages total messages received 
experiment different hosts located physically separated machines running different subnets aglets mobile agents agent creator process monitor service process 
mobile agents migrated different hosts sent notifications 
order produce close reality simulation agents behavior randomized 
agent obtains randomly chosen annals mathematics computing teleinformatics vol pp migration path hosts sends arbitrary number messages randomly chosen agents new host arrives 
consequently agent operates different migration path receives different total number messages different agents 
agents receive messages agents subscribing communication server 
monitor service subscribes messages produced agents aggregates 
agents internally count messages receive execution send count monitor service comparison 
experiment architectural deployment settings 
fig 

experiment deployment architecture parameters delay location time spent agent location delay agent migration time spent agent transit dynamically configured measure effect percentage lost messages 
agent calculate random location delay time upper bound new location arrives 
choosing higher upper bound experimental run expect greater average delay location agents 
delay agent migration simulated postponing notification agent new location communication server delaying activation method perceived communication server migration 
results interpretation measured different lengths stay locations simulating fixed high bandwidth small delay migration 
results indicated clear trend decrease lost messages greater stay agents hosts 
second stage added simulation changing bandwidth examine effect longer migration periods percentage lost messages added migration latency ranging seconds 
results effect changes lengths agents stay host different simulated bandwidth high artificial delay low additional seconds delay migration average number lost messages 
fig 

effect changes bandwidth length stay location average percentage lost messages region accumulated number lost messages experimental runs different delay location high bandwidth 
fig 

aggregated regions number lost messages high bandwidth experiment run results reinforce initial hypothesis regarding effects communication latency agents duration stay host messages loss 
average rate decrease lost messages initially high gradually declines resembling asymptotic curve 
increase migration delay leads increase percentage lost messages 
presents effects different simulated migration delays average number lost messages 
note assume compared communication latency effect agent migration effect dissemination notification relatively small benchmark revealed significant differences execution times acts guaranteeing message delivery migration 
conducted experiments effect agent transit message loss saw percentage messages lost received agent transit scenario agents operate host occasionally perform migration host average agent communication publish subscribe genre fig 

simulation monitor snapshot communication agents different toolkits fig 

effects changes duration stay hosts different migration delays relatively low 
change dramatically face degradation network latency changes agents behavior 
sense issue intending event mechanism primarily guaranteed point point communication device means doing large scale event dissemination 
small percentage lost messages significant depends semantics application message lost tolerated application problem solved stateful heavyweight event notification system 
interested preserving characteristics pure model fast small message dissemination scalable architecture providing solution guarantees message delivery migration mobile annals mathematics computing teleinformatics vol pp agents 
require light weight specific solution compromise characteristics model discussed 
described object conceptually part communication client library exposes set methods mobile agent performing publish subscribe style communication 
complement remote process residing communication server host conceptually serves external layer communication router 
remote process serves proxy messaging router temporarily stores messages behalf mobile agents migration periods 
approach similar architecture designed provide solution disconnecting applications working elvin 
case intending solve problem agent mobility dealing disconnections leverage inherent ability mobile agent know report middleware prior migration arriving new location 
architecture solution 
agents object interface perform event communication concerning issue guaranteeing message delivery migration periods 
internally communicates remote service unicast style communication 
done process adding new subscriptions agent migration extension methods 
described earlier 
service subscribes subscriptions mobile agents notified client object receives notifications clients serves agents 
store received notifications duration mobile agent clients migration period informed receiving appropriate notifications extended functionality existing post migration methods 
agent notifies pre migration status starts local storage messages arrive particular agent 
agent notifies arrived new location checks messages stored communicates back mobile consumer method call 
mobile agent receives messages form return object 
method 
activity illustrated demonstrates phase migration subscriptions added mobile agent 
fig 

illustration interaction agent code process agent migration solution solves issue messages loss migration completely 
conducted set experiments mobile agent randomly migrates hosts varying degrees migration delays ranging seconds 
collection non migrating agents sporadically send notifications agent routing server monitor process subscribes notification comparing number messages received migrating agent actual number messages sent 
solution completely solves issue messages loss agent migration requires client management sense managing agent received notifications individually 
agent migration notifications relevant particular agent stored forwarded agent completion migration process 
general kind approach may bottleneck architecture serving large number agents requiring additional computation resulting slower response 
order scale solution keep performance overheads low limit number agents served provide proxy directory service injects new system number mobile agents performing migration 
final architecture 
fig 

groups agents relate specific proxies proxy director agent communication publish subscribe genre fig 

architecture stateless event communication mobile agents including guarantee message delivery migration groups agents associated particular proxy directory service manages life cycle proxies associations agents specific proxy 
viii 
proposed publish subscribe communication genre complementary form communication mobile agents heterogeneous multi agent systems 
type communication useful case exchanging disseminating short messages events reducing communication complexity agents 
approach concept architecture toolkit independent elvin illustration principle programming language independent long support language messaging middleware 
introduced notion addressing messaging agents context situation currently called context addressing 
scheme publish subscribe event model employed provided agents built proactively report context event system subscriptions effect expressing desire receive messages intended context 
demonstrated applicability ideas experimenting elvin system stateless content publish subscribe mechanism developing functionality enables integration system mobile agents overcoming difficulties introduced code mobility aspect mobile agents 
drawbacks elvin stateless system messages lost agents transit 
dealt stateful event systems illustrated introducing additional layer top event router handles notifications behalf agents transit 
solution closer original purpose light weight communication genre stateful event notification mechanisms heavyweight possibly slower large volumes small messages addresses issues affecting message delivery mobility problem 
believe combination event communication awareness mechanism ability components move agility mechanism important development evolution autonomic distributed systems pervasive environments 
complete picture agents operating context messaging scenario need aware environment context 
developing theoretical model context mobile agents reason context verify uncertain context predict events 
capabilities enable context addressing context aware pervasive multi agent systems 
aguilera strom sturman chandra matching events content subscription systems proc th acm symp 
principles distributed computing podc 
strom bagchi zhao auerbach exactly delivery content publish subscribe system ibm watson research center 
pagurek white mobile agents network management ieee communications surveys vol 
fourth quarter 
hans arno de lara petrovic disconnected operation publish subscribe middleware ieee mobile data management mdm january berkeley california usa 
carzaniga wolf design evaluation support service mobile wireless publish subscribe applications 
technical report cu cs department computer science university colorado jan 
carzaniga rosenblum wolf achieving scalability expressiveness internet scale event notification service symposium principles distributed computing portland 
annals mathematics computing teleinformatics vol pp carzaniga wolf benchmark suite distributed publish subscribe systems technical report cu cs department computer science university colorado april 
available www cs colorado edu papers cucs pdf cugola di fuggetta jedi event infrastructure application development opss wfms 
ieee transactions software engineering 
garlan jha notkin formal treatment implicit invocation 
proceedings formal methods europe conference 
available www cs cmu edu afs cs project able www abstracts fme html huber jam bdi theoretic mobile agent architecture proceedings third international conference autonomous agents agents pages seattle wa 
klusch zambonelli 
ed cooperative information agents best papers cia 
international journal cooperative information systems 
vol 

labrou finin peng 
interoperability problem bringing mobile agents agent communication languages 
ralph sprague ed proceedings nd hawaii international conference system sciences 
maui hawaii ieee computer society 
labrou finin peng agent communication languages current landscape intelligent systems vol 
march april ieee computer society 
liu survey publish subscribe event systems technical report :10.1.1.67.3753
tr computer science department indiana university available www cs indiana edu techreports cgi tr overview mobile agent technology distributed applications possibilities enterprise systems 
informatica international journal computing informatics vol 
july pp 

rakotonirainy zaslavsky enabling awareness dynamic mobile agent environments short 
proceedings th symposium applied computing sac como italy march acm press 
qi wang panda ece utk edu hqi publication wireless pdf optimal itinerary analysis mobile agents ad hoc wireless sensor networks th international conference wireless communications vol 
pp 
calgary canada july 
rao georgeff modeling rational agents 
principles knowledge representation reasoning proceedings second international conference kr pages 
rao georgeff 
bdi agents theory practice 
proceedings international conference multi agent systems icmas san francisco usa 
satyanarayanan pervasive computing vision challenges ieee pcm august pp 

segall arnold boot henderson phelps content routing elvin proceedings auug canberra australia june available elvin dstc edu au doc papers auug auug pdf segall arnold boot henderson phelps content routing elvin proceedings auug canberra australia june 
available elvin dstc edu au doc papers auug auug pdf segall sutton supporting transparent information delivery mobile invisible computing 
available elvin dstc edu au doc papers pdf zaslavsky burg general approach reasoning context situations uncertainty ubiquitous sensing putting geometrical intuitions nd international symposium ubiquitous computing systems www mkg sfc keio ac jp ucs ucs tokyo japan november 
zaslavsky theory context spaces workshop context modeling reasoning nd ieee international conference pervasive computing communication www percom org percom orlando florida march 
sensor frameworks pervasive systems 
available www cs washington edu papers pdf autonomic computing manifesto ibm perspective state information technology www research ibm com autonomic manifesto bea online overview documentation bea com ibm mqseries online overview documentation www ibm com software integration oracle message broker datasheet october sun microsystems 
java message service november 
sun java system message queue docs sun com db prod specification kqml agent communication language tech 
report darpa knowledge sharing initiative external interfaces working group 
mobile agent list mole informatik de mal preview preview html www com products index ssp elvin subscription language dstc elvin dstc edu au doc esl html 
