self tuning histograms building histograms looking data computer sciences department university wisconsin madison cs wisc edu introduce self tuning histograms 
similar structure traditional histograms histograms infer data distributions examining data sample thereof feedback query execution engine actual selectivity range selection operators progressively refine histogram 
cost building maintaining self tuning histograms independent data size self tuning histograms provide remarkably inexpensive way construct histograms large data sets little front costs 
self tuning histograms particularly attractive alternative multi dimensional traditional histograms capture dependencies attributes prohibitively expensive build maintain 
describe techniques initializing refining self tuning histograms 
experimental results show self tuning histograms provide low cost alternative traditional multi dimensional histograms little loss accuracy data distributions low moderate skew 

database systems require knowledge distribution data store 
information primarily query optimizers estimate selectivities operations involved query choose query execution plan 
purposes approximate query processing load balancing parallel database systems guiding process sampling relation 
histograms widely capturing data distributions 
commercial database systems microsoft sql server oracle informix db 
histograms impose little cost query optimization time cost building maintaining rebuilding data modified considered choose attributes attribute combinations build histograms 
building histogram involves scanning sampling data sorting data partitioning buckets finding quantiles 
large databases cost significant prevent building histograms done author microsoft research surajit chaudhuri microsoft research microsoft com believe useful 
problem particularly striking multidimensional histograms capture joint distributions correlated attributes md pi 
histograms extremely useful optimizing decision support queries provide valuable information helps estimating selectivities multi attribute predicates correlated attributes 
despite potential best knowledge commercial database system supports multi dimensional histograms 
usual alternative multi dimensional histograms assume attributes independent enables combination dimensional histograms 
approach efficient inaccurate 
inaccuracy results poor choice execution plans query optimizer 
self tuning histograms explore novel approach helps reduce cost building maintaining histograms large tables 
approach build histograms examining data feedback information execution queries database query workload 
start initial histogram built information distribution histogram attribute 
example construct initial dimensional histogram existing onedimensional histograms assuming independence attributes 
queries issued database query optimizer uses histogram estimate selectivities process choosing query execution plans 
plan executed query execution engine count number tuples produced operator 
approach free feedback information refine histogram 
query uses histogram compare estimated selectivity actual selectivity refine histogram selectivity estimation error 
incremental refinement progressively reduces estimation errors leads histogram accurate similar workloads 
call histograms built process self tuning histograms st histograms short 
done broader context project microsoft research research microsoft com db investigates techniques databases self tuning 
st histograms possible build higher dimensional histograms incrementally little overhead providing commercial systems low cost approach creating maintaining histograms 
st histograms low upfront cost initialized looking data 
refinement st histograms simple low cost procedure leverages free information execution engine 
furthermore demonstrate histogram refinement converges quickly 
cost st histograms lower traditional multi dimensional histograms loss accuracy acceptable data low moderate skew joint distribution attributes 
st histogram st histogram refined line line 
line mode module executing range selection immediately updates histogram 
line mode execution module writes selection range result size workload log 
tools available commercial database systems profiler microsoft sql server accomplish logging 
workload log refine histogram batch time 
line refinement ensures histogram reflects date feedback information imposes overhead query execution line refinement cause histogram hot spot 
overhead imposed histogram refinement line line easily tailored 
particular histogram need refined response single selection uses 
choose refine histogram selections high selectivity estimation error 
skip refining histogram periods high load contention accessing 
line refinement st histograms brings st histogram closer actual data distribution estimation error driving refinement due initial inaccuracy histogram modifications underlying relation 
st histograms automatically adapt database updates 
advantage st histograms accuracy depends 
st histogram refined accurate 
applications self tuning histograms expect traditional histograms built looking data accurate st histograms learn distribution looking data 
especially multi dimensional st histograms suitable wide range applications 
mentioned multi dimensional st histograms particularly attractive 
traditional multi dimensional histograms notably mhist histograms pi significantly expensive traditional dimensional histograms increasing value savings cost offered st histograms 
furthermore st histograms competitive terms accuracy mhist histograms data distributions low moderate skew section 
multi dimensional initialized traditional dimensional histograms subsequently refined provide cheap efficient way capturing joint distribution multiple attributes 
inexpensive alternative assuming independence repeatedly demonstrated inaccurate plan optimize execute result line refinement refine line refinement line line refinement st histograms result size selection workload log see example pi experiments section 
furthermore note building traditional histograms offline process meaning histograms system incurs cost completely building 
true st histograms 
note st histograms possible inexpensively build dimensional dimensional histograms 
st histograms suitable alternative time updating database statistics allow building desired histograms traditional way 
may happen data warehouses updated periodically huge amounts data 
sheer data size may prohibit rebuilding desired histograms batch window 
data size st histograms attractive option examining workload build histograms cheaper examining data tailored time budget 
technique st histograms integral part database servers move self tuning database systems 
self tuning database system decides histogram attribute attribute combination may improve performance start building st histogram 
low cost st histograms allows system experiment extensively try histograms traditional histograms choice 
subsequently construct traditional histogram st histogram provide required accuracy 
intriguing possible application st histograms applications involve queries remote data sources 
trends database usage query optimizers optimize queries involving remote data sources direct control queries involving data sources accessed internet 
accessing data building traditional histograms data sources may easy possible 
query results hand available remote source making technique st histograms attractive option 
rest organized follows 
section overview related 
section describes onedimensional st histograms introduces basic concepts lead section describe multi dimensional 
section presents experimental evaluation proposed techniques 
section contains concluding remarks 

related histograms introduced koo commercial database systems histograms selectivity estimation 
dimensional equi depth histograms commercial systems accurate histograms proposed 
pi extends techniques multiple dimensions 
unaware commercial systems mhist technique proposed pi 
novel approach building histograms wavelets 
major disadvantage histograms cost building maintaining 
addressed shortcoming 
mrl proposes pass algorithm computing approximate quantiles build approximate equi depth histograms pass data 
reducing cost maintaining equi depth compressed histograms focus gmp 
recall approach examine data build histograms feedback query execution engine 
technique refining st histograms shares commonalities split merge algorithm proposed gmp 
relationship discussed section 
addition histograms technique selectivity estimation sampling data query optimization time lns 
main disadvantage approach overhead adds query optimization 
concept feedback query execution engine estimate data distributions introduced cr 
data distribution represented linear combination model functions 
feedback information adjust weighting coefficients linear combination method called recursive square error 
considers dimensional distributions 
remains open problem find suitable multi dimensional model functions recursive square error technique multi dimensional distributions 
contrast show technique construct multidimensional histograms dimensional histograms 
furthermore easily integrated existing systems histogram data structures currently supported commercial systems 
different type feedback execution engine optimizer proposed kd 
execution engine invokes query optimizer re optimize query believes statistics collected execution result better query execution plan 

dimensional st histograms main focus demonstrate low cost alternatives traditional multidimensional histograms fundamentals st histograms best introduced st histograms single attributes 
st histograms similar structure traditional histograms 
st histogram consists set buckets 
bucket stores range represents low high number tuples range frequency freq 
adjacent buckets share bucket endpoints ranges buckets cover entire range values histogram attribute 
assume refinement driven feedback range selection queries 
st histogram assumes data uniformly distributed feedback observation contradicts uniformity assumption 
refinement restructuring st histograms corresponds weakening uniformity assumption needed response feedback information 
lifecycle st histogram consists stages 
initialized refined 
process refinement broken parts refining individual bucket frequencies restructuring histogram moving bucket boundaries 
refinement process driven query workload see section 
bucket frequencies updated range selection histogram attribute bucket boundaries updated periodically restructuring histogram 
describe steps rest section 
initial histogram build st histogram attribute need know required number histogram buckets number tuples relation minimum maximum values attribute min max 
buckets initial histogram evenly spaced min max 
time initializing histogram structure feedback information 
uniformity assumption assign buckets frequency tuples provision rounding parameter looked system catalogs maintained database 
system may store minimum maximum values attributes catalogs 
precise value minimum maximum critical 
initialization phase st histograms exploit additional sources project estimate may subsequently refined 
example domain constraints column minimum maximum values referenced query workload estimation 
refining bucket frequencies bucket frequencies st histogram refined updated feedback information queries workload 
selection histogram attribute compute absolute estimation error difference estimated actual result sizes 
error refine frequencies buckets estimation 
key problem decide distribute blame error histogram buckets overlap range query 
st histogram error estimation may due incorrect frequencies buckets overlap selection range 
different traditional histograms histogram built full scan data degraded accuracy database updates estimation error result bucket partially overlap selection range 
buckets totally contained selection range contribute error 
change frequency bucket depend contributes error 
heuristic buckets higher frequencies contribute estimation error buckets lower frequencies 
specifically assign blame error buckets estimation proportion current frequencies 
alternative heuristic studied assign blame proportion current ranges buckets 
multiply estimation error damping factor sure bucket frequencies modified response errors may lead unstable histograms 
presents algorithm updating bucket frequencies st histogram response range selection actual result size act 
algorithm algorithm inputs act outputs updated bucket frequencies get set buckets overlapping selection range bk est estimated result size selection histogram act est compute absolute estimation error 
distribute error buckets proportion frequency 
frac min high bi max low bi high low freq max freq frac freq est endfor line line refinement 
algorithm determines histogram buckets overlap selection range partially overlap range totally contained estimated result size 
query optimizer usually obtains information query optimization save effort retaining information subsequently refining bucket frequencies 
algorithm computes absolute estimation error denoted line 
error formula distinguishes overestimation indicated negative error requiring bucket frequencies lowered underestimation indicated positive error requiring bucket frequencies raised 
mentioned earlier blame error assigned histogram buckets proportion frequencies contribute result size 
assume bucket contains possible values range represents approximate frequencies bucket average continuous values uniform frequencies assumptions 
assumptions contribution histogram bucket result size equal frequency times fraction bucket overlapping selection range 
fraction length interval bucket overlaps selection range divided length interval represented bucket line 
distribute error buckets proportion frequency bucket assigned portion absolute estimation error equal contribution result size frac freq bi divided total result size est damped damping factor line 
experimentally demonstrate section refinement process robust wide range values recommend values range 
restructuring refining bucket frequencies get accurate histogram 
frequencies bucket approximated average 
large variation frequency bucket average frequency poor approximation individual frequencies matter accurate specifically high frequency values contained high frequency buckets may grouped low frequency values buckets 
addition refining bucket frequencies restructure buckets move bucket boundaries get better partitioning avoids grouping high frequency low algorithm updating bucket frequencies dimensional st histograms frequency values buckets 
ideally high frequency buckets narrow possible 
limit approach separates high frequency values singleton buckets common objective histograms see 
choose buckets currently high frequency split buckets 
splitting induces separation high frequency low frequency values different buckets frequency refinement process adjusts frequencies new buckets 
order ensure number buckets assigned increase due splitting need mechanism reclaim buckets 
step merging groups run consecutive buckets similar frequencies bucket 
approach restructure histogram periodically merging buckets buckets freed split high frequency buckets 
restructuring may triggered variety heuristics 
study simplest scheme restructuring process invoked selections histogram 
parameter called restructuring interval 
merge buckets similar frequencies decide quantify similar frequencies 
assume bucket frequencies similar difference percent number tuples relation parameter call merge threshold 
experiments suitable choice 
greedy strategy form run adjacent buckets similar frequencies collapse single bucket 
repeat step merging possible satisfies merge threshold condition steps 
need decide high frequency buckets split 
choose split percent buckets highest frequencies 
parameter call split threshold 
experiments 
heuristic distributes reclaimed buckets high frequency buckets proportion frequency 
higher frequency bucket extra buckets gets 
presents algorithm restructuring buckets relation tuples 
step histogram restructuring greedily finding runs consecutive buckets similar frequencies merge 
algorithm repeatedly finds pair adjacent runs buckets maximum difference frequency bucket run bucket second run minimum algorithm inputs outputs restructured find buckets similar frequencies merge 
initialize runs buckets run contains histogram bucket consecutive runs buckets find maximum difference frequency bucket run bucket second run find minimum maximum differences merge runs buckets corresponding run look runs merge 
goto line endif assign extra buckets freed merging high frequency buckets 
find set bk buckets highest frequencies chosen merged buckets merging step assign buckets freed merging buckets set proportion frequencies construct restructured histogram merging splitting 
merge previously formed run buckets bucket spanning range represented buckets run having frequency equal sum frequencies split buckets chosen splitting giving number extra buckets assigned earlier 
new buckets evenly spaced range spanned old bucket frequency old bucket equally distributed pairs adjacent runs 
runs merged difference threshold looking runs merge 
process results number runs consecutive buckets 
run replaced bucket spanning entire range frequency equal total frequency buckets run 
frees number buckets allocate high frequency buckets splitting 
splitting starts identifying percent buckets highest frequencies singleton buckets 
avoid splitting buckets chosen merging selection indicates similar frequencies neighbors 
extra buckets freed merging distributed buckets split proportion frequencies 
bucket split gets freq extra buckets total frequency buckets split 
split bucket replaced plus extra buckets assigned 
new buckets evenly divide range old bucket frequency old bucket evenly distributed 
splitting merging gmp redistribute histogram buckets context maintaining approximate equidepth compressed histograms 
algorithm gmp merges pairs buckets total frequency threshold algorithm merges runs buckets differences frequency 
algorithm assigns freed buckets buckets split proportion frequencies algorithm gmp merges pair buckets time split bucket 
key difference approaches gmp sample tuples relation continuously algorithm restructuring dimensional st histograms maintained backing sample buckets split approximate medians computed sample 
hand approach examine data point information similar represented backing sample gmp 
restructuring algorithm splits buckets evenly spaced intervals information data distribution bucket 
gives example histogram restructuring 
example merge threshold algorithm merges buckets difference frequencies 
algorithm identifies runs buckets merged buckets buckets 
merging runs frees buckets assign high frequency buckets 
split threshold split buckets highest frequencies buckets 
assigning extra buckets buckets proportion frequency means bucket gets extra buckets bucket gets extra bucket 
splitting may unnecessarily separate values similar low frequencies different buckets 
runs buckets similar low frequencies merged subsequent restructuring 
notice splitting distorts frequency bucket distributing new buckets 
means histogram may lose accuracy restructuring 
accuracy restored bucket frequencies refined subsequent feedback 
summary model follows frequency refinement process applied histogram refined frequency information periodically restructure histogram 
restructuring may reduce accuracy distributing frequencies buckets splitting frequency refinement restores hopefully increases histogram accuracy 
merge split frequencies merge extra bucket merge extra buckets split split buckets 
multi dimensional st histograms section multi dimensional multi attribute st histograms 
goal build histograms representing joint distribution multiple attributes single relation 
histograms estimate result size conjunctive range selections attributes refined feedback selections 
accurate dimensional histograms attributes reflect correlation attributes 
section discuss special considerations multi dimensional histograms 
working multiple dimensions raises issue partition multi dimensional space histogram buckets 
effectiveness st histograms stems ability pinpoint buckets contributing estimation error learn data distribution 
partitioning choose efficiently support learning process 
partitioning easy construct maintain want cost remain low possible 
achieve objectives grid partitioning multi dimensional space 
dimension space partitioned number partitions 
partitions dimension may vary size partitioning space fully described partitioning dimensions 
choose grid partitioning due simplicity low cost offer flexibility grouping values buckets partitionings example mhist histogram partitioning pi 
simplicity grid partitioning allows histograms buckets amount memory 
easier st histograms infer data distribution feedback information working simple high resolution representation distribution working complex low resolution representation 
furthermore doubt simple feedback information refinement glean information data distribution justify complex partitioning 
dimension dimensional st histogram partitioned partitions 
necessarily equal partitioning space described arrays dimension call scales nhs 
array element scales represents range partition low high 
addition scales multi dimensional dimensional matrix representing grid cell extra buckets frequencies buckets example histogram restructuring scales attribute attribute frequency matrix range selection histogram st histogram range selection frequencies call frequency matrix 
presents example dimensional st histogram range selection uses 
initial histogram build st histogram attributes assume complete uniformity independence existing dimensional histograms assume independence attributes starting point 
start uniformity independence assumption need know minimum maximum values attribute ai mini maxi 
need specify number partitions dimension bn 
dimension partitioned bi equally spaced partitions tuples relation evenly distributed buckets frequency matrix 
technique extension dimensional st histograms 
way building multi dimensional st histograms start traditional dimensional histograms multi dimensional histogram attributes 
dimensional histograms available provide better starting point assuming uniformity independence 
case initialize scales partitioning space bucket boundaries dimensional histograms initialize frequency matrix bucket frequencies onedimensional histograms assuming attributes independent 
independence assumption initial frequency cell frequency matrix freq jn freq frequency bucket histogram dimension refining bucket frequencies algorithm refining bucket frequencies multidimensional case identical dimensional algorithm differences 
finding histogram buckets overlap selection range line requires examining multi dimensional structure 
second bucket multi dimensional cell frequency matrix fraction bucket overlapping selection range line equal volume region bucket overlaps selection range divided volume region represented bucket 
restructuring periodic restructuring needed multi dimensional initialized assuming uniformity independence 
st histograms initialized traditional dimensional histograms need periodically restructured assuming dimensional histograms accurate 
assumption partitioning accurate traditional dimensional histogram built looking data accurate multi dimensional st histograms partitioning built splitting merging 
dimensional case restructuring multidimensional case merging buckets similar frequencies splitting high frequency buckets 
required parameters restructuring interval merge threshold split threshold restructuring changes partitioning multi dimensional space dimension time 
dimensions processed order partition boundaries dimension modified independent dimensions 
algorithm restructuring dimension multi dimensional st histogram similar algorithm 
merging splitting multiple dimensions additional problems 
dimensional st histogram partition scales dimension identifies dimensional slice grid row column dimensional histogram 
merging partitions scales requires merging slices frequency matrix containing buckets 
bucket slice merged corresponding bucket second slice 
decide merge slices find maximum difference frequency corresponding buckets merged slices merged 
merge slices difference tuples 
method identify runs partitions merge 
high frequency partitions dimension split assigning extra partitions freed merging dimension 
restructuring change number partitions dimension 
decide partitions split dimension extra partitions gets marginal frequency distribution dimension 
marginal frequency partition total frequency buckets slice frequency matrix identifies 
marginal frequency partition ji dimension bi bi bn ji ji jn freq dimensional case split percent partitions dimension highest marginal frequencies assign extra partitions proportion current marginal frequencies 
maximum marginal frequency frequency difference distribution restructuring vertical dimension demonstrates restructuring histogram vertical dimension attribute 
example merge threshold merge partitions maximum difference frequency buckets slices merged 
condition leads merge partitions 
split threshold split partition vertical dimension 
compute marginal frequency distribution vertical dimension identify partition maximum marginal frequency partition 
merging splitting provisions rounding result shown histogram 

experimental evaluation section experimental evaluation techniques synthetic data sets workloads 
investigate accuracy efficiency multidimensional st histograms 
particular interested accuracy st histograms data distributions varying degrees skew workloads different access patterns 
examine histogram refinement converges accurate state oscillates response refinement 
important consideration st histograms adapt database updates efficiently available memory 
due space limitations subset experiments conducted 
setup experiments merge max split merge split data sets results experiments threedimensional integer data sets 
results higher dimensional data sets similar 
dimensional data sets tuples multi dimensional data sets tuples 
dimension data set distinct values drawn randomly domain ranging 
dimensions respectively 
multidimensional data sets number distinct values domains dimensions identical value sets dimensions generated independently 
frequencies generated zipfian distribution zip parameter 
controls skew distribution representing uniform distribution skew 
dimensional data sets frequencies assigned random values 
multi dimensional data sets frequencies assigned random combinations values technique proposed pi assigning generated frequencies randomly chosen cells joint frequency distribution matrix 
query workloads workloads consisting random range selection queries dimensions 
workload consists independent selection queries 
experiments random workloads corner points selection range independently generated uniform distribution entire domain 
experiments workloads locality 
attribute values selection range corner points workloads generated piecewise uniform distributions probability choosing value locality range domain 
locality ranges different dimensions independently chosen random uniform distribution 
histograms stated buckets dimension dimensional st histograms respectively 
multi dimensional st histograms number buckets dimensions resulting dimensional histograms total buckets 
dimensional st histograms occupy kilobytes memory respectively 
traditional histograms choice maxdiff histograms dimension mhist maxdiff histograms multiple dimensions 
histograms recommended pi accuracy ease construction 
compare accuracy st histograms traditional histograms types occupying amount memory 
consider wider range memory allocation previous works pi current trends memory technology 
demonstrate techniques effective wide range available memory section 
note cost building maintaining traditional histograms function size relation size sample build histogram 
contrast cost st histograms independent data size depends size query workload refinement 
refinement parameters stated parameters restructuring histogram section restructuring interval queries merge threshold split threshold 
frequency refinement section damping factor dimension multiple dimensions 
measuring histogram accuracy relative estimation error abs actual result size estimated result size actual result size measure accuracy query result size estimation 
measure accuracy entire workload average relative estimation error queries workload ignoring queries actual result size zero 
important question respect workload measure accuracy st histogram 
recall premise st histograms able adapt feedback query execution 
evaluation generate workloads statistically similar training workload 
stated experiments line histogram refinement 
steps verifying effectiveness st histograms particular data set 
initialize st histogram data set 

issue query workload refine histogram generate workload log 
call refinement workload 

refine histogram line generated workload log 

refinement issue refinement workload compute estimation error 
verify error refinement error refinement 

issue different workload queries distribution workload refinement 
call test workload 
expect workload issued refinement repeated exactly refinement reasonably expect workload similar statistical characteristics 
ultimate test accuracy st histogram performs test workload 
accuracy dimensional st histograms section experimentally study effectiveness onedimensional st histograms wide range data skew random workloads procedure outlined section 
demonstrate st histograms better assuming uniformity competitive maxdiff histograms terms accuracy highly skewed data sets 
relative error skew assuming uniformity refinement refinement refinement test workload maxdiff maxdiff test workload dimensional data random workload presents estimation errors random refinement workload dimensional data sets varying data set presents estimation error random refinement workload assuming uniform distribution initial st histogram constructed assuming uniformity 
estimation errors cases different due rounding errors histogram initialization 
presents average relative estimation error random refinement workload refined st histogram workload issued refinement 
presents error statistically similar test workload refined st histogram 
presents estimation errors refinement test workloads traditional maxdiff histogram occupying amount memory st histogram 
histogram refinement results significant reduction estimation error values reduced error observed refinement workload test workload indicating true improvement histogram quality 
st histograms better assuming uniformity 
maxdiff histograms accurate st histograms 
expected maxdiff histograms built true distribution determined examining data 
low values estimation errors refined st histograms close errors maxdiff histograms small query optimization purposes 
maxdiff histograms considerably accurate st histograms highly skewed data sets 
expected increases data distribution difficult capture simple feedback information 
time benefit maxdiff histograms maximum highly skewed distributions 
accuracy multi dimensional st histograms section show multi dimensional st histograms initialized traditional dimensional histograms accurate assuming independence 
compare performance st histograms mhist histograms 
particular demonstrate st histograms accurate mhist histograms low moderate values low correlation 
important result indicates st histograms better mhist histograms cost accuracy data distributions low medium correlation 
results experiments st histograms initialized traditional histograms 
experiments accurate st histograms initialized assuming uniformity independence similar results 
figures results multi dimensional st histograms initialized maxdiff histograms assuming independence random workloads threedimensional data set varying information show estimation error assuming uniformity assume uniformity dimensional histograms available compare performance st histograms multidimensional mhist histograms dimensional maxdiff histograms 
st histograms initialized maxdiff histograms refinement dimensional histograms assuming independence 
refined st histograms accurate assuming independence benefit reduction error increases increases 
st histograms accurate mhist histograms high especially dimensions 
indicates inferring joint data distributions simple feedback information increasingly difficult increasing dimensionality 
expected mhist histograms accurate high pi bear mind cost building multi dimensional mhist histograms cost building dimensional maxdiff histograms 
furthermore cost increases increasing dimensionality 
notice st histograms accurate mhist histograms low mhist histograms complex partitioning space compared st histograms 
representing complex partitioning relative error relative error joint distribution dimensions starting maxdiff joint distribution refinement refinement refinement test workload mhist mhist test workload refinement refinement refinement test workload mhist mhist test workload dimensions starting maxdiff requires mhist histograms complex buckets consume memory st histogram buckets 
consequently st histograms buckets mhist histograms occupying amount memory 
low complex partitioning mhist histograms increase accuracy joint distribution close uniform partitioning fine 
hand large number buckets st histograms allows represent distribution finer granularity leading higher accuracy 
result demonstrates value multi dimensional st histograms database systems 
data low moderate skew provide effective way capturing dependencies attributes low cost 
equi width equi depth maxdiff table starting different types histograms table presents estimation errors random workloads dimensional data sets varying st histograms built starting traditional dimensional histograms 
errors shown refinement line refinement random workloads 
dimensional histograms buckets 
addition maxdiff histograms table presents errors start histograms simplest type histograms start equi depth histograms currently commercial database systems 
table shows st histograms equally effective types onedimensional histograms 
effect locality query workload interesting issue studying performance st histograms workloads locality accessing data 
locality fundamental concept underlying database accesses expect real life workloads locality 
purely random workloads provide feedback information entire distribution workloads locality provide feedback small part distribution 
know effective type feedback histogram refinement 
section demonstrate st histograms perform workloads locality 
demonstrate histogram refinement adapts changes locality range workload 
relative error dimensions unif indep refinement refinement traditional unif indep refined refinement traditional workloads locality presents estimation errors workloads locality dimensional data sets 
bars data set errors workload 
bars respectively show errors assuming uniformity independence initial representing uniformity independence assumption 
bars identical rounding errors 
third bar shows error st histogram issuing refinement 
fourth bar shows error traditional histogram 
clear refinement considerably improves estimation accuracy making st histogram accurate traditional histogram 
improvement observed test workloads statistically similar 
keep refined histogram change locality workload 
issue new workload different locality range 
bars estimation errors 
issue st histogram refined result size estimation sixth bar 
histogram accurate better assuming uniformity independence 
means refinement able infer information queries lie outside locality range 
refine histogram issue see st histogram accurate refinement 
improvement seen workloads statistically similar 
relative error dimensions unif indep adapting database updates refinement refinement traditional unif indep refined refinement traditional traditional adapting database updates results section demonstrate examine data feedback mechanism enables histograms adapt updates underlying relation 
presents estimation errors twodimensional data sets random workloads 
bars estimation errors original relation update denote 
update relation deleting random tuples inserting equal number tuples zipfian distribution 
denote updated relation 
retain traditional built re issue random workload 
fifth sixth bars estimation error workload assuming uniformity independence st histogram refined respectively 
histogram accurate expected accurate assuming uniformity independence 
seventh bar shows error st histogram refinement workload 
refinement restores accuracy st histogram adapts updates relation 
observe improvement error statistically similar test workloads 
bars estimation error random workload issued traditional histograms respectively 
expected updating relation reduces histogram accuracy rebuilding histogram restores accuracy 
refinement parameters section investigate effect refinement parameters restructuring updating bucket frequencies 
table presents average relative estimation errors random test workloads st histograms refined line random refinement workloads dimensional data sets varying data set error histogram restructured refinement restructured 
restructuring benefit low increases need restructuring evident 
restructuring extends range data skew st histograms effective 
presents estimation errors random workloads workloads locality threedimensional data sets st histograms refined line statistically similar refinement workloads 
estimation errors relatively relative error absolute error dims 





alpha effect queries line refinement dimension flat wide range 
benefit trying find optimal low 
recommend fixed varying simple algorithm 
experiments dimensional case multidimensional case 
effect available memory presents estimation errors random test workloads data sets dimensions refined random refinement workloads traditional histograms occupying amount memory st histograms 
errors histograms kilobytes memory 
st histograms accurate comparable traditional histograms range available memory accuracy increases increasing memory 
twodimensional case st histograms better mhist histograms amount available memory small 
mhist histogram fewer buckets st histogram memory 
low memory mhist histogram buckets cleverly partition space 
st histogram better little memory available partitioning table error restructuring random random random locality locality locality uniformity st histogram maxdiff relative error absolute error kilobytes effect available memory queries st histogram maxdiff st histogram mhist line refinement dimensions unif indep st histogram mhist space buckets capturing distribution finer granularity 
line refinement convergence histogram refinement process resulting refined line line refinement 
experiments line refinement valid line refinement 
section switch line refinement study convergence 
convergence important line online refinement important easier observe line refinement 
addition studying convergence compare performance line line refinement 
issue random workload query time recording estimation error incrementally refining st histogram query 
goal refinement process reduce absolute estimation error histogram 
verify refinement reduce error compute average error queries assuming uniformity independence st histogram traditional histogram 
errors plotted figures twodimensional data sets 
figures show st histogram refinement converges fairly rapidly 
results support argument st histograms low cost 
simple histogram refinement process performed small number times histogram sufficiently accurate 
results demonstrate choice queries workloads effect refinement converges queries 
relative error dimensions unif indep line refinement line refinement line refinement line vs line refinement traditional histogram compares line line refinement 
presents estimation errors random workloads dimensional data set 
data set errors assuming uniformity independence unrefined st histogram st histogram refined line workload st histogram refined line query traditional histogram 
line refinement queries see progressively accurate histogram 
query workload histogram equivalent histogram refined line workload 
hand refine histogram line workload issue workload second time entire workload experience fully refined histogram second time issued 
interesting result scenarios result comparable estimation errors 
choose refinement method suitable system architecture expected usage situations desired accuracy 

introduced novel way building histograms low cost feedback query execution engine 
st histograms feedback look data 
multi dimensional st histograms particularly attractive provide low cost alternative traditional multidimensional structures proposed literature prohibitively expensive large databases true data warehouses 
multi dimensional st histograms accurate traditional mhist histograms wide range data distributions accurate costing build maintain 
st histograms better assuming uniformity independence values data skew comparable accuracy traditional histograms low medium skew 
high data skew st histograms accurate mhist histograms 
st histograms suitable low medium data skew high cost building traditional multidimensional histograms justified high data skew 
combine best worlds start initializing st histogram refining preset number queries representative workload database 
training sequence fails reduce error acceptably low level consider building traditional histogram capture high skew 
vivek narasayya useful discussions help experiments 

cr chen roussopoulos 
adaptive selectivity estimation query feedback 
proceedings acm sigmod conference pages 
gmp gibbons matias poosala 
fast incremental maintenance approximate histograms 
proceedings rd international conference large databases pages 
kd kabra dewitt 
efficient mid query reoptimization sub optimal query execution plans 
proceedings acm sigmod conference pages 
koo 
optimization queries relational databases 
phd thesis case western reserve university september 
lns lipton naughton schneider 
practical selectivity estimation adaptive sampling 
proceedings acm sigmod conference pages 
md dewitt 
equi depth histograms estimating selectivity factors multidimensional queries 
proceedings acm sigmod conference pages 
mrl manku rajagopalan lindsay 
approximate medians quantiles pass limited memory 
proceedings acm sigmod conference pages 
matias vitter wang 
wavelet histograms selectivity estimation 
proceedings acm sigmod conference pages 
nhs nievergelt hinterberger sevcik 
grid file adaptable symmetric multikey file structure 
acm transactions database systems march 
poosala ioannidis haas shekita 
improved histograms selectivity estimation range predicates 
proceedings acm sigmod conference pages 
pi poosala ioannidis 
selectivity estimation attribute value independence assumption 
proceedings rd international conference large databases pages 
zip zipf 
human behaviour principle effort 
addison wesley reading ma 
