taxonomy security faults aslam ivan eugene spa ord coast laboratory department computer sciences purdue university west lafayette cs purdue edu security computer systems important ensure reliable operation protect integrity stored information 
faults implementation critical components exploited breach security penetrate system 
faults identi ed detected corrected ensure reliability safeguard denial service unauthorized modi cation data disclosure information 
de ne classi cation security faults unix operating system 
state criteria categorize faults examples di erent fault types 
design implementation details prototype database store vulnerability information collected di erent sources 
data organized fault categories 
information database applied static audit analysis systems intrusion detection fault detection 
describe software testing methods ective detecting di erent faults classi cation scheme 
th national information systems security conference october baltimore maryland 
technical report tr september security computer systems important maintain reliable operation protect integrity privacy stored information 
years seen development sophisticated vulnerability databases vulnerability exploitation tools called computer underground 
tools capable automating exploitation vulnerabilities thought require considerable expertise including ip dns spoo ng 
tools freely widely available pose signi cant threat ignored 
celebrated kevin example tools databases penetrate hundreds computers caught 
expert exploiting vms security holes widely believed knowledge unix limited provided source unknown ready tools considerable complexity 
widespread computers increased computer knowledge hands people objective obtain access unauthorized systems resources longer possible desirable implement security obscurity 
ensure computer systems secure malicious attacks need analyze understand characteristics faults subvert security mechanisms 
classi cation scheme aid understanding faults cause security breaches categorizing faults grouping faults share common characteristics 
related existing fault classi cation schemes suitable data organization clearly specify selection criteria 
lead ambiguities result fault classi ed category 
protection analysis pa project conducted research protection errors operating systems mid 
group published series papers described speci type protection error techniques nding errors 
proposed detection techniques pattern directed evaluation methods formalized patterns search corresponding errors 
results study intended personnel working evaluation enhancement security operating systems 
objective study enable little knowledge computer security discover security errors system pattern directed approach 
method automated easily database faults published 
nal report pa project proposed representative categories faults 
designed group faults syntactic structure broad ective data organization 
risos project study computer security privacy conducted mid 
project aimed understanding security problems existing operating systems suggest ways enhance security 
systems security features studied included ibm os series operating system bolt beranek newman system pdp 
main contribution study classi cation integrity aws operating systems studied 
fault categories proposed risos project general classify faults operating systems generality fault cate gories prevents ne grain classi cation lead ambiguities classifying fault category 
carl landwehr published collection security aws di erent operating systems classi ed aw genesis time introduced system section code introduced 
taxonomy proposed unfortunately di cult unambiguous classi cation categories generic specify clear classication criteria 
brian published survey software fault studies software engineering literature 
studies reported faults discovered production quality software 
results study insightful classi cation scheme provided suitable data organization unambiguous classi cation 
classical software testing techniques strictly concerned taxonomy aws pay close attention fault classi cation schemes classify faults detected methods 
boundary condition errors boundary value analysis design test cases functional testing modules 
ensures test cases exercise boundary conditions expose boundary condition errors 
addition functional testing mutation testing detect boundary conditions designing appropriate language dependent mutants 
domain analysis applied detect boundary condition errors 
domain analysis studied variables examined variables 
main disadvantage domain testing applied small number variables di culty selecting test cases increasingly complex 
experiment path analysis revealed existence path selection errors 
input validation errors errors result functional module fails properly validate input accepts module process 
failure validate input may cause module accepting input fail may indirectly cause interacting module fail 
syntax testing verify functional modules accept input processes modules fail ill formatted input 
path analysis testing applied detect scenarios certain execution path may input 
experiment conducted path testing revealed existence twelve computation errors 
access validation errors path analysis detect errors result incorrectly speci ed condition constructs 
branch relational operator testing bro test case design techniques aid design test cases expose access validation errors 
failure handle exceptional condition errors security breach caused system fails handle exceptional condition 
include unanticipated return codes failure events 
static analysis techniques inspection design documents code walk throughs formal veri cation critical sections ensure system gracefully handle unanticipated event 
path analysis testing performed small critical sections code ensure possible execution paths examined 
reveal problems may designers overlooked complexity 
environment errors errors dependent operational environment di cult detect 
possible vulnerabilities manifest software run particular machine particular operating system particular con guration 
spa ord testing uncover problems integer ow ow 
mutation testing design test cases exercise speci set inputs unique run time environment 
path analysis testing applied sections code ensure possible inputs examined 
synchronization errors introduced existence timing window operations faults result improper inadequate serialization operations 
possible sequence actions may lead synchronization fault characterized 
process acquires access object perform operation 

process notion object changes indirectly 

process performs operation object 
mutation testing detect synchronization faults program 
detect faults introduced timing window operations trap execution mutant placed operations 
mutant terminates execution program certain speci ed conditions satis ed 
instance timing window access permission checks actual logging xterm exploited compromise security 
mutant designed terminated execution killing mutant access checks completed 
mutant placed access checks logging detect race condition 
mutants designed detect improper serialization operations 
consider set statement executed sequentially ensure correct operation 
assume statements contain instructions break sequential lock step execution 
wecan design mutants rearrange order execution statements 
mutants killed mutated program produces di erent result original program 
con guration errors may result software adapted new environments failure adhere security policy 
con guration errors consist faults introduced software developed faults introduced maintenance phase software life cycle 
static audit analysis system reveal majority con guration errors 
various software testing techniques discussed static analysis ective detecting con guration errors 
static audit system automated static audit tools cops tiger search system known avenues penetration 
fault classi cation scheme previous section experience working security faults developed taxonomy security faults appropriate data organization 
broadly classify faults coding faults emergent faults 
personnel communication physical operations security play role reliable operation computer systems focus faults embodied software 
coding faults comprised faults introduced software development 
faults introduced errors programming logic missing incorrect requirements design errors 
emergent faults result improper installation software unexpected integration incompatibilities programmer fails completely understand limitations run time modules 
emergent faults essentially software performs exactly speci cation causes fault 
policy errors classi ed emergent faults modular sofware module works perfectly integrated product 
classi cation purposes implementation error level maintain speci characteristics hide implementation details 
approach bene cial classifying faults programming language 
taxonomy faults comprised categories coding faults synchronization errors 
condition validation errors 
emergent faults con guration errors 
environment faults 
synchronization errors taxonomy fault classi es synchronization error fault exploited timing window operations 
fault results improper serialization operations 
example vulnerability versions xterm program exploited allowed users create delete arbitrary les system 
xterm operated setuid process race condition access check permissions logging le logging allowed users replace arbitrary le logging le 
code illustrates vulnerability exploited 
create fifo file name foo foo start logging foo xterm lf foo rename file foo junk mv foo junk create symbolic link password file ln passwd foo open fifo cat junk error occurs timing window exists time access permissions logging le checked time actual logging started 
timing window exploited creating symbolic link logging le target le system 
xterm runs setuid root create new les destroy existing les system 
condition validation errors conditions usually speci ed conditional construct implementation language 
expression corresponding condition evaluated execution path chosen outcome condition 
discussion assume operation allowed proceed condition evaluated true 
condition validation error occurs condition missing 
allows operation proceed regardless outcome condition expression 
condition incorrectly speci ed 
execution program proceed alternate path allowing operation proceed regardless outcome condition expression completely invalidating check 
predicate condition expression missing 
evaluate condition incorrectly allow alternate execution path chosen 
condition errors coding faults occur programmer misunderstood requirements logic error condition specied 
taxonomy fault classi es condition error conditions missing speci ed correctly check limits 
operation proceed system ensure allocate required resources causing starvation deadlocks 
input output operations system ensure user process read write address boundaries 
check access rights 
system ensure user process access object access domain 
mechanics check di er di erent systems depending access control mechanisms implemented 
check valid input 
routines accept input directly user routine check validity input 
includes checks field value correlation 
syntax 
type number parameters input elds 
missing input elds delimiters 
extraneous input elds parameters 
failure properly validate input may indirectly cause functional modules fail cause system behave unexpected manner 
check origin subject 
context subject refers user process host shared data objects 
system authenticate subject identity identity compromise attacks 
unix exports speci es lists trusted remote hosts allowed mount le system 
sunos host entry le longer characters number hosts exceeded cache capacity bu er ow allowed non trusted host mount le system 
allowed unauthorized users read write access les system 
error occurred system failed check read characters exhausted cache capacity 
example utility unix 
utility allows users remotely execute limited set commands 
aw parsing command line allowed remote users execute arbitrary commands system 
command line executed received remote system parsed see commands line set commands executed 
read rst word line skipped characters delimiter character read 
continue way line read 
delimiters missing set command characters checked executed 
example user execute command executing sequence 
remote machine command command character checked executed 
allowed users execute unauthorized commands remote system 
error occurred failed check missing delimiters 
con guration errors con guration system consists software hardware resources 
taxonomy fault classi ed con guration error program utility installed wrong place 
program utility installed incorrect setup parameters 
secondary storage object program installed incorrect permissions 
example sites tftp daemon enabled away user internet access le machine running tftp 
aw quali es con guration error taxonomy tftp properly installed 
tftp enabled access le system restricted command 
environment faults environment faults introduced speci cations translated code su cient attention paid run time environment 
environmental faults occur di erent modules interact unanticipated manner 
independently modules may function speci cations error occurs subjected speci set inputs particular con guration environment 
example exec system call overlays new process image old 
new image constructed executable object le data le containing commands interpreter 
interpreter le executed arguments speci ed exec call passed interpreter 
interpreters take argument start interactive shell 
sunos version earlier user create interactive shell creating link name setuid shell script 
exec passed argument shell interpreter started interactive shell 
exec system call shell interpreter worked speci cations 
error resulted interaction shell interpreter exec call considered 
selection criteria classi cations described taxonomy possible design decision process help classify faults automatically 
decision processes possible selection criteria classify security faults di erent categories distinctly classify fault 
fault category series questions determine membership speci category 
answer question series quali es fault classi ed corresponding category 
condition validation errors sets questions determine fault classi ed condition validation error 
boundary condition errors error occur process attempted read write valid address boundary 
error occur system resource exhausted 
error result ow ofa static sized data structure 
access validation errors error occur subject invoked operation object outside access domain 
error occur result reading writing le device outside subject access domain 
origin validation errors error result object accepted input unauthorized subject 
error result system failed properly completely authenticate subject 
input validation errors error occur program failed recognize syntactically incorrect input 
error result module accepted extraneous input elds 
error result module handle missing input elds 
error result eld value correlation error 
failure handle exceptional conditions error manifest system failed handle exceptional condition generated functional module device user input 
synchronization errors section presents criteria decide fault classi ed synchronization error 
race condition errors error exploited timing window operations 
serialization errors error result inadequate improper serialization operations 
atomicity errors error occur partially modi ed data structures observed process 
error occur code terminated data partially modi ed part operation atomic 
environment errors section presents series questions decide fault classi ed environment error 
error result interaction speci environment functionally correct modules 
error occur program executed speci machine particular con guration 
error occur operational environment di erent software designed 
con guration errors questions determine fault classi ed con guration error 
error result system utility installed incorrect setup parameters 
error occur exploiting system utility installed wrong place 
error occur access permissions incorrectly set utility violated security policy 
applications fault taxonomy section applications fault classi cation scheme 
addition identi ed testing techniques may systematically detect faults 
vulnerability database landwehr observe history software failure undocumented knowing systems failed help design better systems prone failure 
design vulnerability database step direction 
database serve repository vulnerability information collected di erent sources organized allow useful queries performed data provide useful information system designers identifying areas weaknesses design requirements implementation software 
database maintain vendor patch information vendor response team advisories catalog patches applied response advisories 
information helpful system administrators maintaining legacy systems 
aslam designed built prototype vulnerability database explore usefulness classi cation scheme 
vulnerability database relational schema model consists physical conceptual entities 
entities represented relations tables model 
relational algebra de nes operations performed relations 
de nes set basis functions query relational model speci ed terms functions 
basis functions relational model select project union difference cartesian product 
database populated vulnerability information sources proved useful resource development detection patterns coast intrusion detection system idiot 
needs determined classi cation scheme needs enhanced encompass operating systems 
modern systems software architecture di erent unix 
include micro kernels object oriented distributed operating systems 
needed classi cation scheme easily expanded criteria taxonomy rely implementation details designed encompass general characteristics fault 
existing categories extended include news faults classi ed existing categories 
coast vulnerability database needs extended vulnerabilities 
database currently signi cant faults largely variants unix operating system 
data extend collection cataloged faults 
complete intend evaluate structure database original research goals building static audit tools guiding software design testing enhancing incident response capabilities 
fault classi cation scheme helps unambiguous classi cation security faults suitable data organization processing 
database vulnerabilities classi cation implemented aid production tools detect prevent computer break ins 
classi cation scheme contributed understanding computer security faults cause security breaches 
cert advisory ca 
computer emergency response team advisory 
cert advisory ca 
computer emergency response team advisory 
cert advisory ca 
computer emergency response team advisory 
cert advisory ca 
computer emergency response team advisory 
demillo comparison reliable test data generation procedures 
technical report georgia technology 
abbott security analysis enhancements computer operating systems 
technical report institute computer science technology national bureau standards 
agrawal demillo design mutant operators programming language 
technical report serc tr software engineering research center purdue university 
aslam 
taxonomy security faults unix operating system 
master thesis purdue university 
boris beizer 
software testing techniques 
electrical engineering computer science engineering series 
van nostrand reinhold 
richard gerald popek jim 
inconsistency single data value time 
technical report information sciences institute university southern california december 
matt bishop 
analyzing security existing computer system 
ieee fall joint computer conference november 
budd 
mutation analysis program test data 
phd thesis yale university may 
jim richard ii gerald popek 
pattern directed protection evaluation 
technical report information sciences university southern california june 
richard demillo aditya mathur 
software artifacts evaluate ectiveness mutation analysis detecting errors production software 
technical report software engineering research center purdue university serc tr march 
daniel farmer eugene spa ord 
cops security checker system 
technical report csd tr software engineering research center purdue university september 
gar eugene spa ord 
practical unix internet security 
associates second edition 
hafner john marko hackers computer frontier 
touchstone 

reliability path analysis testing strategy 
ieee transactions software engineering se 
white cohen domain strategy computer program testing 
ieee transactions software engineering may 
knuth 
errors tex software practice experience 
sandeep kumar 
classi cation detection computer intrusions 
phd thesis purdue university 
sandeep kumar eugene spa ord 
pattern matching model misuse intrusion detection 
th national computer security conference 
sandeep kumar eugene spa ord 
software architecture support misuse intrusion detection 
technical report csd tr purdue university 
carl taxonomy computer program security aws 
technical report naval research laboratory november 
brian 
survey software fault surveys 
technical report uiucdcs university illinois urbana champaign december 
myers 
art software testing 
wiley 

experiments computer software complexity reliability 
proceedings th international conference software engineering pages 
ieee press 
raymond 
quantitative aspects software validation 
sigplan notices se may 
david sa ord douglas lee david hess 
tamu security package 
edward editor proceedings security iv conference pages 
john marko 
books 
eugene spa ord 
extending mutation testing find environmental bugs 
software practice principle feb 
david weiss victor basili 
evaluating software development analysis changes data software engineering laboratory 
ieee transactions software engineering se february 

