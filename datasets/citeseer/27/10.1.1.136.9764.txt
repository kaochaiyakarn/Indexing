object oriented type inference new approach inferring types un typed object oriented programs inheritance assignments late binding 
guarantees messages understood annotates pro gram type information allows polymorphic methods basis op compiler 
types finite sets classes subtyping set inclusion 
trace graph algorithm constructs set conditional type constraints computes solution fixed point derivation 
untyped object oriented languages assign ments late binding allow rapid prototyping cause classes inherit implementation spec ification 
late binding cause pro grams unreliable unreadable inefficient 
type inference may help solve prob lems far proposed inference algorithm capable checking common com pletely untyped programs 
new type inference algorithm basic object oriented language inheritance late binding 
permission copy fee part material granted provided copies distributed direct commercial advantage acm copyright notice title publication date appear notice copying permission association computing machinery 
copy republish requires fee specific permission 
acm jens palsberg michael schwartzbach pa aau aau dk computer science department aarhus university ny munkegade dk denmark oopsla pp 
algorithm guarantees messages un annotates program type infor mation allows polymorphic methods basis optimizing compiler 
types finite sets classes subtyping set 
concrete program algorithm constructs finite graph type constraints 
program constraints solvable 
algorithm computes solution worst case exponential time 
graph contains type information derived program keeping track nil values flow analyzing contents instance variables 
algorithm capable checking com mon programs particular allows phic methods 
algorithm similar previous type inference type constraints differs handling late binding conditional constraints re solving constraints fixed point deriva tion unification 
example language resembles smalltalk avoids metaclasses blocks primitive meth ods 
provides explicit new expressions classes natural pro language 
section discuss impacts late binding type inference examine previ ous 
sections briefly outline example language type inference algo rithm show examples capabilities 
late binding late binding means message send dynam ically bound implementation depending class receiver 
allows form poly morphism fundamental object oriented programming 
involves danger class receiver implement method message receiver may nil 
furthermore late binding control flow program hard follow may cause time consuming run time search implemen tation 
significantly help optimizing compiler message send program text infer information 
receiver nil 
receiver instance class implement method message 
classes possible non nil re execution program 
note available set classes induced particular program 
observations lead terminology 
terminology type type finite set classes 
induced type induced type ex pression concrete program set classes possible non nil values may evaluate execution particular program 
sound approximation sound approxima tion induced type expression concrete program superset induced type 
note sound approximation tells truth truth induced type 
induced types generally uncomputable compiler sound approximations 
induced type subtype sound approximation ing set inclusion 
note notion type investigated differs usually theoretical studies types object oriented programming theories difficulties late binding assignments 
goals type inference phrased follows 
goals type inference safety guarantee guarantee message sent nil instance class implements method message type information sound approximation induced receiver 
note ignore checking receiver nil standard data flow analysis problem treated separately 
type inference successful program typable error occur 
compiler avoid inserting checks code 
furthermore type information receiver singleton set compiler early binding message possible method line substitution 
similarly type information empty set receiver known nil 
type information obtained variables arguments may annotate program benefit programmer 
smalltalk untyped object oriented lan guages traditionally implemented interpret ers 
ideal prototyping exploratory development inefficient space de real time applications embedded systems 
needed optimizing compiler near programming phase get required efficiency safety guarantee 
compiler produces code tolerated slow usual programming environment 
type inference algorithm basis optimizing com piler 
note safety guarantee induced types sensitive small changes program 
separate compilation classes impossible 
typed objectoriented languages simula beta eiffel allow separate compilation sacrifice flexibility 
relations types ure 
implementation summarized fig programs implementation untyped interpretation typable compilation typed separate compilation types implementation 
graver johnson lo type system smalltalk take intermediate approach tween untyped typed requiring pro grammer specify types instance variables types arguments inferred 
suzuki pioneering inferring types smalltalk handles late binding assuming message send may invoke methods message 
turned yields algorithm capable checking common programs 
approaches include notion method type 
new type inference algorithm abandons idea uses concept conditional constraints derived finite graph 
ll addressed type inference language small identical example language 
uses radically different technique type schemes unification wand 
lists pro grams algorithm type check 
algorithm type check particular fourth shown appendix uses record types extendible recursive 
produce precise typings approach clear typings useful optimizing compiler 
problem type schemes correspond sin infinite sets monotypes finite sets precise 
approaches similar keeping track nil values flow analyzing contents variables 
currently investigating possible relations 
going details type inference algorithm outline example language apply 
language example language resembles smalltalk see 
set classes followed expres sion value result executing pro gram 
class defined inheritance contains instance variables methods method message selector ml 
formal pa rameters expression 
language avoids metaclasses blocks primitive methods 
stead provides explicit new ex tests condition non nil 
result sequence result expression sequence 
expression self class new yields instance class self 
expression instanceof classid yields run time check class membership 
check fails expression evaluates nil 
smalltalk system primi tive methods written assembly language 
dependency primitives necessary theoretical study classes true false natural list programmed language shown appendix 
program cr type inference class class classid inherits classid ml classid method method ml idr id expression id classid new self class new instanceof classid self super id nil type inference algorithm fun observations 
observations inheritance classes inherit implementation specification 
classes finitely classes program 
message sends finitely syn tactic message sends program 
observation leads separate type infer ence class subclasses 
achieved expanding classes doing type inference 
expansion means removing inheritance syntax example language 
copying text class subclasses kinds type information replacing message send super message send renamed version method replacing self class new expression classid new expression classid enclosing class expanded program 
idea expansion inspired graver johnson lo note size expanded program quadratic size orig inal 
second third observation lead finite representation type information execu tions expanded program representation called trace graph 
graph finite set type constraints generated 
bility program solvability constraints 
appendix contains example programs illustrate different aspects type inference algorithm see overview fig ure 
program texts listed corresponding constraints solu tion exists 
program gives typical example type check ll 
invite reader consult appendix reading section 
trace graph contains kinds type infor mation 
local constraints generated method bodies contained nodes 
connecting constraints reflect sends attached edges 
message conditions discriminate receivers attached edges 
trace graph nodes nodes trace graph obtained various methods implemented program 
method yields number different nodes syntactic message send cor responding selector 
situation illustrated see nodes method implemented classes cl number nodes trace graph quadratic size program 
single node main expression program may think special method parameters 
methods types pro vided type annotations types formal parameters result 
particu lar method implementation may represented nodes trace graph 
enables assigned different type annotations syntactic call 
allows effectively obtain method polymorphism finite set method monotypes 
local constraints node contains collection local constraints types expressions satisfy 
syntactic occurrence expression im plementation method regard type overview example programs 
unknown variable el 
exact type information course uncomputable 
approach ignore aspects program ex 
approximations nil values keep track nil values 
instance variables flow analyze contents instance variables 
approximation stems discussion goals type inference second corre sponds viewing instance variable having single possibly large type leading iden tify type variables different occurrences instance variable 
figures program fragments typical type approxi mations 
cases constraints demand false inclusion true natural 
suzuki ll approximations 
expression local constraints gener ated phrases derivation accord ing rules 
idea ing constraints type variables program syntax exploited 
constraints guarantee safety cases approximations manifest selves 
notice constraints ex sends pressed inequalities forms constant variable variable constant variable variable exploited 
different node employs unique type variables types instance variables com mon nodes corresponding methods imple mented class 
similar idea graver johnson lo 
trace graph edges edges trace graph reflect possible connections message send method may implement 
situation illustrated 
node corresponds method contains message send form edge sender node receiver node corresponds implementation method label edge condition message send may executed class particular method implementations class cr class class trace graph nodes 
method implemented 
edge associate connecting constraints reflect relationship formal actual parameters results 
situation generalizes trivially methods parameters 
note number edges quadratic size program 
global constraints obtain global constraints entire pro gram combine local connecting constraints manner illustrated 
pro duces conditional constraints ties need hold conditions hold 
global constraints simply union con ditional constraints generated paths graph originating node corresponding main expression program 
finite set graph finite shown section size constraint set may ex worst cases exponential 
set global constraints solution expression id ml el el el es new instanceof self id nil xm sender connecting constraints uan constraint id el id el en en implements ml 
edi er ez ez es new instanceof cl enclosing class id idi nil local constraints 
method actual equals formal provides approximate information dynamic behavior program 
consider execution program 
ob serving trace pattern method executions trace graph 
ex pression evaluated point val value class class object solution global con straints result holds 
soundness theorem val nil class val en quite easy see true 
sketch proof induction number mes sage sends performed trace 
zero rely local constraints receiver formal result equals actual result trace graph edges 
dynamic semantics eas ily verify satisfaction implies property 
extend trace message send implemented method class inductively assume xn 
implies local constraints node corresponding invoked method hold conditions hold solution 
relationship actual formal parameters results soundly rep resented connecting constraints hold result follows 
note expression occurring method appears ic times trace graph ic type variables eni elk global constraints 
sound approximation induced ir conditional constraint kl ks local constraints final node connecting constraints final edge type obtained wh appendix gives efficient algorithm compute smallest solution extracted constraints decide exists 
algorithm worst quadratic size constraint set 
complete type inference algorithm summa 
type annotations consider solution type constraints produce type annotation program 
annotations provided benefit programmer 
instance variable single associ ated type variable 
type annotation sim ply xjj 
programmer knows upper bound set classes instances may reside method finitely type annotations obtained corresponding node trace graph 
method implemented class conditional constraints path 
input program example language 
output safety guarantee type information expressions unable type program 
expand classes 
construct trace graph ex program 
extract set type constraints trace graph 
compute solution set type constraints 
solution exists output wanted type information safety guarantee output unable type program 
summary type inference algorithm 
method ml type annotation form programmer knows various manners method may 
constraint solution contains type informa tion methods method types suzuki 
consider example polymorphic identity function 
technique yields method type annotations id true true id natural natural method type suzuki framework id true natural true natural allow succ istrue message send lead rejection program 
exponential worst case examples appendix show cases constraint set quite small fact linear size program 
situation theoretical worst case allows constraint set exponential size program 
running time inference algorithm depends primarily topology trace graph 
shown program sketch trace graph 
induced constraint set ex graph exponentially different paths 
constraints family conditions similar words regular language ccc dcc size clearly exponential note situation similar type inference ml worst case tial useful practice 
scenario fact il exponential running times ml 
similarity algorithms generate po exponential constraint set solved polynomial time 
class var method ml method met hod method class var method ml method rn method mn method worst case program 
type inference algorithm sound han dle common programs 
conceptually simple set uniform type constraints con structed solved fixed point derivation 
improved orthogonal effort data flow analysis 
underlying type system simple types finite sets classes subtyping set inclusion 
implementation type inference algorithm currently undertaken 
cludes extending optimizing compiler 
inference algorithm easy modify full smalltalk metaclasses simply classes blocks treated objects single method primitive methods handled stating constraints ma chine code satisfy 
challenge extend algorithm produce type annotations type substitution see 
appendix basic classes class object class true met hod istrue true class false object new method istrue nil false henceforth abbreviate true new true false new false class natural var rep met hod iszero rep false true method succ natural new update self method update rep self met hod pred self iszero istrue self rep method iszero istrue false self iszero istrue true self pred pred natural henceforth abbreviate natural new recursively succ 
class list var head tail method head tail method cons self class new self method isempty head false true method car head method cdr tail method append alist self isempty istrue alist tail append alist cons head method insert self isempty istrue self cons head istrue self cons tail insert cons head met hod sort self isempty istrue self tail sort insert head method merge alist self isempty istrue alist list class comparable head alist car istrue tail merge alist cons head self merge alist cdr cons alist car var key met hod get key key method set key key method key get key comparable appendix example programs class method class method true new succ constraints new xii new new bll bl fl natural fl true true true fj natural natural fl succ natural new succ succ smallest solution xl new new fj new natural true true trace graph sketch conditions 
class method class inherits method new new am constraints new ali ua new new ub bll imi natural smallest solution ml natural new new trace graph sketch program 
class method id new id succ new id true istrue constraints uc new cl uc new new id natural new id natural natural new id natural new id succ new uc new new true uc new id true true true new id true true false true new id true object new id true istrue false new id true new id true istrue smallest solution bnl uc new id new id succ natural true new id true true new id true istrue object trace graph sketch polymorphic method 
class method self nil new nil constraints new ud cd new nil new self new nil new self self xl ni new ni ud new new new xl ud new self nili self new self nili self xl new new new new xl xl new self self xl nil smallest solution new nil ni self nil li self xl new nili xn self nili self xl new trace graph sketch recursive method 
succ true istrue constraints bn natural natural ud true true true false safe program rejected 
nil true succ constraints nil true natural nil true true true true natural safe program rejected 
class student inherits comparable 
student class inherits list method self isempty istrue self car instanceof student self cdr succ self cdr example program 
appendix solving systems conditional inequalities appendix shows solve finite system conditional inequalities quadratic time 
definition ct system consists finite set atoms 
finite set 
finite set conditional inequalities form cl cz ck condition form atom inequality forms set atoms 
solution system assigns variable set conditional inequalities satisfied 
application models set classes oc concrete program 
lemma solutions closed tion 
ci system solutions unique minimal 
proof consider conditional inequality form cl 
ck li 
shall show nili solution 
condition nili true li aj conditions true true li fur thermore solutions true lie general bk implies follows nili solution 
solutions nili unique smallest 
definition ci system atoms error da lattice assignments distinct variables 
assignment el ement error ordered lattice see 
different error assigns set atoms variable 
assignment new assignment defined follows 
error error 
inequality enabled conditions true enabled inequality form cy error smallest pointwise extension enabled inequality form cq 
enabled inequality form ai 
clearly monotonic lattice 
lemma assignment error solu tion ci system 
solutions error smallest fixed point 
proof solution clearly 
equal error extend fixed point 
conversely fixed point enabled inequalities hold 
solutions fixed point error 
error definition fixed point result follows 
means find smallest solution decide exists need compute fixed point 
lemma ci system fixed point equal lim ma proof standard result monotonic functions complete lattices 
lemma ca number di erent conditions ci system lim 
ms proof conditions enabled fixed point obtained single application 
condition enabled assignment remain enabled larger assignments 
follows iterations new conditions enabled fixed point obtained iterations 
lemma smallest solution ci system decision exists obtained quadratic time 
proof follows previous lemmas 
alan borning daniel ingalls 
type dec inference system smalltalk 
ninth symposium principles programming languages pages 
acm press january 
cardelli 
semantics multiple inheritance 
kahn macqueen gordon plotkin editors semantics data types pages 
springer verlag lncs 
cardelli wegner 
understanding types data abstraction polymorphism 
acm computing surveys december 
cook 
denotational semantics inheritance 
phd thesis brown university 
william cook jens palsberg 
denotational semantics inheritance correctness 
proc 
oopsla acm sigplan fourth annual conference object oriented systems languages applications tion computation 

appear informs scott chris tomlinson 
type theories object oriented programming 
acm computing surveys march 
pi pi po wi pi kristensen 
madsen pedersen nygaard 
beta programming language 
shriver wegner editors research directions object oriented programming pages 
mit press 
wi 
dahl nygaard 
simula common base language 
technical report norwegian computing center oslo norway 
goldberg robson 
smalltalk lan guage implementation 
addison wesley 
justin 
graver ralph johnson 
type system smalltalk 
seventeenth symposium princi pie programming languages pages 
acm press january 
justin owen graver 
type checking type inference object oriented programming languages 
phd thesis department computer science university illinois urbanachampaign 
august 
andreas 
polymorphic type inference simple object oriented programming language state 
technical report tech 
bericht nr 
des saarlandes 
johnson 
type checking 
proc 
oopsla object oriented programming systems languages 
sigplan notices november 
kamin 
inheritance smalltalk denote tional definition 
fifteenth symposium principles programming languages pages 
acm press january 
marc kaplan jeffrey 
general scheme automatic inference variable types 
fifth symposium principles programming lan guages pages 
acm press january 
mairson 
decidability ml typing com plete deterministic exponential time 
seventeenth symposium principle programming languages 
acm press january 
bertrand meyer 
object oriented software construc tion 
prentice ha englewood cliffs nj 
wi pi wi pi suzuki 
inferring types smalltalk 
eighth symposium principle programming languages pages 
acm press january 
pi pi robin 
theory type polymorphism pro gramming 
journal computer system 
mishra reddy 
declaration free type checking 
twelfth symposium principles programming languages pages 
acm press jan 
jens palsberg michael schwartzbach 
type sub object oriented programming 
proc 
oopsla ecoop acm sigplan fifth annual conference object oriented programming systems language applications european conference object oriented programming 
jens berg michael schwartzbach 
static typ ing object oriented programming 
computer sci ence department aarhus university 
pb 
submit ted publication 
jens palsberg michael schwartzbach 
type safe code reuse 
proc 
ecoop fifth eu conference object oriented programming 
reddy 
objects closures semantics object oriented languages 
proc 
cm conference lisp functional programming pages 
acm 
didier 
typechecking records variants natural extension ml 
sixteenth symposium principles programming languages pages 
acm press january 
michael schwartzbach 
type inference ities 
proc 
tapsoft si 
springer verlag lncs 
stroustrup 
ctt programming language 
addison wesley 
mitchell wand 
simple algorithm proof type inference 
informaticae 
mitchell wand 
type inference record tion multiple inheritance 
lics fourth symposium logic computer science 
