flexible instrumentation software dynamic translation software dynamic translators purposes dynamic code optimization profiling security 
applications need instrument program binary code gather run time information program 
instrumentation varied different software dynamic translator applications requiring different kinds information 
need flexible mechanism information gathering instrumentation software dynamic translators 
describe approach providing flexible instrumentation 
experimentally evaluate approach investigate overhead demonstrate flexibility different software dynamic translation systems 

years number systems introduced dynamically modify control execution program 
example dynamic optimizers jalapeno dynamo apply code transformations take advantage date information run time behavior program :10.1.1.36.4338:10.1.1.12.7138
examples software dynamic translators sdt include code security checkers micro architecture simulators program debuggers :10.1.1.13.6511:10.1.1.13.660:10.1.1.13.660
sdt systems typically collect information executing program order decisions control program execution 
example program debuggers may insert instrumentation application binary collect information program values 
example dynamic code optimizers generally focus optimization efforts frequently executed portions program requires instrumentation identify hot code segments traces 
dynamo instrumentation counters help identify hot traces optimization 
similarly jalapeno uses counters find hot methods optimization 
support diverse instrumentation needs software dynamic translators flexible mechanism needed instrumenting program run time 
mechanism configured variety purposes including software testing dynamic optimization program profiling architecture simulation 
considerations naveen kumar bruce department computer science university pittsburgh naveen cs pitt edu www cs pitt edu copa designing mechanism code instrumentation including run time performance memory overhead flexibility gather different kinds information different durations time ability dynamically insert remove instrumentation support different granularities information gathering 
discuss requirements 
instrumentation low cost 
sdt system instrumentation occurs runtime program cost kept low 
instrumentation invoked times code executed 
important low overhead instrumentation terms number instructions 
second different applications need gather different kinds information instrumenting code instrumentation system easily reconfigured different purposes 
instrumentation done manner independent target architecture aid retargeting sdt system new processors operating systems 
third system flexible allow different life spans instrumentation 
instrumentation remains place execution program permanent instrumentation 
instrumentation needed instance profiling program collect edge counts 
case run time overhead instrumentation important static cost inserting instrumentation 
instrumentation remains portion execution program transient instrumentation 
transient instrumentation needs removed period time execution program 
instrumentation needed instance doing path coverage analysis sampling program certain intervals execution 
instrumentation static overhead inserting instrumentation may important run time overhead 
fourth instrumentation mechanism provide low cost dynamic insertion removal instrumentation 
mechanism permit inserting instrumentation executing program gather new information new locations program 
similarly instrumentation removable fly program executes 
aid insertion removal instrumentation instrumentation disturb binary program little possible 
minimally impacting program easier quickly insert instrumentation recover original form program removing instrumentation 
possible levels instrumentation point binary program 
example goal able profile program collect edge counts function call counts may need instrument single call instruction twice purposes 
instrumentation mechanism permit different granularities information gathering 
levels may include individual instructions basic blocks code traces call sites levels 
describes flexible instrumentation mechanism satisfies requirements 
approach uses trigger action mechanism instrumentation 
trigger fired property program satisfied action taken trigger fired 
example consider instrumentation code security checks system calls software dynamic translator 
system calls unsafe conditions determined security policy enforced system take appropriate action terminating execution program 
purpose mechanism instrument associate trigger system calls program 
trigger hit executes code checks system call safe 
unsafe trigger fired action routine called enforce security policy 
describe trigger action mechanism implementation mechanism sparc architecture solaris operating system 
describe mechanism applications gather varying kinds information demonstrate flexibility approach 
consider applications hardware cache simulator profiler gather edge counts profiler find working set program basic blocks 
overhead instrumentation applications evaluated investigate run time overhead approach 
organization follows 
section describes software dynamic translator strata 
section presents trigger action mechanism section discusses implementation mechanism 
section presents experimental results 
section describes related section summarizes 

software dynamic translation sdt allows modification executing program inserting new code modifying existing code controlling execution program way 
organization sdt system typically software layer executable takes control modifies application code 
addition usually code cache sdt keeps modified executable call fragment cache 
program directly executes fragment cache modified 
sdt works translating blocks instructions executable program caching blocks possibly modifying instructions fragment cache 
blocks instructions fragment cache called fragments 
fragment set instructions start fragment condition target branch jump fragment condition branch jump 
branch instruction fragment modified branch exit stub returns control sdt 
sdt translates caches target fragment fragment cache 
fragment successors inside fragment cache sdt links avoid unnecessary context switches sdt application 
way program fragments materialized fragment cache execution entirely fragment cache 
possible modify instructions translation phase criteria emit modified instructions fragment cache 
gives flexibility interpreter program undergoes direct execution 
modifications include code optimizations partial function inlining path redundancy elimination 
common technique software dynamic translators form instruction traces 
trace sequence instructions path 
trace collected hot path emitted fragment cache potential boost performance program 
hot paths dominate program execution time applying optimizations code re layout significantly improve performance 
traces important optimization 
example applications sdt need collect information running program collecting information hot traces may representative program 
strata software dynamic translator system retargetable reconfigurable system 
aims provide flexible interface instrumentation strata 
strata implemented set target independent common services set target dependent specific services interface communicate 
common services strata include memory management code cache management dynamic linker virtual cpu mimics standard hardware fetch decode execute engines 
target specific services ones dynamic translation 
strata designed virtual machine sits program cpu translates program instructions execute cpu 
strata vm started function call application binary saves application context starts translating caching instructions application 
infrastructure provides flexible instrumentation application materializes fragment cache 
shows working strata virtual machine 
instruction cached goes different stages virtual machine fetch decode translate 
translate stage strata instrument application code write fragment cache 
provide interface vm different mechanisms instrumenting code 
interface extension original translate stage shown 
context capture new pc context switch application binary dynamic translator cached 
finished 
os cpu new fragment fetch decode translate pc working strata virtual machine 
trigger action mechanism basic idea trigger action approach event driven mechanism checks run time property program 
property identified call back action perform information gathering functions 
trigger action mechanism instrument program point code time program execution 
instrumentation inserted program perform property check call back called trigger action pair 
trigger contains code property check invoke associated action property check satisfied 
instance example mentioned section property check test instruction check system call system call safe security policy system calls 
case termination semantics security violation action abort program execution access violation 
parts trigger static component dynamic component 
static component check done sdt system strata writing instructions fragment cache 
dynamic component verifies dynamic property code 
example suppose want count addition instructions register operand zero value 
case trigger verify instruction addition content source registers zero 
conditions satisfied action increments counter counts number dynamically executed additions source operand value zero 
case strata verify opcode instruction add addi static check writing instructions fragment cache 
instruction addition dynamic check inserted verify content source operands zero 
essentially attaching triggers particular code blocks instrumentation system verify static properties instrumenting code 
inserting new trigger action pair guarded static check 
dynamic check done code inserted 
shows operational view trigger action mechanism 
left part shows fragment cache instrumented points 
instrumentation points takes program control dynamic checks shown middle 
dynamic check transfer program control actions shown right side 
instrumentation instrumentation instrumentation instrumentation dynamic check dynamic check dynamic check action action operational view trigger action mechanism notice dynamic checks shared different instrumentation points cache 
likewise actions shared different dynamic checks 
sharing helps reduce memory cost triggers actions 
shown single instrumentation point invoke dynamic checks corresponding actions 
call checks compound dynamic checks essentially combine individual checks check multiple things 
compound checks help reduce performance memory overhead doing checks actions point code 

trigger action mechanism strata sparc implemented trigger action mechanism sparc platform strata 
describe basic approach implementation static dynamic checks strata sparc 
describe different implementations dynamic check 
describe implementation action 
implementing static dynamic checks static check easy implement strata way strata vm organized 
add static checks translate stage strata done code written fragment cache 
translated code satisfies static property checked code instrumented dynamic check action 
instrumentation performed fast breakpoint 
fast breakpoint replaces instruction jump instruction takes flow control piece code may monitor modify state machine program 
instruction instruction branch instruction instruction context save call context restore instruction branch dyn check dyn check call action dynamic check fast breakpoint shows fast breakpoints dynamic checks 
shows code breakpoint breakpoint handler consists instructions save context application call boolean function dynamic check restore context application execute original instruction jump instruction executed fragment cache 
context application consists set general purpose registers machine registers condition code registers registers sparc 
need save context application invoking dynamic check action modify part application context dynamic check action 
associate unique breakpoint handler breakpoint breakpoint handler execute unique instruction application instruction return distinct location fragment cache unique breakpoint 
system allocates space fragment cache hold breakpoint handler 
space typically located immediately fragment 
fragments created breakpoints inserted handlers inserted fragment instrumented 
likewise adding dynamic checks fly existing fragments space allocated fragment cache hold breakpoint handler 
preserve code layout fragment cache breakpoint handlers emitted separate code cache 
fragment instruction trampolines fragment fragment instruction branch trampolines breakpoint handler fragment fragments fragment cache instrumentation instrumentation 
middle fragment instrumented 
shows structure fragments fragment cache breakpoint 
insert breakpoint handler fragment shown 
instrumentation techniques modify code fragment cache ensure machine data instruction caches consistent way similar self modifying code 
architectures sparc mips flush portion instruction cache 
architectures intel hardware provides mechanisms enforce consistency data instruction caches 
types instrumentation support different types information gathering trigger action mechanism different implementations dynamic checks 
implementations differ way instrumentation left place application removed 
transient instrumentation removes dynamic check soon dynamic check executed hit permanent instrumentation leaves dynamic check place explicitly removed action 
coupled instrumentation inserts removes dynamic checks fragments fragment cache 
implementations described 
transient instrumentation shows kind instrumentation 
kind instrumentation replace instruction instrumented jump instruction transfers control breakpoint handler 
breakpoint handler code saving context conducting dynamic check 
just application context restored breakpoint handler replaces instruction back original location 
control transferred instruction breakpoint hit 
breakpoint implemented way removes hit 
approach transient breakpoints need removed immediately 
approach inexpensive compared approach need remove breakpoints explicitly discussed 
current implementation breakpoint code remains flush fragment cache 
instruction trampolines save context function call replace instruction branch restore context branch instruction trampolines save context function call replace instruction restore context branch fragment transient instrumentation breakpoint hit left fragment breakpoint hit 
permanent instrumentation shows implementation 
approach similar previous execute instruction displaced instrumentation breakpoint handler 
shows implementation case instrumented instruction branch 
case move delay slot instruction breakpoint handler 
execute delay slot instruction delay slot original branch instruction inside breakpoint handler preserve semantics branch 
offset pc relative branch instructions modified copied breakpoint handler correct taken target location 
new taken target instruction instruction delay slot unconditional branch instruction branches instruction original delay slot instruction fragment 
target original taken target 
branch instruction delay slot instruction ba trampolines save context function call restore context branch instruction delay slot instruction branch permanent instrumentation instrumented instruction branch 
need install breakpoint instruction delay slot branch instrument branch 
benefit fact values general purpose registers remain executing branch instruction instruction delay slot 
case branches look condition codes invoking dynamic check 
dynamic check invoked branch going taken ba instruction trampolines save context function call restore context instruction branch ba branch instruction delay slot instruction trampolines save context function call restore context branch instruction delay slot instruction branch removal breakpoint instrumented instruction non branch instruction left branch instruction right 
removing instrumentation involves copying back instruction original location fragment cache shown 
removal instrumentation easy code breakpoint handler keep original instruction offset start code 
case original instruction branch instrumentation moves delay slot instruction breakpoint handler 
need move branch instruction 
control transfer breakpoint handler happens means branch instruction 
delay slot instruction duplicated fragment original location inside breakpoint handler 
instruction delay slot branch gets executed duplication computational effect 
shows case instrumented instruction branch shows case branch instruction 
coupled instrumentation type instrumentation combination approaches shown 
shows replace instruction jump instruction control breakpoint handler 
breakpoint handler contains code copies back original instruction instruments instruction fragment take control breakpoint handler 
control reaches breakpoint handler simply re installs breakpoint removes current 
advantage approach easier remove breakpoint placed 
needed done second breakpoint handler re instrument instruction 
instruction ba instruction trampolines save context function call restore context replace instruction instrument instruction branch save context replace instruction instrument instruction restore context branch instruction instruction trampolines save context function call restore context replace instruction instrument instruction branch save context replace instruction instrument instruction ba restore context branch fragment coupled instrumentation 
breakpoint handlers located fragment breakpoints hit shown left 
fragment breakpoint location hit time breakpoint handler instrumented instruction hits breakpoints fragment looks left 
branch instruction instrumented technique complicated 
case breakpoint handler needs instrument instruction delay slot insert fast breakpoint branch delay slot instructions instrument branch instruction 
avoid problem instrument target branch 
branch hit breakpoint taken know target branch place second breakpoint target instruction 
second breakpoint taken breakpoint handler re inserts breakpoint removes current 
instrumentation applied different fragments contrast previous techniques 
instrumentation needs remain substantial number hits permanent cost technique permanent breakpoints 
technique involves twice number context saves restores permanent instrumentation 
implementing action action high level routine system call trigger fires 
implemented architecture independent fashion high level function called dynamic check satisfied 
instance action may shared multiple dynamic compound checks 
action function called context dynamic check 
dynamic check saves entire application context invoking action restores transferring control back application 
action guaranteed affect context executing program 
default behavior action return dynamic check 

experiments implemented trigger action mechanism strata sparc different uses technique 
implemented hardware cache simulator simulates instruction data cache 
second implemented profiler collects edge counts execution program 
third implemented system collects working set program 
experiments run lightly loaded mhz ultrasparc iie workstation mb ram running solaris 
measured memory cpu overhead trigger action system 
measure cost incurred system real application compared performance spec benchmarks instrumentation performance running strata sparc instrumentation 
cost instrumentation instrumentation techniques overhead save restore context application 
function call overhead triggers actions 
compute memory overhead instrumentation counted number instructions required instrumentation point techniques 
compute cpu overhead wrote program tightly bound loop iterating times instrumented fragments program exactly 
cost instrumentation count time taken inside triggers actions application dependent 
checks trigger action invoked 
instrumentation techniques measured runtime overhead individual instrumentation point 
case transient instrumentation instrumentation removed hit breakpoint 
measure cost instrumentation link fragments fragment cache strata 
ensures strata gains control program fragment executed re instrument fragment executed 
sure link fragments uninstrumented program computing overhead 
results experiment shown table 
num 
instructions time transient ns permanent ns coupled ns table memory cpu overhead instrumentation techniques expense instrumentation comes overhead saving restoring program context 
save restore involves instructions overhead dummy call trigger action instructions 
control transfers breakpoint handler take instructions cost emitting code run time transient coupled instrumentation techniques instructions instruction additional instruction 
doing transient coupled instrumentation flush machine cache 
sparc register windows save restore registers instruction context switch save global registers machine registers condition code registers 
possible way improve context switch performance partial context save restore registers needed dynamic check action known 
architecture register windows available approach may essential performance 
partial context switches help sparc window spills window saved restored memory 
table cost instrumentation high compared number instructions executed presence branch jump call instructions ranged permanent instrumentation coupled instrumentation 
transient coupled instrumentation flush instruction flush hardware cache hurt performance 
appears permanent instrumentation expensive instrumentation technique 
techniques lower cost depending instrumentation needs removed 
hardware cache simulation application instrumentation approach hardware cache simulator 
purpose instrumented instruction fragment load store instruction 
system inserts instrumentation fragment creation time possible single call instruction cache simulator fragment base address fragment application binary number instructions fragment arguments 
simulator simulate icache instructions fragment information 
cache instrumented load store instruction 
static part trigger checked instruction load store data cache simulation 
static check returned true instruction cache simulation 
application dynamic part trigger call action send memory cache simulation instruction data cache 
action routines computed effective address memory 
slowdown mcf tw vortex vpr gzip strata breakpoints trigger action slowdown cache simulation experiments shows breakdown slowdown spec benchmarks 
run time benchmarks normalized run time application instrumentation 
see overhead comes action dynamic check lightweight case 
fast breakpoints account biggest part runtime 
profiling edge counts application needed profile program find edge counts fragments fragment cache 
fragments execute successively constitute edge 
wanted collect profile sdt system change layout code fragment cache pettis hansen style 
purpose needed instrumentation point fragment keep instrumentation permanently 
ran set benchmarks instrumentation measured cost instrumentation 
experiment static check looked instruction instruction fragment 
dynamic check called action 
action hash lookup current edge inserted new edge hash lookup failed incremented count succeeded 
shows breakdown costs incurred experiment 
slowdown mcf tw vortex vpr gzip strata breakpoints trigger action slowdown block placement experiments demonstrates action accounts biggest part run time overhead 
case slowdown program high cache simulation 
cache simulation involved lot instrumentation points experiment load store instruction program instrumented case 
experiment gzip overhead hits breakpoints benchmarks 
collecting working set application needed profile program order collect set fragments temporally close execution 
wanted find optimal size fragment cache strata application 
time needed temporal information lot data collected information sampling execution program 
sampled fragments fragments executed 
case static check trigger involved checking instruction instruction fragment 
dynamic check trigger verified sampling mode executed fragments sampling edges current sample 
action saved id current fragment sampling mode incremented counter number fragments executed sampling non sampling modes 
ran set benchmarks shown 
slowdown mcf tw vortex vpr gzip strata breakpoints trigger action slowdown working set experiment overhead trigger action system lowest application 
reason action case simple 
time action involves incrementing counter 
disparity slowdown incurred depends times breakpoints hit 
number hits breakpoint case previous case exactly trends figures slightly different 
due fact previous experiment involved hash lookup action routines incur variable amount cost depending number conflicts hash table 
experiment shows infrastructure support different kinds information gathering including actions behavior changes time 

related instrumentation techniques software dynamic translation systems number purposes including dynamic optimizations software security purposes binary translation code monitoring :10.1.1.36.4338:10.1.1.12.7138:10.1.1.13.660:10.1.1.13.660
systems instrumented code hard coded system 
dynamo instrumentation happens interpreter code emitted fragment cache new instrumentation inside fragment cache involve flushing cache :10.1.1.12.7138
walkabout works similar manner 
case dynamo rio instrumentation typically edge basic blocks done inside basic block sandboxing system call removing instrumentation requires flushing fragment cache 
deli system similar 
jalapeno yield points instrumented method loop back edges :10.1.1.36.4338
adding new yield points system difficult removing existing ones difficult 
concept fast breakpoints introduced kessler 
author technique referred permanent instrumentation 
fast breakpoints applied flexible manner general infrastructure doing instrumentation 
code modification systems dyninst technique similar technique order instrument running program :10.1.1.13.660
fast breakpoints instrument binary 
systems built specific purposes best knowledge retargetability reconfigurability mind 
system designed distributed systems program transformations optimizations 
dyninst meant performance monitoring parallel systems 
instrumentation system implemented monitoring debugging profiling os kernels 

summary flexible instrumentation approach software dynamic translators 
approach uses trigger action mechanism applies static property checks code generation dynamic property checks code execution 
associated action invoked property satisfied gather information executing program 
showed different mechanisms instrumentation compared memory performance costs 
showed applications information gathering demonstrate flexibility approach supporting different instrumentation needs 
scott kumar davidson soffa 
reconfigurable retargetable software dynamic translation proceedings annual ieee acm international symposium code generation optimization 
san francisco california march 
scott davidson 
safe virtual execution software dynamic translation proceedings annual computer security application conference las vegas nevada december 
bala duesterwald banerjia :10.1.1.12.7138
dynamo transparent dynamic optimization system 
proc 
acm sigplan conference programming language design implementation pp 
arnold fink grove hind sweeney :10.1.1.36.4338
adaptive optimization jalapeno jvm 
proceedings acm sigplan conference object oriented programming systems languages applications oopsla pages oct 
duesterwald amarasinghe 
design implementation dynamic optimization framework windows 
th acm workshop feedback directed dynamic optimization december 
amarasinghe 
infrastructure adaptive dynamic optimization 
proceedings ieee acm international symposium code generation optimization san francisco california pages march cifuentes lewis ung 
walkabout retargetable dynamic binary translation framework 
technical report tr sun laboratories palo alto ca january 
amarasinghe 
secure execution program shepherding 
th usenix security symposium august 
duesterwald fisher deli new runtime control point 
proc 
micro nov 
srivastava edwards 
binary transformation distributed environment 
microsoft research tech 
rpt 
msr tr hollingsworth miller :10.1.1.13.660
dynamic program instrumentation scalable performance tools 
knoxville tennessee may 
miller 
fine grained dynamic instrumentation commodity operating system kernels 
proceedings third symposium operating systems design implementation osdi pp 

new orleans la february 
usenix 
cmelik keppel 
shade fast instruction set simulator execution profiling 
technical report department computer science engineering university washington june 
witchel rosenblum 
embra fast flexible machine simulation 
proceedings sigmetrics conference measurement modeling computer systems philadelphia may 
schnarr 
applying programming language implementation techniques processor simulation 
phd thesis university wisconsin madison 
kessler 
fast breakpoints design implementation 
proceedings acm sigplan conf 
programming languages design implementation pages 
scott davidson 
strata software dynamic translation infrastructure proceedings ieee workshop binary translation barcelona spain september pettis hansen 
profile guided code positioning 
proc 
acm sigplan conf 
programming languages design implementation pages june 
gupta soffa 
fulldoc full reporting debugger optimized code 
proceedings static analysis symposium 
