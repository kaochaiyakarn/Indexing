mode estimation model programs monitoring systems complex behavior brian williams seung chung massachusetts institute technology massachusetts ave rm 
cambridge ma usa williams chung mit edu vineet gupta drive mountain view ca vineet com deductive mode estimation essential component robotic space systems nasa deep space probes 
robots serve components large robotic networks 
monitoring networks require modeling languages estimators handle sophisticated behaviors robotic components 
introduces rmpl rich modeling language combines reactive programming constructs probabilistic constraint modeling offers simple semantics terms hidden markov models hmms 
support efficient realtime deduction translate rmpl models compact encoding hmms called probabilistic hierarchical constraint automata 
models track system states extending traditional hmm belief update 
highly autonomous systems developed nasa deep space probe ds reusable launch vehicle involve sophisticated modelbased planning mode estimation capabilities support autonomous commanding monitoring diagnosis 
observation sequence mode estimator livingstone williams nayak incrementally tracks state trajectories system terms correct faulty modes component 
trend aggregate autonomous systems robotic networks example create multi spacecraft telescopes perform coordinated mars exploration perform multi vehicle search rescue 
novel model methods need developed monitor coordinate complex systems 
example complex device ds flies asteroid comet ion propulsion 
ds basic functions include weekly course correction called optical navigation thrusting desired trajectory science readings transferring data earth 
function involves complex coordination software hardware 
example optical navigation works pictures difference actual projected locations determine course error 
shuts ion engine prepares camera concurrently 
uses turn uses camera take picture stores picture disk 
images read processed course correction computed 
subtle failures may experience corrupted camera image 
camera generates faulty image stored disk 
time image read processed failure detected 
monitoring system able estimate event sequence delayed symptom 
diagnosing failure requires tracking trajectory reflects description 
identifying trajectory goes livingstone abilities 
livingstone diagnostic systems focuses monitoring diagnosing networks components valves bus controllers simple behaviors 
trajectory spends time way software functions 
ds instance modern embedded systems components involve mix hardware computation software 
robotic networks extend trend component behaviors particularly sophisticated 
addresses challenge modeling monitoring systems composed complex components 
introduce unified language express rich set mixed hardware software behaviors reactive modelbased programming language rmpl 
rmpl merges constructs synchronous programming languages qualitative modeling markov models constraint programming 
synchronous embedded programming offers class languages developed writing control programs reactive systems benveniste berry saraswat logical concurrency preemption executable specifications 
markov models constraint modeling williams nayak offer rich languages describing uncertainty continuous processes qualitative level 
rmpl model frame problem monitoring robotic components variant belief update hidden markov model hmm hmm system described rmpl 
key issue potentially enormous state space rmpl models 
address introducing hierachical constraint encoding hmm called probabilistic hierarchical constraint automata 
show rmpl models compiled equivalent 
demonstrate approach rmpl belief update performed operating directly compact encoding 
hmms belief update theory hmms offers versatile tool framing hidden state interpretation problems including data transmission speech handwriting recognition genome sequencing 
section reviews hmms state estimation belief update 
hmm described tuple denote finite sets feasible states observations initial state function denotes probability initial state 
state transition function denotes conditional probability state current state time observation function denotes conditional probability observed state belief update incrementally computes current belief state likelihood system state conditioned control action performed observation received respectively exploiting markov property belief state time computed belief state control actions time observations standard equations 
simplicity control actions implicit watching program comma delimits parallel processes semicolon delimits sequential processes 
highlights key design features rmpl 
program exploits full concurrency sequential parallel threads execution 
example camera turned engine turned parallel pictures taken serially 
second involves conditional execution switching standby engine 
third involves iteration example engine standby says iteratively test see engine standby proceed 
fourth program involves preemption example watching says task interrupt soon watch condition satisfied 
subroutines exploit similar features 
relies hardware behaviors camera thenl space possible trajectories hmm visualized trellis diagram enumerates possible states time step transitions states adjacent times 
belief update associates probability state graph 
ji ji design desiderata rmpl returning example best expressed toplevel program tight interaction hardware process stochastic 
add probabilistic execution design features model failures uncertain outcomes 
add constraints represent temporal interactions state variables 
summarizing key design features rmpl full concurrency conditional execution iteration preemption probabilistic choice temporal constraint 
rmpl primitive combinators preferred approach developing rmpl introduce minimum set primitives constructing programs primitive driven design features preceding section 
language usable define top primitives variety program combinators optical navigation example 
lower case letters denote constraints upper case letters denote formed rmpl expressions 
term theory refers set constraints hold time point 
program asserts constraint true initial instant time 
program starts behaving instant current theory entails basic conditional branch construct 
program executes instant current theory entail basic construct building preemption constructs 
allows proceed long condition unknown stops condition determined 
program concurrently executes basic construct forking processes 
program starts new copy instant time time 
iteration construct needed finite iterations achieved terminate choose basic combinator expressing probabilistic knowledge 
reduces program probability program probability 
simplicity ensure constraints current theory depend probabilistic choices current state 
achieve restricting constraints asserted scope 
primitive combinators cover design features 
implement rich set derived combinators anonymous including op nav example esterel language berry gonthier 
derived operators built primitives appendix hierarchical constraint automata estimate rmpl state trajectories map rmpl combinators hmms perform belief update 
hmms offer natural way thinking reactive systems direct encoding notoriously intractable 
key contributions representation called probabilistic hierarchical constraint automata compactly encodes hmms describing rmpl models 
extend hmms introducing essential attributes 
hmm factored set concurrently operating automata 
second state labeled constraint holds automaton marks state 
allows efficient encoding temporal processes fluid flows 
third automata arranged hierarchy state automaton may automaton invoked marked parent 
enables initiation termination complex concurrent sequential behaviors 
transition may multiple targets allowing automaton states simultaneously 
enables compact representation recursive behaviors 
attributes prevalent areas digital systems qualitative modeling 
third fourth form basis embedded reactive languages esterel berry gonthier lustre halbwachs signal guernic state charts harel 
allow complex systems modeled involve software digital hardware continuous processes 
develop introducing deterministic equivalent extending markov models 
describe deterministic hierarchical constraint automaton hca tuple set states partitioned primitive states composite states composite state denotes hierarchical constraint automaton 
set start states called initial marking 
set variables ranging finite domain denotes set finite domain constraints set observable variables 
finite domain constraint marked 
associates primitive state holds 
associates primitive state transition function assignments time time instant state hca set marked states called marking 
denotes set specifies set states marked possible markings consider combinator maps automaton starts new copy time instant 
states automaton consist primitive state drawn left circle composite state drawn right rectangle 
start states indicated short arrows 
models physical processes changing interactions enabling disabling constraints constraint store opening valve causes fuel flow engine 
rmpl currently supports propositional state logic constraint system 
state logic proposition assignment variable ranges finite domain constraints indicated lower case letters written middle primitive state 
constraint indicated state constraint implicitly true 
example implicitly constraint true constraints may hidden transitions successive states conditioned constraints entailed store presence absence acceleration 
allows model indirect control indirect effects 
primitive state represent transition function set transition pairs set labels form corresponds traditional representation transitions labeled arcs graph source destination arc label convenience diagrams denote label denote label label indicated implicitly true 
example transitions labels implicitly true 
hca encoding key properties distinguish hierarchical automata employed reactive embedded languages benveniste berry harel 
multiple transitions may simultaneously traversed 
allows extremely compact encoding state automaton set markings 
second transitions conditioned deduced just explicitly assigned 
provides simple general mechanism incorporating constraint systems reason indirect effects 
third transitions enabled lack information 
allows default executions pursued absence better information enabling advanced preemption constructs 
executing hca execute automata initialize marks start states subautomata step maps current marking marking 
trajectory automaton sequence mark ings initial marking set automata initialized creates full marking recursively marking start states descendants composite example applying automata returns set consisting start states contained transitions automaton full marking primitive return execution completes marks remain empty marking fixed point 
involves identifying marked primitive states step collecting constraints marked states constraint store step identifying transitions marked states enabled store resulting states reached step initializing automata reached transition step 
result full marking time step 
transition step transition pair currently marked primitive state marked instant entailed current constraint store computed step 
label said entailed written applying initial marking causes transition back transition internally 
new mark invokes second copy marking start states 
generally responsible initiating time step 
transition back ensures marked 
transition puts new mark step time invoking virtual copy ability automaton multiple states marked simultaneously key compactness novel encoding avoiding need explicit copies simple example example consider rmpl expression watching expression roughly maps automaton start states composite 
transition labeled transitions disabled automaton preempted true 
state primitive state asserts constraint hold goes back repeatedly asserts true 
second automaton primitive start state 
anytime true entire automaton immediately terminate 
waits true goes second state composite 
automaton start state repeats time instant holds 
addition starts automaton checks holds true generates formally state 
behavior automaton follows starts asserting time instant 
true instant checks true asserts succeeding instant 
watches true halts 
probabilistic hca extend hca markov processes replacing single initial marking transition function hca probability distribution possible initial markings transition functions 
describe probabilistic hierarchical constraint automata tuple hca 
denotes probability ini tial marking 
denotes distribution possible transition functions transition function encoded tree 
example section describing choose combinator 
execution similar hca execution probabilistically selects initial marking probabilistically selects transition functions marked primitive state 
probability marking computed standard belief update equations section 
involves computing calculate transition function marking recall transition composed set primitive transitions marked primitive state specifies transition probability primitive state key assumption primitive transition probabilities conditionally independent current marking 
analogous failure independence assumptions gde de kleer williams livingstone williams nayak reasonable assumption engineered systems 
composite transition probability markings computed product transition probabilities primitive state marking state second marking 
calculate observation function marking model similar gde de kleer williams 
constraint store step test observation entailed refuted giving probability respectively 
prediction priori distribution observables assumed uniform distribution possible values 
completes belief update 
remaining tasks compile rmpl implement belief update efficiently 
mapping rmpl rmpl primitive maps defined 
rmpl sub expressions denoted upper case letters recursively mapped equivalent 
asserts constraint initial instant time start state exit transitions automaton asserts time instant terminates 
behaves instant current theory entails automaton add new start state transition state entailed executes instant current theory entail mapping analogous construct introduces condition introduces non monotonicity non monotonic conditions hold instant logic stratified monotonic state 
avoids kinds causal paradoxes possible languages esterel berry gonthier 
parallel composition automata 
composite automaton start states automata starts new copy time instant described section 
choose reduces probability probability 
recall required constraints asserted scope 
ensures probabilities associated transitions 
corresponding automaton encoded single probabilistic start transition allows choose combinator introduces probabilistic transitions 
choose encoding probabilistic choice requires special attention due nested choose expressions 
encode transition function probabilistic tree left enabling simple transformation nested choose expressions 
tree leaf labeled set target states automaton transitions time step 
branches probabilistic node represent distribution disjoint set alternatives labeled conditional probabilities left tree 
probabilities branches emanating node sum unity 
branches deterministic node represent inclusive set choices 
node indicated horizontal bar branches 
branch labeled set left tree 
transition branch node taken label satisfied current state conditions defined hca 

map tree tree compiled level tree shown right root node probabilistic children deterministic ands 
compilation performed distributivity shown commutativity 
commutativity allows adjacent nodes merged conjunctions labels adjacent nodes merged products probabilities 
level tree direct encoding node represents transition functions probability branch terminating node denotes estimation beam search demonstrate belief update simple implementation mode estimation called rmpl follows livingstone williams nayak 
livingstone tracks trajectories trellis diagram beam search expands highest probability transitions step 
implement modify new version step returns set mark ings probability 
primitive defined hca compute states cf cf return step builds sets possible primitive transitions 
step computes set combined state marking transition probability 
step sums probabilities composite transitions target 
step returns approximate belief state 
steps enumerate transition sets decreasing order likelihood probability density space covered 
best enumeration performed system generalized williams nayak 
finds leading solutions problem subject state vector set propositional state constraints additive multi attribute utility function 
tests leading candidate consistency proves inconsistent summarizes inconsistency called conflict uses summary jump leading candidates similarly inconsistent 
computing leading states rmpl computes constraint store extracted step uses results compute final standard equation 
result implementation discussion implementations rmpl compiler rmpl op sat written common lisp 
full rmpl language object oriented language style java supports primitive combinators section variety defined combinators 
rmpl compiler outputs object code 
rmpl uses compiled perform online incremental belief update outlined 
support real time embedded applications rmpl rewritten 
ds example provides simple demonstration rmp addition rmpl developed mission contexts 
prototype demonstrated mit spheres formation flying testbed robotic network soccer ball sized spacecraft flown kc 
rmpl models developed john hopkins apl near near earth asteroid mission 
beam search simplest estimation approaches 
avoids exponential blow space trajectories explored avoids explicitly generating trellis diagram sacrifices completeness 
consequently diagnosis trajectory sufficiently clipped beam search 
range solutions problem exist including approach due hamscher davis uses temporal constraint graph analogous planning graphs 
encoding coupled state abstraction methods incorporated livingstone kurien nayak attractive performance results 
area research incorporation metric time 
cordier introduces intriguing approach model checking algorithms timed automata 
malik struss explores discriminatory power transitions vs state constraints consistency framework 
acknowledgments michael howard shrobe randall davis anonymous reviewers invaluable comments 
research supported part darpa program contract nasa contract 
rmpl defined operators express complex behaviors rmpl rmpl primitives define rich set constructs common embedded languages recursion conditional execution sequence iteration preemption 
section includes representative sample rmpl derived constructs support ds example 
recursion procedure definitions 
recursive declaration form may contain occurrences procedure name implement declaration time tick expression looks see asserted corresponding invoked starts method allows parameterless recursion 
recursion parameters guaranteed compilable finite state automata recursion parameters finite domains 
simply define sequential composition performs finished 
starts written terms preceding constructs detecting termination proposition trigger rmpl detects termination case analysis structure fromherz details 
efficiency rmpl compiler implements directly translating basic combinators 
executes true state terminated immediately 
combinator derived preceding combinators follows choose choose efficiency rmpl derives automaton automaton adding label transitions addition replacing propositional formulas states entailed constraints outside transition constraint automaton enabled 
watching weak preemption operator 
executes true time instant terminates execution instant 
automaton derived automaton adding label transitions starts instant true 
temporally extended version defined watching benveniste berry benveniste berry editors 
look real time systems volume september 
berry gonthier berry gonthier 
esterel programming language design semantics implementation 
science computer programming november 
de kleer williams de kleer williams 
diagnosing multiple faults 
artificial intelligence 
fromherz markus fromherz vineet gupta vijay saraswat 
cc generic framework domain specific 
popl workshop domain specific languages 
guernic le guernic le gauthier le 
programming real time applications signal 
proc ieee pages 
halbwachs halbwachs caspi pilaud 
synchronous programming language lustre 
proc ieee pages 
hamscher davis hamscher davis 
diagnosing circuits state inherently underconstrained problem 
proc aaai pages 
harel harel 
statecharts visual approach complex systems 
science computer programming 
kurien nayak kurien nayak 
back consistency trajectory tracking 
proceedings aaai 
cordier cordier 
timed automata model improve classification sequence images 
proc ecai 
malik struss malik struss 
diagnosis dynamic systems necessarily require simulation 
proceedings dx 
saraswat saraswat jagadeesan gupta 
timed default concurrent constraint programming 
symb comp november december 
williams nayak williams nayak 
model approach reactive self configuring systems 
proc aaai pages 
