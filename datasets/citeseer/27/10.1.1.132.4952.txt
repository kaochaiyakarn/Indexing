network coordinates wild jonathan paul gardner margo seltzer harvard school engineering applied sciences jonathan margo eecs harvard edu com network coordinates provide mechanism selecting placing servers efficiently large distributed system 
approach works long coordinates continue accurately reflect network topology 
conducted long term study subset plus node coordinate system exhibited problems network coordinates frequently criticized example inaccuracy fragility presence violations triangle inequality 
fortunately show simple techniques remedy problems 
azureus bittorrent network testbed show live large scale network coordinate systems behave differently tame planetlab simulation counterparts 
find higher relative errors triangle inequality violations higher churn 
evaluate number techniques applied azureus efficiently produce accurate stable network coordinates 
performance internet applications distributed hash tables web caches overlay networks relies accurate latency estimation participants 
researchers propose acquiring measurements various techniques proxy measurement landmark binning decentralized network embeddings 
network embedding subset inter node latency measurements embedded low dimensional metric space 
node maintains network coordinate metric distance coordinates space predicts real world latencies 
examines performance internet scale network embeddings study subset node live coordinate system 
network coordinates attractive properties latency prediction internet criticized requiring expensive maintenance having prediction accuracy significantly worse direct measurement methods meridian 
critics say network coordinates unproven idea practice internet routing policies cause triangle inequality violations 
supporters respond claims accuracies reasonable demonstrated coordinate maintenance built top existing application communication 
support claims simulations small scale live deployments planet lab 
provides missing piece debate data analysis truly large scale long running network coordinate system 
azureus file sharing network runs node network coordinate system main artifact analysis experimentation 
result collaboration azureus team gardner team harvard seltzer 
gardner contacted harvard team azureus exhibiting difficulties addressed earlier planetlab coordinate system 
merged techniques previous test branch azureus code approximately clients 
previous techniques wild azureus continued experience high errors 
occurred gossip pattern convergence coordinate maintenance piggybacked traffic coordinate heavily skewed small segments network failed globally accurate 
created simple new technique called neighbor decay smoothly manages skewed neighbor sets retaining appealing zero maintenance property azureus coordinates 
techniques place azureus coordinates inference internet scale coordinate systems general tackle basic goal quickly efficiently optimizing anycast decisions correct latency estimates 
approaches internet scale coordinates partially isolated analyzed set major remaining impediments 
contributions improvements live azureus coordinate system producing improvement accuracy order magnitude improvement stability 
new coordinates optimize dht traversal help usenix association nsdi th usenix symposium networked systems design implementation ing application pick physically close nodes lookup delay compared direct logical path 
new technique managing neighbors coordinate systems gossip piggybacked existing traffic zero maintenance messages 
new large scale latency matrix providing valuable new portal internet behavior 
previous large matrices dns servers capture latencies actual nodes 
evidence internet scale latency estimation coordinates works 
find intrinsic dimensionality large scale systems previous studied smaller networks show world flattens near planar euclidean coordinates 
analysis major barriers accuracy churn drift intrinsic error corruption latency variance 
techniques lowering barriers show latency variance requires fundamentally new approach latency prediction 
section explain practitioners azureus developers network coordinates largescale deployments review azureus network coordinate algorithm 
section dense latency matrix analyze characteristics azureus latency distribution determining intrinsic dimensionality extent triangle inequality violations 
section describe techniques integrated azureus code 
section review metrics evaluating coordinate systems 
section examine live performance azureus methods azureus clients ran planetlab crawling instrumented clients run approximately azureus users application level benchmark coordinates optimize dht hop selection 
section examine primary causes remaining difference current live accuracy appears achievable simulation results 
section review approaches estimating latencies large distributed systems 
section conclude 
background azureus currently popular clients bittorrent file sharing protocol :10.1.1.14.1911
file protocol embodies main roles initial new peers 
initial new peers transient clients trackers typically web servers 
initial source file 
divides file small pieces creates metadata description file sends description tracker 
peers discover file description band mechanism web page looking pieces file 
peers contact tracker bootstrap knowledge peers seeds 
tracker returns randomized subsets peers seeds 
initially initial pieces soon peers able exchange missing pieces typically tit tat scheme 
peer acquires pieces file new 
collection clients actively sharing file called swarm 
azureus file descriptors metadata stored dht clients participate node assigned role tracker near root hash file descriptor 
practice possible trackers choose particular file possible clients piece 
key challenge efficiently implementing protocol providing simple method node selection example anycast 
distributed systems developers network coordinates mechanism support anycast 
azureus developers distinct purposes optimize dht traversal select nearby nodes application level congestion monitoring 
currently testing coordinate optimization biasing set nodes tracker returns nearby caller 
show simulation locally biased swarms reduce download times inter isp traffic 
plans call network coordinates optimize media streaming azureus 
worked azureus developers analyze improve coordinates maintained system contains clients 
able modify azureus code internals watch behavior subset network approximately azureus users run plugin automatically upgrades version latest cvs release 
azureus developers clients latest release exhibit normal user characteristics expect results generalize larger system 
vivaldi azureus uses vivaldi network coordinate update algorithm 
vivaldi algorithm calculates coordinates solution spring relaxation problem 
measured latencies nodes modeled extensions springs massless bodies 
network embedding minimum error low energy state spring system 
shows new observation consisting remote node coordinate xj confidence wj latency measurement lij nodes update local coordinate 
confidence wi quantifies accurate coordinate believed 
note confidence increases approaches 
nsdi th usenix symposium networked systems design implementation usenix association vivaldi xj wj lij ws wi wi wj xi xj lij lij ce ws wi wi cc ws xi xi xi xj lij xi xj vivaldi update algorithm 
gorithm calculates sample confidence ws line relative error line 
relative error expresses accuracy coordinate comparison true network latency 
second node updates confidence wi exponentially weighted moving average ewma line 
weight ewma set sample confidence ws line 
sample confidence change applied coordinate line 
final step coordinate updated line unit vector 
constants ce cc affect maximum impact observation confidence coordinate respectively 
height alternative purely euclidean distance metric 
height distance nodes measured euclidean distance plus height hypercube models latency penalty network access links dsl lines 
node successively refines coordinate periodic updates nodes neighbor set 
azureus information maintain network coordinate system entirely piggybacked existing messages routing table heartbeats 
mean coordinates induce additional overhead bytes message dimensions height confidence means algorithm needed modified function passively 
section describe technique developed incorporate information highly transient neighbors 
latencies wild examine accuracy latencies embedded coordinate space compare latencies azureus networks gain insight causes error embeddings 
generate dense latency matrix subset azureus compare planetlab mit king data set square matrix containing median latencies dns servers collected king method 
researchers planetlab mit king reduced low dimensional coordinates median error 
examine characteristics inter node round trip times violations triangle inequality intrinsic dimensionality 
cdf mit king planetlab azureus round trip time ms comparison round trip times shows azureus spreads range order magnitude larger mit king inter dns latencies 
larger spread tends lead lower accuracy embeddings 
collection instrumented clients ran planetlab record application level latency rest network creating dense latency matrix 
clients ran planetlab nodes days starting july th collecting latency measurements azureus nodes 
reduce raw measurements dense latency matrix process summarized edge median round trip time edge discarding edges fewer minimum number samples second discarded nodes fewer half maximum number edges 
process resulted matrix density entries median samples 
derived planetlab data set azureus matrix simply selecting subset hosts 
round trip times illustrate distribution inter node round trip times nodes data sets 
king measurements limited maximum ms 
data exhibit important characteristic spread 
application level azureus round trip times spread orders magnitude inter dns king data set spreads 
theory harbinger higher embedding error practice hong shown error nodes distance near middle latency distribution tends lowest longer tails distribution edges inaccurate 
icmp measurements exhibit similarly wide distribution see wide spread warning sign azureus higher error system narrower round trip time distribution 
violations triangle inequality network coordinate embeddings euclidean distances assumption triangle inequality usenix association nsdi th usenix symposium networked systems design implementation fraction pairs mit king planetlab azureus relative path length data sets half node pairs fail tang crovella triangle inequality test exists third node nodes pair produces shorter path direct path nodes 
large fraction violating pairs paths significantly faster 
violated great extent large fraction pairs nodes 
triangle inequality states triangle length side sum sides greater difference sides sides able form triangle 
latencies node triples form triangle said violate triangle inequality 
nodes large frequent violations tend ones largest individual prediction error existence decreases accuracy see 
method tang crovella examine severity triangle inequality violations 
method normalizes severity violation permitting pairs comparison 
node pair find shortest path passes third node 
pairs nodes find best alternative path node normalize latency rpl mink illustrates cumulative distribution quantity relative path length 
note fraction violation exists path alternative node faster direct path 
azureus pairs mit king planetlab subset violate triangle inequality 
contrast earlier examined small scale data sets find fraction pairs largest violations quite large tang crovella nodes alternative path faster azureus pairs mit king pairs exhibit large level violation 
examined cause large fraction pairs low rpl azureus 
nodes members low rpl pairs 
distinguished nodes cause magnitude singular values azureus mit planetlab synthetic synthetic plots suggest inherent dimensionality mit king planetlab azureus datasets small 
synthetic matrices dimensions included comparison 
frequent participation triangle inequality violations delay non planetlab nodes large order seconds delay planetlab nodes remained typical second 
effect extended side triangles nodes participated large 
planetlab nodes exhibited behavior located conjecture azureus traffic non planetlab sites artificially limited site gateways traffic planetlab nodes avoided traffic shaping 
construct planetlab environment effect leading bi multi modal latency distributions norm participants internet scale applications known ports consume large amount bandwidth azureus sites limit traffic 
round trip time spread azureus violations higher embedding error 
dimensionality network coordinates useful large number dimensions needed capture internode latencies internet 
tang crovella principal component analysis pca hint number dimensions required encompass information small data sets 
wanted know dimensions sufficient large broad spectrum endpoints method examine intrinsic dimensionality azureus 
pca linear transformation coordinate system new orthogonal coordinate system 
new system chosen subsequent axis captures maximum possible remaining variance projections points old system points new new axis captures variance second 
input system elements produce output system elements dimensions output system summarize part distance information original set nsdi th usenix symposium networked systems design implementation usenix association latency distributions illustrate euclidean distance metric works network coordinates internet messages asia europe europe asia go north america 
points 
singular values result pca transformation new axis corresponding singular value describes amount variance captured axis 
singular value small zero suggests axis unnecessary describing variance particular data set 
pca requires full matrix techniques fill remaining azureus matrix missing mit matrix 
filled half missing azureus values king technique king fails certain cases endpoint resolved 
interpolated remaining values matrices embedding matrix extracting missing values 
plot illustrate variance new singular value capturing turn hints inherent dimensionality underlying data set 
independent variables plot singular values sorted magnitude dependent variables corresponding magnitudes 
point magnitude singular values zero nearly zero relative importance subsequent singular values dimensions low 
point dimensions necessary capture values original input matrix case inter node latency values 
show normalized singular values king planetlab azureus data sets 
comparison created synthetic systems containing random points unit hypercube singular values 
expect synthetic data sets show sharp knee soon singular values respectively 
contrast bulk inter node latency information data sets requires dimensions 
azureus particular dominated single dimension mit king 
dimensions remain significant nodes need navigate clusters nodes positions 
data shown continued relevance singular values compared synthetic data sets 
lower error nodes find dimensions appropriate internet scale network coordinates 
previous characteristics round trip times violations triangle inequality suggest azureus latency distribution experience higher error mit king intrinsic dimensionality appear additional impediment 
latency distributions azureus data set clearly low dimensionality concrete way examine flatness large scale network look latency distribution 
way surprising embedding latencies globe earth euclidean space works 
messages routed direction earth surface euclidean metric poor choice 
previous spherical coordinates significantly larger error euclidean ones 
anecdotal evidence suggested main reason internet embeds low dimensional euclidean space world flat traffic asia europe flows north america 
examination azureus data set confirms traffic flow case 
mapped ip addresses data set countries autonomous system record turn mapped countries continents 
illustrates messages asia europe faster asia north america holds direction 
paths asia europe appear travel line oceans 
trend continues speed connection isps coarse delays dominate 
flatness suggests hyperbolic coordinates north america maps center hyperbolic space 
distribution latencies flat high level euclidean metric sufficient 
new direct transmission lines europe asia may change internet shape driving shift spherical coordinates 
usenix association nsdi th usenix symposium networked systems design implementation taming live coordinate systems experience tuning network coordinate system planetlab developed techniques lead stable accurate coordinates small live system 
azureus harvard teams worked integrate techniques azureus code 
confirming techniques worked expected resolved new problem skewed neighbor sets 
problem particularly disrupts largescale live coordinate systems azureus rely solely application communication maintenance zero maintenance costs suggested goal coordinate systems 
experimentation techniques simulation periodic measurement live system arrived coordinates perfect satisfactory start 
include review techniques developed part previous research describe new technique neighbor decay 
latency update filters previous developed simple filters distinct beneficial effects coordinate system running planetlab 
type call latency filter takes stream latency measurements remote node turns expected latency value 
stream measurements nodes goal latency filter summarize measurements providing current stable description expected latency main considerations affect value ex rtt 
anomalous measurements orders larger baseline appear stream measurements 
example measure round trip time ms typical measurements ms 
application level udp measurements anomalies occurred icmp 
second expected value fixed single value 
due congestion bgp changes underlying latency pairs nodes changes 
simple short moving median worked latency filter compensating anomalous measurements plateau shifts 
second type filter developed planetlab focuses making coordinates stable accurate 
update filters tackle problem shared types applications network coordinates discerning coordinate changed potentially necessitate application level reaction service migration 
early application developed network coordinates hard application immediately determine react coordinate updates occurring times minute 
single threshold react moved ms nodes volume coordinate moved 
developed generic filtering technique allow applications easily determine update coordinates 
applications find updates useful bypass filters 
update filters distinction constantly evolving system level coordinates stable application level coordinates providing barrier system level coordinates fine tune coordinate measurement application level coordinates change underlying coordinate undergone significant migration new location relative coordinates 
previous examined heuristics distinguishing system level coordinate moving single point requiring application level notification migrated new location potentially requiring application activity 
heuristics compare windows previous system level coordinates especially augment comparison distances nodes system perform 
applications tune windows may differ notified 
neighbor decay researchers posited network coordinate subsystem useful component numerous large scale distributed applications particularly perform job passively generating extra traffic 
azureus implementation passivity forced control selection nodes information necessary coordinate update piggybacked applicationlevel messages dht routing table maintenance 
due passivity churn nodes fixed sets neighbors expect regular exchanges 
fact nodes frequently receive updates remote node node tested entry routing table hear node 
net effect limited exchanges node working set smaller number nodes communicated 
nodes having communication nodes constant communication 
goal neighbor decay expand size working set turn improves accuracy 
standard gossip coordinate update involves new information single remote node optimizing local coordinate respect node 
set remote nodes sampled approximately frequency node coordinate optimized respect remote coordinates nsdi th usenix symposium networked systems design implementation usenix association turn performing process neighbors 
remote nodes sampled far greater frequency local coordinate optimization process skewed nodes 
theoretical limit result practice skewed updates problem expected passive implementation slow global optimization process 
solution problem skewed neighbor updates simple 
refining coordinate respect remote node just received new information refine respect nodes received update 
normalize sum forces neighbor set scale force neighbor age older information receives weight 
allows nodes hear times lasting smooth effect coordinate 
algorithmically set effect neighbor aggregate force fj amax aj amax aj age knowledge amax age oldest neighbor 
expanded neighbor set decays slowly time main benefits 
force update effectively sliced distributed time nodes coordinates jump locations high error respect members neighbor set 
second keeping track old neighbors neighbor decay acts increase effective size neighbor set turn leads higher global accuracy 
implementation nodes expired neighbor set minutes 
note distinct effects neighbor decay latency update filters 
latency filters generate current expected round trip time remote node update filters prevent system level coordinate updates spuriously affecting application behavior 
neighbor decay contrast handles problem skewed updates occur network coordinates maintained passive subsystem 
allows smooth incorporation information wider range neighbors particularly system contact nodes highly transient 
simulation confirmed neighbor decay substantially increased stability moderately improved continuous relative error 
measuring coordinate systems section review metrics evaluate coordinate systems latency services 
relative error 
relative error basic intuitive measure accuracy difference expected actual latencies nodes xi xj lij lij relative error comes forms global continuous neighbor 
global relative error accuracy viewpoint omniscient external viewer instant metric computed links 
simulations latency matrix compute viewpoint 
continuous error node computes fly receives new observations remote notes 
error added statistic ewma vivaldi confidence 
disadvantages continuous error single measurement may result large change value skewed handful remote nodes working set active gossip small 
continuous error neighbor error proxy global error live nodes performing computation live azureus clients 
neighbor error distribution relative errors set contacted nodes 
large number neighbors neighbor error generally provides close approximation global 
stability 
stable coordinates particularly important coordinate change triggers application activity 
distributed streaming query system example coordinate change initiate cascade events culminating heavyweight process migrations 
systems coordinates changed significantly reason process 
stable coordinate system coordinates changing time assuming network unchanging 
rate coordinate change xi quantify stability 
units stability ms sec 
descriptions results metrics included technical report version 
internet scale network coordinates latency matrix tell part story internet coordinate system 
helps describe network characteristics intrinsic dimensionality misses problems may occur running system churn changes latencies time measurement anomalies 
distinct methods understand online performance azureus coordinates planetlab ran instrumented azureus clients recorded entirety coordinate related behavior crawled approximately azureus clients internally tracked performance coordinates statistics inserted azureus code usenix association nsdi th usenix symposium networked systems design implementation median relative error azureus height azureus height mit king height mit king height dimensions height major positive impact azureus simulation returned version 
ran benchmark determine effectiveness coordinates application level decisions 
refining azureus coordinates updates cvs tree take weeks proliferate majority users changing single variables techniques feasible 
relied simulations going measurement guide roll major coordinate versions 
azureus coordinates originally dimensions height filtering techniques described section 
call version create version incorporated techniques previous research latency update filters code 
going planetlab coordinate service height reliably exhibited low error dropped height added dimensions 
unfortunately removing height proved mistake 
simulations azureus latency matrix see realized expect substantial improvement accuracy converting dimension implementation height changing gossip packet structure 
highly skewed neighbor sets slowed convergence developed neighbor decay technique compensate 
combined changes rolled version planetlab snapshots took snapshots version running clients approximately planetlab nodes 
snapshot lasted days logged updates approximately azureus nodes 
collected snapshot versions march july september respectively 
note instrumented clients stored transferred content travels azureus network 
compare data gathered different versions 
data aggregated roughly source planetlab nodes snapshots provide reasonable imperfect way isolate effects different techniques 
cases find accurate stable original cdf cdf median relative error stability combination filtering neighbor decay height lead substantially accurate coordinates planetlab nodes participating azureus network coordinate system 
comparing data show improvement relative error orders magnitude improvement stability 
initial 
revision mixed results 
data simulations height data convey removal height damaged accuracy filters aided 
retrospect azureus round trip time distribution see node pairs exhibit round trip times second surprising height helped nodes find low error coordinate 
addition dimensions capture azureus inherent dimensionality surprising addition dimensions radically improve accuracy 
coordinates accurate orders magnitude stable latency filters prevent anomalous measurements reaching update algorithm 
second change successful 
neighbor decay re height create accurate coordinate space previous snapshots 
increase accuracy occurs neighbor decay enables nodes triangulate coordinates larger fraction network neighbors doing height supplies numerous nodes dsl cable lines additional distance physical communication travel 
evaluated neighbor decay simulation 
confirm continued effectiveness live system nsdi th usenix symposium networked systems design implementation usenix association cdf simulation live live planetlab median relative error reality live expectations comparison probed statistics live azureus nodes simulation suggests accuracy improved 
section explores major remaining impediments 
performed experiment monitored convergence node neighbor decay enabled part coordinate system 
average trials neighbor decay improved median accuracy minute marks respectively 
host live coordinates logs azureus clients running planet lab nodes provide detailed view narrow slice system 
obtain picture broader system inserted online statistics collection azureus cvs tree 
neighbor set node computed neighbor error stability statistics demand probed 
results azureus hosts running version live illustrates data crawl hosts 
exclude live nodes fewer maximum neighbors metrics skewed small percentage network 
data show bulk azureus system experiences accuracy similar clients running planetlab 
error greater azureus network long tail th percentile accuracy worse 
discuss section conjecture high rate churn causes difference tail 
order hint caused running wild opposed safely lab compared statistics live azureus nodes simulated embeddings azureus latency matrix 
compare live simulated relative error 
data show significant gap live simulated performance 
prior simulator simulations planetlab mirrored live results 
medians relative error distributions live simulated coordinates respectively difference 
data suggest network coordinates partially substantially accu cdf xor random lookup delay ms choosing paths small detours logical space lower latency network coordinates improve lookup delay azureus dht 
rate useful distributed applications cheap quick decisions providers service 
show current level accuracy affects anycast decisions section 
application level performance accuracy stability metrics capture low level behavior 
understand internet scale coordinate systems affect applicationlevel behavior examined azureus uses higher level anycast decisions common tasks dht key lookup 
azureus performs operation tracker announcement torrent rating lookup publish nat traversal rendezvous lookup publish tunnelling nats 
modified azureus client network coordinates optimize lookup delay 
experiment evaluate change lookup delay stored set keys dht looked key distinct node selection methods recording time lookup operation 
key ran methods random order 
method selects node small set performing anycast choices logical progress target lower latency 
azureus uses kademlia defines logical distance dht keys exclusive bits 
starting logically nearest known nodes target xor picks logically nearest node picks node latency predicted coordinates smallest picks lowest latency node predicted coordinates ran dom picks randomly set 
node contacted returns neighbors logically close target 
repeats node storing key lookup fails 
azureus performs dht lookups iteratively able experiment lookup algorithm code updates single node 
plot distribution delays storing keys performing lookups 
compared usenix association nsdi th usenix symposium networked systems design implementation cdf uptime hour uptime hour median relative error azureus nodes system longer periods accurate coordinates 
suggests churn may hurt convergence internet scale coordinate systems 
xor method chooses nearest logical node data show reduces lookup delay th percentile 
faster early version coordinates th percentile 
latency prediction information currently returned caller optimization affects selection hop 
addition able predict latencies nodes due version incompatibilities 
factors suggest improvements conservative 
excluded lookups timed due dropped udp messages avoid dependence particular timeout handling mechanism 
data show network coordinates provide substantial improvement application level process 
barriers accuracy section examine primary causes remaining difference current live accuracy appears achievable simulation results 
barriers churn drift intrinsic error corruption latency variance 
techniques address barriers non malicious corruption 
malicious corruption latency variance remain unsolved requires fundamentally new approach latency prediction 
simulation planetlab results monitoring azureus time added techniques address churn drift non malicious corruption azureus code 
preliminary experiments suggest function expected fully quantified effects include results 
churn distributed network coordinate algorithms traditionally consider churn part network model 
researchers ask question existing stable system quickly new node find stable accurate coordinate 
unfortunately implicit question assumption existing system converged assumption breaks large scale dis relative error th pctl 
coordinate birth forgotten remembered churn churn churn avg 
lifetime rounds coordinate systems experience high churn rates allow nodes remember previous coordinates trouble converging 
tributed systems including azureus 
azureus follows long tailed lifetime distribution typical peerto peer systems case nodes system hour 
coordinate updates order tens seconds minutes apart nodes time settle stable position exited system 
data crawl live network separated nodes ones system hour 
plot relative error experienced groups 
data confirm nodes majority system substantially accurate long lived ones 
considered potential solutions problem sustaining coordinate system high churn rates 
nodes perform rapid initial triangulation process shifting lower update rate 
adjusting gossip rate time problems passive maintenance free coordinate systems control gossip active system new complex knob 
second considered greedy optimization just stepping update process nodes repeat local minimum reached respect currently known neighbors 
unfortunately form optimization neighbors known case early node lifetime 
solution extremely simple positive results simulation starting scratch restarting client left 
performed experiment varied amount churn simulation toggled nodes remembered coordinate re entry 
show results experiment 
nodes started origin re entry deleterious effect system convergence 
contrast simple technique accuracy remained churn 
technique assumes limited drift see section appears nsdi th usenix symposium networked systems design implementation usenix association gravity migration error ms ms ms ms ms table small amounts gravity limit drift preventing coordinates migrating low error positions 
promising start resolving effect churn live coordinate systems 
drift monitoring planetlab coordinate service months revealed coordinates migrated fairly constant direction centroid coordinates move random walk drifted constantly repeatedly vector away origin 
surprising previous study shorter day trace exhibited pattern 
coordinates meant provide relative distance information absolute coordinates matter 
problem drift applications need assumptions maximum distances away true origin 
example hilbert functions map coordinates single dimension 
requires priori estimate maximum volume coordinates may fill 
mapping functions hilbert require current centroid drift origin bound 
drift limits amount time cached coordinates remain useful 
strawman solution drift continuously redefine origin centroid systems coordinate 
unfortunately require accurate statistical sampling coordinate distribution reliable mechanism advertise current centroid 
solution drift apply polynomially increasing gravity coordinates farther away true origin 
gravity force vector applied node coordinate xi update xi xi tunes pull small fraction expected diameter network 
hyperbolic coordinates similar equation compute gravity 
drift occur simulation latency matrix updating nodes randomly form simulation capture time dependent rtt variability 
hour trace planet lab service simulate effect gravity show effect different strengths gravity table 
data migration centroid coordinates ms gravity gravity days gravity coordinates drift away original origin done 
show simple technique keep coordinate centroid highly stationary affecting accuracy 
confirm effect gravity live system added going planetlab service participants 
compare drift adding gravity day periods 
data show gravity effectively eliminates drift 
addition reduce accuracy cases median 
gravity actively limit rotation observe rate greater full rotation days 
determining cause drift scope 
intrinsic error violations triangle inequality occur frequently greater extent azureus planetlab sets dns servers see 
surprisingly removing small number worst causes large improvement global accuracy 
violations nodes take part damage coordinates damage cause continues system 
performed experiment removed small percentage nodes largest triangle violations azureus latency matrix compared removing random subset nodes size 
computed system coordinates relative error link 
illustrates removing worst percent nodes leads percent improvement global accuracy 
data parallels results theoretical showed decrease embedding distortion sacrificing small fraction distances arbitrarily distorted 
results show mechanism prevent nodes affecting rest system improve accuracy 
example mechanisms node self detection removal coordinate system directly evolving estimate extent violations asking neighbors latencies neighbors determining subject traffic shaping modality latency distribution major cause triangle violations 
preliminary experi usenix association nsdi th usenix symposium networked systems design implementation relative error th pctl 
random subset worst nodes removed removing small percentage nodes worst triangle violations large effect global accuracy 
ments self exclusion tests show improvement accuracy th percentile 
corruption versioning fact running large system users choose upgrade running version 
problems original deployments remote coordinates received gossip origin discussion incredible churn rate possible 
nodes firewalls update coordinates realized problem due portion network running old code version 
fact crawl azureus network clients crawled current version 
exciting realizing fact allowed compensate coordinate update process active statistics collection explicit handling different versions code 
begun investigating interesting side problem coordinate corruption malicious behavior 
divide attacks classes disorder isolation free riding landmark control 
see evidence intentionally corrupt messages trivial install client set clients responded random values example just runs clients spurious content advertisements piracy 
internet scale coordinate systems come wider need grapple oblivious malicious corruption 
latency variance prior barriers accuracy paint picture problems fairly simple solution practitioners build accurate live coordinate systems 
existence wide variation latency measurements pair nodes short period time harder problem broad ramifications 
variances large mean predict latency node 
data longest snapshot determined standard deviation latency pair nodes 
round trip times varied median ms 
spread affects latency prediction systems 
reactive measurement service meridian error prone higher overhead small numbers pings sufficiently measure latency high variance target 
fact coordinate systems may better position address problem retain histories inter node behavior 
reviewed section developed latency filters previous 
act low pass filter anomalies ignored baseline signal passes 
additionally adapt shifts baseline bgp route changes cause example 
filters assign link single value conveys expected latency link 
simple filters worked planetlab describing link single value appropriate enormous variance observe azureus links 
ran experiment compared icmp filtered raw latency measurements taken time 
determine destination nodes started azureus planetlab nodes chose ping able neighbors minute startup period 
azureus continue run normally hours simultaneously measuring latency nodes ping 
plot data 
illustrates pair similar planetlab observations raw application level icmp variance consistent baseline described single value 
contrast portrays high variance pair filter approximate median round trip time difficult say point time latency pair 
impact dual problems high latency variance modifying algorithms deal high latency variance limited network coordinate systems 
latency anycast services deployed wild need address problem 
may exist methods incorporate variance coordinate systems uncertainty latency filters coordinates resolving problem scope 
related early latency prediction services focused reducing intractability pairs measurements clustering 
assumption nodes cluster similar latencies nodes cluster researchers examined create accurate clusters minimize inter intra cluster measurement overhead 
francis created clusters ip address prefixes prediction nsdi th usenix symposium networked systems design implementation usenix association cdf round trip time ms planetlab iis sinica edu tw icmp raw filter round trip time ms time hours icmp raw filter cdf round trip time ms planetlab millennium berkeley edu icmp raw filter round trip time ms time hours comparison round trip times sets node pairs icmp raw application level measurements filtered measurements 
pair exhibits variance shows consistent baseline 
pair variance large assigning node coordinate putting consistent meridian ring bound error prone process 
number parentheses legend number round trip time measurements cumulative distribution function 
error heavily dependent initial choice representatives 
chen addressed problem automatic formation clusters representatives cluster size generally amenability network clustering large effect accuracy 
ratnasamy proposed hybrid approach nodes similar distances away fixed landmarks place cluster error highly dependent number bins 
clustering involves measurement lower network layers performing measurement proposed reducing overhead tapping existing information unfortunately requires change interface internet routers 
research network coordinates grew focus generalized latency prediction maintaining infrastructure works queries separate body focused directly problem finding nearest replicated services 
direct response application level request meridian finds nearest overlay node running meridian arbitrary point internet set pings progress logarithmically closer target 
freedman developed oasis distributed service explicitly designed help clients find choose server 
building meridian oasis primarily focuses network locality incorporates liveness load 
oasis employs reliable core hosts map clients nearby servers assumed longlived 
note distinct purposes anycast services network coordinates meridian oasis icmp raw filter designed case contact service frequent long lived outweigh high upfront cost finding best service 
current levels accuracy perfect maintenance zero network coordinates fall side trade short lived cheap decisions finding exact answer worthwhile repeatedly finding answer leads aggregate savings 
meridian oasis inherently reactive acting response query tightly integrated application messages dampen ring maintenance example 
network coordinates exist main classes algorithms calculating coordinates landmark schemes overlay nodes fixed number landmark nodes calculate coordinates simulation schemes decentralized calculate coordinates modeling nodes entities physical system 
landmark 
gnp nodes contact multiple landmark nodes triangulate coordinates 
drawbacks approach accuracy coordinates depends choice landmark nodes landmark nodes may bottleneck 
addresses supporting multiple independent sets landmarks coordinate systems 
local coordinates map global coordinate system 
pic explicit landmarks incorporating measurements node simplex optimization algorithm obtain date coordinate 
landmark schemes require reasonably stable infrastructure best knowledge usenix association nsdi th usenix symposium networked systems design implementation adopted wide spread 
simulation 
vivaldi big bang simulation determine coordinates spring relaxation force field simulation respectively 
nodes attract repel network distance measurements 
low energy state physical system corresponds coordinates minimum error 
de propose different method stabilizing coordinates asymptotically dampening effect new vivaldi measurement :10.1.1.1.3606
factor mitigate oscillations fixed network prevents algorithm adapting changing network conditions 
demonstrated network coordinates wild behave somewhat differently tame coordinates planetlab simulation 
fortunately wild coordinates 
analysis large internet scale coordinate system convinced join network coordinate supporters camp 
initial network coordinate implementation illustrated problems critics cite simple effective techniques overcame nearly issues 
azureus network coordinates provide simple efficient mechanism anycast part dht lookups may soon optimize streaming media 
addition providing wealth data analysis live large scale deployment deployed evaluated techniques improve accuracy stability network coordinate systems latency filters update filters neighbor decay coordinate memory gravity exclusion 
yield efficient accurate stable network coordinates azureus network 
plan add remaining techniques azureus code monitor effectiveness 
wish peter early discussions myriad potential reasons discrepancy simulated real network coordinates olivier allowing tinker azureus source code michael parker ucla putting touch porting implementation java 
addition wish anonymous reviewers shepherd emin sirer provided extremely detailed constructive criticism 
azureus bittorrent client 
bartal linial mendel naor 
metric ramsey type phenomena 
stoc san diego ca 
improving traffic locality bittorrent biased neighbor selection 
icdcs july 
butz 
alternative algorithm hilbert space filling curve 
ieee transactions computers pages april 
chen lim katz overton 
stability network distance estimation 
sigmetrics performance evaluation review 
cohen :10.1.1.14.1911
incentives build robustness bittorrent 
workshop economics systems june 
costa pic practical internet coordinates distance estimation 
icdcs march 
dabek vivaldi decentralized network coordinate system 
sigcomm aug 
de uhlig :10.1.1.1.3606
stable distributed network coordinate system 
technical report universite catholique de louvain december 
maggs parikh sitaraman weihl 
globally distributed content delivery 
ieee internet computing september october 
francis jamin jin jin raz shavitt zhang 
idmaps global internet host distance estimation service 
ieee acm trans 
networking 
freedman lakshminarayanan oasis anycast service 
nsdi san jose ca may 
gummadi king estimating latency arbitrary internet hosts 
nov 
virtual networks attack disrupting internet coordinate systems 

network coordinates wild 
technical report tr harvard cambridge ma oct 
stable accurate network coordinates 
icdcs lisbon portugal july 
maymounkov kademlia information system xor metric 
iptps march 
routing underlay overlay networks 
sigcomm karlsruhe germany aug 
ng predicting internet network distance coordinates approaches 
infocom june 
peterson blueprint introducing disruptive technology internet 
hotnets october 
crowcroft wilbur scalable distributed location 
iptps february 
network aware operator placement stream processing systems 
icde april 
ratnasamy topology aware overlay construction server selection 
infocom june 
shavitt big bang sim 
embedding network distances euclidean space 
infocom june 
shavitt 
curvature internet usage overlay construction distance estimation 
infocom june 
spring wetherall public internet measurement facility 
usits mar 
stoica chord scalable peer peer lookup service internet applications 
sigcomm aug 
tang crovella 
virtual landmarks internet 
imc oct 
wong sirer 
meridian lightweight network location service virtual coordinates 
sigcomm aug 
zhang hu hierarchical approach internet distance prediction 
icdcs july 
zheng lua internet routing policies round trip times 
pam mar 
nsdi th usenix symposium networked systems design implementation usenix association 
