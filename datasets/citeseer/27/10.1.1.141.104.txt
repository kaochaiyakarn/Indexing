computing abstractions infinite state systems compositionally automatically lambda bensalem lakhnech owre verimag centre equation avenue de gi eres france 
email bensalem imag fr institut ur informatik und praktische mathematik 
kiel germany 
email yl informatik uni kiel de computer science laboratory sri international menlo park ca usa 
email owre csl sri com 
method computing abstractions infinite state systems compositionally automatically 
concrete system delta delta delta sn programs abstraction function ff method compute system sa delta delta delta simulates distinguishing feature method produce single state graph preserves structure concrete system 
feature prerequisite benefit techniques developed context model checking mitigating state explosion 
method advantage process constructing system depend computation model synchronous asynchronous 
major task proving correctness protocols consists proving invariance properties 
safety property reduced invariance property prove progress properties needs establish invariance properties 
proving invariance properties especially crucial infinite large finite state systems escape algorithmic methods 
standard way prove invariance properties infinite state systems induction 
prove invariant come stronger invariant preserved transition invariant usually called auxiliary invariant 
deductive method drawbacks hard find suitable auxiliary invariants choice auxiliary invariant fails little hint strengthen invariant obtains counterexample form trace considered program satisfy invariance property 
techniques generating strengthening invariants cf 
give limited results lambda partly performed authors visiting computer science laboratory sri international 
visits funded nsf 
ccr ccr 
applied protocols control partly encoded data part particular shared variables extensively synchronization 
hand verification abstraction appears promising reasoning control intensive protocols control finite data part infinite large 
abstraction techniques model check finite state reactive systems established approach 
methods tools compute system text finite state program abstraction relation 
realized important avoid construction concrete model represents semantics considered program generating system 
store concrete system large 
produced system usually smaller concrete simpler model check 
verification abstraction applied infinite state systems shown 
approaches verifier provide system important amount user intervention required prove concrete system simulates 
needed method automatically compute system infinite state system abstraction relation 
method achieves restricted form abstraction functions induced set predicates concrete states 
method drawback generates graph text program consequence apply abstractions techniques avoiding state explosion problem example techniques 
method computes system sa sa delta delta delta san system delta delta delta sn abstraction function ff simulates sa guaranteed construction 
known preservation results sa satisfies invariant satisfies invariant ff gamma 
produced system graph programming language apply known methods avoiding state explosion problem analyzing sa 
clear correspondence concrete transitions 
allows debugging concrete system checked trace system corresponds concrete trace 
furthermore process generation system depend assumed semantics parallel operator method works synchronous asynchronous computation model 
basic idea method simple 
order construct abstraction construct concrete transition transition construct proceed elimination starting universal relation relates state state eliminate pairs states conservative way guaranteed elimination pair obtained transition abstraction check pair states eliminated check con crete transition lead state ff state ff 
amounts proving hoare triple 
elimination method general complex 
combine techniques allow check fewer hoare triples 
techniques partitioning set variables substitutions new preservation result allows invariant proved construction process system 
partitioning set variables allows consider small group variables time 
reduces number hoare triples check number transitions universal relation exponential number variables 
general partitioning leads non deterministic system 
give sufficient conditions partitioning variables increase non determinism system 
identify cases abstraction transition computed solely applying syntactic substitutions elimination method 
examples major part transitions handled syntactic substitutions combination elimination method syntactic substitutions 
new preservation result allows consider hoare triples precondition implies invariant prove 
obviously reduces number hoare triples check 
implemented method theorem prover pvs check hoare triples generated elimination method 
order formulas corresponding hoare triples constructed automatically strategy user applied 
produced system optionally represented specification language pvs smv 
implementation provides bridge pvs smv 
applied method implementation number examples 
report verification bounded retransmission protocol 
bounded retransmission protocol verified theorem proving 
automatic verification correctness aspects protocol reported 
achieved automatic verification correctness aspects protocol 
related mentioned method computing abstractions infinite state systems 
contrast method produces system structure concrete 
allows application abstractions techniques avoiding state explosion problem 
gives clear correspondence concrete transitions useful debugging concrete system 
method deal abstraction functions variables range infinite domains 
case method generates global control graph 
advantage method depend computation model synchronous asynchronous 
basic idea method constructing system related splitting algorithm 
purpose splitting algorithm refine structure order preserve properties directions concrete system satisfy properties 
interested preservation invariance properties direction allows efficient methods computing abstractions 
splitting algorithm splitting states method elimination transitions 
basic idea underlying methods computing abstractions finite state systems interpretation 
system completely determined versions primitive operators 
case method consider abstraction primitive operators separation compute abstraction complete transition 
general methods interpretation efficient yield systems non deterministic systems computed method 
preliminaries set typed variables state type consistent mapping associates variable value 
denote sigma set consisting states 
syntactic transition system triple ae set typed variables predicate describing set initial states ae predicate describing transition relation 
associate usual way transition system syntactic transition system 
relations ri sigma theta sigma define synchronous product omega sigma sigma theta sigma sigma omega iff sj sigma sigma ri sigma denotes restriction mapping sigma sigma sigma sigma sigma omega 
synchronous composition transition systems si sigma ii ri denoted omega system sigma sigma fs sj sigma iig omega 
computation transition system sigma sequence delta delta delta sn si si gamma 
state sigma called reachable computation delta delta delta sn sn set sigma called invariant denoted state reachable set sigma states relation sigma weakest liberal precondition respect denoted wp set consisting states state semantic notions introduced far syntactic counterparts assume known 
tacitly interchange syntax semantics predicates sets states necessity distinction 
proving invariants abstraction section simulation notion depends invariance property proved preservation result new notion 
definition 
sc sigma ic rc sa sigma ia ra transition systems 
say sa abstraction sc ff sigma theta sigma sigma denoted sc ff conditions satisfied ff total relation state sc sc sigma sa sigma sc sc sa ff sc sc rc exists state sa sigma sa sa ra sc sa ff state sc ic exists state sa ia sc sa ff 
proved induction sc ff sa delta delta delta scn sc sci exists delta delta delta san sa sci sai ff theorem 
sc sa transition systems sc ff sa 
sigma sigma ff gamma sa ic sc 
notice usual notion simulation corresponding preservation result cf 
obtained definition theorem sigma advantage definition allows abstractions fewer transitions reachable states 
particularly important seeking method automatically computes finite abstractions analysis model checking techniques 
sequel case sigma write sc vff sa sc ff sa say sa abstraction sc respect ff prove transition system sc satisfies invariance property suffices find finite abstraction sa sc relation ff sa sigma ff gamma 
method complete 
suffices take system states sa sa relation ff sc sa ff iff sc reachable sc sc sa ff iff sc reachable sc 
system sa sa unique initial state 
obviously sc vff sa sa fsa 
sc ff gamma sa 
hand sc proved abstraction sa sc ff proved auxiliary invariant ff gamma sa sa set reachable states sa 
theoretical point view proving invariance properties abstractions difficult auxiliary invariants 
practice case method abstractions easier 
computing abstractions section consider problem computing abstraction transition system sc relation ff 
consider syntactic transition system sc aec 
ff predicate set free variables ff sc ff ff aec ff delta ff ff aec delta ff ff aec ff obtained ff substituting variable variable 
easily proved ff sc abstraction sc 
case ff function ff sc smallest abstraction sc ff 
unfortunately possible general analyze ff sc model checking variables range finite domains 
reason description ff sc involves quantification variables may range infinite domains 
sequel section method computing abstractions avoids quantification problem described 
elimination method consider transition relation predicate ae consider abstraction relation predicate ff set variables 
obvious abstraction ae ff universal relation sigma true predicate 
denote ua 
course relation ua prove interesting invariant tautology 
obtain interesting abstraction ae eliminating transitions ua 
lemma states transitions safely eliminated lemma 
sc sa transition systems sc ff sa 
sa sa states 
ff gamma sa wp rc sigma ff gamma sa sc ff consists components sa transition relation ra sa sa words concrete transition lead concrete state sc sc sa ff concrete state sc sc sa ff safely eliminate transition sa sa sa 
notice concrete system general infinite state condition ff gamma sa wp rc sigma ff gamma sa checked means theorem prover 
notice eliminate pairs sa sa condition satisfied get result system ff sc 
elimination method rough form feasible requires formulas checked validity 
boolean variables conditions checked 
techniques elimination method feasible shown section 
partitioning variables simple practical way enhance elimination method consists partitioning set variables subsets delta delta delta am considering effect abstraction concrete transition ae set ai separately 
consider detail 
assume considered abstraction relation ff function denote ffi projection ff ai ffi ff jai concrete state lemma lemma 
sigma sai ai iai rai sa sc ffi sai iff sc ff sa 
truth statement suffices assumptions ff function delta delta delta am partition general unsound assumptions 
lemma suggests partition set variables consider element partitioning isolation 
boolean variables partition sets elements applying elimination method check validities validities 
question arises system computed partitioning non deterministic system computed partitioning ff sc ni ffi sc holds 
answer general ni ffi sc transitions ff sc dependencies ffi taken account process computing ffi sc 
state lemma lemma 
assume set concrete variables partitioned sets delta delta delta cm rc written form rc omega delta delta delta omega rcm rci relation states ci 
assume ffi considered function ci 
ff sc ni ffi sc 
fact case dependencies ffi captured invariant sc computation system 
partitions fa delta delta delta amg fa delta delta delta say finer ai aj 
case write 
lemma states general finer partitions lead transitions system 
lemma 
partitions 
ff denote projection ff ff ff ja concrete state nj ff sc ni ffi sc ida identity states 
substitutions cases need apply elimination method compute abstraction transition achieve syntactic substitutions 
explain goes assume section transitions guarded simultaneous assignments form consider transition abstraction function ff ff ea concrete state ea denotes evaluation ea compute abstraction proceed follows determine list delta delta delta cn vn equations ci vi constant ci vi follows guard substitute variable ci vi obtaining new concrete transition delta delta delta vn cn 
fi ea say variable determined fi conditions satisfied variable free expression concrete state fi holds variable fi syntactically equal 
fl case second 
variables determined fi transition guard ff assigns fl variable abstraction ff 
see true notice transitions semantically equivalent concrete states ff ff fl case variables determined fi complete abstraction determined substitutions need elimination method 
general apply procedure described followed elimination method determine assignments variables determined fi 
example 
illustrate syntactic substitution compute abstraction concrete transition consider bakery mutual exclusion algorithm infinite state space 
transition system pc gamma pc pc gamma pc pc gamma pc transition system pc gamma pc pc gamma pc pc gamma pc pci ranges fli li li yi ranges set natural numbers 
variables boolean variables variables pca pca 
abstraction function ff predicate vi ai yi vi pci 
consider transition apply step 
easily seen obtain fi pca fi fi fi pca pc fi 
ff pc pca 
equivalent false obtain transition pca false false pca 
abstraction transitions computed substitutions 
transition assignment variables pca determined substitutions need elimination method determine effect 
pvs implementation implemented tool computes abstraction network delta delta delta sn synchronous asynchronous composition transition systems 
specification language concrete systems subset specification language pvs 
produced system optionally described pvs smv 
pvs theorem prover check formulas generated elimination method 
user supplies list proof strategies check formulas 
proof strategies user provides components pvs theory describing concrete system 
user choose invariant checked generation system definition 
user give list proved invariants concrete system constructing system 
pvs theory describing state space defining abstraction function 
implemented procedure computes abstraction function associates boolean variable atomic formula form delta delta delta xn appears guard concrete variable delta delta delta xn ranges infinite data domain associates boolean variable expression form exp appears concrete transition ranges infinite data type occur exp user optionally provide set concrete variables tool computes atomic operation variables operation 
computed operations stored reused time abstraction concrete system computed abstraction function modified 
generation system completely automatic compositional consider transition transition 
concrete transition obtain transition non deterministic 
important property method enables debugging concrete system alternatively enhancing abstraction function 
constructed system may satisfy desired property possible reasons concrete system satisfy invariant abstraction function suitable proving invariant provided proof strategies weak 
model checker smv provides trace counterexample system satisfy invariant 
clear correspondence concrete transitions examine trace find reasons listed case 
particular concrete system satisfy invariant transform trace smv concrete trace verify concrete counterexample 
case study consider verification bounded retransmission protocol brp short 
brp protocol extension alternating bit protocol proposed take abstraction partition concrete state space induced literals appearing guards 
abstraction generally coarse 
files individual data transmitted number retransmissions datum bounded parameter 
protocol verified theorem proving large number auxiliary invariants needed 
original formulation case study requirements protocol protocol brp spec task prove concrete protocol brp simulates refinement brp spec 
shown computing abstraction brp concrete protocol satisfies set temporal properties extracted specification brp spec 
guarantee checked temporal properties exclude behaviors excluded brp spec exclude instance protocol cheats sending receiving clients telling transmission successful case 
method implementation able automatically prove brp implements brp spec 
description protocol brp protocol accepts requirements req producer transmit file data consumer see fig 
protocol consists sender producer side receiver consumer side 
sender transmits data frames receiver channel sender receiver req confirmation producer indication consumer fig 

bounded retransmission protocol 
waits acknowledgment channel channels may lose messages timeouts identify loss messages 
sending message sender waits acknowledgment 
acknowledgment arrives sender proceeds message file sends confirmation message producer 
timeout occurs reception acknowledgment sender retransmits message 
procedure repeated specified parameter max 
side receiver acknowledging message waits messages 
new message arrives timeout concludes loss contact sender reports consumer 
protocol responsible informing producer file transmitted correctly transmission failed message possibly lost 
consumer side protocol passes data frames indicating datum file intermediate 
correctness criterion reduce problem proving brp simulates brp spec invariance problem follow approach 
consider superposition brp brp spec prove superposed protocol brp satisfies invariance property safe safe variable set false soon brp transition allowed brp spec 
realized brp contains variables protocol different copies corresponding variable brp brp spec respectively 
instance variables file correspond file sent variables head ahead correspond position data processed file respectively 
verification protocol brp protocol represents family parameterized protocols 
parameters number allowed retransmissions max length file data type data 
obtain finite abstraction protocol natural eliminate parameters introducing additional nondeterminism 
abstraction essentially obtained procedure proposed section 
exception concerns variable encodes distance position variables head ahead 
finite system fully automatically produced hour minutes ultra sparc successfully model checked smv seconds 
method automatically compositionally computes abstractions infinite state systems 
salient feature method apart automatic generated system structure concrete 
method applicable synchronous asynchronous computation models 
allows application techniques reducing state explosion problem debugging concrete system 
important feature method incremental sense 
assume computed abstraction sa system respect abstraction function ff 
assume want add new variables ff consider new abstraction function ff agrees ff old variables 
transitions eliminated generation sa need considered construction abstraction respect ff 
furthermore worth mentioning preservation results method compute finite system verify temporal property include existential quantification computation paths 
method simple mathematical background view practically important 
implemented method pvs check conditions generated elimination method 
generated system optionally described specification language pvs smv 
implementation presents bridge pvs theorem prover smv model checker 
applied method examples 
addition brp described computed finite abstraction alternating bit implementation takes hours version brp fewer variables 
protocol example verified bakery peterson mutual exclusion algorithms reader writer example simplified version futurebus cache coherence protocol 
examples system fully automatically efficiently generated 
currently integrating implementation techniques generating auxiliary invariants 
planning investigate methods automate debugging process concrete system 
needed module transforms trace system concrete checks trace corresponds computation concrete system 

bensalem lakhnech 
automatic generation invariants 
accepted formal methods system design 
appear 

bjo rner browne manna 
automatic generation invariants intermediate assertions 
theoretical computer science 

clarke grumberg long 
model checking abstraction 
acm transactions programming languages systems 

cousot cousot 
interpretation unified lattice model static analysis programs construction approximation fixpoints 
th acm symp 
prog 
lang pages 
acm press 

dams 
interpretation partition refinement model checking 
phd thesis technical university eindhoven 

dams gerth herrmann 
model checking adaptive state data abstraction 
cav volume lncs 
springer verlag 

dams gerth grumberg 
generation reduced models checking fragments ctl 
cav volume lncs 
springer verlag 

dams gerth grumberg 
interpretation reactive systems abstractions preserving actl lambda ectl lambda ctl lambda 
ifip transactions north holland elsevier 

dams gerth grumberg 
interpretation reactive systems 
acm transactions programming languages systems 

th 

model checking infinite state systems data abstraction 
cav volume lncs pages 
springer verlag 

graf 
characterization sequentially consistent memory verification cache memory abstraction 
accepted distributed computing 

graf 
tool symbolic program verification abstraction 
cav volume lncs 
springer verlag 

graf saidi 
construction state graphs pvs 
cav volume lncs 

groote van de pol 
bounded retransmission protocol large packets 
case study computer checked verification logic group preprint series 
utrecht university 

havelund shankar 
experiments theorem proving model checking protocol verification 
fme volume lncs 
springer verlag 

sellink vaandrager 
proof checking data link protocol 
technical report cs cwi march 


ur 
phd thesis university oldenburg 

kurshan 
computer aided verification coordinating processes automata theoretic approach 
princeton series computer science 


graf sifakis bouajjani bensalem 
property preserving abstractions verification concurrent systems 
formal methods system design 

long 
model checking abstraction compositional reasoning 
phd thesis carnegie mellon 

manna pnueli 
completing temporal picture 
theoretical computer science 

manna pnueli 
temporal verification reactive systems safety 
springer verlag 

editors 
algebraic specification communication protocols 
number cambridge tracts theoretical computer science 


mcmillan 
symbolic model checking 
kluwer academic publ boston 

uller nipkow 
combining model checking deduction 
tacas volume lncs 

owre rushby shankar von henke 
formal verification faulttolerant architectures prolegomena design pvs 
ieee transactions software engineering 

su dill barrett 
automatic generation invariants processor verification 
fmcad volume lncs 
article typeset latex macro package llncs class 
