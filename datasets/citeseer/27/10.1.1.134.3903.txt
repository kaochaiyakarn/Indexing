optimizing indirect branch prediction accuracy virtual machine interpreters anton ertl tu wien interpreters designed efficiency execute huge number indirect branches spend half execution time indirect branch mispredictions 
branch target buffers best widely available form indirect branch prediction prediction accuracy existing interpreters 
investigate methods improving prediction accuracy interpreters replicating virtual machine vm instructions combining sequences vm instructions superinstructions 
investigate static interpreter dynamic interpreter run time variants techniques compare combinations techniques 
techniques eliminate nearly dispatch branch mispredictions benefits resulting speedups factor efficient threaded code interpreters speedups factor techniques relying superinstructions 
categories subject descriptors software programming languages programming languages processors interpreters general terms languages performance experimentation keywords interpreter branch target buffer branch prediction code replication superinstruction correspondence address institut technische universit wien wien austria anton mips tuwien ac permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
pldi june san diego california usa 
copyright acm 
david gregg trinity college dublin 
different programming language implementation approaches provide different tradeoffs respect criteria ease implementation portability retargetability compilation speed execution speed interpreters popular language implementation approach criteria execution speed disadvantage interpreter designed efficiency typically suffers factor slowdown general purpose programs native code produced optimizing compiler 
investigate improve execution speed interpreters 
existing efficient interpreters perform large number indirect branches executed instructions 
mispredicted branches expensive modern processors cost cycles pentium iii athlon cycles pentium 
result interpreters spend half execution time recovering indirect branch mispredictions 
consequently improving indirect branch prediction accuracy large effect interpreter performance 
best indirect branch predictor widely available processors branch target buffer btb 
current desktop server processors btb similar structure athlon alpha itanium 
mispredict executed indirect branches threaded code interpreters switch interpreters 
look software ways improve prediction accuracy 
main contributions propose new technique replication section eliminating mispredictions 
library intensive special purpose programs speed difference usually smaller 
interpreters designed efficiency general purpose programs may produce slowdowns factor 
unfortunately people draw incorrect general performance interpreters examples 
bibtex entry available www tuwien ac papers 
published sigplan conference programming language design implementation pldi typedef enum add 
inst void engine static inst program add 
inst ip program int sp switch ip case add sp sp sp sp break 
vm instruction dispatch switch evaluate technique existing superinstruction techniques combination techniques respect prediction accuracy performance section 
introduce enhancements dynamic superinstructions addition replication particular extending basic blocks portable way detect non relocatable code fragments section 
empirically compare static dynamic superinstruction techniques section :10.1.1.23.8829

background efficient interpreters section discusses efficient interpreters implemented 
precise definition efficient interpreter fuzzy concept designed general purpose performance shows direct path specific implementation techniques 
want general purpose performance assume interpreted program spend large amounts time native code libraries 
prepare worst case interpreting program performing large numbers simple operations programs interpreters slowest relative native code programs require interpreter overhead amount useful 
avoid overhead parsing source program repeatedly efficient interpretive systems divided front compiles program intermediate representation interpreter intermediate representation design helps modularity 
deals efficiency interpreter efficiency front improved established methods speeding compiler front ends 
minimize overhead interpreting intermediate representation efficient interpretive systems flat sequential layout operations contrast tree intermediate representations similar machine code intermediate representations called virtual machine vm codes 
efficient interpreters usually vm interpreter vm interpreters efficient 
interpretation vm instruction consists accessing arguments instruction performing function instruction dispatching fetching decoding starting instruction 
dispatch common vm interpreters consume run time interpreter focuses dispatch 
dispatching vm instruction requires executing indirect branch get native code implements vm instruction 
efficient interpreters machine code simple vm instructions take native instructions including indirect jump resulting high proportion indirect branches executed instruction mix measured gforth interpreter ocaml interpreter 
popular vm instruction dispatch techniques switch dispatch uses large switch statement case instruction virtual machine instruction set 
switch dispatch implemented ansi see fig 
efficient see section 
threaded code represents vm instruction address routine implements instruction 
threaded code code dispatching instruction consists fetching vm instruction jumping fetched address incrementing instruction pointer 
technique implemented ansi implemented gnu labels values extension 
shows threaded code instruction dispatch sequence 
threaded code dispatch executes fewer instructions provides better branch prediction see section 
interpreters threaded code compiling gcc fall back switch dispatch gcc available ocaml interpreter yap sicstus prolog 
branch target buffers cpu pipelines longer time order support faster clock rates order superscalar execution 
cpus execute straight line code fast problem branches typically resolved late pipeline stage affect start pipeline 
instructions proceed pipeline cycles stage branch 
say branch takes cycles execute simplified execution model 
reduce frequency problem modern cpus branch prediction speculative execution predict branch correctly branch takes little time execute 
cycles delay incorrectly predicted term virtual machine number slightly different ways various people meaning item doc ic ac uk cgi virtual machine 
vm code vm instruction routines iadd iadd 
machine code dispatch instruction machine code iadd dispatch instruction gnu alpha assembly inst ip ldq load vm instruction ip addq increment vm instruction pointer goto inst jmp jump vm instruction address branch instruction threaded code vm code representation instruction dispatch predicted target branch target buffer btb branches called misprediction penalty 
misprediction penalty cycles pentium iii athlon cycles pentium 
best predictor indirect branches widely available cpus branch target buffer btb 
idealised btb contains entry branch predicts branch jumps target time executed see fig 

size real limited resulting capacity conflict misses 
current cpus btb style predictor athlon alpha itanium 
better indirect branch predictors proposed improve prediction accuracy interpreters substantially 
implemented widely available hardware clear available 
software techniques explored improve prediction accuracy similar amount 

interpreters ertl gregg investigated performance virtual machine interpreters branch predictors mispredict indirect branches switch dispatch interpreters indirect branches threaded code interpreters variation called btb bit counters produces slightly better results threaded code mispredictions 
reason differences prediction accuracy dispatch methods 
decisive difference dispatch methods copy threaded code dispatch sequence usually appended native code vm instruction result vm instruction indirect branch 
contrast switch dispatch compilers tested produce single indirect branch code switch compile breaks unconditional branches common dispatch code 
effect single indirect branch shared vm instructions 
mispredictions occur 
consider vm code fragment fig 
imagine loop executed 
switch dispatch indirect branch switch branch consequently btb entry involved 
jumping native code vm instruction btb entry updated point native code routine 
vm instruction dispatched btb predict target example instruction btb 
btb updates entry switch instructions point switch dispatch btb predicts current instruction executed rarely correct 
threaded code vm instruction indirect branch btb entry assuming conflict capacity misses btb instruction branch br btb entry br vm instruction dispatches instruction target selected execution occurs loop btb predict target similarly branch goto instruction predicted correctly branch 
occurs twice code fragment btb uses target prediction alternatingly goto btb predict dispatch branch correctly 
concentrate interpreters separate dispatch branches rest 

improving prediction accu racy generally long vm instruction occurs working set interpreted program btb predict dispatch branch correctly instruction vm instruction executions 
vm instruction occurs times mispredictions 
replicating vm instructions order avoid having vm instruction times working set create replicas instruction 
copy code vm instruction different copies different places 
replica occurs working set branch predict instruction correctly 
shows replication works example 
switch dispatch threaded code vm btb instruction btb instruction program entry prediction actual entry prediction actual label switch br goto switch br switch goto br goto goto label switch goto br goto threaded code vm btb instruction program entry prediction actual label br br br goto goto goto label br goto improving btb prediction accuracy replicating vm instructions threaded code vm btb instruction program entry prediction actual label br br goto goto goto label br goto improving btb prediction accuracy superinstructions copies vm instruction 
copies dispatch branch entry btb 
followed followed goto dispatch branches predict correctly mispredictions iteration interpreter executes loop possibly mispredictions capacity conflict misses btb 
superinstructions combining vm instructions superinstructions technique reducing vm code size reducing dispatch argument access overhead past :10.1.1.16.7676:10.1.1.23.8829
effect branch prediction investigated depth 
investigate effect superinstructions dispatch mispredictions particular find superinstructions reduces mispredictions far reduces dispatches executed native instructions see section 
get idea case consider combine sequence superinstruction superinstruction occurs loop occurs mispredictions iteration interpreter executes loop 
btb predictions small vm program 
implementation static approach ways implementing replication superinstructions see fig 

static approach interpreter writer produces replicas superinstructions interpreter build time typically generating code macro processor interpreter generator vmgen supports static superinstructions 
vm code generation interpreter run time interpreter front just selects built replicas superinstructions 
static replication plausible ways select copy come mind round robin select statically copy random 
tried approaches simulator achieved better results round robin rest 
explanation better results round robin selection spatial locality code execution jump code random tends stay specific region loop encounter replica twice round robin selection 
example loop get perfect result fig 
replicas round robin selection random selection replica twice produce mispredictions 
static superinstructions dynamic programming shortest path algorithm select optimal minimum number superinstructions basic block 
simpler alternative greedy maximum algorithm 
rest greedy algorithm implemented dynamic programming preliminary simulation results indicate difference results optimal greedy selection 
dynamic approach dynamic approach replicas superinstructions created vm code produced interpreter run time 
implement replication time interpreter frontend generates vm instruction creates new copy code vm instruction lets threaded code pointer point new copy see fig 

way instance vm instruction gets replica ensuring mispredictions apart resulting limited btb size 
original copies code copying executed 
front knows code copied label :10.1.1.23.8829
data segment vm code iload iadd iload iload static replication dynamic replication code segment data segment vm instruction routines vm code machine code iadd dispatch machine code iload dispatch machine code iload dispatch iload iadd iload iload data segment vm routine copies machine code iload dispatch machine code iadd dispatch machine code iload dispatch machine code iload dispatch static dynamic approach implementing replication implementing dynamic replication dynamic superinstructions requires small change dynamic replication replicas laid memory sequence vm code just copy dispatch code vm basic block ends 
results superinstruction basic block 
want dynamic superinstructions replication perform change vm basic block check superinstruction occured eliminate new replica redirect threaded code pointers version superinstruction see :10.1.1.23.8829
get dynamic superinstructions larger basic block changes keep increments vm instruction pointer copy rest dispatch code result vm code quite similar dynamic replication case threaded code pointer superinstruction eliminate increments allows continue superinstruction vm code entry points vm jump entry point threaded code pointer place result entering code superinstruction middle 
dispatch fall path conditional vm branch conditional branch code additional dispatch branch taken path eliminate fall dispatch conditional vm branch 
result optimizations dispatches eliminated dispatches taken vm branches vm calls vm returns see fig 

problem dynamic approach copy code relocatable copy code code fragment contains pc relative outside code fragment intel call instruction contains absolute inside code fragment mips instruction 
code vm instruction relocatable depends architecture compiler general copying list sufficient :10.1.1.23.8829
data segment vm code ifeq target return data segment vm routine copies code segment vm routine originals machine code iadd dispatch machine code iload dispatch machine code top stack ip target dispatch basic block boundaries machine code dispatch machine code machine code return dispatch superinstructions basic blocks approach problem versions vm interpreter function padding vm instructions 
compare code fragments vm instruction functions code fragment relocatable different 
dynamic approach requires small amount platform specific code architectures needs code flushing cache mips ensure copies mb region original code ensure jal instructions continue 
comparison main advantage static approach completely portable dynamic approach requires small amount platform specific code 
advantage static superinstructions code optimized component instructions dynamic superinstructions simply concatenate components optimization 
particular static superinstructions keep stack items registers components combine stack pointer updates components 
addition static superinstructions possible instruction scheduling component vm instructions 
advantages exploited dynamic setting combining static superinstructions dynamic superinstructions dynamic replication 
static replication superinstructions non relocatable code 
gforth code frequently executed vm instructions relocatable alpha architecture 
jvm instructions throw exceptions relative branch throw code outside code vm instruction worked indirect branch relative branch 
static approach need pay cost copying code run time including potentially expensive cache flushes dynamic approach pay 
experiments copying takes ms line program kb generated code celeron usually problem main advantage dynamic approach perfectly fits replications superinstructions interpreted program static approach select set replications superinstructions programs 
advantage dynamic approach number replications superinstructions limited resulting code size static approach time space required compiling interpreter limit number replications superinstructions compiling gforth superinstructions requires hours mb celeron 
relation just time compilers machine code resulting dynamic superinstructions replication similar simple just time jit native code compiler produces 
write jit compiler place 
reason portability 
native code compilers take significant effort retarget architecture typically months years architecture 
contrast retargeting dynamic replication superinstruction part alpha architecture took hour 
invest hour fall back base interpreter new architecture contrast want invest months effort retargeting jit need separate fallback system interpreter needs effort 
targets fallback system maintained requiring effort 
technically main difference code simple macro expanding native code compiler code dynamic replication dynamic superinstructions code accesses immediate arguments vm instruction vm code representation uses indirect branches direct branches control flow changes 
see section timing comparison 

experimental setup conducted experiments simulator experiments implementation techniques 
simulator get results various hardware configurations especially varying btb cache sizes get results noise effects cache btb conflicts comparison plain threaded code copying overhead amortized speedup startup code leading total startup times ms celeron 
program version lines description gray parser generator bench gc garbage collector chess vmgen interpreter generator cross forth cross compiler brainless chess brew evolutionary programming benchmark programs static methods instruction scheduling register allocation differences 
results simulation real implementation agree reasonably mainly report results implementation running real processors refer simulation results clarify points apparent real world implementation results 
implementation implemented techniques described section gforth product quality forth interpreter 
particular implemented static superinstructions vmgen implemented static replication replicating code super instructions interpreter startup interpreter build time respects implementation behaves normal static replication replication specific interpreted program dynamic replication 
easier implement allowed replication configurations particular replicas produce results normal static replication copying overhead impact small compared benchmark run times 
implemented dynamic methods pretty described section free choice flags replication superinstructions superinstructions basic blocks 
machinery vm interpreter including static superinstructions explore combination static superinstructions optimizations component instructions dynamic methods 
thing implemented eliminating increments vm instruction pointers rest instruction dispatch dynamic superinstructions 
static superinstructions addition dynamic superinstructions replication reduce increments addition optimizations looking results eliminating increments probably effect 
conflict superinstructions basic blocks 
machines mhz celeron apollo pro chipset mb pc sdram linux glibc gcc results 
reason choice celeron relatively small cache kb cache kb btb entries negative performance impacts code growth techniques visible processor 
plain static repl static super static dynamic repl speedup dynamic super dynamic bb static super gray bench gc vmgen cross brainless brew speedups various interpreter optimizations celeron comparison results mhz athlon kt chipset mb pc sdram linux glibc gcc 
processor larger cache kb cache kb btb entries 
processors allow measuring variety events performance monitoring counters providing additional insights 
benchmarks shows benchmarks experiments 
line counts include libraries preloaded gforth considered input files languages hard compile time run time boundary grammar gray program compiled cross far tell difference 

results interpreter variants compared variants gforth plain threaded code baseline comparison factor 
static repl static replication replicas roundrobin selection 
static super static superinstructions greedy selection 
static unique superinstructions replicas instructions superinstructions total 
dynamic repl dynamic replication dynamic super dynamic superinstructions replication limited basic blocks similar riccardi proposed :10.1.1.23.8829
dynamic dynamic superinstructions limited basic blocks replication 
bb dynamic superinstructions basic blocks replication 
static super combine instructions basic block static superinstructions superinstructions greedy selection form dynamic superinstructions basic blocks replication 
combines speed benefits static superinstructions optimization vm instructions benefits dynamic superinstructions replication 
frequently executed vm instructions sequences training run brainless benchmark static replication static superinstructions 
additional instructions static variants realistic number interpreters distributed source code cost interpreter compile time compile space gives rapidly diminishing improvements 
results complete benchmark runs including interpreter startup times benchmark compilation dynamic variants time spent code copying 
speedups shows speedups versions achieve plain various benchmarks 
dynamic methods fare better static methods exception brainless static superinstructions better dynamic replication probably training program brainless 
static methods see static replication better static superinstructions probably replication depends training run fits actual run 
combination replication superinstructions usually better see section 
dynamic methods superinstructions perform better replication 
combination performs better exceptions cross brainless celeron due cache misses athlon combination better benchmarks 
performing optimizations basic blocks beneficial static superinstructions addition helps exception brew static superinstructions improve prediction accuracy executes native instructions artifact im plain static repl static super static dynamic repl events dynamic super dynamic bb static super cycles taken branches icache misses code bytes instructions taken mispredicted cycles performance counter results bench gc celeron plain static repl static super static dynamic repl events dynamic super dynamic bb static super cycles taken branches icache misses code bytes instructions taken mispredicted cycles performance counter results brew celeron plementation superinstructions version gforth transfer interpreters versions gforth 
new techniques provide nice speedups techniques usually efficient interpreters factor static plain factor static super plain existing techniques widely factor static static super bench gc factor static super dynamic super :10.1.1.23.8829
metrics take closer look reasons speedups looking various metrics performance monitoring counters cycles tsc number cycles taken executing program proportional reciprocal speedup 
instructions event executed retired instructions 
taken branches event executed retired taken branch instructions 
taken mispredicted event ca executed retired taken branch instructions mispredicted 
plain mispredictions mispredictions dispatch indirect branches interpreter 
scale factor event taken branches directly see taken branches mispredicted 
scale event misprediction corresponds cycles approximate cost misprediction celeron athlon allows directly see time spent mispredictions compare time spent cache misses 
icache misses event instruction fetch misses 
note scale factor events rarer 
cycles event cycles instruction fetch stalled usually due cache misses scale factor event cycles directly see time spent cache misses compare taken mispredicted 
code bytes size code generated run time bytes 
due way implemented static replication see kb code generated static schemes 
shows metrics bench gc 
benchmark nearly executed branches dispatch branches effects dispatch optimizations evident 
shows metrics brew 
largest benchmark may effects code growth apparent smaller benchmarks brainless cross slightly higher proportion cache cycles locality characteristics program necessarily correlate size 
thing notice instructions taken branches count plain static repl dynamic repl 
similarly dynamic super dynamic 
reason startup negligible copying overhead interpreters execute exactly sequence native instructions coming different copies code 
difference cycles interpreters comes difference branch mispredictions cache misses similar effects looking data believe effects play negligible role 
looking cycles taken mispredicted metrics see mispredictions consume large part time plain interpreter just eliminating mispredictions dynamic replication gives dramatic speedup factor bench gc 
simulations show remaining mispredicted dispatch branches due indirect vm branches vm returns apart capacity conflict misses btb 
static methods reduce mispredictions reuse vm instructions 
dynamic superinstructions replication slightly worse misprediction accuracy dynamic replication superinstructions reused executing fewer instructions brew fewer cycles 
looking instructions see vm superinstructions reduce number executed native instructions 
static dynamic superinstructions reduce similar amounts apart brew dynamic superinstructions eliminate dispatch code see effect taken branches static superinstructions allow optimizations component vm instructions 
bb reduces instructions little static super little exception brew 
looking taken branches get similar picture instructions dynamic superinstructions reduce metric static superinstructions 
bb static super number taken branches exception brew static super changes goes dynamic superinstruction formed 
taken branches indicates simulation results confirm length average executed superinstruction quite short static superinstructions typically component instructions dynamic superinstructions component instructions 
bb increase superinstruction length forth frequent reason basic block boundaries calls returns bb help expect bb greater effect superinstruction length performance languages 
code growth frequent reaction proposal replication resulting code growth cause performance problems result slower original interpreter quick look speedups fig 
convince true cpu small caches celeron 
section take closer look code growth effect various metrics 
code bytes bars fig 
see methods produce mb native code brew longer superinstructions static superinstructions reducing code size little 
environments quite acceptable line program brew consumes mb gforth data space containing threaded code data 
dynamic superinstructions replication reuse superinstructions lot resulting generated code size kb 
size differences reflected icache misses static methods misses dynamic super replication methods reflected cycles 
cycles consume small part total cycles cases cases overcome benefit obtained better prediction accuracy particular celeron dynamic spends cycles misses running brainless compared dynamic super resulting slowdown factor dynamic faster benchmarks celeron benchmarks athlon factor brainless 
reason expect run programs particularly bad code locality recommend dynamic replication dynamic superinstructions general purpose machines 
way looking issue compare code generated replication methods code generated native code compiler typically larger native code small constant factor factor may native code compiler uses loop unrolling inlining code replicating optimizations code cache misses big issue code size resulting replication usually big issue 
balancing static methods shows timing results various combinations static replication superinstructions 
line represents number total additional instructions varying distributions replication superinstructions axis 
see performance improves total number additional instructions approaches limit cycles 
unfortunately native code forth compilers report size generated code empirical data 
cycles superinstructions replicas timing results bench gc static replications superinstructions celeron line labels specify total number additional vm instructions bb brainless brew speedups bb native code compilers plain 
see combination replication superinstructions gives results long close extreme points performance sensitive actual distribution replication superinstructions 
speed comparison native code compilers section look far resulting interpreters relatively simple native code compilers 
native code forth compilers 
data section gforth gives slightly different speedups version earlier 

ran benchmarks get run different compilers easily 
benchmarks run athlon linux glibc 
see results fig 

drawing small sample size compilers benchmarks dangerous speed difference interpreters native code compilers appears people imagine 

related accuracy static conditional branch predictors improved software methods branch alignment code replication 
looks software methods improve accuracy btb simple dynamic indirect branch predictor 
code replication differs replication conditional branch prediction aspects addresses dynamic indirect branch predictor btb static conditional branch predictor 
replication conditional branches works compile time profiling find correlations branches exploited replication data affected contrast replication changes representation interpreted program program startup time decide replicas 
better indirect branch predictors proposed number papers interpreters available hardware probably take long time universally available 
number papers improving interpreter performance 
software pipelining interpreter way reduce branch dispatch costs architectures delayed indirect branches split indirect branches 
ertl gregg investigated performance various branch predictors interpreters investigate means improve prediction accuracy threaded code 
similar vein romer investigated performance characteristics interpreters 
inefficient interpreters notice efficient interpreters spend time dispatch branches 
papers dealing superoperators superinstructions concentrated reducing number executed dispatches vm code size evaluated effect superinstructions btb prediction accuracy apart paragraphs :10.1.1.16.7676:10.1.1.23.8829
particular riccardi invested extra avoid replication order reduce code size increases mispredictions processors 

vm instruction occurs times working set interpreted program btb frequently mispredict dispatch branch vm instruction 
techniques reducing mispredictions interpreters replicating vm instructions hopefully replica occurs working set speedup factor efficient threaded code interpreter combining sequences vm instructions superinstructions speedup factor 
combination techniques achieve greater speedup factor 
variants optimizations static variant creates replicas superinstructions interpreter build time produces speedup factor completely portable 
dynamic variant creates replicas superinstructions interpreter runtime produces speedups factor requires little bit porting new platform 
dynamic techniques combined static superinstructions greater speed factor 
speedup optimization balanced cost implementing 
case addition giving speedups dynamic methods relatively easy implement days 
static replication static superinstructions pretty easy implement particular interpreter 
software data available www tuwien ac anton interpreter btb 
referees helpful comments 
performance counter measurements mikael pettersson package 

bell 
threaded code 
commun 
acm 
bell cleary witten 
text compression 
prentice hall 
calder grunwald 
reducing branch costs branch alignment 
architectural support programming languages operating systems asplos vi pages 
lzle 
accurate indirect branch prediction 
proceedings th annual international symposium computer architecture isca pages 
lzle 
multi stage cascaded prediction 
europar conference proceedings volume lncs pages 
springer 
ertl 
stack caching interpreters 
sigplan conference programming language design implementation pages 
ertl gregg 
behaviour efficient virtual machine interpreters modern architectures 
euro par pages 
springer lncs 
ertl gregg krall 
vmgen generator efficient virtual machine interpreters 
software practice experience 

pipelined java virtual machine interpreters 
proceedings th international conference compiler construction cc 
springer lncs 
van de 
code compression system pipelined interpreters 
software practice experience sept 

indirect branch prediction data compression techniques 
journal instruction level parallelism dec 
krall 
improving semi static branch prediction code replication 
conference programming language design implementation volume sigplan pages orlando 
acm 
riccardi :10.1.1.23.8829
optimizing direct threaded code selective inlining 
sigplan conference programming language design implementation pages 
proebsting 
optimizing ansi interpreter superoperators 
principles programming languages popl pages 
romer lee voelker wolman wong 
baer bershad levy 
structure performance interpreters 
architectural support programming languages operating systems asplos vii pages 
santos costa 
optimising bytecode emulation prolog 
lncs proceedings ppdp pages 
springer verlag september 
young smith 
comparative analysis schemes correlated branch prediction 
nd annual international symposium computer architecture pages 
young smith 
improving accuracy static branch prediction branch correlation 
architectural support programming languages operating systems asplos vi pages 
