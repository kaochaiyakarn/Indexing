exploiting map metaphor tool software evolution william griswold jimmy yuan kato dept computer science engineering university california san diego la jolla ca usa cs ucsd edu department advanced interdisciplinary studies university tokyo ku tokyo japan ai tokyo ac jp software maintenance evolution dominant activities software lifecycle 
modularization separate design decisions allow independently evolved modularization breaks complicated global changes required 
tool support reduce costs unfortunate changes current tools limited ability manage information large scale software evolution 
argue map metaphor serve organizing principle design effective tools performing global software changes 
describe design aspect browser developed map metaphor discuss case study removing feature line program written fortran cost software maintenance evolution disproportionately large relative amount code changed resulting change software behavior 
cause inadequate modularity change local dispersed components 
programmer making change code interest single place extra effort invested identifying places requiring change completeness changing places change consistent consistency 
change incorrectly requiring higher correction costs 
simplistic example renaming global variable requires locating variable definition uses changing name 
misspelling choice name local variable inject hard find software fault 
change limited module file code interest concisely enumerable scanning lines visually editor simple search 
conflicts modules precluded minimized encapsulation 
inherent visibility gives modularity cognitive leverage consistency completeness achieved process reliable visual recognition minimal dependence potentially faulty recall research supported part nsf ccr ccr part uc micro systems took place part author sabbatical aspectj group xerox parc 
memory pp 

reduces likelihood injecting faults need double check completeness consistency change 
unfortunately achieving long term stable modularity useful software system impossible 
software designers anticipate changes added features performance improvements interoperability requirements localize anticipated change module 
users competitive markets inevitably create need software changes anticipated 
consequently designers estimate changes foreseeable focus isolating modules 
changes outside scope dispersed source code 
natural question tool support assist making global changes 
tool choice today text matching tool grep cousins due ease speed integration editing environment 
grep takes regular expression list files lists lines files match pattern 
tools limitations relatively weak pattern matching capabilities insufficient information match relationship module appears matches results previous searches incomplete management information relating change progress task 
complicate achieving completeness consistency increasing programmer dependence recall changes correctly 
tool seesoft enables visualizing lines code match criterion textual regular expression global view files complement tool grep enables seeing matching lines relate system large 
starting point aspect browser ab tool assisting evolutionary changes making code related global change kind aspect feel unified entity module :10.1.1.115.8660
pilot study aspect program property behavior implementation naturally crosscuts behavioral decomposition procedures objects system 
consequently may difficult impossible effectively separate aspect program entities 
prototypical aspects security caching memory management complex protocols aspects arising software evolution due addition new functionality basic architecture software established 
ieee revealed ab simple combination technologies inadequately relieve programmer recall demands evolving large programs 
experience led insight ab providing support aspect code treated module ab adopt metaphor maps support manipulation modules aspects class entities right 
maps highly evolved human artifact planning way finding spatio visual abstraction 
away unneeded detail compress presentation human sized proportions leverage human visual system recognize entities organize complex information 
symbols host standard map features elevate physically dispersed entities class status 
example location entity map placement dimensional plane readily discernible humans 
likewise symbol representing class entities shape texture color visually distinguishable permits quick recognition classification 
apply map metaphor programs spatial symbolic qualities ascribed non spatial non symbolic entities 
seemingly natural choice delineation regions denote modules symbols denote members aspects module scoped entity code logically contained aspects lacking containment naturally assigned symbols recognized appearance location 
location relationships proximity containment relationships modules aspects proximity aspect symbols modules aspects quickly recognized 
property exploited seesoft 
ab completes map metaphor including indexing ala street indexes cursor customization zooming annotation folding street map folded smaller 
features fall realm animated maps support automated customization implementations informal ways maps useful 
essential domain extraordinary size programs mapped wide variety uses tasks map applied map fits solution 
animation permits map remain date course program changed part task 
sections discuss relevance map metaphor software evolution ab 
gain insight relevance map metaphor evolution describe case study ab applied removing feature line fortran finite element solver system 
closing discuss related 
map metaphor addition putting modules crosscutting aspects equal footing overlaying aspect symbols module regions adopting map metaphor addresses challenge scale 
evolving maintaining large systems involves crosscutting aspects enormous size complexity result global views capacity normal computer monitors cognitive capabilities programmer 
likewise change aspect spread considerable span time stressing programmer ability recall accomplished far remains done 
maps evolved time address scale issues 
modern maps provide magnified zooming show needed detail small critical regions allowing main map rendered smaller scale provide indexes special entities roads parks schools permit locating alphabetic search scanning entire map permit folding fit small space time allowing far away locations placed marked annotated stuck pins record long complex routes mark current location route color scheme parts map indicate current interest periphery map show mexico canada tones 
animated maps allow map user dynamically choose zoomed features displayed map permitting higher level customization informal actions folding marking 
animation ensures current state entity mapped essential property software evolution 
likewise changes map time reflect progress completing task example conveying places visited changed 
animation map really comes represent map plan software evolution task carried just static program 
map metaphor instruct manage scale ab 
metaphor revealed seemingly independent features ab related metaphor 
example cast list aspects index aspects recognized list redundancies tool infers user section aspect index managed common mechanism 
unification combined programmer familiarity features maps eases tool 
aspect browser aspect ab defined pair consisting pattern grep regular expression color 
aspect enabled display program text matched pattern highlighted aspect corresponding color 
enclosed regions represent modules files color regions denote location portion aspect modules aspects class representation environment 
functionality achieved integrated tools nebulous aspect emacs 

screen shot aspect browser nebulous source 
top foreground panel aspect index containing pattern forward blue cursor green chosen help find code added new traversal feature conflict highlighting 
index emacs buffer containing aspects 
background nebulous aspect files folded 
nebulous cursor unfolded file left 
zooming traversal features appear near bottom status bar 
nebulous 
nebulous provides main map program task view seesoft concept 
file represented region vertical strip row pixels strip represents line code forth background 
file background set editor background color provide cue file strips low resolution maps editable source code 
files placed default alphabetical order left right orders age may chosen 
subdirectories project shown large regions containing set file strips 
hierarchical alphabetical listing provides spatially accurate map project represented file system minimizing programmer changes focus tool command prompt vice versa 
files project specified list regular expressions indication inclusion hierarchical specification stored project file sessions 
nebulous displayed aspect highlighted color matching locations line line basis permitting nature crosscutting readily perceived 
aspect resides line aspect patterns match different parts line nebulous highlights line red indicate aspect collision 
necessitated low resolution view proves useful software evolution tasks providing cue aspects alternate hierarchical presentations project specified 
interacting 
proximity aspect highlighting provides similar cue collision 
separate map key lists aspects view including conflict aspect listing aspect pattern color number matches system 
state changing operations enabling aspect pattern saving file reflected nebulous map 
double clicking strip nebulous window causes emacs open file display portion file user clicked essence generating editable map inset 
action leaves red cursor nebulous view helping programmer stay oriented returning nebulous 
addition cursor nebulous provides mechanisms managing large maps 
provides standard un map scrolling operations horizontal scrollbars showing hidden files vertical scrollbars showing hidden portions file 
operation available quick scrolling current cursor moved screen perusal view 
invisibility information generally undesirable zooming permits changing resolution map better fit display show detail 
zooming level example causes program source lines file mapped row pixels file region merging highlighted lines different aspects results red conflict highlighting 
file width separately adjusted desired 
narrow width clip file name status window shows name file currently mouse 
dimming files contain highlighted aspects helping programmer focus attention brighter files 
folding narrows interior file contain highlighted aspects leaving border crease indicates file folded 
folding provides compaction view alters spatial relationships positioning 
bring portions aspect closer programmer putting files unfamiliar locations map farther left 
amount folding occurs provide quick assessment extensively aspect crosscuts system 
manage scale ease non modular operations aspect perusal aspects class entities tool nebulous provides kinds traversal operations 
aspect traversal enables walking forward backward lines comprising aspect 
single chosen aspect traversed enabled aspects may traversed 
forward traversal proceeds top argue scrolling akin flipping pages atlas 
atlas essence ordered list maps shared index packaged small form factor small maps anyway 
effective coupling maps minimal necessarily case evolution crosscutting aspects 
case cursor functioning bookmark atlas 
bottom left right map cursor indicating location map editor window showing code location 
traversal starts upper lefthand corner cursor divides map visited region left visited region right helping programmer keep track progress traversal task single concise cue 
history traversal allows backing revisiting series previously visited locations visited aspect traversals double clicking mouse 
useful reviewing revising prior changes 
aspect emacs 
aspect emacs ae emacs lisp extension gnu emacs provides map indexing map inset editing capabilities ab 
aspect enabled ae highlights matching text displayed buffers aspect corresponding color bottom foreground 
high resolution editing view need conflict highlighting aspect match independently highlighted color 
ae manages aspects aspect index browser top foreground 
browser shows pattern color match count programmer annotation aspect 
user perform number operations aspects create delete hide disable show enable list show lines aspect change color edit annotation 
large number aspects may created tool may variety tasks hierarchical indexes provided organize aspects 
index essentially compound disjunctive aspect aspect operations applied indexes providing concise manipulation group aspects 
simple tool walking user initializing project specifying project files naming conventions full browser state saved tool sessions 
requirements evolve modules may explicitly added programmer aspects emerge unnoticed 
consequently helpful aspects discovered programmer 
ae uses simple concept tools aspect discovery automatic generation aspect indexes called redundancy finder tag finder 
redundancy finder tool searches project find redundancies code reporting line appears ignoring leading trailing white space 
approach effective identifying code introduced copy paste programming common programming tactic 
tag finder tool extracts fragments identifier names tags source code programmer specified naming convention 
example name delete source file contains tags delete source file separated underscores 
tools report results index aspect patterns associated occurrence counts initial state disabled manually created aspects 
case study questions wished explore respect ab making large scale crosscutting changes 
wanted see programmer ab map adopt behaviors consistent maps including language gestures actions 
behaviors suggest naturalness metaphor software evolution indicate successful employing 
second wanted see map metaphor assisted programmer 
third wished identify potential improvements ab 
experimental method chose perform case study introduce tools real environment minimal manipulation experimenters 
choice achieve high realism aspects task 
chose project department ucsd developing advanced finite element analysis tool number years 
large project encountering problems going development due legacy software issues making suitable study 
programmer volunteered study earlier version tool understood concept crosscutting aspects 
usually uses vi editor emacs felt tools help specific task volunteered case study 
observational method called constructive interaction pair programmers conjunction change 
paired problem solving results natural productive conversation providing insight programmers thought processes consciously talking aloud experimenters 
programmer called subject paired programming extensively undergraduate natural mode 
subject paired programming occasionally context 
familiar ab emacs tool authors help unfamiliar features natural paired programming occurs learning situations 
program written fortran chose tool author fortran expertise 
reduce second wheel status second subject resulting constructive interaction 
observation bore second participant observer subject successfully questioned primary programming times instructed obscure aspects fortran 
refer subject referring primary subject 
data collection videotaped monitor sgi octane irix unix workstation subjects worked 
subject small microphone clipped order record dialog experiment 
common concern single case study represents just data point 
case studies analogous experiments results tested replication sampling pp 

sources allowed study discussions mouse movements process got done 
second subject provided brief tutorial new features added aspect browser subject tool 
subject allowed tools saw fit second subject instructed influence choices stuck instruction 
interaction subjects experimenters took place technical problems tools 
task 
prior study subject selected maintenance task tool aspect browser able help perform 
set time limit task part job took hours 
likewise subject free take breaks liked decide experiment 
program modified finite element analysis program consisting lines fortran code lines totalling mb data 
program divided files directories 
feature called regions abandoned years ago removed 
regions implemented adding dimension existing arrays integer value denoting number regions current problem 
integer usually communicated functions parameter called nr hardwired place existed code places put 
task remove code pertaining regions breaking program 
feature code spanned major directories program source 
state aspect browser features described section complete unavailable study tool project file creation editor hierarchical aspect indexes nebulous status panel shown file strip ordering options nebulous defaulted left right order read file system complete regular expression support 
useful deemed essential task issues arose pointed usefulness valuable outcomes 
sub feature regular expression matching supported exact word matching permitted matching short variable names extraneous matches variables contained pattern substring 
presence observers external participant observer necessary component case study research purpose data collection potential bias minimized issuing careful instructions interaction pp 

observations high level observations 
subject knew key variable regions feature nr 
documentation website listed functions arrays took nr parameter 
starting point task 
wrote function array variable names said initial aspects 
subject ran ab directory basis choosing directories order reported unix ls directory listing command 
grep couple directories concluded contained code interest 
directory fe search produced matches started ae 
created exact word pattern nr avoid matching letters nr contained word 
added names written changed colors objectionable 
created file nebulous specified files part project started nebulous 
fe contained files 
zoomed aspect lines thicker 
project convention function file zooming obscured lines file largest functions 
changed file strip width pixels get files screen 
starting leftmost file nebulous view double clicked highlighted line brought emacs view highlighting selected aspect line nearby view 
began removing occurrences nr related entities scrolling editor commands 
subtasks emerged 
removed nr appearing function calls 
encountered function wrote added aspect annotation parameter position nr appeared 
new functions added finished modifying file 
function definitions parameter declaration deleted 
removed uses nr array index 
removed region dimension declarations said arrays 
removed loops iterating regions nr representing upper bound loop 
certain variable declarations related regions imported include unused checked removed import 
include file name aspect serving reminder subtask 
task complete created aspects 
ran small set standard multi part test cases expose introduced bugs working easiest hardest running interactively isolate mis nr global apparently naming conventions project virtually ensured function parameter representing number region named nr 
just fortunate wise tactic fortran simple data representations type system cause programmers encode entities integers rendering program type information useless distinguishing entities 
modern languages course programmers integers directly kinds quantities 
behaviors 
subject determine problem associated changes part run test cases immediately prior change baseline 
determined problem unrelated change 
difficult test case demanding problem run system simulation electrical wave propagating heart ran completion glitches 
subject surprised performance improvement claiming faster 
routine behaviors 
directory subject entered directory copied project file specification previous directory started emacs aspect browser mode 
loaded list aspects built saved previous directories 
launching nebulous folded files aspect matches changed file strip width thinner default zoomed 
starting leftmost file strip match brought emacs match view 
done file save raise aspect index window add new aspects immediately saving list 
slide mouse nebulous view cursor left double click navigation emacs slide mouse file strip right match bring code selected match emacs 
functions took nr argument subject wanted define aspect name pattern wanted regular expressions capture full argument list call 
way unedited calls matched example containing parameters 
file saved editing nebulous updated show aspect longer appeared file signalling change complete want white said true map metaphor fact map remove irrelevant white file strips 
lacking full regular expression support subject depended reliable combination cues process 
subject double click nebulous match file inspect matches top edit buffer normally line line scrolling hold control continuous scrolling quickly looking match making change necessary continuing bottom buffer 
normally top buffer sure ok second backwards pass served return subject top buffer possibly unused import resided permitting deleted uses import encountered way 
process ensured match spurious inspected times 
relevant lines usually highlighted places colors parameter nr function known take region number parameter 
bright green highlighting nr sure hit just function highlighted constant literal passed nr function 
glance calls appearance edited call kinds spurious matches 
subject fact missed caught partner 
ultimately subject different methods visit match file 
volunteered tended scroll matches edit buffer traversal features take hands keyboard 
suggested add shortcut aspect navigation 
said double clicking match file strip top bottom matches far apart faster move hand keyboard mouse 
noted aspect traversal buttons large files file strip fully visible fully clickable scrolling 
method took file automatically complained wanted save file going 
choice method entirely consistent conditions suggesting factors habit played role choosing traversal method 
completing changes directory subject typically recompile directory expose syntax errors 
recompiling running program impossible declarations uses consistent directories 
common error uncovered deletion wrong enddo 
nr function body overlooked undefined declaration deleted function definition 
modifying directory array uses referenced fewer dimensions declarations defined subject immediately went include directory deleted region dimension declarations 
mismatches procedure calls declarations checked compiler linker 
observed behaviors 
subject deviated routine behaviors instances discuss 
directory fe introduced new aspects subject turned aspects matching function calls directory sure mistakes 
realized variable pulling related regions changes needed undone 
start checked clean version system created aspect matches show code reinserted methods locating information map redundant 
example looking park person go index look grid coordinates park look map methodically searching green areas representing parks desired park 
modified code 
directory small number matching files postponed biggest file matches 
departure normal left right walk directories led question done particular file despite having simple metric remind file skipped 
departures routine behavior somewhat analogous routine behavior aspect symbols map places revisit geographically contiguous order 
symbol adjust visitation symbol large region affordance symbolically unrelated change prone confusion 
exceptional behaviors point power metaphor importance symbols related change ensure completeness task 
discussion appropriateness map metaphor 
appropriateness map metaphor gauged map successful features generally behaviors language consistent maps 
surprisingly subject trouble basic symbols adopted ab 
confusion enclosed regions view called file strips denoted files current directory subject colored lines pixels file strip denote crosscutting aspects 
confusion double clicking aspect symbols generate inset detailed inspection 
interesting aspect symbols enumeration places required change relating symbols tasks things organize changes spatially continuous route left right top view 
repetitive zooming folding behaviors consistent idiomatic map map users constantly manipulate maps information interest accessible 
deviated folding behavior smaller directories visibility issue 
subject memorize colors aspects symbol content color assisted change 
hours study said green nr looking file nebulous view double clicked green line examine closely 
little bunch highlights nebulous said range point coloring similar objects color inconsistently required additional command 
color connected aspect particular task 
look green 
new aspects right baby 
nr recognition symbols triggered recall subtasks reducing chance forgotten 
patterns color file strips served task triggers 
swirling mouse arrow adjacent strips looked similar length coloring subject said knew delete file matches pretty just edited 
colors exact recognition dependent numerous spatial color cues 
depended proximal placement files ease recognition chance placement increased folding irrelevant files 
colored line symbols denote places requiring change presence lack symbols progress indicator including done estimation 
want white said early task 
interview said way think tool color looking nebulous number files particular highlight colors important 
starting nebulous new directory said oh lot files 
somebody shoot folding hey fit 
take nr ironically great expressing lot 
despite behaviors subject said having colors representing match match essential 
didn really see colors things things showed lot accidentally memorize colors 
see file say guy got net 
guy got nr 
cause guys showed lot 
wasn super helpful pull things matter color anyway judge part artifact particular task subject chose symbols guide ab easier map aspects smaller number colors say subtasks different choice 
subject frequently spoke spatial terms 
judge regardless tools get defined extent file system program organizations manifest region concept maps thing view software evolution relating stored disk displayed nebulous 
language clearly related map metaphor ab 
working pointed upper left corner nebulous saying start time re making right side screen said got marker clicked know file anyway language indicates notion left right tour map cursor keeping track place 
interview subject said nebulous gives look far away estimation assessments progress useful planning breaks long running task cause disproportionate loss context memory programmer developed draw change 
example noon subject asserted take lunch break soon current directory done 
fact additional directory change quite small oh look 
file 
ll fe enabling reuse context preserve sense momentum 
finishing fe quick check directory fe suggested quite large decided break lunch 
gives idea far am phrases suggests map metaphor appropriate natural subject speak terms people may geographic maps 
failures un map features ab point value map metaphor 
occasionally portion file strip shown nebulous file contained especially long 
caused subject overlook hidden highlights despite scroll bar cue scroll bar omitted altogether file fits 
observed problem separate study 
zoom fit button file strip fitting easy problem usually side stepped 
non alphabetical ordering file strips led subject indulge time consuming search find particular file view 
files priori adjacency dictate proximal placement consistent location cues provided maps common powerful way humans find things 
directory listing commands ls produce results alphabetically default reinforce cue 
scalability 
program experiment simply big view ab 
directories files files largest produced full width view adjusting width folding unmatched files 
loading directories incurred significant performance cost spreading activity time stressing recall added visibility offset loss 
directory appeared natural unit task 
files directory loosely grouped subsystem 
definition function uses appear directory 
coherent functionality subsystem purpose files served consistent directory resulting repetitive changes narrow time frame easier recall perform progressed directory 
directory natural unit validating changes 
finishing directory subject performed visual checks directory ab revisiting remaining highlights advantage makefile appeared directory typically recompiled finishing directory 
changes performed relatively problems generally easy diagnose repair 
respect subject chunked ab atlas copes scale providing collection related maps shared index 
common aspect index crucial chunked application ab aspects discovered course change option 
behaviors precluded program loaded ab 
hierarchical display subdirectories provides cues remind programmer perform subsystem validation demand driven computation improve performance 
point invisibility countered just global display global index scalability better managed providing explicit atlas support filing directories tabs currently popular way pack function tools 
tools 
compiler played key role directory validation finding syntax errors inconsistent declarations 
capabilities outside ab scope compiler critical complementary tool task 
subject limited tools providing matching functionality early study 
closing interview subject said looking directories grep see output grep aspect just aspects look say impossible just get discouraged say 
brought aspect emacs nebulous brought nebulous see thing little back think said tool grep superior want know right 
just type grep name star 
comes information wanted 
fastest way find information noted auxiliary preliminary aspect searches best done grep ab running didn turn aspects clearly see search results 
unsure features provided hierarchical indexes overcome advantage 
question tools unavailable subject proved useful 
tool implemented programs principle infer de facto type region number provide graphical display relationships functions :10.1.1.36.9375
ab bootstrapped initial set variables appropriate type 
likewise identification complicated passing literal nr places interrupting transitivity inference 
course analysis complete viewing editing inferred types uses program benefit view map metaphor 
completeness consistency bugs incompleteness inconsistency change rare mistakes caught compiler subject subject partner 
subject change process enhanced completeness consistency ab expression map metaphor 
subject worked right top bottom nebulous emacs cursor cue location progress task 
subject remember add new aspects close calls subject eased study placing browser bottom covered window 
explicit completeness consistency actions backtracking subset matches completion directory enabled ab traversal aspect disabling features 
errors frequent early study 
compiling modified directory produced number syntax errors matching enddo deleted properly uses edited declarations separate include file 
updating declarations time activity avoid problems deleting loops subject decided think thing going delete enddo delete matching enddo immediately continuing changes file scrolling supposedly appropriate enddo 
problems subsequent decision show tension removing feature aspect preserving integrity current procedure module 
short completeness consistency aspect change tension consistency module 
ab addresses tension part location denote module properties colored symbols denote aspect properties 
slight change subject editing process reduced module consistency problem expense extra scrolling file potentially losing place change aspects 
subject doubt increased importance able view white files folded show aspect change complete 
related rigi reverse engineering tool capturing module structure architecture system 
extracts initial structural view program hierarchical structure function calls variable 
boxes represent modules kind edges show relationships nesting shows membership 
programmer customize view manage detail capture conceptual relationships graph layouts may customized achieve informative view 
reflexion modelling rm provides mechanism recording displaying exploring iteratively refining task specific box arrow conceptual view system 
provides regular expression mechanism specifying component membership lightweight robust source model extraction tool inferring wide array relationships components :10.1.1.50.6009
spatial relationships organize information tools complete metaphor map features cursors indexes folding 
suited capturing fine grained crosscutting principle 
capability dynamically reflect changes software modelling extended map metaphor directly plan carry evolutionary changes 
conversely ab show relationships edge connections 
crosscutting changes arise evolution large software systems costly dispersal related code creates tension managing code single view ensuring integrity modules crosscutting code embedded 
tools grep seesoft provide basic technology counter problems incomplete solution difficulties large scale software evolution 
technology maps highly evolved mechanism managing scale coping dispersed spatially related entities suggests way augment integrate software technologies application software evolution 
implemented aspect browser demonstrate applicability map metaphor issues software evolution performed case study determine map metaphor influenced aided software evolution 
ab programmer successful making complex change removing crosscutting feature line system 
programmer behaviors analogous map user symbols mark places requiring change visiting places tour symbols map 
processes strategies developed ab left right edge tours map ensure completeness combining highlighting hiding focus attention successful minimizing bugs produced running system minimum debugging 
problems programmer encountered point additional ways map metaphor applied inclusion atlas features improve scalability 
studies provide additional insight appropriateness map metaphor better assist software evolution 
acknowledgments 
early version nebulous implemented eric 
gregor kiczales suggested idea highlighting program text show crosscutting 
grateful anonymous subject andrew mcculloch group lab 
anonymous reviewers michael wesley leong detailed constructive comments original submission 
aspect browser available internet www cs ucsd edu users software 
aho 
pattern matching strings 
book editor formal language theory perspectives open problems pages 
academic press new york 
belady lehman 
model large program development 
ibm systems journal 
reprinted lehman belady editors program evolution processes software change ch 
apic studies data processing 
academic press london 
griswold 
software tools organize programmer behavior task data encapsulation 
empirical software engineering april 
eick steffen jr sumner 
seesoft tool visualizing line oriented software statistics 
ieee transactions software engineering november 
kato griswold yuan 
experimental study scalability tools utilizing information transparency 
international conference software ifip world computer congress pages august 
kiczales lamping mendhekar maeda lopes loingtier irwin :10.1.1.115.8660
aspect oriented programming 
th european conference object oriented programming pages 
springer verlag june 
maceachren 
maps representation visualization design 
guilford press new york 
miyake 
constructive interaction iterative process understanding 
cognitive science 
muller tilley orgun 
reverse engineering environment spatial visual software interconnection models 
proceedings sigsoft fifth symposium software development environments pages december 
murphy notkin :10.1.1.50.6009
lightweight source model extraction 
acm sigsoft symposium foundations software engineering pages october 
murphy notkin sullivan 
software reflexion models bridging gap source high level models 
acm sigsoft symposium foundations software engineering pages october 
callahan jackson :10.1.1.36.9375
program understanding tool type inference 
proceedings th international conference software engineering pages may 
preece 
human computer interaction 
addison wesley publishing menlo park california 
robinson morrison 
elements cartography 
wiley new york th edition 
rosson carroll 
active programming strategies reuse 
ecoop th european conference object oriented programming pages 
yin 
case study research design methods 
sage publications park ca 
yuan 
map metaphor assist cross cutting software changes 
masters thesis university california san diego department computer science engineering april 

