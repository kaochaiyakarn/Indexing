bunch clustering tool recovery maintenance software system structures mitchell dept mathematics computer science drexel university street philadelphia pa usa mail mcs drexel edu chen gansner labs research park avenue florham park nj usa mail research att com software systems typically modi ed inorder extend change functionality improve performance port di erent platforms 
developers crucial understand structure system attempting modify 
structure system may apparent new developers design documentation non existent worse inconsistent implementation 
problem alleviated developers able produce high level system decomposition descriptions low level structures source code 
developed clustering tool called bunch creates system decomposition automatically treating clustering optimization problem 
describes extensions bunch response feedback received users 
important extension terms quality results execution ciency feature enables integration designer knowledge system structure fully automatic clustering process 
case study show new features simpli ed task extracting subsystem structure size program exposing interesting design aw process 
keywords automatic clustering reverse engineering software re engineering optimization algorithms 

size complexity software systems continues grow developers create increasingly sophisticated applications 
implementation applications typically involves large number modules classes interconnected intricate ways 
creating mental model structure complex system keeping mental model consistent changes occur system evolves serious problems confront today software developers 
problem exacerbated problems inconsistent non existent design documentation high rate turnover information technology professionals 
attempt alleviate problems mentioned automatic technique decompose structure software systems meaningful subsystems 
subsystems provide developers high level structural information helps navigate numerous software components interfaces interconnections 
papers automatic technique treats clustering optimization problem solved hill climbing genetic algorithms :10.1.1.14.3376
technique implemented tool called bunch 
outcome rst evaluation bunch encouraging felt round evaluation systems di erent sizes necessary 
second round evaluation con rmed capable producing results ciently module dependency graph mdg mq average partitioned module dependency graph subsystem subsystem subsystem average 

modularization quality example exposed areas improvement apparent wrote rst papers 
follow presents features added bunch address weaknesses shows features applied cluster modules dot graph drawing tool 
structure rest follows section presents overview bunch tool 
section describes limitations bunch identi ed rst round user evaluations 
section presents new features added bunch feedback evaluations 
section describes case study conducted order evaluate new features 
section presents overview related research area software clustering 
section summarizes contributions outlines plans improve bunch 

bunch clustering tool describe bunch cluster source level modules dependencies subsystems :10.1.1.14.3376
tool assumes modules dependencies system mapped module dependency graph mdg 
formally mdg graph set named modules software system set ordered pairs hu vi represent source level dependencies procedural invocation variable access modules system 
mdg automatically constructed readily available source code analysis tools cia acacia 
example mdg shown 
su ces mention mdg shows les nodes dependencies directed edges dot graph drawing tool 
clustering problem solved bunch stated nding partition mdg graph 
term partition traditional mathematical sense decomposition set elements nodes graph mutually disjoint clusters 
partition mean partition highly interdependent modules nodes grouped subsystems clusters conversely independent modules assigned separate subsystems 
example partitioned mdg dot tool shown 
finding graph partition involves systematically navigating large search space possible partitions graph 
bunch treats graph partitioning clustering optimization problem 
goal optimization maximize value objective function called modularization quality mq de ned explained table 
mq determines quality mdg partition quantitatively trade interconnectivity dependencies modules distinct subsystems intra connectivity dependencies modules subsystem 
trade assumption designed software systems organized cohesive subsystems loosely interconnected 
mq designed reward creation highly cohesive clusters penalize excessive coupling clusters 
values mq internal cohesion external coupling 
illustrates mq calculation de ned table small mdg consisting modules partitioned subsystems 
naive algorithm nding best optimal partition mdg enumerate partitions select partition largest mq value 
algorithm practical large number modules number partitions graph grows exponentially respect number nodes 
bunch uses cient search algorithms discover acceptable sub optimal results 
algorithms hill climbing genetic algorithms 
shows main window bunch tool 
window prompts user specify clustering algorithm hill climbing name mdg input le dot name clustered mdg output le dot dot 
input le contains encoding mdg list ordered pairs 
pairs represent dependencies source level modules software system 
output le generated bunch contains textual graph nodes partitions 
mq modularization intra inter quality mq connectivity connectivity pk ai ei ai ei table 
mq mdg partitioned clusters difference average inter intra connectivity clusters 
intra connectivity ai consisting ni nodes intra edges fraction maximum number intra edges 
inter connectivity ei distinct clusters consisting ni nj nodes respectively inter edges fraction maximum number inter edges 

main window bunch description partitioned mdg dot format readable dotty visualization tool 
far bunch software systems including compiler small operating system le system industrial strength operating system source code analysis system graph drawing tool see section :10.1.1.14.3376
result produced bunch evaluated developer expert knowledge implementation system analyzed 
general received positive feedback developers noted bunch able identify subsystems successfully 
fact bunch job producing subsystem decomposition absence knowledge software design exists source code 
designers knowledge design 
see section improvements bunch advantage knowledge 

limitations early ver sion bunch feedback received developers identi ed major limitations bunch 
system modules belong particular subsystem subsystems 
modules called omnipresent large number modules system 
omnipresent modules modules thought drivers omnipresent modules modules thought libraries 
clustering process module mdg assigned subsystem 
suitable subsystem omnipresent module may exist large number subsystems may depend module 
example program may sense assign stdio particular subsystem large number subsystems perform operations 
users suggested provide facilities identify subsequently isolate omnipresent modules modules tend obfuscate system structure 
solution isolate driver modules subsystem library modules subsystem 

experienced developers tend intuition modules belong subsystems 
unfortunately bunch produce results con ict intuition 
possibility developers mistaken believe bunch responsible con icts reasons 
bunch produces sub optimal results 
mq takes account topology mdg graph hope capture subtleties semantics clustering 
ideally developers able knowledge bias partitioning process 
example developers able specify constraints group modules subsystem modules constitute entire subsystem 
constraints reduce large search space graph partitions help bunch produce results quickly 

maintenance structure software system inevitably changes 
example new module introduced old module replaced inter module dependencies added deleted 
developer bunch re cluster modied mdg observed minor structural change software structure resulted signi cant changes mdg partition 
surprising bunch results sensitive factors long users willing wait areas search space algorithm happened explore 
ideally maintenance purposes bunch try preserve existing subsystem structure minor changes system 
radical re partitioning scratch incremental justi ed signi cant changes system structure 
section describes enhancements bunch order solve aforementioned shortcomings 

bunch extensions describe new features bunch 

omnipresent module detection assignment new version bunch allows users specify lists omnipresent modules clients suppliers 
lists speci ed manually determined automatically bunch omnipresent module calculator 
regardless omnipresent modules determined bunch assigns omnipresent clients suppliers separate subsystems 
shows user interface omnipresent module calculator 
users start specifying omnipresent module threshold multiple average edge degree mdg nodes 
example user speci ed multiple see means module omnipresent times incident edges typical 
omnipresent module calculator 
specifying omnipresent modules module 
calculate button pressed calculator computes average node degree graph searches mdg modules degree exceeds threshold 
candidate omnipresent modules displayed list see bottom users select omnipresent modules 
selected modules automatically placed lists omnipresent module window shown 
lists may edited users want add remove omnipresent modules 
window enables users specify incident edges omnipresent modules drawn graph drawing tool creating output 
edges may drawn di erent color may removed graph presentation altogether 

user directed clustering user trying extract structure software system knowledge actual system design 
user directed clustering feature bunch enables users cluster modules manually knowledge system design advantage automatic clustering capabilities bunch organize remaining modules 
shows user directed clustering dialog box 
user speci es le name describes user speci ed clusters software system 
format les simply cluster name followed 
user directed clustering window 
orphan adoption window names modules cluster 
bunch preserves user speci ed clusters searching optimal partitioning mdg 
default bunch removes modules add modules user speci ed clusters 
locking ed clusters desirable 
bunch includes option allows automatic clustering process add modules user speci ed clusters doing yields better result 
user directed clustering manual placement omnipresent modules subsystems advantageous side ect reducing search space mdg partitions 
enabling manual placement modules subsystems techniques decrease number nodes mdg purposes optimization result speed clustering process 

incremental software structure maintenance system organization obtained desirable preserve possible evolution system 
integration orphan adoption technique bunch enables designers preserve subsystem structure orphan modules introduced 
orphan module new module integrated system module undergone structural changes new dependencies created modi ed module modules system 
shows orphan adoption dialog box 
user prompted name le dot sil speci es known structure mdg partitioning software system 
known partition may constructed manually user obtained automatically previous result produced bunch 
user prompted list orphan modules 
new relationships involving orphan modules obtained le speci ed input file mdg eld main bunch window 
bunch implements orphan adoption rst measuring mq orphan module placed new subsystem 
bunch moves orphan module existing subsystems time records mq relocations 
subsystem produces highest mq selected parent module 
process linear respect number clusters partition repeated orphan module 
new features added bunch began new round evaluation 

bunch reevaluation section details case study bunch analyze structure speci program authors helped design implement 
particular applied bunch graph drawing tool dot sequence versions evolving years 
note dot draw figures 
purposes limit dot 
rst describe user guided session bunch recover program structure show handled incremental transition version 
follows useful high level view dot program structure 
program reads description directed graph user options structure attributes graph draws graph automatic layout algorithm 
automatic graph layout technique basically pipeline graph transformations graph ltered step adds speci layout information rst cycles graph broken necessary information node clusters added nodes optimally assigned discrete levels edges routed reduce edge crossings nodes assigned positions shorten total length edges nally edges speci ed bezier curves 
layout done dot writes le user speci ed output format postscript gif 
model employed create mdg dot uses les modules de nes directed edge les code le refers type variable function macro de ned le 
globals globals dot input utils shapes emit splines position flat rank class cluster decomp acyclic conc class ns dot timing procs output const macros types 
module dependency graph mdg dot 
ps graph input ns decomp splines class output emit position class dot rank utils conc flat cluster acyclic gd shapes timing globals ps dot globals procs macros const graph types cdt 
automatically produced mdg partition dot 
dot emit output input shapes decomp cdt globals procs splines class rank class ps position acyclic cluster gd conc flat ns timing omnipresent suppliers const globals graph utils dot macros types 
dot partition omnipresent modules identi ed isolated 
output output pipeline splines top dot emit position input utils timing globals procs shapes cluster flat drivers class cdt conc ps class rank color decomp acyclic ns gd omnipresent suppliers types macros dot utils graph globals 
dot partition user de ned clusters speci ed 
const output output pipeline splines top dot emit position input utils timing globals procs shapes cluster flat drivers class cdt conc ps class rank color decomp acyclic ns gd omnipresent suppliers types macros dot utils graph globals const 
dot partition adoption orphan module generate mdg rst acacia system create source code database dot 
acacia standard unix tools generated mdg input bunch 
presents original mdg rst version dot 
little structure dot evident diagram 
apply bunch mdg arrive clustering shown 
partitioning shown reasonably close software structure described 
cluster contains layout algorithm 
cluster handles initial processing graph 
cluster captures output framework 
cluster represents main function program input 
cluster contains modules drawing composite nodes clusters edge crossing minimization 
cluster concerns gif related output 
anomalies partition shown 
knowing program hard sense clusters module put cluster 
fact exposes aw program structure 
global variable de ned dot represent version software 
information passed output drivers parameter driver accesses variable sgi mhz indy generating database took secs extracting mdg secs 
comparison took secs 
compile link dot 
pentium ii mhz pc generating mdg partition took approximately minutes 
directly uses value passed 
explains nds subsystem dot addition note large fan ins modules cluster greatly adds clutter graph 
checking omnipresent module calculator see modules identi ed potential omnipresent modules 
program semantics recognize modules include les de ne data types common program modules 
sense instruct bunch consider modules omnipresent suppliers treated separately purposes cluster analysis 
instruct bunch draw edges omnipresent suppliers order simplify graph 
resulting clustered graph shown 
notice immediately graph cleaner recognize basic highlevel structure closely matches described program structure 
step start automatically generated structure bunch user directed clustering mechanism add user information order ne tune cluster structure locking certain cluster associations 
case keep clusters largely unchanged naming top output 
cluster naturally separates sub clusters representing main functional pipeline layout algorithm combined parts cluster concerning color information representing various output device speci drivers incorporating driver previously cluster 
addition clean cluster moving module output cluster identify modules providing general purpose utility routines 
user speci ed clusters follows top output pipeline drivers color utils dot input emit output decomp position rank ns splines cluster flat acyclic ps utils shapes timing remaining modules may assigned cluster 
bunch try assign clusters maximize value mq 
constraints bunch performs clustering minute presents structure shown 
modules constrained user directed clustering mechanism distributed sensibly clusters 
speci cally bunch suggested need additional cluster contain auxiliary gif related modules 
combining automatic mq measurement manual user guidance module architecture dot program closely re ects designer view underlying structure 
point analysis single version dot 
programs dot exists versions representing changes time bugs xed new features added 
barring major structural changes versions bunch users able create new mdg partition making incremental changes previous 
conversely resulting partition program organization considered ag signi cant restructuring occurred 
version dot new output format supported new driver module introduced 
construct new mdg encodes added module dependencies starting cluster analysis scratch instruct bunch reuse previous analysis treat new module orphan adopted subsystems 
uses mq measurement determine best cluster adopt orphan including possibility new singleton cluster containing just orphan 
seconds bunch produces new partition shown 
see minimally di erent structure saw 
importantly note new module placed appropriately output drivers 

related early belady automatic clustering means produce highlevel views structure software systems 
earlier software clustering basili focuses techniques grouping related procedures variables modules 
progressively software systems began grow size new problem grouping sets modules hierarchies subsystems pertinent 
arch tool introduced concepts coupling high cohesion clustering problem 
rigi system muller pioneered concepts isolating omnipresent modules grouping modules common clients suppliers grouping modules similar names 
idea followed lethbridge common patterns le names clustering criterion 
rst version bunch treated clustering optimization problem rst system employ genetic algorithms overcome problem getting stuck local optima solutions :10.1.1.14.3376:10.1.1.14.3376
described bunch improved known clustering techniques module detection orphan adoption new technique integrating user speci ed clusters bunch automatic clustering process 
addition bottom clustering approaches produce high level structural views starting source code promising top approaches demonstrated ectiveness solving software maintenance problems 
mentioned holt orphan adoption 
top approach murphy uses software re models capture exploit di erences exist actual source code organization designer mental model high level system organization 
thorough overview software clustering techniques suggest survey 

shows automatic clustering tool generate better results faster users able integrate knowledge available clustering process 
speci cally manual assignment modules subsystems helps reduce number modules need assigned subsystems automatically dramatically reducing search space mdg partitions 
shows subsystem structure system maintained incrementally original structure produced 
plan conduct document case studies demonstrate ectiveness limitations nd version bunch 
far case studies involved turing programs 
plan study java programs source code analysis system java currently developed labs complete 
goals version bunch improve performance 
speci cally adapting existing optimization algorithms executed parallel network computers 
goal experiment weighted edges 
require changing objective function mq currently treats module dependencies equally 
example pairs modules call considered equivalent pairs modules call times 
hope receive feedback making bunch freely available www mcs drexel edu 
copies acacia dot dotty available www research att com sw tools 

acknowledgments research sponsored career award national science foundation nsf ccr 
additional support provided research laboratories opinions ndings recommendations expressed material authors necessarily re ect views nsf government belady 
system partitioning measure 
journal systems software 
chen 
reverse engineering 
krishnamurthy editor practical reusable unix software chapter pages 
john wiley sons new york 
chen gansner os 
data model supporting reachability analysis dead code detection 
proc 
th european software engineering conference th acm sigsoft symposium foundations software engineering sept 
mitchell 
automatic clustering software systems genetic algorithm submitted publication 

foley van dam feiner hughes 
computer graphics 
addison wesley nd edition 
gansner os north vo 
technique drawing directed graphs 
ieee transactions software engineering mar 
goldberg 
genetic algorithms search optimization machine learning 
addison wesley 
basili 
system structure analysis clustering data bindings 
ieee transactions software engineering aug 
mitchell chen gansner :10.1.1.14.3376
automatic clustering produce high level system organizations source code 
proc 
th intl 
workshop program comprehension 
mitchell 
genetic algorithms 
mit press 
muller orgun tilley uhl 
reverse engineering approach subsystem structure identi cation 
journal software maintenance research practice 
murphy notkin sullivan 
software models bridging gap source high level models 
proc 
acm sigsoft symp 
foundations software engineering 
wilf 
combinatorial algorithms 
academic press nd edition 
north os 
applications graph visualization 
proc 
graphics interface 

intelligent tool re engineering software modularity 
inproc 
th intl 
conf 
software engineering may 
holt 
orphan adoption problem architecture maintenance 
proc 
working conf 
reverse engineering 

clustering algorithms legacy systems remodularization 
proc 
working conference reverse engineering 
lethbridge 
extracting concepts le names new le clustering criterion 
proc 
th intl 
conf 
software engineering may 
