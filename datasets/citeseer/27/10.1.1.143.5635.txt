type race detection java cormac flanagan stephen freund compaq systems research center department computer science lytton ave stanford university palo alto ca stanford ca cormac flanagan compaq com cs stanford edu presents static race detection analysis multithreaded java programs 
analysis formal type system capable capturing common synchronization patterns 
patterns include classes internal synchronization classes require client side synchronization thread local classes 
experience checking lines java code type system demonstrates effective approach eliminating races conditions 
large examples fewer additional type annotations lines code required type checker number races standard java libraries test programs 
race conditions common insidious errors multithreaded programs 
race condition occurs threads manipulate shared data structure simultaneously synchronization 
race conditions result unexpected program behavior program crashes incorrect results 
avoided careful programming discipline protecting data structure lock acquiring lock manipulating data structure bir 
lock held thread time careful adherence lock synchronization discipline ensures race free program 
current programming tools provide little support synchronization discipline 
easy write completed author employed compaq systems research center 
permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
pldi vancouver british columbia canada 
copyright acm 

program mistake neglects perform certain crucial synchronization operations 
synchronization errors detected traditional compile time checks 
furthermore resulting race conditions scheduler dependent difficult catch testing techniques 
single synchronization error correct program may yield race condition cause may take weeks identify 
investigates static analysis system detecting race conditions java programs 
analysis supports lock synchronization discipline tracking protecting lock shared field program verifying appropriate lock held shared field accessed 
express reasoning checks performed analysis extension java type system 
builds earlier describes race free type system concurrent object calculus fa 
start adapting type system core subset java 
initial type system sufficient verify example programs race free 
order accommodate larger realistic multithreaded programs extend initial type system number additional features 
features include 
classes parameterized locks allow fields class protected lock external class 
notion objects local particular thread safely accessible synchronization 
mechanisms escaping type system places proves restrictive particular race condition considered benign 
evaluate utility resulting type system implemented type checker tested variety java programs totaling lines code 
programs include standard java input output package java io interpreter web scripting language webl mobile object calculus implementation 
checking programs type system requires adding additional type annotations 
annotation burden excessive typically fewer annotations required lines code 
annotations inserted feedback type checker 
annotation process proceeded rate roughly lines code programmer hour 
process discovered number race conditions programs checked including race condition java util vector java io package webl implementation 
far complete type system proved sufficiently expressive accommodate majority synchronization patterns programs 
presentation results proceeds follows 
section introduces small concurrent subset java provide formal description type system 
section describes initial race free type system 
extend system include classes parameterized locks section thread local classes section 
section describes prototype implementation including escape mechanisms 
section discusses experiences checking java programs 
relate projects section conclude section 
appendix contains formal description type system 
multithreaded subset java section introduces small multithreaded subset java 
language derived classicjava sequential subset java adopt type structure semantics classicjava 
syntax informal semantics supports multithreaded programs including operation fork spawns new thread evaluation evaluation performed effect result 
locks provided thread synchronization object associated lock states locked unlocked initially unlocked 
expression synchronized evaluated manner similar java synchronized statement subexpression evaluated yield object lock acquired subexpression evaluated lock released 
result returned result synchronized expression 
evaluating current thread said hold defn defn class cn body body extends field meth field final opt fd meth mn arg arg int cn object new fd fd mn arg synchronized fork cn class names fd field names mn method names variable names program class decl class body field decl method decl variable decl type class type allocate variable field access field update method call variable binding synchronization fork grammar 
lock 
thread attempts acquire lock blocks lock released 
newly forked thread inherit locks held parent thread 
syntax synchronized fork expressions rest shown 
program sequence class definitions initial expression starting point program execution 
class definition associates class name class body consisting super class sequence field declarations sequence method declarations 
field declaration includes initialization expression optional final modifier modifier field updated initialization 
method declaration consists method name return type number types arguments expression method body 
types include class types integers 
class types include class names introduced program predefined class object serves root class hierarchy 
expressions include typical operations object allocation field access update method invocation variable binding concurrency primitives 
locks races example programs extended language integer boolean constants operations constant null 
abbreviate occur free enclose expressions braces clarity 
multithreaded programs prone race conditions illustrated program allocates new bank account deposits account parallel class account int balance int deposit int balance balance account new account fork deposit fork deposit program may exhibit unexpected behavior 
particular calls deposit interleaved final value balance may reflect deposits account clearly intended behavior program 
program contains race condition threads attempt manipulate field balance simultaneously incorrect results 
fix error protecting field balance lock account object accessing updating balance lock held class account int balance int deposit int synchronized balance balance modified account implementation race free behave correctly multiple deposits account concurrently 
types races practice race conditions commonly avoided lock synchronization discipline example 
section presents type system supports programming discipline 
type system needs verify field associated protecting lock held field accessed updated 
order verify property type system 
associates protecting lock field declaration 
tracks set locks held program point 
rely programmer aid verification process providing small number additional type annotations 
type annotation guarded field declaration states field protected lock expression type system verifies lock held field accessed updated 
type annotation requires 
ln method declaration states locks 
ln held method entry type system verifies locks held call site method checks method body race free assumption 
extend syntax field method declarations include type annotations 
field final opt fd guarded meth mn arg requires ls ls lock set lock expression refer extended language 
ensure field consistently protected particular lock irrespective assignments performed program type system requires lock expression guarded clause final expression 
final expression immutable variable field access fd final expression fd final field 
type system requires lock expressions requires clause final similar reasons 
core type system set rules reasoning type judgment ls program checked included judgment provide information class definitions program environment providing types free variables ls set final expressions describing locks held expression evaluated type type rules track set locks held program point 
rule exp fork fork checks expression empty lock set new threads inherit locks held parent 
exp fork ls fork int variables immutable final variables java 
rule exp sync synchronized checks final expression class type type checks extended lock set includes reflecting fact lock held evaluating 
exp sync final ls ls synchronized antecedent final checks final expression type rule exp ref fd checks welltyped expression class type declares inherits field fd type guarded lock exp ref ls final opt fd guarded ls ls fd remains check lock guarding fd held program point denotes lock expression current lock set 
requires checking semantic equivalence expressions general undecidable 
approach conservatively approximate semantic equivalence syntactic equivalence simply check 
approximation overly conservative cases 
particular occurrences lock expression refer object dereferenced object denoted account aliasing type system replaces occurrences checks current lock set 
check performed antecedent ls 
sound approximation semantic equivalence sufficient programs inspected 
similar aliasing situation arises section introduce types containing lock expressions 
accommodate extension include appropriate substitutions types yield type field access checking formed type 
rule exp assign fd ensures appropriate lock held field updated 
rule exp invoke method invocation ensures locks requires clause method declaration held call site method 
exp assign ls fd guarded ls ls ls fd exp invoke ls mn sj yj requires ls ls ej sj ls ls ls mn remaining type rules straightforward similar classicjava 
complete set type judgments rules contained appendix race free bank accounts type system verify synchronized bank account implementation race free 
add type annotation stating field balance guarded 
locks required invoke method omit requires clause done deposit 
class account int balance guarded int deposit int synchronized balance balance account new account fork deposit fork deposit alternative implementation bank account may rely clients perform necessary synchronization operations class account int balance guarded int deposit int requires balance balance account new account fork synchronized deposit fork synchronized deposit example method signature int deposit int requires explicates requirement object lock acquired calling deposit 
necessary lock held call site program typed race free 
external locks type system previous section verify absence races number interesting examples 
larger realistic programs frequently variety synchronization patterns captured system far 
accomodate programs extend type system additional features 
section presents classes parameterized locks section introduces thread local classes 
type system requires field guarded final expression form fd 
fd variable scope field declaration fields object protected lock accessible object 
cases protect fields object lock external object 
example fields linked list naturally protected object external list 
accommodate programming pattern extend allow classes parameterized external locks defn class cn garg body garg ghost ghost decl cn object class definition contains possibly empty sequence formal parameters ghost variables 
ghost variables type system verify program race free affect run time behavior program 
particular appear type annotations regular code 
class type consists class name cn parameterized sequence final expressions 
number type expressions match formal parameters class 
type checking parameterized classes handled substitution 
class cn ghost 
ghost body formed class definition final expressions 
ln appropriate types consider cn 
ln valid instantiated class type associated instantiated class definition class cn 
ln 
ln xn body modifications type rules necessary accommodate parameterized classes 
modifications described appendix external locks illustrate external locks consider dictionary implementation 
dictionary maps keys values 
implementation dictionary represented object containing linked list nodes node contains key value pointer 
efficiency reasons protect entire dictionary including linked list lock dictionary 
accomplish class node parameterized enclosing dictionary fields node guarded method node requires held entry 
method dictionary acquires dictionary lock proceeds appropriate manipulation linked list 
fields linked list protected dictionary lock type system verifies program typed race free 
thread local classes large multithreaded programs typically sections code operate data shared multiple threads 
example single thread concurrent web server may need access information particular request 
objects fashion require synchronization need locks guarding fields 
accommodate situation introduce concept thread local classes 
extend grammar allow optional thread local modifier class definitions guarded clause field declarations optional thread local class defn thread local opt class cn garg body field final opt fd guarded opt example thread local class appears 
class crawler concurrent web crawler processes page iterating links forking new threads process linked pages 
class parses text page find links shared threads 
declared thread local class contains unguarded fields 
simple form escape analysis enforce single threaded thread local objects 
type thread shared provided thread local class type 
type system ensure thread local objects accessible thread shared objects 
thread shared class declaration thread shared superclass contain shareable fields 
field shareable thread shared type final protected lock 
free variables forked expression thread shared type 
rules thread shared types fork appear appendix class node ghost dictionary string key guarded null object value guarded null node guarded null void init string object node requires node key node value node void update string object requires key equals value null update class dictionary node head guarded null void put string object synchronized contains head update node node new node node init head head node 
synchronized dictionary 
thread local class string text null int index void init string text boolean 
string 
class crawler final set visited new set void process string url visited add url string text url enum new enum init text enum string link enum fork process link crawler new crawler process www research compaq com concurrent web crawler thread local enumeration class 
interestingly type system permits thread local class thread shared superclass 
design permits maintain object thread shared root class hierarchy java 
permits thread local object viewed instance thread shared class shared threads 
sharing cause problem object downcast back thread local type thread created 
downcast unguarded fields subclass visible thread 
eliminate possibility type system forbids downcasts thread shared type thread local type 
restriction applies explicit cast operations implicit downcasts occur dynamic dispatch 
avoid implicit downcasts type system requires thread local class override methods declared thread shared superclass 
alternatively static requirements restrictive compiler insert code track allocating thread object dynamically check thread shared thread local downcasts performed appropriate thread 
implementation implemented type system full java language gjs 
race condition checker rccjava extends type system outlined far missing java features including arrays interfaces constructors static fields methods inner classes 
thread local arrays posed technical challenges space considerations prohibit full discussion challenges 
additional type information required rccjava embedded java comments preserve compatibility existing java tools compilers 
specifically comments start character treated type annotations rccjava 
see example 
rccjava tool built top existing java front includes scanner parser type checker 
extensions race detection relatively straightforward add existing code base required approximately lines new code 
major additions maintaining lock set type checking implementing syntactic equality substitution syntax trees incorporating classes parameterized locks 
contain explicit casts java language 
important goal design rccjava provide cost effective way detect race conditions statically 
important minimize number annotations required number false alarms produced 
order attain goal rccjava designed able relax formal type system ways infer default annotations unannotated code 
features described 
escape mechanisms rccjava provides mechanisms escaping type system proves restrictive 
simplest escape mechanism warn annotation turns certain kinds warnings particular line code warn race annotation commonly particular race condition considered benign 
rccjava may configured command line flag ignore errors particular kind 
example warn thread local override flag turns restrictions thread local class override method thread shared superclass 
holds annotation asserts particular lock held program point holds annotation puts lock set remainder block statements appears 
warn annotations rccjava may configured global assumptions locks held 
instance run command line flag constructor holds lock rccjava assumes lock held constructors 
sound long passed threads constructor call returns 
violations assumption eliminates large number spurious warnings 
default annotations type inference rccjava type system remains rccjava construct default annotations unannotated classes fields 
heuristics compute default annotations class annotations synchronized methods thread local default class java lang object subclass java lang thread 
unguarded non final instance fields thread shared classes guarded 
unguarded non final static fields guarded class object class belong 
guarded annotation permitted class declaration applies fields class 
heuristics guaranteed produce correct annotations experience shown save significant amount time annotating large programs 
roughly classes test programs described treated correctly heuristics 
evaluation test effectiveness rccjava static race detection tool check multithreaded java programs 
test cases include representative single classes java util hashtable java util vector large programs including java io java input output package version implementation mobile object calculus car interpreter run time environment webl language automating webbased tasks km 
programs variety synchronization patterns captured easily rccjava annotations 
rccjava run command line flags warn thread local override constructor holds lock tests see section 
flags may cause rccjava potential races significantly reduce number false alarms reported provide effective way deal existing programs written type system mind 
table summarizes experience checking programs 
shows number annotations time required annotate program number race conditions program 
time includes time spent programmer inserting annotations time run tool 
breaks annotation count different categories annotations normalized frequency appear lines code 
large programs fewer annotations required lines 
annotations clustered small number classes manipulated different threads 
majority classes typically required annotations 
evidence pattern reflected statistics single class examples higher annotation frequencies larger programs 
hashtable high occurrence annotations concerning class parameters arguments contains linked list similar 
interestingly restructuring hashtable declare linked list inner class scope protecting lock reduces number annotations 
discovered race conditions case studies despite code examples tested relatively mature 
races java io fixed jdk version 
benign race conditions test cases 
contains excerpt java util vector illustrates typical race condition caught experiments 
suppose threads manipulating shared vector object 
thread calls elem elem method may access acquiring lock vector object 
thread may call sets call resets array length 
array bounds exception triggered thread enters binary version accesses array old value 
declaring versions synchronized removes race condition 
related number tools developed detecting race conditions statically dynamically 
ste static race detection system ansi programs 
supports lock synchronization discipline annotations similar 
uses different analysis mechanism works tracing execution paths program fails trace paths loops recursive function calls may detect certain races 
addition assumes verify thread local annotations introduced programmer 
soundness issues prevented practical tool 
catch races programs including windows library 
extended static checker java esc java tool static detection software defects lss 
uses underlying automatic theorem prover reason program behavior verify absence certain kinds errors null dereferences index bounds errors 
esc java supports multithreaded programming annotations similar guarded requires clauses lines programmer program code time hrs annotations races java util hashtable java util vector java io webl table programs analyzed rccjava 
java util hashtable java util vector java io webl annotations lines guarded requires class param class arg thread local thread shared annotation category warn holds total number rccjava annotations added program 
verifies appropriate lock held guarded field accessed 
may permit race conditions unguarded fields verify unguarded fields occur classes 
esc java complex powerful tool capable detecting kinds errors rccjava lightweight tool tuned specifically detecting race conditions 
aiken gay ag investigate static race detection context spmd programs 
synchronization programs performed barriers opposed locks system need track locks held program point association locks fields protect 
system successfully number spmd programs 
eraser tool detecting race conditions deadlocks dynamically statically 
approach advantage able check unannotated programs may fail detect certain errors insufficient test coverage 
variety approaches developed race deadlock prevention discussed detail earlier fa 
number formal calculi java literature 
include attempts model entire java language de sym smaller systems designed study specific features extensions 
chose classicjava calculus flatt krishnamurthi felleisen starting point study 
suggested language extensions supporting java classes parameterized types ow afm blm cj 
class vector object guarded int guarded synchronized void 
synchronized boolean 
synchronized int object elem int int elem equals 
int object elem return elem race 
excerpt java util vector 
uses different notion parameterization classes parameterized values specifically lock expressions 
apart distinction class parameterization approach closely follows gj information class parameters preserved run time 
lock sets type systems similar effects jg lg nie locks held entry expression constrain effects may produce 
may possible adapt existing techniques effect reconstruction tt tt ann tj setting reduce number type annotations required 
type system verifies objects thread local type shared threads 
done related problem inferring objects shared threads cgs bla bh wr 
primarily focused optimizing synchronization operations may possible adapt reduce eliminate need thread local annotations 
race conditions difficult catch traditional testing techniques 
persist common relatively mature java programs 
type system catching race conditions statically described rccjava implementation system java 
experience rccjava indicates technique promising approach building reliable multithreaded software 
type system modular enables race conditions detected early development cycle entire program written 
type system require programmer write additional type annotations annotations function documentation locking strategies program 
reduce annotation overhead currently studying issue type inference 
considering rccjava extensions support additional synchronization patterns 
extensions may include methods parameterized locks support reader writer locks 
availability intend rccjava prototype implementation available download www research compaq com 
acknowledgments john mitchell comments earlier draft hannes marais mart abadi useful discussions 
jonathan aldrich craig chambers emin gun sirer susan eggers 
static analyses eliminating unnecessary synchronization java programs 
proceedings sixth international static analysis symposium september 
afm ole agesen stephen freund john mitchell 
adding type parameterization java language 
proceedings acm conference object oriented languages systems october 
ag alexander aiken david gay 
barrier inference 
proceedings th symposium principles programming languages pages 
ann torben flemming nielson hanne riis nielson 
type behaviour reconstruction higher order concurrent programs 
journal functional programming 
bh jeff urs lzle 
removing unnecessary synchronization java 
proceedings acm conference object oriented languages systems november 
bir bla andrew birrell 
programming threads 
research report digital equipment systems research center 
bruno blanchet 
escape analysis object oriented languages 
application java 
proceedings acm conference object oriented languages systems november 
blm bank liskov myers 
parameterized types java 
technical report mit lcs tm massachussetts institute technology 
gilad bracha martin odersky david stoutamire philip wadler 
making safe past adding genericity java programming language 
proceedings acm conference object oriented languages systems october 
car cgs cj de luca cardelli 
mobile ambient synchronization 
technical report digital systems research center palo alto ca july 
choi gupta serrano sreedhar midkiff 
escape analysis java 
proceedings acm conference object oriented languages systems november 
robert cartwright guy steele jr compatible genericity run time types java programming language 
proceedings acm conference object oriented languages systems october 
drossopoulou eisenbach 
java type safe probably 
european conference object oriented programming pages 
david detlefs rustan leino greg nelson james saxe 
extended static checking 
research report compaq systems research center lytton ave palo alto ca usa december 
fa cormac flanagan mart abadi 
object types races 
proceedings concur august 
fa cormac flanagan mart abadi 
types safe locking 
proceedings european symposium programming march 
matthew flatt shriram krishnamurthi matthias felleisen 
classes mixins 
proc 
th acm symposium principles programming languages pages january 
gjs james gosling bill joy guy steele 
java language specification 
addison wesley 
atsushi benjamin pierce philip wadler 
featherweight java minimal core calculus java gj 
proceedings acm conference object oriented languages systems november 
javasoft 
java developers kit version 
java sun com 
jg pierre jouvelot david gifford 
algebraic reconstruction types effects 
proceedings th symposium principles programming languages pages 
km lg lss thomas kistler johannes marais 
webl programming language web 
computer networks isdn systems april 
john lucassen david gifford 
polymorphic effect systems 
proceedings acm conference lisp functional programming pages 
rustan leino james saxe raymie stata 
checking java programs guarded commands 
technical report compaq systems research center palo alto ca may 
appeared formal techniques java programs workshop proceedings 
bart jacobs gary leavens peter muller arnd poetzsch heffter editors 
technical report hagen 
nie flemming nielson 
annotated type effect systems 
acm computing surveys 
invited position statement symposium models programming languages computation 
tobias nipkow david von oheimb 
type safe definitely 
proc 
th acm symposium principles programming languages january 
ow martin odersky philip wadler 
pizza java translating theory practice 
proc 
th acm symposium principles programming languages january 
stefan savage michael burrows greg nelson patrick sobalvarro thomas anderson 
eraser dynamic data race detector multi threaded programs 
acm transactions computer systems 
ste nicholas sterling 
static data race analysis tool 
usenix winter technical conference pages 
sym don syme 
proving java type soundness 
technical report university cambridge computer laboratory technical report 
tj tt jean pierre talpin pierre jouvelot 
polymorphic type region effect inference 
journal functional programming 
mads tofte jean pierre talpin 
implementation typed call value lambda calculus stack regions 
proceedings st symposium principles programming languages pages 
tt mads tofte jean pierre talpin 
region memory management 
information computation 
wr john whaley martin rinard 
compositional pointer escape analysis java programs 
proceedings acm conference object oriented languages systems november 
initial type system appendix presents type system described section 
introduce class parameters thread local classes appendices respectively 
define number predicates type system informally 
predicates similar predicates refer reader precise formulation 
predicate meaning class declared twice cycles class hierarchy class contains fields name declared inherited method name appears class overriding methods return type parameter types requires set method overridden typing environment defined arg define type system judgments 
judgment defn wf meth field defn field meth final ls ls ls ls ls meaning program yields type defn formed class definition formed typing environment meth formed method field formed field formed type subtype defn class defined class declares inherits field class declares inherits meth final expression type ls formed lock set appears ls lock set ls contained ls expression type typing rules judgments 
prog defn defn class cn field class cn extends field meth wf defn env empty wf env dom wf class definition wf class 
class 
type class 
type object wf object type int wf int subtype refl subtype class class extends 
field field field final final opt fd guarded field declared class 
field 
field field inherited class extends 
field field method method ls arg ls mn arg requires ls meth method declared class 
meth 
meth method inherited class extends 
meth meth final final var wf final final ref final final fd guarded final fd ls lock set wf ls 
final ls ls lock set elem ls ls ls ls ls lock set subset ls ls ls ls ls ls exp sub ls ls exp new ls ls new exp var ls ls exp ref ls final opt fd guarded ls ls fd exp invoke ls mn sj yj requires ls ls ej sj ls ls ls mn exp assign ls fd guarded ls ls ls fd exp ls ls ls exp sync final ls ls synchronized exp fork ls ls fork int parameterized classes section extends type system classes parameterized lock expressions 
extend typing environments include ghost variables arg garg instantiated class definition form new judgment form 
ci class extends field meth judgment ci meaning ci valid instantiated class definition redefine typed classes include ghost parameters introduce new rules constructing environments instantiating parameterized classes 
rules subscripts names class replace earlier rules name 
rules subscripts addition previous rules 
defn class ti ghost ti xi garg cn field class cn garg extends field meth wf env ghost dom ghost wf final final var wf ghost opt final ci class instantiation class cn ghost ti body final li si si ti class cn li body thread local classes section extends type system thread local classes 
judgments added system judgment meaning shared values type shared threads field shareable field thread shared type guarded lock final meth meth override method thread shared super type typing rules judgments 
rules exp ref exp assign updated support unguarded fields 
shared class shared class cn garg extends field meth cn shared object shared object shared int shared int shared field shareable shareable guarded field shared final opt fd guarded shareable shareable final field shared final fd shareable defn class ti ghost ti xi garg cn field shared shareable class cn garg extends field meth local class ti ghost ti xi garg cn field thread local class cn garg extends field meth meth override ok 
mn 
requires 
shared mn arg requires ls ci local class instantiation thread local class cn ghost ti body final li si si ti class cn li body ls exp fork fv 
shared ls fork int 
