deriving production rules constraint maintenance stefano ceri jennifer widom ibm almaden research center harry road san jose ca stanford edu com 
traditionally integrity constraints database systems maintained rolling back transaction produces inconsistent state disallowing modifying operations may produce inconsistent state 
alternative approach provide automatic repair inconsistent states production rules 
constraint production rule detect constraint violation initiate database operations restore consistency 
describe sql language defining integrity constraints translating constraints constraint maintaining production rules 
parts translation automatic parts require user intervention 
semantics set oriented production rules language certain assumptions prove transaction rules guaranteed produce state satisfying defined constraints 
apply approach sized example 
database systems integrity constraints facility permits logical specification database states considered acceptable consistent 
current systems mechanisms defining enforcing integrity constraints limited 
relational database systems support specific types constraints uniqueness keys referential integrity supporting arbitrary predicates 
furthermore constraints violated repair database state usually limited fixed reversal actions rolling back current operation entire transaction 
consequently increased flexibility integrity constraints encoded applications usually ad hoc manner 
improved approach constraint enforcement allows definition compensating actions correct violation constraint understood application dependent semantics 
research area integrity constraints focused efficiently determining actual potential leave university constraint violation considering quite general constraints arbitrary predicates 
consider general constraints focus issue constraint enforcement 
language proposed specifying constraints relational databases 
provide framework translating constraint specifications production rules maintain constraints 
production rules database systems allow specification data manipulation operations automatically executed certain events occur certain conditions met de han sj wf 
usefulness incorporating production rules database systems accepted ec md mor particularly context constraint enforcement 
know automatic semi automatic method specifying general constraints high level non procedural language deriving lower level production rules maintain constraints 
describe method 
constraint rule languages extended version sql hf ibm easily adapted alternate languages 
constraints expressed predicates database state predicate true particular state constraint violated state inconsistent constraints may ordered specifying certain constraints enforced earlier may assumed valid constraints 
production rule language described wf 
prior familiarity rule language necessary overview provided 
production rules enforce constraints issuing actions correct violation 
cases possible actions may correct constraint violation action appropriate may depend ap plication 
constraint compensating actions specified application designer 
necessary components derivation performed automatically 
envision interactive system deriving rules constraints structure illustrated fig 

automatic portions derivation include producing rule templates constraints rule templates enumerate operations may cause constraint violation form triggering com framework convenient constraints specify inconsistent consistent states 
choice affect expressiveness alternative semantics achieved simply negating constraint 
proceedings th vldb brisbane 
australia constraint definitions rule template generator system rule templates final rules potential cycles interactive optimized rules system rule derivation ponents constraint enforcing rules include rule conditions 
rule actions provided user 
detecting potential cycles rule activation number rules increases rules complex increasing possibility infinite triggering behavior 
component detects potential behavior provides warnings user 
rule optimization system automatically optimizes rules derived constraints preserving constraint maintaining semantics 
automatic component described detail 
describe tasks performed users system 
theorem proven stating certain assumptions regarding users obligations correctness compensating actions finite triggering behavior final set production rules guaranteed maintain defined constraints 
transaction rule execution terminates consistent state 
related mentioned involving integrity constraints database systems addressed variety settings problem efficiently detecting constraint violation bbc hmn hi kp nic qs sto 
describes algorithms detecting advance operation may cause constraint violation operations permitted proceed 
inconsistent states detected occur consistency restored performing undo rollback operations 
approach inconsistent states may occur detected consistency restored issuing corrective actions depend particular constraint violation 
approaches similar taken ctf mor ud ud restricted settings 
ctf referential integrity inclusion dependency constraints considered 
user may define compensating actions drawn restricted set executed constraints violated 
mor focus high level language expressing inter relational constraints 
set expressible constraints subset expressible arbitrary predicates 
cases specific compensating actions may derived automatically constraints subject certain hints provided constraint definer 
ud ud analysis constraints considered object oriented environment 
constraints represented horn logic permitting subset arbitrary predicates 
constraint analysis reveals effects constraints object manipulation determines possible constraint violations suggests propagation actions correcting violations 
papers extend standard approaches constraint definition enforcement 
cg logic programming express evaluate constraints 
run time transaction checked verify maintain consistency respect set constraints 
consistency guaranteed system explain constraints violated suggest actions 
similar approach described sms considers compile time runtime environment 
transactions determined potential constraint violation feedback provided user form suggested tests updates added transaction 
constraint definitions include conditions state checked additional actions automatically executed certain operations help maintain consistency 
similar defining constraints directly rules enforce sk 
approach constraints defined higher non procedural level rules derived 
outline preliminary material section case study introduced serving source examples overview rule language 
section presents syntax semantics constraint language 
section describes derivation rule enforcing single constraint including automatic generation operations may cause constraint violation 
section considers set rules maintaining multiple constraints particular shows potential cyclic behavior rule sets detected 
rule optimization covered section 
section considers system execution showing termination consistent state guaranteed certain assumptions 
section conclude discuss general facility describe 
preliminaries case study examples drawn case study concerning power distribution design system database application supporting design maintenance electricity networks due space limitations portions study included ll details appear technical report cw :10.1.1.143.7196
note constraints considered study supported conventional database systems 
briefly power network connects collection plants collection users possibly intermediate nodes 
network designer determines location plants nodes users 
specified designer power produced plant power required user power loss incurred intermediate node 
designer places directed wires plants users nodes specifying wire type voltage power carried wire 
multiple wires may placed points set wires enclosed tube 
placement tubes difficult tube points tube protected contains high voltage wires tubes large cross sections enclose wires 
tube placement fact specified solely terms constraints tubes automatically inserted deleted rules maintain constraints 
appropriate constraints defined designer need consider tubes 
constraints specify power output required plant exceed produced power power output required node exceed deliverable power input user receive required power 
reliability user connected plants 
capitalization denote primary keys relational schema case study plant plant id location power user id location power node node id location loss aire id fr type voltage power id fr 
type wire type type 
mar voltage mar power cross section tube type type protected cross section id plants users nodes drawn constraint specify duplicated 
attributes fr tables aire tube take values domain 
production rules provide brief overview set oriented production rules language remainder 
details numerous examples problem author ceri context joint study italian electric energy agency politecnico di milano 
appear wf 
consider relational database system integrated production rules 
system usual database functionality addition set production rules may defined 
general production rules specify actions performed certain events occur conditions met 
language rule contains components transition predicate controls rule triggering condition checked rule may execute action sequence data manipulation operations rollback request 
production rules activated commit point transaction time triggered rules re considered 
data manipulation operations executed part rule action may trigger additional rules 
triggered rules left consider transaction committed 
details follow 
rules notion transitions 
transition database state change resulting corn execution sequence data manipulation operations 
consider net transitions meaning tuple updated times consider composite update tuple updated deleted consider deletion tuple inserted updated consider inserting updated tuple tuple inserted deleted considered 
syntax defining production rules create ml transition predicate condition action rule triggered transition transition predicate holds respect transition 
transition predicates specify operations particular tables columns 
permitted forms inserted deleted updated table name column ble transition predicate lists specifications predicate holds respect transition specified operations occurred net effect transition 
rule triggered may chosen evaluation described 
point rule condition conditions arbitrary predicates database state 
condition true action executed 
action may specify list sql data manipulation operations executed may request rollback current transaction 
condition action parts rule may refer current state database embedded sql select operations 
addition components may refer transition tables 
transition table logical table reflecting changes occurred transition 
transition transition table inserted refers tuples table current state inserted transition transition table deleted refers tuples table pre transition state deleted transition transition table old updated refers tuples table pre transition state column updated transition transition table neu updated refers current values tuples 
transition tables may referenced clauses select operations usual way 
restriction rule may refer transition tables corresponding transition predicate 
example rule may refer old updated neu updated updated included transition predicate similarly inserted deleted 
describe rule execution 
user application executes transaction sequence sql operations rules considered commit point transaction 
state change resulting initial transaction creates relevant transition set rules triggered transition 
rule chosen set evaluation 
influence rule selection rules may partially ordered rule chosen triggered rule higher ordering 
condition part selected rule checked hold new triggered rule selected evaluation 
rule condition hold action executed 
triggered rule true condition rule execution terminates 
say rule action executed assume action rollback 
execution action rules previously evaluated triggered transition predicate holds respect composite transition created initial transaction subsequent execution action 
rules consider action executed part user generated transaction 
rules evaluated processed initial transaction triggered transition predicate holds respect transition created action 
rule triggered second time rule execution produces new net effect satisfying transition 
consider arbitrary point rule processing 
rule triggered transition predicate holds respect composite transition point execution 
evaluation rule condition false rule considered respect transition point evaluation rule evaluated considered respect transition start initial transaction 
rule chosen set triggered rules condition holds action executed triggered rule selected 
rollback action encountered system rolls back start initial user generated transaction rules triggered 
rule processing terminates set triggered rules empty triggered rule true condition entire transaction committed 
deviate somewhat semantics rule considered respect transition execution 
possible iu rule system permit interpretations 
constraint language define general language expressing integrity constraints 
constraint parts table list specifying tables relevant constraint unrestricted sql predicate hold exactly states violating constraint 
introductory example consider constraint wire voltage exceed maximum wire type 
proposed language expressed voltage select mar voltage type sh re type type natural right side comparison singleton set single value 
remember constraint specifies inconsistent states state violates constraint tuple table wire voltage exceeding max voltage wire type 
complete syntax semantics follows 
syntax grammar constraint language fig 
examples provided 
core language variation usual sql syntax predicates similar clause production rules wf 
advanced features included boolean types tuple constructors user defined functions 
include table described respect starburst database system hf space considerations forced omission 
grammar productions denote table names vi denote table variable names ci denote column names 
repetition represented explicitly enumerating terms 
optional terms enclosed square brackets 
examples permit straightforward abbreviations syntax 
semantics semantics constraint language straightforward constraint violated state iff tuples cartesian product listed tables satisfies specified predicate 
constraints may partially ordered user may specify pair constraints constraint enforced long cycle prioritization 
constraint ordering allows user safely assume higher priority constraint satisfied lower priority constraint considered 
example constraint wire voltage exceed maximum wire type specified assumed constraint type wire table appears wire type table specified holds 
examples referential integrity constraint type wire table appears wire type table expressed airs type select type 

















cal name 
connector 
set op 
camp op 
agg fn 
fn constraint table list predicate select exp val exps val exp list item exp table list predicate ti vi 
exists select 
item exp cr select exp item expl omp op item predicate predicate predicate predicate predicate predicate select distinct val exps list predicate select expl set op select exps select expl val expl 
val exp col name constant fn val expl 
val pi val exp val expl 
val exp elect agg fn distinct col name list predicate camp op comp op union intersect minus sum min max avg count user defined aggregate function user defined function language syntax constraint set wires fits tube interpretation sum wires exceed cross section tube expressed tube select sum cross section wire 
wire type aire fr tube fr wire type wire type type select cross section tube type type tube type constraint plant outgoing tubes expressed quite simply plant tube plant id tube deriving constraint maintaining rules constraints defined language preceding section system automatically produces rule templates portions production rules necessary constraint enforcement 
describe constraint set invalidating operations derived 
set includes data manipulation operation execution consistent state may result state violating constraint triggering operations constraint maintaining rule 
provide examples describe derivation full form rule templates user produces preliminary set rules 
deriving invalidating operations constraint want derive automatically set operations may cause constraint violation 
achieve purely static analysis constraint 
information incorporated set may conservative operations set may real potential constraint violation 
affect correctness constraint enforcement may affect efficiency 
provide optimizations minimize possibility extraneous operations 
set invalidating operations contains elements form inserted deleted updated table name column table 
translate directly components constraint maintaining rules 
constraint set generated analyzing constraint syntactic structure grammar fig 

give method deriving update operations method deriving invalidating insert delete 
practice invalidating operations derived syntactic analysis parse constraint 
update operations enumerate invalidating update operations determine column value column changed tuples constraint predicate may true tuple cartesian product constraint table list 
types column may appear constraint 
columns individual values directly evaluating constraint 
respect grammar fig 
columns appearing part item exp single values productions constructed tuples production objects functions aggregate functions productions 

columns forming part set due inclusion result select operation 
columns appearing val exps part exp production 
update column type certainly affect value predicate 
column name appearing constraint part item exp updated grammar allows table variables allows column appear table name 
cases understanding relevant table unambiguously inferred 
invalidating operation 
invalidating update operations generated second type select exp appears direct indirect object exists actual values tuples unimportant direct object ofan exists exists applied set generated select exp select exp indirect object exists select exp connected set op exists applied result 
appears exps portion select exp select exp direct indirect object exists updated invalidating operation 
val updated invalidating operation column table appearing corresponding list insert delete operations generating invalidating insert delete operations requires thorough context dependent syntactic analysis 
consider example constraint definition including deeply nested select operation 
want determine inserts deletes performed tables select may cause constraint predicate true 
effectively construct parse tree constraint 
top labeling tree performed labels id labels ultimately considered appearing table name leaves parse tree labels indicate invalidating operations 
node table labeled inserted invalidating operation constraint node labeled deleted invalidating operation node labeled id inserted deleted invalidating operations 
provide rigorous description labeling process attribute grammar formalism speci designed defining labels attributes assigned nodes parse tree 
labeling scheme defines inherited attribute meaning initial label assigned start symbol grammar root tree grammar production labels symbols right hand side computed label symbol left hand side child label computed function parent label 
computing labels function opp opposite defined opp opp opp id id equations computing labels fig 
explanations provided 
equations correspond productions grammar fig 
certain omissions changes 
ultimately consider labels table name nodes ignore course update column may affect tuples satisfy clause select generating fewer tuples set exists applied happens column appears clause 
case updated generated appear part item exp 






lla 




predicate label label select label label select label predicate label select label opp predicate label predicate label predicates label label predicate label opp label label list label select predicate label select label select label select select em label select label select label label select label opp select select label select ti label label list label id id directed labeling scheme nonterminal eventually produce node 
eliminate consideration nonterminals val col name comp op agg fn fn 
need provide labels terminal symbols table names 
grammar rewritten slightly facilitate labeling distinguish classes connector separate minus set op productions modified follows 
predicate 
lla 
select lib 


item select item select eap select select em select intersect select select minus select em anyi anyi right hand side labels productions defined irrespective lefthand side labels need consider nonterminals table list item 
explain labeling rules number 
remainder left reader examples provided 
general principle label select exp indicates operation causes additional tuples select constraint may violated label indicates violation may occur fewer tuples select 
predicate label indicates operations making predicate hold may cause constraint violated label indicates operations making predicate hold may cause violation 

label predicate indicates predicate hold constraint violated 

insertions top level tables may cause new tu 

ples cross product satisfy constraint predicate violating constraint 
labels imply top level table inserted generated invalidating operation 
additional tuples select exists hold 
fewer tuples select exists hold 
select exp label predicate label 
connectors 
additional tuples select exp predicate hold 
fewer tuples select exp predicate hold 
reverse 

additional tuples tables list predicate hold additional tuples may select exp similarly fewer tuples 

label passed list table name indicates invalidating operation table 

aggregate functions insertions deletions respectively predicates hold may cause change value result 
may cause constraint violated 
fully described set invalidating operations derived constraint definition 
note constraint may expressed different ways 
algorithm produce set invalidating operations equivalent constraints 
technical report cw discuss classes equivalence showing algorithm produce equivalent invalidating operations :10.1.1.143.7196
examples consider constraint wire voltage exceed maximum wire type wire voltage max voltage type type wire type columns appearing constraint item exp wire 
voltage wire type 
type wire 
type column appearing val exps part select exp wire type max voltage 
invalidating update operations updated wire voltage updated wire type 
updated wire type type updated wire type max voltage inserts deletes algorithm labels constraint predicate table wire equations fig 

equation label passed select expression subsequently table wire type 
invalidating insert delete operations inserted wire inserted wire type second example consider constraint tube contains wire expressed tube exists select wire tr fr select operation object exists need enumerate invalidating update operations columns table wire 
considering mentioned columns invalidating update operations updated wire fr updated wire updated tube fr updated tube inserts deletes table tube predicate initially labeled table wire inherits label appearance causes prop opposite label equation 
invalidating insert delete operations inserted tube deleted labeling optimisation aggregate functions aggregate function appears constraint labeling procedure generating insert delete operations assigns id relevant list predicate equation fig 

necessary insertions deletions respectively predicates hold may cause change result aggregate 
certain aggregate functions combination certain comparison op determine operation respect list insert delete change value entire expression similarly predicate 
example consider expression select mu cal name list predicate item labeling algorithm assigns id list predicate independent label inherited expression 
monotonicity function mar insertions tables list predicate hold increase value max making entire expression hold deletions predicate hold decrease max 
expression inherits label list predicate labeled symmetrically expression inherits list predicate labeled list predicate complex optimization may significantly reduce number invalidating operations 
similar optimizations apply combinations aggregate functions comparison operators 
consider expression form item comp op item exr form item expl connector select exp item exn aggregate 
denote label inherited expression 
table fig 
summarizes applicable optimizations particular aggregate function column particular comparison operator connector column 
column indicates components aggregate select operation labeled aggr 
lain mar max count count sum sum operator connector labeling optimization label opp opp aggregates inherited label include optimizations function sum assume positive values considered 
apply function avg operators 
expression form item expl camp op item item ex aggregate optimizations fig 
inverting comparison operators appropriately 
item expl item ex aggregates optimizations independently applied 
optimizations relevant constraints case study 
consider example constraint total outgoing power plant exceed produced power expressed plant power select sum fr plant id optimization labeling algorithm produces invalidating insert delete operations inserted plant inserted wire deleted power takes positive es apply optimization aggregate function sum eliminating deleted wire invalidating operation 
complex labeling optimizations possible certainly room 
discussion see 
rule templates constraint maintaining rules set invalidating operations generated constraint system produce rule template 
rule components completed automatically template transition predicate condition recall section 
user provide name action 
consider constraint form table list predicate 
constraint set inv ops say invalidating operations derived 
rule template produced constraint form create rule ops exists select list predicate action set invalidating operations translated directly rule transition predicate want rule triggered operation occurs may cause constraint violated 
rule triggered want check constraint violated 
behavior achieved translating constraint definition clause rule 
translation illustrated semantics constraint language constraint violated exists tuple cartesian product table list satisfying predicate 
select operation automatically labeled matter notational convenience 
action part rule user wants refer particular set contains exactly tuples violating constraint 
allow logical table action interpretation equivalent textual expansion 
example consider constraint wire contained tube expressed exists select tube fr fr rule template produced constraint create rule inserted 
updated wi re fr updated aire deleted tube updated tube fr ted tube exists select air select tube fr fr action suppose user decides appropriate compensating action delete wires tubes deleted insert new tubes remaining wires 
complete template user gives rule name replaces delete wires tubes deleted delete sire id select id fr select ft deleted tube assign tubes remaining wire insert tube select new tube id default tube type select distinct fr part action logical table transition table deleted tube wires tubes deleted wires deleted 
second part logical table referenced recall interpretation textual table expression generates fr pairs wires 
pair tube inserted new identifier default type 
default type turns inadequate rules enforcing constraints tube types triggered update type appropriately 
multiple constraints defined con table expression self explanatory details construct see cw hf 
straint maintaining rule produced constraints partially ordered ordering automatically transferred rules 
constraint cl enforced constraint rules ri rz enforcing constraints ci ordered triggered ri considered 
assuming scenario single user defines number constraints sitting rule derivation facility easily multiple times multiple users appropriate integration 
discussed section 
rule analysis multiple rules defined execution rule action may trigger number rules 
behavior crucial enforcing multiple constraints discussed detail section 
unfortunately behavior produces possibility cyclic infinite rule execution rules may trigger indefinitely 
certainly happen fact user tries enforce conflicting constraints 
attempt determine sets rules guaranteed terminate problem certainly undecidable general case perform simple conservative analysis rule sets indicating subsets rules infinite triggering possible 
cases warnings produced may relevant 
may known example rule action executed rules conditions hold 
user validate potential cycle termination finite time guaranteed 
straightforward method detecting potential cycles rule triggering behavior 
set rules triggering graph constructed 
nodes graph correspond rules set 
directed edge node node rj iff execution rule action trigger rule rj 
edges determined simple syntactic analysis trigger rj data manipulation operation ri action corresponds operation listed rj transition predicate 
triggering graph constructed cycle indicates potential nontermination 
user inspect cycle triggering graph determining infinite triggering possible 
relevant rules modified eliminate possibility 
triggering graph built preliminary rule set case study graph contains number cycles 
cycles clearly relevant 
interesting note cases infinite triggering possible fact revealed formal analysis unaware problem initial definition rules 
see cw details :10.1.1.143.7196
may want extend facility allow multiple rules enforcing 
accommodates possibility different compensating actions may appropriate different invalidating operations 
plan incorporate extension 
sophisticated rule analysis possible 
involve additional syntactic analysis rules cycle incorporating semantic information 
goal determine automatically cases possible infinite triggering occur 
topic research 
rule optimization rule analysis phase complete necessary modifications prevent infinite rule triggering 
point final set constraint maintaining rules 
illustrated system structure diagram fig 
rules may processed rule optimizer 
parts system varying degrees analysis performed varying quality results 
describe fairly straightforward optimization applicable wide class rules derived constraints 
condition parts constraint maintaining rules produced simple transformation constraint definitions 
rule conditions static predicates database state 
possible evaluate rule condition changes occurred constraint considered 
may correspond fraction database 
example suppose constraint may violated tuples inserted table 
may sufficient condition part rule enforcing constraint inspect tuples inserted inspecting entire table 
rule action pre defined table derived condition consequently improved 
describe automatic method transforming rule conditions incorporate kind optimization 
optimized conditions transition table feature rule language provides mechanism referring database changes recall section 
rule enforcing constraint optimization consider tables table list transforming tables appearing condition appropriate transition tables 
consider case table list contains table generalization multiple tables straightforward appears cw :10.1.1.143.7196
consider rule derived constraint table table list 
condition looks exists select predicate optimization applicable condition 
operations listed transition predicate operations table 
table appear clause nested select operation predicate 
note second requirement algorithm generating invalidating operations deleted appear transition predicate 
requirements met clause condition part rule replaced union transition tables corresponding op erations transition predicate 
transition predicate inserted updated cl 
updated cn optimization condition exists select inserted union new updated cl 
union nev updated cn predicate notice neu values updated tuples 
union clause named predicate handled appropriately 
assuming inserted updated tuples form small portion original table transformation yield significant improvement rule condition evaluation 
improvement may gained rule action logical table inherit optimization 
correctness transformation proven formally cw :10.1.1.143.7196
restrictions applying optimization may limiting fact rules derived constraints meet requirements 
exactly half rules case study eligible 
example consider constraint wire voltage exceed maximum wire type 
enforcing rule transition predicate condition inserted wire updated aire type updated sire voltage exists select wire voltage select mar voltage wire type type aire type condition voltage checked wires database 
optimization condition transformed exists select wire inserted wire union new updated aire type union new updated voltage 
wires checked inserted type voltage changed 
system execution far primarily considered static aspects facility 
constraint definition rule derivation strictly speaking assign new name appropriate column list table expression changing accordingly 
details particularly interesting omitted 
invalidating operations table wire type omitted case study table considered readonly cw :10.1.1.143.7196
rule analysis optimization performed prior system execution 
execution time focus study ensure derived rules behave desired consistency respect constraints guaranteed 
rules activated transaction consider arbitrary transaction showing rule execution terminate constraints valid 
certain assumptions aspects constraints translation performed user 
correctness requires proving consistency restored obviously relies appropriate compensating actions 
assume rule created user rule template constraint considered isolation restore consistency constraint assumption compensating actions constraint rule enforcing constraint 
database transition triggering rule condition holds action executed resulting state consistent respect constraints enforced rules executed restore constraint may cause violated additional rules triggered 
behavior acceptable long proceed indefinitely 
prove termination guaranteed assumption user properly validates cycles produced rule analyzer assumption cycle termination potential rule triggering cycle execute finite number times 
termination consider system execution set rules rr 
iz defined 
prove rule execution terminates transaction provide formal description system execution 
execution modeled sequence symbol sequence denoting initial transaction 
subsequent symbol denoting execution rule action 
symbol sequence insert set rules triggered point 
recall section rule considered respect net effect transition rule executed evaluated start transaction evaluated 
sequence rules may appear disappear set triggered rules action executed 
rule executed say initially triggered symbol preceding uninterrupted appearance set triggered rules 
suppose sake contradiction execution sequence infinite 
show sequence contain triggering cycle executed infinitely contradicting assumption 
lemma lemma infinite string finite alphabet 
substring infinite number disjoint occurrences appear proof partition ti substrings length finite number strings length ic length substring appear cr infinite number times 
applying lemma execution sequence sufficiently large obtain desired result 
modify execution sequence model explicitly contain triggered information 
element sequence pair second half pair indicates executed rule half rule indicates symbol initially triggering executed rule 
theorem termination infinite sequence representing rule execution 
rule triggering cycle appears infinitely proof rule triggered eventually symbol longer appears 
consider infinite tail true 
symbol rj pair rj triggered 
simple counting argument shows consider subsequence length ni number rules subsequence contain triggering cycle 
lemma subsequence ni appears infinitely 
contain cycle cycle appears infinitely 
correctness know constraint maintaining rules guaranteed terminate prove terminate consistent state 
consider arbitrary initial transition subsequent rule execution 
assume transaction begins consistent state constraint maintaining rules ensure transaction see details rollback action trivially guarantees correctness 
assume rollback action executed 
sequence model system execution 
case need include triggering information need include rules evaluated just actions executed 
execution represented sequence symbol subsequent symbol denoting evaluation rule 
theorem execution sequence finite show sequence constraints valid 
theorem correctness consider finite sequence representing system execution 
sequence constraints valid 
proof sequence triggered rules true conditions 
rule theorem considered executed rules rules evaluated 
result may applied directly show sequences guaranteed finite 
enforcing constraint ci triggered condition hold ci valid 
consider rule rj constraint cj triggered sequence 
consider cases 
rj appear execution sequence rj evaluated sequence rj considered respect transition start initial transaction 
net effect transition includes operations invalidate cj rj triggered 
cj invalidated start transaction 

rj appear execution sequence 
sequence rj considered respect transition executed condition false evaluated 
assumption case validity cj established 
cj invalidated rj triggered 
ci valid 
described general framework transforming constraints constraint maintaining production rules 
facility allows users define general constraints natural conceptual level predicates database states systematically derive lowerlevel rules guaranteed enforce constraints 
constraints rules process described user defines constraints consequently derives rules time 
equally possible constraints change time initial set constraint maintaining rules iz derived additional rules may added existing rules may removed 
point note new rules derived rule analysis applied entire set rules new old execution time rules coexist interact 
multiple users defining constraints particular application authorization facility useful may desirable constraints rules accessible users 
plan implement basic components facility experiments 
difficult algorithms syntactic analysis transformation parser generator tools 
step implement convenient user interface constraints editor rules editor shown fig 

plan continue extending functionality system improvements respects 
particular incorporate additional labeling optimizations conservative derivation invalidating insert delete operations perform complete rule analysis eliminate trivially impossible cycles define additional rule optimizations allow multiple rules enforcing single constraint 
broad area research plan explore possibility automatically semiautomatically deriving compensating actions 
grateful bruce lindsay useful discussions comments preliminary draft guy lohman carefully reading final draft alex aiken assistance proving theorem finkelstein pointing correct interpretation logical table raymond lorie suggesting idea constraints rules translation time ago 
asu bbc ctf cw de ec hm hf hi aho sethi ullman :10.1.1.143.7196
compilers principles tools 
addison wesley 
bernstein clarke 
fast maintenance semantic integrity assertions redundant aggregate data 
proc 
vldb pages october 
ceri 
management database integrity constraints logic programming 
technical report dip 
di elettronica politecnico di milano 
casanova 
enforcing inclusion dependencies referential integrity 
proc 
fourteenth vldb pages august 
ceri widom 
deriving production rules constraint maintenance 
ibm research report rj ibm almaden research center march 
delcambre 
relational production language production language relational databases 
expert database systems proc 
second 
conference pages benjamin cummings 
eswaran chamberlin 
functional specifications subsystem data base integrity 
proc 
vldb pages september 
hanson 
initial report design ariel dbms integrated production rule system 
sigmod record september 
haas freytag lohman pirahesh 
extensible query processing starburst 
proc 
acm sigmod pages may 
hsu imielinski 
integrity checking multiple updates 
proc 
acm sigmod pages may 
hmn mccune naqvi 
compiling constraint checking programs order formulas 
advances database theory volume pages 
ibm kp md mor mor nic sj sk st ud ud wa wf ibm systems application common programming interface data bare 
ibm form number sc october 
de simon 
making deductive databases practical technology step forward 
proc 
acm sigmod pages may 
koenig paige 
transformational framework automatic control derived data 
proc 
seventh vldb pages september 
mccarthy dayal 
architecture active database management system 
hoc 
acm sigmod pages may 

active databases paradigm enhanced computing 
proc 
ninth vldb pages october 

constraint equations declarative expression constraints automatic enforcement 
proc 
tenth vldb pages august 

nicolas 
logic improving integrity checking relational data bases 
acta 
qian smith 
integrity aint reformulation validation 
thirteenth vldb september 
stonebraker goh potamianos 
rules procedures caching views data base systems 
proc 
acm sigmod pages may 
shepherd kerschberg 
prism knowledge system semantic integrity specification enforcement database systems 
proc 
acm sigmod pages may 
stemple sheard 
modes meaning feedback transaction designers 
proc 
acm sigmod pages may 
stonebraker 
implementation integrity constraints views query modification 
hoc 
acm sigmod pages may 
urban 
translating constraints rules context constraint explanation tool 
manuscript 
urban delcambre 
constraint analysis design specifying operations objects 
appear acm transactions data knowledge engineering 
wald 
implementing constraints knowledge base 
database systems proc 
second int 
pages benjamin cummings 
widom finkelstein 
set oriented production rules relational database 
proc 
acm sigmod pages may 

