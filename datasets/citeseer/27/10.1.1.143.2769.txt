standard problem evaluating product line methodologies roberto lopez don batory department computer sciences university texas austin texas batory cs utexas edu 
propose standard problem evaluate product line methodologies 
relies common knowledge computer science easily acquired complex expose fundamental concepts product line methodologies 
point solution problem genvoca design methodology 
explain series modeling implementation benchmarking issues encountered understand compare solution theirs 
product line family related software applications 
product line architecture design product line identifies underlying building blocks components family members enables synthesis particular member composing components 
different family members product line applications represented different combination components 
motivation product line architectures economics practicality expensive build possible family members cheaper build components assemble desired family members 
methodologies invented create product line architectures 
unfortunately state art immature 
unaware attempts evaluate different methodologies common set problems 
done understand better strengths weaknesses different methodologies 
know particular methodology 
know different methodologies relied concepts 
example different oo design approaches rely common conceptual foundation classes interfaces state machines offer different ways producing design expressed terms concepts 
product line methodologies generally know 
different methodologies different meanings terms architecture component composition obvious common 
evident concepts shared product line methodologies knowing concepts 
practical standpoint choice methodology situation dictated convenience best random selection worst scientific fact 
unacceptable 
area mature essential compare evaluate proposed methodologies 
scientific principles underlie area identified contributions novelties different methodologies exposed way appreciate recognize 
immaturity area unique occurred areas computer science 
cases standard problem proposed different authors applied methodologies solve 
doing exposes important details overlooked misunderstood 
studies allow researchers accurately assess strengths benefits commonalities variabilities different methodologies 
believe approach beneficial product lines 
propose standard problem evaluating product line methodologies 
believe standard problem characteristics draws common knowledge computer science difficult requirement domain expert acquiring domain expertise minimized 
trivial design problem complex expose key concepts product lines implementation 
characteristics enable see similarities differences approaches superficial level importantly deeper conceptual level 
carry idea forward point solution problem genvoca design methodology 
outline set design implementation benchmarking issues resolve settled final design 
doing exposed variety concerns insights believe benefit hearing 
designs code benchmarks available web site www cs utexas edu users dsb gpl html access 
standard problem graph product line graph product line gpl family classical graph applications inspired early software extensibility 
gpl typical applications distinguished set features implement applications set features 
applications modeled sentences grammar 
shows grammar tokens names features 
shows gui implements grammar allows gpl products specified declaratively series radio button check box selections 

feature functionality implementation characteristic important clients 

simplicity grammar preclude repetition algorithms gui 
gpl gtp wgt src alg gtp directed undirected wgt weighted unweighted src dfs bfs alg number connected cycle mst prim mst kruskal shortest semantics gpl features domain 
graph directed undirected 
edges weighted non negative numbers unweighted 
graph application requires search algorithm breadth search bfs depth search dfs algorithms 
gpl grammar specification gui vertex numbering number assigns unique number vertex result graph traversal 
connected components connected computes connected components undirected graph equivalence classes reachable relation 
pair vertices equivalence class path strongly connected components computes strongly connected components directed graph equivalence classes reachable relation 
vertex reachable form vertex path cycle checking cycle determines cycles graph 
cycle directed graphs edges undirected graphs edges 
minimum spanning tree mst prim mst kruskal computes minimum spanning tree mst contains vertices graph sum weights edges tree minimal 
include algorithms distinct interesting performance design issues 
single source shortest path shortest computes shortest path source vertex vertices 
fundamental characteristic product lines features compatible 
selection feature may disable enable selection 
gpl exception 
set constraints govern gpl features summarized table 
algorithm required graph type required weight required search vertex numbering directed undirected weighted unweighted bfs dfs connected components undirected weighted unweighted strongly connected components directed weighted unweighted bfs dfs dfs cycle checking directed undirected weighted unweighted dfs minimum spanning tree undirected weighted single source shortest path directed weighted table 
feature constraints gpl application implements valid combination features 
examples gpl application implements vertex numbering connected components depth search undirected graph 
implements minimum spanning trees weighted undirected graphs 
client viewpoint specify particular graph application desired set features straightforward 
implementation gui constraints table 
chose java implementation language 
simplicity availability gui libraries java containers iterators sort methods avoid reimplementing low level routines hand 
recommend follow lead comparisons easier 
genvoca genvoca model product lines step wise extension key ideas programs values 
consider constants represent programs individual features program implements feature program implements feature extension function takes program input produces extended feature augmented program output adds feature program adds feature program follows multi featured application equation different equations define set related applications product line application features application features application features determine features application inspecting equation 
gpl genvoca model gpl set constants functions defined table 
extensions visible gui transpose benchmark prog 
transpose performs graph transposition algorithm 
sense separate algorithm transpose dealt separate concerns 
means implementation constraint extension transpose extension included vice versa 
benchmark contains functions read graph file elementary timing functions profiling 
prog creates objects required represent graph calls algorithms family member graph 
extensions composed arbitrary orders 
legal compositions extensions table defined simple constraints called design rules details omit include source code 
gui specification tool translates sentence grammar addition checking illegal combinations features equation 
features corre 
refinement adds implementation detail add methods class change semantics existing methods 
contrast extensions add implementation detail add methods class change semantics existing methods 
inheritance common way extend classes statically oo programming languages 
extensions translation straightforward 
example gpl application app implements vertex numbering connected components depth search undirected graph equation app prog benchmark number connected dfs undirected directed directed graph cycle cycle checking undirected undirected graph mst prim algorithm weighted weighted graph mst kruskal algorithm dfs depth search shortest single source shortest path bfs breadth search transpose graph transposition number vertex numbering benchmark benchmark program connected connected components prog main program strongly connected components mixin layers ways implement extensions 
mixin layers 
illustrate recall directed program implements directed graph 
program defined multiple classes say graph vertex edge 
exact set classes interesting design problem discuss section 
mixin layer represents directed program class directed inner classes graph vertex edge class directed class graph 
class vertex 
class edge 
table 
genvoca model gpl extension implemented mixin class superclass specified parameter 
depth search extension implemented mixin dfs encapsulates extensions mixins graph vertex classes 
dfs new methods variables graph vertex classes implement depth search algorithms class dfs extends class graph extends graph 
class vertex extends vertex 
describes general way genvoca gpl model constants functions implemented 
write composition dfs directed model translate equivalent template expression class extends dfs directed general simple mapping model equations template mixin expressions 
course java support mixins mixin layers extended java languages 
jakarta tool suite jts implement mixin layers 
graph implementation designing programs implement graph algorithms interesting problem 
implementation define representation graphs vertices edges adjacency vertices adjacent edge vertex 
way represent annotations edges weights names 
arrive final design immediately went series designs incrementally improved clarity code document sections 
process learned simple rule follow order simplify designs 
adjacency lists representation representation tried legacy design written years earlier implemented extensions listed table 
consisted classes graph consists list vertex objects 
vertex contains list adjacent vertex objects 
edges implicit existence inferred adjacency list 
illustrates representation weighted graph 
advantage representation simplicity 
worked reasonably extensions implement 
failed edge annotations weights 
edges implicitly encoded design maintain weights list parallel adjacency list 
layered designs obviously clean elegant operations graph transposition needed read edge weights kruskal algorithm needed manipulate edges directly 
reasons lead second design 
lvw lvw 
adjacency lists representation example neighbor list representation gn second representation consisted classes graph contains list vertex objects 
vertex contains list neighbor objects 
neighbor contains vertex object edge 
edge annotations encoded extensions extra fields neighbor class 
illustrates representation 
pushing neighbor vertex object edge annotations neighbor object reduced number list accesses required obtain annotations 
lead simplification coding mixin layers simplify complexity kruskal algorithm 
mixin layer unnecessarily difficult write read knew wrong 
lead final design 
edge neighbor representation gen textbook descriptions algorithms simple 
reason certain implementation details abstracted away fact strength layers extensions 
wanted demonstrate literally copy algorithms directly text books mixin layer code 
benefits doing faster reliable implementations easier transference proofs algorithm correctness proofs program correctness 
realized way possible recognize standard set conceptual objects referenced graph algorithms graphs vertices edges neighbors adjacencies 
algorithms graph textbooks define fundamental extensions graphs extensions modify graph objects vertex objects edge objects neighbor objects 
simplest way express extensions reify conceptual objects physical objects give distinct classes 
lvw lvw ri problems previous designs surfaced tried short cuts avoid explicit representation certain conceptual objects edge neighbor 
justification doing felt resulting programs efficient 
performing optimizations earlier designs folded multiple conceptual objects single physical object 
fact premature optimizations caused headaches tried augment design handle new extensions produce easy read maintain code 
think may common mistake software designs just 
final design explicit classes objects explicitly extended graph algorithms 
classes graph contains list vertex objects list edge objects 
vertex contains list neighbor objects 
neighbor contains neighbor vertex object vertex edge corresponding edge object 
edge extends neighbor class contains start vertex edge 
edge annotations expressed extensions edge class expressed addition extra fields edge class 
representation illustrated 
equating conceptual objects physical objects may simplify source code question remains original designs efficient 
premature design optimization essential performance 
questions addressed 
profiling results 
neighbor lists representation example performed series benchmarks quantify trade offs designs 
implementations designs tried different containers different strategies access copy edge annotations 
section shows results fine tuned implementations 
benchmarks run windows platform mhz processor mb ram 
lvw lvw lvw ri 
edge neighbor list representation example program vertex number algorithm undirected graphs depth search 
program measured performance graph creation traversal 
randomly generated graph vertices test case 
shows benchmark results 
indicates design performs better better gn second better gen third 
surprising gn gen object creation overhead absent neighbor objects created gn neighbor edge objects created gen obvious difference speed benchmark dictated time reading graph disk 
shows total execution time difference application gn application gen 
number vertices execution total execution time seconds number edges gn gen seconds number edges gn gen 
simple graph traversal comparison second program benchmarked impact copying graph edge annotations 
utilizes operation transpose creates new copy graph direction edges reversed 
randomly generated graph vertices test case 
general significant difference see 
design performed better gn better gen cost graph creation different designs indicated differences swamped large computation times algorithm 
particular total execution time spent reading graph disk 
seconds strongly connected components execution number edges gn gen seconds total execution time number edges 
strongly connected components gn gen third program benchmarked impact algorithms edges explicitly kruskal algorithm 
randomly generated graph vertices test case 
expected gen representation outperformed simply compute create edges adjacency neighbor lists 
performed faster representation faster representation gn see 
difference gn due fact get weights edge extra access weights lists required creation output graph expensive create neighbor objects 
total execution time approximately spent reading graph edges disk graph edges 
seconds mst kruskal execution time gn gen seconds total execution time gn gen number edges number edges 
mst kruskal performance algorithms weighted edges numbering cycle checking connected components strongly connected compo nents slightly better performance design 
algorithms weighted edges mst prim mst kruskal shortest path gen design better 
application specified equation models exploit performance observations smarter generator decide design implementation best particular family member equation realized design gen design see 
focussing exclusively performance may appropriate applications 
balanced viewpoint needs consider program complexity indirectly measures ease maintenance understandability extensibility 
main issue impact representation edges program complexity 
large layers visually simple representations 
kruskal layer complicated needed 
reason gn designs kruskal layer explicit edge class private layer layer 
kruskal algorithm demanded existence explicit edge objects 
fact layers benefit making edge explicit drove gen design considered visually conceptually elegant earlier designs 
turns instincts visual simplicity altogether accurate 
see metrics program complexity lines code loc number symbols 
table shows statistics kruskal layer 
making edges explicit simplify layer encoding 
parts design grew bit larger neighbor edge classes extensions explicit 
table shows statistics layers designs 
statistical complexity designs virtually identical 
drive visual simplicity layers improve designs surprisingly impact size statistics 
benefit gen design indicated tables 
chose enlarge gn product line algorithms directly manipulate edges local copy edge class introduced layers 
doing result replicated code possibly leading problems program maintenance 
making edge class global extensions gen design expect little code replication precisely want product line design 
wanted see explicit layering mixin layers produce affects performance 
created equations design contained layers manually inlined resulting chain mixin layers package called flat 
equations layers 
local version edge kruskal layer indicated table lines tokens 

metrics provided insights 
loc gn gen gn gen kruskal table 
kruskal algorithm statistics class name loc gn gen gn gen graph vertex neighbor edge total table 
lines code loc number symbols directed weighted dfs number transpose shortest cycle benchmark prog case difference layered version flattened oscillates gn gen randomly generated graph vertices test case 
results shown 
undirected weighted dfs connected number cycle mst kruskal mst prim benchmark prog application difference layered version flattened varies gn gen randomly generated graph test case 
results shown 
seconds strongly cc shortest number cycle execution time number edges gn gen seconds 
effect class layering prim kruskal cc number cycle execution time number edges gn gn gen small difference layered version corresponding flattened due fact methods override parent method 
overriding occur involves fewer layers 
result specific gpl may hold domains 
gpl simple illustrative problem product line designs 
different applications gpl product line defined unique sets features combinations features permitted 
state art product lines immature need understand commonalities differences product line design methodologies important 
want know methodologies differ relative strengths weaknesses importantly scientific principles underlie models 
know answers questions 
belief proposing solving standard set problems answers questions time revealed 
believe gpl candidate standard problem 
advantages simplicity exercise design implementation discussed relatively compact understandability domain expertise easily acquired fundamental topic computer science 
provides interesting set challenges clearly expose key concepts methodologies 
product line model implementation gpl genvoca methodology jakarta tool suite jts 
showed genvoca layers correspond features compositions features expressed equations implemented inheritance lattices 
sequence designs progressively simplified layer implementations 
benchmarked implementations understand performance trade offs 
expected different designs different execution efficiencies clear smart generator designs available decide representation best particular application 
additional result showed small impact class layering application performance 
hope apply methodology gpl publish designs findings 
believe benefit close inspection hold methodologies 
code downloaded www cs utexas edu users dsb gpl html 

vijaya ramachandran valuable help subtle details theory graph algorithms 
jay misra clarifying distinction refinements extensions 
abrial langmaack formal methods industrial applications specifying programming steam boiler control lecture notes computer science vol 
springer verlag 
america component oriented platform architecting method family product family engineering software product lines experience research directions kluwer academic publishers 
batory 
composition validation subjectivity genvoca generators 
ieee transactions software engineering february 
batory smaragdakis 
jts tools implementing domain specific languages int 
conf 
software reuse victoria canada june 
batory smaragdakis 
object oriented frameworks product lines st software product line conference denver colorado august 
batory chen robertson wang design wizards visual programming environments genvoca generators ieee transactions software engineering may 
bosch evolution composition reusable assets product line architectures case study software architecture kluwer academic publishers 
chidamber kemerer metrics suite object oriented design oopsla 
cohen object oriented technology domain analysis int 
conf 
software reuse victoria canada june 
cormen leiserson rivest 
algorithms mit press 
czarnecki eisenecker components generative programming sigsoft lncs springer verlag 
czarnecki eisenecker generative programming methods tools applications addison wesley 

schmid systematic approach derive scope software product lines int 
conference software engineering 
prototype domain modeling environment reusable software architectures int 
conf 
software reuse rio de janeiro november 
griss implementing product line features composing component aspects international software product line conference denver colorado august 
holland 
specifying reusable components contracts ecoop 
parnas design development program families ieee transactions software engineering march 
smaragdakis batory implementing layered designs mixin layers ecoop 
notkin templates implement role designs international symposium object technologies advanced software springer verlag 
weiss lai software product line engineering addison wesley 
