automated goms act model generation robert st cs ncsu edu department computer science north carolina state university raleigh nc usa frank ritter ritter ist psu edu school information sciences technology pennsylvania state university university park pa usa describe system produces act models goms models containing hierarchical methods visual memory stores control constructs 
goms formalism act single goms operator plausibly translated different ways act productions goms look operator carried different visual search strategies act 
goms model generates evaluates alternative act models systematically varying mapping goms operators act productions 
experiments text editing task produces act models predictions goms model predictions 
domain generates act models give predictions task duration actual users error models accurate detailed level 
trend appeared cognitive modeling human computer interaction researchers making capabilities cognitive architectures accessible developers designers lack modeling expertise ritter 
lee act simple automatically generates act models anderson press language similar klm goms 
techniques developed john 
automatically build act models klm act simple actions demonstrated interface designers 
system st horton ritter domain cell phone modeling partially automates generation act models specification keypad menu hierarchy 
inspiration described act simple lesser extent yost 
act simple demonstrates feasibility automatic translation high level goms specification language detailed act models exciting significant achievement 
said act simple translation process results limitations 
operator source model transformed act productions static translation process 
productions chained linear fashion 
productions environment visual processing represented shifts attention fixed locations 
essentially generated act models relatively little cognitive input information environment memory retrievals information processing decision making 
slight act simple constraints mainly dictated klm goms intended provide simple largely external description performance 
research explores basic problem addressed act simple translating high level specifications detailed cognitive models shifts focus simplicity representational power 
built system translates models gomsl act 
gomsl rich modeling language goms family kieras 
going capabilities klm goms gomsl allows representation mental objects working memory storage primitive internal external operators composite methods various flow control constructs 
supports capabilities translation process 
goal allow expression models simple klm goms models letting modelers add complexity needed 
chose act target language epic kieras meyer leverage existing model translation 
chose gomsl source language detailed manual documenting structure kieras 
tested examples taken gomsl manual verbatim syntax corrections 
complex gomsl model takes pages lines code containing mental object definitions methods sets selection rules 
match model translation process generates act model chunk definitions chunks productions various auxiliary constructs lines formatted model code 
act model predictions closely match predictions source gomsl model 
gomsl model starting point automatically generate different models give reasonable predictions actual user performance different assumptions match different evaluation criteria 
goal developing simply translate goms models act models turned demanding programming terms conceptually relatively simple 
provides insight available www ncsu edu 
interesting problems faced cognitive modeling community today 
go extending simple models detailed ones 
generally space models appropriate task performance data 
degrees freedom related flexible mapping actions productions visual processing environment specification 
different potentially complex models integrated 
argue integrating high level specifications easier integrating detailed models 
act modeling concepts accessible novice modelers familiar goms formalisms 
provides explicit computational account common act idioms represent specific behaviors 
feasibility generating act models gomsl models unexpected result worthwhile see expectation verified 
gomsl translation gomsl syntax comparable procedural programming language shown 
reasons space discussion assume basic familiarity goms act concepts explicitly treat architectural differences details elided 
begins parsing gomsl model intermediate representation appropriate translation described 
methods flow control 
gomsl methods sequences steps step contain operators 
example step method edit document store operator 
follows act simple representation control production contains condition test state slot goal chunk action update slot 
sequences operators translated productions ordered appropriately sequenced state values 
step execution sequential method decide statements support branching predicate tests goto allows arbitrary transfer control labeled steps 
forms translated appropriately set state values relevant productions 
gomsl method satisfies goal calling operators method invoke method accomplish goal ag statement 
flow control translates creation subgoal pushed goal stack 
method completes ends return goal accomplished statement pop action act 
selection rules govern choice methods multiple methods accomplish goal translated similarly decide statements 
shelf lalr parser written mark johnson online ai repository cmu 
models produced include small number act constructs anderson lebiere deprecated act anderson press working system act compliant 
ltm item cut command name cut 
containing menu edit 
menu item label cut 
method goal edit document step 
store current task name 
step check done 
decide current task name delete current task delete current task name return goal accomplished 
step 
get task item name current task name store current task 
step 
accomplish goal perform unit task 
step 
store current task current task name goto check done 
gomsl object method partial 
objects working memory 
gomsl supports declarative object representations including objects long term memory ltm items objects available visual processing visual items task descriptions task items 
object consists named collection property value pairs 
gomsl objects translated directly act chunks 
generated chunk unique identifier 
objects gomsl brought working memory named tags current task name 
properties object stored tag immediately available processing 
captures functionality slot goal chunk tag gomsl program 
change contents tag gomsl operator translates update corresponding slot goal chunk 
convenience gomsl allows method arguments pseudo parameters defined 
implemented implicit store operators record values global tags information passed methods ag forms 
production creates subgoal copies tag values current goal subgoal pushing stack 
operators 
gomsl defines number primitive operators carry basic load modeling performance 
aside control flow forms mentioned handles keystroke type click double click hold release point home speak look get task item store delete recall ltm item verify 
encompass gomsl operators wait object waitfor auditory object expect add soon 
operators contains translation translations type translations converted ac idioms generate productions perform activities equivalent gomsl operator 
example point expands hand mouse production followed production imposing appropriate conditions manual state 
type translations gomsl specified duration values keystroke requires ms 
cases generate productions type constructs 
think exception scheme translation fixed duration mental visual operators ms creation act model requires choosing specific translation operators source gomsl model 
complex translations follows 
double click hold release translated act mouse click actions act lacks direct implementation low level mouse operations atomic actions 
double click single action duration comparable type translation provides partial workaround 
point mentioned expands productions target argument 
target literal symbol object stored tag literal object stored property tag 
default translation process generates random location associated object literal stored pointing actions target 
location move cursor production 
numerical screen coordinates provided gomsl model requires specialized task specific code 
recall ltm item get task item take list predicates store tag arguments operator returning ltm item second task item 
result translation production identifier retrieved object meets predicate tests stored tag 
predicate comparison operands 
comparisons limited tests equality nonequality symbols 
operand comparison property object retrieved 
second literal literal stored tag property associated object stored tag 
cases production generated includes pattern direct comparison object property literal tag 
third case additional buffer added production allows retrieval chunk corresponding identifier stored tag access properties 
predicates processed recursively time list predicates exhausted 
action carried production store identifier retrieved object tag slot current goal chunk 
shows typical result retrieval single predicate 
look object search takes list predicates store tag arguments 
translation generates productions search set visual objects desired object 
productions standard act idiom find attend harvest visual acquisition 
harvest production augmented predicate pro get task item name task name current task production goal isa goal task name task name state edit document match isa task item id temp name task name goal current task temp state edit document sample generated production 
cessing recall ltm item 
visual module guaranteed find object meets predicate tests try translation similar recall ltm item 
lacking guarantee productions generated predicates may fail 
case failure secondary productions cause find production fired visit attended visual location 
visual object passes predicate tests identifier recorded tag slot current goal chunk 
look object direct type translation 
situations exhaustive visual search carried user knows location visual object predicates rely pop properties object 
situations translation generates production simply moves attention specific visual location randomly generated default recorded point 
store generates production records value literal value contents tag property contents tag target tag 
special case translation store delete dictated gomsl 
operators occur step operators action merged operators means independent duration 
delete generates production sets contents tag null empty value 
verify generates production moves attention visual location visited look object point operator 
verify generates production time 
translations defined minor limitations working remove 
begun examine different sets translations example reproduced models lee act simple modeling language gomsl source language 
evaluation comparing gomsl act models 
directly demonstrate accuracy gomsl act translation choosing gomsl model translating translations methods running comparison execution times 
simplify comparison rest section act models executed default values parameters base level learning 
comparison edit document model described earlier 
gomsl model includes top level methods describing activities mouse word processing environment executed sequentially delays 
copy word involves selecting copying single word pasting document 
copy arbitrary comparable task sequence words 
delete word involves selecting word pressing delete key 
move arbitrary similar copy arbitrary 
editing actions executed selections pull menu 
lower level activities accomplished methods method column table 
gomsl column shows durations method gomsl model kieras mg column shows corresponding values act model generated type translation gomsl operator averaged runs 
numbers close small discrepancies due parallel execution visual motor actions act plus automatic addition act model hand movements keyboard mouse implicit gomsl model specifically select word select insertion point 
average predictions act translations gomsl method durations task duration prediction 
straightforward non trivial result shows hierarchical relationships gomsl methods flow control methods transfer information methods captured executing act productions production durations fixed 
predicting user performance 
obvious step staying task domain see models predict actual user performance 
time users carrying edit document task standard word processing application find takes seconds 
value far predictions gomsl mg model 
believe models despite performance correctly represent basic structure task develop explanations observed behavior systematic way 
translation alternatives previous section thought act idioms representing particular activities 
view facing issues human cognitive modeler constructing accurate model 
lacks actual domain knowledge rely gomsl model task cases involving analysis existing system may access user data 
words table model predictions edit document task 
method gomsl mg error select insertion point select word erase text select arbitrary text issue command paste selection copy selection cut selection copy text move text edit document carry model fitting process exploring different elaborations gomsl task structure 
treats alternative translations gomsl operators search space 
varying translations activated generating act models explores search space hill climbing identify best translation 
hillclimbing evaluation function applied current state function applied states neighboring successor states produces better value best new current state 
process repeats successor state produces improvement state search set translations chosen set possible translations single operator look object direct verify click 
translation set produces unique model 
successors translation set differ translation gomsl operator 
executes model corresponding current translation set times collects predictions total duration edit document task computes difference target duration 
notice directly compare method execution times method boundaries implicit user behavior access external events 
test idea conducted small user study 
implemented simple instrumented text editing application roughly equivalent microsoft notepad supports edit document tasks 
pilot subject ran trials tasks copy word copy arbitrary delete word arbitrary edit document model performed 
ran users procedure 
mean total duration pilot user trials target search 
evaluated models search 
best model mtd relies translations mental visual activities motor actions performs visual search directing attention known locations verification 
comparing mtd predictions total duration performance users study shows results 
grand mean duration users seconds standard deviation user means 
mtd prediction seconds gives error 
result worth noting act model automatically produced reflects straightforward human modeler capture human performance domain prediction accurate obtained modeling effort original gomsl model 
mtd predictive power comparable generated act models described literature john lee 
refining model detail 
mtd obvious built limitations 
particular duration mouse movements visual attention shifts random locations actual environment detailed predictions user actions reliable 
data pilot subject possible carry detailed analysis refining mtd 
defined new search evaluation function measures intervals keyboard mouse events stripping cumulative duration event computes mean squared error corresponding interval durations pilot user 
altered model generation process actual locations objects measured instrumented application random values 
best model produced search mid identical mtd visual search verification relies translations mental operators 
varies double click implemented single action translation sequence mouse clicks 
mid prediction task duration mtd seconds 
general expect models generated different search evaluation functions similar domain appears plausible models clustered region performance 
detailed predictions mid shown table mean intervals mouse click keystroke events users study 
unfortunately predictions mid hoped 
correlation user intervals mid predictions average error predictions 
obvious pattern error values shown table largest reduced bring model error high respectable 
ways improve mid 
discussed previous section low level mouse actions double click hold release direct representations act substitutions inevitably inaccurate 
expect actions developed validated added act architecture see better results 
second possible structure imposed act productions gomsl forms gomsl methods entail bookkeeping overhead due ag operators degrades accuracy predictions generated model table user performance edit document task 
action user mid error double click select copy set insertion select paste select sentence select copy set insertion select paste double click press delete select sentence select cut set insertion select paste compared predictions native act model 
translations combine parallelize gomsl operators effectively may help 
despite limited predictive power mid detailed level constitutes interesting result 
mid produced refinement mtd largely automated process called effort supplying environment information 
process depended mainly gomsl model domain knowledge pilot user data guide model construction 
existing model translation tested model predictions level detail mid lack experience find performance adequate 
limitations 
important limitation evaluation mtd fastest models search space explored 
words chosen evaluation function simply minimized execution duration results 
combination task subject pool informative target performance lies extreme allowing little flexibility model structure 
neglected interesting opportunities exploring possible translations think operator 
john 
shown placement mental operators keystroke level model difficult task human modelers automated 
elaboration search process insert act productions model better match user durations determining exactly productions harder problem requires domain dependent reasoning 
open issue research 
discussion progress sufficient demonstrate promise approach 
expect development refinement benefit research community 
avenues worth pursuing 
bracketing kieras meyer tactic guide iterative modeling process 
fastest possible model slowest reasonable model optional inefficiently executed task components derived base strategy results help designer decide example performance demands system human capabilities 
contribute bracketing generating different models base strategy represented gomsl model 
fastest slowest models search space translations important consideration reasonable expectation domains identified automatically 
lines lead useful extension form translations higherlevel gomsl methods primitive operators 
idea closely related bracketing modelers associate classes translations different classes users 
way programmer sets compiler flags generate faster safer executable code sets translations identified expert novice behavior 
translations go ones described varying internal act parameters model structure 
cases expert modeler simply bypass search settle directly specific model 
possible benefit abstractions teaching modeling concepts computer scientists 
operator translations generate sequences productions comparable act tutorial modules productions tend specialized 
abstraction productions methods thought providing simple high level programming language model components 
productions different methods interact translation sequences information passed named global slots 
factors processing generated model easier understand 
extended allow user queries exhaustive visual search look act showing specific translations performed 
final potential benefit relates model size reuse 
largest models generates edit document task contain productions prevents generating larger models complex tasks 
time consuming errorprone generate models size hand modeled behavior completely understood 
adding methods gomsl model examining translation straightforward easier experience writing act productions directly 
task appears large handled conventional act development tools model requirements goms model visual processing learning behavior may needed high level procedural tasking language required control extended experiment offers starting point 
potential benefits involve tradeoffs determined research 
example may happen tuning models high level compiler directives allow sufficient precision hand may provide control 
may increasing model modularity larger models feasible involves reduction accuracy 
suggested model refinement efforts clear necessary implication processing 
believe represents promising approach 
advances state art cognitive model generation points important areas research 
acknowledgments thomas horton built editing application ran user study 
mike byrne anonymous reviewers suggesting significant improvements 
research supported nsf award iis onr award 
information necessarily reflect position policies government official endorsement inferred 
anderson byrne lebiere 
press 
integrated theory mind 
psychological review 
anderson lebiere 

atomic components thought 
lea mahwah nj 
john koedinger 

predictive human performance modeling easy 
proceedings chi 
acm 
kieras 

guide goms model usability evaluation gomsl glean 
technical report university michigan ann arbor mi 
kieras meyer 
overview epic architecture cognition performance application human computer interaction human computer interaction 
kieras meyer 
role cognitive task analysis application predictive models human performance 
cognitive task analysis chipman 
eds 
lawrence erlbaum mahwah nj 
ritter shadbolt young baxter 

techniques modeling human performance synthetic environments supplementary review 
wright patterson afb human systems information analysis center 
www iac mil docs soar jun front pdf st horton ritter 

cognitive modeling cell phone menu evaluation 
proceedings chi 
acm lee 

simple cognitive modeling complex cognitive architecture 
proceedings chi 
acm 
yost 

acquiring knowledge soar 
ieee expert 
