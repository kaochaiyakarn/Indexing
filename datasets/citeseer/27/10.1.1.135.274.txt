dictionary free overloading partial evaluation mark jones yale university department computer science box new haven ct 
jones mark cs yale edu novel features functional programming language haskell system type classes support combination overloading polymorphism 
current implementations type class overloading dictionary values passed extra parameters overloaded functions 
unfortunately significant effect run time performance example reducing effectiveness important program analyses optimizations 
describes simple partial evaluator avoid need dictionary values run time generating specialized versions overloaded functions 
eliminates run time costs overloading 
furthermore somewhat surprisingly presence multiple versions functions examples tried far specialization leads reduction size compiled programs 
functional programming language haskell supports flexible combination overloading polymorphism type classes :10.1.1.47.1059
standard implementation technique adopted haskell systems date involves dictionary values passed additional parameters overloaded functions resolve overloading run time 
unfortunately difficult obtain efficient implementation approach overheads manipulating dictionaries runtime presence reduces effectiveness important program analyses optimizations 
describes compiler small haskell language uses partial evaluator eliminate run time dictionaries 
dictionaries generate specialized versions overloaded functions compile time completely avoiding costs run time overloading 
potential dictionary free overloading discussed past idea adopted practical systems fear lead substantial increase size compiled programs called code explosion 
fact programs tried far find partial evaluator gives reduction program size 
main reason partial evaluation allows better job identifying redundant sections code needed run time 
system fits naturally framework offline partial evaluation type class type inference algorithm providing simple binding time analysis 
results provide motivation including general partial evaluation system part production quality compilers languages haskell 
remainder organized follows 
brief type classes haskell section describing way overloaded functions defined extended range datatypes 
dictionary passing implementation techniques current haskell implementations section comments outlining obstacles efficient implementation 
need eliminate dictionaries motivates form partial evaluation section produces dictionary free implementation programs type class overloading 
provide measurements program size collection realistic programs dictionary passing style dictionary free implementations 
section gives pointers related particular problems combining global partial evaluation separate compilation 
type classes type classes introduced wadler blott means supporting overloading ad hoc polymorphism language polymorphic type system :10.1.1.47.1059
section gives brief overview type classes language haskell provides examples sections 
details may 
basic idea type class corresponds set types called instances class collection member functions described methods defined instance class 
example standard prelude haskell defines class num numeric types declaration class eq text num lambda gamma negate abs signum frominteger integer gamma negate line declaration introduces name class num specifies instance num instance eq text 
additional standard classes haskell representing set types elements compared equality types values converted printable representation respectively 
note limited character set preferred write type class constraints num form num 
remaining lines specify operations specific numeric types including simple arithmetic operators addition multiplication lambda subtraction gamma unary negation negate 
frominteger function allow arbitrary integer value coerced corresponding value numeric type 
primarily supporting overloaded integer literals illustrated 
notice line declaration gives default definition subtraction terms addition unary negation 
definition explicit definition subtraction particular instances class 
instances class num defined collection instance declarations may distributed program distinct modules 
program free extend class num new datatypes providing appropriate definitions 
special case built type integer arbitrary precision integers instance declaration takes form instance num integer frominteger assumes implementation provides built function adding integer values 
note special case implementation frominteger just identity function 
haskell standard prelude defines number numeric types instances num including fixed precision integers floating point numbers 
definition frominteger typically complicated examples 
useful datatypes declared instances num 
example definition simplified version definition type complex numbers haskell data complex instance num num complex frominteger frominteger frominteger deal examples rational numbers polynomials vectors matrices similar way 
simple example numeric class define generic fact function fact lambda fact gamma integer constant appearing haskell program automatically replaced expression form frominteger treated overloaded numeric constant just integer 
explicit definition fact fact frominteger frominteger lambda fact gamma frominteger result fact function type num indicating expression type instance num fact expression type example fact fact type system ensures appropriate definitions multiplication subtraction case produce correct results 
time expression fact generate type error declaration char type characters instance num 
dictionary passing implementation section outlines technique dictionary passing explains reasons difficult produce efficient code presence dictionary values 
biggest problem implementation overloading finding efficient effective way deal method dispatch selecting appropriate implementation overloaded operator particular situation 
common technique attach tag run time representation object overloaded function implemented inspecting tags values applied typically form lookup table branching appropriate implementation 
apart considerations tags approach deal certain kinds overloading 
particular implement frominteger function described previous section implementation frominteger depends type argument type value expected return 
elegant solution problem separate tags values treating tags data objects right 
example implement frominteger function passing tag result extra argument 
amounts passing type information run time necessary overloaded functions involved 
approach dictionary values introduced wadler blott adopted current haskell systems :10.1.1.47.1059
dictionary tuple contains implementations member functions class 
superclasses represented pointers corresponding 
example illustrates structure dictionary num class including auxiliary dictionaries superclasses eq text 
specific instances structure constructed necessary instance declarations program 
names member functions selectors applied suitable dictionaries extract corresponding implementation 
example num lambda gamma negate abs signum frominteger text showsprec eq dictionary structure num class dictionary corresponding instance declaration num integer section frominteger notice overloaded primitive functions dealt adding extra dictionary parameter 
technique implement overloaded functions 
example adding extra dictionary parameter fact function member functions selectors obtain fact frominteger frominteger lambda fact gamma frominteger example uses function extract superclass dictionary eq dictionary corresponding instance num 
details translation process 
dictionary passing style reasonably simple understand implement suited separate compilation general structure dictionary set instances particular class obtained module interfaces needed compile code operators class 
unfortunately dictionaries causes substantial problems ffl unused elements dictionary cause unwanted increase code size 
ffl general case selectors implement method dispatch higher order functions 
wellknown efficient code generation static analysis considerably difficult situation 
ffl need construct dictionary values pass additional parameters run time adds overheads 
sections discuss points little detail 
dictionaries increase program size attempt reduce size executable programs compilers form tree shaking eliminate unused sections code output program 
particularly important large program libraries involved standard prelude haskell obvious example 
see dictionaries reduce benefits tree shaking 
idea grouping related operations single class certainly quite natural 
addition results complicated types 
example haskell separate classes eq plus mult operators lambda respectively function lambda lambda lambda assigned type eq plus mult bool simpler num bool disadvantage grouping methods difficult identify unnecessary sections code 
example program uses dictionary instance num require corresponding dictionaries eq text 
programs features text class large portions standard prelude dealing reading printing values included output program 
similar way program uses int arithmetic need include frominteger function part num int dictionary may result compiled programs include substantial parts run time support library integer 
factor tends contribute size programs implemented dictionary passing style need include additional code deal construction dictionary values implement selector functions corresponding member function superclass 
dictionaries defeat optimization known presence higher order functions results significant obstacles effective static analysis efficient code generation 
exactly kind problems occur dictionaries selector functions implement member functions usually higher order functions problems severe primitive operations haskell overloaded 
illustrate problems occur consider definition general purpose function calculating sum list numbers sum num sum xs loop xs loop tot tot loop tot xs loop tot xs translation include dictionary parameters sum xs loop frominteger xs loop tot tot loop tot xs loop tot xs original definition written reasonable standard strictness analysis techniques discover second accumulating argument recursive calls loop implemented call value calculation sum runs constant space 
unfortunately possible know strictness properties function implementation addition strict arguments instance num particular program possible new instance num defined module property 
code sum able correctly instance implementation sum require space proportional length list instance num 
implementation sum misses opportunities optimization 
example summing list machine integers values type int second argument loop implemented unboxed value addition expanded inline ultimately implemented just couple lowlevel machine instructions 
run time overhead dictionary passing number additional run time costs implementation type class overloading dictionaries 
construction dictionary involves allocation initialization components 
experience suggests number distinct dictionaries required program usually small see section concrete details cost dictionary construction theory significant 
examples show dictionary value may constructed times execution single program 
problems avoided sophisticated translation schemes dictionary parameters added haskell programs avoided context reduction haskell type system see details 
augustsson uses essentially example demonstrate similar problems 
question dictionary construction implemented lazily eagerly 
case attempt extract value dictionary preceded check trigger construction dictionary previously evaluated 
course entirely natural language lazy evaluation standard techniques optimize process cases 
second alternative eager construction dictionary values risks wasted effort building dictionary structure needed 
real concern definitions standard prelude haskell dictionary instance complex double involves additional superclass dictionaries depending way equivalent dictionary values shared 
lazy strategy member functions class accessed building single dictionary 
potential cost manipulating additional parameters pass dictionary values 
example may necessary generate extra instructions reserve additional space closure allocate application nodes graph implementation dictionaries 
experience suggests costs relatively insignificant practice 
explicit type signatures common optimization current haskell systems recognize dictionaries involved expression constant extract implementations member functions compile time 
requires programmer supply additional type information form explicit type declarations fact int int translation fact simplified fact zero fact primitive functions recognized code generator compiled efficiently zero obvious constant values type int 
current haskell systems adding explicit type signature small benchmark programs extensive overloading give fold improvement program execution time 
course speedups modest real world programs 
result quite common find haskell programs sprinkled type annotations help resolve overloading avoid altogether 
course need overly restrictive type signatures programmer rely compiler generate efficient type specific versions overloaded functions 
dictionary free implementation programmer perspective haskell type classes proved valuable extension hindley milner type system languages ml 
standard prelude haskell included illustrates range applications including equality ordering sequencing arithmetic array indexing parsing displaying printable representations values 
clear comments previous section implementation dictionary passing faces serious obstacles run time performance 
possibility dictionary free implementation mentioned wadler blott original introducing type classes observation result exponential growth code size :10.1.1.47.1059
illustrated considering function squares lambda lambda lambda type num num num 
notice instances class num possible versions function required program 
examples occur real programs 
situations apparent problems suggested theoretical significant impact practical results known 
example shown complexity damas milner type inference algorithm exponential kind examples cause occur practice algorithm behaves concrete implementations 
investigate expanding programs avoid dictionaries results code explosion developed compiler gofer functional programming system haskell dictionary parameters run time 
compiler earlier version output programs rely dictionaries 
main difference specialization algorithm described section produce specialized versions overloaded functions 
surprisingly results obtained general partial evaluation system discuss section 
comparing sizes programs produced different versions compiler able get measure potential code explosion 
expected expanding definitions overloaded functions realistic applications produce larger compiled programs hoped experiments show fairly modest increases 
surprise examples tried expanded program smaller original dictionary version 
formal treatment specialization section describes algorithm converting code dictionary implementation program overloading specialized form involve dictionaries 
presentation formal algorithm simple starting top level expression program replace occurrence overloaded function dictionary values applied new variable 
resulting expression enclosed scope new definition obtained specializing original definition corresponding dictionary arguments source language algorithm takes translations produced type checker input syntax terms grammar xe variables application abstraction local definitions symbol ranges set term variables ranges possibly empty sequences dictionary expressions 
addition ranges finite sets bindings pairs form denotes possibly empty sequence dictionary parameters variable binding 
set variables bound written dom additional constraint guaranteed type system reflected grammar occurrence variable scope number dictionary arguments equal number class constraints type assigned variable number dictionary parameters defining binding 
note language allows single bindings local definitions course expression form system represented fx language 
motivation allowing multiple bindings want describe specialization algorithm source source transformation may necessary specialized versions single overloaded function 
specialization sets motivated informal comments describe algorithm notion specializations expression form variables sequence dictionary parameters convenience require new variable 
program may require specialized versions overloaded functions usually finite sets specializations 
ensure sets consistent restrict sets words allow variable represent distinct specializations 
precisely condition needed ensure specialization set interpreted substitution represents substitution variable 
example applying specialization set fx yg substitution term gives 
practice sensible add restrictions attempt reduce size specialization sets size compiled programs ffl avoid duplicated specialization function 
ffl avoid unused specializations need include occurs dictionary arguments scope original definition note conditions motivated purely practical considerations required establish correctness specialization algorithm 
convenient introduce special notation working specialization sets ffl set variables defined sv sv words sv specialization set obtained removing specializations involving variable special case write sx abbreviation 
ffl specialization set define vars ffl define relation characterize specialization sets obtained set different specializations variables bound extends vars dom dom specialization algorithm specialization algorithm described judgments form rules 
expression input algorithm var xd xe var vars ss app mn abs extends specialization algorithm output new term implements dictionaries specialization set overloaded functions appear free note rules dealing variables 
var variables bound expression defined initial top level environment places variables bound overloaded values places specializations required 
second rule var deals remaining cases variables bound abstraction variables defined expression overloaded 
scope mention distinction characterized formally full set typing rules system 
hypothesis rule var implies compiletime evaluation dictionary expressions dictionary constants order specialization algorithm part practical compiler need ensure calculation carried risk nontermination 
see section comments 
mention judgment hypothesis rule 
describes process specializing group bindings respect pair specialization sets obtain dictionary free set bindings defined xe note variable bound appear vars result corresponding bindings 
assuming follow suggestions previous section include unused specializations specialization algorithm provides tree shaking eliminating redundant definitions output program 
worth mentioning rule easily adapted deal recursive bindings written rec place 
necessary replace 
remember goal program specialization produce dictionary free implementation input term 
clear definition output algorithm involve dictionary values remains show terms equal 
turn means precise means terms equal 
purposes assume standard structural equality axioms fx xn mn mn xn second simply familiar rule fi reduction restricted dictionary values arguments 
careful reader may notice statement rule uses dictionary parameters expressions positions permitted grammar section 
purposes theorem need slightly richer language allows arbitrary terms form notion equality establish correctness specialization algorithm theorem sm 
proof proof induction structure straightforward rule 
case derivation form extends required equality established outline lambda xe sm sm sm sn sm lambda steps labeled lambda follow induction 
steps justified properties substitutions 
simple example illustrate way specialization algorithm works consider simple haskell expression type checking insertion dictionary parameters ff denotes dictionary num int 
specialization set 
writing ff rule need find extends 
ff follows 
calculate specialized version original term ff treatment member functions specializations involving member functions handled little efficiently overloaded functions 
particular specialization member function appropriate dictionary need generate additional binding 
extract appropriate value specialization find specialized form place rule var 
specialization member functions described rule form var member expression represents process evaluating obtain dictionary extracting implementation member function rule essential ensuring output programs produced specialization include code functions normally included dictionaries program 
termination evaluation dictionary expressions rule var specialization member functions rule var member straightforward prove termination specialization algorithm induction structure judgments form 
establish additional termination properties gofer haskell sufficient observe set overloaded functions set dictionaries involved program finite finitely possible specializations 
assume cache memo function avoid repeating specialization function 
fact finitely dictionaries program depends critically underlying type system 
particular suggested haskell type system modified allow definitions eq bool permitted standard hindley milner type system function different instances definition 
attempting infer type assigned leads undecidability avoided insist explicit type signature included part definition 
set dictionaries required evaluate expression infinite specialization algorithm terminate program 
haskell type system extended way necessary dictionary passing implementation deal examples dictionaries avoided parts program 
relationship partial evaluation techniques program specialization widely studied important component partial evaluation 
broadly speaking partial evaluator attempts produce optimized version program distinguishing static data known compile time dynamic data known run time 
process split stages ffl binding time analysis find safe approximation set expressions program calculated compile time add suitable annotations source program 
ffl specialization calculate specialized version program binding time annotations guide 
specialization algorithm described fits neatly framework 
common approach binding time analysis translate terms level calculus distinguishes dynamic static applications abstractions 
dynamic versions operators denoted underlining denotes application postponed run time specialized compile time 
term embedded level system underlining applications abstractions binding time analysis attempt avoid possible 
purposes specialization algorithm described binding time analysis need mark standard abstractions applications delayed flagging corresponding dictionary constructs specialization correspondence standard operations ae oe delayed dictionary operations ae oe eliminated specialization dictionary specialization obtained general partial evaluator distinction dictionaries values provide binding time information 
better information supplement results standard binding time analysis obtain benefits partial evaluation addition eliminating dictionary values 
specialization practice specialization algorithm implemented modified version gofer compiler translating input programs intermediate language resembling code 
gives sample results comparing size programs produced original dictionary implementation obtained partial evaluation 
program list total number supercombinators output program number code instructions size stripped executable compiled cc turbo running nextstep 
figures row dictionary implementation expressions indicates total words required hold distinct dictionaries required program 
figures second row partially evaluated version expression form indicates total number supercombinators program supercombinators generated specialization distinct overloaded supercombinators original program 
programs chosen examples realistic applications gofer system ffl largest program anna strictness analyzer written julian seward 
including prelude file source code runs little lines spread script files 
program total number code executable name supercombinators instrs size anna veritas infer prolog expert calendar lattice code size indicators ffl veritas theorem prover written gareth taken preliminary version glasgow nofib benchmark suite 
ffl infer hindley milner type checker written philip wadler demonstration monads 
ffl prolog interpreter small subset prolog 
ffl expert minimal expert system written ian 
ffl calendar small program printing calendars similar unix cal command 
ffl lattice program enumerating elements lattice bool dn dn dn described 
included example program particularly heavy overloading figures indicate supercombinators output program result specialization 
prelude file tests version gofer standard prelude modified provide closer compatibility haskell including particular full definition text class 
programs haskell style derived instances 
allows programmer request automatically generated instance declarations standard type classes defining new datatype 
system currently support derived instances necessary add explicit declarations 
worth mentioning case anna benchmark code derived instances caused increase size final executable versions compiler 
figures interest right aware previous quantitative assessment degree overloading realistic applications 
examples listed output program produced specialization smaller dictionary version fact find example dictionary version code smaller 
surprisingly benefits greatest smaller programs 
larger examples clear ability eliminate redundant parts dictionaries avoid manipulating dictionary parameters pays increase code size due specialization 
special case anna specialization algorithm increases compile time translation approximately user seconds dictionary passing version specialization 
code generator simple minded expect high quality optimizing code generator significant effect 
possible overheads presence separate compilation gofer support modules program just sequence script files loaded 
time required translate gofer code fraction time required compile code 
anna typical example translation takes total compilation time 
furthermore fact specialized version program little smaller dictionary version means total compiletime slightly lower specialization 
clearly pressing concerns relatively small costs associated sophisticated code generator 
gofer run time performance programs improved marginally partial evaluation 
gofer code generator simple carry optimizations described sections 
argued optimizations potential offer significant improvements run time performance specialized code claim supported measurements described 
obvious way gauge potential specialized programs produced gofer input sophisticated compiler 
unfortunately technical reasons quite unrelated specialization possible current implementation 
crude indicator run simple experiments program functions described fact num fact lambda fact gamma nums ord num nums nums sum num sum xs loop xs loop tot tot loop tot xs loop tot xs main dialogue main print sum map fact nums int chalmers haskell compiler sun mp program runs user seconds allocates approximately mb heap 
contrast hand specialized version program takes user seconds sixth original time allocates mb heap 
program particularly heavy overloaded functions obtain speedup factors typical applications programs 
example help illuminate performance problems current implementations overloading demonstrate potential benefits specialization 
related haskell type classes provide useful extension language polymorphic type system dictionary passing style current haskell systems incur substantial overheads 
expanding definitions overloaded functions program avoid problems caused dictionaries theory result exponential increase size program code 
experience implementation type classes approach suggests strongly occur realistic programs 
believe demonstrates successful application partial evaluation 
full system expect obtain benefits general bindingtime analysis augment information produced distinguishing dictionary standard abstractions applications 
idea producing specialized versions functions implementation polymorphism overloading means new see example widely adopted practical systems 
particular case specializing avoid need dictionaries haskell style overloading considered techniques proposed somewhat ad hoc intertwined type inference algorithm 
motivated costs dictionary manipulation implementations haskell allow programmer request specialized versions specific overloaded functions source code annotations 
unfortunately dictionaries required cases guarantee specialized versions functions available 
described closely related previous specialization techniques improve performance method dispatch object oriented languages 
fact setting little different dictionary implementation overloading considered particular form method dispatch 
respect interesting aspect described surprising effect specialization program size 
see effect objectoriented dynamic languages difficult predict form object compile time eliminate redundant sections code 
particular areas desirable treatment separate compilation extension techniques specialization polymorphism 
interaction separate compilation biggest outstanding problem described interaction separate compilation 
example need deal cases need specialized version function may known module containing definition compiled 
prototype implementation avoids problems requiring source modules program supplied compiler time time 
clearly acceptable large scale program development 
problems occur system partial evaluation program optimization module boundaries required 
area example consel jouvelot give algorithm avoid repeated computation binding time information frequently libraries functions 
remains done 
current module system haskell criticized weakest parts language suggestions versions haskell adopt powerful system 
comments mind factors strongly influence choice replacement degree supports optimization analysis specialization module boundaries 
specialization polymorphism results suggest quite strongly expect obtain viable efficient implementation overloading program specialization 
radical proposal question possible obtain realistic implementation ml style polymorphism similar manner producing specialized monomorphic versions polymorphic functions necessary program 
biggest problems system risk code explosion interaction separate compilation 
expect significant benefits 
example implementations ml style polymorphism require arguments polymorphic functions packaged boxed values uniform representation independent type values involved 
converting boxed unboxed representations quite expensive number attempts find techniques reducing eliminating unnecessary conversions 
alternative suggested reduce polymorphic definitions collection monomorphic versions implemented appropriate representation values manipulates 
probably effective languages strict semantics need distinguish values delayed computations 
preliminary experiments direction reported investigation progress 
acknowledgments supported part arpa contract number 
martin odersky kung chen john peterson paul hudak referees comments earlier version julian seward encouraging take original experiments little providing biggest benchmark anna 
augustsson 
implementing haskell overloading 
conference functional programming languages computer architecture copenhagen denmark june 
chambers ungar 
customization optimizing compiler technology self dynamically typed object oriented programming language 
programming language design implementation portland oregon acm sigplan notices volume number july 
chen hudak odersky 
parametric type classes extended 
acm conference lisp functional programming san francisco california june 
consel jouvelot 
separate polyvariant binding time analysis 
oregon graduate institute department computer science technical report cs march 
gries gehani 
ideas data types high level languages 
communications acm volume number june 
gomard jones 
partial evaluator untyped lambda calculus 
journal functional programming january 
henglein jo rgensen 
formally optimal boxing 
proceedings st acm symposium principles programming languages portland oregon january 
hudak fasel 
gentle haskell 
acm sigplan notices may 
hudak peyton jones wadler eds 
report programming language haskell version 
acm sigplan notices may 
jones 
qualified types theory practice 
phil 
thesis 
programming research group oxford university computing laboratory 
july 
jones 
computing lattices application type classes 
journal functional programming volume part october 
jones 
partial evaluation dictionary free overloading 
yale university department computer science research report yaleu dcs rr 
april 
khoo 
compiling inheritance partial evaluation 
yale university department computer science research report yaleu dcs rr 
december 
leroy 
efficient data representation polymorphic languages 
inria research report july 
leroy 
unboxed objects polymorphic typing 
acm principles programming languages new york january 
morrison dearle connor brown 
ad hoc approach implementation polymorphism 
acm transactions programming languages systems july 
peterson jones 
implementing type classes 
acm sigplan conference programming language design implementation albuquerque new mexico june 
peyton jones launchbury 
unboxed values class citizens non strict functional language 
functional programming languages computer architecture cambridge ma springer verlag lncs august 
peyton jones wadler 
static semantics haskell draft 
manuscript department computing science university glasgow february 
wadler blott :10.1.1.47.1059
ad hoc polymorphism ad hoc 
th acm annual symposium principles programming languages austin texas january 
weise seligman 
accelerating object oriented simulation automatic program specialization 
department electrical engineering computer science stanford university technical report csl tr april 
