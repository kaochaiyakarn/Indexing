nominated best award ase 
appears proceedings th ieee international conference automated software engineering ase extended version invited submission special issue automated software engineering journal 
tool assisted unit test selection operational violations tao xie david notkin department computer science engineering university washington notkin cs washington edu unit testing common step software development presents challenge 
produced manually unit test suites insufficient identify defects 
main alternative variety automatic unit test generation tools able produce execute large number test inputs extensively exercise unit test 
priori specifications developers need manually verify outputs test executions generally impractical 
reduce cost unit test selection techniques may help select subset automatically generated test inputs 
developers verify outputs equip test oracles put existing test suite 
operational violation approach unit test selection black box approach requiring priori specifications 
approach dynamically generates operational abstractions executions existing unit test suite 
automatically generated tests violating operational abstractions identified candidates selection 
addition operational abstractions guide test generation tools produce better tests 
experiment approach integrated daikon dynamic invariant detection tool jtest commercial java unit testing tool 
experiment conducted assess approach 

test principle advocated extreme programming development process requires unit tests constructed maintained source code written 
unit test suite comprises set test cases 
test case consists test input test oracle check correctness test result 
developers usually need manually generate test cases written unwritten requirements 
practice developers tend write relatively small number unit tests turn tend useful insufficient 
commercial tools java unit testing jtest attempt fill gaps covered manually generated unit tests 
tools automatically generate large number unit test inputs exercise program 
test oracles produced automatically generated test inputs developers additional particular need write formal specifications runtime assertions uncommon practice 
priori specifications manually verifying outputs large number test inputs requires intensive labor impractical 
unit test selection means address problem selecting valuable subset automatically generated test inputs 
developers inspect executions smaller set test inputs check correctness add oracles 
operational violation black box test selection approach require priori specifications 
operational abstraction describes actual behavior program execution existing unit test suite 
execution automatically generated test input violates operational abstraction test input chosen test selection candidates 
key idea approach violating test exercises new feature program behavior covered existing test suite 
implemented approach integrating daikon dynamic invariant detection tool jtest commercial java unit testing tool 
section presents background information unit test selection problem techniques integrated approach operational abstraction generation specification unit test generation 
section describes motivating example illustrate approach 
section presents operational violation approach 
section describes experiment conducted assess approach 
section discusses related section concludes 

background 
unit test selection objective unit test selection select valuable subset automatically generated test inputs allowing developer manually verify test results augment existing unit tests 
closely related goals 
fault detection valuable test inputs highest probability exposing faults verifying test results improve probability detecting faults 
test augmentation valuable test inputs complement existing tests achieve better testing criterion 
formally objective unit test selection context answer question inexpensively possible program unit set existing tests test set unselected tests execution exercise new feature exercised execution test 
answer removed put removed discarded 
initial set existing unit tests usually manually written 
set unselected tests automatically generated tests 
term feature intentionally vague defined different ways 
fault detection new feature behavior occur executions existing tests 
white box test augmentation new feature program behavior exhibited executing new structural entity statement branch def pair 
words white box test augmentation residual structural coverage 
black box test augmentation feature program behavior exhibited covering new predicate priori specifications 
manual effort required verify results selected test inputs important select relatively small number tests 
different problems traditional test selection techniques address 
problems test oracles unselected test inputs 
selecting relatively large number tests selection usually acceptable problems practical 

operational abstraction generation operational abstraction collection logical statements program runtime behavior 
syntactically identical formal specification 
contrast formal specification expresses desired behavior operational abstraction expresses observed behavior 
daikon dynamic invariant detection tool infer operational abstractions program executions test suites 
dynamic analysis techniques quality test suite affects quality analysis 
deficient test suites subset sufficient test suites may help infer generalizable program property 
operational abstractions inferred executed test suites constitute summary test execution history 

specification unit test generation formal specification specification unit test generation tools automatically generate test inputs unit 
specification class generally consists preconditions postconditions methods addition class invariants class 
preconditions specify conditions hold method executed 
postconditions specify conditions hold method completed 
class invariants specify conditions objects class satisfy 
checked non static method entry exit non private constructor exit 
class invariants treated preconditions postconditions methods 
filtering test input space preconditions effectively automate unit test generation :10.1.1.122.9788
automatically generating test inputs exercise particular postconditions assertions attempted 
commercial java unit testing tool jtest automatically generate unit tests java class 
specifications provided jtest automatically generate test inputs perform white box testing 
specifications provided class jtest perform blackbox testing 
code preconditions jtest tries find inputs satisfy 
code postconditions jtest creates test inputs verify code satisfies conditions 
code class invariants jtest creates test inputs try fail 
default jtest tests method generating arguments calling independently 
words jtest basically tries calling sequences length default 
tool users set length calling sequences range 
calling sequence length specified jtest tries calling sequences length followed length sequentially 

motivating example motivating example java implementation bounded stack stores unique elements integer type 
shows class including implementations methods shall refer section 
stotts coded java implementation experiment method systematically creating unit tests provide web link full source code associated test suites :10.1.1.15.8679
defined unit test suites class basic junit test suite tests test method generated public method target class jax test suite tests test method generated axiom data type specification 
basic junit test suite expose fault jax test cases exposes fault handling pop operation empty stack incorrectly 
practice developers usually fix faults exposed existing unit tests augment unit test suite 
example analysis approach fixing exposed fault remove fault revealing test case jax test suite existing test cases pass 
public class invariant max elems length private int elems private int private int max public max elems new int max pre max post result pre int public int return public void pop public int top system println empty stack return return elems public boolean ismember int int index index index elems index return true return false public void push int public boolean isempty public boolean public int maxsize public boolean equals public int 
program code annotated contract dbc comments approach example define class specification 
invariant denote class invariants 
pre post denote preconditions postconditions respectively 
postconditions pre keyword refer value expression immediately calling method 
syntax pre expression 
result keyword represent return value method 

operational violation approach section describes operational violation approach 
section explains basic technique approach 
section presents precondition removal technique complement basic technique 
section describes iterative process applying techniques 
section illustrates rationales approach 

basic technique existing test suite run selected tests data trace select comment daikon detect invariants violating tests violated operational abstractions operational abstractions automatically generated test inputs run check annotated program insert dbc comments 
overview basic technique jtest basic technique operational abstractions inferred program executions existing unit test suite daikon 
daikon toolset extended insert operational abstractions source code dbc comments 
resulting code fed jtest automatically generates executes tests 
symptoms operational violation operational abstraction evaluated false exception thrown evaluating operational abstraction 
certain number operational violations occurred jtest exhausts testing repository stops generating test inputs reports operational violations 
reported operational violations including violating test inputs exported text file 
exported text file perl script developed automatically comment violated operational abstractions source code 
time operational violations collected 
jtest invoked script program reduced operational abstractions 
preceding procedure repeated automatically operational violations 
collected operational violations perl script developed select encountered test violated operational abstraction 
selected violating tests sorted number violated operational abstractions 
tests violate operational abstractions put violate fewer ones 
script produces junit test class contains sorted list violating test inputs violated operational abstractions 
integration tool developed fully automate preceding steps including invoking daikon jtest postprocessing text file 
running integration tool developers inspect resulting sorted tests verify correctness executions 
optionally developers add assertions test inputs test oracles regression testing 
example operational violation shown 
example indicates deficiency jax test suite shows method ismember violated postconditions followed violating test 
violating test added existing test suite 
ismember post pre int result true post pre int input new boolean retval ismember 
example operational violations basic technique 
precondition removal technique basic technique existing test suite deficient inferred preconditions restrictive jtest filters legal test inputs test generation execution 
need exercise unit circumstances constrained inferred preconditions 
annotated code fed jtest remove precondition comments exercise unit broader variety test inputs 
removing preconditions test generation tools guided especially tools generate tests mainly preconditions :10.1.1.122.9788
basic technique precondition removal technique complement 
shows examples operational violations technique 
example upper part indicates deficiency basic junit test suite violating test exposes fault detected original jax test suite 
example lower part shows deficiency jax test suite exposes new fault reported original experiment :10.1.1.15.8679
stack implementation accommodate negative integer elements operational violation shows exception indicator top method incorrectly integer put top stack 
typical fault full path coverage test suite guarantee expose fault 
violation reported basic technique inferred preconditions method top prevent element top stack int elems length assert elems assert denote assertion statement 
pop post elems elems pre int post invariant input new pop top post result input new push int retval top 
examples operational violations precondition removal technique 
iterations test selections performed techniques section violating tests run existing ones infer refined operational abstractions 
process described sections repeated operational violations reported operational abstractions generated previous iteration user specified maximum number iterations reached 
shows operational violations second iterations jax test suite 
iteration violating test added existing test suite weaken predicate implies predicate 
second iteration violating test removes implies predicate inferred owing deficiency tests 
st iteration ismember post result true input new top push boolean retval ismember nd iteration ismember post result true implies input new push push boolean retval ismember 
operational violations iterations 
works operational abstractions consistent oracle specifications actual specifications unit 
assume oa pre os pre domains constrained preconditions operational abstractions oracle specifications respectively 
legal domains ones satisfy preconditions oracle specifications illegal domains ones satisfy preconditions 
analyses different potential relationships oa pre os pre 
oa pre os pre os pre test inputs generated legal domain os pre oa pre 
oa pre os pre test inputs generated illegal domain oa pre os pre 
oa pre os pre traditional test generations performed 
precondition removal technique addresses case changing situation second case 
order test robustness unit useful generate illegal test inputs exercise 
illegal test input causes operational violation tool reports catches attentions developers 
execution legal test input generates violation class invariant postcondition possible causes 
cause class invariant postcondition operational abstractions restrictive oracle specifications 
operational violations indicate violating test exercises new feature program covered existing test suite 
desirable select violating test augment existing test suite 
second cause fault revealed violating test 
running existing test suite code exhibits normal behavior reflected operational abstractions violating test code exhibit abnormal behavior 

experiment section presents experiment assesses approach 
measurements experiment described 
experiment instrumentation 
experimental results threats validity described 
general questions wish answer include 
number automatically generated tests large developers adopt unit test selection techniques 

number tests selected approach small developers inspect 

selected tests approach high probability exposing faults 

operational violation approach compare residual branch coverage approach 

measurements answer questions care designed experiment give initial sense general questions efficacy approach 
particular performed measurements address questions directly indirectly automatically generated test count absence operational abstraction measured number tests automatically generated jtest absence operational abstraction 
measurement related question 
selected test count measured number tests selected test selection technique 
measurement related second question 
fault revealing selected test count frt measured number fault revealing tests selected tests 
manually inspect selected tests source code determine tests 
note multiple fault revealing tests expose fault different ways 
measurement related third question 
measurement performed subject program 
second third measurements performed combination basic precondition removal techniques subject programs number iterations 
help answer fourth question second third measurements performed subject program residual branch coverage approach 
residual branch coverage approach selects automatically generated test test exercises new branch covered existing test previously selected test 

experiment instrumentation 
subject programs 
table lists subject programs experiment 
subject program java class equipped manually written unit test suite 
column shows names subject programs 
second third columns show number public methods number lines executable code program respectively 
fourth column shows number test cases test suite program 
columns measurement results shall describe section 
table 
subject programs experiment program public loc tests ext method ub stack junit ub stack jax ratpoly ratpoly stackar subjects ub stack junit ub stack jax motivating example section basic junit test suite jax test suite failing test removed respectively :10.1.1.15.8679
ratpoly ratpoly student solutions assignments programming course mit 
selected solutions passed unit tests provided instructors 
rest subjects come data structures textbook 
daikon group members developed unit tests data structure classes textbook 
unit tests random input generation fully exercise programs 
applied approach classes classes table operational violation 
test suite classes organized set test cases fourth column apply 

tools 
daikon jtest experiment implement approach 
developed set perl scripts integrate tools 
jtest configuration experiment set length calling sequence 
daikon default configuration generation operational abstractions 
hansel tool developed test selection tool residual branch coverage 
particular run jtest subject programs collect measurement absence operational abstraction 
subject program performed experiment basic technique repeated third iteration reached operational violations reported operational abstractions generated previous iteration 
similar procedure performed precondition removal technique 
iteration frt measurements collected 
tool residual branch coverage collect frt measurements tests automatically generated jtest absence operational abstraction 

experimental results fifth column table shows results 
results observed especially small program nearly tests automatically generated 
tried setting length calling sequence caused jtest produce thousands tests programs 
shows test selection techniques needed practical manually check outputs automatically generated tests 
column table shows number automatically generated tests cause uncaught runtime exceptions 
tests selected tests selected operational violation approach residual branch coverage approach 
table shows number selected tests fault revealing selected tests frt 
data preconds columns basic technique preconditions 
data preconds columns precondition removal technique preconditions 
data value zero entries left blank 
bottom row table shows median percentage frt 
calculation median percentage entries value zero included 
numbers selected tests vary different programs average numbers large outputs verified affordable human effort 
observed experiment selected tests high probability exposing fault 
fault revealing tests usually inputs cause program exhibit abnormal behavior illegal arguments special object states 
concrete example selected test ratpoly program precondition removal technique program infinitely loop java memory error occurs 
test set automatically generated tests jtest absence operational abstraction 
result suggestive approach may value 
addition observed non fault revealing tests expose fault represent special class inputs may valuable selected regression testing 
table 
numbers selected tests fault revealing selected tests basic technique precondition removal technique program iteration iteration iteration iteration programs preconds preconds preconds preconds preconds preconds frt frt frt frt frt frt ubs junit ubs jax ratpoly ratpoly stackar median frt table 
numbers selected tests selected tests residual branch coverage approach program total br ar frt branch branch branch ub stack junit ub stack jax ratpoly ratpoly stackar median frt observed violating test generated jtest approach set automatically generated tests jtest absence operational abstraction 
suggests operational abstractions effectively guide jtest generate tests violate 
median percentage frt precondition removal technique effective basic technique 
inspecting violating tests basic technique guide jtest generate new violating test inputs generated precondition removal technique 
observed experiment couple iterations approach 
jtest test generation execution time dominates running time applying approach 
subjects took minutes programs took order minutes 
expect execution time optimized versions jtest better support resumption test generation execution violated operational abstractions commented 
columns table shows frt measurements residual branch coverage approach 
second column table shows count total branches subject 
third column presents count residual branches execution existing tests 
fourth column presents count residual branches execution existing tests selected tests 
bottom row table shows median percentage frt 
observed existing tests left residual branches subjects 
tests automatically generated jtest reduce count residual branches half subjects 
number selected tests fault revealing tests residual coverage approach fewer operational violation approach 
measured residual branch coverage execution existing tests tests selected operational violation approach 
count residual branches usually larger residual branch coverage approach 
indicates residual branch coverage approach effective selecting tests achieve better branch coverage 
hand programs contain faults exposed tests selected operational violation approach tests selected residual branch coverage approach expose 
suggests combining residual branch coverage approach operational violation approach may provide better solution unit test selection 

threats validity threats validity primarily include degree subject programs faults test cases representative true practice 
subjects experiment small faults real detected 
threats reduced experiments wider types subjects 
threats validity include instrumentation effects bias results 
faults perl scripts daikon jtest cause effects 
reduce threats manually inspected results program subject 

related harder specification technique requiring priori specification 
operational difference technique starts operational abstraction generated existing test suite 
generates new operational abstraction test suite augmented candidate test case 
new operational abstraction differs previous adds candidate test case suite 
process repeated number candidate cases consecutively considered rejected 
operational difference approach operational abstractions generated test executions 
approach exploits operational abstractions guidance test generation operational difference operates fixed set tests 
tool continuously check program behavior incrementally inferred invariants run produce report invariant violations detected way :10.1.1.164.9197
help detect bugs track root causes 
usage model proposed similar unit test selection problem 
approach violations inferred invariants 
inferred invariants approach produced daikon method entry exit points infers limited set simpler invariants procedure call sites object static variable read write sites 
investigate effects operational abstractions test generation 
failed static verification attempts indicate deficiencies unit tests 
invariants indicate unintended properties developers get hints improve tests 
approach reports violated invariants executable counterexamples 
addition restrictiveness preconditions static verification inferred invariants effective 
static verifier confirm inferred postcondition restrictive preconditions hard tell generalizable actual preconditions 
approach precondition removal technique tackles problem 
specifications provided unit priori specification coverage criteria suggest candidate set test cases exercise new aspects specification 
preceding related operational abstractions approach require specification priori 
white box testing residual structural coverage developers select inspect tests provide new structural coverage existing test suite 
test case prioritization techniques additional structural coverage techniques produce list sorted tests regression testing 
clustering sampling execution profiles select list tests inspection selection 
integrated daikon jtest implement approach specification unit test generation tools implement approach :10.1.1.122.9788
kinds operational abstraction generation sequencing constraints protocol inferences approach 
plan experiment implementations approach 

selecting automatically generated tests check correctness augment existing unit test suite important step unit testing 
inferred operational abstractions act summary existing test execution history 
new test violates operational abstraction candidate inspection selection exercises new program feature covered existing tests 
violating test high probability exposing faults code 
addition operational abstractions guide test generation tools produce better test inputs 
considering test augmentation phase considered frequent activity software evolution frequent regression unit testing 
program changed operational abstractions generated unit test suite change presenting opportunities possible operational violations 
tool assisted unit test augmentation may practical means evolving unit tests assuring better unit quality 
unit test selection tool operational violations available download www cs washington edu homes 

acknowledgment michael ernst daikon project members mit assistance daikon tool preparation experimental subjects 
sponsorship jtest tool 
supported part national science foundation itr 
acknowledge support high dependability computing program nasa ames cooperative agreement ncc 

ammons bodik larus mining specifications proceedings principles programming languages popl portland oregon january pp 

beck extreme programming explained addison wesley 
kent beck erich gamma test infected programmers love writing tests java report july 
boyapati khurshid marinov korat automated testing java predicates proceedings international symposium software testing analysis issta rome italy july pp :10.1.1.122.9788
cheon leavens simple practical approach unit testing jml junit way proceedings th european conference object oriented programming ecoop pp 

chang richardson structural specification testing automated support experimental evaluation proceedings th european software engineering conference th acm sigsoft symposium foundations software engineering esec fse sept pp 

dickinson leon podgurski finding failures cluster analysis execution profiles proceedings international conference software engineering icse pp 
ernst cockrell griswold notkin dynamically discovering program invariants support program evolution ieee transactions software engineering vol 
feb pp 

gupta generating test data dynamically discovering program invariants proceedings icse workshop dynamic analysis may pp 

hansel hansel sourceforge net 
lam tracking software bugs automatic anomaly detection proceedings international conference software engineering icse may pp :10.1.1.164.9197

harder ernst improving test suites operational abstraction proceedings international conference software engineering icse portland oregon may pp 

manuals version www com october 
jtest manuals version www com october 
junit www junit org 
meyer object oriented software construction new york london prentice hall second edition 
nimmer ernst static verification dynamically detected program invariants integrating daikon esc java proceedings workshop runtime verification rv paris france july 
young 
residual test coverage monitoring proceedings international conference software engineering icse pp 

rothermel chu harrold test case prioritization ieee transactions software engineering vol 
october pp 

stotts lindsey :10.1.1.15.8679
informal formal method systematic junit test case generation proceedings nd xp universe st agile universe conference xp agile universe pp 
srivastava thiagarajan effectively prioritizing tests development environment proceedings international symposium software testing analysis issta rome italy july pp 

whaley martin lam automatic extraction object oriented component interfaces proceedings international symposium software testing analysis issta july pp 

weiss data structures algorithm analysis java 
addison wesley longman 

