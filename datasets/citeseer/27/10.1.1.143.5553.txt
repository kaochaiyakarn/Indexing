originally published proceedings usenix annual technical conference new orleans louisiana june slic extensibility system commodity operating systems douglas university california berkeley david petrou carnegie mellon university steven rodrigues network appliance thomas anderson university washington information usenix association contact 
phone 
fax 
email office usenix org 
www url www usenix org slic extensibility system commodity operating systems douglas berkeley cs berkeley edu david petrou carnegie mellon university cs cmu edu thomas anderson university washington tom cs washington edu steven rodrigues network appliance com modern commodity operating systems large complex systems developed years large teams programmers containing hundreds thousands lines code 
consequently extremely difficult add significant new functionality systems 
response problem number research projects explored novel operating system architectures support untrusted extensions including spin vino exokernel fluke 
unfortunately architectures require effort generally available commodity systems 
contrast leveraging technique interposition designed implemented prototype extension system called slic requires trivial operating system changes 
slic efficiently inserts trusted extension code commodity operating systems enabling large class trusted extensions existing commodity operating systems solaris linux retaining full compatibility existing application binaries 
interposing trusted extensions existing kernel interfaces solution enables extensions protected malicious applications enforced uncooperative applications composable extensions third party sources developed user level state art development tools 
slic implement demonstrate number useful operating system extensions including patch fix security hole described cert advisory simple encryption file system restricted execution environment arbitrary untrusted binaries 
performance measurements slic prototype demonstrate time installation cost sec extension invocation overhead commensurate procedure call 
supported part defense advanced research projects agency national science foundation cda sun microsystems california micro hewlett packard intel microsoft mitsubishi 
anderson supported national science foundation presidential faculty fellowship 
modifying modern commodity operating systems extremely difficult costly 
large complex systems developed years large teams programmers contain millions lines code 
unusual major releases commodity operating systems flaws introduced development typically requiring additional bug fix releases may turn introduce flaws 
compounding problems development debugging environments operating system kernels considerably state art 
consequently extremely difficult practice add significant new functionality modern commodity operating systems :10.1.1.14.7130
modifying commodity operating systems complex difficult need remains 
large catalog operating system functionality widely deployed part difficulty modifying existing systems load sharing process migration fast communication primitives upcalls distributed shared memory user level pagers novel schedulers :10.1.1.14.3607:10.1.1.129.159
addition security flaws routinely discovered reported organizations carnegie mellon computer emergency response team cert department energy computer incident advisory capability 
despite need immediate repair prevent wide exploitation flaws required patches take weeks available 
aims significantly simplify process evolving existing commodity operating systems enabling new extensions manage global resources enforce security guarantees 
ideal system achieves goal possess number characteristics require modifications systems applications introduce little overhead multiple extensions independent third active simultaneously extensions protected malicious applications enforced uncooperative applications kernel extension developers able state art user level development debugging tools 
accomplishing goal enable independent software vendors develop deploy innovative operating system features 
particular new operating system features developed research projects transferred directly users need convince wait operating system vendors adopt modifications 
furthermore cert security advisories normally require system administrator wait patch operating system vendor advisory directly include small extension correct flaw reducing window vulnerability dramatically 
prior approaches extending operating systems roughly divided categories reengineering operating system ground process making easier extend ii incrementally re engineering selected portions kernel iii adding extensions existing systems significant modification operating system applications 
years number systems attempted reduce cost adding new operating system functionality re engineering operating system extensible 
systems built approach include hydra spin vino exokernel fluke :10.1.1.100.6047
systems successfully demonstrated greatly reduced costs adding new functionality initial cost replacing existing commodity operating systems prohibitive example microsoft spent developing windows nt 
consequently extensibility architectures developed approach remain unavailable average user foreseeable 
small number projects taken second approach re engineering certain kernel interfaces reduce complexity adding new functionality interfaces 
vnode interface prime example approach :10.1.1.113.4370
applying technique existing commodity operating systems generally extensible require modifying exposing interfaces additional functionality desired effectively re engineering majority operating system 
foreseeable interfaces generally available commodity operating systems 
take third approach adding functionality minor modifications underlying operating system modification application code binaries 
differs earlier efforts solution kernel level interposition trusted extensions kernel interfaces simple implement efficient requires specialized hardware support protects extensions malicious faulty applications enforces extensions uncooperative applications supports extension stacking 
believe system provides powerful combination features extending existing commodity operating systems 
prior attempts extend operating system significant modification suffered significant limitations 
interposition agents leverages mach system call redirection facility transparently insert user level extensions system call interface 
extensions run unprotected application address space require application cooperation extensions enforce security guarantees manage shared resources competing applications 
software fault isolation sfi protect extensions applications loaded address space :10.1.1.142.4909
unfortunately sfi requires number compiler optimizations achieve low overhead applied efficiently existing application binaries 
protected shared libraries capability sfi need compiler optimizations enforce extensions applications 
overcome limitations systems developed slic prototype system efficiently inserting trusted extension code existing operating systems minor modifications operating system source code 
conceptually slic dynamically various kernel interfaces system call signal virtual memory paging interfaces transparently events cross interface extensions located kernel performance user level ease development 
extensions implement intercepted kernel interface enabling new functionality added system underlying kernel existing application binaries remain oblivious extensions 
slic dynamically interposes extensions kernel interfaces modifying jump tables binary patching kernel routines 
prototype currently runs solaris 
slic prototype implement number extensions significantly difficult accomplish means 
extension patches security flaw publicized cert 
second extension encrypts file third provides restricted process execution environment 
rest organized follows 
sec tion provides background interposition 
section describe design implementation performance slic prototype interposition system 
sample extensions performance section 
section discuss experience interposition extension tool lessons learned building system interfaces support interposition effectively 
section discusses related sections close 
api application kernel application extension kernel application extension extension kernel api api api interposition background interposition process capturing events crossing interface boundary forwarding events interface extension 
extension performs processing event passes event original destination forces event return 
illustrates interposition interface extension second 
interposition number useful properties transparent incremental 
interposition transparent inserted extension code uses implements original interface enabling user applications kernel remain oblivious extension code 
interposition incremental extensions need capture events interested 
extensions required handle events crossing interposed interface boundary enabling leverage functionality existing interface example extension logging fork system calls underlying operating system write system call store log 
extension writers implement desired extension functionality functionality entire interface 
interposition maintains original interface extension applied recursively enabling multiple independent extensions compose functionality 
right hand side shows second extension extension stack 
diagram extensions oblivious presence just application kernel oblivious presence extension 
transparency incrementality composability interposition uniquely suitable extending existing interfaces 
specifically transparency interposition implies interfaces designed extensibility extended 
incrementality simplifies extension development ensuring extensions need provide desired functionality reimplementing substantial portions kernel 
com interposing extensions interface 
solid lines indicate interfaces components 
dotted lines illustrate interposition extension interface 
events original interface intercepted routed extension code 
diagram original api left maintained level right making interposed extension transparent applications kernel extensions 
means multiple extensions provided independent third party vendors applied single interface 
kernel level interposition extensions broad range capabilities 
extensions provide security guarantees patching security flaws providing access control lists virtualize resources providing cluster wide process identifiers modify data transparently compressing encrypting files reroute events sending events network distributed systems extensions inspect events data tracing logging 
interposition important limitations 
interposition requires defined interface capture events 
systems poorly decomposed functionality may interfaces 
second new functionality implemented terms existing functionality example cache coherent file system constructed interposition underlying layers expose cache management mechanism file system interface 
despite limitations power flexibility interposition led widespread modern computing systems 
forms interposition virtual machines object oriented programming language systems distributed file systems nfs distributed shared memory systems treadmarks pipe construct unix shells world wide web proxy caches ms dos terminate stay resident tsr utilities macintosh toolbox extensions :10.1.1.21.1842:10.1.1.100.6047:10.1.1.14.473
design implementation investigate adding new functionality existing operating systems designed implemented slic interposition system commodity unix operating systems 
slic leverages transparency incrementality features security extensions protected malicious faulty applications enforced applications 
feature enables extensions manage shared resources enforce security guarantees 
note slic assumes extensions trusted 
research efforts addressed issues involved untrusted extensions :10.1.1.142.6054:10.1.1.142.4909
ease development development testing extension writers able state theart programming tools symbolic debuggers performance analysis utilities 
efficiency development complete extensions impose minimal overhead system 
extension overhead times cost procedure call 
processes don extension experience minimal performance slowdown 
slic architecture slic comprised multiple dispatchers extensions various support routines 
dispatchers responsible intercepting system events particular interface routing events interested extensions 
extensions receive events dispatchers implement new operating system functionality 
support routines provide extensions simple consistent interface useful functionality memory allocation synchronization primitives 
dispatcher may provide additional support routines appropriate interface example system call dispatcher provides routines determine children process 
dispatchers slic dispatcher captures events single system interface 
dispatchers techniques intercept interface events 
interfaces invoked jump tables system call vnode virtual memory interfaces solaris dispatchers saves original jump table replaces address slic dispatchers extensions 
dotted lines represent interposed interface 
events crossing interface captured dispatcher forwarded extensions 
interception routine 
procedural interfaces called directly various locations kernel signal interface dispatchers binary patching intercept events 
instructions relevant procedure saved replaced instructions jump dispatcher procedure called 
original routine needs invoked saved instructions executed control returned original routine instruction binary patch 
techniques slic dispatchers capture interface invocations cost procedure call 
event captured dispatcher event passed interested extensions processing 
depicts relationship dispatchers extensions 
dispatcher maintains ordered list extensions intercepted events flow return values flow back 
dispatchers policy decisions regarding ordering extensions extensions ordered system administrator 
shows simplified portion system call dispatcher interface 
extensions express interest certain events small number predicates defined dispatcher 
example system call dispatcher filters system call events process identifier system call type extension wishes trace open system call process specify easily invoking slic process calling slic register handler open system call 
signal dispatcher provides similar functionality enabling filtering pro struct slic int int args struct slic bool int int errno slic int slic int void handler slic slic slic int pid bool slic int pid bool slic slic slic simplified version interface exported system call dispatcher extensions 
cess identifier signal type 
receiving event extension number options available extension pass unmodified event stack simply calling slic extension modify event parameters struct slic pass setting fields slic structure extension force event return back extension stack arbitrary return value error condition system call exploit known security hole 
event forced return extensions call chain including original kernel routines see event 
return value flows back chain reverse order allowing interested extensions inspect modify returned value 
additionally processing event extensions may arbitrarily initiate events interface slic different slic structure capturing return values needed 
example extension logging fork system calls write system call store log disk 
additional events generated extensions passed dispatcher extension chain 
extensions chain including kernel extension initiated events indistinguishable application initiated events executed privileges limitations user process 
extensions slic architecture enables extensions structured ways supporting tradeoff ease user level extension environment 
extension developed user level extensions loaded kernel 
extension development performance 
extensions loaded user level kernel shown combination types 
bounce extension receives events dispatcher hands user level extension acts kernel proxy extension order access dispatcher utility functions user level 
providing extensions interface user level kernel extensions easily developed tested user level inserted kernel performance 
cases extensions protected enforced applications 
extensions loaded user level encapsulated separate user level process 
architecture enables extension development proceed just standard user applications access user level libraries communication libraries state ofthe art development tools symbolic debuggers performance analysis utilities 
user level extensions protected malicious faulty applications virtue running separate address space enforced applications dispatcher remains kernel 
disadvantage approach invoking extension dispatcher requires costly context switches kernel boundary crossings 
organization similar employed micro kernels mach proc systems ufo differs supports extension stacking 
maximize performance development testing complete extensions loaded directly kernel invoked directly dispatcher procedure call 
events frequent organization considerably better performance user level approach 
kernel extensions protected malicious applications virtue loaded protected kernel region address space enforced applications dispatcher 
limitations approach kernel protected malicious faulty extension code ii support user level development tools 
simple upcall interface slic extensions models simultaneously 
performance critical sections extension located kernel functionality rarely requires access user level libraries located user level server 
slic implementation current implementation slic provides dispatchers system call signal interfaces solaris running sparc ultrasparc workstations minimize kernel modifications slic components dispatchers extensions support routines dynamically loaded kernel loadable device drivers 
solaris system calls routed table contains function pointers appropriate system call routines 
system call dispatcher intercepts system call events replacing entries table pointers dispatch function 
solaris signal delivery proceeds functions 
signal dispatcher intercepts signals binary patching functions run time 
enable binary patching changed line solaris source code kernel code writable slic dispatchers possible accomplish source code changes manipulating memory management hardware directly slic installed 
current implementation catches events kernel machine level 
system calls example caught table execution trap instruction 
approaches conceptually similar intercepting events kernel leverages significant amount machine specific code considerably simplifies prototype 
slic prototype implemented solaris principles underlying slic generally applicable believe slic easily ported unix operating systems 
shadow structures slic dispatchers extensions need way record state persists event invocations 
instance system call dispatcher needs keep track processes marked tracing 
appropriate place store process table thread structures operating systems size organization structures compiled system utilities kernel modules 
minimize modifications operating system implement shadow structures processes threads store state slic dispatchers extensions 
na approach implementing shadow structures modify process creation cleanup routines include call manage shadow structures 
slic uses interposition maintain shadow structures kernel modifications 
shadow structures created demand dispatcher extension attempts access shadow structure 
initialization routines allocate space shadow structure initialize pointer underlying kernel structures 
remove shadow process structures slic interposes wait system calls detect process death 
unix processes waited init process 
observing return values wait system calls slic determines processes exited removes corresponding shadow structure 
similarly thread shadow structures deleted thr exit system call thread process exits 
system call buffers system calls transfer forms data pass value arguments pass address memory buffers 
inspecting modifying pass value arguments extension straightforward 
inspecting modifying memory buffers located application address space requires care 
window vulnerability time extension inspects modifies user level data buffer time underlying operating system executes system call 
threads application exploit window vulnerability alter buffer effectively circumventing security checks performed extension violating requirement extensions enforced applications 
example application may able circumvent access control list extension file system changing path name open system call window vulnerability 
prevent situation memory buffer inspected modified extension buffer protected modification application 
copying buffers kernel provides necessary protection introduces different problem 
system call execution unix kernels perform protection checks memory buffer accesses buffers located application address space 
checks performed kernel copyin routines normally necessary prevent malicious applications accessing sensitive kernel data 
buffer copied kernel extension kernel security checks fail underlying kernel routines attempt copy data disallowing access buffer 
solution problem apply interposition 
slic maintains thread list valid kernel extension buffers interposes copyin routines order permit access buffers appropriate 
extension allocates kernel buffer thread slic adds address length allocated region thread valid list 
copyin routines invoked interposed code checks target address thread valid list 
address valid extension buffer original copyin routines kernel bcopy routine invoked copy data final location 
address valid extension buffer control passed original copy routine performs normal protection checks 
note process introduces extra copy data buffers buffers copied kernel extensions copied underlying kernel routines 
eliminating extra copy impractical numerous kernel routines expect buffers copied stack frames allocated extension invoked 
microbenchmarks measure overhead imposed slic system calls signals ran microbenchmarks mhz ultrasparc running solaris 
noted benchmark timings averaged runs 
microbenchmark performs getpid system call solaris essentially null system call 
microbenchmark measures raw overhead system call dispatcher invoke modified copy routines buffers involved 
overhead resulting copy routines second microbenchmark performs system call involves memory copy bytes 
kill microbenchmark measures overhead getpid microbenchmark performance varying number extensions 
time unmodified system sec 
error bars indicate standard deviation average 
signal dispatcher 
involves single process sending signal 
single process avoid context switches maximizing effect overhead 
longer run time results benchmark averaged runs 
tested microbenchmarks various configurations slic unmodified system system slic dispatchers extensions installed system slic dispatchers multiple extensions installed 
results getpid benchmark varying number extensions 
incremental cost adding new extension statistically similar benchmarks 
table presents time overhead cost interposition benchmarks time invoke user level extension 
base overhead slic dispatchers approximately sec system calls sec signals 
incremental cost loading additional extensions approximately sec dispatchers 
extensions measurements null extensions inspect events arguments event return values 
inspecting return values extension consumes additional stack frames sparc register windows consumed extension awaiting return value second consumed dispatcher invoked extension 
consequently inspecting return values increases extension cost sec sec 
average cost standard procedure call spills register window platform approximately sec 
reasons overhead signal dispatcher higher system call dis getpid kill time time time unmodified system slic extensions slic null extension slic user level extension table microbenchmark performance slic 
benchmark table shows average elapsed run time microseconds standard deviation runs 
getpid tests run system call dispatcher loaded kill test run signal dispatcher loaded 
user level extension results averaged runs 

signal interface complicated system call interface 
system call events calling thread system call number system call arguments signal interface calling thread signal number target process optional target thread 
shadow structure process thread determined extension processing proceed consequently shadow structure lookups signal interface system call interface 
second difference intercepting signal events requires calling thread pay interposition costs 
specifically solaris routines perform signal queueing side effects slic extensions may need leverage routines call order signal processing 
routines kernel invoke directly requiring slic interpose ensure signals seen extensions 
code paths kernel invoke consequently experience interposition overhead twice 
extensions demonstrate functionality performance slic implemented prototypes variety extensions security patch cert advisory encryption file system restricted execution environment 
slic responding cert advisory required disabling awaiting patch encryption file system restricted execution environment extensions required substantial kernel source code modification achieve functionality performance 
slic adding features existing kernel require ad hoc changes providing general solution leveraged extensions 
cert advisory extension computer emergency response team cert regularly provides internet community information regarding system security problems 
possible advisories include information resolve reported problem 
due lack extensibility existing systems frequently advice completely disable insecure feature 
slic advisories accompanied small extensions resolve problems requiring changes kernel source code 
operating system vendors respond advisories supplying patches patches take weeks available 
demonstrate patching security hole manner implemented extension patch security hole discovered solaris allowed unprivileged users truncate arbitrary files 
utility creates local lock file control access shared files 
creating symbolic link lock file location malicious users cause arbitrary files truncated lock file created 
line extension monitors file operations preventing symbolic links created lock location 
slic corrects security problem maintaining continued 
encryption file system distributed file system maintaining file privacy primary concern 
networked environment central file server traditional unix file protections easily circumvented monitoring network traffic 
protect sensitive files users may encryption tools pgp 
stand encryption tools libraries time consuming cumbersome easily integrated existing applications 
effective method ensuring file security support file encryption directly file system transparently encrypting file writes decrypting file reads communicating server 
rewriting file systems support encryption easier approach implement single encryption extension interposes file traffic 
implemented simple extension demonstrate feasibility file system encryption slic 
extension implements trivial exclusive encryption algorithm similar test vino 
prototype extension watches open creat system calls files particular suffix records process identifier file descriptor returned application 
subsequent read write system calls file descriptors extension applies byte wise xor data 
key management encryption algorithms orthogonal demonstration interposition provides simple powerful means transforming file system data 
restricted execution environment unix processes run user access resources granted user 
cases user fully trust program run 
example programs downloaded untrusted sources may trojan horses designed steal destroy information 
addition cases user trusts program data processed case web browser helper applications web browsers display various data formats 
input data potentially exploit bugs helper applications insert viruses system 
tracing facility standard solaris proc file system method construct restricted execution environment 
potentially insecure system calls captured selectively denied altered 
proc approach suffers primary shortcomings 
intercepting system calls proc expensive requiring context switches base system call overhead 
especially problematic system call intensive applications 
second systems proc properly handle system call buffer problem described section 
proc enable extension inspect system call buffer data multi may buffer extension validation buffer kernel buffer effectively subverting security system 
slic implemented restricted execution environment extension limitations 
extension modified version janus system provides user configurable security environment 
example applications subset read write execute access number directory subtrees 
ability fork perform variety system calls disabled 
attempts application perform restricted operation results extension returning error 
extension monitors subset system calls necessary maintain security guarantees minimizing overhead 
traced applications invoke restricted system calls extension checks arguments call determines call allowed denied 
restricted environment benchmarking denies system calls outright chown performs security checks checking path file access permissions additional system calls rmdir 
performance evaluate impact extensions system performance ran extensions benchmarks modified andrew benchmark tex compilation page mb document gcc compilation emacs support windows 
modified andrew benchmark consists multiple phases create directory subtrees copy files search file attributes find search files text string grep compile files 
benchmark fits entirely file cache modern systems longer useful measuring file system performance benchmark useful exposing overhead imposed slic 
benchmarks chosen representative document processing compilation workloads 
measurements run mhz ultra sparc running solaris benchmark data files placed memory mounted tmp file system 
table reports relevant statistics benchmark 
table presents results running benchmarks extension extensions simultaneously 
cert extension catch system calls issued benchmarks indicated table effectively acts null extension tests consequently overhead depicted table benchmarks running cert exclusively due slic dispatchers infrastructure 
anomalies table worthy note mab gcc benchmarks appears run faster extensions loaded just encrypt extension loaded gcc benchmark appears run faster slic loaded baseline system 
inspection standard de total system calls caught procs system calls cert encrypt ree mab tex gcc table benchmark characterization 
benchmark table presents total number processes created run total number system calls issued processes number percent system calls caught extension 
mab modified andrew benchmark ree restricted execution environment 
mab tex gcc time time time baseline slic extensions cert encrypt ree cert encrypt ree table benchmark performance sample extensions 
baseline represents machine slic dispatchers extensions loaded 
slic extensions represents dispatchers loaded extensions row measures effect slic interposition overhead 
rows labeled cert encrypt ree benchmark elapsed times single extension loaded 
line shows benchmark performance extensions interposing simultaneously 
benchmark table shows average elapsed run time seconds standard deviation runs percent slowdown 
cases reveals anomalies standard deviation mean experimental variance 
slic imposes certain amount overhead applications line table illustrates overhead experienced benchmarks due slic dispatcher infrastructure cost paid extension overhead small workloads 
interposition evaluation section describes experiences implementing slic presents number general principles developing interfaces conducive interposition 
slic designed existing operating systems number improvements systems interposition friendly 
drawn lessons implementations system call signal dispatchers solaris preliminary analyses virtual memory mechanism solaris process scheduler interface freebsd system call interface linux 
problems encountered divided categories asymmetric trust mechanisms system call interface implicit event information interfaces interposed incomplete decomposition system miscellaneous implementation issues 
asymmetric trust mechanisms solution adopted current prototype correctly handle system call buffers see section introduces second copy data buffers securely examined extension 
second copy fundamental interposition arises idiosyncrasies solaris system call routines 
solaris unix systems system call buffers copied kernel 
copies necessary interfaces system call interface asymmetry trust applications trust kernel kernel trust applications 
extensions interpose interfaces viewed kernel part untrusted user application 
interfaces symmetry trust need copy data buffers assumed threads trusted domain maliciously modify buffers subvert system 
consequently ideal interface interposition symmetry trust 
system call mean interposing events data buffer addresses validated buffers copied kernel 
solaris impractical copy routine invocations scattered system call handler routines 
ideal interposition perform required security checks copies separate routines invoking system call handlers 
approach eliminate unnecessary second copies remove need slic interpose kernel copy routines 
implicit event information interfaces today operating systems rely implicit information information passed directly argument event stored global data structures 
example system call process identifier application passed system call handler 
similarly return value system call returned explicitly normal calling conventions stored kernel process structure 
credentials determining process right open file send signal stored process structure 
accessing implicit information requires understanding complicated kernel structures kernel locking conventions 
minimize dependency extensions particular version operating system slic dispatchers provide extensions simple utility functions access variety implicit event information hiding details kernel data structures locking conventions 
unfortunately providing functions dispatchers increases dependency dispatchers particular version operating system 
interposition friendly interface implicit event information readily accessible event raised enabling slic easily ported new operating system versions 
implicit event information limits functionality extensions case implicit credentials 
extensions modify event credentials extensions restricted rights calling thread 
example extension write files owned root invoked root process 
na approach circumvent problem enable extensions modify process credentials stored global data structures duration intercepted event 
multithreading environment threads running concurrently may access modified credentials producing unpredictable results 
including credentials explicit parameters event enables extensions modify credentials necessary 
ioctl system call poses different problem interposition 
originally designed way manage arbitrary devices ioctl system calls variable number parameters nearly may arbitrary memory buffers may turn contain pointers memory buffers 
meaning arguments structure buffer defined particular device driver 
extension know advance handle arguments ioctl call 
problematic extensions system call logging security extensions may need understand arguments ioctl 
possible derive information device application interactions interposing copyin routines general interpretation ioctl semantics difficult 
events run time determined semantics conducive interposition 
separation policy mechanism reduce dependencies particular hardware platform operating system version extensions interpose system policies leveraging system mechanisms 
clean separation policy mechanism compiled kernel critical 
principle decomposition violated today operating systems 
experimenting extending scheduler interface freebsd single scheduler routine cpu switch implements policy selecting process run actual context switch mechanism 
enabling interposition policy leveraging existing mechanism required separating policy mechanism routines creating procedural interface interposed 
variation lack separation occurs linux routines accessing system call data buffers 
routines inlined compile time making interposition run time extremely difficult 
interposing copy routines requires modifying linux source disable inlining copy routines creating procedural interface interposed albeit small cost performance 
miscellaneous issues method binary patching intercept procedural invocations simple implement requires kernel code writable 
unfortunately solaris loaded kernel code read preventing binary patching 
modifying single line solaris source able kernel code writable 
managing shadow structures processes threads complicates slic increases kernel memory consumption 
adding hook kernel process thread structures eliminate problems 
related considerable amount explored novel kernel designs extensible operating systems :10.1.1.100.6047
systems spin vino closest concept 
offer extensibility interposition number kernel interfaces explicitly crafted interfaces extensibility 
spin vino aggressively focus ensuring kernel protection untrusted extensions spin type safe language vino software fault isolation kernel transactions :10.1.1.142.4909
contrast slic assumes trusted extensions focuses evaluation technique interposition suitability legacy operating systems 
interposition agents demonstrated usefulness constructing extensions terms highlevel abstractions interface path names low level events crossing interface open 
interposition agents system call redirection facility mach bounces system calls extensions linked application address space 
consequently extensions protected enforced applications implement security extensions share data applications 
additionally multiple protection boundary crossings limit performance system 
slic enables high performance interposition enforced protected applications enabling significantly larger class extensions 
principle toolkit ported slic simplifying process extension development 
cola enables interposition system call interface modification operating system kernel 
operates interposition library level consequently suffers security drawbacks mach interposition technology described 
protected shared libraries psl enables extensions securely loaded application address space user programs access modify extension code data 
psl provide mechanism enforcing extensions applications slic 
psl primarily intended adding new interfaces system combined interposition mechanisms slic enable modification existing interfaces 
psl protection technique relies thread segment protections supported ibm rs architecture principles slic generally applicable variety operating system platforms 
disco fluke virtual machine monitors strategies similar slic different purposes 
disco uses interposition binary rewriting ease implementation operating systems new architectures adding extensibility existing operating systems slic 
fluke uses interposition extensibility relying heavy decomposition services nested process domains adding extensibility existing kernel 
interposition enables extension stacking mechanism guarantee extensions compatible 
extension combinations may impair performance types data efficient execute data compression extension data encryption extension may impair correctness extension needs inspect magic number head executables may run incorrectly invoked encryption extension 
prior experiences conflicts ms dos terminate stay resident tsr utilities macintosh toolkit extensions indicate method identifying managing conflicts incompatible extensions needed 
examined mechanism making commodity operating systems extensible 
shown interposition suitable number useful extensions prototype system slic enables operating system extensibility interposition solaris minimal kernel source modifications 
slic demonstrates extending existing operating system done manner protected applications enforced uncooperative applications efficient combining development testing advantages user level extensions performance kernel extensions 
examined problems transparently extending operating system functionality asymmetric trust system call interface implicit event information 
drawing experiences problems number lessons operating systems designers provide interfaces conducive interposition 
foremost imperative maintain clear procedural barriers operating system policy mechanism 
additionally reduce effort necessary implementing interposition mechanism interfaces explicit expose information related events 
believe techniques described provide substantial benefit users existing operating systems enabling viable industry developing deploying operating system extensions 
resulting competition stimulate innovation increase rate technology transfer operating systems research production systems 
availability current status source code available cs berkeley edu slic 
accetta baron bolosky golub rashid tevanian young 
mach new kernel foundation unix development 
proceedings usenix summer conference pages june 
albert alexandrov klaus schauser chris 
extending operating system user level ufo global file system 
usenix editor proceedings usenix conference pages january 
alan cox dwarkadas peter keleher lu yu willy zwaenepoel 
treadmarks shared memory computing networks workstations 
ieee computer february 
banerji john tracey david cohn 
protected shared libraries new approach modularity sharing 
proceedings usenix technical conference pages january 
bershad savage sirer pardyak fiuczynski becker chambers eggers 
extensibility safety performance spin operating system 
proceedings th acm symposium operating systems principles december 
brian bershad thomas anderson edward lazowska henry levy 
lightweight remote procedure calls 
acm transactions computer systems pages february 
mic bowman peter danzig darren hardy udi manber michael schwartz :10.1.1.21.1842
harvest information discovery access system 
proceedings second international world wide web conference pages october 
edouard bugnion scott devine mendel rosenblum 
disco running commodity operating systems scalable multiprocessors 
proceedings th acm symposium operating systems principles pages october 
david clark 
structuring systems upcalls 
proceedings th acm symposium operating systems principles pages december 
chaos computer club 
ccc microsoft security alert 
berlin ccc de html march 
apple computers 
inside macintosh macintosh toolbox essentials 
addison wesley 
fred douglis john ousterhout 
transparent process migration design alternatives sprite implementation 
software practice experience august 
andrea dusseau arpaci david culler 
effective distributed scheduling parallel workloads 
proceedings acm rics conference 
engler kaashoek jr toole :10.1.1.100.6047
exokernel operating system architecture application level resource management 
proceedings th acm operating systems principles december 
bryan ford mike hibler jay lepreau patrick back steven 
microkernels meet recursive virtual machines 
proceedings nd usenix symposium operating systems design implementation october 
simon garfinkel 
pgp pretty privacy 
reilly associates sebastopol ca edition december 
ian goldberg david wagner randy thomas eric brewer 
secure environment untrusted helper applications 
proceedings sixth usenix security symposium july 
wilson hsieh marc fiuczynski charles garrett stefan savage david becker brian bershad 
language support extensible operating systems 
proceedings workshop compiler support system software february 
ibm virtual machine facility planning guide :10.1.1.100.6047
technical report gc ibm 
michael jones 
interposition agents transparently interposing user code system interface 
proceedings th acm symposium operating systems principles pages december 
khalidi michael nelson 
extensible file systems spring 
proceedings th acm symposium operating systems principles pages december 
gregor kiczales jim des rivi res daniel bobrow 
art metaobject protocol 
mit press cambridge ma 
steven kleiman :10.1.1.113.4370
vnodes architecture multiple file system types sun unix 
proceedings summer pages 
eduardo balachander krishnamurthy 
cola customized overlaying 
proceedings usenix winter conference january 
kai li paul hudak :10.1.1.14.3607
memory coherence shared virtual memory systems 
acm transactions computer systems november 
george necula peter lee 
safe kernel extensions run time checking 
proceedings nd usenix symposium operating systems design implementation pages october 
jason monica lam 
design implementation evaluation smart scheduler multimedia applications 
proceedings th acm symposium operating systems principles pages october 
john ousterhout 
aren operating systems getting faster fast hardware 
proceedings summer pages june 
aw pardyak brian bershad 
dynamic binding extensible system 
proceedings nd usenix symposium operating systems design implementation pages october 
dennis ritchie ken thompson 
unix time sharing system 
communications acm 
sandberg goldberg steven kleiman walsh lyon :10.1.1.14.473
design implementation sun network filesystem 
proceedings summer usenix technical conference pages 
sun microsystems june 
andrew schulman raymond jim kyle time paterson david ralf brown 
undocumented dos 
addison wesley 
margo seltzer endo small keith smith 
dealing disaster surviving misbehaved kernel extensions 
proceedings nd usenix symposium operating systems design implementation october 
margo seltzer endo christopher small keith smith 
issues extensible operating systems 
technical report tr harvard university 
emin sirer stefan savage aw pardyak greg defouw mary ann brian bershad 
writing operating system modula 
proceedings workshop compiler support system software february 
christopher small margo seltzer 
vino integrated platform operating system database research 
technical report tr harvard october 
david steere james kistler satyanarayanan 
efficient user level file cache management sun vnode interface 
proceedings usenix summer conference pages june 
computer emergency response team 
ghostscript vulnerability 
cert advisory ca cert august 
computer emergency 
vulnerability 
cert advisory ca cert august 
computer emergency 
vulnerability solaris 
cert advisory ca cert august 
computer emergency 
vulnerability 
cert advisory ca cert october 
computer emergency 
vulnerability 
cert advisory ca cert january 
marvin theimer david cheriton 
preemptable remote execution facilities system 
proceedings th acm symposium operating systems principles pages december 
thorsten von eicken david culler seth goldstein klaus erik schauser 
active messages mechanism integrated communication computation 
proc 
th int symposium computer architecture may 
robert wahbe steven lucco thomas anderson susan graham :10.1.1.142.4909
efficient software fault isolation 
proceedings th acm symposium operating systems principles pages december 
carl waldspurger william weihl 
lottery scheduling flexible proportional share resource management 
proceedings st usenix symposium operating systems design implementation pages 
nick :10.1.1.142.4909
activex hacking tool 
www news com news item html february 
wulf cohen jones levin pierson pollack 
hydra kernel multiprocessor operating system 
communications acm june 
young tevanian rashid golub chew bolosky black baron 
duality memory communication implementation multiprocessor operating system 
proceedingsof th acm operating systems principles pages november 
pascal zachary 

race create windows nt generation microsoft 
macmillan 
zhou wang zheng pierre delisle 
utopia load sharing facility large computing systems 
technical report csri university toronto 
