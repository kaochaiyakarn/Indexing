scalable semantic indexing framework peer peer information retrieval yan chen computer science dept northwestern university evanston il exponential growth data demands scalable adaptable infrastructures indexing searching huge amount data sources high accuracy efficiency 
existing centralized search engines scalable suffer single point 
index construction partitions document vectors randomly statically making difficult tradeoff search efficiency accuracy 
position propose peer peer ir framework termed pir leverages novel phase distributed semantic indexing top distributed hash tables dht 
distributed semantic clustering pir leads semantic locality index placement indices similar documents placed near 
semantic locality enables smoother tradeoff search accuracy efficiency incremental adaptation document semantics changes 
addition pir allows sophisticated retrieval techniques query refinement feedback personalized search better usability 
prototype pir currently development applied general web retrieval domain specific applications distributed electric medical records system 

years seen explosive growth volume information 
study university california berkeley worldwide production original content stored digitally standard compression methods terabyte year books terabytes year newspapers terabyte year periodicals terabytes year office documents 
exponential growth data information poses challenges information management major challenge development scalable infrastructures indexing searching huge amount data sources high accuracy efficiency 
current web search engines quite useful helping people find information web 
unfortunately centralized architecture inherently unscalable 
copyright held author owner 
xu yahoo avenue sunnyvale ca zhai dept computer science university illinois urbana champaign urbana il current search engines conceptually treat web giant collection documents index centralized manner 
order ensure freshness index periodically crawl web update index 
updating difficult resource consuming information manage eventually current centralized search model break due 
problem existing search engines suffer single point failure critical centralized components fail affect availability system significantly cause breakdown 
way overcome deficiencies existing search engine architecture distribute search nodes network 
peer peer information retrieval new search paradigm aims exploiting high speed networks perform search individual node network leading potentially scalable search infrastructure 
existing works information retrieval approaches support quick query execution especially short queries :10.1.1.12.3396:10.1.1.10.9602
inverted index support simple retrieval tasks hard support sophisticated retrieval algorithms may require efficient access terms document 
distributed environment inverted index approach replicate document information places 
consequently results retrieved multiple keywords need intersected consuming large amount network bandwidth :10.1.1.12.3396
contrast term indexing document indexing support complex retrieval tasks information document available 
psearch leverages document indexing emerging distributed hash tables dht information retrieval network 
shortcomings lack semantic locality leads degradation search efficiency accuracy unscalable index generation static index generation requires complete redo adding documents new concepts 
position propose scalable semantic indexing framework information retrieval termed pir regarded extension psearch address abovementioned shortcomings 
pir framework extends psearch aspects semantic locality major extension psearch pir novel phase distributed semantic indexing method cluster documents similar semantics group store nearby nodes grid system refer semantic locality 
contrast psearch partitions document vectors randomly 
result query answered searching small number nodes improving query accuracy efficiency 
flexible tradeoff search accuracy efficiency phase distributed indexing enables tune semantic clusters various sizes document density deployment density dht smooth tradeoff search accuracy versus search efficiency system overhead necessary managing huge amount information 
support sophisticated retrieval methods due possibility local scoring working set documents pir allows sophisticated retrieval techniques feedback personalized search computed efficiently achieves high retrieval accuracy 
adaptation document dynamics phase indexing enables pir incorporate new documents concepts incrementally efficiently sacrificing search performance 
rest describe pir architecture section 
discuss component architecture section section 
survey related section discuss current status prototype development section conclude section 
architecture illustrates architecture pir 
pir resides distributed hash table dht network 
applications medical record federation document search built top illustrated left part 
right part picture shows pir major parts document indexing shown top querying shown bottom 
document indexing part responsible converting source documents efficient data structures query matched documents quickly 
common practice information retrieval extract features words represent content document 
pir provides open architecture different feature extraction algorithms similarity comparison algorithms plugged 
matter feature algorithm extracted features typically form vector high dimensional space 
major challenge indexing store vectors looked quickly execute query 
querying part match query feature vectors documents score documents 
pir provides open slot plugging query refinement components take advantage user feedback improve retrieval accuracy 
discuss major parts detail 
introduce dht sketch stage document indexing query processing 
distributed hash tables dht term dht catch set schemes sharing certain design goals 
name implies dht provides hash table abstraction multiple distributed nodes distributed nodes form pir system 
node store indices pointing documents index identified unique key called index locator 
dht systems provide basic interfaces insertion put interface insertion put key object causes dht route node node identifier closest 
retrieval get interface retrieval object get key causes dht obtain node node identifier closest 
objects keys pir system discussed section 
dhts provide strong theoretical bounds number hops required route key request correct destination number maintenance messages required manage arrival departure node network 
properties help provide scalability routing indexing location pir system 
addition dht provides nice properties distributed systems fault tolerance robustness dos attack resilience 
contrast early routing unstructured heuristic schemes gnutella kazaa provides guarantees high routing costs fail locate key available network 
addition having attractive formal properties dhts increasingly practical serious 
received intense engineering scrutiny significant effort expended theoretical designs practical robust 
stage document indexing pir indexes documents steps 
step entire document corpus clustered clusters appropriate sizes density 
accomplished top bottom methods 
clusters disjoint overlapping 
section describe clustering accomplished distributed incremental fashion concept indexing 
cluster correspond concept 
unique concept vector produced document 
second step clusters mapped distributed hash table dht network way semantically similar documents placed close network 
discussed dht put get operations index insertion retrieval 
pir system index location document uniquely identify document ideally concept vector document 
dimension concept vector usually larger dht fit concept vector key dht 
solve dimension mismatch problem randomly dividing concepts chunks psearch group aforementioned clusters related concepts large probability fall group 
example concepts manufacturer insurance car reviews may fall group automobile fall different group computer network may contain concepts security protocol application 
limit size group larger size dht dimensions 
project concept vector subspace defined concept group 
call resulting vector index locators dht keys assign concepts group dimension dht 
take index locator automobile concept group example automobile may assigned dimension manufacturer insurance may assigned dimension respectively 
documents similar contents placed close dht similar index locators 
document multiple index locators may involve multiple groups concepts insert index groups 
illustrates basic idea mapping applications pir dht system internet xml doc text doc query document space animals cars feature extraction term vector index locator generation structure aware feature vector concept vector construction search dht index locator construction layered model architecture pir system 
document clustering placement 
multiple clusters dht overlay document placement content similarity 
document clusters animals cars mapped dht 
concepts overlap animals cars clusters jaguar 
querying querying user contact node dht overlay 
node responsible projecting query vector concepts cluster produce number index locators 
query vector typically involves limited number clusters expect index locators case just cluster 
index locator query vector pair routed dht parallel index locator dht key 
reaching destination query vector original document vectors perform relevance ranking local retrieval process expand neighboring dht nodes relevant results identified 
illustrated query process 
note projection original query vector index locators identifies clusters potentially matching documents 
routing local search process identify matching results query clusters 
example query terms jaguar speed mapped concept groups animal name velocity car name velocity 
projection concept groups produces index locators 
projection phase effect identifies clusters cars animals potentially matching documents 
index locators searching inside corresponding document clusters parallel respectively 
query jaguar speed animal name velocity jaguar speed car name velocity jaguar speed query refinement index placement dht query processing 
user feedback results back user summary novel step distributed indexing framework provides pir properties 

index placement semantic locality 
locality significantly improve retrieval accuracy efficiency 
example allows match related distinct terms 

tunable framework flexibility document corpus divided clusters different sizes density 
furthermore space dht store cluster shrunk enlarged depending density cluster 
features provide pir smoothly tradeoff retrieval accuracy efficiency including storage overhead 

incremental adaptation document concept dynamics step procedure allows change dimensionality concept vectors modifying index locators 
determined dht tends static 
property important efficiently adding removing documents incrementally 
degenerated case dimensional dht map term concept different point dht exactly typical search engine inverted index 
alternatively select similarity preserving hash functions sph space filling curves random permutation function broder eliminate dependence geometry underlying logical abstraction dht 
note pir architecture assumptions underlying retrieval models potentially support different retrieval models 
documents represented vectors 
euclidean distances reasonably accurate capturing document topic similarity 
quite reasonable 
existing retrieval formulas vector representation documents 
true traditional vector space model true probabilistic models document represented word distribution stored weight vector 
known effective retrieval formulas non euclidean distances appropriate weighting normalization euclidean distances reasonably accurate 
euclidean distances prune non promising documents accuracy indirectly affect final retrieval results 
describe component pir system details 

feature extraction feature extraction module responsible generating set features values document 
feature values form feature vector serves representation document purpose matching query document 
simplest case features just words document feature values frequency counts words document 
simple representation called bag word representation basis current retrieval algorithms 
advanced approaches enrich word representation extracting multi word phrases 
features extracted normally serve directly indexing units matching features extracted query extracted documents 
number features words usually extremely large direct indexing features inefficient match features distributed environment 
important advantage proposed pir framework precisely impose structures feature space manage indices high dimensional space efficiently sacrificing accuracy 
specifically pir impose constraints choice features assignment values 
sufficiently general support kind feature vector representation documents support retrieval algorithm long algorithm kind feature vector representation 
example possible model xml document accurately distinguishing features extracted different parts assign weights heuristics 
useful heuristics documents html xml terms appear titles anchors usually carry weights positions 
ii html documents anchor texts usually describe referred documents current document 
iii terms phrases section headers usually important terms phrases lower level headings document body 
iv terms phrases sentences appear paragraphs usually carry weights 
appearing related background sections refer background may necessarily main focus 
html documents frames terms appear different frames usually carry different weights 
heuristics easily supported proposed pir framework 
heterogeneous documents represented xml documents pir great potential support algorithms deal heterogeneous documents 
web search algorithms may exploit hyperlinks documents improve retrieval accuracy 
known algorithm pagerank algorithm google search en 
algorithms typically implemented separately content scoring part focus pir 
easily add scoring methods top pir 
scalability scoring algorithms may interesting research topic outside scope 

distributed semantic indexing feature vector extracted section discuss construct concept vectors index locators place indices dht 
concept vector construction indexing documents directly keywords standard practice information retrieval clearly limits words similar meaning different forms automobile car match decreases recall 
word multiple meanings jaguar query may retrieve noisy documents decreases precision 
indexing keywords involves extremely high dimensional space desirable perspective scaling retrieval terms space time 
idea pir construct concept space lower dimension raw vocabulary map documents low dimension space 
latent semantic indexing lsi applies singular value decomposition svd term document matrix extract main components 
unfortunately svd computationally expensive clearly scalable extremely large number documents 
furthermore adding removing documents hard incrementally update svd results 
probabilistic approaches improve efficiency lsi computationally expensive scale 
plan efficient concept indexing approach constructing concept space 
basic idea group documents clusters centroid cluster corresponds concept 
concepts index documents follows 
document similarity feature vector concept cosine value defines weight concept concept vector composed weights concepts 
flowchart concept vector construction shown 
document clustering propose modified means clustering method 
means clustering method iteratively improves hypothesized partition documents time generate complete clustering results desirable property clustering large number documents 
iteration involves kn document comparisons number clusters number documents opposed document comparisons regular agglomerative hierarchical clustering method 
index locator construction dimensionality concept vectors significantly lower feature term vectors higher index locators 
reduce dimensionality divide concept vector multiple chunks chunk size dimensionality underlying dht 
concept vector multiple index locators 
randomly divide concept vector index locators related concepts probably different chunks 
consequently set documents retrieval set concepts concepts orthogonal concept groups defining index locators extraction clustering concepts define set index locators 
document need indices indices related documents tend scattered causing inefficiency inaccuracy querying 
propose cluster concepts semantically coherent groups 
group consists concepts closely related computer sciences computer engineering 
concept group defines index locator size dimensionality dht 
grouping executed tree root node hierarchical clustering concept vectors 
root node disseminates concepts represented feature vector cluster centroid index rules represented concept clusters peer nodes application level multicast 
optional phases steps described followed optional concept phase 
phase reduce dimensionality concept space improve quality index locators 
basic idea optional phase find set orthogonal axes project vector lower dimensional space 
compute axes distributed fashion peer plan apply fastmap algorithm high efficiency effectiveness 
find mutually orthogonal axes reduced dimensionality fastmap iteratively chooses objects called pivot objects form axis 
axis fastmap projects objects axis computing new coordinates 
conceptually computes remaining distance matrix projections 
computation needed objects subsequent steps 
algorithm iterates steps find axes 
index placement dht store document indices system node computes concept vector corresponding index locators assigned document 
index locator document di norm length vector certain threshold put index di feature vector peer node dht address vector matches best index locator 
scheme particularly appealing index locators generated concept grouping approach reasons 
number document pointers reduced 
group related concepts index locator document substantial weights small number index locators 
need deploy indices index locators 
semantic locality achieved 
similar related documents similar index locators placed nearby dht nodes 
instance document hybrid car substantial weights concepts car automobile energy power 
concepts related may grouped index locator 
need place index dht node address decided index locator 

query processing refinement query processing semantic routing pir accept keywords sample document case query example query input 
cases extract features keyword query example document way similar extract features documents collections 
route query feature vector clusters contain documents similar query search promising clusters 
discuss query routing searching clusters detail 
query routing obtain query feature vector follow procedure route query promising clusters documents project query feature vector concept space obtain possibly multiple query index locators techniques discussed previous section 
step mainly involves computing distances query cluster centroid 
index locator vi query system routes query overlay network vi dht key 
destination node answers query looking local documents propagating query neighboring nodes 
projection process query correlate keywords query reduce semantic ambiguity 
compared psearch query processing procedure provides better query efficiency accuracy reasons 
system partition concepts produced concept indexing optional orthogonalization reduction groups 
related concepts query expected belong single group query needs single index locator 
significantly reduce number query messages 
second place indices semantic distances documents 
query routing process hop path destination documents deployed indices semantically relevant query 
refer property semantic routing find areas overlay indices related similar documents quickly 
desired documents efficiently retrieved simply checking destination node direct neighbors 
third semantic locality query refinement section may achieved hops destination node query dht 
note semantic routing requires conditions placement document indices semantic locality grouping related concepts wildcard search term query vector range regular expression 
interestingly wildcard search achieved efficiently hypercube geometry dht flooding 
hypercube geometry treats concepts equally structures trees require matching concepts predetermined order 
important research direction investigate enable wildcard search types dht 
remaining underlying dht building pir 
partitions dimensional cartesian space zones assigns zone node 
nodes routing neighbors overlay zones overlap dimension abut 
object key point cartesian space object stored node zone contains point 
locating object reduced routing node hosts object 
routing translates traversing zone cartesian space 
searching clusters route query vector promising clusters search clusters documents generate ranked list documents order relevance query topic 
important advantage pir decouple searching clusters routing queries right clusters benefits computation highly parallelized query routing query parallel searching clusters query searching different clusters performed parallel cases 
retrieval methods different searching clusters routing queries searching clusters done parallel control size clusters afford complex retrieval methods searching clusters may directly affect retrieval results 
principle support retrieval methods including link scoring methods pagerank 
final scoring happens locally may consider precomputing link scores partitioning way similar partition indices 
query refinement query refinement important technique improving retrieval accuracy 
discuss architecture naturally support query refinement strategies 
standard technique query refinement feedback 
relevance feedback user asked judgments retrieval results exploited update query feature vector 
technique shown effective improving retrieval performance 
intuitively easy understand 
consider short ambiguous query jaguar returns documents cars documents animal 
user tell documents likes able extract terms positive examples distinguish positive examples negative ones add query query tuned retrieve documents car animal 
users willing judge documents may simply assume top ranked documents initial retrieval results relevant assume random sample documents collection non relevant 
called blind pseudo feedback shown effective improving retrieval accuracy general 
regardless form feedback system utilize feedback information modify query vector issue refined query 
process involves frequent access document vectors relatively sophisticated computation 
reason feedback techniques supported existing retrieval systems computation done efficiently 
pir support index access computation efficiently document index stored semantic locality feedback documents semantically related 
improve retrieval accuracy may refine query search context additional user information 
major limitation existing search engines retrieval decision generally solely query document collection information actual user search context largely ignored 
result different users may exactly query java search different information programming language coffee existing ir system return results different users 
highly desirable retrieval system incorporate user information search context retrieval decision process 
instance text query typically short rarely case user find needed information just query necessary formulate query order obtain better retrieval results 
general may sequence previous queries available exploit 
user receives retrieval results user may view documents provide extra information user likes 
previous queries documents viewed viewed treated search context current query search context exploited improve retrieval performance current query 
exploiting search context user information requires great deal computation 
pir framework computation performed different machines parallel especially put computations user machine 
example develop sophisticated user agent keeps track user search history perform query refinement agents 
agent re rank re organize search results better satisfy user information need 

adaptation dynamics entities pir change continuously including documents semantics nodes networks 
focus techniques handle document dynamics 
goal system self organizing evolving require little human intervention dynamic document insertions deletions updates 
documents keep changing concepts available existing concepts disappear 
dimensionality concept vectors change 
happens important goal keep existing index locator intact possible 
basic idea introduce new concept groups necessary periodically system rebuild index locators 
specifically set new documents emerge check contain new frequently terms new heavyweight terms concept vectors belong existing cluster existing semantic space 
new important terms belong existing clusters just index existing concept dimensions 
generate new concepts documents expand concept semantic space 
add index new concept belongs existing concept cluster size underlying dht add cluster available entry index locator 
generate new concept group new set index locators represent wait infrequent redo consolidate groups 
note cases need change indices index locations existing documents existing documents value zero new concept dimension default 
generate index locators new documents deploy indices dht 
multicast addition new concept addition new concept group new set index locators applicable nodes route queries avoid collisions multiple pir nodes small number nodes control new concept generation 
instance new documents bin appear detect new concept relating concept group terrorism 
dimensionality dht size terrorism concept group just add bin group dimension index locator 
corresponding index locators existing documents weight zero default dimension remain 
terrorism concept group full generate new concept group bin new set index locators 
note quality index locators gradually lose semantic locality 
number new concepts generated short period time smaller existing concepts locality degradation slow 
envision relatively infrequent process redo indexing improve quality indexing triggered detecting distortions 

related related numerous enumerate list related 
feature extraction feature extraction studied intensively information retrieval 
proposal flexible existing feature extraction methods represent document weight vector 
include dimensionality reduction methods lsi structure synopses xml document indexing methods 
distributed semantic indexing huge body building indexing structures conduct similarly search high dimensional space 
differs documents index pointers distributed search process conducted different peers ideas existing leveraged design efficient distributed search strategy ideas related mds karhunen loeve transform local dimensionality reduction fastmap 
distributed information retrieval related centralized retrieval interface assumed robust efficient proposed pir architecture 
proposed dynamic adaptation index studied previous 
query processing refinement query processing extensively studied 
main deficiency existing systems simple keyword matching support advanced relevance ranking algorithms 
refinement feedback query active research information retrieval received attention database community 
pir distributes document indices different nodes semantic locality effectively distribute extensive computation associated query refinement feedback tasks 

status currently developing prototype pir system evaluating text retrieval conference trec trec corpus large test set widely ir research 
includes documents news magazines total size gb 
furthermore plan deploy pir system planetlab testbed evaluating specific application domains 
web retrieval variable size subsets web data quantitatively evaluate scalability search efficiency search accuracy usability pir 
demonstrate smooth tradeoff search accuracy overhead pir adapt document concept dynamics 
effectiveness pir handling semi structured structured documents evaluated medical record application 
distributed electronic medical record systems collaborating radiology department northwestern university applying pir creating indexing searching distributed electronic medical records 
major problem exists virtue complexity health care environment single information system meet needs participants health care processes 
pir facilitates storage pointers distributed grid registry nodes facilitates retrieval object pointers heterogenous document formats 

summary position extend state art indexing method psearch propose pir distributed ir systems leverages emerging dht technologies 
main idea extension novel phase indexing method semantic clustering achieve semantic locality search efficiency search accuracy agility document concept dynamics 
pir potentially support query refinement feedback personalized search help improve usability 
sketched basic ideas pir research questions implement ideas remain open study 
process developing prototype retrieval system proposed architecture 
information available online scalability critical 
pir applied manage huge amount information flexible tradeoff search accuracy efficiency 
naturally general retrieval architecture pir different applications bioinformatics web search information data management problems 

xu 
scalable efficient range queries grid information services 
proc 
nd ieee international conference peer peer computing september 
broder charikar frieze mitzenmacher 
min wise independent permutations 
proc 
th annual acm symposium theory 
buckley 
automatic query expansion smart trec 
harman editor overview third text retrieval conference trec pages 
nist special publication 
callan 
distributed information retrieval 
croft editor advances information retrieval pages 
kluwer academic publishers 
chakrabarti mehrotra 
local dimensionality reduction new approach indexing high dimensional spaces 
proc 
vldb 
chakrabarti ortega mehrotra 
evaluating refined queries top retrieval systems 

chawathe ratnasamy breslau lanham shenker 
making gnutella systems scalable 
acm sigcomm 
chen quantifying network denial service location service case study 
proc 
international conf info 
comm 
security 
cohen fiat kaplan 
associative search peer peer networks harnessing latent semantics 
ieee infocom april 
cohen shenker 
replication strategies unstructured peer peer networks 
acm sigcomm 
cooper fast index semistructured data 
vldb 
crespo garc molina 
routing indices peer peer systems 
icdcs july 
acuna nguyen 
text content search retrieval ad hoc communities 
international workshop peer peer computing may 
deerwester indexing latent semantic analysis 
journal american society information science 
druschel rowstron 
pastry scalable distributed object location routing large scale peer peer systems 
submission acm sigcomm 
duda hart 
pattern classification scene analysis 
wiley new york 
evans 
design evaluation clarit trec system 
harman editor proceedings second text retrieval conference trec pages 
faloutsos 
lin 
fastmap fast algorithm indexing data mining visualization traditional multimedia datasets 
sigmod pages 
gaede gunther 
multidimensional access methods 
acm computing surveys 
gravano garc molina tomasic 
gloss text source discovery internet 
acm transactions database systems 
hofmann 
probabilistic latent semantic indexing 
proceedings acm sigir pages 
jin koudas li 
improving performance nearest neighbor searches histograms 
edbt 
karypis 
han 
concept indexing fast dimensionality reduction algorithm applications document retrieval categorization 
international conference information knowledge management cikm 
kruskal wish 
multidimensional scaling 
sage beverly hills ca 
lewis 
representation learning information retrieval 
technical report univ massachusetts 
li chang garcia molina wiederhold 
clustering approximate similarity search high dimensional spaces 
ieee transaction knowledge data engineering tkde 
li loo hellerstein kaashoek karger morris 
feasibility peer peer web indexing search 
iptps february 
li moon 
indexing querying xml data regular path expressions 
vldb journal pages 
lyman varian 
information 
retrieved www sims berkeley edu info oct 
ma shepherd nguyen 
document classification structure synopses 
proc 
australasian database conference database technologies pages 

manolescu 
feature extraction pattern information retrieval 
proc 
th pattern languages programming monticello il 
national electrical manufacturer association 
digital imaging communication medicine 

ortega chakrabarti mehrotra 
approach integrating query refinement sql 
extending database technology pages 
page brin motwani winograd 
pagerank citation ranking bringing order web 
technical report stanford digital library technologies project 
planetlab 
www planet lab org 
mcarthur nathan redmond 
industry developments models disruptive innovation ise computing storage 
idc february 
ratnasamy scalable content addressable network 
appear proceeding acm sigcomm 
salton buckley 
improving retrieval performance relevance feedback 
journal american society information science 
samet 
design analysis spatial data structures 
addison wesley june 
shi yang wang yu qu chen 
making peer peer keyword searching feasible multi level partitioning 
iptps 
sparck jones willett editors 
readings information retrieval 
morgan kaufmann publishers 
stoica chord scalable peer peer lookup service internet applications 
appear proceedings acm sigcomm 
tang dwarkadas 
hybrid global local indexing efficient peer peer information retrieval 
usenix acm symposium networked systems design implementation nsdi march 
tang xu dwarkadas 
peer peer information retrieval self organizing semantic overlay networks 
acm sigcomm 
xu croft 
query expansion local global document analysis 
proceedings sigir pages 
zhai lafferty 
model feedback kl divergence retrieval model 
tenth international conference information knowledge management cikm pages 
zhao tapestry resilient global scale overlay service deployment 
ieee journal selected areas communications 
