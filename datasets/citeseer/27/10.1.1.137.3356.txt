overview query optimization relational systems surajit chaudhuri microsoft research microsoft way redmond wa 
objective extensive query optimization early 
hard capture breadth depth large body short article 
decided focus primarily optimization sql queries relational database systems biased incomplete view field 
goal article comprehensive explain foundations samplings significant area 
apologize contributors area failed explicitly acknowledge due oversight lack space 
take liberty trading technical precision ease presentation 

relational query languages provide high level declarative interface access data stored relational databases 
time sql emerged standard relational query languages 
key components query evaluation component sql database system query optimizer query execution engine 
query execution engine implements set physical operators 
operator takes input data streams produces output data stream 
examples physical operators external sort sequential scan index scan join sort merge join 
refer operators physical operators necessarily tied relational operators 
simplest way think physical operators pieces code building blocks possible execution sql queries 
representation execution physical operator tree illustrated 
edges operator tree represent data flow physical operators 
terms physical operator tree execution plan simply plan interchangeably 
execution engine responsible execution plan results generating answers query 
capabilities query execution engine determine structure operator trees feasible 
refer reader overview query evaluation techniques 
microsoft com merge join sort sort index nested loop table scan table scan 
operator tree query optimizer responsible generating input execution engine 
takes parsed representation sql query input responsible generating efficient execution plan sql query space possible execution plans 
task optimizer nontrivial sql query large number possible operator trees algebraic representation query transformed logically equivalent algebraic representations join join join join algebraic representation may operator trees implement algebraic expression typically join algorithms supported database system 
furthermore throughput response times execution plans may widely different 
judicious choice execution optimizer critical importance 
query optimization viewed difficult search problem 
order solve problem need provide space plans search space 
index scan cost estimation technique cost may assigned plan search space 
intuitively estimation resources needed execution plan 
enumeration algorithm search execution space 
desirable optimizer search space includes plans low cost costing technique accurate enumeration algorithm efficient 
tasks nontrivial building optimizer enormous undertaking 
discussing system optimization framework remarkably elegant approach helped fuel subsequent optimization 
section discuss search space considered optimizers 
section provide forum presentation important algebraic transformations incorporated search space 
section address problem cost estimation 
section take topic enumerating search space 
completes discussion basic optimization framework 
section discuss developments query optimization 

example system optimizer system project significantly advanced state query optimization relational systems 
ideas incorporated commercial optimizers continue remarkably relevant 
subset important ideas context select project join spj queries 
class spj queries closely related encapsulates conjunctive queries widely studied database theory 
search space system optimizer context spj query consists operator trees correspond linear sequence join operations sequence join join join illustrated 
sequences logically equivalent associative commutative properties joins 
join operator nested loop sort merge implementation 
scan node index scan clustered index sequential scan 
predicates evaluated early possible 
cost model assigns estimated cost partial complete plan search space 
determines estimated size data stream output operator plan 
relies set statistics maintained relations indexes number data pages relation number pages index number distinct values column formulas estimate selectivity predicates project size output data stream operator node 
example size output join estimated product sizes relations applying joint selectivity applicable predicates 
formulas estimate cpu costs query execution operator 
formulas take account statistical properties input data streams existing access methods input data streams available order data stream data stream ordered cost sort merge join stream may significantly reduced 
addition checked output data stream order 
cost model uses compute associate information bottom fashion operators plan size data stream represented output operator node 
ordering tuples created sustained output data stream operator node 
estimated execution cost operator cumulative cost partial plan far 
join join join join join 
linear bushy join join enumeration algorithm system optimizer demonstrates important techniques dynamic programming interesting orders 
essence dynamic programming approach assumption cost model satisfies principle optimality 
specifically assumes order obtain optimal plan spj query consisting joins suffices consider optimal plans subexpressions consist joins extend plans additional join 
words suboptimal plans subexpressions called subqueries consisting joins need considered determining optimal plan accordingly dynamic programming enumeration views spj query set relations rn joined 
enumeration algorithm proceeds bottom 
th step algorithm produces optimal plans subqueries size obtain optimal plan subquery consisting relations consider possible ways constructing plan subquery extending plans constructed jth step 
example optimal plan obtained picking plan cheapest cost optimal plans join join join join 
rest plans may discarded 
dynamic programming approach significantly faster na approach plans plans need enumerated 
second important aspect system optimizer consideration interesting orders 
consider query represents join predicates assume cost plans subquery nested loop sort merge join respectively case considering plan consider plan joined sort merge 
note sort merge join result join sorted sorted order may significantly reduce cost join 
pruning plan represents join result sub optimality global plan 
problem arises result join ordering tuples output stream useful subsequent join 
nested loop join ordering 
query system identified ordering tuples potentially consequential execution plans query name interesting orders 
furthermore system optimizer plans compared represent expression interesting order 
idea interesting order generalized physical properties extensively modern optimizers 
intuitively physical property characteristic plan shared plans logical expression impact cost subsequent operations 
note system approach account physical properties demonstrates simple mechanism handle violation principle optimality necessarily arising physical properties 
despite elegance system approach framework easily extended incorporate logical transformations join ordering expand search space 
led development extensible optimization architectures 
cost optimization dynamic programming interesting orders strongly influenced subsequent developments optimization 

search space mentioned section search space optimization depends set algebraic transformations preserve equivalence set physical operators supported optimizer 
section discuss important algebraic transformations discovered 
noted transformations necessarily reduce cost applied cost manner enumeration algorithm ensure positive benefit 
optimizer may representations query lifecycle optimizing query 
initial representation parse tree query final representation operator tree 
intermediate representation logical operator trees called query trees captures algebraic expression 
example query tree 
nodes query trees annotated additional information 
systems calculus oriented representation analyzing structure query 
spj queries structure captured query graph nodes represent relations correlation variables labeled edges represent join predicates relations see 
conceptually simple representation falls short representing structure arbitrary sql statements number ways 
predicate graphs represent set join predicates represent algebraic operators union 
natural join operators asymmetric sensitive order evaluation 
representation capture fact sql statements may nested query blocks 
structure starburst system building block enhanced query graph able represent simple sql statement nesting single block query 
multi block queries represented set subgraphs edges subgraphs represent predicates quantifiers query blocks 
contrast exodus derivatives uniformly query trees operator trees phases optimization 
emp sal dept dept emp 
query graph dept mgr em commuting operators large important class transformations exploits commutativity operators 
section see examples transformations 
generalizing join sequencing systems sequence join operations syntactically restricted limit search space 
example system project linear sequences join operations considered cartesian product relations deferred joins 
join operations commutative associative sequence joins operator tree need linear 
particular query consisting join relations algebraically represented evaluated join join join 
query trees called bushy illustrated 
bushy join sequences require materialization intermediate relations 
bushy trees may result cheaper query plan expand cost enumerating search space considerably studies merits exploring bushy join sequences large systems focus linear join sequences restricted subsets bushy join trees 
deferring cartesian products may result poor performance 
decision support queries query graph forms star observed cartesian product appropriate nodes dimensional tables olap terminology results significant reduction cost 
extensible system behavior join enumerator may adapted query basis restrict bushy ness join trees allow disallow cartesian products 
nontrivial determine priori effects tuning quality cost search 
join sided asymmetric operator sql preserves tuples relation 
symmetric preserve operand relations 
designates left preserves tuples addition tuples natural join operation contains remaining tuples fail join padded nulls attributes 
natural joins cost generating syntactic join orders expensive 
task choosing physical operators computing cost alternative plan computationally intensive 
sequence joins freely commute 
join predicate predicate identity holds join join associative rule repeatedly applied obtain equivalent expression evaluation block joins precedes block 
subsequently joins may freely reordered 
transformations identity needs cost 
identities define class queries joins may reordered 
group join join join traditional execution spj query group evaluation spj component query precedes groupby 
set transformations described section enable group operation precede join 
transformations applicable queries select distinct special case group 
evaluation group operator potentially result significant reduction number tuples tuple generated partition relation induced group operator 
cases doing group cost join may significantly reduced 
presence appropriate index group operation may evaluated inexpensively 
dual transformations corresponds case group operator may pulled past join 
transformations described see overview 
section briefly discuss specific instances transformation early group prior join may applicable 
consider query tree 
join foreign key join aggregated columns columns set group columns superset foreign key columns 
query consider corresponding operator tree fig 
tree final join eliminate set potential partitions created affect partitions aggregates computed partitions tuple join tuple 
push group shown fig 
preserve equivalence arbitrary side effect free aggregate functions 
fig 
illustrates example transformation introduces group represents class useful examples group operation done stages 
example assume fig 
columns 
group join join aggregated functions applied 
cases introduced group operator partitions relation projection columns node computes aggregated values partitions 
true partitions fig may need combine multiple partitions introduced single partition mapping 
group operator ensures 
staged computation may useful reducing cost join data reduction effect 
staged aggregation requires aggregating function satisfy property agg computed agg agg 
example order compute total sales products division transformation fig 
early aggregation obtain total sales product 
need subsequent group sums products belong division 
reducing multi block queries single block technique described section shows conditions possible collapse multi block sql query single block sql query 
merging views consider conjunctive query select 
relations query views defined conjunctive query view definitions simply unfolded obtain single block sql query 
example query join view join query unfolded join join may freely reordered 
step may require renaming variables view definitions 
unfortunately simple unfolding fails views complex simple spj queries 
views contain select distinct transformations move pull distinct need careful preserve number duplicates correctly 
generally view contains group operator unfolding requires ability pull group operator freely reorder joins group operator ensure optimality 
particular query fig 
trying consider transform form fig 
may freely reordered 
transformations section may cases underscores complexity problem 
merging nested subqueries consider example nested query emp dept keys corresponding relations select emp name emp emp dept select dept dept dept dept loc denver emp emp dept mgr tuple iteration semantics answer query inner query evaluated tuple dept relation 
obvious optimization applies inner query block contains variables outer query block uncorrelated 
cases inner query block needs evaluated 
variable outer block say query blocks correlated 
example query emp emp acts correlated variable 
kim subsequently identified techniques unnest correlated nested sql query flatten single query 
example nested query reduces select name emp dept dept dept loc denver emp mgr dayal offer algebraic view unnesting 
complexity problem depends structure nesting nested subquery quantifiers exists aggregates 
simplest case query example observed tuple semantics modeled semijoin emp dept emp dept dept dept viewed way hard see query may merged semijoin emp dept emp dept dept dept project join emp dept emp join emp dept predicate emp dept dept dept second argument project operator indicates columns relation emp retained 
problem complex aggregates nested subquery example merging query blocks requires pulling aggregation violating semantics nested query select dept name dept dept num machines select count emp emp dept name emp dept name especially tricky preserve duplicates nulls 
appreciate subtlety observe specific value dept name say tuples matching emp dept name predicate dept name emp dept name fails output tuple dept tuple adopt transformation query section output tuple dept join predicate fails 
presence aggregation preserve tuples outer query block left 
particular query correctly transformed select dept name dept left outer join emp dept name emp dept name group dept name having dept num machines count emp class queries merged single block query 
nesting structure query blocks linear approach applicable transformations produce semijoin stands semijoin preserves attributes semijoin predicate 
assume operator remove duplicates 
single block query consists linear sequence joins 
turns sequence joins associative rule described section compute joins sequence 
approach unnesting subqueries transform query uses table expressions views single block query 
direction kim subsequently refined 
semijoin techniques optimizing multi block queries previous section examples multi block queries may collapsed single block 
section discuss complementary approach 
goal approach described section exploit selectivity predicates blocks 
conceptually similar idea semijoin propagate site remote site information relevant values sends unnecessary tuples 
context multi block queries different query blocks parts query transmission cost issue 
information received reduce computation needed ensure results produced relevant 
technique requires introducing new table expressions views 
example consider query create view select avg sal emp group select eid sal emp dept age budget sal technique recognizes create set relevant doing join query projecting unique 
set passed view restrict computation 
accomplished views 
create view select id sal emp dept age budget create view filter select distinct create view select avg sal emp filter group reformulated query page exploits views restrict computation 
technique historically developed derivative magic sets sideways information passing find relationship semijoin intuitive magical 
select eid sal sal technique multi block query containing view including recursive view definitions nested subqueries 
case goal avoid redundant computation views nested subqueries 
important recognize tradeoff cost computing views view example views reduce cost computation 
formal relationship transformation semijoin may form basis integration strategy cost optimizer 
note degenerate application technique passing predicates query blocks results views 
simpler technique distributed heterogeneous databases generalized 

statistics cost estimation query logically equivalent algebraic expressions expressions ways implement operators 
ignore computational complexity enumerating space possibilities remains question deciding operator trees consumes resources 
resources may cpu time cost memory communication bandwidth combination 
operator tree partial complete query able accurately efficiently evaluate cost fundamental importance 
cost estimation accurate optimization cost estimates 
cost estimation efficient inner loop query optimization repeatedly invoked 
basic estimation framework derived system approach 
collect statistical summaries data stored 

operator statistical summary input data streams determine statistical summary output data stream estimated cost executing operation step applied iteratively operator tree arbitrary depth derive costs operators 
costs operator nodes cost plan may obtained combining costs operator nodes tree 
section discuss statistical parameters stored data cost optimization efficient ways obtaining statistical information 
discuss propagate statistical information 
issue estimating cost physical operators discussed section 
important recognize differences nature statistical property cost plan 
statistical property output data stream plan plan query cost different plans 
words statistical summary logical property cost plan physical property 
statistical summaries data statistical information base data table necessary statistical information includes number tuples data stream parameter determines cost data scans joins memory requirements 
addition number tuples number physical pages table important 
statistical information columns data stream interest statistics estimate selectivity predicates column 
information created columns indexes may created demand column 
large number systems information data distribution column provided histograms 
histogram divides values column buckets 
cases constant determines degree accuracy histogram 
determines memory usage optimizing query relevant columns histogram loaded memory 
choices values 
database systems equi depth called equi height histograms represent data distribution column 
table records histogram buckets equi depth histogram divides set values column ranges range number values compressed histograms place frequently occurring values singleton buckets 
number singleton buckets may tuned 
shown histograms effective high low skew data 
aspect histograms relevant optimization assumption values bucket 
example equi depth histogram values endpoints bucket may assumed occur uniform spread 
discussion assumption broad taxonomy histograms ramifications histogram structures accuracy appears 
absence histograms information min max values column may 
practice second lowest second highest values min max high probability outlying values 
histogram information complemented information parameters number distinct values column histograms provide information single column provide information correlations columns 
order capture correlations need joint distribution values 
option consider dimensional histograms 
unfortunately space possibilities quite large 
systems providing detailed joint distribution summary information number distinct pairs values 
example statistical information associated multi column index may consist histogram leading column total count distinct combinations column values data 
estimating statistics base data enterprise class databases large schema large volumes data 
flexibility obtaining statistics improve accuracy important able estimate statistical parameters accurately efficiently 
sampling data provides possible approach 
challenge limit error estimation 
shapiro connell show query small sample needed estimate histogram high probability accurate query 
misses point goal build histogram reasonably accurate large class queries 
addressed problem 
shown task estimating distinct values provably error prone estimation scheme exists database error significant 
result explains past difficulty estimation number distinct values 
addressed problem maintaining statistics incremental fashion 
propagation statistical information sufficient information base data query typically contains operators 
important able propagate statistical information operators 
simplest case operator selection 
histogram column query simple selection column histogram modified reflect effect selection 
inaccuracy results step due assumptions uniform spread needs bucket 
inability capture correlation key source error 
example reflected modifying distribution attributes table incurring potentially significant errors subsequent operators 
likewise multiple predicates independence assumption product selectivity considered 
systems selectivity selective predicate identify potential correlation 
presence histograms columns involved join predicate histograms may joined 
raises issue aligning corresponding buckets 
histogram information available ad hoc constants estimate selectivity 
cost computation cost estimation step tries determine cost operation 
costing module estimates cpu case parallel distributed systems communication costs 
systems parameters combined metric comparing alternative plans 
problem choosing appropriate set determine cost requires considerable care 
early study identified addition physical statistical properties input data streams computation selectivity modeling buffer utilization plays key role accurate estimation 
requires different buffer pool hit ratios depending levels indexes adjusting buffer utilization account properties join methods relatively pronounced locality index scan indexed nested loop join 
cost models take account relevant aspects physical design location data index pages 
ability accurate cost estimation propagation statistical information data streams remains difficult open issues query optimization 

enumeration architectures enumeration algorithm pick inexpensive execution plan query exploring search space 
system join enumerator discussed section designed choose optimal linear join order 
software engineering consideration build enumerator gracefully adapt changes search space due addition new transformations addition new physical operators new join implementation changes cost estimation techniques 
optimization architectures built paradigm called extensible optimizers 
building extensible optimizer tall order simply coming better enumeration algorithm 
provide infrastructure evolution optimizer design 
generality architecture balanced need efficiency enumeration 
focus representative examples extensible optimizers starburst volcano cascades briefly 
despite differences summarize commonality generalized cost functions physical properties operator nodes 
rule engine allows transformations modify query expression operator trees 
rule engines provide ability direct search achieve efficiency 
exposed knobs tune behavior system 
unfortunately setting knobs optimal performance daunting task starburst query optimization starburst project ibm almaden begins structural representation sql query lifecycle optimization 
representation called query graph model 
box represents query block labeled arcs boxes represent table blocks 
box contains information predicate structure data stream ordered 
query rewrite phase optimization rules transform equivalent 
rules modeled pairs arbitrary functions 
checks condition applicability second enforces transformation 
forward chaining rule engine governs rules 
rules may grouped rule classes possible tune order evaluation rule classes focus search 
application rule results valid set rule applications guarantee query equivalence assuming rules valid 
query rewrite phase cost information available 
forces module retain alternatives obtained rule application rules heuristic way compromise optimality 
second phase query optimization called plan optimization 
phase execution plan operator tree chosen 
starburst physical operators called may combined variety ways implement higher level operators 
starburst combinations expressed grammar production language 
realization higher level operation expressed derivation terms physical operators 
computing derivations comparable plans represent physical logical properties higher costs pruned 
plan relational description corresponds algebraic expression represents estimated cost physical properties order 
properties propagated plans built bottom 
physical operator function associated shows effect physical operator properties 
join enumerator system similar system bottom enumeration scheme 
volcano cascades volcano cascades extensible architecture evolved exodus 
systems rules universally represent knowledge search space 
kinds rules 
transformation rules map algebraic expression 
implementation rules map algebraic expression operator tree 
rules may conditions applicability 
logical properties physical properties costs associated plans 
physical properties cost depend algorithms implement operators input data streams 
efficiency volcano cascades uses dynamic programming top way memoization 
optimization task checks task accomplished looking logical physical properties table plans optimized past 
apply logical transformation rule implementation rule enforcer modify properties data stream 
stage uses promise action determine move 
promise parameter programmable reflects cost parameters 
volcano cascades framework differs starburst approach enumeration systems distinct optimization phases transformations algebraic cost 
mapping algebraic physical operators occurs single step 
applying rules forward chaining fashion starburst query rewrite phase volcano cascades goal driven application rules 

fundamentals far covered basics software components optimizer 
section discuss advanced issues 
issues considerable importance commercial systems 
distributed parallel databases distributed databases introduce issues communication costs expanded search space due fact possible move data choose sites intermediate operations optimizing query 
early focused exclusively reducing communication costs results system pointed dominant role local processing see overview 
time distributed database architectures evolved replicated databases handle physical distribution parallel databases scale 
replicated architectures maintaining consistency replicas important issue scope article 
distributed systems parallel databases behave single system exploit multiple processing elements reduce response time queries 
benefits parallelism may harnessed ways 
example physical data distribution table general data stream partitioned replicated nodes enables processors single processor systems key focus reducing total 
parallel execution attempts reduce response 
cases necessarily parallel execution increases total 
independent data sets 
parallelism may harnessed independent operation pipelined operation placing producer consumer nodes different processors 
advantages parallelism need communication processors exchange data data needs operation 
furthermore effective scheduling physical operators processors brings new dimension optimization problem 
xprs project advocated phase approach traditional single processor query optimization generate execution plan phase 
second phase scheduling processors determined 
query optimization xprs study effects processor communication 
hasan demonstrated importance communication costs account 
hasan retained phase optimization framework xprs incorporated cost benefits data repartitioning phase optimization determine join order access methods 
partitioning attribute data stream treated physical property data stream 
output phase physical operator tree exposes precedence constraints sorting pipelined execution 
second phase optimization proposed scheduling algorithms take account communication costs 
user defined functions stored procedures called user defined functions widely available relational systems 
support varies product provide powerful mechanism reduce client server communication provide means incorporating application semantics querying 
new optimization questions arise stored procedures treated order citizens query 
problem determining cost model user defined functions remains difficult problem 
interesting issues arise context enumeration algorithm 
example consider case stored procedure acts user defined predicate clause query 
predicates predicates may expensive may predicates blob image longer sound heuristic evaluate predicates early possible 
problem optimizing queries user defined predicates posed 
approach taken treat userdefined predicates relation point view dynamic query optimization 
approaches exploit observation joins expensive predicates may ordered efficiently ranks computed selectivity tuple cost evaluation 
unfortunately attempt extend ranks queries joins may result suboptimal plans 
shortcoming resolved representing application user defined predicates physical property plan enumeration algorithm guarantees optimality 
realistic assumptions cost model shown problem polynomial number user defined predicates 
solving problem optimizing user defined predicates step broader problem representing semantics adts query system optimizing queries adts 
problem intimately tied area semantic query optimization 
materialized views materialized views results views queries cached querying subsystem optimizer transparently 
optimization problem follows set materialized views query goal optimize query account materialized views 
problem introduces fundamental challenges 
problem reformulating query materialized views addressed 
general problem undecidable determining effective sufficient conditions nontrivial due complexity sql 
problem addressed context single block sql queries extended complex queries 
approaching optimization problem step process logically equivalent expressions generated individually optimized may increase cost optimization subexpressions pruned way 
showed steps enumerating generating equivalent expressions presence materialized views may overlapped 
optimization issues able touch foundational issues query optimization 
important areas discussed 
interesting direction able defer generation complete plans subject availability runtime information 
problem considering resources especially memory determining execution plans remains open issue 
addresses issue optimizing order query optimization 
optimizer technology object oriented systems important area worthy separate discussion 
furthermore database systems get multimedia web context able address fuzzy imprecise queries interesting direction 
emphasis decision support systems sparked sql extensions 
cube motivated need expressive power seeks extend language optimizer constructs optimize decision support systems better 

optimization transformations query equivalence 
infrastructure optimization significant 
designing effective correct sql transformations hard developing robust cost metric elusive building extensible enumeration architecture significant undertaking 
despite years significant open problems remain 
understanding existing engineering framework necessary making effective contribution area query optimization 
acknowledgments informal discussions umesh dayal goetz graefe hasan ravi krishnamurthy guy lohman hamid pirahesh kyuseok shim jeff ullman greatly helped develop understanding sql optimization 
helped improve draft comments 
am grateful colby william mckenna vivek narasayya janet wiener insightful comments draft 
patience 

apers yao optimization algorithms distributed queries 
ieee transactions software engineering vol 
bancilhon maier sagiv ullman magic sets strange ways execute logic programs 
proc 
acm pods 
bernstein goodman wong reeve query processing system distributed databases sdd acm tods dec 
chaudhuri shim overview cost optimization queries aggregates 
ieee de bulletin sep 
special issue query processing 
chaudhuri shim including group query optimization 
proc 
vldb santiago 
chaudhuri shim query optimization aggregate views proc 
edbt avignon 
chaudhuri dayal overview data warehousing olap technology 
acm sigmod record march 
chaudhuri shim optimization queries userdefined predicates 
proc 
vldb mumbai 
chaudhuri krishnamurthy potamianos shim optimizing queries materialized views 
proc 
ieee data engineering conference taipei 
chaudhuri gravano optimizing queries multimedia repositories 
proc 
acm sigmod montreal 
chaudhuri motwani narasayya random sampling histogram construction 
proc 
acm sigmod seattle 
krishnamurthy open architecture ldl 
proc 
vldb amsterdam 
dayal nests trees unified approach processing queries contain nested subqueries aggregates quantifiers 
proc 
vldb 
fagin combining fuzzy information multiple systems 
proc 
acm pods 
finkelstein common expression analysis database applications 
proc 
acm sigmod orlando 
long optimization nested sql queries revisited 
proc 
acm sigmod san francisco 
lohman query optimization ibm db family 
ieee data engineering bulletin dec 
gibbons matias poosala fast incremental maintenance approximate histograms 
proc 
vldb athens 
graefe ward dynamic query evaluation plans 
proc 
acm sigmod portland 
graefe query evaluation techniques large databases 
acm computing surveys vol june 
graefe cascades framework query optimization 
data engineering bulletin 
sept 
graefe dewitt exodus optimizer generator 
proc 
acm sigmod san francisco 
graefe mckenna volcano optimizer generator extensibility efficient search 
proc 
ieee conference data engineering vienna 
gray bosworth layman pirahesh data cube relational aggregation operator generalizing group cross tab sub totals 
proc 
ieee conference data engineering new orleans 
gupta harinarayan quass aggregate query processing data warehousing environments 
proc 
vldb zurich 
haas freytag lohman pirahesh extensible query processing starburst 
proc 
acm sigmod portland 
haas naughton seshadri stokes sampling estimation number distinct values attribute 
proc 
vldb zurich 
hasan optimization sql queries parallel machines 
lncs springer verlag 
hellerstein stonebraker predicate migration optimization queries expensive predicates 
proc 
acm sigmod washington 
hellerstein predicate migration placement 
proc 
acm sigmod minneapolis 
hong stonebraker optimization parallel query execution plans xprs 
proc 
conference parallel distributed information systems 

hong parallel query processing shared memory multiprocessors disk arrays 
ph thesis university california berkeley 
ioannidis ng shim sellis parametric query optimization 
proc 
vldb vancouver 
ioannidis universality serial histograms 
proc 
vldb dublin ireland 
kim optimizing sql nested query 
acm tods vol 
levy mumick sagiv query optimization predicate move 
proc 
vldb santiago 
lohman grammar functional rules representing query optimization alternatives 
proc 
acm sigmod 
lohman 
mohan haas daniels lindsay selinger query processing 
query processing database systems 
springer verlag 
lohman optimizer validation performance evaluation distributed queries 
readings database systems 
morgan kaufman 
lohman optimizer validation performance evaluation local queries 
proc 
acm sigmod 
melton simon understanding new sql complete guide 
morgan kaufman 
mumick finkelstein pirahesh ramakrishnan magic relevant 
proc 
acm sigmod atlantic city 
mumick pirahesh implementation magic sets relational database system 
proc 
acm sigmod montreal 
improved unnesting algorithms join aggregate sql queries 
proc 
vldb vancouver 
dewitt equi depth histograms estimating selectivity factors multi dimensional queries proc 
acm sigmod chicago 
ono lohman measuring complexity join enumeration query optimization 
proc 
vldb brisbane 
ozsu valduriez principles distributed database systems 
prentice hall 
piatetsky shapiro connell accurate estimation number tuples satisfying condition 
proc 
acm sigmod 
pirahesh hellerstein hasan extensible rule query rewrite optimization starburst 
proc 
acm sigmod 
poosala ioannidis haas shekita improved histograms selectivity estimation 
proc 
acm sigmod montreal canada 
poosala ioannidis selectivity estimation attribute value independence assumption 
proc 
vldb athens 
poosala ioannidis haas shekita improved histograms selectivity estimation range predicates proc 
acm sigmod montreal 
rosenthal query graphs implementing trees freely 
proc 
acm sigmod atlantic city 
schneider complex query processing multiprocessor database machines 
ph thesis university wisconsin madison sept 
computer sciences technical report 
selinger astrahan chamberlin lorie price access path selection relational database system 
readings database systems 
morgan kaufman 
seshadri cost optimization magic algebra implementation 
proc 
acm sigmod montreal 
seshadri pirahesh leung decorrelating complex queries 
proc 
ieee international conference data engineering 
shekita fundamental techniques order optimization 
proc 
acm sigmod montreal 
srivastava dar jagadish levy answering queries aggregation views 
proc 
vldb mumbai 
yan larson eager aggregation lazy aggregation 
proc 
vldb conference zurich 
yang larson query transformation psj queries 
proc 
vldb 
