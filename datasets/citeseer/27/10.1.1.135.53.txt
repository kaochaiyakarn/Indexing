bridging gap modeling programming languages yann ga gu herv mi douence pierre cointe cole des mines de nantes rue alfred bp nantes cedex france douence cointe fr july discontinuity exists modeling languages object oriented programming languages 
discontinuity consequence ambiguous notions modeling languages lack corresponding notions objectoriented programming languages 
hinders transition software design implementation vice versa 
hampers implementation maintenance processes 
discontinuity particularly acute binary class relationships describe design level notions association aggregation composition 
current state art propose synthetic definitions binary class relationships design level corresponding definitions implementation level 
express definitions terms common properties 
algorithms synthesize code properties detect properties code 
algorithms allow generate detect binary class relationships 
verify detection algorithms known frameworks 
definitions algorithms bring continuity modeling languages objectoriented programming languages 
partly funded object technology international drive ottawa ontario canada partly funded soft maint rue du ch de re nantes france 
contents gap design implementation state art definitions natural language 
formal definitions 
properties binary class relationships 
new programming languages extensions 
definitions implementation level 
definitions binary class relationships association relationship 
aggregation relationship 
composition relationship 
properties binary class relationships definitions 
discussion 
implementation examples 
redefinitions binary class relationships redefinitions 
discussion 
order binary class relationships 
symmetrical relationships backpointers 
acquaintance optimizations 
implementation examples 
code synthesis algorithms detection algorithms principles 
static detection algorithms 
implementation concerns 
detection ims class class 
detection mu class 
static detection example 
dynamic detection algorithms 
model 
detection lt class 
detection ex class 
dynamic detection example composition relationship 
implementation concerns 
validation algorithms 
definitions 
composition finalization gap design implementation recurrent problem object oriented software engineering community transition software design implementation vice versa implementation maintenance phases 
software design described modeling language uml software implementation written standard class programming language java 
uml java possess common notions notion class notion inheritance 
uml includes extra notions exist java example notion stereotype notions binary class relationships association aggregation composition 
focus binary class relationships 
existence notions binary class relationships uml brings discontinuity transition software design implementation notions exist java 
discontinuity hinders implementation software designs understanding software implementations 
impedes communication software engineers difficult teaching software designing 
example problem transition discontinuity shows notions exist design level uml implementation level java notions class inheritance 
notions association aggregation composition relationships uml exist implementation level java 
definitions binary class relationships proposed uml answer problem discontinuity 
unfortunately definitions natural language ambiguities offer hint possible implementation choices see instance 
example problem implementation choices uml class diagram defines classes inheritance relationship aggregation relationship java source code corresponds classes public class 
public class public class extends 
implement aggregation relationship class class 
field 
collection 
pair getter 
pair add remove methods 
world class industrial case tools rational rose borland open source case tools argouml clear definitions binary class relationships 
graphically distinguish association aggregation composition relationships code synthesized different binary class relationships 
code reengineering tools produce erroneous inconsistent relationships 
www rational com www com www borland com argouml tigris org example problem limitations industrial tools uml diagram represents classes aggregation relationship links 
source code generated rational rose public class public class private public public source code equivalent association aggregation composition relationship represent different notions different semantics 
replace array collection instance class java util vector example generally implemented see section diagram obtained reengineering modified source code rational rose aggregation relationship disappears association relationship links class class vector inconsistent original class diagram 
academic tools extract object model java source code byte codes 
proposes delegation field access inter class relationships 
goes describing inference system association relationships consider aggregation composition relationships 
example problem limitations academic tools java source code presents classes linked composition relationship cf 
section 
instance class strongly owns instance class encapsulated lite time depends lifetime public class private public void attach final public void operation operation public class public void operation extract object model associated classes presents object model relationship classes defined association named multiplicity exactly symbol static mutability symbol stating instance change lifetime instance infer relevant information lifetime dependency exclusivity property instances required distinguish association aggregation composition relationships 
solution problem discontinuity modelling implementation binary class relationship consists building new programming language extending existing appropriate notions binary class relationships 
solution goes purpose general purpose modelling languages uml 
stated uml preface uml general purpose modeling language potentially implementation targets 
semantics defined implementation language independent way pp 

solution implies non standard programming language eliminates benefits standardization class libraries development environments reengineering tools efficient compilers virtual machines 
second solution consists defining notions binary class relationships terms constructs existing programming language 
choose approach java programming language 
take pragmatic viewpoint propose debate part relationship study properties binary class relationships 
propose simple definitions binary class relationships implementation level algorithms bring continuity uml design level java implementation level 
apply algorithms design analysis frameworks 
show despite apparent simplicity definitions algorithms accurate 
survey literature quest precise definitions binary class relationships design level definitions implementation level section 
state art face ambiguities lack coherence definitions propose synthetic definitions binary class relationships design level 
definitions relationships examples implementation level section 
definitions implementation level sufficient bring continuity design level implementation level 
need algorithms synthesize code detect binary class relationships 
algorithms require precise definitions binary class relationships 
common properties section refine definitions implementation level terms properties section 
algorithms section validate know frameworks section 
conclude discussing approach immediate applications generalization 
state art large body binary class relationships authors mentioned ambiguities existing definitions lack mapping design level implementation level 
pretend complete survey research binary class relationships propose representing main approaches tackle ambiguities lack mapping 
reader convinced ambiguities lack definitions implementation level may skip section proceed section 
ambiguities particularly visible definitions natural language definitions de facto standards uml case tool rational rose section 
authors investigate formal methods disambiguate definitions section propose extensive studies properties binary class relationships section 
place studies design level consider mapping implementation level 
implementation level authors define new programming languages extend existing ones section 
mentioned solutions depart uml search language independence remove benefits standardization 
authors tackle problem discontinuity design level implementation level section 
works partially address mapping design level implementation level standard object oriented programming language 
definitions natural language omt methodology rumbaugh considers kinds binary class relationships 
link physical conceptual connection instances 
mathematically link tuple ordered list instances 
link instance association 
association describes group links common structure semantics 
association describes set potential links class describes set potential instances 
associations fundamentally bi directional 
aggregation association 
significant property aggregation transitivity 
aggregation symmetrical 
users manipulate ordinary association want represent general relationship classes 
apply aggregation relationship objects representing parts container object exist container object 
composition association strong aggregation sense container object deleted contained objects deleted 
users exploit composition relationship objects representing parts container object exist container object 
rational rose proposes widely software engineering tool 
rational claims tool uml compliant 
rational proposes definitions association aggregation composition relationships binary association association exactly classes including possibility reflexive association class 
aggregation entirely conceptual distinguish part 
simple aggregation change meaning navigation association parts link lifetimes parts 
composition form aggregation strong ownership coincident lifetime parts 
parts non fixed multiplicity may created composite created live die 
parts removed death composite 
wien object logically related ore objects exists association objects 
associations higher degree binary implemented objects 
aggregations build composite objects 
aggregations need special constructs called containment constructs 
dependent object object existence depends existence object 
aggregate object object dependent objects independent objects 
composite object special kind aggregate object 
composite link point dependent object object exist 
composite links necessary realize cascade delete value propagation method propagation 
exclusive components parts aggregate shared components parts aggregate 
possibility recursion composite objects 
year omg releases new revised version uml specifications 
omg gave definitions binary association association exactly classes including possibility association class aggregation special form association specifies part relationship aggregate component part composition form aggregation strong ownership coincident lifetime part 
part strongly owned composite may part composite 
years omg provided new considerably longer definitions 
new definitions omg distinguishes properties binary class relationships multiplicity navigability transitivity anti lifetime 
noted authors definitions manifest ambiguities 
uml ambiguous mention implementation details 
real definitions involve classifiers classes uml terminology 
formal definitions noble association relationships indicate object object way 
aggregation relationships specify aggregation objects form larger object models 
give definition composition relationship define mapping definitions implementation level 
formalization methodology objectoriented analysis named object calculus define association relation objects classes 
propose constraints cardinality lifetime 
cardinality constraint indicates association optional compulsory 
lifetime constraint interpreted independently multiplicities indicates aggregate object exists linked set objects set constant lifetime 
breu describe streams stream processing functions formalization uml 
define association set data links separate class communication link 
leave choice appropriate semantics developers discussing criteria choice 
distinguish composition aggregation relationships lifetime properties parts define properties 
france illustrates formal specification techniques develop precise semantics uml requirement class diagrams 
requirement class diagrams represent problem oriented structures problem domain concepts 
class diagrams decompose types constructs classes associations 
associations may general associations aggregations compositions generalization structures 
associations france considers multiplicity changeability properties navigability visibility properties irrelevant requirement class diagrams 
associations may possess weak strong frozen property related deletion associated objects 
aggregation associations additional ownership property 
composition aggregation deletion property deleted parts currently associated deleted 
parts may removed deletion 
france discuss implementation different associations properties 
andr association defines relation classes set links 
link corresponds tuple object class relation 
association enriched notations name reading direction roles multiplicity constraints properties qualification derivation 
aggregation give specific definition considering aggregation carries semantics plain association 
composition form aggregation strong ownership coincident lifetime parts 
authors define strong ownership coincident lifetime respect parts 
properties binary class relationships divides part association wpa categories functional non functional wpa 
functional wpa named assembly component part included part contributes function non functional wpa connection part looser 
non functional divide categories group member models association relationship tuple element models aggregation relationship 
groups sets objects brought share common properties 
tuples model relation entities entities normally exist independently 
author proposes classification wpa properties spatial temporal inclusion attribution visibility encapsulation sharing part inseparability part inseparability immutability ownership collaborations 
author stays design level concludes current object oriented methods programming languages lack expressiveness represent richness semantics 
defines aggregation relationship terms primary characteristics secondary characteristics 
primary characteristics structural lifetime binding ownership 
secondary characteristics sharing parts property propagation 
particular give extensive study possible lifetime bindings part mention need aggregate class methods call methods parts regard ownership characteristic 
survey uml aggregation composition relationships studies henderson sellers propose set characteristics part relationship 
primary secondary derived characteristics authors show definitions aggregation composition relationships uml incomplete overlapping contradictory 
propose revised definitions aggregation composition relationships different options 
option separability compatible current uml documentation books aggregation relationship represents part relationship irreflexive instance level antisymmetric class instance level asymmetric instance level 
part separable 
aggregation relationship induces propagation operations part ownership part 
existential dependency part propagation destruction operations 
composition relationship aggregation existential dependency propagation destruction operations 
tackle problem implementation standard object oriented programming languages 
study behavior composite objects 
contrast works studied composition relationship sameness part focus behavior composite objects 
distinguish local behavior composite object global behavior 
local behavior corresponds functionalities particular class composite object classes components 
global behavior corresponds functionalities composite object components component components 
purpose dichotomy local global behavior improve reusability components separation interface particular composite object interface composition front behavior composite objects 
propose improvements notions aggregation composition relationships breaking significant uml uml 
base previous henderson sellers studied characteristic part relationships combinations see 
describe automated transformation tool uml class diagram formal description language 
new programming languages extensions hartmann new programming language troll 
troll programming language features events explicit object aggregation 
particular complex objects describe aggregation sub objects structured objects 
complex object sub objects may altered events local complex object attributes visible outside complex object 
kinds complex objects static aggregation objects composition determined compile time dynamic complex objects composition change run time disjoint complex objects sub objects exist outside complex object 
object inclusion semantic foundation complex objects troll safe object import communication event calling sharing 
model complex objects proposed interesting mathematically sound requires specific non standard programming language 
kristensen introduces language mechanisms support implicit complex associations 
enclosing classes describe implicit associations 
association classes describe complex associations 
instance relationship customer banking consortium complex association 
customer decomposes account cash card defining implicit association customer hand account cash card hand 
specific programming language supports implicit complex associations 
approach author treat composition relationship implementation issue 
ducasse propose reflective model express automatically manage dependencies objects 
language flo extension smalltalk exists 
thesis ducasse describes dependency mechanism define composition relationship 
mention association aggregation relationship 
definitions implementation level rumbaugh article proposes explicit representation relations objects 
author argues relations semantic construct major impact formulation elucidation design considered semantic constructs similar weight classes generalization author defines relation associating instances classes state instances associated way 
author distinguish association aggregation composition relationships 
object programming laboratory project rousseau designed mapping include abstractions object oriented methodologies omt object oriented programming languages 
address problem code synthesis object oriented programming languages tackle problem detection project terminated 
martin association represents ability instance send message instance 
aggregation typical part relationship 
exactly association exception instances cyclic aggregation relationships 
composition exactly aggregation lifetime part controlled 
may take direct responsibility creating destroying part may accept created part pass assumes responsibility 
jackson develop tool lightweight extraction object models java byte codes 
propose inference system distinguishes subclass association relationships classes 
association relationship may annotated show multiplicity zero zero exactly mutability static instances target class respect instances origin class 
propose heuristics infer multiplicity mutability properties deal container classes 
jackson research closely related study provides interesting ideas 
limit research association relationship mention aggregation relationship discuss composition relationship 
association exists class variables class 
aggregation exists definition class involves objects class 
definitions close implementation give definition composition relationship 
harrison propose method map uml designs java programming language 
introduce notion cursor encapsulates complexity implementation associations 
discuss specific implementation details cursors associations 
research marcos propose guidelines translate uml model model object relational databases 
summarize definitions aggregation composition relationships aggregation special form association classes represents concept part 
simple aggregation wholes share part part lifetime restriction regard wholes 
composition special kind aggregation part belongs 
part lives dies 
part explicitly removed 
authors interesting mapping relationship definitions implementation sql 
consider message sends sql specific language construct constrain life cycle tables 
definitions binary class relationships exist software visualization community 
example graph drawing framework compiler display java programs uml notation 
researchers focus visualization techniques graph layout algorithms information retrieval techniques definitions 
interested reader may report information visualization techniques 
definitions binary class relationships previous state art summarize definitions binary class relationships design level general synthetic possible way 
propose simple definitions binary class relationships implementation level 
definitions closely related definitions subsection address implementation binary class relationships 
definitions explicit choices implementation binary class relationships 
despite simplicity definitions model great accuracy relationships real frameworks see section 
section presents examples binary class relationships implemented java 
section proposing real life examples 
reader come interesting complex examples 
essential purpose section 
aim giving flavor possible implementations binary class relationships 
association relationship definition design level association relationship design level conceptual link classes 
class multiple instances involved relationship 
represents association relationship classes uml notation 
definition implementation level binary class relationship involves instances classes 
binary class relationship oriented irreflexive anti symmetric instance class level asymmetric instance level 
association classes ability instance send message instance possibility mutual associations instances 
subclasses inherit association relationship classes class programming languages subclasses inherit structure behavior superclasses 
example association relationship exists classes association relationship exists subclass code represents association relationship classes public class public void operation operation public class public void operation association relationship classes exists method void operation 
aggregation relationship definition design level binary aggregation relationship design level involves classes respectively part 
conceptually part sense 
represents aggregation relationship classes uml notation 
definition implementation level aggregation relationship exists definition class contains instances class 
distinguishes part 
aggregate class define field array field collection type aggregated class 
instances aggregate class send messages referenced instance aggregated class 
code represents aggregation relationship classes public class public public public void operation operation public class public void operation aggregation relationship classes exists field method void operation 
composition relationship definition design level composition relationship aggregation relationship parts held destroyed destroyed 
parts exchanged life cycle parts owned moment deletion destroyed cascade 
represents composition relationship classes uml notation 
definition implementation level composition aggregation classes constraint lifetime instance lifetime instances part constraint ownership instance part instance 
may take direct responsibility creating part may accept created part 
may pass part assumes responsibility 
deleted parts deleted 
instance owns instance part 
instance part belong aggregation relationship composition relationship 
instance part exclusive instance 
code represents composition relationship classes public class private public void attach public void operation operation public class public void operation composition relationship exists private field methods void attach void operation garbage collector java virtual machine jvm collects garbage instance class stored instance class collecting instance class reader interested details garbage collector may report appendix counter examples section 
field absence methods returning field participate lifetime dependency exclusive ownership impossibility obtaining outside field ensures complete encapsulation instance instance lifetime dependency exclusive ownership 
properties binary class relationships section identify set properties important definitions binary class relationships implementation level 
set properties exhaustive 
interested reader may report discussions properties binary class relationships 
properties necessary sufficient refine previous definitions binary class relationships 
reformulate definitions binary class relationships terms properties 
illustrate properties examples java 
definitions binary class relationship possesses properties property exclusivity ex class class instance class involved relationship take part relationship time 
ex class class true false 
country language relationship language may part country ex country language false 
computer keyboard relationship keyboard part computer ex computer keyboard true 
exclusivity property holds time prevent possible exchanges 
computer keyboard relationship keyboard part computer exchanged computer example binary class relationship laptop keyboard 
property message send ims class class instances class involved relationship send messages instances class 
ims class class indifferent field array field collection parameter local variable 
rectangle relationship propagates draw message rectangle ims rectangle 
rectangle operate enclosing ims rectangle 
property lifetime lt class property constrains lifetime instances class class involved relationships 
lifetime lt class instance time elapsed instantiation lfi class indifferent destruction class indifferent lt class class lti class indifferent 
time convenient unit example seconds cpu ticks 
programming languages garbage collection class matches moment instance collected garbage 
window button relationship window closes ready garbage collection accessible button ready garbage collection accessible window button 
property multiplicity mu class class number instances class class allowed relationship class class 
mu class class defined mu class class 
sake simplicity interval minimum number maximum number instances represent multiplicity 
cell relationship cell possesses mu cell 
contrary car wheel relationship car usually possesses wheels may fifth spare wheel mu car wheel 
discussion properties propose express binary class relationships orthogonal 
exclusivity multiplicity properties closely related 
example country language relationship multiplicity property states number instance class language possesses instance class country mu country language 
italy possesses main language italian secondary languages ladin german turkish 
exclusivity property states instance class language shared instances class country classes ex country language true 
consider italy germany speak german possibly different accents vocabulary idioms 
implementation examples exemplify properties java programming language 
example exclusivity ex class class exclusivity property corresponds code public class exclusivity public static void main string args new operation new public class public void operation operation public class public void operation example instance class potentially shared ex false instance class exclusive method operation ex true 
example instance message send ims class class instance message send property corresponds code class private public void operation public void operation public class public void operation public class public void operation example instance class may send message instance class parameter ims parameter 
instance class may send message instance class field ims field 
example lifetime lt class code illustrates lifetime dependency instances classes public class lifetime public static void main string args new new operation public class private public public void operation operation public class public void operation example instance class exclusive instance jvm collects instance class garbage collects instance class held 
example multiplicity mu class multiplicity property corresponds code class private private new private private new new example instance class possesses different relationships classes multiplicities instances classes mu mu mu mu 
redefinitions binary class relationships redefinitions redefine binary class relationships terms properties 
redefinition association relationship association relationship classes class class class class properties class class ims class class ims class class mu class mu class ex class class false ex class class false lt class indifferent lt class indifferent prevent relationships link classes class class association aggregation composition relationship may exist class class see section 
redefinition aggregation relationship assume classes class class aggregation relationship call class class respectively part aggregation relationship ag class class possesses properties ag class class ims part field array field ims part mu collection mu part ex part false ex part false lt indifferent lt part indifferent definitions aggregation composition relationships sections forbid existence composition relationship part 
redefinition composition relationship composition relationship links classes class class call class class respectively part composition relationship noted class class properties class class ims part field array field ims part mu collection mu part ex part true ex part false part definition composition relationship section allows association relationship part 
discussion order binary class relationships properties show exists order association aggregation composition relationships seen 
aggregation association composition properties aggregation relationship constraining properties association relationship association aggregation ims part field array field collection mu class properties composition relationship constraining properties aggregation relationship 
particular exclusivity property stronger part composition relationship aggregation relationship composition relationship part belong aggregation composition relationship 
aggregation composition mu part ex part false true lt part indifferent lt indifferent part order shows binary class relationships decomposes fundamental parts static part corresponding mu ims properties dynamic part corresponding ex lt properties 
dichotomy static dynamic parts binary class relationships important code synthesis detection see section 
symmetrical relationships backpointers presence binary class relationship classes preclude existence relationships classes specifically forbidden definition binary class relationship composition relationship 
relationships classes induce cycle 
typically cycle backpointer records owner instance classes possess fields type public class private component public class private owner 
case symmetrical aggregation relationships exist ag ag 
shows uml diagram corresponding existence symmetrical aggregation relationships classes acquaintance optimizations optimization reasons instance class associated instance class may declare field type definitions relationship evolves association relationship aggregation relationship 
problem aim bringing continuity design implementation levels 
try interpret explain developer intent 
implementation examples examples counter examples binary class relationships java explicit properties code 
section propose real life examples 
goal give overview possible implementations binary class relationships 
examples counter examples illustrate code synthesis detection algorithms section 
example association relationship example presents classes association relationship links 
association relationship exists method void operation 
public class association ex false ex false lt indifferent lt indifferent public static void main string args new new operation operation public class mu public void operation mu operation ims public class public void operation ims exclusivity properties ex ex false lines explicit naming instances classes allows objects 
ims class class line instances class send messages instances class ims class class class send message class lifetime properties lt class lt class indifferent embedded tie lifetimes instances class instances class multiplicity properties mu class mu class prevents instance class instances class reciprocally prevents instances class instance class example association relationship example classes association relationship links 
public class association ex false ex false lt indifferent lt indifferent public static void main string args new operation operation public class public operation mu new mu operation ims return public class public void operation ims exclusivity properties ex ex false lines explicit naming instances classes return type method operation line allow objects 
ims class class line instances class send messages instances class ims class class class send message class lifetime properties lt class lt class indifferent embedded tie lifetimes instances class instances class creation instance class method operation class tie lifetimes method operation returns instance stays accessible example line points anymore ready garbage collection independently instance class multiplicity properties mu class mu class prevents instance class instances class reciprocally prevents instances class instance example aggregation relationship example presents classes aggregation relationship links 
class plays role class plays role part 
aggregation relationship exists field method void operation 
public class aggregation ex false ex false lt indifferent lt indifferent public static void main string args new new operation operation public class mu private mu public public void operation operation ims field public class ims public void operation exclusivity properties ex part ex part false lines explicit naming instances classes allows objects 
ims part field line instances class send messages instances class field line 
ims part class send messages class lifetime properties lt lt part indifferent instance class may outlive instance class reciprocally field class set null instance class outlive instance class multiplicity properties mu mu part instance class instance class instance class part aggregation composition relationship 
example composition relationship example presents classes composition relationship links 
class plays role class plays role part 
composition relationship exists private field methods void attach void operation garbage collector jvm collects garbage instance class stored instance class collecting instance class reader interested details garbage collector may report appendix counter examples 
field participates lifetime dependency ensures encapsulation instance instance lifetime dependency 
public class composition ex true ex false lt indifferent public static void main string args new attach new operation public class mu private mu public void attach public void operation operation ims field public class ims public void operation exclusivity property ex part true object instance class created line instance class exclusivity property ex part false lines explicit naming instance class allows objects 
ims part field line instances class send messages instances class field line 
ims part class class lifetime properties classes part lt part 
jvm collects instance class instance class multiplicity properties mu mu part instance class instance class instance class part aggregation composition relationship 
example composition relationship example proposes classes linked composition relationship 
instance class strongly owned instance class instance class responsible creating instance class public class composition ex false lt indifferent public static void main string args new operation public class mu private mu public new ex true public void operation operation ims field public class ims public operation exclusivity property ex part true object instance class created line instance class exclusivity property ex part false line explicit naming instance class allows objects 
ims part field line instances class send messages instances class field line 
ims part class send messages class lifetime properties classes part lt part 
jvm collects instances class instances class multiplicity properties mu mu part instances class instance class respectively instances class part aggregation composition relationship 
example interlaced composition relationship example presents classes interlaced composition relationships link 
composition relationships exist field methods void attach void operation garbage collector see counter example 
public class composition ex false lt indifferent public static void main string args new new attach new ex true attach null attach new ex true operation public class mu private mu public void attach public void operation operation ims field public class ims public operation exclusivity property ex part true object instances class created lines instances class respectively 
exclusivity property ex part false lines explicit naming instances class allows objects 
ims part field line instances class send messages instances class field line 
ims part class send messages class lifetime properties classes part lt part 
jvm collects instances class instances class multiplicity properties mu mu part instances class instance class respectively instances class part aggregation composition relationship 
example counter example composition relationship code counter example composition relationship 
binary class relationship classes composition relationship 
composition relationship exist instance class may potentially outside exclusivity lifetime properties hold ex 
public class composition public static void main string args new ex false new ex true attach operation lt indifferent public class mu private mu public attach public void operation operation ims field public class ims public operation example counter example interlaced composition relationship code counter example interlaced composition relationships 
binary class relationship classes composition relationship 
composition relationship exist instance class may potentially outside exclusivity lifetime properties hold ex 
public class composition ex false lt indifferent public static void main string args new new attach new ex true attach null attach new operation ex false null null operation public class mu private mu public attach public return public void operation operation ims field public class ims public operation example counter example interlaced composition relationship code counter example interlaced composition relationships 
binary class relationship classes composition relationship 
composition relationship exist instances class may potentially outside exclusivity hold ex lifetime property holds 
public class composition public static void main string args new ex false new ex false attach new attach ex false operation operation public class mu private mu public attach public return public void operation operation ims field public class public operation ims code synthesis algorithms previous sections gave definitions binary class relationships design level implementation level 
express definitions implementation level terms common properties 
sufficient bring continuity design level implementation level 
need define code synthesis detection algorithms binary class relationships definitions properties 
base code synthesis meta model 
describe constructions java programming language meta model describes entities class interface elements field method association aggregation composition relationships 
build models software architecture entities elements 
entities elements know synthesize corresponding code definitions 
entity element embeds possible choice implementation choices exemplified section 
choice interested giving full range possible implementations providing implementation respects desired properties 
code synthesis related binary class relationships major difficulties 
propose overview code synthesis mechanisms interested reader may refer details 
example code synthesis aggregation relationship code describes aggregation relationship classes define classes aggregation meta model classes 
declaration aggregation relationship line specifies name relationship aggregation target class cardinality implies cardinality 
new new aggregation aggregation 
new aggregation ask model synthesize corresponding code 
obtain result public class aggregation aggregation private java util vector aggregation new java util vector public void ab aggregation addelement ab public void ab aggregation ab public class piece code satisfies definition properties previous sections 
similarly produce results association composition relationship satisfy desired properties 
pieces code generate satisfy se desired properties developer duty modify maintaining desired properties 
interested reader may refer discussions mechanisms preserve desired properties 
detection algorithms principles association aggregation composition relationships decompose properties exclusivity message send lifetime multiplicity 
detection binary class relationships implies inferring values different properties comparing inferred values desired values 
detection association relationship requires value ims class class property 
detection aggregation relationship requires inferring values ims class class mu class properties 
detection composition relationship requires detection value ims class class mu class properties aggregation relationship values ex part part properties 
realize detection values message send multiplicity properties static analysis 
infer values exclusivity lifetime properties dynamic analysis 
static detection algorithms detection static part binary class relationships simple perform java capabilities specificities 
implementation concerns detection algorithms section specifically tailored java 
java programming language class programming language introspection capabilities part static detection 
java programming language uses intermediate language byte codes virtual machine jvm 
jvm interprets byte codes contained class files obtained compiling java source code 
perform part static analysis intermediate language byte code analysis framework ibm 
chose operate intermediate language class files available java source code may proprietary 
detection ims class class iterate byte codes class looking byte codes corresponding message invocation invokeinterface invokestatic invokespecial invokevirtual 
public list classfile final list ims new arraylist final int length final get final final get code final byte final new int return ims int offset int opcode offset switch opcode case invokeinterface case invokestatic case invokespecial case invokevirtual add message send list 
detection mu class detection values mu class property corresponds fields multiplicities 
find typed fields array cardinality standard java reflection api classes extract existing fields corresponding types 
public list class final list new arraylist int looking collection distinguishing arrays typed collections collections un typed collections 
field fields int fields length class type fields gettype type add new type array type difficulty arises fields typed java collections map list set collections un typed 
assume kinds collections homogeneous elements common superclass different object possible determine types known java programming idioms pairs add remove accessors 
algorithm describes technique find accessors add remove pairs 
looking accessors type un typed collections 
set new map adds new hashmap method methods int methods length method methods string key adds put key add key looking matching add remove pairs 
iterator adds keyset iterator hasnext string string method addmethod method adds get contains add new addmethod argument number idiom return static detection example develop prototype tool includes algorithms static detection 
apply algorithms examples section find correct association aggregation relationships 
applied realistic applications section details results 
dynamic detection algorithms dynamic part composition relationship difficult detect 
propose solution problem trace analysis technique 
model perform dynamic analysis trace help predicates written logic programming language prolog 
prolog possesses high level pattern matching capabilities expressive backtrack mechanism 
prolog showed adequacy query traces different works 
model program execution trace sequence execution events 
kinds events represented prolog compound terms sake readability associate event unique chronological event number assignment events generated time field instance class numbered assigned instance class numbered assignation event number finalize events generated jvm garbage collects instance 
assume tool generates finalize event soon instance useless ready garbage collection finalization event number program event generated program terminates 
need event manage pending event number detection lt class represent execution java program example section list trace trace assignation finalization finalization 
trace verifies lifetime property composition relationship part 
field instance numbered class assigned instance class 
second instance finalized instance finalized 
third program ends 
trace example different memory settings verifies lifetime property composition relationship assignation finalization finalization occur program benevolent effort jvm free resources clean way exits operating system frees remaining allocated resources 
consider program execution neglect conflict chronological order lifetime property composition relationship 
propose formally define check lifetime property composition relationship help prolog predicate 
predicate builds list compound terms representing sequences events execution trace 
sequences events kinds eid aid bid predicate encounters assignation 
eid aid bid finalization bid predicate encountered assignation finalization second instance variable aid bid true instances numbered aid bid class verify lifetime property aid bid false 
define predicate follows assignation aid bid list nlist append list aid bid nlist 
finalization eid aid list nlist finalization eid aid list nlist 
list nlist list nlist 
list list 
depending event jvm emits record compound term encountered assignation event check pending encountered finalization event convert pending program ends 
check pending receiving finalization event predicate 
finalization eid aid 
finalization bid aid bid rest aid bid finalization bid nlist list nlist 
finalization aid aid bid finalization bid rest aid bid true rest 
finalization aid aid bid rest aid bid false rest 
finalization eid aid car cdr car finalization eid aid cdr 
receiving finalization program event iterate list event sequences convert pending compound terms required predicate 

aid bid rest aid bid true nlist rest nlist 
aid bid rest aid bid true nlist rest nlist 
rest nlist rest nlist 
evaluation predicate trace trace return list true list expresses lifetime property composition relationship holds instances classes respectively 
consider trace trace obtained example section 
trace assignation finalization finalization 
case evaluation predicate recognize lifetime property composition relationship instance finalized instance false trace trace obtained example section contains interlaced occurrences lifetime property pattern events 
trace assignation finalization assignation finalization finalization finalization 
result evaluation trace list true true trace trace obtained example section contains occurrence lifetime property pattern events second pattern correct 
trace assignation finalization assignation finalization finalization finalization 
predicate returns list true false detection ex class principle define predicate check exclusivity property composition relationship 
assignation aid bid list nlist aid bid list nlist true 
list list 
store list compound term update accordingly previous terms aid bid aid bid true true 
aid bid aid bid false false 
aid bid aid bid true rest aid bid false ex aid bid rest false 
aid bid aid bid true rest aid bid true ex aid bid rest ex 
aid bid car cdr car ex aid bid cdr false 
iterate list exclusivity properties update new assignation event emitted jvm 
add new term appropriate values 
dynamic detection example composition relationship define predicate verifies composition relationship trace 
specify compositions predicate predicates follows compositions list lexp lexp list 
compositions predicate checks exclusivity lifetime properties trace generated jvm 
predicates drives remote jvm receives events remote jvm calls predicates 
lexp lexp 
lexp lexp 
predicate receives program event returns list respectively exclusivity properties lifetime properties 
predicate fusions lists unique list composition properties 
compound term composition aid bid okay describes composition property 

aid bid okay aid bid okay composition aid bid okay nlist nlist 
aid bid aid bid composition aid bid false nlist nlist 
implementation concerns jvm provides architecture obtain dynamic information run time java platform debug architecture jpda 
jpda provides interface java debug interface jdi get events jvm runtime jvm fires events field accessed method called 
develop prototype tool caffeine 
tool instruments jvm generate trace program execution jdi interface 
tool generate finalize event soon instance useless calling garbage collection step execution sake efficiency incremental garbage collection considered 
interested reader may report example appendix explicitly call garbage collector finalization methods validation section validate algorithms detect association aggregation composition relationships known frameworks respect definitions supplemented manual analysis required 
validate definitions comparing results algorithms class diagrams object models documenting different frameworks 
algorithms tested implementations static detection algorithms tool known frameworks java awt junit association relationship weakest binary class relationships provides overwhelming number hits association relationships classes frameworks 
aggregation relationship informative respect static analysis 
table shows results detection aggregation different frameworks 
details number classes framework relationships multiplicity relationships multiplicity detected manual analysis false hits relationships missed algorithms 
framework classes manual false hits missed java awt junit total precision manual recall false hits results include aggregation relationships multiplicity detection relationships issue inaccurately increase precision involve aggregation relationships homogeneous involve primitive types wrapper types string type 
homogeneous aggregation relationships typically implemented vector class 
perform manual analysis sure algorithms accurate 
tables summarize existing aggregation relationships example precision existing aggregation relationships multiplicity compare precision existing aggregation relationships multiplicity definitions frameworks highlight aggregation relationships algorithms 
sake clarity include package names ambiguities 
mention relationships listeners listeners separate concern respect relationships classes 
class java awt aggregation relationship class es component component container component window queue component menubar menu menu textjustifier area curve icc profile book book total class aggregation relationship class es connector painter command command image storable storable component point total class junit aggregation relationship class es test junit test throwable junit test total obtain precision developers frameworks respect java idioms required detection algorithms examples add method corresponding remove method get method pair add remove methods different argument types 
tables results detection composition relationship junit framework dynamic analysis junit samples money class text ui awt ui swing ui respectively 
perform dynamic analysis framework requires user interaction java awt framework runnable program 
perform analyses starting results aggregation relationship detection composition relationship aggregation relationship strong dynamic properties complete analyses frameworks costly time provide results 
class junit composition relationship class es test junit test throwable junit test total running junit samples money class ui aggregation relationships reveal composition relationships properties lifetime exclusivity hold 
running junit samples money class ui dynamic analysis exposes aggregation relationships composition relationships 
results subject caution correspond subset possible execution paths 
case failures errors tests aggregation relationships remain class junit composition relationship class es test junit throwable test throwable junit test total case failure error property exclusivity hold classes junit class test 
class gives away defective instance class test instance class junit stores collection 
running junit samples money class ui dynamic analysis displays results similar ones obtained awt ui composition relationships exist classes classes junit 
composition relationships exist classes test class instances class test shared classes case failure error 
class junit composition relationship class es test junit test throwable junit test total results demonstrate interest dynamic analysis main limitation detection strong relationships respect properties may uncover subtle inter classes dependencies possible inter classes design defects 
depending execution path relationships classes may vary way unexpected developers 
code coverage analyses considered increase confidence analysis exactness relationships classes 
definitions validation definitions results algorithms third party definitions tools difficult task 
apply algorithms documented frameworks compare results documentation frameworks analyses tools 
developers mainly modelling language uml designing software clear distinction association aggregation composition relationships 
authors unable find framework publicly available junit developers explicitly distinguished binary class relationships 
example authors notation proposed 
notation offers association relationship called acquaintance relationship generic aggregation relationship called part relationship 
notation mention composition relationship 
tackle implementation binary class relationships implementation standard class programming languages 
design level propose synthetic definitions common binary class relationships association aggregation composition 
implementation level propose unambiguous definitions code synthesis detection algorithms code examples 
implement algorithms validate known frameworks respect definitions developers intent 
step bridging gap modeling programming languages 
currently apply approach design patterns 
focuses relationships classes directly applies detection code synthesis design patterns design patterns descriptions communicating objects classes customized solve general design problem particular context 
includes completing prototypes respect dynamic detection example counter garbage collector generate finalize events 
making prototypes scalable testing bigger frameworks eclipse development environment 
investigating uml notions interaction diagram check trace analysis algorithms 
applying approach class programming languages 
instance syntax tree meta model static detection destructor related event generate finalize events 
integrating prototypes eclipse development environment 
composition finalization example composition example presents composition relationship 
illustrates lifetime dependency instances class composition relationship instance class ready garbage collection instance class finalize method class called jvm finalize method class public class composition public static void main string args new new operation system true system gc public class private public super protected void finalize throws throwable super finalize system println instance class finalized public void operation operation system println method operation class public class protected void finalize throws throwable super finalize system println instance class finalized public void operation system println method operation class output produced executing code method operation class method operation class instance class finalized 
instance class finalized 
herv pierre cointe yann ga gu narendra jussien 
instantiating detecting design patterns putting bits pieces 
debra richardson martin feather michael editors proceedings ase pages 
ieee computer society press november 
herv yann ga gu 
meta modeling design patterns application pattern detection code synthesis 
editor proceedings ecoop workshop automating object oriented software development methods june 
pascal andr jean claude royer vasconcelos 
algebraic view uml class diagrams 
christophe dony editors proceedings lmo pages 
herm science publications january 
franck 
part relationship object modeling definition color 
information software technology 
boris bezier 
software testing techniques 
van nostrand new york 
juan kevin lano tom 
objects associations subsystems hierarchical approach encapsulation 
mehmet aksit satoshi matsuoka editors proceedings ecoop pages 
springer verlag 
ruth breu christoph hofmann klein barbara bernhard rumpe 
formalization unified modeling language 
mehmet aksit satoshi matsuoka editors proceedings ecoop pages 
springer verlag 
jean michel brian henderson sellers franck le parc robert france 
improving uml metamodel rigorously specify aggregation composition 
patel wang ronald johnston editors proceedings pages 
springer verlag august 
hind rudolf keller fran ois guy saint denis 
design properties object oriented software changeability 
proceedings pages 
ieee computer society press 
franco 
roles composite objects object oriented analysis design 
proceedings oopsla pages 
acm press 
lori clarke andy podgurski debra richardson steven 
formal evaluation data flow path selection criteria 
ieee transaction software engineering november 
stephan diehl editor 
software visualization 
springer verlag berlin heidelberg may 
isbn 

coca debugger fine grained control flow data events 
proceedings icse may 

extendable trace analyser prolog 
journal logic programming special issue synthesis transformation analysis logic programs 
st phane ducasse 
int fl de dans un mod le classes 
phd thesis university nice sophia antipolis january 
st phane ducasse anne marie 
reflective model class dependencies 
proceedings oopsla pages 
acm press 
holger rgen wolff von 
visualization java programs 
stephan diehl editor software visualization pages 
springer verlag berlin heidelberg 
robert france 
problem oriented analysis basic uml static requirements modeling concepts 
proceedings oopsla pages 
acm press 
erich gamma 

available members ch gamma zip 
erich gamma kent beck 
test infected programmers love writing tests 
java report july 
erich gamma richard helm ralph johnson john vlissides 
design patterns elements reusable object oriented software 
addison wesley 
yann ga gu herv 
design patterns constraints automate detection correction inter class design defects 
li richard riehle pour bertrand meyer editors proceedings tools usa pages 
ieee computer society press july 
yann ga gu mi douence narendra jussien 
java caffeine tool dynamic analysis java programs 
proceedings ase 
william harrison charles barton mukund 
mapping uml designs java 
proceedings oopsla pages 
acm press 
thorsten hartmann ralf gunter saake 
aggregation behavior oriented object model 
lehrmann madsen editor proceedings ecoop pages berlin 
springer verlag 
linda 
preface uml chapter pages xxi 
formal 
omg september 
brian henderson sellers 
problems uml metamodel 
proceedings 
ieee computer society press 
brian henderson sellers franck 
uml aggregation composition relationships 
jacques malenfant roger rousseau editors actes de lmo pages 
herm 
sun microsystems java window toolkit 
technical report sun microsystems 
daniel jackson allison 
lightweight extraction object models bytecode 
proceedings icse pages 
acm press may 
jeffrey korn yih chen koutsofios 
reverse engineering tracking java applets 
proceedings working conference reverse engineering pages 
bent kristensen 
complex associations abstractions objectoriented modeling 
proceedings oopsla pages 
acm press 
marcos jos ceres 
aggregation composition object relational database design 
eder editors proceedings fifth east european conference advances databases information systems pages 
springer 
robert martin 
association aggregation composition 
org uml html 
nelson klaus meyer wegener bernhard 
grand tour concepts object orientation database point view 
data knowledge engineering 
james noble john grundy 
explicit relationships object oriented development 
proceedings tools 
prentice hall 
object management group uml specification 
object management group uml specification 
rational 
difference aggregation composition represented rose 
www rational com rose html rose html html 
rousseau 
filling gap oo methodologies programming languages 
programming techniques group cern ecp division geneva switzerland 
james rumbaugh 
relations semantic constructs object oriented language 
proceedings oopsla pages 
acm press 
james rumbaugh michael blaha william premerlani frederick eddy william 
object oriented modeling design 
prentice hall englewood cliffs 
james rumbaugh robert jacobson grady booch 
unified modelling language manual 
addison wesley 
monika robert france maria petrie 
characterization aggregation 
proceedings th international conference object oriented information systems 
springer verlag september 
david 
application schema specific data structure 
www informatics sintef uml xml std clause htm 
sylvain 
une nouvelle approche de la sp du comportement des objets composites en uml 
proceedings lmo pages 
herm 
universit wien 
aggregation composite objects 
www ifs univie ac aggregation html 
sparc 
final report 
technical report xerox august 

