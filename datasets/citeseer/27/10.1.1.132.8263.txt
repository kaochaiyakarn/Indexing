method time quite waste time andreas gal michael michael franz computer science department university california irvine irvine ca usa gal franz uci edu 
just time compilers object oriented languages operate granularity methods 
unfortunately hot methods contain cold code paths 
consequence just time compilers waste time compiling code executed rarely 
discuss alternative approach truly hot code compiled 
modern object oriented languages smalltalk java virtual machine execution model 
just time compilation translate virtual machine bytecode native machine code faster execution 
just time compilers virtual machines quite similar structure static counterparts 
case static compilation compiler processes program code method method constructing control flow graph cfg method performing series optimization steps graph 
final step compiler traverses cfg emits native code 
dynamic compilers behave essentially identically pick method construct cfg generate native code 
order strike balance startup latency long term efficiency jit compilers operate mixed mode environment compiling entire program 
case java bytecode executed interpreter 
methods invoked identified dynamically compiled native code 
static compiler methods compilation units natural choice 
static compilation usually profiling information available reveal particular part method hotter compilation worthy perfect sense compile entire methods possible paths 
static compiler different paths look equally taken runtime 
dramatically different case dynamic compiler 
contrast static counterpart dynamic compiler access runtime profile information virtual machine collect easily interprets code 
profile information dynamic compiler decide parts method contribute runtime parts rarely taken fact irrelevant global perspective far optimization potential concerned 
region compilation proposed address issue 
proposed region just time compiler java 
uses runtime profiling select code regions compilation uses partial method inlining inline profitable parts method bodies 
authors observed reduction compilation time achieved better code quality due rarely executed code excluded analysis optimization 
region compilation really addresses symptoms trying exclude unprofitable code areas compiled methods addressing actual problem choice unsuitable compilation unit place 
methods compilation units apparent trying deal long running hot code regions inside method currently interpreted 
method discovered hot subsequently compiled optimized directly executable native code 
runtime system perform expensive complex process called stack replacement substitute newly compiled code interpreted version 
virtual machine able deal stack replacement means having support side exits running interpreted methods side re entries compiled method bodies 
processes complex open source research virtual machines support stack replacement 
feature commercial vms large scale research efforts jikes rvm 
exploring different approach building dynamic compilers cfg constructed source code level compilation units methods 
runtime profiling detect frequently executed cyclic code paths program 
compiler records generates code dynamically recorded code traces paths 
assembles traces dynamically tree data structure covers frequently executed compilation worthy code paths hot code regions 
tree code representation number advantages 
hand subsumes greatly simplifies stack replacement 
scheme compiled code entered independently method boundaries 
replacing interpreted code compiled equivalent trivial 
trace recorded interpreter stops loop header entry point associated trace tree entire tree recompiled 
trace tree immediately executed replacing previously compiled copy 
recording performed native code side exited interpreter necessary implement stack replacement mechanism translates compiled state 
major benefit approach trace tree data structure contains relevant code areas 
edges executed runtime appear static cfg considered representation delegated interpreter rare cases taken 
compilers basic block cfg analysis advanced optimizations expensive tree compiler perform advanced optimizations quickly 
lack control flow merge points tree representation simplifies optimization algorithms 
trace compilation trace jit compiler targets jvm bytecode language starts execution class files interpreter traditional jit compilers 
detect hot code areas suitable candidates dynamic compilation simple heuristic introduced bala 
interpreter augmented keep track frequently executed backwards branches 
targets branches loop headers hot code areas 
loop header discovered attempt record trace loop region associated header 
starting loop header interpreter records subsequent instructions original loop header reached 
recording phase branch instructions recorded guard instructions indicate possible loop exits native code execution 
jit compiler emits appropriate code check previously observed result guard condition applies executions compiled trace 
condition fails side exit performed compiled code hands control back interpreter resumes state consistent side exit detected native code execution 
trace recording method invocations inlined trace 
case static method invocation target method fixed additional runtime checks required 
dynamically dispatched methods trace recorder inserts guard instruction ensure actual method implementation reached trace recording 
guard fails regular dynamic dispatch repeated interpreter 
succeeds effectively performed method specialization predicted receiver type 
compiler handle multiple alternative paths trace eventually compiler specializes method invocations commonly occurring receivers 
guard instructions appear inlined methods carry information able reconstruct interpreter state case side exit occurs 
case side exit method scope trace entered done write back values held machine registers appropriate stack local variable locations 
case deep side exit inside method invocation inlined guard instructions store information allow virtual machine fully construct interpreter state includes constructing method frames virtual machine stack 
native code execution guard instruction fails side exit occurs jit compiler resume execution interpreter 
switch expensive jit compiler attempts include traces side exits original trace 
side exit resume interpretation time re start trace recorder record instructions starting side exit point 
secondary traces completed interpreter revisits original loop header 
results tree traces spanning observed paths original program loop 
shows control flow graph nested loop corresponding trace tree recorded instruction detected loop header 
left right straight line tree paths represent traces recorded 
trace fig 

example nested loop set suitable traces nested loop 
basic block control flow graph loop left represented numbered node 
loop header outer loop loop header inner loop 
executed frequently anchor node trace tree right recorded loop 
trace tree trace starts anchor node terminates 
anchor node trace tree trace ends node 
loop header outer loop inlined trace tree just trace originating terminating node 
recorded followed secondary trace recorded added trace tree jit compiler entire trace tree emits new native code 
entry compiled code loop header new version executed side exit encountered case tree extended 
recorded trace usually hottest path loop 
secondary traces occur execution benefit compilation 
compiler limits growth trace trees experimentally chosen number traces 
evaluation built dynamic compiler java described trace tree compilation method 
compiler implemented part java virtual machine fast java interpreter previously lacked just time compiler 
detect trace tree entry points modified interpreter keep track execution frequency jvml branch instructions 
certain threshold surpassed trace recorder attempt record primary trace starting destination frequently executed branch instructions 
compiling primary trace trace executed compiled form 
trace recorder started side exit occurs attempting grow associated trace tree 
current compiler prototype performs limited set optimizations including constant propagation copy propagation arithmetic optimizations loop invariant code motion array bounds check elimination 
optimized intermediate representation trace tree converted powerpc machine code 
current set optimizations simplistic powerpc code generator perform instruction scheduling able speed execution section java grande benchmark set factor 
average system generates approximately bytes machine code benchmark program section significantly smaller code emitted method just time compilers sun hotspot jvm 
generates approximately kb code section benchmark program achieves additional speedup performance prototype compiler 
benchmarks section recorded trees achieve near ideal coverage performance critical part loop traces 
means adding additional traces longer produce substantial speedup frequently executed paths covered 
largest trace tree produced heapsort 
second third trace added tree produce speedup initial trace reducing side exit frequency 
fourth trace produces speedup 
adding additional traces point produce visible speedup 
noteworthy prototype compiler compilation speed 
system spends times time just time compiler sun hotspot jvm 
part explained fact compile code general explain compilation time speedup approximately factor 
compilation performance highlights trace compilation approach selective deciding code compile time consuming instruction compiled 
discussion traditional dynamic compilers built principles ideas invented static counterparts 
introduced novel intermediate representation call trace trees eliminates inherent weaknesses methods compilation units dynamic compiler 
trace tree data structure introduced enables just time compiler incrementally discover alternative paths loop optimize loop regardless possible partial overlap paths 
programs execute dynamic view basic blocks control flow edges encounters quite different static control flow graph 
representation captures difference provides representation solely addresses hot code areas hot edges 
basic blocks instructions part compiler intermediate representation create cost compiler 
trace trees compilation units source code constructs methods provides intuitive boundary cold code interpreted hot code needs compiled defines simple efficient method transition areas trace entry trace side exits 
research effort partially funded national science foundation nsf cns 
government authorized reproduce distribute reprints governmental purposes notwithstanding copyright annotation thereon 
views contained authors interpreted necessarily representing official policies endorsements expressed implied national science foundation nsf agency government 

arnold gosling 
java programming language nd ed 
acm press addison wesley publishing new york ny usa 

arnold fink grove hind sweeney 
adaptive optimization jalape jvm 
proceedings th acm sigplan conference object oriented programming systems languages applications pages 

bala duesterwald banerjia 
transparent dynamic optimization design implementation dynamo 
hewlett packard laboratories technical report hpl 
june 

burke whaley choi fink grove hind sarkar serrano sreedhar srinivasan 
jalape dynamic optimizing compiler java 
proceedings acm conference java grande pages 

gal 
efficient bytecode verification compilation virtual machine 
phd thesis university california september 

gal probst franz 
effective jit compiler devices 
vee proceedings nd international conference virtual execution environments pages new york ny usa 
acm press 

goldberg robson 
smalltalk language implementation 
addison wesley longman publishing boston ma usa 


programming language 
addison wesley professional 

lzle chambers ungar 
debugging optimized code dynamic deoptimization 
proceedings acm sigplan conference programming language design implementation pldi pages new york ny usa 
acm press 

lindholm yellin 
java virtual machine specification 
addison wesley 


virtual machine 
sf net may 


analysis development java grande benchmarks 
proceedings acm java grande conference san francisco 

nakatani 
region compilation technique dynamic compilers 
acm transactions programming languages systems toplas 

sun microsystems 
java hotspot virtual machine sept 
