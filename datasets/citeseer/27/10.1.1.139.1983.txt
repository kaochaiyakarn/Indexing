external memory planar point location logarithmic updates lars arge dept computer science university aarhus aarhus denmark large au dk point location extremely studied problem internal memory models external memory model 
efficient dynamic data structure point location general planar subdivisions 
structure uses linear space store subdivision segments 
insertions deletions seg ments performed amortized logb os queries answered log os worstcase 
previous best known linear space dynamic struc ture answers queries log os supports insertions amortized log os 
structure considerably simpler previous structures 
categories subject descriptors algorithms problems geometrical problems computations general terms algorithms design keywords external memory planar subdivisions point location dynamic data structure supported part army research office nf ole scholarship danish national science research council danish strategic research council danish national research foundation 
center massive data algorithmics center danish national research foundation permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
scg june college park maryland usa 
copyright acm 
gerth st dept computer science university aarhus aarhus denmark gerth au dk rao dept computer science university aarhus aarhus denmark au dk 
planar point location classical problem computational geometry planar subdivision segments decomposition plane polygonal regions induced straight line planar graph problem consists preprocessing data structure face containing arbitrary query point reported quickly 
problem applications graphics spatial databases geographic information systems 
planar subdivisions arising applications areas massive fit internal memory reside disk 
instances communication cpu running time bottleneck 
planar point location especially allow edges vertices changed dynamically focused minimizing cpu running time assumption subdivision fits main memory 
results known efficient dynamic point location subdivision stored external memory 
improve update bound previous best known dynamic structure 
previous results internal memory edelsbrunner proposed optimal static data structure point location planar monotone subdivision subdivisions intersection face vertical line possibly empty single interval 
data structure uses space constructed time answers queries log time 
arbitrary planar subdivisions linear space structures logarithmic query time log construction time known see 
dynamic version problem allow edges vertices changed dynamically cheng gave structure answers queries log time supports updates log time 
structure supports queries log log log time worst case insertions log log log time amortized deletions log time amortized 
arge gave structure supports queries log time worst case insertions log time amortized deletions log time amortized arbitrary fixed constant 
structures linear space 
basically store edges subdivision interval tree constructed projection suggested structure answer vertical ray shooting queries problem finding edge hit ray emanating direction query point answering vertical ray shooting query face containing easily log time 
interested problem dynamically maintaining planar subdivision disk number operations os perform query update minimized 
consider problem standard level model proposed aggarwal vitter 
model number elements vertices edges fit internal memory number elements disk block 
operation reading writing block external memory 
computation performed elements internal memory 
measures performance number os solve problem amount space disk blocks 
model goodrich designed linear space disk blocks static data structure store planar monotone subdivision query answered optimal logb os 
arge designed structure general subdivisions bounds 
goodrich developed structure answering batch queries logm os 
arge extended batched result general subdivisions see arge line dynamic setting sequence queries updates queries answered sequence operations performed 
hinrichs considered problem practical assumptions input data 
results known dynamic case 
agarwal designed linear space structure planar monotone subdivisions supports os worst case updates queries log log os amortized 
arge designed previously known dynamic structure general subdivisions 
structure uses linear space supports queries log os worst case insertions deletions log logb os amortized respectively 
results describe linear space dynamic structure point location general planar subdivisions 
struc ture supports queries log os previously known structure updated log os amortized 
structure considerably simpler 
main contribution structure called multislab structure dynamically maintaining set segments endpoints vertical lines segment immediately query point log os segments inserted deleted log os amortized 
structure previous efficient dynamic point location structure 
previous structure supported insertions log os amortized 
new multislab structure point location structure obtained essentially method previous structures multislab structure secondary structures interval tree segments projection axis 
rest organized follows 
section outline structure point location data structure similar previous structures 
section describe new multislab structure 
sections assume simplicity base interval tree static 
section describe rebalance base interval tree updates handle resulting reorganization secondary structures 
give section 
structure concentrate developing structure dynamic vertical ray shooting maintain segments segment hit ray emanating query point direction efficiently 
easy realize point location query easily answered additional log os vertical ray shooting query answered 
frequent trees 
trees objects stored leaves 
leaves level tree internal nodes children possibly root children 
trees satisfy constant leaf stores objects 
way node stored blocks tree storing objects height log log uses linear space 
refer tree cb tree 
normal tree tree structure 
tree height log node stored blocks search performed log os 
insertions deletions performed log os log split fuse operations nodes root leaf path 
basic idea structure previously applied agarwal arge similar main memory structures 
set edges segments stored level tree structure level interval tree external interval tree base interval tree tree coordinates endpoints segments possible value segments stored secondary structures associated nodes segment stored precisely node node associated vertical slab sv root associated plane 
internal node slab sv partitioned vertical slabs 
sb corresponding children separated vertical lines called slab boundaries dashed lines 
segment stored secondary structures associated highest node intersects slab boundary 
simplicity assume endpoints segments distinct coordinates leaf stores segments 
segments associated leaf simply stored blocks 
internal node sv set segments associated sv segments associated suppose left endpoint lies slab right endpoint lies node base tree left subsegment slab right subsegment slab middle subsegment spans 
answering query 
slab sr associated th th children respectively 
call subsegment left subsegment sr right subsegment portion lying 
sr middle subsegment 
refer 
denote set middle subsegments segments sv 
li resp ri denote set left resp right subsegments lie si 
store secondary structures 
multislab structure set middle segments 
ii left structure segments li right structure segments ri 
segment sv stored secondary structures multislab structure left structure right structure 
example segment stored multislab structure left structure right structure 
secondary structures constructed linear space internal node requires sv disk blocks 
turn means data structure requires disk blocks 
ray emanating point direction 
find segment hit search path length log root leaf sz contains internal node visited compute segment sv hit particular search find segment hit find vertical slab si contains search left right structures si find segments li ri respectively hit refer 
leaf segment sz hit computed testing segments sz explicitly 
query answered choosing lowest segment log segments way 
ideas due cheng agarwal showed left right structures implemented efficiently basically trees lemma agarwal lemma 
set non intersecting segments right left endpoints lie single vertical line stored linear space data structure vertical ray shooting query answered log os 
updates performed log os 
set sorted right left endpoints structure constructed os 
ri bi bi section show multislab structure implemented efficiently lemma 
constant set nonintersecting segments endpoints vertical lines stored linear space data structure vertical ray shooting query answered log os 
updates performed amortized log os 
lemma lemma imply structure answer queries log os logb os query secondary structures node root leaf path length logb 
ignoring updates base tree insertion deletion endpoints rebalancing updates performed logb os simply searching root leaf path find relevant node updating relevant left right structures multislab structures associated section discuss base tree updated amortized logb os 
way obtain main result 
theorem 
set non intersecting segments plane stored linear space data structure vertical ray shooting query answered log os updates performed amortized logb os 

multislab structure set non intersecting segments plane endpoints vertical lines 
bb 
si vertical slab bounded bi bi 
section consider problem maintaining structure disk blocks supports vertical ray shooting queries log os updates amortized log os 
data structure consist different data structures cases log ii log constant 
intuitively case discussed section maintain sorted lists segments pair slab boundaries 
number lists bounded log support queries efficiently 
intuitively case ii logarithmic method reduce problem log deletion problems show support deletions efficiently fact number structures created logarithmic method li max vi min max vi vi vi search successor lj 
crosses indicate elements lj 
show intervals spanned nodes tree 
bounded log 
case describe deletion structure section describe logarithmic method obtain fully dynamic structure section 
cases utilize structure supports efficient simultaneous searching sorted lists total size positive constant log os 
structure described section 
fact implement multislab structures nodes base tree data structure section log data structure section log 
total number segments stored 
increases bound queries multislab structure storing segments log log case see lemma bounds remain unchanged 
order ensure implement multislab structures correct case section section rebuild multislab structures operations performed structure 
adds amortized log os update bounds 
searching multiple sorted lists section describe structure supporting efficient simultaneous searching sorted lists 
lm total size assuming constant 
assume elements lists come total order aim maintain lists insertions deletions searching lists simultaneously supported log os 
structure idea utilized search single deletion multislab structure 
consider sorted list mlj stored blocks element augmented information list lj belongs 
structure consists tree list internal node tree maxj minimum maximum elements belong list lj stored subtree rooted subtree contain element lj maxj 
node tree store child list lj elements maxj elements stored blocks associated tree stored blocks 
find list lj successor lj query element search path 
vh root leaf augmented tree maxj know max lj return list lj 
find successor lj node vi maxj maxj simply returning successor stored vi ranges children vi 
refer 
node exists reach leaf vh having answered query lj maxj simply return successor elements lj stored vh 
easy verify correctly finds successor lj 
successors lists lj traversal root leaf path query answered log os 
updates performed straightforward manner similar tree 
insert delete element list lj search tree find leaf block containing perform update 
traverse path back root updating maxj values 
takes log os maxj updated os node rebalance tree case standard tree update split fuse nodes root leaf path required 
maxj values easily maintained os split fuse rebalancing performed log os 
data structure constructed set sorted lists 
lm forming list mlj pairwise merging lj lists binary tree fashion log os constructing tree bottom os 
total construction requires log os 
lemma 

lm sorted lists constant total size elements come total order 
exists linear space data structure supports simultaneous search successor query element lists log os supports insertion deletion element list lj log os 
data structure cane constructed log os provided li sorted 
case log section describe structure maintaining set non intersecting segments plane endpoints vertical lines constant vertical ray shooting queries answered log 
assume loss generality 
partition segments multislab lists contains segments left right endpoints vertical lines br respectively 
segments multislab list sorted increasing order respect left endpoint stored order btree disk 
maintain blocks contain segments 
call block full contains segments sparse contains segments 
multislab list 
dashed lines show partition segments blocks 
sampled segments slabs emphasized thick lines 
slab sk pair vertical lines br list obtained picking arbitrary segment block call sampling list slab sk 
define empty 
maintain pointers segments multislab sampling lists maintain sampling lists disjoint insertions deletions segments multislab list segment sampled slabs 
sr 
refer 
label segment sampled sk multislab list span slabs block contains segments unmarked segment block 
slab sk construct structure simultaneously searching sampling lists total order segments lists order intersections segments choosing utilize linear space structure lemma 
answer vertical ray shooting query find slab sk containing query point slabs easily os 
structure lemma answer query sample lists log os 
multislab lists turn result query answer query os answer block containing predecessor block case empty simply search directly os 
refer 
answer ray shooting query log os 
insert segment spanning slabs sr insert multislab list log os 
block containing full split blocks containing roughly half segments original block 
creates need updating pointers existing samples sampling new segments inserted sample lists corresponding lemma structures 
insertion update pointers segments multislab sample lists takes logb os total cost split log os 
amortizing cost insertions full block creation split handled amortized logb os 
deletions handled similar way fusing sparse blocks adjacent block splitting necessary case standard tree operations guarantee resulting blocks contain segments 
furthermore sampled seg ment slab sk deleted replace segment block requires deletion insertion lemma structure 
total deletes handled amortized logb os 
structure constructed set sorted multislab lists follows scan multislab lists construct corresponding sorted sampling lists os 
lists contain total samples 
apply construction algorithm lemma simultaneous searching structures slab total log os 
total construction data structure requires os 
lemma 
constant set nonintersecting segments endpoints vertical lines stored linear space data structure vertical ray shooting query answered log os 
updates performed amortized log os 
data structure constructed os provided segments sorted multislab lists 
note log query bound lemma log os 
deletion structure section describe structure supports ray shooting queries deletions set segments plane endpoints vertical lines 
section deletion structure 
numbers segments ranks segments sorted list shaded areas show blocking blocks 
thick lines samples slabs 
note segment sampled twice 
structure develop fully dynamic structure case log 
structure utilizes partial order non intersecting segments plane 
definition 
segment plane segment plane exists vertical line intersecting intersection intersection segments incomparable intersected vertical line 
segment sorting problem problem extending partial order total order 
arge lemma showed solve segment sorting problem segments log os 
sorted list segments stored list blocks 
sorted order remains valid deletions segments fact blocking remain unchanged deletions segments segments simply deleted blocks storing slab sk generate list segments crossing slab sk sampling exactly segment crossing slab sk block existing 
segments cross slab sk pick sample arbitrarily 
note way segment sampled slabs segment 
segments cross slab sk sure pick sample sample slab 
list represented tree store pointers segments structure uses linear space total size lists 
efficient segment sorting algorithm easy construct structure os 
logm perform vertical ray shooting query find slab sk containing query point logb os 
tree find answer query respect segments logb os 
answer query respect segments additional os simply inspecting segments blocks containing predecessor refer 
total answer query logb os 
delete segment block simply delete list appears sample replacing new sample segment crossing sk existing 
segments cross sk pick sample arbitrarily sure pick segment sample slab 
analyze cost performing deletions structure 
bound total number updates lists deletions need observations sampled segment list remains sampled segment deleted structure segment block sample slabs slab sk segments span slab sk 
follows fact sample segment slab segment sample slab alternative segments sample 
sampled segment block slab sk denoted sparse sample segments block span slab sk 
second observation sequence deletions delete samples sparse samples 
furthermore sequence deletions blocks distinct sparse samples slabs 
follows total number samples need updated sequence deletes 
update list requires update corresponding tree log os deletions require total log os lemma 
constant set nonintersecting segments endpoints vertical lines maintained linear space data structure deletion segments vertical ray shooting queries answered log os 
construction structure deletions take log log os total 
case ii log section describe structure maintaining set non intersecting segments plane endpoints vertical lines log vertical ray shooting queries answered efficiently 
structure uses deletion structure described section 
case log restate bounds lemma follows lemma 
constant log set non intersecting segments endpoints vertical lines maintained linear space data structure vertical ray shooting queries answered log os deletions performed amortized log os 
structure constructed amortized os 
preprocessing bound lemma follows derivation log logb logb log obtain structure external version logarithmic method described 
precisely partition log sets si store set si deletion structure section 
ensure number deletion structures log 
order able efficiently answer ray shooting query deletion structures sets si simultaneously slightly modify deletion structures 
precisely slab sk replace trees lists log deletion structures linear space structure lemma section simultaneously searching log lists total order segments lists order intersections segments choosing 
space structure linear deletion structures lemma simultaneous searching structures lemma linear space 
answer vertical ray shooting query find slab sk containing query point log os 
simultaneous searching structure slab sk answer query list structures log os 
answer query delete structures os log structures described section 
answer query log os 
order insert new segment determine smallest si simply insert rebuilding completely 
takes os discard structures 
si construct new deletion struc ture size sj new si set sj 
construction new deletion structure si requires updating simultaneous search structure lists 
precisely need delete bb segments old lists insert new segments new lists 
update requires logb os lemma 
lemma total insertion segment requires amortized logb os log 
charge cost segments sets 
si moved si 
segments sufficient charge os inserted segments 
si 
way segment charged moves set sj set si number segments inserted kx follows charged log kx times 
insertion requires amortized log os 
delete segment perform query locate deletion structure storing segment 
simply delete segment relevant deletion structure described section 
may result sampled segments deleted inserted lists 
update update corresponding simultaneous search structure log os lemma 
analysis structure section charged log os update list follows accounted cost updating simultaneous search structures 
deletion requires amortized log os 
construct structure initial set segments simply create single additional deletion structure os lemma 
structure merged structures queried updated separately 
limit number deletion structures log periodically rebuild structure half inserted segments deleted 
rebuilding cost os charged deleted segments 
lemma 
constant log set non intersecting segments endpoints vertical lines stored linear space data structure vertical ray shooting query answered log os 
updates performed amortized log os 
structure constructed amortized os 

rebalancing base tree section briefly discuss handle updates base interval tree 
efficiently weight balanced tree tree base interval tree tree node height leaves subtree rebalancing split fuse reorganization secondary structures performed os obtain amortized log update bound 
discuss perform rebalancing node splits result insertion new segments 
deletions handled standard way periodical global rebuilding entire structure 
consider node height leaves subtree split nodes splitting node nodes 
boundary new boundary parent parent number segments stored secondary structures kb respectively 
illustrates slabs associated affected split slabs side slab boundary get associated slab side get associated new slab boundary result segments secondary structures containing need inserted secondary structures rest segments need stored secondary structures 
furthermore result addition new boundary intervals containing need moved new secondary structures 
refer 
consider segments secondary structures construction secondary structures 
segment stored left right structure collect segments containing moved left right structures 
os scan left structure slab sk turn constructing list segments stay left structure sk list segments inserted left structure slab right boundary segments list automatically sorted coordinate intersection right boundary sk 
note lists segments inserted new left structure automatically sorted coordinate intersection merge lists list segments sorted coordinate intersection binary tree fashion log os 
similarly os construct sorted list segments stay right structures slab sk sorted list segments inserted right structure slab left boundary construct left right structures sorted lists segments move easily os total lemma 
construct multislab structures distin solid intervals need move 
intervals containing move parent intervals move parent cases 
case log simply construct multislab structures relevant sorted multislab lists os lemma note multislab lists containing just deleted 
case log simply directly construct multislab structures relevant segments os lemma 
constructed secondary structure os required 
consider segments segments stored left structure slab containing segments left endpoint slab containing need moved new left structure new slab left scan segments left structure os construct list segments stay old left structure list segments new left slab structure sorted coordinate intersection relevant slab boundary 
merge list segments collected os construct left structures os lemma 
similarly construct relevant right structures segments right structure slab containing segments collected os 
gets new slab multislab structure needs reconstructed 
distinguish cases 
case log simply scan multislab lists compute new sorted multislab lists kb os 
construct new multislab structure kb os lemma 
case log directly construct new multislab structures segments old multislab structure kb os lemma 
constructed secondary structures os required 

efficient dynamic point location data structure stores planar subdivision size linear space disk blocks supports insertions deletions amortized logb os queries log os worst case 
improves insertion bound earlier best known structure 
structure considerably simpler previous structures 
remains open improve query time logb os 

agarwal arge vitter 
efficient dynamic point location monotone planar subdivisions 
proc 
acm siam symposium discrete algorithms pages 
aggarwal vitter 
input output complexity sorting related problems 
communications acm 
arge georgiadis 
improved dynamic planar point location 
proc 
ieee symposium foundations computer science pages 
arge 
teh 
efficient point location persistent trees 
acm journal experimental algorithms 
arge procopiuc ramaswamy suel vitter 
theory practice efficient algorithms multidimensional batched searching problems 
proc 
acm siam symposium discrete algorithms pages 
arge 
efficient dynamic planar point location 
comput 
geom 
arge vitter 
external memory algorithms processing line segments geographic information systems 
algorithmica 
arge vitter 
optimal external memory interval management 
siam journal computing 
jung mehlhorn 
dynamic point location general subdivisions 
journal algorithms 
bayer mccreight 
organization maintenance large ordered indexes 
acta informatica 
cheng 
new results dynamic planar point location 
siam journal computing 

chiang preparata tamassia 
unified approach dynamic point location ray shooting shortest paths planar maps 
siam journal computing 
comer 
ubiquitous tree 
acm computing surveys 
ferragina mehlhorn meyer ramos 
randomized external memory algorithms geometric problems 
international journal computational geometry applications june 
edelsbrunner 
new approach rectangle intersections part internat 
comput 
math 
edelsbrunner guibas stolfi 
optimal point location monotone subdivision 
siam journal computing 
edelsbrunner maurer 
space optimal solution general region location 
theoretical computer science 
goodrich 
vitter 
external memory computational geometry 
proc 
ieee symposium foundations computer science pages 
mehlhorn 
new data structure representing sorted lists 
acta informatica 
kirkpatrick 
optimal search planar subdivisions 
siam journal computing 
overmars 
range searching set line segments 
proc 
acm symposium computational geometry pages 
tarjan 
planar point location persistent search trees 
communication acm july 
hinrichs 
planar point location large data sets seek seek 
proc 
workshop algorithm engineering lncs pages 
