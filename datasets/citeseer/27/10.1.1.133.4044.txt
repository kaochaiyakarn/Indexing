generating lyndon brackets 
addendum fast algorithms generate necklaces unlabeled necklaces irreducible polynomials gf sawada ruskey may running head generating lyndon brackets mail joe sawada sawada cs usyd edu au basser dept comp 
science madsen bldg university sydney nsw australia department computer science university sydney australia 
research supported nserc partial support czech ga cr iti project ln department computer science university victoria canada 
research supported nserc 
known lyndon words length construct basis th homogeneous component free lie algebra 
develop algorithm uses dynamic programming table efficiently generate standard bracketing lyndon words length constructing basis th homogeneous component free lie algebra 
algorithm runs linear amortized time time basis element 
single lyndon word table standard bracketing computed time 
keywords lyndon word free lie algebra lyndon bracket basis th homogeneous component generate dynamic programming fast algorithms generating necklaces unlabeled necklaces irreducible polynomials gf cattell outline new recursive framework generating necklaces lyndon words :10.1.1.6.3662
addendum framework generate lyndon brackets 
re iterate basic definitions complete discussion including examples background sections consulted :10.1.1.6.3662
necklace lexicographically smallest element equivalence class strings rotation 
prefix necklace 
lyndon word aperiodic necklace 
standard factorization lyndon word denoted pair lyndon words lm maximal length nonempty 
proposition factorization exists furthermore proper right lyndon factor maximal length lyndon word 
standard factorization lyndon words recursively mapped standard bracketing function 
lk denote set ary lyndon words length lk called lyndon bracket define length example bracketings occur applied illustrated 
lyndon brackets reutenauer demonstrate set standard bracketings lyndon words lk basis th homogeneous component free lie algebra alphabet size discuss applications numerical algorithms computations free lie algebras 
lyndon words finely homogeneous computations number occurrences alphabet symbol fixed free lie algebras discussed including computation non standard left bracketing 
know algorithms producing standard lyndon bracketing 
na ive implementation definitions gives algorithm running time bracketing improve bracketing integrating computation dynamic programming bracketing table fast algorithm generating lyndon words 
single lyndon word show table standard bracketing computed time 
algorithm incorporated combinatorial object server www theory csc uvic ca cos necklace section 
generating lyndon brackets section develop algorithm generating length lyndon brackets alphabet size equivalently basis th homogeneous component free lie algebra 
lyndon words generated constant amortized time computation reflects total amount change data structures time required print object algorithm problem generating words respective bracketing previously fast solution :10.1.1.6.3662
fundamental problem computing lyndon brackets find standard factorization arbitrary lyndon word 
duval describes linear time algorithm factoring word unique lyndon factors lyndon word applying algorithm word lyndon word 
restrictions factoring algorithm help factor lyndon word 
look approach finding standard factorization lyndon word 
na ive approach finding lyndon bracket lk test proper right factor starting maximal length lyndon word 
recall lm longest proper right factor lyndon standard factorization 
repeating process recursively factors arrive lyndon bracket stopping condition lyndon factor length reached 
duval algorithm test proper right factor lyndon word linear time 
worst case test performed proper right factor implies find initial standard factorization takes time done recursively right factor procedure print print split print split print function print brackets lyndon word worst case running time generate lyndon bracket 
significant improvement na ive algorithm observation 
lyndon word know ahead time standard factorization lyndon subword determining lyndon bracket done linear time 
ai 
aj subword define split starting position longest proper right lyndon factor 
notation recursive function displayed print lyndon bracket example split values lyndon word displayed 
value represents row number value represents column number value ranges entry split determines starting point longest proper right lyndon factor original lyndon word 
standard factorization 
observe value split defined recursively recurrence relation split ai aj lyndon word split 
key obtaining value split determine lyndon subwords embedded lyndon word 
done modifying algorithm generating lyndon words outlined algorithm :10.1.1.6.3662
algorithm parameter maintains length longest lyndon prefix 
find lyndon subwords maintain length longest lyndon prefix strings ai storing value pi values split lyndon word effectively replace parameter global array values pn 
note value maintains value old parameter new algorithm value pi updated similar manner original parameter pi value pi remains unchanged 
similarly pi ai lyndon word pi updated length 
exceptional case occurs pi 
case word ai assign value pi 
note extension string pi value pi remain unchanged 
values pt determine values split associated recurrence string ai lyndon word pi function shown result applying modifications algorithm :10.1.1.6.3662
note condition observed print bracket 
original algorithm test hidden function 
initial call algorithm values pi initialized 
array maintained globally copy original values local array restore original values iteration outer loop 
analysis algorithm prior recursive call linear amount done 
linear reflected loops update values pi split array copy algorithm runs constant amortized time means computation split values done linear time lyndon word generated :10.1.1.6.3662
procedure local array newline pi pi pi pi downto pi split split split algorithm generating lyndon brackets function takes linear time obtain theorem 
theorem algorithm generating ary lyndon brackets length runs amortized time 
small modification algorithm determine lyndon bracket lyndon word time 
done removing outer loop assignment array copies done recursive calls linear time 
dynamic programming approach yield improvement factor na ive algorithm 
authors bob teaching free lie algebras 
referees helpful comments 
finely homogeneous computations free lie algebras discrete mathematics theoretical computer science 
cattell ruskey sawada fast algorithms generate necklaces unlabeled necklaces irreducible polynomials gf journal algorithms :10.1.1.6.3662


duval factorizing words ordered alphabet journal algorithms 
combinatorics words cambridge university press 
kass computations free lie algebra philosophical transactions royal society london series 
reutenauer free lie algebras clarendon press oxford 

