checking race conditions file accesses appear computing systems matt bishop michael department computer science university california davis davis ca flaws due race conditions binding name object changes repeated occur programs 
examine type flaw unix operating system describe semantic method detecting possible instances problem 
results analysis previously undiscovered race condition flaw 

ordinary bugs misconfigurations prevent applications systems functioning cor rectly 
contrast security holes vulnerabilities enable user called attacker gain priv access data ability interfere exploitation 
research especially field intrusion detection draws characteristics attacks 
attacks exploit single vulnerability implying characteristics flaws interest 
focuses semantic characteristic class time check time tocttou flaws 
tocttou flaw occurs program checks particular charac object takes action assumes characteristic holds fact 
particular flaw distinguished lineage described pro gram analysis pa project research secure operating systems risos project subclass class timing synchronization flaws 
subclass tocttou flaws call tocttou binding flaws arise object identifiers assumed remain bound object 
results demon strate effectiveness semantic approach detecting tocttou binding flaws 
section shows problem severe worthy examination 
section describes characteristics tocttou binding flaws section presents tool detects tocttou binding flaws 
section demonstrates unsolvable nature general problem discusses approximate relative power different types analyzers 
final section page offers comments checking flaws dynamically logs 

demonstration problem analysis focuses application level programs operating system 
operating systems allow trusted user complete control system 
privileged user violates basic security design principles eases problems administration 
access users requires password mechanism privileged user delegates privilege set utilities 
unix operating system better known widely systems scheme :10.1.1.100.7314
delegation rights creates potential security problems analyzing utilities rights delegated provide insight vulnerabilities systems appear 
attacks exploit specific operating system kernel flaws exploit flaws utilities 
method locating flaws enable attacks detected pre 
privileged unix programs available commercially world wide web method allow sites verify software installation 
archetypal tocttou binding flaw privileged program unix operating sys tem arises setuid root program save data file owned user executing program 
program alter file user alter file spe cial privileges 
code typically looks access filename ok fd open filename null filename return write file program omit succeed effective uid process write file access appear computing systems access system call open system call root 
user executing program system call return open attempted 
fragment allows process write file user ing program 
object referred filename changes system calls second object opened access checked access object page checked 
passwd data access tmp ok 

example tocttou binding flaw 
scenario example tocttou binding flaw 
shows state system time access system call solid arrow indicates access refers tmp 
tmp passwd name distinct objects 
process open system call tmp deleted direct alias hard link passwd created named tmp 
open accesses data associated passwd opens tmp tmp passwd refer file 
shows dashed arrow indicating data read solid arrow indi name appear computing systems open 
unprivileged process write protected password file 
versions terminal emulation program arises logging sessions file 
xterm suffer flaw instance flaw occurs sunos hp ux systems 
program passwd allows user name password file parameter 
attacker gain access user accounts variant attack 
normal conditions passwd program takes steps 
opens reads password file get entry user closes password file 
creates opens temporary file called directory password file 
opens password file copies contents updating changed infor mation passwd tmp data passwd data 
closes password file renames password file 
passwd tmp data open tmp write 
page attack works follows 
suppose attacker write directory pwd attacker creates bogus password file named pwd rhosts entry localhost attacker remainder file copy real password file 
attacker specifies file password file calling appear computing systems passwd 
steps attacker wants directory containing password file pwd steps attacker wants directory containing password file target home directory belonging user attacked 
steps create rhosts allows attacker log target account authentication 
passwd program setuid target home directory irrelevant 
root lack privileges password file directory indirect alias symbolic link called link enable referent directory name changed 
sequence events augmented attacker actions follows 
passwd process opens reads link rhosts get entry user closes password file see 
attacker changes symbolic link link point target home directory target 

process creates opens temporary file called directory password file case link target see 
attacker switches link back pwd 

process opens link rhosts password file named command line copies contents updating changed information 
note target opened step see 
attacker switches link back target 

process closes link rhosts involves interaction file name link file descriptors involved renames link rhosts link target password file victim rhosts file see 
point attacker rlogin victim account 
summarizes attack 
page attacker home pwd rhosts attack called race condition lets attacker write file system 
program delivers mail writing recipient mailbox 
security check requires mailbox regular file symbolic link 
check lies tocttou binding flaw 
steps check 
box 
lstat system call get information file type protection mode mail 
mailbox regular file append letter mailbox appear computing systems root 
tocttou binding flaw lies steps 
shows state system time lstat system call 
mailbox file usr spool mail bishop regular file link open 
attacker home target rhosts passwd target continues 
attacker home pwd rhosts link 
attacker home target open passwd target rhosts pwd link rhosts pwd link rhosts rhosts read write passwd rhosts move passwd 


example tocttou binding flaw passwd 
usr spool mail bishop bishop email passwd password data usr spool mail bishop lstat usr spool mail bishop open usr spool mail bishop write 

race condition attack 

passwd password data open mailbox file file deleted page attacker new file name created 
file link system password file 
shows state system opens mailbox file opening link password file 
letter appended password file contains appropriate contents attacker log superuser password 
note appends altered exist 
appear computing systems syscall syscall 
graphical diagram programming interval 
syscall begins interval syscall ends 
root file created exist 
semantic characterization tocttou binding flaws tocttou flaw occurs events occur second depends 
dur ing interval events see certain assumptions results system call influence second 
action interval invalidates assump tions results second action may intended 
exploiting situation requires attacker act interval 
general term race condition captures race attacker trying invalidate assumptions second action occurs 
call existence interval programming condition interval programming interval 
having condition holds attacker able affect assumptions created program action 
condition conditions hold exploitable tocttou binding flaw 
environmental condition 
initial example access system call creates assumption user authorized alter file tmp 
open acts assumption 
programming condition holds 
attacker alter referent name tmp environmental condi tion holds exploitable tocttou binding flaw exists semantics tmp shows hold 
file directory attacker alter environmental condition hold exploitable tocttou binding flaw exist 
examples similar conditions 
page 
programming condition unix system provides different forms naming different semantics 
form file path name 
unix file system conceptually tree interior nodes directories leaf nodes files devices entities 
path name specifies path tree root target node 
access object path name kernel begins path name accesses component named path 
interior node contains location address node path 
penultimate node path contains location object object may retrieved 
con caching names addresses done name mapped object time 
second form file naming file descriptor 
file descriptors assigned file process basis bind directly object 
process requests file descriptor assigned object provides file path name object 
system maps address object returns file descriptor object 
file descriptor involve system wide object name path name kernel uses file descriptor local process access object directly 
notice difference way addresses resolve objects 
file path names resolved indirection requiring naming accessing object file addressed 
file descriptors resolved accessing file addressed 
corre multiply indirect pointers object pointers object 
difference binding determines pairs file system calls bind interval programming condition 
calls refer files descriptors binding file descriptor file changed second process 
refers file path name process alter binding name file environment allows 
observation defines pairs system calls allow tocttou binding flaws occur 
sequential system calls refer object file path name possibility tocttou binding flaw arises 
uses name second file descriptor call maps file path name descriptor tocttou binding flaw may arise 

file path name exactly component parent node implicitly added path component 
single exception root node parent 
appear computing systems page file descriptors maps name file descriptor second uses ity tocttou binding flaw arise 
path names indirect pointers interior pointers may switched 
file descriptors direct pointers subject 

environmental condition goal analyzing environmental condition algorithmic technique determine assumptions implied call hold interval created programming condition 
race condition exploited 

object may change ways alteration binding name object alteration object 
consider file occurs system calls causing programming condition hold 
system call refers object second refers object 
partition set users subsets set trusted users alter binding interval untrusted users 
binding file object trustworthy member change binding interval 
define boolean function follows refer path components 
lemma 
directory object arbitrary object 
proof induction appear computing systems true alter binding object interval false basis 
binding name directory object altered refers new object binding name altered 
binding name object altered binding altered 

hypothesis 
page induction step 
consider 
binding changes binding object induction hypothesis proving claim 
lemma 
indirect alias path 
proof indirect alias semantically equivalent path contains 
result follows immediately observation lemma 
significance lemmata implications binding interval 
programming interval name object referenced system calls true exploitable tocttou binding flaw exists 
lemmata suggest determine value object unix model files owner object trusted object world writable 
group contains members trusted object group writable 
test trustworthiness binding simply check conditions component path name file 
object written current contents object irrelevant deleted 
case trailing component object need checked object read altering current contents file sufficient exploit race con dition 
case object trustworthy 

prototype implementation analysis static analysis tool scans program source code looking potential tocttou binding flaws 
different computer systems different environments analysis program system environment result invalid different system 

system specific semantics may modify rule example sunos solaris irix hp ux system object directory sticky bit set component path name exists directory may world writable 
semantics sticky bit context owner object may delete directory 

system constraints may require checking 
parent directory sticky bit set sticky bit semantics described previous footnote ownership permissions checked 
appear computing systems page static tool report intervals line numbers programming condition holds 
human analyst check environmental condition hold interval specific system software installed 
static analyzer parses input program builds control dependency graph data flow graph 
control dependency graph analyzer determines potential program ming intervals data flow graph analyzer determines arguments system calls create interval 
specifically system calls file names static analyzer determines argument uses file name file descriptor analyzer determines file name bound descriptor descriptor created 
pointer aliasing complicates data flow analysis 
pointers behaved initialization identifies variable pointer refers pointers ill behaved determining referent requires complete knowledge memory specific data values 
essence requires pointer evaluated program executes 
complex problem program interact environment 
example suppose system call access file tmp second refers tmp 
refer object programming interval exists 
determined knowledge process current working directory 
adding direct indirect aliases complicates matters 
prototype tool checks programs written sunos solaris versions unix operating system 
availability systems environment dictated choice 
sev eral simplifying assumptions sped development prototype proof concept program 
bounds programming intervals constitute simplifying assumption 
analysis section show types bounds system calls file names initial system call uses file name terminal descriptor initial system call uses file descriptor terminal name 
complexities tracking path names associated objects assigned file descriptors analyzer assumes system calls bounding programming interval involve path names 
selecting common library functions second simplification 
appear computing systems page library functions conceals underlying system calls bounding programming intervals 
interaction file oriented system calls uses standard library list functions includes functions library take path name argument invoke file ori system calls prototype analysis tool perl script understands function boundaries local blocks language dependencies interprocedural analysis 
prototype analyzer uses pattern matching source code approximate generating scanning call dependency graph 
data flow analysis assumes file path name arguments lexically identical system calls 
prototype detects char creat chown char creat chown arguments lexically different 
analyzer run sendmail version sendmail successfully attacked past 
output appendix 
analyzer reported possible pro gramming intervals manual analysis met programming condition 
appropriate environmental conditions appropriate security policy elements allow unauthorized actions see appendix 
particular allows users violate common element site security policies adding permission allowing attacker read users files mail 
appendix shows sample attack 

analysis limits arbitrary program consider existence exploitable tocttou binding flaws program property 
property holds computable program 
rice theorem set programs property holds undecidable :10.1.1.35.997
command nm lists system calls object files externally defined labels 
appear computing systems page generic decision procedure exists determine programs type exploitable tocttou binding flaw 
consider unix programs exhibit programming condition environ mental condition 
set exploitable tocttou binding flaws program set exploitable tocttou binding flaws analyzer reports pro gram 
analyzer precise respect program 
exploitable tocttou binding flaws reported analyzer deficient respect program 
exploitable tocttou binding flaws reported conditions really exploitable race conditions ana excessive respect program 
analyzer incomplete 
deficient excessive analyzers exist trivial examples analyzer reports exploitable tocttou binding flaws analyzer reports pair system calls causes exploitable tocttou binding flaw 
determining analyzer precise incomplete requires examining conditions detail 
programming condition requires detection sequential system calls check property second act property 
fact system call may simply gather information checked 
precise nature check depends needs action programmer example access permission may checked access performs check stat obtains file information checked 
distinction system calls check system calls product program example program lists file attributes call stat obtain information program call stat check authorization access 
precise analyzer require means determining calls checks uses environmental condition complicates 
set system calls bound programming interval analyzer report possible programming intervals pro gram 
interaction environment potential intervals creates problems trustworthiness file accessed 
environment controls interpretation name file system calls 
file aliases direct indirect low level appear computing systems page representation secondary storage add complexity 
analyzer informa tion available 
short precise analyzer requires complete representation environment induced file system knowledge pairs system calls required checks uses 
information available practise 
analyzer incomplete fails report exploitable tocttou binding flaws exploitable tocttou binding flaws reported erroneously 
manner occur clear occurs example data flows adequately traced 
prototype analyzer described previous section example incomplete analyzer 

static analyzers precise dynamic run time analyzers precise 
dynamic analyzer tests environment execution warns exploitable tou binding flaw occurs 
basically system call interfaces modified track arguments association file descriptors names 
successive system calls meeting pro gramming condition constitute programming interval trustworthiness object tested system calls 
object untrustworthy point exploitable tocttou binding flaw exists trusted user error 
test intro duce new tocttou binding flaws 
elaborate combinations trustworthiness possible 
object trustworthy system calls 
object changed interval exploitable tocttou binding flaw occurs 

object untrustworthy system calls 
exploitable tocttou binding flaw exists 

object untrustworthy initial system call trustworthy terminal system call 
trusted user changed components object name thy time interval 
initial system call time exploitable tocttou binding flaw existed 

object trustworthy initial system call untrustworthy terminal system appear computing systems page call 
trusted user altered component object path untrustworthy 
assumption specifically definition trusted user trusted user alter compo nent trustworthy object untrustworthy user trusted 
dynamic analysis takes run time environment account provides precise testing program 
may precise disk block numbers bypass virtually reasonable checks 
precise having modified system calls emu late actions kernel resolving file names considerable expense 
dynamic analysis prevent tocttou binding flaws exploited 
systems provide detailed audit capabilities 
assuming log includes entries expansion indirect alias analysis log entries file accesses detect pro gramming intervals initial environment check environmental condition holds 
exploitable race conditions detected 
name object known analysis logs indicate condition fact exploited 
detection security problems arising race conditions amenable testing desired properties 
property programming environmental con ditions exist simultaneously precise statement property vary program program conditions hold race condition may exploited 
conversely pro gram contains portions code programming condition holds analyst deter mine conditions exploitable race condition arise 
precise specifications needed detect problems varies program program generalized template ameliorate difficulty writing property program tested 
area active research 
studied tocttou binding flaws arising file system accesses 
processes interact network objects representation objects files 
similar technique case programming environ mental conditions area 
acknowledgment supported contractual arrangement united states air force 
special scot helped classify security holes rebecca tim jennings karl levitt ron olsson dan kevin appear computing systems page encouragement useful discussions anonymous referees gence thoughtful comments greatly improved 
availability tools 
library function implementing tests described section avail able ftp cs ucdavis edu pub sec tools tar gz 
release prototype race condi tion analyzer approved 
abbott chin webb security analysis enhancements computer operating systems institute computer sciences technology national bureau standards apr 
bach design unix operating system prentice hall englewood cliffs nj 
ii hollingsworth protection analysis project final report isi rr ad usc information sciences institute may 
bishop klein improving system security proactive password checking computers security pp 

denning intrusion detection model ieee transactions software engineering se pp 
feb 
lgm lgm advisory unix passwd may available demon uk may lgm lgm advisory unix mail jan available demon uk jan fink levitt property testing privileged programs proceedings tenth annual computer security applications conference pp 
dec 
garvey lunt model intrusion detection proceedings fourteenth national computer security conference pp 
oct 
computability addison wesley reading ma :10.1.1.35.997
ko fink levitt automated detection vulnerabilities privileged programs execution monitoring proceedings tenth annual computer security applications conference pp 
dec 
landwehr bull mcdermott choi taxonomy computer program security flaws computing surveys pp 
sep 
leffler mckusick karels quarterman design implementation bsd unix operating system addison wesley reading ma 
ritchie thompson unix time sharing system communications acm pp :10.1.1.100.7314
july 
saltzer schroeder protection computer systems proceedings ieee 
appear computing systems page scheifler gettys window system acm transactions graphics pp 
apr 
sun sendmail vulnerability cert advisory ca jan available cert org anonymous ftp 
sendmail vulnerability cert advisory ca nov available cert org anonymous ftp 
sendmail vulnerability supplement cert advisory ca jan available cert org anonymous ftp 
sendmail vulnerabilities cert advisory ca july available cert org anonymous ftp 
sendmail vulnerabilities cert advisory ca feb available cert org anonymous ftp 
appendix 
analyzer output appendix shows output analyzer run source code sendmail version 
files possible problems shown analyzer prints name file analyzes file contains potential problem 
lines numbers list potential race conditions lists line number system library call may cause condition common argument follows 
alias fopen fopen map map file conf nlist nlist deliver stat chmod filename main stat chdir open dev null queue open rename tf open rename tf rename rename tf rename fopen name fopen rename qf fopen rename qf rename rename qf unlink rename qf stat access filename stat fopen filename access fopen filename appear computing systems page recipient lstat stat filename lstat stat filename stat stat filename util stat stat fn lstat stat fn stat stat fn lstat stat fn stat stat fn appendix 
analysis output appendix describes analysis race conditions identified human analyst looking causes output appendix 
analyst assumes security policy site includes elements 
user change protection modes files owns 

user read search directory able discover files file names directory 

regular file read terminal non regular file may substituted regular file 

definition sendmail configuration file macro class set system administrators unprivileged users 
analyst assumes sendmail runs system privileges usually root 
race condi tions listed analysis reported intervals follows 
deliver stat chmod filename routine sends mail named file 
mail written file directory writable attacker environmental condition race condition exists 
attacker links file object desired permissions allow sender write object 
stat chmod attacker changes file name target file name 
line protection mode target file set protection mode original file 
action violates policy element 
main stat chdir stat determine ownership queue directory occurs chdir prevent appear computing systems page user running sendmail switching protected directory 
attacker switch referent name directory protected unreadable directory stat chdir sendmail list names files qf directory violating policy element 
environmental condition config mail queue directory usually usr spool untrustworthy 
stat access filename stat fopen filename line sendmail cf defines class contents file stat checks file regular file 
object named stat symbolic link stat reports object link refers 
link object linked untrustworthy envi condition immediately stat link object replaced link non regular file terminal 
file read accepts input terminal 
action violates policy element 
access fopen filename race condition modification previous change attacker changes untrustworthy object access checked object opened 
action violates policy condition 
reports appeared scanner programming intervals analysis alias fopen fopen map map file second function conditional entered function fails conf nlist nlist string argument printf main open dev null function opens read second function write second function reads return eof exactly reads dev null 
queue open rename tf queue open rename tf queue rename rename tf functions open temporary files open fails file locked temporary file renamed new tried queue rename fopen name appear computing systems page rename reached statement moves flow control top loop new file name read functions executed sequentially queue fopen rename qf queue fopen rename qf queue rename rename qf rename executed effective uid owner file different file contains invalid line 
cases name reset constrained queue file name different file name 
queue unlink rename qf routine returns unlink functions executed 
recipient lstat stat filename recipient lstat stat filename recipient stat stat filename functions executed 
util stat stat fn util lstat stat fn util stat stat fn util lstat stat fn util stat stat fn functions different arguments variable call 
appendix 
sample exploitation vulnerability exploitation vulnerability appendix look 
shows hypothetical result exploitation 
cat forward usr spool ls ld usr spool root dec usr spool ls ld usr spool rw root dec usr spool ls sail pwd shadow root nov pwd shadow pwd shadow won pwd shadow protection modes changed rw root nov pwd shadow 
letter appended named file 
alternative look bounced mail appended file dead letter delivery mechanisms 
appear computing systems page 
mail file usr spool world writable directory deleted 

mail file world readable 

shadow password file holds hashed passwords protected prevent users copying hashed passwords launching dictionary attacks 

attack tool sends mail root mail delivered tries replace usr spool pwd shadow 
replacement succeeds protection modes pwd shadow reset usr spool 
reported security problem author sendmail sendmail base distri bution fixes problem systems system call 
appear computing systems page 
