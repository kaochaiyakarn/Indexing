enhancing server availability security failure oblivious computing martin rinard cristian daniel daniel roy leu william jr computer science artificial intelligence laboratory massachusetts institute technology cambridge ma new technique failure oblivious computing enables servers execute memory errors memory corruption 
safe compiler inserts checks dynamically detect invalid memory accesses 
terminating throwing exception generated code simply discards invalid writes manufactures values return invalid reads enabling server continue normal execution path 
applied failure oblivious computing set widely servers linux opensource computing environment 
results show techniques servers invulnerable known security attacks exploit memory errors enable servers continue operate successfully service legitimate requests satisfy needs users attacks trigger memory errors 
observed reasons successful continued execution 
memory errors occur irrelevant computations failure oblivious computing enables server execute memory errors continue execute relevant computation 
memory errors occur relevant computations failure oblivious computing converts requests trigger unanticipated dangerous execution paths anticipated invalid inputs error handling logic server rejects 
servers tend small error propagation distances localized errors computation request tend little effect computations subsequent requests redirecting reads cause addressing errors discarding writes corrupt critical data structures call stack localizes effect memory errors prevents addressing exceptions terminating computation enables server continue successfully process subsequent requests 
result substantial extension range requests server successfully process 
memory errors bounds array accesses invalid pointer accesses common source program failures 
safe languages ml java dynamic checks eliminate errors example program attempts access bounds array element implementation intercepts attempt throws exception 
rationale invalid memory access indicates unanticipated programming error unsafe continue execution action recover error 
research groups developed compilers augment programs written unsafe languages dynamic checks intercept bounds array accesses accesses invalid pointers call compiler safe compiler :10.1.1.127.7825:10.1.1.152.1345
checks additional information layout address space distinguish illegal accesses legal accesses 
program fails check terminates printing error message 
failure oblivious computing note possible compiler automatically transform program throwing exception terminating simply ignores memory errors continues execute normally 
specifically program attempts read bounds array element invalid pointer read memory location implementation simply number mechanisms manufacture value supply program result read program continue execute value 
similarly program attempts write value bounds array element invalid pointer write memory location implementation simply discard value continue 
call computation uses strategy computation oblivious failure correctly access memory 
immediately clear happen program uses strategy execute memory error 
started project hypothesis programs continued execution produce acceptable results 
test hypothesis implemented compiler generates code obtained programs known memory errors observed execution versions programs 
summary observations acceptable continued execution targeted memory errors servers correspond security vulnerabilities documented vulnerability tracking web sites 
tested servers failure oblivious computing eliminates security vulnerability enables server successfully execute error continue serve needs users 
acceptable performance failure oblivious computing entails insertion dynamic bounds checks compiled program 
previous experiments safe compilers indicated checks usually cause program run factor slower version checks cases program may run twelve times slower 
results consistent previous results 
note servers implement interactive computations appropriate performance measure observed pause times processing interactive requests 
interactive servers application failure oblivious computing increase pause times 
continued execution memory errors produces completely acceptable results servers long failure oblivious computing prevents errors corrupting server address space data structures 
reason successful execution memory errors damage computation ways cause computation terminate addressing exception cause computation stuck infinite loop change flow control cause computation generate new unacceptable interaction sequence user devices corrupt data structures consistent remainder computation execute acceptably cause computation produce unacceptable results 
failure oblivious computing intercepts invalid memory accesses eliminates possibility computation may terminate addressing exception 
possible computation infinite loop sequence return values invalid reads practice appears eliminate problem server programs 
servers simple interaction sequences read request process request interaction return response 
long computation processes request terminates control appropriately flow back code reads request unacceptable interaction sequences 
discarding invalid writes tends localize memory corruption effects 
particular prevents access data unit buffer array allocated memory block corrupting data unit 
practice localization protects critical data structures widely application data structures call stack remain consistent program execute acceptably 
remaining issue potential production unacceptable results 
manufacturing values reads clearly potential cause subcomputation produce incorrect unexpected result 
key question incorrect unexpected result may propagate remaining computation affect results program 
initially targeted memory errors eventually boil buffer overrun problems processes request server allocates fixed size buffer certain circumstances fails check data fits buffer 
attacker exploit error submitting request causes server write bounds buffer overwrite contents stack heap typically injected code server executes 
attacks currently common source exploited security vulnerabilities modern networked computer systems 
estimates place total cost attacks billions dollars annually 
failure oblivious computing server invulnerable kind attack server simply discards bounds writes preserving consistency call stack critical data structures 
servers memory errors occur computations buffers irrelevant results server produces request 
failure oblivious computing eliminates addressing exceptions terminate computation server executes irrelevant computation proceeds process request subsequent requests successfully 
servers servers memory errors occur relevant computa tions buffers failure oblivious computing converts attack request trigger dangerous unanticipated execution path anticipated invalid input server standard error handling logic rejects 
server proceeds read process subsequent requests acceptably 
reasons failure oblivious computing works servers short error propagation distances error computation request tends little effect computation subsequent requests 
discarding invalid writes failure oblivious computing isolates effect memory errors data local computation request triggered errors 
result server short data error propagation distances errors propagate data structures required process subsequent requests 
servers short control flow error propagation distances preventing addressing exceptions terminating computation failure oblivious computing enables server return control flow path leads back read process request 
short data control flow propagation distances ensure effects memory error quickly way computation leaving server ready successfully process subsequent requests 
scope expectation failure oblivious computing best computations servers short error propagation distances 
failure oblivious computing enables programs survive fatal errors attacks continue execute interact acceptably 
failure oblivious computing appropriate multipurpose systems components prevent error component corrupting data components keep system operating components continue successfully fulfill purpose computation 
develop technology allows track results derived computations memory errors anticipate failure oblivious computing appropriate programs numerical computing programs single error propagate affect computation 
anticipate appropriate programs acceptable convenient terminate computation await external intervention 
situation occurs example development program typically producing useful results developers ability motivation find eliminate errors readily available 
see failure oblivious computing useful primarily deployed programs users need results program produces unable unwilling tolerate failures find fix errors program 
advantages drawbacks primary characteristic failure oblivious computing compared previous approaches continued execution combined elimination data structure corruption caused memory errors 
potential benefits include availability combination protection data structure corruption continued execution face memory errors significantly increase availability server 
combination enables server continue provide service legitimate users face repeated attacks matter infrequently triggered fatal memory errors 
security failure oblivious computing eliminates possibility attacker exploit memory errors corrupt address space server 
result secure system immune buffer overrun attacks 
minimal adoption cost net adoption cost developer recompile server compiler generates failure oblivious code 
need change programming languages write exception handling code modify software way 
failure oblivious computing applied immediately today software infrastructure 
reduced administration overhead challenging system administration tasks ensuring servers kept date constant stream potentially disruptive patches upgrades stream driven large part need eliminate memory error security vulnerabilities perfectly acceptable servers 
failure oblivious computing eliminates class errors may enable system administrators safely ignore patches purpose eliminate security vulnerabilities caused memory errors 
ideally administrators able patch systems primarily obtain new functionality need close security vulnerabilities programs fully serving needs users 
potential drawbacks unanticipated execution paths failure oblivious computing potential take program execution path unanticipated programmer prospect path producing unacceptable results 
possibility especially problematic errors unanticipated path long propagation distances relevant data control fails flow back appropriate point program 
drawback view unavoidable consequence mechanism intended increase resilience programs face errors errors occur precisely program encountered situation programmer anticipate deem worth handling correctly 
effect issue potential failure oblivious computing trigger effect developers 
variety settings range manufacturing personal relationships mere presence mechanisms may detect compensate errors effect reducing effectiveness participants setting quality system 
potential explanation participants start rely psychologically error recovery mechanisms reduces motivation eliminate errors 
deploying computing software development setting may reduce quality software developers able deliver 
obvious way combat effect setting ban failure oblivious computing development 
note possibility triggering effect restricted failure oblivious computing error recovery mechanism potential trigger effect 
contributions contributions failure oblivious computing introduces concept failure oblivious computing program discards illegal writes manufactures values illegal reads continues execute memory errors address space data structure corruption 
note passing potential program mere absence memory errors provides guarantee program fact operating acceptably 
experience presents experience failure oblivious computing enhance security availability range widely opensource servers 
results show standard compilation standard unsafe compiler servers vulnerable memory errors attacks exploit memory errors 
safe compilation compiler generates code exits error message detects memory error servers exit input triggers memory error denying user access services server intended provide 
failure oblivious compilation compiler generates failure oblivious code servers execute successfully memory errors attacks continue satisfy needs users 
failure oblivious computing improves availability security servers test suite 
explanation relating properties servers properties failure oblivious computing explain failure oblivious computing may general class programs 
example simple example illustrates failure oblivious computing operates 
presents somewhat simplified version procedure mutt mail client discussed section 
procedure takes input string encoded utf format returns output string encoded modified utf format 
conversion may increase size string problem procedure fails allocate sufficient space return string worstcase size increase 
specifically procedure assumes worst case increase ratio actual worst case ratio 
passed rare inputs large increase ratios procedure attempts write output array 
standard compilers writes succeed corrupt address space program terminates segmentation violation 
safe compilers mutt exits memory error start user interface 
compiler generates code program discards writes array procedure returns incompletely translated truncated version string 
mutt uses return value tell mail server static char utf utf const char size len char buf int ch int base line allocates return string 
allocated string small len safe length len 
buf safe malloc len len unsigned char ch xc goto bail xe ch xf ch xf ch ch xfe ch goto bail len len goto bail xc goto bail ch ch ch goto bail len ch ch base base ch ch chars ch chars ch ch base chars base ch ch base chars safe void buf buf return buf bail safe free void buf return string encoding conversion procedure mail folder wants open 
mail server responds error code indicating folder exist 
mutt correctly handles error continues execute enabling user process email legitimate folders 
example illustrates key aspects applying failure oblivious computing subtle errors real world programs contain subtle memory errors difficult detect testing code inspection errors significant negative consequences program users 
correct programs testing usually ensures program correct works exceptional operating conditions inputs 
failure oblivious computing seen way enable program proceed past exceptional situations return back normal operating envelope 
example illustrates failure oblivious computing facilitate return converting unanticipated memory corruption errors anticipated error cases program handles correctly 
implementation failure oblivious compiler generates kinds additional code checking code continuation code 
checking code detects memory errors memory safe implementation 
continuation code executes checking code detects attempt perform illegal access 
code relatively simple discards erroneous writes manufactures sequence values erroneous reads 
implementation uses checking scheme originally developed jones kelly significantly enhanced lam 
checking scheme maintains table maps locations data units struct array variable data unit uses table distinguish bounds bounds pointers 
implementation write continuation code simply discards value 
implementation read continuation code redirects read preallocated buffer values 
principle sequence manufactured values 
practice values determine loop conditions 
midnight commander see section example contains loop inputs searches past buffer looking character 
sequence generated values include character loop terminates midnight commander hangs 
generate sequence iterates small integers increasing chance values determine loop conditions computation hit value exit loop avoid nontermination 
zero usually commonly loaded values computer programs sequence designed return values frequently common values 
potential concern failure oblivious computing may hide errors detected eliminated 
help errors apparent compiler optionally augment generated code produce log containing information program attempts commit memory errors 
log may help administrators detect respond appropriately presence errors 
note hiding errors primary goals research technique programs resilient face errors reduce negative impact errors incentive find eliminate 
experience implemented compiler generates code obtained widely opensource servers known memory errors evaluated impact failure oblivious computing behavior 
servers key components linux open source interactive computing environment 
methodology evaluate behavior different versions server standard version compiled standard compiler version vulnerable memory errors server may contain bounds check version compiled cred safe compiler version terminates server error message memory error failure oblivious version compiled compiler 
evaluate aspects server behavior security resilience chose workload contains input triggers known memory error server input typically exploits security vulnerability documented organizations security focus 
observe behavior different versions workload failure oblivious version focus acceptability continued execution error 
performance chose workload standard failure oblivious versions execute successfully 
workload measure request processing time time required version process representative requests 
obtain time instrumenting server record time starts processing request time stops processing request subtracting start time time 
stability possible deploy failure oblivious version server daily part normal computational environment 
deployment ensure workload contains attacks trigger memory errors server 
focus long term acceptability continued execution failure oblivious version deployed server 
note servers pine midnight commander bounds pointers pointer inequality comparisons 
strictly speaking error intention programmer clear 
avoid having errors bounds check versions servers manually rewrote code containing inequality comparisons eliminate pointer comparisons involving bounds pointers 
ran servers dell workstation ghz pentium processors gbytes ram running red hat linux 
pine pine widely mail user agent mua distributed linux operating system 
pine allows users read mail fetch mail imap server compose forward mail messages perform email related tasks 
pine distributed red hat linux version 
version pine memory error associated failure correctly parse certain fields 
memory error pine displays list messages processes field message quote certain characters 
quoting implemented transferring field heap allocated character buffer display inserting character buffer quoted character 
part transfer length string increase additional characters 
procedure calculates maximum possible length character buffer fails correctly account potential increase produces length short messages fields contain quoted characters 
security resilience standard version pine writes buffer corrupts heap terminates segmentation violation 
bounds check version detects memory error terminates computation 
versions user unable pine read mail pine aborts terminates initialization mail file loaded user chance interact server 
user manually eliminate field mail file mail reader file editor pine read mail 
failure oblivious version discards bounds writes effect truncating translated field continues execute memory error enabling user process mail 
mail list user interface displays initial segment long fields truncation visible user 
user selects message different execution path correctly translates field 
displayed message contains complete field user read forward process message 
performance presents request processing times standard failure oblivious versions pine 
times milliseconds 
read request displays selected empty message compose request brings user interface compose message move request moves empty message folder 
performed request times report means standard deviations request processing times 
times milliseconds 
request standard failure slowdown oblivious read compose move request processing times pine milliseconds numbers indicate failure oblivious version substantially slower standard version 
pine interactive program performance acceptable long feels responsive users 
assuming pause threshold milliseconds kind interactive program clear failure oblivious computing degrade program interactive feel 
subjective experience confirms expectation pause times imperceptible versions 
stability stability testing period pine default mail reader 
activities included reading mail replying mails forwarding mails managing mail folders 
time pine process roughly new mail messages day spam filtering 
test pine ability successfully execute errors periodically sent email triggered memory error discussed section 
failure oblivious version pine successfully process large mail folder containing messages 
usage period failure oblivious version executed successfully errors perform requests 
apache apache server widely web server world survey web sites internet apache 
apache version contains certain circumstances remotely exploitable memory error 
memory error apache configured automatically redirect incoming urls set url rewrite rules 
rewrite rule contains match pattern regular expression may match incoming url replacement pattern 
match pattern may contain parenthesized captures may match substring incoming url 
replacement pattern may captures 
incoming url matches match pattern apache replaces url replacement pattern substituting referenced captures corresponding captured substrings incoming url 
apache processes incoming url uses stack allocated buffer hold pairs offsets identify captured substrings incoming url 
buffer contains room captures 
apache writes corresponding pairs offsets buffer 
security resilience standard version performs bounds writes corrupts stack terminates segmentation violation 
bounds check version correctly processes legitimate requests memory errors url triggers memory error 
point child process serving connection detects error terminates 
apache uses pool child processes serve incoming requests 
child processes terminates main apache process creates new child process take place 
mechanism allows standard bounds check versions apache continue service requests repeatedly inputs cause child processes terminate memory errors 
failure oblivious version discards bounds writes continues execute 
proceeds copy pairs offsets data struc ture 
apache uses data structure apply rewrite rule generate new url 
rewrite rule uses single digit captured substring substrings names attempt access discarded substring offset data 
failure oblivious version apache processes input correctly continues successfully process subsequent requests 
memory errors occur irrelevant data structures computations failure oblivious computing eliminates memory error affecting results computation 
apache isolates request processing inside pool regenerating processes bounds check version successfully processes subsequent requests 
overhead killing restarting child processes version vulnerable attack ties server repeatedly presenting requests trigger error 
investigate effect local machines load server requests trigger error 
client machine repeatedly fetch home page research project measured request throughput client 
workload failure oblivious version provides throughput roughly times bounds check version provides insecure standard version provides throughput roughly times failure oblivious version 
attribute slowdown bounds check standard versions process management overhead 
performance presents request processing times standard failure oblivious versions apache 
small request serves kbyte page home page research project large request serves kbyte file experiment 
requests local came machine apache running 
performed request times report means standard deviations request processing times 
times milliseconds 
request standard failure slowdown oblivious small large request processing times apache milliseconds stability months failure oblivious version apache serve research project web site www csail mit edu time period measured approximately requests day outside institution 
generated tens thousands requests machine served correctly 
anticipate continue failure oblivious version serve web site foreseeable 
time period periodically web server requests triggered vulnerability discussed 
failure oblivious version executed successfully attacks continue successfully service legitimate requests 
observed anomalous behavior received complaints users web site 
sendmail sendmail standard mail transfer agent linux unix systems 
typically configured run daemon creates new process service new mail transfer connection 
process executes simple command language allows remote agent transfer email messages sendmail server may deliver messages local users necessary forward messages sendmail servers 
versions sendmail earlier separate development threads memory error vulnerability triggered remote attacker sends carefully crafted email message sendmail daemon 
worked sendmail version 
memory error memory error occurs sendmail parses mail address 
procedure processes address character time transfer characters address fixed size stack allocated buffer 
transfer coded lookahead character treat character specially 
possible lookahead character case integer variable holds lookahead character set 
variable set contains character appears odd position third fifth 
sequence contiguous characters address skips block code writes lookahead character buffer skipping check see buffer space hold lookahead character 
writes character buffer check lookahead character 
execution platform performs sign extension character integer assignments attack message containing appropriately placed alternating sequence characters address cause write arbitrarily characters buffer 
security resilience standard version sendmail performs bounds writes corrupts call stack 
apparently possible attacker exploit memory error cause sendmail server execute arbitrary injected code 
bounds check version exits memory error initialization fails operate 
failure oblivious version vulnerable attack sent attack message discards bounds writes preserving integrity stack returns back continue parse email address 
step check input mail address long 
check fails throwing sendmail anticipated error case 
standard error processing logic sendmail rejects address enabling sendmail continue successfully process subsequent commands 
performance presents means standard deviations request processing times standard failure oblivious versions sendmail 
times milliseconds 
receive small request receives message body bytes long send small request sends message 
receive large request receives message body kbytes long send large request sends message 
performed test times obtain numbers 
request standard failure slowdown oblivious recv small recv large send small send large request processing times sendmail milliseconds stability installed failure oblivious version sendmail machines course days send receive hundreds thousands email messages 
time repeatedly sent attack message sendmail daemon continued attack correctly process subsequent sendmail commands 
messages correctly delivered problems 
memory error logs indicate sendmail generates steady stream memory errors normal execution 
particular time sendmail daemon wakes check incoming messages generates memory error 
memory error apparently completely disables bounds check version 
midnight commander midnight commander open source file management tool allows users browse files archives copy files folder delete files 
midnight commander vulnerable memory error attack associated accessing uninitialized buffer processing symbolic links archives 
midnight commander version experiments 
memory error midnight commander converts absolute symbolic links files links relative start file 
uses procedure build name relative link stack allocated buffer 
unfortunately buffer initialized 
multiple symbolic links directory component names links simply accumulate sequentially buffer midnight commander processes set links 
combined length component names exceeds length buffer strcat writes component names buffer 
security resilience standard version performs writes corrupts stack terminates segmentation violation 
bounds check version detects bounds access terminates 
failure oblivious version discards bounds writes enabling midnight commander continue attempt look data referenced file 
lookup fails apparently symbolic link name buffer correct 
anticipated case midnight commander code treats symbolic link dangling link displays user 
midnight commander continues successfully process subsequent user commands 
performance presents request processing times standard failure oblivious versions midnight commander 
copy request copies mbyte directory structure move request moves directory size mkdir request new directory delete request deletes mbyte file 
performed request times report means standard deviations request processing times 
times milliseconds 
numbers indicate failure oblivious version dramatically slower standard version 
midnight commander interactive program performance acceptable long feels responsive users performance results clear application failure request standard failure slowdown oblivious copy move mkdir delete request processing times midnight commander milliseconds oblivious computing program degrade interactive feel 
subjective experience confirms expectation pause times imperceptible standard failure oblivious versions 
stability authors uses midnight commander daily basis standard file manipulation tool 
stability testing period failure oblivious version midnight commander manage files 
periodically sessions attempted open problematic archive causing program execute resulting memory error went back midnight commander accomplish 
midnight commander performed problem time 
error log shows midnight commander memory error triggered blank line occurs configuration file 
verified error completely disabled bounds check version removed blank lines 
failure oblivious version hand executed successfully memory errors perform requests 
mutt mutt customizable text mail user agent widely unix system administration community 
descended elm supports variety features including email threading correct nfs mail spool locking 
mutt version 
described discussed section version vulnerable attack exploits memory error conversion utf utf string formats 
memory error mutt opens mailbox imap address converts mail folder name utf utf character encoding 
mutt allocates heap temporary character buffer hold utf encoded name 
utf utf conversion increase length name mutt allocates buffer twice long utf name hold converted utf name 
buffer general long conversion increase length utf name factor just factor 
appropriately constructed utf folder name mutt writes converted name utf buffer 
security resilience standard version performs writes corrupts heap terminates segmentation violation 
bounds check version detects memory error terminates user interface comes 
failure oblivious version discards bounds writes effectively truncating converted name 
note utf buffer may contain null characters folder name effectively null terminated reads buffer eventually return null 
mutt obtained converted folder name step place quoted escaped version name buffer pass name part command imap server 
imap server returns error code indicating folder exist mutt standard error handling logic handles returned error code mutt continues successfully process subsequent user commands 
performance presents request processing times standard failure oblivious versions mutt 
read request reads selected empty message move request moves empty message folder 
performed request times report means standard deviations request processing times 
times milliseconds 
request standard failure slowdown oblivious read move request processing times mutt milliseconds mutt interactive program performance acceptable long feels responsive users 
performance results clear application failure oblivious computing program degrade interactive feel 
subjective experience confirms expectation pause times imperceptible standard failure oblivious versions 
stability stability testing period failure oblivious version mutt process email messages 
configured mutt trigger security vulnerability described loaded 
mutt successfully executed resulting memory errors correctly execute requests 
able read forward compose mail problems executing memory error 
mutt process problems large mail folder containing messages 
discussion despite fact dynamic bounds checks theory potential substantially degrade performance servers overhead relatively small execution times tasks measured apparently dominated activities operating system functionality outside program 
failure oblivious computing affect efficiency activities amortized overhead relatively small 
servers interactive interactive tasks tolerate substantial execution time increases long system maintains interactive feel 
results show failure oblivious computing maintained acceptable interactive response times interactive tasks tasks substantial execution time increases 
servers monitor detects memory errors reboots server commits error provide obvious potential alternative failure oblivious computing 
apache example implements regenerating pool child processes 
net effect bounds check version apache terminate child processes memory error impairing ability continue service new requests 
comparison failure oblivious version downside performance degradation associated resulting increase process management overhead 
situation somewhat different pine mutt midnight commander 
programs initialize memory errors standard workloads 
mailbox contains message elicits memory error pine system configured mail folder name elicits memory error mutt configuration file contains blank line midnight commander bounds check versions exit initialization 
situation restarting restarted computations simply exit initialization 
errors triggered carefully crafted unusual inputs easily fairly rigorous testing process detected 
servers illustrate aggressively terminating computations memory error leave deployed systems vulnerable unanticipated inputs trigger memory errors persist environment 
sendmail memory error wakes check bounds check version simply unusable restarting 
note memory errors occur execution possible bounds check version find eliminate reproducible memory errors occur testing 
change terminating restarting sendmail prove problematic sendmail monitor avoid repeatedly presenting sendmail messages triggered memory error 
contrast failure oblivious version sendmail correctly executed memory errors correctly process subsequent messages failure oblivious version pine correctly processed mail messages headers elicited memory errors 
related note failure oblivious computing instance acceptability oriented computing 
acceptability oriented computing replaces concept program correctness set acceptability properties hold execution program remain acceptable 
programmer builds deploys acceptability enforcement mechanisms actions ensure acceptability properties fact hold 
case failure oblivious computing acceptability properties absence memory errors continued execution acceptability enforcement mechanism discards invalid writes returns manufactured values invalid reads 
memory errors failures failure recovery core concerns field computer systems inception 
discuss related areas 
variants extensions implemented variants extensions basic failure oblivious compiler 
include compiler implements boundless memory blocks discarding invalid writes generated code stores values hash table indexed data unit identifier offset 
corresponding invalid reads return appropriate stored values 
variant eliminates size calculation errors program logic acceptable program execute acceptably 
variant redirects bounds accesses back accessed data unit appropriate offset 
strategy may help related sets bounds reads return consistent values properly initialized data units 
experience indicates set servers works acceptably variants 
transactional function termination researchers developed technique protect servers buffer overflow attacks dynamically detecting buffer overflows immediately terminating enclosing function continuing execute code immediately corresponding function call 
results indicate cases program continue execute acceptably premature function termination 
experience consistent experience servers continue execute successfully memory errors simply discard bounds writes manufacture values bounds reads 
safe compilers builds directly previous research memory safe implementations :10.1.1.127.7825:10.1.1.152.1345
building lam implementation enabled apply failure oblivious computing directly legacy programs modification implementations property implementations may require source code changes 
feasible apply failure oblivious computing safe languages java ml simply replacing generated code throws exception response memory error 
safe implementations new code simply discard illegal writes return manufactured values illegal reads 
static analysis possible attack memory error problem directly source combination static analysis program annotations principle enable programmers deliver programs completely free memory errors 
techniques share advantage static guarantee program exhibit specific kind memory error drawbacks need programmer annotations possibility conservatively rejecting safe programs 
analysis able verify entire program free memory errors may able statically recognize accesses cause memory error remove dynamic checks accesses reduce dynamic checking overhead 
researchers developed unsound incomplete analyses heuristically identify potential errors 
advantage approaches typically require annotations scale better larger programs disadvantage unsound may genuine memory errors 
buffer overrun detection tools researchers developed techniques designed detect buffer overrun attacks occurred halt execution program attack take effect 
stackguard modify compiler generate code detect attacks overwrite return address stack stack shield performs range checks detect overwritten function pointers 
possible apply detection directly binaries 
purify instruments binary detect range memory errors including buffer overruns 
program shepherding uses efficient binary interpreter prevent attacker executing injected code 
key difference computing prevents attack performing writes corrupt address space enables program continue execute successfully 
rebooting traditional widely error recovery mechanism reboot system repair applied reboot necessary bring system back successfully 
mechanisms fast reboots checkpointing improve performance basic reboot process 
possible subdivide potentially recursively system isolated components apply partial reboot strategy granularity components 
promoting construction operating system collection small components microkernel architectures support application approach operating systems 
possible mechanisms software fault isolation finegrained hardware memory protection apply strategy selected parts monolithic operating systems kernel extensions 
experimental results show approach eliminate vast majority system crashes caused extensions 
helper agents useful facilitate clean termination reintegration restarted component back running system approach generalizes support arbitrary recovery actions 
may worthwhile recursively restart larger larger subsystems system successfully recovers 
failure oblivious computing differs designed keep system operating errors restarting 
potential advantages include better availability elimination time elimination vulnerabilities persistent errors 
rebooting hand may help ensure system stays closely anticipated operating envelope 
manual error detection recovery motivated part need avoid rebooting researchers developed fine grain error recovery mechanisms 
lucent ess switch ibm mvs operating system example contain software components detect attempt repair inconsistent data structures 
techniques include failure recovery blocks exception handlers may contain hand coded recovery algorithms 
apply techniques programmer anticipate aspects error understanding develop appropriate recovery strategy 
failure oblivious computing hand applied programmer intervention system may system oblivious completely unanticipated errors 
course generality cuts ways particular failure oblivious computing may produce appropriate responses anticipated errors 
view failure oblivious computing largely orthogonal application tailored recovery mechanisms failure oblivious computing may eliminate errors mechanisms handled 
data structure repair occupies middle ground 
traditional error detection recovery techniques requires programmer provide application specific information case data structure repair data structure consistency specification 
explicit recovery procedure consistency specification tied specific blocks code data structure repair may enable systems effectively recover unanticipated data structure corruption errors 
seemingly inherent brittleness complexity vulnerability errors attacks computer programs frustrating dangerous 
existing memory safe languages memory safe implementations unsafe languages may eliminate memory error vulnerabilities decrease availability aggressively throwing exceptions terminating program sign error 
results show failure oblivious computation enhances availability resilience security continuing execute memory errors ensuring errors corrupt address space data structures computation 
cases failure oblivious computing automatically convert unanticipated dangerous inputs data anticipated error cases program designed handle correctly 
result program survives unanticipated situation returns back normal operating envelope continues satisfy needs users 
major long term goals computer science understanding build robust resilient programs flexibly successfully cope unanticipated situations 
research suggests remarkably current systems may tial capacity exhibiting kind desirable behavior provide way ignore errors protect data structures damage continue execute 
authors shepherd david wagner anonymous reviewers thoughtful helpful comments 
research supported part singapore mit alliance nsf ccr ccr ccr ccr ccr ccr 
apache server exploit 
www securityfocus com bid discussion 
cert cc 
advisories 
www cert org advisories 
cnn report code red 
www cnn com tech internet code red ii 
elm 
www instinct org elm 
midnight commander exploit 
www securityfocus com bid discussion 
midnight commander website 
www ibiblio org mc 
mutt exploit 
www com fp fu html 
mutt website 
www mutt org 
website 
news com archives web server survey html 
pine exploit 
www securityfocus com bid discussion 
pine website 
www washington edu pine 
website 
www com 
security focus website 
www securityfocus com 
sendmail exploit 
www securityfocus com bid discussion 
sendmail website 
www sendmail org 

www com sk 
austin breach sohi 
efficient detection pointer array access errors 
proceedings acm sigplan conference programming language design implementation june 
bodik gupta sarkar 
eliminating array bounds checks demand 
acm sigplan conference programming language design implementation june 
bush pincus 
static analyzer finding dynamic programming errors 
software practice experience 
candea fox 
recursive turning reboot scalpel 
proceedings th workshop hot topics operating systems hotos viii pages schloss germany may 
card moran newell 
psychology human computer interaction 
lawrence erlbaum associates 
condit harren necula weimer 
ccured real world 
proceedings acm sigplan conference programming language design implementation june 
cowan pu maier walpole beattie wagle zhang hinton 
stackguard automatic adaptive detection prevention buffer overflow attacks 
proceedings th usenix security conference january 

intervention emergencies diffusion responsibility 
journal personality social psychology pages aug 
deming 
crisis 
mit press 
rinard 
automatic detection repair errors data structures 
proceedings th annual acm sigplan conference object oriented programming systems languages applications october 
adve lattner 
memory safety runtime checks garbage collection 
proceedings workshop languages compilers tools embedded systems june 
dor rodeh sagiv 
cssv realistic tool statically detecting buffer overflows proceedings acm sigplan conference programming language design implementation 
engler kaashoek james toole 
exokernel operating system architecture application level resource management 
proceedings fifteenth acm symposium operating system principles dec 
gray reuter 
transaction processing concepts techniques 
morgan kaufmann 
gupta jagadeesan koutsofios weiss 
generating audits fast way 
proceedings rd ieee international symposium requirements engineering 
gupta 
optimizing array bounds checks flow analysis 
acm letters programming languages systems march 
hamilton 
spring nucleus microkernel objects 
proceedings summer usenix conference june 
hastings joyce 
purify fast detection memory leaks access errors 
proceedings winter usenix conference 
lax royer williams 
ess tm switching system maintenance capabilities 
technical journal part july august 
jim morrisett grossman hicks cheney wang 
cyclone safe dialect usenix annual technical conference june 
jones kelly 
backwards compatible bounds checking arrays pointers programs 
proceedings third international workshop automatic debugging may 
kendall 
bcc run time checking programs 
usenix summer conference proceedings 
amarasinghe 
secure execution program shepherding 
proceedings th usenix security symposium august 

group inhibition intervention emergencies 
journal personality social psychology pages oct 
litzkow livny mutka 
condor hunter idle workstations 
proceedings th international conference distributed computing systems 
litzkow solomon 
evolution condor checkpointing 
lyu 
software fault tolerance 
john wiley sons 
mourad andrews 
reliability ibm mvs xa operating system 
ieee transactions software engineering september 
necula weimer 
ccured type safe retrofitting legacy code 
symposium principles programming languages 
rashid orr baron forin golub jones 
mach new kernel foundation unix development 
proceedings summer usenix conference july 
rinard 
acceptability oriented computing 
acm sigplan conference object oriented programming systems languages applications companion oopsla companion onwards 
session oct 
rinard roy leu 
dynamic technique eliminating buffer overflow vulnerabilities memory errors 
proceedings th annual computer security applications conference dec 
rinard 
symbolic bounds analysis pointers array indices accessed memory regions 
proceedings acm sigplan conference programming language design implementation june 
lam 
practical dynamic buffer overflow detector 
proceedings th annual network distributed system security symposium february 
seltzer small 
self monitoring self adapting operating systems 
proceedings sixth workshop hot topics operating systems 
keromytis 
execution transactions recover buffer overflow attacks 
technical report cucs columbia university computer science department september 
swift bershad levy 
improving reliability commodity operating systems 
proceedings nineteenth acm symposium operating system principles dec 
wagner foster brewer aiken 
step automated detection buffer overrun vulnerabilities 
proceedings year network distributed system security symposium 
wahbe lucco anderson graham 
efficient software fault isolation 
proceedings fourteenth acm symposium operating system principles dec 
witchel cates 
memory protection 
proceedings th international conference architectural support programming languages operating systems oct 
xi pfenning 
eliminating array bound checking dependent types 
proceedings acm sigplan conference programming language design implementation june 
yong horwitz 
protecting programs attacks invalid pointer dereferences 
proceedings th european software engineering conference held jointly th acm sigsoft international symposium foundations software engineering 
zhang yang gupta 
frequent value locality value centric data cache design 
proceedings ninth international conference architectural support programming languages operating systems nov 
