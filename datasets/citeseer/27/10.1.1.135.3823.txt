framework constructing scalable replica location services ann chervenak ewa deelman ian foster guy wolfgang hoschek adriana iamnitchi carl kesselman peter ripeanu bob heinz stockinger kurt stockinger brian tierney information sciences institute university southern california marina del rey ca department computer science university chicago chicago il mathematics computer science division argonne national laboratory argonne il cern european organization nuclear research ch geneva switzerland lawrence berkeley national laboratory wide area computing systems desirable create remote read copies replicas files 
replication reduce access latency improve data locality increase robustness scalability performance distributed applications 
define replica location service rls system maintains provides access information physical locations copies 
rls typically functions component data grid architecture 
contributions 
characterize rls requirements 
describe parameterized architectural framework name giga scale global location engine wide range defined 
define concrete instantiations framework different performance characteristics 
initial performance results rls prototype demonstrating rls systems constructed meet performance goals 
wide area computing systems desirable create remote read copies replicas data elements files 
replication reduce access latency improve data locality increase robustness scalability performance distributed applications 
system includes replicas requires mechanism locating 
define replica location problem unique logical identifier desired content determine physical locations copies content 
define replica location service rls system maintains provides access information physical locations copies 
rls typically operate isolation functions component data grid architecture 
components include gridftp protocol secure efficient wide area data transfer file transfer service reliable transfer files storage systems rls reliable replication service provides coordinated faulttolerant data movement rls updates metadata service containing information describes logical files higher level data management services provide functionality version management master copy management workflow management ieee application oriented data services implement application specific semantics policies preferences replica selection access 
rls design focus issues scalability reliability security concerns arise large scale distributed systems 
target systems may tens millions data items tens hundreds millions replicas hundreds updates second hundreds thousands storage systems require high reliability strong security 
replica location service application oriented data services data management services reliable replication service file transfer service gridftp metadata service data grid architecture including replica location service contributions understanding data grid systems data replication introduce notion rls distinct component characterize rls requirements describe parameterized architectural framework name global location engine wide range defined define concrete instantiations framework different performance characteristics 
initial performance results rls prototype demonstrating rls systems constructed meet performance goals 
requirements replica location service term logical file name lfn denote unique logical identifier desired data content 
function rls identify zero physical copies content specified lfn 
physical copy specified unique physical file name pfn gridftp url specifies location storage system 
concept unique logical identifier desired data content applicable context virtual organization vo brings users resources pursuit common goals 
discussions high energy physics climate modeling application communities lead identify rls requirements 
read data versioning files change change infrequently uniquely identified distinct versions 
assumptions apply universally characterize large class data intensive applications 
example scientific collaborations data prepared annotated published community 
act publication files immutable 

size system scale replica sites logical files total physical files replicas 

performance system handle queries updates second 
average response time milliseconds maximum query response time exceed seconds 

security rls concerned protecting privacy integrity knowledge existence location data individual storage systems protect privacy integrity data content 

consistency rls need provide completely consistent view available replicas sense rls query returns authorized client subset extant replicas returns list replicas includes false positives putative replicas fact exist requesting client may execute efficiently execute incorrectly 

reliability rls introduce single point failure site fails inaccessible entire service rendered 
addition local global state decoupled failure remote rls component affect local access local replicas 
replica location service framework framework designed meet requirements listed recognition different applications may need operate different scales different resources different tolerances inconsistent replica location information 
design allows users tradeoffs consistency space overhead reliability update costs query costs varying simple system parameters described detail table 
framework structured terms basic mechanisms independent local state maintained local replica catalogs unreliable collective state maintained replica location indices soft state maintenance rli state compression state updates membership partitioning information maintenance local replica catalogs local replica catalog lrc maintains information replicas single replica site 
lrc meet requirements contents 
maintain mapping arbitrary logical file names physical file names associated storage system 
queries 
respond queries lfn find set associated lfn 
pfn find set associated pfn 
local integrity 
responsibility lrc coordinate contents name map contents storage system implementation specific manner 
security 
information lrc may subject access control support authentication authorization mechanisms processing remote requests 
state propagation 
lrc periodically send information state state propagation algorithm rli discussed subsections 
replica index various collectively provide complete locally consistent record extant replicas directly support user queries multiple replica sites 
additional index structure required support queries 
framework structures index set replica location indices contains set lfn pointer lrc entries 
variety index structures defined different performance characteristics simply varying number amount redundancy partitioning see 
level rls layout 
hierarchical rls topology 
note top level nodes may redundant hold exactly mappings 
alternatively explained text may partition state updates namespace 
case top level nodes index different portions lfn namespace 
table parameters characterize rls structures examples possible values implications 
see text details 
number pl pr centralized non redundant partitioned index index includes partitioning redundancy highly decentralized index partitioning redundancy function partition lfn name space pl partitioning lfn 
rli sufficient storage record information potentially large number pl hash random partitioning 
load balance poor locality pl coll partitioning collection name 
poor load balance locality function partition replica site name space pr partitioning site name 
indices entries replica lfn responsible 
potentially high storage requirements pr ip partition domain name similar 
potential geographic locality degree redundancy index space redundancy replica indexed rli full index replicas rli 
implies partitioning redundancy space overhead replica indexed multiple 
redundancy space overhead function compress lrc information prior sending compression receives full lfn site information bloom receive summaries accuracy determined bloom parameters coll receive summaries collection distribution function determine lrc information send full periodically send entire state compressed relevant partial addition send periodic summaries updates higher frequency 
characterize wide range global index structures terms parameters pl pr 
summarized table parameters pl pr describe distribution replica information define information communicated 
parameter specifies total number replica location service 
pl determines type logical file name space partitioning information sent 
parameter pr indicates type lrc name space partitioning particular rli receives state updates subset portion 
indicates number redundant copies rli maintained replica location service 
soft state algorithm indicates type frequency updates sent 
parameter indicates compression scheme reduce size soft state updates 
redundancy partitioning soft state mechanisms possible framework summarize requirements met global replica index node rli 
secure remote access rli support authentication integrity confidentiality implement local access control contents 
state propagation 
rli accept periodic inputs describing state 
rli contains lfn entry associated lrc existing information updated replaced 
index node creates new entry 
queries 
respond queries asking replicas associated specified lfn returning information lfn indication lfn index 
soft state 
rli implement time outs information stored index 
rli entry associated lrc received updated state information lrc specified time interval rli discard entries associated lrc 
failure recovery 
rli contain persistent replica state information 
possible recreate contents rli failure soft state updates 
soft state mechanisms relaxed consistency argued strong consistency required rls allowing soft state protocol send lrc state information relevant incorporate information indices 
soft state information times periodically refreshed 
advantages soft state mechanisms 
stale information removed implicitly time outs explicit delete operations 
removal data associated failed inaccessible replica sites occur automatically 
second need maintain persistent state information state reconstructed rli failures periodic soft state updates 
various soft state update strategies different performance characteristics defined 
compression consider compression soft state information communicated lrc rli 
uncompressed updates communicate located lrc allow rli maintain index accurate modulo time delays changes occur lrc updates processed rli 
reduce network traffic cost maintaining compress lfn information various ways example hash digest techniques bloom filters :10.1.1.153.5656:10.1.1.20.2080
structural semantic information names logical collection contain group logical files 
membership partitioning information maintenance set compose rls changes time components fail new components join distributed system 
section describe mechanisms perform service discovery locate services rls 
discuss policies regarding partitioning index specified maintained 
mechanisms compatible emerging open grid services architecture 
lrc rli server maintains self descriptive metadata 
deployment time server configured virtual organization information components system 
bootstrap component sends service metadata known locations 
rls components service discovery mechanism obtain information components 
effect rli acts registry collecting information known answering queries 
rls client discover existence service description rli lrc statically part vo configuration service registry technology 
partitioned rls rls server discover policies define system behavior 
policies may initialized deployment time repartitioning may required servers fail enter rls 
promising approach consistent hashing namespace replica site partitioning 
consistent hashing load balanced low overhead mapping technique domain codomain requires minimal number changes codomain changes 
context significance small number directly affected departure rli need reconnect different 
implementation approaches illustrate application framework describing rls implementation approaches 
rls 
single rli 
lrc sends full uncompressed state single rli 
obvious disadvantage scheme single point failure 
framework parameters table case pl pr 
rls 
lfn partitioning redundancy bloom filters 
shows rls implementation includes redundancy copies index 
indexed replica site replica site replica site replica site information partitioned logical file namespace 
soft state updates compressed bloom filters summarize lrc state 
parameters pl partition lfn pr partial bloom filtering 
lf lf pfx lf pfu pfn soft state communications lrc state bloom site bloom site bloom site bloom site bloom site bloom site bloom site bloom site bloom site bloom site rli rli rli rli possible configuration rls implementation 
user queries concerning lf lf user queries concerning rls 
compression partitioning collections 
shows implementation includes compression partitioning logical file namespace domain specific logical collections 
framework parameters follows pl coll pr full collection name 
rls 
replica site partitioning redundancy bloom filters 
storage partitioning shown 
configuration represents parameters pl pr ip full unspecified 
rls 
hierarchical index 
multiple levels may included rls shown 
framework supports wide variety rls configurations adapted dynamically increased scalability performance reliability 
replica site replica site replica site replica site lf lf lf pfx pfu pfn soft state communications lrc state coll site coll site coll site coll site coll site coll site coll site coll site coll site coll site coll site coll site rli rli rli rli user queries concerning lc 
lc user queries concerning lca 
structure rls uses collection names partitioning function 
rls prototype implementation shows components rls prototype implemented tested solaris linux rh 
prototype relies grid security infrastructure globus io socket layer globus toolkit provide server front relational database 
server multithreaded configured act lrc rli 
clients access server simple rpc protocol soon replaced soap interface 
convenient replacement relational database backend implementation includes odbc open database connectivity layer api database access 
addition library implementation includes layer maps odbc mysql database relational database backend prototype 
database contains tables implement lfn pfn mappings 
client lrc rli server odbc mysql db client layered design lrc rli server 
server configuration includes information lrc soft state update frequency timeout information rli entries 
implemented complete partial soft state updates partitioning logical file namespace path name prefixes 
prototype uses static configuration service discovery maintenance partitioning information 
prototype currently implement compression 
performance rls prototype preliminary performance results prototype 
focus issues performance basic operations server overhead soft state updates 
shows performance create add delete query operations lrc server 
create operation defines lfn pfn mapping logical file name currently registered rls add operation registers additional mapping existing lfn 
delete operation deletes single lfn pfn mapping 
graph shows average operation times different lrc database sizes computed sequential operations 
measurements run machine dual ghz processors gb memory running redhat linux 
achieved rates queries second approximately updates creates adds deletes second operations issued single client thread 
database sizes studied entries operation times relatively constant include network latencies 
time sec number entries lrc time create delete add query lfn entry lrc query rli 
time sec number entries lrc add create delete time lrc send complete soft state update rli sending simultaneous updates 
read shows time complete soft state update perspective rli updating rli local area network 
soft state update timings linear size lrc 
lrc entries soft state update time seconds hours 
simultaneously update rli time complete lrc update increases approximately due concurrent updates rli 
update tests measure time lrc running dual processor machine described update rli sun blade dual mhz processors gigabyte ram running solaris 
second lrc tests slower sun ultra running solaris ram 
shows timings complete soft state updates wide area 
tests run european datagrid testbed 
tests show geneva pisa sending soft state updates single rli located glasgow 
graph shows wide area complete soft state update times increase size number sending updates 
show complete soft state updates potentially quite slow scale production settings 
results clearly indicate need techniques compression incremental updates part lrc state information sent rli 
soft state update time secs wide area soft state update performance number entries wide area complete soft state update performance 
lrc set experiments evaluate performance lcr server updating single rli server full state updates combination full state updates incremental updates 
incremental case updates performed update operations executed server time interval seconds elapsed whichever occurs 
number sql stmts server number updates second lrc rli incremental lrc incremental rli incremental lrc incremental number sql operations generated rli lrc servers complete incremental updates 
show number sql operations generated lrc rli size lrc entries 
types soft state updates number sql operations lrc increases linearly update rate lrc entries 
case complete soft state updates sent rli labeled incremental graph number bytes sent lrc number updates second lrc incremental incremental number bytes sent lrc rli complete soft state updates combined incremental soft state updates 
number sql operations update rli constant respect update rate entries lrc size complete updates corresponds total size lrc 
incremental updates combination occasional complete updates see fewer sql statements rli lower update rates lrc updated information sent incremental updates 
update rates lrc increase benefit performing incremental updates decreases sufficiently high update rates incremental updates generate sql overhead rli complete updates 
show total number bytes sent lrc rli updates schemes 
fewer bytes sent combined incremental full state update scheme number updates lrc receives clients small 
rate updates increases amount data sent servers increases linearly eventually surpasses amount data sent complete update scenario 
results show rls deployed servers need configured statically dynamically update scheme appropriate expected rate updates lrc 
results partitioning rli index space pattern matching logical file names 
recall partitioning reduce number bytes sent rli number sql operations rli needs perform cost increased cpu overhead lrc determine rli receive particular update 
shows cpu overhead lrc directly proportional number patterns lrc check determine receiving rli 
practice number patterns depend logical filename structure granularity rli partitioning 
cpu usage sec size pattern list cpu cpu overhead lrc perform pattern matching vs number patterns partitioned rli space evaluating additional partitioning methods addition current implementation uses regular expression matching 
envisage communities provide partitioning schemes application specific logical file namespaces 
related research done data replication distributed file systems databases 
primary emphasis maintaining consistency resolving conflicts replicated data 
differs systems restricting focus maintaining distributed registry replicas 
rls framework flexible easily tuned needs specific class applications 
rls stand service part larger data grid architecture may provide higher level services including consistent replication service 
cooperative internet proxy caches offer similar functionalities rls 
hierarchical caching proxy servers extensively analyzed 
distinct solutions hierarchies summary cache cache array routing protocol :10.1.1.153.5656
service resource discovery topic extensive research 
relevant current resource discovery systems resources uniquely identified attribute usually globally unique name chord tapestry gnutella freenet napster :10.1.1.111.1818:10.1.1.140.3129:10.1.1.10.4919:10.1.1.139.1580:10.1.1.105.3673
exception ninja service discovery service services identified sets attributes name built bloom filter subset attributes 
soft state techniques various internet services example rsvp :10.1.1.160.7901:10.1.1.146.1122
globus toolkit monitoring discovery service mds proposed hyper registry soft state concepts propagate information existence state grid resources 
previously developed replica catalog service designed provide consistent view replica location 
initial implementation centralized catalog integrated replica management tools reliably create delete replicas 
service seen extensive scalability limitations 
storage resource broker offers variety replica creation selection options managed logically centralized metadata catalog 
summary proposed flexible framework constructing scalable replica location services wide area environments 
framework allows tune behavior rls system scale performance reliability cost requirements particular classes applications 
initial performance results prototype implementation replica location service instantiation show excellent scalability local replica catalog component 
results demonstrate advantages techniques incremental soft state updates compression partitioning reduce update costs replica location index nodes 
initial performance results promising continue evaluate rls performance study various algorithms state updates compression partitioning 
grateful colleagues discussions topics covered particular andy koen laura pearlman mei hui su von welch mike wilde 
research supported part national science foundation contract itr griphyn mathematical information computational sciences division subprogram office advanced scientific computing research department energy contract eng data grid toolkit european union datagrid project 
material supported national science foundation cooperative agreement 
ast 

datagrid architecture 
eu datagrid project 

chervenak data grid architecture distributed management analysis large scientific data sets 
network computer applications 

foster kesselman data grid architecture 


allcock data management transfer high performance computational grid environments 
parallel computing 

foster kesselman tuecke anatomy grid enabling scalable virtual organizations 
international journal high performance computing applications 


chandy rifkin schooler announce listen global events develop distributed control systems 
concurrency practice experience 


clark design philosophy darpa internet protocols 
sigcomm symposium communications architectures protocols 
acm press 

raman mccanne model analysis protocol framework soft statebased communication 
computer communication review 


zhang rsvp new resource reservation protocol 
ieee network 


bloom space time trade offs hash coding allowable errors 
communications acm 


fan summary cache scalable wide area web cache sharing protocol 
ieee acm transactions networking 


foster physiology grid open grid services architecture distributed systems integration 
globus project 

hoschek unified peer peer database framework application scalable service discovery 
cern 

iamnitchi foster 
fully decentralized resource discovery grid environments 
international workshop grid computing 


karger consistent hashing random trees distributed caching protocols relieving hot spots world wide web 
symposium theory computing 
acm 

karger web caching consistent hashing 
computer networks 


foster kesselman globus toolkit grid architecture grid blueprint new computing infrastructure kesselman editor 
morgan kaufmann 


coda distributed file system 
linux journal 


breitbart korth 
replication consistency lazy helps 
th acm sigact sigmod symposium principles database systems 

tucson az 

models replica synchronisation consistency data grid 
th ieee symposium high performance distributed computing hpdc 

san francisco california 

gray dangers replication solution 
acm sigmod conference 


petersen flexible update propagation weakly consistent replication 
th acm symposium operating systems principles sosp 

saint malo france 

popek replication ficus distributed file systems 
workshop management replicated data 
ieee 

data replication mariposa 
th international conference data engineering 

new orleans la 
stockinger distributed database management systems data grid 
th ieee symposium mass storage systems th nasa goddard conference mass storage systems technologies 

san diego ca 

stonebraker mariposa wide area distributed database system 
vldb journal 


terry case non transparent replication examples bayou 
ieee data engineering 


thomas page management replicated volume location data ficus replicated file system 
usenix conference proceedings 


database replication techniques classification 
th ieee symposium reliable distributed systems 

germany 

wolman scale performance cooperative web proxy caching 
proceedings th acm symposium operating systems principles 

kiawah island resort sc usa 

wang survey web caching schemes internet 
proceedings acm sigcomm conference 


yu 
performance study collaborative method hierarchical caching proxy servers 
proceedings th international world wide web conference www 


ross hash routing collections shared web caches 
ieee network 

ross 
cache array routing protocol 
internet draft 


ratnasamy scalable content addressable network 
sigcomm conference 
acm 

stoica chord scalable peer peer lookup service internet applications 
sigcomm conference 
acm 

zhao kubiatowicz joseph tapestry infrastructure faulttolerant wide area location routing 
uc berkeley 

ripeanu foster iamnitchi mapping gnutella network properties large scale peer peer systems implications system design 
university chicago 

clarke freenet distributed anonymous information storage retrieval system 
icsi workshop design issues anonymity unobservability 


czerwinski architecture secure service discovery service 
mobicom 
acm press 

hodes architecture secure wide area service discovery 
wireless networks 

czajkowski grid information services distributed resource sharing 
th ieee international symposium high performance distributed computing 
ieee press 

hoschek database dynamic distributed content application service resource discovery 
international ieee symposium parallel distributed computing 


stockinger file object replication data grids 
th ieee intl 
symp 
high performance distributed computing 
ieee press 

baru sdsc storage resource broker 
proc 
cascon conference 

