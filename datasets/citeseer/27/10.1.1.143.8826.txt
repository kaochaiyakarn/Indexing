obtaining complete answers incomplete databases alon levy research att com consider problem answering queries databases may incomplete 
database incomplete tuples may missing relations part relation known complete 
problem arises contexts 
example systems provide access multiple heterogeneous information sources encounter incomplete sources 
question address determine answer specific query complete database incomplete 
novel sound complete algorithm answer completeness problem relating problem independence queries updates 
show important case independence problem ofthe answer completeness problem decided polynomial time best known algorithm case exponential 
case involves updates described conjunction comparison predicates 
describe algorithm determines answer query complete current state database 
show treatment extends naturally databases 
permission copy fee part material granted provided copies ate ot distributed direct commercial advantage vldb copyright notice title publication date appear notice copying permission large data base endowment 
copy ot republish fee special permission endowment 
proceedings nd vldb conference mumbai bombay india database usually assumed complete 
example relational database usually assume extension relation contains tuples need relation 
situations access databases may partial tuples may missing 
database partial meaning answer query needs reconsidered 
queries contain negation answers obtain guaranteed subset answers obtained database complete 
important question considered originally mot answer complete database incomplete 
queries contain negation need modify query answering algorithms guarantee obtain correct answers 
consider answer completeness problem 
deciding answer query guaranteed complete presence incomplete database 
illustrate problem examples 
example consider example access online databases information movies 
suppose relation schema contains relations movie title director year title theater hour oscar title year relation movie contains tuples describing title director year production movies 
relation show describes movies playing new york city movie tells hours movie plays 
relation oscar contains tuple movie won oscar award year won award 
suppose know relation movie complete year may missing movies earlier years 
relations show oscar known complete 
setting completeness answer depends query 
suppose query qr asks pairs title director movies currently playing new york qd select title director movie show title title 
answer query may incomplete 
intuitively answer incomplete missing tuples relation movie answer query may change 
hand consider query qz asks directors movies won select director movie oscar title title year year year 
answer query zs complete relation movie complete 
reason tuples movie third argument joined tuples relation oscar yield answer query 
movie complete part relation answer query complete 
furthermore answer qz guaranteed complete guarantee answer query uses negation qz correct 
query qs asks directors won won 
select director movie oscar title title exists select movie ml oscar director ml director mi title ol title ol year 
consider query qr 
general guarantee answer query complete database relation movie may incomplete check current state database complete 
note reasonable assume movie wins oscar year produced enforce explicitly query 
compare projection relation attribute title projection movie attribute title 
projection movie contains projection show answer qr guaranteed complete 
intuitively complete case really matters relation movie listings movies currently playing new york 
stated deciding answer obtain query complete important order know missing answers may search order answer queries involving negation sound manner 
main motivation stems context mediator systems provide access multiple distributed information sources tsimmis sims internet softbot ew information manifold lr 
practice sources systems access contain partial information 
instance system may access university repository contains publications authored faculty students university necessarily contain 
hand system may access database library congress books published past decades 
setting query important know sources combination sources provide answers query 
obtain answers need query multiple sources considerably affecting performance system 
experimental results reported etzioni showed identifying answer completeness queries enables pruning redundant accesses information sources significant speedups query processing 
answer completeness problem important contexts 
example long transaction database may incomplete cases parts database may temporarily inaccessible 
contributions 
show answer completeness problem completely characterized problem deciding query independent insertion update 
result obtain better understanding problem particular obtain novel sound complete algorithms deciding answer completeness 
results apply wider range cases considered mot problem ones guaranteed detect query answer complete 
show important case problem determining independence queries updates decided polynomial time best previously known algorithms case exponential 
case updated tuples described constraints built comparison predicates comparisons update specification query contain constant 
result provides polynomial time algorithm detecting answer completeness independent interest context determining 
describe algorithm determines current state database answer query complete 
completeness determined issuing additional queries database 
show treatment problem incomplete databases extends naturally case databases may incorrect contain superset tuples database problem determining answer query correct 
section defines answer completeness problem 
section shows relationship answer completeness problem query independence problem section presents polynomialtime algorithm deciding query independence 
section describes algorithm determining particular ase state section extends treatment partially incorrect databases 
section discusses related section concludes 
problem definition discussion consider queries relational databases involve select project join union built comparison predicates 
assume set semantics queries multisets 
analysis convenient notation conjunctive queries 
example query select director movie oscar title title year conjunctive query form qz director movie title director year oscar title year 
qz director called head query argument director distinguished variable 
distinguished variables query correspond attributes appearing select clause 
movie title dir year year show title theater hour atoms body query 
note equality predicates clause represented equating variables different atoms conjunctive query 
atom year said atom comparison builtin predicate case 
union conjunctive queries set conjunctive queries arity head 
specified assume query union conjunctive queries 
database instance query denote th result evaluating say query satisfiable database instance non empty set tuples 
queries qi qs said equivalent database instance qz 
length conjunctive query number non built atoms body 
conjunctive query said minimal remove non comparison atoms body obtain query equivalent partial databases database said partial tuples relation subset tuples relation 
formally situation modeled having sets relations virtual relations available relations 
virtual relations ri available relations 
rh 

extension available relation contains subset tuples extension virtual relation ri 
user poses queries terms virtual relations system access extensions available relations 
query virtual relations query processor evaluates query obtained replacing occurrence ri question address answer obtain query complete answer contains tuples obtained evaluating virtual relations 
clearly know ri query satisfiable answer may incomplete 
case know partially complete parts identical ri 
example continuing example relation movie may known complete tuples year 
example relation movie may complete titles movies shown new york 
formally specify local completeness relation real database constraint tuples guaranteed 
definition constraint relation arity xi 
variables standing attributes 
constraint relation conjunction atoms includes constants variables 
variables 
relations database relations comparison predicates 
tuple satisfies database instance conjunction resulting substituting ai xi satisfied denote complement 
note tuple 
extension relation database instance order satisfy constraint discussion local completeness statements consider constraints involve virtual relations comparison predicates 
definition local completeness constraint relation database instance includes relations said satisfy local completeness statement lc contains tuples satisfy results queries identical 


xn 
example local completeness statements example stated follows 
fact relation movie contains movies represented lc movie movie year 
represent relation movie movies currently playing new york lc movie movie show title theater 
statement lc movie movie show title show title theater theater 
says relation movie complete movies playing ny 
define answer completeness problem formally 
problem variants 
consider answer complete database satisfies local completeness statements second consider single database instance 
definition answer completeness set local completeness statements form lc fi virtual relations available relations 
query virtual relations result replacing occurrence ri query said answer complete database instance relations ii ii satisfies 
instance answer completeness considers answer query complete specific database instance available relations 
definition instance answer completeness set local completeness statements form lc ii virtual relations ii available relations 
query virtual relations result replacing occurrence ri 
query said answer complete database instance database extensions ii identical satisfies 
example consider example sets completeness information rl lc movie movie year lc movie movie show title theater hour query qi asking pairs title director movies playing new york complete may pairs movie produced 
answer qi complete rz 
query qz asks directors movies won complete rr specific database instance relation movie contains movies titles appear relation show answer qi complete independence queries updates insight underlying solution problem showing closely related problem detecting independence queries updates bcl elk ls 
problem independence queries updates determine answer query changes result insertion database result deletion database 
formally specify possible update specifying relation updated constraint describes set tuples relation may inserted deleted 
formally independence problem defined follows 
definition independence relation constraint arguments query independent insertion update denoted database instance database instance results adding tuples satisfy 
query independent deletion update denoted database instance database instance results deleting tuples satisfy 
example consider query qs asking movies playing new york received oscar past years qs title theater show title theater hour oscar title year year 
query independent deleting tuples relation oscar year 
oscar year holds 
hand query independent adding tuples relation show show time pm 
qs show hour pm hold deciding answer completeness query solution answer completeness problem showing problem equivalently translated problem detecting independence query insertion update 
establish connection problems section 
illustrate connection example 
example recall query qr asks pairs title director movies currently playing new york suppose local completeness information states relation movie complete movies produced relation may movies produced 
query answer complete 
see suppose insert tuples relation movie year 
case answer query qr change 
qi independent inserting tuples movie year 
hand suppose consider query asks directors movies won 
answer guaranteed complete update database movies produced change answer query 
theorem formalizes connection independence answer completeness 
theorem union conjunctive queries virtual relations comparison predicates set local completeness statements form lc rj cj ri rj query answer complete rj cj holds statement proof direction suppose rj cj holds statement database instance satisfies 
need show 

databases extensions databases di extension ri extension ri recall query occurrence rd replaced 
note dn 
prove induction di di 
claim follows 
consider case 
satisfies database obtained adding tuples satisfy extension ri 
ri holds database holds particular dl 
proof inductive step similar 
direction suppose independence assumptions hold 
suppose ri cl hold 
case database instance set tuples satisfy result adding tuples extension ri 
database extension extension ri extensions identical 
note satisfies answer complete theorem apply algorithms detecting independence bcl elk ls problem deciding answer completeness 
levy sagiv ls describe algorithm detecting independence checking equivalence queries 
describes algorithm adopts method ls decide equivalence checking 
procedure decide completeness query relations ri 
set local completeness statements lc ri ci procedure returns answer complete el new relation symbols 
define views vi 
follows xi arguments xi ei xi tci 
xi ri ri 
query occurrence ri replaced vi return equivalent 

algorithm detecting query 
problem checking query equivalence studied literature algorithm decide completeness host known results decide completeness 
example algorithms equivalence queries containing unions negations sy ls 
queries recursive equivalence problem known undecidable shm 
algorithms restricted cases cv cv sag ls 
database relations known satisfy integrity constraints functional dependencies tuple generating dependencies algorithms cm asu asu jk deciding equivalence 
obtain decidability results answer completeness problem 
theorem union conjunctive queries relations ri 
comparison predicates set local completeness statements form lc rj rj cj ri rj answer completeness problem decidable cases 
cj contains arguments rj constants 
head contains variables body cj com parison predicates 
constraints involve comparison predicates problem deciding answer completeness case theorem ii 
fact lower bound problem equivalence vdm implies lower bound problem 
proof theorem follows theorem decidability results query containment sy kh ls 
section consider common case cj include variable interval built atoms show deciding independence done polynomial time 
deciding independence efficiently section identify important practical case independence queries updates detected efficiently previous algo rithms 
consequently deciding answer completeness query done efficiently 
intuitively case detecting independence equivalent deciding updated tuples query mutually unsatisfiable general detecting independence requires detect updated tuples redundant query 
example adopted ls explains difference satisfiability redundancy 
example consider database containing relation person car age 
tuple relation person age car view person car age defined follows driver 
person allowed drive car driver license car age 
suppose query find adult drivers adult driver 

consider deletion update removes relation tuples 
clearly tuples part derivation answer query uses tuples incur driver age 
case say tuples involved update mutually unsatisfiable query 
clearly updated tuples mutually unsatisfiable query query independent update 
consider deletion update removes relation incur tuples involving non drivers tuples 
tuples set derivation query adult driver 
example database contains tuples alice driver alice bob tuple bob derive alice adult driver 
tuple bob redundant alice older allowed drive car car answer ad driver 
removing tuples change result query 
detecting redundancy expensive procedure detecting satisfiability 
example conjunctive queries comparison predicates time complexity detecting redundancy vdm checking satisfiability done polynomial time 
case consider involves variable interval queries updates 
particular conjunctive query variable interval query builtin atoms constant comparisons pairs variables 
update update updated tuples specified conjunction built atoms atom contains constant 
noted variable interval queries general class queries considered 
describes algorithm detecting independence variable interval queries updates 
theorem shows algorithm completely decides independence case polynomial time 
theorem conjunctive query relations el 
en comparison predicates 
suppose update deletion insertion relation el tuples satisfying constraint added el constraint el involving comparison predicates conjunct constant 
minimal query procedure return independent independent th running time procedure detect independence polynomial size proof sketch ls shown independent deleting el independent adding el update procedure detect independence conjunctive query relations mentioned xm conjunctive constraint arguments uses comparison atoms constant 
occurrence yl 
ym relation body mapping conjunctive query added subgoals satisfiable return independent 
return independent 

algorithm detecting independence query insertion update updates specified built predicates 
ous 
show independent deletion update el conjunct el 
consistent conjunct redundant query minimal 
order satisfiable comparison atoms conjunctive query force value variable interval ix 
interval may open closed may oo endpoints 
mapping variables constants intervals create database contains exactly tuples subgoal dq derive answer head variables order show conjunct el redundant need show derive answer tuple el 
cases 
satisfies remove affecting answer query independent deleting el 
second case satisfy comparison atoms compare variables possible modify database variables mapped new constant resulting database contains tuple may removed update 
furthermore mapping head variables mapping consistent comparison atoms proper subset tuples suffices derive answer 
proof show corresponding subset suffices derive answer 
answer completeness database instance section considered problem deciding answer completeness query examining local completeness information algorithm returned query true matter specific database instance long satisfies algorithm returned query answer complete may database instances answer complete 
section describe algorithm decides answer query complete database state 
algorithm submitting couple additional queries answers show answer guaranteed complete 
illustrate algorithm example 
example consider query asking pairs title director movies currently playing new york 
title director movie title director year show title theater time suppose show relation known complete movie relation movie movie assume functional dependency movie title director year holds title movie uniquely determines director year production check answer get current state database complete issue queries ql title show title theater time qz title movie title director year answer superset answer ql conclude answer query qi complete 
reason relation movie may complete contains movies currently playing ny tuples needed complete answer 
intuitively algorithm finding subset subgoals query provide superset complete answer query 
check conjunctive query formed rest subgoals complete superset 
describe algorithm need additional definition 
set variables query may functionally determine values variables 
definition functional determination conjunctive query assume equalities variables propagated imply additional equalities variables variable constant 
subset variables appear body variable said functionally determined 

exist variables yi 
functionally determined atom relation body variables 
yr appear positions ii 
ii respectively functional dependency xl 
holds 
example variables title theater time functionally determine variables query 
simplicity exposition describe algorithm conjunctive queries 
suppose set local completeness statements database instance query form 
conjunction comparison atoms query 
denote si maximal subset pl xl 
xn variables si functionally determine distinguished variables query answer complete cs subset appear si projection variables si subset si exists algorithm returns unknown 
denote set non comparison atoms si projection variables si 
set set variables appear si minimal subset functionally determines variables define queries si 
cs 
answer superset answer qi algorithm returns complete returns unknown 
projection may disjunction case union conjunctive queries 
example continuing example set si includes subgoal show title theater hour title determines director year relation show assumed complete 
set variables include title queries ql title show title theater time 
qz title movie title director year 
correctness algorithm theorem 
established theorem conjunctive query relations ri comparison predicates set local completeness statements form lc ri rj cj ri ii rj queries defined algorithm 
database answer complete 
proof sketch construction set answer contains superset projection complete answer variables 
follows answer complete contains subset subgoals answer contains answer qi insertions incomplete parts change join sr 
variables si functionally determine variables body answer guaranteed complete 
answer correctness additional advantage treatment answer completeness problem analogous treatment case incorrect information database 
case tuples relation superset tuples ri 
way defined relation locally complete define relation locally correct definition local correctness constraint relation database instance includes relations said satisfy local correctness statement contain tuples satisfying results queries identical 

xl cl question interested answer query correct partially correct database definition answer correctness set local correctness statements form ere fi virtual relations available relations 
query virtual relations fi result replacing occurrence ri isn 
query said answer correct database instance relations ii ii satisfies 
theorem showed answer completeness problem equivalently formulated problem independence query insertion update 
theorem shows problem equivalently formulated problem independence query deletion update 
theorem union conjunctive queries relations ri 
comparison predicates set local complete ness statements form ri rj cj ii rj ii 
query answer correct rj holds statement theorem algorithms detecting independence deciding 
theorem additional interesting consequence 
shown elkan independence deletion sufficient condition independence update 
query deemed answer correct answer complete 
importantly implies database partially incomplete partially incorrect determining detecting answer correct complete 
related motro mot considers problem determining answer correctness calls validity answer completeness presence incorrect incomplete databases 
approach describing complete valid parts database views 
query rewriting query complete resp 
valid views answer complete resp 
valid 
describes algorithm finds rewritings queries views guaranteed find exists 
complete algorithms rewriting queries views developed lmss finding rewriting query views shown necessary condition 
motro consider problem determining answer completeness specific database instance 
etzioni considered problem answer completeness order avoid redundant information gathering actions internet softbot system ew demonstrated experimentally value detecting answer completeness 
show answer completeness closed conjunction partial instantiation queries properties basis algorithm determining answer completeness 
show algorithm guaranteed detect holds 
allow existential variables local completeness statements semantics comparison predicates algorithms comparison predicates allowed appear 
reasoning local complete information related problem reasoning closed world assumption 
bulk previous topic see gin collection articles concerned logic reasoning closed world assumption appropriate derive efficient algorithms doing 
levy sagiv ls sound complete algorithms query independence queries unions conjunctive queries comparison predicates recursive queries 
theorem case considered specifically ls polynomial time algorithm query independence 
elkan elk describes algorithm query independence time complexity polynomial case considered theorem 
algorithms apply queries self joins occurrence relation query 
lsk algorithm pruning redundant sources sources completeness described 
question answer query complete statements addressed 
considered problem answering queries databases may incomplete incorrect algorithms decide answer query complete correct 
provided complete characterization problem relat ing problem determining independence queries updates 
determining completeness answer translated independence insertion updates determining correctness answer translated independence deletion updates 
consequently deal uniformly cases 
characterization yields better understanding problem complexity decidability particular yields novel sound complete algorithms answer completeness generalize previous treatments problem 
particular algorithm determining answer completeness query containment applied wider contexts presence integrity constraints database 
identified important case independence determined efficiently aside result independent interest yields efficient algorithm answer completeness problem 
algorithm considers current state database determine answer complete 
related question pose incomplete databases considered happens partial completeness completeness information changes 
particular answer query complete parts database assumed complete may complete anymore 
shown problem reformulated problem independence queries deletion updates giving uniform treatment problem considered 
interesting directions pursue 
consider ways specifying local completeness information captured statements allow 
interesting direction extend algorithm described section considering information completeness obtained issuing additional queries database 
oren etzioni dan weld discussions inspired 
arens chin chee chun nan hsu craig knoblock 
retrieving integrating data multiple information sources 
international journal intelligent cooperative information systems 
asu alfred aho yehoshua sagiv jeffrey ullman 
efficient optimization class 
