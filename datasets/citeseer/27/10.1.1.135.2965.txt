institut national de recherche en informatique en automatique project team triskell model driven engineering component software rennes theme com table contents 
team 
objectives 
objectives 
research fields 
project team presentation overview 
scientific foundations 
overview 
object oriented technologies distributed software engineering 
object oriented software engineering 
design pattern 
framework 
component 
contracts 
modeling uml 
model driven engineering 
mathematical foundations distributed reactive software 
transition systems 
non interleaved models 
application domains 
software telecommunication large distributed systems 
software 
kernel metamodeling 
umlaut ng extendible model transformation tool framework 

mutator mutation testing tool family oo programs 
requested toolbox requirement simulation testing 
new results 
contract aspect oriented design 
model driven engineering distributed real time embedded systems 
model composition weaving 
weaving behavioural models 
timed contracts components 
model testing 
validation mde context models model transformations testing 
model driven engineering 
weaving executability object oriented meta languages 
model transformations 
model typing improving reuse model driven engineering 
code generation uml models semantic variation points 
bridges models text hypertext 
contracts industry 
aosd europe network excellence 
artist network excellence 
families eureka 
mutation carroll 
mde standards aerospace carroll 
amadeus 
activity report inria 
activities 
international working groups 
ercim working group software evolution 
standardization omg 
collaboration foreign research groups 
dissemination 
scientific community animation 
journals 
jean marc quel 
pierre alain muller 
examination committees 
jean marc quel 
yves le 
pierre alain muller 
conferences 
jean marc quel 
jean marc quel 
yves le 
plouzeau 
pierre alain muller 
workshops 
teaching 
miscellaneous 
bibliography 
team scientific head jean marc quel professor rennes university administrative assistant david tr inria inria staff benoit research scientist inria didier research engineer inria faculty member universit de rennes plouzeau assistant professor universit de rennes visiting scientist pierre alain muller assistant professor universit de antoine assistant professor enst de yves le france telecom post doctoral fellow olivier february olivier december technical staff zo inria associated engineer inria project carroll motor carroll mutation june march jean philippe thibault inria project accord october june project lies october june lecturer tewfik september damien september phd students november franck council franck jacques klein inria christophe tayer martin dga october jean marie october inria jim steel inria 
objectives 
objectives keywords components mda uml aspects contracts design patterns frameworks objects requirements engineering scenarios software product lines test validation 

research fields broad software engineering consists proposing practical solutions founded scientific knowledge order produce maintain software constraints costs quality activity report inria deadlines 
field admitted complexity software increases exponentially size 
hand size software average multiplied years hand economic pressure resulted reducing durations development increasing rates modifications software 
face problems today mainstream approaches build concept component software 
assembly components possible build families products product lines common parts remaining opened new evolutions 
component systems grow complex mission critical increased need able represent reason assemblies components 
usually done building models representing various aspects product line example functional variations structural aspects object paradigm dynamic aspects languages scenarios neglecting course non functional aspects quality service performance reliability described form contracts characteristics deployment dominating field reactive systems distributed real time 
model driven engineering mde sub domain software engineering focusing reinforcing design validation test methodologies multi dimensional models 

project team presentation overview research domain triskell project reliable efficient design software product lines assembling software components described uml 
triskell particularly interested reactive distributed systems quality service constraints 
triskell main objective develop model methods tools help software designer obtain certain degree confidence reliability component assemblies may include third party components 
involves particular investigating modeling languages allowing specification functional non functional aspects deployed distributed systems 
involves building continuum tools specification elements line verifiers test environments line monitors supervising behavior components distributed application 
modeling languages associated tools appear quite open ended domain specific growing need tools building tools building software 
triskell original meta meta modeling approach allowing user fully define modeling languages including dynamic semantics associated environments including interpreters compilers eclipse 
avoid pitfall tools building tools sake triskell project goal explicitly connecting research results industrial problems technology transfer actions 
implies particular account industrial standards field eclipse modeling framework emf omg meta object facility mof unified modeling language uml corba component model ccm com net enterprise javabeans 
triskell frontier fields software field specification formal proof design informal organized best practices separation concerns aspects design patterns shelf components 
believe techniques possible improve transition worlds contribute fluidity processes design implementation testing software 

scientific foundations 
overview triskell project studies new techniques reliable construction software product lines especially distributed reactive software 
key problems components modeling development formal manipulation tools refine design code generation test activities 
validation techniques complex simulations models building standards considered domain 
project team triskell 
object oriented technologies distributed software engineering keywords objects uml contracts design patterns frameworks software components 

object oriented software engineering object oriented approach widespread analysis design implementation software systems 
rooted idea modeling origin simula object oriented analysis design implementation takes account incremental iterative nature software development large software system seldom developed scratch maintenance activities represent large share development effort 
object oriented standard approach objects instances classes 
class encapsulates single abstraction modular way 
class closed sense readily clients objects open subject extensions inheritance 

design pattern definition objects simple design understand complexity object oriented system known collaboration objects large systems understood level classes objects 
complex collaborations recurring patterns called design patterns 
idea systematically identifying documenting design patterns autonomous entities born late brought mainstream people beck ward coplien booch johnson 
known group 
main event emerging field publication book design patterns elements reusable object oriented software called gang gof erich gamma richard helm ralph johnson john vlissides 
today design patterns widely accepted useful tools guiding documenting design object oriented software systems 
design patterns play roles development process 
provide common vocabulary design reduce system complexity naming defining abstractions constitute base experience building reusable software act building blocks complex designs built 
design patterns considered reusable micro architectures contribute system architecture 
ideally capture intent design identifying component objects collaborations distribution responsibilities 
challenges addressed triskell project develop concepts tools allow formal description automatic application 

framework frameworks closely related design patterns 
object oriented software framework set related classes specialized instantiated implement application 
reusable software architecture provides generic structure behavior family software applications context specifies collaboration domain 
framework differs complete application lacks necessary application specific functionality 
considered prefabricated structure template working application number pieces specific places called plug points hot spots implemented implementations 
obtain complete application framework provide missing pieces usually implementing number call back functions functions invoked framework fill plug points 
object oriented context feature achieved dynamic binding operation defined library class implemented subclass application specific code 
developer customize framework particular application subclassing composing instances framework classes 
framework different classical class library flow control usually bi directional application framework 
framework charge managing bulk application application programmer just provides various bits pieces 
similar programming event driven applications application programmer usually control main control logic code 
design patterns document collaborations classes framework 
conversely framework may design patterns general purpose domain specific 
activity report inria design patterns frameworks closely related operate level abstraction framework software design patterns represent knowledge information experience software 
respect frameworks physical nature patterns logical nature frameworks physical realization software pattern solutions patterns instructions implement solutions 

component object concept provides bases needed develop software components szyperski definition generally accepted industry software component unit composition specified interfaces explicit context dependencies 
software component deployed independently subject composition third party 
component software relies assemblies components 
assemblies rely turn fundamental mechanisms precise definitions mutual partner components interaction means components non component environment runtime support net ejb corba component model 
components help reducing costs allowing reuse application frameworks components applications scratch product line approach 
important components offer possibility radically change behaviors services offered application substitution addition new components long time deployment 
major impact software lifecycle handle activities design component frameworks design reusable components deployment units validation component compositions coming various origins component life cycle management 
empirical methods real component composition models appeared emergence real component industry windows world 
methods clearly cause validation integration problems transposed critical systems see example accidental destruction ariane 
providing solutions formal component composition models verifiable quality notion trusted components especially relevant challenges 
methodological impact component development example maturity model defined sei cmm model worth attention 

contracts central trusted component notion idea contract 
software contract captures mutual requirements benefits stake holder components example client service suppliers including subcomponents 
contracts strengthen deepen interface specifications 
lines data type theory common way specifying software contracts boolean assertions called pre post conditions service offered class invariants defining general consistency properties 
contract reads follows client ask supplier service state class invariant precondition service respected 
return supplier promises specified postcondition done class invariant respected 
way rights obligations client supplier clearly delineated responsibilities 
idea implemented eiffel language name design contract available range expressive power programming languages java unified modeling language uml object constraint language ocl 
classical predicate contracts describe requirements modern applications 
applications distributed interactive rely resources random quality service 
project team triskell shown classical contracts extended take care synchronization properties services throughput delays 

modeling uml sciences increasingly resorting modelling master complexity modern software development 
jeff modeling broadest sense cost effective place cognitive purpose 
allows simpler safer cheaper reality reality purpose 
model represents reality purpose model abstraction reality sense represent aspects reality 
allows deal world simplified manner avoiding complexity danger irreversibility reality 
massive adoption unified modeling language uml industrial domains open new perspectives underlying ideas modeling evolve scale profitable 
predecessors omt booch proposed graphical syntax uml partially formalized meta model expressed uml model contains sophisticated constraint language called ocl object constraint language model level meta model level 
possible consider formal manipulations models capture aspects software technical side uml main dimensions data functional dynamic deployment process side ranging expression requirements analysis design framework models design patterns test implementation 

model driven engineering usually science model different nature thing models take map reality sun tse put centuries ago 
software linguistics model nature thing models 
software opens possibility automatically derive software model 
property known compiler writer quite popular omg initiative called model driven architecture mda 
omg built meta data management framework support mda 
mainly unique meta meta model called meta object facility mof library meta models uml software process engineering user base model 
mda core idea possible capitalize platform independent models pim automatically derive platform specific models psm ultimately code pim model transformations 
business areas involving fault tolerant distributed real time computations growing concern added value lies know business domain pim design know needed systems field transformation go pim psm 
reasons making complex go simple stable business model complex implementation include various modeling languages uml points views stakeholders deliver software variants platform heterogeneity rule reuse technical solutions large product lines fault tolerance security customize generic transformations compose reusable transformations evolve maintain transformations years 
wider context known model driven engineering 
activity report inria 
mathematical foundations distributed reactive software keywords labeled transition systems event structures partial orders 

transition systems labeled transition system lts directed graph edges called transitions labeled letters alphabet events 
vertices graph called states 
lts defines tuple init qm set states init initial state set events transition relation 
note definition set states lts necessarily finite 
usually term finite state automata designate lts finite set states events 
fact simplest models proposed 
model reactive usually distributed systems 
framework events represent interactions inputs outputs environment 
term input output lts io lts designate kind automata 
labeled transition systems obtained reactive systems specifications high level description languages uml 
construction lts specification done operational semantics language usually formalized deduction rules system 
simple languages process algebras ccs operational semantics defined axioms inference rules notations uml semantics defined pages 
performance reasons operational semantics rules directly subject transformations 
example way states encoded efficiency factor lts generation 
computation transformations lts resumed search fix point calculus graphs 
calculi performed explicitely implicitly exhaustive calculus storage lts 
classical algorithms language theory build explicitely finite state usually stored memory 
problems interested exhaustive construction storage lts mandatory 
partial construction lts strategies similar lazy evaluation functional programs part lts computed part needed algorithm 
similarly forget part lts previously computed recycle save memory space 
combination implicit calculus strategies allow study real size systems reasonably powerful machines 

non interleaved models known drawbacks ltss concurrency represented means behaviors interleaving 
lts called interleaved models 
interleaved models lot memory lost models represented complex 
partial order models partially solve problems 
partial order tuple represents set atomic events observable 
event occurrence action operation 
usually considered event executed unique process system 
partial order relation describes precedence relation events 
order relation obtained hypotheses processes sequential events executed process causally ordered 
ii 
communications asynchronous point point emission message precedes reception 
alphabet actions 
set process names project team triskell action placement function 
event labeling function partial order represent set executions system compact way interleaved models 
advantage partial order models represent explicitely concurrency events causally dependant executed concurrently 
lts situation represented interleaving 
linearization partial order total order respect causal order 
linearization partial order potential execution system represented 
partial order represent executions linearizations represent real alternative 
problem solved complete partial order model called event structures 
prime event structure partial order equipped additional binary conflict relation 
event structure usually defined tuple previously binary symmetric relation inherited causality 
conflict relation event structure defines pairs events appear execution system represented introducing alternative partial orders 
potential executions system represented event structures linearizations conflict free orders contained structure 
main advantage event structures represent time concurrency alternative partial order model 
think models closer human understanding distributed systems executions interleaved models 

application domains 
software telecommunication large distributed systems keywords uml distributed systems software engineering telecommunication test 
large scaled distributed systems developed telecommunications building new application scratch longer possible 
real need flexible solutions allowing deal time wide range needs product lines modeling methodologies managing reducing time market derivation validation tools 
triskell gained experience model engineering finds domain 
increasing software complexity reliability reusability requirements fully justify methods developed project 
main themes studied reliable software components composition uml developments validation test generation uml models requirement level design level 
research activity triskell focuses time development efficiency reliability 
main applications mainly concern reliable construction large scale communicating software object oriented systems testing 
reliability essential requirement context huge number softwares versions program may coexist large system 
hand software able evolve fast new features services frequently added existing ones hand occurrence fault system costly time consuming 
lot attention paid interoperability ability software properly 
think formal methods may help solving kind problems 
note formal methods integrated approach allowing system designer build software globally order take account constraints objectives coming user requirements 
activity report inria software testing aspect reliable development 
testing activities mainly consist ensuring system implementation conforms specifications 
efforts spent development phase real importance ensure system behaves properly complex environment 
put particular emphasis line approaches test observation dynamically computed execution 

software 
kernel metamodeling keywords mda mof uml model transformation 
participants franck zo franck jean marc quel pierre alain muller jean philippe thibault didier 
nowadays object oriented meta languages mof meta object facility increasingly specify domain specific languages model driven engineering community 
metalanguages focus structural specifications built support specifications operational semantics 
triskell developped language explore idea aspect oriented modeling add precise action specifications static type checking genericity meta level examine related issues possible solutions 
consists extension essential meta object facilities emof support behavior definition 
provides action language specify body operations metamodels 
action language imperative object oriented 
cases give precise semantic behavior metamodel simulated 
model transformation language 
constraint language 
development environment built language currently contains tools interpreter allows executed 
fully integrated eclipse syntax code 
eclipse outline view allows navigation model metamodel 
various import export transformations text xmi xmi version metamodel xmi xmi 
corner stone umlaut ng 
distributed eclipse project eclipse gmt project external visibility 
developped open source software terms eclipse public license deposited app de protection des programmes october 
project team triskell 
umlaut ng extendible model transformation tool framework 
keywords mda mof uml component model transformation patterns validation 
participants franck dr zen franck jean marc quel damien jim steel jean philippe thibault didier 
mda approach application modelling generation received lot attention months 
logical evolution uml unified modelling language usage supporting ideas models expressed formally defined notation cornerstone system understanding 
building systems organized set models imposing series transformations models organized architectural framework layers transformations 
example evolution allows engineers formalize automate pim platform independent model psm platform specific model 
resulting design lifecycle creates platform independent models successively refined concrete models platform dependent 
gives way best abstraction level problem 
main point addressed model transformation part problem 
triskell reuses expertise acquired tool umlaut improved deal mda specificities 
umlaut evolved umlaut ng generation order wider range applications 
addition manipulation uml models umlaut ng adds ability manipulate kind models kind repositories 
transformation run repository compatible metamodels 
metamodels defined mof 
umlaut ng composed transformation language compiler framework transformations written language 
allows complex model transformations 
major idea drove umlaut ng evolution transformation kind program possible apply mda approach 
central tool team umlaut ng helps investigating various research areas related model transformation works 
triskell mainly uml context demonstrate concepts 
example apply design patterns support design contract approach weave modelling aspects generate code simulate functional extra functional features system validation tools model 
concepts probably investigated 
umlaut ng predecessor distributed open source software 
running demonstrations available web pages inria fr mtl 
umlaut ng integrated eclipse environment umlaut ng growing community domain model transformation 
users cea enst swiss federal institute technology switzerland university germany umlaut ng projects collaboration industry carroll mutation airborne system cea development transformations useful test military application mda context families france transformation product lines continuation project cafe 
activity report inria 
mutator mutation testing tool family oo programs keywords net java test test mutation 
participants yves le benoit franck 
level confidence software component linked quality test cases 
quality turn evaluated mutation analysis faulty components mutants systematically generated check proportion mutants detected killed test cases 
software proposes specific oo mutation operators corresponding tools java programs mutator line mutation tools available java languages 
carried collaboration daniel ubs 

requested toolbox requirement simulation testing keywords test requirement simulation requirement testing textual requirements cases 
participants yves le dr zen franck 
objective requested toolbox offer mda transformation textual requirements requirements uml cases scenarios 
allows simulation requirements automated generation test objectives 
tools development 
transformation natural language requirements expressed language langage de description des case model enhanced contracts 
tool stable available 
currently tested mutation project 

system allows simulation case model enhanced contracts automated generation test objective 
version available 
precisely prototype designed perform automatic test generation uml requirements 
uses uml cases contracts precondition postconditions build execution model allowing valid sequences cases 
execution model test criteria generates test objectives sequence cases 
includes criteria functional testing criterion testing 
test objectives mapped test cases test templates 

new results 
contract aspect oriented design 
model driven engineering distributed real time embedded systems participants jean marc quel pierre alain muller christophe tayer 
domains automotive avionics real time embedded systems getting software intensive 
software longer produced single chunk engineers contemplating possibility lines section 
vision composite application viewed particular configuration components selected build time configured reconfigured run time 
software component exhibits provided required interfaces 
defines basic contracts components allowing properly wire 
real time embedded systems take account extra functional aspects timeliness memory consumption power dissipation reliability performances generally speaking quality service qos 
aspects seen contracts system environment users 
contracts obviously propagated component level 
key desiderata component development embedded systems ability capture functional extra functional properties component contracts verify predict corresponding system properties 
project team triskell contract practice taken constraint aspect interaction component supplies service component consumes service 
component contracts differ object contracts sense supply service component explicitly requires service contract component 
expression contract component provided interface depend contract component required interfaces 
instance throughput component doing kind computation data stream provided component clearly depends throughput natural people resort modelling try master complexity 
models software nature thing models opens possibility automatically derive software model 
quite popular omg initiative called model driven architecture mda 
aim show mda relation realtime embedded component software engineering 
building model driven engineering techniques show contracts expressed uml model exploited validation individual components automatically weaving contract monitoring code components validation component assembly including getting qos information inferred individual component contracts automatic translation constraint logic programming language 
report experience model driven architecture distributed embedded assembly pre defined components implemented low cost micro 

model composition weaving participants benoit franck 
aspect oriented modeling approach provides mechanisms separating crosscutting functionality core functionality design models 
crosscutting functionality described aspect models core application functionality described primary model 
integrated system view obtained composing primary aspect models 
model composition technique relies signature matching model element merged signatures match 
signature consists properties element defined uml metamodel 
technique proposed capable detecting conflicts arise composition 
implement composition algorithm chosen language 
language allows implementing composition adding algorithm body operations defined composition metamodel 
second tools compatible eclipse modeling framework emf allows eclipse tools edit store visualize models 
apparent similarities model composition model transformations lead question model composition special type model transformation 
answering question lead useful insights develop technologies leverage relationship composition transformation 
show number ways implement composition transformations 
give overview approaches terms generality ease ease implementation 
insights gained initial analysis suggest implement model composition model transformations 
important indicates research model composition leverage research model transformations 
done collaboration robert france sudipto ghosh raghu reddy colorado state university 
visit benoit franck 
visit supported inria artist network excellence 

weaving behavioural models participants jacques klein jean marc quel noel plouzeau 
languages aspect oriented programming aop aspectj popular concepts aop community join points pointcuts advice known 
time years aspect oriented software development aosd approach developing programming activity 
particularly early aspects initiative advocates management activity report inria crosscutting properties aspects early development stages requirements engineering architecture design identify impact aspects soon possible 
composition operators aspects exist development stages closely match standard aop concepts pointcuts advice 
propose automatic way weaving behavioural aspects scenarios 
kinds behavioural modelling languages aspect weaving performed syntax level 
problems relating design semantic aspect weaver hierarchical message sequence charts 

timed contracts components participants pierre alain muller plouzeau 
application domains contract specification software components need take time properties called extra functional properties throughput bandwidth consumption 
rigorous automated approach behavioral validation control software systems metamodeling model transformations process algebra 
combines semi formal objectoriented models formal validation 
triskell designed past years language extra functional properties software components 
language allows definition extra functional dependencies required services provided services 
team working formal definition language 
formalization effort aims supporting extra functional property specification verification complete chain model transformation validation implements model driven engineering processes 
major difficulty tackled correct transformation formal properties bound successive software models generated model transformation 
target platforms real time runtimes frameworks runtime model 
aims compatibility existing tool chain items external partners 
done cooperation project team partners artist network excellence 

model testing 
validation mde context models model transformations testing participants benoit franck jim steel jean marie yves le 
model driven software development techniques raise level abstraction developers conceive implement complex software systems 
ensure developed systems high quality important developers evaluate quality system models model transformations manipulate 
systematic study faults occur uml designs help develop better design evaluation techniques 
large body literature fault models system implementations code lack research fault models designs 
cases researchers reverse engineer code obtain views design 
goal develop fault models uml designs various levels abstraction just models code 
overlap fault models designs code 
completely new set fault types arise different uml diagram types represent different views system 
taxonomy faults occur uml designs 
describe set mutation operators uml class diagrams 
part collaboration sudipto robert france computer science department colorado state university 
trust models transformations allow automatic manipulations 
important feature models reuse 
necessary propose efficient techniques validate transformation programs 
program test process composed steps test data generation project team triskell execution validation results produced oracle 
execution specificities features depend program tested 
transformation programs need dedicated techniques data particularly complex models 
study original solutions model transformation testing 
introduce criteria generate test data 
discuss adaptation mutation testing allows evaluate efficiency data generated 
different issues oracle feature analyzed 
part collaboration research development department france telecom 

model driven engineering 
weaving executability object oriented meta languages participants pierre alain muller franck jean marc quel 
nowadays object oriented meta languages mof meta object facility increasingly specify domain specific languages model driven engineering community 
metalanguages focus structural specifications built support specifications operational semantics 
explore idea aspect oriented modeling add precise action specifications static type checking genericity meta level examine related issues possible solutions 
believe combination bring significant benefits community specification simulation testing operational semantics metamodels 
requirements statically typed meta languages rationales aforementioned benefits 

model transformations participants jean marc quel pierre alain muller franck zo damien didier jim steel 
model engineering attempts solve evolve complex software systems 
systems follow evolution new requirements technologies evolution faster faster compared business domain evolution 
propose reuse domain expertise independently underlying technology model transformation techniques 
domain specific languages model transformation generated significant interest model driven engineering community 
number approaches model transformation graph transformation techniques rule languages imperative languages 
offer comparative advantages different classes model transformation problems 
approach implementation language designed specifically transformation mof models patterns rules 
language adopts declarative paradigm users may concern solely relations models needing deal explicitly issues order rule execution pattern searching traversal input models 
language implementation demonstrated provided example highlight number language features solving problem simple object relational mapping 
approach architecture manipulating models independent specific metamodel 
development model transformations architecture supports proven techniques object oriented software engineering 
implementation functional programming specifies semantics interface accessing models 
approach mof level interface model manipulation 
associated programming language supports direct manipulation model elements metamodel structure dynamically extends set types available model transformation program 
methodological point view show model transformations capture implementation expertise business domain technology useful model develop complex transformations sound software engineering model engineering techniques 
illustrate practice transformations refactoring uml models 
activity report inria adopted qvt specification normalized scheme model transformation language different model transformation language paradigms exist near ranging imperative declarative including hybrid 
remains questionable model transformation specific languages compare general purpose languages terms applicability scalability robustness 
general overview different model transformation techniques including concept terminology presentation 
report specific experience applying executable meta language model transformation field 

model typing improving reuse model driven engineering participants jim steel jean marc quel 
object oriented languages deal objects described classes model driven development uses models graphs interconnected objects described metamodels 
number new modeling languages continue developed model paradigm model transformation general programming models 
single object approaches typing derived solutions object oriented systems metamodels model types clear notion polymorphism 
approaches lead brittle overly restrictive reuse characteristics 
contribution presents simple extension object oriented typing better cater model oriented context including simple strategy typing models collection interconnected objects 
simple example shown extended approach permits flexible reuse preserving type safety 
going forward presence founded type system models allow developers reason various model driven engineering artifacts interconnect models metamodels model transformations programs repository modelling tools 

code generation uml models semantic variation points participants franck jean marc quel 
uml semantic variation points provide intentional degrees freedom interpretation metamodel semantics 
interest semantic variation points uml family languages sharing lot commonalities variabilities customize application domain 
works propose reify various semantic variation points uml statecharts models avoid semantic choices tools 
various implementation choices 
line omg model driven architecture semantic implementation models processed source uml model seen pim provide target uml model psm semantic implementation choice explicit 
target model turn serve basis consistent code generation simulation model checking test generation tools 

bridges models text hypertext participants jim steel pierre alain muller jean marc quel 
bridge generate parsers editors dsls defined shape metamodels 
describe problems encountered ambiguities current specification discuss specification may fixed usable grammar driven tools 
platform independent web application modeling development context engineering 
web applications represented independent related models business hypertext presentation 
kind action language ocl java models write methods actions specify constraints express conditions 

contracts industry 
aosd europe network excellence keywords aspect oriented design 
project team triskell participants jean marc quel plouzeau yves le jacques klein olivier didier 
aspect oriented software development aosd supports systematic identification modularisation representation composition crosscutting concerns security mobility distribution resource management 
potential benefits include improved ability reason problem domain corresponding solution reduction application code size development costs maintenance time improved code reuse architectural design level reuse separating non functional concerns key business domain logic improved ability engineer product lines application adaptation response context information better modelling methods lifecycle 
aosd europe integrate research training dissemination activities members order address fragmentation aosd activities europe strengthen innovation areas aspect oriented analysis design formal methods languages empirical studies applications aosd techniques ambient computing 
integration development essential competencies aosd europe network excellence aims establish premier virtual european research centre aosd 
virtual research centre synthesise collective viewpoints expertise research agendas commercial foci member organisations vision pragmatic realisation application aosd technologies improve fundamental quality attributes software systems especially critical information society 
act interface centralised source information national international research groups industrial organisations governmental bodies access members enter collaborative initiatives 
existence premier research base strengthen existing european excellence area establishing europe world leader www aosd europe net project duration project budget project coordinator university lancaster participants university lancaster technical university darmstadt inria vub trinity college dublin university malaga katholieke universiteit leuven technion siemens ibm development laboratory 
artist network excellence keywords real time component models 
participants jean marc quel plouzeau pierre alain muller benoit didier 
strategic objective artist network excellence strengthen european research embedded systems design promote emergence new multi disciplinary area 
artist gathers best european teams composing disciplines forge scientific community 
integration achieved joint programme activities aiming create critical mass selected european teams 
artist network excellence embedded systems design implementing international interdisciplinary fusion effort create unique european virtual centre excellence embedded systems design 
interdisciplinary effort research mandatory establish embedded systems design discipline combining competencies electrical engineering computer science applied mathematics control theory 
ambition compete level equivalent centres usa berkeley stanford mit carnegie mellon production transfer knowledge competencies impact industrial innovation 
artist double core consisting leading edge research embedded systems design issues described document joint programme research activities complementary activities shared platforms staff mobility joint programme integration activities 
activity report inria activities pure research complementary efforts integration 
deep integration participating research teams 
structured clusters selected topics embedded systems design red 
teams may involved clusters 
double core joint programme activities spreading excellence 
complementary disseminating excellence available channels targetting industry students european international research teams 
building embedded systems design scientific community ambitious programme 
succeed artist build achievements experience artist fp accompanying measure www artist embedded org advanced real time systems 
artist provided opportunity test concept level integration clusters clusters artist originated actions artist 
building artist consortium associated structure culmination discussions ambitions elaborated artist 
artist addresses full range challenges related embedded systems design covering aspects ranging theory applications 
way artist perfectly line ist priority embedded systems particular focus area called system design 
triskell team part artist clusters modelling components cluster led bengt jonsson university sweden adaptive real time middleware led italy 
current cooperation topics components cluster various formalisms timed behaviour descriptions definition architecture interconnecting simulation verification platforms behaviours 
adaptive real time cluster triskell participating common definition quality service dictionary context middleware runtimes 

families eureka keywords cots uml architecture recovery methods patterns products family 
participants jean marc quel yves le jacques klein jean philippe thibault tewfik 
families project sequence projects ares praise cafe 
projects caf lead recognized european community subject system family engineering 
community presently leadership american counterpart sei product line initiative 
families project aims growing community consolidating results fact management practices families preceding projects explore fields covered previous projects order complete framework 
consolidating families lead reuse economics framework deal questions family approach introduced 
accompanied decision model checklists questionnaires 
package reuse economics fact business organisation maturity 
family maturity model complement cmm maturity models 
package family maturity fact process maturity consolidated tool requirements 
patterns styles rules related satisfaction business related quality requirements family accompanied quality models supporting processes check lists questionnaires approaches standardization quality service requirements 
package family quality fact architecture maturity 
project team triskell methodology process tools guidelines examples supporting separation domain aspects technical aspects quality services technological aspects platforms consistent models mda standardization frame 
package model driven family engineering 
extending reuse larger parts organization introducing integrated approach combine existing legacy assets family system population 
package families integration exploring reuse family boundaries 
project specific package wp takes care exploitation dissemination 
package triskell organized europe th international software product line conference rennes september attracted persons world including people industry 

mutation carroll keywords uml methodology requirements test 
participants benoit dr zen franck yves le didier 
mutation project developed cea list research technology airborne systems inria 
project aims increase productivity testing steps development process 
purpose mutation carry survey possibility automate testing procedures underlying idea automatically generate tests cases associated system requirements 
holds parts formalization system requirements providing means define testing scenarios different levels abstraction generation testing cases assistance understanding generated testing cases criterions 
technical issues mutation defining rules order formalize requirements defining rules order formalize detailed software design automatic test generation requirements model providing low cost training industrial team 
successive parts mutation definition language dedicated description requirements associated methodology user guide examples written defining coverage uml extensions applying proposed concepts real case provided allow evaluate improvement terms productivity 
project produced results requirements formalization model associated textual syntax called requirements description language detailed design formalization test objectives generation criteria activity report inria prototypes support underlying technologies prototypes pre evaluation real system provided 
project allow evaluate possibility automate generation tests scenarios uml models 
shall methodology technological items allowing adapt process today teams 

mde standards aerospace carroll keywords mda omg uml methodology 
participants jean marc quel benoit pierre alain muller didier 
mde standards aerospace lightweight project developed cea list research technology inria acting expert group 
project aims assessing suitability aerospace domain model driven engineering standards 
started march completed november 

amadeus keywords mda mde uml methodology 
participants jean marc quel pierre alain muller antoine franck didier 
amadeus project supported 
involves universit de sud inria triskell 
project aims building links research teams working model driven engineering 
main scientific objectives study relationships notion design contract model refinements study formal projections uml help model verifications apply robust design validation methodology uml 
keywords components diagnosis extra functional probes 
participants yves le 
addition detection errors related design coding deployment application diagnosis known technique understanding behaviour software system absolute requirement improvement 
unfortunately applications difficult diagnosis functionalities provided complex 
collaboration explore dynamic probes sensors injected running system collect various information 
innovative aspect approach generic probes develop diagnosis framework 

activities 
international working groups 
ercim working group software evolution numerous scientific studies large scale software systems shown bulk total cost devoted software maintenance 
mainly due fact software systems need evolve continually cope changing software requirements 
today case 
existing tools try provide support evolution limitations 
programming language dependent scalable difficult integrate tools lack formal foundations 
project team triskell main goal proposed wg ac evol identify set formally founded techniques associated tools support software developers common problems encounter evolving large complex software systems 
initiative plan virtual european research training centre software evolution 
triskell contributes working group points re engineering reverse engineering model driven software engineering model transformation impact analysis effort estimation cost prediction evolution metrics traceability analysis change propagation family product line engineering 
standardization omg triskell project participates normalization action omg www omg org triskell project participates rfp mof qvt query view transformation 
rfp model transformation language key point efficiently applying mda 
triskell project participates new executable uml foundation rfp 
rfp standardize subset uml precise execution semantic 
triskell project involved omg groups related team interests 
example participates group formalizes mda approach mda user sig represents user point view mda 
general analysis design group promotes standard modelling techniques including uml mof 
triskell initiated wiki dedicated share information omg inria omg wiki irisa fr 

collaboration foreign research groups university oslo norway 
collaboration swat project semantics preserving weaving advancing technology ller pedersen 
goal formal collaboration identify basic mechanisms mechanisms find generics aspect orientation family modeling generative programming general mechanisms order produce models programs generic models programs fragments models programs 
colorado state university usa 
collaboration issues related model driven development robert france sudipto ghosh 
precisely collaborated model composition aspect oriented modelling model transformation model validation testing 
franck benoit visited summer visit funded inria part mini inria program 
robert france visited triskell come back june spend months sabbatical 
collaboration set associ associated team called matt triskell model driven engineering aspects transformations test see www irisa fr triskell matt details 
centre distributed systems software engineering monash university melbourne australia 
collaboration trusted components contracts 
professor heinz invited triskell team months 
christine authored book 
quel 
activity report inria software engineering group university montr canada meta modeling 
carleton university ottawa canada triskell developed collaboration test objects lionel briand team carleton university 
technical university munich germany meta modeling agile methodologies 
rumpe editor chief journal invited professor triskell months visited november 
eth zurich pr meyer team switzerland trusted components 
meyer came rennes times past years 
distributed systems technology centre brisbane australia 
triskell collaborated published team rule approaches model transformation 

dissemination 
scientific community animation 
journals 
jean marc quel associate editor journals ieee transactions software engineering journal software system modeling journal object technology objet 
pierre alain muller associate editor journals journal software system modeling 
examination committees 
jean marc quel examination committee phd thesis habilitation les recherches adnan bader may monash university referee arnaud june universit de paris referee damien june universit de rennes adviser jean charles july lyon referee olivier november universit de lille referee arnaud november universit de lille referee german vega december universit de grenoble referee december universit de rennes adviser 
yves le examination committee phd thesis yves november leg referee line june cnam cea referee project team triskell 
pierre alain muller examination committee phd thesis damien june universit de rennes 

conferences 
jean marc quel conference chair conference europe th international software product line conference rennes september 
conference attracted persons world including people industry 

jean marc quel member programme committee conferences ecoop th european conference object oriented programming scottish exhibition conference centre glasgow scotland july special session model driven engineering th euromicro conference porto portugal august st september rd models th international conference model driven engineering languages systems uml series conferences october fa european conference model driven architecture foundations applications november germany international conference quality software architectures net september erfurt germany jc eme conf rence des le france 
yves le member programme committee conferences workshops th ieee international symposium software reliability engineering chicago november nd int 
workshop model design validation october res journ ees sur ing es par les mod les idm paris june 
plouzeau member programme committee conferences workshops journ sur le de par aspects activity report inria 
pierre alain muller member programme committee conferences models th international conference model driven engineering languages systems uml series conferences october special session model driven engineering th euromicro conference porto portugal august st september rd vl hcc ieee symposium visual languages human centric computing texas usa september 
workshops 
quel gave invited talk dga seminar complex software systems engineering november 

muller programme chair res journ ees sur ing es par les mod les idm paris june 
invited conference model transformations artist summer school 
responsible setting panel metamodeling architecture models model driven engineering lmo 
organizer christophe gaston cea sudipto ghosh workshop conjunction models 
workshop chair europe th international software product line conference rennes september 

teaching jean marc quel teaches oo analysis design uml sup lec rennes rennes 
gives advanced course model driven engineering students 
plouzeau teaches oo analysis design component design students second year mast re sciences technologies mention informatique 
benoit teaches software testing master 
triskell team receives master summer year 

miscellaneous 
quel member steering committee models uml conferences series 
appointed board committee projects inria rennes 

muller member steering committee models uml conferences series 
holds elected position scientific council universit de 

quel writer chapter design patterns die de informatique published second half 
plouzeau writer chapter software components encyclopedia mentioned 
project team triskell 
bibliography major publications team years benoit franck jean marc quel yves 
automatic test cases optimization algorithm ieee software vol 
march 

quel plouzeau watkins 
making components contract aware ieee computer vol 
july 

development generic probes functional extra functional diagnosis supplementary proc 
th ieee international symposium software reliability engineering student st malo november 
claude jean marc quel alain le benoit 
protocol engineering uml annales des telecoms vol 
november 

quel 
reliable objects lightweight approach applied java ieee software vol 
july august 
jean marc quel 
model driven engineering distributed real time embedded systems 
rard editor 
chap 
real time components contracts hermes science publishing london 

quel 
object oriented software engineering eiffel isbn addison wesley march 
jean marc quel 
reifying variants configuration management acm transaction software engineering methodology vol 
july 

quel train 
design patterns contracts isbn addison wesley october 
suny 
quel 
uml action semantics model execution transformation information systems elsevier vol 
july 
yves le thierry ron jean marc quel pierre morel 
efficient oo integration regression testing ieee trans 
reliability vol 
march 
books monographs rard jean marie favre pierre alain muller xavier blanc editors 
idm actes des res journ es sur ing par les mod les isbn org idm actes pdf paris june 
activity report inria jean marc quel plouzeau yves le 
de objets avec uml september version pages 
doctoral dissertations habilitation theses damien 
une architecture pour les transformations de mod les la de mod les uml ph 
thesis universit de rennes june www irisa fr publi theses html 
articles referred journals book chapters benoit franck jean marc quel yves 
automatic test cases optimization algorithm ieee software vol 
march 

quel le 
genetic algorithms mutation testing software testing verification reliability journal vol 
june 
bayer rard moller pedersen tessier 
thibault widen 
families research book lncs chap 
unified conceptual model product family variability modelling published springer verlag 
jean marc quel 
model driven engineering distributed real time embedded systems 
rard editor 
chap 
real time components contracts hermes science publishing london 
jean marc quel 
die de informatique chap 
patrons de conception 
pierre alain muller 
model driven engineering distributed real time embedded systems rard editor 
chap 
model transformations hermes science publishing london 

muller studer 
independent web application modeling development software system modeling vol 
november 
cl yves jean marc quel 
families research book lncs chap 
system testing product families requirements test cases published springer verlag 
plouzeau 
die de informatique chap 

tewfik jean marc quel 
families research book lncs chap 
product line engineering uml products derivation published springer verlag 
publications conferences workshops benoit franck robert france raghu reddy 
exploring relationship model composition model transformation aspect oriented modeling workshop project team triskell bay october 
franck jean marc quel 
code generation uml models semantic variation points proceedings models uml bay kent briand editor 
lncs vol 
published springer october 
sudipto ghosh robert france benoit franck 
taxonomy faults uml designs model design validation workshop bay october 
jacques klein jean marc quel 
problems semantic weaving scenarios aspects software product lines early aspects workshop europe rennes september 
jacques klein jean marc quel noel plouzeau 
weaving behavioural models workshop models aspects handling crosscutting concerns ecoop glasgow july 
michael lawley jim steel 
practical declarative model transformation model transformations practice workshop bay october 
jean marie benoit yves le 
ration automatique de test pour les transformations de mod les re journ es sur ing par les mod les paris june 
pierre alain muller didier 
model driven architecture distributed embedded process control colloque sur des technologies des sciences de information des syst mes nancy october 

muller 
initiative uml satellite activities bay march 
pierre alain muller franck jean marc quel 
weaving executability oriented meta languages proceedings models uml bay kent briand editor 
lncs vol 
published springer october 
pierre alain muller franck didier zo damien fr ric philippe studer jean marc quel 
executable meta languages applied model transformations model transformations practice workshop bay october 
pierre alain muller 
bridge workshop models uml bay october 
cl franck 
une de formalisation progressive des bas sur un mod le langages mod les objets lmo objet bases de donn es rie objet vol 
bern switzerland february 
activity report inria 

muller thirion 
process algebra validate behavioral aspects object oriented models workshop models uml bay october 
raghu reddy robert france sudipto ghosh franck benoit 
model composition signature approach aspect oriented modeling workshop bay october 
jim steel jean marc quel 
model typing improving reuse model driven engineering proceedings models uml bay kent briand editor 
lncs vol 
published springer october 
tewfik jean marc quel 
manipulation de de une approche par les mod les re journ es sur ing par les mod les paris june 
bibliography notes brad appleton 
patterns software essential concepts terminology object magazine online may www sigs com tips patterns html 

quel plouzeau watkins 
making components contract aware ieee computer vol 
july 
grady booch 
object oriented analysis design applications nd benjamin cummings 
de michelis 
concurrency versus interleaving instructive example bulletin european association theoretical computer science vol 

erich gamma richard helm ralph johnson john vlissides 
design patterns elements reusable object oriented software addison wesley 
jackson 
system development prentice hall international series computer science 

quel meyer 
design contract lessons ariane computer vol 
january 

quel train 
design patterns contracts isbn addison wesley october 
meyer 
reusability case object oriented design ieee software march 
meyer 
applying design contract ieee computer special issue inheritance classification vol 
october 
project team triskell clemens szyperski 
component software object oriented programming acm press addison wesley new york 
jos warmer kleppe 
object constraint language addison wesley 
winskel 
event structures petri nets applications relationships models concurrency advances petri nets part ii proceedings advanced course bad berg brauer editor 
vol 
springer verlag september 
