type systems object oriented database programming languages yuri leontiev canada limited tamer ozsu university waterloo duane szafron university alberta concept object oriented database programming language appealing potential combining advantages object orientation database programming yield powerful universal programming language design 
uniform consistent combination object orientation database programming straightforward 
main components object oriented programming language type system problems arises design related development uniform consistent theoretically sound type system sufficiently expressive satisfy combined needs object orientation database programming 
purpose answer questions requirements modern type system object oriented database programming language satisfy type systems developed date satisfy requirements 
order answer question compile set requirements type system satisfy 
set requirements evaluate existing type systems 
result extensive analysis shows requirements satisfied type system type system satisfies 
enables identification mechanisms lie strengths weaknesses current type systems 
categories subject descriptors software programming languages language classifications software programming languages language constructs features information systems database management languages theory computation logics meaning programs studies program constructs general terms design languages theory additional key words phrases oodb object oriented database programming language type checking type system typing authors addresses leontiev canada limited roper road edmonton alberta canada yuri leontiev com ozsu university waterloo school computer science waterloo ontario canada uwaterloo ca szafron university alberta department computing science edmonton alberta canada duane cs ualberta ca permission digital hard copy part material fee personal classroom provided copies distributed profit commercial advantage acm copyright server notice title publication date appear notice copying permission acm copy republish post servers redistribute lists requires prior specific permission fee 
cfl yy acm yy acm journal name vol 

month yy pages 
delta leontiev 
early days object orientation oo considered influential useful programming paradigms 
impact research virtually areas computing science compared relational algebra functional logic programming paradigms 
power object orientation lies fact provides conceptual modeling capabilities allow express real world entities relative simplicity 
source appeal object orientation support incremental software construction provided form code reuse 
object oriented database programming languages potential combine single uniform framework modeling software construction power object oriented paradigm extensive efficient data storage retrieval techniques modern database systems efficiency power today programming languages 
modeling software construction powers object oriented languages rooted type inheritance systems 
properly designed rich theoretically sound type system greatly increase power language poor inflexible type system render power inherent objectoriented paradigm useless 
type system object oriented language greatly affects characteristics type system affects characteristics 
reason presence different contradictory requirements imposed type system database programming language components 
purpose answer key questions requirements modern type system object oriented database programming language satisfy type systems developed date satisfy requirements 
order answer question set requirements put forth literature type systems section modern object oriented programming languages section database programming languages section object oriented database systems section considered yield set required type system features 
resulting combination requirements section 
section presents test suite evaluate existing type systems reviewed 
section presents extensive review languages type systems 
type systems evaluated respect requirements test suite section 
result extensive analysis section shows requirements satisfied type system type system satisfies 
section identifies mechanisms lie strengths weaknesses current type systems 
knowledge obtained way aid design development type system satisfies requirements leontiev new language design focus 
acm journal name vol 

month yy 
type systems object oriented database programming languages delta 
type system requirements terminology start establishing terminology rest 
necessary terms object oriented language research area clear definition differently different authors 
note tutorial object oriented concepts consistent set definitions universally accepted 
terminology comes cardelli black palsberg 
object 
primitive term data item model concept real world entity 
method 
procedure executed object sent appropriate message 
message 
part invocation object identification related set methods 
function name 
part invocation termed message associated type 
called free floating function 
function 
procedure executed function invocation requested 
function relates function name way method relates message 
interface type 
description messages applicable object 
implementation representation type 
description object structure 
type 
shorthand interface implementation type depending context 
mutable object type 
type object capable changing state run time 
example variables arrays mutable objects 
types called imperative types 
parametric parameterized type message function 
type message function describes family types messages functions explicit parameter 
example type list integer constrained type 
parametric type places constraint parameter 
mechanism allows programmer specify type called bounded quantification 
example type subtype person specifies constrained parametric type 
intersection greatest lower bound types 
intersection set types type represents greatest lower bound set type lattice 
intersection types useful typing set theoretic operations queries 
union lowest upper bound types 
union set types type represents lowest upper bound set type lattice 
union types useful typing set theoretic operations queries conditionals 
acm journal name vol 

month yy 
delta leontiev inheritance 
mechanism making interface implementation type 
single inheritance requires type immediate ancestor parent inheritance chain multiple inheritance lifts restriction 
interface subtyping 
partial order interface types 
interface type subtype interface type object interface type thought object interface type type student subtype person student thought person 
implementation subtyping code reuse 
partial order implementation types 
implementation type subtype implementation type possible code written manipulate objects implementation type structural subtyping 
subtyping automatically determined object structure 
termed implicit subtyping 
opposite explicit user definable subtyping relies user supplied subtyping clauses determine subtyping relationship types 
class object 
object capable receiving messages 
non class object value 
immutable object lacks ability receive messages 
traditionally assumed values interface just set operations defined 
set operations considered interface value 
primitive atomic type 
primitive type type basic primitive objects values integers reals characters 
primitive types usually special status non uniform systems languages 
soundness type system 
inability successfully typechecked program produce run time type errors 
divided static dynamic soundness 
dynamic soundness weaker static soundness 
sense languages dynamic type checking assures run time type errors caught 
verifiability type system decidable typechecking 
ability verify program contain type errors respect particular type system equivalently presence decidable typechecking algorithm 
note verifiability imply soundness 
example language eiffel meyer decidable typechecking algorithm successfully typechecked program produce run time type errors 
substitutability 
property type system language guarantees object subtype object supertype type person supertype student student legally person 
dispatch 
process finding run time method particular message execute 
single dispatch bases decision type argument receiver multiple dispatch takes account types arguments 
term static dispatch refer compile time process method determination 
static dynamic typing typechecking 
static typechecking done compiletime dynamic typechecking done run time 
acm journal name vol 

month yy 
type systems object oriented database programming languages delta implicit explicit typing 
languages explicit typing require programmer insert type annotations program 
languages implicit typing infer types expressions help programmer 
intermediate approaches possible 
inclusion polymorphism 
term refers combination subtyping substitutability 
inclusion polymorphism allows object viewed belonging different types need disjoint may inclusion types 
parametric polymorphism 
parametric polymorphism parametric specifications parametric types supported 
kind polymorphism allows specifications take types parameters 
covariance contravariance 
covariance means changes particular type parallel direction type hierarchy 
example result type method changes covariantly person definition occurs type student subtype person definition occurs type subtype 
type student subtype person type integer person type subtype integer student reverse direction termed contravariant 
forbids type changes type hierarchy 
example argument type integer changes change 
terms class subclassing deliberately avoided overloaded 
object oriented literature term class denote mechanism object construction equivalent implementation type equivalent interface type set objects satisfying particular condition combination notions 
definition subclassing equally overloaded 
term type qualified interface type implementation type 
prove useful considering type systems type notions distinct 
essential features type system major goals type system today programming languages database systems include cardelli black palsberg provide programmer efficient way catching programming errors program part executed 
considered major objective type system programming language acm journal name vol 

month yy 
delta leontiev community 
serve data structuring tool design modeling purposes 
design technologies emerged past decade rely partially fully type systems provide convenient design documentation framework system development process 
especially true object oriented design technologies 
property considered major goal type system database community 
provide convenient framework program maintenance 
includes documentation production stage program evolution ability programmer understand functionality interfaces completed product 
provide sufficient information optimization purposes 
information provided type system optimizing compiler interpreter query optimizer persistent systems improve efficiency program 
order compiler interpreter able typecheck program part exist typechecking algorithm 
existence algorithm type system termed verifiability type system cardelli 
type system verifiable 
preferable type system verifiable may put undecidable type system just puts undecidable programs expressive power desired black palsberg 
verifiability property implies type system provably sound exist formal proof successfully type checked program generate type errors run time 
compiler finds type error reports programmer sufficient information able understand reason type error order correct 
type system transparent 
type system enforceable order prevent execution type incorrect programs 
implies programs written type information possible prevent false alarms 
type system extensible 
requirement stems fact existing type systems satisfactory possible applications 
chance new type system satisfy application domains remote 
type system extended sooner abandoned type system adapt new application requirements 
switching type system extremely costly terms people resources terms data conversion costs 
object oriented programming language requirements pure object oriented programming languages pose specific requirements type systems 
requirements constructed considering features essential pure object oriented languages reformulating terms type system features 
language called pure object oriented language possess properties claimed absolutely necessary object oriented languages tsichritzis acm journal name vol 

month yy 
type systems object oriented database programming languages delta encapsulation 
property usually considered characteristic features object oriented languages greatly facilitates code reuse 
refers ability language shield internals object implementation outside access 
inheritance 
characteristic property object oriented languages 
inheritance mechanism promotes facilitates structured software design reusability code 
multiple inheritance highly desirable absence leads clumsy limited type specification important cases 
uniformity 
primitive values integers types messages methods class objects 
requirement satisfied language handle non object entities non object oriented way purely object oriented 
note existence methods able operate types methods consequence property 
advocated hauck 
object access manipulation uniformity 
object manipulated methods defined 
uniformity property provides purely object oriented programming 
method uniformity 
refers absence distinction stored computed methods equivalently absence public instance variables 
requirement important violation breaks encapsulation may effectively hinder usefulness code reusability provided inheritance 
separation interface implementation inheritance termed separation type class hierarchies 
consequence encapsulation inheritance object manipulation uniformity 
additional arguments favor separation lalonde pugh castagna taivalsaari baumgartner leontiev 
multi methods multiple dispatch 
refers ability language types arguments dispatch 
traditionally type argument receiver 
property language essential adequately model binary methods bruce castagna leavens millstein fisher mitchell certain object oriented design patterns baumgartner 
requirements pure object oriented languages possible formulate desirable features type systems languages 
requirements inheritance mechanisms interface implementation inheritance 
requirement direct consequence language requirements 
type system reflexivity 
necessary ensure uniformity language requirement types classes objects 
object term type system closure denote property 
acm journal name vol 

month yy 
delta leontiev type types classes need types 
type system needs reflexive 
method types 
consequence uniformity 
methods objects ensure uniformity types 
methods manipulated objects passed arguments methods types descriptive ensure validity type checking 
method uniformity type level distinction types stored computed methods 
direct consequence language requirement 
support multi methods multiple dispatch 
consequence language requirement 
substitutability interface inheritance 
property essential support extensibility inclusion polymorphism 
achieve primary goals object oriented paradigm code reuse 
database programming language requirements database programming languages possess set distinguishing features poses additional requirements type systems 
approach previous subsection derive type system features list necessary features persistent language taken atkinson buneman atkinson morrison 
persistence independence form program independent longevity data program operates 
necessary provide seamless integration database language significantly reduce amount code necessary deal persistent data 
orthogonality type persistence data types persistent transient 
aid data modeling ensures model independent longevity data 
eliminates need explicit persistent transient data conversions 
user defined type constructors 
requirement due necessity modeling new potentially complex data structures uniform consistent manner 
information hiding known encapsulation 
encapsulation allows data modeling higher level hides implementation details gives programmer ability deal interfaces concrete data structures 
greatly facilitates modeling code reuse component integration 
polymorphism parametric inclusion 
parametric inclusion polymorphisms specifications succinct precise 
allow significant reduction amount code needs written specify implement particular data model significant portion specifications reused genericity achieved polymorphic constructs 
features related type system dropped list 
acm journal name vol 

month yy 
type systems object oriented database programming languages delta static strong typing provisions partial type specification necessitates presence type mechanism similar formed type constructor dynamic operator typecase 
necessary order deal data come persistent store structure partially known time program written 
example program requires capabilities generic database browser supposed database independently structure 
incremental program construction modularity 
principle ensures program modifications done locally affecting rest code 
property important programming languages general important database programming databases tend exist evolve extensive periods time 
database evolves programs designed operate evolve 
modularity major features significantly reduce overhead evolution 
query facilities 
main reasons success relational data model ability support declarative simple powerful data access query languages 
order object systems successful provide querying capabilities equal exceeding relational systems 
ability program deal state change 
requirement necessary persistent data outlive program program able change data state persistent data change 
list requirements properties type system derived types classes type system specified persistent transient 
dbpl requirement reformulated terms type system terminology 
user defined type constructors 
dbpl requirement 
encapsulation 
follows dbpl requirement 
presence parametric types 
follows dbpl requirements parametric polymorphism 
desirable handle bounded constrained parametric types increases modeling power type system 
possibility partial type specification dynamic type checking 
follows dbpl requirement 
verifiable sound type system consequence dbpl requirement 
incremental type checking consequence dbpl modularity requirement 
ability type system correctly type declarative queries 
stems dbpl requirement 
buneman pierce requires type system support union upper bound types 
acm journal name vol 

month yy 
delta leontiev 
ability type system deal types mutable objects referred mutable object types assignment 
direct consequence dbpl requirement 
addition kirby advocates reflection persistent object systems 
combination object orientedness persistence poses additional requirements described subsection 
object oriented database system requirements list features needed desirable object oriented database management systems oodbms rationale atkinson 
comprehensive lists published far 
list part related type system issues 
contains additional requirements listed previous subsections 
complex objects orthogonal type constructors include sets tuples lists 
necessary ensure modeling power system sufficient deal modern applications cad cam medical geographical information systems 
extensibility user defined system types status user able add new primitive types system 
due necessity dealing new demanding application areas 
impossible anticipate data types required model data structures areas emerge 
providing status system user defined types system guarantees capabilities decreased applied new application domain 
extensibility advocated matthes schmidt 
views 
view sense ability transparently change appearance data different users clients 
importance concept usefulness power convincingly demonstrated years experience relational databases 
dynamic schema evolution 
requirement necessity maintain change database structure extensive periods time 
possible create completely new database new schema migrate data approach usually quite expensive results substantial time may acceptable large distributed applications hospital banking systems 
dynamic schema evolution possible change database structure transparently users 
additional requirements taken account designing type system pure object oriented database programming language 
requirement summary short overview 
issues considered deficiencies object oriented systems example kim deemed optional atkinson listed mandatory 
reason understanding object oriented databases step database development utilize advances relational databases 
acm journal name vol 

month yy 
type systems object oriented database programming languages delta summary requirements compilation type system requirements far 
categorization requirements subjective provide useful structure extensive set requirements compiled far 
requirement listed contains section introduced explained 
theoretical requirements verifiability preferably decidable provable soundness type system 
features necessary type system useful program verification see section section 
inheritance requirements inheritance mechanisms interface implementation inheritance section 
substitutability property interface inheritance section 
expressibility requirements method types section 
parametric types section 
orthogonal type constructors sets tuples lists section 
encapsulation section section 
ability type system deal mutable object types assignment section 
ability type system correctly type multi methods section 
ability type system correctly type sql queries section 
uniformity requirements extensibility user defined system types status section 
types classes type system specified persistent transient section 
method uniformity type level distinction types stored computed methods section 
reflexivity requirements type system reflexivity section 
dynamic requirements possibility partial type specification dynamic type checking section 
provisions schema evolution section 
requirements transparency type system programmer section 
incremental type checking section 
ability define views type safe fashion section 
requirements complementary contradictory 
notably decidable verification conflicts reflection shown example cardelli 
conflicts degree partial acm journal name vol 

month yy 
delta leontiev type specification 
conflict complexity type system satisfies expressibility requirements probably resulting type system transparent programmer 
connor identified conflict substitutability mutable types static type safety 
presence contradictory requirements task designing type system satisfies particularly difficult 
test programs set test programs type system able type correctly 
tests primarily designed test type systems expressibility difficult set requirements check test test reflexivity uniformity 
example programs written object oriented pseudo language illustrate tests suggest specific language constructs 
programs designed test known problem areas object oriented type systems 
verify ability type system consistently orthogonally combine parametric inclusion polymorphism mutable types assignment 
done soundness verifiability parametricity substitutability mutable types requirements type system 
expressibility tests adapted black palsberg benchmark testing type system expressibility 
benchmark designed measure expressibility type system object oriented programming language object oriented database programming language 
tests related additional expressibility requirements added 
requirement related mutable object types assignment probed tests 
done order verify type system deal mutable types combination parametric inclusion polymorphisms known problem area object oriented type systems connor 
types person child method returns integer applied person applied child 
person type integer type subtype integer type person integer type child subtype person note terms test test program traditional software engineering sense 
tests benchmarks validate expressive power 
acm journal name vol 

month yy 
type systems object oriented database programming languages delta person new person child new child integer si ok ok si cause compile time error si ok test designed verify subtyping necessitate absence changes 
surprisingly considerable number languages allow changes inheriting additions 
significantly limits power type system forces designer specific type information 
types point colorpoint equality 
equality color points take color account equality points point color point ignore 
point type point equal point bool implementation 
equal type colorpoint subtype point equal colorpoint bool implementation 
equal point new point colorpoint new colorpoint equal call equal equal call equal equal call equal equal call equal new colorpoint equal call equal equal call equal equal call equal equal call equal test adapted black palsberg 
tests type system ability deal binary methods known problem area objectoriented type systems bruce fisher mitchell 
types number unrelated subtypes real radix date comparison methods comparing numbers dates acm journal name vol 

month yy 
delta leontiev legal cross comparison 
method code code method reused 
comparable interface comparable bool greater bool implementation return type number implements comparable number bool implementation 
type real subtype number 
type radix subtype number 
type date implements comparable date bool implementation 
date number radix xf real call greater eventually call call greater eventually call call greater eventually call cause compile time error cause compile time error additional test binary method handling 
tests subsumption property maintained presence binary methods 
test necessary due fact approaches binary method problem notably matching bruce bruce abandon substitutability requirements type system 
parametric input output type hierarchy types parameterized type objects readable writable particular stream subtype input output stream types 
streams acm journal name vol 

month yy 
type systems object oriented database programming languages delta type inputstream covar get isempty bool type outputstream put arg type subtype inputstream outputstream type point 
type colorpoint subtype point 
point new point colorpoint cp new colorpoint inputstream point isp outputstream point point inputstream colorpoint outputstream colorpoint colorpoint 
initialization streams isp get ok get ok cp isp get cause compile time error cp get ok put ok put cause compile time error put cp ok put cp ok isp ok isp ok cause compile time error ok ok cause compile time error ok ok test designed verify combination parametric inclusion acm journal name vol 

month yy 
delta leontiev polymorphism type system adversely affect 
words tests orthogonality polymorphisms 
presence parametricity inclusion polymorphism subtyping substitutability type system requirements compiled earlier 
unrestricted combination polymorphisms known difficult day bracha 
sorting arbitrary objects constraint objects comparison method 
sort interface comparable bool type number implements comparable 
type person 
type list 
sort list list list implements comparable implementation 
list number ln list person lp 
initialization list variables ln sort ln ok lp sort lp cause compile time error lp sort ln cause compile time error ln sort lp cause compile time error test due black palsberg 
designed verify ability type system deal bounded quantification form types satisfying condition 
aspect binary method problem 
tests ability type system provide link parametricity subtyping 
generic sort comparison method 
parameter 
generic sort applied set objects provided appropriate comparison method supplied 
type list 
type number number arg bool type date compare date arg bool sort list list bool comparison list implementation 
acm journal name vol 

month yy 
type systems object oriented database programming languages delta list number ln list date ld 
initialization list variables ln sort ln ok ld sort ld compare ok ln sort ld compare cause compile time error ln sort ln compare cause compile time error test black palsberg 
designed verify type system capable combining parametricity method typing substitutability 
single linked list node type double linked list node type second type inherits 
single linked list node type recursively defined type mutable attribute represents list node linked 
double linked list node type additional mutable attribute represent second link 
type system allow links different node types 
note example double linked node type subtype single linked node type type system flexible allow code reuse 
code sample uses keyword extends order describe relationship types 
list type getnext implementation return attach node implementation 
attach type extends prev implementation return prev attach node implementation 
attach lln lln 
initialization list node variables lln cause compile time error lln lln ok lln attach lln call attach attach call attach lln attach cause compile time error attach lln cause compile time error acm journal name vol 

month yy 
delta leontiev test adopted black palsberg 
checks type system supports code reuse provided subtyping 
words checks code reuse possible types subtyping relationship 
situations analogous described test occur frequently dealing mutable types 
set union intersection immutable sets 
set type set union set summand set lub intersection set summand set glb type person 
type student subtype person 
set person sp sp set student ss ss 
initialization set variables sp sp union sp ok sp sp union ss ok sp ss union sp ok sp ss union ss ok ss sp union sp cause compile time error ss sp union ss cause compile time error ss ss union sp cause compile time error ss ss union ss ok sp sp intersection sp ok sp sp intersection ss ok sp ss intersection sp ok sp ss intersection ss ok ss sp intersection sp cause compile time error ss sp intersection ss ok ss ss intersection sp ok ss ss intersection ss ok test designed verify set operations sql declarative queries successfully precisely typed 
necessary ensure seamless integration queries language 
function apply 
apply apply msg obj implementation 
type integer 
acm journal name vol 

month yy 
type systems object oriented database programming languages delta type subtype integer 
type person integer type child subtype person person new person child new child integer si apply ok apply ok si apply cause compile time error si apply ok test analogous calculus test black palsberg differs test includes assignment 
designed verify ability type system deal method types uniformly treat methods objects system 
general database browser 
browser able deal databases unknown schema 
browser number num implementation 
type person integer object root database db db open root db typecase root typeof subtype number root 
ok subtype person root 
ok code tests ability type system deal dynamic type information type safe manner 
complete browser require ability examine type structure previously unknown types 
acm journal name vol 

month yy 
delta leontiev print root cause compile time error root cause compile time error test checks ability type system handle partial type specifications dynamic type checking 
list requirements type system 
set requirements tests section evaluate existing languages type systems 

type systems review section type systems current languages theoretical developments area reviewed 
type systems languages listed table table gives sections system reviewed 
stroustrup currently widely object oriented programming languages 
types combine characteristics interface implementation types define interface structure objects 
classes special cases types classes specify properties class objects types specify properties non class objects 
inheritance rules allows polymorphic function method specifications method function signature name identification purposes 
presence static type checking equivalent restricted form static multiple dispatch 
non class objects operated free functions objects instances classes methods 
provides parametric types templates take arbitrary number parameters parametric types 
type system verifiable general due unrestricted pointer conversions partial verification possible performed compilation time 
type system combines interface implementation inheritance violates inheritance requirement 
completely uniform distinguishes data objects treats attributes special way 
provides limited substitutability object pointers objects 
terms expressibility type system quite powerful function types parametric types orthogonal type constructors deals mutable object types 
test suite type system due enormous number languages constantly developed scientific community review incomplete 
effort include known languages interesting type system features analogs 
hope essential type systems left 
acm journal name vol 

month yy 
type systems object oriented database programming languages delta table type system index reviewed section stroustrup richardson agrawal gehani java arnold gosling drossopoulou eisenbach saraswat generic java gj bracha java parametric extension myers pizza odersky wadler agesen virtual types java thorup bruce odmg oql cattell sql sql xquery modula wirth dbpl schmidt matthes modula modula harbison oberon ok wirth roe szyperski franz theta day ada kempe software capital enterprises eiffel meyer sather stoutamire omohundro emerald raj beta madsen klas napier morrison smalltalk goldberg robson strongtalk bracha griswold cecil chambers chambers leavens mini cecil litvinov shang clos bobrow dylan apple computer tm bal ml miller wright machiavelli ohori buneman ohori fibonacci albano ml bourdoncle merz constrained types ml aiken aiken wimmers pottier rehof constrained types erlang marlow wadler calculus castagna bruce loop tl matthes schmidt matthes tool matthes qian krieg brueckner fails tests 
tests programmed significant type checking lapses 
reason fact handle typing binary methods lacks multiple dispatch 
parametric types fully instantiated limiting programmer ability define polymorphic functions methods 
type parameters unrestricted 
variant includes run time type information rtti allows dynamic type checking allowing tentatively pass browser test 
intersection union types represented type system 
type system quite complicated 
richardson derived borrows type class system 
differences lie specification parametric types fact persistent language 
opposed parametric types called generic classes specified general type parameter restriction mechanism subtyping parametric classes defined mechanism allows programmer specify restrictions methods parameter type 
example possible require acm journal name vol 

month yy 
delta leontiev certain function method parameter type compare method specification making test sort succeed 
persistent language completely uniform persistence type dependent 
fails browser test 
agrawal gehani persistent language derived 
similar respects provisions persistence queries limited form type reflection 
persistence type type system uniform respect 
type reflection provided means operator checks object type 
browser test fails respect type checking potentially programmed 
sets test fails queries provide full power sql typing forall suchthat operator non user definable level 
provides family languages type system discussion language type system distinction class non class objects called values values mutable 
uses term type refer implementation types non class objects term class refer types class objects combine properties interface implementation types 
type system completely uniform class objects manipulated methods 
inheritance implementation subtyping additional ability add modify methods 
adopts covariant signature refinement rule providing natural data modeling 
absence multiple dispatch covariant rule results loss static type safety type system unsound 
provide kind parametricity methods messages types objects 
uniform terms persistence orthogonal type 
provisions dynamic schema evolution evolution type safe 
type system essentially fails tests type system expressiveness tests programmed pass type checking fail run time 
boyland castagna multimethods provide type safety covariant specifications programming language 
addition mechanisms described article test point succeed fail 
java java arnold gosling popular language academic industrial communities 
type system shares features discussion focus primarily differences 
advantages java type system include separation orthogonal persistence persistence declaration persistent object creation different transient object creation 
acm journal name vol 

month yy 
type systems object oriented database programming languages delta interface implementation better handling run time type information simplification type system design resulting transparent type system 
non reflexive java fragment shown type safe drossopoulou eisenbach full language certain type deficiencies saraswat 
hand java type system lacks method types methods considered objects type java parametric types statically unsafe parametric arrays builtin inherits problematic features type system discussed 
java fails tests sort successful due presence interfaces 
java fails test method types sufficiently expressive test 
parametric extensions java type system proposed 
generic java gj bracha adds parametric types static type system run time model type parameters erased exist run time 
parametric types gj parameters class types 
restrictions usage parametric types methods related particular type inferencing algorithm gj 
gj passes test comparable union part set test addition sort test passed java 
parametric type extension java proposed myers 
allows usage non types type parameters uses clauses express requirements parameter types 
extension parametric types 
type checking algorithm myers 
extension test suite performance identical generic java provides uniform system 
approaches informal theoretical proof soundness 
java extension pizza odersky wadler extends java parametric function types 
approach taken odersky wadler similar myers better formalized 
fact pizza statically type safe covariant arrays left pizza java compatibility 
shown resulting type system subsumption property 
true java extensions considered far java 
pizza passes tests apply addition comparable sort due presence method types 
similar set extensions proposed agesen method types supporting theory 
approach lift restrictions placed usage type parameters pizza 
different approach taken thorup thorup java extended virtual types 
choice favor convenience static typing dynamic substitutability sacrificed 
tests person comparable list programmed give run time compile time errors incorrect cases 
modification approach bruce compares parametric virtual type approaches 
boyland castagna extends java multi methods introduced called parasitic methods 
goal extension add support acm journal name vol 

month yy 
delta leontiev multi methods existing language providing full compatibility java 
boyland castagna contains proof soundness resulting system 
odmg object model object database management group developed set standards object database management systems cattell 
standards specify object model odmg object model object query language oql 
object model includes types specify properties behavior objects 
types categorized interfaces behavior classes literals state 
types implemented language specific representations single type representations single program 
interfaces support multiple inheritance classes support single inheritance class extension 
odmg object model provides separation interface implementation 
interfaces model instantiated 
properties odmg object model include state relationships way mappings 
relationships defined classes 
behavior specified set operations 
behavior specifications argument return types 
odmg object model supports single dispatch 
system defined parametric container classes object model user allowed define new ones 
type parameters property specifications operation specifications parameterized 
oql strongly typed query language provides possibility explicit dynamically checked type conversions 
set operations oql performed compatible types types upper bound 
notion greatest lower bound available oql set operations upper bound typing purposes 
example intersecting set students set persons return result type set persons case type students subtype person type 
odmg oql fails tests browser union part set test 
noted odmg oql general purpose database programming language performance test suite fully indicative merits odmg object model 
odmg object model analyzed point view type checking 
shown sound verifiable typechecking oql queries impossible achieve 
shown oql queries verifiably typechecked odmg type system odmg language bindings supported parametric polymorphism constrained types 
extension odmg model change performance test suite 
sql sql language standard sql extends industry standard database query language sql significant number new features including computationally complete semi procedural language object oriented extensions user defined data types dynamically dispatched methods 
type system sql consists predefined built constructed acm journal name vol 

month yy 
type systems object oriented database programming languages delta user defined types 
constructed types include array types types row types 
constructed types parameterized array type specifies type elements maximum allowed cardinality type specifies referenced type row type specifies set type value pairs row types primarily table specifications 
constructed types special user allowed change behavior define new constructors 
data objects different types status language 
addition types notion domain 
domain essentially data type plus set predicates restricting possible values type 
domain usage restricted example domain specify type procedural parameter 
user defined types structured distinct 
distinct types distinct synonyms predefined types 
user defined subtyping specified distinct types 
structured types single inheritance 
additional requirement subtype family exactly common supertype 
possible specify user defined type non instantiable final non 
sql subsumption property 
user defined types define methods 
structured types methods overridden dynamically dispatched receiver type 
possible define constructor static methods 
data type attribute automatically defines accessor mutator methods methods overridden 
sql user specify functions routines methods attached type 
routines overloaded routine execute determined statically type specificity parameters 
required determination unambiguous 
routine parameters specified input output input output 
limited form type parametricity allowed function method type preserving 
case input parameters specified return parameter give type result function application 
validity assertion statically guaranteed 
run time type check performed value returned ensure run time type subtype run time type specified parameter 
mechanism provided user defined sorting comparison allows user define comparison procedures user defined types 
mechanism special applied binary methods comparison 
sql routines types methods functions persistent parts schema parts persistent module 
sql extensive declarative query mechanism significantly extended version standard sql select statement 
query mechanism integrated array indexing processing path expressions allow direct access object attributes methods 
procedural capabilities including assignment supported concept instance update methods 
words applying mutator method creates new instance turn assigned old instance 
system generated acm journal name vol 

month yy 
delta leontiev mutator methods type preserving 
sql statically strongly typed 
fully reflexive allowing full dynamic schema modification manipulation 
run time type inspection supported 
sql type system verifiable fully reflexive nonuniform lacking advanced expressibility features 
result fails tests browser test union part set test 
sort test programmed special mechanism designed specifically sorting comparison 
just case odmg object model noted main focus sql general purpose object oriented database programming language performance test suite fully indicative merits sql standard 
example useful notions triggers access rights transaction atomicity extremely important scope survey affect type system 
xquery xquery query language retrieving interpreting information stored xml format 
xquery program set xquery functions notion method dispatch data considered passive elements processing 
xquery data types regular grammars 
example data type denoted ajb lambda lambda consist sequence data items type followed data items type followed zero data items type xquery purely functional language need typing rules assignment mutable data 
xquery subsumption structural subtyping grammar inclusion type subtype language generated grammar subset language generated 
xquery supports static typechecking 
xquery type system supports statically typed typecase statement allows type safe queries data structure known compile time 
hand currently support overloaded functions user defined higher order functions user defined parametric types 
type system lacks advanced expressibility features 
time writing xquery developed type system features finalized 
example decided user defined subtyping added user defined polymorphic functions allowed metadata queries constructed typed static typechecking mandatory merely suggestive 
theoretical aspects proposed type system need development semantics handling intersection types interleaved types xquery 
impossible reliably apply tests xquery type system time 
modula group languages directly indirectly modula wirth 
modula object oriented persistent language 
type checking verifiable 
modula construct separating interface journal name vol 

month yy 
type systems object oriented database programming languages delta mentation form interface implementation modules languages modula approach 
mechanism proven convenient robust procedural languages 
advantages disadvantages object oriented languages primarily type approach interface implementation specification evaluated 
dbpl dbpl schmidt matthes persistent languages modula 
dbpl modularity achieved native language modula modularization mechanisms special database module construct 
absence module persistence cause problems orthogonality 
transactions supported special procedures 
partial sql compatibility provided relation type constructor appropriate set operations order constructs 
dbpl allows updatable non updatable views selector constructor procedural specifications 
dbpl object oriented offer implementation types methods 
dbpl type system static non reflexive 
tests described section applicable dbpl directly object oriented 
dbpl tentatively pass test 
dbpl type system uniform system user defined types rights 
modula persistent language modula modula 
modula rudimentary object oriented capabilities single inheritance similar method signatures object types different types implementation interface hierarchies coincide limited support function types 
modula type system uniform 
interesting property modula presence type dynamic 
data type pairs values types expressed values compound type datatype 
type datatype type representations data types system independently dynamic type store retrieve operate various data types 
value coerced type dynamic 
modula provides special operator typecase provides type safe interface values type dynamic 
language provides set predefined type operators operate values type datatype 
modula provides type safe immutable type reflection 
modula type system static non parametric provide orthogonal persistence 
expressibility tests succeed modula browser 
modula provides incremental type checking including dynamic variety 
modula modula harbison language object oriented extensions modula 
modula persistent programming language object extensions similar modula typecase statement gives programmer ability request dynamic type checking type safe acm journal name vol 

month yy 
delta leontiev manner 
modula parameterized modules parameterized types allowed 
modula passes tests comparable sort browser 
oberon descendant modula oberon ok wirth 
subtyping oberon record extension known structural subtyping 
subtyping relationship predefined atomic types 
oberon multiple subtyping 
oberon supports single dispatch 
subtyping procedure method types argument result types receiver type covariant 
parametricity supported oberon 
separation interface implementation supported level modules manner modula languages 
oberon extended statement allows programmer dynamically inspect type object act 
statement similar typecase statement modula modula discussed earlier 
type system oberon pass tests sort browser 
proposal adding parametric types methods oberon roe szyperski 
proposal parametric types type checker ensures parameter type substitution exists satisfies rules matching arguments particular call 
unfortunately typechecking algorithm proof soundness roe szyperski 
franz descendant oberon 
focuses messages objects message passing 
contrast object oriented languages message independent entity 
interface category set messages 
message type specification 
methods implementing message different receiver type 
implementation specified class usually record type category meets class type combination interface implementation born 
code inheritance possible structure inheritance possible 
variables specified category class 
provides complete separation interface implementation representation code methods 
message sent object object forward resend object 
features type system include single dispatch single inheritance 
unfortunately article franz provides insufficient information test performance test suite 
theta language theta day combines expressive power parametric inclusion polymorphisms 
provides clauses give type system flexibility similar provided matching 
theta single dispatch multiple inheritance types interfaces single inheritance classes implementations 
theta allows parametric types 
method types specified theta methods functions class values 
theta acm journal name vol 

month yy 
type systems object oriented database programming languages delta reflexive capabilities form typecase operator 
theta type system verifiable uniform static 
quite expressive 
soundness proven 
theta passes tests comparable sort list browser 
ada language ada kempe software capital enterprises procedural language object oriented features 
ada remarkably strong support parametricity generic packages parametric modules generic subprograms parametric functions instantiated parameters generic entities providing great flexibility 
parameter types constrained clause requiring type method particular signature parameterized 
ada generics fully explicitly instantiated 
interesting powerful feature ada notion access type generalizes notions pointer allowing user defined access types 
ada function types function arguments specified inout role play 
ada uses package mechanism similar module mechanism modula provide separation interface implementation 
hand object oriented ada features appear relatively weak order dynamic dispatch type explicitly declared tagged 
order able subtyping inclusion polymorphism programmer special form parameter specification 
ada provides single dispatch single inheritance methods 
subclassing ada limited record extension 
ada types examined dynamically data type converted type conversion dynamically type checked 
ada type system complicated places emphasis static dynamic polymorphism 
ada pass tests comparable sort list browser provided generic packages types 
sather object oriented language sather stoutamire omohundro considered 
sather better known eiffel meyer eiffel discussed primary goals design sather remedy typing problems eiffel 
sather multiple interface implementation inheritance hierarchies independent concrete implementation types called classes sather leaf interface types 
implementation subtyping sather corresponds textual inclusion replacements 
sather uses single dispatch strongly statically typed 
methods covariant receiver contravariant arguments 
sather provides partial closures methods iterators class values 
parametric implementation types form bounded polymorphism constrain type parameters 
parametric types fully instantiated 
method arguments sather specified inout role play 
sather type system correctly handles cases 
argument types acm journal name vol 

month yy 
delta leontiev local variables specified sather types sather classes 
case parameter class subtype type case parameter class match specification exactly 
language provides novel notion iters iterators object oriented generalization loop control structures 
sather provides special compound type type operators typeof typecase 
type safe immutable type reflection 
type system sather possesses verifiability formally proven satisfies inheritance partially uniformity expressibility requirements 
passes tests person comparable sort list browser fails tests point streams set apply 
note apply fails parametric types sather require full instantiation 
emerald emerald raj non traditional object oriented language combines features class delegation object oriented languages 
objects created emerald special syntactic form called object constructor 
object constructor plays triple role defines object implementation second defines publicly visible object interface type emerald third denotes process object creation 
subtyping emerald structural type understood set signatures 
types objects created object constructors user define new types including parametric ones 
type checker uses user defined types system supplied ones typecheck program statically 
types objects dynamic type checking possible 
emerald type system verifiable uniform reflexive satisfies inheritance requirements quite expressive 
soundness unknown 
emerald passes tests person streams sort browser 
beta beta madsen unique object oriented language unifies notions class object procedure method notion pattern 
patterns contain patterns member objects code fragments types 
beta fragments play role modules separate interface implementation 
beta fragments regarded high level restricted patterns operate basic principles 
patterns virtual virtual pattern extended adding code fragments places specified inner placeholder method extension simula birtwistle extending virtual pattern additional members record extension supplying class pattern place virtual parametric instantiation 
virtual patterns explicitly declared 
unification language concepts notion pattern possible design powerful language couple orthogonal principles 
language design simplicity impressive resulting language quite unconventional 
structural subtyping conjunction class substitution mechanism type system beta statically unsound dynamic type checks inserted ensure type safety 
due uniformity beta tests point coded sort acm journal name vol 

month yy 
type systems object oriented database programming languages delta static type safety 
illegal usage tests cause run time type errors 
persistent object oriented language klas objects instances object types called classes persistent class objects non object types called data types transient 
value non object type persistent referenced persistent object 
orthogonal persistence 
object types class objects belong respective metaclasses 
metaclasses define essential class methods example methods message method message receiver class 
allows user defined method inheritance due classes objects concept 
data types class objects partially satisfies type reflexivity requirement 
inheritance tailored specific application needs user definable message appropriate metaclass 
verifiable type system tests applicable 
napier persistent programming language napier version morrison object oriented programming language type system quite powerful 
napier parametric types built freely basic types type constructors type variables 
parametric procedures procedures parametric types defined class objects 
napier types purely implementation types napier provides type constructor may considered interface type provides existential quantification witness type 
type system napier satisfies expressibility requirements related notions subtyping inheritance 
napier notions subtyping inheritance fails requirements related notions 
napier parametric types fully instantiated 
napier provides support limited form linguistic reflection dynamic environments 
environments dynamically typed structures provide bindings names napier entities 
environments dynamically modified inspected expressions 
environments persistent 
napier special type union type types system 
special project operator deal values type typesafe manner 
operator similar typecase modula 
value injected type mechanism run time data type inspection possible 
type system napier type safe type reflexive capabilities 
persistent store napier object type holds typed collection objects 
objects persistent store projected operated transparently 
napier uses persistence model reachability root persistent store object 
persistence napier orthogonal type 
acm journal name vol 

month yy 
delta leontiev spite power type system napier unconditionally passes test list 
tentatively passes tests comparable sort apply usage explicit type parameters parametric calls allowed 
words burden inferring correct parametric instantiation code napier placed programmer type checker 
strongtalk strongtalk bracha griswold statically typed version smalltalk goldberg robson 
smalltalk widely regarded purely objectoriented language static type checking 
strongtalk including types called classes strongtalk methods messages class object 
strongtalk uniform 
strongtalk objects operated modified run time strongtalk reflexive reflexivity type unsafe 
strongtalk separates interfaces protocols implementations classes provides subtyping matching 
parametric types messages block types union types 
user explicitly specify mechanism guide parametric type inferencing resulting loss substitutability 
unclear bracha griswold strongtalk allows bounded parametric types 
strongtalk provides single inheritance single dispatch 
subtyping structural user brands restrict 
strongtalk designed persistent language provide uniform persistence objects socalled image 
strongtalk type system quite expressive uniform reflective 
passes tests comparable list browser possibly parametric type bounds allowed 
union part set test passed 
strongtalk fail tests person point streams apply sort programmed blocks messages 
cecil cecil chambers delegation language implementation interface types called representations called types 
types cecil suggestive type checking cecil multiple dispatch done representations 
cecil type checking suggestive report false errors real ones type discipline enforceable 
cecil support incremental type checking 
cecil uses multiple dispatch provides covariant specification specialized arguments contravariant specification unspecialized ones 
closures methods class objects cecil contravariantly typed 
cecil provides parametric types methods type parameter bounds 
parametric types cecil instantiated explicitly implicitly case user provide hint type inferencing algorithm 
behavior results loss substitutability 
cecil multiple inheritance union intersection types 
cecil type system quite expressive possible uniformity breach form direct attribute access 
acm journal name vol 

month yy 
type systems object oriented database programming languages delta uniform non reflexive static 
satisfies inheritance requirements 
cecil type checking suggestive difficult apply tests 
tests cecil tentatively pass include person point sort list set apply browser 
fail tests comparable due restrictions parametric type bounds streams due parametric types 
extensions modifications original cecil language 
extensions chambers leavens 
statically typechecked version cecil 
supports block modular structure extensible objects extensible type system type system formalized 
soundness substitutability properties proven 
novel notion acceptors considered object oriented generalization assignment operator 
parametric types sharing features cecil 
absence parametricity contributes decreased expressibility type system compared cecil 
passes tests person point sort list fails rest 
modification mini cecil described litvinov 
mini cecil strives achieve combination static typing general form parametric polymorphism 
mini cecil frameworks basically interfaces appears analog 
frameworks separate interface implementation achieve effect matching 
methods mini cecil class objects multimethods multiple inheritance supported 
subtype clauses form forall ff isa isa ff set free type variables ci type specifications 
resulting type system expressive argued expressive type system possible 
typechecking undecidable 
algorithm proposed conservative approximation soundness proven 
unknown resulting type system substitutability 
mini cecil pass tests browser reflexive capabilities 
shang allows user specify parameter parametric type covariant type exact constrain giving upper bound 
subtyping subclassing interface implementation inheritance different concepts 
distinct name allows classes support matching 
language unifies notions class function beta 
supports multiple dispatch 
provisions dynamic type checking dynamic schema evolution 
implicitly instantiates parameter types expressions unfortunately formal proof type safety 
fact shown type system shang type safe 
type system delegation language cecil language reflection type system cecil reflexive cecil types objects manipulated language 
precisely representations cecil reflexive types 
acm journal name vol 

month yy 
delta leontiev verifiable expressive uniform dynamically reflective 
unsound 
pass expressibility tests test streams due inability represent contravariant type parameters intersection part test set due absence intersection types 
clos clos common lisp object system bobrow reflexive language power common lisp reflection 
clos types object types called classes subset 
clos types implementation types specify interface 
clos classes combine implementation interface definitions 
clos distinction object non object types object types define interfaces subject inheritance clos type system completely uniform 
clos classes objects belong metaclasses objects clos messages methods functions clos objects operated changed run time clos fully reflexive dynamic 
subclassing clos slot collection extension slot types changed covariantly type slot intersection types specified slot class superclasses 
messages called generic functions covariant 
clos statically typed 
clos message dispatched yield appropriate method combination methods class value arguments multiple dispatch 
methods covariant arguments clos multiple dispatch 
method appropriate arguments user definable way constructing function executed appropriate methods employed 
body method special function call method called invoke applicable method 
capability analogous inner construct simula birtwistle powerful 
dispatch mechanism clos powerful known mechanisms consideration limited classes values 
clos dispatch types 
updates clos invoked slots directly appropriate message 
clos statically type checked run time error signalled value assigned slot conform slot type specification 
clos statically typed tests general applicable clos pass point apply browser tests type discipline enforceable 
dylan dylan apple computer imperative programming language similar clos 
certain differences identical terms type systems 
dylan control defined classes dylan classes sealed library belong open primary single inheritance primary classes free superclasses class concrete 
support singleton types singleton classes 
multiple dispatch precisely methods covariant arguments constrained class specifications 
acm journal name vol 

month yy 
type systems object oriented database programming languages delta dylan different clos dylan arguments equal method specificity defined class precedence list 
dylan modules import export lists module libraries 
tm tm bal object oriented persistent language functional features 
tm verifiable type system cardelli 
soundness proof missing 
tm type hierarchy includes user definable sorts atomic immutable types classes 
sorts classes representation implementation types hidden inside 
methods types class values tm 
tm method specification uses achieve effect matching 
polymorphic mechanism tm specifications covariant substitutability hold functional updates 
method redefinition mechanisms provided tm 
tm type system extends type system cardelli cardelli powerset type constructor 
tm stateless powerset types covariant 
tm allows enumerated predicative sets primitive language expressions 
enumerated sets tm homogeneous predicative sets heterogeneous subtyping 
predicative sets presence record type system cardelli absence updates play role embedded queries highly integrated rest language 
tm provides levels constraint specification mechanisms set resemble relational constraint systems 
tm provides order set operations 
set operations require special treatment messages usual object oriented sense 
unclear different type constraints different kinds sets interact 
tm modules define persistent components names objects refer implicitly persistent 
tm provides combination static name dynamic reachability persistence completely orthogonal type 
tm type system verifiable sound supports interface implementation inheritance completely independent uniform partially expressive provides support declarative queries 
support substitutability non reflexive static 
unconditionally pass tests sort list 
test set succeeds built support set operations 
possible construct user defined types functionality 
languages borrow expressiveness ml miller 
ml language functional imperative flavors object oriented features 
said languages discussed 
ml standard ml miller functional language imperative features 
strongly typed provides provably decidable sound type checking 
ml type system type information inferred type checker 
addition explicit type annotations declarations considered odersky 
standard ml provides sophisticated module system acm journal name vol 

month yy 
delta leontiev module structure type signature 
ml structures implementation types modules designed shield internals rest program handle separate compilation similar tasks 
notion subtyping standard ml signature matching considered restricted structural subtyping interface types 
highly parametric types supported standard ml 
arbitrarily include type variables user defined 
type system standard ml uniform 
interface types signatures functions map signatures signatures functors 
function types ml polymorphic 
polymorphism standard ml function types expressed type expressions pattern matched 
example type identity function standard ml type variable 
kind polymorphism uniform allows user defined parametric types 
standard ml essence functional allows updates called ref types 
types types somewhat similar pointer types 
ref types restricted parametricity argument ref type monotype see discussion wright 
types objects standard ml operated functions similar operate ordinary values 
type system standard ml theoretically sound expressive uniform lacking inheritance partially reflexive 
type system tentatively pass tests person sort apply test sort modules types required 
machiavelli language family machiavelli ohori buneman ohori persistent language extends ml adding polymorphism query view support 
machiavelli verifiable provably sound type system 
adds record inclusion polymorphism ml type variables form correspond arbitrary record extension 
machiavelli allows polymorphic types ml 
machiavelli able automatically maintain sophisticated non covariant type constraints description types 
possible machiavelli type checker statically infer error case join sets records types greatest lower bound attempted 
machiavelli type system treats description types differently 
completely uniform 
machiavelli special set type constructor introduced query operations defined objects set types 
machiavelli extends type system ml able deal consistently type inference generalized relational operations 
machiavelli provides views similar relational databases 
machiavelli view defined function returns projection set appropriate type 
machiavelli views updatable 
type system machiavelli verifiable sound expressive reflexive partially uniform partially dynamic capable supporting views 
lacks provided notion subtyping substituted notion code reuse 
description types ml types include outside ref 
acm journal name vol 

month yy 
type systems object oriented database programming languages delta interface inheritance 
passes tests ml addition set test due special support sets language type system 
fibonacci fibonacci albano persistent object oriented language descendant galileo albano turn ml 
functional imperative features possesses verifiable provably sound type system multiple inheritance single dispatch 
fibonacci object types independent terms subtyping role types form independent directed acyclic graph dag object type 
example object type play roles person employee student employee student 
fibonacci roles dynamically created fibonacci objects dynamically acquire new roles 
fibonacci types objects language 
method arguments fibonacci contravariant results covariant 
fibonacci supports distinction methods functions methods attached role types fibonacci objects functions independent class values 
fibonacci non object non role types basic types class types function types association types 
types form hierarchy independent object role types 
fibonacci defines built parametric types class sequence association 
unclear albano user create new parametric types 
fibonacci objects object type different implementations 
implementations defined time object creation 
implementation fibonacci part object role type specification 
updates fibonacci allowed special var types 
fibonacci syntax message sends determines strategy method lookup 
strategies upward lookup corresponds standard lookup procedure presence multiple inheritance double lookup tries find appropriate method role started 
fibonacci offers declarative query operators parametric sequence types 
types immutable sequences supertypes respective mutable class association types 
query facilities fibonacci applicable fibonacci classes associations 
fibonacci reachability orthogonal persistence model 
accessible top level environment automatically persists sessions 
fibonacci persistence orthogonal interface implementation types 
fibonacci type system verifiable provably sound provides different inheritance interface implementation types inclusion polymorphism substitutability 
expressive uniform capable supporting query typing 
non reflexive static 
type system fibonacci pass tests machiavelli 
ml subtyping mechanisms ml language ml bourdoncle merz extension ml subtyping higher order polymorphic multi methods 
type inference strong static type checking substitutability 
ml type constructors provide parametric polymorphism 
type constructors ml specified acm journal name vol 

month yy 
delta leontiev covariant contravariant 
formalism systems type constraints 
theoretical language separation interface implementation provided 
handling imperative mutable types borrowed ml quite restrictive polymorphism 
restriction placed ml type system requirement types subtyping relationship number arguments variance specification 
type system fails test streams requires subtyping relationship established parametric types different variances 
ml type system expressive verifiable sound static 
passes tests person point sort apply union part set test 
inability system bourdoncle merz deal recursive constraints generalization system unrestricted subtyping parametric types quite difficult 
approaches adding subtyping ml deals multi methods 
aiken wimmers aiken aiken wimmers proposed system finds solution system subtyping constraints system deal recursive constraints 
pottier pottier proposed system recursive constraints allowed solving constraints system proves consistency ml 
adds subtyping user defined type constructors constrained types ml style type system 
resulting system appears similar ml lacks ability deal multi methods 
complexity results related solving subtyping systems appear rehof 
marlow wadler proposes type system core subset purely functional language erlang armstrong 
type system similar proposed aiken wimmers aiken aiken wimmers uses constrained type entailment type verification 
main difference absence function types general unions intersections 
system provably sound presumably complete 
addition function types system incomplete proof soundness case absent 
marlow wadler includes decidable algorithms type inferencing signature verification constraint simplification 
castagna ghelli longo castagna proposed extension calculus calculus dealing specifically multi methods 
important results generalized subject reduction church rosser proven 
shown calculus model inheritance matching multiple dispatch 
chen odersky presents type system full fledged support mutable types added ml style type system 
approach taken authors separates mutable immutable types creating parallel language syntax 
essence functional language construct imperative counterpart 
interaction mutable imperative immutable functional language components restricted set type validity rules restrict polymorphism data types data passed language components 
approach chen odersky appears sound soundness achieved expense language simplicity type system journal name vol 

month yy 
type systems object oriented database programming languages delta 
bruce verifiable sound type system single subtyping 
identifies subtyping substitutability providing concept matching subtyping 
introduced allow covariant method specification 
subtyping structural matching 
language allows subtyping matching constraints 
matching mechanism specifying constraints weaker substitutability useful updatable types 
bruce suggested subtyping dropped altogether matching intuitive flexible 
bruce distinct notions object types class types 
interface types implementation types 
object types specify signatures type information methods applicable objects object type class types specify instance variables code methods applicable objects belong class 
classes create new objects 
produced applying functions arguments values initialize produced objects argument types parametric classes arguments 
classes inheritance redefinitions 
parametric types pattern functions parameter types 
notion function type 
specifications type checking inherently different class object type 
type system verifiable sound expressive uniform satisfies inheritance requirements 
static non reflexive 
passes tests comparable sort list apply fails rest 
person test fails record subtyping allows method type redefinition record extension 
loop loop theoretical language similar 
explicit type annotations loop typing inferred automatically 
loop concept subclassing class inherits classes 
subtyping subclassing loop different concepts 
loop enjoys provably sound type checking state semantics translation 
function types loop absence explicit type annotations internally type checking purposes 
loop classes mechanisms creating objects 
subclasses necessarily correspond subtypes class type inheritance hierarchies different 
type hierarchy loop implicit class hierarchy explicitly specified programmer 
subclassing multiple methods instance variables added inherited modified 
loop theoretical language syntactic sugar subclassing loop inheritance difficult 
updates loop allowed instance variables 
semantics updates translation 
loop parametric types 
subtyping similar system shown decidable trifonov smith 
type system loop verifiable sound partially expressive uniform partially reflexive static journal name vol 

month yy 
delta leontiev fies inheritance requirements 
passes tests 
type checking mechanism uses constrained types 
system attempt find solution system constraints generates verifies system non contradictory 
theory guarantees case system solution program considered type correct 
tl tl tycoon language matthes schmidt matthes system cardelli cardelli 
borrows constrained bounded parametric types type operators polymorphic functions partial type inference 
uniform treatment functions including higher order ones atomic values 
addition features tl mutable types modules typecase statement 
tl designed basis formal system type system features mathematically proven 
questions soundness decidability remain open tl type system 
tl orthogonally persistent programming language 
tl object oriented language tests applicable 
tool tool language matthes attempt combine notions subtyping matching bounded universal quantification 
resulting language quite powerful terms supporting different kinds relationships types 
significant complexity requires anticipation type specifiers correctly choose kind type relationship needed subclasses class question created 
theoretical aspects language fully developed soundness decidability type checking proven 
tool supports single dispatch 
interface implementation subtyping termed respectively subtyping subclassing different tool 
parametric types specified type parameters bounded 
information matthes insufficient judge uniformity reflexivity type system static expressive 
matthes states tool persistent language said persistence 
performance type system respect test suite identical type systems loop 
language qian krieg brueckner theoretical objectoriented functional language 
multiple dispatch argument redefinition function types parametric types 
allows subtype specifications form subtype eq list subtype eq type 
parametric types covariant functionals argument function argument position 
justified functional stateless language 
verifiable provably sound type system 
type system quite expressive passes tests person point sort apply union part acm journal name vol 

month yy 
type systems object oriented database programming languages delta test set 

comparison type systems table ii table iii table iv 
languages systems listed table tables superseded type systems reviewed languages static type systems incomplete type systems excluded review tables 
table ii lists features reviewed type systems correspond requirements listed section 
verifiability understood presence decidable type checking algorithm 
static soundness means successfully typechecked program produce errors run time dynamic soundness means program reports possible type errors run time defined predictable manner 
static soundness strictly stronger dynamic soundness 
column uniformity means objects primitive atomic types rights objects user defined types 
column uniformity methods refers ability language treat methods messages objects 
reflection typecase indicates ability language deal dynamic type checking type safe manner 
reflection evolution shows language supports incremental type system evolution 
table iii compares various aspects type system expressibility 
columns indicate type system notion subtyping shows kind subtyping structural implicit user defined explicit supports kind inheritance single multiple type system 
third column shows type system supports method function types 
fourth column addresses issue dispatch single multiple type system 
columns deal parametricity relationship subtyping 
column indicates type system supports parametric types 
column shows type system deal constrained parametric types 
positive indication column means type system possible different parametric types formed type constructor subtyping relationship example set person subtype set student 
column indicates type system capable specifying subtyping relationships parametric types different type constructors list person subtype set person 
column indication ability type system deal mutable types 
indication negative type systems purely functional languages 
column shows type system supports intersection greatest lower bound types 
table iv demonstrates performance reviewed type systems test suite 
analysis results table iv concluded languages mini cecil rate best test suite 
provably sound typechecking fact typechecking mini cecil programs undecidable litvinov 
systems sound verifiable type checking impressive sather type system lacks multiple dispatch union types 
soundness sather type system acm journal name vol 

month yy 
delta leontiev table ii 
type system features soundness separation type system verifiability static dynamic interface implementation unknown unknown java core gj unknown unknown pizza unknown odmg unknown unknown sql unknown unknown dbpl unknown unknown modula unknown unknown modula unknown unknown oberon unknown unknown theta unknown unknown ada unknown unknown sather emerald unknown unknown beta unknown napier strongtalk unknown unknown cecil unknown unknown unknown mini cecil unknown unknown unknown unknown tm unknown ml machiavelli fibonacci ml loop tl unknown unknown tool unknown unknown uniformity reflection type system substitutability methods typecase evolution java gj pizza odmg sql dbpl modula modula oberon theta unknown ada sather emerald beta napier strongtalk cecil unknown mini cecil unknown unknown tm ml machiavelli fibonacci ml loop tl unknown tool unknown covariant arrays kept pizza backward compatibility java features modules packages fragments types substitutability works pointers object types type examined dynamically typechecking take account classes implementation types evolution type unsafe acm journal name vol 

month yy 
type systems object oriented database programming languages delta table iii 
type system expressibility subtyping method dispatch type system inheritance types user defined multiple single user defined multiple single user defined multiple single user defined single java user defined multiple single gj user defined multiple single user defined multiple single pizza user defined multiple single user defined multiple single odmg user defined multiple single sql user defined single single dbpl user defined modula user defined single single modula user defined single single oberon structural single theta user defined multiple single ada user defined single single sather user defined multiple single emerald structural single beta structural single single napier strongtalk structural single single cecil user defined multiple multiple user defined multiple multiple mini cecil user defined multiple multiple user defined multiple multiple tm multiple single ml structural machiavelli structural fibonacci user defined single unknown ml multiple multiple structural single loop structural single tl structural tool structural multiple single user defined multiple multiple parametric types mutable intersection type system bounded intra inter types types java gj pizza odmg sql dbpl modula modula oberon theta ada sather emerald unknown beta napier strongtalk cecil mini cecil tm ml machiavelli fibonacci implicit ml implicit loop implicit tl tool implicit structural subtyping default user explicitly turn needed user defined classes structural algebraic data types interfaces classes single inheritance block types virtual functions dispatched tagged types dispatched dispatch modeled record field extension execution system defined parameters specification properties features modules types language provides mechanism expressive bounded quantification covariant covariant parameters allowed system defined array ref acm journal name vol 

month yy 
delta leontiev table iv 
type system tests type system person point comparable streams sort java gj pizza odmg sql dbpl modula modula oberon theta ada sather emerald beta napier strongtalk cecil mini cecil tm ml machiavelli fibonacci ml loop tool type system list set apply browser 
java gj union union pizza union odmg union sql union dbpl modula modula oberon theta ada sather emerald beta napier strongtalk union cecil mini cecil union tm ml machiavelli fibonacci ml union loop tool union relies dynamic type checking suggestive type checking subtyping relationship required test holds type derived type parameters explicitly instantiated test programmed blocks messages built operators dealing sets provided typing special non user definable rtti type examined dynamically typechecking take account special support sorting comparison sql 
acm journal name vol 

month yy 
type systems object oriented database programming languages delta formally proven 
theoretical type systems show similar performance test suite 
sound type checking substitutability parametricity method types multimethods appear type system ml 
ml ml clones severely restricts usage mutable types deal certain aspects binary methods parametricity failed tests comparable streams 
test streams proved difficult 
surprising test outlines situation occurs language dealing operations relatively high level 
type systems emerald mini cecil able pass test type systems proof soundness 
type systems nice theoretical properties show moderate performance test suite type systems perform tests lack theoretical basis 
concluded languages reviewed completely satisfies requirements laid section 
provably sound type systems passed majority tests 
test passed type system showing necessary mechanisms developed 
consistent theoretically sound combination remains elusive far 
type system satisfies requirements developed leontiev 
type system reviewed developed specifically conform requirements listed section 
demonstrates requirements consistent satisfied single theoretically sound type system 
belief type system important step development theoretically sound reflexive uniform dynamic persistent object oriented programming language 
agesen freund mitchell 
adding type parametrization java language 
proceedings oopsla 
agrawal gehani 
ode object database environment language data model 
proceedings acm sigmod international conference management data 

aiken wimmers 
type inclusion constraints type inference 
tech 
rep rj ibm research division 
august 
aiken wimmers lakshman 
soft typing conditional types 
conference record popl st acm sigplan sigact symposium principles programming languages 
acm press 

odmg object model sense 
sigplan notices 

type checking oql queries odmg type systems 
acm transactions database systems september 
albano cardelli orsini 
galileo strongly typed interactive conceptual language 
acm transactions database systems june 
albano ghelli orsini 
fibonacci programming language object databases 
vldb journal 
apple computer 
dylan interim manual 
apple computer acm journal name vol 

month yy 
delta leontiev armstrong virding om williams 
concurrent programming erlang nd ed 
prentice hall 
arnold gosling 
java language specification th ed 
addison wesley 
isbn 
atkinson dewitt dittrich maier zdonik 
object oriented database system manifesto 
building object oriented database system story delobel kanellakis eds 
atkinson morrison 
orthogonally persistent object systems 
vldb journal 
atkinson buneman 
types persistence database programming languages 
acm computing surveys june 
bal de 
tm manual 
faculty computer science university twente 
version revision available electronically 
url ftp ftp cs utwente nl pub doc tm baumgartner russo 
interaction object oriented design patterns programming languages 
tech 
rep csd tr computer sciences purdue university 
birtwistle dahl nygaard 
simula 
lund sweden bratt institute fuer frg kent england 
black palsberg 
foundations object oriented languages 
acm sigplan notices 
workshop report 
bobrow demichiel gabriel keene kiczales moon 
common lisp object system specification 
document 
bourdoncle merz 
primitive subtyping implicit polymorphism 
foundations object oriented languages 
extended 
bourdoncle merz 
type checking higher order polymorphic multi methods 
proceedings th acm conference principles programming languages popl 
boyland castagna 
type safe compilation covariant specialization practical case 
tech 
rep ucb csd university california computer science division eecs berkeley california 
november 
boyland castagna 
parasitic methods implementation multi methods java 
sigplan notices 
proceedings oopsla 
url ftp ftp ens fr pub dmi users castagna oopsla ps gz bracha griswold 
strongtalk typechecking smalltalk production environment 
proceedings acm conference object oriented programming systems languages applications 
bracha odersky stoutamire wadler 
gj extending java programming language type parameters 
manuscript 
revised august 
bracha odersky stoutamire wadler 
gj specification 
manuscript 
bracha odersky stoutamire wadler 
making safe past adding genericity java programming language 
proceedings th annual acm sigplan conference object oriented programming systems languages applications oopsla 

bruce cardelli castagna hopkins object group leavens pierce 
binary methods 
theory practice object systems 
bruce petersen 
subtyping match objectoriented languages 
informal proceedings fourth workshop foundations objectoriented languages fool 
contributed talk 
bruce odersky wadler 
statically safe alternative virtual types 
proceedings european conference object oriented programming ecoop 
acm journal name vol 

month yy 
type systems object oriented database programming languages delta bruce gent 
type safe polymorphic object oriented language 
accessible anonymous ftp 
url ftp cs williams edu pub kim dvi bruce gent 
type safe polymorphic objectoriented language 
proceedings th european conference object oriented programming ecoop ed 
lncs 
springer aarhus denmark 
extended 
bruce 
typing object oriented languages achieving expressibility safety 
url ftp cs williams edu pub kim static ps buneman ohori 
polymorphism type inference database programming 
acm transactions database systems march 
buneman pierce 
union types semistructured data 
tech 
rep ms cis department cis university pennsylvania 
cardelli 
polymorphic calculus type type 
tech 
rep dec src lytton avenue palo alto ca 
may src research report 
cardelli 
semantics multiple inheritance 
information computation 
cardelli 
typeful programming 
formal description programming concepts neuhold paul eds 
ifip state art reports series 
springer verlag 
url www luca demon uk bibliography html cardelli 
implementation 
tech 
rep dec systems research center 
february 
cardelli 
type systems 
computer science engineering handbook tucker ed 
crc press chapter 
url www luca demon uk bibliography html cardelli martini mitchell scedrov 
extension system subtyping 
international conference theoretical aspects computer software ito meyer eds 

lecture notes computer science 
castagna 
object oriented programming unified foundation 
progress theoretical computer science 
boston chapter type systems object oriented programming 
castagna ghelli longo 
calculus overloaded functions subtyping 
information computation february 
cattell barry bartels eastman jordan springer wade 
object database standard odmg 
morgan kaufmann publishers los altos ca usa 
chambers 
object oriented multi methods cecil 
ecoop european conference object oriented programming utrecht netherlands madsen ed 
lecture notes computer science vol 

springer verlag new york 
chambers 
cecil language specification rationale 
tech 
rep tr department computer science engineering fr university washington 
march 
chambers leavens 
core object oriented language block structure multimethods semantics typing 
tech 
rep department computer science iowa state university 
december 
chambers leavens 
core object oriented language block structure multimethods semantics typing 
fool fourth international workshop foundations object oriented languages paris france 
chen odersky 
type system lambda calculus assignment 
proc 
theoretical aspects computer science sendai japan 
spinger lncs 
connor morrison 
subtyping assignment database programming languages 
proceedings rd international workshop database programming languages 
greece 
day gruber liskov myers 
subtypes vs clauses constraining parametric polymorphism 
sigplan notices october 
acm journal name vol 

month yy 
delta leontiev drossopoulou eisenbach 
java type safe probably 
proceedings th european conference object oriented programming ecoop 
smith trifonov 
sound polymorphic type inference objects 
sigplan notices october 
smith trifonov 
type inference recursively constrained types application oop 
electronic notes theoretical computer science 
url www elsevier nl locate entcs volume html smith trifonov 
interpretation typed oop language state 
lisp symbolic computation 
fisher mitchell 
development type systems object oriented languages 
theory practice object systems 
url ftp theory stanford edu pub papers ps franz 
programming language fresh look object orientation 
software concepts tools 
matthes 
integrating subtyping matching type quantification practical perspective 
proceedings th european conference object oriented programming 
springer verlag linz austria 
goldberg robson 
st language 
addison wesley 
harbison 
modula 
prentice hall 
hauck 
implementation uniform object model 
parallel computer architectures theory hardware software applications sfb colloquium sfb sfb bode cin eds 
number lecture notes computer science 
springer 
kempe software capital enterprises 
ada manual 
kempe software capital enterprises 
available electronically 
url www com rm kim 
object oriented database systems promises reality 
proceedings th vldb conference 

kirby connor morrison stemple 
reflection support type safe evolution persistent systems 
tech 
rep cs university st andrews 
klas 
persistence object oriented database programming language 
tech 
rep tr international computer science institute center st suite berkeley ca 
july 
lalonde pugh 
subclassing subtyping 
journal object oriented programming january 
leavens millstein 
multiple dispatch dispatch tuples 
proceedings conference object oriented programming systems languages applications oopsla 

url www cs washington edu homes todd papers oopsla ps richard 
object oriented data model 
building object oriented database system story delobel kanellakis eds 
leontiev 
type system object oriented database programming language 
ph thesis department computing science university alberta 
available technical report tr 
leontiev ozsu szafron 
separation interface implementation representation object dbmss 
proceedings tools 
santa barbara california 
litvinov 
constraint polymorphism cecil practical static type system 
proceedings conference object oriented programming systems languages applications oopsla 
acm journal name vol 

month yy 
type systems object oriented database programming languages delta leontiev 
dbms modula 
ran data processing center moscow 
russian baz modula 
madsen mo ller pedersen nygaard 
object oriented programming beta programming language 
addison wesley 
isbn 
marlow wadler 
practical subtyping system erlang 
proceedings second international conference functional programming 
amsterdam 
matthes schmidt 
persistent polymorphic programming tycoon 
fide technical report series fide department computing sciences university glasgow glasgow qq 
august 
matthes schmidt 
bulk types built add 
proceedings third international workshop database programming languages 
morgan kaufmann publishers 
matthes schmidt 
definition tycoon language preliminary report 
tech 
rep fbi hh universit hamburg 
october 
meyer 
eiffel language 
prentice hall 
miller tofte harper 
definition standard ml 
mit press 
morrison brown connor cutts dearle kirby munro 
napier manual 
university st andrews 
release 
ok wirth 
programming language oberon 
manuscript 
institut ur eth urich 
myers bank liskov 
parameterized types java 
proceedings th acm principles programming languages popl 
odersky 
putting type annotations 
proc 
rd acm symposium principles programming languages 

odersky wadler 
pizza java translating theory practice 
proceedings th acm principles programming languages popl 
ohori buneman breazu tannen 
database programming machiavelli polymorphic language static type inference 
sigmod record 
pottier 
type inference presence subtyping theory practice 
ph thesis universit paris vii 
qian krieg brueckner 
typed oo functional programming late binding 
proceedings th european conference object oriented programming cointe ed 
lncs vol 

springer 
raj levy black hutchinson jul 
emerald general purpose programming language 
software practice experience january 
rehof 
complexity simple subtyping systems 
ph thesis diku department computer science university copenhagen 
richardson carey schuh 
design programming language 
acm transactions programming languages systems july 
roe szyperski 
lightweight parametric polymorphism oberon 
proceedings joint modular languages conference 
saraswat 
java type safe 
available electronically 
url www research att com vj bug html schmidt matthes 
dbpl project advances modular database programming 
information systems 

type inference bounded quantification 
ph thesis department computer science university edinburgh 
technical report ecs lfcs 
shang 
annotated 
software systems research laboratory motorola illinois 
draft 
sql 
database languages sql 
american national standard information technology 
ansi iso iec 
acm journal name vol 

month yy 
delta leontiev stoutamire omohundro 
sather specification 
tech 
rep tr international computer science institute berkeley 
august 
stroustrup 
programming language 
addison wesley 
taivalsaari 
notion inheritance 
acm computing surveys september 
thorup 
genericity java virtual types 
proceedings european conference object oriented programming ecoop 
trifonov smith 
subtyping constrained types 
proceedings rd international static analysis symposium 

lecture notes computer science 
tsichritzis nierstrasz gibbs 
objects objects 
international journal intelligent cooperative information systems march 

xquery formal semantics 

working draft 
url www org tr wd query semantics wirth 
programming modula nd ed 
springer verlag 
wright 
polymorphism imperative languages imperative types 
tech 
rep tr department computer science rice university 
february 
received june revised december accepted may acm journal name vol 

month yy 
