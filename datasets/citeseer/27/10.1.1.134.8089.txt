sender message logging overhead mechanism providing transparent fault tolerance distributed systems 
di ers conventional message logging mechanisms message logged volatile memory machine message sent 
keeping message log sender local memory allows recover single failure time expense synchronously logging message stable storage 
message log asynchronously written stable storage delaying computation part sender periodic checkpoint 
maintaining sender message log requires extra network packet non fault tolerant reliable message communication imposes little additional synchronization delay 
applied transparently existing distributed applications require specialized hardware 
currently sun workstations 
sender message logging overhead mechanism providing fault tolerance distributed systems 
applied transparently existing applications require specialized hardware 
supports recovery processes executing distributed system single concurrent failure system time process fail process failed recovering 
sender message logging add fault tolerance compute intensive applications executing parallel collection diskless workstations connected local area network 
network personal workstations individual machines unavailable hardware failure workstation owner reclaiming machine 
type failure wish recover 
research supported part national science foundation dcr development award 
sender message logging david johnson willy zwaenepoel department computer science rice university houston texas currently support recovery complicated failure modes concurrent failures network partitioning concentrate situation single failure time 
address issues maintaining consistency availability static data le systems databases constraints real time applications 
sender message logging di ers types message logging mechanisms messages logged local volatile memory machine illustrated 
keeping message log sender local memory allows recover single failure time expense synchronously logging message special logging backup process stable storage having roll back processes failed achieve consistent state recovery 
message log asynchronously written stable storage part sender periodic checkpoint 
allows stable storage logging proceed independently computation strom yemini optimistic recovery protocol 
sender message logging protocols accomplish volatile logging minimum overhead 
require extra message non fault tolerant reliable message communication impose little additional synchronization delay 
technique distributes message logging overhead proportionally processes sending messages avoids single point failure possible centralized logging facility 
describes design operation sender message logging mechanism 
section model distributed system assumed sender message logging described 
overview design motivation section message log messages sender receiver process message log con guration section describes data structures necessary realization 
section provides detailed description message logging failure recovery protocols sender message logging informal argument correctness 
section discusses optimistic version logging protocol currently development 
related covered section avenues section 
distributed system model sender message logging designed existing distributed systems addition specialized hardware system specialized code applications 
assumptions hardware applications system composed network fail processors 
packet delivery network guaranteed reliable delivery implemented retransmitting packet limited number times waiting destination 
received destination host assumed failed 
network supports broadcast communication 
processors reached broadcast limited number retransmissions packet 
wide stable storage service accessible processors system 
processes communicate messages 
processes system deterministic sense processes start state receive identical sequence inputs produce identical sequence outputs nish state 
state process completely determined starting state sequence messages received 
design motivation sender message logging message transmitted stored volatile memory machine itwas sent 
additionally process occasionally checkpointed stable storage coordination checkpoints individual processes 
process receives message returns sender receive sequence number log message 
return rsn may merged required existing network protocol 
rsn indicates order message received relative messages sent process senders 
ordering information normally available sender required successful recovery messages replayed log order received failure 
recovery failed process done restarting failed process checkpoint replaying messages logs senders ascending order rsn 
shows example distributed log resulting protocol 
example process initially rsn value 
rst received messages process messages process nally message 
message received incremented current rsn returned new value sender 
correct sender got rsn added local log message 
receiving messages current value rsn 
design motivated desire minimize overhead system imposed provision fault tolerance 
general components overhead message logging checkpointing failure recovery 
concentrate minimizing overhead message logging 
message system logged overhead places continuous burden system faults occur 
checkpointing frequency tuned balance expense time needed recovery space needed store log messages received checkpoint 
overhead failure recovery important message logging failures infrequent 
method logging messages derived simple analysis minimum cost method doing required logging 
process sends message sender receiver naturally get copy message 
synchronously sending copy logging faster simply save copy local memory sending receiving machine 
purpose logging recover receiver fails receiver sending machine easily save copy ofeach message sent 
keeping message log sender local memory distributes logging overhead proportionally processes send messages avoids possible single point fail rsn example message log sender message logging ure centralized log 
idea forms basis sender message logging mechanism 
data structures inclusion sender message logging distributed system requires maintenance items system data participating process send sequence number ssn sequence number messages sent process 
duplicate message suppression recovery 
distributed systems provide fault tolerance typically require sequence number suppression duplicate messages 
sequence number included checkpoint ofa process suppress duplicates caused process recovery 
receive sequence number rsn sequence number messages received process 
rsn incremented time new message received value incremented assigned rsn message returned sender 
message log messages sent process 
contain entire message sent including data identi cation destination process ssn message 
rsn message returned receiver added log 
process checkpointed messages sent process received checkpoint removed logs sending processes 
table recording highest ssn value received message sent process process communicated 
duplicate message detection 
table maintaining rsn value returned message received checkpoint process 
table indexed ssn message may purged process checkpointed 
data items included process checkpointed 
process restarted checkpoint values restored rest checkpointed data 
protocols act logging message sender message logging atomic message data entered log sent rsn entered received target process 
possible receiver fail messages recorded sender messages called partially logged messages 
message logging protocols designed partially logged messages exist failed process sent order sequence fully logged messages sent ascending rsn order 
message logging protocol sender message logging protocol steps required send message process process 
process sends message process inserts message local volatile message log 

process returns includes rsn value assigned 
process adds rsn message log sends rsn operation protocol absence transmission errors illustrated 
message rsn packet rsn packet received time preceding packet retransmitted 
response received maximum number retransmissions destination machine assumed failed 
returning rsn receiver continue execution waiting rsn send messages including input output outside world messages received acknowledged 
sender may continue normal execution immediately message sent continue retransmit original message rsn packet arrives 
comparison typical protocols reliable message delivery fault tolerance protocol requires extra network packet acknowledge rsn 
sender experience extra delay incur overhead copying message rsn log 
receiver may experience delay depending needs send messages immediately receipt original message 
message ack rsn ack new sends receiver delayed 
time operation message logging protocol absence transmission errors failure recovery protocol recover failed process rst restarted available processor checkpoint 
fully logged messages process resent toit ascending order logged 
messages message data rsn recorded log resent time partially logged messages sent process order 
separate message log stored process sent messages failed process checkpoint 
recovering process broadcasts requests logged messages replayed ascending rsn order message current rsn recorded checkpoint 
recovering process executes checkpointed state resends messages sent checkpoint failure 
ssn sending messages included process checkpoint ssns recovery messages originally sent failure 
receiving message ssn equal highest ssn received sender message rejected duplicate 
receiver checkpointed originally receiving message returns including rsn assigned rst received message 
rsn value retrieved table recording correspondence ssn message received rsn value assigned message 
receiving process checkpointed message rst received table entry purged indication message need logged sender returned 
correctness show case single failure time mechanism correctly restore state failed process consistent states processes system 
recovery process restored checkpointed state sequence fully logged messages replayed order received failure ascending rsn order checkpointed rsn value 
assumption single concurrent failure messages available volatile logs assumption determinism process reaches state receipt messages failure 
partially logged messages replayed process order 
processes restricted sending new messages messages received fully logged processes receiver ected receipt message partially logged 
change order receipt partially logged messages recovery ect state receiver alter consistency processes system 
process recovering resend messages sent checkpoint failure 
ssn sending messages part checkpoint duplicates correctly detected rejected receivers 
data structures necessary participation protocol section correctly restored recovered checkpoint modi ed result receiving sequence messages 
particular volatile message log failed process recreated process current recovery completed 
normally original rsn returned response duplicate message added log 
receiver checkpointed message originally received message needed recovery receiver 
case indication message needed returned partially logged message removed volatile log rsn recorded 
case correct operation protocol assured 
mechanism avoids problem domino ect processes failed need rolled back failure 
optimistic alternative protocol alternative basic message logging protocol section allows receiver send new messages processes waiting messages received fully logged senders 
optimistic protocol optimistic assumption logging eventually completed retransmissions necessary failure occurs maintains extra information able roll back system recover consistent state assumption turns wrong 
protocol development section presents initial overview design 
optimistic protocol possible process enter state consistent system state may created recovery failure 
example scenario shown possible 
process received message sent message process process failed rsn message added log sender 
recovery guarantee message resent order received failure 
process potentially recreate state message sent process may exist state consistent state recreated process recovery 
introduce terminology describe situation 
state process unrecoverable messages received fully logged senders 
process fails unrecoverable state state lost state may recoverable messages received eventually fully logged return 
process receives message orphan failure time possible scenario optimistic logging protocol state receiver depends state sender time message sent part sender state included message 
process depends state lost process orphan process state process orphan state 
short orphan process process received message failed process sent message receiving message fully logged time failure 
current rsn process included messages sent process process maintains table highest rsn received process process orphan failure process ifthe value rsn table higher rsn able recover sequence fully logged messages 
determine failure caused processes orphaned broadcasts value rsn itwas able recover 
process higher rsn value recorded table highest rsn values received concludes orphan 
addition invoked process failure orphan detection algorithm process checkpointed process orphan checkpoint state orphaned needed recovery 
recovering state process states orphaned processes recovered forcing fail time recovering checkpoints message logs manner normal failed processes 
messages logged orphaned process may recorded memory failed process log information reconstructed recovery process 
failed process orphans recovered states consistent time fully logged message received failure 
form logging protocol number advantages addition added concurrency allowing receiver proceed asynchronously receipt rsn 
instance sender delay sending rsn packet substantial period time piggyback message needs send receiving process timeout mechanism message 
reduce number network packets number reliable delivery system fault tolerance 
extending processes remote procedure call protocol communicate explicit packet return rpc call implicitly acknowledges call 
case rsn piggybacked rpc return packet rsn piggybacked call packet additional network packets provision fault tolerance highly optimized protocol 
related anumber fault tolerance systems require applications written speci computational models simplify provision fault tolerance 
example argus system requires applications structured possibly nested set atomic actions data types 
sender message logging transparent mechanism impose restrictions applications 
distributed operating system publishing mechanism message logging require specialized hardware assist logging 
uses special networking hardware atomically sends message backup processes sender receiver 
publishing uses centralized logging machine reliably receive network packet 
sender message logging requires specialized hardware broader class existing systems loss ciency 
strom yemini optimistic recovery mechanism uses optimistic asynchronous message logging protocol delay sender receiver synchronization stable storage logging 
causal dependency tracking process rollback recreate consistent system state failure 
presence volatile log sender message logging allows recover single failure time rollback maintaining asynchrony computation stable storage logging 
furthermore desire recover single concurrent failure leads protocols signi cantly complicated message logging 
sender message logging mechanism ers simple low overhead solution providing fault tolerance distributed systems 
keeping volatile log allows recover single failure time rollback avoids expense synchronously logging message stable storage 
organizing volatile log sender results cient logging protocol minimal extra network communication synchronization delay 
results cient fault tolerance protocol works naturally constraints distributed system 
special knowledge fault tolerance required programs programmers sender message logging 
rely specialized hardware achieve fault tolerance sender message logging added easily existing distributed systems designed new systems 
currently implementing prototype message logging system collection sun workstations connected ethernet network 
system di ers slightly distributed system model assumed believe satisfactorily handled implementation 
continuing development optimistic logging protocol discussed section 
considering extension sender message logging causal dependency tracking similar strom yemini optimistic recovery protocol allow recovery multiple concurrent failures 
presence volatile log sender greatly reduce occurrence orphaned processes reducing need roll back processes failed 
ken birman david cheriton elaine hill ed lazowska rick schlichting comments earlier drafts 
referees help improving clarity presentation 
andrew birrell bruce jay nelson 
implementing remote procedure calls 
acm transactions computer systems february 
anita borg jim sam 
message system supporting fault tolerance 
proceedings ninth acm symposium operating systems principles pages acm october 
david cheriton 
kernel software base distributed systems 
ieee software april 
david cheriton willy zwaenepoel 
distributed kernel performance diskless workstations 
proceedings ninth acm symposium operating systems principles pages acm october 
gray 
notes database operating systems 
bayer graham editors operating systems advanced course chapter 
pages springer verlag new york 
hecht 
fault tolerant software real time applications 
acm computing surveys december 
kopetz 
resilient real time systems 
anderson editor resilient computing systems chapter pages collins london 
barbara liskov robert er 
guardians actions linguistic support robust distributed programs 
acm transactions programming languages systems july 
michael powell david presotto 
pub reliable broadcast communication mechanism 
proceedings ninth acm symposium operating systems principles pages acm october 
brian randell 
system structure software fault tolerance 
ieee transactions software engineering se june 
david russell 
state restoration systems communicating processes 
ieee transactions software engineering se march 
richard schlichting fred schneider 
processors approach designing faulttolerant distributed computing systems 
acm transactions computer systems august 
robert strom yemini 
optimistic recovery distributed systems 
acm transactions computer systems august 
