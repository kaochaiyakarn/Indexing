niagaracq scalable continuous query system internet databases chen david dewitt feng tian yuan wang computer sciences department university wisconsin madison continuous queries persistent queries allow users receive new results available 
continuous query systems transform passive web active environment need able support millions queries due scale internet 
existing systems achieved level scalability 
niagaracq addresses problem grouping continuous queries observation web queries share similar structures 
grouped queries share common computation tend fit memory reduce cost significantly 
furthermore grouping selection predicates eliminate large number unnecessary query invocations 
grouping technique distinguished previous group optimization approaches ways 
incremental group optimization strategy dynamic re grouping 
new queries added existing query groups having regroup installed queries 
second query split scheme requires minimal changes general purpose query engine 
third niagaracq groups change timer queries uniform way 
insure niagaracq scalable employed techniques including incremental evaluation continuous queries pull push models detecting heterogeneous data source changes memory caching 
presents design niagaracq system gives experimental results system performance scalability 

continuous queries lpt allow users obtain new results database having issue query repeatedly 
continuous queries especially useful environment internet comprised large amounts frequently changing information 
example users want issue continuous queries form permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
mod dallas tx usa acm dewitt cs wisc edu notify price dell micron stock drops price intel stock remains unchanged month 
order handle large number users diverse interests continuous query system capable supporting large number triggers expressed complex queries data sets 
goal niagara project develop distributed database system querying distributed xml data sets query language xml ql dff 
part effort goal allow large number users able register continuous queries high level query language xml ql 
hypothesize queries tend similar hope able handle millions continuous queries grouping similar queries 
group optimization benefits 
grouped queries share computation 
second common execution plans grouped queries reside memory significantly saving costs compared executing query separately 
third grouping possible test firing conditions continuous queries avoiding unnecessary invocations 
previous group optimization efforts cm rc sel focused finding optimal plan small number similar queries 
approach applicable continuous query system reasons 
computationally expensive handle large number queries 
second designed environment web continuous queries dynamically added removed 
approach uses novel incremental group optimization approach queries grouped signatures 
new query arrives existing groups considered possible optimization choices re grouping queries system 
new query merged existing groups signatures match query 
incremental group optimization scheme employs scheme 
signature new query matched sub plan corresponding signature replaced scan output file produced matching group 
optimization process continues remainder query tree bottom fashion entire query analyzed 
case group matches signature new query new query group signature created system 
continuous query split smaller queries inputs queries monitored techniques inputs userdefined continuous queries 
main advantage approach implemented general query engine minor modifications 
advantage approach easy implement demonstrate section scalable 
queries continuously added removed groups time quality group deteriorate leading reduction performance system 
case groups may require dynamic regrouping re establish effectiveness 
continuous queries classified categories depending criteria trigger execution 
change continuous queries fired soon new relevant data available 
timer continuous queries executed time intervals specified submitting user 
previous example day traders probably want know desired price information immediately longer term investors may satisfied notified hour 
change continuous queries obviously provide better response time waste system resources instantaneous answers really required 
timer continuous queries supported efficiently query systems support timer continuous queries scalable 
users specify various overlapping time intervals continuous queries grouping timer queries difficult grouping purely change queries 
approach handles types queries uniformly 
niagaracq continuous query sub system niagara project net data management system developed university wisconsin oregon graduate institute 
niagaracq supports scalable continuous query processing multiple distributed xml files deploying incremental group optimization ideas introduced 
number techniques niagaracq scalable efficient 
niagaracq supports incremental evaluation continuous queries considering changed portion updated xml file entire file 
frequently small portion file gets updated strategy save significant amounts computation 
advantage incremental evaluation repetitive evaluation avoided new results returned users 
niagaracq monitor detect data source changes push poll models heterogeneous sources 
due scale system information continuous queries temporary results held memory 
caching mechanism obtain performance limited amounts memory 
rest organized follows 
section niagaracq command language briefly described 
new group optimization approach section implementation described section 
section examines performance incremental continuous query optimization scheme 
related described section 
conclude section 

niagaracq command language niagaracq defines simple command language creating dropping continuous queries 
command create continuous query form create cq name xml ql query action start start time time interval expire expiration time delete continuous query command delete cq name users write continuous queries niagaracq combining ordinary xml ql query additional time information 
query effective start time 
time interval indicates query executed 
query timer time interval zero change 
continuous queries deleted system automatically expiration time 
provided default values time 
values set database administrator 
action performed xml ql query results 
example mailto dewitt cs wisc edu complex stored procedure processing results query 
users delete installed queries explicitly delete command 

incremental group optimization approach section novel incremental group optimization strategy scales large number queries 
strategy applied wide range group optimization methods 
specific group optimization method approach described section 
section introduces query split scheme requires minimal changes general purpose query engine 
section apply group optimization method selection join operators 
discuss system supports timer queries section 
section contains brief discussion caching mechanisms niagaracq system scalable 
general strategy incremental group optimization previous group optimization strategies cm rc sel focused finding optimal global plan small number queries 
techniques useful query environment small number similar queries enter system short time interval advance 
naive approach grouping continuous queries apply methods directly queries new query added 
contend approach acceptable large dynamic environments associated performance overhead 
propose incremental group optimization strategy continuous queries 
groups created existing queries signatures represent similar structures queries 
groups allow common parts queries shared 
individual query query group shares results execution group plan 
new query submitted group optimizer considers existing groups potential optimization choices 
new query merged existing groups match signatures 
existing queries re grouped approach 
strategy result sub optimal groups reduces cost group optimization significantly 
importantly scalable dynamic environment 
continuous queries frequently added removed possible current groups may inefficient 
dynamic re grouping helpful re group part queries periodically system performance degrades threshold 
left 
incremental group optimization expression signature incremental grouping strategy designed scalable group optimization method expression signatures 
expression signatures hch represent syntax structure possibly different constant values different queries 
specific implementation signature concept 
expression signature purposes illustration xml ql queries database stock quotes 
quotes quote symbol intc element www cs wisc edu db quotes xml construct quotes quote symbol msft element www cs wisc edu db quotes xml construct xml ql query examples xml ql queries retrieve stock information intel symbol intc microsoft symbol msft 
users submit similar queries different stock symbols 
expression signature created selection predicates replacing constants appearing predicates placeholder 
expression signature queries shown 
quotes quote symbol constant quotes xml expression signature queries query plan generated niagara query parser 
shows query plans queries 
lower part query plan corresponds expression signature queries 
new operator added top xml ql query plan query parsed 
expression signatures allow queries syntactic structure grouped share computation hch 
expression signatures different queries discussed 
note niagaracq users specify xml ql query specifying destination data sources file name position giving dtd name 
allows users specify continuous queries naming data sources 
group query optimizer easily extended support capability mapping mechanism offered niagara search engine 
losing generality incremental grouping algorithm assume continuous queries defined specific data source 
group trigger action select symbol intc file scan quotes xml query plans queries groups created queries expression signatures 
example group generated queries expression signature 
group discussion 
group consists parts 

group signature group signature common expression signature queries group 
example expression signature 
constant value destination buffer 

intc dest 
msft dest 


trigger action select symbol msft file scan quotes xml example group constant table 
group constant table group constant table contains signature constants queries group 
constant table stored xml file 
example intc stored table 
tuples produced shared computation need directed correct individual query processing destination information stored constant 

group plan group plan query plan shared queries group 
derived common part single query plans group 
shows group plan queries 
file scan trigger action trigger action split join symbol constant value group plan file quotes xml constant table group plan queries expression signature allows queries group different constants 
result shared computation contains results queries group results filtered sent correct destination operator processing 
niagaracq performs filtering combining special split operator join operator constant values stored constant table 
tuples data source quotes xml joined constant table 
split operator distributes result tuple join operator correct destination destination buffer name tuple obtained constant table 
split operator removes name destination buffer tuple put output stream subsequent operators query need modified 
addition queries constant value share output stream 
feature significantly reduce number output buffers 
generally number active groups order thousands thousands group plans stored memory resident hash table termed group table group signature hash key 
group constant tables large stored disk 
incremental grouping algorithm section briefly describe niagaracq group optimizer performs incremental group optimization 
new query submitted group optimizer traverses query plan bottom tries match expression signature signatures existing groups 
expression signature new query signature matches signature group 
group optimizer breaks query plan parts 
lower part query removed 
upper part query added group plan 
constant table entry aol added new destination buffer allocated 
quotes quote symbol aol element www cs wisc edu db quotes xml construct xml ql query examples trigger action select symbol aol file scan quotes xml query plan query case signature query match group signature new group generated signature added group table 
general query may signatures may merged groups system 
matching process continue remainder query plan top plan reached 
incremental grouping efficient requires traversal query plan 
sections discuss query split scheme describe incremental group optimization performed selection join operators 
query split materialized intermediate files destination buffer split operator implemented pipelined scheme intermediate file 
initial design split operator pipeline scheme tuples pipelined output operator input operator 
pipeline scheme grouping timer continuous queries 
timer queries fired specified time output tuples retained firing time 
difficult split operator determine tuples stored long stored 
addition pipelined approach parts query plans group combined group plan resulting single execution plan queries group 
single plan disadvantages 
structure directed graph tree 
plan may complicated general purpose xml ql query engine execute 
second combined plan may large require resources limits systems 
large portion query plan may need executed query invocation 
example suppose price intel stock changes 
destination buffer microsoft empty upper part microsoft query trigger action executed 
problem avoided execution engine ability selectively load part query plan bottom manner 
capability require special implementation xml ql query engine 
file scan quotes xml trig 
act 
file scan file split join symbol constant value file scan constant table trig 
act 
file scan file group plan constant value 

intc file 
msft file 


intermediate file name query split scheme intermediate files split operator input stream multiple possibly tens thousands output streams split operators may bottleneck parts queries consume output tuples split stream widely varying rates 
example suppose queries grouped simple selection queries expensive query involving multiple joins 
expensive query may process input split operator slowly may block simple queries 
pipeline scheme systems support small number change continuous queries 
goal support millions change timer continuous queries adopt approach scalable easier implement 
try general query engine maximal extent possible 
new design split operator writes output stream intermediate file 
query plan cut parts split operator file scan operator added upper part plan read intermediate file 
niagaracq treats new queries normal user queries 
particular changes intermediate files monitored way ordinary data sources 
new continuous query may overlap multiple query groups query may split queries 
total number queries system exceed number groups plus number original user queries 
assume thousands groups generated millions user queries number queries system increase slightly 
intermediate file names stored constant table grouped continuous queries constant share intermediate file 
advantages new design include 
query scheduled independently necessary queries executed 
example price intel stock changes queries intermediate files file scheduled 
usually small amount data changed installed continuous queries fired 
computation time system resource usage significantly reduced 

queries split operator standard treestructured query format scheduled executed general query engine 

query system size common user query executed consuming unusual amount system resources 

approach handles intermediate files original data source files uniformly 
changes materialized intermediate files processed monitored just changes original data files 

potential bottleneck problem pipelined approach avoided 
potential disadvantages 
split operator blocking operator execution upper part query wait intermediate files completely materialized 
continuous queries run data changes usually large believe impact blocking significant 
second reading writing intermediate files incurs extra disk os 
data changes relatively small anticipate buffered memory upper part queries consume 
disk os case queries long time intervals data changes may accumulated 
situation data changes need written disk matter strategy 
discussed section niagaracq uses special caching mechanisms reduce cost 
incremental grouping general selection predicates primary focus predicates format attribute op constant attribute path expression wildcards 
op includes 
formats dominate selection queries 
predicate formats handled approach discuss 
shows example range selection query returns stock price risen 
gives expression signature 
group plan queries signature join condition change ratio constant 
general range query lower bound upper bound values 
columns needed represent bounds constant table 
entry constant table lower bound upper bound intermediate file name 
join condition change ratio upper bound change ratio lower bound 
special index helpful evaluate predicate 
example interval skip list hj purpose intervals fit memory 
considering developing new index method handles case efficiently 
quotes quote change ratio element quotes xml construct quotes quote change ratio constant quotes xml range selection query example expression signature potential problem range query groups intermediate files may contain large number duplicate tuples range predicates different queries overlap 
virtual intermediate files handle case 
virtual intermediate file stores value range actual result tuples 
outputs split operator stored real intermediate file clustered index range attribute 
modification virtual intermediate files trigger upper level queries way ordinary intermediate files 
value range virtual intermediate file retrieve data real intermediate file 
query split scheme need changed handle virtual intermediate files 
general query may multiple selection predicates multiple expression signatures 
predicates data source represented conjunctive normal form 
group optimizer chooses selective conjunct contain incremental grouping 
predicates evaluated upper levels continuous query split operator 
quotes quote symbol intc current price element quotes xml construct example query selection predicates shows query selection predicates retrieves intel stock price falls 
query expression signatures equal selection predicate symbol range selection predicate current price 
expression signature equal selection predicate symbol grouping selective 
addition new select operator second selection predicate range select current price added file scan operator 
incremental grouping join operators join operators usually expensive sharing common join operations significantly reduce amount computation 
shows query join operator retrieves price stock profile 
signature join operation shown right side 
join signature approach contains names data sources predicate join 
group optimizer groups join queries join signatures 
constant table needed case output intermediate file name stored split operator 
file hold results shared join operation 
quotes quote symbol element quotes xml companies symbol element companies xml construct symbol symbol quotes xml companies xml example query join operator signature ways group queries contain join operators selection operators 
shows example retrieves stocks computer service industry related profiles 
group optimizer place selection join different grouping sequences incremental group optimization process 
group optimizer chooses better cost model 
discuss alternatives query example 
quotes quote symbol industry computer service element quotes xml companies symbol element companies xml construct example query join selection operators selection operator industry pulled join operator group optimizer groups query join signature 
selection signature contains intermediate file grouped 
advantage method allows join operator shared queries different selection operators 
disadvantage join performed selection may expensive may generate large intermediate file 
small number queries join group highly selective selection predicate grouping method may expensive evaluating queries individually 
alternatively group optimizer push selection operator industry avoid computing expensive join 
signature selection operator matched existing group 
file scan operator intermediate file produced selection group added join operator rewritten intermediate file inputs 
group optimizer incrementally groups join operation signature 
compared approach approach may create join groups significant overlap 
note overlap exists non grouping approach 
general method outperforms non grouping approach 
group optimizer select strategies cost model 
date implemented second approach niagaracq 
plan implementing strategy compare performance approaches 
grouping timer continuous queries timer queries periodically executed significantly reduce computation time system scalable 
timer queries grouped way change queries time information needs recorded installation time 
grouping large number timer queries poses significant challenges 
hard monitor timer events queries 
second sharing common computation difficult due various time intervals 
example users may request query different time intervals weekly monthly 
query monthly interval repeat weekly query 
general queries various time intervals able share results produced 
event detection types events niagaracq trigger continuous queries 
data source change events timer events 
data sources classified push pull 
push data sources inform niagaracq interesting data changed 
hand changes data sources checked periodically niagaracq 
timer continuous queries fired specified times 
queries executed corresponding input files modified 
timer events stored event list sorted time order 
entry list corresponds time instant exists continuous query scheduled 
query niagaracq unique id query ids stored entry 
timer event occurs related files checked 
query entry fired data source modified firing time 
firing times queries entry calculated queries added corresponding entries list 
incremental evaluation incremental evaluation allows queries invoked changed data 
reduces amount computation significantly typically amount changed data smaller original data file 
file continuous queries defined niagaracq keeps delta file contains changes 
queries run delta files possible original files 
cases complete data files incremental evaluation join operators 
niagaracq uses different techniques handling delta files ordinary data sources intermediate files store output split operator 
niagaracq calculates changes source xml file merges changes delta file 
intermediate files outputs split operators directly appended delta file 
order support timer queries time stamp added tuple delta file 
timer queries different firing times defined file delta file keep data longest time interval queries file input 
query execution time niagaracq fetches tuples added delta file query firing time 
grouped plan invoked results execution stored intermediate file regardless queries defined intermediate files fired immediately 
subsequent invocations group query need repeat previous computation 
upper level queries defined intermediate files fired scheduled execution time 
shared computation totally transparent subsequent operators 
memory caching due desired scale system assume information required continuous queries intermediate results fit memory 
caching obtain performance limited amount memory 
niagaracq caches query plans system data structures data files better performance 

grouped query plans tend memory resident assume number query groups relatively small 
non grouped change queries may cached lru policy favors frequently fired queries 
timer queries shorter firing intervals priority longer intervals 

niagaracq caches accessed files 
small delta files generated split operators tend consumed discarded 
caching policy favors small files saves lots disk os 

event list monitoring timer events large millions timer continuous queries 
avoid maintaining list memory keep time window list 
window contains front part list kept memory hours 

implementation niagaracq developed sub system niagara project 
initial version system implemented java jdk 
validating xml parser ibm xml ibm parse xml documents 
describe system architecture niagaracq section continuous queries processed section 
system architecture shows architecture niagara system 
niagaracq sub system niagara handles continuous queries 
niagaracq consists 
continuous query manager core module niagaracq system 
provides continuous query interface continuous query processor group optimizer niagaracq system architecture 
cq manager event detector users invokes niagara query engine execute fired queries 

group optimizer performs incremental group optimization 

event detector detects timer events changes data sources 
addition niagara data manager enhanced support incremental evaluation continuous queries 
processing continuous queries shows interactions continuous query manager event detector data manager continuous queries installed detected executed 
continuous query processing discussed sections 
continuous query installation new continuous query enters system query parsed query plan fed group optimizer incremental grouping 
group optimizer may split query queries query split scheme described section 
continuous query manager invokes niagara query optimizer perform common query optimization queries optimized plans stored execution 
timer information data source names queries event detector step 
event detector asks data manager monitor related source files intermediate files step turn caches local copy source file 
step necessary order detect subsequent changes file 
event detector monitors types events timer events file modification events 
events occur event detector notifies continuous query manager queries need fired data sources 
data manager niagara monitors web xml sources intermediate files local disk 
handles disk ordinary queries continuous queries supports niagara gui query parser query optimizer execution engine data manager data source internet niagara query engine niagara search engine push pull data sources 
push data sources data manager informed file change notifies event detector actively 
event detector periodically asks data manager check modified time 
continuous query manager query engine qe 
adds continuous queries file timer information enable ed monitor events 

ed asks dm monitor changes files 

timer event happens ed asks dm modified time files 

dm informs ed changes push data sources 

file changes timer events satisfied ed provides list firing 

invokes qe execute firing 

file scan operator calls dm retrieve selected documents 

dm returns data changes fire time current fire time 
continuous query processing niagaracq event detector ed data manager dm continuous query deletion system unique name generated user defined continuous query 
user name retrieve query status delete query 
queries automatically removed system expire 
execution continuous queries invocation continuous query requires series interactions continuous query manager event detector data manager 
timer event happens event detector asks data manager relevant data sources modified step 
data manager returns list names modified source files 
data manager notifies event detector push data sources changed step 
continuous query needs executed query id names modified files sent continuous query manager step 
continuous query manager invokes niagara query engine execute triggered queries step 
execution time query engine requests data data manager step 

data manager recognizes request continuous query returns delta file step 
delta files source files computed performing xml specific diff operation original file new version file 

experimental results expect continuous query system internet incremental group optimization provide substantial improvement system performance scalability 
experiments compare incremental grouping approach non grouping approach show benefits sharing computation avoiding unnecessary query invocations 
experiment setting experiments conducted sun ultra gb ram running jdk solaris 
element quotes quote element quote symbol sector industry current price open volume day range week range change ratio element day range low high element week change low high dtd quotes xml element companies element symbol name sector industry profiles element profiles capital employees address description element address city state dtd companies xml data sets experiments run database stock information consisting xml files quotes xml companies xml 
quotes xml contains stock information nasdaq companies 
size quotes xml mb 
related information stored companies xml size mb 
dtds xml files respectively 
data changes quotes xml generated artificially simulate real stock market continuous queries triggered changes 
companies xml file changed experiments 
give brief description assumptions generate quotes xml 
stock unique symbol value 
industry attribute takes value randomly set values 
change ratio represents change percentage current price closing price previous session 
follows normal distribution mean value standard deviation 
time spent calculating changes source files grouped non grouped approaches run experiments directly data changes 
specified number tuples modified bytes 
queries users may submit different queries hypothesize queries contain similar expression signatures 
experiments types queries represent effect grouping queries stock environment expression signatures 
quotes quote symbol intc element quotes xml construct query type example notify intel stocks change 
quotes quote change ratio element quotes xml construct query type example notify stocks prices rise percent 
quotes quote symbol intc current price element quotes xml construct query type example notify intel stock trades dollars 
quotes quote symbol industry computer service element quotes xml companies symbol element companies xml construct query type example notify changes stocks computer service industry related information 
type queries expression signature equal selection predicate symbol 
type queries expression signature range selection predicate change ratio 
type queries common expression signatures equal selection predicate symbol range selection predicate current price 
expression signature equal selection predicate grouping type queries selective range predicate 
type queries contain expression signatures selection join operators 
selection operators pushed join operators 
incremental group optimizer groups selection signatures join signatures 
queries type generated normal distribution mean value standard deviation 
queries types generated different constants uniform distribution range values data specified 
interpretation experimental result parameters experiments 
number installed queries important measure system scalability 

number fired queries grouping case 
number fired queries may vary depending triggering conditions grouping case 
example query intel stock change queries defined intc scheduled execution common computation group 
parameter affect non grouping queries 

number tuples modified 
grouping approach user defined query consists grouped part non grouped part 
tg tng represent execution time part 
execution time evaluating queries sum tg tng fired queries tg tng grouped portion executed 
non grouping strategy needs scan xml data source file multiple times cache parsed xml files memory approaches scan parse xml files 
ensures comparison approaches fair 
production system parsed xml files probably retained memory long periods time 
non grouped queries may scan parse xml files multiple times 
experimental results single type queries studied effectively incremental group optimization works type query 
measured compared execution time queries type grouping non grouping approaches 
experiment results type queries experiment 
tuples 
case queries fired approaches 
execution time non grouping approach grows dramatically increases 
applied highly loaded system 
hand grouping approach consumes significantly execution time sharing computation selection operator 
grows slowly single type query ng smaller case queries invoked grouping approach 
grouping approach execution time case constant fixed 
execution time grouping approach depends number fired queries total number installed queries reason increases grows shared computation executed small portion total execution time 
execution time upper queries proportional number fired queries dominates total execution time 
hand execution time approach proportional queries scheduled execution 
experiment 
queries experiment explore impact number modified tuples performance approaches 
varied tuples bytes tuples bytes 
increasing increase query execution time 
non grouping approach total execution time proportional selection operator installed query needs executed 
grouping approach execution time sensitive change increase counts small percentage total execution time sum ng fired queries change predicate selectivity 
experiment results type queries tuples discuss influence different expression signatures set experiments 
show group optimization works various selection predicates 
type queries grouped range selection signature 
type queries signatures 
group optimizer chooses equal predicate group queries selective 
shows results type queries 
type queries selection signature join signature 
selection operator pushed join operator 
queries grouped selection signature 
different industries test data set 
output selection group written intermediate files join groups created 
join group consumes intermediate files input 
difference execution time grouping larger previous experiments join operator expensive selection operator 
experiment results mixed queries type type tuples type queries type queries previous experiments studied type query separately purpose showing effectiveness different kinds expression signatures 
incremental group optimizer limited group type queries 
different types queries grouped common execution time execution time execution time number queries number queries number queries signatures 
experiment type queries type queries grouped selection signature 
shows performance difference grouped non grouped cases 
system status prototype version developed includes group optimizer continuous query manager event detector data manager 
core incremental group optimization group optimizer currently incrementally group selection join operators 
incremental group optimizer preliminary stage 
incremental group optimization shown promising way achieve performance scalability 
intend extend incremental group optimization queries containing operators selection join 
example sharing computation expensive operators aggregation may effective 
dynamic regrouping interesting direction intend explore 

related discussion terry proposed notion continuous queries queries issued run continuously 
incremental evaluation approach avoid repetitive computation return new results users 
approach restricted append systems execution time execution time execution time data size number tuples number queries number queries suitable target environment 
niagaracq uses incremental query evaluation method limited append data sources 
include action timer events niagara continuous queries 
continuous queries similar triggers traditional database systems 
triggers widely studied implemented wf md spam sk 
trigger systems event condition action eca model md 
general issues implementing triggers wf 
niagaracq different traditional trigger systems ways 

main purpose niagaracq support continuous query processing maintain data integrity 

niagaracq intended support millions continuous queries defined large number data sources 
traditional dbms limited number triggers installed table trigger usually defined single table 

niagaracq needs monitor autonomous heterogeneous data sources internet 
traditional trigger systems handle local tables 

timer events supported niagaracq 
open cq lpt supports continuous queries web data sources functionality similar niagaracq 
niagaracq differs open cq explore similarity large number queries group optimization achieve system scalability 
triggerman hch project proposes method implementing scalable trigger system assumption triggers may common structure 
uses special selection predicate index memory trigger cache achieve scalability 
share assumption borrow concept expression signature 
mainly focus incremental grouping subset frequently expression signatures format attribute op constant op 
major differences niagaracq triggerman 
niagaracq uses incremental group optimization strategy 

niagaracq uses query split scheme allow shared computation individual query monitored executed slightly modified query engine 
triggerman uses special memory predicate index evaluate expression signature 

niagaracq supports grouping timer queries capability considered hch 
sellis sel focused finding optimal plan small group queries usually lower recognizing containment relationship selection predicates queries selection join operators 
approach group optimization expensive extendable large number queries 
group optimization mainly focuses applying group optimization solve specific problem 
approach falls category 
alert spam earliest active database systems 
tried reuse parts passive dbms implement active database 

goal develop internet scale continuous query system group optimization assumption continuous queries internet similarities 
previous group optimization approaches consider grouping small number queries time scalable millions queries 
propose new incremental grouping methodology group optimization scalable previous approaches 
idea applied general group optimization methods 
propose grouping method query split scheme requires minimal changes general query engine 
system timer change continuous queries grouped event detection group execution capability systems 
techniques system scalable include incremental evaluation continuous queries pull push models detecting heterogeneous data source changes caching mechanism 
preliminary experiments demonstrate incremental group optimization significantly improves execution time comparing non grouping approach 
results experiments show system scaled support large number queries 

xu discussion author initial writing 
particularly grateful kabra david maier careful review helpful comments 
anonymous referees comments 
funding provided darpa navy contract 
nsf award cda 

cm chakravarthy minker 
multiple query processing deductive databases query graphs 
vldb conference 
dff deutsch fernandez florescu levy suciu 
xml ql query xml 
www org tr note xml ql 
hch hanson huang parthasarathy park vernon 
scalable trigger processing 
proceeding th icde page sydney australia 
hj hanson johnson 
selection predicate indexing active databases interval skip list 
tr 
cis department university florida 
liu pu zhou 
differential evaluation continual queries 
icdcs 
lpt liu pu tang 
continual queries internet scale event driven information delivery 
tkde 
md mccarthy dayal 
architecture active database management system 
sigmod 
rc rosenthal chakravarthy 
anatomy modular multiple query optimizer 
vldb 
sel sellis 
multiple query optimization 
acm transactions database systems 
stonebraker goh potamianos 
rules procedures caching views data base systems 
sigmod conference 
sk simon kotz dittrich 
promises realities active database systems 
vldb 
spam schreier pirahesh agrawal mohan 
alert architecture transforming passive dbms active dbms 
vldb 
terry goldberg nichols oki 
continuous queries append databases 
sigmod 
wf widom 
set oriented production rules relational database systems 
sigmod conference 
zhao deshpande naughton shukla 
simultaneous optimization evaluation multiple dimensional queries 
sigmod 
