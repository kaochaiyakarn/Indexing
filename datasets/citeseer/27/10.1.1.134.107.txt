arxiv cs cs cl may monads natural language semantics chung shan harvard university oxford st cambridge ma usa ken harvard edu 
accounts semantic phenomena involve extending types meanings revising composition rules time 
concept monads allows accounts variable binding quantification focus stated uniformly compositionally 
montague grammar tradition formulates formal semantics natural languages terms calculus 
utterance considered tree leaf node lexical item meaning usually typed value calculus 
leaf node meanings determine meanings subtrees recursive application composition rules 
composition rule specifies meaning tree terms meanings sub trees 
simple composition rule function application xy 
type variables denote function types 
handle phenomena variable binding quantification focus introduce new types embed existing aspects meaning accommodate additional ones 
having introduced new types need revise composition rules reimplement existing functionality 
way augment semantic theories simultaneously extending types meanings stipulating new composition rules 
augment grammar original lexical meanings composition rules invalid require global renovation typically described generalizing worst case 
time consider new aspect meaning lexical meanings composition rules revised 
past decade category theoretic concept monads gained popularity computer science tool structure denotational semantics moggi moggi functional programs wadler wadler :10.1.1.33.5381
structure computer programs monads allow substance computation defined separately plumbing supports execution increasing modularity 
accounts phenomena natural language semantics phrased terms monads clarifying account simplifying presentation 
concept monads show applied natural language semantics 
illustrate approach monads state analyses known phenomena uniformly compositionally 
uniformly mean analyses variety monads invoke monad primitives way 
compositionally mean analyses define composition rules spirit montague grammar 
presenting monadic analyses discuss combining monads account interaction semantic phenomena 
monadic analyses intuitively monad transformation types equipped composition method transformed values 
formally monad triple type constructor map type corresponding type functions pronounced unit bind 
functions polymorphic sense defined types 
roughly speaking specifies ordinary values injected monad specifies computations monad compose 
concrete examples follow 
powerset monad example consider sets 
corresponding type type type subsets 
define 
definition satisfy left identity right identity associativity 
section treat types sets order define powerset pointed powerset monads 
monads exist model calculus 
powerset monad crude model non determinism 
example set individuals defined john mary thought non deterministic individual ambiguous john mary 
similarly function defined hate maps individual non deterministic property 
apply function individual compute john mary hate john hate john mary hate mary 
see non determinism carried produce way ambiguous result 
words natural language ambiguous way 
upgrade ordinary deterministic value type corresponding non deterministic type apply ordinary value say john john john john john hate john 
similarly convert ordinary function non deterministic function apply output ordinary function say john mary 
ordinary value nondeterministic value upgrading non deterministic type 
consider function application rule 
regard argument function denoted defined 
lift ordinary function application non deterministic function application am defined am am 
substituting get am 
just definition gives rise original composition rule xy definition am gives rise revised composition rule xy am 
powerset monad revised rule set tolerant composition rule alternative semantics analysis proposed hamblin 
hamblin analysis meaning interrogative constituent set alternatives available answers question corresponds definition 
contrast meaning non interrogative constituent singleton set corresponds definition 
support question verbs know ask hamblin need secondary composition rule lifted respect function argument xy 
substituting get note pair types am apply 
primary composition rule secondary composition rule conflict 
pointed powerset monad focus variation powerset monad pointed powerset monad implicitly involved rooth account focus natural language 
pointed set nonempty set distinguished member 
words pointed set pair member set 
define pointed powerset monad 
definition captures intuition want keep track set non deterministic alternatives particular alternative set 
powerset monad definition carries non determinism result 
substituting new monad definition previously lifted application formula gives am 
formula conjunction primary composition rule equivalent rooth recursive definition focus semantic values 
crucially pointed powerset monad extends meaning types accommodate focus information definition am composition rule needs change 
majority lexical meanings focus need change 
example hypothetical lexicon entry john john upgrade meaning type meaning type occurs automatically due redefinition 
reader monad variable binding monad seen computer science reader monad known environment monad 
monad encodes dependence values input 
define reader monad fix type say type possible worlds type variable assignments 
note definition threads input produce result 
see threading process action substitute monad definition definition am am 
think monad noting exactly usual extensional composition rule 
words student know meanings depend possible world words 
upgrade applying 
think variable binding monad noting usual assignment preserving composition rule 
word meanings refer variable assignment 
upgrade majority word meanings applying 
substitute monad definition secondary composition rule result 
intensional composition rule handles sentence verbs know believe type allowing take arguments type type monad laws way guarantee am function case map simply intension operator usually written formula involved accounts quantification assume quantifier raising lf heim 
handles raised quantifiers type allowing take arguments type type function case map simply variable abstraction operator 
continuation monad quantification barker proposed analysis quantification terms continuations 
basic idea grammar replacing meaning type corresponding type 
special case meaning type nps changed matching original treatment english quantification montague 
general fixed type say define continuation monad answer type 
value manipulated definitions known continuation 
intuitively continuation represents entire default computation kelsey clinger rees 
value type turn continuation type answer type 
obvious way encoded definition feed continuation value type john john john smoke smoke 
compute meaning john substitute monad definition primary composition operation am am 
letting smoke john gives john smoke john john smoke smoke john mt second step note term smoke represents computation john check pass result context containing clause 
john main clause context simply identity function id 
define evaluation operator id 
fixing john smoke john desired 
continuing fix specify meaning 
formula form 
words meaning non trivially manipulates continuation obtained applying ordinary value 
composition rule compute denotation smoke smoke smoke mt giving smoke desired 
main theoretical advantage analysis compositional situ analysis invoke quantifier raising 
note grammar grammar composition rule perfectly interpretable standard machinery montague grammar 
particular invoke type ambiguity flexibility proposed rooth hendriks interpretation mechanism performs type shifting run time 
desirable property holds monadic analyses 
instance grammar meanings example student identical type meanings example 
interpretation mechanism dynamically shift type match student 
worth relating analysis computer science literature 
danvy filinski studied composable continuations manipulated operators shift reset 
define shift reset continuation monad wadler shift reset 
assuming operator type meaning specified simply shift encode scope islands barker implicitly reset 
filinski proved certain sense composable continuations simulate monads 
combining monads having placed various semantic phenomena monadic framework ask natural question combine monads modular fashion characterize interaction semantic phenomena example quantification 
unfortunately exists general construction composing arbitrary monads say new monad form king wadler jones duponcheel :10.1.1.33.5381:10.1.1.138.4552
hope specialize combine monads additional structure generalize combine monads instances broader concept find obstacles combining monads reflected semantic constraints natural language 
researchers denotational semantics programming languages proposals combining monadic functionality completely satisfactory moggi steele liang hudak jones espinosa filinski 
section relate prominent approach natural language semantics 
monad morphisms approach combining monads taken moggi liang filinski compose monad morphisms monads 
monad morphism known monad transformer monad layering map monads monads takes arbitrary monad transforms new monad presumably defined terms old monad supporting new layer functionality 
instance monad fixing type reader monad morphism constructs new monad defined 
old monad identity monad defined new monad just reader monad 
old monad monad reader monad new monad adds reader functionality 
definition monad morphism specify embed computations inside old monad new monad 
precisely monad morphism provide function pronounced lift polymorphic 
reader monad morphism defined 
continuation monad generalizes monad morphism 
fixing answer type continuation monad morphism takes monad monad defined 
lifting function continuation monad morphism defined 
monad morphisms freely composed order composition significant 
applying continuation monad morphism reader monad equivalent applying identity monad composition continuation monad morphism reader monad morphism yields monad type constructor 
applying reader monad morphism continuation monad equivalent applying identity monad composition reader monad morphism continuation monad morphism yields different monad type constructor 
translating monads monad morphisms monad morphisms may appear mysterious fact obtain monad counterparts mechanical translation 
translation takes monad operations terms produces morphism mapping old monad new monad 
translation defined recursively structure types terms follows 
type function type base type 
function type form types 
base type type fixed cases polymorphic type variable definition satisfy naturality 
things translation requires defined type defined terms 
translation apply powerset pointed powerset monads see footnote 
monad morphism including ones produced translation applied monad including monads 
appearing terminal type 
known unit type void type 
type recursively define computation translation value translation base type 
term application term abstraction term variable term terminal term 
application term form terms 
abstraction term form 
term 
variable term form name variable type 
terminal term represents unique value terminal type 
term recursively define term translation 
yn 


yn 

base types 
yn fresh variable names 
construct new monad specify 


illustrate translation expand special case reader monad 
type translation rules specification matching desired 
term translation rules specification 





matching desired 
intuition translation treat calculus defined programming language terms may computational side effects 
translation specifies semantics programming language terms call value allows side effects base types 
semantics call value call name reflected type translation rules define 
side effects occur base types reflected rules define 
translation hybrid call name algol translation benton hughes moggi standard call value translation wadler benton :10.1.1.33.5381
call name translation monads curiously semantic types generated monad morphisms powerful 
noted reader continuation monad morphisms give rise different monads depending order compose monad morphisms 
fixing reader monad morphism continuation monad morphism combined monads type constructors mcr mrc 
consider sentences john wanted date professor party 
sentence reading professor party person john wanted date john may aware professors 
reading note world property evaluated distinct world property dating evaluated 
assuming date professor constituent semantic type mention contravariant position twice 
unfortunately type constructors mcr mrc occurrence correct type 
intuitively semantic type date professor ought larger type 
type precisely equal mcr simply assigning mcr semantic type date professor preference reader monad morphism component semantic system knows type equip transformation types composition method transformed values 
tentative idea synthesizing composition method replace call value translation described call name translation algol translation mentioned earlier benton 
type translation recursively defines type base type 
term translation recursively defines term 
applying translation monad gives types 
continuation monad reader monad type transformed desired 
identity monad types match definition monads 
words call name translation give type transform want composition method sense output monad morphism 
monads characterize similarity semantic accounts focus variable binding quantification 
case monadic composition rules lexicon specialized different monad 
monad primitives recur semantics striking frequency 
remains seen monads provide appropriate conceptual encapsulation semantic theory broader coverage 
particular natural programming language semantics combining monads monad objects remains open issue promises additional insight 
acknowledgments stuart shieber dylan thurston chris barker anonymous referees helpful discussions comments 
possible translation standard haskell call name wadler benton :10.1.1.33.5381
produces strictly larger types algol call byname translation instance phenomena may fall monadic umbrella include presuppositions error monad dynamic semantics state monad 
bibliography barker 

continuations nature quantification 
manuscript university california san diego november net archive ad 
benton hughes moggi 
monads effects 
lecture notes international summer school applied semantics september www disi unige person 
danvy filinski 
abstracting control 
proceedings acm conference lisp functional programming nice france pp 

new york acm press 
espinosa 

semantic lego 
ph 
thesis graduate school arts sciences columbia university 
filinski 

representing layered monads 
popl conference record annual acm symposium principles programming languages san antonio tx pp 

new york acm press 
hamblin 

questions montague english 
foundations language 
heim 
semantics generative grammar 
oxford blackwell 
hendriks 

studied flexibility categories types syntax semantics 
ph 
thesis institute logic language computation universiteit van amsterdam 
jones duponcheel 
composing monads 
technical report yaleu dcs rr department computer science yale university new haven 
kelsey clinger rees eds 

revised report algorithmic language scheme 
higher order symbolic computation 
acm sigplan notices 
king wadler 
combining monads 
launchbury sansom eds functional programming glasgow proceedings glasgow workshop functional programming ayr scotland 
berlin springer verlag 
lappin 
ed 

handbook contemporary semantic theory 
oxford blackwell 
liang hudak jones 
monad transformers modular interpreters 
popl conference record annual acm symposium principles programming languages san francisco ca pp 

new york acm press 
moggi 

view programming languages 
technical report ecs lfcs laboratory foundations computer science department computer science university edinburgh edinburgh 
moggi 

notions computation monads 
information computation 
montague 

proper treatment quantification ordinary english 
thomason ed formal philosophy selected papers richard montague pp 

new haven yale university press 


development formal semantics 
see lappin pp 

rooth 
generalized conjunction type ambiguity 
von eds meaning interpretation language pp 

berlin de gruyter 
rooth 

focus 
see lappin pp 

steele jr 

building interpreters composing monads 
popl conference record annual acm symposium principles programming languages portland pp 

new york acm press 
wadler 

comprehending monads 
mathematical structures computer science 
wadler 

essence functional programming 
popl conference record annual acm symposium principles programming languages albuquerque nm pp 

new york acm press 
wadler 

monads composable continuations 
lisp symbolic computation 

