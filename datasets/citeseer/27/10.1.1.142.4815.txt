aiding program comprehension static dynamic feature analysis thomas eisenbarth rainer koschke daniel simon universit stuttgart 
stuttgart germany koschke informatik uni stuttgart de understanding system implementation prior knowledge hard task general 
degree automatic aid possible 
technique building mapping system externally visible behavior relevant parts source code 
technique combines dynamic static analyses rapidly focus system parts urgently required goal directed process program understanding 

understanding certain feature implemented major problem program understanding especially understanding directed certain goal changing extending feature 
real understanding starts localize implementation feature code 
systems appear large number modules containing hundreds lines code 
general obvious components implement feature 
typically existing documentation outdated system original architects longer available view outdated due changes 
option completely reverse engineer system order exhaustively identify components 
integrated published automatic techniques component retrieval incremental semi automatic process results selected automatic techniques validated user 
problem assigning features components solved exhaustive analysis 
components implementing specific set features suffice cases exhaustive methods cost effective feature oriented search focusing components interest needed 
describes process supporting techniques identify components implementing specific set related features 
process automated great extent 
combines static dynamic analyses uses concept analysis mathematical technique investigate binary relations derive correspondences features components 

terminology feature realized functional requirement term feature intentionally defined weakly exact meaning depends specific context 
generally term feature subsumes non functional requirements 
context functional features relevant consider feature observable result value user 
scenario sequence user inputs triggering actions system yields observable result actor 
scenario said execute feature observable result executed scenario actions 
scenario may execute multiple features 
scenarios resemble cases include options choices case subsumes multiple scenarios 
component computational unit system 
components consist interface offers services component implementation services 
services component coherently contribute purpose component 
address subprograms sets subprograms components 
result technique sets subprograms implementing features 
subprogram function procedure programming language 
subprograms kind components 
execution summary program run lists subprograms called run 
execution trace lists sequence performed calls 
feature component map describes components implement set relevant features 

overview remainder article organized follows 
section starts related research gives brief overview process article section briefly introduces concept analysis 
section explains concept analysis derive correspondence scenarios executing features components section describes static information incorporated 
section shows implementation technique section describes experiences case study 
section concludes 

related research localizing features chen rajlich propose semi automatic method feature localization analyst browses statically derived system dependency graph sdg 
sdg describes detailed dependencies subprograms types variables level individual expressions statements 
navigation sdg computer aided analyst takes search feature implementation 
method suited quickly cheaply localize features starts pre knowledge searching 
method relies sdg quality 
sdg includes assumptions function pointers analyst may functions called functions pointers 
reflects conservative assumptions search space increases drastically 
statically undecidable control flow paths taken runtime conservative static analysis yield overestimated search space 
contrast dynamic analyses exactly tell parts really runtime particular run 
dynamic analyses recording execution trace view system black box giving insights internal aspects conditions subprograms called 
wilde dynamic analysis localize features follows 
invoking input set set test cases terminology set scenarios identified invoke feature 

excluding input set identified invoke feature 

program executed twice separately 

comparison resulting execution traces subprograms identified implement feature 
wilde focus localizing specifically needed required components 
deriving required components execution trace including input set sufficient 
subtracting subprograms execution trace excluding input set execution trace invoking input set subprograms remain specifically deal feature 
information sufficient identify interface constituents component source code subprograms starting point detailed static analysis 
wilde approach deals feature time gives little insight connections set related features 
set related features considered single feature repeat analysis feature separately unite specifically required subprograms 
relationships pairs features identified 
contribution 
technique combines static dynamic analyses identify components implementing set related features 
dynamic information way execution summaries generated profiler different scenarios identify subprograms executed features invoked similarly wilde 
scenario represents invocation preferably single feature yields subprograms executed feature 
simply localizing required subprograms concept analysis derive detailed relationships features executed subprograms 
relationships identify subprograms jointly required subset features classify subprograms low level high level respect set features reveal additional dependencies subprograms help identify subprograms constitute larger component static analysis 
information gained concept analysis guide subsequent static analysis static dependency graph order narrow executed subprograms form self contained understandable feature specific components 
subprograms utility subprograms building blocks component containing application specific logic sorted 
additional static analyses strongly connected component identification dominance analysis program slicing support search components interest 
general process follows explanations follow 
identify set relevant features 
fn 
identify scenarios 
sq features covered 
generate execution summaries profiler step yields required subprograms sp scenario 
create relation table sq sp 
perform concept analysis 
identify relationships scenarios subprograms 
perform static dependency analyses explained steps process dynamic information results feature component map 
article extends process additionally exploiting static analyses providing case study 
applicability 
retrieval feature component map dynamic information subprograms collected executed feature invoked 
invoking externally visible features comparatively simple graphical user interface available 
usually menu selection similar interaction necessary 
case batch system vary command line switches provide different sets test data invoke feature 
need knowledge internal details system order find suitable test data 
technique primarily suited functional features may mapped components 
particular non functional features easily map components 
example features take time account applications timing critical may result different behavior 
technique suited features internally visible program garbage collector 
strictly speaking internal features may viewed implementation details 
clear execute internal features outside derive execution summary features implemented implemented 

concept analysis concept analysis mathematical technique provides insights binary relations 
mathematical foundation concept analysis laid birkhoff 
primarily snelting introduced concept analysis software engineering 
evaluate class hierarchies explore configuration structures preprocessor statements recover components 
binary relation specific application concept analysis derive scenario subprogram relationships states subprograms required feature invoked 
concept analysis relation set objects set attributes tuple called formal context 
set objects set common attributes defined oa analogously set common objects set attributes defined oa section formal context applying concept analysis derive scenario subprogram relationships laid follows subprograms considered objects scenarios considered attributes pair subprogram scenario relation executed performed 
time binary relation arbitrary objects attributes shown table example 
object oi attribute aj row column marked table example stems lindig snelting 
table known relation table equations hold table example relation 
pair called concept holds objects share attributes 
concept extent denoted extent intent denoted intent 
informally concept corresponds maximal rectangle filled table cells modulo row column permutations 
example table contains concepts relation table 
table concepts table 
set concepts formal context forms partial order equivalently holds called subconcept called superconcept instance true table 
set concepts formal context partial order form complete lattice called concept lattice lc infimum concepts lattice computed intersecting extents follows infimum describes set common attributes sets objects 
similarly supremum determined intersecting intents supremum set common objects share attributes intersection sets attributes 

concept lattice table 
concept lattice example relation table graphically depicted directed acyclic graph nodes represent concepts edges denote superconcept subconcept relation shown 
general concept called top element denoted special concept called bottom element denoted combination graphical representation contents concepts table form concept lattice 
complete information visualized readable equivalent way marking graph node attribute represented concept general concept intent 
analogously node marked object represents special concept extent 
unique element concept lattice marked unique element marked object eq eq call graph representing concept lattice marking strategy sparse representation lattice 
equivalent sparse representation lc intent lc extent concept shown 
content node representation derived follows objects objects attributes attributes instance node marked concept 

dynamic analysis order derive feature component map concept analysis define formal context objects attributes relation interpret resulting concept lattice accordingly 

context scenarios subprograms goal dynamic analysis find subprograms contribute set features 
feature scenario prepared exploits feature 
subprograms considered objects formal context scenarios considered attributes 
reverse case concept lattice simply inverted derived information 
relation formal context necessary concept analysis defined follows subprogram required scenario subprogram required needs executed 
order obtain relation set scenarios needs prepared scenario executes preferably relevant feature 
system set scenarios time execution summaries recorded 
system run yields required subprograms single scenario column relation table filled system run 
applying scenarios provides complete relation table 

features scenarios feature invoked scenarios scenario invoke features 
sparse representation 
strict correspondence features scenarios 
mapping scenarios features locate concepts lattice scenarios contributing feature overlap 
assume analyze drawing tool features ability draw different types objects circles rectangle ability apply different actions drawn objects move rotate scale 
assume scenarios scenario draw circle move draw circle scale draw rectangle move draw rectangle scale concept lattice scenarios concept including include subprograms related feature move concept including contains subprograms scaling feature 
concept including includes subprograms needed draw circles concept including includes subprograms related rectangles 
features combined scenarios interpret results revealed concept lattice 
instance system implemented object oriented style actions object type implemented separate subprogram get concepts including object type action 
presumably subprograms needed operations circles drawing hiding go subconcept see 

concept lattice alternative functional style implementation subprogram implements actions different types objects get concept action including scenarios object types see 
interestingly concept lattice show object oriented functional style implementation chosen 
key 
alternative concept lattice scenario scenario 
cases relationship scenarios features mapping intuitively clear concept lattice 
consequently assume scenario easily mapped feature 

interpretation concept lattice concept analysis applied formal context described section yields lattice interesting relationships derived 
relationships fully automatically derived analyst theoretical background hidden 
thing analyst know interpret derived relationships 
section explains interesting relationships derived automatically 
abstractly described section base relationships derived sparse representation lattice note duality subprogram required scenarios defined eq page lattice 
scenario requires subprograms defined eq page lattice 
subprogram specific exactly scenario scenario paths top element 
scenario specific exactly subprogram subprogram paths bottom element subprogram required implement scenario 
scenarios subprograms jointly contribute identified 
lattice closest common node top element starting nodes attached 
scenarios common node jointly implemented subprograms jointly required scenarios described 
lattice closest common node bottom element starting nodes attached 
subprograms common node jointly required subprograms required scenarios bottom element 
scenarios require subprograms top element 
relationships subprograms scenarios useful aspects scenarios hand subprograms hand may derived holds subprograms subprogram specific respect case subprogram contributes just features contributes features 
holds scenarios scenario scenario executed subprograms extent need executed 
lattice reflects level application specificity 
information described derived tool fed back analyst 
inspecting relationships derived concept lattice decision may analyze subset original features depth due additional dependencies concept analysis reveal 
subprograms required features easily derived concept lattice form starting point static analyses identify components investigate quality maintainability integrability estimate effort subsequent steps 

static dependency analysis concept lattice easily derive subprograms executed set relevant features note features scenarios synonyms see section 
gives set subprograms clear subprograms form feature specific component general purpose subprograms building blocks components contain feature specific logic 
feature interest question answered follows approximation subprograms extent concept eq page may jointly constitute component 
irrelevant subprograms subprograms sorted goal directed manual inspection 

building starting set subprograms extent concept jointly contribute features intent concept immediately follows definition concept 
may subprograms extent contribute features specific feature 
may subprograms extent contain feature specific code 
subprograms extent concept need inspected manually 
reliable criteria known distinguish feature specific code generalpurpose code analysis automated human expertise necessary 
concept lattice may narrow candidates manual inspection 
concept lattice dependency graph help decide order subprograms inspected effort manual inspection reduced minimum 
interested subprograms specific feature start subprograms attached holds 
subprograms collect concepts minimal distance subprograms attached 
concept unite subprograms attached concepts 
subset subprograms identified step accepted manual inspection called starting set 

inspection static call graph inspect subprograms called subprograms 
generate call graph specific subset dependency graph contains subprograms transitively called subprograms derived static analysis 
concentrate subprograms active constituents component 
global variables types may added subprograms identified 
subprograms said roots call graph 
static points analysis needed resolve calls function pointers 
static points analysis may take advantage knowledge called functions yielded dynamic analysis 
sufficient consider subprograms extent holds subprograms called invoked dynamic analysis 
combine static dynamic information eliminate conditional static subprogram calls order reduce search space 
component feature understood calls subprograms extent safely ignored original source code order cut apparent static dependencies relevant feature relying subprogram context call executed 
case apply slicing techniques separate code relevant feature 
call graph generated traversed inspect subprograms 
kind traversal possible depth search suited subprogram understood called subprograms understood 
breadth search human cope continuous context switches 
goal inspection sort subprograms belong component narrow sense contain feature specific code 
additional analyses gather information useful navigating call graph strongly connected component analysis identify cycles call graph subprogram cycle contains feature specific code subprograms cycle need added component cyclic dependency 
dominance analysis identify subprograms local subprograms 
subprogram said dominate subprogram path call graph roots contains words called way subprogram feature specific dominators need added component need called order executed 
dominator contain feature specific code dominator feature specific dominator clear cutting point local 
consequently dominator safely omitted understanding system 
inspection done call relation call graph top traversal concept lattice lattice really reflect dependencies imply calls concept lattice may provide useful information inspection 
section observation lower concept lattice general subprogram serves features vice versa 
concept lattice gives insight level abstraction subprogram contributes degree confidence specific subprogram contains feature specific code 
feature relevant simply unites starting sets feature follows approach 
feature concept lattice provides insight feature interaction identifies subprograms jointly features 
subprograms considered component 
component detected call graph partitioned connected components merging connected concepts lattice filtering subprograms extent 
subprograms identified static dependency analysis program slicing extract components code including necessary variable type declarations 
static dependency analysis identify provided interface extracted components elements component parts system required interface elements system component elements rely declared component 

implementation implementation detecting executed subprograms scenario applying concept analysis surprisingly simple tool concept analysis 
prototype unix environment opportunistic integration parts gnu compiler gcc compile system command line switch generating profiling information gnu object code viewer nm short perl script order identify functions system opposed included standard libraries gnu profiler gprof short perl script ascertain executed functions execution summary concept analysis tool concepts graph editor graphlet visualize concept lattice short perl script convert file formats concepts graphlet loc extended version rigi 
deriving static dependency graph identify components developed bauhaus toolkit 
allows deriving detailed dependencies system dependency graph sdg coarse grained dependencies resource flow graph 
sdg describes set data dependencies control dependencies level expressions statements contains global declarations global variables user defined types subprograms relationships variable access signature relations calls 
derived sdg abstracting individual expressions statements better suited presentation human analyst 
bauhaus toolkit uses rigi visualize 
rigi supports graph navigation provides immediate access original source code detailed investigation 
added multiple additional automatic analyses specifically support component retrieval identification cyclic dependencies local dominated parts see section 

case study analyzed web browsers see table set relevant related features 
concept lattice systems derived described section 
required subprograms identified dynamic analysis relationships derived concept analysis formed starting point static dependency analysis 
static dependency analysis done resource flow graph bauhaus toolkit 
experiences reported section 
system version kloc wc subprograms mosaic chimera table analyzed web browsers 

case study setup experiments history bookmark tried understand specific sets related features implemented browsers process described 
goal analysis recover components way interact reverse engineer partial description software architecture 
partial software architecture instance allows decide feature specific components extracted system integrated system minor changes 
chimera implement features mosaic provides wanted find respective feature specific components mosaic reused chimera 
case history chimera allows going back history visited urls 
chimera forward button allows user move forward history back button 
mosaic back forward button 
experiment going back going forward considered related features 
case bookmark mosaic chimera offer bookmarks visited urls 
urls may bookmarked bookmarked urls may loaded removed 
considered related features addition new bookmark currently viewed url removal bookmark navigation bookmarked url 
question want answer case study follows identification extraction history bookmark features implemented mosaic 
interfaces specific components implement features rest mosaic 
analogously chimera partial implementation features 
cases partial description software architecture recovered 

scenarios dynamic analysis experiment browser ran browser start scenario browser started immediately quit order separate start shutdown code 
additional scenarios defined specifically experiments 
case history covered scenarios basic scenario doing browsing scenario back button scenario back forward buttons 
chimera scenario performed chimera possesses forward button 
case bookmark covered scenarios basic scenario simply opening closing bookmark window scenario adding new bookmark currently displayed url scenario removing bookmark scenario selecting bookmark visiting associated url 
scenario immediately ended quitting respective system 
provided scenarios feature scenario forward button back button 
consequently concept containing subprograms executed scenario subconcept concept related 
likewise bookmark deleted url added 
circumvent problem started browser non empty bookmark file scenarios 
consider case insertion empty bookmark list 

static dependency analysis dependency graph browsers see section visualized bauhaus extension rigi derived statically transitively called functions rigi basic selection facilities intersected static information executed functions manually 
additionally filtered functions specific html window graphical user interface guided browser proper naming conventions 
functions bottom element concept lattice 

results table provides summary numbers grams needed considered step shows search space reduced step 
denotes history bookmark experiment 
total number functions kernels including libraries html jpeg zlib column number executed subprograms scenario shown column 
functions statically called subprograms selected set dynamically executed functions upper concepts lattice column 
intersection column contained column 
column relevant reports functions column specific selected features manual inspection 
functions purposes bookmarks histories 
relevant mosaic mosaic chimera chimera table subprogram counts mosaic chimera navigate remove upper region add results history 
interface mosaic browser kernel history component see formed subprograms get current url set current url communicate action event changed url 
history component easily extracted mosaic source code separate component history integral part chimera kernel 
set subprograms chimera reasonably addressed history manager component mosaic 
chimera uses layer wrappers calling dispatching routine list actions displayed urls part list 
analysis partial architectural architectures reveals re mosaic history components chimera difficult due architectural mismatch 
meaning letters described text history gui browser mosaic history gui dispatch inner state browser chimera history history located component data storage procedure call 
mosaic chimera history architecture lower region procedure calls procedure 
relevant parts chimera history eventually small number subprograms needed inspected thoroughly due topdown inspection process 
example shows remaining subprograms chimera omitting names relevant history experiment 
picture clearly shows possible cutting points dependency graph functions specific history features upper region non specific functions lower region 
recovered parts architecture mosaic chimera relevant cases 
recovered partial architecture shows chimera browser kernel built list visited urls mosaic browser kernel know history visited urls 
results bookmarks 
partial architectures systems similar respect bookmarks 
architectures include encapsulated bookmark component communicates narrow interface basic browser kernel see 
basic actions performed get currently shown url set currently shown url display bookmarks communicate bookmark selection back 
exchanging implementations mosaic chimera reasonably easy 

technique identifies components specific set related features execution traces different usage scenarios 
concept analysis mathematically sound technique analyze binary relations allows locate feature specific subprograms executed subprograms 
static analysis uses feature specific subprograms mosaic bookmarks 
mosaic chimera bookmark architecture identify additional feature specific subprograms dependency graph 
combination dynamic static information reduces search space drastically 
case study analyzing web browsers recover partial description software architecture respect specific set related features 
commonalities variabilities partial architectures recovered quickly 
altogether respectively feature specific subprograms subprograms mosaic respectively chimera 
subprograms needed inspected manually 
deriving partial architectures described technique support goal oriented cost effective program understanding reverse engineering facilitating feature specific re reengineering 
approach applicable externally visible executable features primarily suited functional features 
meaning letters described text book gui browser book marks browser gui dispatch inner state chimera bookmarks bauhaus project university stuttgart www informatik uni stuttgart de ifi ps bauhaus 
brandenburg graphlet universit passau www fmi uni passau de graphlet 
booch rumbaugh jacobson unified modeling language manual addison wesley 
canfora cimitile de lucia di case study applying eclectic approach identify objects code workshop program comprehension pp 

chen rajlich case study feature location dependence graph proc 
th int 
workshop program comprehension pp 
june 
eisenbarth koschke simon feature driven program understanding concept analysis execution traces proc 
int 
workshop program comprehension appear 
garlan allen architectural mismatch hard build systems existing parts proceedings th international conference software engineering pp 
april implementing concept analysis tool identifying data types code master thesis university kaiserslautern germany 
horwitz reps binkley interprocedural slicing dependence graphs acm transactions programming languages systems vol 
pp 
january 
lindig snelting assessing modular structure legacy code mathematical concept analysis proceedings international conference software engineering pp 

lindig concepts ftp ftp ips cs tu bs de pub local misc 
koschke girard intermediate representation reverse engineering analyses proceedings working conference reverse engineering 
koschke atomic architectural component recovery program understanding evolution dissertation institut informatik universit stuttgart www informatik uni stuttgart de ifi ps rainer thesis 
krone snelting inference configuration structures source code proceedings international conference software engineering pp 
may 
kuipers moonen types concept analysis legacy systems proc 
int 
workshop program comprehension 
melo 
applying concept formation methods object identification procedural code proceedings conference automated software engineering pp 
november 
reps identifying modules concept analysis proceedings international conference software maintenance pp 
october 
snelting reengineering configurations mathematical concept analysis acm transactions software engineering methodology vol 
pp 
april 
snelting tip reengineering class hierarchies concept analysis proceedings acm sigsoft symposium foundations software engineering pp 
november 
van deursen kuipers identifying objects cluster concept analysis proc 
int 
conf 
software engineering 
wilde software reconnaissance mapping program features code software maintenance research practice vol 
pp 

wong rigi user manual version june 
