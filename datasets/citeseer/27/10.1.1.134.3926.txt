amelo 
explicitly locating web cache file system jonathan thesis submitted partial fulfillment requirements degree master science computer science university wisconsin madison best relate cached web objects going problem depends workload 
locating objects disk importing memory group large reduc tions user perceived read latency possible 
discovering new policies relating ob jects built specialized file system called amelo leverages data cache na ture speed leaving determination relate objects flexible policy system 
providing simple effective interface location amelo provides performance specialized web object workload standard unix file system 
thesis design implement test amelo file system real workloads build multithreaded networking layer propel web objects 
web objects embody certain unique properties enable demand higher performance stored standard unix file system part caching proxy 
various elegant methods attempted keep frequently accessed files memory study portrayed approximately hits files proxy come disk disk delays contribute total response time memory speedups go far 
network speeds advance disk access rates disk delay percentage increase 
studies established arranging files size domain name improve throughput times naive allocation simple directory hierarchy 
systems leverage unchanging size lack ownership inherent cacheable web objects storing related objects file 
fetching objects leads prefetch 
system improves performance buffering writes sequential access expense reads 
systems standard file system 
best relate cached web objects complex going problem depends workload 
coming policies workloads designed implemented tested specialized file system called amelo give spanish leverages data nature speed leaving determination relate files flexible policy external system 
objects backup true definition enables loosen strict consistency semantics standard file system enforces 
keeping metadata memory checkpointing willing lose crash amelo achieves balance robustness speed 
amelo replaces standard mechanism file system exposes relations objects allows user defined robustness 
amelo knobs reflect twin foci prior research 
objects related 
sets objects keep hot memory objects interrelationships requests occured came client server object referenced metric combination 
storing related files disk simulated placing directory earlier research done attempt location works poorly time inode scattered distant cylinders 
amelo related objects go group directly translates disk adjacency disk fills 
second major policy caches determine objects keep resident memory 
form buffer management akin file system database 
object interrelations determining objects hot complex problem 
grouping related objects proxy hint amelo keep memory 
proxy making determinations run time decides love hate groups anticipated usage 
loved groups stay hot ones percolate disk 
amelo purpose function fast file cache turning previously implicit rigid policies explicit mechanisms 
section discusses previous policies relating objects origins amelo underpinnings checkpointing memory metadata 
section portrays researcher api 
section looks amelo works beneath interface 
section examines results microbenchmarks sample proxy 
section looks modifications section summarizes project results 
related web proxy cache goal reduce latency clients servers 
primary method achieving aim retain valid copy subset data clients asked anticipation clients request data 
possibly zero length time data passes proxy route server client data expires causing request expired data cache server generate fresh copy new expiration date 
projects research method reducing internet latency harvest squid cern :10.1.1.21.1842
shows amelo fits proxy harvest squid cern disks store bulk data 
proxy clients da 
melo servers amelo fits key concept originating web caches data simply expire cache causing new fetch server harm client perceived delay 
long amelo detect inconsistencies cached copies expire bad data sent client far storing data typical database file system 
fact data storing entirely replaceable invariants differentiate amelo typical file system 
pieces information amelo need store ownership execution permissions 
transit internet data anonymous 
similarly execution encapsulated data header multimedia file 
file system shown advantage invariants faster solution possible 
cacheable data begun include dynamically generated content results cgi queries example 
store data amelo need sit beneath active caching intelligence just currently resides proxy 
active cache datum larger typical static web object tested section 
example active cache want refer query table single object order transfer memory unit 
cache handle types data concurrently probably benefit multiple page sizes 
discussed section 
relating web objects research gone best interrelate web objects exploit unique characteristics 
lists significant attributes objects read entirety 
add observation modified locally 
web objects kb transfers smaller kb 
web objects popularity follows zipf distribution means files popular popularity evolve time :10.1.1.12.2253
embedded objects inline gifs intradomain name produce high data meta data locality 
objects redundant definition backed 
redundancy authors note acceptable store web objects disk periodically store objects disk event server crash 
concur independently explored idea 
addition attributes lists low ratio disk reads writes involves read cache meta data write metadata 
redundancy data affords freedom keep meta data memory operations disappear 
independently researched methods preserving locality 
locating objects frequently accessed nearby hope prefetch objects meta data cached reduce authors modified squid map domain names particular directories single directory may store objects popular server 
lead directories entries results directory spanning multiple blocks 
typical fast file system ffs linux ext fills fragmented multiple blocks longer cylinder cylinder group 
takes domain name mapping step places small objects hash directory file 
call objects buddies 
idea reduce meta data overhead fragmentation caused small files 
noted frequently accessed meta data lends remaining memory alleviating problem entirely 
amelo solves fragmentation problem compacting buffers putting free space 
takes related web objects places memory mapped files 
authors align objects page circumvent undesired paging 
amelo takes workaround explicit objects go pages aligned swapped explicitly told general purpose operating system algorithm believes correct 
similarly buffers buddies streams keeps memory period long write disk worthwhile 
full stream written atomically amelo page 
streaming approach combined locality achieves url get operations second vs squid naive scheme 
alternative approach design operating system especially caching 
improves response time object pipelining opens simultaneous tcp connections origin server allow retrieves object parallel 
appears refinement multithreaded approach subsection parses html document way back client requests inline objects automatically 
algorithm clearly incorporated proxy running conventional operating system 
solutions rest standard file system operating systems suffering portability problems 
incorporated regular file system advantage invariants data afford 
study best policies relate object perform actual storage mechanism far flexible need 
ffs file system lose opportunities optimization 
amelo designed user level file system works commonly operating systems research significantly faster constrained semantics general purpose data 
constituent mechanisms primary source amelo explicit grouping idea 
authors aggressively pursue adjacency small objects just locality 
amelo idea large blocks kb access takes twice long kb access 
offer conventional file system integrity part locating fast file system ffs keep inodes disk embedded files 
grouping embedding inodes halves solution 
idea specialized portable file system caching web objects new amelo internal mechanisms include ideas research system sources 
origin streams appending additions new groups memory logstructured file system :10.1.1.117.5365
flushing amelo groups metadata background distinct times comes 
concept acid semantics discussed fully :10.1.1.1.2034
attempting minimize memory copying particular network port utilized zero copy :10.1.1.141.3764
placing large objects outside disk platter discussed fully 
amelo buffer manager internal interfaces grew project 
speedups possible memory metadata explored author matthew mccormick 
interface amelo designed multithreaded server web proxy source cache data 
designers felt making library thread safe necessary file request potential block relatively long time threads sending responses clients forwarding requests servers particular accessing data amelo memory pool 
addition allowing multiple threads create read delete objects concurrently designed amelo minimize memory copying 
reading thread pointer directly spot memory pool object located copy data 
similarly discussed internals section pages memory pool written disk copied happen kernel managed block device 
reduction memory creation deletion copying allows accurate sum total memory usage problem squid example turn means cache administrator allocate physical memory system resulting undesired swapping 
amelo links library header file application 
main thread application calls amelo constructor 
char raw disk device name int number groups int memory pool size int status raw disk partition created rw permissions user id application runs see raw command linux solaris unbuffered partitions exist 
number groups signifies groups amelo anticipate handling controls disk divided sets data structures group 
group numbers range allocated alternating center disk 
visually looks assuming odd 
disk layout requests handled way elevator algorithm groups low numbers lower response times disk head pass 
outer tracks achieve greater bandwidth due higher rotational speed large objects placed groups 
stage development please see detail 
memory pool size parameter multiple page size point having room page example 
constructor megabytes 
tests pool sizes minimal amount memory typically available machines 
pages frames size size currently compiled library 
pages refer data moved atomic unit frames entities contain pages migrate memory frames disk frames 
status parameter constructor passed allows return codes errors 
return values functions nonzero status signifies error sent amelo text explanation 
amelo destructor forces pending deletes flushes dirty buffers disk checkpoints groups frees memory pool 
int create char file name char data int size int group number create takes file size copies data specified group 
assumption objects write read 
web proxy context built experiments section files assumed sent requesting client proxy create file amelo 
reason proxy forward response client create operation taken client latency 
proxy data entirety calling create 
choosing group place object exactly complex question previous research attacked amelo designed simpler 
objects interrelate criteria 
simple scheme hash domain names group 
complex try pick objects commonly accessed put lower numbered groups 
statistical information group object kept header part object object group information placed group combination 
keeping meta information objects best solution page need saved disk actual data modified 
proxy anticipates creating objects group love group discussed 
example scheme hysteresis automatically love group objects created row hate actions group ceased 
simplify amelo internal mechanisms object fit frame 
built regular operating system larger objects cached regular file system mechanism 
see drawback main penalties standard file system seen small objects seek times dominate 
large objects multimedia files probably disk streaming mechanism amelo reads objects entirety 
int lookup char file name int group number lookup takes filename returns file group number error code signifying file 
purpose function program amelo needs remember files created groups put 
group assignment mechanism evolves time server name mapped low priority group maps high old files 
generally lookup called directly read remove order find object group number 
int read char file name int group number char data int size int release char file name int group number read release pair acquire pointer memory pool amelo positioned requested object signify proxy thread finished reading data space page 
want avoid copying data long thread take send object client unknown amelo provides shared lock page object located 
release releases lock 
threads read remove objects page shared lock place 
int remove char file name int group number remove prevents access object frees space group 
explained detail internals section deletes buffered affect memory pages data structures 
create remove return locked page second function call required 
int love int group number int hate int group number stated discussion create anticipated group love group anticipated hate 
translate lru mru buffer pool replacement respectively 
proxy group management scheme choose modify group loved state run time groups initially set loved matter buffers pool allocated get 
int group int time amelo achieves speedup seen experimental results keeping file metadata memory 
inode performing data fetching limit amount data lost case crash periodically checkpoint metadata 
level robustness modified runtime granularity group groups little current access selected checkpointing checkpointing desired switched entirely 
checkpoint operations group level bring system halt 
time parameter signifies number seconds checkpoints 
set zero checkpointing turned 
void char int error standard library call amelo takes string output stderr string describes error condition 
internals portrays amelo main data structures lists main steps create request enumerated 
shows read requests concurrently asking objects fifth buffer 
divides system main components represent stages thread traverses network top disk bottom 
initial amelo object constructor discussed previous section creates groups buffer manager forks new disk thread 
group object contains list pages memory free space pages including disk 
information group try allocate new web object page currently memory 
constructor group creates file object 
files encapsulate disk operations group group objects handle memory operations 
group contains large memory hash table recording logical location page slot pair files 
order reduce memory usage web file name url converted byte md equivalent insertion file table 
stays memory file name length significant multiplied millions entries 
buffer manager amelo interesting complex member 
frames states unused free list shared threads exclusively thread 
deletes buffered occur page exclusively locked due pending create read 
requested page pool create read acquire exclusive lock unused frame frames 
frame contains valid dirty page pending deletes deletes subsequent compaction performed just victim page sent disk 
disk reads requested page lock deletes objects page generated request 
benefits buffered deletes twofold 
delete request changed operations read modify write zero 

allow requests deletions page sorted efficient order 
order requires memory copying compaction 
case object page deleted objects deleted front back object shifted forward deletion 
reordering back front memory copying required 
files map groups logical page numbers disk physical frame offsets 
buffer manager needs read write page enters group corresponding file translation generate request disk 
thread caused action sleeps file object request complete 
disk thread waits files enqueue requests 
handling request signals requesting thread looks new requests request queue 
disk goes sleep 
thread positions request request queue keeps requests sorted physical frame number entry nearest current position disk head 
proxy group create url group data size remove url group lookup url group read url group data size release url group file page page data page data buffer manager file page file page exclusive shared 
file page dirty loved 
disk enqueue request proxy network threads www yahoo com get home gif ok modified tue jul gmt content length content type image gif gif oea 
group group group key md value page slot lookup www yahoo com home gif group querying groups gif xo hashed file table mapping url position page list pages currently memory list pages free space probe md home gif create home gif buffer new file descriptor pg kb group page pin count free space exclusive lock free list head free list slots kb exclusive page insert buffer dirty loved gif 
frame buffers buffer descriptors kb kb logical physical page mapping delete queue queue page file file file kb hash map file page frame read write memory frame physical block write read thread sleeps request physical disk dequeue request awaken requesting thread completion request queue page frame enqueue memory frame disk frame amelo internals please refer appendix enumeration create steps code fragment 
experiments microbenchmarks designed microbenchmarks test amelo web workload ran configuration commonly web proxy simulator 
experiments reflect contention read latency matters removed user path 
creates streamed buffers log file system multithreaded server entirely masked actions threads 
deletes entirely memory potentially affect reads discussed 
reads focus experiments 
microbenchmark consists distinct stages create read delete 
stage threads perform nt operations number objects 
threads finish proceed stage 
experiment begins object assigned group amelo version directory standard file system 
standard file system directories set tiered namespace 
mirrors squid directory usage 
quantify amelo improves read performance keeping create delete performance designed web object orderings 
microbenchmarks stage object ordering pair giving total fifteen microbenchmarks 
sequential operations performed set objects order directory group order respectively 
random files created done random order create group group 
number reads follow read file equal probability 
files deleted different random order created 
zipf creates deletes random 
objects receive requests unpopular objects receive requests 
fraction requests randomly distributed 
zipf zipf ratio popular files unpopular files doubled 
zipf zipf half files marked popular 
web objects follow zipf popularity distribution set objects requested frequently 
zipf experiments approximate 
ratio popular files unpopular thought actual distribution requests accuracy proxy object interrelation policy 
popular objects come groups directories ext groups loved remain memory 
sequential random groups loved 
moving create read stage microbenchmark amelo buffer pool flushed reads hits left create stage 
timestamp recorded operation graphs sampling times easier readability 
average maximum latency charts gathered timestamps sampling 
hit rates ratio number times objects page requested total number objects page 
sequential read objects accessed exactly making hits object count ratio 
random zipf tests objects accessed hit rate varies 
experimental setup experiments conducted mhz pentium iii running red hat linux version stock kernel 
machine ibm model scsi disk drives gigabytes sustain throughput mbits sec 
ram 
logging done separate disks separate scsi controllers 
raw disk remainder freshly linux standard ext filesystem kb kb kb block sizes 
kb ext maximum block size 
microbenchmarks shown objects random size kb test objects bytes average objects ss 
amelo groups threads buffer pool disk 
buffer pool disk divided frame sizes kb kb kb kb kb 
buffer pool hold total test size 
ext available disk 
ran threads experiments showed ext performed slightly better fewer number threads 
tests larger buffer pool showed similar results omitted clarity 
milliseconds operations ext vs zipf read operations buffer pool frame kd kd ext vs zipf read microbenchmark results results microbenchmark tests shown figures appendix 
amelo sequential performance consistently better ext figures portray benefit larger transfer units especially unit utilized 
sequential read peaks average latency half millisecond kb frames larger frames perform better 
kb frames amelo times faster test 
expected random read performance suffers larger frame sizes 
worst case average read latency par ext 
sub kb frames clearly better performance metric 
amelo random creations penalize time operation nearly ext amelo objects append group stream just sequential ext seek direc sequential zipf zipf zipf random average request time ms access pattern average latency reads kd kd ext average read latency tory 
delayed deletions amelo delete performance order magnitude faster ext figures 
speed especially significant caching proxy context deletions handed separate process great burden system 
zipf experiments convey power amelo proxy controlled knobs relation hit mechanisms 
proxy relation algorithm successfully placed popular objects groups loved see huge performance gain ext 
portray speedup ext zipf times zipf 
workloads benefit hit rates kb kb frames 
experiments show tradeoff large frames hit rates 
clearly kb kb random get poor performance 
kb buffers guaranteed hit rate average ss kb objects 
happy medium emerge ability discern popular objects accurate frame size increases 
beginnings trend kb having best latency zipf 
results show accurate grouping mechanism leads lower read latency 
web proxy simulation due time constraints able explore web proxy simulator thoroughly liked 
able set average hit rate frame size kilobytes average hit rate vs frame size read operations smoothed read zipf zipf zipf random hit rate varying page sizes run preliminary tests web polygraph 
web polygraph environment virtual clients virtual servers utilizing proxies 
experiment 
different proxies squid multithreaded proxy backed ext mt ext multithreaded proxy backed amelo mtd amelo 
tests run hardware exception unit client server proxy different machine 
mt amelo mapped objects groups randomly 
squid mt ext directories cleaned test 
tests results show average throughput requests second measured client responses 
test data cacheable header data revisited 
web object sizes exponentially kb maximum 
amelo buffer pool kb frames groups 
test run minutes 
proxy avg requests sec mt ext squid mt amelo web proxy simulation results sample proxy built project fairly cache content squid gets improvement 
performance gain simple proxy amelo vs ext directory structure squid suggests better proxy speedup mt amelo squid magnified 
precise equation determining best page size average object size popularity certain requests items project left 
difficulty current deletions conflicts focus read latency 
worst case compaction os compaction happen client waiting 
relatively simple solution garbage collecting thread performs deletes background 
compacted pages scheduled disk low priority queue 
ability large files compiled linux kernel limited large disk seek unbuffered kernel 
easy solution allow multiple partitions disk 
felt decided large files commonly available soon 
items left unimplemented checkpointing placement groups depicted 
checkpointing recovery relatively simple due fact inconsistent data discarded 
adjusting group offset difficult turning current way disk elevator algorithm way felt potentially complex bug prone left unimplemented due lack time 
longer term extensions multiple disks multiple pages sizes 
multiple disks allow parallel access especially popular groups 
multiple page sizes permit larger objects active cache tables potentially better hit rates popularity group 
amelo achieves goal fast easy object cache prime grouping memory usage effectively 
tests accessing objects randomly doubles performance ext common example fast file system 
better grouping ext average read latency times 
gains speed primarily keeping meta data memory data nature placing related files disk 
hopefully amelo file system popular web cache 
check www org 
thesis extremely interesting challenging rewarding project great ideas guidance 
blackwell harris seltzer 
heuristic cleaning algorithms logstructured file systems 
bowman danzig hardy manber schwartz :10.1.1.21.1842
harvest information discovery access system 
breslau cao fan phillips shenker :10.1.1.12.2253
web caching zipf distributions evidence implications 

technology overview 
david dewitt jussi myllymaki 
database project 
fox gribble chawathe brewer gauthier :10.1.1.1.2034
scalable network services 
ganger kaashoek 
embedded inodes explicit grouping exploiting disk bandwidth small files 
marshall kirk 
fast file system unix 
luo krishnamurthy li cao naughton 
active query caching database web servers 
luotonen 
henrik frystyk nielsen 
carlos 
reducing disk web proxy server caches 
markatos 
secondary storage management web proxies 
matthews roselli costello wang anderson 
improving performance log structured file systems adaptive methods 
matthew mccormick jonathan 
fast file system caching web objects 
rodney van meter 
observing effects multi zone disks 
proceedings usenix conference 
calton pu andrew black charles consel crispin cowan jon inouye jonathan walpole ke zhang 
optimistic incremental specialization streamlining commercial operating system 
proc 
th acm symposium operating systems principles copper mountain usa 
mendel rosenblum john ousterhout :10.1.1.117.5365
design implementation logstructured file system 
proceedings th acm symposium operating systems principles pages 
association computing machinery sigops 

performance study squid proxy 
alex duane wessels 
web polygraph 
thorsten von eicken anindya basu vineet bush werner vogels :10.1.1.141.3764
net userlevel network interface parallel distributed computing 
proceedings th acm symposium operating systems principles pages 
association computing machinery sigops 
wessels 
squid internet object cache 
wessels 
squid internet object cache faq 
appendix create steps client request proxy intercepts 
proxy probes amelo groups object existence 
amelo responds 
proxy forwards request web server 
web server responds header web object 
proxy creates buffer copy web object 
proxy copies data web server port buffer client port 
note finishes client latency 
proxy chooses group group calls amelo create 
group picks page free space memory 
picks logical page memory frame 
locks page exclusively adds new web object exclusive lock 
internal slot array page notes location new object 
group creates new memory file descriptor object 
thread finished create 
thread needs frame frame head free list gets exclusive lock frame initiates 
logical physical frame translation request gets queued 
disk completed request wakes second thread 
code fragment include include status include int main status status int int new raw raw raw status love char filename sprintf filename gif char memset status create filename int status lookup filename char int length status read filename length status release filename hate status remove filename delete return milliseconds operations ext sequential create operations ext ext frames ext sequential create milliseconds operations ext sequential read operations ext ext frames ext sequential read milliseconds operations ext sequential delete operations ext ext frames ext sequential delete milliseconds operations sequential create operations buffer pool frame size amelo sequential create milliseconds operations sequential read operations buffer pool frame size amelo sequential read milliseconds operations sequential delete operations buffer pool frame size amelo sequential delete milliseconds operations ext random create operations ext ext frames ext random create milliseconds operations ext random read operations ext ext frames ext random read milliseconds operations ext random delete operations ext ext frames ext random delete milliseconds operations random create operations buffer pool frame size amelo random create milliseconds operations random read operations buffer pool frame size amelo random read milliseconds operations random delete operations buffer pool frame size amelo random delete milliseconds operations ext zipf read operations ext ext frames ext zipf read milliseconds operations ext zipf read operations ext ext frames ext zipf read milliseconds operations ext read operations ext ext frames ext zipf read milliseconds operations zipf read operations buffer pool frame size amelo zipf read milliseconds operations zipf read operations buffer pool frame size amelo zipf read milliseconds operations read operations buffer pool frame size amelo zipf read :10.1.1.141.3764
