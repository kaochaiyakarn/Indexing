computing minimum weight perfect matchings william cook computational applied mathematics rice university main street houston tx email rice edu andr mathematik universit bonn str 
bonn germany email uni bonn de received october revised november accepted september observations implementation edmonds blossom algorithm solving minimum weight problems computational results geometric problem instances ranging size nodes nodes 
key feature implementation multiple search trees individual dual change tree 
benchmark algorithm performance solving node geometric instance mhz pentium pro computer takes approximately minutes 
perfect matching graph subset edges node met exactly edge subset 
real weight edge perfect matching problem find perfect matching minimum weight 
fundamental results combinatorial optimization polynomial time blossom algorithm computing minimum weight perfect matchings edmonds 
algorithm serves primary model development methods attacking combinatorial integer programming problems 
efficient implementations algorithm permit solution large instances matching problems arise practical situations 
classic application minimum weight matchings minimizing motion pen described reingold tarjan iri matsui 
applications include scheduling crews vehicles mass transit systems ball dial creating pairings chess tournaments selecting control groups evaluations experimental drugs clyde monma personal communication ordering arithmetic operations brandon dixon lenstra personal communication vehicle routing time constraints derigs metz scheduling training sessions nasa space shuttle bell transmitting images network ladner wang atlas capacitated vehicle routing miller 
edmonds matching algorithm studied great number researchers 
efficiency algorithm measured bounds worst case running time steadily improved past years 
interest efficient implementations motivated large degree simply beauty algorithm due subject classifications computational algorithms 
key words perfect matchings networks graphs minimum weight 
informs journal computing vol 
spring informs copyright 
rights reserved 
role played matchings solution techniques applied problems listed 
straightforward implementation edmonds original description algorithm easily seen run time bounded number nodes graph number edges 
improved lawler gabow nm log galil micali gabow 
improvement gabow galil spencer lowering bound log log log max log 
log log log term removed gabow resulting bound log 
techniques established results surveyed ball derigs galil 
gabow bound currently best known result terms bounds possible edge weights integers 
case edmonds algorithm combined scaling techniques produce bounds depend largest magnitude edge weight 
result type described gabow obtained log time bound 
gabow tarjan sophisticated approach obtain bound log nn log tarjan inverse ackerman function 
summary complexity results table practical outcomes line research steady stream ideas incorporated computer implementations edmonds algorithm 
helped spur parallel line research aimed creating robust computer codes solving perfect matching problems 
list studies area table ii 
exception cutting plane methods employed gr tschel holland trick papers listed table ii presents implementation edmonds algorithm 
number papers report computational results problem instances having nodes applegate cook include results instances nodes 
despite implementations edmonds algorithm large body research heuristic methods finding opti mal perfect matchings 
area includes bentley nger pulleyblank williamson goemans surveys earlier avis 
research heuristic algorithms motivated part fact scenarios time required compute optimal matching may justified 
main contribution article new implementation edmonds algorithm hopefully extend range instances optimal solutions obtained 
implementation combines number techniques earlier efforts new observations 
code appears significantly faster previous implementations permits solution instances larger reported earlier studies 
test set includes geometric instances complete graphs described points plane generated randomly structured instances reinelt tsplib library traveling salesman problem instances vlsi table history worst case bounds year authors running time edmonds lawler gabow gabow galil micali gabow gabow galil spencer gabow gabow tarjan table ii 
history computer implementations year authors edmonds johnson lockhart pulleyblank cunningham marsh burkard derigs derigs minoux gr tschel holland derigs derigs metz trick derigs rousseau minoux derigs metz applegate cook rk miller computing minimum weight perfect matchings copyright 
rights reserved 
log nm log log log log log log nn log design 
largest instances test set nodes 
benchmark code performance solving node geometric instance mhz pentium pro computer takes approximately minutes 
article organized follows 
section short outline edmonds algorithm section discuss idea improve practical performance large scale problem instances 
section method handling dense graphs improving techniques developed ball derigs applegate cook 
section report results computational tests 
assume reader familiar basic results matchings 
excellent general lov sz plummer 
computer implementation available research purposes 
code written programming language kernighan ritchie obtained internet www uni bonn de home matching html 
edmonds algorithm edmonds algorithm linear programming formulation minimum weight perfect matching problem 
linear programming duality provides stopping rule algorithm verify optimality proposed solution 
graph node set edge set describe linear programming formulation denote set odd subsets containing nodes denote set edges meet exactly node vector set denote sum 
incidence vector perfect matching graph satisfies linear system 
minimum weight perfect matching large value min wx satisfies 
dual linear programming problem subject max uv ys 
dual solution reduced cost edge uv denoted slack slack slack corresponding constraint 
edge called tight respect reduced cost 
similarly set called full respect partial matching ifx 
definitions complementary slackness conditions primal dual pair solutions stated edges ifx tight sets ify full 
prove specified perfect matching optimal providing dual solution conditions satisfied 
remarkable result edmonds proof optimality exists constructed blossom algorithm 
step edmonds algorithm matching dual solution satisfy complementary slackness conditions 
proposed derigs metz initialize solutions solving linear programming relaxation matching problem 
matching grown augmenting paths reach perfect matching 
ensure complementary slackness conditions hold augmentation carried algorithm considers augmenting paths entirely tight edges 
heart algorithm search engine finding augmenting paths 
describe algorithm need indicate components order new features implementation 
key notion shrinking set single 
intuition complementary slackness condition constraint individual nodes matching dual solution algorithm searches augmenting path tight edges graph may possibly 
node refer original nodes 
carry search choose unmatched node grow tree rooted having properties edge tight node unique path alternates matched edges unmatched edges 
tree called alternating tree 
nodes labeled parity number edges path back root node nodes distance receive label nodes odd distance receive label 
grow appending matched edges meet nodes tight unmatched edges join nodes nodes cook reach unmatched node augmented path replacing edge path 
tree reached unmatched node grow attempt alter dual solution order create new tight edges keeping edge tight 
form dual change add nonnegative value node subtract node choose large possible subject condition dual change complementary slackness conditions remain satisfied 
constraints slack edge joining node node slack edge joining nodes copyright 
rights reserved 
set corresponding toa 
bound determined constraint dual change new tight edge grow hand determined constraint adding tree creates unique circuit notice contain odd number nodes determines set 
circuit shrunk new try grow condition bounds expand previously shrunk circuit corresponding adjust obtain new alternating tree try grow rough outline suffice purposes 
detailed descriptions blossom algorithm pulleyblank ball derigs cook cunningham pulleyblank schrijver 

variable dual changes fundamental decisions implementation edmonds algorithm grow single tree unmatched node simultaneously grow trees unmatched nodes easy details algorithm version easy predict variants behave practice 
applegate cook single tree order minimize amount overhead search procedure forced code find long augmenting paths cases short paths available starting nodes 
question added complexity multiple tree version worth potential savings obtained carrying global searches augmenting paths 
extensive study issue proposed phased implementation single tree variant match nodes multiple tree variant match remaining 
constraints dual change values 
nodes 
experimenting approach led improved procedure describe 
major drawback multiple tree variant compute value dual change need examine edges meeting nodes possibly trees typically dual change create new tight edges meeting small number trees 
perform great deal computation order relatively little progress 
simple idea overcome difficulty allow trees dual change value 
values constrained corresponding trees constraints involving pairs trees slack slack joining int toa int joining int toa int 
additional restrictions dual change values illustrated 
progress possible dual objective function choose maximize subject constraints 
computing values isa linear programming problem solved polynomial time 
fact observed cunningham personal communication linear programming dual network optimization problem mixed graph 
interesting see optimal solution linear programming problem impact performance edmonds algorithm approach practical value due time required solve linear programming problems 
alternative idea employ heuristic algorithm aimed obtaining optimal values 
attempt order trees greedily large possible 
difficulty approach con computing minimum weight perfect matchings table iii 
sparse graphs pentium pro seconds nodes edges single tree multiple trees variable table iv 
percentage time final augmentations nodes edges copyright 
rights reserved 
final augmentation final augmentations straints may require greedy algorithm set values 
handle form directed graph nodes directed edge tight edge joins node toa node edge constrains 
strongly connected components impose equivalence relationship trees trees equivalence class set dual change values 
modify greedy algorithm order equivalence classes equivalence class turn greedily common value trees equivalence class large possible 
computer code employ simplified version idea define equivalence classes trees connected components requires slightly overhead computing strongly connected components appears adequately practice 
computational comparison single tree variable methods table iii 
problem instances sparse graphs derived geometric data sets described section graphs approximations delaunay triangulation point set 
tests run mhz pentium pro computer see section details computing platform 
running times indicate variable approach worthwhile doubt room improvement 
sign finding augmentations code takes half total computation time see table iv 
suggests strategy priority queue implementation may preferable final stages algorithm 

price repair solve large problem instances adopt strategy computing optimal matching sparse subset edges linear programming duality guide solution entire edge set 
standard technique combinatorial optimization context proposed derigs metz 
choices initial set edges 
derigs metz nearest graph consisting costly edges meeting node 
miller quad nearest graph defined costly edges geometric quadrants node 
applegate cook fractional nearest graph graph obtained solving linear programming relaxation matching problem choosing edges reduced cost meeting node 
study generally edges approximate delaunay triangulation set points 
edge set nice property dense captures structure point set contains perfect matching see akl 
solved minimum weight problem initial set edges compute reduced costs remaining edges 
procedure called pricing 
reduced costs nonnegative dual solution feasible solution full dual linear programming problem conclude matching optimal entire set edges 
hand reduced costs negative sure matching computed optimal entire edge set 
case add edges having negative reduced cost initial edge set resolve matching problem repeat pricing procedure 
process iterated obtain optimal matching entire edge set 
procedure successful large problem instances need efficient pricing mechanism 
code follow ideas described applegate cook 
common ancestor algorithm aho ullman compute reduced costs sets edges advantage nested structure sets 
applegate cook underestimate reduced cost avoid pricing entire set edges 
accomplished computing node value sum 
reduced cost edge uv sum sum need price edge 
applegate cook describe technique avoid explicitly computing edge complete graphs determined geometric problem instances advantage distance function rule possibility certain edges 
adopt aspect applegate cook process kd tree see bentley treating sum extra geometric coordinate distance function 
allows locate edges having standard nearest neighbor cook copyright 
rights reserved 
search algorithms kd trees 
idea similar technique johnson mcgeoch rothberg computing spanning trees held karp procedure traveling salesman problem 
pricing phase produces edges having negative reduced cost may sense resolve new perfect matching problem scratch addition edges cause perfect matching dual solution change considerably 
relatively edges negative reduced cost may quite wasteful simply throw away matching dual solution 
repair matching inserting new edges existing solutions 
ball derigs building earlier weber described elegant method accomplishing 
suppose wish add edge uv initial edge set 
method begins carrying sequence dual changes expansions preserving complementary slackness conditions say longer contained 
matching edge meeting set 
decrease value reduced cost edge 
matching dual solution satisfy complementary slackness conditions may unmatched search augmenting path restore optimal perfect matching 
ball derigs method clean practical drawbacks slightly improved procedure applegate cook 
firstly dual steps primal steps fight dual steps expand uncover node primal steps shrink back chain order find augmenting path 
edge add initial set advantageous delay primal steps edges added 
result graph having number unmatched nodes matched variable approach 
secondly ball derigs method requires great deal computational effort ensure complementary slackness conditions continue hold matching dual solution 
give requirement simply expand containing setting matching edges meet 
result graph having greater number unmatched nodes apply variable approach restore optimal perfect matching 
call simplified procedure careless repairs dropped constraints guide ball derigs procedure 
table compare careless repairs ball derigs procedure procedure simply resolving matching problems scratch pricing iteration 
times reported solving matching problem complete graph specified geometric problem instances starting delaunay edge set 
interesting note performance resolve method 
explained results table table comparison repair routines pentium pro seconds nodes ball derigs resolve careless table vi 
test instances name nodes source pr tsplib pcb tsplib rl tsplib usa tsplib tsplib map tokyo pla tsplib vlsi bonn vlsi bonn iv showing variable approach completing nearly perfect matching perfect matching close difficult computing perfect matching scratch 
take advantage fact code robust dealing initial edge sets provide representation full graph find greater edges having negative reduced cost instance having nodes simply resolve matching problem scratch calling repair routine 

computational results refer computer code blossom iv names blossom blossom iii edmonds johnson lockhart pulleyblank cunningham marsh respectively 
crucial component efficient implementation edmonds algorithm choice data structures maintaining search tree blossom family 
blossom iv employ framework described pulleyblank see applegate cook 
tested blossom iv variety geometric problem instances structured randomly generated sparse graphs obtained instances 
structured instances listed table vi 
examples tsplib library maintained gerd reinelt 
worked selection tsplib instances having nodes 
original data set usa contains odd number points instance follow practice applegate cook drop point sorting coordinates 
instance described asano computing minimum weight perfect matchings table vii 
blossom iv running times seconds name ibm copyright 
rights reserved 
mhz pentium pro alphaserver pr pcb rl usa pla run run imai iri 
large vlsi instances obtained vlsi design project research institute discrete mathematics university bonn 
instances edge weights defined euclidean distance rounded nearest integer points corresponding nodes edges distance function specified tsplib 
edge weights defined similarly norm norm 
randomly generated examples consider integer coordinates drawn uniformly square number nodes instance 
generator available part dimacs challenge organized johnson mcgeoch 
generator described bentley algorithm section knuth 
nice property machine types produce identical sequence integers seed 
rounded euclidean distance define edge weights random problem instances 
computational tests carried different computing platforms ibm rs model running ibm aix operating system ibm compiler options packard xu mhz pentium pro processor cache running sun solaris compiled gnu gcc compiler optimization level digital alphaserver mhz processor running digital unix compiled digital cc compiler options tune host 
table vii report running times machines complete set structured instances vlsi instances run machines due memory time limitations 
tests delaunay graph initial edge set computed sweep code fortune exception norm instance sweep requires norm instances union edge set edge set nearest neighbor traveling salesman tour set points 
running times table include phases algorithm initial edge set generation matching initial set price repair 
times pentium pro roughly table viii 
applegate cook alphaserver seconds name applegate cook blossom iv speedup pr pcb rl usa pla table ix 
applegate cook random instances alphaserver seconds nodes applegate cook blossom iv speedup table applegate cook fractional nearest alphaserver seconds nodes edges applegate cook blossom iv speedup times faster ibm times alphaserver roughly times faster ibm times faster pentium pro 
note relatively poor running times due time required pricing phase algorithm 
large structured instances running times greatly reduced working dense initial edge set 
difficult task properly compare performance blossom iv earlier implementations due unavailability earlier codes fact early codes written greatly different computing platforms 
limit comparison code applegate cook appears best performing code earlier implementations comparison code derigs applegate cook 
table viii report times applegate cook test bed 
instances blossom iv ranged times faster earlier code 
noted applegate cook known perform structured instances test set 
tests carried williamson goemans applegate cook computing optimal matchings usually faster implementation goemans williamson matching heuristic cook copyright 
rights reserved 
table xi 
random geometric problems ibm seconds nodes trials mean time max time min time 
log log plot random instances ibm 
table xii 
node random instances trials ibm seconds initial edge set mean time max time min time lk nearest tsplib problems large randomly generated problems heuristic times faster applegate cook 
surprising blossom iv obtains greater speedup large random instances indicated table ix 
blossom iv advantage applegate cook code superior price repair routine permits efficiently smaller initial edge set 
initial set applegate cook fractional nearest denser graph delaunay graph blossom iv 
computation time needed construct fractional nearest edge set considerably 
lengths node random instances 
needed fast delaunay graph codes fortune shewchuk 
just solving fractional nearest blossom iv significantly faster applegate cook indicated table give indication growth running time blossom iv problem size increases table xi results code range random geometric instances 
instances delaunay graph computed triangle code shewchuk 
triangle robust sweep dealing large point sets 
log log plot values 
running times mean values number independent instances problem size indicated table 
noted running times increase points distributed larger square example working square increases mean time factor instances table xiii 
computational estimates year authors estimate largest test instance papadimitriou iri matsui weber table xiv 
delaunay matching pentium pro seconds name time cost optimal cost gap speedup pr pcb rl usa pla computing minimum weight perfect matchings nodes nodes nodes table xv 
delaunay matching random instances ibm seconds nodes trials copyright 
rights reserved 
mean time mean gap max gap speedup table xvi 
delaunay graphs edge weights ibm seconds nodes trials mean time max time min time nodes 
due increase number dual changes brought greater precision integer edge lengths 
plot indicates growth running time modest consider solving larger problem instances 
difficulty encounter memory required computer code growing number nodes 
main contributors memory usage blossom iv storage edges 
natural consider initial edge set dense delaunay graph 
possibilities edge set tested consists union matchings produced lin kernighan heuristic perfect matchings similar known heuristic lin kernighan traveling salesman problem 
details matching heuristic see 
small table xvii 
node delaunay graphs random edge weights ibm seconds edge weights trials mean time max time min time instances edge set practical requires time compute total computation time blossom iv starting delaunay graph 
nodes computing lin kernighan edge set requires roughly third time needed blossom iv delaunay graph total running time times delaunay version 
nodes time needed compute edge set tenth time blossom iv delaunay total running time slower delaunay version 
additional slowdown lin kernighan version code time needed generate edge set results fact sparse initial set lead larger number rounds price repair 
partially offset effect add nearest edge set union matchings consider large instances 
test approach ran blossom iv instances having nodes 
running times test ibm rs table xii 
fact blossom iv solve large random problem instances suggests may useful tool pursuing study asymptotic behavior length cook table xviii 
running times pla seconds optimum matchings 
papadimitriou shown exists constant 
infinite sequence independent uniformly distributed points unit square denotes length minimum weight perfect matching points converges surely table xiii list estimates obtained number researchers computational experiments 
williamson goemans argue simply matching length accurately predicted estimator form computer code applegate cook solve range problem instances including instances having nodes estimated 
node instances williamson goemans estimate 
blossom iv compute optimal matchings random instances having nodes seeds 
histogram lengths matchings 
mean lengths fits reasonably williamson goemans estimate 
goal blossom iv exact solution large scale instances noted code heuristic algorithm solving initial edge set skipping price repair phase code 
indicate table xiv quality matchings obtained optimizing just delaunay graph 
test instances cost optimal matching delaunay graph tenth percent cost optimal matching complete graph 
times reported table xiv include time sweep code fortune compute delaunay graph 
speedup time solve complete graph better cases 
similar results machine compiler time speedup sun sparc model gcc ibm rs model gcc ibm rs model mhz sgi indigo impact mhz cc ibm rs model digital alpha xl gcc sun ultra model gcc hp xu gcc sgi indigo impact cc ibm rs model sun ultra model gcc digital alpha xl gcc dcg ev mhz alpha mbyte cache gcc digital alphaserver mhz gcc copyright 
rights reserved 
hold tests random graphs triangle compute delaunay graphs reported table xv 
point instances considered edge weights determined geometric norm 
give comparison non geometric instances table xvi report times random graphs integer edge weights chosen random uniformly interval 
table xvii give indication growth running time spread random weights increased 
notice node instances running time appears level reach point edges receive distinct weights 
report table xviii solution time pla number different computing platforms 
gives rough comparison various machines type combinatorial computing 
acknowledgments authors david applegate help implementing blossom algorithm cunningham pulleyblank shepherd suggestions variable dual change criterion goemans remarks perfect matchings delaunay triangulations 

aho hopcroft ullman 
finding lowest common ancestors trees siam journal computing 

akl 
note euclidean matchings triangulations spanning trees journal combinatorics information system sciences 

applegate cook 
solving large scale matching problems network flows matching dimacs implementation challenge johnson mcgeoch eds american mathematical society providence ri 

asano imai iri 
practical bucketing techniques computational geometry computational geometry toussaint ed north holland amsterdam 

rk 
efficient algorithms minimum cost perfect matching problem general graphs master science thesis bilkent university turkey 

avis 
survey heuristics weighted matching problem networks 

ball dial 
matching heuristic scheduling mass transit crews vehicles transportation science 

ball derigs 
analysis alternative strategies implementing matching algorithms networks 

bell 
weighted matching vertex weights application scheduling training sessions nasa space shuttle cockpit simulators european journal operational research 

bentley 
software random thoughts unix review 
computer code available anonymous ftp ftp dimacs rutgers edu pub netflow generators universal 
bentley 
fast algorithms geometric traveling salesman problems orsa journal computing 

burkard derigs 
assignment matching computing minimum weight perfect matchings copyright 
rights reserved 
problems solution methods fortran programs springer lecture notes mathematical systems 

cook cunningham pulleyblank schrijver 
combinatorial optimization wiley new york 

cunningham marsh iii 
primal algorithm optimum matching mathematical programming study 

derigs 
shortest augmenting path method solving minimal perfect matching problems networks 

derigs 
solving large scale matching problems efficiently new primal matching approach networks 

derigs 
solving non bipartite matching problems shortest path techniques annals operations research 

derigs metz 
optimal fractional matchings solving integer matching problem computing 

derigs metz 
solving large scale matching problems combinatorially mathematical programming 

derigs metz 
matching approach solving delivery pick vehicle routing problem time constraints operations research spektrum 


delaunay triangulations discrete computational geometry 

edmonds 
maximum matching polyhedron vertices journal research national bureau standards 

edmonds 
paths trees flowers canadian journal mathematics 

edmonds johnson lockhart 
blossom computer code matching problem unpublished report ibm watson research center yorktown heights new york 

fortune 
sweepline algorithm voronoi diagrams algorithmica 

fortune 
sweep computer code available anonymous ftp netlib att com 
gabow 
implementation algorithms maximum matching graphs ph thesis stanford university 

gabow 
scaling algorithm weighted matching general graphs proceedings th annual symposium foundations computer science ieee computer society los angeles 

gabow 
data structures weighted matching nearest common ancestors linking proceedings annual acm siam symposium discrete algorithms association computing machinery new york 

gabow galil spencer 
efficient implementation graph algorithms contraction journal acm 

gabow tarjan 
faster scaling algorithms general graph matching problems journal acm 

galil 
efficient algorithms finding maximum matchings graphs acm computing surveys 

galil micali gabow 
ev log algorithm finding maximal weighted matching general graphs siam journal computing 


matching network models ball magnanti monma nemhauser eds north holland amsterdam 


zur implementation von edmonds match ing und verschiedene diplomarbeit institut mathematik universit augsburg 

goemans williamson 
general approximation technique constrained forest problems siam journal computing 

gr tschel holland 
solving matching problems linear programming mathematical programming 


combinatorial distance geometry approach calculation molecular conformation ph thesis biophysics program university california berkeley 


generalized algorithm weighted perfect matching bit 

iri matsui 
heuristics planar minimum weight perfect matchings networks 

johnson mcgeoch 
network flows matching dimacs implementation challenge american mathematical society providence ri 

johnson mcgeoch rothberg 
asymptotic experimental analysis held karp traveling salesman bound proceedings seventh annual acm siam symposium discrete algorithms association computing machinery new york 

nger pulleyblank 
new primal dual matching heuristics algorithmica 


die sung ls diplomarbeit institut der universit ln 

kernighan ritchie 
programming language prentice hall englewood cliffs new jersey 

knuth 
algorithms art computer programming vol 
addison wesley reading 

lawler 
combinatorial optimization networks matroids holt rinehart winston new york 


rousseau minoux 
new algorithm general matching problems network flow subproblems networks 

lin kernighan 
effective heuristic algorithm traveling salesman problem operations research 

lov sz plummer 
matching theory akad mia budapest 

minoux 
new polynomial cutting plane algorithm maximum weight matchings general graphs publication cook copyright 
rights reserved 
number centre de recherche sur les transports universit de montr 
miller 
staged primal dual algorithm perfect matching edge capacities orsa journal computing 


weighted matching chess tournaments journal operational research society 

papadimitriou 
probabilistic analysis matching heuristics proceedings th annual allerton conference communication control computing 

pulleyblank 
faces matching polyhedra ph thesis university waterloo waterloo ontario 

reingold tarjan 
greedy heuristic complete matching siam journal computing 

reinelt 
tsplib res zentrum heidelberg 
manuscript problem instances available www uni heidelberg de soft tsplib tsplib html 
ladner 
wang atlas 
index assignment progressive transmission full search vector quantization ieee transactions image processing 


sehr gro traveling salesman probleme diplomarbeit research institute discrete mathematics universit bonn 

shewchuk 
triangle engineering quality mesh generator delaunay workshop applied computational geometry association computing machinery new york 
computer code available www cs cmu edu quake triangle html 
tarjan 
data structures network algorithms siam philadelphia 

trick 
networks additional structured constraints ph thesis school industrial systems engineering georgia institute technology atlanta georgia 

williamson goemans 
computational experience approximation algorithm large scale euclidean matching instances informs journal computing 

weber 
sensitivity analysis optimal matchings networks 

weber 
euclidean matching problems metropolis algorithm zeitschrift operations research 
