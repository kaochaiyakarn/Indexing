efficient striping techniques multimedia file servers shenoy vin distributed multimedia computing laboratory department computer sciences university texas austin taylor hall austin texas usa mail cs utexas edu telephone fax url www cs utexas edu users performance striped disk arrays governed parameters stripe unit size degree striping 
describe techniques determining stripe unit size degree striping disk arrays storing variable bit rate continuous media data 
analytical model uses server configuration workload characteristics predict load heavily loaded disk redundant non redundant arrays 
model determine optimal stripe unit size different workloads 
model study effect various system parameters optimal stripe unit size 
determine degree striping demonstrate striping continuous media stream disks array causes number clients supported increase sub linearly increase number disks 
maximize number clients supported large arrays propose technique partitions disk array stripes media stream single partition 
load imbalance occur partitioned arrays analytical model compute imbalance partitions array 
model determine partition size minimizes load imbalance maximizes number clients supported array 
motivation advances computing communication technologies past years triggered development wide range information services electronic newspapers distance learning self paced education video mail 
services involve storing accessing processing multiple types information text audio video imagery collectively refer research supported part ibm faculty development award intel national science foundation research initiation award ccr career award ccr nasa mitsubishi electric research laboratories merl sun microsystems multimedia 
realizing services require development file servers efficiently handle multiple data types 
file servers required employ efficient placement techniques 
help formulate problem efficient placement introduce terminology 
digitization audio yields sequence samples video yields sequence frames 
continuously recorded sequence audio samples video frames referred media stream 
due large storage bandwidth requirements media streams multimedia file servers generally founded disk arrays 
efficiently utilize disk array servers interleave stripe media streams disks array 
striping policy governed parameters stripe unit size denotes maximum amount logically contiguous data stored single disk degree striping refers number disks particular media stream striped 
techniques determining stripe unit size degree striping conventional workloads consisting textual numeric data accesses proposed :10.1.1.52.634
techniques directly applicable file servers optimized storing audio video referred continuous media due fundamental characteristics real time requirements continuous media textual numeric data accesses require response times absolute performance guarantees 
contrast due real time nature continuous media accesses require file server provide bounds response times 
stripe unit size minimizes average response time considered optimal textual numeric data stripe unit size minimizes tail response time distribution possibly expense increased average response time desirable continuous media data :10.1.1.52.634
fundamental difference optimization criterion significant impact selection stripe unit size 
illustrate consider depicts histogram response time observed different stripe unit sizes obtained workload video clients accessing array disks 
shows stripe unit sizes kb kb yield average response times ms ms respectively 
shows histogram kb stripe unit size longer tail 
data accesses impose real time constraints kb chosen appropriate stripe unit size 
accesses real time constraints stripe unit size kb desirable 
shown block size minimizes average response time continues differs minimizes th percentile response time tail histogram wide range client workloads 
periodic sequential nature continuous media general textual numeric data accesses consist reads writes aperiodic random continuous media workloads consist reads writes sequential periodic 
differences access characteristics affect optimal stripe unit size result fundamentally different server architecture 
specifically due sequential periodic nature data accesses multimedia servers service continuous media requests periodically accessing transmitting data explicit request client access 
server push architecture markedly different client pull architecture employed conventional file servers data accessed server response explicit client request 
differences server architecture affect stripe unit size selection process 
due differences novel techniques optimize performance multimedia file server continuous media data developed 
research contributions propose techniques determining stripe unit size degree striping file servers storing variable bit rate continuous media data 
consider file server services clients proceeding terms periodic rounds argue environments stripe unit size minimizes service time total time spent retrieving data requested round heavily loaded disk optimal 
determine optimal stripe unit size develop analytical model uses server configuration distribution number blocks accessed client round predict service time heavily loaded disk redundant non redundant arrays 
determining service time heavily loaded disk range block sizes stripe unit size minimizes service time chosen 
validate accuracy model extensive trace driven simulations 
demonstrate contrary conventional wisdom large stripe unit size necessarily yield server performance 
stripe unit size adversely affect quality service guarantees provided clients reducing number clients supported server 
model evaluate effect various system parameters number clients number disks stripe unit size derive techniques selecting optimal stripe unit size various design scenarios 
model determine optimal degree striping media streams 
demonstrate striping media stream entire array causes number clients supported increase sub linearly increase number disks 
maximize number clients supported large arrays propose technique partitions disk array stripes media stream single partition 
load imbalances occur partitioned arrays model compute imbalance partitions 
model determine partition size minimizes load imbalance maximizes number clients supported array 
rest organized follows 
section address issue determining optimal stripe unit size 
section describes techniques determining degree striping 
section describes related section summarizes results 
determining stripe unit size consider multimedia server interleaves media streams disks storing successive blocks stream consecutive disks round robin manner 
unit interleaving referred media block stripe unit denotes maximum amount logically contiguous data stored single disk 
due periodic nature media playback server services multiple clients proceeding periodic rounds 
round server retrieves fixed number media units video frames audio samples client 
ensure continuous playback number media units accessed client sufficient sustain playback rate service time total time spent retrieving media units round exceed duration round 
media stream compressed variable bit rate vbr compression algorithm sizes successive media units stream vary 
client accesses fixed number media units round due variable media unit sizes number blocks accessed client vary round 
set disks accessed clients round different total number blocks accessed vary disk 
shall terms media block stripe unit interchangeably 
techniques number blocks accessed client round constant 
instance sever variable size blocks store fixed number media units block 
due variable block sizes policy file system design complex 
fixed size blocks number blocks accessed client round constant prefetching buffering sufficient data 
amount variation stream bit rate approach increase initiation latency reduce number clients supported server 
alternative approaches tradeoffs 
detailed examination tradeoffs scope probability disks clients stripe unit size kb stripe unit size kb response time ms disks heavily loaded service time disks may occasionally exceed round duration causing playback discontinuities client sites 
minimize frequency playback discontinuities server minimize service time heavily loaded disk array 
service time heavily loaded disk depends media block size 
observe consider small media block size 
block size increases number blocks accessed array round distributing load disks reducing load imbalance 
increases overhead due seek rotational latency increasing service time heavily loaded disk 
contrast large block size reduces overhead seek rotational latency increases load imbalance service time heavily loaded disk 
server select media block size balances tradeoffs minimizes service time heavily loaded disk array 
follows analytical model uses characteristics workload configuration server predict service time heavily loaded disk non redundant redundant disk arrays 
computing service time heavily loaded disk range block sizes media block size minimizes service time chosen 
analytical model determining load array consider multimedia server interleaves media streams disk array 
configuration server number disks physical characteristics round duration client characteristics number clients trace media unit sizes client playback rate service time heavily loaded disk redundant non redundant disk arrays computed follows 
compute distribution number blocks accessed disk client round trace media unit sizes 

compute total number blocks accessed disk summing number optimal stripe unit size kb disks average response time th percentile response time number clients effect different metrics stripe unit size 
disks disks requested blocks case client requests blocks requested blocks case client requests blocks requested block different scenarios client accesses block disk blocks requested client disk 

compute distribution number blocks accessed heavily loaded disk 

distribution number blocks accessed heavily loaded disk compute service time distribution disk disk model 
derive model non redundant arrays consider server interleaves media streams array disks 
clients access server retrieving media stream denote media block size 
server accesses fixed number media units client round distribution number blocks accessed client round determined trace media unit sizes 
continuous media requests dominated read requests confine focus read requests obtained distribution denote probability client accesses blocks array round ij denote probability client accesses blocks disk round 
compute ij observe client access exactly block disk round requests blocks array blocks stored disk previous disks requests blocks array block stored disk disk previous disks 
illustrates cases 
due vbr nature media streams number blocks accessed client varies round 
small number rounds block equally accessed disks array 
consequently ij dx generalizing client access blocks disk requests blocks array blocks stored disk previous disks requests blocks array blocks stored disk disk previous disks 
ij dx lastly probability client access disk ij random variable denoting number blocks accessed client disk round 
total number blocks accessed disk round computed nx due vbr nature video streams number blocks accessed clients array independent independent ran 
dom variables distribution obtained applying transform 
transform random variable polynomial za coefficient th term polynomial represents probability random variable equals ai un independent random variables pn ui qn ui 
distribution computed polynomial multiplication transforms un 
ny ij zp ij ij ij number blocks accessed heavily loaded disk nmax max due round robin nature media stream placement number blocks accessed disk independent load neighboring disks 
precise dependence random variables difficult characterize maximum dependent random variables difficult compute approximation assume independent 
section demonstrate approximation cause inaccuracies predictions model 
distribution nmax computed fn fn fn fn cumulative probability distribution function random variable 
having determined distribution number blocks accessed heavily loaded disk service time disk computed disk model 
model proposed literature see complete disk model :10.1.1.135.3771
service time access nmax blocks size predicted disk model max nmax ts tr nmax tt ts tr denote seek time rotational latency incurred accessing block disk tt denotes transfer time unit amount data 
server configuration workload characteristics model computes service time distribution heavily loaded disk particular block size 
model yields distribution number blocks accessed disk average load 
service time disk computed disk model 
analytical model redundant arrays assumes raid architecture fault tolerance achieved maintaining error correcting codes referred parity disks array 
model predict service time heavily loaded disk presence absence disk failures 
model similar non redundant arrays expect take presence parity blocks account computing service time heavily loaded disk 
due lack space omit presentation model 
detailed description model :10.1.1.135.3771
validate model built event trace driven disk array simulator called 
digitized number traces traces run simulations wide range system parameters different number clients different number disks different round durations 
characteristics traces source code publicly available www cs utexas edu users software 
listed table 
combination parameters conducted multiple simulation runs computed confidence intervals expected number blocks accessed expected service time heavily loaded disk 
computed expected number blocks accessed expected service time heavily loaded disk model workload 
values predicted model confidence intervals obtained simulations 
figures plot values workload 
simulation results validate predictions analytical model large parameter space 
service time graphs average loaded disk heavily loaded disk lead observations shown service time average loaded disk decreases monotonically increasing block size 
increasing block size decreases number blocks accessed disk reducing disk seek rotational latency overheads 
service time heavily loaded disk hand decreases initially starts increasing increase block size see 
explain behavior introduce terminology 
letb nmax respectively denote expected number blocks accessed heavily loaded disk expected service time heavily loaded disk round denote expected service time average loaded disk 
imbalance service times heavily loaded disk average loaded disk referred load imbalance defined bmax bmax bmax portion service time spent disk seek rotational latency isb nmax ts tr bmax nmax tt 
overhead due seek rotational latency defined bmax nmax tt bmax nmax tt bmax assuming fixed server configuration workload characteristics increasing block size decreases number blocks accessed array 
smaller number blocks accessed smaller probability achieving equitable distribution load disks array sparsely loaded 
increasing block size yields table characteristics video traces mpeg encoding length bit rate file pattern frames mb bbp bb newscast bbp bb bbp bb increase load imbalance hand increasing block size causes seek rotational latency overhead decrease 
shows variations media block size service time heavily loaded disk governed relative values shown small block sizes latency overhead dominates service time decreases increase block size 
large block sizes load imbalance dominates latency overhead causes service time increase increase block size 
consequently service time heavily loaded disk decreases initially starts increasing increase block size 
analysis conclude minimizing service time average loaded disk requires server choose block size large possible 
contrast minimizing service time heavily loaded disk requires server choose block size minimizes combined effects maximize number clients supported best effort workloads server minimize service time average loaded disk continuous media workloads minimizing service time heavily loaded disk desirable 
optimal block size obtained environments differ significantly 
precise value optimal block size continuous media workload depends quality service requirements clients values various system parameters number clients playback rate number disks 
follows examine effect factors optimal block size 
parameter compute range block sizes yields service time minimum 
upper lower bounds set block sizes define optimal envelope workload :10.1.1.52.634
choosing block size contained optimal envelope values parameter server ensure performance optimal regardless workload 
factors affecting optimal block size effect quality service observe model yields distribution service time heavily loaded disk array 
determine optimal block size server choose particular percentile service time metric service time msec raid disks clients frames average loaded disk simulator average loaded disk model block size kb service time msec raid disks clients frames heavily loaded disk model heavily loaded disk simulator block size kb variation service time average loaded disk heavily loaded disk 
compute block size minimizes percentile 
instance server choose expected value service time approximately corresponds th percentile service time distribution indicated experiments determine block size 
scenario chance actual value service time round exceed expected value 
clients stringent quality service qos requirements tolerate rare discontinuities playback server choose higher percentiles service time provide desired performance guarantees 
example choosing th percentile service time distribution heavily loaded disk server ensure service time exceed estimated value rounds 
different percentiles service time yield different optimal block sizes see depending qos requirements clients server carefully choose appropriate percentile service time metric 
shows variation optimal block size optimal envelope different percentiles service time 
larger percentiles service time correspond stringent qos requirements 
provide stringent qos server minimize variation service times heavily loaded disk rounds 
achieved selecting block size reduces load imbalance 
load imbalance decreases decrease block size small block size yields better performance stringent qos requirements 
optimal block size optimal envelope decrease increase percentile service time 
observe service time heavily loaded disk increases slowly block sizes larger optimal block size 
lead believe choosing block size larger optimal yield near optimal performance reducing disk latency overheads 
demonstrates choosing largest possible block size contained optimal envelope particular qos degrades performance stringent qos 
instance choosing upper optimal envelope th percentile kb block size cause loss performance th percentile kb normalized metric raid disks clients load imbalance latency overhead block size kb variation load imbalance latency overhead 
contained optimal envelope th percentile 
argument shows ad hoc techniques select large block size selecting track size block size significantly affect server performance number clients supported 
achieve performance range qos requirements block size contained optimal envelope wide range percentiles chosen 
effect system parameters model study effect various system parameters optimal block size 
service time heavily loaded disk minimized combined effects minimized effect varying system parameter optimal block size analyzed studying effect intuitively understand effect parameter optimal block size assuming point intersection corresponds minima service time curve 
change value system parameter increases number blocks accessed array increases probability achieving equitable load distribution disks reduces reduction causes curve shift downward 
shifts point intersection minima service time curve right increasing optimal block size 
hand service time ms disks clients th percentile th percentile th percentile optimal block size kb change value parameter causes decrease number blocks disk load imbalance increases 
increase causes point intersection curves shift left reducing optimal block size 
illustrate consider effect variation number clients optimal block size 
fixed server configuration increase number clients increases number blocks accessed disk array increases probability achieving equitable load disks 
reduces load imbalance causing curve shift downwards 
contrast latency overhead curve governed physical characteristics disks shifts marginally 
shifts point intersection curves right see 
optimal media block size increases increase number clients accessing server see 
optimal envelope increases increase number clients similar reasons 
consider effect increase number disks optimal block size 
fixed number clients increasing number disks system decreases number blocks accessed disk 
decreases probability achieving equitable distribution load disks increases load imbalance increase causes curve shift upwards point intersection shift left 
optimal block size decreases increase number disks 
determined effect various system parameters number disks physical characteristics playback rate clients round duration optimal block size 
effect parameters optimal block size explained arguments similar 
due space limitations summary results table refer reader details :10.1.1.135.3771
similar trends observed conventional disk arrays :10.1.1.52.634
actual values stripe unit sizes obtained environments different 
optimal block size kb effect quality service disks clients upper envelope lower envelope optimal block size percentile service time table effect various parameters block size parameter effect increase parameter optimal block size number clients block size increases playback rate block size increases quality service qos block size decreases number disks block size decreases round duration block size increases disk zones block size increases inner zones outer zones parity group size block size increases selecting optimal block size having examined effect server configuration workload characteristics block size procedures selecting optimal block size 
procedure selecting optimal block size depends design goals multimedia server turn dictated operating environment 
illustrate multimedia servers offering commercial services video demand online news primary goal maximize revenue maximizing number clients supported server 
contrast multimedia servers service clients heterogeneous qos number clients supported depends exact workload mix proportion clients different requirements 
workload mix vary time goal servers provide best possible performance wide range workloads 
differing design goals may require system designer choose completely different media block sizes 
determine block size maximizes number clients supported assume parameters determining server configuration number disks physical characteristics round duration known design time 
assume data rate clients qos requirements known 
block size maximizes number clients supported normalized metric raid disks load imbalance clients latency overhead clients load imbalance clients latency overhead clients block size kb optimal block size kb raid disks upper optimal envelope lower optimal envelope optimal block size number clients effect number clients optimal block size 
computed step procedure number clients determine service time heavily loaded disk different block sizes select block size minimizes service time service time heavily loaded disk block size round duration increment repeat step 
block size obtained service time heavily loaded disk equals round duration maximizes number clients supported server 
general computing environments due heterogeneous nature workload workload characteristics may unknown design time number clients accessing server 
scenario block size yields performance wide range workloads chosen :10.1.1.52.634
parameter unknown design time range parameter vary estimated 
optimal block size optimal envelope combination parameters computed model 
denote sets containing optimal envelope particular combination parameters 
set block sizes yields service times minimum possible combinations parameters 
empty entire procedure repeated larger values non empty set block sizes obtained 
illustrates process computing feasible solution non empty set range client workloads 
determining degree striping addition determining stripe unit size defining striping policy requires determination degree striping 
multimedia server stripe media stream disks array subset disks 
policy referred wide striping policy referred narrow striping 
evaluate relative merits policies consider multimedia server employs wide striping interleave media streams disks array 
assume performance server measured terms maximum number clients sup block size kb infeasible solution upper envelope lower envelope number clients optimal block size curve block size kb feasible solution upper envelope lower envelope number clients optimal block size curve optimal block size set selecting block size yields near optimal performance regardless number clients accessing server 
shaded region denotes set block sizes yield service times minimum workloads 
port 
ideal scenario increase number disks system result linear increase number clients supported server 
number clients supported disk array consisting disks times number clients supported single disk 
shown number clients supported server increases sub linearly increase number disks 
attributed reasons real time requirements clients due realtime requirements clients number clients supported server constrained heavily loaded disk 
specifically number clients accessing server reaches maximum value service time heavily loaded disk equals round duration 
point service time disk average load smaller round duration 
resulting load imbalance causes disks array utilized 
reduction optimal block size explained section increase number disks system causes load imbalance increase 
increase number disks increases number clients supported server 
larger number clients accessing server larger load imbalance combined effect increasing number disks number clients accessing server governs actual value plots variation imbalance number disks system maximum number clients supported pairs 
illustrates increase due increase number disks dominates decrease due increase number clients causing actual imbalance increase 
small block size chosen compensate increased imbalance causing decrease optimal block size see 
small block size imposes larger latency overhead throughput array decreases causing reduction number clients supported 
minimize impact factors server partition disk array mutually exclusive groups disks stripe media stream partition 
partition acts independent disk array number disks partition small approach reduces load imbalance partition increases optimal block size partition reduces latency overhead 
partitioned arrays load imbalances occur clients distributed partitions 
partition size chosen simultaneously minimize impact load imbalance partitions load imbalance partition 
follows model determining load imbalance partitions describe procedure determining partition size maximizes number clients supported 
modeling imbalance partitions compute load imbalance partitions consider disk array consisting disks partitioned groups disks 
assume server employs placement policy assigns streams partitions partition equally accessed new request 
probability newly arriving client accesses partition scenario clients access server probability clients access th partition binomially distributed random variable representing number clients accessing th partition 
number clients accessing heavily loaded partition ymax max load partition independent partitions independent random variables 
distribution ymax computed fy fy cumulative probability distribution function random variable yj 
distribution yi ymax compute expected number requests average heavily loaded partitions denoted andb ymax respectively 
values define load imbalance partitions denoted ip ip number disks array partition size compute load imbalance partitions 
determining partition size fixed number disks increasing partition size increases load imbalance partition decreasing load imbalance ip partitions 
shown increasing partition size results reduction optimal block size increasing seek rotational latency overhead 
consequently server determine degree striping partition size balances tradeoffs 
models predicting load imbalance partitions section load imbalance partition section procedure choosing partition size maximizes number clients supported server follows procedure 
choose initial partition size 
model section compute maximum number clients supported single partition size number clients service time heavily loaded disk equals round duration 

assuming clients access array model section compute expected number clients ymax accessing heavily loaded partition 

increment repeat step 
ymax denotes maximum number clients supported array partition size 
increment partition size repeat steps thorough improvements number clients obtained starts decreasing increase 
yields partition size maximizes number clients supported 
number clients supported wide striping wide striping actual wide striping ideal number disks load imbalance imbalance partition load imbalance number disks maximum number clients optimal block size kb variation optimal blocks size optimal block size number disks maximum number clients loss number clients supported large disk arrays factors contributing loss 
procedure note limit number clients supported entire array reached heavily loaded partition reaches maximum capacity 
point number clients accessing partitions maximum capacity 
total number clients supported array increase linearly number partitions 
illustrates result executing iterative procedure array disks 
number clients supported array maximized array partitioned partitions disks optimal performance 
demonstrates variation optimal partition size increase number disks array 
illustrates improvement number clients supported due partitioning 
small disk arrays wide striping close ideal case additional gains due partitioning small 
large disk arrays partitioning yields approximately increase number clients supported compared wide striping 
demonstrates partitioning coupled static load balancing algorithms completely bridge gap number clients supported array ideal case number clients increases linearly array size obtained wide striping 
reduce loss number clients supported server replicate streams partitions employ dynamic load balancing schemes 
improvement performance yielded scheme expense higher storage space requirement complex storage space management algorithms 
detailed cost performance tradeoffs approach scope 
related research projects developed simulation analytical techniques optimizing performance striped disk arrays conventional workloads 
demonstrated section due real time nature continuous media accesses techniques directly applicable optimizing performance multimedia servers 
problem determining optimal stripe unit size non redundant arrays storing continuous media studied 
model predicts service time load imbalance imbalance partitions disks load imbalance partition size variation imbalance partitions increase partition size heavily loaded disk non redundant arrays henceforth referred model proposed 
model uses worst case assumptions number blocks accessed client round compute service time heavily loaded disk 
contrast model uses actual distributions number blocks accessed client round compute service time heavily loaded disk 
due worst case assumptions service time predicted model higher actual service time heavily loaded disk see 
model conservative illustrated optimal block size computed model cause server support smaller number clients 
derive graph computed optimal block size models determined number clients supported server model 
model determine number clients supported server addition model compute optimal block size number clients supported lower 
problem determining block size redundant arrays determining degree striping addressed 
problem determining degree striping received attention literature 
comparison wide narrow striping schemes 
focus effort evaluate effect replicating media streams array partitions response time 
problem determining partition size addressed 
problem assigning number clients supported number clients supported vs partition size disks number clients partition size service time ms optimal partition size raid disks clients block size kb optimal size partition size array size partitioning large disk arrays 
model model simulation media streams array partitions subject balance load partitions dealt 
efforts complement deal issue determining optimal partition size large disk arrays 
striping related issues complementary problem addressed investigated 
striping techniques minimize buffer requirements continuous media servers proposed 
simulation studies cost performance tradeoffs striped continuous media servers carried 
studies examine tradeoffs different placement schemes striped disk arrays 
striping continuous media servers employing declustered parity arrays investigated 
comparison striping raid raid continuous media servers 
demonstrates bit interleaved raid arrays cause significant degradation number clients supported compared block interleaved raid arrays 
performance evaluation striping techniques actual continuous media server raid arrays 
investigates application level striping disk driver level striping respect scalability performance 
effect fast forward operations performance striped continuous media servers investigated 
striping techniques tertiary storage systems analyzed 
comparison model 
number clients supported number clients supported improvement due number disks raid disks model model percentile service time concluding remarks described techniques determining stripe unit size degree striping file servers storing continuous media data 
determine optimal block size analytical model uses server configuration workload characteristics predict load heavily loaded disk redundant non redundant arrays 
model evaluate effect various parameters optimal block size 
demonstrated employing wide striping causes number clients supported increase sub linearly increase number disks 
maximize number clients supported large arrays propose scheme partitions arrays stripes media stream single disk partition 
load imbalances occur partitioned arrays model determine imbalance partitions described procedure determining partition size maximizes number clients supported array 
analytical models accurately characterize load disk array vbr streams 
previously known model vbr streams uses worst case assumptions yields sub optimal results 
furthermore models multimedia file servers compute number clients supported admission control 
results study design configure integrated multimedia file server built research laboratory 
acknowledgments goyal having suggested problem determining optimal degree striping 
mike dahlin goyal scott page comments earlier drafts 
berson ghandeharizadeh muntz ju 
staggered striping multimedia information systems 
proceedings acm sigmod 
chang zakhor 
cost analyses vbr video servers 
proceedings multimedia computing networking mmcn conference pages 
chen patterson :10.1.1.52.634
maximizing performance striped disk array 
proceedings acm sigarch conference computer architecture seattle wa pages may 
chen gibson katz patterson 
evaluation redundant arrays disks amdahl 
proceedings acm sig metrics pages may 
chen lee 
striping raid level disk array 
proceedings acm sig metrics conference measurement modeling computer systems may 
chen lee gibson katz patterson 
raid high performance reliable secondary storage 
acm computing surveys pages june 
cohen burkhard rangan 
pipelined disk arrays digital movie retrieval 
proceedings international conference multimedia computing systems pages 
dan sitaram 
online video placement policy bandwidth space ratio bsr 
proceedings acm sigmod san jose ca pages may 
dey kurose towsley 
providing vcr capabilities large scale video servers 
proceedings second acm international conference multimedia pages october 
flynn tetzlaff 
disk striping block replication algorithms video file servers 
proceedings international conference multimedia computing systems pages 
ghandeharizadeh kim 
striping video servers 
proceedings spie high density data recording retrieval technologies conference oct 
muntz watson 
analysis striping techniques robotic storage libraries 
proceedings th ieee symposium mass storage systems appeared poster supercomputing washington november 
hsieh lin liu du 
performance mass storage system video demand 
journal parallel distributed computing special issue multimedia processing technology appear 
lee katz 
analytic performance model disk arrays 
proceedings acm sigmetrics pages may 
rastogi silberschatz 
disk striping video server environments 
proceedings international conference multimedia computing systems pages 
papoulis 
probability random variables stochastic processes 
mcgraw hill 
patterson gibson katz 
case redundant array inexpensive disks raid 
acm sigmod pages june 
zhang kurose towsley 
supporting stored video reducing rate variability resource requirements optimal smoothing 
proceedings sigmetrics philadelphia pa may 
shenoy vin :10.1.1.135.3771
efficient striping techniques multimedia file servers 
technical report tr dept computer sciences univ texas austin 
vin rao goyal 
optimizing placement multimedia objects disk arrays 
proceedings second ieee international conference multimedia computing systems washington pages may 
wolf yu 
dancing disk load balancing optimization scheme video demand computer systems 
proceedings acm sigmetrics pages 
yu chen kandlur 
design analysis grouped sweeping scheme multimedia storage management 
proceedings third international workshop network operating system support digital audio video san diego pages november 
