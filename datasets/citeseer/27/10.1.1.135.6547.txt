video recorder stephan edouard oliver markus gross computer science department computer science department swiss federal institute technology eth university california davis zurich switzerland davis ca inf ethz ch cs ucdavis edu video recorder system capable recording processing playing dimensional video multiple points view 
record video streams synchronized digital video cameras store pre processed images disk 
line processing stage converts images time varying dimensional hierarchical point data structure stores video disk 
show trade video quality processing performance devise efficient compression coding schemes novel video representation 
typical sequence encoded megabit second frame rate frames second 
video player decodes renders videos hard disk real time providing interaction features known common video cassette variable speed forward reverse slow motion 
video playback enhanced novel video effects freeze rotate arbitrary scaling 
player builds point rendering techniques capable rendering high quality images real time 
demonstrate video recorder multiple real life video sequences 
conventional dimensional video mature technology professional environments home entertainment 
multitude analog digital video formats available today tailored demands requirements different user groups 
efficient coding schemes developed various target bit rates ranging second video conferencing applications megabit second broadcast quality tv 
technologies common capable capturing temporal changes scenes objects 
spatial variations altering viewpoint user possible playback 
video captures dynamics motion scene recording providing user possibility change viewpoint playback 
spatio temporal effects freeze rotate demonstrated numerous feature films 
effects realized employing large number cameras involve considerable amount manual editing www com 
typically input data processed line various ways create effects 
dimensional video system capture process data manual intervention shorter time lesser cost 
approach generalization spatio temporal video 
algorithms data structures acquisition construction time varying video 
video frame stored dimensional point data structure allows direct rendering 
video player supporting multi viewport rendering pre recorded dynamic scenes real time 
adapt standard video cassette recorder interaction features variable speed forward reverse slow motion introduce novel video effects freeze rotate arbitrary scaling 
architecture video recorder reflects main performance constraints video recorder acquisition input data playback video accomplished real time 
processing video acquired image data carried offline real time constraints 
acquisition multiple video streams reconstruct information pixel input images store representation hierarchical point data structure 
framework build specific reconstruction scheme currently shape silhouette method extract positional normal information 
reconstruction schemes voxel coloring stereo active vision systems 
general framework able build video including fore background 
prototype aims generating video objects humans scenes 
video player decodes compressed video progressively disk renders video object employing efficient point rendering schemes 
system architecture video recorder 
pipeline illustrates process frame 
main contributions summarized follows general framework video recording comprising acquisition processing rendering time varying dimensional scenes 
efficient processing pipeline reconstruct view independent video user controlled trade processing time video quality 
efficient algorithms encoding compressing resulting progressive video 
full featured video player built real time point rendering framework 
previous view dependent video representations systems emerging technology various approaches developed past 
kanade narayanan employ triangular texture mapped mesh representation :10.1.1.21.648
multi baseline stereo techniques extract depth maps fixed set camera positions requires significant line processing 
rendering time depth information cameras closest new virtual view construct mesh 
edge collapse algorithm mesh simplification 
system large number video cameras distributed football stadium capturing sports events different views 
replays constructed interpolated views space time 
mulligan approach utilizing stereo depth maps 
system tele immersive conference advanced line processing storage compression issues addressed 
pollard hayes utilize depth map representations render real scenes new viewpoints morphing live video streams 
pixel correspondences extracted video silhouette edge information 
representation suffer inconsistencies different views 
image visual hull system introduced advantage epipolar geometry build ldi representation :10.1.1.107.89
color information determined nearest neighbor interpolation 
depth color alignment guaranteed 
resulting ldi progressive view independent allows free scaling freezing 
due fact real time system free spatio temporal effects freeze continue accomplished 
polyhedral visual hull builds epipolar geometry scheme constructing triangular representation object :10.1.1.29.3044
enables viewpoint independent rendering limitations mesh methods persist potentially improper alignment geometry texture non trivial realization progressive streaming dynamically changing polygonal meshes 
approaches volumetric object representations 
create view independent digital video multiple video sequences 
dynamic information video fit voxel model combined pre generated static model scene 
schmitt introduce octree particle representation objects multilevel object modeling storage progressive transmission 
transform octree particles triangle mesh rendering address compression issues 
rusinkiewicz levoy streaming view dependent progressive transmission technique multi resolution rendering system bounding sphere hierarchy data structure splat rendering 
framework efficient streaming rendering large static data sets 
overview section describes architecture video recorder 
section presents recording preprocessing video input streams 
section describes different steps comprising video processing pipeline including hierarchical data representation video compression 
video player introduced section 
prototype acquisition environment section followed discussion experimental results section 
section concludes discusses ideas 
system architecture schematic overview video recorder depicted 
opposed traditional home video recorder comprising stages recording playback video recorder features additional stage processing 
clear recording playing need carried real time 
hard real time constraints line processing stage 
deering spending time line processing line decompression acceptable 
replay application broadcasting studio stronger time con straints replay needs available broadcast seconds live action 
ultimate goal video recorder process information time limits 
key elements video recorder stages summarized follows video recording 
section video images multiple cameras streamed disk real time 
images undistorted segmented fly 
video processing 
section key task processing stage reconstruction positional information foreground pixel input images 
optionally calculate surface normal point 
employ shape silhouette algorithm performance largely depends approximation silhouette contours user control accuracy approximation trade performance quality 
reconstructed points cameras merged hierarchical data structure prk tree variant octree 
tree encoded compressed stored disk 
video playing 
section decoded sequence displayed point rendering framework 
efficient splatting schemes rendering continuous surface video object 
video player incorporates features known video play pause fast forward fast reverse slow motion 
integrates novel video effects arbitrary scaling panning tilting freeze rotate 
video recording recording multiple synchronized live video streams requires preprocessing file streaming techniques run interactive rates 
need store ntsc resolution video sequences reduce data volume acquisition 
purpose consider lossy image video compression schemes jpeg mpeg want compromise video reconstruction introducing compression artifacts video sequence 
alternative carry image segmentation necessary separating foreground object background 
segmented images record area interest frame 
results storing rectangular subimage contains complete view object offset position dimensions area 
typical sequences reduce size video stream 
line entropy coding video sequences additionally results compression gain 
employed segmentation method built traditional chroma keying 
classify object front blue background foreground bb gb arbitrary constant bb gb blue green chroma channels video pixel respectively 
note need consider binary decision separating foreground background pixels 
need calculate value traditional matting 
problem arising approach color spill near object silhouettes reflection background color foreground object due increasing specularity near grazing angles 
leads poor image quality merging points multiple cameras discussed section 
object multi camera setup solve problem simply shrinking mask pixels reconstruction 
issue leads severe artifacts merging points multiple cameras tackled stage lenses short focal length results video frames heavy distortions 
millimeters lens example lead displacements pixels periphery image 
point merging framework relies assumption point correspondences frames different cameras 
assumption hold anymore video images distorted 
need image processing 
employ open computer vision library sf net projects pre computed displacement look table reasonably fast 
video processing video sequences recorded start video generation 
video framework builds point modeling rendering need connectivity information rendering 
input data video images provide meaningful neighborhood information adjacent pixels image plane necessarily adjacent surface sampled object 
associate point pixel video processing provides mapping color pixels input images corresponding points 
consequently avoid interpolation alignment artifacts introduced mesh representations 
processing stage points encoded compressed streamed disk 
reconstruction pixel video compute point 
need method projects pixel dimensional image space dimensional object space 
implementation utilize variant image visual hulls 
originally depth normal information calculated pixel desired view different views cameras 
approach carry reconstruction camera views 
ensures mapping depth information texture color information 
method computes volume known visual hull maximal volume consistent input silhouettes 
visual hull computed manner quantization aliasing artifacts imposed volumetric approaches removed 
computing image visual hulls determine depth interval rays originating camera center projection going pixel 
ray projected image planes cameras 
intersect projected ray silhouette contour edges project resulting interval back original ray 
performance bottleneck line line intersection image planes depends number silhouette contour edges 
devise novel multi scale contour extraction method leads user controllable trade performance resulting image quality 
note contour extraction computed original silhouette mask shrunken silhouette explained section 
contour extraction 
contour extraction algorithm pixels silhouette boundaries stores edge endpoints 
user controlled parameter determines accuracy contour threshold permitted direction changes approximation silhouette edge 
larger thresholds result coarser approximations edge smaller number contour edges 
different scales contour extraction 
exact contour points approximation points threshold approximation points threshold 
special property extraction method approximates silhouette curved boundaries edges required straight regions 
threshold describing person silhouette typically range results exact contour leading total number edges 
precise discussion performance quality trade see section 
prk trees generation points camera view leads view dependent video 
support arbitrary viewpoints requires view independent representation 
merge information prk tree hierarchical point data structure 
data structure variant point region quadtree pr quadtree suited point representations 
pr quadtree forms regular decomposition planar regions associates data points quadrants 
leaf nodes empty contain single point coordinate 
straightforward extension points volumetric regions pr octree 
main disadvantage pr quadtree octree maximum decomposition level largely depends distance points spatial region 
points close decomposition deep 
avoided employing bucketing strategies viewing leaf nodes buckets capacity nodes decomposed bucket contains points 
approach controlling number decompositions level consists subdividing node integer factor spatial direction 
case results child nodes level 
representation forms pr tree iden tical pr octree 
varying balance depth tree desired number points 
depicts simple example pr tree decomposition 
example level pr tree 
node decomposed child nodes 
distribution points plane level zero 
decomposition pr tree level 
table lists minimum maximum average depths prk tree real data 
case choice 
maximum depth large 
hand tree wide nodes level 
note maximum depth tree fixed depends sampling density points 
table empirical depths prk tree points 
pr tree provides balance number leaf nodes average depth 
tree depth minimum maximum average principle leaf node prk tree stores coordinate color normal information single point 
internal nodes prk tree store averaged data child nodes number children pointers corresponding child objects 
prk tree represents regular partition volume 
total volume cube side length side length partition depth prk tree equals 
dimensions configuration acquisition reconstruction environment compute limit depth dimensions partitions fall initial camera precision 
prune tree nodes located depth averaged representation contained inner nodes leaf nodes pruning strategy similar bucketing strategy 
distance object camera camera resolution conclude area approximately mm projects camera pixel 
acquisition environment see section size typical configuration encoding compression elucidated previous section processing frame initial image data leads point cloud organized prk tree 
trees represent reconstructed video frames need stored space efficient progressive representation 
order achieve progressive encoding traverse tree breadth manner 
encode upper level nodes represent averaged representation corresponding subtree 
suggested succinct storage representation achieved considering separately different data types contains 
distinguish connectivity prk tree needs encoded loss position points color normal information number allocated bits traded visual quality lossy encoding acceptable 
note coder design need trade storage requirements coding complexity complexity decoding step needs feasible real time 
focus coding strategies provide reasonable data reduction low decoding complexity 
paragraphs describe encoding separate data stream connectivity 
field tree representation lot research limited binary trees 
benoit classify trees higher degrees categories ordinal trees children node simply ordered cardinal trees node positions may child 
terminology prk tree belongs family cardinal trees 
jacobson developed simple asymptotically optimal scheme coding connectivity ordinal trees 
benoit extended representation ordinal cardinal trees additionally support basic navigation constant time 
information theoretic lower bound connectivity encoding prk tree containing nodes children node large respect stated bits lg denotes logarithm base 
algorithm requires lg bits 
current application exploit additional features elaborated tree coding strategies 
bits node encoding raw connectivity prk tree 
node write child node terminate sequence 
follow jacobson algorithm 
position approximation 
order achieve complete cardinal tree encoding need encode additionally indices child nodes 
achieved lg bits child node 
better compression ratio achieved adaptive encoding index ci node ni case number bits spent ci lg lg ci 
note variants representations cardinal trees bounded lg bits 
information pi centre volume described node ni approximation correct position point primitive represented node position refinement 
position approximation deduce just considering connectivity cardinal tree precise 
position refined encoding error pi pi pi laplace quantizer 
achieved results level quantizer 
trade offs part encoding scheme discussed section shown 
leaf flag 
introduce additional bit node indicates current node leaf node 
information redundant helps simplify progressive decoding process 
refer section explanations 
comparison mesh coding 
effort field geometry compression concentrated compression triangular meshes :10.1.1.153.3865
state art multi resolution geometry coders triangular meshes achieve compression performance bits triangle connectivity bits vertex coordinates depending model initial quantization 
tree geometry coding scheme uses total bits node magnitude improved entropy coding 
tree redundant data structure mesh 
object number nodes tree representation larger number vertices mesh representation 
practice number nodes approximately equal times number vertices 
cases additional bits need spent normal color information 
extensive analysis object compression respect geometry color normal information done deering 
color 
hierarchical data representation easily exploited color coding 
case high frequency textures color values neighboring points completely different 
decided straightforward quantization scheme color coding point exploit eventual redundancies prk tree representation 
colors encoded yuv format achieved visually appealing results bits bits respectively 
decoding need transform color rgb space rendering purposes 
storing color information rgb format simplify decoding process compression ratio respectively reconstruction quality decrease 
twice bits component components respectively follow recommendation established format traditional video coding 
normals 
normal vectors encoded quantized spherical coordinates 
normalize vectors encoding allocate bits angles 
general bytes normal quantization recommended quality current normal computation exploiting larger bit budget byte node 
table memory requirements pr node 
name data type position float color char normal float unsigned char children raw bits compressed bits lg total table summarizes storage requirements different data types node compares initial data size 
lossless encoding connectivity prk tree scheme coming close information theoretic bound 
indicated values remaining data types provided visually appealing results 
inter frame coherence 
consecutive frames video sequence contain lot redundant information regions object remaining static changes efficiently encoded temporal prediction motion compensation algorithms 
techniques commonly video compression 
efficient computation scene flows non trivial 
previous efforts direction predict current prototype configuration seconds computation time scene flow frame 
exploiting interframe coherence analysis displacements points color normal encoding exploiting hierarchical data structure certainly improve compression performance coding scheme 
entropy coding 
encoding frame get separate bit streams describing connectivity position approximation position refinement leaf flags colors normals 
bit streams compressed entropy coder 
current implementation range coder provided schindler www com 
range coding similar arithmetic coding twice fast negligible decrease compression performance 
main difference lies renormalization step bitwise classical arithmetic coding range coding 
file format 
currently save different bit streams separate files 
frame bit stream store compressed bit stream preceded frame identifier compressed bit stream length bytes 
format allows navigation sequence impose restrictions order frames decoded 
video playing video player final stage video recorder framework 
decodes video sequences disk renders individual points employing point splatting technique 
progressive rendering implemented splatting individual points leaf nodes averaged points intermediate tree nodes 
frames quality levels controlled user interaction desired frame rate 
decoding playback video player requests frame quality level maximum depth returned tree data structure 
main parts decoding process described remainder section 
file positioning 
step decoder needs position input file correct frame 
achieved reading frame header information retrieving current frame number fi length bit stream li fi different decoder advances li bytes reads header information frame long requested frame reached 
pass decoder builds look table containing fi li tuples 
table allows backward navigation simplifies forward navigation subsequent passes 
progressive symbol load 
input file right position part bit stream read entropy decoded buffer number bytes initially read depend quality level bit stream length li actual decoding process decoder symbols retrieved contain symbols reach requested quality level set symbols progressively read file prk tree traversed breadth order encoding retrieve information top nodes decoding part bit stream 
point primitive decoding 
decoder need return complete tree data structure decoded point primitives 
parent child relations initial data structure temporarily stored 
fact currently decoded node ni needs know parent node setting bounds volume represents 
volume determined parent volume structure cardinal tree ni index ci information necessary correctly decoding position point primitive contained playback quality level need decode set significant nodes quality level node ni located depth tree significant quality level ni leaf node connectivity encoding allows determine ni leaf node decoding level additional leaf flag decision level results decoding connectivity leaf flag bit streams determine ni significant respect case proceed complete decoding ni write position normal color information vertex array 
cartesian coordinates normal vectors retrieved precomputed look table yuv color components additionally need transformed rgb space 
point rendering employ different splatting schemes point rendering 
scheme achieve pure rendering frame rates frames second 
second scheme provides higher quality rendering ensures interactive frame rates frames second 
computed surface normals optional point 
similar splatting scheme uses opengl gl points splatting primitive 
decoding video directly transfer corresponding points disk opengl vertex array 
vertex array rendered opengl pipeline 
shape splatting primitive important resulting visual quality rendered object 
gl points restricted square non anti aliased points circular primitives anti aliased points 
unfortunately splats fat pixels screen 
splats adjust shape object silhouette optimal way 
limitation opengl point primitive 
graphics apis microsoft directx overcome restriction 
directx provides point sprite primitive projected shape depends direction normal point arbitrary directions 
edges arising fixed splat shapes avoided 
note gl points enables easily merge video conventional geometry objects environments depth compositing 
second scheme utilizes ewa surface splatting approach zwicker screen space formulation elliptical weighted average ewa filter adapted irregular point samples 
ewa surface splatting provides high quality images renders approximately anti aliased points second 
ren introduced object space ewa surface splatting implements ewa filter pass rendering algorithm programmable vertex pixel shader architectures 
hardware accelerated approach achieves rendering performance points second suited integration video framework 
interaction described section randomly access decode individual frames video 
furthermore frame retrieved different quality levels reaching coarse approximation detailed representation 
normal playback read frame frame control quality level player adheres frame rate original video sequence 
quality level determined decoder performance rendering complexity 
sequence paused decoder completely decode current frame highest quality level 
fast forward implemented decoding coarse representation larger frame increments combination 
fast reverse realized corresponding way just need decrement requested frame number incrementing frames 
slow motion simply realized slowed playback decoding higher quality levels player supports real time 
high quality slow motion requires additional point shape interpolation consecutive frames high speed cameras 
video player implements virtual trackball arbitrary navigation scaling possible follows popular interaction metaphors graphics 
special effects freeze rotate easily achieved playing sequence pausing rotating view point continuing playback 
case system editing video video sequence virtual camera path frame increments configured script file 
prototype system built prototype acquisition reconstruction environment digital cameras point grey research sony cameras allowing generate video approximately degrees 
camera types equipped ccd imaging sensors 
cs mount lenses focal lengths mm mm 
calibrating cameras employed camera calibration toolbox www vision caltech edu doc 
cameras connected ghz athlon linux pc system video recorded 
camera acquisition software linux project sf net projects linux digital camera control library linux sf net projects 
camera types capable capturing unsynchronized images frames second external synchronization decreases capture rate frames second 
cameras deliver yuv images directly converted rgb 
deliver bit bayer tiled images rgb color interpolation needed 
purpose bilinear interpolation edge sensing algorithm 
note carry chroma keying rgb color space 
stored image sequences processed dual processor machine amd cpus video generated 
video renderer runs ghz pentium machine equipped nvidia geforce ti graphics accelerator 
physical setup acquisition environment depicted 
physical setup prototype system 
experimental results show example images video sequences recorded prototype system 
note currently build videos cameras contour approximation threshold 
unfortunately due physical dimensions prototype system reconstruction frustum small allow large movements 
discussed section encode pr trees depth position errors depth 
frame leads approximately tree nodes significant point primitives quality level 
visual quality 
small number contours lead artifacts regions occluded images especially visible legs arms 
furthermore normals see flat shaded images reconstruction method precise 
normal fairing algorithm optimize surface normals :10.1.1.17.7342
turned approach provide better normals quality underlying surface representation see depth map 
shows comparative frames rendered simple splatting scheme opengl point primitives ewa surface splatting 
note anti aliasing provided surface splatting especially visible logo shirt 
shows identical frames frame rendered refinement point primitives position frame uses position approximation resulting prk tree structure 
frame position errors noticeable contours video object especially disturbing playback 
results show accurate encoding point primitives position certain tree depth essential visually appealing images 
timings 
timings multi threaded implementation video processing dual processor machine follows contour extraction milliseconds video frame reconstruction seconds video frame encoding second video frame 
appears reconstruction expensive part 
accurate contours see performance reconstruction improved factor 
compression 
bit rates different data streams typical sequences listed table 
note prototype implementation encode color bits node bytes bits node position approximation required lg bits pr trees 
furthermore point reader attention fact final entropy coding step reduces total data volume 
framework allows encode video sequences humans total bit rate megabit second sequence running frames second normal playback 
represents average bits node pr tree leads total size typically megabytes sequence seconds 
compared memory requirements complete data structure see table achieve compression ratio 
recording sequence cameras frames second lead approximately megabit second consumer video quality mpeg megabit second broadcast quality tv mpeg 
separate mpeg sequences include temporal correlation frames different cameras spatial correlation video format 
table bit rates megabit second video streams recorded frames second 
type information entropy coding mbps entropy coding mbps connectivity position approximation position refinement leaf flag color normals total video recorder powerful framework generating dimensional video 
video concept founded point primitives stored hierarchical data structure 
video player decodes displays representation disk real time provides interaction features fast forward fast reverse arbitrary scaling rotating 
limitations include quality underlying surface representation precision reconstructed normals 
plan optimize quality employing reconstruction methods cameras 
furthermore photometric calibration cameras needed point merging framework improve texture quality 
expect better compression performance exploit ing inter frame coherence devising adaptive bit allocation schemes lossy parts video encoding 
include integration hardware accelerated ewa surface splatting decoding video player 
stefan sli kern christoph implementing parts system martin producing video mark pauly matthias zwicker point rendering engine proofreading 
members blue team fruitful discussions 
funded eth zurich 
bajaj zhuang 
progressive compression transmission arbitrary triangular meshes proceedings visualization pages 
ieee computer society press 
benoit demaine munro raman 
representing trees higher degree proceedings th international workshop algorithms data structures lecture notes computer science pages 
springer verlag 
cohen levin 
progressive compression arbitrary triangular meshes proceedings visualization pages 
ieee computer society press 
curless seitz 
photography course notes 
acm siggraph 
deering 
geometry compression proceedings siggraph pages 
acm siggraph addison wesley 
faugeras 
dimensional computer vision geometric viewpoint 
mit press 
stra er 
real time compression triangle mesh connectivity proceedings siggraph pages 
acm siggraph addison wesley 

step camera calibration procedure implicit image correction proceedings international conference computer vision pattern recognition 
ieee computer society press 
hoppe 
progressive meshes proceedings sig graph pages 
acm siggraph addison wesley 
jacobson 
space efficient static trees graphs th annual symposium foundations computer science pages 
ieee 
kanade narayanan :10.1.1.21.648
virtualized reality constructing virtual worlds real scenes ieee multi media vol jan mar pages 

visual hull concept silhouette image understanding ieee transactions pattern analysis machine intelligence 
martin 
range encoding algorithm removing redundancy digitised message video data recoding conference southampton 
mcmillan :10.1.1.29.3044
polyhedral visual hulls real time rendering proceedings twelfth eurographics workshop rendering pages 
raskar gortler mcmillan 
image visual hulls proceedings siggraph pages 
acm press acm sig graph new york 
jain 
immersive video proceedings virtual reality annual international symposium pages 
ieee computer society press 
mulligan 
view independent scene acquisition tele presence proceedings international symposium augmented reality pages 
narayanan kanade 
constructing virtual worlds dense stereo proceedings international conference computer vision iccv pages 
rossignac 
squeeze fast progressive decompression triangle meshes proceedings computer graphics international pages 
ieee computer society press 
pauly gross :10.1.1.17.7342
spectral processing point sampled geometry proceedings siggraph pages 
acm press acm siggraph 
pollard hayes 
view synthesis edge transfer application generation immersive video objects proceedings acm symposium virtual reality software technology pages 
acm press acm sig graph new york 
ren pfister zwicker 
object space ewa surface splatting hardware accelerated approach high quality point rendering proceedings eurographics computer graphics forum conference issue 
appear 
rissanen langdon jr arithmetic coding ibm journal research development 
rossignac 
connectivity compression triangle meshes ieee transactions visualization computer graphics january march 
issn 
rusinkiewicz levoy 
multiresolution point rendering system large meshes proceedings siggraph pages 
acm press acm sig graph new york 
rusinkiewicz levoy 
streaming viewer networked visualization large dense models proceedings symposium interactive graphics pages 
acm 
samet 
design analysis spatial data structures 
addison wesley reading ma 
shade gortler szeliski :10.1.1.107.89
layered depth images proceedings siggraph pages 
acm siggraph addison wesley 
smith blinn 
blue screen matting proceedings siggraph pages 
acm sig graph addison wesley 

image spatio temporal modeling view interpolation dynamic events 
phd thesis carnegie mellon university pittsburgh pa 

comprehensive electronic compositing system 
patent july 
schmitt 
progressive multilevel meshes octree particles proceedings nd international conference imaging modeling pages 
ieee computer society press 
zhang 
flexible camera calibration viewing plane unknown orientations proceedings th international conference computer vision pages 
ieee computer society press 
zwicker pfister van baar gross 
surface splatting proceedings siggraph pages 
acm press acm siggraph new york 
images video sequences 
show surface views video 
reconstructed normals flat shading view colors 
corresponding depth map 
different splatting schemes 
shows image rendered simple splatting scheme 
image rendered surface splatting 
necessity accurate position encoding 
position refinement 
quality performance trade 
images rendered simple splatting scheme 
shows image reconstructed contour extraction threshold 
shows image reconstructed threshold 
