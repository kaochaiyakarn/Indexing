computer graphics volume number august particle animation rendering data parallel computation karl sims hollywood ca thinking machines street cambridge ma techniques animate ren der particle systems connection machine cm data parallel supercomputer 
particle behavior language provides animator levels control kinematic motions physically simulations 
parallel particle rendering system allows particles different shapes sizes colors transparencies rendered anti hidden surfaces motion blur 
virtual pro cessor assigned primitive data element particle rendering process particle fragment pixel 
tools model dynamic phenomena wind snow water fire 
computers practical tool visual ex pression modeling animation systems need allow high level instructions requiring object motion specified individually 
commands wind drop ob ject grow tree character walk 
particle systems provide creation complex struc ture motion relatively brief description 
produce dynamic fuzzy effects achieve traditional objects surfaces animated non procedural motion 
previously model fire gene sis effect star trek ii trees grass shown andre breaking waves fireworks effects systeme partic 
particle system part fluid simulation jupiter surface 
flocks schools breaking ice considered par systems particle complex object 
connection machine cm data parallel computer consisting processors bytes memory processor floating point hardware 
hypercube connection architecture special routing hardware allows general communication permission copy fee part material granted provided copies distributed direct commercial advantage acm copyright notice title publication date appear notice copying permission association computing machinery 
copy republish requires fee specific permission 
processors 
virtual processor mechanism simulate processors physical number virtual machine size vary depending number data elements application 
example particles created cm physical proces sors virtual processor set virtual processors processor contain particles virtual processor 
sets virtual processors configured dimensional grids 
example virtual processor set represent particles virtual processor set represent pixels image 
programming connection machine system similar single processor thousands processors execute program time different data 
parallel language called 
parallel extension lisp allows power combination abstraction lisp consists parallel instructions operate parallel variables 
parallel nature particle systems suited highly parallel computation 
parallel language convenient building particle tion language conversely system example basic data parallel techniques 
instructions rules behavior described addressing single particle applied particles subset parallel 
result instruction usually differ ent particle uses state particle determine effect 
main sections describe language containing basic tools animating particles system rendering particles specific appli cations demonstrate animation rendering produce natural phenomena effects 
particle animation particle behavior language applications particle animation require special software general set tools create wide variety effects 
lisp provide environment allows existing particle opera tions easily combined new higher level operations 
physical simulations create motion complex realistic looking motion achieved mov ing objects spline curves keyframes 
objects animated dynamically correct objects true physical simulation look correct 
desired motion specifying forces ac acm siggraph dallas august difficult 
just reality hard toss coin sure lands heads legged robot run falling di cult predict motion resulting applied forces 
particle animation system attempts supply sev eral levels operations spectrum detailed kinematic control physically sim lation 
goal strictly obey physics reality provide range tools allow variety effects easily created appear correct 
equations motion particle position velocity externally exerted acceleration vo adt po euler method integration allows state par updated simple approximation equations small discrete time interval aat methods integration known computationally efficient euler chosen ity usually sufficient 
particle created allocating new cm virtual processor contain formation particle 
particles newly created created existing particles copying state 
particles cam killed removed processors processors available new particles 
virtual processor cm representing particle contains data structure elements particle state variables 
particle head position tail position 
head position usual ly animated tail position follows motion blurring 
parti cle structure contains variables velocity radius color opacity 
animation operations particles initialize alter position velocity particles 
purely physical simulation values initialized time interval velocity altered external accelerations gravity position updated shown 
controlled motion position may set directly regardless previous position velocity 
useful set position relative previous position alter velocity ways applying simple translational acceleration 
operations move particles divided categories set position set velocity alter position apply velocity alter velocity apply acceleration 
examples sections 
position operations positions particles set ways randomly rectangular solid 
randomly sphere 
randomly surface sphere 
particle vertex polygonal object 
randomly surface polygonal object 
transformation local coordinates 
operations usually performed particle life transformation operation usually performed frame 
velocity initialization operations velocity usually initialized start particle life jerky motion desired 
velocity particles initialized ways position initialized 
commonly velocity initialization operations constant direction 
randomly rectangular solid 
randomly sphere 
randomly surface sphere 
applied velocity operations applied velocity alters position parameter particle depending previous position affects apparent velocity change velocity parame ter particle 
allows velocity operations accel eration operations act independently particles interfering help enable combination dynamic simulation motion 
example par fall rig due gravity moved randomly side side applied velocity operations 
operations alter position apply velocity translate constant 
rotate constant 
scale constant 
translate randomly 
vortex 
vortex vortex operation worth description 
pa rameters rotation center magnitude 
positions particles rotated axis center vortex amount dependent distance center 
higher tightness causes angle rotation fade quickly radial direction magnitude distance center rotation tightness usually 
options vortex operation useful 
range influence cause decrease zero certain distance translation vortex axis dependent create tornado motion 
operation means creates physical simula tion vortex easier create specific dy namic fluid motions vortices simulate fluid flow complex cal equations 
tradeoff animator control physically accurate simulations 
vortex operation example sacrificing physical correct ness favor animator control allowing realistic looking motions achieved 
acceleration operations acceleration operations alter particle velocity 
forces converted accelerations ations increment scale rotate reflect velocities particles 
operations usually parame ters particle position velocity spiral axis mass find acceleration adjust velocity 
produce wide variety interesting dynamically correct looking motions 
examples acceleration op erations constant acceleration gravity 
random acceleration 
accelerate point orbit 
accelerate line 
accelerate local coordinates 
damp spiral 
bounce plane 
bounce sphere 
basic translational accelerations velocity simply incremented acceleration aat 
acceleration constant random may directed point line magnitude acceleration may depend distance particle position point line 
example acceleration mo pl create inverse square law orbits fixed center orbit mass constant particle position 
equation form newton 
example acceleration change rapidly near small causes errors particles orbits 
damping simple approximation damping simulate ef air friction particles 
deceleration propor tional current velocity magnitude applied particle direction current velocity 
damp ing parameter typically ranges 
damping deceleration clamped reduce velocity threshold 
mar dat min threshold 
physically accurate model damping im plemented damping forces non linearly related necessarily proportional mass cause acceleration de direction current velocity performed particles tl value smoothly accelerate minimum speed 
spiral spiral motions contribute different effects swirling fire 
particle spi spiral axis initialized set methods initializing velocities shown 
spiral operation causes velocity vector rotated computer graphics volume number august axis spiral 
spiral axis 
spiral speed ity rotated angle sz time interval 
see la 
particle move variety helix shaped paths depending relative angle velocity spiral axis lb 
perpendicular particle remain circle 
parallel effect 
notice particles move general direction plus minus spiral axes 
bounce particles bounced primitive shapes planes spheres 
simple bounce energy loss performed just reflecting velocity particles passed boundary surface mal method allows particles penetrate surface iteration effective position bounce usually slightly surface iter ations calculated frame 
complete bouncing method considers friction resilience particle sets new position bounce occured exactly surface 
operations performed bounce opera tions positions updated new velocities 
particles tested bounced surfaces penetrated 
particle penetrated sur face bounced flag set velocity broken normal tangential components vn vt vn 
see friction parameter reduces tial component normal component reflected scaled resilience parameter range ev desirable prevent particles getting entirely stopped friction necessary provide velocity mag value friction effect 
particles bead tail positions ph pt motion blur 
flipped surface account bounce 
point surface pl 
nin siggraph dallas august ii position bounce 
pt 
tail flipped particle renderer motion blur particles kin ks motion 
tall pulled point contact surface doesn hang surface 
bouncing spheres performed way bouncing planes calculated closest point surface sphere particle 
center sphere radius rn ph ci accurate physical models bouncing proba bly implemented method sufficient creating reasonable bouncing effects 
particle animation summary particles state variables addition position velocity animation operations 
example type age mass spiral axis color opacity size 
spare slots exist information initial velocity color fade age die 
valuable component particle animation system particle preview capability 
particles animated shown viewed quick vector display near real time speeds 
fast turnaround time particle motion experimentation helpful 
outline animation loop creating particle mo tion follows create particles 
initialize particles 
frame set tails previous heads 
simulation time increment select subset particles 
perform operations 
update positions velocities 
select subset particles 
perform bounce operations 
adjust tails motion blur shutter speed 
render preview 
particle rendering section describes data parallel method render large numbers anti aliased motion blurred particles variable sizes colors transparencies 
particle head tail parameters passed particle animation system renderer head tail particle radius color opacity see 
motion blur accomplished linearly blurring particle independently 
animation system sets head tail appropriately desired shutter speed 
renderer produces blurred particle parameters interpolated head tail 
alternatively ability radius color opacity vary head tail particles allow variety particle shape approximate sparks water 
see 
particles occupy area opacity falls center extremes 
func tion determines falloff opacity vary perform focus blurry effects spatial anti aliasing 
linear gaussian shapes usually 
rendering system transforms particles head tall positions radii screen coordinates 
particles fragments stages particle fragment pixel affect 
fragments containing color opacity depth sorted depth final pixel colors calculated 
method similarities simple buffer polygon rendering algorithm coverage masks perform texturing lighting 
overview rendering process update particles animation 
transform screen coordinates 
horizontal patch determine effective patch height 
dice particles spans 
vertical patch determine effective patch width 
dice spans fragments 
sort fragments pixel depth 
perform hidden surface calculation 
send colors pixels 
add background color 
output pixels 
dicing fragments particle animation operations described re quire single data type particle exist virtual processor set cm 
rendering system generates multiple data types proceeds 
parti cle spans particle fragments pixels created virtual processor sets data element virtual processor 
particle spa ii particle dicing 
fra ments particle processor determines number scan lines particle occupy particle spans 
multiple span processors allocated particle processor particle information sent 
span processor similarly determines num ber fragments occupy allocates fragment processors sends particle information 
particles fragments total fragments fit connection machine memory 
compensate image rendered subsections patches 
size patch adjusted fragments patch fit memory 
patch height chosen allocating span proces sors number span processors exceed limit 
likewise horizontal section image patch widths chosen number fragment processors exceed limit patch 
desirable fill fragment processors possible limit empty processors sit idle compute 
processor usage patch size total number data elements spans fragments patch divided maximum number permitted 
false position method search patch widths heights result efficient span fragment processors 
fragment processors set patch size color opacity depth fragment cal finding closest point fragment line head tail particle 
particle radii depths colors opacities interpolated head tail give values point 
final frag ment opacity set function interpolated opacity interpolated radius distance center particle 
spatial anti aliasing particles performed opacity zero near edges particle pixel clamped pixel opacity lowered compensate prevent aliasing due sub pixel sized particles 
coverage masks multiple samples pixel polygons edges touch continuous surface edges particles usually line 
sorting fragments calculating transparency color opacity depth calculated fragments image patch rendered fragments computer graphics volume number august reordered cm fragments cov ering pixel adjacent 
sorted pixel groups depth 
parallel operator operates values ar rays processors 
allows processor receive sum product values preceding pro cessors 
segmented scan performed groups processors prevent results spreading group 
local products efficiently calculated groups processors variable sizes 
group scan multiply applied fragment transparencies front back deter mine total pixel contribution fragment 
scan add applied color component opacity scaled fragment pixel contribution 
processor pixel group receives final pixel color opacity 
pixel colors sent processors image patch virtual processor set 
virtual processor representing pixel image patch rendered receives final color opacity fragments cov 
background color added necessary patch output frame buffer file 
mixing data types addition system allows particles mixed data types polygons 
frag ments particles polygons depth sorted gether rendered simultaneously 
num ber layers particles polygonal objects move front correct hidden surfaces 
preferable rendering different data types separately compositing images wards 
results animated film particle dreams created entirely animation rendering tools described 
contains orbiting fire explosion snow storm crashing head waterfall 
tools commercial production environment create burning logos galaxies effects 
snow wind snow storm created white snowflake particles spirals vortices 
created dropped field view iteration 
initial velocity sp axis straight random variation bounced plane ground zero bounce high friction hit stuck 

gravity air friction considered air friction damping gravity canceled steady critical velocity 
wind moving pairs vortices field view 
procedure built vortex operations moved start positions 
tested desired swirling effects achieved 
splat shapes created duplicating par particles hit vertical plane 
siggraph dallas august falling water water 
waterfall simulated applying gravity blue par bouncing obstacles planes spheres 
water particles created iter ation randomly area top waterfall 
particles flowed edge bottom waterfall recycled back top waterfall 
particles animation 
achieved placing spherical rocks dif ferent sizes path flow 
bounced rocks friction resilience var ied randomly range 
bounce detected particles turned blue white faded slowly back blue fell rock 
vari blue white particles gave waterfall quality actual lighting calculations 
motion blur exaggerated sequence shut ter speed slightly entire frame duration give flow smoother look 
fire fire simulation complex effect created tools 
extensions utilities described allow arbitrary polygonal objects burned 
large number particles created initial positions located surface object 
done triangulating polygons object cre ating particles randomly triangle 
give distribution number created triangle proportional triangle area 
particles initial velocities spiral axes set directions object surface normal surface tangent vec tor cause fire particles hug surface somewhat 
second groupings particles created parameters color motion set nearly groups 
particles grouped small regions similar colors different regions surface emit different colored flames regions hotter 
particles grouped 
particle flicker group similar spiral axes initial velocity start time life duration slight variation flicker coherency perceived unit particle independently random 
burning letters vortex field 
vortex 
self breathing head 
inverted tornado 
computer graphics volume number august waterfall 
left orbiting fire 
explosion 

dallas august fire particles leave surface spiral upward changing color 
fade die recreated initial position surface start cycle 
spiral axis slowly rotates prevent du motion slightly different fire create pseudo random rhythm natural fire 
general tools animating rendering particle sys tems implemented permit kinematic dy namic control particles 
create effects probably difficult achieve traditional techniques potential additions set particle system utilities 
area include operations cause particles influence body types sim galaxy simulations natural fluid motion collision avoidance 
current imple mentation particles ignore follow global rules resulting interpenetration 
efficient collision detection surfaces beneficial 
currently particle tested surface element 
ability create procedural motion complex objects particles including rigid body dynamic simulations desirable 
interesting compare parallel speed particle rendering serial computer 
done unique parallel software implemen tation 
rendering speed approximately proportional number processors inversely proportional number sizes particles 
frame times commonly vary seconds minutes 
data parallel computers potential growth speed processors number proces sors powerful available 
techniques permit computer animation complex structure motion automatically data parallelism may soon frequently 
acknowledgments lew tucker continuing support folks whitney demos productions unique learning experience 
thinking machines ration building connection machines computers ing generous 
jim salem brewster kahle gary peter schroeder discussions en 
jeff cliff support 
chung layout figures 
john whitney jr jerry en vironment put 
armstrong green dynamics rigid bodies purposes animation pro ceedings graphics interface pp 

whitted managing ge complexity enhanced procedural meth ods computer graphics vol 
august 
burr barzel modeling system dy namic constraints computer graphics vol 

carpenter buffer anti aliased hidden surface method computer graphics vol 

fournier reeves simple model ocean waves computer graphics vol 
pp 

girard computational model ing computer animation legged figures computer graphics vol 
pp 
hahn realistic animation rigid bodies computer graphics vol 

connection machine mit press 
hillis connection machine scientific american vol 
june 
dayton manual thinking machines cor adventures andre film august 
miller motion snakes worms com puter graphics vol 

oppenheimer real time design animation fractal plants trees 
computer graphics vol 
pp 
paramount star trek ii kahn genesis demo siggraph video review acm siggraph new york 
modeling waves surf com puter graphics vol 
pp 

platt burr constraint methods flexible models computer graphics vol 

press flannery vetterling numerical recipes cambridge university press 
lindenmayer hanan developmental models plants com puter imagery purposes computer graphics vol 
pp 

reeves particle systems technique modeling class fuzzy objects acm transactions graphics vol 
april reprinted computer graphics pp 

reeves blau approximate proba algorithms shading rendering structured particle systems 
computer graphics vol 
pp 
jaeger puech plant models faithful botanical structure development computer graphics vol 
pp 
reynolds craig flocks herds schools distributed behavioral model computer graphics vol 
july pp 
simon scientific applications connection machine world scientific publishing 
sims particle dreams siggraph video review acm siggraph new york 
smith plants fractals formal lan guages computer graphics vol 
pp 
july 
studio base alain siggraph video review acm siggraph new york 
symbolics ice sig graph video review acm siggraph new york 
terzopoulos fleischer modeling inelastic de formation plasticity fracture corn puter graphics vol 

thinking machines connection machine model cm technical summary technical report may 
weil bell labs boom boom boom sig graph video review acm siggraph new york 
wilhelms barsky dynamic analysis animation articulated bodies humans robots proceedings graphics interface pp 

wilhelms moore collision detection re sponse computer animation computer graphics vol 

upson combining physical visual simulation creation planet jupiter film computer graphics vol 
pp 
fire breathing dragon 
fire simulated particle systems 
dragon jerry weil 
computer graphics volume number august nebula solar 
created jerry weil earth day special 
nebula contains surfaces color opacity texture mapping 

