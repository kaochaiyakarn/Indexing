data mining approaches intrusion detection discuss research developing general systematic methods intrusion detection 
key ideas data mining techniques discover consistent useful patterns system features describe program user behavior set relevant system features compute inductively learned classifiers recognize anomalies known intrusions 
experiments sendmail system call data network tcpdump data demonstrate construct concise accurate classifiers detect anomalies 
provide overview general data mining algorithms implemented association rules algorithm frequent episodes algorithm 
algorithms compute intra inter audit record patterns essential describing program user behavior 
discovered patterns guide audit data gathering process facilitate feature selection 
meet challenges efficient learning mining real time detection propose agent architecture intrusion detection systems learning agents continuously compute provide updated detection models detection agents 
network computer systems play increasingly vital roles modern society targets enemies criminals 
need find best ways possible protect systems 
security computer system compromised research supported part darpa nsf iri cda wenke lee salvatore stolfo computer science department columbia university west th street new york ny wenke sal cs columbia edu intrusion takes place 
intrusion defined set actions attempt compromise integrity confidentiality availability resource 
intrusion prevention techniques user authentication passwords biometrics avoiding programming errors information protection encryption protect computer systems line defense 
intrusion prevention sufficient systems complex exploitable weakness systems due design programming errors various socially engineered penetration techniques 
example reported years ago exploitable buffer overflow exists system software due programming errors 
policies balance convenience versus strict control system information access impossible operational system completely secure 
intrusion detection needed wall protect computer systems 
elements central intrusion detection resources protected target system user accounts file systems system kernels models characterize normal legitimate behavior resources techniques compare actual system activities established models identify abnormal intrusive 
researchers proposed implemented different models define different measures system behavior ad hoc presumption anomaly accurately manifested chosen set system features modeled measured 
intrusion detection techniques categorized misuse detection uses patterns wellknown attacks weak spots system identify intrusions anomaly detection tries determine deviation established normal age patterns flagged intrusions 
misuse detection systems example ks stat ikp encode match sequence signature actions change ownership file known intrusion scenarios :10.1.1.17.9158:10.1.1.17.9158
main shortcomings systems known intrusion patterns hand coded system unable detect unknown intrusions matched patterns stored system 
anomaly detection sub systems ides ltg establish normal usage patterns profiles statistical measures system features example cpu activities particular user program 
main difficulties systems intuition experience relied selecting system features vary greatly different computing environments intrusions detected studying sequential interrelation events event may fit profiles 
research aims eliminate possible manual ad hoc elements process building intrusion detection system 
take data centric point view consider intrusion detection data analysis process 
anomaly detection finding normal usage patterns audit data misuse detection encoding matching intrusion patterns audit data 
central theme approach apply data mining techniques intrusion detection 
data mining generally refers process automatically extracting models large stores data 
rapid development data mining available wide variety algorithms drawn fields statistics pattern recognition machine learning database 
types algorithms particularly relevant research classification maps data item predefined categories 
algorithms normally output classifiers example form decision trees rules 
ideal application intrusion detection gather sufficient normal abnormal audit data user program apply classification algorithm learn classifier determine audit data belonging normal class abnormal class link analysis determines relations fields database 
finding correlations audit data provide insight selecting right set system features intrusion detection sequence analysis models sequential patterns 
algorithms help understand sequence audit events frequently encountered 
frequent event patterns important elements behavior profile user program 
developing systematic framework designing developing evaluating intrusion detection systems 
specifically framework consists set environment independent guidelines programs assist system administrator security officer select appropriate system features audit data build models intrusion detection architect hierarchical detector system com ponent detectors update deploy new detection systems needed 
key advantage approach automatically generate concise accurate detection models large amount audit data 
methodology general mechanical build intrusion detection systems wide variety computing environments 
rest organized follows section describes experiments building classification models sendmail network traffic 
section presents association rules frequent episodes algorithms compute set patterns audit data 
section briefly highlights architecture proposed intrusion detection system 
section outlines research plans 
building classification models section describe detail experiments constructing classification models anomaly detection 
set experiments reported lsc sendmail system call data second network tcpdump data 
experiments sendmail data lot attacks computer systems carried design programming errors privileged programs run root 
example flaw finger daemon allows attacker buffer overflow trick program execute malicious code 
research efforts ko forrest attempted build intrusion detection systems monitor execution privileged programs detect attacks vulnerabilities :10.1.1.47.6145:10.1.1.47.6145:10.1.1.47.6145
forrest discovered short sequences system calls program normal executions consistent different sequences abnormal exploited executions executions programs 
database containing normal sequences self definition normal behavior program basis detect anomalies 
findings motivated search simple accurate intrusion detection models 
stephanie forrest provided set traces sendmail program experiments :10.1.1.47.6145
applied machine learning techniques produce classifiers distinguish exploits normal runs 
sendmail system call traces procedure generating sendmail traces detailed :10.1.1.47.6145
briefly file trace data columns integers process ids second system call numbers 
numbers indices lookup table system call names 
example number represents system call open 
set traces include normal traces trace sendmail daemon concatenation invocations sendmail program abnormal traces traces sscp attacks traces syslog remote attacks traces syslog local attacks traces decode attacks trace sm attack trace sm attack 
traces various kinds abnormal runs sendmail program 
learning classify system call sequences order machine learning program learn classification models normal abnormal system call sequences need supply set system call sequences length class labels normal 
abnormal 
table pre labeled system call sequences length training data containing pre labeled normal abnormal sequences 
sliding window scan normal traces create list unique sequences system calls 
call list normal list 
scan intrusion traces 
sequence system calls look normal list 
exact match sequence labeled normal 
labeled abnormal note data gathering process described ensured normal traces include nearly possible normal short sequences system calls new runs failed generate new sequences :10.1.1.47.6145:10.1.1.47.6145:10.1.1.47.6145
needless say sequences normal traces labeled normal 
see table example labeled sequences 
noted intrusion trace contains normal sequences addition abnormal sequences illegal activities occur places trace 
applied ripper coh rule learning program training data 
learning tasks formulated induce rule sets normal abnormal system call sequences record positional attributes 
system calls sequence length plus class label normal abnormal training data composed normal sequences taken normal traces plus abnormal sequences traces attacks trace syslog local attack trace syslog remote attack testing data includes normal abnormal traces training data 
ripper outputs set rules minority classes default true rule remaining class 
exemplar ripper rules generated system call data normal 
meaning sequence normal normal 
meaning sequence normal 
abnormal true 
meaning sequence abnormal ripper rules predict sequence abnormal normal 
intrusion detection system needs know trace analyzed intrusion 
post processing scheme detect trace intrusion ripper predictions constituent sequences 
sliding window length sliding shift step scan predictions ripper rules system call sequences 

length regions ripper predictions generated step predictions abnormal current region predictions abnormal region 
note input parameter 

percentage abnormal regions threshold value say trace intrusion 
scheme attempt filter spurious prediction errors 
intuition scheme intrusion occurs majority adjacent system call sequences abnormal prediction errors tend isolated sparse 
percentage mismatched sequences total number matches lookups performed trace distinguish normal abnormal :10.1.1.47.6145:10.1.1.47.6145
mismatched sequences abnormal sequences context 
scheme different look abnormal regions contain abnormal sequences normal ones calculate percentage abnormal regions total number regions 
scheme sensitive temporal information sensitive noise errors 
ripper outputs rules minority class 
example experiments training data fewer abnormal sequences normal ones output ripper rules identify abnormal sequences default prediction normal 
conjectured set specific rules normal sequences identity program detect known unknown intrusions anomaly intrusion detection 
having rules abnormal sequences gives capability identify known intrusions misuse intrusion detection 
abn 
abn 
experiment traces sscp sscp sscp syslog syslog syslog syslog decode decode sm sm table comparing detection anomalies :10.1.1.47.6145
column percentage abnormal sequences traces :10.1.1.47.6145
columns percentages abnormal regions measured post processing scheme traces 
normal traces training data 
traces bold included training data traces testing data 
compare results experiments different distributions abnormal versus normal sequences training data experiment normal abnormal sequence length experiment normal abnormal sequence length experiment abnormal normal sequence length experiment abnormal normal sequence length 
table shows results classifiers experiments analyze traces 
report percentage abnormal regions measured post processing scheme trace compare results forrest reported :10.1.1.47.6145
table see general intrusion traces generate larger percentages abnormal regions normal traces 
call measured percentages scores traces 
order establish threshold score identifying intrusion traces desirable sufficiently large gap scores normal sendmail traces low scores intrusion traces 
comparing experiments sequence length observe gap larger gap larger ripper rules experiments describe patterns normal sequences 
results show rules identify intrusion traces including seen training data decode traces sm sm traces 
confirms conjecture rules normal patterns anomaly detection 
ripper rules experiments specify patterns abnormal sequences intrusion traces included training data 
results indicate rules capable detecting intrusion traces known types seen training data sscp trace syslog remote trace syslog local trace 
comparing rules rules perform poorly intrusion traces unknown types 
confirms conjecture rules abnormal patterns misuse intrusion detection may effective detecting unknown intrusions 
results forrest showed method required low threshold order correctly detect intrusions 
results show approach generated stronger signals anomalies intrusion traces noted method normal traces intrusion traces training 
learning predict system calls experiments section required abnormal traces training data wanted study compute anomaly detector just normal traces 
conducted experiments learn normal correlation system calls th system calls middle system calls normal sequences length learning tasks formulated follows record positional attributes 
system call plus class label system call th position middle position training data composed normal se quences taken normal sendmail traces testing data traces included training data remaining normal sendmail traces intrusion traces 
ripper outputs rules form 
meaning th system call 
true 
meaning th system calls 
ripper rules confidence information number matched examples records conform rule number unmatched examples records conflict rule training data 
example rule covers matched examples unmatched examples 
measure confidence value rule number matched examples divided sum matched unmatched examples 
rules analyze trace examining sequence trace 
violation occurs actual system call predicted rule score trace incremented times confidence violated rule 
example sequence trace total score trace incremented confidence value violated rule 
averaged score total number sequences trace decide intrusion occurred 
table shows results experiments experiment predict th system call experiment predict middle system call sequence length experiment predict middle system call sequence length experiment predict th system call 
see table ripper rules experiments effective gap score normal sendmail low scores intrusion traces respectively large 
rules perform poorly 
predicts middle system call sequence length predicts th system call reason training data normal traces stable patterns th th position system call sequences 
averaged score violations traces exp exp exp exp sscp sscp sscp syslog syslog syslog syslog decode decode sm sm table detecting anomalies predicted system calls 
columns averaged scores violations traces 
normal traces training data 
intrusion traces training 
discussion experiments showed normal behavior program execution established detect anomalous usage 
confirms results related anomaly detection 
weakness model may recorded rote learned normal sequence database may specific contains entries :10.1.1.47.6145
show machine learning program ripper able generalize system call sequence information normal sequences set concise accurate rules rule sets rules rule attribute tests 
demonstrated rules able identify unseen intrusion traces normal traces 
need search predictive classification model anomaly detector higher confidence flagging intrusions 
improvement accuracy come adding features just system calls models program execution 
example directories names files touched program 
fra reported number features increases classification error rate network intrusion detection system decreases dramatically 
furthermore error rate stabilizes size feature set reaches optimal size experiments 
operating systems provide auditing utilities bsm audit solaris configured collect abundant information features activities host system 
audit trails information process program user extracted 
challenge efficiently compute accurate patterns programs users audit data 
key assumption learning algorithm anomaly detection degree misuse detection training data nearly complete regard possible normal behavior program user 
learned detection model confidently classify label unmatched data abnormal just unseen normal data 
example experiments section normal system call sequences experiments section required normal sequences order pre label abnormal sequences create training data 
audit data gathering process want ensure different normal behavior possible captured 
need simple incremental continuously learning summary measure audit trail update measure new audit trail processed audit process measure stabilizes 
section propose frequent inter audit record patterns summary measure audit trail describe algorithms compute patterns 
experiments tcpdump data approaches network intrusion detection analyze audit data host network correlate evidence hosts 
monitor network traffic directly packet capturing program tcpdump 
section describe classifiers induced tcpdump data distinguish network attacks normal traffic 
tcpdump data obtained set tcpdump data available iris cs uml edu network html part information exploration see iris cs uml edu 
tcpdump executed gateway connects enterprise lan external networks 
captured headers user data network packets passed network interface gateway 
network traffic enterprise lan external networks broadcast packets lan collected 
purposes filters tcpdump collected internet transmission control protocol tcp internet user datagram protocol udp packets 
data set consists runs tcpdump generated network intrusions tcpdump run normal network traffic intrusions 
output tcpdump run separate file 
traffic volume number network connections runs 
experiments focused building anomaly detection model normal dataset 
tcpdump output intended specifically security purposes go multiple iterations data pre processing extract meaningful features measures 
studied tcp ip security related problems example ste pax abh pax bel pv guidelines protocols important features characterize connection 
data pre processing developed script scan tcpdump data file extract connection level information network traffic 
tcp connection script processes packets ports participating hosts checks way handshake properly followed establish connection 
errors recorded connection rejected connection attempted established initiating host receives syn acknowledgment unwanted syn acknowledgment received connection request syn packet sent monitors data packet ack packet keeps number counters order calculate statistics connection resent rate wrong resent rate duplicate ack rate hole rate wrong data packet size rate data bytes sent direction percentage data packet percentage control packet watches connection terminated normal sides properly send receive fins abort host sends rst terminate data pack note date organizers provided information times targets actions network intrusions 
ets properly acked half closed host sends fin disconnected 
udp connectionless connection state simply treat packet connection 
connection record preparation data mining fields features start time duration participating hosts ports statistics connection bytes sent direction resent rate flag normal recorded connection termination errors protocol tcp udp 
ports know connection known service port user application 
call host initiates connection sends syn source destination 
depending direction source destination connection types going lan external networks coming external networks lan inter lan lan 
topologies network consideration important network intrusion detection 
intuitively intrusions come outside may exhibit abnormal patterns penetration attempts incoming connections subsequently inter lan doing damage lan going stealing uploading data connections 
analyzing types connections constructing corresponding detection models separately may improve detection accuracy 
experiments results type direction connections formulated classification experiments connection record uses destination ser vice port class label connection features attributes training data connections normal tcpdump data file test data includes remaining normal tcpdump data file connections tcpdump data files marked having embedded attacks fold cross validation evaluation reported 
process training testing repeated times time different normal data training data accordingly misclassification traffic type data going coming inter lan normal intrusion intrusion intrusion table misclassification rate normal intrusion data 
separate classifiers trained tested connection data traffic type 
normal data set aside training data 
intrusion data training 
different remaining normal data part test data averaged accuracy classifiers runs reported 
applied ripper connection data 
resulting classifier characterizes normal patterns service terms connection features 
classifier testing data percentage misclassifications tcpdump data set reported 
misclassification situation classifier predicts destination service connection features different actual 
misclassification rate low normal connection data high intrusion data 
intuition classification model straightforward intrusions take place features characteristics connections certain services example ftp different normal traffic patterns service 
results round experiments shown table differences misclassification rates normal intrusion data small inter lan traffic intrusions 
redesigned set features adding continuous intensity measures connection record examining connections past seconds counting number connection establishment errors connection rejected types errors disconnected connections designated system services ftp connections user applications connections service current connection calculate past seconds connection average duration data bytes directions connections averages con misclassification traffic type data going coming inter lan normal intrusion intrusion intrusion table temporal statistical measures improve classification accuracy 
time interval seconds 
misclassification rate normal intrusion intrusion intrusion window size effects window sizes misclassification rates service 
additional temporal statistical features provide additional information network activity continuous perspective provide insight anomalies 
example low rate error due innocent attempts network glitches short time span expected excess averaged norm indicates anomalous activity 
table shows improvement adding features 
time interval seconds see misclassification rates intrusion data higher normal data especially coming traffic 
ripper rule set classifier just rules conditions 
example rule says average number bytes source destination connections service percentage control packets current connection service auth 
understand effects time intervals misclassification rates ran experiments various time intervals 
effects going inter lan traffic small 
shows coming traffic misclassification rates intrusion data increase dramatically time interval goes stabilizes tapers 
discussion learned important lessons experiments tcpdump data 
collected data designed specifically security purposes directly build detection model considerable amount iterative data pre processing required 
process fundamentally requires lot domain knowledge may easily automated 
second general adding temporal statistical features improve accuracy classification model 
needed improvements current approach deciding right set features difficult time consuming 
example trials attempted came current set features time intervals 
need useful tools provide insight patterns may exhibited data 
second provide tools help administrative staff understand nature anomalies 
combining multiple classifiers classifiers described section models single aspect system behavior 
call base single level classifiers 
combining evidence multiple base classifiers models different aspect target system improve effectiveness detecting intrusions 
example addition classifier network traffic tcpdump data include classifiers commands issued connection sessions wellknown services ftp telnet combined evidence anomalous traffic patterns session behavior leads accurate assertion network attack 
priority research plan study experiment inductively learned classification models combine evidence multiple base detection models 
general approach learning meta detection model summarized follows build base classifiers models different target system formulate meta learning task record training data collection evidence generated time period base classifiers attribute value record prediction evidence base classifier modeled behavior normal abnormal fits model 
apply learning algorithm produce meta classifier 
meta detection model hierarchy detection models 
bottom base classifiers take audit data input output evidence meta classifier turn outputs final assertion 
research activities jam spt focus accuracy efficiency meta classifiers contribute significantly effort building meta detection models 
mining patterns audit data order construct accurate effective base classifier need gather sufficient amount training data identify set meaningful features 
tasks require insight nature audit data difficult proper tools guidelines 
section describe algorithms address needs 
term audit data refer general data streams properly processed detection purposes 
example data streams connection record data extracted raw tcpdump output 
association rules goal mining association rules derive attribute correlations database table 
simple interesting commercial application association rules algorithm determine items purchased customers information arrange store layout 
formally set records record set items association rule expression sa 
sub sets items record support percentage records contain confidence example association rule shell command history file stream com mands arguments user indicates time user invokes reading news reading newsgroup accounts activities recorded command history file 
confidence 
motivation applying association rules algorithm audit data audit data formatted database table row audit record column field system feature audit records evidence program executions user activities exhibit frequent correlations system features 
example reasons program policies codify access rights privileged programs concise capable detect known attacks intended behavior program files certain directories specific permissions consistent 
consistent behaviors captured association rules continuously merge rules new run aggregate rule set previous runs 
implementation follows general association rules algorithm described sri 
frequent episodes association rules algorithm seeks find record patterns frequent episodes algorithm described mtv discover inter audit record patterns 
frequent episode set events occur frequently time window specified length 
events occur specified minimum frequency sliding time window 
events episode occur partial order time episode constraint 
frequent episode called frequent episode rule 
example frequent serial episode rule log file department web site indicates home page research guide visited order cases theory group page visited subsequently time window sequence visits occurs total time windows log file approximately records 
seek apply frequent episodes algorithm analyze audit trails evidence sequence information program executions user commands build profiles anomaly detection lb 
implementation followed description mtv 
discovered patterns association rules frequent episodes guide audit process 
run program times different settings 
new run compute rule set consists association rules frequent episodes audit trail update existing aggregate rule sets merge process rule new rule set find match aggregate rule set 
match defined exact matches lhs rhs rules plus matches ranges values match increment matched rule aggregate rule set 
add new rule initialize 
rule set stabilizes new rules added data gathering process produced near complete set audit data normal runs 
prune rule set eliminating rules low userdefined threshold ratio total number audit trails 
system builders correlation information final profile rule set select subset relevant features classification tasks 
plan build support environment integrate process user selection features computing classifier feature set presenting performance classifier 
support system speed iterative feature selection process help ensure accuracy detection model 
believe discovered patterns extensively gathered audit data directly anomaly detection 
compute set association number frequent episodes raw episode serial episode rule serial episode rule window size effects window sizes number frequent episodes 
rules frequent episodes new audit trail compare established rule set 
scoring functions evaluate deviation scores missing rules high violation antecedent different consequent rules high new unseen rules sig changes rules 
tcpdump data revisited ran preliminary experiments association rules frequent episodes programs tcpdump data experiments described section 
wanted study frequent episodes algorithm help determine time window gathering temporal statistical features 
ran algorithm normal coming connection records temporal statistical features 
set program produce types output serial parallel episodes rules generated serial episode rules 
episodes 
serial episode rules 
different time window sizes recorded number frequent episodes generated see number frequent episodes episodes serial episode rules increases sharply goes gradually stabilizes note nature frequent episodes algorithm number episodes increase increases 
phenomenon coincides trends 
note particular choice parame ters purpose controlling maximum size episode rule set 
different settings exhibited phenomenon 
conjecture verify experiments data sets technique analyze data streams automatically discover important temporal measure time window size period time measure appropriate statistical features maximize classifier accuracy 
intuitively requirement time window size set sequence patterns stable sufficient patterns captured noise small 
ran association rules frequent episodes programs coming connection data compared rule sets normal data intrusion data 
purpose experiment determine programs provide insight possible patterns intrusions 
frequent episodes generated serial episode rules 
associations rules generated manually examined compared rule sets look unique patterns exist intrusion data normal data 
results intrusion unique serial rules related ftpdata source application example src srv ftp data src srv src srv ftp data rule means connection user application source service follows connection ftp data cases connection ftp data follows falls time window patterns occur time 
unique association rules related destination service user application example dst srv user apps duration dst src bytes rule means destination service connection user application cases duration number data bytes destination source pattern occurs time 
intrusion results nearly identical terms unique serial rules association rules 
intrusion unique serial rules related auth destination service example dst srv auth flag unwanted syn ack dst srv auth dst srv dst srv auth significant number unique association rules regard smtp source application 
rules suggest connection error smtp example src srv smtp duration flag unwanted syn ack dst srv rules may provide hints intrusions 
example unique normal serial episodes reveal large number data transfer activities unique serial episodes suggest large number connections service attempted 
architecture support biggest challenge data mining approaches intrusion detection requires large amount audit data order compute profile rule sets 
fact may need compute detection model resource target system data mining task daunting 
learning mining process integral continuous part intrusion detection system rule sets detection module may static long period time 
example new version system software arrives need update normal profile rules 
data mining expensive process time storage real time detection needs lightweight practical afford monolithic intrusion detection system 
propose system architecture shown includes kinds intelligent agents learning agents detection agents 
learning agent may reside server machine computing power responsible computing maintaining rule sets programs users 
produces base detection models meta detection models 
task learning agent compute accurate models large amount audit data example scale problem machine learning 
expect research agent metalearning systems spt contribute significantly implementation learning agents 
briefly studying partition dispatch data host machines compute classifiers parallel re import remotely learned classifiers combine accurate final meta classifier hierarchy classifiers cs 
detection agent generic extensible 
equipped learned periodically updated rule set classifier remote learning agent 
detection engine executes classifier input audit data outputs evidence intrusions 
main difference base detection agent meta detection agent uses preprocessed audit data input uses evidence base detection agents 
base detection agents meta detection agent need running host 
example network environment meta agent combine reports base detection agents running host final assertion state network 
main advantages system architecture easy construct intrusion detection system compositional hierarchy generic detection agents 
detection agents lightweight function independently heavyweight learning agents time locale long equipped rule sets 
detection agent report new instances sions transmitting audit records learning agent turn compute updated classifier detect intrusions dispatch detection agents 
interestingly capability derive disseminate anti virus codes faster virus spread considered key requirement anti virus systems 
proposed systemic framework employs data mining techniques intrusion detection 
framework consists classification association rules episodes programs remote learning agent meta inductive learning engine rule bases classifiers meta detection agent decision table models audit record preprocessor base detection engine audit records activity data evidence meta detection engine final assertion decision engine base detection agent evidence base detection agents actions reports architecture agent intrusion detection system automatically construct detection models 
experiments sendmail system call data network tcpdump data demonstrated effectiveness classification models detecting anomalies 
accuracy detection models depends sufficient training data right feature set 
suggested association rules frequent episodes algorithms compute consistent patterns audit data 
frequent patterns form summary audit trail guide audit data gathering process provide help feature selection discover patterns intrusions 
preliminary experiments algorithms tcpdump data showed promising results 
initial stages research remains done including tasks implement support environment system builders iteratively drive integrated process pattern discovering system feature selection construction evaluation detection models investigate methods benefits combining multiple simple detection models 
need multiple audit data streams experiments implement prototype agent intrusion detec tion system 
jam spt provides base infrastructure evaluate approach extensive audit data sets presently construction rome labs 
acknowledgments grateful stephanie forrest steven hofmeyr university new mexico providing system call data explaining details experiments 
wish philip chan florida institute technology david wei fan columbia university helpful advice 
abh atkins hare kelley nelson phillips steen 
internet security professional 
new riders publishing 
bel bellovin 
security problems tcp ip protocol suite 
computer communication review april 
coh cohen 
fast effective rule induction 
machine learning th international conference lake ca 
morgan kaufmann 
cs chan stolfo 
parallel distributed learning meta learning 
aaai workshop knowledge discovery databases pages 
forrest hofmeyr somayaji longstaff :10.1.1.47.6145
sense self unix processes 
proceedings ieee symposium security privacy pages los alamitos ca 
ieee computer society press 
fayyad piatetsky shapiro smyth 
kdd process extracting useful knowledge volumes data 
communications acm november 
fra frank 
artificial intelligence intrusion detection current directions 
proceedings th national computer security conference october 
maccabe 
architecture network level intrusion detection system 
technical report computer science department university new mexico august 
ikp ilgun kemmerer porras :10.1.1.17.9158
state transition analysis rule intrusion detection approach 
ieee transactions software engineering march 
jacobson leres mccanne 
tcpdump 
available anonymous ftp ftp ee lbl gov june 
ko fink levitt 
automated detection vulnerabilities privileged programs execution monitoring 
proceedings th annual computer security applications conference pages december 
ks kumar spafford 
software architecture support misuse intrusion detection 
proceedings th national information security conference pages 
kephart sorkin white 
blueprint computer immune system 
technical report ibm watson research center yorktown heights new york 
lb lane brodley 
sequence matching learning anomaly detection computer security 
aaai workshop ai approaches fraud detection risk management pages 
aaai press july 
lsc lee stolfo chan 
learning patterns unix process execution traces intrusion detection 
aaai workshop ai approaches fraud detection risk management pages 
aaai press july 
ltg lunt jagannathan neumann javitz valdes garvey 
real time intrusion detection expert system ides final technical report 
technical report computer science laboratory sri international menlo park california february 
mtv mannila toivonen verkamo 
discovering frequent episodes sequences 
proceedings st international conference knowledge discovery databases data mining montreal canada august 
pax vern 
internet packet dynamics 
proceedings sigcomm september 
pax vern 
bro system detecting network intruders real time 
proceedings th usenix security symposium san antonio tx 
pv phillip porras alfonso valdes 
live traffic analysis tcp ip gateways 
proceedings internet society symposium network distributed system security march 
sa srikant agrawal 
mining generalized association rules 
proceedings st vldb conference zurich switzerland 
spt stolfo prodromidis lee fan chan 
jam java agents meta learning distributed databases 
proceedings rd international conference knowledge discovery data mining pages newport beach ca august 
aaai press 
sri srikant 
fast algorithms mining association rules sequential patterns 
phd thesis university wisconsin madison 
ste stevens 
tcp ip illustrated volume 
addison wesley publishing 
