simulation verification automated composition web services srini narayanan ai laboratory sri international menlo park ca usa srini ai sri com sheila mcilraith knowledge systems laboratory dept computer science stanford university stanford ca usa sam ksl stanford edu web services web accessible programs devices key application area semantic web 
proliferation web services evolution semantic web comes opportunity automate various web services tasks 
objective enable markup automated reasoning technology describe simulate compose test verify compositions web services 
take starting point daml daml oil ontology describing capabilities web services 
define semantics relevant subset daml terms order logical language 
semantics hand encode service descriptions petri net formalism provide decision procedures web service simulation verification composition 
provide analysis complexity tasks different restrictions daml composite services describe 
implementation analysis techniques 
implementation takes input daml description web service automatically generates petri net performs desired analysis 
tool broad applicability back existing manual web service composition tools stand tool web service developers 
categories subject descriptors artificial intelligence knowledge representation formalisms methods representation languages representations predicate logic frames scripts 
general terms algorithms design standardization languages theory verification 
keywords semantic web daml ontologies web services web service composition distributed systems automated reasoning 

vision semantic web provide markup web content capability enabling automation tasks currently performed human beings 
key application semantic web technologies web services web accessible programs devices proliferate web 
examples web services include book buying service www amazon com travel service www com 
semantic markup copyright held author owner 
www may honolulu hawaii usa 
acm 
content capability web services service effect enable easy automation variety reasoning tasks currently performed manually human beings arduous hand coding enables subsequent automation 
tasks include automated web service discovery automated invocation automated interoperation automated selection composition automated execution monitoring 
motivated issues related web service composition 
compositions web services created different ways 
compositions created manually service provider simple web accessible programs form validation program database lookup program composing typical procedural programming constructs sequence loop 
book buying service www amazon com example composite service 
number software systems available facilitate manual composition programs web services 
programs include diversity workflow tools service composition aids biztalk orchestration enable user manually specify composition programs perform task 
technologies proposed form semantic markup web services order automatically compose web services perform desired task :10.1.1.105.7433
regardless compositions originated interested describing proving properties services test system simulating execution different input conditions logically verify certain maintenance safety conditions associated service automatically compose services 
summary objective enable markup automated reasoning technology describe simulate automatically compose test verify web service compositions 
starting point daml ontology web services exploit provide semantic markup content capabilities web services 
section provide semantics portion daml language require describe compositions web services 
section provide operational semantics petri nets 
section describe decision procedures web services simulation testing composition verification 
provide analysis complexity tasks restricted classes web service compositions 
section discuss implementation software tool performing proposed automated reasoning tasks 
theory implementation broad applicability back enhance existing manual composition tools stand tool simulation testing verification automated composition web services 

daml critical vision semantic web provision markup language artificial intelligence ai terminology knowledge representation language defined semantics enable unambiguous computer interpretation 
language sufficiently expressive describe properties capabilities web services 
years number semantic web markup languages proposed 
include xml rdf rdf daml oil 
adopted daml oil content language describing web services particular adopted daml 
daml oil ai inspired description logic language describing taxonomic information 
daml oil language builds top xml rdf provide language defined semantics set language constructs including classes subclasses properties domains ranges describing web domain 
daml oil express restrictions membership classes restrictions domains ranges including cardinality restrictions 
daml daml oil ontology web services developed coalition researchers auspices darpa agent markup language daml program 
latest release ontology located earlier version described 
daml ontology describes set classes properties specific description web services 
upper ontology daml comprises service profile describing service advertisements process model describing actual program realizes service service grounding describing transport level messaging information associated execution program 
service grounding akin web service description language wsdl 
process model provides declarative description properties web accessible programs wish reason 
illustrate salient features daml process model example fictitious book buying service offered web service provider congo congo example described original release daml markup www daml org services 
variant illustration purposes 
process model program atomic composite process 
additionally allows notion simple process describe view abstraction default instantiation atomic composite process expands 
focus atomic composite processes 
daml class rdf id process daml unionof rdf parsetype daml collection daml class rdf atomicprocess daml class rdf daml class rdf daml unionof daml class daml services coalition ankolekar burstein hobbs lassila martin mcdermott mcilraith narayanan paolucci payne sycara zeng 
atomic process non decomposable web accessible program 
executed single call returns response 
require extended conversation calling program agent web service 
daml class rdf id atomicprocess daml subclassof rdf resource process daml class example atomic process service takes input name book returns description book price book congo catalogue 
daml class rdf id rdfs subclassof rdf resource process atomicprocess daml class contrast composite process composed composite atomic processes control constructs 
constructs typical programming language constructs sequence fork dictate ordering conditional execution processes composition 
provide subset markup 
daml class rdf id daml intersectionof rdf parsetype daml collection daml class rdf process daml restriction daml mincardinality daml onproperty rdf resource daml restriction daml intersectionof daml class rdf property rdf id rdfs domain rdf resource rdfs range rdf resource rdf property example composite process find buy service composes order request financial transaction services 
composition constructs allow multiple different execution pathways termination depending case book sold congo stock user wishes buy 
associated process set properties 
program function metaphor process parameters associated 
types parameters daml properties input conditional output 
rdf property rdf id parameter rdfs domain rdf resource process rdfs range rdf resource www daml org 
thing rdf property rdf property rdf id input rdfs subpropertyof rdf resource parameter rdf property input name book 
rdf property rdf id bookname rdfs subpropertyof rdf resource process input rdfs domain rdf resource rdfs range rdf resource xsd string rdf property inputs mandatory optional 
contrast outputs generally conditional 
important 
example search book congo catalogue output may detailed description book congo carries may sorry don carry message 
outputs characterized conditional outputs 
define conditional output class describes condition output condition 
unconditional output zero cardinality restriction condition 
rdf property rdf id output rdfs domain rdf resource parameter rdfs range rdf resource rdf property daml class rdf id daml subclassof rdf resource www daml org thing daml class rdf property rdf id rdfs comment condition conditional output 
rdfs comment rdfs domain rdf resource rdfs range rdf resource condition rdf property rdf property rdf id rdfs comment output conditional output 
rdfs comment rdfs domain rdf resource rdfs range rdf resource www daml org thing rdf property addition program function metaphor useful action event process metaphor conceive services 
context consider services properties precondition conditional effect 
preconditions conditional effects described analogously inputs conditional outputs 
preconditions specify things true world order agent execute service 
precondition process agent knows input parameters process 
example precondition agent knows bookname 
stipulating knowledge preconditions pertaining input parameters redundant input parameters distinguished knowledge preconditions semantics 
web services embodied programs web preconditions 
level abstraction modeling web services physical preconditions execution piece software web 
contrast web accessible devices may physical preconditions bandwidth resources battery power 
rdf property rdf id precondition rdfs domain rdf resource process rdfs range rdf resource www daml org 
thing rdf property conditional effects characterize physical side effects execution web service world 
example conditional effect service bookname bookname 
note services physical side effects particular services strictly information providing 
daml markup conditional effects analogous conditional outputs 

semantics daml daml daml oil ontology provides set distinguished classes properties describing content capabilities web services 
daml oil language specified defined semantics expressive power daml oil sufficient restrict daml intended interpretations 
objective section describe semantics portion daml relevant web service composition 
particular ascribe semantics notion atomic composite processes 
compelling way done semantics daml oil describe daml expressive language order logic add set axioms theory constrains models theory intended interpretations 
daml process modeling language relationship process modeling languages important interoperability compelling way ascribe semantics daml map national institute standard nist process specification language psl 
psl process specification ontology described situation calculus order logical language reasoning dynamical systems 
psl role serve lingua franca business manufacturing process specification languages 
daml language stabilized easily able translate situation calculus description section psl ontology 
daml situation calculus situation calculus language order logical language representing dynamically changing worlds changes direct result named actions performed agent 
situations sequences actions evolving initial distinguished situation designated constant 
action situation result performing situation represented function 
functions relations values vary situation situation called fluents denoted predicate symbol situation term argument bookname 
poss distinguished fluent expressing action possible perform situation observe range properties currently stipulated thing string 
ranges changed formed formulae order logic soon ontology complete 
actions parameterized 
possible suppress parameters sake parsimony 
dialect situation calculus includes means representing knowledge 
particular distinguished fluent describes accessibility relation situations 
notation knows denotes formula known situation knows owns road 
notation abbreviation formula indicating truth value known 
knows knows 
abbreviation abbreviates formula indicating functional value known 
situation calculus fully described 
dispense details focus salient features relevant 
atomic processes daml actions situation calculus 
input parameters atomic process parameters action atomic process parameterized action bookname conditional effects outputs conditional effects atomic process represented situation calculus positive negative effect axioms form poss poss 
contains different combinations actions conditions fluent bookname respectively true false execution action 
example positive effect axiom service respect effect bookname 
example bookname bookname 
poss bookname bookname example illustrate service negative effect fluent 
interesting add 
poss bookname bookname specified outputs effects daml markup conditional outputs atomic process treated knowledge effects semantically 
important distinction captured semantics 
poss bookname bookname price bookname output service information agent told 
effect knows expression 
address frame problem representationally effect axioms compiled successor state axioms appealing causal completeness assumption effect axioms fluent characterize actions cause change truth value fluent successor state axioms express conditions fluent value change 
ensures models situation calculus represent intended interpretations 
successor state axioms fluent language form fluent true iff action true true action false 
bookname bookname bookname bookname bookname successor state axioms knowledge discussed 
preconditions inputs daml preconditions atomic process represented formed formula situation calculus 
precondition atomic process expressed necessary condition actions situation calculus 
poss formula relativized poss location charged multiple preconditions generalizes poss just outputs treated knowledge effects inputs treated knowledge preconditions semantically 
agent know value inputs service execute service 
example order execute agent know values inputs 
input atomic process poss completeness assumption preconditions encode preconditions atomic process necessary conditions action compiled action precondition axioms form poss poss location charged location complete situation calculus axiomatization daml description includes sets axioms described successor state axioms dss action precondition axioms dap axioms described foundational axioms situation calculus axioms describing initial situation ds unique names actions domain closure axioms actions 
axioms collectively capture intended interpretation portion daml described 
note described translation daml composite processes situation calculus 
translation follows nicely representation complex actions situation calculus golog 
discussion point scope 

operational semantics previous section ascribed semantics relevant subset daml 
semantics hand reason execution web services 
situation calculus lingua franca translate representation provides special purpose machinery tasks wish address 
specifically distributed operational semantics processes provided petri nets 
options including simple finite state automata process algebras pi calculus 
provides theoretical foundations microsoft xlang 
approaches offer techniques quantitative analysis 
selected petri nets combination compelling computational semantics ease implementation ability address offline analysis tasks web service composition online execution tasks deadlock determination resource satisfaction quantitative performance analysis 
note existence known techniques mapping petri nets process logics vice versa 
tradeoffs associated choice computational machinery 
general case petri nets inhibitory arcs turing equivalent 
translation situation calculus limit systems analyze 
situation calculus parsimonious large theories 
petri nets form computational completion semantics enables easy mapping situation calculus addresses frame problem nice way 
natural representation change concurrency allows construct distributed executable operational semantics web services 
able bring bear established theories vast computer science literature petri nets define subclasses daml process model respect computational complexity 
petri nets advantage dealing resources important reasoning web service devices 
subsection follow describe approach detail 
introduce notion petri net describe representation situation calculus theory petri nets 
go describe computational analysis techniques realize web service automation tasks 
petri nets constructed execution semantics daml petri nets 
petri net bipartite graph containing places drawn circles transitions drawn rectangles 
places hold tokens represent predicates world state internal state 
transitions active component 
places pointing transition contain adequate number tokens usually transition enabled may fire removing input tokens depositing new set tokens output places 
relevant features petri nets purposes ability model events states distributed system cleanly capture sequentiality concurrency event asynchronous control 
extensions basic petri net formalism include typed arcs hierarchical control durative transitions parameterization typed individual tokens stochasticity 
crucial fact representation active defined real time execution semantics service descriptions 
rest section details mapping 
section follow describes automatic model construction simulation analysis daml markups theory petri nets 
aiming borrow results developed theory concurrent systems 
specific relevant results refer reader appropriate citation 
general theory analysis distributed concurrent systems petri nets reader referred excellent surveys 
definition petri nets petri net pn algebraic structure composed finite set places pn finite set transitions tm transition input function maps transition ti multiset transition output function maps transition ti multiset definition markings tokens initial marking marking petri net pn function maps place natural number 
marking pi said place pi holds tokens marking 
special marking denoted called initial marking 
definition enabled fireable transitions marking marking ti ti ti said enabled marking 
ti denotes number occurrences place multiset ti 
denote set enabled transitions marking en 
conventional petri nets enabled transition may fire 
true kind petri nets particularly timed ones 
denote set fireable transitions marking conventional petri nets en 
definition transition firing occurrence sequence firing enabled transition ti marking causes change marking new marking follows ti ti 
ti ti denotes number occurrences place multiset ti multiset ti respectively 
words new marking place equal old number tokens place minus number occurrences input 
sequence firings tn take initial marking new marking called occurrence sequence 
graphical representation algebraic structure petri net pn may represented graphically 
graphical representation petri net represented bipartite graph place represented circle transition represented rectangle function represented directed arcs linking ti transition ti 
arcs called input arcs transition ti function represented directed arcs linking transition ti ti 
analogously input arcs arcs called output arcs transition ti modeling discrete systems petri nets modeling discrete system petri net partial states system represented places 
system particular partial state represented presence absence token ease exposition leave case typed colored nets represent predicate transition nets 
finite domains finite colors nets unfolded ordinary case considered 
tool described section handles prepositional ordinary predicate types nets 
place representing partial state 
events represented transitions 
conditions allowing event occur represented input arcs associated transition event 
normally called pre conditions 
input places arcs represent combination partial states valid order event represented transition occurs 
occurrence event firing enabled transition new set partial states valid 
called post conditions represented output arcs fired transition 
petri net semantics daml section defined semantics daml atomic processes terms set situation calculus axioms 
start showing mapping situation calculus axioms corresponding petri net structure 
describing basic mapping describe net structures various control constructs define composite processes daml 
daml atomic processes petri nets recall basic set axioms representing daml atomic process effect axioms poss poss necessary conditions actions 
embody physical preconditions described daml markup knowledge preconditions reflecting requirement agent know values input parameters process 
distinguish subscript world knowledge poss poss poss situation calculus completion assumption reflect effect axioms specify conditions fluent change necessary conditions actions specify conditions action possible execute 
completion assumption captured axiomatically translating effect axioms successor state axioms necessary conditions actions action precondition axioms 
petri nets provide computational mechanism achieving completion 
graph structure defines completion computation graph structure achieves computational completion semantics 
solution frame problem captured computational semantics petri nets 
world poss action effect illustrates graphical petri net representation daml atomic process 
multiple conditional effects transition possible conditional effect preset specific condition postset effect action conditions 
ease exposition consider multiple conditional effects 
discussion follow atomic process represented single transition blue visible 
daml composite processes petri nets having illustrated mapping situation calculus description daml atomic process turn modeling composite processes petri net structures 
daml composite processes compositions sub processes composite atomic processes 
composite processes bottom atomic processes 
daml property specifies control flow data flow sub processes yielding constraints ordering conditional execution sub processes 
start ready component control constructs finish done 
canonical daml composite process illustrates graphical petri net representation daml composite process comprising start finish ready done control construct 
consider construct daml version provide appropriate net structure captures possible execution semantics construct 
basic control constructs consider sequence parallel condition choice various iterate classes daml 
depicts distributed operational dope semantics various daml composite constructs 
implemented daml interpreter translates daml markups petri net simulation modeling environment 
tool allows interactive simulation supports various verification performance analysis techniques 
red visible arcs correspond result transition firing token transfer system moves state state 
brown filled transitions depict enabled transitions 
clear state shown system distributed operational semantics 
transition fires local input conditions transition firings correspond system evolution 
kre kre input poss describe various daml composite constructs dope semantics 
note daml atomic processes correspond transition embedded composite processes recursively built ground atomic processes 
section illustrate book buying example utilizes illustrates constructs 

atomic daml process 
distributed operational dope semantics daml composite process constructs sequence construct daml sequence list component sub processes specify body 
shown seq semantics sequence total ordering process list process process executed sequence 
assuming preconditions satisfied execute completion 
split construct split composite process consists concurrent execution bag sub processes 
specification waiting synchronization level daml ontology 
model split construct assumes process initiates set concurrent processes terminates 
special constructs model synchronization aspects local barrier types 
situation shown split split processes process process initiated composite process ready transition finished state 
split join concurrent construct split join composite process consists concurrent execution bag sub processes 
default assumes barrier synchronization 
split split join define processes partial synchronization split join subset 
example network shown conc processes concurrently enabled composite process waits processes completed 
analogously construct cases split join choice construct choice composite process selects process execution bag processes 
choose property takes choice bag returns chosen bag 
cardinality bag specified restriction get choose bag 
daml distinguish choice alternative 
shown choice daml specification corresponds process process possible choices selecting completing choice allow composite process finish 
semantic framework supports probabilistic choice daml augmented probabilities 
construct composite process simple construct relation domain process range binary value 
internal process usually corresponds test actions may alternatively evaluation world state resource levels timeouts conditions affect evolution processes 
daml conditions property boolean 
specific execution branch process action execute depends value property 
example shown condition value true branch enabled 
condition value false process bag active 
repeat condition construct daml repeat repeat composite processes 
repeat specializes class properties daml range type condition range type repeat 
commitments asynchronous prioritized interrupts synchronous specific polling busy wait strategies left particular execution model specify 
similarly repeat specializes class properties range type condition range type repeat 
repeat shows execution semantics repeat construct 
semantics analogous input places daml true condition false nodes reversed 

analysis web services tasks created manually web service providers rd party web service providers automated tool semantic web replete composite services 
assessing correctness effectiveness safety efficiency composite services vital safe reliable automation web services 
section provide set computational analysis tools petri net representation enable automate web service tasks simulation simulate evolution web service different conditions 
validation test web service behaves expected 
verification establish certain properties web service maintains certain properties ensures safety composition generate composition web services achieves specified goal 
performance analysis evaluate ability service meet requirements respect throughput times service levels resource utilization 
tools provide sophisticated performance analysis detailed discussion techniques outside scope 
section discuss implementation analysis tools application daml described web services 
simulation validation verification composition simulation pn straightforward 
similarly validation done interactive simulation hypothetical cases cases predefined test suite fed system see generate expected output expected effects relative pn representation 
verification composition performance analysis advanced analysis techniques needed 
fortunately powerful analysis techniques developed petri nets 
linear algebraic techniques verify properties place invariants transition invariants non reachability 
coverability graph analysis model checking reduction techniques analyze dynamic behavior petri net 
simulation markov chain analysis performance evaluation 
important verification problems reachability liveness existence deadlocks 
proliferation embedded devices issue safe operation central device verification 
context web services verification composite service safety constraint ensuring credit card transaction executing order send merchandise goods paid critical 
follows show verification safety constraints detection deadlock automated composition web services characterized terms notion reachability 
definition reachability marking reachable marking reached occurrence sequence definition 
marking set reachable markings net net obtained replacing initial marking denoted 
notice empty sequence occurrence sequence reaches initial marking 
reachability problem net problem deciding marking reachable 
safety distributed system defined lack unsafe state 
definition safety web service compositions web service composition associated net 
safety constraint marking encode negation violation safety constraint 
web service composition safe respect iff occurrence sequence net reaches 
analogously define task generating composition web services achieve goal problem finding occurrence sequence reaches marking depicting user desired goal state 
occurrence sequence dictates sequence web services execution leads goal 
sequential composition atomic services achieve goal state realized daml reachability analysis described 
may automatically compose composite services technique compiling composite processes macros 
definition automated composition web services set atomic web services net depicts behavior services represent user goal marking depicts goal sequential composition atomic services achieves user goal iff occurrence sequence reachability analysis note case web service composition service input output composition individual service treated atomic 
contrast general process composition possible interleavings considered 
course agent goal service description process semantics smart agent sufficient computational resources note mainly interested analysis control compositions 
instance assume finite domains 
known infinite domains nets infinite colors verification problems undecidable 
reachability analysis relies interleaving semantics corresponds total ordering tasks 
consistent results ai planning 
anonymous referee pointing 
compute optimal compositions combining partial service executions 
notion automated composition web services macros analogous ai planning systems blackbox graphplan complete information initial situation 
contrast planners look plans bounded length reducing complexity search see 
important observe general case search space practical web service compositions services choose 
fortunately resulting composition tends short 
addition verification safety constraints important analysis perform determination deadlock 
deadlock obviously important property consider composition services wishes avoid compositions lead reachable states service hangs interaction possible 
definition deadlock marking net deadlock enables transitions 
deadlock problem net problem deciding reachable markings deadlock 
complexity daml services tasks subsection relate complexity various web service task expressiveness daml 
theorem reachability problem process models built daml service descriptions pspace complete 
proof sketch theorem proof relies results showed space completeness specific subclass petri nets safe nets 
proof polynomial reduction reachability safe nets linear bounded automaton acceptance problem known pspace complete 
definition safe nets marking net safe place net 
identify safe marking set places 
net safe reachable markings safe 
lemma daml service descriptions result safe nets 
proof extended version www icsi berkeley edu www html 
proposition complexity verification composition theorem conclude complexity web service safety verification automated sequential composition atomic services space general case 
note case safety verification net simply net individual composite service verified general extremely small 
contrast net web service composition net characterizing behavior atomic web services consideration composition 
consider case agent fictitious course may go congo com browse reviews books buy cheaper rival 
possible congo com includes browse review process service description 
large resulting occurrence sequence general short 
results consistent complexity results ai planning 
theorems draw similar complexity web service automation tasks 
theorem iterate constructs iterate repeat repeat reachability problem daml process model np complete 
proof fact 
proposition daml iterate constructs results acyclic network 
proof sketch theorem acyclic networks known polynomial time reduction integer linear programming acyclic net initial marking marking reachable iff system equations corresponding state equation incidence matrix integer vector solution 
definitions incidence matrix state equation see instance 
integer linear programming np reachability problem daml iterate constructs 
proposition complexity restricted verification composition theorem conclude web service safety verification np complete composite services iterate constructs 
theorem relevant automated composition net generate composition represent single process 
theorems define classes composite web services safety verification polynomial 
theorem choice iterate constructs daml forms sub language polynomial algorithms reachability deadlock daml process 
proof sketch theorem proof theory conflict free nets 
definition conflict free nets conflict free nets subclass conflicts structurally ruled 
net conflict free place howell show reachability liveness deadlock problems safe conflict free nets solvable polynomial time 
proposition daml iterate choice introduce conflict constructs iterate introduces conflict repeat finish transitions choice definition structural conflict control construct introduces structural conflicts 
theorem iterate condition constructs daml forms sublanguage polynomial algorithms reachability deadlock daml process 
proof sketch theorem proof theory free choice nets 
table tractability results daml subsets daml subset reachability deadlock daml iterate choice polynomial polynomial daml iterate condition np complete constant time daml iterate np complete polynomial time daml space complete space complete daml resources exp space time hard exp space time hard definition free choice nets net pair case 
free choice net transitions share input place unique input place 
follows enabled enabled 
possible freely choose occurs 
reachability problem pspace complete safe nets 
proposition daml iterate condition introduce constructs control construct introduces constructs 
proposition daml modulo iterate condition constructs results free choice net 
principal verification tractability results shown table 
discussed issue resources 
resources common web accessible programs common devices 
resources daml language equivalent general place transition nets reachability deadlock detection known exponential space time 
result included completeness daml coalition plans introduce resources release 

implementation implemented daml interpreter translates daml markups simulation modeling environment 
tool allows interactive simulation supports various verification performance analysis techniques outlined earlier 
daml interpreter java program reads daml files outputs network description 
network constructed recursively 
atomic processes created shown 
control construct specified file template net created described section 
recursive procedure bottoms transitions correspond atomic processes 
network constructed visualized graphically simulation environment 
created variety analysis techniques including reachability analysis deadlock detection invariant computations invariants performed different intial states 
service provider perform interactive simulations validate various hypothetical interaction scenarios enact canonical usage service 
built framework quantitative analysis techniques compute throughputs paths variety markov chain analysis techniques 
complete description framework www ai sri com daml services 
implementation model variety existing daml service ontologies 
example network constructed daml congo daml book buying web service illustrated www daml org services daml congo daml 
thick red arrow indicates stage interactive simulation customer ready finish buy transaction network variety non free constructs loops exercises full functionality daml 
earlier version system deadlock allow user create new account known 
corrected 

semantic web exciting vision evolution world wide web 
adding semantics enables structured information interpreted unambiguously 
precise interpretation necessary prerequisite automatic web search discovery 
services particularly important component semantic web 
semantic service description language enable qualitative advance quality quantity commerce transactions web 
daml services coalition guise daml taken important steps direction 
attempt provide model theoretic semantics distributed operational semantics simulation validation verification automated composition enactment daml described web services 
benefits approach include formal executable semantics service description fully represented machinery situation calculus execution behavior unambiguously described petri nets 
analysis techniques tools mapping daml situation calculus petri nets allows tap rich repository analysis techniques tools 
service implementation tool mapped daml service description existing process model able perform simulation enactment analysis composite service descriptions 
colors gif faithfully reproduced pdf files 
www ai sri com daml services www icsi berkeley edu www html show set screen dumps different stages interactive simulation 
complexity reasoning expressive power daml process model compares ordinary petri nets 
identified tractable subsets daml trade expressiveness efficient analysis verification composition model checking 
described implemented system able read daml service descriptions perform simulation enactment analysis aid service provider test functional correctness tune performance service enable service composition agents automatically configure sequence atomic services achieve specific goal 
furthermore model provides guidelines important extensions daml direction richer execution monitoring constructs expressive resource reasoning constructs 
outlined computational model implementation respect daml markup language believe tools techniques described broadly applicable necessary realizing vision semantic web 

acknowledge colleagues daml services coalition development daml ontology 
members daml groups ksl stanford sri international interesting discussions various aspects 
particularly www anonymous reviewers informative thorough review 
gratefully acknowledge financial support defense advanced research projects agency darpa agent markup language daml program 

simulation daml congo example 
van der aalst woflan petri net workflow analyzer systems analysis modelling simulation 
baral computational complexity planning approximate planning presence incompleteness artificial intelligence 
benjamins plaza motta fensel studer wielinga schreiber zdrahal ibrow intelligent brokering service knowledge component reuse world wide web 
proc th banff knowledge acquisition knowledge system workshop kaw 
cpsc ucalgary ca kaw kaw kaw proc html berners lee hendler lassila semantic web scientific american may 
best desel partial order behaviour structure petri nets 
formal aspects computing 
blum furst fast planning planning graph analysis artificial intelligence 
cheng complexity results safe nets fst tcs foundations software technology theoretical computer science 
daml versions 
www daml org services 
daml services coalition ankolekar burstein hobbs lassila martin mcilraith narayanan paolucci payne sycara zeng daml semantic markup web services proc 
international semantic web working symposium swws 
denker hobbs martin narayanan waldinger querying accessing information semantic web proc 
semantic web workshop conjunction th international worldwide web conference 
desel esparza shortest paths reachability graphs 
proc 
application theory petri nets pp 
springer verlag lncs 
ellis nutt modelling enactment workflow systems application theory petri nets lncs pp 
springer verlag 
fikes mcguinness axiomatic semantics rdf rdf daml oil manuscript 
march 
www daml org axiomatic semantics html de giacomo lesperance levesque congolog concurrent programming language situation calculus 
artificial intelligence 
gruninger personal communications august 
hendler agents web 
ieee intelligent systems 
special issue semantic web 
march april 
hendler mcguinness darpa agent markup language 
ieee intelligent systems trends controversies pp 
november december 
howell problems concerning fairness temporal logic conflict free petri nets 
theoretical computer science 
kautz selman unifying sat graphbased planning proc 
th international joint conference artificial intelligence ijcai 
lowe biztalk tm server complete 
november 
mayr algorithm general petri net reachability problem 
siam journal computing 
mcilraith planning complex actions 
proc 
international workshop non monotonic reasoning nmr 
appear 
mcilraith son zeng semantic web services ieee intelligent systems 
special issue semantic web 
march april 
mcilraith son adapting golog composition semantic web services proc th international conference principles knowledge representation reasoning 
appear 
meseguer montanari petri nets monoids 
information computation 
murata petri nets properties analysis applications 
proc 
ieee 
narayanan reasoning actions narrative understanding 
proc 
international joint conference artificial intelligence ijcai pp 

reiter knowledge action logical foundations specifying implementing dynamical systems 
mit press 
gruninger valois lee process specification language psl overview version specification nistir national institute standards technology gaithersburg md 
van harmelen horrocks faqs oil ontology inference layer 
ieee intelligent systems trends controversies pp 
november december 
waldinger deductive composition web software agents 
proc 
nasa goddard workshop formal approaches agent systems lncs springer verlag 

winskel petri nets algebras morphisms compositionality 
information computation 

