opportunities operating systems research recon gurable computing oliver advanced computing research centre school computer information science university south australia lakes sa fo edu au recon gurable computing involves adapting hardware resources speci needs applications order obtain performance bene ts 
emerging architectural paradigm holds promise delivering signi cant speedups compute bound applications 
challenges need overcome recon gurable computing mainstream 
signi cantly supporting applications design providing convenient run time environment create opportunities propose new ways managing chip resources 
examining potential bene ts providing operating systems support recon gurable processors identi es opportunities development policies dynamic hardware management strategies communicating design ideas run time management system 
recon gurable computers typically consist workstation host loosely coupled general purpose bus recon gurable logic processor currently field programmable gate array fpga 
current design methods result production fpga con gurations host software access control fpga 
host operating system typically provides device driver support accessing recon gurable logic processor 
approach allows raw access device maximum performance approach unproductive designers need intimately familiar low level details recon gurable device lack suitable abstractions uence design process levels 
addition portability application severely limited 
run time management recon gurable systems considers problem managing time evolution single application 
increasing interest recon gurable computers horizontally vertically integrated application domains image signal processing 
shift important run time management resource consistent cient fair 
believe timely consider possibility providing operating systems support recon gurable logic 
operating systems support recon gurable logic necessary desires higher level interface resource occur di erent circuits instantiated time users wish deal low level architectural details 
run time support necessary requires virtual general model circuits instantiated 
necessary share fpga resources multiple tasks may unrelated owned di erent clients simultaneously active allocation scheduling resources needs handled independent fair agent 
support needed resource client wishes direct control remotely networked 
arguments developing implementing operating systems support fpgas 
rst necessarily impact performance 
technology applications niche relatively small cost usable secure resource may high fpgas 
second may concomitant loss exibility designers desire complete control functionality device may loose 
loss exibility may impact feasibility implementing applications fpgas 
loss performance exibility compensated 
potential bene ts providing operating systems support fpgas include greater convenience abstraction virtualization generalization resource embedded attached integrated microprocessors support multi tasking improved system performance fault tolerance integration recon gurable devices global computational pool 
obtaining bene ts may necessitate redesign traditional electronic design automation synthesis tools development scheduling systems allow resources shared space time development new fpga architectures allow high level functions task placement repartitioning migration handled chip 
aim clarify role operating systems see impacting recon gurable computing systems today medium term 
rst provide overview current recon gurable computing technology describing operating systems may ect support life cycle single task single user system 
section intended familiarize reader main challenges faced fpga applications designer 
ways precisely activities operating system ideally enhance 
expand view include shared systems intended support multiple concurrently executing tasks 
presentation initially focuses issues relating management tasks shifts management resource 
conclude summarising believe interesting challenging areas research identi ed 
recon gurable computing architecture recon gurable computer contains con gurable logic resources commonly eld programmable gate array fpga chips may adapted process certain classes computations high speed 
fpgas dimensional grids con gurable logic cells capable implementing limited logic functions interconnected programmable routing matrix 
high performance achieved embedding application speci digital circuits logic cell matrix fpga allowing parallel execution streams eliminating need fetch decode instructions run time 
fast application speci integrated circuits fpgas recon gurable computers advantage reprogrammable microseconds 
recon gurable computing models proposed reached various stages development 
earliest successful views recon gurable logic coprocessor implemented board attached system bus sequential host processor see example 
approach advantage simplicity su ers low bandwidth host coprocessor 
introduces called design problem deciding part application implement hardware coprocessor part software host 
overcome problems orts integrate con gurable logic arrays conventional processor dies 
interest development systems composed entirely recon gurable logic memory 
variety fpga models developed 
signi cant developments ability partially con gure portion fpga chip allowing remainder chip continue operate interruption 
concept reusing resources swapping active portions circuit device development spawned interest sharing single chip multiple tasks time 
alternative approach similar goal provide array memory store multiple contexts switched cycle cycle basis context switching instruction 
major stumbling block recon gurable computing di culty programming recon gurable computers 
lack consistent easy abstractions describing recon gurable computing applications applications developers need highly skilled digital circuit parallel algorithms design tools available initially developed dynamic design domain users guaranteed exclusive access chip resources 
complicate matters application designers required manage application execution recon gurable logic resources poorly integrated host operating systems 
systems provide device driver communicate board controller 
designing fpga tasks designer fpga applications faced decisions 
include limited decisions method specifying application design capture allocate parts computation partitioning placement allow parts communicate routing reuse resources compute various parts swapping schedule resources control 
design capture fpga designer contend considerably degrees freedom conventional programmer 
designs case circuits may speci ed schematic capture hardware description languages vhdl verilog programming language 
merits commonly combined unfortunately ective mapping applications limited hardware resource typical current recon gurable computers 
conventional design capture tools able partition application circuit components resource schedule allocation recon guration resources minimize execution delays 
traditional approach perform functions machine assumption dedicated application designed run time conditions known static 
machine shared multiple tasks users fault tolerant application need cope changing run time conditions 
need forces operating system support activities traditionally handled line fpga designer 
partitioning illustrate point consider partitioning problem 
arises ways 
decide part application best allocated fpga sensibly done software 
known hardware software partitioning problem 
obvious done conceivable automatic techniques better job humans fully informed available hardware 
typically designer specify precisely part executed design circuits hardware part addition programs software part 
networked environment designer may know resources available 
may change time network resources run time parameters change 
desirable allow decide execute generate execute appropriate instructions 
second type partitioning necessary breaking large task graph components available fpga resources time 
approach partition circuit minimize recon guration time 
automated techniques typically static employed early design phase certainly run time conditions may necessitate repartitioning resizing optimize available resources 
placement operating systems may role play task placement 
traditional fpga design involves automatic place route tools nd static placement logic elements routing interconnections 
doing designer xes location design construction process 
approach advantage allowing design loaded quickly su ers exibility region designated task faulty unavailable 
disadvantage hard placement overcome binding circuit hardware run time 
con guration data generated prior load time needs done place task run time open questions 
example fpga chip homogeneous task resized straightforward address translation su ce 
re routing necessary resources available chosen location cost run time instantiation increase considerably 
case fpga designer need worry designing systems support exibility 
fpga shared multiple users services need controlled resource manager common interest users 
function taken operating system 
routing arbitrary run time task placement comes problem run time routing 
run time routing may needed task noted 
may need routed border chip dependent tasks located chip 
dynamic routing algorithms allow communications re routed tasks placed removed provide fault tolerance 
techniques needed fpga systems designed static task placement known environments 
scheduling problems partitioning placing routing task components closely related problem scheduling task graph 
specifying resource requirements interdependencies task graph nodes fpga designer automated design system attempts allocate partition potentially large graph limited physical resource 
partitions need scheduled order correctly complete computation minimum time 
fpga partially recon gurable amount commonality partition con gurations may uence recon guration time desirable order recon gurations performed 
fpga scheduling arbitrary computations complex supported possible tools operating systems 
swapping swapping task components fpga chip usually handled designer decides conditions give rise recon gurations 
acceptable designs static operating system participating dynamic partitioning allocation scheduling tasks desirable provide means task components inform done components loaded complete processing 
ideas follow principles virtual memory handling new mechanisms required handle circuit objects 
reasons exist needing new mechanisms handle circuit objects pages virtual memory system 
need know partitions invoke order depending run time conditions 
second may necessary store state current partition 
ciently needs determined 
third mechanisms may need provided spool data partition invocations 
fourth run time conditions may prevent partitions loaded suitable locations exceptions handled 
addition operating system able swap tasks fpga unduly ecting concurrently executing tasks fpga 
di ering resource needs partition need allocated scheduled loading design fpga surface 
multi tasking fpgas recon gurable computing models include possibility having multiple tasks 
fpga chips larger resource potentially lying idle need maintain high level utilization chips sharing resource space time dimensions 
techniques currently supported hardware partial recon context switching respectively 
section rst examine additional operating system functions needed support partitioning fpga resources multiple tasks possibly unrelated owned di erent users 
consider role operating system perspective fpga resource multiple tasks concurrently active 
task sizing designs partitioned issues relating sizing need addressed 
necessary decide size partitions directly impact partitioning scheduling strategies 
partition size chosen xed tradeo size performance partition 
partition size small designs may easily partitioned 
variable partition sizes permitted operating system may able resize task region unallocated space allow critical tasks necessary resources successfully complete 
method maximize space utilization fpga cost scheduling complexity performance loss 
methods parametric aspect ratio instantiation fpga tasks known see example static performed load time latest 
methods dynamically resizing tasks begun investigated 
framework resizing tasks identify tasks resized run time impact performance 
task placement tasking system task placement handled operating system knows location free cells 
constraining partition sizes xed simpli es partitioning problem provides location independence improves system throughput task partition loaded removed 
task partitions xed size placement strategy simpli ed partitions paged fpga surface 
su ces provide wiring harness page maintain allocation table managing free pages 
tasks may need communicate making desirable locate order reduce communication delays lengths routes required 
wiring harness provided support xed size partitions designed support arbitrary simultaneous task task communications 
allowing task partitions vary size allows internal fragmentation occurs xed size partitions reduced cost managing free space increasing scheduling complexity solving constrained dynamic routing problem 
possible adopt strategies employed multiprocessors reduce fragmentation experienced xed partition sizes 
location independence desirable provide location independence tasks may placed free space available tasks moved necessary 
tasks moved collect free space provide fault tolerance improve communications support load balancing distributed networked devices 
xed partition sizes rigid task harness easier support location independence task movements 
fpga architectures support cient task movements chip developed suggestions 
managing movement sized tasks considered 
swapping caching pre loading tasks multi tasking may supported time sharing fpga resource 
necessary decide context switches supported architectural operating systems perspective 
fpga devices support multiple contexts providing chip memory storing inactive con gurations state see example time sharing managed software swapping contexts chip see example 
multiple contexts supported hardware active context usually selected globally broadcast context instruction 
overheads small method potential exists pass data place con gurations 
pre loading con gurations area occupied executing task feasible 
input output fpgas supporting multiple tasks may need handle multiple concurrent streams 
fpgas limited pin routing resources multiple concurrent communications may lead contention need resolved operating system 
addition operating system responsible run time placement tasks needs ensure routed border determine acceptable port locations interfacing signals chip wires 
virtual wires project mit developed techniques time multiplexing pins 
internal wire resources typically statically allocated best space shared segmenting lengths 
may desirable allow multiplexed 
possibility isto provide redundant links implement slightly sophisticated switches allow simple message routing needs basis 
see example recon gurable multiple bus rmb proposal 
system resources need managing just user resources 
need evident tasks request recon gurations overlap time 
chip con guration bus needs shared 
intertask communications tasks needing communicate constrain operating system place favourably respect nd appropriate routes signals ow 
problems harder deal task sizes xed tasks placed achieve maximum packing density 
solution suggested provide separate cellular automaton routing plane providing autonomous operating systems functions intertask communications 
coarse grained allocation units xed locations possible support total interconnection crossbar switches rmb networks 
allocation scheduling goals system need decided 
maximize utilization subject task deadlines response time tasks minimized 
presumably scheduling objectives determined applications area 
common thrust best limited array hardware cells wires pins memory meeting computational objectives multiple simultaneous tasks 
central question resources shared 
day systems shared space time optimum may involve mixture approaches schemes multiprocessors 
may wish pack multiple tasks time slice context pack di erent sets tasks subsequent time slices 
contexts alternated allow fpga resource ciently 
tasks exist slice contend resources separated di erent slices order satisfy competing needs 
bene ts similar multi threading obtained resources tied task idle waiting say employed waiting period execute tasks di erent time slices 
important issues consider minimize overheads fair ensure deadlines met ensure task su ers delays 
fpga architecture need help operating system support multiple simultaneous streams 
may support clocking individual tasks di erent rates 
ways detecting recovering faults 
systems clean discarded resources provide garbage collection facilities 
ective abstractions modelling hardware needed hardware appear user operating system 
security desirable task con gurations safe impact tasks compromise functioning system 
need restrict access acceptable users 
requirements suggest operating virtual machine environment similar java virtual machine investigated researchers see example 
user submit hardware independent con gurations checked safety 
approach provide location independence virtual machine necessarily perform technology mapping 
research plans order study develop operating systems support recon gurable computing believe fundamental importance decide partitioning policy allows xed sized partitions 
answer question determine suitable abstractions recon gurable computing uences formulation partitioning strategies scheduling placement policies ective tools design appropriate recon gurable computing architectures 
know conditions method superior factors uence outcome 
relationship architecture application domain partitioning policy 
possible partition application recon gurable logic resource 
feasible partitioning run time 
answer questions investigating tradeo intend performing cost bene analysis space recon gurable computing platform 
relatively large fpga array available allows experiment policies 
initial experimentation focus manage shared fpga array particular application demand contiguous area grows 
directions may 
rst direction attempts answer questions scheduling recon gurable computing tasks 
partitions xed size know problem minimizing response time scheduling similar scheduling techniques 
respect multitasking systems interested knowing competition scarce resources uences problem ect deadlines interested knowing impact allowing partition sizes vary 
support con guration swapping interested inform operating system swaps required con gurations swap 
interested know possible eliminate need application designer specify control algorithm 
variable partition sizes allowed need know support location independence 
possible investigate dynamic approaches routing io border communicating tasks 
interest answer question computation done compile time ord run time 
david kearney bernard gunther zhu helpful discussions comments 
jonathan babb russell tessier anant agarwal 
virtual wires overcoming pin limitations fpga logic emulators 
duncan buell kenneth pocek editors proceedings ieee workshop fpgas custom computing machines pages los alamitos ca april 
ieee computer society press 
gordon 
swappable logic unit paradigm virtual hardware 
pocek arnold pages 
andre dehon 
dpga coupled microprocessors commodity ics early st century 
duncan buell kenneth editors proceedings ieee workshop fpgas custom computing machines fccm pages los alamitos ca april 
ieee computer society press 
oliver 
scheduling dynamic fpga recon gurations 
kenneth heath james editors proceedings fifth australasian conference real time systems part pages singapore 
springer verlag 
adam 
self modifying circuitry platform tractable virtual circuitry 
hartenstein pages 
arun hartmut andrew spray 
rmb gurable multiple bus network 
proceedings 
second international symposium high performance computer architecture pages 
available anonymous ftp ftp cs newcastle edu au pub papers rmb ps 
dror feitelson 
packing schemes gang scheduling 
ipps workshop job scheduling strategies parallel processing los alamitos ca april 
ieee computer society press 
bernard gunther 
space recon gurable stream processor 
tam editors proceedings part th australasian conference parallel real time systems pages singapore september 
springer verlag 
reiner hartenstein andres editors 
field programmable logic applications fpgas computing paradigm th international workshop fpl proceedings volume lecture notes computer science berlin germany 
springer verlag 
gunter wolfgang 
recon gurable hardware shared resource multipurpose computers 
hartenstein pages 
john hauser 
garp recon gurable coprocessor 
pocek arnold pages 
jonathan hogg singh mary sheeran 
new hdl research challenges posed dynamically reprogrammable hardware 
proceedings third asia paci conference hardware description languages 
jack jean karen vikram robert cook shah 
dynamic recon guration support concurrent applications 
pocek arnold pages 
eric steven 
java environment recon gurable computing 
wayne luk peter cheung manfred editors field programmable logic applications th international workshop fpl proceedings volume lecture notes computer science pages berlin germany september 
springer verlag 
luk guo shirazi zhuang 
framework developing parametrised fpga libraries 
reiner hartenstein manfred editors field programmable logic smart applications new paradigms compilers th international workshop fpl proceedings volume lecture notes computer science pages berlin germany september 
springer verlag 
pedro juan carlos lopez 
hardware operating system dynamic recon guration fpgas 
hartenstein pages 
ito konishi 
plastic cell architecture recon gurable computing general purpose 
pocek arnold pages 
kenneth pocek je rey arnold editors 
th annual ieee symposium fpgas custom computing machines fccm los alamitos ca april 
ieee computer society press 
kenneth pocek je rey arnold editors 
th annual ieee symposium fpgas custom computing machines fccm los alamitos ca april 
ieee computer society press 
shirazi wayne luk peter cheung 
automating production run time recon gurable designs 
pocek arnold pages 
jean vuillemin patrice bertin didier mark shand touati philippe 
programmable active memories recon gurable systems come age 
ieee transactions large scale integration vlsi systems march 
ralph wittig paul chow 
fpga processor recon gurable logic 
kenneth pocek je rey arnold editors ieee symposium fpgas custom computing machines fccm pages los alamitos ca 
ieee computer society press 
xilinx 
xc field programmable gate arrays 
xilinx april 

