principles computer systems principles computer systems 
autonet high speed self configuring local area network point point links attached autonet michael schroeder appeared report systems research center digital equipment april 
essentially version published ieee journal selected areas communications october pp 
read adjunct lectures distributed systems links switching 
gives fairly complete description working highly available switched network providing daily service hosts 
techniques obtain high reliability fault tolerance characteristic distributed systems just networks 
clear essential role software modern networks 
second autonet describes reconfiguration scheme detail thomas michael schroeder 
automatic reconfiguration autonet 
proceedings th acm symposium operating system principles pages 
autonet high speed self configuring local area network point point links michael schroeder andrew birrell michael burrows hal murray roger needham thomas edwin satterthwaite charles thacker april slightly different version appeared ieee journal selected areas communications october 
version converted acrobat pdf may errors 
companion thomas michael schroeder automatic reconfiguration autonet proceedings th acm symposium operating system principles pp 
autonet self configuring local area network composed switches interconnected mbit second full duplex point point links 
switches contain ports internally connected full crossbar 
switches cut achieve packet forwarding latency low microseconds switch 
switch port switch port host network controller 
processor switch monitors network physical configuration 
distributed algorithm running switch processors computes routes packets follow fills packet forwarding table switch 
algorithm automatically recalculates forwarding tables incorporate repaired new links switches bypass links switches failed removed 
host network controllers alternate ports network fail active port stops working 
autonet distinct paths set network links carry packets parallel 
suitable physical configuration pairs hosts communicate simultaneously full link bandwidth 
aggregate bandwidth autonet increased adding links switches 
switch handle packets second 
coaxial links span meters fiber links span kilometers 
switch network hosts service network digital systems research center 
handout 
autonet handout 
autonet principles computer systems 
ethernet mbit host host bandwidth mbit aggregate bandwidth done standard local area network lan high performance workstations bottleneck demanding applications 
modern workstation ethernet entire data transfer capacity workstations getting faster numerous 
increasing need faster higher capacity lan 
need addressed commercially fddi token ring lan 
times greater host host aggregate bandwidth fddi provide considerable relief ethernet bottleneck 
autonet alternative approach higher speed higher capacity general purpose lan replace ethernet 
fundamental advantage autonet fddi greater aggregate bandwidth link bandwidth 
fddi aggregate network bandwidth limited link bandwidth autonet aggregate bandwidth times link bandwidth 
advantages autonet fddi include lower latency flexible approach high availability higher operational limit number host attached single lan 
autonet appears simpler fddi 
intrinsic reason autonet cost fddi ring 
replacement ethernet retain ethernet high availability largely automatic operation capable efficiently supporting protocols ethernet 
low latency important new network distributed computing request response protocols rpc important bulk data transfer protocols 
security increasingly important decade new lan hinder encrypted communication 
autonet addresses requirements 
primary goal autonet project build useful local area network research component technologies computer networks 
aspects autonet designed ideas tried systems different combinations 
bringing just right pieces challenge produce result advances state art 
building autonet required combining expertise networking hardware design computer security system software distributed systems proof algorithms performance modeling simulation 
primary purpose autonet support distributed computing autonet implementation uses distributed computing perform status monitoring reconfiguration 
development goal autonet producing network put service 
prospect service forced develop practical solutions big little problems encountered design process generated strong preference simplicity design 
early autonet replaced ethernet service lan building connecting computers 
service allowing effectiveness design evaluated design improved operational experience 
section contains brief description autonet provide context rest 
section describes major design decisions define network 
section highlights areas autonet appears break new ground 
section provides detailed description components network 
section describes operation components 
section discusses early experience autonet indicates directions 
handout 
autonet principles computer systems 
overview autonet illustrated consists number switches host controllers connected mbit full duplex links 
shown gray arrows packet generated source host travels switches reach destination host 
switches contain logic forward packets input port output ports directed destination address packet header 
non blocking crossbar switch connects input output ports 
depending topology network handle packets 
packets flow simultaneously opposite directions link 
host controller switch handout 
autonet link portion autonet installation alternate switches interconnected arbitrary topology topology change time new switches links added network switches links fail 
processor switch monitors state network 
topology changes switch processors execute distributed reconfiguration algorithm 
algorithm determines new topology loads forwarding tables switch route packets operational switches links 
normal operation switch processor participate forwarding packets 
switches forward packets cut technique minimizes switching latency 
small amount buffering associated switch input port flow control mechanism ensures buffers overflow 
reconfiguration autonet discards packets 
hosts connected autonet dual ported controllers 
best network availability host connected switches controller design allows connections time 
autonet ought accommodate dual connected hosts 
possible improvements reconfiguration algorithm allow larger 
principles computer systems 
design decisions section summarizes major decisions autonet design 
point point links mbit ethernet uses broadcast physical medium 
packet sent ethernet segment seen hosts attached segment 
described tobagi minimum size ethernet packet determined need detect collisions packets 
reliable collision detection requires packet minimum time 
high bit rates time translates unacceptably large minimum packet sizes 
mbit faster networks including autonet point point links get away limitations 
point point links produce design relatively independent specific link technology 
long link technology needed length bandwidth latency characteristics incorporated network appropriate interface electronics 
settled mbit link bandwidth autonet speed faster ethernet limits standard signaling technology 
chose amd taxi chip set drive links leaving subtleties phase locked loops data encoding link 
autonet design scale times faster links 
engineered autonet tolerate transmission delays sufficient fiber optic links km length 
link implemented uses ohm coaxial cable full duplex signaling single cable 
electrical considerations limit links maximum length link types implemented mixed single installation coaxial links building lower cost fiber optic links buildings longer length limit 
unconstrained topology pre calculated packet routes autonet physically built multi port switches interconnected point point links arbitrary topology network better thought topology 
switch port switch port port host controller 
packet routed switch switch destination pre calculated forwarding tables tailored current physical configuration 
tree shaped flooding network aggregate network bandwidth limited link bandwidth limited ability configure broken components 
ring topology fddi similar limitations 
addition ring latency proportional number hosts 
reasonably configured autonet latency proportional log number switches 
autonet handles packets simultaneously different routes unconstrained topology allows great deal flexibility establishing routes avoid broken components 
automatic operation virtues ethernet fddi normal operation management required route packets 
multiple networks interconnected bridges distributed algorithm executed bridges determines forwarding pattern interconnect segments introducing loops 
bridge algorithm automatically reconfigures forwarding pattern include new equipment avoid broken segments bridges 
principles computer systems autonet operates automatically 
function provided software executing control processor switch monitors physical installation 
switch link fails repaired added removed software triggers distributed reconfiguration algorithm 
algorithm adjusts packet routes operational links switches avoid broken ones 
course human network management required repair broken equipment adjust physical installation reflect substantially changed loads 
crossbar switches autonet switch full duplex ports internally interconnected crossbar 
chose crossbar structure simple performance easy understand sophisticated switch fabric allowed single input port connect simultaneously set output ports support broadcast 
small number ports direct result wanting get system service quickly 
autonet hardware built shelf components ports fit reasonably sized switch custom integrated circuits 
autonet switch design scale easily ports switch higher levels circuit integration 
larger switches cost effective smallest installations fewer ports switch switch links 
virtue small switch generates higher switch count turn provides interesting test distributed reconfiguration algorithm 
limited buffering flow control autonet uses fifo buffer receiving switch port 
start flow control scheme signals transmitter sending bytes link receiving fifo half full 
packets discarded receiving switch normal operation 
flow control scheme byte fifo sufficient absorb round trip latency km fiber optic link byte fifo obtain deadlock free routing broadcast packets 
fifo big contain average sized packets maximum sized packet 
flow control independent packet boundaries single packet switches 
consequence scheme congestion back network potentially delaying packets routed congested link 
limited buffering implies switch able start forwarding packet having entire packet local buffer 
fact autonet cut forwarding bytes arrived 
alternative buffering scheme provide packets buffering receiving switch port say mbyte memory provide flow control level 
port higher capacity absorb incoming traffic periods congestion delaying need respond congestion allowing time congestion avoidance mechanisms 
longer links absence flow control eliminates maximum link latency constraint 
eventually port defend discarding arriving packets 
chose limited buffering flow control uses memory switch port making switches simpler smaller 
absence proven mechanisms avoiding congestion additional advantage scheme may communication protocols handout 
autonet handout 
autonet principles computer systems stable flow control scheme responds link overload backing packets throwing away 
deadlock free multipath routing autonet uses flow controlled fifos buffering discard packets normal operation deadlock possible packets routed arbitrary paths 
deadlocks dealt detecting breaking avoiding 
autonet chose approach 
detecting deadlocks reliably quickly hard discarding individual packet break deadlock complicates switch hardware 
scheme uses deadlock free routes allowing packet transmission working links 
see section scheme property allows multiple paths particular source destination takes advantage links installed parallel trunks 
short addresses autonet reconfiguration algorithm assigns short address switch host network 
short addresses reserved special purposes broadcast 
short addresses contain bits bits prototype name switch ports maximal sized autonet 
forwarding table switch indexed packet destination short address incoming port number allows switch quickly pick suitable link step route packet destination 
forwarding table constructed part distributed configuration algorithm runs physical installation changes breaks repaired 
short address switch host change reconfiguration occurs usually 
autonet addressing scheme lies source routing nectar example addressing unique identifier uid ethernet 
schemes uid addressing complex network requires explicit routing network know route uid identified destination uid keyed lookups forward packet 
source routing removes network responsibility determining routes placing hosts smart controllers system software 
network contain mechanisms report physical configuration hosts alter packets forwarded 
source routing eliminates possibility dynamic choice alternative routes 
comparison autonet short addresses results relatively simple switch hardware giving dynamic multipath routing 
considering alternative addressing schemes lans keep mind ethernet established uid addressing standard interface datagrams 
network hardware provide host software 
design question splitting providing uid addressing network switches host controllers host software 
autonet host controllers switches bit uids host software implements uid addressing autonet short addresses 
see section 
hardware supported broadcast ethernet naturally supports broadcast high level protocols come depend low latency broadcast lan 
autonet switch hardware transmit packet multiple output ports simultaneously 
capability implement lan wide broadcast low latency flooding broadcast packets spanning tree links 
broadcast packet go network aggregate broadcast bandwidth limited link bandwidth 
principles computer systems supporting broadcast complicates problem providing deadlock free routing 
see section having low latency broadcast simplifies problem mapping destination uids short addresses 
alternate host ports autonet host directly connected active switch 
ethernet extended lan host directly connected passive cable 
active switch greater tendency fail passive cable 
specific availability goal autonet failure single network component disconnect host 
autonet allows host connected different switches 
mechanism chose dual connection provide ports autonet host controller 
host chooses uses ports switching alternate port accumulating evidence chosen port working 
having alternate ports simplifies areas design 
example alternate ports serious consideration need providing hot swap port cards switches turning switch change add port card disable network directly connected hosts 
alternate ports host controllers hot swap necessary turning switch simply causes connected hosts adopt alternate ports network 
port failover usually done disrupting communication protocols 
obvious disadvantage having alternate ports increased cost host switch links extra switches 
mbit links cost link quite low compared cost host typically connected network 
integrated encryption security distributed systems encrypted communication 
wanted encrypted packets handled latency throughput unencrypted ones secure communication performance penalty 
put pipelined encryption chip host controller 
chip encrypt decrypt packets sent received increase latency unencrypted packets 
generic lan abstraction short addresses autonet presents different interface host software ethernet 
faced job integrating autonet operating system quickly decided difference hidden low level host software 
interface available higher level software multiple generic lans carry ethernet datagrams addressed uid 
machinery inside notices ethernet autonet 
packets transmitted autonet supplies autonet packet header complete destination source short addresses 
learns correspondence uids short addresses inspecting arriving packets 

innovations areas autonet design appears break new ground 
highlight areas 
sections describe features detail 
handout 
autonet handout 
autonet principles computer systems distributed spanning tree algorithm termination detection deadlock free routing flooding pattern broadcast packets autonet identifying spanning tree operational links 
spanning tree computed distributed algorithm similar perlman 
algorithm property nodes eventually agree unique spanning tree node sure computation finished 
autonet indefinite termination unacceptable autonet carry host traffic reconfiguration progress 
invite deadlock caused inconsistent forwarding tables various switches 
eliminate problem extended perlman distributed spanning tree algorithm notify switch chosen root soon tree determined 
prompt notice termination allows autonet open business quickly reconfiguration guarantees switch forwarding tables describe consistent deadlock free routes 
routing deadlock free routing autonet loop free assignment direction operational links 
basis assignment spanning tree described previous section link closer spanning tree root 
result assignment directed links form loops 
define legal route uses link direction direction 
routing guarantees absence deadlocks allowing links hosts reached 
dynamic learning short addresses layer host software mentioned uid addressed packets transmit network 
packet delivered autonet provide complete autonet packet header including short addresses source destination 
uses uid addressed cache recording short addresses corresponding various destination uids 
information uid cache comes inspecting source source uid packet received 
specific short address destination known packet transmitted broadcast short address destination uid packet allows intended target host accept packet hosts reject 
response destination allows learn correct short address 
responses forthcoming request short address host autonet broadcast contact implementation host 
scheme allows host track short addresses various destinations generating extra packets bothering higher layers software 
learning algorithm requires extra instructions packet received 
automatic reconfiguration autonet reconfiguration mechanism switch monitoring state ports 
hardware status indicators report illegal transmission codes syntax errors lack progress conditions port 
check switch control program verifies port exchanging packets neighboring switch 
appearance disappearance responding neighbor port cause switch trigger reconfiguration 
principles computer systems building stable responsive mechanism detecting faults repairs proved subtly difficult 
hard problems determining error fingerprints commonly occurring fault designing hysteresis reconfiguration mechanism faults responded quickly intermittent switches links ignored progressively longer periods 
experience operational autonet allowed develop fault repair detection mechanisms achieve responsiveness stability 
come considered port scheduler packets arriving autonet switch turn forwarded output ports 
packets destined control processor local switch forwarded special internal port 
packets single destination host switch determines set output ports lookup forwarding table 
port set send packet 
broadcast packets switch determines lookup forwarding table set output ports forward packet simultaneously 
scheduling output ports fulfill sorts requests done carefully prevent starvation particular input ports turn lead performance anomalies including deadlocks 
autonet switch includes strict come considered scheduler polls availability output ports assigns forwarding requests generated input ports 
scheduler implemented single xilinx programmable gate array eliminates problem starvation key element achieving autonet best case switch transit latency achieved router queue empty suitable output port available 

components detailed description autonet design overview hardware software components 
switch hardware presents block diagram autonet switch 
switching element crossbar constructed paired multiplexer chips 
twelve crossbar inputs outputs connected link units terminate external links 
th input output connected special link unit switch control processor send receive packets network 
crossbar provides bit data path input free output bit path direction 
forward packet data packet marker communicate flow control signal 
crossbar connect single input port arbitrary set output ports 
control processor motorola running mhz clock 
processor uses mbyte video ram main memory buffers sending receiving packets processor uses random access ports memory crossbar uses serial access ports 
kbyte rom available booting control processor power 
processor access timer interrupts calculating timeouts 
limited space board crc encryption hardware provided 
packets control processor checked generated software 
currently packets sent received control processor encrypted 
control processor access rom containing switch bit uid red green leds switch front panel 
handout 
autonet handout 
autonet principles computer systems principles computer systems link unit implements switch port 
terminates channels full duplex coaxial link receiving channel transmitting 
receive path uses amd taxi receiver convert mbit serial data stream link bit parallel format 
th bit distinguishes data byte values command values packet framing flow control 
arriving data bytes packet marks buffered bit fifo 
logic output fifo captures address bytes arriving packet presents switch router 
router set crossbar forward packet link unit removes packet bytes fifo presents crossbar input 
flow control signal crossbar enables disables forwarding packet bytes crossbar 
soon packet command removed fifo forwarded output port ports available subsequent packets 
transmit path link unit accepts parallel data crossbar presents amd taxi transmitter converts mbit serial form sends link 
receive transmit portions single link unit tied flow control state derived receiving fifo transmitted back transmit channel link 
see section link unit include crc hardware autonet switch check generate forwarded packets 
control processor link link link unit rx 
link unit rx 
link unit rx control processor packet address 
se le ct 
mux flow control 
router data crossbar select mux 
output link mask input link index input link select flow control select link unit tx 
link unit tx 
link unit tx control processor link link structure autonet switch link unit maintains set status bits polled control processor 
status bits primary source information algorithms monitor condition ports switch decide network reconfiguration occur 
control processor control operation individual link unit 
control register link unit instructed illuminate leds front panel send special purpose flow control directives ignore received flow control 
router contains kbytes memory forwarding table routing engine schedules switch output ports 
forwarding tables loaded control processor part network reconfiguration 
routing engine implemented single xilinx programmable gate array 
handout 
autonet handout 
autonet principles computer systems principles computer systems switch runs single ns clock 
link units forward byte packet data crossbar clock cycle 
router forwarding decision set crossbar connection clock cycles packet forwarding rate packets second 
latency receiving bit packet input link forwarding bit output link clock cycles output link router busy 
des crc bus autonet switch packaged card types cm enclosure 
completely populated switch contains link units bit crossbar slices control processor router implemented cm cards 
backplane card types plug right angles cm board 
switch draws power 
packet buffer packet buffer controller hardware host controller autonet shown attaches digital equipment bus firefly multiprocessor computers 
general believe network controller simple fast play role correct operation network fabric 
operating full mbit network bandwidth low latency requires completely pipelined structure packet cut transmit receive 
simplicity requires higher level protocol processing controller 
case controller mbit bandwidth firefly bus allows shared data bus controller elimination cut little impact controller latency throughput 
network ports implemented small cabinet kit designed mounted firefly chassis 
cabinet kit includes taxi transmitter receiver circuit driving link 
signal ribbon cable controller card selects cabinet kit 
selection port done host software 
controller fills inch quad bus card 
receive path pipelined point arriving packets stored kbyte receive buffer 
transmit path pipelined outward kbyte transmit buffer 
crc checking generation done xilinx 
encryption handled amd encryption chip 
connections transmit buffer receive buffer crc chip encryption chip bus bit internal bus 
controller board includes rom containing bit uid host uid address 
controller operation direction executing amd microprocessor 
microcode initially comes kbyte boot rom microcode subsequently downloaded host bus 
microcode downloading allowed experiment easily controller host interface 
controller able full bus bandwidth send receive packets 
encrypted packets sent received performance penalty 
handout 
autonet link hardware controller card cabinet kit big fifo rcv link driver link control serial links link driver handout 
autonet fifo structure bus autonet controller cabinet kit links implemented autonet ohm coaxial cable 
hybrid circuit allows channels full duplex link carried single cable 
implementation consequence signals transmitted autonet port reflected correctly received port 
reflection occurs cable attached cable attached attached cable terminates remote port 
host switch prepared receive packets 
circuit driving links includes high pass filter prevents frequencies mhz transmitted 
filter needed data encoding scheme taxis allows signals low frequency components generated sending certain legal sequences bytes commands 
filter low frequency transitions prevent receiver recovering data correctly 
service network building uses low loss cable standard cable television connectors 
accept cabinet kits link unit cards service protocol send receive packets bytes meter link test host test switch crc error 
principles computer systems switch control program autopilot software executes control processor switch responsible implementing autonet automatic operation 
major functions propagating rebooting new versions responding monitoring debugging packets monitoring physical network answering short address request packets attached hosts triggering reconfigurations physical network changes executing distributed reconfiguration algorithm 
autopilot source code consists lines written lines written assembler 
generates byte object program 
stable version autopilot included switch boot roms automatically loaded power turned switch reset 
new version ready loaded programming environment firefly workstation autonet nearest switch 
version autopilot running accepts new version boots propagates neighboring switches 
structure autopilot typical small real time control programs 
interrupt routines enqueue dequeue buffers packets sent received control processor 
runs process level tasks control non preemptive scheduler 
tasks structured procedure calls run completion milliseconds 
task scheduler manages timer queue tasks need run timeout expired 
current timeout resolution milliseconds 
major algorithms autopilot described sections 
src service lan service autonet src contains switches 
current topology uses twelve ports switch links switches ports links hosts 
host connected switches configuration capacity attach hosts 
autonet connected ethernet building bridge 
autonet ethernet behave single extended lan 
hosts autonet firefly workstations servers 
firefly contains processors providing mips mbytes memory 
typical workstations mbytes memory 
processors see memory consistent caches 
autonet proves stable reliable disruptive experiments connected autonet ethernet 
choice network changed system running 
switching network done middle rpc call ip connection disrupting higherlevel software 
principles computer systems host software ethernet driver controller autonet driver controller net info setstate net state send net buffer size receive buffer status net net 
uid cache structure low level lan software firefly firefly host software autonet includes driver controller generic lan uid cache autonet ethernet bridging software 
software written modula executes vax kernel mode 
firefly scheduler provides multiple threads address space including kernel autonet host software written concurrent programs execute simultaneously multiple processors 
illustrates structure low level lan software firefly 
interface presents set generic uid addressed lans carry ethernet datagrams 
procedure allows clients discover generic nets correspond physical networks 
setstate procedure allows clients enable disable networks 
ethernet datagram sent specific network send procedure 
receive procedure blocks calling thread packet arrives network 
result receive indicates network packet arrived 
usually threads blocked receive 
procedure causes host acting bridge networks 
transmission autonet uid cache provides short address packet destination 
cache kept date observing source uid source short address packets arrive autonet occasionally requesting short address implementation autonet broadcast 
see section host acting autonet ethernet bridge observes packets arriving ethernet uid cache record hosts reachable ethernet 
looking destination uid packet arrives network determine packet needs forwarded network 
see section 
functions algorithms consider detail major functions algorithms autonet 
handout 
autonet handout 
autonet principles computer systems principles computer systems link syntax taxi transmitter receiver able communicate command values distinct data byte values 
commands communicate flow control directives packet framing 
taxi transmitter data command values send automatically sends sync command maintain synchronization transmitter receiver 
think serial channel taxi transmitter receiver carrying continuous sequence slots filled data bytes commands empty 
autonet flow control prevents sender overflowing fifo receiving switch 
autonet communicates flow control information time multiplexing slots channel 
th slot flow control slot 
remaining slots data slots 
normally start directives occupy flow control slot independent communicated data slots 
easy switch tell link comes switch host host controllers send host directive start 
flow control directives assigned unique command values recognized appear unexpectedly data slot 
flow control system self synchronizing 
flow control discussed detail section 
special purpose flow control directives panic may sent 
stands don hear sent switch switch link switch determines link defective sure switch declares link defective 
panic intended sent force switch reset link unit clearing receive fifo link control hardware reconfiguration packets get 
implemented panic facilities 
data slots carry packets 
packet framed commands 
data slots packets filled sync commands flow control stops packet data transmitted 
transmitters required keep demand data bytes controllers switches may send sync commands packets flow allowed 
link wasted idling unnecessarily packet link unit assume normal operation packet bytes available retrieve fifo 
packets data slots filled sync commands 
flow control illustrates autonet flow control mechanism 
contains pieces switches link 
names channel channel refer unidirectional channels link 
receiving link unit channel status signal fifo chip indicates fifo half full 
information determines flow control directives sent channel reverse channel link 
flow control slot occurs start command sent receiving fifo half full sent half full 
back receiving link unit channel flow control directives generate flow control signal crossbar 
output port forwarding packet flow control signal uses bit reverse path crossbar open close throttle fifo source packet 
important special case port receiving flow control commands 
host controller transmits sync commands alternate link receiving flow control usually means link connected alternate host port 
receiving flow control commands cause link control unit act host start directive received host received allowing packets forwarded link effectively discarding 
due oversight design link units receiving flow control keep acting flow control directive received 
directive unpredictable switch power 
switch software detects clears backups result indefinite cessation flow 
flow control scheme cause congestion back links 
consider sequence switches abcd path packet 
receiving fifo issues say cd link available moment fifo emptying 
packet bytes arriving start accumulating fifo eventually issue congestion back network source controller issued 
congestion persists long network software host sending packets threads making calls transmit packets delay returning packets sent 
handout 
autonet handout 
autonet principles computer systems autonet host controllers may send commands 
slow overloaded host cause congestion back network 
slow host buffering controller cover bursts packets generated communication protocols 
controller discard received packets buffers fill 
understand relationship fifo length frequency flow control slots link latency 
assume fifo holds bytes issues fifo contains bytes 
flow control command sent slots 
assume link latency slot transmission times 
worst case receiving fifo emptied transmitter sends bytes continuously stopped 
time receiver causes command sent fifo may contain bytes 
bytes arrive fifo effective assuming transmitter acts received delay 
prevent fifo overflowing speed light velocity factor fiber optic cable bit slower coaxial cable slot transmission time ns compute cable length kilometers 
slots km see bytes 
choices autonet uses byte fifos 
larger fifo solve deadlock problem associated broadcast packets explained section 
solution problem transmitter broadcast packet ignore commands broadcast packet reached receiver fifo big hold complete broadcast packet transmission began start command 
broadcast packets flow control acts packets 
case calculate maximum allowable broadcast packet length fifo size minus worst case count bytes fifo byte broadcast packet arrives 
account size needed fifo minimum acceptable value bytes 
size allows autonet broadcast maximum sized ethernet packet autonet header prepended 
corresponding bytes 
increase fifo size costs supporting low latency broadcast autonet 
address interpretation indicated earlier autonet packets contain short addresses 
implementation short address bits increasing bits straightforward design change 
short address contained bytes packet 
shown address interpretation starts soon address bytes arrived head fifo link unit 
short address concatenated receiving port principles computer systems number result index switch forwarding table 
byte forwarding table entry contains bit port vector bit broadcast flag 
bits port vector correspond switch ports port port control processor 
broadcast flag port vector indicates set alternative ports forward packet 
switch choose port free set 
ports free switch chooses lowest number 
broadcast flag port vector indicates set ports forward packet simultaneously 
forwarding ports available 
broadcast entry port vector tells switch discard packet 
fifo incoming link arriving packet address bytes link vector forwarding table 
interpretation switch forwarding table address interpretation switch requires just lookup indexed table done quickly simple hardware 
specification alternative ports allows simple form dynamic multipath routing destination 
example multiple links interconnect pair switches function trunk group 
including receiving port number forwarding table index benefits provides way differentiate phases flooding broadcast packet see section allows hop switch switch packets addressed outbound port number provides way prevent packets corrupted short addresses routes generate deadlocks 
mechanism interpreting short addresses allows considerable latitude way short addresses 
adopted assignments handout 
autonet handout 
autonet principles computer systems short address packet destination host control processor switch attached active host port switch switch host attached addressed switch port particular host switch packet discarded address fff packet discarded reserved address values host loopback switch attached active host port switch host switch ffff host short address expressed hexadecimal digits prototype switches interpret low order bits values 
part distributed reconfiguration algorithm performed switches useable port working switch physical installation assigned short addresses range 
assignment partitioning short address switch number port number assigning switch numbers part reconfiguration 
forwarding tables filled direct packet source containing destination short addresses switch control processor host attached identified port 
address forwarding tables point cause packet discarded 
forwarding tables discard packets arrive switch port legal route addressed destination packets may occur bits destination short address corrupted transmission 
host autonet discovers short address sending packet address 
address directs packet control processor local switch 
processor told port packet arrived knows switch number 
reply packet containing host short address 
forwarding tables switch reflect packet addressed back reverse channel link received 
packets sent host address looped back host 
feature host test links network 
packet addressed ffff host switch delivered host ports network 
section describes flooding pattern 
addresses similar way 
addresses reserved hop packets switches 
switch forwarding table directs packet addressed transmitted numbered local port packet port control processor port directs transmission port packet port 
scheduling switch ports appropriate entry read switch forwarding table step delivering packet scheduling suitable transmission port 
scheduling needs done way avoids long term starvation particular request 
availability xilinx programmable gate array allowed problem solved simple strategy implementing strict come considered scheduler 
principles computer systems illustrates scheduling engine contains queue forwarding requests 
queue slots columns 
slots required head line blocking port request scheduling packet time packet head fifo considered 
queue slot remember result forwarding table lookup number receive port requesting service 
request arrives scheduling engine request shifts right queue slot free 
periodically vector representing free transmit ports enters scheduling engine right 
vector matched occupied queue slots proceeding right left arrival order requests 
forwarding request turn opportunity capture useful free ports 
request alternative ports broadcast capture free transmit port matches requested port vector 
multiple matches occur free port lowest number port chosen 
alternative ports single match allows satisfied request removed queue newer requests moved right 
satisfied request output scheduling engine set crossbar allowing packet transmission 
incoming request link units control valid output port mask cast input port control valid output port mask cast input port queue slots 
control valid output port mask bits cast input port scheduling engine switch output ports available output ports link units connection info crossbar request simultaneous ports broadcast accumulate free transmit ports match requested port vector 
case requested ports remain unmatched vector free ports proceeds newer requests minus ports previously captured 
matches complete needed transmit port set satisfied broadcast request removed queue 
crossbar set forward receive port requested transmit ports packet transmission started 
scheduling engine accept schedule request ns able process requests second 
handout 
autonet handout 
autonet principles computer systems notice scheduling engine allows requests serviced order useful free ports suitable older requests 
queue jumping allows requests scheduled faster come served discipline 
notice broadcast request effectively get higher higher priority head queue 
request choice free transmit ports time needed port free broadcast request reserves 
broadcast request guaranteed scheduled eventually independent requests receive ports 
port state monitoring goal automatic operation requires network keep track set links switches plugged working determine route packets available equipment 
network notice set links switches changes adjust routing accordingly 
changes mean equipment added removed maintenance staff 
changes mean link switch failed 
autopilot switch control program monitors physical condition network 
autopilot instance switch keeps watch state external port 
periodically inspecting status indicators hardware exchanging packets neighboring switches autopilot classifies health port 
detects certain changes state port triggers distributed reconfiguration algorithm compute new forwarding tables switches 
mechanism monitoring port states layers 
lowest layer hardware link unit reports hardware status control processor switch 
layer status sampler implemented software evaluates hardware status ports 
third layer connectivity monitor implemented software uses packet exchange determine health identity neighboring switches 
stabilizing hysteresis provided skeptic algorithms 
explain mechanisms detail 
port states port state monitoring mechanism dynamically classifies port autonet switch states port state definition dead port 
checking port monitored determine attached host switch 
host port attached host 
switch port probed determine identity attached switch 
switch loop port attached port switch reflecting signals 
switch port attached responsive neighbor switch 
principles computer systems disable sw sw packets initiate reconfiguration switch switch switch loop disable packets host dead hardware port status indicators host checking enable sw packets enable packets host switch port states transitions link unit reports status bits help autopilot note changes state port 
status bits read control processor switch 
status bits indicate current condition port status bit current port condition represented flow control received link indicates host attached flow control received link allows transmission transmitter middle packet status bits indicate occurrences condition occurred bit read control processor illustrates port states shows actions associated state transitions 
explained detail sections state transitions shown black arrows responsibility status sampler shown gray arrows responsibility connectivity monitor 
actions triggered transition indicated attached action descriptions 
handout 
autonet handout 
autonet principles computer systems status bit overflow underflow accumulated port condition represented taxi receiver reported violation place flow control directive unused command value received improper packet framing fifo overflow occurred fifo underflow occurred inside packet flow control directive received panic flow control directive received fifo forwarded bytes seen packets start host flow control directive received considerable design latitude choosing exactly conditions report hardware status bits 
see switch switch links verified periodically packet exchange 
hardware status bits provide prompt hint changed 
changes interest reflect hardware status bits port status changes noticed quickly autopilot hardware status change trigger immediate verification packet exchange 
status sampler layer port state monitoring status sampler 
code runs continuously periodically reads link unit status bits 
counter corresponding status bit port incremented sampling interval bit set 
status sampler counts crc errors packets received local control processor connectivity test reply packets described section crc errors detected software 
status counts accumulated certain periods port dynamically classified states dead checking host switch 
switch boots ports initially classified dead 
state represents ports evaluated 
classified dead switch port forced send place normal flow control guarantee remote port classified neighboring switch better checking 
receiving counted error port classified dead 
port exhibited bad status appropriate period moves dead checking 
length error free period required determined status skeptic described section 
port directed send normal flow control enters checking 
port bad status counts receiving stays classified checking 
port checking status sampler waits flow control cease tries determine port switch host 
bit distinguish cases 
reflecting ports ports port switch classified switch ports receive start flow control directives sent local switch causing false 
alternate host ports send continuous sync commands flow control directives 
pattern generates bit useless port showing constant status errors classified host 
port state changed host local forwarding table updated permit communication port 
port entries forwarding table set forward suitably addressed packets port allow packets received port principles computer systems forwarded destination network 
active alternate host ports classified host switching alternate host cause forwarding table changes assuming alternate port start producing bad status counts 
port changed checking switch forwarding table set allow control processor exchange hop packets possible neighboring switch 
forwarding table change allows connectivity monitor probe neighboring switch order distinguish states switch switch loop switch 
port moves back dead states certain limits exceeded bad status counts accumulated time period 
indicated transitions back dead cause local forwarding table changed packet communication port 
side effect status sampler operation removal long term packet flow 
reading bit status sampler counts intervals flow control directives received port 
intervals occur frequently port classified dead 
associated changes forwarding table cause packets addressed port discarded preventing port causing congestion back network 
status bit allows status sampler count intervals packet available fifo forwarded progress 
count status sampler classify port dead remove service stuck due local hardware failure 
connectivity monitor transition checking switch means status sampler approves port switch switch communication 
port approved scrutinized top layer port state monitoring connectivity monitor 
state switch means autopilot know identity connected switch 
connectivity monitor tries determine uid remote port number connected switch 
connectivity monitor periodically transmits connectivity test packet port watches proper reply 
long proper reply received port remains classified switch 
non responsive remote switch cause port remain state indefinitely 
accepted reply match sequence information test packet echo uid port number test packet originator 
connectivity monitor looks source uid accepted reply packet distinguish looped reflecting link link different switch 
case connectivity monitor port switch loop ports active configuration 
case connectivity monitor sets state switch initiates reconfiguration entire network 
reconfiguration causes switches compute new forwarding tables take account existence new switch switch link possibly new switch 
connectivity monitor continuously probes ports switch states 
time may cause transitions switch shown gray arrows 
case transition switch switch network wide reconfiguration initiated remove link active configuration 
note network wide reconfiguration initiated status sampler described previous section removes approval port switch dead 
handout 
autonet handout 
autonet principles computer systems algorithms autopilot prevent links exhibit intermittent errors causing reconfigurations frequently 
status skeptic connectivity skeptic 
status skeptic controls length error free holding period required port change dead checking 
length holding period particular port depends history transitions dead transitions dead lengthen holding period intervals host switch states shorten holding period 
connectivity skeptic operates similar manner increase period connectivity responses received port changed switch switch 
skeptic limits rate unstable neighboring switch trigger reconfigurations 
sequences delays introduced skeptic algorithms adjusted 
reconfiguration routing ready describe autopilot calculates packet routes particular physical configuration fills forwarding tables consistent manner 
goals routing sure hosts switches reached sure deadlocks occur correctly operating links obtain throughput entire network 
distributed reconfiguration algorithm achieves goals developing set loop free routes link directions determined spanning tree network 
reconfiguration involves operational network switches step process 
switch reloads forwarding table forward hop switch switch packets exchanges tree position packets neighbors determine position spanning tree topology 

description available physical topology spanning tree accumulates propagating tree root switch 

root assigns short addresses hosts switches 

complete topology spanning tree assignments short addresses sent spanning tree switches 

switch computes loads forwarding table information received step starts accepting host host traffic 
host packets discarded reconfiguration process important entire process occur quickly certainly second 
note reconfiguration process configure physically separated partitions disconnected operational networks 
described previous section reconfiguration starts switches noticed relevant port state changes 
step initiating switches clear forwarding tables send tree position packets neighbors 
switches join reconfiguration process receive tree position packets turn send packets neighbors 
way reconfiguration algorithm starts running connected switches 
reloading forwarding tables step purposes 
eliminates possible interference host traffic allowing reconfiguration occur quickly 
second principles computer systems guarantees old forwarding tables exist new tables put service step coexistence lead deadlock packets routed loops 
spanning tree formation distributed algorithm build spanning tree described perlman 
node maintains current tree position local variables root uid tree level switch root parent uid port number parent 
initially switch assumes root 
switch reports initial tree position new position neighboring switch sending tree position packets retransmitting periodically acknowledgment received 
reception tree position packet neighbor port switch decides achieve better tree position adopting port parent link 
port better parent link leads root smaller uid current position leads root uid current position shorter tree path leads root length path parent smaller uid leads current parent lower port number 
switch sends tree position packets neighbors time adopts new position eventually switches learn final position spanning tree 
unfortunately switch certain tree formation process completed switches able decide move step reconfiguration algorithm 
eliminate problem extend perlman algorithm 
say switch stable neighbors acknowledged current position neighbors claim parent say stable 
transitions unstable stable back occur times switches transition unstable stable occur exactly switch root spanning tree 
switch stable believing root spanning tree spanning tree algorithm terminated switches stable 
conceptually implementing stability just requires augmenting acknowledgment packet parent link bit 
neighbor acknowledges bit set true determines tree position improve child sender tree position packet 
switch know neighbors decided children wait send subsequent am stable message 
children stable switch turn sends am stable message parent 
step reconfiguration process topology spanning tree description accumulate propagating spanning tree root switch 
accumulation implemented expanding am stable messages topology reports include topology spanning tree stable subtree 
stability moves forming spanning tree root topology spanning tree description grows 
switch thinking root receives reports children certain spanning tree construction terminated know complete topology spanning tree network 
nonroot switch know spanning tree formation terminated receives complete topology report handed new tree root step 
switch calculate load local forwarding table complete knowledge current physical topology network 
upward downward topology reports sent reliably acknowledgments periodic retransmissions 
handout 
autonet handout 
autonet principles computer systems epochs prevent multiple unsynchronized changes port state confusing reconfiguration process autopilot tags reconfiguration messages epoch number 
switch contains local epoch number bit integer variable initialized zero switch powered 
switch initiates reconfiguration increments local epoch number includes new value packets associated reconfiguration 
switches join reconfiguration process epoch greater current local epoch reset local epoch number variable match 
particular epoch starts switch change set useable switch links visible switch port state changes switch cause autopilot add local epoch initiate reconfiguration 
changes caused status sampler connectivity monitor continue operate reconfiguration 
reconfiguration algorithm operates fixed set switch switch links particular epoch 
switch sees higher epoch number reconfiguration packet involved earlier reconfiguration forgets tree position state earlier epoch joins new 
changes port state occurring long highest numbered epoch eventually adopted switches reconfiguration process epoch complete 
completion guaranteed eventually status connectivity reject ports increasingly long periods 
assigning short addresses short addresses derived switch numbers assigned reconfiguration process 
switch remembers number previous epoch proposes root topology report moves tree 
switch just powered proposes number 
root assign proposed number switch conflicting request 
resolving conflicts root satisfies switch smallest uid assigns low numbers losers 
short address formed concatenating switch number port number 
port number occupies significant bits 
host short address determined switch port attaches network 
host alternate link distinct short address 
switch control processor port number 
switches propose reuse switch numbers previous epochs short addresses tend remain epoch 
computing packet routes complete step reconfiguration process switch fill local forwarding table topology spanning tree information received root 
autonet computes packet routes direction imposed spanning tree link 
particular link defined 
switch closer root spanning tree 

switch lower uid ends switches tree level 
principles computer systems host switch link switch 
links looped back switch omitted configuration 
result assignment directed links form loops 
eliminate deadlocks allowing links introduce rule legal route traverse zero links direction followed zero links direction 
put negative packet may traverse link direction having traversed direction 
ordering imposed spanning tree packets rule deadlock deadlock producing loops possible 
spanning tree includes switches legal route tree root tree desired switch switch host send packet switch host legal route 
rule excludes looped back links useful links physical configuration carry packets 
possible fill forwarding tables allow legal routes necessary 
current version autopilot allows legal routes minimum hop count 
allowing longer minimum length routes may quite reasonable latency added switch small 
multiple routes lead source destination forwarding table entries destination short address switches branch points routes show alternative forwarding ports 
choice branch take particular packet depends links free packet arrives switch 
multiple routes allows order packet arrivals 
note rule enforced locally switch 
recall autonet forwarding tables indexed incoming port number concatenated short address packet destination 
short address corrupted transmission cause switch forward packet violation rule 
prevent possibility forwarding table entries switch correspond forwarding link link set discard packets 
performance reconfiguration implementation autopilot reconfiguration took seconds switch service network 
switches arranged approximate torus maximum switch switch distance links 
reconfiguration time measured moment tree position packet new epoch sent switch loaded new forwarding table 
initial implementation coded easy understand debug 
confidence correctness grown begun improve performance 
current version reconfigures seconds 
believe achieve reconfiguration time seconds network 
understand fully reconfiguration times vary network size topology function maximum switch switch distance 
broadcast routing broadcast deadlock packet broadcast short address forwarded spanning tree root switch flooded spanning tree destinations 
case incoming port yielded ms reconfiguration time 
handout 
autonet handout 
autonet principles computer systems number necessary component forwarding table index 
incoming port differentiates phase phase broadcast routing 
autonet flow control scheme described earlier broadcast packets generate deadlocks 
illustrates problem 
see part network including switches hosts solid links spanning tree arrow heads indicate link 
host sending packet host legal route 
packet stopped switch unavailability link zc 
long packet parts reside switches result link wy available 
time broadcast packet host flooded spanning tree 
reached switch forwarded simultaneously links vw vx spanning tree links broadcast packet flows starting arrive host arrival blocking delivery packet switch broadcast packet needs forwarded simultaneously links wb wy wy occupied broadcast packet stopped starts fill fifo input port 
long fifo continues accept bytes packet continue flow switch spanning tree links 
fifo gets half full flow control tell sending 
result sending path 
point deadlock 
principles computer systems complete sending broadcast packet 
broadcast packet finish arriving link zc free break deadlock 
debugging monitoring main tool underlying autonet debugging monitoring facilities source routed protocol srp allows host attached autonet send packets receive packets switch 
source route sequence outbound switch port numbers constitute switch switch path packet source packet destination 
source route embedded data part srp packet 
stage path packet received interpreted forwarded switch control processor 
forwarding step done destination short address delivers packet control processor switch source route 
delivery srp packets depends constant part switch forwarding table permits hop communication neighbor switches 
srp packets get routing packets 
particular srp packets continue reconfiguration 
srp developing set tools debugging monitoring autonet 
example autopilot keeps memory circular log events associated reconfiguration 
log entries timestamped local clock values 
srp protocol allows autonet host retrieve log 
normalizing timestamps merging logs switches complete history reconfiguration displayed 
merged log powerful tool discovering functional performance anomalies 
protocol layered srp allows switch state variables retrieved including forwarding table 
protocol recover physical network topology current spanning tree built 
tracking difficult bug usually requires adding statements autopilot enter extra entries log downloading new version autopilot waiting switches boot new version triggering problem retrieving logs inspecting 
debugging method just cumbersome version adding print statements program 
generic lan generic lan interface host software hides differences autonet ethernet client software 
simplify implementing defined client autonet packets consist byte autonet header followed encapsulated ethernet packet 
differences hidden clients 
autonet packets may contain data ethernet packets 
second autonet packets may encrypted 
differences exploited clients aware autonet 
format autonet packet broadcast deadlock solution broadcast deadlock problem discussed section 
transmitter broadcast packet ignores flow control commands broadcast packet reached receiver fifo big hold complete broadcast packet transmission began start command 
example switch ignore handout 
autonet handout 
autonet principles computer systems bytes field destination short address source short address autonet type type shown encryption information destination uid source uid ethernet type data byte limit broadcast ethernet bridging crc destination short address field part packet examined switches packet traverses network 
contains short address host switch control processor packet directed special purpose address broadcast address 
source short address receiving host switch learn short address packet sender 
type field identifies format packet 
format described encapsulated ethernet packets 
reconfiguration srp special switch diagnostic protocols different autonet type values 
large fraction header consists encryption information 
encryption header details omit receiving controller decide decrypt packet part packet decrypt key memory place packet decryption 
encryption facilities master key encryption scheme 
complete description awaits experience facilities provide secure communication 
destination uid source uid ethernet type fields form header ethernet packet encapsulated autonet packet 
data field may bytes length normal autonet packets broadcast packets packets bridged ethernet constrained byte ethernet limit 
crc field generated checked controller 
occasionally hosts packets placing wrong short address header 
happen example short address changes network reconfiguration 
receiving host responsible checking destination uid packet discarding packets 
receiving host filtering multi cast uids 
function done autonet driver software firefly done controller deemed necessary avoid overloading host 
learning short addresses order hide differences addressing autonet ethernet maintains cache mappings bit ethernet uids short addresses 
autonet driver updates uid cache observing correspondence source short address source uid fields arriving packets necessary sending address resolution protocol arp requests 
arp reply sent autonet contain correct source short address autonet header 
transmitting packet autonet obtains destination short address cache lookup keyed destination uid 
principles computer systems autonet host boots knows short addresses address ffff reaches hosts autonet address reaches local switch 
host contacts local switch obtain short address inserts source field packets transmits 
host uses algorithm transmitting receiving packets receiving source short address entered cache entry source uid timestamp updated cache entry 
packet sent broadcast short address addressed uid receiving host broadcast uid sending host longer knows receiver short address arp response immediately sent sending host order update cache entry 
transmitting cache entry destination uid short address entry copied packet transmitted 
necessary new cache entry created giving short address uid ffff broadcast short address 
cache entry updated seconds prior updated seconds action taken 
arp request sent short address cache entry 
response received seconds short address cache entry set broadcast short address action equivalent removing entry cache 
packet transmitted larger maximal broadcast packet short address destination unknown packet discarded arp request sent place 
algorithm attempt maintain cache entries host arp packets sent host failed respond packet 
arp packets usually directed known address destination broadcast 
packets sent broadcast short address real short address destination unknown 
typically case packet sent pair hosts packets sent host crashed changed short address 
fortunately higher level protocols seldom transmit large numbers packets hosts respond total number packets sent broadcast short address quite small 
necessary review algorithm higher level protocols behave way commonplace 
algorithm generates additional packets take seconds update cache short address changed 
order minimize delays seen higher level protocols hosts broadcast arp response packet short address changes hosts update caches immediately 
short addresses change quite infrequently lead large number broadcasts 
number broadcasts type excessive alternative approach send packets hosts short address cache entries updated 
effect updating caches hosts changed short address 
current techniques managing short addresses hosts change short addresses causing protocol timeouts generate little additional load network hosts 
code accessing short address cache adds vax instructions transmit path receive path 
handout 
autonet handout 
autonet principles computer systems bridging bridge device sits networks forwards packets 
differs gateway bridge usually transparent protocols data link layer 
differs packets need appear sides bridge 
existing ethernet bridges forward packets ethernet appears host network wish receive packet 
observing traffic networks learning side host 
destination network location destination unknown forward packet 
implemented software enables firefly function ethernet bridge autonet bridge autonet ethernet bridge 
normally variation easier understand operation considering bridge 
autonet bridge slightly complicated ethernet bridge short address useful outside single autonet 
autonet bridge forwards packet modify short addresses header 
destination short address techniques described previous section source short address simply short address bridge destination network 
ethernet bridge receives packets attached ethernets autonet bridge receives broadcast packets packets sent short address 
autonet bridge receives fraction packets attached networks forwards packets receives 
forwarding packets autonet bridge responds arp packets hosts known network 
bridge unsure location host respond arp requests immediately sends arp requests network responds original arp request destination responds 
hosts bridged autonet bridge behaves large number hosts sharing short address 
autonet ethernet bridge variation normally extra complications 
refuses forward encrypted packets packets longer maximum ethernet size forwarding arranged special encapsulation protocol 
bridge marks header packets ethernet indicate autonet hosts attempt encrypted communication long packets talking source host 
bridge adds removes autonet headers packets forwarded networks 
arp packets autonet dealt previously described forwarded ethernet 
location ethernet hosts deduced client packets send way ethernet bridges 
autonet ethernet bridge built firefly processors devoted forwarding packets executes ethernet driver thread executes autonet driver thread 
second bridge discard small packets bytes forward small packets forward maximum size ethernet packets 
bridge limited cpu dealing small packets speed bus dealing large packets 
latency bridge millisecond small packet 
bridge uses uid cache remember hosts network map uids short addresses autonet hosts 
single cache requires uid network 
principles computer systems managing alternate links host connected autonet links time 
autonet driver responsible deciding link switching alternate link active link fails 
normal operation driver sends packet local switch seconds confirm host short address verify link works 
controller reports link error switch fails respond promptly driver tries contact local switch vigorously 
local switch responded seconds driver switches links 
switching links driver forgets short address tries contact local switch attached new link 
switch responds host advertises new short address continues 
response driver switches back link seconds 
link operational host switch seconds contact local switch 
driver interface lets client program switch active link demand gather error rate statistics 
alternate link tested necessary replaced needed 
current timeouts link failover quite long expect reduce significantly order meet client failover requirements 
mechanism sufficient allow switch fail disrupting higher level protocols 
enhancement protocol switch host allow driver choose working links connected different autonet partitions selecting larger partitions 
experience far indicates partition extremely connected autonet improvement marginal benefit 

accumulate operational experience autonet 
initial experience confirms goal largely automatic operation network arbitrary topology active switches realistic 
autonet service network workstations src 
new distributed file system coming online servers autonet 
reconfiguration time reduced second ceased receiving complaints users new network 
reconfigurations seconds users complained dropped connections rpc call failures 
symptoms especially noticeable release new version autopilot caused reconfigurations quick succession 
limit disruption caused release new autopilot versions making compatible versions propagate slowly 
users find autonet indistinguishable ethernet 
far autonet higher bandwidth largely masked 
autonet service limited time learned useful lessons 
improvements switch hardware iteration 
significant change allow control processor update forwarding table resetting switch 
resetting destroys packets switch 
coupling resetting reloading causes initial forwarding table reload reconfiguration destroy tree position packets making reconfiguration take longer 
incremental reloads forwarding table isolate problematic host links normal operation fairly disruptive design 
handout 
autonet handout 
autonet principles computer systems amusing surprise caused fact link reflects signals 
link occur example host network turned 
packet addressed particular host reflected retransmitted repeatedly unicast packets disruptive 
broadcast packets matter 
reflected broadcast packet looks new broadcast packet forwarded spanning tree root switch flooded spanning tree hosts course reflected reflecting link 
broadcast storm results hosts network receiving thousands broadcast packets second 
fortunately transition terminated causes status counted link unit cause status sampler classify link broken remove forwarding table 
believe better solution problem packets traveling direction link look different traveling direction 
example different start flow control commands 
link unit automatically discard packets headed wrong direction 
hardware change host controllers transmit host flow control directive alternate port 
change simpler autopilot detect switch posts connected alternate host ports 
lessons quite mundane 
female connectors host cabinet kits switch link units flats threaded barrel allow wrench mounting 
flats cable difficult hard get threads started correctly 
connectors flats threads better 
autopilot provided series interesting lessons 
distributed program demonstrated series instructive bugs plan document report 
reminded hard bugs find packet traffic switches observed directly limited debugger facilities available 
merging logs switches powerful technique function performance debugging synchronizing timestamps individual logs done high precision merged log useful 
getting status sampler connectivity monitor hardware skeptic connectivity skeptic algorithms structured tuned smooth operation hard 
achieving responsiveness stability required iterations design 
iterations probably occur 
expect continued service network provide lessons expose areas improvements performance reliability 
planned autonet includes building higher speed controllers developing network monitoring management tools improving performance reconfiguration understanding reconfiguration time varies network size topology encryption facilities support secure authenticated communication applying autonet architecture faster links 
interested exploring modified algorithms perform local reconfigurations quickly global reconfigurations required finding ways partition large installations separately reconfigurable regions understanding performance characteristics different topologies different routing algorithms 
learn write autonet installation guide 
network autonet widely employed simple recipes developed designing topology physical configuration 
number switches pattern switch switch handout 
autonet principles computer systems host switch links determine network capacity reliability cost 
site personnel need detailed guidance determining reasonable pattern follow installing network growing meet increased load 
autonet grew conversations andrew birrell butler lampson chuck thacker michael schroeder summer 
roger needham explored architectural options 
manolis worked preliminary switch design 
michael burrows primarily responsible host bridge software help michael schroeder 
hal murray help chuck thacker designed implemented bus controller responsible wiring building 
tom responsible switch control program switch diagnostics 
tom michael schroeder worked improving performance reconfiguration 
ed satterthwaite designed implemented switch help john dillon chuck thacker 
chuck thacker worked scheme full duplex signaling single cable designed considered router 
tom leslie lamport invented spanning tree algorithm 
michael burrows andrew birrell developed short address learning scheme 
bill mechanical assembly switches 
herb checked switches controllers diagnosed repaired 
michael schroeder technical project leader 

advanced micro devices 
bit cmos microprocessors preliminary 
am 
publication sunnyvale ca march 

advanced micro devices 
data processor 
am 
publication july 

advanced micro devices 
integrated circuits preliminary 
am am 
publication sunnyvale ca may 

american national standard information systems 
fiber distributed data interface fddi 
token ring media access control mac 
ansi standard 
american national standards institute 

american national standard information systems 
fiber distributed data interface fddi 
token ring physical layer protocol phy 
ansi standard 
american national standards institute 

cooper kung sansom steenkiste design nectar network backplane heterogeneous multicomputers 
proceedings third international conference architectural support programming languages operating systems boston ma april acm new york 

birrell programming threads 
research report dec systems research center palo alto ca 

birrell guttag horning levin synchronization primitives multiprocessor formal specification 
proceedings eleventh acm symposium operating systems principles austin texas november published operating systems review 

birrell nelson implementing remote procedure calls 
acm transactions computer systems february 

ethernet local network reports 
tech 
rep csl xerox palo alto research center palo alto ca 

digital equipment microsystems handbook appendix bus 
eb 
west ma 

low cost outboard cryptographic support sp 
submitted thirteenth national computer security conference oakland ca 

lee boulton high speed network uses fiber optics 
electronics week october 
handout 
autonet principles computer systems 
institute electrical electronic engineers 
draft ieee standard 
new internetworking systems management part mac bridge standard 
available global engineering documents irvine ca 

motorola bit microprocessors user manual 
prentice hall 

perlman algorithm distributed computation spanning tree extended lan 
proceedings ninth data communications symposium whistler mountain british columbia september acm new york 

plummer ethernet address resolution protocol converting network protocol addresses bit ethernet address transmission ethernet hardware 
network information center rfc sri international menlo park ca 

extending modula build large integrated systems 
ieee software november 

thacker stewart satterthwaite jr firefly multiprocessor workstation 
ieee transactions computers august 

tobagi fratta high performance integrated services local area network 
ieee journal selected areas communications sac november 

xilinx programmable gate array data book 
xilinx san jose ca 
handout 
autonet 
