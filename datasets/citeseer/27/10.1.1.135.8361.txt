top induction logical decision trees hendrik blockeel luc de raedt katholieke universiteit leuven department computer science celestijnenlaan heverlee mail blockeel luc cs kuleuven ac january top induction decision trees tdidt popular machine learning technique 
till mainly propositional learning seldomly relational learning inductive logic programming 
main contribution logical decision trees possible tdidt inductive logic programming 
implementation top induction logical decision trees tilde system experimentally evaluated 
top induction decision trees quinlan quinlan best known succesful machine learning technique 
solve numerous practical problems 
employs divide conquer strategy di ers rule competitors clark niblett aq michalski covering strategies cf 
bostrom 
attribute value learning propositional concept learning tdidt popular covering approach 
rst order approaches concept learning learning systems decision tree techniques watanabe rendell bergadano giordana eld inductive logic programming approach totally ignored 
exception bostrom systems transform ilp problems propositional form linus lavrac dzeroski indigo wysotzki ilp system uses covering approach 
main reason divide conquer approaches popular inductive logic programming lies discrepancies clausal representation employed inductive logic programming structure underlying decision tree 
main contribution logical decision tree representation corresponds clausal representation 
logical decision trees upgrade attribute value representations classical tdidt algorithms generalize earlier watanabe rendell 
logical decision tree representation easy design implement algorithm top induction logical decision trees adapting heuristics 
results tilde system main topic 
tilde works learning interpretations paradigm introduced de raedt dzeroski icl system de raedt van laer 
tilde incorporated novelties inductive logic programming discretization numeric attributes van laer fayyad irani dynamic lookahead facilities 
report number encouraging experiments domains mutagenesis nite element mesh design musk molecules 
text organized follows 
section brie discuss ilp setting 
section introduce notion logical decision tree 
section algorithm induction logical decision trees section prototype implementation algorithm discussed 
section contains empirical evaluation implementation nally section conclude touch related 
learning problem assume familiarity prolog programming language see bratko 
essentially learning interpretations paradigm inductive logic programming introduced de raedt dzeroski icl de raedt van laer related inductive logic programming settings de raedt 
paradigm example prolog knowledge base set definite clauses encoding speci properties example 
furthermore example classi ed nite set possible classes 
may specify background knowledge form prolog knowledge base 
formally problem speci cation set classes set classi ed examples theory find set de nite clauses prolog eh andh class example fcg 
example running example imagine situation engineer check set machines 
machine consists parts may worn need 
replaced engineer manufacturer machine 
machine contains worn parts replaced engineer manufacturer 
set examples example corresponds machine example class keep worn gear worn chain example class worn engine worn chain background knowledge example class worn control unit example class keep worn chain background knowledge replaceable gear replaceable chain replaceable engine replaceable control unit valid hypothesis written clausal logic class send back worn replaceable due restrictions hypothesis imposed logical decision trees notion coverage essentially known label learning interpretations logical decision trees de nition binary decision tree bdt de ned follows class bdt called leaf 
notation class denote class indicated test outcomes bdt 
called internal node 
called left right subtrees notation test left right refer components respectively 
de nition decision tree ldt binary decision tree ful ls constraints test rst order logic conjunction literals avariable introduced node means occur higher nodes occur right subtree second requirement necessary follows logical meaning ldt speci ed 
short corresponds fact newly introduced variables quanti ed conjunction right subtree relevant conjunction fails conjunction fails sense speak tree 
classifying example logical decision tree done shown algorithm 
example prolog database test corresponds checking query succeeds example recall hypothesis stated example machine sent back manufacturer contains worn parts replaced engineer kept place 
rule represented decision tree way replaceable worn ppp keep keep interpretation corresponding example minimal herbrand model procedure classify true root leaf test test left right return class classi cation example ldt order formalize notion logical decision tree de ne mapping logical decision trees logic programs 
mapping established show prolog program equivalent tothe ldt 
logic program derived logical decision tree way 
node tree associate things 
de nite clause de ning nullary predicate node di erent predicate de ned 
horn query query predicates de ned nodes higher tree idea association queries nodes tree classify example example sorted tree 
sorting process speci node encountered implies associated query succeeds example 
converse holds query succeeds example node encountered time classi cation process 
de nite horn clauses de ne invented predicates needed express queries 
implies running query associated leaf equivalent sorting example tree checking sorted leaf 
tree transformed logic program consists clauses containing class indicating literal head body query associated leaf tree 
algorithm illustrates process associating clauses queries nodes 
proceeds manner top node clause test empty query associated 
internal node associated clause associated query query associated left subtree 
query associated right subtree 
internal node associated query clause test associated number unique node 
leaf associated query clause class added logic program class indicated leaf 
procedure associate leaf assign unique predicate ci node query assert ci test query left test query right ci associate left associate right class query assert class procedure query associate mapping ldt logic programs may strange right subtree algorithm associates query test expected 
reason queries left right subtree complementary example sorted node succeeds example exactly queries succeed 
clear succeeds exactly asc strictly stronger condition succeed 
case test test test shares variables clause succeeds exists substitution test true complementary clause state substitution 
clause succeeds exists substitution true test false 
test variables common 
illustration example 
example shows queries clauses associated node tree built previous example 
example illustrates fact query associated right subtree ought contain negation predicate associated node just negation added literal 
di erence worn replaceable worn replaceable worn fact rst query succeeds worn part machine replaceable replaceable second query succeeds worn parts worn parts replaceable 
di erence introduces asymmetry test occur propositional case adding literal adding negation literal worn worn replaceable worn qq replaceable keep keep worn worn replaceable worn worn worn class worn class keep worn class keep clauses queries associated nodes tree logic program derived tree 
means may allow negated literals queries 
example possible represent theory ldt logic program matter predicate replaceable negation available 
logic program shown executed prolog 
possible derive simpler cient prolog program cut operator 
adding cut clause negated literals program super uous 
cuts re ects fact choice subtree continue deterministic example sorted left subtree node need check sorted right subtree complementary nature subtrees guarantees 
example prolog program equivalent logic program 
class worn replaceable 
class keep worn 
class keep 
course simpli ed bit second third clause predict class second clause super uous 
drawback cuts order clauses appear important 
clauses occur order leaves associated 
implies clauses class needed possible remove clauses predict class 
algorithm induction logical decision trees section algorithm top induction logical decision trees 
recall input learning algorithm consists set labelled examples background knowledge language stating kind tests allowed decision tree 
procedure homogeneous frequent class leaf qb best element heuristic test qb fe eje bj fe eje left right algorithm logical decision tree induction algorithm employs basic tdidt algorithm 
heuristics implemented exactly gainratio heuristic post pruning algorithm 
point algorithm di ers computation tests placed node 
classical re nement operator subsumption 
clause subsumes clause substitution 
re nement operator subsumption operator mapping clauses sets clauses clause subsumes operator instance add literals clause unify variables 
decision tree induction algorithm re nement operator adds literals clause 
node re ned set conjunctions possibly put node computed query associated node de ned algorithm 
declarations de ning re nement operator input parameter algorithm 
determines language bias separate language bias speci cation needed 
refer language bias speci cation mean de nition algorithm shown builds logical decision tree set examples query associated node passed third argument procedure 
background knowledge assumed available implicitly 
practical implementation tilde algorithm implemented system called tilde top induction logical decision trees 
section discuss language de nition formalism chosen number practical aspects 
heuristic function implementation tilde strongly quinlan successful systems learning decision trees attribute value context 
things re ected heuristic value assigned tests 
gain ratio test evaluate 
suppose basis clause set examples partitioned clause succeeds doesn 
gain clause di erence entropy ofe weighted average entropies 
splitting information clause maximal gain clause success ratio number examples succeeds divided total number examples achieve 
larger clauses split examples evenly 
gain ratio de ned gain divided splitting information 
quinlan quinlan mentions ratio better criterion usefulness clause gain tests inherently stand chance leading high gain really relevant 
quinlan notes especially case test outcomes outcomes possible case implementation clause succeed fail gainratio usually chooses better tests gain quinlan 
tests smaller gain average gain tests considered ltered done gain ratio criterion unstable clauses low splitting information small denominator computation heuristic lead accidentally large heuristic values 
current implementation allows user choose gain gainratio heuristic experimentation tilde shown trends mentioned quinlan gainratio usually performs better gain 
reason experiments shown section performed gainratio criterion heuristic 
post pruning trees second feature implementation copied ability post prune trees 
possible complex tree scoring higher accuracy training data performs accurately test set simple tree due tting 
joining leaves tree respect pro table 
re ected accuracy training data probably decreases quinlan proposes estimate error rate tree expected score test set 
estimation statistical reasoning taken large grain salt quinlan practice 
tilde uses error estimate prune induced trees 
returns unpruned pruned versions trees comparison 
stopping criterion moment tilde uses conservative stopping criteria 
splitting example sets set small split minimal number cases leaf contain speci ed user 
correspondence stopping criterion 
precisely signi cance test checking test added signi cantly better random test included 
gives rise tting post pruning mechanism compensates 
implicit assumption incorrectly classi ed examples sort rare events occur randomly set examples small frequency frequency estimated 
language speci cation mentioned speci cation re nement operator language bias coincide 
tilde speci cation basically consists conjunctions put nodes tree 
modes types variables conjunction added maximal number occurrences conjunction allowed clause 
di erent modes allowed means variable uni ed existing variable means need uni ed existing variable preceding symbol means new variable 
types need speci ed separately guarantee derived logic program type conform 
example speci cation tells tilde conjunction occur maximally times associated query node speci es possible uni cations variables variables query 
node associated query re ned ways literal added rst argument second argument new variable third argument literal simultaneously added argument yields possible re nements 
cations type name int real 
type name 
type int real 
type real 
queries re nements dynamic re nement dynamic re nement generalization generation constants ilp systems provide 
muggleton prolog system muggleton instance allows user specify constant variable put certain position literal 
system determine meaningful constants generate clauses constants lled 
tilde dynamic re nement inspired called call handling procedure implemented claudien system de raedt dehaspe muggleton page 
literal added clause clear time re nement exactly literal look possible user leave parts blank specify predicate called time re nement determine missing information 
tilde way specifying literals generated dynamically follows notation stems progol system specify constant required position 
variable list variables occurs generating call conjunction 
context consisting current set examples query re ned generating call instantiates away sense add conjunction clause 
literal added 
numbers specify maximal number examples generating call called maximal number instances allowed return example 
instance literal introduced comparing age age limit specifying manually literals added 
denoting bound construct find suitable age limit nd suitable age limit ought instantiate suitable number literals added clause variable occurs clause 
example constant generated predicate isknown advance 
principle literal generated 
possible constant generator succeeds multiple times generating multiple values case value gives rise new set literals 
way possible simulate behaviour ilp systems 
foil quinlan instance determine constants values ectively occur data literal 
comparison ages constant occurring test age occurs data 
easily simulated way age person age age predicate determinate normal return instantiation example 
generating call background knowledge independent example rst number 
numbers allowed clear cases change outcome 
dynamic re nement useful handling numerical data 
rules generating literal added speci ed completely user computation done 
instance speci cation regression cause tilde perform regression variables generated assuming regression predicate implemented way 
regression line check value predicted supposing bound variables 
course meaningful right type 
example regression performed time corresponding test considered 
possible perform regression store results simply retrieve tree induction 
full prolog available user implementing literal generation rules possible 
may mechanism bit powerful number handling sense things possible needed user needs programming order 
practice prolog rules su ce specify wanted complex programs needed exotic tests 
rst impressions dynamic re nement provides expressive way adapt tilde re nement operator speci numerical domains 
lookahead ilp systems greedy algorithms fact contrast attribute value setting possible conjunction may need added provide gain 
conjunction may introduce extra variables clause relevant classi cation 
implies gain ratio heuristic may conjunctions introducing new variables 
problem acknowledged long time ago greedy ilp systems method alleviating 
foil system quinlan instance handles determinate literals result gain introduce new possibly interesting variables adding automatically clause 
tilde system detect lookahead interesting certain literals ers user way specify 
facts form lookahead added language speci cation order tell system conjunction matching template conj added immediately try addition instants conj test 
instance facts neighbour 
lookahead neighbour circuit 
specify neighbour literal added bound variable rst argument bound free variable second argument adding neighbour tilde try test new variable circuit property 
test turns best situation conjunction literals test added tree 
possible rst literal added second literal ers advantage 
lookahead unbounded literal occurs left right lookahead speci cation 
tilde prohibit uses extra parameter max lookahead limits depth lookahead performed 
instance context mutagenesis dataset discussed section max lookahead 
lookahead bond element atom 
lookahead bond bond 
bond 
cause tilde add tests bound variable variables free bond 
bond atom cl 
bond bond atom 
words tilde inspect existing atoms atoms near existing atoms molecule near meaning connected bonds 
course cases lookahead leads excessive computational costs lookahead caution avoided possible 
lookahead preferable literal depend largely semantics literal 
guidelines allowing system decide come handy hard specify general guidelines 
tilde leaves user decide lookahead needed 
user clear idea neighbour example taken mesh dataset clear edges neighbours neighbour lead gain checking neighbouring edge certain property 
noted neighbour predicate determinate rst argument succeed second arguments 
re nement operator precise de nition re nement operator tilde uses terms language speci cation 
means account type lookahead speci cations 
rst de ne auxiliary operator follows times form mode conform type takes account speci cations lookahead 
de ning operator follows cj lookahead maximum steps allowed may nity 
discretization motivation discretizing numeric data twofold ndings attribute value learning 
hand ciency concern 
hand discretizing data may obtain higher accuracy rates 
current procedures ilp handle numbers foil employed older versions claudien quite expensive 
reason candidate clause values numeric variable tobe generated considered tests 
large databases huge resulting high branching factor search 
furthermore approaches discretization done runtime repeated candidate clause 
clause re nement lot redundant may done 
tilde generate actual learning starts interesting thresholds test 
thresholds computed candidate clause considered secondly number interesting thresholds considered re ning clauses kept minimum yielding smaller branching factor 
yielded positive results attribute value learning cf 
catlett 
approach discretization user identify relevant queries variables discretized template form discretized query varlist 
resulting numeric attributes indicated varlist discretized simple modi cation fayyad irani method 
details fayyad irani method fayyad irani dougherty 
di erences apply due fact example may multiple values numeric attribute sum weights numbers examples appropriate places fayyad irani formulae count real values threshold sum weights attribute value case values weight example value attribute 
sum weights values numeric attribute query example equals 
stopping criterion fayyad irani discretization method strict sense method generates subintervals 
applying criterion tilde subintervals generated 
tilde discretization method takes parameter desired number thresholds generated 
experimental evaluation performed experiments tilde system broad range problems 
mutagenesis dataset mutagenesis data frequently ilp benchmark 
aim discriminate mutagenic molecules non mutagenic ones looking molecular structure atoms bonds consists 
srinivasan introduces knowledge data 
experiments done mutagenesis dataset 
brie describe backgrounds 
note 
atoms molecule bonds type bond single double 
element atom element types may distinguished tests continuous attributes atom charge allowed attributes describing molecule added experts know relevant explicit knowledge complex structures benzene rings added comparison systems srinivasan compares accuracies complexities induced theories ilp systems foil progol time consumed induction process 
performed experiments levels background knowledge 
table compares tilde results progol systems accuracies progol foil indigo tilde times progol foil indigo tilde theory complexity progol foil tilde table accuracies times complexities theories progol foil tilde tested mutagenesis data 
figures progol foil srinivasan indigo wysotzki 
conclude tilde results par progol far accuracy concerned 
result indigo suggests possible better 
time complexity better progol compared foil better worse 
theory complexities hard compare di erent format theory 
tilde average number nodes induced trees progol foil number literals 
problems comparing results nodes contain literal cases number literals tree added parentheses tilde learns theory classes time 
transforming tree prolog program counting rules class yield better way comparing theories prolog representation logical decision tree inherently complex literals duplicated comparison unfair 
aswell transform prolog program returned foil progol ldt compare complexity ofthe ldt representations favour tilde 
light problems results table reasonable say tilde performs better foil di erence quite large relation progol probably performs slightly worse 
interesting drawn experiments authors bostrom watanabe rendell mentioned fact rule systems return average compact theory decision tree induction systems actual induction method probably uence representation 
progol performs exhaustive search foil tilde may larger impact theory complexity fact rule 
lookahead lookahead background accuracy time accuracy time background background background background table comparison tilde performance lookahead mutagenesis dataset impact lookahead wehave lookahead case particularly useful bonds added 
bonds seldomly cause signi cant gain provide links atoms may table compares results allowing lookahead bond literals 
lookahead literal allowed atom occurs tree tilde test immediate neighbours atoms removed 
principle possible extend neighbouring atom bonds possible 
table suggests lookahead may er slight advantage results convincing 
mesh dataset mesh dataset ilp muggleton times benchmark compare ilp systems 
engineering applications objects described nite element meshes 
resolution mesh depends shape object neighbouring objects 
learning task nd relationship shape object resolution mesh 
speci cally edge object number parts edge divided predicted 
number depends edge neighbouring edges learning ilp task 
table compares tilde performance dataset state ofthe art systems 
foil quinlan general purpose ilp system 
quinlan learn functional de nitions 
fors specialized learning functional de nitions 
indigo wysotzki uses transformational approach ilp rst transforms learning data propositional representation 
propositional decision tree induction system actual induction process 
figures table copied quinlan foil fors wysotzki indigo 
musk dataset musk dataset studied dietterich dietterich donated uci repository merz murphy 
dietterich data study called multiple instance problem example corresponds multiple feature vectors classi ed feature vectors certain properties 
speci case musk dataset examples molecules di erent conformations 
molecules classi ed musk non musk molecules 
tilde foil indigo indigo fors total table comparison tilde performance systems mesh dataset musk activity molecule measured di erent possible conformations molecule computed known ofthese conformations causes musk activity 
su cient molecule musk conformation order molecule musk 
molecule musk known conformations musk known ones 
multiple instance problem poses problems propositional learners neural networks 
feature vector conformation class conformation musk non musk known 
dietterich dietterich developed number algorithms explicitly deal multiple instance problem practically solving problem cases theory represented set axis parallel rectangles apr 
inductive logic programming systems su er multiple instance problem 
quanti ed variables predicate logic possible rules properties 
example positive 
musk problem simply conformation 
reason expect tilde ilp system serious problems musk dataset 
musk data divided datasets small dataset musk important conformations molecule large musk conformations molecule 
feature vectors attributes counting class attribute tuple identi ers refer 
large data set consists megabytes data logical representation tilde megabytes 
ilp standards large database 
results musk dataset musk dataset tried language biases 
features conformations molecule tested tests tree single conformation example 
asl tests check value belongs certain interval simple inequality tests simple language bias sense gives system information form theory 
allows rules molecule non musk need conformation bit counterintuitive musk activity molecule usually traced back conformation 
second language bias demands rule tests conformation molecule non musk nally intervals inequality tests molecule non musk constants boundaries tilde built discretization procedure 
discretization performed separately ofthe attributes 
number bounds discretization procedure return parameter system set experiments 
number intervals number bounds 
gures shown obtained tenfold cross validation 
bound test skipped 
bound bounds bounds bounds table taken dietterich allows compare tilde performance algorithms 
algorithms marked asterisk adapted speci cally multiple instance problem 
algorithm correct iterated discrim apr gfs elim kde apr gfs elim count apr gfs positive apr positive apr backpropagation pruned interesting result resulted theories approximately part 
precisely algorithm expected automatically nd rules tests conformation 
rules perform equally 
di erence inequality tests intervals small 
suggests inappropriate bias reasonably results obtained 
table algorithms partitioned dimensions appropriateness bias ability cope multiple instance problem 
class algorithms best result musk dataset shown 
mult 
inst 
mult 
inst 
appr 
bias appr 
bias results lend support dietterich claim worse performance backpropagation networks compared apr attributed inability cope multiple instance problem fact systems search actively apr representation 
multiple instance problem accounts large part di erence 
clear compare tilde system resembles di erence accuracy 
appropriate bias increases predictive accuracy lot compare non multiple instance apr algorithms neural nets re ected experiments tilde 
possible explanation fact changing language bias tilde little di erence theories tilde search heuristics optimized speci kind theories discretization algorithm uses 
changing language bias matter syntax search strategy aspect ignored tilde language bias speci cation 
results musk dataset wehave run experiments musk dataset 
set contains irrelevant information conformations molecule making problem bit harder 
test run language bias discretization bounds attribute second time bias bounds attribute de nes intervals possible tests attribute rst test 
table compares tilde results mentioned dietterich 
algorithm correct iterated discrim apr gfs elim kde apr tilde tilde gfs elim count apr positive apr backpropagation gfs positive apr pruned shows di cult dataset multiple instance problem prominent tilde results comparable dietterich iterated discrimination algorithm clearly outperforms 
related divide conquer paradigm largely ignored eld ilp cases ers number advantages covering paradigm 
attempt ll gap introduced formalized notion logical decision trees 
algorithm top induction logical decision trees practical implementation algorithm takes advantage current state art propositional relation learning 
experiments performed learning system showing logical decision trees potential nding simple theories high predictive accuracy broad range problems 
induced quite fast fact current implementation ine cient prototype 
nally ability learn classes particularly advantageous multi class classi cation tasks 
logical decision trees generalization watanabe structural decision trees watanabe rendell 
extends watanabe sense idea structural decision trees generalized formalized integrated inductive logic programming techniques background declarative language bias speci cation 
state art decision tree induction techniques 
fact literal occur node logical decision tree allows tilde handle determinate literals lookahead facilities easily watanabe system 
related bostrom induction logic programs divide conquer paradigm 
main di erence different logical setting learning interpretations learning entailment aimed speci cally classi cation logic program synthesis 
bostrom implicit assumption concerning non overlapping literals re ning clause clear extent approach general 
hendrik blockeel supported flemish institute promotion scienti technological research industry iwt 
luc de raedt supported belgian national fund scienti research 
part european community esprit project inductive logic programming 
authors luc dehaspe interesting discussions pointing possibility tdidt ilp wim van laer providing highly reusable code icl system 
bergadano giordana bergadano giordana 
knowledge intensive approach concept induction 
proceedings th international workshop machine learning 
morgan kaufmann 
bostrom bostrom 
covering vs divide conquer top induction logic programs 
proceedings th international joint conference arti cial intelligence 
morgan kaufmann 
bratko bratko 
prolog programming arti cial intelligence 
addison wesley 
nd edition 
catlett catlett 
changing continuous attributes ordered discrete attributes 
yves editor proceedings th european working session learning volume lecture notes arti cial intelligence pages 
springer verlag 
clark niblett clark niblett 
cn algorithm 
machine learning 
de raedt dehaspe de raedt dehaspe 
clausal discovery 
machine learning 
appear 
de raedt dzeroski de raedt dzeroski 
order jk clausal theories pac learnable 
arti cial intelligence 
de raedt van laer de raedt van laer 
inductive constraint logic 
proceedings th workshop algorithmic learning theory volume lecture notes arti cial intelligence 
springer verlag 
de raedt de raedt 
induction logic 
michalski editors proceedings rd international workshop multistrategy learning pages 
dietterich thomas dietterich richard lathrop tomas lozano perez 
solving multiple instance problem axis parallel rectangles 
arti cial intelligence 
press 
muggleton muggleton 
application inductive logic programming nite element mesh design 
muggleton editor inductive logic programming pages 
academic press 
dougherty dougherty kohavi sahami 
supervised unsupervised discretization continuous features 
prieditis russell editors proc 
twelfth international conference machine learning 
morgan kaufmann 
fayyad irani fayyad irani 
multi interval discretization continuous valued attributes classi cation learning 
proceedings th international joint conference onarti cial intelligence pages san mateo ca 
morgan kaufmann 
wysotzki wysotzki 
learning relational concepts decision trees 
saitta editor proceedings th international conference machine learning pages july 

order regression 
phd thesis faculty electrical engineering computer science university ljubljana slovenia 
lavrac dzeroski lavrac dzeroski 
inductive logic programming techniques applications 
ellis horwood 
merz murphy merz murphy 
uci repository machine learning databases www ics uci edu mlearn mlrepository html 
irvine ca university california department information computer science 
michalski michalski hong lavrac 
aq inductive learning system overview experiments 
proceedings orsay 
universite sud 
muggleton page muggleton page 
rst order learning inductive learning higher order logic 
technical report programming research group technical report prg tr 
muggleton muggleton 
inverse entailment progol 
new generation computing 
quinlan quinlan 
induction decision trees 
machine learning 
quinlan ross quinlan 
programs machine learning 
morgan kaufmann series machine learning 
morgan kaufmann 
quinlan quinlan 
foil midterm report 
brazdil editor proceedings th european conference machine learning lecture notes arti cial intelligence 
springer verlag 
quinlan quinlan 
learning rst order de nitions functions 
journal arti cial intelligence research october 
srinivasan srinivasan muggleton king 
comparing background knowledge inductive logic programming systems 
de raedt editor proceedings th international workshop inductive logic programming 
ios press 
van laer van laer dzeroski de raedt 
multi class problems discretization icl extended 
proceedings workshop data mining inductive logic programming ilp kdd 
watanabe rendell watanabe rendell 
learning structural decision trees examples 
proceedings th international joint conference onarti cial intelligence pages 

