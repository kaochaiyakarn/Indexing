effectiveness type unboxing xavier leroy lambda inria rocquencourt compare efficiency type unboxing strategies simpler untyped unboxing optimizations building practical experience gallium objective caml compilers 
find untyped optimizations perform best case significantly better worst case 
pascal actual types data known compile time allowing compilers base data representation decisions typing information supporting efficient memory layout data structures efficient calling conventions functions 
longer true languages featuring polymorphism type abstraction ml static compile time type information determine actual run time type data static type contains type variables type identifiers 
compilers languages abandon style type data representations revert uniform lisp style data representations data structures fit common format usually word necessary boxing heap allocating handling pointer data naturally fit common format 
extra boxing involved quite expensive terms performance bottleneck certain applications especially numerical computation 
address issue number unboxing strategies polymorphically typed languages proposed rely static typing information just style representation algorithms extended cope polymorphism types rely program analyses distinct typing apply equally untyped dynamically typed languages :10.1.1.27.353
lambda authors address projet le chesnay france 
mail xavier leroy inria fr 
core ml polymorphism considered simpler alternative unboxing strategies duplicating polymorphic functions instantiation type obtain monomorphic program 
experimental evidence suggests result major increase code size remains delicate implement efficiently separate compilation context 
real challenge sml module system especially functors type abstraction structures results large quantities generic code code manipulates values representation types statically unknown 
appear viable leaving unboxing strategies mentioned alternatives 
position build practical experience unboxing strategies gallium objective caml compilers assess efficiency type unboxing 
claim unboxing strategies effective monomorphic programs numerical applications add significant overhead polymorphic programs monomorphic programs symbolic computation 
hand untyped unboxing strategies achieve performances numerical applications penalizing symbolic computations 
words best case untyped strategies strategies worst case significantly better 
remainder organized follows 
section recalls main type unboxing strategies proposed far 
section analyzes overheads incurred strategies 
section presents untyped unboxing optimizations avoid overheads 
section discusses experimental results obtained caml compilers followed concluding remarks section 
type directed unboxing type directed techniques avoiding unnecessary boxing fall classes coercions approach coercions boxed unboxed data representations inserted type specialization points generic code operates boxed representations monomorphic code take advantage unboxed representations :10.1.1.14.4810
approach particularly effective supporting efficient register calling conventions tuple arguments flattened float arguments passed float registers 
main weakness support deep unboxing inside generic data structures lists arrays unboxed elements 
run time type inspection run time representations static typing information maintained program extra arguments polymorphic functions extra components structures defining types generic code inspects runtime type expressions determine locations sizes values statically unknown types :10.1.1.27.353
earlier proposals context stack machines pass size information extra parameters full type expressions 
coercion approach approach supports arbitrary unboxing inside data structures accommodate efficient register calling conventions generic functions 
tag unboxing tagging known technique implementing dynamically typed languages lisp smalltalk 
special case run time type inspection type information attached data structures passed separately type expressions mapped small set base types efficiently encoded bit level 
tagging supports type inspection types existing values best performed large data structures space overhead storing tag negligible 
example tag unboxing show arrays handled gallium objective caml compilers 
run time system supports kinds arrays arrays pointers tagged integers arrays unboxed floats 
kinds different tag bytes array header 
operations arrays known type array type variable type generate directly correct code accessing arrays pointers floats 
array operations statically unknown type test array tag run time float array perform required boxing unboxing floating point numbers 
scheme supports fast operations float arrays known type expense extra type parameters cost slower operations generic arrays 
overheads type directed unboxing goal unboxing program run faster reducing number heap allocations pointer dereferences 
unboxing techniques add extra run time operations 
overheads unboxing techniques weighted carefully benefits 
kept mind load operations eliminated unboxing relatively operations modern processor memory hierarchy possibly load store units 
heap allocations eliminated unboxing represent significant savings 
small overheads result unboxing techniques globally efficient unboxing 
extra operations introduced unboxing source overhead extra operations introduced program code implement unboxing strategy 
coercions extra coercions introduced unboxing strategy introduce overhead boxing unboxing steps performed coercions performed different times systematic boxing strategy 
particular coercions functions involve extra function calls 
worse examples demonstrate long sequence successive unboxing boxing data 
run time type inspection propagating type information run time adds overhead polymorphic function calls arguments pass importantly heap allocation performed build tree shaped structures representing types run time 
constant type expressions entirely built compile time entail overhead loading constant pointers registers 
second source overhead testing run time type information inside generic code 
involve complex pattern matching type expressions resulting additional loads conditional branches general increase code size 
techniques proposed reduce overhead type building type inspection position independent code standard alpha powerpc loading constant pointer cheap turned load requires global pointer properly set 

tolmach uses indirect representation type expressions reminiscent explicit substitutions variable parts type expressions need passed run time 
greatly reduces runtime heap allocations type expressions requires arbitrary pattern matching type discrimination 
shao uses hash consing reduce type tests simple pointer equality tests type construction expensive 
little experimental data actual cost runtime type passing type inspection published 
figures conclusive small test programs run time type handling eliminated aggressive inlining 
morrisett reports slowdowns single module test programs completely compiler programs split separately compiled modules containing run time type tests 
believe run time type inspection fairly high price modern processors increases code size introduces lots conditional branches difficult schedule consume extra entries processor branch prediction tables 
phenomena favor code stalls expensive modern processors 
tag unboxing tagging shares costs run time type inspection 
storing tags newly allocated blocks zero cost tag merged gc information maintained case 
objective caml instance heap block tag stored word header containing block size gc marking bits 
overhead function calls extra type parameters introduced 
run time tag tests relatively inexpensive load integer comparison requiring pattern matching arbitrary trees 
drawbacks run time type inspection apply tag tests increased code size extra conditional branches 
instance objective caml polymorphic array copy function runs times slower function specialized integer arrays times slower function specialized float arrays 
gc overhead sources overhead discussed far apply generic code fully monomorphic code pays performance penalty 
case gc related overhead discussed affects programs 
unboxing strategies add significant overhead traversal memory graph performed garbage collector 
conventional fully boxed data representation strategy walking memory graph relatively efficient typically bit needs tested value distinguish pointers integers pointer word header consulted determine size block contains pointers just raw data 
unboxing strategies complicate traversal memory graph getting roots stack unboxing stack frames usually contain mixture valid pointers tagged integers raw unboxed integers floats 
non conservative garbage collector needs distinguish pointers raw data 
possibility gallium objective caml associate frame descriptors listing locations pointers frame return addresses 
finding descriptors associated return addresses stack frames interpreting adds overhead compared fully boxed model stack words valid pointers tagged integers 
handling mixtures pointers raw data heap blocks unboxing strategies result heap blocks contain pointers intermingled unboxed integers floats 
instance gallium heap block containing value type string float int list contains pointers byte offsets separated bytes raw data unboxed float 
case finding pointers contained block longer question 
gallium runtime system stores block header pointer block descriptor enumerating machine types address integer float block fields 
garbage collector decodes information follow pointers contained block 
despite various optimizations frequent special cases pointers pointers decoding block descriptors accounts fairly large part time spent garbage collection 
type directed garbage collection garbage collectors abandon tags header words altogether base traversal memory graph static type information run time type parameters polymorphic code gc time type reconstruction 
determining pointers lie inside blocks expensive previous case reading pre digested block descriptors garbage collector interpret full type expressions 
addition type information attached data cheney style breadth traversal memory graph longer feasible replaced depth traversal allocate extra heap memory storing types 
tolmach reports execution times ranging relative gallium style garbage collector small programs 
extra cost garbage collection compensated fact heap blocks smaller extra header word required 
believe important slowdowns observed relative conventional fully tagged garbage collector especially larger programs 
gc overhead unboxing strategy significant affects generic code fully monomorphic programs 
especially bad heavy symbolic processing theorem proving gc intensive unusual spend total running time garbage collection benefit unboxing optimizations computation performed tree shaped datatypes representing expressions remain fully boxed existing unboxing strategies 
symbolic processing runs slower aggressive unboxing optimizations conventional data representation main code identical garbage collector runs slower 
opinion acceptable symbolic processing ml bread butter run slower due optimizations targeted hypothetical numerical byte oriented applications 
recovering efficiency conventional garbage collector done directions 
restrict unboxing strategy produces heap blocks containing pointers unboxed data 
instance heap block containing value type float float floats unboxed marked raw data garbage collector block containing float string holds pointers float allocated separately 
sml nj objective caml go flatten records floating point numbers keeping boxed inside heap blocks 
second direction allow mixed heap blocks group pointers block 
garbage collector instructed follow fields pointers possibly null smaller actual size block 
greatly complicates access block fields block type longer contains value type followed value type instance string int string component pair composed fields block second component field 
practical difficulties storing size pointer count word block header 
untyped unboxing techniques addition type directed unboxing techniques recalled section exists unboxing techniques little typing information achieve performance type techniques usually better worst case behavior 
local unboxing boxing unboxing operations cancel function body easily eliminated straightforward dataflow analysis 
instance objective caml code 

performs float unboxing argument float boxing function result intermediate results remain unboxed 
access array performs unboxing type testing statically known float array 
trivial may local unboxing effective numerical code provided loops represented tail recursive functions intermediate language kept part current function special loop constructs intermediate language 
instance core fft benchmark see section composed fairly large function nested loops local unboxing succeeds eliminating floating point boxing unboxing function resulting assembly code looks produced compiler 
dataflow analyses local unboxing extended inter function analysis operating compilation units combining control flow analysis determine call graph escape analysis determine data structures creation sites known 
bigloo scheme compiler performs unboxing floats float arrays way achieves respectable performance numerical code 
known functions partial inlining standard trick making function calls multiple arguments efficient ml entry points function standard entry point regular calling conventions take heap allocated tuple arguments uncurried function take argument return closure curried function fast entry point arguments registers 
direct call fast entry point generated caller knows function called control flow analysis determined function flows call site provides exactly expected number arguments partial application 
cases call unknown function partial application regular call function closure generated closure points standard entry point 
standard entry point code prelude sequence dispatches arguments registers falling fast entry point save code space shared combinator dispatches arguments tail calling fast entry point stored conventional field closure 
calling known functions tuple arguments scheme essentially efficient unboxed tuples coercion unboxing scheme 
unboxed tuples better calls unknown functions known types multiple entry point scheme deals curried functions equally unboxing schemes ineffective currying 
goubault proposed elegant reformulation multiple entry point trick partial inlining problem allows tuples arguments unboxed tuples results floating point arguments results possibly 
obvious inlining function point call applying local unboxing optimization gets rid unnecessary boxing function arguments results 
functions large inlined 
goubault solution decompose functions parts ffl prelude arguments need unboxed determined local unboxing analysis ffl body takes unboxed arguments computes unboxed results ffl postlude boxes results 
function partially inlined call sites determined function flows call sites prelude postlude inlined hopefully cancelling boxing unboxing operations call site function body inlined simply called 
experimental results published goubault approach experience multiple entry points curried uncurried functions objective caml expect scheme effective removing boxing unboxing operations function calls 
potential problem certain growth code size inlined cancel cleanly operations call site 
course multiple entry points goubault technique apply calls known functions 
test suite objective caml compiler dynamically executed function calls statically turned direct calls known functions 
objective caml uses simple minded control flow analysis comparable iteration cfa algorithm expect better control flow analyses lead better figures 
objective caml simple minded control flow analysis works quite core ml language structures functors 
extended object oriented features objective caml 
sophisticated control flow analyses needed recognize invocations known methods 
experimental results discuss experimental results obtained gallium gallium objective caml compilers 
gallium implementation coercion type directed unboxing 
generated code mips processor simple generation copying collector 
gallium briefly described uses coercion unboxing adds better portable code generator generation copying collector tag unboxing floats arrays described section 
objective caml native code compiler abandons coercion unboxing uses conventional tagged data representations combination local unboxing floats described section multiple entry points uncurried curried functions section tag handling unboxed float arrays section 
garbage collector generations incremental mark collector old generation 
main reason coercion unboxing abandoned objective caml gc overhead discussed section allow code sharing objective caml bytecode compiler 
series experimental results shown 
compare gallium compiler type directed unboxing versus simple variant compiler conventional fully boxed tagged data representations 
intent compare unboxed boxed representation strategies things code generator garbage collector equal 
compiler boxed representations test gallium gallium tested unboxing unboxing function calls integer arithmetic integral floating point arithmetic loops list processing integer arithmetic sieve integer arithmetic lists functionals polymorphism boyer term processing function calls knuth bendix term processing functionals polymorphism quad quad succ church numerals functionals polymorphism times seconds averaged runs 
tests conducted mips decstation running ultrix 
performance comparison gallium coercion type directed unboxing implement kind local unboxing optimizations multiple argument functions 
results taken 
shows unboxing effective programs perform lot floating point computation integral achieving speedups 
integer computations sieve run speed compiler uses native bit integer arithmetic uses tagged bit integers represented 
clearly overhead maintaining tag bit integers low probably lower modern processor multiple integer units 
symbolic processing tests boyer knuth bendix show slight performance advantage unboxing compiler attribute fact calling conventions uncurried functions arguments efficient unboxing compiler 
intuition confirmed test measures essentially speed function calls arguments 
quad quad succ test church numerals known case unboxing boxing coercions wrapped polymorphic function perform lot unnecessary causing performances worse fully boxed implementation 
second set results pit gallium compiler coercion type directed unboxing objective caml native code compiler uses standard tagged boxed data representations combined number tricks floats float arrays multiple argument functions 
comparison completely fair compilers slightly different code generators garbage collectors 
shows despite inferior unboxing technology objective caml matches performances gallium tests 
objective caml slightly faster gallium symbolic processing tests knuth bendix bdd fact attribute simpler heap traversal objective caml garbage collector gallium deal mixed pointers raw data heap blocks 
hand objective caml garbage collector handicapped fact major heap contiguous grows demand copying making expensive determine pointers point heap gallium accounts gallium better performance boyer 
floating point tests fft nucleic local unboxing floats objective caml just effective general unboxing strategy gallium 
integer tests fib sieve solitaire show significant differences confirming bit tagged arithmetic essentially fast bit native arithmetic 
tests involving arrays fft quicksort solitaire bdd show large performance advantage objective caml 
consequence efficient array bounds checking objective caml 
compensate give measurements array bounds checking turned starred tests 
test objective caml noticeably slower mandelbrot operates floats 
gallium compiler gets rid levels indirection float local unboxing algorithm objective caml eliminates level 
construed bug objective caml expect fix shortly 
typing analyses type directed unboxing highly systematic data having type representation 
leads unboxing strategies unbox little sml nj test gallium obj 
caml tested bdd term processing hash tables bdd bdd array bounds checking boyer term processing function calls fft floating point arithmetic float arrays fft fft array bounds checking fib integer arithmetic function calls argument lexing parsing symbolic processing knuth bendix term processing function calls functionals mandelbrot floating point arithmetic loops nucleic floating point arithmetic tree searching quad quad succ church numerals functionals polymorphism quicksort integer arrays loops quicksort quicksort array bounds checking sieve integer arithmetic list processing functionals solitaire arrays loops solitaire solitaire array bounds checking integer arithmetic function calls arguments times seconds averaged runs 
tests conducted alpha decstation running digital unix 
performance comparison gallium objective caml unbox quite lot slow garbage collector parts runtime system gallium 
believe unboxing best viewed optimization classic compiler sense term transformation applied case case basis compromising correctness 
approach modest amount unboxing tag handling unboxed float arrays records unboxed floats combined standard untyped optimizations local unboxing special calling protocols known functions performs just slightly better aggressive coercion type directed unboxing 
conclude unboxing killer app type compilation unboxing achieved propagating type information compilation chain 
say bad idea propagate types ml compiler just motivations unboxing optimizations 
objective caml compiler exploits type information compilation pass goes ml syntax lambda intermediate code 
type directed transformations performed 
greatly simplifies compilation passes keep typing information date 
aditya flood hick 
garbage collection strongly typed languages runtime type reconstruction 
lisp functional programming pages 
acm press 
appel 
run time tags aren necessary 
lisp symbolic computation 
goubault 
generalized boxing congruences partial inlining 
static analysis symposium number lecture notes computer science pages 
springer verlag 
jones 
partial evaluation dictionary free overloading 
technical report yaleu dcs rr yale university dept computer science apr 
leroy vouillon doligez 
objective caml system 
software documentation available web pauillac inria fr ocaml 
leroy 
unboxed objects polymorphic typing 
th symposium principles programming languages pages 
acm press 
leroy 
le syst eme caml special light modules compilation en caml 
research report inria nov 
morrisett 
compiling types 
phd thesis carnegie mellon university dec 
morrison dearle connor brown 
ad hoc approach implementation polymorphism 
acm trans 
prog 
lang 
syst 
ohori 
unboxed operational semantics ml polymorphism 
lisp symbolic computation 
appear 
oliva tolmach 
ml ada strongly typed language interoperability source translation 
draft available electronically nov 
peyton jones launchbury 
unboxed values class citizens non strict functional language 
functional programming languages computer architecture volume lecture notes computer science pages 
serrano feeley 
storage analysis applications 
international conference functional programming pages 
acm press 
serrano 
control flow analysis functional language compilation paradigm 
symposium applied computing sac 
acm press 
shao appel 
type compiler standard ml 
programming language design implementation pages 
acm press 
shao 
flexible representation analysis 
international conference functional programming 
acm press 
shivers 
control flow analysis scheme 
sigplan notices july 
tarditi morrisett cheng stone harper lee 
til type directed optimizing compiler ml 
programming language design implementation pages 
acm press 
tolmach 
tag free garbage collection explicit type parameters 
lisp functional programming pages 
acm press 

