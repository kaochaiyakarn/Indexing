manageable storage adaptation wind andrea arpaci dusseau arpaci dusseau john bent brian forney muthukrishnan omer zaki key storage manageability adaptation 
traditional storage systems adaptation performed human administrator assess problems manually adjust various knobs bring behavior system back acceptable level 
storage systems adapt doing reduce need manual intervention 
describe wisconsin network disks project wind seek understand develop key adaptive techniques required build truly manageable network attached storage system 
wind gracefully efficiently adapts changes environment reducing burden administration increasing flexibility performance storage eclectic range clients 
particular wind automatically adapt addition new disks system failure erratic performance existing disks changes client workload access patterns 
data storage lies core information technology 
distributed file systems internet services database engines shapes user experience reliability availability performance subsystem 
basic elements storage device industry midst radical change 
particular advent network attached storage devices fundamentally alter manner data maintained stored accessed 
combination inexpensive powerful microprocessors inside disk high speed scalable networks enables storage vendors move disks slow shared medium busses storage area network san 
collectively refer group network attached disks storage cluster 
group cmu refers nasd network attached secure disks wish refer general simply refer disks network network attached storage devices 
department computer sciences university wisconsin madison storage clusters provide potential advantages traditional storage architectures scalability limited shared medium interconnect scsi network attached storage deliver scalable bandwidth multiple clients 
fault tolerance standard server environment software failure single host lead data unavailability 
contrast storage cluster accessible host allows multiple access paths data increasing data availability 
simplicity file systems built network attached storage leave low level layout decisions performance optimizations drives simplifying software increasing maintainability 
incremental growth compared typical raid array network attached storage allows essentially unlimited growth number disks removing need fork lift replacement entire raid array :10.1.1.1.2034
specialization network attached storage mixed cluster enables specialization system direct response need system requires disk bandwidth capacity buy disks system needs cpu power buy processing nodes 
problem management storage clusters introduce additional challenges particularly regarding manageability 
absolute performance goal great number previous systems manageability new focus 
system works consistently little human intervention preferred system sporadically delivers near peak performance requires large amount human attention 
manageability challenging storage clusters due additional complexity 
complexity result networking hardware protocols clients disks increasingly sophisticated nature modern disks drives multiple zones scsi bad block remapping sporadic performance absolute failure 
result complexity networks disks system unpredictable behavior especially terms performance norm rare case 
likelihood unexpected behavior compounded increasing demand largescale systems storage service provider disk storage farm 
spite unpredictability ideal manageable storage system behave follows 
upgrade disk added ideal system immediately begins utilizing full capacity migrating data balance load longterm data migration writing new data disk increase throughput short term adaptation 
ideal system fully utilizes disk regardless capacity performance relative disks 
failure complexity modern disks introduced new range failures binary fail model components perfectly continuous range component may working full capacity 
ideal system utilizes performance faulty components degree allows 
workload delta new applications data sets access patterns storage system may change previous layout data disks may longer satisfactory 
ideal system reacts migrating data better match current conditions example frequently accessed data may migrated newer faster disks spread disks increased bandwidth 
shared access network attached storage multiple clients file systems may simultaneously share underlying disks incomplete knowledge activity disk 
ideal system adapts contention run time delivers performance available clients 
traditional systems react scenarios assistance human administrator assess problem manually adjust various parameters bring performance system back acceptable level 
adaptation key manageable storage systems system reacts changes system behavior automatically adjusts problems reducing need manual intervention 
globally adaptive long term engine gale rain gale ipi user app sa nfs sa nfs short term reactive middleware storm nest nest user app client clouds rain clouds ipi rain rain server clouds clouds nest storm nest database parallel query operator ipi ipi nest wind system architecture wisconsin network disks nest describe design current status wisconsin network disks wind 
main focus wind develop key techniques necessary build truly manageable network attached storage 
achieve goal fully exploit potential underlying hardware software develop distributed scalable 
wind comprised major software components broken groups 
runtime line adaptive elements wind storm gale clouds 
key pieces supporting infrastructure rain nest 
system architecture briefly describe components 
key piece adaptation software storm performs run time adaptation data access layout 
storm adapts short term changes workload characteristics disk performance quickly adjusting client reads writes disk 
short term adaptation lacks global perspective 
introduce gale software layer monitors system activity line simulation performs global long term optimizations improve performance reliability 
example gale may migrate replicate data improve read performance re balance workload drives 
gale tries place data accordance current climate system access patterns applications 
gale interacts important ways storm 
example data replication storm little flexibility read data block needed gale replicates data provide increased flexibility storm improves adaptivity system 
storm gale designed adapt data flows disk requests network attached disk may satisfied memory caches 
clouds provides flexible caching network attached storage 
clouds provides mechanisms policies client side server side caches variable costs account 
clouds employ cooperative techniques conglomerate cache resources potentially hide disk variations clients :10.1.1.110.7161
wind contains key pieces software infrastructure 
rain information architecture encapsulates acquisition dispersal information storm gale clouds 
rain provides information programming interfaces software subsystem hide details information flows greatly simplify system structure maintainability 
second nest provides flexible efficient single site storage management 
eventually plan implement evaluate file systems top wind infrastructure 
build striped adaptive version nfs sa nfs adheres nfs file system interface modified stripe data blocks disk adaptive fashion 
plan construct parallel record oriented file system designed support highperformance parallel query operators database environments 
takes advantage relaxed data semantics readily provide robust consistent performance 
adaptivity wind section discuss major adaptive components wind run time adaptive layout access storm line monitoring adaptation gale adaptive caching clouds 
pieces software technology harmony adapt changes system provide truly hands storage 
storm storm short term reactive middleware distributed software layer interposes clients servers provide adaptive data access 
storm file systems adapt volatile disk behavior run time deliver full bandwidth clients intervention 
challenges storm fold 
storm adapt data streams moving disk 
general idea clients interact higher performance disks frequently client access proportionally data faster disks 
second storm achieve goal low head extra processing book keeping metadata 
adaptation overhead odds seek knee curve adaptivity high overhead acceptable 
challenges adapting allocating writes versus non allocating writes reads substantially different allocating writes placed long willing pay cost book keeping writes reads freedom performed locations stored disk 
discuss operation 
allocating writes data written file time space allocation occurs blocks committed physical storage refer writes allocating writes 
illustrative purposes assume data striped set remote disks raid level striping redundancy 
algorithms allocating data blocks disks classified terms frequently evaluate relative speeds disk consequently adapt placement discuss range algorithms 
level traditional striping gauge performance storage components allocating data assumes disks run rate 
strength approach meta data needed block lookup block size 
weakness disks treated identically system performance tracks rate slowest disk 
level primitive adaptive allocation algorithm adjusts disks delivering data different rates assumes disk behaves fixed manner time 
algorithm relative speeds disks calculated exactly amount data striped device proportional relative speed 
lookup logical block approach requires little additional meta data know striping ratios disks 
level gn algorithms periodically determine relative performance disks adjust striping ratios accordingly 
period new striping ratio striping interval 
additional meta data needed striping ratio size striping interval 
level adaptive algorithm client continuously gauges performance system writes data block disk believes handle request fastest 
advantage approaches adapt rapidly performance changes small adjustments reflected simple integer striping ratios 
disadvantage significant amount meta data recorded target disk block offset logical block written 
demonstrate benefit versus approach performance user level library file striping 
measurements performed ultrasparc workstation internal rpm seagate hawk disks single fast narrow scsi external rpm seagate disks fast wide scsi 
measurements produced context single machine multiple disks believe results general apply environments heterogeneous disks 
table compares performance striping disks 
striping data striped blocks kb disk system 
table shows striping effective disks different speeds achieving peak bandwidth 
striping gauge relative performance disks simple line tool measure achieve mb writing simultaneously hawk disks mb disks 
peak performance measured isolation determines proper ratio stripe sizes write blocks data slower disks faster disks 
striping achieve peak bandwidth 
major research issues storm extend adaptation algorithms raid levels 
concentrate raid level mirroring excellent performance properties conceptually simple parity calculated 
straight forward transformation adaptive striping mirrored adaptive striping treat pairs disks single logical disk perform adaptive striping logical disks 
major disadvantage approach introduces performance coupling pairs disks pair run rate slow disk 
storm couple disks similar performance characteristics calling gale hints regarding best pairing 
alternatively mirroring may performed lazily files tolerate window potential loss gale run fill mirrors full reliability 
similar idea proposed afraid redundancy relaxed improve raid performance small writes 
non allocating writes non allocating writes blocks written previously allocated blocks file 
result storm choice disk receives non allocating write 
may lead acceptable performance cases 
disks scsi bus write write max actual seagate hawks narrow seagate wide disks striping disks striping table benefits striping 
table shows write bandwidth achieved level striping mb column lists disks second column applicable scsi buses 
write max column shows peak aggregate bandwidths disks write actual column shows bandwidth achieved striping library 
storm initially allocates amount data disk depending observed performance disk leaves performance footprint storage system 
performance footprint contributing factors produced disks produced workloads currently accessing drives 
factor contributed devices simply speed file data sequentially written contention particular layout blocks disk 
factor contributed workload includes access pattern single application sequential random contention multiple applications 
useful implication formalizing concept performance footprint 
temporal performance locality exists performance footprint changes little past clients access file non allocating writes reads access data disks optimal performance allocation 
temporal performance locality exist non allocating writes vulnerable performance variations 
completely general flexible solution transform non allocating writes allocating writes build multi disk log structured file system incorporates run time adaptive techniques akin approach described 
case adaptivity comes high cost 
plan evaluate relative strengths weaknesses range allocation algorithms terms adaptivity changing performance footprints amount meta data required 
specifically investigate algorithms adaptively determining length striping interval 
performance footprint changes rapidly striping interval small obtain best bandwidths disks performance footprint changes slowly striping interval longer amortize cost gauging recording meta data 
reads freedom reads depends level replication file 
example simple striping block file written location block read back disk regardless performance 
lack freedom may acceptable temporal performance locality exists 
performance footprint longer valid assume gale re organizes replicates data current climate account 
storm able adaptively take advantage replicated sources data reads 
earlier graduated declustering focused distributed adaptive mirrors parallel clients plan generalize handle general purpose workloads variety replicated layout schemes 
gale short term adaptation solve problems encountered dynamic heterogeneous environments 
short term adaptations analogous greedy algorithms arrive best possible solution lack global perspective 
provide long term view system workload activity optimize system performance ways possible runtime building additional software structure globally adaptive long term engine gale 
gale provides basic services wind 
gale performs system monitoring active passive techniques gather workload access patterns device performance characteristics detecting anomalies component behavior 
second gale decides perform global optimization action instantiation example gale may replicate oft read file performance reasons 
gale provides information storm clouds hint generation 
system monitoring gale inserts lightweight monitors clients servers trace workload access patterns measure response times 
simple tracing particularly novel aspect gale line simulation generate performance expectations 
periodically gale take set actual disk requests submit disk simulator 
system compare performance results simulation measured performance take note stark differences 
accurate disk simulators readily available initial experiments reveal simulate modern drive real time 
comparing real performance simulated performance gale detect system gone 
action instantiation monitoring system gale may choose migrate replicate data better match current climate system done steps 
step cost benefit analysis access time hawk access time zx ratio access times random reads seek time rotational delay dominate request size kb transfer time dominates access size impact 
depicts impact access size performance difference seagate hawk modern ibm zx drive 
graph plots ratio performance disks random reads varying size requests axis 
gale compare costs migration replication versus benefit current workloads care ignore short term changes system 
actual migration replication 
migration useful moving data disk behaving unexpected ways determined simulation comparison may soon fail reorganizing oft read data better match access patterns utilize disks higher bandwidth 
replication important giving storm additional flexibility accessing data 
replicating block storm adaptively choose best site read current climate 
writes plan exploring active lazy updating replicas disadvantage leaves little opportunity adaptation disadvantage replicas contain stale data 
investigating multi access replication schemes useful performance differential drives varies workload 
illustrates performance differential drives seagate hawk ibm zx 
small requests ibm drive faster due smaller edge seek time rotational delay 
larger request transfer rate dominates larger performance difference drives 
gale detects small random large sequential accesses important performance gale creates replicas data layout optimized small requests large transfers 
challenge simultaneously utilize multiaccess replicas data availability 
migration replication consume serious resources system scheduled carefully 
idle time successfully systems hope times gale activities :10.1.1.119.6793
hint generation gale provides hints storm clouds access improve decisions 
examples different hints gale pass data placement hints disks new file allocated ratio adjustment hints initial performance levels expect set disks hints data blocks benefit fault masking caching described section mirror matching hints set disks mirrors 
gale may return confidence indications hint allowing storm clouds decide 
clouds clouds flexible adaptive caching layer wind 
flexible clients storage forced accesses limited subset files 
adaptive clouds algorithms fundamentally take varying cost block access account different blocks different replacement costs costs change time 
clouds divided distinct components clientside clouds server side clouds 
explore client clouds server clouds 
client clouds clients network attached storage system may cache blocks number drives system 
clouds enhances existing operating system buffer managers enabling caching algorithms take variable cost block access account 
algorithms lru take cost account assume blocks equally costly fetch variable cost environment 
early theoretical belady established offline optimal cache replacement algorithm simply replace block referenced furthest 
line generalization caches variable replacement costs known heuristics 
web cache caching strategies focuses extending modifying lru different costs replacement 
clouds extend approaches function local area environment access costs different wide area change rapidly 
interesting challenge track replacement cost low overhead 
example may expensive track cost accessing block caching algorithm may inform rain set candidate blocks rain return costs 
explore trade offs managing infor mation versus performance algorithms 
apply variable cost caching non lru algorithms shown sophisticated algorithms behave lru data fits cache avoiding thrashing larger data sets 
initial simulation results client side cost aware caching algorithms promising 
single disk performing poorly stuttering absolute failure just older slower disk disks perform expected level traditional caching algorithms adversely affected lru account cost accessing slower disk 
cost aware cooperative approach performance differences masked 
server clouds server side clouds uses cooperative caching algorithms manage caches disks :10.1.1.110.7161
enables new ability disk caches cooperate cache blocks slow disks hide variable cost disk access clients call performance fault masking 
example assume single disk running slower rest application sequentially accessing particular data set disk 
case server side caches cooperate cache blocks slow disk slowness masked higher levels system creating illusion uniform set disks 
masking occur reads writes storm writes somewhat easier handle 
server caches cooperate buffer data destined slow disk hide slowness clients 
course large amount data written disk compared total amount buffer space available technique successful 
masking reads behave analogously server side caches favor blocks cooperatively slower disks potentially hide latency 
blocks caches 
technique effective repeated reads prefetching employed fill caches blocks slow disk 
note interaction clouds storm 
server side caches may cooperate hide variable behavior disks clients 
needs interface clouds storm storm informed intention clouds take action 
believe clients autonomous trust clients plan explore client side cooperative algorithms 
core infrastructure identified pieces infrastructure necessary build effective wind system 
rain thin software layer responsible efficiently gathering information system 
second nest single site flexible storage manager 
rain goal rain rapid access information distribute current climate system remote components behaving enable effective simplified implementations storm gale clouds 
information layer presents higherlevel layers specialized information programming interfaces 
interfaces insulate algorithms adaptive components details information gathered stored propagated 
challenge rain deliver accurate lowcost information current performance 
axes investigate information gathered explicitly implicitly 
recognize explicitly querying remote disks may appropriate approach 
may interface obtaining desired information 
second accessing explicit interface may costly sending explicit request consumes shared network resources may needed data transfers induces additional remote disk 
explicit query fail forcing requester handle different failure cases 
investigate implicit sources information rain infers desired characteristic observing operations exist system 
example observing time required read particular disk number outstanding requests disk remote disk performance inferred little overhead 
central advantage implicit methods provide information free additional communication required ability deduce remote behavior local observation 
disadvantages methods inferences subtle information flow restricted path data flow 
hide method gathering information rain free switch methods run time find effective explicit implicit 
switch methods depends variables frequency climate changes chaotic dynamic system accuracy method information obtained overhead induces total system resources spent 
plan evaluate impact information gathering style higher layers system 
nest key piece infrastructure nest network storage technology single site storage manager named original intent provide storage condor 
nest highly flexible configurable appliance certainly see application outside wind environment 
main axes flexibility nest provides client protocol communication wind specific protocol nfs simple nest native tongue concurrency architecture threads processes events range locking consistency semantics flexible infrastructure caching 
configuring nest deploy specialized highly tuned server suited current environment 
investigating interface nest provide support adaptation 
starting point object level interface put forth national storage industry consortium derived directly cmu nasd project 
observed interface limits client side algorithms develop alternatives adaptation friendly subsequently implement nest 
status wind system currently developed cluster intel machines running linux operating system connected mbit gigabit ethernet 
pc contains gb ibm disks storage device client 
basic prototype storm currently developed rain ipi alternatives 
client side software plugs linux loadable kernel module talks nest wind protocol 
nest running experiments show delivers full bandwidth clients process thread models event nest linux machines due limitations interface 
gale studied ganger simulator performance suitable events simulated rate faster real time 
initial results indicate simulator accurate request granularity sophisticated approaches may required 
better understand caching algorithms clouds developed detailed simulation environment allows easily explore algorithmic alternatives 
understand algorithmic trade offs proceed implementation prototype environment 
related basic architecture storage system strongly influenced network attached secure disk nasd project carnegie mellon 
example nasd project introduced drive object model starting point 
focus cmu nasd support traditional file systems strong security concentrating adaptivity hoping leverage security infrastructure cmu group develops 
petal storage cluster closely related 
petal assembled cluster commodity pcs number disks attached 
petal exports large virtual disk clients high speed network 
petal elegance simplicity arises careful separation storage system functionality file system 
petal contain limited form run time adaptation client reading mirror picks mirror shortest queue length 
wind enforce strong separation storage system file systems exposing disk client side file system software adaptation disks possible 
ip station usc isi explores peripheral devices 
particular advocate stock ip protocols communication custom tailored fast networking layers 
approach advantages providing easy compatibility communicating devices allowing shelf tested software 
wind tcp ip reasons 
projects taken network attached storage step running user code form drives :10.1.1.106.4722
active disks approaches lose advantages separation specialization network limited environments provide performance advantages 
believe adaptive techniques applicable environment 
berkeley store project discusses concept introspective system built intelligent disks 
wind gale component provides novel form system introspection line simulation 
authors propose new set benchmarks evaluate system availability hope apply evaluation wind 
robust performance long goal storage systems 
example chained declustering balances load mirrored storage system failure 
care fully allocating data disks read traffic avoids hot spots typical mirrored systems failure 
seek generalize concept adapting unexpected behavior disks just absolute failure 
excellent example adaptive system autoraid storage array :10.1.1.119.6793
autoraid presents standard raid interface clients adaptively migrates data raid levels hot data placed mirrored storage improved performance cold data moved raid storage increase effective capacity 
performance versus capacity optimization placed gale framework 
adaptivity explored context parallel file systems 
study authors explore fuzzy logic adaptively select proper stripe size storage system 
approaches may applicable wind 
long term adaptation shown promise single disk log structured file systems 
approach file layout reorganized line improve read performance lfs 
similar techniques employed gale gale generalize task reorganization operate multiple disks 
issue heterogeneous raid strategies studied multimedia literature regards video servers 
studies assume static performance differences components dynamic environment expect develop 
summary complexity growing point manageability storage systems 
comprised largely autonomous complicated individual components connected complex networking hardware protocols storage systems exhibit properties problems larger scale widearea systems 
software programming environments platforms provide mechanisms facilitate robust global behavior spite chaotic dynamic component behavior 
adaptive mechanisms storage increasingly difficult manage require high amount human involvement 
wind developing pieces adaptive software storm provides reactive run time data access layout gale performs system monitoring line adaptation clouds provides flexible caching 
underpinnings layers adaptation development rigorous information architecture called rain flexible general storage manager known nest 
believe successful development components reduce burden storage administration 
acharya saltz 
active disks 
proceedings th conference architectural support programming languages operating systems viii san jose ca october 
anderson dahlin neefe patterson wang :10.1.1.110.7161
serverless network file systems 
proceedings th acm symposium operating systems principles pages december 
arpaci dusseau arpaci dusseau culler hellerstein patterson 
high performance sorting networks workstations 
proceedings acm sigmod conference pages 
arpaci dusseau 
performance availability networks workstations 
phd thesis university california berkeley 
arpaci dusseau anderson culler hellerstein patterson yelick 
cluster river making fast case common 
may 
belady 
study replacement algorithms virtual storage computers 
ibm systems journal 
brown oppenheimer keeton thomas kubiatowicz patterson 
istore introspective storage data intensive network services 
proceedings th workshop hot topics operating systems hotos vii rio rico arizona march 
brown patterson 
maintainability availability growth benchmarks case study software raid systems 
usenix san diego ca june 
cao irani 
cost aware www proxy caching algorithms 
usits pages december 
fox gribble chawathe brewer gauthier :10.1.1.1.2034
cluster scalable network services 
sosp pages 
ganger worthington patt 
simulation environment 
technical report university michigan cse tr 
ghandeharizadeh muntz 
design implementation scalable continuous media servers 
parallel computing january 
gibson nagle amiri butler chang gobioff hardin riedel zelenka 
cost effective high bandwidth storage architecture 
asplos viii october 
gibson nagle amiri chang gobioff riedel zelenka 
filesystems network attached secure disks 
technical report cmu cs carnegie mellon university 
golding bosch staelin sullivan wilkes 
idleness 
usenix association editor proceedings usenix technical conference january new orleans louisiana usa pages berkeley ca usa jan 
usenix 
hennessy 
systems research 
ieee computer august 

hsiao dewitt 
chained declustering new availability strategy multiprocessor database machines 
proceedings th international data engineering conference pages 
lee thekkath 
petal distributed virtual disks 
asplos vii pages cambridge ma october 
litzkow livny mutka 
condor hunter idle workstations 
proceedings eighth international conference distributed computing systems san jose california june 
matthews roselli costello wang anderson 
improving performance log structured file systems adaptive methods 
proceedings th symposium operating systems principles sosp volume operating systems review pages saint malo france october 
acm sigops acm press 
meter 
observing effects multi zone disks 
proceedings usenix conference jan 
meter finn hotz 
visa virtual internet scsi adapter 
asplos xiii pages oct 
riedel gibson faloutsos 
active storage large scale data mining multimedia 
proc 
th international conference large databases vldb august 
rosenblum ousterhout 
design implementation log structured file system 
acm transactions computer systems february 
satyanarayanan 
digest seventh ieee workshop hot topics operating systems 
www cs rice edu conferences hotos digest html march 
savage wilkes 
afraid frequently redundant array independent disks 
proceedings usenix technical conference pages january 
reed 
adaptive disk striping parallel input output 
seventh nasa goddard conference mass storage systems san diego ca march 
ieee computer society press 
smaragdakis kaplan wilson 
eelru simple effective adaptive page replacement 
sig metrics conference measurement modeling computer systems atlanta ga may 
patterson 
analysis error behaviour large storage system 
ipps workshop fault tolerance parallel distributed systems 
wilkes golding staelin sullivan :10.1.1.119.6793
hp autoraid hierarchical storage system 
acm transactions computer systems february 
young 
server dual lose competitiveness paging 
algorithmica june 
