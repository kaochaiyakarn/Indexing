widely technique network attackers attain anonymity complicate employing stepping stones launch attacks computer intermediary hosts previously compromised 
develop efficient algorithm detecting stepping stones monitoring site internet access link 
algorithm distinctive characteristics packet size timing interactive traffic connection contents find stepping stones traffic encrypted 
evaluate algorithm large internet access traces find performs quite 
success algorithm tempered discovery large sites users routinely traverse stepping stones variety legitimate reasons 
stepping stone detection requires significant policy component separating allowable stepping stone pairs surreptitious access 
major problem internet attackers ease attackers hide identity 
consequently attackers run little risk detection 
widely technique attaining anonymity attacker stepping stones launching attacks computer intermediary hosts previously compromised 
intruders assemble collection accounts compromised hosts conducting new attack log series hosts target 
stepping stones generally heterogeneous administered hosts difficult trace attack back actual origin 
number benefits detecting stepping stones flag suspicious activity maintain logs case subsequently detected having come local site detect inside attackers laundering connections external hosts enforce policies regarding transit traffic detect insecure combinations legitimate connections clear text telnet session exposes ssh 
zhang computer science department cornell university ithaca ny 
email cs cornell edu 
paxson center internet research icsi international computer science institute berkeley ca lawrence berkeley national laboratory 
email vern aciri org 
appears proceedings th usenix security symposium denver colorado august 
detecting stepping stones yin zhang vern paxson problem detecting stepping stones addressed ground breaking staniford chen heberlein sh 
knowledge topic gone unaddressed literature 
endeavor systematically analyze stepping stone detection problem devise accurate efficient detection algorithms 
forms intrusion detection attackers generally evade detection pn ideal goal painfully difficult 
rest organized follows 
examine different tradeoffs come designing stepping stone algorithm 
develop timing algorithm works surprisingly evaluation evaluate cheap context techniques 
conclude remaining challenges particular need rich monitoring policies discovery legitimate stepping stones fact common possibility detecting noninteractive relays slaves 
terminology notation terminology 
person program logs computer logs number refer sequence logins connection chain sh 
intermediate host connection chain called stepping stone 
call pair network connections stepping stone connection pair connections part connection chain 
differentiate flow connection 
bidirectional connection consists unidirectional flows 
term series flows direction connection chain flow chain 
additional notation connections 
bi directional network connection denote network unidirectional flow binary relation defined connec tions follows form stepping stone connection pair 
design space section discuss tradeoffs different highlevel design considerations devising algorithms detect stepping stones 
choices relate observation stepping stone detection intuitively difference stepping stone connection pair randomly picked pair connections connections stepping stone pair correlated traffic characteristics 
general approach detecting stepping stones identify traffic characteristics invariant highly correlated stepping stone connection pairs arbitrary pairs connection 
potential candidates invariants connection contents inter packet spacing patterns activity traffic volume rate specific combinations 
examine arise subsequent discussion 
analyze connection contents natural approach stepping stone detection examine contents different connections find highly similar 
approach adopted sh proves effective 
considerable care taken find perfect match stepping stone connections 
may differ due translations characters escape sequences varying presence telnet options pr 
addition suppose monitoring connections stepping stone attacker access adopt notion binning order group activity different time regions example compute character frequencies done sh due lag activity activity contents falling bin match imperfectly 
furthermore attacker concurrently attacking traffic mixture connections contents show exactly considerations complicate content detection techniques 
fundamental limitation contentbased techniques unfortunately content encrypted due ssh 
goal see far get detecting stepping stones relying packet contents doing potentially attain algorithms robust 
relying packet contents yields potentially major performance advantage need capture entire packet contents packet filter packet headers considerably reducing packet capture load 
devised cheap content techniques purposes comparison robust virtue simple 
direct vs indirect stepping stones suppose connection chain 
direct stepping stone detection problem detect stepping stone observing network traffic includes packets belonging connection chain indirect stepping stone detection problem detect connections form stepping stone pair observe traffic traffic belonging obvious connection 
detecting direct stepping stones simpler detecting indirect ones direct ones greatly reduce number candidates connection pairs 
hand easier attackers elude direct stepping stone detection simply introducing additional hop stepping stone chain 
furthermore detect indirect stepping stones considerably flexible robust algorithm example applied traffic traces gathered different places see 
focus general problem detecting indirect stepping stones 
real time detection vs line analysis able detect stepping stones real time respond detection activity completes 
advantage real time detection don store data traffic voluminous 
instance day worth interactive traffic telnet rlogin university california berkeley average comprises gb storage connections 
algorithms line analysis valuable situations retrospective detection needed attacked site contacts site immediately attacked 
site consult traffic logs run line stepping stone detection algorithm determine attacker came site launch attack 
real time algorithms generally applied line analysis focus 
passive monitoring vs active perturbation design question monitor perform passive monitoring actively inject perturbing traffic network 
passive monitoring advantage doesn generate additional traffic consequently disturb normal operation network 
hand active monitor powerful detecting stepping stones monitor finds candidate perturb connection pair inducing loss delay look see perturbation echoed connection 
connections correlated 
focus passive monitoring operational simplicity detect stepping stones passive techniques broadly applicable algorithm works requiring ability manipulate incidental traffic 
single vs multiple measurement points tracing traffic multiple points potentially provide information traffic characteristics 
hand doing complicates problem comparing traffic traces account varying network delays clock synchronization 
confine single measurement point case usual presumption measurement point access link site rest internet 
filtering important factor success forms realtime stepping stone detection filtering 
traffic discarded packet basis due patterns tcp ip headers better greatly reduce processing load monitor 
clearly tradeoff reduced system load lost information 
monitor detects suspicious activity filtered stream filtering removed sufficient accompanying context quite difficult determining activity attack 
addition existence filtering criteria easier attackers evade detection manipulating traffic longer matches filtering criteria 
example evasion filtering packet size see telnet client modified send large number telnet options keystroke line input 
main filtering criteria stepping stone detection packet size 
keystroke packets quite small 
entire lines input transferred line mode bo packet payloads tend smaller bulk transfer protocols 
filtering packets capture small packets monitor significantly reduce packet capture load example heavy bulk transfer ssh sessions keeping interactive ones 
minimizing state connection pairs potentially large number active connections seen monitor infeasible keep stepping stone state possible pairs connections due memory requirements 
need mecha nisms allow keep state small subset possible connection pairs 
approach limit analysis detecting direct stepping stones reasons discussed unappealing 
mechanisms remove connection pairs sharing port host 
port host connections merely server accessing server server running client access server removing connection pairs particularly helpful large number connections connecting popular server filtering connections connect server need keep state connection pairs 
note mechanism worth applying test directionality see monitor analyzes existing connections directionality necessarily apparent 
remove connection pairs inconsistent directions 
depending topology network monitoring point may able classify connections inbound outbound eliminate connection pair candidates pairs connections direction 
connections may fact form chain monitoring location meaning sole path site case connection opposite direction pair connections 
site multiple ingress egress points safely apply filtering points monitored monitors coordinate 
remove connection pairs inconsistent timing 
connections stepping stone pair upstream closer attacker connection encompass downstream connection start 
accordingly remove analysis connection pairs connection started earlier terminates earlier 
note risks filtering 
may upstream connection terminates slightly sooner downstream connection details different tcp shutdown handshakes occur 
second filtering may open monitor evasion attacker force upstream connection terminate leaving downstream connection running 
traffic patterns coarsely classify network traffic exhibiting activity running fairly continuously 
potentially exploit traffic timing structure patterns connections similar 
potentially exploit traffic volume information connections flow similar rates 
addition continuous traffic communication reliable delays resulting waiting detect loss retransmit may impose pattern traffic look timing similarities connections 
focus traffic exhibiting patterns characteristic interactive traffic arguably constitutes interesting class stepping stone activity 
accuracy intrusion detection general face problem false positives non stepping stone connections erroneously flagged stepping stones false negatives stepping stones monitor fails detect 
detection algorithm unusable impossible tedious examine alerts manually attackers exploit evade monitor 
practice problem comparing connections looking similarities complicated clock synchronization comparing measurements different monitors propagation delays lag traffic showing connection appearing packet loss retransmission packetization variations 
intruder intentionally inject noise attempt evade monitor 
detection mechanism highly robust avoid excessive false negatives 
responsiveness important design parameter responsiveness detection algorithm 
stepping stone connection starts long take monitor detect 
clearly desirable detect stepping stones quickly possible enable additional actions recording related traffic shutting connection 
cases waiting longer allows monitor gather information consequently detect stepping stones accurately resulting tradeoff responsiveness versus accuracy 
consideration related responsiveness concerns system resources consumed detection algorithm 
want detect stepping stones quickly take care require resources monitor devote detection short time period 
hand offline analysis sufficient potentially resource intensive algorithms 
open vs evasive attackers general intrusion detection difficult attacker actively attempts evade detection monitor pn pa 
difference come utility relying heuristics algorithms heuristics open non evasive attackers completely fail face actively evasive attacker 
ideally detection algorithms develop resistant evasive attackers ensuring robustness exceedingly difficult proceed assumption utility raising bar detection algorithm defeated sufficiently aggressive attacker 
particular timing algorithms develop case way defeat algorithm attacker introduce large delays interactive sessions inconvenience maximized 
assess algorithm resistance evasion 
timing algorithm section develop stepping stone detection algorithm works correlating different connections solely timing information 
discussed previous section design motivated high level terms basic approach identifying invariants 
algorithm leverages particulars interactive traffic behaves 
leads algorithm effective detecting interactive traffic see evaluation detecting forms traffic exhibit clear patterns 
periods defining periods 
data traffic flow idle seconds connection considered period 
consider packet containing data carries new non keepalive data tcp payload 
packet non empty payload appears flow ends period begins period lasts flow goes data idle idle seconds 
motivation considering traffic structured periods comes strikingly distinct distribution spacing user keystrokes 
studies internet traffic keystroke interarrivals described pareto distribution fixed parameters pf 
parameters distribution exhibits infinite variance practical terms means wide range values 
particular large values uncommon keystroke packets come msec apart come sec apart come sec apart 
interactive traffic significant times 
exploit tendency machine driven non interactive traffic send packets backto back short interval discriminate non interactive traffic interactive 
timing correlation periods strategy underlying algorithm correlate connections coincidences connection periods equivalently periods 
intuitively connections leave periods similar times user presses keystroke sent shortly program executed finishes running produces output receive new shell prompt case activity ripples 
inverse true 
leave periods similar times mechanisms lead coincidences 
discuss mechanisms periodic traffic slightly different periods broadcast messages 
quantifying similar transform strategy detection criteria 
consider periods correlated times differ control parameter 

connections number periods number correlated 
consider stepping stone connection pair control parameter set 
benefit approach done significant idle periods 
busy non idle connections far away bulk traffic note idle 
related need consider small number possible connection pairs time ignore active idle need look transitioned idle active happen requires connection inactive significant period time 
consequently algorithm require state track stepping stone pair candidates 
wide range keystroke interarrival times algorithm sensitive choice idle current implementation set idle sec 
briefly discuss effects values 
consider correlations periods robust differences throughput capacities 
connections throughput capacity significantly smaller period may sooner echo data takes longer finish transferring regardless effect periods start nearly time 
refinements scheme outlined appealing simplicity requires refinements improve accuracy 
exploit timing observation flows flow chain timing correlation consistent ordering 
observe ends period true ends period confining analysis way weeds false pairs 
improve accuracy algorithm number consecutive coincidences determining frequency coincidences expect consecutive coincidences true stepping stones accidentally coinciding connections 
specifically addition test consider connections stepping stone connection pair require number consecutive coincidences csc new control parameters 
initially refinements requiring csc csc consecutive coincidences direct indirect stepping stones respectively 
general works added second requirement long lived connections eventually generate consecutive coincidences just chance 
eliminated low thresholds direct indirect stepping stones respectively 
resistance evasion heart timing algorithm correlating idle periods different connections attacker attempt thwart algorithm avoiding introducing idle times correlate introducing spurious idle times connections reflected connection stretching latency lag connections exceed avoid connection idle times suffice attacker simply resolve type quickly 
idle sec just takes slight pause think delay server generating responses commands introduce idle time 
mechanical means establishing steady stream traffic connections better tactic 
intermediary upstream downstream hosts run custom software doing easy somewhat complicates attacker intermediary install custom server 
approach mechanism existing protocol upstream host intermediary exchange traffic intermediary won propagate downstream host example going series telnet option negotiations 
particular instances techniques known may serve easily recognized signatures stepping stone connections 
transmission steady stream traffic idle times appear accidentally due packet loss retransmission purposefully site introducing occasional msec delays interactive traffic see delay shows connection deliberately perturbed 
delays prove difficult attacker mask 
attacker attempt introduce large number idle times connection push ratio idle time coincidences require running custom software intermediary approach previous sense aiming undermine basis timing analysis 
natural counter evasion tactic lower course require steps limit tolerate ensuing additional false positives 
possible detect unusually large numbers idle periods characterized patterns multiple idle periods assess feasibility doing 
approach attacker take pick intermediary latency lag connections larger set msec 
doing simply exploiting latency monitoring point intermediary sites latency internal host monitoring point generally msec internal host connected slow link modem available may serve 
approach run customized server client intermediary explicitly inserts lag msec 
approach appears significant concern algorithm may require larger values render delay highly inconvenient attacker msec hardly noticeable inconvenient 
natural area 
performance evaluation developed timing algorithm stepping stone detection 
implemented algorithm bro real time intrusion detection system pa 
section evaluate performance terms false positives false negatives traces wide area internet traffic recorded access link global internet large institutions lawrence berkeley national laboratory lbnl university california berkeley ucb 
traces ran timing algorithm numerous internet traces evaluate performance 
due space limitations confine discussion results traces lbnl telnet trace mb packets connections day worth telnet rlogin traffic collected lbnl 
traffic telnet 
ucb telnet trace mb packets connections hours worth telnet rlogin traffic collected ucb afternoon busy period 
performance algorithm traces comparable 
brute force content algorithm accurately evaluate algorithms devised offline algorithm brute force content matching 
principle algorithm stepping stones line typed user echoed verbatim connections content encrypted 
looking lines common find connections similar content 
additional manual inspection identify stepping stones 
algorithm works follows 
extract aggregate telnet rlogin output computer side response sessions trace file 

different line output count times occurred just sort uniq unix 

throw away lines appearing exactly twice 
idea candidates stepping stones lines unique connections 

find connection lines appears 
done building single file listing unique line connection name connection doing database join operation lines file list remaining previous step 
line appears just connection throw line away 

count seen twice lines pair connections common unix join utility 

connection pairs seen twice lines common candidates stepping stones 

discard pair connections direction site site 

remainder visually inspect see stepping stones 
correlated due common activities reading mail message news article 
clearly methodology fails completely encrypted traffic 
provides baseline assessment presence clear text stepping stones detects completely different way timing algorithm suitable calibration performance evaluation 
large traces requirement lines allows significantly reduce number connection pairs need visually inspect 
appears necessary order brute force content matching feasible 
small medium sized traces inspect ones lines common 
find stepping stones missed required lines common 
cases stepping stones exceedingly short terms bytes transferred 
simple content algorithms purposes comparison devised simple contentbased algorithms 
notion find text interactive login unique login text occurs strong evidence related 
problem find instances unique text 
clearly virtually login sessions unique fashion difficulty cheaply detect exactly 
scheme relies fact telnet clients propagate windows display environment variable remote commands locate user display server 
value display unique globally identifies particular instance hardware 
modified bro associate active telnet session value display propagated telnet environment option flag session propagates value existing session 
find method little power 
turns display rarely propagated telnet sessions addition non unique values hostnames fully qualified worse strings localhost propagated 
second scheme works considerably better 
observation new interactive session begins login dialog includes status line successfully display propagation backtrace attackers recording certainly utility 
login fri jun com combination timestamp course changes new login session previous access host truncated occurs systems leads line frequently unique 
modified bro search regular expression text sent server client ll ast successful 
login interactive login frequent instance false positives 
instances finger service zi report login part user information return 
concurrent interactive sessions happened finger user marked stepping stone pair 
able filter instances cheap test turns finger servers terminate status line ascii control 
refer scheme login tag compare performance timing algorithm 
works remarkably considering simplicity 
course robust fails completely large class systems generate status lines similar line 
accuracy evaluate accuracy algorithms terms false negative ratio false positive ratio 
lbnl telnet trace identified stepping stone connection pairs total connections brute force content matching described 
inspected connections lines common accurate estimation number stepping stones 
stepping stone indirect direct 
timing detection algorithm reports stepping stones false positives false negatives 
false negatives quite short lasts seconds lasts seconds 
ucb telnet trace due large volume data brute force technique inspected connections lines common 
identified stepping stones 
contrast timing algorithm detects stepping stones 
stepping stones identified brute force missed timing algorithm 
false negatives short terms duration seconds terms bytes typed connection user logs immediately exits 
discuss additional stepping stones detected timing algorithm brute force technique 
assess performance ran display login tag schemes ucb telnet trace 
display scheme reported stepping stones including missed timing algorithm 
login tag reported stepping stones plus false positive discussed 
timing algorithm missed exceedingly short user downstream session type exit terminate session 
stepping stone detected display algorithm timing algorithm 
summary timing algorithm low false negative ratio 
sure come cost high false positive ratio visually inspected additional stepping stones reported timing algorithm ucb telnet trace see false positives 
turns actual stepping stones 
example couple stepping stones chat program 
fooled brute force content matching algorithm due lot cursor motions 
stepping stone fooled content matching approach retransmitted data showed transcripts 
find timing algorithm highly accurate terms false positive ratio false negative ratio works considerably better brute force algorithm initially expected highly accurate 
efficiency timing algorithm fairly efficient 
current parameter settings mhz pentium ii machine running freebsd takes real time seconds lbnl telnet trace minutes ucb telnet trace 
clearly suffices realtime detection 
hour trace reflects cpu appear likewise suffice 
note relationship running time traces linear number packets connections trace matters number concurrent connections lead overlapping periods require evaluation 
impact different control parameters proper choice control parameters important accuracy efficiency algorithm 
current choice parameters extensive experiments various traffic traces summarize section 
settings algorithm performs terms accuracy speed wide range network scenarios 
assess impact different control parameters systematically explored portions parameter space ucb telnet trace 
table summarizes different parameter settings considered 
note keep default settings idle exploring parameter parameter values sec msec idle csc direct stepping stones indirect stepping stones table settings different control parameters 
space keep size parameter space tractable 
chose vary parameters particular extensive experiments various traffic traces algorithm fairly insensitive choice idle largely noted human keystroke interarrivals described pareto distribution fixed parameters 
pareto distribution distinctive heavy tail property pretty matter value choose idle appreciable number keystrokes 
larger idle short stepping stones 
current choice sec reasonable compromise exceeding round trip times rtts maintaining responsiveness short lived connections 
current choices thresholds low suffice eliminate long lived connections eventually generate consecutive coincidences just chance purpose important point goal assessment determining best parameters unaware attacker 
attacker actively attempts evade detection noted alternative parameters may required general 
important problem assessing optimize algorithm environment remains 
ran detection algorithm ucb telnet trace possible combinations control parameters assessed number false positives false negatives 
brevity report complete results briefly summarize results table gives results detecting direct stepping stones observations 
num ber false positives close combinations csc csc clearly lax 
second number false negatives minimized csc default setting algorithm 
third choice little impact accuracy algorithm 
results fp fn msec csc table number false positives fp false negatives fn detecting direct stepping stones shown highly similar means algorithm insensitive choice note additional considerations regard ing necessary relatively large especially latency high example con go satellite links 
high latency means large variation delay distort keystroke timing characteristics 
possible solution problem choose different rtt connection 
help latency lag evasion technique discussed 
adaptation complicates algorithm estimating rtt measurements middle network path subtle left study 
second large mean maintain state concurrent connection pairs eat memory cpu cycles 
similarly having smaller idle means need update state connections frequently turn increases cpu consumption 
illustrate effects increased msec msec re duced idle sec sec 
change time required process lbnl telnet trace increases sec double sec required current settings 
fp fn msec csc table number false positives fp false negatives fn detecting indirect stepping stones table summarizes results detecting indirect stepping stones table evident number false positives number false negatives minimized csc msec 
smaller csc larger significantly increase number false positives larger csc lead false negatives 
number false positives general smaller optimal combination csc remains 
number false positives increases msec csc increases false positives 
findings show current settings parameters fairly optimal ucb telnet trace considerable room varying parameters response certain evasion threats 
note particular need values idle direct indirect stepping stones simplicity may room performance improvement allowing specific type stepping stone just csc failures section summarize common scenarios cause timing algorithm fail 
failures solved current algorithm beneficial discuss illustrate subtleties involved stepping stone detection 
excessively short stepping stones 
cases timing algorithm missed stepping stone simply connections exceedingly short 
cases display login tag schemes able catch key text sent early login session 
hand attackers short stepping stones failing detect quite serious failing detect stepping stones 
message broadcast applications unix talk wall utilities 
utilities cause correlations flows cause text transmitted multiple connections 
correlations form connection endpoint breaks idle period flows case true stepping stone endpoint breaking idle period differ 
observation led directionality criterion 
correlations due phase drift periodic traffic 
con sider connections transmit data periodicities periodicities exactly periods connections remain exactly distance apart equal phase offset periodicities 
slightly different offset periods drift phase occasionally overlap 
overlaps appear correlations due periods fact uncorrelated able drift respect 
phenomenon idle speculation see fj discussion lead self synchronization coupled systems 
example traces includes remote telnet sessions machine time involving different user ids clearly user 
sessions period overlap sessions running pine check mail 
reason pine display began periodically sending data small chunks second chunk 
transmissions initially sync sync fairly closely 
added rule consecutive coincidences parameters csc discussed sessions reported stepping stone ratio coincidences high 
refined algorithm spurious stepping stones went away rule directionality discussed previous item happened succeed eliminating particular case 
large latency variation 
mentioned connection high latency large delay variation need increase value accord ingly csc order detect 
modified algorithm complications efficiently estimating connection rtt 
experience operational initially expected detecting stepping stone mean high probability intruder attempting disguise location 
figures frequency detecting stepping stones indicate expectation optimistic 
fact find wide area internet traffic abounds stepping stones virtually legitimate 
example ucb wide area traffic includes stepping stones day 
fall number categories 
external users wish access particular machines apparently trust internal ucb hosts trust arbitrary external hosts 
appear reflect habitual patterns get new host type rlogin current host infrequent observe stepping stone remote host access nearby local host local host 
simply bizarre user regularly logs ucb site asia returns asian site back ucb incurring hundreds msecs latency default choice discussion 
possible legitimate uses haven happened specifically identify gaining anonymity purposes attacks running particular client software provided intermediary upstream host 
inspection connections confirms inside attackers attempting hide location 
clearly operational require development refined bro policy scripts codify patterns corresponding legitimate stepping stones allowing monitor alert stepping stones odds policies 
hurdles find utility algorithm clear compelling 
note detection capability yielded unanticipated security bonus 
timing algorithm indifferent connection contents readily detect stepping stones upstream connection clear text protocol telnet rlogin downstream connection uses secure encrypted protocol ssh 
detect stepping stones highly probable user typed ssh password clear connection chain security ssh connection 
run timing algorithm look pattern rapidly instances confirmed typed clear 
lbnl running timing algorithm looking exposures part operational security policy unfortunately continues alert numerous times day traced break exposed manner site 
efforts educate users nature risk 
concluding remarks internet attackers mask identity launching attacks computer intermediary host previously compromised stepping stone 
leveraging distinct properties interactive network traffic smaller packet sizes longer idle periods traffic devised stepping stone detection algorithm correlating timing periods different connections 
algorithm runs site internet access link 
proves highly accurate major advantage ignoring data contents connections means works encrypted traffic ssh packet capture load greatly diminished packet filter need record packet headers 
algorithm works major stumbling block failed anticipate large number legitimate stepping stones users routinely traverse variety reasons 
large site university california berkeley stepping stones day 
accordingly step undertake operating algorithm part site production security monitoring anticipate require refined security policies addressing legitimate stepping stones 
hurdles find utility algorithm clear compelling 
natural extension attempt likewise detect non interactive stepping stones relays traffic internet relay chat looped site slaves incoming traffic triggers outgoing traffic relayed forms distributed denial service tools ce 
forms stepping stones different coincidence patterns interactive ones addressed algorithm preliminary assessment indicates may amenable detection basis observing local host long idle suddenly active outbound just accepted inbound connection 
acknowledgments stuart staniford chen felix wu thought provoking discussions particular notion deliberately introducing delay ken lindahl cliff frost greatly appreciated help gaining research access ucb traffic mark handley tara anonymous reviewers feedback presentation 
alexander telnet environment option rfc ddn network information center jan 
bo borman telnet option rfc network information center sri international menlo park ca oct 
ce computer emergency response team denial service tools cert advisory ca dec 
danzig jamin ceres mitzel estrin empirical workload model driving wide area tcp ip network simulations internetworking research experience pp 

fj floyd jacobson synchronization periodic routing messages ieee acm transactions networking april 
reed internet relay chat protocol rfc network information center ddn network information center may 
pf paxson floyd wide area traffic failure poisson modeling ieee acm transactions networking pp 
june 
pa paxson bro system detecting network intruders real time proc 
usenix security symposium jan 
pr postel reynolds telnet option specifications rfc network information center sri international menlo park ca may 
pn insertion evasion denial service network intrusion detection secure networks www aciri org vern evasion ps jan 
sh staniford chen heberlein holding intruders accountable internet proc 
ieee symposium security privacy oakland ca may pp 

kivinen ssh transport layer protocol internet draft draft ietf transport txt june 
zi zimmerman finger user information protocol rfc network information center sri international menlo park ca dec 
