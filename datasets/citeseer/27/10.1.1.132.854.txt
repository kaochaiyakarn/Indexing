slim trees high performance metric trees minimizing overlap nodes traina jr traina bernhard seeger christos faloutsos department computer science university paulo carlos brazil fachbereich mathematik und informatik universit marburg germany department computer science carnegie mellon university usa seeger christos cs cmu edu 
slim tree dynamic tree organizing metric datasets pages fixed size 
slim tree uses fat factor provides simple way quantify degree overlap nodes metric tree 
known degree overlap directly affects query performance index structures 
suggestions reduce overlap multidimensional index structures slim tree metric structure explicitly designed reduce degree overlap 
new algorithms inserting objects splitting nodes 
new insertion algorithm leads tree high storage utilization improved query performance new split algorithm runs considerably faster previous ones generally sacrificing search performance 
results obtained experiments real world data sets show new algorithms slim tree consistently lead performance improvements 
performing slim algorithm observed improvements factor range queries 

increasing availability multimedia data various forms advanced query leave carnegie mellon university 
research funded paulo state foundation research support brazil 
leave carnegie mellon university 
research funded paulo state foundation research support brazil 
supported 
se dfg deutsche forschungsgemeinschaft 
material supported national science foundation 
iri dms iis iis defense advanced research projects agency contract 

additional funding provided donations nec intel 
opinions findings recommendations expressed material author necessarily reflect views national science foundation darpa funding parties 
processing techniques required database management systems dbms cope large complex databases 
utmost importance design new access methods support queries similarity queries multimedia database 
large number proposals multidimensional access methods applicable multimedia databases assume data belong multidimensional vector space :10.1.1.137.9369
data multimedia databases vector spaces metric spaces 
address problem designing efficient metric access methods mam 
mam organize large set objects dynamic environment assuming availability distance function satisfies rules metric space symmetry non negativity triangle inequality 
consequently mam permitted employ primitive operations addition subtraction type geometric operation 
insertions new records supported efficiently mainly interested supporting range queries similarity queries nearest neighbor queries 
efficiency mam determined factors 
data set generally large kept main memory major factor efficiency number disk accesses required processing queries insertions 
assume mam organizes data pages fixed size disk disk access refers read write page disk main memory 
second computational cost distance function high number distance calculations major impact efficiency 
expect strong relationship number disk accesses number distance calculations 
third storage utilization important factor rarely considered context previously 
reason concerned storage utilization storage cost primarily number disk accesses required answer large range queries 
queries number accesses low storage utilization sufficiently high 
words mam perform efficiently simple sequential scan cases 
slim tree new dynamic mam slim tree shares basic data structure metric trees tree data stored leaves appropriate cluster hierarchy built top 
slim tree differs previous ways 
new split algorithm minimal spanning tree mst performs faster split algorithms sacrificing search performance mam 
second new algorithm guide insertion object internal node appropriate subtree 
particular new algorithm leads considerably higher storage utilization 
third probably important slim algorithm metric tree tighter faster post processing step 
algorithm derived findings high overlap metric tree largely responsible inefficiency 
unfortunately known techniques measure overlap pair intersecting nodes circles dimensional space metric data 
fat factor bloat factor measure degree overlap value close zero indicates low overlap 
show slim algorithm reduces bloat factor improves query performance metric tree 
remainder structured follows 
section give brief history including concise description datasets experiments 
section introduces slim tree section presents new splitting algorithm minimal spanning trees 
section introduces fat factor bloat factor 
slim algorithm described section section gives performance evaluation slim tree 
section presents 

survey design efficient access methods interested researchers decades 
access methods require data ordered multi dimensional vector space 
problem supporting nearest neighbor range queries metric spaces attracted attention researchers 
burkhard keller provided different interesting techniques partitioning metric data set recursive fashion recursive process materialized tree 
metric tree uhlmann vantage point tree vp tree similar technique partition elements groups representative called vantage point 
vp tree generalized multi way tree 
order reduce number distance calculations baeza yates suggested vantage point nodes belong level 
binary tree degenerates simple list vantage points 
method uhlmann generalized hyper plane tree gh tree 
gh tree partitions data set picking points representatives assigning remaining closest representative 
ozsoyoglu proposed extension vp tree called multi vantage point tree mvp tree chooses clever way vantage points node fanout geometric near access tree gnat brin viewed refinement technique 
methods static sense data structure built new insertions supported 
tree ciaccia patella overcomes deficiency 
tree height balanced tree data elements stored leaves tree supports insertions similar trees 

slim tree improved performance metric tree slim tree balanced dynamic tree grows bottom leaves root 
metric trees objects dataset grouped fixed size disk pages page corresponding tree node 
objects stored leaves 
main intent organize objects hierarchical structure representative center minimum bounding region covers objects sub tree 
slim tree kinds nodes data nodes leaves index nodes 
size page fixed type node holds predefined maximum number objects simplicity assume capacity leaves equal capacity index nodes 
analogous metric trees distance representative combination triangle inequality prune entry extra distance calculation 
regions corresponds node slim tree overlap 
increasing overlaps enlarges number paths traversed query issued increases number distance calculations answer queries 
slim tree developed reduce overlapping regions level 
building slim tree objects inserted slim tree way 
starting root node algorithm tries locate node cover new object 
qualifies select node center nearest new object 
node qualifies execute algorithm select 
process recursively applied levels tree 
node overflows new node allocated level objects distributed nodes 
root node splits new root allocated tree grows level 
slim tree options algorithm random randomly choose qualifying nodes mindist choose node minimum distance new object center node choose node minimum occupancy qualifying ones 
splitting algorithms slim tree random new center objects randomly selected existing objects distributed 
object stored new node center nearest object respect minimum utilization node 
minmax possible pairs objects considered potential representatives 
pair linear algorithm assigns objects representatives 
pair minimizes covering radius chosen 
complexity algorithm distance calculations 
algorithm tree promising splitting algorithm regarding query performance 
mst minimal spanning tree objects generated longest arcs tree dropped algorithm contributions 
algorithm produces slim trees minmax algorithm fraction time 

splitting algorithm minimal spanning tree section address problem 
set objects node split quickly divide groups resulting slim tree leads low search times 
propose algorithm minimal spanning tree successful clustering 
consider full graph consisting objects edges weight edges refers distance connecting objects 
proceed steps 

build mst objects 

delete longest edge 

report connected components groups 

choose representative group object maximum distance objects group shortest 
unfortunately gor ot guarantee group receive minimum percentage objects 
distribution choose longest arcs appropriate 
exists star fig 

node split mst algorithm 
shaped set accept uneven split remove largest edge 
execution time algorithm log number node objects 
illustrates approach applied vector space 
building mst edge objects deleted node keep objects having representative 
node objects having representative 

overlap optimization section theoretical underpinnings slim algorithm 
slim algorithm easy approach reduce overlaps existing slim tree 
presenting algorithm define meaning overlap metric space 
noted notion overlap vector space applied metric space 
typical assumption estimating number distance calculations disk accesses tree tree 
nodes tight overlaps nodes minimal 
directly tackles subject 
major motivation solve problem objects organized metric tree express goodness fitness single number show approach measuring overlap metric space leads fat factor bloat factor 
factors suitable measure goodness slim tree metric trees 
discussing properties factors slim algorithm 

computing overlap metric access method consider index entries stored node slim tree 
vector spaces overlap entries refers amount common space covered bounding regions 
data vector space simply compute overlap volume intersection 
notion volume available metric space pursue different approach 
measuring amount space suggest counting number objects corresponding sub trees covered regions 
definition index entries 
overlap defined number objects corresponding sub trees covered regions divided number objects sub trees 
definition provides generic way measure intersection regions metric tree enabling optimization techniques developed vector spaces metric trees 

fat factor analogous definition overlap metric space section method measure goodness metric tree 
basic idea definition fat factor tree little ideally overlap index entries 
approach compatible design goals index structures tree tree designed goal overlap minimization 
definition fat factor reasonable assumptions 
take account range queries estimate goodness tree 
assumption restrictive nearest neighbor queries viewed special cases range queries 
second assume distribution centers range queries follows distribution data objects 
reasonable expect queries issued regions space density objects high 
assuming easy state ideal metric tree behave 
point query range query radius zero ideal metric tree requires node retrieved level 
fat factor zero 
worst possible tree requires retrieval nodes answer point query 
situation fat factor 
discussion suggest definition fat factor 
definition metric tree height nodes 
number objects 
fat factor metric tree ic fat denotes total number node accesses required answer point query objects stored metric tree 
lemma metric tree 
fat returns value range :10.1.1.137.9369
worst possible tree returns ideal tree returns zero 
proof consider point query object stored tree 
query retrieve node level tree 
particular nodes insertion path object qualify required read disk memory 
lower limit ic total number disk accesses point queries resulting fat factor zero 
worst case occurs node read queries 
upper limit ic resulting fat factor 
fat factor linear function ic follows fat factor range :10.1.1.137.9369
qed shows trees fat factor 
order illustrate relationships representative associated objects drawn connection line 
calculating fat factor trees straightforward tree leading fat factor 
tree leading fat factor 

comparing different trees dataset bloat factor hmin bl fig 

trees storing dataset different number nodes fat factors 
root nodes shown broken line 
fat factor measure amount objects lie inside intersection regions defined nodes level metric tree 
order enable comparison trees store dataset different splitting different promotion algorithms leading different trees need penalize trees minimum required number nodes disk pages 
done defining new measure called bloat factor 
similar way fat factor bloat factor considers height number nodes real tree minimum tree 
possible trees minimum tree minimum possible height min minimum number nodes min 
leads definition 
definition bloat factor metric tree node expressed min min factor vary zero positive number greater 
limited factor enables direct comparison trees different bloat factors tree smaller factor lead lesser number disk accesses 
minimum height tree organizing objects hmin log minimum number nodes dataset calculated hmin min capacity nodes 
worth emphasizing fat factor bloat factor directly related average amount overlap regions level tree represented fat factor measures tree respect amount overlaps regardless possible waste disk space due lower occupation nodes 
bloat factor enables compare trees considering amount overlaps efficient occupation nodes 

slim algorithm section algorithm produces tighter tree 
fat indicate tree room improvement 
clear definition want construct tree smaller bloat factor need diminish number objects fall intersection regions level 
secondly may need decrease number nodes tree 
propose slim algorithm post process tree aiming reduce numbers constructed tree 
algorithm described steps see 

node level tree find farthest object representative 
find sibling node covers object node exists full remove node insert node correct radius node 
steps applied sequentially nodes level tree 
full round steps object moves node full round step re applied 
way object moved node node step object node distance original center correction radius node fig 

slim algorithm works 
reduce radius node increasing radii 
illustrates assume object farthest object representative node reduction new radius node shown solid line 
reduction object go region node intersects region node reducing counting 
algorithm applied guarantee minimum occupancy nodes tree eventually nodes empty reducing number nodes tree 
noted step take advantage triangle inequality prune part needed distance calculations 
algorithm executed different phases evolution tree 
variations immediately come mind 
similar algorithm applied higher levels tree 
algorithm dynamically applied slim sub tree stored node just direct descendants split 
new object inserted node full single relocation farthest object node tried splitting 
algorithm applied leaf nodes completion tree implemented variation leads better tree 
variations applied isolated way provides increase performance 
variation slows building tree give results obtained working completed tree 
due lack space showing results 

experimental evaluation slim tree section provide experimental results performance slim tree 
run experiments comparing slim tree tree demonstrating impact mst splitting method slim algorithm 
slim tree implemented windows nt 
experiments performed pentium ii mhz pc mb main memory 
implementation simple disk simulator provides counter number disk accesses 
performance insertions largely determined cpu time required distance computations complexity split operations report total runtime creating metric trees 
queries report number disk accesses indicator query performance 
number distance calculations highly correlated number disk accesses 
order illustrate performance new mam proposed slim tree synthetic real datasets 
table reports important characteristics datasets 
vector datasets dimensional metric datasets 
specifically note faceit dataset distance function commercial software product 
general metric vector datasets dataset levenshtein string edit distance edit 
edit metric counts minimal number symbols inserted deleted substituted transform edit head hobby substitutions insertion 
mention domain vector sets unit cube 
experiments performed way build metric tree inserting tuples 
run sets range queries size range queries fixed set 
graphs report average number disk accesses obtained set queries function query size 
graphs log log scale 
datasets objects table 
datasets experiments 
dimension metric description uniform uniformly distributed data sierpinsky fractal dataset intersection points roads montgomery county maryland eigenfaces face vectors informedia project 
faceit unknown faceit dataset constructed distance matrix obtained faceit software version 
edit words english language dictionary 
fig 

query performance average number disk accesses tree slim tree function query radius plots refers datasets 
comparing slim tree tree tree dynamic metric tree available compared alleged best performance corresponding slim tree 
shows query performance slim tree tree datasets 
trees built minmax splitting algorithm promising tree 
corresponding capacities nodes experiments reported table 
note trees settings parameters leading fair comparison 
plots see slim tree constantly outperforms 
reasons occupation nodes higher slim tree total number nodes smaller 
effect visible faceit datasets large number pages required large range queries 
vector data sets trees perform similarly large query radii 
overlap entries low different insertion strategies tree slim tree perform similarly 
note large query radii effective read entire file memory sequential os 
common expect majority queries radii small beneficial metric tree 
comparing minmax mst splitting algorithms compares query performance slim trees uses minmax splitting algorithm uses mst splitting algorithm 
left right plot shows results sierpinsky faceit respectively 
plot shows slim trees perform similarly 
table give details comparison different splitting strategies 
columns range queries refer cpu time seconds required perform queries sets 
point mst splitting strategy suffers slightly number objects node capacity small 
columns build show time seconds create 
mst algorithm clearly superior minmax splitting algorithm 
example mst algorithm faster factor dimensional datasets 
mst splitting algorithm gives considerable savings slim tree created provides performance minmax splitting algorithm range queries 
experiments splitting algorithms show runtime mst fig 

query performance slim trees minmax splitting algorithm mst splitting algorithm 

sierpinsky dataset faceit dataset 
splitting algorithm increasingly better minmax splitting algorithm number entries increases 
results experiments give rule thumb choosing split algorithm capacity nodes lower beneficial minmax splitting strategy 
trees bigger mst splitting algorithm better choice 
important say algorithm influence splitting algorithms 
table comparison slim trees minmax splitting algorithm mst splitting algorithm 
numbers wall clock times seconds 
datasets slim tree algorithm time sec 
build range queries experiments slim algorithm slim tree mst splitting algorithm time sec 
build range queries uniform sierpinsky eigenfaces faceit slim algorithm improves number disk accesses range queries average vector datasets 
datasets low bloat factor gives small room improvement slim algorithm 
datasets bigger bloat factors metric datasets faceit average improvement goes 
fig 

comparing improvements slim algorithm answer range queries 
compares query performance slim trees uses slim algorithm 
note left hand side show results minmax splitting algorithm results mst splitting algorithm right hand side 
graphs show slim algorithm improves slim trees 
table column slim show time perform slim tree 
general small fraction build time required perform slim slim tree 
measurement takes computing time alternative way obtain values represent performance metric tree issue queries radius keep average number disk accesses distance calculations standard deviations generate corresponding plots 
measured times spent calculate fat factor average disk accesses randomly generated queries 
measurements shown table see calculation fat factor faster alternative 
columns table show fat factor bloat factor calculated slim trees mst splitting algorithm 
number nodes height tree 
note parameter refers actual number nodes parameter min gives minimum number nodes 
analogously parameters min refer height slim tree 
number objects node varies size data objects 
table parameters slim trees mst splitting algorithm dataset num 
objects objects node number nodes min height tree min fat factor ff bloat factor bl uniform sierpinsky eigenfaces faceit general results experiments confirmed fat factor suitable measure quality slim tree 
rule thumb believe metric tree fat factor considered tree fat factor acceptable tree fat factor greater bad tree 
table see slim trees uniform sierpinsky trees trees eigenfaces faceit considered barely acceptable 

slim tree dynamic metric access method uses new approaches efficiently index metric datasets 
main contributions consist slim algorithm new splitting algorithm minimal spanning tree mst 
additionally suggest new algorithm slim tree directs insertion object node child node lowest occupation child node qualifies 
leads tighter trees fewer disk pages results efficient processing queries 
new mst splitting method considerably faster minmax splitting method considered best tree query performance affected 
node capacity runtime minmax splitting method runtime mst splitting method log 
performance difference reflected experiments time build slim tree mst splitting method factor orders magnitude lower minmax splitting method 
splitting methods result slim trees query performance 
observed query performance suffered little mst splitting method small node capacities 
slim algorithm designed applied poorly constructed metric tree order improve query performance 
theoretical underpinning slim algorithm approach computing overlap metric tree 
overlap identified important tuning parameter improving query performance spatial access methods previously metric trees due inability compute volume intersecting regions 
order overcome deficiency propose relative number objects covered regions estimate overlap 
concept design slim algorithm 
slim algorithm post processing step just insertion objects 
approach impedes subsequent insertions objects inserted 
experiments slim algorithm improves query performance average 
concept overlap leads factors expresses quality slim tree dataset single number 
fat factor measures quality tree fixed number nodes bloat factor enables comparison trees number nodes different 
foresee proposed method treating overlaps metric spaces allows apply metric access methods known fine tuning techniques developed spatial access methods 
primarily interested subjects 
plan apply slim algorithm nodes upper levels metric tree 
far algorithm internal nodes lowest level level leaves 
second interested comparison slim algorithm re insertion technique tree 
third study bloat factor develop cost model predicting cost range query slim tree 
fourth investigate definition generalized explicitly distinguish set query objects set data objects 
acknowledgments grateful pavel paolo ciaccia marco patella giving code tree 

gaede gunther multidimensional access methods 
acm computing surveys 

ciaccia patella tree efficient access method similarity search metric spaces vldb 

burkhard keller approaches best match file searching 
cacm 

uhlmann satisfying general proximity similarity queries metric trees 
ipl 

yianilos data structures algorithms nearest neighbor search general metric spaces 
acm soda 

baeza yates manber wu proximity matching fixed queries trees 
cpm 

distance indexing high dimensional metric spaces acm sigmod 

brin near neighbor search large metric spaces vldb 

guttman tree index structure spatial searching 
acm sigmod 

ciaccia patella bulk loading tree 
adc 

kruskal jr shortest spanning subtree graph traveling salesman problem 
proc 
amer 
math 
soc 


ciaccia patella indexing metric spaces 
proc 
nazionale 

faloutsos kamel uniformity independence analysis tree concept fractal dimension 
acm pods 
traina jr traina faloutsos distance exponent new concept selectivity estimation metric trees 
cmu cs technical report 

sellis roussopoulos faloutsos tree dynamic index multidimensional objects 
vldb 

beckmann kriegel schneider seeger tree efficient robust access method points rectangles 
acm sigmod 

berchtold hm keim kriegel cost model nearest neighbor search high dimensional data space 
acm pods 

wactlar kanade smith stevens intelligent access digital video informedia project 
ieee computer 

available www com live frameset html feb 
