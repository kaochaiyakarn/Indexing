metacomputation compiler architecture william harrison samuel kamin university illinois urbana champaign urbana il usa harrison cs uiuc edu kamin cs uiuc edu www home page www sal cs uiuc edu presents modular extensible style language speci cation 
style uses monads factor static dynamic parts speci cation staging speci cation achieving strong binding time separation 
de ned monads constructed modularly monad transformers 
number language constructs speci ed expressions imperative features block structure 
metacomputation style speci cation lends semantics directed compilation demonstrate creating modular compiler block structured imperative language 
keywords compilers partial evaluation semantics compilation programming language semantics monads monad transformers pass separation 
computations produce computations arise naturally compilation programs 
illustrates idea 
source language program taken input compiler produces target language program compiling produces computation computation observe entirely distinct notions computation compilation execution reader recognize distinction classic separation static dynamic 
staging instance metacomputation 
main contributions compiler architecture metacomputation compiler architecture yields substantially simpler language de nitions retaining modular mix match approach compiler construction 
combining metacomputation reusable compiler building blocks simpler combining proving correctness 
extensible method staging denotational speci cations language speci cation metacomputation proposed static dynamic parts language speci cation factored distinct monads :10.1.1.17.268:10.1.1.41.840:10.1.1.100.9674
direct style speci cations writing speci cations continuation passing style write direct style source compile parsing type checking code generation optimization target target interpreter stack manipulation updating store fig 

handwritten compiler metacomputation invoking cps monad transformer needed 
naturally equations essential helps approach practical 
existing compiler building blocks expressions imperative control flow block structure expressions imperative control flow block structure new compiler high level programming language fig 

modular compilers constructed existing compiler building blocks believe language speci cation may uses concentrate modular compilation 
modular compilers compilers built building blocks represent language features compilation phases illustrated 
espinosa liang hudak jones showed construct modular interpreters notion monads precisely monad transformers :10.1.1.17.268:10.1.1.17.268:10.1.1.41.840:10.1.1.100.9674
current authors built ideas produce modular compilers 
notion staging conceptually heart approach explicit compiler building blocks constructed 
traditional monadic semantics monadic structure useful creating domains domains constructed monolithic gave indication parts dynamic aspects computation static aspects 
result awkwardness communicating aspects domain meant gluing compiler blocks delicate 
metacomputation compiler architecture completely alleviates awkwardness combining compiler blocks simply matter applying appropriate monad transformers 
metacomputation purposely avoided :10.1.1.17.268
key aspect monad transformers create single monad interpret compile language 
problem inspired monads don compose nicely 
monads composition corresponding computation produces computation usually produce right monolithic domain 
may exist monad transformers tm tm id id tm tm id give right domain 
di erence composing monads composing monad transformers approaches monad transformers way toavoid metacomputation 
show purposes metacomputation may exactly wants de ning compiler block metacomputation monads gives ective representation staging 
abandoning monad transformers monads constructed attendant advantages approach 
simply saying having monads called static dynamic monads composing give right domain modular compilation 
section explains advantages modular compilation metacomputation language speci cation monolithic style 
section reviews relevant related 
section review theory monads monad transformers language speci cation 
section presents case study metacomputation style language speci cation subsections metacomputation style speci cations expressions control ow block structure imperative features respectively 
section shows combine compiler building blocks compiler combined language presents compiler example compilation 
section discusses impact metacomputation speci cation compiler correctness 
section summarizes outlines research 

section describe high level monads better modular compilation 
single monolithic monad simpli es code store de ned speci cation reusable compiler building blocks 
borrowed technique denotational semantics modeling jumps storing command continuations code store denoting jump execute continuation label code store 
viewing command continuations machine code common technique compilation 
language speci cations monadic style simple matter add label generator code store states underlying monad 
primary monads functional programming adding state features purely functional languages programs fact structured monads monad transformers adding new states simple :10.1.1.100.9674
code store integral modular compilation technique described 
compile control ow procedures presence code store language speci cations allowed substantial improvements reynolds avoiding nite programs jumps labels 
data monolithic monad causes number problems code store 
consider program 
compiling outer initial continuation halt label result continuation halt stored label label counter incremented 
problem trying compile continuation partial evaluation fail 

having stored executed continuation stored label access label 
partial evaluator try increment dynamic variable actual static integer cause error partial evaluator evaluate 
monolithic style speci cations forced static data explicitly passed stored command continuations expense modularity 
infact compile operator 
complications reasoning compilers constructed di cult 
shall demonstrate section results vastly simpler compiler speci cations naturally easier reason 
related espinosa hudak liang jones monad transformers create modular extensible interpreters :10.1.1.17.268
liang addresses question compilers developed similarly compile machine language issues confront especially staging arise 
syntactic form metacomputation level calculus nielson 
level calculus contains distinct calculi representing static dynamic levels 
expressions mixed level strongly separated binding times de nition 
nielson applies level calculus code generation typed calculus nielson presents algorithm static analysis typed calculus converts level speci cations level speci cations 
mogensen generalizes algorithm handle variables mixed binding times 
ers semantic alternative level calculus 
formalize distinct levels sense nielson distinct monads resulting speci cations traditional advantages monadic speci cations reusability extensibility modularity 
binding time analysis automatic consider far wider range programming language features 
danvy show produce code looks machine language expressing source language semantics terms machine language combinators push 
interpreter closed combinators partial evaluation closed term respect program produces completely dynamic term composed sequence combinators looking machine language 
approach making monadic structure useful compilation 
reynolds demonstration produce cient code compiler derived functor category semantics algol language original inspiration study 
approach compilation improves reynolds ways monad structured built interchangeable parts includes jumps labels reynolds simply allowed code duplication nite programs 
monads monad transformers section review theory monads monad transformers :10.1.1.17.268:10.1.1.41.840:10.1.1.100.9674
readers familiar topics may skip section 
monad type constructor pair functions obeying certain algebraic laws omit 
unitm value type called computation idea yields value type performing computation 
operation generalizes function application determines computations associated monadic values combined 
unitm de nes value regarded computation usually trivial computation 
monads suppose wish de ne language integer expressions containing constants addition 
standard de nition expression int de nition exible expressions needed look store generate errors feature planned equation need changed 
monads provide needed exibility 
start rephrase de nition monadic form bind traditional type expression int 

unit beauty monadic form meaning reinterpreted variety monads 
monadic semantics separate description language denotation 
sense similar action semantics high level semantics 
identity monad id id id fx cps monad transformer tcps tcps ans ans ans unit 
lift callcc callcc environment monad transformer tenv tenv env env unit env unitm 
env lift env rdenv env rdenv env unitm inenv env inenv state monad transformer tst tst store store store unit store 
ha lift update store store void update store fig 

identity monad environment cps state monad transformers simplest monad identity monad shown 
identity monad de ne add ordinary addition 
type expression int 

unit 
best known monad state monad represents notion computation modi es store st sto sto fx unit 

unit operation handles bookkeeping threading store computation 
type expression sto int sto 
appropriate meaning addition imperative language 
de ne operations side ects de ne function sto sto 
applies function store returns useless value assume degenerate type void having single element denote 
returns store 
suppose computation cause side ects separate stores 
de ne new double state monad st st sto sto sto sto thread states computation separate update get operations 
expect get st applying ordinary state monad twice 
unfortunately st st st di erent types 
points di culty monads compose simple manner 
moggi developed notion monad transformers called monad constructors solve composition problem categorical setting extended :10.1.1.17.268
applied monad monad transformer creates new monad example state monad transformer st store shown 
store type argument replaced value threaded computation 
note st identical state monad get useful notion composition st sto st equivalent state monad st state monad transformer provides operations appropriate newly created monad 
composing st sto operations inner state need lifted outer state monad main technical issue :10.1.1.17.268
compiler speci cations multiple states environments added state environment monad transformers 
distinguish additional combinators associated monad transformers appending data type name new state environment combinator 
example env maps variables values addr free address counter environments separate read combinators rdenv inenv env addr 
similarly separate update get combinators value code states sto code 
respectively sto code 
convenient factor state monad parts state proper address allocator 
really staging transformation state monad representing dynamic computation address allocator static computation mentioned earlier led signi cant complications 
current separating parts completely viewing compilation metacomputation 
semantics metacomputation formalize notion metacomputation monads resulting framework basis staging computations :10.1.1.17.268:10.1.1.41.840:10.1.1.100.9674
monad type type monads type type computation produces value computation 
de nition super uous noted generally monad generally di erent notion altogether computations 
standard dynam id dynam int implementation oriented monolithic dynam tenv addr tst addr int sto addr int thread int addr dynam int thread 
addr dynam int metacomputation dynam tst sto id static tenv addr id mono dynam int mono thread static dynam int negate thread dynam int units negate fig 

negation ways case study metacomputation compiler architecture modular compilation language section compiler building blocks 
section combined create compiler 
rst blocks give monolithic versions drawn illustrate metacomputation helpful 
particular importance section presents reusable compiler building block control ow demonstrates metacomputation compiler architecture solves di culties monolithic approach outlined section 
integer expressions compiler building block consider standard monadic style speci cation negation displayed 
compiler speci cation negation need implementation oriented version de ned informally store return contents unit assume written terms monad dynam bind unit operations unit observe implementation oriented de nition calculates value standard de nition stores intermediate value 
addresses storage come 
added dynam monad monad transformers implementation oriented speci cation :10.1.1.17.268
de nition reads current top stack address increments top stack thread stores monad dynam construct domain containing static dynamic data 
de nition thread uses dynam void lifted tenv addr monad transformer rede ned tenv addr tst :10.1.1.17.268
written lift addr 
de nition thread sake readability assume combinators added monad transformers lifted appropriately 
units static dynam int dynam int dynam int units add add thread thread fig 

speci cation constants addition metacomputation style speci cation monads static encapsulate static data dynam encapsulate dynamic data 
meaning phrase metacomputation static monad produces computation dynam monad 
clear separation binding times achieved 
displays speci cation addition similar negation 
multiplication subtraction de ned analogously 
generating code type directed partial evaluation scheme output partial evaluator lambda store add negate read lambda lambda sto cons nil store acc negate read store negate read store sto pretty printed version acc fig 

compiling code generated type directed partial evaluation method danvy :10.1.1.103.291
example code generation 
code produced takes form number stores reads storage underlined gure 
sake readability pretty printed version code pretty printed versions 
precise generate code expression partially evaluating store plus negate read unit acc 
compiles initial free store address 
dynamic part executed producing integer stored register acc 
submitting compilation semantics figures partial evaluator wemust rst translate de nitions compiler blocks static dynam monads scheme input language type directed partial evaluator 
clear de nitions translated completely straightforward manner scheme 
replace 
store de nition thread read leaving sto argument readability sake de nition negate plus figures respectively 
abstraction combinators store plus negate ensures names left residual code words de nitions intentionally omitted residual code look machine language 
result partial evaluation shown 
code generation technique monadic version danvy :10.1.1.103.291
constant folding integer expressions compiler building block code optimization technique traditional compilers known constant folding recognizes constant expressions evaluates compile time eliminating run time computation 
constant folding ts quite naturally easily metacomputation setting reusable compiler building block 
expression constant contains variables evaluated standard semantics expressions monad value produced boosted dynamic phase unit unit 
ect constant folding 
standard semantics expressions static monad units units unit control ow compiler building block example separating binding times speci cations signi cant advantage monolithic approach 
consider de nitions conditional statement 
rst dual continuation control ow semantics commonly compilers 
true rst continuation executed skipped just executed 
informal speci cation get new labels lc callcc store jump lc bh jump lc jump formalize speci cation denotational semantics modeling jumps 
introduce continuation store code label state label 
jump label simply invokes continuation stored second de nition presents implementation oriented speci cation monolithic style code label added dynam 
represents approach 
subtle problem remains 
rst impulse de ne simple update code store 
monolithic approach greatly complicates matters 
monolithic speci cation mixes static dynamic computation continuation may contain kinds computation 
stored executed access current label count static tenv addr id dynam tst sto id exp var ftrue falseg case true false cf units cf case true units false cf units negate cf case htrue truei units htrue falsei hfalse truei cf units hfalse falsei cf units thread thread cf cf units add fig 

constant folding compilation semantics integer expressions control flow dynam tcps void id bool implementation oriented monolithic dynam tcps void tst label tst label int code dynam void jump label dynam void jump code metacomputation bool callcc bh newlabel dynam label newlabel getlabel label 
mono dynam void mono bool newlabel newlabel lc callcc lc mono jump lc jump dynam tcps void tst static tst label id ifthen dynam bool dynam void label label 
dynam void ifthen lc bool callcc 
lc 
jump lc jump static dynam void newlabel lc newlabel units ifthen lc fig 

ways static data necessary proper staging 
explicitly pass current label count static intermediate data structure continuation stores static dynam bool units int int thread thread static dynam void newlabel newlabel lc newlabel units callcc 
lc 
jump 
lc jump jump fig 

speci cation speci cation de nes metacomputation simpler monolithic style speci cation 
observe dynam include label store continuation includes dynamic computations 
need pass label count may simply stored code 
central advantage metacomputation speci cation separation static dynamic data monads complications outlined section associated storing command continuations explicitly passing static data operator completely unnecessary 
contains speci cations similar speci cations addition respectively seen 
full description 
figures set dynamic parts computation abox emphasis 
block structure compiler building block dynam tst sto id static tenv env tenv addr id set addr dynam void set 
get addr dynam int get new static dynam void rdenv inenv 
units get ai rdenv fig 

compiler building block block structure block structure language includes new declares new program variable compiler building block language appears 
static part speci cation allocates free stack location program variable bound pair current environment pair expi acc accepts integer value sets value variable value exp simply returns current value variable 
set get set return contents location respectively 
compiled updated environment larger stack 
imperative features compiler building block dynam tst static tenv env id static dynam void units static dynam void rdenv units int acc fig 

compiler building block imperative features simple imperative language includes assignment sequencing 
compiler building block language appears 
sequencing static part speci cation compiles succession dynamic boxed part runs succession 
assignment static part speci cation retrieves acc program variable current environment compiles dynamic part calculates value passes acc 
combining compiler building blocks static dynam equations block structure control flow env addr id sto id eq block label id cps code id eq cf fig 

combining compiler building blocks block structure control flow env addr label id cps code sto id eq eq block cf illustrates process combining compiler building blocks block structure control ow languages 
important emphasize simpler explicit passing static data needed 
process applying appropriate monad transformers create static dynam monads combined language 
recall block structure language control ow language static tenv env tenv addr id dynam id static tst label id dynam tcps void tst code tst combine compiler building blocks languages simply combines respective monad transformers static tenv env tenv addr tst label id dynam tcps void tst code tst speci cations smaller languages eq block eq cf apply larger static dynam monads compiler combined language speci ed eq cf 
compiler dynam tcps void tst code tst sto id static tenv env tenv addr tst label id language expressions imperative control ow block structure booleans equations eq expr eq eq control ow eq block eq bool source code new new target code halt jump jump fig 

compiler language example compilation contains compiler language example program pretty printed compiled version 
correctness section outline example correctness speci cation reusable compiler building block written metacomputation style 
particular illustrate advantages respect compiler correctness compiler speci cations monolithic style speci cations general usefulness monads monad transformers respect compiler correctness 
lack space full exposition compiler correctness impossible hope convey basic issues correctness reusable compiler building block source language feature speci ed comparing compilation semantics semantics feature 
take example conditional 
standard compilation semantics 
slightly informal speci cation unbound interested reader may consult 
code store ifthen arbitrary constant code 
ifthen lc ect code store ifthen 
masking code store state sides sets code store constant require sides equation thesame action value store sto 
speci cation easier prove analogous monolithic style metacomputation de nition just stores continuation monolithic style de nition manipulates outlined sections 
furthermore example monad transformers help compiler correctness proofs 
equation holds dynam tcps void tst label tst monad transformers applied dynam purposes adding new source language features speci cation hold monad transformers yields kind proof reuse metacomputation compiler correctness 
simple elegant structure representing staged computation semantics programming language 
presents modular extensible style language speci cation metacomputation 
style uses monads factor static dynamic parts speci cation staging speci cation achieving strong binding time separation 
de ned terms monads constructed modularly monad transformers 
exploit fact create modular compilers 
focuses areas specifying language constructs objects classes exceptions exploring semantics level languages 
authors reddy rest functional programming research group uiuc ering helpful suggestions led signi cant improvements presentation 
certain fairly weak conditions order monad transformer application 
see details 

aho sethi ullman compilers principles techniques tools addison wesley 

appel modern compiler implementation ml cambridge university press new york 

appel compiling continuations cambridge university press new york 

danvy type directed partial evaluation proceedings acm conference principles programming languages 

danvy semantics compiling case study type directed partial evaluation eighth international symposium programming language implementation logic programming pages 

davies pfenning modal analysis staged computation proceedings acm conference principles programming languages 

espinosa semantic lego doctoral dissertation columbia university 

harrison kamin modular compilers monad transformers proceedings ieee international conference programming languages pages 

harrison modular compilers correctness proofs doctoral thesis forthcoming university illinois urbana champaign 

jones gomard sestoft partial evaluation automatic program generation prentice hall 

scherlis compilers staging transformations proceedings acm conference principles programming languages 

lee realistic compiler generation mit press 

liang modular semantics compiler generation yale university department computer science technical report tr february 

liang hudak jones monad transformers modular interpreters 
proceedings acm conference principles programming languages 

liang modular monadic semantics compilation doctoral thesis yale university 

mogensen 
separating binding times language speci cations proceedings acm conference programming computer architecture pp 

moggi 
view programming languages 
technical report ecs lfcs laboratory foundations computer science university edinburgh edinburgh scotland 

moggi notions computation monads information computation pp 


mosses action semantics cambridge university press 

nielson nielson code generation level denotational metalanguages programs data objects lecture notes computer science springer berlin 

nielson nielson automatic binding time analysis typed calculus science computer programming april pp 

peyton jones philip wadler 
imperative functional programming twentieth acm symposium principles programming languages 

reddy 
global state considered unnecessary semantics interference free imperative programming acm sigplan workshop state programming languages pp 


reynolds 
essence algol algorithmic languages proceedings international symposium algorithmic languages pp 


reynolds functor categories generate intermediate code proceedings acm conference principles programming languages pages 

stoy denotational semantics scott strachey approach programming language theory mit press 

wadler essence functional programming proceedings acm conference principles programming languages pages 

wand deriving target code representation continuation semantics acm transactions programming languages systems vol 
pp 

