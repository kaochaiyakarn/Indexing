umiacs tr july cs tr revised june skip list cookbook william pugh institute advanced computer studies department computer science university maryland college park skip lists probabilistic data structure supplant balanced trees implementation method choice applications 
skip list algorithms asymptotic expected time bounds balanced trees simpler faster space 
original skip lists algorithms search insertion deletion 
show skip lists versatile balanced trees 
describe analyze algorithms search fingers merge split concatenate skip lists implement linear list operations skip lists 
skip list algorithms actions faster simpler balanced tree cousins 
merge algorithm skip lists describe better asymptotic time complexity previously described merge algorithm balanced trees 
cr categories subject descriptors data structures lists models computation probabilistic computation algorithms problems sorting searching probability statistics probabilistic algorithms 
limited distribution notice report submitted publication probably copyrighted accepted publication 
issued technical report early dissemination contents 
view eventual transfer copyright publisher distribution limited peer communications specific requests 

overview skip lists probabilistic list data structure simple efficient substitute balanced trees 
probabilistic balancing tree data structures 
previously showed skip lists implement dictionary data type implement search insertion deletion 
show skip lists versatile balanced trees 
describe analyze algorithms search fingers searching element away element searched takes log expected time merge split concatenate skip lists implement linear list operations skip lists insert th element list 
operations described balanced trees 
skip list versions algorithms simpler fast easily adapted directly balanced trees algorithms 
analysis techniques required skip list versions radically different techniques analyze balanced tree cousins 
merge algorithm describe better asymptotic time complexity previously described merge algorithm brown tarjan 
claim may log upper bound brown tarjan proven lower bound 
lower bound holds worst case input uniformly distributed merges 
algorithm optimal inputs 
data structures simply need concatenated algorithm runs log expected time brown tarjan runs log time 
course algorithms concatenate balanced trees log time 
algorithm optimally handles uniformly distributed merges concatenation 
strategy merging skip lists applied balanced trees providing merge algorithms balanced trees optimal inputs algorithms prohibitively complicated 
describe analyze variations noticeably simplify improve skip list algorithms 

review skip lists understanding skip lists crucial understanding algorithms 
understand analysis algorithms reader familiar probabilistic techniques terminology developed analysis skip lists 
self contained condensed review skip lists section 
papers skip lists compare constant factors skip lists balanced trees describe simple efficient methods performing concurrent maintenance skip lists 
element represented node skip list 
node height level corresponds number forward pointers node 
node ith forward pointer points node level higher 
new element inserted list node random level inserted represent element 
random levels generated simple pattern level level level 
fairly clear perform efficient searches insertions deletions data structure 
insertions deletions require local modifications 
arrangements levels give poor execution times see arrangements rare 
expected cost search insertion deletion log 
details intuitions skip lists described pug 

skip list algorithms section gives algorithms search insert delete elements dictionary symbol table 
search operation returns contents value associated desired key failure key 
insert operation associates specified key new value inserting key 
skip list nil skip list cookbook delete operation deletes specified key 
element represented node level chosen randomly node inserted regard number elements data structure 
level node forward pointers indexed need store level node node 
levels capped appropriate constant maxlevel 
level list maximum level currently list list empty 
header list forward pointers levels maxlevel 
forward pointers header levels higher current maximum level list point nil 
initialization element nil key greater legal key 
levels skip lists terminated nil 
new list initialized level list equal forward pointers list header point nil 
search algorithm search element traversing forward pointers overshoot node containing element searched 
progress current level forward pointers search moves level 
progress level immediately front node contains desired element list 
insertion deletion algorithms insert delete node simply search splice 
gives algorithms insertion deletion 
vector update maintained search complete ready perform splice update contains pointer rightmost node level higher left location insertion deletion 
insertion generates node level greater previous maximum level list update maximum level list initialize appropriate portions update vector 
deletion check deleted maximum element list decrease maximum level list 
generating random level search list searchkey list header loop invariant key searchkey list level downto forward key searchkey forward key searchkey forward key forward key searchkey return value return failure skip list search algorithm insert list searchkey local update maxlevel list header list level downto forward key searchkey forward update forward key searchkey value list level list level update list header list level searchkey value forward update forward update forward delete list searchkey local update maxlevel list header list level downto forward key searchkey forward update forward key searchkey list level update forward break update forward forward free list level list header forward list level nil list level list level insertion deletion algorithms initially discussed probability distribution half nodes level pointers level pointers 
get away magic constants say fraction nodes level pointers level pointers 
original discussion 
levels generated randomly algorithm equivalent 
levels generated number elements list 
skip list cookbook level start search 
defining skip list elements generated happen elements level elements level elements level element level happen 
handle 
start search 
analysis suggests ideally lvl random lvl maxlevel lvl lvl return lvl generating random level start search level expect nodes 
happens log referring frequently formula denote log standard algorithm start search level useless 
probability maximum level list elements significantly larger small 
starting search maximum level list add small constant expected search time 
approach algorithms described 
determining maxlevel safely cap levels choose maxlevel upper bound number elements skip list 
maxlevel appropriate data structures containing elements 
analysis skip list algorithms time required execute search delete insert operations dominated time required search appropriate element 
time required find element proportional length search path determined pattern elements different levels appear traverse list 
probabilistic philosophy assumptions assume adversarial user access levels elements create situations worst case running times going list deleting elements level 
user access levels elements chance shall show probability small ignored 
note probabilities poor running times successive operations data structure independent successive searches element take exactly time 
probabilistic analysis analyzing expected performance skip lists analyze probabilistic performance skip lists 
allow calculate probability operation takes longer specified time 
analysis ideas analysis expected cost analysis understood 
random variable fixed unpredictable value predictable probability distribution average 
denotes probability equals prob denotes probability greater example 
preferable find simple upper bounds values exact value difficult calculate 
discuss upper bounds random variables need define partial ordering equality probability distributions non negative random variables 
definitions prob prob 
non negative independent random variables typically denote time execute algorithms 
define prob true value probability exceeds probability exceeds formally prob iff prob prob prob iff prob prob 
probability distributions definition binomial distributions 
non negative integer probability 
term denotes random variable equal number successes seen series independent random trials probability success trial average variance tp tp respectively 
definition negative binomial distributions nb 
non negative integer probability 
term nb denotes random variable equal number failures seen th success series skip list cookbook random independent trials probability success trial average variance nb respectively 
probabilistic analysis search times analyze search path backward direction starting element immediately left element searched travelling left 
length path number comparisons need perform 
examine number pointers backtrack climb level element immediately element searched level 
assume knowledge levels elements list reach level reach header list list extends infinitely left 
particular point climb th forward pointer element knowledge levels elements left level level probability level greater analyze time traverse search path considering backward climb series random independent trials success corresponding move level failure corresponding move left 
number leftward movements path climbing level number failures seen seeing th success series random trials negative binomial distribution 
number upward movements exactly 
gives cost climb level infinite list prob nb assumption list infinite pessimistic assumption 
bump header backward climb simply climb performing leftward movements 
gives cost climb level list elements prob cost climb level infinite list cost climb level list elements prob nb climbed level number leftward movements bounded number elements level greater list elements 
number elements level greater list elements random variable form np 
random variable corresponding maximum level list elements 
probability level node greater pk prob pk pk prob nb pi get probabilistic upper bound prob nb 
note average nb 
gives probabilistic upper bound cost reached level np nb 
combining results get probabilistic upper bound total length search path cost entire search cost climb list elements prob nb np nb number comparisons length search path number comparisons prob nb np nb expected value upper bound equal variance upper bound np 
efficiency compared implementations skip lists implementations avl trees trees splay trees 
skip lists roughly efficiency highly optimized non recursive balanced tree implementations insertions deletions slightly faster skip lists skip lists significantly faster factor straightforward recursive balanced tree implementations highly optimized splay tree implementations uniform query distributions 
skip list cookbook 
skip list extensions section describes new results 
describe algorithms search fingers merging splitting concatenation 
linear list operations described allow implement operations insert kth element list algorithms allow linear list operations easy combine linear list versions standard skip list algorithms provide skip lists allow operations key position 
return original algorithms look ways improve 
discuss reduce number comparisons comparisons expensive mention changes needed allow duplicate elements examine precisely cost search kth element skip list containing elements 
describe new probability distribution levels elements provides low space costs low search time variance 
search fingers maintain finger search structure expected time search element distance previous element searched new element 
finger associated list defined finger list rightmost element level left element examined 
identical update vector insertion deletion operations finger maintained operation 
algorithm perform search search fingers shown 
overhead fingers result slow searches locality 
theorem 
number comparisons required locate element away location examined bounded nb nb kp average variance kp proof determining move forward backward requires comparison 
position tip finger position finger list 
position element searched 
lvl maximum level elements 

lvl maximum level elements finger search climb level lvl starting decent phase list searchkey lvl list finger key searchkey move forward find largest lvl list finger lvl forward lvl key searchkey lvl list level list finger lvl forward lvl key searchkey lvl lvl lvl lvl list finger lvl move backward find smallest lvl list finger lvl key searchkey lvl list level list finger lvl key searchkey lvl lvl lvl list level lvl list level list header list finger lvl lvl downto forward key searchkey forward list finger forward key searchkey return value return failure search finger skip list cookbook search 
require lvl comparisons 
number elements lvl maximal level 
maximum level elements lvl probabilistically bounded nb 
length backwards search path bounded lvl upward movements nb kp leftward movements 
optimal merging skip lists merge algorithm merges skip lists 
algorithm moves elements possible input list output list moves possible list repeats process elements moved output list 
element appears lists value field list 
number elements moved single merge step 
number comparisons required works required search search finger 
gives average comparisons log 
need introduce new terminology describe total cost perform merge consists merge steps 
size list size list 
assume sj describe elements taken list tk describe elements taken list shown 
take elements list take elements list elements list elements list 
take elements list elements list elements list 
note differ sj tk required positive integers 
sj 
tk 
merge algorithm runs expected time list list result si ti brown tarjan algorithm merging balanced trees inserts elements smaller list larger list time search finger reduce amount required 
algorithm runs time si si example showing describe merge process 
worst case situation algorithms uniformly distributed merge equal equal situation algorithms run log expected time 
brown tarjan showed lower bound optimal 
lower bound holds uniformly distributed merges 
algorithm optimal inputs 
data structures simply need concatenated algorithm runs log expected time brown tarjan algorithm requires log time 
specialized algorithms concatenate balanced trees log time 
algorithm optimally handles uniformly distributed merges concatenation 
lower bounds optimality sequences represented way moving elements list takes log time visit locations input lists merge switches input list beginnings ends lists time merge sequences si ti performance algorithm algorithm optimal inputs 
skip list cookbook assumptions 
attempts show optimally information theoretic terms failed possible tailor merge algorithm comparisons specific distribution 
example possible write merge algorithm take requires comparisons uniformly distributed merge lists size 
algorithm require log conceivable implementation require comparisons merge perfectly uniform distribution 
optimal merging balanced trees strategy described merging skip lists applied merging balanced trees give time bounds 
merge step elements appropriate elements split appropriate input trees concatenated right side output tree log time 
merging balanced trees way considerably complex merge algorithm skip lists 
constant factor speed comparisons brown tarjan analysis constant factors merge algorithm hypothetical machine 
produce directly comparable results designed new merge algorithm skip lists strategy insert elements smaller list time larger list search finger 
resulting algorithm statements long 
calculated probabilistic upper bound number steps taken algorithm uniformly distributed merge lists elements average log steps 
algorithm statements long full detail runs log steps 
results line expectations portion algorithms search place insert element run similar speeds 
tree merging incurs large overhead set rebalancing split list remove list elements keys return new list list list level list level list header list level downto forward key forward list header forward forward forward nil list header forward list level nil list level list level list level list header forward list level nil list level list level list level return list concatenate list list appends list list assumes key list key list list level list level list level list level list header forward nil list level list level list header list level downto forward nil forward list level forward list header forward free list concatenating splitting skip lists skip list cookbook skip list merging faster applications 
splitting concatenation algorithms splitting concatenating shown 
fast requiring log expected time simple 
linear list operations describe method implementing linear list operations skip lists give th element list 
operations refereed rank operations 
search insertion deletion algorithms shown figures 
element index pos 
value invariants store 
index header zero index element 
associated forward pointer measurement distance traversed pointer pos forward pos 
list size list return bad index list header pos loop invariant pos pos list level downto pos pos pos forward return value searching th element list note distance traversed level pointer storage economy possible cost slight increase complexity algorithms 
skip list variations section variations skip list algorithms analyses previously 
reducing comparisons comparisons expensive involve expensive comparisons reals strings reduce number comparisons assuring compare search key key element 
optimization results inner loop shown 
optimization saves average comparisons 
theorem 
number comparisons required inner loop bounded nil list level downto forward forward key searchkey forward forward performing insertion deletion update inner loop optimized expensive comparisons nb np nb 
proof consider situation find progress current level need move level level maximum level list 
element key just compared search key 
level greater equal level greater optimization allows avoid comparing keys 
probability level nb comparisons associated upwards movements backwards search path save comparison 
duplicate elements easy modify skip list algorithms allow duplicate entries 
insertion algorithm simply needs modified perform insertion 
search deletion algorithms unchanged 
changes skip lists react duplicate elements stack discipline element search inserted deletion removes inserted version element 
skip list cookbook precision analysis previous analyses skip lists worst case assumptions element searched 
precisely examine cost search th element skip list containing elements 
theorem 
number comparisons required search insert delete th element skip list containing elements bounded nb kp nb average proof number upward movements search path bounded nb 
number leftward movements climb list nb elements kp 
number comparisons greater length search path 
non standard probability distributions previous descriptions skip lists assigned random level element negative binomial distribution equal nb 
consider probability distribution probability element level greater pi elements level 
original probability distribution corresponds 
equivalent standard distribution level forward pointers removed higher level forward pointers dropped level 
probability distribution log distribution requires average pk pointers element 
theorem 
distribution number comparisons required perform search bounded log nb nb log np nb average log variance log proof number leftward movements level nb probability element level 
log number leftward movements level nb 
costs similar standard case 
motivation distribution shown table 
previously reduce space costs skip list decrease added additional parameter probability distribution increasing better way decrease space costs particularly large 

algorithms put skip lists par balanced trees versatility cases skip list algorithms substantially simpler fast 
partially list structure represent ordered collection natural tree structure partially probabilistic balancing simpler efficient strictly enforced balancing 
researchers reported author difficulties developing analyzing sorts extensions variations described 
reason difficulty may order develop average average distribution strategy search cost variance search cost pointers element baseline distribution lg lg old strategy reduce space lg lg costs reduce lg lg new strategy reduce space lg lg costs increase lg lg mixed strategy lg lg table average variance search costs space utilizations different probability distributions levels elements skip list cookbook analyze sorts extensions need intuition skip lists strong intuition developed balanced tree structures past years 
main goal help research community develop intuition 
william pugh skip lists probabilistic alternative balanced trees proceedings workshop algorithms data structures ottawa canada august appear comm 
acm 
william pugh tim teitelbaum incremental computation function caching proc th acm conf principles programming languages pp aragon seidel randomized search trees focs pp 
clark crane linear lists priority queues balanced binary trees 
ph thesis stan cs computer sci 
department stanford stanford ca feb 
donald knuth 
sorting searching art computer programming vol 

guibas mccreight roberts new representation linear lists 
th acm symposium theory computing pp 
mark brown robert tarjan fast merging algorithm acm vol 
april pp 

mark brown robert tarjan design analysis data structure representing sorted lists siam comput 

kurt mehlhorn new data structure represented sorted lists acta 
william pugh concurrent maintenance skip lists tr dept computer science university maryland college park april donald knuth structured programming goto statements 
computing surveys dec 
mark brown robert tarjan fast merging algorithm stan cs computer sci 
dept stanford stanford calif august skip list cookbook create new list containing elements list list destroys list list element appears lists value field list merge list list local update true false list list interchanged initialize new list list list level max list level list level list level update list header list header forward nil list header forward nil key key list header forward key list header forward key assume key key key key exchange list list key key key key list list key key list list key key merge step remove list elements keys key put output list lvl list header forward lvl key key connect output list list lvl repeat update lvl forward lvl list header forward lvl lvl lvl lvl list level list header forward lvl key key lvl lvl level attached output list find endpoint level element key key list header forward lvl lvl downto forward key key forward key key forward key update list header forward forward element moved output list element front list duplicate element moved output list eliminate key key value list header forward value list header forward level list header forward forward free main loop list header forward nil leftover list leftover list leftover level update forward leftover header forward lines necessary may eliminated duplicate elements leftover level list level update forward nil list header forward list level nil list level list level list level free list free list merge algorithm skip list cookbook list value insert new element immediately position list size bad index lvl lvl value lvl list level list level lvl list header forward nil list header list size list level lvl list header pos pos pos list level downto pos pos pos forward lvl forward insert forward forward new pos pos old new pos pos new new pos new pos pos new new pos new pos list size list size list delete th element local update list size bad index list header pos pos pos list level downto pos pos pos forward update forward list level update forward update forward forward update update update update list size list size list header forward list level nil list level list level list level insertion deletion position 
