separating crosscutting concerns lifecycle composition patterns aspectj hyper clarke department computer science trinity college dublin republic ireland clarke cs tcd robert walker department computer science university british columbia main mall vancouver bc canada walker cs ubc ca technical report tcd cs ubc cs tr requirements crosscutting impact software distribution persistence problems software development manifest lifecycle 
inherent properties crosscutting requirements scattering support scattered multiple classes tangling support tangled elements supporting requirements reduce reusability extensibility traceability affected software artefacts 
scattering tangling exist designs code addressed 
remove scattering tangling properties means separate designs code crosscutting behaviour independent models programs required 
discusses approaches achieve exactly designs code presents investigation means maintain separation crosscutting behaviour seamlessly lifecycle 
achieve composition patterns design level aspectj hyper code level investigate mapping levels 
composition patterns means separate design crosscutting requirements encapsulated independent reusable extensible way 
aspectj hyper technologies provide similar levels separation java code 
discuss approach map constructs composition patterns aspectj hyper illustrate composition patterns design observer pattern map design appropriate code 
achieved varying levels success exercise serves case study implementation techniques 
keywords composition patterns subject oriented design aspect oriented programming aspectj hyperspace subject oriented programming hyper separation concerns crosscutting requirements functionality reuse development lifecycle 

requirements crosscutting impact software distribution persistence documented difficulties software development 
support crosscutting behaviour nature needs scattered potentially full design code system 
addition support may tangled design code multiple requirements 
scattering tangling impact comprehensibility traceability evolvability reusability software artefacts 
problems development lifecycle addressed lifecycle 
software design important activity software lifecycle benefits include early assessment technical feasibility correctness completeness requirements management complexity enhanced comprehension greater opportunities reuse improved evolvability 
benefits software design realised described structural mismatch way requirements tend specified terms features capabilities objectoriented specifications motivates need closely align object oriented software designs structure requirements 
achieved providing model supports separation subsequent composition design models different requirements 
decomposition manner removes requirement scattering tangling properties software design removing negative impact 
designs code map object oriented paradigm 
model described supported mapping object oriented designs requirements specifications enhancing traceability lifecycle 
order achieve level traceability crosscutting requirements approach required provides means separate designs code crosscutting behaviour separate independent models programs 
standard object oriented paradigm capable achieving required level encapsulation separation crosscutting requirements 
considerable focus problem designs code 
composition patterns cps means separating designs crosscutting requirements reusable extensible design models 
cps constraints interactions crosscutting behavioural elements may designed independently elements may interact constrain 
cps traceability crosscutting requirements specifications achieved 
addition approaches support ing technologies languages tools emerged address separation crosscutting behaviour object oriented code 
aspect oriented programming provides language mechanisms explicitly capture crosscutting code structure environment java provided aspectj language attendant tools :10.1.1.21.5662
multi dimensional separation concerns supports separation multiple arbitrary kinds dimensions concern supporting environment java called hyper 
approaches paradigm separation encapsulation crosscutting concerns code 
date little focus relationship crosscutting designs crosscutting code 
cps corresponding implementation technology composition semantics part model 
cps composed base designs resulting output design model scattering tangling properties discussed previously 
aspectj hyper independently supporting design paradigm 
missing 
believe truly realise benefits separation crosscutting concerns lifecycle seamless traceable mapping design supporting code 
benefits designers coders 
designer perspective remains important able compose designs validation purposes 
composed design implemented directly implementation display scattering tangling properties related negative impact 
designer find difficult communicate changes crosscutting behaviour coders 
evolution existing crosscutting designs additions new crosscutting behaviour difficult trace synchronise implement 
coder perspective previously cited benefits software design early assessment technical feasibility unavailable approach maps supports technology 
traceability requirements difficult corresponding evolution reuse challenges 
primary contribution description mapping designs crosscutting concerns emerging implementation technologies 
achieved varying degrees success evolvability mapping constructs defined composition patterns aspectj hyper code 
working mapping closer achieving full traceability crosscutting requirements development lifecycle 
secondary contribution case study applying technologies 
mapping design code discuss varying degrees success experienced implementing crosscutting behaviour consider evolution issues approaches 
section illustrates design observer pattern composition patterns 
section maps design aspectj section maps design hyper 
related described section 
section presents discussion 

composition patterns nature crosscutting behaviour impact multiple different elements software 
order design behaviour standard uml necessary explicitly specify interaction models crosscutting behaviour particular elements may supplement 
simple templates available uml composition semantics exist sufficient merge crosscutting behaviour impacts 
limitations result design models number difficulties 
new element needing supplemented crosscutting behaviour new interaction model defined indicating 
secondly changing eliminating crosscutting behaviour requires changes interaction models specifying 
reuse crosscutting behaviour straightforward specification tangled specification behaviour supplements 
composition patterns mitigate problems supporting separate design reusable cross cutting requirements 
crosscutting design composition pattern independent base design may potentially crosscut 
design may reused may required specified pattern composition 
described encapsulation design crosscutting behaviour reusable way achieved combination extension uml templates composition semantics defining structural behavioural design elements may merged 
inherent requirement design approach specifying crosscutting elements need support reasoning elements may impact 
templates 
template parameter cp denotes placeholder element replaced real element composed design 
way designer crosscutting behaviour may remain oblivious real elements crosscutting behaviour may impact 
semantics composition base design composition pattern merge semantics introduced detailed 
composition model supports separate design models independent views possibly overlapping core concepts 
composition separate design models specified composition relationship detailing elements overlap integrate 
merge strategy integration includes elements input design models composed design reconciling conflicts appropriate 
template parameter composition pattern operation merge semantics uses delegation ensure execution crosscutting behaviour real operation behaviour 
composition relationship cp base design defines elements replace template parameters cp specifying cp base design composed merged 
composition patterns designed intuitive existing uml designers standard uml constructs notations reused possible 
notationally uml style template box placed top right corner cp package provides ordered list templates defined cp 
composition relationship new kind relationship defined manner similar existing relationships uml 
complete description extensions uml metamodel required support composition semantics composition patterns previously introduced detailed scope 
illustrate design reusable cp support observer base design supporting small library specification compose 
observer composition pattern observer pattern describes collaborative behaviour subject multiple observers 
observer objects register interest subject objects observers notified change state subjects interested 
composition pattern perspective requires structural behavioural template design elements 
define observer cp pattern classes classes templates replaced real classes composition base design 
subject defined pattern class representing class objects changes state interest objects observer defined pattern class representing class objects interested subject change state see fig 

subject observer subject astatechange observer update start subject subject observer observer astatechange astatechange notify observers vector subject observer update start subject start subject subject subject observer cp structure cp contains interaction specifications behaviour crosscuts template operations 
fig 
illustrates behaviour required notifying observers changes state 
astatechange template operation behaviour supplemented notification observers 
operation prepended underscore denote delegation merge operation replaced operation class replaces subject 
notify calls template operation update replaced operation class replaces observer 
note astatechange update appear template box fig 

astatechange subject observer astatechange notify update notifying observers state changes observer cp supports specification crosscutting behaviour relating initiating terminating observer interest subject changes state 
template operations defined start subject 
subject replaced operations denoting start respectively observer interest subject see figs 

replacing operations subject defined input parameter 
start 
observer subject start 
initiating observer interest 
observer subject 
terminating observer interest base library design base design aspect examples applied small library design fig 

library books copies located room shelf 
book manager handles maintenance association books locations 
book manager maintains date view lending status book copies 
subject library copies bookcopy borrow return book name author isbn getname location bookmanager add book remove book search book bookcopy bookcopy bookcopy base library design pattern binding base design composition library base design observer composition pattern specified composition relationship 
bind attachment relationship class es acting subject class es acting observer may defined 
example see fig 
book copy bookmanager respectively 
subject observer subject astatechange observer update start subject subject subject library bind bookcopy meta false bookmanager composing observer library example note meta properties design elements may queried assess element eligibility join set replacing elements 
example astatechange template operation replaced operations bookcopy defined non query operations affect change state may interest observer 
keyword meta set parameter specification denotes uml meta property queried operations false replace astatechange purposes observer 

aspectj aspectj prototype language realise aspect oriented programming aop paradigm :10.1.1.21.5662
aop programming technique possible express programs involving encapsulated crosscutting concerns composition techniques reuse crosscutting code 
aspectj comprises set extensions java language 
brief discussion aspectj concepts constructs utilise different ways attempt map composition patterns compositional implementation model 
background major crosscutting construct aspectj called aspect 
aspect encapsulates functionality crosscuts classes system 
aspect essentially special form class instantiated contain state methods may specialised 
aspect combined classes crosscuts specifications aspect 
aspect introduce methods attributes interface implementation declarations types version introduced members may visible aspect private allowing avoid name clashes pre existing members 
aside introductions chief handle provided composing aspect classes called joinpoint joinpoint point execution system call method reception method call access attribute object creation sets joinpoints may referred pointcuts fact sets may crosscut system 
pointcuts named allowing reused 
aspectj provides various pointcut designators may combined logical operators build complete descriptions pointcuts interest designators include instanceof indicating joinpoints involving instances classes receptions indicating joinpoints method receives call 
see complete listing possible designators 
aspect specify advice execute conjunction pointcut 
advice block instructions pointcut 
advice executes place indicated pointcut allowing method replaced example replaced pointcut continued advice block special call 
aspects may declared making default concrete aspect singleton instance exists program execution possibilities exist examined section 
named pointcuts declared aspect allowing concrete definitions concrete methods 
mapping observer aspectj question map composition patterns aspectj depends faithfully wishes represent design level entities 
chief scenarios 
represent cp bind specification single aspect 
maintain separation reusable cp bind specification 
scenario approach demonstrated briefly 
examine mapping aspectj option turn 
concrete aspects map design subject observer single aspect 
class bound cp bookmanager bookcopy declare introductions non template methods attributes associated template classes respectively observer subject 
aspect observer introductions private vector bookcopy observers private void bookcopy bookmanager bm private void bookcopy bookmanager bm private void bookcopy notify post observers bookcopy observers sent event pointcuts pointcut start bookcopy bc bookmanager bm instanceof bm receptions void bc pointcut bookcopy bc bookmanager bm instanceof bm receptions void bc pointcut astatechange bookcopy bc instanceof bc receptions void return receptions void borrow advice bookcopy subject bookmanager observer start subject observer subject observer bookcopy subject bookmanager observer subject observer subject observer bookcopy subject astatechange subject subject notify pointcut defined template methods astatechange start 
note template methods subject merge semantics supplementary functionality merged indicated underscore prepending 
template methods supplemented additional behaviour simply occurrences replaced actual method bound update replaced example having pointcut defined 
pointcut defined represent joinpoints depicted initial message received interaction diagram associated template method supplemented crosscutting behaviour 
simply mapped instanceof designator indicating receiving object receptions designator indicating method called 
formal parameters pointcut determined looking template box specification template operation instance pattern class formal parameters explicitly declares exposed formals pointcut 
example pointcut declare formal parameter represent instance observer called plus argument gets passed 
false constraint bind specification needs translated actual methods constraint holds determined design class bound java support uml notion property 
piece advice declared interaction diagram associated supplemented template method 
example concrete method bound start received instance observer bookmanager instance registers observer subject bookcopy passed parameter 
example illustrates combination information cp base design composition binding specifi cation mapping concrete aspect may achieved algorithmic fashion suitable automation 
mapping problems 
bind specification cp design separate aspect created 
aspects contains portion observer pattern words observer pattern remains crosscutting functionality 
result details observer pattern need change aspect representing particular bind specification need modified 
furthermore mapping algorithmic simple 
problems suggest tool support required perform mappings 
entire implementation automatically generated tool produce skeleton aspect need filled fact 
regenerating mappings change cp required force aspects skeletons filled manually 
mapping reusable cps aspects difficulties evolving mapped cps minimised produce implementation level construct represented cp bind specification 
changes cp affect construct 
construct reusable specific single bind specification 
aspects provide means separating code crosscutting behaviour reusable way 
assess direct mapping cps aspects achieved 
look possible approaches varying depending number aspects involved instances contain state 
single aspect state approach realising implementation mapping composition patterns bind specifications attempt represent cp single aspect 
aspect instance contain state pertinent instance observer pattern handles 
pattern class cp defines interface aspect 
interfaces declare methods template method supplementary behaviour defined associated pattern class update observer 
interface serves provide handle known operations scope class 
non supplemented template methods exist pattern class case subject need define interface 
non template methods attributes added instance members aspect 
aspect observer type declarations interface public void update aspect instance state vector observers aspect instance methods void notify post observers observers sent update event void observer void observer pointcuts pointcut astatechange pointcut start observer pointcut observer advice observer start observer observer observer observer observer astatechange notify pointcut declared behaviourally supplemented template method scenario 
pointcut concrete definition cp bound actual classes 
advice analogous described scenario declared 
bind cp concrete classes declare concrete aspect extends observer aspect 
binding aspect bookcopy yields concrete aspect 
concrete class bound pattern class interface declared aspect representing cp receive implements interface 
addition implementation provided operation declared interface 
implementation method delegates existing method bound associated non supplemented template method 
example observer cp defines non supplemented update template method observer template class method bookmanager gets bound update bookmanager define update delegate 
concrete aspect give pointcut inherits concrete definition 
done identically case section 
aspect extends observer context introductions bookmanager implements public void bookmanager update pointcuts pointcut start bookcopy bc bookmanager bm instanceof bm receptions void bc pointcut bookcopy bc bookmanager bm instanceof bm receptions void bc pointcut astatechange bookcopy bc instanceof bc receptions void borrow receptions void return piece missing puzzle context 
aspectj uses declaration purposes decide aspect instances created part system execution called execution context aspect instance state accessible separable 
problem 
varieties context available aspectj 
produces singleton instance entire execution 
instance created instance 
instance temporarily created portion execution call stack 
intent design create aspect instance observed bookcopy roughly achieved creating aspect instance instance bookcopy 
mean aspect instance state available execution context methods defined bookcopy method bookcopy top execution stack 
definition execution violate constraint methods bookmanager bookcopy start pointcuts occur 
take approach having aspect represent cp bind specification need able separate mechanisms specifying execution context specification aspect instance retrieve context 
require modifications aspectj 
aspects second approach requires separate interacting aspects template class defined cp 
chief difference observer aspect instances explicitly locate subject aspect instance associated object observed 
observer aspect instance record concrete instance associated 
version default context concrete aspects clause may elided 
aspect observer aspect instance state protected object observer aspect instance methods void update subject object subject pointcuts pointcut start object subject object observer pointcut object subject advice object subject object observer start subject observer subject subject observer observer object subject subject subject subject aspect subject aspect instance state vector observers aspect instance methods void notify post observers observers sent update event void observer observer void observer observer pointcuts pointcut astatechange advice astatechange notify concrete aspects aspect extends observer instanceof bookmanager aspect instance methods void update bookmanager observer 
subject object subject return 
subject pointcuts pointcut start bookcopy bc receptions void bc pointcut bookcopy bc receptions void bc aspect extends subject instanceof bookcopy pointcuts pointcut astatechange receptions void borrow receptions void return problems 
observer pattern conceptually single aspect splitting multiple constructs unnatural crosscutting concern persists scattered form 
observer instance assumes associated single object enforce constraint 
concrete observer needs know particular concrete subjects defined concrete aspects aspectj assumes instance concrete aspect associated object 
extra object subject observer doing observing observed 
mapping aspect plus extending concrete aspects complicated error prone approach 
concerns reusability cps completely alleviated 
application programmer correctly define concrete pointcuts way fulfill behavioural constraints implied observer pattern clear straightforward process filling template parameters cps single aspect state third final approach attempt maintain state aspect instances 
possible observer pattern explicitly accounts subject possessing multiple observers 
state involved pattern divided individual object basis aspect instance having maintain crosscutting state 
case encounter problems clauses discussed section 
aspect declare interface pattern class exists cp mapped 
interfaces declare non supplemented template methods cp 
non template methods attributes pattern classes introduced corresponding interface 
interface effect adding method attribute concrete classes implement interface 
pointcuts advice remain section important difference refer instance involved instance observer pattern 
approach necessary instance contain state methods maintained observer pattern behaviour 
aspect observer type declarations interface interface public void update introductions private vector observers private void notify post observers observers sent update event private void observer private void observer pointcuts pointcut astatechange subject pointcut start subject observer pointcut subject observer advice subject observer start subject observer subject observer subject observer subject observer subject observer subject astatechange subject subject notify bind specification library base design represented single concrete aspect 
concrete class bound pattern class requires implements interface corresponding pattern class example bookcopy bound subject bookcopy implement 
non supplemented template methods declared interfaces concrete implementations introduced bookmanager bound observer update bookmanager update introduced delegate 
inherited pointcuts concrete definitions provided earlier approaches 
aspect extends observer introductions bookcopy implements bookmanager implements public void bookmanager update pointcuts pointcut start bookcopy bc bookmanager bm instanceof bm receptions void bc pointcut bookcopy bc bookmanager bm instanceof bm receptions void bc pointcut astatechange bookcopy bc instanceof bc receptions void borrow receptions void return approach appears best candidate current semantics aspectj remain potential problems 
interface declares methods lead name clashes 
example declared update method method fulfill purposes update cp invasive modifications required resolve conflict 
aspectj currently provide reconciliation mechanism differing views composition filters subject oriented programming implicit context 
form concrete aspect puts large onus user cp absence tool support identify design elements bound template parameters correctly designate pointcuts introductions 
result flexible pluggable templates error prone 
situation aspect instance maintain state execution context differs context instantiated troubles clauses discussed crop 
question situations occur 
regardless aspectj support cps cleanly 

hyper hyper prototype language realise multidimensional separation concerns paradigm 
modelling implementation paradigm supports separation overlapping concerns multiple dimensions composition decomposition 
hyper programming environment facilitates adaptation composition integration improved modularisation non invasive java software components 
section gives brief concepts inputs hyper demonstrates inputs observer cp 
background aspectj hyper constructs instances appear runtime 
hyper works java class files supporting sophisticated reasoning modularisation composition 
words may describe internals java class files describe code integrated differently 
hyper produces new java class files structure behaviour parts input class files integrated defined programmer 
main inputs developer provides hyper 

hyperspace file describes java class file composed 
selection classes composed implication classes composed specified 

concern mapping file describes pieces java files map different concerns interest 

hypermodule file describes integration concerns interest done 
different kinds composition strategies may specified merge override possibility defining match relationship method invocations invocation results invocation matched methods 
interestingly crosscutting concerns notion bracket relationship supports specification methods executed method crosscut additional behaviour 
cps inherent merge semantics evolved ideas subject oriented programming hyper high level direct map cps inputs hyper demonstrated aspectj 
attempt map cps hyper chosen consider hyper terms full specification potential defined limited implementation currently available version hyper tool 
mapping observer hyper internals observer cp library base design may described hyperspace concern mapping files bind specification composition relationship may mapped hypermodule file 
detailed level mapping difficult shall see 
look java source code implementing classes defined observer composition pattern 
subject observer classes defined observer package 
class subject vector observers void observer observer void observer observer void astatechange notify void notify observers observers sent update event class observer void update void start subject subject subject void subject subject subject code supporting library design model illustrated assume defined package 
packages considered space working defined hyperspace file hyperspace composable class observer composable class library concern mappings may defined package observer feature observer package library feature library mapping reusable observer cp code straightforward may appear 
hyper imposes restriction operations merged signature 
cps support mechanism specifying considerable flexibility signatures operations allowed replace template operations 
observer example template operations start subject 
subject 
specify parameters object type subject may parameters 
flexibility map hyper observer class illustrated defined single subject parameter methods 
mapping occur examining signatures replacing operations defined bind attachment composition relationship 
signatures template operations observer class defined appropriately 
clearly observer package reusable currently defined 
prior merged package signatures methods start merged examined overloaded methods defined methods differing signatures 
look hypermodule file specifies packages integrated 
concern mapping identified features library observer composed 
relationship defined features indicating elements name different features correspond merged 
chosen correspondences observer pattern elements potential hyperslice clear hyper bracket declaration correctly handle overloaded methods method renaming required differentiate 
override relationships currently enabled hyper tool code compiled 
merged explicitly defined name matching coincidental 
replacement observer subject pattern classes bookmanager bookcopy respectively mapped directly equate relationships 
override relationship may map replacement update method 
methods replacements operations supplemented crosscutting behaviour bracket relationship defined specify invocation appropriate methods execution 
interactive behaviour gleaned interactions cp composition relationship 
point note bind attachment composition relationship supports reasoning operations example operations property false replace astatechange template operation see fig 

equivalent specification hyper mapping process examine operations bookcopy add bracket relationship operation passes test borrow return case 
hypermodule hyperslices feature library feature observer relationships equate class feature library bookmanager feature observer observer equate class feature library bookcopy feature observer subject override action feature observer observer update feature library bookmanager 
bracket feature observer observer start bookmanager bracket feature observer observer bookmanager bracket borrow feature observer subject 
astatechange bookcopy bracket return feature observer subject 
astatechange bookcopy hypermodule see hypermodule file specifying integrate observer features potential provide clean mapping cps simple interactions specified 
illustrated observer example limitations bracket relationship currently defined may difficulties complicated interactions design 

related examined mapping particular compositional design mechanism composition patterns particular compositional implementation mechanisms aspectj hyper possibilities abound dimensions 
collaboration design role modelling compositional design approach concentrates decomposing designs basis roles objects play particular collaborations 
role modelling particular goals similar motivating separation non crosscutting concerns subject oriented design 
kendall looked role modelling map aspectj concluding aspectj adequately support required level composition roles merge override 
catalysis supports decomposition software designs vertical horizontal lines providing ability separate functional technical concerns 
subject oriented design composition patterns generic approach including support functional separation roles separation patterns crosscutting behaviour 
investigation map generic design approach compositional implementation 
looked mixins mixin layers means realising compositional implementations collaboration designs 
mixin layers useful product line architectures features understood conception optional different configurations product 
begun preliminary look mixin layers appear problematic purposes require adherence strict class hierarchy constraints easily evolvable reusable suffer decorator pattern drawbacks applied evolve existing components 
approaches providing design support crosscutting concerns appear firmly rooted aspect oriented programming paradigm exclusively 
example approaches exist extend uml stereotypes specific particular crosscutting functionality synchronisation command design pattern 
approaches clearly allowing easy mapping design implementation place onus design implementation extensive sets aspect languages require knowledge specific behaviour provide aspectj abandoned approach sake general language early stage 
suzuki yamamoto attempted generalised way supporting aspect oriented programming uml tying particular realisation compositional implementation language design language evolve rapidly particular implementation language expresses design concepts implementation limitations strength weakness different contexts 
subject oriented design taken independent route extending uml provide just constructs required support decomposition subsequent composition specification design models requirements specifications 
requirements may functional crosscutting drawbacks include need alter components decorator objects decorated objects socalled object schizophrenia problem uncertain decorated object call decorated self 
new design constructs focused compose separate models providing constructs map particular implementation paradigm 
approach model concern centric implementation paradigm centric 
focussed aspectj hyper compositional implementation mechanisms exist 
composition filters means intercepting rerouting messages arrive objects separate crosscutting concerns synchronisation described aspect oriented technique 
adaptive software described special case aspect oriented technique 
provides means separate algorithms data structure data allowing structure data change requiring related changes algorithms 
implicit context introduced structuring mechanism philosophy concentrating removing knowledge large scale smaller scale components relationship knowledge crosscutting functionality concerns distinct problems 
importance separation concerns evolutionary phase development examined lightly context early version aspectj 
evidence having aspects weak separation concerns detrimental evolutionary tasks studied having traditional object oriented modularity 
recognition need separating crosscutting concerns lifecycle 
example griss proposed development process commerce componentbased product lines draws high level analysis design composition techniques supporting techniques 
process advise map differing constructs combination approaches may 
difficulties reported reengineering implementations take advantage compositional implementation techniques originally designed highlights importance separating crosscutting concerns lifecycle 
forced manually concerns identified difficult error prone process systems discussed designed crosscutting concerns separated place porting implementations different compositional techniques studied tractable 

identified need means separate crosscutting concerns seamlessly lifecycle need existing points 
approach help realise benefits software design supporting early technical assessment crosscutting behaviour evolution non invasive addition behaviour software artefacts lifecycle designs code 
investigate current possibilities support need worked composition patterns design level aspectj hyper code level 
observer pattern example composition patterns demonstrated level encapsulation independence reusability aspectj hyper lightweight separation concerns mechanism utilise tool support compositional techniques studied 
applied ftp system regular expression matcher gnu regexp written java 
designs crosscutting concerns 
composition pattern encapsulates details details altered concrete classes bound cp remain untouched 
cp serves reusable evolvable design construct candidate design phase separation crosscutting concerns 
design base investigated map cp constructs compositional implementation models 
observer composition pattern provides overview constructs concepts added standard uml support composition patterns 
existing standard uml course available composition pattern designers composition pattern package 
example interaction diagrams constraints may defined execution operations 
constraints may impact execution crosscutting behaviour need mapped implementation 
potential map advice construct aspectj equivalent hyper complete mapping uml aspectj hyper scope captured essentials extensions standard object oriented paradigm illustrated mapping 
aspectj currently defined version preserve reusability evolvability inherent cps part due difficulties clause construct 
result crosscutting functionality defined cp remains scattered tangled aspects generated mapping 
approach appears alleviate aspects state may difficulties relating reconciliation conflicting methods 
reusability evolvability aspects representing cps potentially decreased onus framework users correctly designate pointcuts 
plans hyper defined potential relatively clean mapping simple cps hyper code 
restriction methods signature may merged difficulties 
overcoming difficulties overloaded methods reduces reusability extensibility code 
probable relationship bracketing sufficiently powerful capture complex interactions specified design 
addition refer mapping having potential necessary implement mappings version hyper contains required relationships 
tool support may alleviate difficulties extent believe working reducing inherent mismatch reusable extensible design capabilities cps constructs aspectj hyper preferable 
doing closer achieving seamless lifecycle encapsulation software artefacts associated crosscutting requirement 
closer achieving benefits separation concerns designers coders concerns crosscutting 

mehmet aks bergmans 
object oriented language database integration model composition filters approach 
ole lehrmann madsen editor ecoop european conference object oriented programming volume lecture notes computer science pages utrecht netherlands june july 
mehmet aks 
solving modeling problems object oriented languages composing multiple aspects composition filters 
position aspect oriented programming workshop th european conference object oriented programming july 
kent beck ward cunningham 
laboratory teaching object oriented thinking 
norman meyrowitz editor oopsla conference proceedings object oriented programming systems languages applications pages new orleans usa october 
clarke 
composing design models extension uml 
andy evans stuart kent bran selic editors proceedings rd international conference unified modeling language pages york uk october 
clarke 
composition object oriented software design models 
phd thesis dublin city university dublin ireland january 
clarke william harrison harold ossher peri tarr 
subject oriented design improved alignment requirements design code 
proceedings acm sigplan conference object oriented programming systems languages applications pages denver usa november 
clarke robert walker 
composition patterns approach designing reusable aspects 
proceedings rd international conference software engineering toronto canada may 
appear 
steve cook john daniels 
designing objects object oriented modelling 
prentice hall englewood cliffs usa 
souza alan cameron wills 
objects components frameworks uml catalysis approach 
object technology series 
addison wesley reading usa 
erich gamma richard helm ralph johnson john vlissides 
design patterns elements reusable object oriented software 
addison wesley reading usa 
james gosling bill joy guy steele gilad bracha 
java tm language specification 
java series 
addison wesley reading usa second edition 
martin griss 
implementing product line features composing component aspects 
proceedings st international software product line conference pages denver usa august 
william harrison harold ossher 
subject oriented programming critique pure objects 
proceedings conference object oriented programming systems languages applications pages washington usa september october 
richard helm ian holland 
contracts specifying behavioral compositions object oriented systems 
norman meyrowitz editor oopsla ecoop proceedings pages ottawa canada october 
acm sigplan 
jos luis fernando nchez miguel 
introducing separation aspects design time 
position aspects dimensions concerns workshop th european conference object oriented programming june 
wai ming ho fran ois jean marc quel plouzeau 
aspect oriented design uml 
position multi dimensional separation concerns software engineering workshop nd international conference software engineering june 
ian holland 
specifying reusable components contracts 
ole lehrmann madsen editor ecoop european conference object oriented programming volume lecture notes computer science pages utrecht netherlands june july 
elizabeth kendall 
role model designs implementations aspect oriented programming 
proceedings acm sigplan conference object oriented programming systems languages applications pages denver usa november 
gregor kiczales erik hilsdale jim hugunin mik kersten jeffrey palm william griswold :10.1.1.21.5662
overview aspectj 
proceedings european conference object oriented programming budapest hungary june 
appear 
gregor kiczales john lamping anurag mendhekar chris maeda cristina lopes jean marc loingtier john irwin 
aspect oriented programming 
mehmet aks satoshi matsuoka editors ecoop object oriented programming volume lecture notes computer science pages jyv skyl finland june 
karl lieberherr 
adaptive object oriented software demeter method propagation patterns 
pws publishing boston usa 
gail murphy albert lai robert walker martin 
separating features source code exploratory study 
proceedings rd international conference software engineering toronto canada may 
appear 
object management group 
unified modeling language specification version 
harold ossher matthew kaplan alexander katz william harrison vincent kruskal 
specifying subject oriented composition 
theory practice object systems 
wold odd 
working objects software engineering method 
manning publications greenwich usa 
yannis smaragdakis don batory 
implementing layered designs mixin layers 
eric jul editor ecoop object oriented programming volume lecture notes computer science pages brussels belgium july 
suzuki yamamoto 
extending uml aspect support design phase 
position aspect oriented programming workshop th european conference object oriented programming june 
peri tarr harold ossher 
hyper user installation manual 
ibm research 
peri tarr harold ossher william harrison stanley sutton jr degrees separation multi dimensional separation concerns 
proceedings international conference software engineering pages los angeles usa may 
michael david notkin 
role components implement collaboration designs 
oopsla conference proceedings object oriented programming systems languages applications pages san jose usa october 
robert walker elisa gail murphy 
initial assessment aspect oriented programming 
proceedings st international conference software engineering pages los angeles usa may 
robert walker gail murphy 
implicit context easing software evolution reuse 
david rosenblum editor proceedings acm sigsoft eighth international symposium foundations software engineering fse pages san diego usa november 
robert walker gail murphy 
joinpoints ordered events applying implicit context aspect orientation 
position workshop advanced separation concerns software engineering rd international conference software engineering may 
xerox 
aspectj design notes 
www aspectj org 
