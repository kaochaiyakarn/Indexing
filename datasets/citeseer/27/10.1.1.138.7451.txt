efficient path profiling thomas ball james larus bell laboratories dept computer sciences lucent technologies university wisconsin madison research bell labs com larus cs wisc edu path profile determines times acyclic path routine executes 
type profiling subsumes common basic block edge profiling approximate path frequencies 
path profiles potential uses program performance tuning profile directed compilation software test coverage 
describes new algorithm path profiling 
simple fast algorithm selects places profile instrumentation minimize run time overhead 
instrumented programs run overhead comparable best previous profiling techniques 
spec benchmarks path profiling overhead averaged compared efficient edge profiling 
path profiling identifies longer paths previous technique predicted paths edge profiles average versus instructions 
profiling shows spec train input datasets covered paths executed ref datasets 
research supported wright laboratory avionics directorate air force material command usaf arpa order 
nsf nyi award ccr support hewlett packard sun microsystems nsf mip doe de fg er 
government authorized reproduce distribute reprints governmental purposes notwithstanding copyright notation thereon 
views contained authors interpreted necessarily representing official policies endorsements expressed implied wright laboratory avionics directorate government 
copyright ieee 
published proceedings micro december paris france 
personal material permitted 
permission reprint republish material advertising promotional purposes creating new collective works resale redistribution servers lists reuse copyrighted component works obtained ieee 
contact manager copyrights permissions ieee service center lane box piscataway nj usa 
telephone intl 

path prof prof abcdef 
example edge profiling identify frequently executed paths 
table contains different path profiles 
path profiles induce edge execution frequencies shown edge frequencies control flow graph 
path profile prof frequently executed heuristic edges highest frequency identifies path frequent 
program profiling counts occurrences event program execution 
typically measured event execution local portion program routine line code 
fine grain profiles basic blocks control flow edges basis profile driven compilation uses measured frequencies guide compilation optimization 
profile information identify heavily executed paths traces program fis ell cha ys 
unfortunately basic block edge profiles inexpensive widely available correctly predict frequencies overlapping paths 
consider example control flow graph cfg 
edge cfg labeled frequency normally results dynamic profiling induced path profiles table 
commonly heuristic select heavily executed path follows frequently executed edge basic block cha identifies path path profile prof path executed times compared times path times path abcdef profile prof disparity greater edge profile exactly 
inaccuracy usually ignored assumption accurate path profiling far expensive basic block edge profiling 
path profiling ultimate form control flow profiling uniquely determines basic block edge profiles converse hold shows 
number blocks edges program finite linear program size program loops offers unbounded number potential paths 
considering acyclic paths bounds set worst case size exponential program size 
shows accurate profiling complex expensive 
describes new efficient technique path profiling 
algorithm places instrumentation accurately determines dynamic execution frequency control flow paths routine 
instrumentation simple low cost placed way minimizes overhead 
remarkably path profiling collects far information block edge profiling overhead lower usually comparable spec benchmarks path profiling average overhead efficient edge profiling overhead 
efficient path profiling opens new possibilities program optimization performance tuning 
relying heuristics fully predict executed acyclic paths spec benchmarks compilers base decisions accurate measurements 
potential application path profiling software test coverage quantifies adequacy test data set profiling program reporting statements control flow 
coverage tools measure path coverage 
tools rely weaker criteria statement control flow edge coverage 
edge profiling complete path profiling shown path profiles cover different sets paths induce edge profile 
efficient algorithm path profiling presents measurements show routines small sample programs potential paths path coverage testing feasible large portions program 
hand measurements demonstrate difficulty developing test data sets programs executed average paths compared millions potential paths identified path profiling algorithm 
count path encoding abcdef 
path profiling instrumentation 
path produces unique state register indexes array counters algorithm overview essential idea path profiling algorithm identify sets potential paths states encoded integers 
consider moment routine loop 
entry routine paths possible 
conditional branch narrows set potential paths corresponds transition new state 
routine exit final state represents single path taken routine 
presents efficient algorithm numbers final states number potential paths routine 
compact numbering final state directly index array counters 
places instrumentation transitions need occur conditional branch 
assigns states transitions computed simple arithmetic operation explicit state transition table memory 
transforms control flow graph containing loops huge numbers potential paths acyclic graph limited number paths 
illustrates technique 
edges labeled small squares contain instrumentation updates state register loop contains unique paths computes different value shown table 
loop body block register holds index increment array counters 
extensions algorithm easily extended ways 
intraprocedural profiling applied program call graph record call paths 
interesting complication indirect calls require dynamic data structure record calls edges call graph 
just counting number times path executes profiling algorithm easily accumulate metric path 
processors provide accessible counters metrics number processor cycles stalls cache misses page faults 
minor change path profiling code increment path counter change counter path 
overview path profiling algorithm instruments program record paths low run time overhead 
algorithm uses previous results efficient profiling tracing bl efficient event counting bal determine edges instrument :10.1.1.117.5458:10.1.1.111.6293
contribution combine algorithms apply new problem develop new algorithm compute update constant instrumented edge 
algorithm ensures distinct path generates unique value 
furthermore path encoding compact minimal maximum value path number unique paths cfg minus 
simple lineartime algorithm achieves goals section 
considers intra procedural acyclic paths result removing loop backedges instrumentation section 
process produces profile capture paths cross backedge 
acyclic path profiling counts number times loop iterates records paths iteration loop iteration 
approach removing edges limit number paths complex routines states represented bit integers 
large routines states array counters 
case hash table records paths execute space overhead proportional number dynamic paths number potential static paths 
relatively high cost hashing accounts higher overhead path profiling compared edge profiling 
implemented algorithms profiling tool pp uses eel library ls insert instrumentation executable binaries section 
compares pp qpt profiling tool built eel uses efficient edge profiling algorithm bl :10.1.1.111.6293
qpt usually incurred overhead system roughly comparable 
profiling spec benchmarks pp overhead averaged qpt overhead averaged section 
measurements compare profiled paths 
instrumentation edge profiling 
paths predicted edge profiles show spec benchmarks execute unique paths profiling identifies longer paths average cfg edges instructions versus edges instructions predicted paths 
path profiling shows paths executed spec train dataset cover dynamically executed instructions ref dataset suggests path profiles help improve spec peak numbers 
related path profiling algorithm previous efficient profiling tracing techniques bl gol uses spanning tree determine minimal low cost set edges instrument 
example shows controlflow graph instrumented edge profiling uninstrumented edges form spanning tree 
set edges instrumented cases 
edge profiling instrumented edge counter held memory incremented time edge executes 
shows uninstrumented edges counts derived recorded counts 
path profiling produces detailed profile instruments set edges 
path profiling instrumentation consists register instructions edge profiling instrumentation increments memory 
general path executes memory increments edge profiling execute register initializations adds plus memory increment path profiling 
practice procedures number potential paths small arrays may path profiling incurs overhead edge profiling 
procedures potential paths hash table store profile 
young smith limited form program tracing record paths branch correlation studies ys 
fifo buffer recorded branches consists basic block number branch outcome 

possible placements instrumentation control flow graph 
technique expensive path profiling requires level indirection associate counter path consists sequence block numbers 
path profiling technique need distinguish cyclic acyclic paths truncates fifo boundary 
bit tracing approach path profiling 
bit tracing associates bit value outcome twoway branch bl bal 
branch executes instrumentation code appends bit trace buffer records branch outcomes 
recording multiple bits approach extended multi way branches 
contents buffer form index array hash value 
easy see bit tracing uses minimal number bits necessary distinguish paths 
simple controlflow graphs chain statements bit tracing approach produces compact representations paths 
general bit tracing may yield compact representations paths possible 
easy construct examples maximal path value bit tracing minimal matter choice bit labellings 
worst case number entries array counters may twice method 
addition bit tracing higher run time overhead approach 
predicate instrumented approach allows flexibility placing instrumentation reduce overhead 
second machines instrumentation append bit string complex slower register register addition 
path profiling dags described previously path profiling tracks path directed acyclic graph dag updating register certain edges dag 
section shows compute necessary updates efficiently place instrumentation derive executed path resulting profile 
example shows placements instrumentation yield equivalent results 
placements incur run time overhead 
example graphs produce sum acyclic path graph largest number instrumented edges path graphs respectively 
path profiling algorithm labels edges dag integer values path entry exit dag produces unique sum edge values path path sum 
placements step may sub optimal run time overhead 
step algorithm bal improves computation finding equivalent computation uses minimal number additions dag edges dag spanning tree :10.1.1.117.5458:10.1.1.117.5458
graph uninstrumented edges squares form spanning tree 
dag may spanning trees algorithm freedom place instrumentation edges executed 
reviewing basic graph terminology section section describes basic steps path profile dag 
assign integer values edges paths compute path sum section 
encoding minimal 

spanning tree select edges instrument compute appropriate increment instrumented edge section 

select appropriate instrumentation section 

collecting run time profile derive executed paths section 
terminology remainder noted control flow graphs cfgs converted directed acyclic graphs dag unique source vertex entry sink vertex exit 
section shows transform arbitrary cfg dag path profiled 
technical reasons increment computation section requires dummy edge exit entry creates cycle graph treated dag ignoring backedge 
approach requires computing obtaining profile weight edge statically approximates edge execution frequency 
maximum spanning tree graph respect weighting maximizes weight execution frequency uninstrumented edges 
pp uses previously published effective algorithm statically computing weighting qpt bl :10.1.1.111.6293
foreach vertex reverse topological order leaf vertex edge val 
algorithm assigning values edges dag 
execution dag produces acyclic directed path starting entry exit 
path refers acyclic directed path noted 
course dag may execute times may consist loop body procedure 
spanning tree graph subgraph tree contains vertices edges spanning tree bidirectional need follow direction graph edges 
set spanning tree edges graph edge chord spanning tree 
example graph vertex entry vertex vertex exit vertex 
graph edges comprise spanning tree 
edges labeled squares chords spanning tree 
compactly representing paths sums step path profiling assign non negative constant value val edge dag sum values path entry exit unique 
furthermore path sums lie range number paths minus encoding minimal 
algorithm computes visiting vertices dag reverse topological order 
order ensures successors vertex visited 
associated vertex value records number paths exit 
algorithm simple 
vertex algorithm visits outgoing edges assigns th outgoing edge value val theorem proves algorithm correct theorem dag algorithm visits vertex number paths vertex 
control flow graph values computed algorithm 
exit path exit generates unique value sum range 
proof 
induction height vertex dag max number steps sink vertex exit 
base case height equal zero exit 
theorem trivially satisfied 
induction step show theorem holds vertex height 
successors wn height graph dag theorem holds wi 
trivial see number paths exit pn wi algorithm computes 
induction hypothesis path wk exit generates unique value sum range wk 
path exit starting edge wk generate unique value range pk wi pk wi 
wi values greater follows paths exit generate value sum 
illustrates algorithm operates example control flow graph 
note vertices labeled topological ordering reverse topological order 
vertex single outgoing edge val 
efficiently computing sums edge value assignment second step algorithm finds minimal cost set respect weighting section edges compute values preserving properties value assignment 
step algorithm finds maximal cost spanning tree graph find minimal cost set chord edges val val val val 
application event counting algorithm determine chord increments 
applies efficient event counting technique bal determine increment chord spanning tree :10.1.1.117.5458
event counting algorithm ensures sum values path entry exit identical sum note values may negative 
edge exit entry required step edge selected chord instrumentation placed exit vertex 
shows event counting algorithm applies example control flow graph 
graph left contains value assignment chord edges squares 
graph middle shows unique cycle spanning tree edges associated chord values edges cycle determine increment chord case 
informally algorithm propagates value edge chord graph right contains increments chords 
path graph yields path sum graph left 
instrumentation computing chord increments algorithm selects instrumentation 
course start program execution array counters allocated initialized 
program termination array written permanent storage 
prelude postlude instrumentation remaining instrumentation tasks initializing path register vertex updating chord incrementing path memory counter exit vertex count 
cases optimization combine updates operations shown 
optimization initialization chord may initialize path register chord path entry exit containing exists path chord chord path chord chord update initialize case moving initialization close possible avoids redundant initialization similar optimization works counter increments chord may increment path register memory counter count chord path entry exit containing optimization fold addition memory address calculation 
chord contains initialization counter increment instrumentation simply count 
algorithm places instrumentation properly 
loop moves initialization code chord edges possible moves far entry vertex initialization redundant 
second loop places memory increment code 
invariant loop vertex added working set path entry dag path contains chords 
note paths entry vertex paths contain chord chord encountered onward satisfy condition 
similar invariant maintained second loop 
shows instrumentation control flow graph 
note edges initialize register eliminating need initialize vertex furthermore update edge combined counter increment code 
notice counter increment required edge 
regenerating path recreate path profile path counters recorded run time necessary map integer representing path path 
done value assignment computed previously section 
regeneration algorithm straight forward 
regeneration starts control flow graph entry node traverses graph path value select edge follow basic block 
vertex reconstructed path path value 
initially entry number path regenerate 
block find outgoing register initialization code ws add entry ws empty vertex ws remove edge chord edge instrument incoming edge ws add instrument memory increment code ws add exit ws empty vertex ws remove edge chord edge instrumentation instrument count instrument count outgoing edge ws add instrument count register increment code uninstrumented chords instrument 
algorithm placing instrumentation 
edge largest val path traverses edge letv val 
repeat process control reaches exit vertex 
example consider control flow graph 
suppose initial path value 
vertex algorithm choose edge decrement 
vertex algorithm traverses edge vertex value path traverses edge followed resulting regenerated path abcdef path generates path sum 
early termination efficient profiling algorithms bl path profiling requires extra information derive correct profiles routines terminate unexpectedly exceptions unrecognized non local gotos calls exit :10.1.1.111.6293:10.1.1.111.6293
information consists address calls count count 
optimization instrumentation controlflow graph 
easily obtained program stack unexpected event 
event counting algorithm provides way correctly update counters routines bal :10.1.1.117.5458
path profiling arbitrary control flow section extends path profiling arbitrary controlflow graphs contain cycles including irreducible loops 
cycle control flow graph contain backedge identified depth search graph 
algorithm section works acyclic paths correspond backedge free paths 
approach handling general cfgs instruments backedge path counter increment path register initialization count records path backedge prepares record path backedge 
suppose backedges 
general cfg contains possible types acyclic paths path entry exit 
path entry execution backedge path execution backedge execution backedge note may edge 
executing backedge path exit 
removing backedges control flow graph produces dag defined section 
simply applying profiling algorithm section dag correctly distinguish types paths 
contains control flow graph loop consisting vertices ande 
suppose graph count count count count path path sum abce bce bde 
control flow graph loop 
instrumented eliminating backedge yielding dag applying path profiling algorithm dags 
resulting assignment ensure different paths yield different paths sums 
example paths bce abce gi compute identical path sum 
surprisingly paths start entry exit correctly distinguished 
solution problem consists steps vertex target backedges add dummy edge entry vertex source backedges add dummy edge exit 
edges spanning tree instrumented efficient edge increment combined code added loop backedge record path 
eliminate backedges graph edge exit entry added increment computation 
apply steps path profiling algorithm section compute value assignment chord increments 
dummy edges create extra paths entry exit value assignment algorithm takes account 
dummy edge entry loop head corresponds path register loop backedge 
dummy edge loop bottom exit corresponds incrementing path counter backedge 
shows graph transformation edge value assignment 
dummy edges thicker edges 
result chord increments correctly distinguish classes paths listed 
shows chord increments computed path sum possible path graph 
path regeneration follow steps adding dummy edges removing backedges compute value assignment regeneration algorithm section resulting graph 
self loops approach described slightly modified handle self loop edges backedges source target vertex 
removing edge leave edge loop instrument 
edges handled specially adding counter record number times execute instrumenting code count 
implementation implemented algorithms described previously tool called pp instruments sparc binary executables extract path profiles 
pp built eel executable editing library library hides complexity system specific detail editing executables ls 
eel provides abstractions allow tool analyze modify binary executables concerned particular instruction sets executable file formats consequences deleting existing code adding foreign code instrumentation 
registers path profiling requires local register routine execution hold current path temporary register instrumentation code memory increment code 
eel free registers dataflow analysis find dead registers control flow graph 
eel find unused local register frees heavily local register spilling routine stack frame 
routines eel unused local registers larger computationally intensive routines require spill code 
sparc register windows ensure local registers caller saved 
architectures need save path register calls 
eel provides facility add arbitrary points routine 
pp uses feature relies program analysis save live values call hashing code see section 
optimizations simple strength reduction optimization saves instructions path having path register hold counter address index 
pp initializes path register base counter array 
increment adds update scaled size counter bytes 
optimization saves instructions code increments path counter cost additional instruction code initializes path register 
unfortunately optimization reduces range increments fit instruction immediate field 
sparc immediate field bits optimization limited routines largest increment 
routines fewer far paths 
simple change reduce range increments routine 
algorithm visit node successors order 
visiting successor largest number paths value val assigned edge minimized increments added run time 
routines paths pp employs techniques handle routines large number paths 
pp applies routine increment larger instruction immediate field replaces array counters hash table 
sparc means routines paths require hash tables 
hash tables advantage requiring space proportional number executed paths disadvantage order magnitude costly simple memory increment forcing function call awkward places 
technique limits counter space routine roughly bytes routines require far space 
pp uses hash routines 
called loop backedges keeps pointer path hash bucket repeated lookups path fast 
bene procedures spend time tight loops repeating path 
pp technique necessary complex routines number possible paths exceeded range bit integer 
routines pp terminates value computation section number paths reachable node exceeded threshold currently 
point pp removes outgoing edges node approach terminate paths loop backedges section value computation 
information lost relation path cut edge path cut edge 
larger bit words alleviate probably eliminate need truncate paths 
experimental results section uses spec benchmarks compare path profiling pp edge profiling qpt lowest overhead conventional profiling techniques bl :10.1.1.111.6293
programs ran stand sun mhz ultrasparc processors gb memory running solaris local file system 
table presents measurements spec benchmarks ref input data 
benchmarks compiled gcc version fortran benchmarks compiled sun version 
compilers option 
pp overhead input files averaged qpt overhead averaged 
pp overhead averaged times qpt overhead 
pp overhead explained part final columns table report fraction path increments required hashing average number instructions increments 
table report cache interference caused profiling code data 
general programs little hashing compress li ijpeg turb pp overhead comparable lower qpt 
programs considerable hashing tomcatv fpppp wave low overheads blocks large paths long path increments execute infrequently 
table reports characteristics program acyclic paths 
programs number executed paths small fewer go gcc potential paths number hundreds millions tens billions path truncation 
table reports length longest average acyclic paths 
surprisingly weighted number instructions path cfp benchmarks pp measures single process execution tables report program behavior benchmark input file 
benchmark base pp qpt pp path edge hashed inst time overhead overhead qpt sec path go ksim gcc compress li ijpeg perl vortex cint avg tomcatv swim su cor hydro mgrid applu turb apsi fpppp wave cfp avg average table 
comparison path profiling pp ball larus edge profiling qpt 
base time elapsed time uninstrumented program ref dataset 
overhead increase execution time due profiling 
pp qpt ratio overheads 
remaining numbers report program behavior input file 
path number increments path counters 
edge ratio edge profiling increments path increments 
hash fraction path increments required hashing 
inst average number instructions increments 
benchmark path profile edge profile paths routines num longest avg longest avg exec max avg path edge inst edge inst correct edge inst edge inst path path go ksim gcc compress li ijpeg perl vortex cint avg tomcatv swim su cor hydro mgrid applu turb apsi fpppp wave cfp avg average table 
characteristics executed acyclic paths 
paths input file ref dataset 
num paths number paths executed 
longest longest executed path 
avg average path length weighted execution frequency 
correct fraction paths predicted entirely correctly edge profiling 
statistics edge predicted paths misprediction 
final columns report executed routines maximum average number paths executed routine 
benchmark common paths common instructions number static dynamic number dynamic go ksim gcc compress li ijpeg perl vortex tomcatv swim su cor hydro mgrid applu turb apsi fpppp wave table 
comparison paths spec ref train input datasets 
common paths reports number paths executed input datasets 
static fraction executed ref dataset paths executed train dataset 
dynamic fraction weighted execution frequency 
common instructions reports number fraction instructions common paths 
significantly longer cint benchmarks 
aggressive compiler optimizations increase numbers loop unrolling procedure lining 
table compares paths predicted edge profiling measured paths 
experiment pp followed executed path starting function entry loop head frequently executed edge block predict step path 
edges frequency pp followed taken edge 
approach predicts entirety average paths 
pp computed length predicted path mispredicted edge 
weighted execution frequency edge predicted paths nearly long measured paths versus cfg edges contained significantly fewer versus instructions 
part result reflects simple behavior spec benchmarks execute average paths routine 
consistent previous dynamic static branch prediction ff bl branches program typically follow direction high probability direction generally remains different inputs 
table compares paths executed spec train ref input datasets 
cint benchmarks train dataset identified paths executed ref dataset 
common paths important ones account path executions instruction executions 
cfp benchmarks striking train dataset identified minimum executed paths case apsi account instructions 
result consistent earlier program behavior independent program data ff bl 
measurements suggest path profiles greatly improve peak spec performance providing inexpensive accurate basis compilation 
summary describes new algorithm path profiling 
path profile records execution frequencies acyclic paths routine 
profiles provide far information basic block edge profiles obtained cost comparable best known profiling algorithms 
compared path profiles paths predicted common heuristic selects highest frequency edge basic block 
path profiles yielded slightly longer paths contained significantly instructions 
edge profiling significantly cheaper easier path profiling reasonable heuristic 
path profiling similar cost complexity edge profiling little reason forgo benefits measurement 
path profiles obtained short runs short training datasets covered paths instructions full runs 
profiles short runs form inexpensive accurate basis compilation 
bala helpful discussions path profiling 
chris david wood provided helpful comments 
bal thomas ball :10.1.1.117.5458
efficiently counting program events support line queries 
acm transactions programming lan bal guages systems september 
bala 
low overhead path profiling 
technical report hewlett packard labs 
bl thomas ball james larus 
branch prediction free 
proceedings sigplan conference programming language design implementation pldi pages june 
bl thomas ball james larus :10.1.1.111.6293
optimally profiling tracing programs 
acm transactions programming languages systems july 
cha chang 
trace selection compiling large application programs microcode 
th annual workshop microprogramming microarchitecture micro pages november 
ell john ellis 
bulldog compiler vliw architectures 
ff technical report yaleu dcs rr yale university department computer science february 
joseph fisher stefan freudenberger 
predicting conditional branch directions previous runs program 
proceedings fifth international conference architectural support programming languages operating systems asplos pages october 
fis joseph fisher 
trace scheduling technique global microcode compaction 
ieee transactions computers july 
gol aaron goldberg 
reducing overhead counter execution profiling 
technical report csl tr computer system laboratory stanford university october 
ls james larus eric schnarr 
eel machine independent executable editing 
proceedings sigplan conference programming language design implementation pldi pages june 
ys cliff young michael smith 
improving accuracy static branch prediction branch correlation 
proceedings sixth international conference architectural support programming languages operating systems asplos vi pages october 

