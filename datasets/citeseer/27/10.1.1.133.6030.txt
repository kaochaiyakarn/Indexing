fluid models solutions large scale ip networks yong liu computer science department university massachusetts amherst ma cs umass edu don towsley computer science department university massachusetts amherst ma towsley cs umass edu scalable model network active queue management aqm routers serving large population tcp flows 
efficient solution techniques allow obtain transient behavior average queue lengths packet loss probabilities average latencies 
model different versions tcp different versions red popular aqm scheme currently 
comparisons models simulation show models quite accurate time requiring substantially time solve especially workloads bandwidths high 
categories subject descriptors computer communication networks miscellaneous performance systems modeling techniques general terms performance keywords fluid model simulation large scale ip networks 
networks internet particular seen exponential growth past years 
growth continue foreseeable understanding behavior large system critical importance 
problem capabilities simulators fell size internet years ago 
gap widened growing permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
sigmetrics june san diego california usa 
copyright acm 
francesco lo universita dell aquila dipartimento di informatica aq italy lopresti di yu gu computer science department university massachusetts amherst ma cs umass edu misra computer science department columbia university new york ny misra cs columbia edu rate network growing 
attempts close gap led interesting research simulation community simulating reasonable sized network 
take recourse scalable modelling tool speed simulations 
idea behavior ip networks analytical models 
solving models numerically yields performance metrics close original networks enabling understanding key aspects performance networks 
starting point model describes behavior tcp networks set coupled ordinary differential equations 
differential equations represent expected mean behavior system 
interestingly results indicate appropriate scaling differential equations fact represent sample path behavior expected behavior 
solutions gain accuracy size network increased somewhat surprising result 
solve differential equations numerically runge kutta method simulations show speedups orders magnitude compared packet level discrete event simulators 
additionally time stepped nature solution mode lends particularly simple parallelization 
perform number optimizations identifying links bottlenecks speedup simulations 
contribution goes numerical implementation ideas 
address number critical deficiencies model 
importantly incorporate topological information set differential equations 
original model defined traffic matrix described set routers particular set flows traversed 
order flows traversed routers absent traffic matrix information potentially critical importance 
section exemplify pathological case model yields misleading results refined model corrects 
model behavior number variants tcp sack reno new reno model 
going red aqm mechanism modelled incorporate modern aqm mechanisms avq pi control 
terms related works particularly relevant 
authors develop fixed point solutions networks similar ones analyzing obtain mean performance metrics 
approach suffers deficiencies 
interested transient behavior network reveal potential instabilities 
secondly clear solution technique outlined solution complexity scales size network 
related approach 
approach authors exploit model ideas demonstrate fact behavior network invariant flow population link capacities scaled 
approach simulating large populations flows high capacity links scale system smaller number flows smaller capacity links making simulation tractable discrete event simulators 
idea appealing fact applies approach scaling technique manages population capacity links 
methodology enables exploring wider dynamic range parameters 
time stepped solution technique lends fairly straightforward parallelization solve larger networks links routers discrete event simulators 
preliminary results indicate computational complexity grows linearly size network growth complexity discrete event simulators super linear providing win fluid approach 
start deriving topology aware fluid model ip network 
numerical solution algorithm fluid model section 
model refinements described section account different versions tcp red implementations 
experiment results section demonstrate accuracy computation efficiency fluid model 
section introduce extensions model 
section concludes points directions works 

fluid models ip networks section fluid model network routers serving population tcp flows 
focus persistent tcp connections working congestion avoidance stage 
tcp flows time outs modelled section 
network model model network directed graph set routers set links 
link served rate cl bps 
addition associated link aqm policy characterized probability discarding marking function pl may depend link state queue length 
examples including red section 
queue length ql 
traffic departing queue associated arrives queue seconds 
network serves population classes tcp flows 
denote ni number flows class 
tcp flows class characteristics follow route experience round trip propagation delays 
fi ki 
ri ji 
ji ordered set queues links traversed data forward path acks reverse path class flows respectively 
distinguish forward reverse path ack traffic loss typically negligible compared data traffic loss 
ei fi ri 
ei si bi denote queues follow precede respectively 
mgt model dynamic model tcp behavior developed fluid flow stochastic differential equation analysis 
model relates expected values key tcp flows network variables described coupled sets nonlinear differential equations 

windows size 
flows class average behavior 
wi denote expected window size class flow time wi satisfies dt dt wi ri ri round trip time loss indication rate experienced class flow 
defer expressions quantities section 
ai denote expected sending rate class flow 
related tcp window size ai wi ri 

queue length queue denote nl set tcp classes traversing queue dt ql cl expr stands indicator function assumes value expr true 
differential equation describes tcp window control dynamic 
roughly speaking ri term models window additive increase wi term models window multiplicative decrease response packet losses assumed described poisson process rate 
second equation models queue length behavior simply accumulated difference packet arrival rate queue approximated term link capacity cl observe approximation arises replacing aggregate arrival rate queue time aggregate sending rate tcp flows traversing queue quantities significantly differ reasons flows shaped traverse bottleneck queues arrival rate time queue function sending rate time sum propagation queueing delays sender queue 
delay varies queue queue flow class flow class 
extreme example tcp class traverses identical red queues bandwidth tandem 
tcp traffic shaped queue peak arrival second equal equals service rate second queue 
clearly won congestion second queue 
get identical equations queues 
model predicts queue length packet marking probability shown topology aware model observed previous subsection importance accounting order tcp flow traverses links path 
section model takes account flows shaped delayed traverse network 
achieved explicitly characterizing class arrival departure rate queue 
queue fi traversed class flows arrival rate departure rate class flow respectively 
sets expressions relate departure arrival process queue forward path 
departure rate queue length zero departure rate time equals arrival rate 
queue empty queue length ns mgt ffm time queue service capacity divided competing flows proportion arrival rates 
flow class fi ql cl queue length importance topology order ql queueing delay experienced traffic departing time obtained solution equation ql 
cl arrival rate flow class arrival rate queue route just sending rate 
queue arrival rate departure rate upstream queue time lag link propagation delay 
summarized equation ai ki ab system evolution governed set differential equations 
window size 
window size wi flow class satisfies dt wi mi ri wi mi maximal tcp window size ri denotes round trip time loss indication rate time words seen sender time 
ri ri time data ack received time departed sender 
ri takes form ri fi ri ql tl cl ns mgt ffm time second queue tl time data ack arrived queue tl ei related set equations tk ts tl ql tl compute need consider fate unit traffic departs time ri node forward path assuming ack loss negligible 

queue length fi cl tl pl tl queue denote nl set tcp classes traversing 
dt ql cl nia repeat tandem queue experiment section 
revised topology order aware model gives accurate queue length results queues shown aqm policies classical example aqm policy red 
differential equation governing pl described red computes marking probability average queue length 
relationship defined min min tmax tmin max min max max min max max configurable parameters 
gentle variant red modification done min min max min max min max max max max max max max differential describing derived dx dt loge loge sampling interval weight ewma computation average queue length 
differential equation describing pl obtained appropriately scaling scheme 
aqm scheme pi differential equation describing pl pi controller tries regulate error signal queue length desired queue length 
steady state pi controller drives error signal 
relationship pl described dpl dt dq dt design parameters pi algorithm 
note rem algorithm uses similar differential equation compute price link subsequently static function compute marking probability 
scheme pi works little modification rem 
similar description avq due space constraints included 
model reduction operating networks congestion occurs spots access points peering points isps 
network links especially backbone networks operate low utilization level 
queues links empty packet dropped 
need model queueing red behavior maintain tcp states links 
network model reduced solve queueing red equations potentially congested links uncongested links transparent tcp classes introducing propagation delays 
greatly reduce computation time fluid model solver 
network topology traffic matrix identify uncongested links follows step define queue adjacent matrix exists tcp class traverses queue immediately traverses queue 
queue define set set tcp classes queue hop 
step queue marked uncongested cl ci mk maximal tcp window size nk flow population way propagation delay tcp class step remove uncongested queues topology adjust tcp route accordingly 
queues tcp class route removed remove tcp class calculate sending rate 
step queue removed step model reduction go back step 
term left hand side queue maximal traffic inflow rate upstream queues 
second term accounts fact tcp flow arrival rate queue route bounded ratio maximal congestion window way propagation delay 

time stepped model solution gorithm solution fluid model obtained solving group delayed differential equations defined low computational cost 
implemented fluid model solution matlab matlab ordinary differential equation ode solver suite 
script language matlab far optimized terms computation cost doesn provide programming flexibility 
alternatively programmed fixed step size runge kutta algorithm solve fluid model 
runge kutta algorithm widely method solve differential equations numerically 
briefly system described dy dt ym solution obtained numerical integration nh kn kn kn kn solution step size kn tn nh kn tn nh kn kn tn nh kn kn tn nh kn implementing runge kutta algorithm fluid model solver essentially time stepped network simulator 
depicts flowchart fluid model solver 
reading network topology tcp traffic matrix configuration file fluid model solver conducts model reduction algorithm section 
fluid model solved step step duration simulated time 
time step sending rate tcp class updated queue length packet loss probability congested queue calculated corresponding aqm equations 
red tcp state variables ri updated equations 
solution fluid model including sending rate tcp class congested queue packet loss probability queue length dumped data files process 
solve equations directly need track back time class instant data ack arrived queue 
find convenient proceed rewriting equations forward time expressing value round trip time loss rate indication arrival departure rate function current values 
proceed follows round trip time ei 
total delay accrued unit data ack time arrived node definition ri start simulation 
update windows tcp classes update queue length loss probability congested link update tcp state variables queues route dumping data flowchart fluid model solver compute delays forward time follows tf bi qbi abi tf bi ab data arrival time link data arrive previous link bi time loss rate indication ei 
amount data arriving link time lost 
definition tf pb fi tf ri departure rate expressions departure rate directly obtained 
class fi ql arrival rate cl flow fi ql cl ql ab accuracy solution differential equation system determined stiffness system solution step size 
smaller step size accurate solution 
hand computation cost time stepped fluid model solver proportional step size 
fluid model solver tradeoff step size solution accuracy stringent 
stiffness fluid network model bounded smallest round trip time tcp classes highest bandwidth congested queues 
achieve accurate results small step size 
fluid model solver runs fast small step size 
see section step size ms small fluid model solver get accurate solution time enables solution large ip network obtained reasonably fast 

refinements fluid model model section captures basic dynamic behavior tcp red 
implementation details change behavior certain extent 
section model refinements account variety detailed behavior tcp red 
variants tcp equation models behavior tcp reno 
starting reno version tcp implements fast recovery mechanism 
tcp halves congestion window number duplicated acks crosses threshold 
multiple packet losses window tcp reno reduces window times 
fast recovery inefficient 
new fast recovery mechanisms implemented newreno sack ensure window reduction packet losses window 
simulation results show newreno sack recover faster reno multiple packet losses 
model fast recovery mechanisms newreno sack replace perceived packet loss rate equation effective loss rate ri ai ri approximates packet loss probability 
consequently numerator probability packet lost window ri ai ri packets 
models actual window back rate tcp newreno sack loss indication rate 
packet loss probability ai ri small 
compensation variance tcp windows equation stationary state studies predict think difference comes assumption loss event process :10.1.1.143.9137
model mean value model model order statistics tcp window sizes queue lengths 
real network second order statistics variance tcp window size impact network stationary behavior 
example average window size approximate tcp window size back 
accurate loss arrival independent tcp window 
correlation tcp class window size perceived loss arrival negligible compensation necessary 
extreme example single bottle neck supporting single tcp class flows 
denote window size ith flow class 
average window size class small packet loss probability probability packet window dropped approximately average back class bigger 
demonstrate conduct ns simulation single bottle neck serving single class tcp flows measure tcp flow window size immediately back 
tcp window sizes back offs generally bigger average window size compensate average mean window size time tcp window sizes prior back offs model average back tcp flow 
contains results ns fluid model multiplicative decrease factor md md 
red implementation adjustments section model different versions red implementation 
geometric uniform calculating packet marking probability average queue length red marks packet independently time interval marks 
assumes geometric distribution authors point geometric inter marking time cause global synchronization connections 
propose marking mechanism uniformly distributed 
arriving packet marked probability count count number unmarked packets arrived marked packet 
packet marked count 
doing actual packet marking probability approximately 
account uniform dropping packet marking probability red calculated fluid model pl xl piece wise linear red marking profile defined 
wait option ns implementation red option wait introduced avoid marking packets row 
wait option default ns version arriving packet marked probability count count 
packet marked class class class single bottle neck network dynamic workload probability count 
inter marking interval uniformly distributed 
effectively reduces packet marking probability 
account implementation details change calculation red marking probability fluid model pl xl wait xl wait simulation single bottle neck network single tcp class flows 
red queue bottle neck uses ecn marking 
shows results red queue wait option 
notice packet marking probability predicted fluid model little higher actual packet marking rate ns 
don model timeout need higher packet marking rate bring tcp sending rates 

experimental results performed extensive experiments evaluate accuracy computation efficiency fluid models 
limited space able representative experiments 
results available interested readers 
experiments section tcp newreno red ecn marking aqm policy 
stepsize fluid model solver fixed ms 
start single bottle neck topology variable tcp workload 
fluid model accuracy tested comparing solution simulation results obtained ns network operates stable unstable regions 
section fluid model scalability demonstrated bottleneck topology 
results show fluid model scalable link bandwidth flow populations 
addition accuracy improves link bandwidth scales 
experiment test capacity fluid model simulation large topology nodes thousands tcp classes consisting tcp flows 
computation results show fluid model approach promising simulating large ip networks 
accuracy fluid model experiment demonstrate accuracy fluid model 
shown tcp classes sharing bottle neck link bandwidth mbps 
tcp class consists homogeneous tcp flows 
totally queues 
model reduction fluid model need simulate queues potentially congestion 
tcp class start time 
seconds class sending data 
number tcp flows bottle neck link reduced 
system enters unstable region 
second class class active 
tcp workload increases factor 
system average window size average queue length md md ns time window size ns ffm 
ffm time wait packet marking prob 
compensation window variance average queue length account red implementations md md ns time loss probability ns ffm 
ffm time wait window size group ns sample ns average ffm class class time tcp window size queue length ns ffm results single bottleneck topology class network bottlenecks eventually settles stable operation point 
compare fluid model solution results obtained ns 
plots tcp connection window sample path average window size obtained ns fluid model 
fluid model captures average window behavior system stable unstable 
plots instantaneous queue length ns average queue length predicted fluid model 
see match implies fluid model calculates red packet marking probability accurately 
model scalability link bandwidth second set experiments show fluid model scalability link bandwidth flow populations 
set tcp classes network links 
link bandwidth flow population class set proportional scale parameter ranges 
link node node link node bandwidth mbps 
links bandwidth mbps 
tcp class consists tcp flows 
order simulation results different scales comparable change red thresholds min max proportional queue averaging weight inversely proportional totally queues network 
model reduction algorithm identifies uncongested queues don need simulated 
run simulation seconds ns fluid model solver 
show simulation results respectively 
ns simulation results eventually converge fluid model solution gets bigger 
fluid model scalable link bandwidth flow population computation cost obtain model time bottle neck queue ns ffm speedup table computation cost fluid model solution invariant scale parameter hand packet events inns grows link bandwidth number flows scale 
takes longer ns simulation finish 
table lists pure computation costs unit second ns fluid model dumping data 
larger scale bigger computation savings fluid model 
experience large ip networks experiment test capacity fluid model simulation approach large ip network structured topology 
simulated topology adapted baseline network model posed challenge large network simulators darpa network modelling simulation program 
high level topology visualized ring nodes 
node ring represents campus network connected neighbors links bandwidth gbps random delay uniformly distributed range ms 
addition node connected randomly chosen node neighbors chord link 
ring structure generated 
campus networks nodes share topology shown 
campus network consists sub networks net 
links campus networks bandwidth gbps 
node net acts border router connects border routers campus networks 
links net random delays uniformly distributed range ms 
links connecting sub networks random delays uniformly distributed range ms 
links net net net random delays ms 
net contains routers application servers 
net net contains routers connecting client hosts 
traffic contains persistent tcp flows 
router sending rate sending rate ns class ffm class ns class ffm class time tcp sending rate ns class ffm class ns class ffm class time tcp sending rate queue length simulation results queue length ns bottleneck ffm bottleneck ns bottleneck ffm bottleneck simulation results time bottle neck queues ns bottleneck ffm bottleneck ns bottleneck ffm bottleneck time bottle neck queues time ring structure computation cost function net net tcp classes 
destined servers neighboring campus network 
classes destined servers campus network connects chord link 
tcp class contains homogeneous tcp flows 
total entire network nodes queues tcp classes 
experiment carried dell precision workstation configured pentium iv processors ghz gb memory 
program parallelized 
processor utilized 
fix flow population tcp class vary number campus networks ring 
topology simulated seconds 
model reduction algorithm identifies queues uncongested 
illustrates simulation times grow linearly number campus networks 
simulation largest topology consists nodes tcp flows finished minutes seconds 

extensions works seen previous sections fluid model net topology large ip network net net topology subnetworks approach promising simulating large ip networks 
numerical solution gives plenty flexibility extend fluid model worrying complexity solving analytically 
section model extensions done haven conducted extensive validations 
model time slow start model described section captures additive increase multiplicative decrease dynamic tcp window control 
shown model easily extended account timeout losses slow start behavior tcp replacing dt ca wi ri ca net ri wi pi wi pi wi ri term models exponential growth window size slow start phase tcp wi term models window reduction response timeout losses 
ca probability flow class congestion avoidance ca 
long lived flows ignore slow start phase set ca 
short lived flow hand slow start set ca 
pi probability loss timeout loss 
probability approximated pi min wi 
incorporate unresponsive traffic majority internet traffic controlled tcp non negligible amount traffic unresponsive congestion 
generated udp connections simply tcp connections short experience congestion 
studies unresponsive traffic impacts aqm performance mgt model 
incorporate unresponsive traffic model changing dt ql cl ul ul aggregate unresponsive traffic rate queue generating individual unresponsive flows different unresponsive traffic rate models derived ul speed simulation 

works developed methodology obtain performance metrics large high bandwidth ip networks 
started basic fluid model developed considerable improvements enhancements 
importantly model developed topology aware 
contribution independent interest terms theoretical fluid studies networks topology awareness play critical part regarding stability performance demonstrated simple tandem queue example 
incorporated number tcp features variants number different aqm schemes model 
solution methodology computationally extremely efficient scalable model enables obtain performance metrics high bandwidth networks capabilities current discrete event simulators 
technique scales size network displaying linear growth computational complexity opposed super linear observed discrete event simulators 
time stepped nature solution lends straightforward parallel implementation pointing possible avenue simulating large networks 
extend fluid model time validate model extensions including described previous section 
model reduction algorithm described section space improve 
exciting direction integrate fluid model simulator existing packet level simulators conduct hybrid simulation 
hybrid simulation fluid simulator simulate back ground traffic core network provide network delay loss information packet traffic running fluid core 
preliminary attempts integrate fluid simulator proven successful 
working integrating fluid simulator parallel packet level simulators distributed fashion boost simulation speed 

darpa nms baseline network topology 
www cs dartmouth edu nicol nms baseline 
parallel distributed ns 
www cc gatech edu computing compass 
scalable simulation framework 
www org 
network simulator ns 
www isi edu nsnam ns 
virtual internetwork testbed 
www isi edu nsnam vint 
altman avrachenkov barakat 
stochastic model tcp ip stationary random losses 
proceedings acm sigcomm september 
baccelli mcdonald 
mean field model multiple tcp connections buffer 
proceedings ifip wg performance 
bu towsley 
fixed point approximation tcp behavior aqm network 
proceedings acm sigmetrics 
daniel moore editors 
computation theory ordinary differential equations 
san francisco freeman 
fall floyd 
simulation comparisons tahoe reno sack tcp 
computer communications review july 
floyd jacobson 
random early detection gateways congestion avoidance 
ieee acm transactions networking august 
liu misra towsley 
unresponsive flows aqm performance 
proceedings ieee infocom 
misra towsley 
gong 
designing improved controllers aqm routers supporting tcp flows 
proceedings ieee infocom april 
padhye firoiu towsley kurose 
modeling tcp throughput simple model empirical 
proceedings acm sigcomm 
srikant 
analysis design adaptive virtual queue algorithm active queue management 
proceedings acm sigcomm 
misra 
gong towsley 
fluid analysis network aqm routers supporting tcp flows application red 
proceedings acm sigcomm 
pan prabhakar 
scaling hypothesis simplifying prediction network performance scaled simulations 
acm computer communications review january 

limit behavior ecn red gateways large number tcp flows proceedings ieee infocom 
