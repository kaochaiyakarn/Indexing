torus rule multi dimensional queries systems prasanna ganesan beverly yang hector garcia molina peer peer systems enable access data spread extremely large number machines 
systems support simple lookup queries 
new applications photo sharing massively multiplayer games benefit greatly support multidimensional range queries 
show queries may supported system adapting traditional technologies novel routing networks load balancing algorithms 
show adapt popular spatial database solutions kd trees space filling curves experimentally compare effectiveness 

peer peer systems key medium publishing finding information internet today 
popularity stems ease self administering nature scalable support large numbers users relatively anonymous privacy preserving content publishing model 
content system modelled horizontally partitioned relation just parallel database system possessing control data partitioned nodes :10.1.1.105.3673
systems far deployed proposed literature support simple lookup queries relation queries retrieve tuples particular key value :10.1.1.140.3129
extended functionality support efficient range queries single attribute 
interesting applications require powerful multi dimensional range queries conjunctive queries containing range predicates attributes relation 
example consider photo sharing application user publishes photographs tagged metadata gps location information time picture taken keywords associated picture 
typical query system contain range predicates multiple attributes user may request photographs taken year location permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
copyright acm xxxxx xx xx xx 
stanford university hector cs stanford edu metres specified place 
example massively multi player online games involve large sets users moving virtual space 
user continuously queries system locate objects users certain distance position dimensional dimensional world 
solutions multi dimensional queries available world databases 
adapting solutions world presents challenges distribution data needs partitioned large number nodes ensuring load balance nodes efficient queries 
dynamism nodes system may join leave frequently 
data partitioning needs dynamic set nodes retaining balance efficient queries 
data evolution data distributions may change time cause load imbalance nodes remain stable 
data may need re partitioned nodes frequently ensure load balance 
decentralization systems central site maintains directory mapping data nodes 
query submitted node efficiently transmitted relevant nodes forwarding query overlay network nodes 
overlay network designed ensure cost forwarding queries cost updating network structure nodes join leave low 
problem supporting multi dimensional queries system broken components partitioning routing 
partitioning strategy distributes relation set nodes supporting insertion deletion tuples joining new nodes leaving existing ones partitioning strategy chosen distribute data nodes require routing strategy transmit query relevant nodes 
discussed earlier nodes interconnected overlay network node having communication links small number neighbor nodes queries routed overlay network delivered relevant nodes 
adapt different database approaches multi dimensional queries space filling curves setting tackling challenges sections 
compare resulting solutions order understand strengths weaknesses approach context section 
desiderata solution supporting multi dimensional queries ideally certain properties 
partitioning strategy characteristics locality cost executing query system proportional number nodes need process query query ideally execute nodes possible 
multi dimensional range queries implies partitioning locality tuples nearby data space ideally stored node 
load balance amount data stored node roughly ensure load balance load balance ensured data evolves tuple insertions deletions nodes join leave system 
minimal metadata define partition metadata directory maps data point node managing partition containing point 
system central site maintain directory metadata distributed participant nodes 
metadata needs performed updating multiple nodes nodes join leave system 
wish keep metadata small simple possible 
note properties desirable partitioning data parallel database 
environment merely crucial 
addition routing algorithm overlay network characteristics low node state number links maintained node small 
necessary links need updated time new node joins old node leaves 
efficient routing number messages required send query relevant nodes small 
routing load balance number routing messages forwarded second roughly equal nodes 
rules tree overlay networks traffic pass root tree 

related partitioning single dimensional data hash partitioning distribute tuples set disks 
relational key hash attribute approach ensures load balance minimal meta data just hash function 
hashing destroys data locality range queries expensive 
range partitioning designates node responsible contiguous range attribute values provides locality 
amount meta data fairly small requiring just attribute values partition boundaries 
ensuring load balance partitions data evolves non trivial problem 
shown load balance may achieved efficiently 
partitioning multi dimensional data data multi dimensional partition just generally may require number queries executing node equal access patterns uniform data 
subsequent discussion algorithms generalize directly case 
dimension approach expensive queries involve ranges non partitioning attribute query forwarded large number nodes 
declustering strategy bubba parallel machine improves idea enhancing range partitioning secondary indexes short range queries continue expensive 
magic declustering strategy fragments data space grid rectangular fragments set partitioning values dimension 
fragment allocated node ensuring nodes manage roughly number fragments 
strategy requires prior knowledge total number nodes unclear adapted support dynamic node joins leaves 
serious load balancing issues data distribution uniform 
partitions data space filling curves approach section 
spacefilling curves different objective destroy data locality preserve 
routing discuss solutions adaptations routing structures distributed hash tables deal added complexities arising multi dimensional nature data space non uniformity node partitions data space :10.1.1.118.8846:10.1.1.140.3129

scrap space filling curves range partitioning approach supporting multi dimensional queries scrap uses step solution partition data data mapped single dimension space filling curve single dimensional data range partitioned dynamic set participant nodes 
step may map multi dimensional data single dimension space filling curve ordering hilbert curve 
example say dimensional data consists bit attributes dimensional data point reduced single bit value interleaving bits dimensional point mapped single dimensional value 
mapping corresponds ordering space filling curve 
note mapping bijective dimensional point maps unique single dimensional value vice versa 
second step data reduced dimension space filling curve relation range partitioned available nodes node manages data contiguous range values 
maintaining range partitioning nodes join leave easy new node joins simply splits range existing node node leaves neighbors takes range routing execute queries scrap network multi dimensional query sent set nodes contain data relevant query 
may visualize routing step process actual implementation steps interleaved efficiency 
nodes may leave gracefully data may need replicated avoid loss 
ignore issue standard techniques take care problem 
multi dimensional range query converted set range queries guaranteed contain query answers 
route range queries acquired step appropriate nodes query nodes ranges intersect query range 
step performed known algorithms query mapping space filling curves 
note query mapping algorithms simple heuristics ensure number ranges returned large 
heuristics may result false positives portions resulting ranges map point native query range 
example correct set ranges algorithm may return 
false positives may result non relevant node receiving processing query 
step performed known routing network known skip graph 
skip graph circular linked list nodes arranged order partition boundaries enhanced additional skip pointers enable faster routing 
pointers constructed randomized protocol node establishes log pointers number nodes exponentially increasing distances list th skip pointer expected point node positions away list 
normal doubly linked list locating node containing specific data point take messages 
skip pointers log messages required 
finding relevant nodes query consists finding node containing minimum point query range skip graph routing protocol remaining relevant nodes reached neighbor links successor nodes list 
discussion scrap approach meets desiderata defined earlier 
locality achieved space filling curve attempts ensure nearby data points multi dimensional space adjacent single dimension 
number dimensions increases locality worse space filling curves curse dimensionality 
load balance scrap achieved techniques developed single dimensional range partitioning 
key idea techniques perform local alterations range partitioning operations adjusts partition boundary nodes managing neighboring ranges transfer load node reorder uses node empty partition split range heavily loaded node 
show judicious operations leads guaranteed load balance guaranteeing cost achieving load balance small 
metadata required describe partitioning small required node partition boundaries neighbors 
overlay network low state achieved log links node 
routing load balance achieved due symmetric nature skip graphs 
query routing single range efficiently performed log hops 
native dimensionality data increases number relevant nodes original multi dimensional query may increase dramatically leading increased routing cost 
evolution partitions nodes join network 
partition represents node network 
routing example murk network 

murk multi dimensional rect angulation kd trees second approach murk partitions data situ high dimensional space breaking data space rectangles high dimensions node managing rectangle 
way achieve partitioning kd trees leaf corresponds rectangle stored node 
illustrate partitioning 
imagine initially node system manages entire space corresponding single node kd tree 
second node arrives space split dimension parts equal load node managing part corresponds splitting root node kd tree create children 
nodes arrive node splits partition managed existing node existing leaf kd tree 
dimensions cyclically splitting ensure locality preserved dimensions 
node leaves space needs taken existing nodes 
simple case node sibling tree leaf node case sibling node takes space 
complex case arises node sibling internal node node 
node leaves lowest level leaf node sibling subtree say node hands data sibling node takes position node 
note means partitioning similar employed existing system called crucial difference hashes data multi dimensional space data expected uniformly distributed new node splits existing node data space equally splitting load equally 
philosophical level key difference number dimensions governed dimensionality data routing considerations 
see section low dimensionality routing performs poorly 
routing interconnect nodes multidimensional range query sent relevant nodes 
simple way interconnect nodes create link neighboring nodes nodes share boundary resulting grid structure 
uses structure routing albeit rectangles roughly size 
observe structure multi dimensional analogue linked list 
routing grid links proceeds greedy routing 
say multi dimensional query requires data rectangle define distance node rectangle minimum manhattan distance distance point rectangle point routing protocol forwards query node grid neighbor reduces manhattan distance largest amount 
example query routing shown query routed node labeled destination marked 
query reached nodes relevant data say node sends query neighbors relevant data proceeding recursively relevant nodes reached 
note node know partition boundaries neighbors 
optimized routing naive approach simple major shortcomings nonuniformity number grid neighbors node longer uniform linked list node neighbors 
distribution data points uniform nodes manage partitions unequal space 
nodes manage partitions covering large space grid neighbors compared nodes managing small spaces 
problem number neighbors balanced peers may translate unbalanced routing load 
inefficiency grid pointers effective improving query efficiency especially dimensionality low 
example uniform grid nodes node having neighbors query routing requires messages 
hand linked list node having just skip pointer addition list pointers routing requires log messages 
despite presence grid pointers additional skip pointers necessary ensure efficient routing 
attempt combat problem nonuniform numbers grid pointers unclear overcome preserving routing load balance 
second problem node maintain skip pointers nodes order speed routing 
note maintain greedy routing protocol node forward query neighbor closest destination neighbor grid neighbor neighbor skip pointer 
key determine skip pointers chosen node 
case simply skip graphs assign skip pointers 
obvious analogue skip graphs higher dimensions approach develop heuristic methods establishing skip pointers evaluate performance experiments 
consider different approaches establishing skip pointers random node maintains skip pointers nodes chosen random set nodes 
practice finding random node implemented random walks overlay network 
random skip pointers allow kind query efficiency routing robustness multiple realities requiring data replicated 
space filling skip graph recall key idea skip graph ensure node maintained skip pointers exponentially increasing distances 
emulate exponential distribution skip pointers strategy linear ordering nodes note node distribution uniform possible obtain exactly routing performance irrespective number dimensions generalization skip graphs 
discuss 
created distance nodes linear ordering approximates grid distance nodes native space 
linear ordering achieved follows id node defined coordinate centroid partition mapped dimension spacefilling curve curve 
nodes ordered linearly node id skip graph built linear ordering nodes nodes maintain linked list sorted node id additional skip pointers just dictated skip graph 
note skip graph construction continues occur completely decentralized fashion 
intuitively structure multi dimensional approximation skip graph skip pointers nodes distributed exponential fashion 
discussion murk solution offers data locality partitions data space exactly rectangles nodes 
metadata necessary describe partitioning simply kd tree size fairly small proportional number nodes system 
load balancing partitions tricky 
data distribution static change time possible obtain load balance nodes simple techniques developed load balancing distributed hash tables 
data distribution dynamic insertion deletion tuples partitions unbalanced set nodes fixed 
ongoing investigating reorder primitives discussed section achieve dynamic load balancing 
routing properties murk difficult formalize defer discussion routing performance evaluation section 
evaluation evaluate effectiveness proposed solutions multi dimensional queries systems 
setup experiments compare approaches scrap scrap network ordering spacefilling curve 
murk ran murk network node maintains log skip pointers chosen random 
murk sf murk network skip pointers determined space filling skip graph nodes partition centroids 
murk baseline comparison evaluate multi dimensional range queries standard grid network skip pointers 
evaluate approach simulation 
highlevel action query simulate messages sent nodes 
measure performance approach metrics locality average number nodes answer query stored 
routing cost average number messages exchanged nodes order route query 
due space constraints omit description evaluation metrics data routing load distribution nodes comment metrics section 
locality routing cost scrap murk dimensionality scrap murk murk sf murk ran dimensionality performance dimensionality data varied locality scrap murk note query sent network nodes process query route nodes answers nodes process partitions overlap query potentially answers query 
differentiate types type captured routing cost second captured locality 
workload consists region queries selectivity entire data space 
define selectivity fraction entire data space covered query region 
note selectivity determine number data points region data distribution uniform 
selectivity may varied study approach performs various range sizes 
evaluate queries types data uniformly random data uniform generate dimensionality desired highly skewed clustered data clustered consisting gps coordinates real life digital photo collection 
experiments static network constructed initially inserting data single node progressively allowing nodes join system expand desired size 
experiments dynamic networks omitted due space constraints 
results locality set experiments compares merits scrap murk partitioning strategies terms locality obtained queries parameters varied number dimensions number nodes query selectivity data skew 
experiment varies parameters holding fixed 
locality results shown upper set graphs figures 
discuss routing cost results shown lower set graphs 
recall total number nodes handle query equal routing cost locality added 
depicts performance approach number dimensions increases 
queries fixed selectivity executed network nodes 
see locality top degrades little routing cost network size network size scrap murk murk sf murk ran performance size network varied locality routing cost scrap murk uniform solid line skew dotted line query selectivity scrap murk murk sf murk ran uniform solid line skew dotted line query selectivity performance selectivity range query varied dimensions murk 
query locality scrap poor dimensions queries visit nodes find relevant data 
locality suffers scrap curse dimensionality 
dimensionality increases nearby points native space increasingly far apart mapped space 
addition approximate query mapping algorithms returns fixed number intervals native region contained see section discussion number false positives introduced algorithm increases dimensionality 
false positives nodes relevant process query locality suffers 
depicts performance number nodes system increases dimensional data fixed query selectivity 
locality graph top see murk scales increasing numbers nodes query hits just node 
scrap hand somewhat worse locality increasing roughly linearly number nodes 
note axis logarithmic scale 
shows impact query selectivity data skew performance 
solid lines correspond experiments uniform dataset dotted lines correspond clustered dataset 
axis vary selectivity query executed dimensional data network nodes 
locality graph top see locality murk increases linearly increasing query selectivity clustered data suggests data balanced nodes 
locality scrap worse murk additional degradation induced clustered data 
locality degrades scrap imperfect ability space filling curves map nearby points native space nearby points mapped space 
query covers increasingly large region native space proportionally larger number disjoint intervals needed express native region 
see top locality fact sublinear largely due fact disjoint intervals map node 
summary murk far outperforms scrap terms locality especially dimensionality selectivity net size increase 
routing second set experiments compares routing costs scrap murk varying parameters earlier experiments 
bottom see routing cost approach number dimensions varied 
surprisingly cost scrap routing independent number dimensions scrap routes space number intervals output query mapping algorithm fixed 
murk see murk sf murk ran better murk low dimensions 
example murk requires orders magnitude messages route query compared murk sf murk ran 
note logarithmic scale 
high dimensions grid pointers node improvement obtained skip pointers marginal 
bottom plots routing cost data number nodes varied fixed selectivity query 
observe murk performs poorly expected routing cost 
routing cost scrap increases logarithmically number nodes just expected 
murk sf performs consistently better scrap suggesting space filling skip graph heuristic effective performs better scrap nodes additional grid pointers murk single query needs routed 
scrap route query interval output query mapping algorithm 
murk ran outperforms murk sf small network sizes 
skip graph pointers small networks close aid efficient routing large networks 
fact turns threshold network size murk sf outperforms murk ran increases dimensionality 
threshold nodes higher values higher dimensions 
similarly queries select data threshold size increases query selecting lots data needs reach relevant nodes routing intuitively akin routing network fewer nodes 
bottom depicts routing costs uniform clustered data selectivity query varied 
solid lines depict cost uniform data dotted lines cost clustered data 
cost scrap routing remains flat irrespective query range data clustering showing adapts data distribution skew 
cost murk higher approaches confirming need skip pointers murk 
murk sf murk ran perform better uniform data clustered data 
clustered data see murk sf performs considerably better murk ran factor query ranges 
confirms space filling skip graph heuristic murk sf performs practice better random skip pointers 
summary find routing baseline murk network expensive unscalable 
skip pointers effective reducing routing cost murk especially network size increases 
particular murk sf tends outperform murk ran network size large data skewed low dimensionality 
scrap routing efficient looking locality rout ing costs find murk sf murk ran superior approaches variables studied 

approaches supporting multidimensional queries 
approach scrap uses spacefilling curves range partitioning performs low dimensions 
allows efficient load balancing nodes tuples inserted deleted 
second approach murk partitions data rectangles native space 
combination space filling skip graph murk proves efficient scrap especially high dimensions 
preliminary experiments suggest scrap murk offer data routing load balance data distribution static 
achieving efficient load balance murk dynamic data distributions potentially expensive subject current research 
plan investigate scrap murk specific application photo sharing 

adler halperin karp vazirani 
stochastic process hypercube applications peer peer networks 
proc 
stoc pages june 
silberschatz korth sudarshan 
database system concepts chapter 
mcgraw hill 
aspnes shah 
skip graphs 
proc 
soda 
bohm kriegel 
xz ordering space filling curve objects spatial extension 
proc 
symposium large spatial databases 
copeland alexander keller 
data placement bubba 
proc 
sigmod 
faloutsos bhagwat 
declustering fractals 
proc 
intl 
conf 
parallel distributed information systems 
ganesan bawa garcia molina 
online balancing range partitioned data applications peer peer systems 
technical report stanford university 
ghandeharizadeh dewitt 
performance analysis alternative multi attribute declustering strategies 
proc 
sigmod 
harvey jones saroiu theimer wolman 
skipnet scalable overlay network practical locality properties 
proc 
usits 
jagadish 
linear clustering objects multiple attributes 
proc 
sigmod 
karger ruhl 
simple efficient load balancing algorithms peer peer systems 
proc 
iptps 
knutsson lu xu hopkins 
peer peer support massively multiplayer games 
proc 
infocom 
naor wieder 
novel architectures applications continuous discrete approach 
proc 
th acm symp 
parallelism algorithms architectures spaa pages june 
orenstein 
class data structures associative searching 
proc 
pods 
ratnasamy francis handley karp 
scalable content addressable network 
proc 
sigcomm 
rowstron druschel 
pastry scalable distributed object location routing large scale peer peer systems 
proc 
middleware 
stoica morris karger kaashoek balakrishnan 
chord scalable peer peer lookup service internet applications 
proc 
sigcomm 
