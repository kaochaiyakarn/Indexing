evolution ecology optimization digital organisms thomas ray school life health sciences university delaware newark delaware ray udel edu ray santafe edu ray hip atr jp digital organisms synthesized computer metaphor organic life cpu time energy resource memory material resource 
memory organized informational genetic patterns exploit cpu time self replication 
mutation generates new forms evolution proceeds natural selection different genotypes compete cpu time memory space 
addition new genotypes appear exploit creatures informational energetic resources 
digital organisms self replicating computer programs escape run exclusively virtual computer unique machine language 
single ancestral creature evolved tens thousands self replicating genotypes hundreds genome size classes 
parasites evolved creatures immune parasites parasites circumvent immunity 
hyper parasites evolved subvert parasites reproduction drive extinction 
resulting genetically uniform communities evolve sociality sense creatures reproduce cooperative aggregations aggregations invaded cheating hyper hyper parasites 
diverse ecological communities emerged 
digital communities experimentally study ecological evolutionary processes competitive exclusion symbiosis host parasite density dependent population regulation effect parasites enhancing community diversity evolutionary arms races punctuated equilibrium role chance historical factors evolution 
possible extract information aspect system disturbing phylogeny community structure time genetic makeup metabolic processes individuals 
digital life demonstrates power computational approach science complement traditional approaches experiment theory analysis calculus differential equations 
optimization experiments shown freely evolving digital organisms optimize algorithms factor hours real time 
addition evolution discovered optimization technique unrolling loop 
evolution may provide new method optimization generation application programs 
method may prove particularly useful programming massively parallel machines 
keywords evolution ecology artificial life synthetic life emergence self replication diversity adaptation coevolution optimization thomas ray school life health sciences university delaware newark delaware ray udel edu ray santafe edu ray hip atr jp evolution ecology optimization digital organisms marcel mechanical th century human art took build flat lost lost bird 
inside marcel little johann 
magnets 

marcel really mechanical 
inside give touch humanity 
thomas gravity rainbow 
ideally science biology embrace forms life 
practice restricted study single instance life life earth 
life earth diverse presumably part single phylogeny 
biology sample size know features life peculiar earth features general characteristic life 
truly comparative natural biology require inter planetary travel light years away 
ideal experimental evolutionary biology involve creation multiple planetary systems essentially identical varying parameter interest observing billions years 
practical alternative inter planetary mythical biology create synthetic life computer 
objective necessarily create life forms serve models study natural life create radically different life forms completely different physics chemistry life forms evolve phylogeny leading forms natural unique physical basis 
truly independent instances life may serve basis comparison gain insight general peculiar biology 
aspects life prove general occur natural synthetic systems studied easily synthetic system 
evolution bottle provides valuable tool experimental study evolution ecology 
intent synthesize simulate life 
approach starts hand crafted organisms capable replication open ended evolution aims generate increasing diversity complexity parallel cambrian explosion 
state goal leads semantic problems life defined way restrict carbon forms 
general agreement definition proposition life need carbon 
simply state conception life general sense 
consider system living self replicating capable open ended evolution 
synthetic life self replicate evolve structures processes designed pre conceived creator 
core wars programs computer viruses worms capable self replication fortunately evolution 
programs fully living able evolve 
evolutionary simulations open ended 
potential limited structure model generally endows individual genome consisting set pre defined genes may exist pre defined set forms 
object evolved generally data structure representing genome simulator program mutates selects replicates criteria designed simulator 
data structures contain mechanism replication simply copied simulator survive selection phase 
self replication critical synthetic life mechanisms selection pre determined simulator 
artificial selection creative natural selection 
organisms free invent fitness functions 
freely evolving creatures discover means mutual exploitation associated implicit fitness functions think 
simulations constrained evolve predefined genes alleles fitness functions dead ended alive 
approach constraints 
model limited evolution creatures sequences machine instructions may potential comparable evolution sequences organic molecules 
sets machine instructions similar tierra simulator shown capable universal computation 
suggests evolving machine codes able generate level complexity 
examples synthetic approach life seen 
characteristic efforts generally common parallel origin life event attempting create conditions life may emerge spontaneously evolve open ended fashion 
origin life generally recognized event order event history life known comparable significance origin biological diversity macroscopic multicellular life cambrian explosion years ago 
event involved diversification life forms 
dozens appeared suddenly existing diverse bizarre ways life explored relative ecological void 
aims parallel second major event history life origin diversity 
attempting create conditions life may emerge approach involves engineering early history life design complex evolvable organisms attempting create conditions set spontaneous evolutionary process increasing diversity complexity organisms 
represents step direction creating artificial world may roughly parallel rna world self replicating molecules falling far short cambrian explosion 
approach generated rapidly communities self replicating organisms exhibiting open ended evolution natural selection 
single rudimentary ancestral creature containing code self replication interactions immunity hyper sociality cheating emerged spontaneously 
presents methodology results 
apart value tool study teaching ecology evolution synthetic life may commercial applications 
evolution machine code provides new approach design optimization computer programs 
analogy genetic engineering pieces application code may inserted genomes digital organisms evolved new functionality greater efficiency 
methods world simplicity certainty world zero life death 
minimal beautiful 
patterns lives deaths invisible chains electronic presence absence 
patterns ones zeros patterns human lives deaths individual represented computer record long string ones zeros kind creature represented long string lives deaths 
level angel minor god ufo 
thomas 
metaphor organic life viewed utilizing energy derived sun organize matter 
analogy digital life viewed cpu central processing unit time organize memory 
organic life evolves natural selection individuals compete resources light food space genotypes leave descendants increase frequency 
digital life evolves process replicating algorithms compete cpu time memory space organisms evolve strategies exploit 
cpu time thought analog energy resource memory analog spatial resource 
memory cpu computer operating system viewed elements physical environment 
creature designed specifically adapted features computational environment 
creature consists assembler language program 
assembler languages merely mnemonics machine codes directly executed cpu 
machine codes characteristic directly invoke instruction set cpu services provided operating system 
programs regardless language written converted machine code executed 
machine code natural language machine machine instructions viewed author atomic units computing 
felt machine instructions provide natural basis artificial chemistry creatures designed live computer 
biological analogy machine instructions considered amino acids nucleic acids chemically active 
actively manipulate bits bytes cpu registers movements instruction pointer see 
digital creatures discussed entirely constructed machine instructions 
considered analogous creatures rna world structures bear genetic information carry metabolic activity 
block ram memory random access memory known main core memory computer designated soup creatures 
genome creatures consists sequence machine instructions creature self replicating algorithm 
prototype creature consists machine instructions size genome creature instructions genotype specific sequence instructions appendix 
virtual computer tierra simulator computers general purpose computers means things capable emulating software behavior computer built built 
utilize flexibility design computer especially synthetic life 
reasons wise attempt synthesize digital organisms exploit machine codes operating systems real computers 
urgent potential threat natural evolution machine codes leading virus worm type programs difficult due changing genotypes 
potential argues strongly creating evolution exclusively programs run virtual computers virtual operating systems 
programs data real computer threat data data base text file word processor 
reason avoid developing digital organisms machine code real computer artificial system tied hardware obsolete quickly particular machine developed 
contrast artificial system developed virtual machine easily ported new real machines available 
third issue potentially moot machine languages real machines designed evolvable fact support significant evolution 
von neuman type machine languages considered brittle meaning ratio viable programs possible programs virtually zero 
mutation recombination event real machine code certain produce non functional program 
problem brittleness mitigated designing virtual computer machine code designed evolution mind 
farmer belin suggested overcoming brittleness discovering self replicating patterns robust evolve increasingly complex states probably central problem study artificial life described takes place virtual computer known tierra spanish earth 
tierra parallel computer mimd multiple instruction multiple data type processor cpu creature 
parallelism imperfectly emulated allowing cpu execute small time slice turn 
cpu virtual computer contains address registers numeric registers flags register indicate error conditions stack pointer word stack instruction pointer 
virtual cpu implemented structure listed appendix computations performed tierran cpus probabilistic due flaws occur low frequency see mutation 
instruction set cpu typically performs simple arithmetic operations bit manipulations small set registers contained cpu 
instructions move data registers cpu cpu registers ram main memory 
instructions control location movement instruction pointer ip 
ip indicates address ram machine code executing program case digital organism located 
cpu perpetually performs fetch decode execute increment ip cycle machine code instruction currently addressed ip fetched cpu bit pattern decoded determine instruction corresponds instruction executed 
ip incremented point sequentially position ram instruction fetched 
instructions jmp call ret directly manipulate ip causing execution jump sequence instructions ram 
tierra simulator cpu cycle implemented time slice routine listed appendix tierran language attempting set synthetic life system careful thought representation programming language affects adaptability sense robust genetic operations mutation recombination 
nature virtual computer defined large part instruction set machine language 
approach study loosen machine code virtual bio computer order create computational system hybrid biological classical von neumann processes 
developing new virtual language called tierran close attention paid structural functional properties informational system biological molecules dna rna proteins 
features borrowed biological world considered critical evolvability tierran language 
instruction set tierran language defined size order magnitude genetic code 
information encoded dna codons translated amino acids 
manifestation tierran language consists instructions represented bits operands included 
emphasis placed point instruction sets deceptively small 
versions language core wars example defined operation codes 
appear surface instruction set size 
instructions operands 
operand addressing modes integer 
consider operands embedded machine code realize fact part instruction set set works size 
similarly risc machines may opcodes probably bit instructions mutational point view really instructions 
inclusion numeric operands instruction set extremely large comparison genetic code 
order machine code truly small instruction set eliminate numeric operands 
accomplished allowing cpu registers stack operands instructions 
need encode integer purpose create numeric register bit manipulations flipping low order bit shifting left 
program contain proper sequence bit flipping shifting instructions synthesize desired number instruction set need include possible integers 
second feature borrowed molecular biology design tierran language addressing mode called address template 
machine codes piece data addressed ip jumps piece code exact numeric address data target code specified machine code 
consider biological system contrast order protein molecule cytoplasm cell interact protein molecule specify exact coordinates located 
molecule presents template surface complementary surface diffusion brings complementary conformations allow interact 
addressing template illustrated tierran jmp jump instruction 
jmp instruction followed sequence nop operation instructions kinds nop nop 
suppose piece code instruction order jmp nop nop nop nop 
system search outward directions jmp instruction looking nearest occurrence complementary pattern nop nop nop nop 
pattern instruction pointer move complementary pattern resume execution 
pattern error condition flag set jmp instruction ignored practice limit placed far system may search pattern 
tierran language characterized unique features truly small instruction set numeric operands addressing template 
language consists familiar instructions typical machine languages mov call ret pop push complete instruction set listed appendix tierran operating system tierran virtual computer needs virtual operating system digital organisms 
operating system determine mechanisms interprocess communication memory allocation allocation cpu time competing processes 
algorithms evolve exploit features advantage 
mere aspect environment operating system instruction set determine topology possible interactions individuals ability pairs individuals exhibit predator prey parasite host relationships 
memory allocation tierran computer operates block ram real computer set aside purpose 
block ram referred soup 
described soup consisted bytes hold number tierran machine instructions 
creature occupies block memory soup 
fundamental properties organic life recognized fossil record far back years 
cell original individual cell membrane defining limits preserving chemical integrity 
analog cell membrane needed digital organisms order preserve integrity informational structure disrupted easily activity organisms 
need seen artificial life models cellular automata virtual state machines pass core wars type simulations coherent structures come contact 
tierran creatures considered cellular sense protected semi membrane memory allocation 
tierran operating system provides memory allocation services 
creature exclusive write privileges allocated block memory 
size creature just size allocated block instructions 
usually corresponds size genome 
membrane described semi write privileges protected read execute privileges 
creature may examine code creature execute write 
creature may exclusive write privileges blocks memory born referred mother cell second block may obtain execution mal memory allocation instruction 
second block referred daughter cell may grow reproduce 
tierran creatures divide mother cell loses write privileges space daughter cell free allocate block memory 
moment division daughter cell instruction pointer free allocate second block memory 
time sharing slicer tierran operating system multi tasking parallel order community individual creatures live soup simultaneously 
system small slices cpu time creature soup turn 
system maintains circular queue called slicer queue 
creature born virtual cpu created enters slicer queue just ahead mother active creature time 
newborn creature soup get time slice mother mother get slice daughter 
long slice size small relative generation time creatures time sharing system causes world approximate parallelism 
actuality population virtual cpus gets slice real cpu time comes queue 
number instructions executed time slice may set proportional size genome creature executed raised power 
slicer power equal slicer size neutral probability instruction executed depend size creature occurs 
power greater large creatures get cpu cycles instruction small creatures 
power small creatures get cpu cycles instruction 
power determines selection favors large small creatures size neutral 
constant slice size selects small creatures 
mortality self replicating creatures fixed size soup rapidly fill soup lock system 
prevent occurring necessary include mortality 
tierran operating system includes begins killing creatures queue memory fills specified level 
creatures killed deallocating memory removing slicer queues 
dead code removed soup 
system uses linear queue 
creature born enters bottom queue 
kills creature top queue 
individuals may move queue success failure executing certain instructions 
creature executes instruction generates error condition moves position queue long individual ahead queue accumulated greater number errors 
instructions somewhat difficult execute generating error successful execution instructions moves creature queue position long accumulated errors creature 
effect queue cause algorithms fundamentally flawed rise top queue die 
vigorous algorithms greater longevity general probability death increases age 
mutation order evolution occur change genome creatures 
may occur lifespan individual may errors passing genome offspring 
order insure genetic change operating system randomly flips bits soup instructions tierran language imperfectly executed 
mutations occur circumstances 
background rate bits randomly selected entire soup instructions totaling bits flipped 
analogous mutations caused cosmic rays effect preventing creature immortal eventually mutate death 
background mutation rate generally set bit flipped tierran instructions executed system 
addition copying instructions replication creatures bits randomly flipped rate copies 
copy mutation rate higher results replication errors 
copy mutation rate generally set bit flipped instructions moved 
classes mutation interval mutations varies randomly certain range avoid possible periodic effects 
addition mutations execution tierran instructions flawed low rate 
instructions result plus minus low frequency 
example increment instruction normally adds register adds zero 
bit flipping instruction normally flips low order bit flips higher bit bit 
shift left instruction normally shifts bits bit left shifts left bits 
way behavior tierran instructions probabilistic fully deterministic 
turns bit flipping mutations flaws instructions necessary generate genetic change evolution community reaches certain state complexity 
genetic parasites evolve sloppy replicators effect moving pieces code creatures causing massive rearrangements genomes 
mechanism ad hoc sexuality worked due parasites inability discriminate live dead embryonic code 
mutations result appearance new genotypes watched automated manager 
implementation manager new genotypes replicate twice producing genetically identical offspring unique name saved disk 
genotype name contains parts number letter code 
number represents number instructions genome 
letter code base numbering system assigning unique label genotype size class 
genotype appear size class assigned label aaa second assigned label aab 
ancestor named aaa mutant size named aab 
creature size named aaa 
saves additional information genome genotype name immediate ancestor possible reconstruction entire phylogeny time date origin metabolic data including number instructions executed second reproduction number errors generated second reproduction number instructions copied daughter cell second see appendix environmental parameters time origin including search limit addressing slicer power affect selection size 
tierran ancestor tierran language write single self replicating program instructions long 
program referred ancestor alternatively genotype aaa fig 

ancestor minimal self replicating algorithm originally written debugging simulator 
functionality designed ancestor ability self replicate specific evolutionary potential designed 
commented tierran assembler machine code program appendix ancestor examines determine memory begins ends 
ancestor marked operation template marked 
ancestor locates instructions nop nop nop nop 
series instructions causes system search backwards instruction template complementary nop instructions place address complementary template ax register cpu see appendix 
similar method locate 
having determined address subtracts calculate size allocates block memory size daughter cell 
calls copy procedure copies entire genome daughter cell memory instruction time 
copy procedure marked template 
call copy procedure accomplished instructions call nop nop nop nop 
genome copied executes divide instruction causes creature lose write privileges daughter cell memory gives instruction pointer daughter cell enters daughter cell slicer queues 
replication mother cell examine proceeds directly allocation daughter cell copy procedure followed cell division endless loop 
instructions ancestor operations 
groups operation instructions complementary templates mark twelve sites internal addressing creature locate call copy procedure mark addresses loops jumps code functions templates commented listing appendix results evolution evolutionary runs simulator begun soup instructions single individual instruction ancestral genotype 
passage time run measured terms tierran instructions executed simulator 
original ancestral cell executes instructions replication additional replication 
initial cell replicating daughters rapidly fill soup memory threshold level starts 
typically system executes instructions filling soup individuals size daughter cells 
begins memory remains roughly filled creatures remainder run 
micro evolution mutations outset run evolution 
bits flipped result copy errors background mutations result creatures list instructions genotype differs ancestor usually single bit difference single instruction 
mutations result change size creature alter instructions genome 
altering genotype mutations may affect process creature examines calculates size potentially causing produce offspring differs size 
possible mutations operation instruction convert kind instruction converts complementary 
mutations templates destroy change size template alters template pattern 
altered template may cause creature mistakes self examination procedure calls looping jumps instruction pointer templates addressing 
parasites example kind error result mutation template mutation low order bit instruction ancestor appendix 
instruction nop third component copy procedure template 
mutation low order bit convert nop changing template 
recognized template mark creature copy procedure 
creature born mutation low order bit instruction calculate size 
allocate daughter cell size copy instructions daughter cell 
daughter cell include copy procedure 
daughter genotype consisting instructions named aaa 
genotype aaa fig 
able self replicate isolated culture 
semi membrane memory allocation protects write privileges 
creatures may match templates code allocated memory creatures may execute code 
creature aaa grown mixed culture aaa attempts call copy procedure find template genome search limit generally set instructions copy procedure creature genotype aaa match templates send instruction pointer copy code aaa 
parasitic relationship established see ecology 
typically parasites emerge instructions elapsed time run 
immunity parasites size genotypes demonstrate measure resistance parasites 
genotype aaa introduced soup side individual genotype aab aaa initially reproduce somewhat quickly eliminated soup 
experiment conducted aaa ancestor enter stable cycle genotypes coexist indefinitely 
freely evolving systems observed dominated size genotypes long periods parasitic genotypes repeatedly appear fail invade 
immunity parasites occasionally evolving systems dominated size successfully invaded parasites size 
immune genotype aab tested aao direct step descendant aaa instruction replaced insertion instructions unknown origin enter stable cycle 
evidently aao evolved way circumvent immunity parasites possessed aab 
fourteen genotypes aaa aan tested aab able invade 
hyper parasites hyper parasite discovered differs instructions ancestor fig 

ability subvert energy metabolism parasites changes 
copy procedure return jumps back directly proper address reproduction loop 
way effectively instruction pointer parasite 
change delivers coup de gr ce reproduction hyper parasite re examines resetting bx register location cx register size 
instruction pointer parasite passes code cpu parasite contains location size hyper parasite parasite replicates hyper parasite genome 
social hyper parasites hyper parasites drive parasites extinction 
results community relatively high level genetic uniformity high genetic relationship individuals community 
conditions support evolution sociality social hyper parasites soon dominate community 
social hyper parasites fig 
appear instruction size class 
example acg social sense self replicate occurs aggregations 
jumps back code self examination jumps template occurs genome 
creature similar genome jump find target template tail neighbor execution pass active creature genome 
algorithm fail similar genome occurs just active creature memory 
neighboring creatures cooperate catching passing jumps instruction pointer 
appears selection pressure evolution sociality facilitates size reduction 
social species smaller ancestor 
achieved size reduction part shrinking templates instructions instructions 
means templates available catching jumps allows deal consequences limitation dual templates 
cheaters hyper hyper parasites cooperative social system hyper parasites subject cheating eventually invaded hyper hyper parasites fig 

cheaters aab position aggregating hyper parasites instruction pointer passed capture 
novel self examination creatures discussed far mark templates 
locate addresses templates determine genome size subtracting 
run creatures evolved template marking 
creatures located address template marking address template middle genome 
addresses subtracted calculate half size value multiplied shifting left calculate full size 
intricate adaptation arms race described paragraphs took place period instructions executed system 
run allowed continue fifteen instructions examined detail 
creature run examined evolved intricate adaptation 
adaptation optimization technique known unrolling loop 
central loop copy procedure performs operations copies instruction mother daughter decrements cx register initially contains size parent genome tests see cx equal zero exits loop remains loop increment ax register contains address daughter instruction copied increment bx register contains address mother instruction copied jump back top loop 
loop contained steps 
steps overhead 
efficiency loop increased duplicating steps loop saving overhead 
creature long run repeated steps times loop illustrated appendix compares copy loop ancestor 
macro evolution simulator run long periods time hundreds millions billions instructions various patterns emerge 
selection small sizes proliferation small parasites interesting ecology see 
selection large creatures usually lead continuous incrementally increasing sizes trivial concatenation creatures plateau upper hundreds reached 
run selection large size lead apparently open ended size increase evolving genomes larger instructions length 
evolutionary patterns described 
thoroughly studied case long runs selection determined slicer function size neutral 
longest runs date tierran instructions size neutral environment search limit allow large creatures evolve algorithmic advantage gained larger size 
long runs illustrate pattern described periods stasis punctuated periods rapid evolutionary change appears parallel pattern punctuated equilibrium described 
initially communities dominated creatures genome sizes eighties 
represents period relative stasis lasted instructions long runs conducted date 
systems abruptly span instructions evolve communities dominated sizes ranging 
communities seen evolve communities dominated smaller substantially larger size ranges 
communities creatures size range show long term pattern punctuated equilibrium 
communities regularly come dominated size classes remain condition long periods time 
inevitably break stasis enter period size class dominates 
periods rapid evolutionary change may chaotic 
close observations indicate times genotypes breed true 
self replicating genotypes coexist soup times chaotic times produce offspring size 
eventually system settle period stasis dominated size classes breed true 
diversity observations diversity tierran creatures diversity size classes 
creatures different sizes clearly genetically different genomes different sizes 
different sized creatures difficulty engaging recombination sexual different species 
run instructions size classes generated achieved individuals 
run instructions size classes generated achieved 
size class consists number distinct genotypes vary time 
exists potential great genetic diversity size class 
distinct genotypes size viable self replicating creatures 
question remains unanswered information gathered automated manager 
days running self replicating genotypes size classes accumulated 
size classes number unique genotypes size listed table 
genotypes saved disk new individually collections genotypes may assemble ecological communities 
ecological runs mutation rates set zero order inhibit evolution 
ecology communities ecology explored detail operate selection small sizes 
communities generally include large number parasites functional copy procedures execute copy procedures creatures search limit 
exploring ecological interactions mutation rate set zero effectively throws simulation ecological time stopping evolution 
parasites necessary stipulate creatures breed true parasites tendency scramble genomes leading evolution absence mutation 
aaa metabolic parasite 
genome include copy procedure executes copy procedure code normal host ancestor 
environment favoring small creatures aaa competitive advantage ancestor relationship density dependent 
hosts scarce parasites search limit copy procedure able reproduce 
calls copy procedure fail generate errors causing rise top queue die 
parasites die host population 
hosts parasites demonstrate lotka volterra population cycling 
number experiments conducted explore factors affecting diversity size classes communities 
competitive exclusion trials conducted series self replicating non parasitic genotypes different size classes 
experimental initially individual size 
genotype size tested genotype size successively larger size classes 
interactions observed plotting population size class axis population size class axis 
sizes competitively matched eliminated soup 
quickly entered stable cycle exactly repeated small orbit 
general pattern interaction sizes 
size tested size initially entered stable cycle instructions stability trajectory chaotic attractor symmetric diagonal size showed advantage 
pattern repeated size classes size marked asymmetry chaotic attractor evident favoring size 
run size size showed brief stable period instructions moved chaotic phase attractor slowly size extinct elapsed time instructions 
interesting exception pattern interaction size size 
size considered metabolic capable self replicating executes instructions normal replicate 
eliminated competition size loops trajectory elapsed time instructions 
experiment determine effects presence parasites community diversity community consisting size classes hosts created allowed run instructions time smallest size classes remained 
community regenerated single genotype aaa parasite introduced 
instructions size classes remained including parasite 
example keystone parasite effect 
symbiotic relationships possible 
ancestor manually creatures size contained code self examination copy loop size contained code self examination copy procedure 
replicate replicated forming stable relationship 
known relationships evolved spontaneously 
evolutionary optimization order compare process evolution runs simulator simple objective quantitative measure evolution needed 
measure degree creatures improve efficiency evolution 
provides objective measure progress evolution sheds light potential application synthetic life systems problem optimization machine code 
efficiency creature indexed ways size genome number cpu cycles needed execute replication 
clearly smaller genomes replicated cpu time evolution creatures decrease ratio instructions executed replication genome size 
number instructions executed instruction copied drops substantially 
shows changes genome size time period instructions executed system sets mutation rates differing factors 
mutation rates measured terms individuals affected mutation generation 
highest sets rates tested individuals hit mutation generation 
rates system unstable 
genomes melt heat high mutation rates 
community dies runs survived instruction runs study 
lower rate yields highest rate optimization risk death community 
lower mutation rates see successively lower rates optimization 
additional replicates runs mutation rate fig 

replicates differ seed random number generator parameters identical 
runs vary details progress continuous gradual comes bursts 
run decreases size limit proceed past allowed run longer 
different runs reach different plateaus efficiency 
smallest limiting genome size seen instructions runs reached limits instructions 
evidently system reach local optima easily evolve global optima 
increase efficiency replicating algorithms greater decrease size code 
ancestor instructions long requires cpu cycles replicate 
creature size requires cpu cycles replicate fold difference efficiency 
algorithm creatures listed appendix optimization algorithm maximized highest mutation rate cause instability ecological interactions appear richer slightly lower mutation rates 
rates find diversity coexisting size classes greatest persist longest 
smaller size classes tend various forms parasites diversity size classes indicates rich ecology 
example greater optimization illustrated appendix discussed section 
unrolling loop results loop uses cpu cycles copy instructions cpu cycles executed instruction copied compared ancestor 
creature size uses cpu cycles instruction copied 
creature appendix uses extra cpu cycles loop compensate separate adaptation allows double share cpu time global pool essence meaning relatively speaking uses cpu cycles instruction copied 
compensation cpu cycles instruction copied 
summary general behavior system soup full replicating creatures individuals initially short lived generally reproducing dying individuals turn rapidly 
slowly appear new genotypes size new size classes 
changes genetic composition size class new mutants appear increase significantly frequency eventually replacing original genotype 
size classes dominate community change time new size classes appear competitively exclude sizes earlier 
community diverse greater variance longevity individuals 
addition increase raw diversity genotypes genome sizes increase ecological diversity 
parasites evolve capable self replication isolated culture replicate normal self replicating creatures 
parasites execute parts code hosts cause direct harm competitors 
potential hosts evolved immunity parasites parasites evolved circumvent immunity 
addition hyper parasites evolved self replicate isolated culture subjected subvert parasites energy metabolism augment reproduction 
hyper parasites drive parasites extinction resulting complete domination communities 
relatively high degrees genetic relatedness hyper parasite dominated communities leads evolution sociality sense creatures replicate occur aggregations 
social aggregations invaded hyper hyper parasite cheaters 
mutations ensuing replication errors lead increasing diversity sizes genotypes self replicating creatures soup 
instructions elapsed time soup evolves state dozen persistent size classes coexist 
relative specific list size classes varies time 
size class consists number distinct genotypes vary time 
rate evolution increases mutation rate system unstable community dies rates mutation generations 
ecological interactions richer sustained slightly lower rates mutation generations 
mutation rates generations selection small sizes creatures optimize genome size instruction size range little instructions elapsed time 
runs reach local optima evidently escape may global optima 
increasing complexity unrolled loop section example ability evolution produce increase complexity gradually long period time 
interesting thing loop unrolling optimization technique requires complex code 
resulting creature genome size compared ancestor size packed complex algorithm half space appendix 
classic example intricate design evolution 
wonders arisen random bit flips component code place order algorithm function 
code includes classic mix apparent intelligent design chaotic hand evolution 
optimization technique clever invented humans implemented mixed functional style human 
emergence physical environment simulator quite simple consisting energy resource cpu time uniformly time slicer memory space completely uniform available 
light nature physical environment implicit fitness function presumably favor evolution creatures able replicate cpu time fact occur 
evolution system consists creatures discovering ways exploit 
creatures invent fitness functions adaptation living environment 
ecological interactions programmed system emerge spontaneously creatures discover invent games 
tierran world creatures initially interact discover means exploit response means avoid exploitation 
original fitness landscape ancestor consists efficiency parameters replication algorithm context properties slicer queues 
chance genotypes appear exploit creatures selection acts perfect mechanisms exploitation mechanisms defense exploitation 
original fitness landscape adaptations organism physical environment 
new fitness landscape retains features adds adaptations environment creatures 
fitness landscape includes increasing realm adaptations creatures evolving facilitate auto catalytic increase complexity diversity organisms 
evolutionary theory suggests adaptation environment organisms physical environment primary force driving auto catalytic diversification organisms 
encouraging discover process begun tierran world 
worth noting results evolution creature designed written instruction set designed 
comparison creatures evolved shows designed particularly clever 
instruction set creatures certainly powerful apart special features incorporated enhance evolvability 
appear easy create life 
evidently virtual life waiting provide environments may evolve 
synthetic biology evolutionary phenomena ecological convergence living different continents different epochs 
lineage organisms undergoes adaptive radiation diversification leads array relatively stable ecological forms 
specific ecological forms recognizable lineage lineage 
example ecological parallels respectively bat lion modern mammals 
similarly modern mammals gray wolf flying squirrel great common mole ecological parallels respectively wolf honey banded mole mammals australia 
evidently powerful convergent forces surprising adaptive proceed digital organisms encounter recognizable ecological forms spite fundamentally distinct physics chemistry 
ideally comparisons organisms comparable complexity 
may appropriate compare viruses mammals 
unfortunately organic creatures comparable digital organisms rna creatures longer 
digital organisms compared modern organic creatures greater complexity ecological comparisons broadest terms 
trained biologists tend view synthetic life terms come know organic life 
having trained seen synthetic communities ecological evolutionary properties known natural communities 
biologists trained specialties observe familiar properties 
see know 
take longer appreciate unique properties new life forms 
directions immediate research involve main thrusts computational computational issue design computer operating system support natural evolution machine code 
von neumann style machine codes considered brittle sense robust genetic operations mutation recombination 
random change program certain break program 
significant accomplishment date finding way overcome brittleness slight modification standard machine codes 
success achieved attempt 
known features essential evolvability certainly know optimal architecture 
primary computational objective experiment large number variations successful architecture order find optimal balance computational power evolvability 
begun needs scaled 
important computational goals 
experiment artificial selection application programs 
far involved natural selection wild algorithms useful 
want develop analog genetic engineering application codes inserted genomes digital organisms evolved greater optimality new functionality 
possible develop cross assemblers tierran architectures real assembler languages 
application code written compiled run real machines cross assembled new tierran languages 
procedure inserted genome creature 
creatures rewarded cpu time proportion efficacy efficiency evolving inserted code 
way artificial selection lead optimization inserted code cross assembled back real machine code 
artificial selection application programs proved practical worthwhile render best tierran virtual instruction sets silicon greatly accelerating process 
maximum optimization achieved hours running tierran virtual computer 
real computer architectural principals tierran computer speed multiplied orders magnitude 
real machine massively parallel additional gains orders magnitude 
machine code evolve quickly possibility generative process addition optimization procedure 
may potential application areas machine learning adaptive programming 
long term objective digital organisms evolving freely artificial selection source new paradigms programming massively parallel machines 
virtual computer supports digital evolution parallel machine mimd multiple instruction multiple data type 
biggest problems facing computer science today development techniques parallel programming 
digital organisms program evolution 
discovered known programming techniques unrolling loops 
discover techniques naturally efficient parallel machines able learn innovations 
kinds ecological interactions observed digital communities light viewed optimization techniques parallel programming sharing code fragments 
interactions evolve jungle environment interactions adversarial nature 
evolving large parallel application programs viable model multi cellular cells cooperate common problem 
multi cellular model development 
evolution may prove best method programming massively parallel machines 
biological plan move biological model ahead state 
involve incorporation facilities support organized sexuality multi 
methods advances conceptually worked implementation begun 
improvements long term biological goals model test ecological evolutionary theory areas evolution sex selection hierarchical levels factors affecting diversity ecological communities 
hoped possible engineer system condition analagous threshold cambrian explosion diversity just allow complexity diversity digital system explode spontaneously 
educational wish distribute source executables educational research tool 
additional needed program fully portable provide user friendly graphic user interface 
underway slow pace 
acknowledgment marc cygnus robert eisenberg farmer walter fontana stephanie forrest chris langton dan stephen pope steen rasmussen discussions readings manuscripts 
santa fe institute support 
contribution ecology program school life health sciences university delaware 
ackley littman learning natural selection artificial environment proceedings international joint conference neural networks volume theory track neural cognitive sciences track ijcnn winter washington dc 
hillsdale new jersey lawrence erlbaum associates 
aho hopcroft ullman design analysis computer algorithms 
reading mass addison wesley publ 

farmer kauffman packard perelson modeling adaptive biological systems unpublished 
semantic theory evolution 
london harwood academic publishers 
emergence artificial life artificial life ii edited langton farmer rasmussen 
redwood city ca addison wesley 
cohen computer viruses theory experiments 
ph 
dissertation southern california 
dawkins blind watchmaker 
new york norton 
dawkins evolution evolvability artificial life proceedings interdisciplinary workshop synthesis simulation living systems edited langton 
redwood city ca addison wesley 
denning computer viruses amer 
sci 

computer game called core war hostile programs engage battle bits sci 
amer 

computer core war viruses worms threats computer memories sci 
amer 

computer exploring field genetic algorithms primordial computer sea full sci 
amer 

computer program called mice way victory core war tournament sci 
amer 

worms viruses core war sci 
amer 

gould punctuated equilibria alternative models edited schopf 
san francisco cooper 
farmer kauffman packard autocatalytic replication polymers physica 
farmer belin artificial life coming evolution proceedings murray gell man th birthday 
cambridge university press 
press 
gould wonderful life burgess nature history 
new york norton 
gould punctuated equilibria tempo mode evolution reconsidered 
holland adaptation natural artificial systems introductory analysis applications biology control artificial intelligence 
ann arbor univ michigan press 
holland studies spontaneous emergence self replicating systems cellular automata formal grammars automata languages development edited lindenmayer rozenberg new york north holland 
langton studying artificial life cellular automata physica 
langton virtual state machines cellular automata complex systems 
langton artificial life artificial life proceedings interdisciplinary workshop synthesis simulation living systems edited langton vol 
series santa fe institute studies sciences complexity 
redwood city ca addison wesley 
lotka elements physical biology 
baltimore williams wilkins reprinted elements mathematical biology dover press 
minsky computation finite infinite machines 
englewood cliffs prentice hall 
morris burgess cambrian explosion science 
food web complexity species diversity am 
nat 

packard intrinsic adaptation simple model evolution artificial life proceedings interdisciplinary workshop synthesis simulation living systems edited langton 
redwood city ca addison wesley 
simulations realizations theories life artificial life proceedings interdisciplinary workshop synthesis simulation living systems edited langton 
redwood city ca addison wesley 
rasmussen knudsen emergence evolution cooperative structures computational chemistry physica 
rheingold 

computer viruses 
earth review fall 
spafford computer viruses dealing electronic vandalism programmed threats 
th street suite arlington va 
stanley ecological theory sudden origin multicellular life late proc 
nat 
acad 
sci 

volterra variations fluctuations number individuals animal species living animal ecology edited chapman 
new york mcgraw hill 
wilson primer population biology 
conn associates 

metabolic flow chart ancestor parasite hyper parasite interactions ax bx cx refer cpu registers location size information stored 
ax bx refer locations soup indicated values ax bx registers 
patterns complementary templates addressing 
arrows outside boxes indicate jumps flow execution programs 
dotted line arrows indicate flow execution creatures 
parasite lacks copy procedure search limit copy procedure host locate call execute procedure obtaining information needed complete replication 
host adversely affected informational competition parasite superior competitor 
note parasite calls copy procedure host expectation control return parasite copy procedure returns 
hyper parasite jumps copy procedure returning control parasite 
proceeds reset cpu registers parasite location size hyper parasite causing parasite replicate hyper parasite genome 

metabolic flow chart social hyper parasites associated parasite cheaters interactions 
symbols described fig 

horizontal dashed lines indicate boundaries individual creatures 
left right dashed line top lowermost fragment social hyper parasite 
note left neighboring social hyper parasites cooperate returning flow execution creature self re examination 
execution jumps back creature falls creature executing instructions consequence enters top creature 
right cheater inserted social hyper parasites 
cheater captures control execution passes social individuals 
sets cpu registers location size skips self examination step returns control execution social creature 

metabolic flow chart interactions 
symbols described fig 

creature able self replicate isolation 
able replicate information provided 

evolutionary optimization sets mutation rates 
run mutation rates move mutations copy error flaws background mutations cosmic rays set relative generation time 
case background mutation rate lowest affecting cell twice generations move mutation rate 
flaw rate intermediate affecting cell times generations move mutation rate 
example run move mutation affect cell line average generations flaw occur generations background mutation generations 
horizontal axis shows elapsed time hundreds millions instructions executed system 
vertical axis shows genome size instructions 
point indicates appearance new genotype crossed abundance thresholds population cells soup occupation memory 
number generations move mutation indicated number upper right hand corner graph 

variation evolutionary optimization constant conditions 
mutation rate generations move mutation parameters fig 

plots described fig 

table 
table numbers size classes 
left column size class right column number self replicating genotypes size class 
sizes genotypes 
appendix structure definition implement tierra virtual cpu 
complete source code tierra simulator obtained contacting author email 
struct cpu structure registers virtual cpu int ax address register int bx address register int cx numerical register int dx numerical register char fl flag char sp stack pointer int st stack int ip instruction pointer appendix abbreviated code implementing cpu cycle tierra simulator 
void main void get soup life write soup void life void time slices death inst exec alive control length run time slice slice slice current cell queue incr slice queue increment slice cell queue free mem current free mem prop soup size memory full threshold reap cells void time slice int ci ce pointer array cell structures char instruction soup int di decoded instruction int size slice ce cells ci size slice fetch ce ip fetch instruction soup address ip di decode decode fetched instruction execute di ci execute decoded instruction increment ip di ce move instruction pointer instruction system opportunity extract information void execute int di int ci switch di case nop ci break operation case nop ci break operation case ci break flip low order bit cx cx case shl ci break shift left cx register cx case zero ci break set cx register zero cx case cz ci break cx execute instruction case sub ab ci break subtract bx ax cx ax bx case sub ac ci break subtract cx ax ax ax cx case ci break increment ax ax ax case ci break increment bx bx bx case dec ci break decrement cx cx cx case ci break increment cx cx cx case push ax ci break push ax stack case push bx ci break push bx stack case push cx ci break push cx stack case push dx ci break push dx stack case pop ax ci break pop top stack ax case pop bx ci break pop top stack bx case pop cx ci break pop top stack cx case pop dx ci break pop top stack dx case jmp ci break move ip template case ci break move ip backward template case call ci break call procedure case ret ci break return procedure case mov cd ci break move cx dx dx cx case mov ab ci break move ax bx bx ax case mov iab ci break move instruction address bx address ax case adr ci break address nearest template ax case ci break search backward template case ci break search forward template case mal ci break allocate memory daughter cell case divide ci break cell division inst exec appendix assembler source code ancestral creature 
genotype aaa origin ancestor parent genotype human st daughter flags inst mov nd daughter flags inst mov nop template nop template nop template nop template zero put zero cx put bit cx shl shift left cx shl shift left cx cx ax bx cx template size dx mov cd move template size dx ax bx cx template size dx template size get backward address template nop compliment template nop compliment template nop compliment template nop compliment template ax start mother bx cx template size dx template size sub ac subtract cx ax ax start mother bx cx template size dx template size mov ab move start address bx ax start mother bx start mother cx template size dx template size get forward address template nop compliment template nop compliment template nop compliment template nop compliment template ax mother bx start mother cx template size dx template size include dummy statement separate creatures sub ab subtract start address address get size ax mother bx start mother cx size mother dx template size nop reproduction loop template nop reproduction loop template nop reproduction loop template nop reproduction loop template mal allocate memory daughter cell address ax ax start daughter bx start mother cx size mother dx template size call call template copy procedure nop copy procedure compliment nop copy procedure compliment nop copy procedure compliment nop copy procedure compliment divide create independent daughter cell jmp jump template reproduction loop nop reproduction loop compliment nop reproduction loop compliment nop reproduction loop compliment nop reproduction loop compliment cz dummy instruction separate templates copy procedure nop copy procedure template nop copy procedure template nop copy procedure template nop copy procedure template push ax push ax stack push bx push bx stack push cx push cx stack nop copy loop template nop copy loop template nop copy loop template nop copy loop template mov iab move contents bx ax dec decrement cx cz cx perform instruction skip jmp jump template copy procedure exit nop copy procedure exit compliment nop copy procedure exit compliment nop copy procedure exit compliment nop copy procedure exit compliment increment ax increment bx jmp jump template copy loop nop copy loop compliment nop copy loop compliment nop copy loop compliment nop copy loop compliment cz dummy instruction separate templates nop copy procedure exit template nop copy procedure exit template nop copy procedure exit template nop copy procedure exit template pop cx pop cx stack pop bx pop bx stack pop ax pop ax stack ret return copy procedure nop template nop template nop template nop template cz dummy statement separate creatures appendix assembler source code smallest self replicating creature 
genotype abn parent genotype st daughter flags inst mov breed true nd daughter flags inst mov breed true origin wed jan nop find nop divide fails time executed sub ac mov ab find nop include final dummy statement sub ab calculate size mal push bx save address stack order return nop top copy loop mov iab dec cz ret jump address saved stack bottom copy loop instructions executed loop nop mov iab dummy statement terminate template appendix assembler code central copy loop ancestor aaa fifteen instructions 
loop ancestor operations copy instruction decrement cx increment ax increment bx 
performs operations times loop copy instruction increment ax increment bx 
decrement cx operation occurs times loop 
instruction flips low order bit cx register 
instruction reached value low order bit amounts sixth instance decrement cx 
means decrements increment 
reason related adaptation creature 
calculates size shifts left allocating space daughter 
effect allocating twice space needed accomodate genome 
genome creature instructions long allocates space instructions 
occurred environment slice size set equal size cell 
way creatures able garner twice energy 
compliment change doubling number decrements loop 
nop copy loop template copy loop aaa nop copy loop template nop copy loop template nop copy loop template mov iab move contents bx ax copy instruction dec decrement cx cz cx perform instruction skip jmp jump template copy procedure exit nop copy procedure exit compliment nop copy procedure exit compliment nop copy procedure exit compliment nop copy procedure exit compliment increment ax point instruction daughter increment bx point instruction mother jmp jump template copy loop nop copy loop compliment nop copy loop compliment nop copy loop compliment nop copy loop compliment instructions executed loop shl shift left cx copy loop mal allocate daughter cell nop top loop mov iab copy instruction dec decrement cx dec decrement cx junk dec decrement cx increment ax increment bx mov iab copy instruction dec decrement cx increment ax increment bx mov iab copy instruction dec decrement cx flip low order bit cx cz cx instruction ret exit loop increment ax increment bx go top loop instructions copy nop bottom loop instructions executed loop 
