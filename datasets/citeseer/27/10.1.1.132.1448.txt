tutorial empa theory concurrent processes nondeterminism priorities probabilities time marco bernardo roberto gorrieri universit di bologna dipartimento di scienze dell informazione zamboni bologna italy mail bernardo gorrieri cs unibo tutorial give overview process algebra empa calculus devised order model analyze features real world concurrent systems nondeterminism priorities probabilities time particular emphasis performance evaluation 
purpose tutorial explain design choices development empa features interact show reasonable trade expressive power calculus complexity underlying theory achieved 
keywords process algebra priority probability markov chain bisimulation equivalence 
process algebras proposed literature order model analyze concurrent systems 
classical process algebras ccs csp acp lotos concerned functional aspects concurrent systems 
means actions composing algebraic terms name said duration 
consequence functional properties absence deadlock concurrent systems investigated 
subsequently expressiveness classical process algebras enriched allowing modeling real world features priorities probabilities durations resulting prioritized process algebras see probabilistic process algebras see deterministically timed process algebras see stochastically timed process algebras see 
enhanced expressive power achieved classes process algebras allowed model analyze greater number characteristics respect classical process algebras interrupt mechanisms resources tasks having different priorities may arrive loss probability communication channels probability reach deadlocked state satisfaction real time constraints throughput utilization resources 
examine process algebras mentioned realize nondeterminism priorities probabilities time usually considered isolation 
words best knowledge process algebra features taken account 
point nice develop single calculus concurrent processes accounting nondeterminism priorities probabilities time order exploit advantages afforded class process algebras provided theory underlying calculus complex 
means reasonable trade modeling power availability analysis tools attained 
order achieve objective developed process algebra called extended markovian process algebra empa 
development empa strongly influenced stochastically timed process algebras pepa formalism generalized stochastic petri nets 
witnessed fact empa different kinds actions exponentially timed actions taken pepa prioritized weighted immediate actions analogous prioritized weighted immediate transitions passive actions similar passive actions pepa 
exponentially timed actions describe activities relevant performance point view 
prioritized weighted immediate actions model logical events activities irrelevant performance point view unboundedly faster useful express prioritized choices probabilistic choices 
passive actions model activities waiting synchronization exponentially timed immediate activities useful express nondeterministic choices 
purpose tutorial empa showing nondeterminism priorities probabilities time combined means different kinds actions just mentioned considerable expressive power achieved burdening underlying theory exceedingly 
tutorial organized follows 
section syntax empa terms informally explain semantics empa operators 
section define integrated interleaving semantics empa terms 
section show coexistence different kinds actions thought coexistence nondeterministic kernel prioritized kernel probabilistic kernel exponentially timed kernel 
division empa kernels provide better insight structure empa allows comparisons process algebras appeared literature 
section define notion equivalence empa terms built considering various kernels singled previous section proofs results included appendix 
section report concluding remarks enhancements expressiveness empa related consequences complexity underlying theory 
tutorial mainly constitutes revised version 
respect emphasize coexistence kernels resulting expressive power passive actions part kernels order stress gluing role 
new technical results axiomatization notion equivalence algorithm check terms equivalence section 
syntax informal semantics empa actions types rates building blocks empa actions 
action pair consisting type action rate action 
type denotes kind action transmission message rate indicates speed action occurs point view external observer rates concise way denote random variables specifying duration actions see 
depending type classical process algebras actions divided external internal usual denote internal action type 
classification rates active actions actions rate specified 
active action exponentially timed immediate exponentially timed actions actions rate positive real number 
number interpreted parameter exponentially distributed random variable specifying duration action 
recall exponentially distributed random variable probability distribution function fx pr ri expected value variance uniquely identified parameter ri 
immediate actions actions rate denoted infinite 
actions duration zero priority level ni weight ri 
passive actions actions rate denoted undefined 
duration passive action fixed synchronizing active action type 
classification actions rates implies exponentially timed actions model activities relevant performance point view ii immediate actions model logical events activities irrelevant performance point view unboundedly faster iii passive actions model activities waiting synchronization timed activities 
motivations restriction timed action durations exponentially distributed zero related possibility defining semantics empa classical interleaving style shall see section obtaining performance models form markov chains shall see section 
apparently reduced expressive power stemming choice examined section 
denote set actions act atype atype set types ri inf inf ni ri set rates 

metavariables atype 

ri 
denote ni set action priority levels assume ri inf syntax terms informal semantics operators const set constants ranged atype atype atype atype set action relabeling functions 
definition set process terms empa generated syntax atype 
set ranged 
null term represents termination deadlocked state 
prefix operator 
denotes sequential composition action term term execute action behaves term functional abstraction operator abstracts type actions term behaves term type executed action turned meaning operator hiding operator csp providing means encapsulating ignoring functional information 
functional relabeling operator changes type actions term behaves term type executed action modified 
meaning operator relabeling operator ccs providing means obtaining compact algebraic descriptions 
alternative composition operator expresses choice terms term behaves term term depending action action executed 
shall see section way choice resolved depends kind actions involved choice 
parallel composition operator expresses concurrent execution terms synchronization disciplines 
synchronization discipline action types csp actions synchronize type coincides resulting type 
synchronization discipline action rates states action synchronized action min resulting rate max normalization 
words synchronization active action involved rate determines rate synchronization normalization 
main reason adoption synchronization discipline action rates simplicity modeling point view semantic treatment point view 
section shall investigate expressive power resulting apparently restrictive rule need normalization explained section 
partial function def const set defining equations form order guarantee correctness recursive definitions means constants restrict terms closed guarded 
definition def denote syntactical equivalence terms 
term obtained replacing occurrence defined induction syntactical structure follows definition denote st relation subterm 
set terms obtained repeatedly replacing constants right hand side terms defining equations def defined subst def subst def subst def ni subst def st def definition set constants occurring def defined const def const subst def 
st definition term closed def constant const def equipped def defining equation exists subst def instance constant satisfies st instance satisfies st st denote set terms closed def def explicitly mentioned clear context 
semantic model race policy preselection policy interleaving section address problem representing semantic model empa term examining cases sequence choice parallelism 
sequence consider term 
term represents system execute action having type duration exponentially distributed rate 
semantic model represented rooted labeled transition system lts graph nodes describe states system transitions describe state changes 
case lts states correspond terms respectively 
sight case infinitely transitions labeled state second state transition possible duration action 
fortunately infinitely branching structure symbolically replaced means single transition labeled rate exponential distribution describing duration action hand contains information need point view underlying performance model markov chain shall see section 
choice consider term 
term represents system execute alternative exponentially timed actions 
mechanism choosing action execute adopt race policy action sampling duration succeeds 
adoption race policy implies random variable describing sojourn time state corresponding term minimum exponentially distributed random variables describing durations actions ii execution probability actions determined exponentially distributed random variables describing durations 
order compute quantities exploit property minimum independent exponentially distributed random variables exponentially distributed random variable rate sum original rates 
consequence term sojourn time corresponding state exponentially distributed rate mean sojourn time execution probabilities actions respectively 
probabilities nonzero semantic model term hand lts comprising states correspond terms respectively transitions state second state labeled respectively 
important consequence adoption race policy fact immediate actions take precedence exponentially timed actions 
consider term underlying semantic model lts transition labeled action duration zero action sample duration zero associated exponential distribution 
consider term 
term represents system execute alternative immediate actions 
actions duration race policy apply action execute chosen preselection policy actions having highest priority level executable probability execution proportional weight 
semantic model term lts states correspond terms respectively sojourn time state zero 
transition state second state labeled 
transitions state second state labeled respectively execution probability transition execution probability second transition 
consider term 
term represents system execute alternative passive actions 
duration passive actions undefined assigned priority levels weights undergone race policy preselection policy 
means passive actions viewed actions classical process algebras term expresses purely nondeterministic choice nondeterminism refers absence mechanism specifies choice resolved 
observe alternative composition operator parametric nature choice simpler form describes choice actions prioritized actions active different priority levels 
choice solved implicitly concerns exponentially timed action immediate action choice implicitly determined race policy explicitly concerns immediate actions having different priority levels priority levels explicitly determine choice 
probabilistic actions active priority level 
choice solved implicitly concerns exponentially timed actions execution probabilities implicitly determined durations due race policy explicitly concerns immediate actions having priority level execution probabilities explicitly determined weights 
nondeterministic actions passive case race policy preselection policy applies 
parallelism consider terms term represents system execute followed followed term represents system execute parallel 
interleaving style classical process algebras propose ltss semantic models respectively 



isomorphism ltss correct functional point view definition interleaving performance point view due memoryless property exponential distributions assume completes residual time completion exponentially distributed rate rate labeling transition state state conditional 
words means semantics empa defined interleaving style case classical process algebras 
furthermore worth noting right hand lts transition state state recording possible simultaneous completion reason probability simultaneous completion zero durations described means continuous probability distribution functions 
integrated interleaving semantics empa terms main problem tackle defining semantics empa actions executable term may different priority levels having highest priority level executable 
call potential move term pair composed action executable term ii derivative term obtained executing action 
solve problem compute inductively multiset potential moves term regardless priority levels select having highest priority level 
motivated framework fact actual executability execution probability action depend actions executable time executable know potential moves term correctly determine transitions corresponding state rates 
denote act set potential moves 
formal definition integrated interleaving semantics empa transition relation subset act satisfying inference rule reported part table 
rule selects potential moves highest priority level passive merges having action type priority level derivative term order produce standard ltss 
operation carried functions select pl act defined third part table 
second operation carried function melt partial function min defined fourth part table 
name min recall adoption race policy minimum set random variables computed 
regard min associative commutative operation take liberty apply multisets rates 
brackets multisets denote multiset union denote collection finite multisets sets set denote multiplicity element multiset denote multiset obtained projecting tuples multiset th component 
pm fifth part table denotes multiplicity tuples pm component 
pm pm melt select pm pm pm pm pm pm pm pm pm pm pm pm pm pm norm pm pm pm pm select pm pm pm pl pl pl pl pl pl melt pm pm min pm pl pl min min norm pm pm min split pm split pm split split split table inductive rules empa integrated interleaving semantics example consider term identical potential moves merged means melt min 
point producing single transition identical potential moves wrong average sojourn time state corresponding term altered 
melt min correctly manage situation require decorate transitions auxiliary labels take account multiplicity transitions allowing generation standard ltss integrated semantic models 
multiset pm potential moves defined structural induction second part table intuitive meaning operators explained section 
order enforce bounded capacity assumption establishes rate activity carried increased synchronizing activities rule parallel composition operator normalization required suitably computes rates potential moves resulting synchronization active action independent alternative passive actions 
normalization operates way applying min rates synchronizations involving active action gives result rate active action synchronization assigned execution probability 
normalization carried partial function norm atype function split ri defined fifth part table 
note norm pm pm defined min condition action rates required section order synchronization permitted 
example consider terms cases left hand side operand potential move right hand side operand potential moves action term potential moves type terms consist single active action exponentially timed rate rate potential moves mean sojourn time states corresponding normalization take place sum rates potential moves turns 
assuming independent alternative passive actions execution probability involved synchronization norm computes rate potential moves dividing number independent alternative passive actions synchronization take place 
consequence rate potential moves 
definition integrated interleaving semantics lts act set states reachable restricted act definition performance closed contain passive transitions 
denote set performance closed terms term integrated interleaving semantics fully represents behavior transitions decorated action type action rate 
think obtaining projected semantic models functional semantics performance semantics simply dropping action rates action types respectively 
matter fact case functional semantics 
definition functional semantics lts atype restricted atype definition performance semantics requires careful treatment deferred section performance closed terms completely specified performance standpoint 
empa kernels due coexistence exponentially timed actions prioritized weighted immediate actions passive actions empa viewed kernels see nondeterministic kernel prioritized kernel probabilistic kernel exponentially timed kernel 
nondeterministic kernel probabilistic kernel empa prioritized kernel empa kernels exponentially timed kernel sections examine kernels separately presenting functional semantics case nondeterministic kernel prioritized kernel integrated interleaving semantics case probabilistic kernel exponentially timed kernel specializes kernel hand defining performance semantics case probabilistic kernel exponentially timed kernel making comparison related process algebras appeared literature 
section consider interplay probabilistic kernel exponentially timed kernel point view performance semantics point view probability distribution functions modeled 
section emphasize role played passive actions report remarks synchronization discipline action rates adopted empa 
section show example highlight considerable expressive power empa resulting coexistence kernels 
nondeterministic kernel nondeterministic kernel sublanguage empa obtained considering passive actions 
duration passive actions completely unspecified classical process algebra allows pure nondeterminism 
define syntax functional semantics terms 
definition set process terms generated syntax atype 
denote gnd set closed terms 
definition functional semantics gnd lts atype restriction defined table atype table inductive rules functional semantics proposition gnd isomorphic 
proof follows immediately fact gnd function norm evaluates function select boils identity function application function melt irrelevant effect min stem fact transition relation relation 
conclude observing operators mix operators ccs csp functional abstraction operator coincides hiding operator csp functional relabeling operator coincides relabeling operator ccs parallel composition operator reduces parallel composition operator csp constraint action rates satisfied 
results analysis techniques developed classical process algebras applied 
prioritized kernel prioritized kernel sublanguage empa obtained considering immediate actions having weight passive actions 
immediate action priority level prioritized process algebra framework priority level passive action considered unspecified weight duration immediate action ignored 
define syntax functional semantics terms 
definition set lpt process terms generated syntax ni atype 
denote gpt set closed terms lpt definition functional semantics gpt lts atype restriction defined table atype pm pm select pm pm pm pm pm pm pm pm pm pm pm pm pm pm pm pm table inductive rules functional semantics proposition gpt isomorphic 
proof follows immediately fact gpt function norm effect side condition application function melt irrelevant interested action types 
action explicit priority level syntactical point view similar proposal action type prioritized version version provided 
difference actions preempted internal prioritized actions order achieve compositionality semantic treatment priorities quite different actual priority level action independent visibility 
shall see section order achieve compositionality presence actions having different priority levels extend empa priority operator style priority structure enforced scope show empa term thought having single occurrence priority operator top 
claim approach convenient modeling point view priority level action exactly specified designer enforce need introduce artificial prioritized loops algebraic description system burden algebraic description occurrences priority operator 
furthermore observe different proposal prioritized choice operator explicitly defined proposal priority expressed extremal probability computation proceeds priority arbitrate simultaneous resource requests lockstep parallelism considered ccs prio actions allowed preempt site capture notion localized precedence 
consider features prioritized process algebra possess priority relation globally dynamic may case action type priority action type state converse state 
hand priority relation define arbitrary partial orders leveled priority structure causes incomparable actions priority 
example possible express fact state action type takes precedence action types action type takes precedence action type probabilistic kernel probabilistic kernel sublanguage empa obtained considering immediate actions having priority level passive actions 
immediate action weight probabilistic process algebra framework weight passive action considered unspecified priority level duration immediate action ignored 
define syntax integrated semantics functional semantics performance semantics terms 
definition set process terms generated syntax ri atype 
denote gpb set closed terms set performance closed terms gpb definition integrated semantics gpb lts act defined table act restriction definition functional semantics gpb lts atype atype restriction proposition gpb isomorphic 
proof straightforward consequence fact gpb function select boils identity function 
corollary gpb isomorphic 
melt pm table rule integrated semantics performance semantics terms defined considering execution probability immediate transition exiting state probability proportional weight transition depends current state underlying performance model homogeneous discrete time markov chain 
formalized means probabilistically rooted labeled transition system lts initial state replaced probability mass function specifying state probability initial 
labels transitions execution probabilities transitions computed weights corresponding actions adoption preselection policy 
definition markovian semantics ri pe subset ri atype atype pe ri pe probabilistic process algebras appeared literature rely explicit probabilistic alternative composition operator probabilistic information weights encoded actions 
probabilistic nondeterministic aspects coexist due presence passive actions causing viewed possible syntactical counterpart formal models randomized distributed computations defined 
performing accurate comparisons see differs cpp due reasons absence probabilistic alternative composition operator presence pure nondeterminism restricted form nondeterminism allowed cpp fact calculi computation proceeds worth noting idea weights probabilities proposed retained operational convenience 
consider probabilistic calculi computation proceed realize differs pcsp usual reasons furthermore probabilistic parallel composition operator introduced corresponding operator probabilistic 
differs probabilistic calculus proposed probabilities assigned internal actions lotos probabilistic alternative composition operator introduced 
classification models probabilistic processes proposed easily seen performance closed terms represent reactive models choice enabled actions having different types probabilistic nondeterministic 
consequence produces generative models relative frequency performing actions having different types explicitly described 
accurately finer produce stratified models intended relative frequencies actions preserved levelwise fashion presence restriction 
example consider operating system having processes multiprogrammed garbage collector gc user process user process 
suppose process cpu cycles frequency preserved garbage collector user processes denied access machine due restriction context 
corresponding term sched gc sched sched sched consider sched execution probability action having type gc required 
possible describe reactive models means interplay weighted immediate actions passive actions means terms performance closed 
example suppose people want flip coin order decision flips coin outcome coin toss head probability tail probability 
scenario modeled follows person person flip head flip tail underlying model reactive relative frequency people get coin specified left environment probability outcome coin toss governed system 
capability describing reactive generative stratified probabilistic processes means terms notable consequences parametricity see section alternative composition operator empa 
exponentially timed kernel exponentially timed kernel sublanguage empa obtained considering exponentially timed actions passive actions 
active action duration probability distribution function stochastically timed process algebra 
define syntax integrated semantics functional semantics performance semantics terms 
definition set process terms generated syntax ri atype 
denote get set closed terms eet set performance closed terms get 
definition integrated semantics get lts iet act iet iet restriction iet defined table act 
melt pm iet table rule integrated semantics definition functional semantics get lts fet atype fet fet restriction iet atype proposition get iet isomorphic 
proof straightforward consequence fact get function select boils identity function 
corollary get fet isomorphic 
performance semantics terms eet defined considering rate exponentially timed transition exiting state execution probability transitions depends current state sojourn time state exponentially distributed underlying performance model homogeneous continuous time markov chain formalized means 
labels transitions rates corresponding exponentially timed actions 
definition markovian semantics eet met ri met pe met met subset ri iet atype pe met ri pe met met recall reason consider exponential distributions order specify durations twofold 
hand underlying performance models turn exploit related theory order derive performance measures 
hand memoryless property exponential distributions allows define integrated semantics empa interleaving approach noted section 
point closely resembles stochastically timed process algebras pepa 
shall see section main difference synchronization discipline action rates 
joining probabilistic exponentially timed kernels consider process algebra cope coexistence immediate exponentially timed actions 
performance standpoint means sojourn time states exponentially distributed tangible states sojourn time states zero vanishing states 
order define performance semantics terms devised algorithm eliminates immediate transitions related vanishing states produces 
algorithm comprises steps 
step consists dropping action types removing composed immediate transition called immediate short changing weight immediate transition corresponding execution probability determining initial state probability function 
formally lts act obtain se ri inf pe se pm melt atype se 
subset se ri inf se abuse notation apply function melt multisets pairs components rates actions 
tangible pm vanishing pm exactly potential moves wj sj sj transitions pe se ri pe pn qn graph reduction rule wj sj wj 
split split split sn th step handles vanishing state eliminating state outgoing immediate transitions splitting transitions entering vanishing state removing immediate created splitting immediate transitions entering vanishing state exiting states reached eliminated immediate transitions distributing initial state probability associated vanishing state states reached eliminated immediate transitions 
formally assume vanishing state considered th step shown build pk se ri inf pe se se 
pm melt split pi si se subset se ri inf se tangible vanishing si pm vanishing si pm exactly potential moves pj sj sj transitions pj 
pj sj pe si pe se ri pe pe pe pi si definition markovian semantics se ri pe obtained applying algorithm 
theorem finitely states algorithm terminates immediate transitions finitely states unique 
proof see 
conclude observing coexistence empa probabilistic exponentially timed kernels allows phase type distributions modeled 
limitation exponential distributions restrictive possible describe approximate distributions frequently occurring practice 
details reader referred 
gluing role passive actions synchronization kernels empa share common feature presence passive actions 
due synchronization discipline action rates adopted empa causes passive actions act glue various kernels forming empa 
main consequence synchronization discipline action rates client server communications directly expressible rate action resulting synchronization determined rate possible active action involved synchronization 
choice due simplicity avoids need define rate action deriving synchronization active actions 
choice due modularity 
modeling way synchronization designer active component know rate synchronization designers get rid leaving unspecified passive actions 
furthermore possible subsequent changes rate affect component 
observed section compute correctly rate synchronization bounded capacity assumption states rate term carries action increased case synchronization normalization required takes account number alternative independent passive actions synchronized active action hand 
example consider queueing system service center independent servers customer interarrival time exponentially distributed rate service time server exponentially distributed rate 
queueing system represented follows qs arrivals servers arrivals arrivals servers normalization operates way qs transitions leaving initial state rate rate involved active component arrivals preserved 
normalization completely transparent designer empa stochastically timed process algebras pepa embodied semantic rules 
contrary case stochastically timed process algebras passive actions simulated exponentially timed actions rate rate synchronization actions product rates normalization carried bounded capacity assumption 
consequence responsibility designer define rates actions type terms sum expected underlying obtained 
problem context dependent meaning rates actions partially alleviated means unweighted immediate actions probabilistic choice operator respectively completely solved keeping action execution separated time passing 
despite fact client server communications frequently occur computing systems useful able describe kinds communication recognized 
described stochastically timed process algebras example flexible client server communications service requirement expressed means action rate describes scaling factor passive action patient communications pepa terms involved synchronization rate slowest 
patient communications flexible client server communications modeled indirectly empa 
example consider queueing system scalable service rate service center server fifo queue seats customer interarrival time exponentially distributed rate service time depends number customers queue 
queueing system represented follows arrivals queue dh server arrivals arrivals queue queue queue queue dh dq server server 
dq server server sf server basic service rate sf ni ri describes scaling factor 
kinds communications listed polite communications communications timed synchronizations 
shown described indirectly empa obtaining expected underlying 
means limitation client server synchronizations introduced sake simplicity restrictive modeling viewpoint 
summarizing example report example demonstrate usefulness kernels embodied empa standpoint modeling analysis concurrent systems 
example examined dining philosophers problem 
suppose philosophers pi sat round table plate front chopsticks ci shared neighbor philosophers get rice center table 
denote sum modulo think action type pi thinking pu pu pi picks ci ci eat pi eating pd pd pi puts ci ci 
scenario described follows dp 
pn pui pd 
cn pi think pui pui pui pui eat pd pd pi ci pui pd ci actions passive system purely nondeterministic exactly description obtain classical process algebras 
naive solution break symmetry may cause deadlock introduce precedence relation philosophers means priority levels immediate actions modifying specification pi follows pi think pui pui eat pd pd pi solve problem elegant fair manner randomized distributed algorithm pi flips fair coin choose ci ci gets chosen chopstick soon free gets chopstick free releases chosen chopstick flips coin 
algorithm easily described empa weights immediate actions modifying specification pi follows pi think pui pui pd pui pui pd eat pd pd pi performance closing system empa assess performance indices average time philosopher eating chopstick utilization 
specification pi modified follows pi think pui pui pd pui pui pd eat pd pd pi observe actions pu pd modeled immediate irrelevant performance evaluation point view 
immediate actions provide mechanism performance abstraction way action type provides mechanism functional abstraction 
worth noting priority levels actions pu pd fixed way chopstick initially chosen philosopher free philosopher pick chopstick releasing 
examples highlight expressive power empa concerned different kinds queueing systems alternating bit protocol 
notion equivalence empa notion equivalence empa relate terms describing concurrent systems indistinguishable point view external observer having functional performance properties 
purpose section develop notion integrated equivalence sure congruence order allow compositional reasoning 
notion integrated equivalence defined bisimulation style 
main motivation resorting branching time semantics possible establish clear connection equivalence notion ordinary lumping frequently aggregation purposes performance evaluation 
worth noting integrated equivalence allows qualitative analysis means investigate terms represent concurrent systems possessing functional performance regardless actual values 
order carry quantitative analysis know functional property holds assess value performance measure study projected semantic models simplest terms 
section organized follows 
section introduce notion equivalence denoted fp defined projected semantic models show appropriate congruence 
section notion equivalence denoted emb defined integrated semantic model refining idea probabilistic bisimulation various kernels empa singled section 
section prove emb congruence section demonstrate emb coarsest congruence contained fp far terms execute internal immediate actions concerned 
section give sound complete axiomatization emb set nonrecursive terms empa 
section develop algorithm style check empa terms emb minimize integrated semantic model empa term show relationship emb ordinary lumping :10.1.1.13.570:10.1.1.13.570
proofs results appendix 
deceptively integrated equivalence straightforward define projected equivalences projected semantic models 
functional semantic model classical bisimilarity performance semantic model variant probabilistic bisimilarity takes account initial state probabilities 
definition say functionally equivalent written atype bisimilar atype exists relation atype definition say performance equivalent written se ri pe bisimilar se ri pe exists equivalence relation se se se se se se pe pe se se se se se se se se natural candidate notion equivalence may fp examples show fp useful congruence 
example consider terms 
turns fp left hand side term execute action rate right hand side term execute action rate 
note action type execution probability action type execution probability detected fp 
example consider terms turns fp left hand side term execute action type right hand side term 
example consider terms turns fp state initial state probability markovian semantics left hand side term markovian semantics right hand side term 
examples show fp unable keep track link functional part performance part actions 
means achieve semantic compositionality necessary define equivalence integrated semantic model stressed theorem 
incidentally convenient respect fp avoids need build projected semantic models checking bisimilarity bisimilarity respectively 
really integrated equivalence emb order define really integrated equivalence bisimulation style consider various kernels empa exponentially timed kernel probabilistic kernel treated notion probabilistic bisimulation proposed consists requiring bisimulation equivalence relation bisimilar terms aggregated probability reach equivalence class executing actions type priority level 
case exponentially timed kernel notion probabilistic bisimulation refined requiring additionally bisimilar terms identically distributed sojourn times 
example consider terms transitions labeled execution probability transitions labeled execution probability average sojourn time twice average sojourn time 
due race policy requiring bisimilar terms identically distributed sojourn times aggregated probability reach equivalence class executing exponentially timed actions type amounts requiring bisimilar terms aggregated rate reach equivalence class executing exponentially timed actions type 
example hold coincides notion markovian bisimulation proposed 
case probabilistic kernel notion probabilistic bisimulation restated terms weights 
consequence bisimilar terms required aggregated weight reach equivalence class executing immediate actions type priority level 
example hold coincides notion direct bisimulation proposed 
nondeterministic kernel treated classical notion bisimulation 
bisimilar terms required passive actions reaching equivalence class regardless actual number passive actions 
example hold concerning prioritized kernel useful able write equations problem applicability equations depends context terms equivalent execute action execute actions 
solve problem follow proposal introducing priority operator priority levels taken potential effective scope priority operator 
consider language generated syntax semantic rules table rule part replaced melt pm rule priority operator introduced second part pm select pm easily seen empa coincides set terms 
conditions met order terms considered equivalent subsumed means function expressing aggregated rate term reach class terms executing actions type priority level 
definition define partial function rate atype rate min pl definition equivalence relation strong extended markovian bisimulation strong emb atype rate rate case say strongly extended markovian bisimilar strongly emb 
example identity relation id strong emb contained strong emb due reflexive property 
prove largest strong emb union strong embs define integrated equivalence largest strong emb 
lemma bi family strong embs 
ibi strong emb 
proposition emb union strong embs 
emb largest strong emb 
definition call emb strong extended markovian bisimulation equivalence strong say strongly extended markovian bisimulation equivalent strongly emb 
words terms strongly strongly emb 
worth noting despite presence different kernels able come compact elegant notion equivalence style 
conclude section exhibiting necessary conditions sufficient condition order terms strongly 
necessary conditions aggregated rates independent equivalence classes easily checkable 
necessary condition guarantees states associated strongly terms identically distributed sojourn times tangible identical total weights vanishing 
second necessary condition finer guarantees strongly terms carry actions type priority level exactly aggregated rate section recalled section 
proposition emb 
min rate atype min rate atype ii atype rate rate sufficient condition notion strong emb emb helpful avoid redundancy strong embs example strong emb may retrieved fact emb 
sufficient condition states order terms strongly suffices find strong emb emb containing pair 
notion strong emb emb section 
definition equivalence relation strong emb emb atype emb emb rate rate proposition strong emb emb emb 
min min split 
emb congruence section show emb preserved operators empa 
theorem 
emb act emb 
ii atype emb 
iii emb 
iv emb 
emb emb 
vi atype emb emb 
order prove emb preserved recursive definitions extend definition terms closed constants devoid defining equation 
note constants act variables 
definition constant const free def def 
definition term partially closed def constant const def free def equipped def defining equation exists subst def instance constant def satisfies st instance satisfies st st definition const free def 
term obtained replacing occurrence defined induction syntactical structure follows free def def def definition suppose const def const def contains ai const free constants 
say strongly sets bi ai bi ai bi turns ai bi emb ai bi theorem suppose const def const def contains const free constant 
emb emb 
def 
conclude reporting example exploit congruence property 
example consider queueing system arrival rate service rate 
queueing system represents service center composed independent servers customer interarrival time exponentially distributed rate service time server exponentially distributed rate 
queueing system hand different descriptions empa state oriented description focus state set servers intended number servers currently busy resource oriented description servers modeled sepa 
state oriented description system arrivals servers arrivals arrivals servers servers resource oriented description system ro arrivals servers arrivals arrivals servers 
representations immediate actions occur system emb system system ro emb system ro take advantage fact emb congruence prove system emb system ro suffices prove servers emb servers 
case strong emb emb reflexive symmetric transitive closure relation pairs terms servers 
servers 
servers 


relationship emb section investigate relationship emb fp 
emb defined empa terms fp defined empa terms section carefully introduce priority operators necessary 
result prove inclusion emb fp holds theorem emb 
theorem emb 
inclusion emb fp strict see considering examples 
additionally examples show emb priority levels weights immediate actions congruence property longer hold 
example consider terms example 
fp emb rate rate violating necessary condition proposition ii 
example consider terms example 
fp emb rate rate violating necessary condition proposition ii 
emb equivalence defined relaxing definition priority level immediate actions 
emb emb congruence 
example emb emb left hand side terms execute action type right hand side terms 
example consider terms example 
fp emb rate rate violating necessary condition proposition ii 
emb equivalence defined relaxing definition consider execution probabilities weights immediate actions see notion relative bisimulation proposed 
emb emb congruence 
example emb emb left hand side terms execute actions having type probability right hand side terms execute actions having type probability 
matter fact second result prove emb restricted set terms integrated semantic model contain internal immediate transitions coarsest congruence contained fp 
theorem 
emb atype turns fp fp example show problems arise internal immediate transitions come play 
example consider terms turns emb violate necessary condition expressed proposition ii distinguished respect fp means context alternative composition operator parallel composition operator 
fact alternative composition operator allow introduce choice level parallel composition operator principle allows introduce choice level introduce exponentially timed action way state having transition labeled action different initial state probabilities markovian semantics resulting terms see proof theorem 
problem action executed higher priority level action ready executed action blocked means appropriate synchronization set internal 
axiomatization emb proved emb congruence develop equational theory nonrecursive empa terms emb 
theory set axioms table denote ded corresponding deductive system 
noted main difference respect axiomatization classical process algebras bisimulation equivalence lies axiom idempotency property alternative composition operator holds case passive actions fact rates exponentially timed actions summed consequence adoption race policy 
prove ded sound complete deductive system respect emb set nonrecursive terms 
accomplish introduce usual definition normal form term prove term transformed term normal form ded 
definition sum normal form snf ai fi fi snf assume 
definition define function size ni structural induction follows size size size size size size size size max size size size size size 
lemma size 
lemma axiom table size size 
lemma exists snf theorem deductive system ded sound complete respect emb set nonrecursive terms 
algorithm check emb conclude study notion equivalence empa presenting algorithm check finite state terms strongly minimize integrated semantic model finite state term respect emb 
algorithm shown table adaptation framework algorithm described applied functional semantic models finite state terms turn variant algorithm proposed solve relational coarsest partition problem :10.1.1.13.570
labeled transition system state space representing union integrated semantic models finite state terms checked emb integrated semantic model finite state term minimized respect emb idea algorithm repeatedly refine current partition strong emb 
see initial partition contains class entire state space partition resulting execution repeat cycle coarsest partition satisfying necessary condition emb proposition ii 
proposal algorithm implemented log time space number states number transitions 
reader referred notions results concerning deductive systems algebraic theories concurrent processes 
min pl pl ai ei aj ej pl ai pl ah ai ei ai ei aj ej ai ei aj ai ei ej ak split hk nk ek eh ak split nk eh ek ai ai hk 
ah ak 
ah ak ah ak hk ah ak nk hk table axioms emb partition splitters repeat partition choose splitters splitters splitters atype coarsest partition rate rate partition partition splitters splitters splitters table algorithm check emb worth noting variant algorithm table compute coarsest ordinary lumping markovian semantics term allowing determination performance measures solving smaller markov chain equivalent original 
definition mi si ri pi representing 
say ordinary lumping partition holds 
proposition mi si ri pi representing 
ordinary lumping bisimilar 
conclude giving definition lumped markovian semantics showing relation emb bisimilarity ordinary 
definition se ri pe markovian semantics lumped markovian semantics ml se ml ri ml pe ml se ml partition partition result algorithm table ml subset se ml ri se ml fixed pe ml se ml ri pe ml pe 
ml theorem emb ml bisimilar ml 
partition se splitters se repeat partition choose splitters splitters splitters coarsest partition partition partition splitters splitters splitters table algorithm compute coarsest ordinary lumping corollary emb ml isomorphic ml exists bijection se ml se ml pe ml pe ml se ml ml ml se ml corollary reveals adequacy emb performance standpoint emb underlying lumped markovian models transient steady state probability distributions describe concurrent systems having performance characteristics 
tutorial shown possible develop process algebra allowing nondeterminism priorities probabilities time burdening underlying theory exceedingly 
particular shown expressiveness empa considerable viewed sum expressiveness classical process algebra prioritized process algebra probabilistic process algebra exponentially timed process algebra underlying theory relatively simple idea potential move definition integrated interleaving semantics intuitive notion integrated equivalence compact elegant 
problem currently investigating enhance expressive power empa 
means extending timed kernel order directly cope durations arbitrary distributions avoiding need resort approximations obtained means interplay exponentially timed immediate actions 
achieve understand information added states transitions integrated semantics define performance semantics extend notion integrated equivalence 
afraid enhanced expressiveness obtained means general distributions traded complexity underlying theory 
extremely challenging permit bridge gap deterministically timed process algebras stochastically timed process algebras 
grateful pedro argenio remarks modeling dining philosophers 
research partially funded murst cnr esprit project 
proofs properties emb proof lemma observed equivalence relation transitive closure union equivalence relations assume ni ibi ni 
result follows proving induction ni rate rate atype bi bi ci ji 
bi implies ci bi exists ci equivalence class written union set equivalence classes bi 
consequence atype ci ji rate min rate ci min rate ci rate bi strong emb 

derive exists bi atype turns rate rate induction hypothesis rate rate applying argument previous point 
proof proposition definition emb contains largest strong emb 
prove emb strong emb done 
emb emb trivially holds emb emb due fact emb strong emb virtue lemma emb contains strong embs strong emb lemma emb 
definition emb emb emb proof proposition strong emb emb prove emb emb strong emb 
emb emb emb emb atype emb emb 
emb emb emb emb implies emb emb union equivalence classes respect emb 
consequence rate ej rate ej emb rate rate result follows 
complete proof observe emb emb id emb emb emb emb emb emb strong emb emb transitivity 
proof theorem emb 
strong emb act prove strong emb 
observed equivalence relation cases 
result trivially follows 
assume observed atype trivially rate rate 
rate fj rate fj min rate fj rate rate 
pl ej rate fj turns rate rate 
ii atype prove id emb strong emb 
observed equivalence relation terms equivalence class outermost operator atype id trivially rate rate 
emb 
terms outermost operator trivially rate rate 
terms outermost operator turns emb 
rate ej emb rate fj rate ej emb min min rate ej emb depending 
emb follows rate rate 
iii proof id emb strong emb similar developed ii 
main difference subcase result follows fact rate fj min rate ej emb iv proof id emb strong emb similar developed ii 
main difference subcase result follows fact rate fj rate ej emb ej pl strong emb proof strong emb similar developed 
main difference subcase result follows fact rate fj rate ej min rate considerations derive rate rate rate rate 
rate ej rate ej min rate ej turns rate rate rate rate 
vi atype proof id emb strong emb similar developed ii 
main difference subcase turns emb result follows considerations rate ej emb min rate rate ej emb rate fj rate depending ej emb ej emb ej emb ej emb emb follows rate rate 
rate ej emb min rate rate ej emb rate fj rate depending rate rate ej emb rate rate ej emb rate rate ej emb rate rate ej emb 
emb follows rate rate 
proof theorem suffices prove const def free strong emb emb result follow observe reflexive contain free variables symmetric definition transitive const def free transitivity guaranteed reflexivity 
atype emb emb prove rate rate proceeding induction maximum depth inference potential move having type priority level derivative term rule prefix operator deduce potential move 
pl fj aj 
turns emb emb rate rate 
subcases arise depending syntactical structure fj aj potential move having type priority level derivative term depth inference potential move having type priority level derivative term emb emb depth inference emb 
rate fj rate aj rate aj min min rate aj depending 
induction hypothesis follows rate rate 
proof similar developed subcase 
result follows applying induction hypothesis fact rate fj min rate aj proof similar developed subcase 
result follows applying induction hypothesis fact rate fj rate aj fj aj aj 
potential move having type priority level derivative term depth inference move depth inference 
rate fj rate aj min rate aj induction hypothesis follows rate rate 
fj aj aj 
suppose potential move having type priority level derivative term depth inference potential move having type priority level derivative term emb emb depth inference emb emb 
rate fj rate aj min rate aj aj emb rate aj depending aj aj induction hypothesis follows rate rate 
potential move having type priority level derivative term emb emb depth inference potential move having type priority level derivative term emb emb depth inference emb 
rate aj rate fj min rate aj rate aj depending rate aj rate aj 
induction hypothesis follows rate rate 
fj aj fj aj 
potential move having type priority level derivative term depth inference potential move depth inference 
rate fj rate ej 
induction hypothesis fact emb follows rate rate 
result trivially follows fact 
proof theorem follows immediately fact emb definitions emb proof theorem emb strong emb group steps algorithm determining markovian semantics macrostep results elimination forks immediate transitions upstream vanishing states belong vanishing equivalence class denote produced execution step immediate removal ph ph produced execution macrostep related vanishing equivalence class ch removal immediate incident states belonging ch 
result follows proving ph ph bisimilar proceeding induction number ni vanishing equivalence classes 
prove se se se se bisimulation 
observe equivalence relation se se se se se se se se 
ej ej se turns pe pe se se se se 
se se corresponding equivalence class tangible 
min sj ej sej ej atype sej min sj min rate sj atype sej ej 
turns min se min se suppose ph ph bisimilar bh se se se se 
ch se se bh vanishing equivalence class considered macrostep se se set states ph ph respectively 
prove bh bh se se se se bisimulation ph ph 
observe bh equivalence relation se se bh se se se se se se bh se se bh corresponding class se se bh 
ch se se state ch having transitions states ch ej induction hypothesis follows pe se kj pe ch se se sh ch se ri defined min sh se min sh ch se note defined state ch transitions states ch undefined case taken convenience 
ej se induction hypothesis follows pe kj sh ch se pe kj sh bh se se 
se se bh corresponding equivalence class se se bh 
note bh se se 
ch se se state ch having transitions states ch min sj min sj induction hypothesis follows min ej sej ej kj sej kj se se min ch se se sh ch se ri defined min sh se min sh ch se note defined state ch transitions states ch undefined case taken convenience 
min sj ej sej min sj ej kj sej kj min split min sj ej kj sh sh ch sej kj induction hypothesis follows min se se min proof theorem emb emb congruence atype emb emb emb fp result follows 
prove contrapositive assume emb demonstrate distinguishable respect fp means appropriate context alternative composition operator parallel composition operator 
proceed induction number actions execute order respectively emb violate necessary condition expressed proposition ii 
assume exist atype min rate min rate 
sides inequality assume min rate 
cases assume min rate 
assume 
min rate min rate atype atype aggregated rates terms min rate min rate respectively bisimilarity violated 
min rate min rate atype atype aggregated rates terms min rate min min rate min rate min min rate respectively bisimilarity violated 
assume 
follows min rate min rate 
consequence atype occurring ri smaller smallest rate possible exponentially timed actions occurring atype atype due fact state having transition labeled initial state probability min rate markovian semantics left hand side term min rate markovian semantics right hand side term 
assume min rate 
assume exists min rate 
follows 
atype occurring exist emb hold 
recall considering closed terms finitely branching 
choice determination initial state probabilities easier choice important case interested lumped markovian semantics see section 
ignore constraint may distinguished respect means context ordinary lumping may come play state considered may initial state probability markovian semantics resulting terms 
atype max atype max terms execute action type term 
assume min rate 
atype atype left hand side term execute action type right hand side term 
atype atype left hand side term execute action type right hand side term 
assume atype turns min rate min rate 
emb hypothesis follows exist atype emb rate rate rate rate rate min rate rate min rate 
consequence exist reachable respectively executing action having type priority level apply induction hypothesis 
atype context distinguishes respect fp 
atype fp atype atype fp atype provided constraint possible element constraint rate possible exponentially timed action occurring satisfied 
proof lemma proceed induction size size 
result follows proving induction syntactical structure take result follows reflexivity 
case possible contradicts hypothesis size 
subterm size structural induction 
result follows substitutivity transitivity 
result proved proceeding previous point exploiting case second case 
subterms size size structural induction 
result follows substitutivity transitivity 
case possible contradicts hypothesis size 
result hold size ni assume size 
result follows proceeding induction syntactical structure case possible contradicts hypothesis size 
size induction hypothesis exists snf result follows substitutivity 
subterm structural induction exists snf substitutivity obtain assuming ai snf exploiting transitivity obtain ai ai ai ai 
size size size size size induction hypothesis follows exists snf take ai ai ai result follows substitutivity 
result proved proceeding previous point exploiting case second case 
subterms structural induction exist snf 
substitutivity obtain result follows possible application 
size size induction hypothesis exist snf 
substitutivity obtain 
cases size size transitivity 
size size ai snf 
transitivity obtain aj 
size size size snf result follows substitutivity 
proof symmetric case similar 
size size ai ai induction hypothesis follows exists snf 
transitivity obtain aj aj hk ak split nk 
hk ak split nk 
size term surrounded parentheses induction hypothesis term proved equal term snf result follows substitutivity 
proof theorem prove emb 
straightforward consequence fact reflexivity symmetry transitivity substitutivity ded matched reflexive symmetric transitive congruence properties emb fact axiom restated property emb 
assume emb 
cases snf result follows proceeding induction size size snf 
result follows reflexivity 
size restrictive assume holds ak ak pl ak pl ak ek emb ek case suffice resort finitely applications 
emb summand exists exactly summand emb viceversa 
induction hypothesis obtain result follows substitutivity 
snf lemma exist snf 
obtain emb emb soundness emb transitive property previous point 
transitivity obtain 
proof proposition suffices take reflexive symmetric transitive closure relation associates microstate macrostate contains 
proof theorem theorem follows bisimilar equivalence relation bm 
result follows proving bml se ml se ml se ml se ml 

bm bisimulation ml ml 
note bml equivalence relation bm 
se ml se ml bml ml se sej dc se dc union equivalence classes respect bm bm bisimulation follows pe ml pe ml se se bml se ml se ml due existence bm 
se ml se ml bml cj ej ml sej ml sj ej sej ml sj ej dc sej equality holds whichever sj cj ml ej obtained ej ordinary lumping 
dc union equivalence classes respect bm bm bisimulation follows ml se ml ml se ml proof corollary searched bijection relation bml built proof previous theorem 
reason bml bisimulation ml ml coarsest respectively 
ajmone marsan balbo conte class generalized stochastic petri nets performance evaluation multiprocessor systems acm trans 
computer systems ajmone marsan lotos extension performance analysis distributed systems ieee acm trans 
networking baeten bergstra real time process algebra formal aspects computing baeten bergstra klop syntax defining equations interrupt mechanism process algebra informatica ix baeten bergstra smolka axiomatizing probabilistic processes acp generative probabilities information computation bergstra klop process algebra synchronous communication information control bernardo coexistence exponential immediate passive actions empa pp 
bernardo gorrieri integrating performance functional analysis concurrent systems empa technical report ublcs university bologna italy bernardo gorrieri extended markovian process algebra proc 
th int 
conf 
concurrency theory concur lncs pisa italy brinksma iso specification language lotos computer networks isdn systems brinksma 
katoen stochastic causality process algebra pp 
buchholz markovian process algebra composition equivalence pp 
winskel ccs priority choice information computation cleaveland hennessy priorities process algebras information computation cleaveland natarajan process algebra distributed priorities proc 
th int 
conf 
concurrency theory concur lncs pisa italy :10.1.1.13.570
fernandez implementation efficient algorithm bisimulation equivalence science computer programming gerber lee resource prioritized bisimulation real time systems information computation van glabbeek smolka steffen reactive generative stratified models probabilistic processes information computation gorrieri theory processes durational actions theoretical computer science hansson jonsson calculus communicating systems time probabilities proc 
th real time systems symp 
rtss ieee cs press orlando fl harrison stochastic process algebra discrete event simulation quantitative methods parallel systems springer pp 
hennessy algebraic theory processes mit press hennessy regan process algebra timed systems information computation hermanns syntax semantics equivalences axioms pp 
hermanns superset basic lotos performance prediction pp 
hermanns wei formal characterisation immediate actions spa nondeterministic branching pp 
compositional approach performance modelling cambridge university press nature synchronisation pp 
hoare communicating sequential processes prentice hall 
jou smolka equivalences congruences complete axiomatizations probabilistic processes proc 
st int 
conf 
concurrency theory concur lncs amsterdam netherlands 
katoen brinksma stochastic simulation event structures pp 
kleinrock queueing systems john wiley sons larsen skou bisimulation probabilistic testing information computation larsen skou compositional verification probabilistic processes proc 
rd int 
conf 
concurrency theory concur lncs stony brook ny lehmann rabin advantage free choice symmetric fully distributed solution dining philosophers problem proc 
th symp 
principles programming languages popl acm press pp 
lowe probabilistic prioritized models timed csp theoretical computer science miguel fernandez lotos extended probabilistic behaviours formal aspects computing milner communication concurrency prentice hall moller temporal calculus communicating systems proc 
st int 
conf 
concurrency theory concur lncs amsterdam netherlands matrix geometric solutions stochastic models algorithmic approach john hopkins university press nicollin sifakis algebra timed processes atp theory application information computation yemini algebraic specification performance analysis communication protocols proc 
th int 
conf 
protocol specification testing verification north holland pp 
paige tarjan partition refinement algorithms siam journal computing park concurrency automata infinite sequences proc 
th gi conf 
theoretical computer science lncs priami stochastic calculus pp 
priami stochastic calculus general distributions pp 
subrahmanyam reasoning probabilistic behavior concurrent systems ieee trans 
software engineering proc 
nd workshop process algebras performance modelling herzog editors erlangen germany proc 
rd workshop process algebras performance modelling gilmore editors computer journal edinburgh uk proc 
th workshop process algebras performance modelling editor torino italy de tic timed calculus lotos formal aspects computing reed roscoe timed model communicating sequential processes theoretical computer science probabilistic branching markovian process algebras pp 
schweitzer aggregation methods large markov chains mathematical computer performance reliability pp 
north holland segala modeling verification randomized distributed real time systems ph thesis mit seidel probabilistic communicating processes theoretical computer science smolka steffen priority extremal probability proc 
st int 
conf 
concurrency theory concur lncs amsterdam netherlands processes probabilities priority time formal aspects computing vissers scollo van brinksma specification styles distributed systems design verification theoretical computer science yi ccs time interleaving model real time systems proc 
th int 
coll 
automata languages programming icalp lncs madrid spain 
