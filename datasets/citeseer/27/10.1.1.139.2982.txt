slicing identify duplication source code raghavan computer sciences department university wisconsin madison madison wi usa raghavan cs wisc edu susan horwitz computer sciences department university wisconsin madison madison wi usa iei del cnr pisa italy horwitz cs wisc edu 
programs lot duplicated code understanding maintenance difficult 
problem alleviated detecting duplicated code extracting separate new procedure replacing clones instances duplicated code calls new procedure 
describes design initial implementation tool finds clones displays programmer 
novel aspect approach program dependence graphs pdgs program slicing find isomorphic pdg subgraphs represent clones 
key benefits approach tool find non contiguous clones clones components occur contiguous text program clones matching statements reordered clones intertwined 
furthermore clones meaningful computations candidates extraction 
programs undergoing ongoing development maintenance lot duplicated code 
results studies indicate source code large programs duplicated code :10.1.1.21.8559:10.1.1.21.8559
duplication results increased code size complexity making program maintenance difficult 
example enhancements bug fixes done instance duplicated code may necessary search instances order perform corresponding modification 
studied development large software system multiple releases fact programmers missed copies duplicated code performing modifications 
tool finds clones instances duplicated code help alleviate problems clones identified tool extracted new procedure clones replaced calls procedure 
case copy maintain new procedure fact procedure reused may cut duplication 
note language preprocessor macros procedures concern introducing procedures result unacceptable performance degradation 
example illustrating clone detection extraction see 
left column shows fragments code unix utility bison 
clones indicated signs 
function duplicated code grow buffer pointed needed append current character buffer read character 
right column duplicated code extracted new procedure char indicated signs clones replaced calls procedure 
calls indicated signs 
describes design initial implementation tool programs finds clones suitable procedure extraction displays programmer 
novel aspect program dependence graphs pdgs variation program slicing find isomorphic subgraphs pdg represent clones 
key benefits slicing approach compared previous approaches clone detection comparing text control flow graphs syntax trees tool find non contiguous clones clones statements occur contiguous text program fragments clones matching statements reordered clones intertwined 
furthermore clones approach meaningful computations candidates extraction 
remainder organized follows section describes tool uses slicing find clones benefits approach 
section describes implementation tool insights obtained running tool real programs 
section discusses related section summarizes results 
slicing clone detection algorithm description find clones program represent procedure program dependence graph pdg 
pdg nodes represent program statements predicates edges represent data control dependences 
algorithm performs steps described subsections step find pairs clones 
step remove subsumed clones 
step combine pairs clones larger groups 
step find pairs clones 
start partitioning pdg nodes equivalence classes syntactic structure statement predicate node represents ignoring variable names literal values nodes fragment rewritten fragment token buffer grow token buffer char getc rewritten fragment fragment char token buffer grow token buffer rewritten fragment getc eof fatal warn type name fragment break eof fatal char warn type name break rewritten fragment token buffer grow token buffer char getc fragment newly extracted procedure void char char ptr char ptr ptr token buffer token buffer ptr grow token buffer ptr grow token buffer ptr ptr ptr getc getc fig 

duplicated code bison class called matching nodes 
pair matching nodes find isomorphic subgraphs pdgs contain 
heart algorithm finds isomorphic subgraphs backward slicing starting slice backwards lock step adding predecessor connecting edge slice iff corresponding matching predecessor pdg added slice 
forward slicing pair matching loop predicates added pair slices slice forward step adding matching control dependence successors connecting edges slices 
note lock step backward slicing done pair matching nodes slices forward slicing done matching predicates 
example illustrate need kind limited forward slicing section 
process described finishes identified isomorphic subgraphs matching partial slices represent pair clones 
process illustrated shows pdgs code fragments 
function calls represented token buffer grow token buffer pdg fragment getc token buffer grow token buffer control dependence data dependence pdg fragment fig 

matching partial slices starting 
nodes edges partial slices shown bold 
pdgs multiple nodes actual parameter return value call 
clarity example treated function calls atomic operations 
nodes match start nodes 
slicing backward nodes incoming control dependence edges find nodes nodes 
nodes match different syntactic structure added partial slices 
slicing backward nodes incoming data dependence edges find nodes getc pdg nodes second pdg 
node matches node matches nodes edges just traversed reach added partial slices 
nodes added nodes reconsidered 
slicing backward nodes find nodes match traversed edges added 
furthermore nodes represent predicates slice forward nodes 
find nodes slices reconsidered 
slicing backward nodes find nodes match nodes slicing backward nodes 
partial slices complete 
nodes edges partial slices shown bold font 
partial slices correspond clones fragments shown signs 
step remove subsumed clones clone pair subsumes clone pair iff reason tool report subsumed clone pairs step removes subsumed clone pairs set pairs identified step 
step combine pairs clones larger groups step combines clone pairs clone groups kind transitive closure 
example clone pairs combined clone group 
need forward slicing implementation clone detection tool include forward slicing 
looked clones saw subsets clones programmer identified manually 
particular observed conditionals loops contain code programmer identify part logical operation result backward slice single node 
example situation error handling code fragments unix utility tail 
fragments identical target final goto reasonable candidates extraction check error condition holds perform sequence actions calling error procedure setting global error variable freeing variable tmp 
final goto course part extracted procedure procedure need return boolean value specify goto executed 
fragments identified clones backward slicing backward slice statement inside fails include statements 
forward slicing step pair matched predicates allows tool identify code fragments clones 
fragment fragment tmp nbytes tmp nbytes error errno filename error errno filename errors errors free char tmp free char tmp goto free goto free fig 

error handling code tail motivates forward slicing 
examples forward slicing needed include loops set values related distinct variables head tail pointers linked list 
examples entire loop corresponds single logical operation backward slicing sufficient identify loop clone 
preventing clones cross loops experience gained applying algorithm real programs needed heuristic prevent clones cross loops clones include nodes inside outside loop loop 
illustrate consider code fragments bison 
clones fragment fragment fp fp base lookaheads state rp fp la rp 
fp fp base fp fp fp fp fp fp fp fp fp fig 

clones bison illustrates heuristic avoids crossing loop 
clones illustrate variable renaming statement reordering 
identified tool shown signs 
clones modifies portion bit array base performing bit wise contents array la 
clones identified slicing back statement bit wise 
note initial assignments fp matching statements data dependence predecessors matching nodes clones nodes represent final predicates 
algorithm described section included initial assignments clones 
included clones loop fragment outer loop second fragment predicates loops match 
resulting clones contain statements inside loops assignments outside loops loops 
difficult extract clones separate procedure 
prevent algorithm identifying difficult clones heuristic backward slicing step slicing back nodes inside loops add partial slices predecessor nodes outside loops loop predicates match added partial slices 
indicated initial assignments fp included clones identified tool 
benefits approach stated major benefits slicing approach clone detection ability find non contiguous reordered intertwined clones likelihood clones candidates extraction 
benefits discussed detail arise mainly slicing pdg provides abstraction ignores arbitrary sequencing choices programmer captures important dependences program components 
contrast previous approaches clone detection program text control flow graph tree closely tied irrelevant lexical structure 
finding non contiguous reordered intertwined clones example non contiguous clones identified tool 
running preliminary implementation proposed tool real programs observed non contiguous clones candidates extraction ones occur frequently see section discussion 
fact approach find clones significant advantage previous approaches clone detection 
non contiguous clones kind near duplication 
kind near duplication occurs ordering matching nodes different different clones 
clones shown illustrate 
clone fragment differs fragment ways variables renamed including renaming fp fp vice versa order second statements clones fragments reversed 
renaming reordering affect data control dependences approach finds clones shown second statements fragment marked signs matching second statements fragment marked signs 
program slicing effective finding intertwined clones 
example unix utility sort 
example clone indicated signs clone indicated xx signs 
clones take character pointer advance pointer past blank characters setting temporary variable point non blank character 
final component clone predicate uses temporary 
predicates starting points slices find clones second second line code occurs lines code 
xx blanks xx blanks xx xx 
fig 

intertwined clone pair sort 
finding candidates extraction discussed goal current research design tool help find clones extracted new procedures 
context clone meaningful separate procedure functionally extracted easily changing program semantics 
proposed approach finding clones satisfy criteria discussed 
meaningful clones order code fragment meaningful separate procedure perform single conceptual operation highly cohesive 
means compute small number outputs outputs include values assigned global variables pointer parameters value returned output streams written 
furthermore code extracted relevant computation outputs backward slices statements assign outputs include entire clone 
partial slice obtained backward slicing chance cohesive start single node include nodes relevant node computation 
addition cohesive meaningful procedure complete 
practice examples backward slicing omits relevant statements 
forward slicing address omission reasonably 
extractable clones group clones eliminated procedure extraction possible replace clones calls extracted procedure changing program semantics 
clone groups said 
semantic equivalence general undecidable possible determine group clones extractable 
identified sufficient conditions single non contiguous clone extracted moving statements making contiguous creating new procedure contiguous statements replacing clone call new procedure 
example duplicated code indicated signs meets criteria 
example wanted clone consist just lines indicated signs face problems token buffer grow token buffer obvious way extracting just lines statement grow token buffer moved way lines affecting data control dependences affecting semantics 
backward slicing follows dependence edges pdg avoid creating dependency gap including statement dependence grandparent token buffer omitting dependence parent grow token buffer text syntax tree algorithm detects non contiguous clones 
heuristic described section aspect approach helps avoid identifying clones 
experimental results implemented preliminary version proposed tool find clones programs slicing approach described 
implementation uses codesurfer process source code build pdgs 
codesurfer provides gui display clone groups identified tool highlighting 
implementation step algorithm finding clone pairs done scheme codesurfer provides scheme api pdgs 
steps algorithm eliminating subsumed clone pairs combining clone pairs clone groups done 
run tool unix utilities bison sort tail files graph layout program house ibm 
results experiments subsections 
unix utilities gives sizes unix utilities lines source code number pdg nodes running times steps algorithm 
presents results running tool programs clone size ranges sets numbers reported number clone groups identified contain clones size max mean numbers clones groups median number clones groups size range 
experience indicates clones fewer pdg nodes small candidates extraction ignored tool 
program size running times elapsed time lines pdg find clone eliminate subsumed combine pairs program source nodes pairs scheme clone pairs groups bison hours sec 
sec 
sort min 
sec 
sec 
tail sec 
sec 
sec 
fig 

unix program sizes running times run unix utilities tool number interesting clones non contiguous involve reordering intertwining 
preliminary results validate hypothesis programs include significant amount near duplication potential proposed approach find quality clones 
examples interesting clones identified tool listed 
clone group shown bison 
clones shown bison 
part group 
third clone involved different renaming variables statement ordering clone fragment 
pair intertwined clones shown sort 
group clones bison identical variable names 
clones shown 
clones slicing back statement putc 
code prints contents array check entries line separated commas 
clone size ranges pdg nodes bison clone groups max clones group mean clones group sort clone groups max clones group mean clones group tail clone groups max clones group mean clones group fig 

results running tool fragment fragment high putc putc putc putc fprintf check fprintf fig 

copies clone bison 
limitation tool finds variants ideal clones clones identified human finding exactly ideal clones 
illustrate consider example 
example ideal clones include final predicates clones tool include predicates variants ideal ones 
example fragment tool identifies second pair clones slightly different variant ideal pair second pair includes ideal clones include predicates include expressions occur fifth lines code lines marked xx signs 
evaluate tool performed studies described 
goals studies understand better tool find variants ideal clones extent tool finds multiple variants ideal clones exactly ideal ones uninteresting clones tool finds clones variants ideal clone large clones non contiguous clones intertwined clones clones involve statement reordering variable renaming occur practice 
study examined file lex bison hand ideal clone groups 
ran tool lex identified clone groups 
nineteen groups variants ideal clone groups including variants ideal groups ideal clones missed tool uninteresting 
half uninteresting clone groups clones fewer nodes size smallest ideal clone largest uninteresting clone nodes 
second study examined clone groups identified tool bison size range chose intermediate clone size order test hypothesis uninteresting clones identified tool tend quite small 
groups variants ideal clone groups uninteresting 
studies encountered total ideal clone groups groups showed studies containing total individual clones 
non contiguous 
ideal clone groups involved statement reordering involved variable renaming involved intertwined clones 
ibm code goals experiments ibm code see code contained non contiguous reordered intertwined clones gather quantitative data immediate effects extracting clones 
due limitations codesurfer able process entire ibm program 
selected files ran tool files individually 
larger clones tool examined manually clone groups examined clones best suited extraction identified 
ideal versions clones manually extracted macro definitions placed files instance clone replaced macro call 
macros procedures avoid changing running time program 
total clone groups containing ideal clones extracted 
results study summarized gives file size lines source code number pdg nodes running time tool cases step algorithm finding clone pairs accounted running time number clone groups extracted total number extracted clones reduction size file terms lines code average reduction size functions included extracted clone terms lines code 
lines pdg source nodes running time elapsed clone groups total clones extracted file size av 
fn size extracted reduction reduction file min file min file min file min fig 

ibm file sizes clone extraction data clone groups extracted involved reordering matching statements involved intertwined clones involved renamed variables 
extracted clones non contiguous 
summary experimental results results experiments indicate approach capable finding interesting clones missed approaches 
clones non contiguous involve variable renaming involve statement reordering intertwining 
unix code studies indicate tool clones human consider ideal additionally produce clones human consider uninteresting small ones 
ibm code study provides additional data amount extractable duplicated code may tool extracting code affects file function sizes 
course important question duplicate code extraction affects ease maintenance unfortunately study requires resources available noted provide step direction 
sets studies reveal current implementation finds multiple variants ideal clones just ideal ones 
may problem practice manually examining clone groups reported tool ibm files identifying corresponding ideal clone groups took hours 
includes devising heuristics described subsection reduce number variants reported tool finding clones closer ideal 
running time tool currently slow believe question implementation fundamental problem approach 
indicated table bottleneck finding clone pairs reason step slow implemented scheme scheme interpreter compiler 
factor primary concern get initial implementation running results validate approach trying implement algorithm efficiently possible 
engineering efforts may reduce time significantly 
furthermore improvements eliminate generation undesirable clones variants ideal clones speed tool 
may possible profitable generate clone groups directly generating clone pairs combining groups clone group contains clones currently generate clone pairs 
related long term goal research project tool finds clones automatically extracts user selected group clones procedure 
step direction algorithm semantics preserving procedure extraction 
algorithm applies single clone different techniques needed determine group clones extracted procedure preserving semantics 
related terms goal addressed different aspect procedure extraction discussion identify code extracted subject current 
related falls main categories clone detection converting procedural code object oriented code subgraph isomorphism 
clone detection baker describes approach finds pairs matching parameterized code fragments :10.1.1.21.8559:10.1.1.21.8559
code fragment matches parameterization fragments contiguous sequences source lines global substitution variable names literal values applied fragments fragments identical line line 
comments ignored whitespace lines 
approach text line sensitive lexical aspects presence absence new lines ordering matching lines clone pair 
approach shortcomings 
baker approach find intertwined clones 
directly find non contiguous clones 
postpass group sets matching fragments occur close source guarantee sets belong logically 
kontogiannis describe dynamic programming approach computes reports pair blocks program distance degree similarity blocks 
hypothesis pairs small distance clones caused cut paste activities 
distance pair blocks defined costly sequence insert delete edit steps required block identical line line 
approach find clones sense approach baker approach 
gives similarity measures leaving user go block pairs high reported similarity determine clones 
works block level clone fragments smaller block effectively deal variable renamings non contiguous order matches 
approaches involve metrics reported 
approach computes certain features code blocks uses neural networks find similar blocks features uses function level metrics number lines source number function calls contained number cfg edges find similar functions 
baxter find exact clones finding identical syntax tree subtrees inexact clones finding subtrees identical variable names literal values ignored 
non contiguous order matches 
approach completely ignores variable names asked find inexact matches problem ignoring variable names results ignoring data flows result matches meaningful computations worthy extraction 
debray cfg find clones assembly language programs purpose code compression 
find matching clones occur different basic blocks intertwined clones limited kind non contiguous clones 
converting procedural code object oriented code primary goal described griswold help convert procedural code object oriented code identifying methods 
part process limited form clone detection 
variable interest tool forward slicing uses variable 
slices subsequently decomposed set overlapping paths path stretching root node node variable point slice 
paths obtained slices overlayed visually single diagram operators nodes shown common prefixes drawn 
common prefix set isomorphic paths pdg represents duplicated computation user selects prefixes extracted 
significant differences approach 
report isomorphic paths pdg report isomorphic partial slices 
observation clones interesting worthy extraction simply paths pdg 
diagram large large programs making tedious user clones extract 
forward slicing experience produce meaningful clones combination backward forward slicing example clones tool illustrated ones figures correspond forward slices 
subgraph isomorphism number people studied problem identifying maximal isomorphic subgraphs 
general computationally hard problem approaches typically employ heuristics help especially graphs analyzed representations molecules 
approach identify isomorphic partial slices general isomorphic subgraphs 
reduce computational complexity clones way meaningful computations desirable separate procedures 
described design implementation tool finds duplicated code fragments programs displays programmer 
innovative aspect program dependence graphs program slicing allows tool find non contiguous clones intertwined clones clones involve variable renaming statement reordering 
implementation indicates approach real code include kinds clones tool suited handle previous approaches clone detection able find tool find clones identified human 
currently finds variants ideal clones 
includes developing heuristics cut number variants identified improve running time implementation 
supported part national science foundation ccr ccr ibm center advanced studies 

baker 
finding duplication near duplication large software systems 
proc 
ieee working conf 
reverse engineering pages july 

baker 
parameterized duplication strings algorithms application software maintenance 
siam 
computing oct 

barrow burstall 
subgraph isomorphism matching relational structures maximal cliques 
information processing letters jan 

baxter moura anna bier 
clone detection syntax trees 
int 
conf 
software maintenance pages 

simpson johnson 
algorithm multiple common subgraph problem 

chemical information computer sciences nov dec 

griswold 
supporting restructuring data abstractions manipulation program visualization 
acm trans 
software engineering methodology apr 

davey field frank 
development software clone detector 
int 

applied software technology 

debray evans muth 
compiler techniques code compaction 
acm trans 
programming languages systems mar 

ferrante ottenstein warren 
program dependence graph optimization 
acm trans 
programming languages systems july 

www codesurfer com 

horwitz 
semantics preserving procedure extraction 
proc 
acm symp 
principles programming languages popl pages jan 

kontogiannis merlo bernstein 
pattern matching clone concept detection 
automated software engineering 

merlo 
assessing benefits incorporating function clone detection development process 
int 
conf 
software maintenance pages 

leblanc merlo 
experiment automatic detection function clones software system metrics 
proceedings int 
conf 
software maintenance pages 

mcgregor 
backtrack search algorithms maximal common subgraph problem 
software practice experience 

ottenstein ottenstein 
program dependence graph software development environment 
proc 
acm sigsoft sigplan software engineering symp 
practical software development environments pages 

stevens myers constantine 
structured design 
ibm systems 

wang zhou 
new method maximal common substructure search 

chemical information computer sciences sept oct 

weiser 
program slicing 
ieee trans 
software engineering se july 

