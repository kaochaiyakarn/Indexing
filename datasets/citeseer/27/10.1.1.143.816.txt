execution generated test cases systems code crash cristian dawson engler computer systems laboratory stanford university stanford ca 
presents technique uses code automatically generate test cases run time combination symbolic concrete regular execution 
input values program software component provide standard interface testing framework program testing generating input values explore interesting behavior tested program remains important open problem software testing research 
approach works turning problem head lazily generate program input values program values derived input values needed 
applied technique real code numerous corner case errors ranging simple memory overflows infinite loops subtle issues interpretation language standards 
systems code difficult test comprehensively 
externally systems interfaces tend baroque different possible behaviors tricky combinations inputs 
internally implementations tend heavily nests conditionals difficult enumerate exhaust test cases 
features conspire comprehensive manual testing enormous undertaking enormous empirically systems code test suites consist handful simple cases commonly 
random testing augment manual testing degree 
example fuzz tool automatically generates random inputs find errors applications :10.1.1.32.7648
random testing charm requires manual interfacing generator tested code 
random test generation severe drawbacks 
blind generation values means misses errors triggered narrow ranges inputs 
trivial example function error bit integer argument equal random shortened version simultaneous submission similar independent patrice godefroid 
patrice graciously accepting version invited 
generate billions test cases hits specific case 
second similarly random testing difficulty hitting errors depend different inputs specific wide ranges values 
third ability random testing effectively generate random noise curse 
poor generating input structure result errors require amount correct structure input hit 
clear example random test generation find bugs language parser 
find cases parser handle garbage inputs 
extreme random generation constructing inputs look legal programs errors cases parser 
course random augmented amount guidance intelligently generate inputs comes cost manual intervention 
typical example writing tool take manually written language grammar randomly generate legal illegal programs fed tested program 
having specification model function external behavior generate test cases model try hit interesting combinations 
hybrid approaches require manual labor importantly willingness implementors provide labor 
reluctance systems builders write specifications grammars models code assertions known 
result real systems approaches 
contribution observation code automatically generate potentially highly complex test cases 
high level basic idea simple 
running code manually constructed concrete input run symbolic input initially allowed code observes input observations tell legal values ranges values input 
time code decision observation conceptually fork execution adding branch constraint input satisfies observation 
generate test cases solving constraints concrete values 
call tests execution generated testing egt 
process easily seen example 
consider contrived routine bad abs incorrectly implements absolute value int bad abs int return return return mentioned simple error probably take billions random generated test cases hit 
contrast finding execution generated testing straightforward 
symbolic execution proceed follows 
initial state set symbolic value case observations value int min int max 
constraints int min int max 

running code 

conditional line fork execution setting symbolic constraint true path false path 

return line solve constraints concrete value 
value test input bad abs 

second conditional line fork execution setting constraints true path false path 

second return line solve symbolic constraints 
value second test case 

line solve constraints concrete value 
value third final case 
test code generated values course sketch leaves open questions generate concrete values handle system calls tell correct rest discusses issues detail 
couple ways look approach 
point view implementation code grammar legal inputs accepts acts rejects 
egt automatic method extract grammar concrete sentences accepts rejects implementation hand written specification 
viewpoint seen way turn code inside consuming inputs generator 
half vacuously viewed crude analogue heisenberg effect sense observations perturbing experiments set potential states variety concrete ones observations case perturb set possible inputs set increasingly concrete ones 
precise observation definitively perturbs input 
precise observation equality comparison fixes input specific concrete value 
precise inequality simply disallows single value leaves possibilities 
main contributions 
simple conceptual approach automatically generate test cases running code symbolic inputs 

working prototype egt system 

experimental results showing approach effective real code 
organized follows 
section gives overview method 
section discusses concrete implementation issues 
sections give case studies applying approach systems code 
section discusses related section concludes 
overview section gives overview egt 
section discusses implementation details 
order generate test cases egt runs code symbolic real input 
code reads environment network packets command line options files want return symbolic variable constraints actual value 
program executes uses observes value comparisons add constraints observations 
determine reach program path solve constraints generate input satisfies 
high level egt system core activities 
instrumentation track symbolic constraints 
prototype egt system instruments tested code source source transformation 
instrumentation inserts checks assignment expression branch tested program calls runtime system 
inserts code fork new process decision point associated boolean condition return true false 

constraint solving 
model constraints formulas order logics represented cvcl state art decision procedure solver 
cvcl applications ranging hardware verification program analysis mathematical theorem proving 
cvcl ways 
branch point call determine current set constraints satisfiable 
code path continue 
cvcl sound states solution exists correct 
second code path uses symbolic input cvcl generate concrete values test input 

modeling 
external functions return consume input modeled symbolic variables modeled case value take concrete 
general leave things unmodeled downside testing coverage reduced 
models hard write 
line model unix recv system call section 
addition models speed test generation 
optimization discussed section 
mechanical act instrumenting code pretty easy lot constraint solvers pick black boxes 
main challenge approach run code symbolically 
subsection talks detail 
symbolic execution basic idea approach perform logical arithmetic operations generate constraints perform control flow decisions fork execution go paths 
section sketches symbolically execute code 
ease exposition initially assume variables program symbolic section shows symbolic concrete execution order efficiently process real code 
assignment symbolically assignment expression variable generating constraint example generates constraint arithmetic logical operators similar 
complication may involved previous constraints 
distinguish newly assigned value generated constraints 
example assume assignments 
assignment generate constraint second generate constraint 
point constraints imply obviously nonsensical 
new value assignment prior constraints involving impact 
assignment parts 
generate new location generate constraint statements 
symbolically execute statement follows fork execution conditional true path add constraint conditional expression true true continue false path add constraint false false continue 
example concrete symbolic fork child add constraint true add constraint false loops 
transform loops statements goto handled 
danger iterating symbolic loop variable continue forever forking new execution evaluation loop condition 
usual practical hack iterate fixed number times fixed amount time 
solution perfect 
context solution preferable manual test generation 
function calls 
differences symbolic function call imperative call value call 
control return multiple times caller fork branching occurs 
second constraints placed body propagate caller 
example concrete code alternatively ignoring aliasing equivalently gone existing constraints involving relabeled new fresh name 
int foo int return return generate symbolic execution returns twice caller branch cause forked execution 
true branch want propagate constraint back caller false 
final difference exit point function create temporary symbolic variable return function expression value 
gives symbolic translation bad abs rules 
initial constraints int min int max int symbolic bad abs int ret new symbol holds return expression 
fork child fork execution branch point 
add constraint add constraint ret return final constraints int min int max ret return ret add constraint fork child fork execution add constraint add constraint ret second return final constraints int min int max ret return ret add constraint add constraint ret return final constraints int min int max ret return ret fig 

symbolic translation bad abs 
correctness 
egt testing approaches needs notion bad behavior flag 
approaches 
unsurprisingly check program independent properties segmentation faults storage leaks memory overflows division zero deadlocks uses freed memory second cross checking 
piece code implements important interface implementations 
implementations cross checked running test cases generated implementation implementations flagging differences 
important usage model modifying new version system cross check old version sure change intended 
approach works especially complex interfaces 
third specification example 
writing specifications state exactly code general hard easier take specific test cases tool generates specify right answers just cases 
example bad abs routine egt system generates concrete values 
testing just assert bad abs assert bad abs assert bad abs implementation issues section discusses implementation aspects egt tool 
mixed symbolic concrete execution ignoring memory solver limitations run code entirely symbolically interacts outside concrete world 
example calls external code sends packet real network machine running concrete code prints output read real person 
point inputs external code concrete send data symbolic constraint network packet alternatively model world pull simulation 
practice constraint solvers robust hope care constraint generation blow theoretic reasons practical ones 
symbolic execution expensive speed space 
hybrid approach concrete symbolic execution 
basic approach operation dynamically check values concrete 
operation concretely 
value symbolic operation symbolically logic described section 
cil tool instrument code tested programs :10.1.1.119.4385
sketch conceptually rewrite source constructs language run concrete symbolic values mentioning important practical details 
transformation conceptually changes variable expression instances concrete denoted concrete symbolic denoted symbolic 
concrete concrete holds concrete value symbolic contains special token invalid conversely symbolic symbolic holds symbolic value concrete set invalid practice track symbolic field table lookup takes address variable gives unique name returns associated shadow symbolic variable symbolic symbolic null concrete 
case variable contains concrete value concrete just directly 
examples assume explicit concrete symbolic fields clarity 
assign rule concrete equivalent concrete concrete symbolic invalid concrete concrete symbolic invalid equivalent symbolic symbolic concrete invalid symbolic new symbolic var constraint symbolic symbolic fig 

rewrite rule assignment variable expression type basic operation assignment 
gives basic assignment rule 
right hand variable concrete expression variable just assign concrete value left hand side mark symbolic component invalid 
symbolic explained previous section allocate fresh symbolic variable new constraints generated 
set concrete invalid add constraint symbolic equals symbolic 
roughly simple basic binary arithmetic operators 
gives rewrite rule binary addition binary arithmetic operators similar 
concrete just return expression concrete part just addition symbolic part invalid 
build symbolic constraint return expression symbolic component invalid concrete 
rewrite rule statements straight forward combination purely symbolic rule statements similar type concrete symbolic checking occurs binary relations 
practical issues 
current system happily loop symbolic values parent process child doing looping terminate timeout period expires 
second unix fork system call clone execution symbolic rule plus rule concrete return concrete concrete concrete invalid new symbolic var concrete constraint concrete symbolic concrete constraint symbolic concrete constraint symbolic symbolic return concrete invalid symbolic fig 

rewrite rule variables type branch point 
naively quickly lead exponential number processes executing 
parent process wait child finish continuing execute branch conditional 
means essentially depth search active process chain predecessors sleeping waiting active process complete 
rule deref rule concrete return concrete symbolic invalid new symbolic var concrete constraint symbolic symbolic dereference constraint deref symbolic return concrete invalid symbolic fig 

rewrite rule dereference pointer type main complication occurs dereference symbolic pointer case add symbolic constraint dereferenced value 
dereference deals storage locations intuitive rewrite rules 
gives rewrite rule dereferencing concrete dereference works expected 
dereference concrete pointer points symbolic value works expected just assignment rvalue dereferenced 
symbolic dereference get points generate funny constraint says result doing equals symbolic dereference implementation level cvcl currently handle symbolic dereferences 
short term really right thing pointer dereference involves symbolic value symbolic offset concrete pointer symbolic index symbolic array 
cases generate concrete value may illegal 
happy result limitation combined way implementation uses lookup table map variables shadow symbolic values handling address trivial 
example assignment simply assignment matter symbolic concrete 
lookup return symbolic variable lookup 
constraints implicitly shared 
alternatively symbolic point directly concrete variable dereference want help 
function calls rewritten similarly previous section 
implementation detail isolate effects constraint solver run child unix process kill terminate problems runs terms memory exceptions isolated 
creating model speed code program testing level attention 
example benchmarks intensive string library don want generate test cases exercise code string routines 
precisely imagine program uses strcmp compare symbolic strings 
implementations strcmp traverse strings compare character string corresponding character second string return value characters differ string reached 
routine return caller approximately times time different set constraints 
applications routine strcmp black box return values strings equal string lexicographically smaller second 
returning value multiple times difference caller black box 
instrumenting routines string library provide models 
model strcmp return times possible return value 
fork model add series constraints outcome branch symbolically true example branch returns model add constraints setting strings equal 
course certain branches may invalid string different lengths strcmp return 
case corresponding branch simply terminated 
implemented models routines string library generating tests benchmarks 
adding specifications main benefits 
hand removes useless test cases generated test suites removing tests improve code coverage string routines hand significantly improves performance 
benchmark evaluate section test suites generated approximately times faster 
discussion currently lazy evaluation constraints deferring solving possible moment 
eager evaluation soon symbolic value concrete 
eliminates need execute code symbolically 
committing concrete value immediately precludes ability change necessary execute paths subsequent branch variable value concrete value satisfy true false branch 
hybrid approach best concrete values immediately full symbolic execution code paths misses 
micro case study mutt utf routine micro benchmark evaluate egt applied routine popular mutt email client convert strings utf utf format 
reported routine mutt versions version buffer overflow vulnerability may allow malicious imap server execute arbitrary commands client machine 
selected part examples reliability carefully hand crafted input exploit :10.1.1.138.4560
extracted utf utf conversion routine mutt version ran code tool generated test cases different lengths utf input string 
running generated tests immediately error 
took code suggested fix increasing memory allocation ratio 
applied change code reran egt generated test cases immediately flagged code overflow 
fact adjusted ratio incorrect highlights need lack automated comprehensive testing 
table presents results 
input size report size generated test suite time took generate cumulative statement coverage achieved including test suite largest output size generated input size 
results results generated intel pentium mobile cpu ghz mb ram 
input generation test suite statement largest size time size coverage output table 
test suites generated utf utf case study printf section applies egt different printf implementations 
printf routine example real systems code highly complex tricky interface necessitates implementation corner cases 
main source complexity output format string takes argument 
semantics single string absorb bulk lines ansi standard devotes defining printf semantics define exceptionally ugly startling programming language manages include iteration 
printf best case scenario egt 
standard code complexity create opportunities bugs 
inputs test complexity readily derived printf parsing code fairly simple easily solved equality checks 
importance printf means different implementations finesse need specification cross checking 
checked printf implementations intentionally implemented subset ansi standard 
instructional operating systems printf implementation intentionally floating point 
implementation stern test egt developer author widely read book intimate knowledge standard 

printf implements version printf terms fprintf 

reduced functionality printf implementation embedded devices 
www opensource apple com www org georges embedded index html format embedded length printf printf printf table 
test suites generated printf row size gives number generated tests second row time required 
embedded printf printf printf mismatches self tests mismatches tests statement coverage lines lines lines table 
mismatches printf implementations 
egt generate test suites making format string single symbolic argument printf 
set size symbolic string fixed length generated test cases resultant constraints 
describe measurements discuss bugs differences 
measurements 
generated test cases format strings length 
table shows test suite size generated format length time took generate test suite 
allowed maximum seconds cvcl query queries killed spending seconds 
format lengths long terminated test generation approximately hours 
representative fraction egt generated format strings length lle 

jf lf hf 
llc note look fairly bizarre synthesized actual comparisons code legal level expected code 
results 
generating test suites checked output printf ways 
took tests implementation generated output tests output glibc printf 
implementations attempts implement subset ansi standard glibc intends fully implement 
difference potential bug 
egt discovered lots differences automatically embedded printf printf surprising minimal parsing just calls fprintf calls glibc printf 
access implementor focused discuss 
second took tests generated implementations cross checked output 
intentionally implement different subsets standard expect different behavior 
experiment tests egt find differences automatically 
embedded 
note experiments printf routines print error message abort receive format string handle 
intend handle subset standard correct behavior report mismatch case 
contrast embedded printf fails silently receives format string handle 
means differentiate incorrect output handled case unhandled case report cases mismatches 
table shows statement coverage achieved test suites printf achieve coverage 
lines covered unreachable 
example printf reached statement reached long treats possible format strings 
similarly embedded printf don reach lines redirect output string buffer stdout lines sprintf printf 
lines reached system treats format string symbolic rest arguments concrete 
printf implementations non standard implementations determining character digit system currently handle correctly 
number lines reported table real lines code lines instruction 
reported mismatches developer ben pfaff 
got confirmation fixes bugs 
incorrect grouping integers groups thousands 

thought fixed 
quite obviously incorrect case ben pfaff unsolicited exclamation pm 
code specifier says comma separate integer digits groups 
exact test case correct printf bug fixed developer tree forgotten push released version testing 
incorrect handling space plus flags 
case obscure thought ben pfaff unsolicited exclamation pm 
character followed space flag means blank left positive number empty string produced signed conversion man printf 
pinto incorrectly leaves blank unsigned conversion 
similar bug plus flag 
bug previous error occurred routine format integer deals integers 
complexity specification small helper function representative minutia laden constraints placed systems interfaces internals 
give cursory description remaining errors 
incorrect alignment strings 
incorrectly handles width fields strings feature works correctly integers got better testing 
incorrect handling flags 
flag unsigned type corresponding 
detail standard developer 
similar bug flag specifies signed type corresponding size 
support wide strings chars 
support wide string wide chars fails silently case error message 
undefined behavior 
bugs caused underspecified features 
example case printf hi output undefined represented short 
case study section applies technique web server designed transferring mp files 
version uninstrumented contains lines code instrumented 
version contains security vulnerability allows attackers execute arbitrary commands host machine 
technique automatically generated test cases security hole 
addition memory overflows infinite loop caused bad network input dos attack 
discuss set test generation coverage results direct method effectiveness bugs 
setting typical web server core main loop listens connections accept reads packet connection recv operations packet value 
reasonably rich interaction operating system 
cut network packet returned recv symbolic packet size concrete 
replacing calls recv calls model recv model just returned symbolic array bytes specific length model generate failures msg len fixed recv model int char buf size len int flags bytes symbolic buf msg len return msg len reads message length msg len telling system address range buf buf msg len treated symbolic 
generated test cases byte packet bytes forth changing msg len desired length 
web server finishes processing message inserted call system emit concrete values associated message constraints 
emit test file run web server 
subtlety web server processes single message exit 
recall conditional symbolic value roughly fork execution 
web server create different children branch point 
processing single message generate test messages 
context server message little explicitly get test cases doing additional ones 
stateful server course message 
entirely symbolic input cause code crash test generation 
handle segmentation faults installing handler sigsegv signal invoked generate concrete test case current constraints exit process 
intensive standard string library string library described section 
tests library improves performance roughly fold 
test generation measurements egt testing generate tests packets size 
table gives number tests generated size time took user time number times cvcl constraint solver failed generate concrete test set constraints seconds 
naive implementation test generation time non trivial 
packets size stopped hours running laptop wanted write 
note sense high test generation cost important 
test generation happens infrequently 
frequent case running generated tests takes minute 
second test generation automatic 
time manually generate tests get similar amounts types path coverage packet unfinished execution test suite size queries time size table 
test suites generated 
stopped test generation size roughly hours 
enormous 
manual generation easily misses cases silently 
far know test suite 
clearly egt alternative better 
compare coverage egt random testing 
statement coverage generated gcc 
preferred insightful metric line coverage able find adequate tools 
generated random tests modifying recv routine request messages filled random data size 
packet size bytes long generate random tests measured cumulative statement coverage achieved tests 
recorded statement coverage opposed egt 
roughly lines code hit egt certainly dramatic number distinct paths hits 
importantly lines appear reach random testing matter random tests 
addition note takes hours half execute random test cases takes minute execute egt test cases 
manually examined code see egt missed statements 
lines code hit consisted debugging logging code disabled testing error reporting code printing error message aborting call malloc fails code processing command line arguments wasn reached didn treat arguments symbolic inputs 
large portion code reached request messages fabricate refer valid files disk fail capture timing constraints 
example category get request received web server extracts file name request packet checks file exists fopen 
file exist sends corresponding error message client 
file valid file name passed various procedures processing 
don files server files fabricated system invalid anyway code process files file names invoked 
right way solve problem provide models functions fopen fread stat 
models find interesting errors subsection describes 
errors identified errors code parses request messages received 
caused series incorrect assumptions request processed 
describe illustrative bugs 
buf holds network message char get op char buf char op int op char malloc null printf memory exit note buf terminated buf null strlen buf op buf buf op buf op op null return op fig 

buffer overflow bug occurs received message held buf characters space 
gives bug 
assumes part request message held buf holds type client request get post separated rest message space 
request received copies action type auxiliary buffer copying characters original request space encountered 
unfortunately assumes request legal potentially malicious allocates bytes buffer 
receives invalid request contain space characters buffer overflows usually terminates segmentation fault 
commented attempt sort copy safe routine pre specified length 
routine involved second bug 
part checking return null input null size incoming message characters 
caller routine check null return passes buffer strcmp causing remote triggered segmentation fault 
third final bug interesting certain rare request messages sixth character period slash followed zero periods slashes immediately followed zero goes infinite loop 
egt system automatically generates unusual message required hit bug 
problematic code shown cp cp cp cp cp cp cp related best knowledge related test generation synthesis program inputs reach program point previous approach effectively generates comprehensive tests automatically real program 
certainly exists tool handle systems code 
compare egt past test generation bug finding methods 
static test input generation 
long stream research attempts static techniques generate inputs cause execution reach specific program point path 
papers attack problem boyer proposes symbolic execution follow path context system select intended assist debugging programs written subset lisp 
usage model programmer manually mark decision point path wanted executed system incrementally attempt satisfy predicate 
researchers tended static analysis extract constraints try solve various methods 
example statically extracted constraints tried solve naturally constraint solver 
ball statically extracted predicates constraints predicate abstraction model checker try solve predicates concrete values :10.1.1.134.652
similar static efforts 
general static techniques vastly weaker dynamic gathering type information needed generate real test cases 
deal limited amounts fairly straightforward code interact heap complex expressions run intractable problems fairly promptly 
dynamic techniques test input generation 
test generation relies non trivial manually written specification kind 
specification guide generation testing values ignoring details implementation 
interesting examples approach korat takes specification data structure linked list binary tree exhaustively generates non isomorphic data structures size intention testing program :10.1.1.122.9788
optimizations prune data structure possibilities ignoring data structure field read program 
egt differs attempting avoid manual specification targeting broader class tested code 
past automatic input generation techniques appear focus primarily generating input reach path typically motivated somewhat contrived problem answering programmer queries control reach statement 
ferguson korel iteratively generate tests cases goal hitting specified statement 
start initial random guess iteratively refine guess discover path hit desired statement 
gupta combination static analysis generated test cases hit specified path :10.1.1.50.8112
define loss function consisting predicate residuals roughly measures branch conditions path satisfied 
generating series test cases numerical solver find test case values trigger path 
gupta technique combines symbolic reasoning dynamic execution mitigating problems inherit approach 
unfortunately scalability technique called question small systems require method take unbounded amount time generate test case 
egt differs focusing problem comprehensively generating tests paths controlled input 
prior appears limited regard 
software model checking 
model checkers previously find errors design implementation software systems 
approaches tend require significant manual effort build testing harnesses 
degree approaches complementary tests approach generates drive model checked code 
generic bug finding 
bug finding 
roughly speaking dynamic checking runs code limited just executed paths effectively check deeper properties implied code 
example code infinite loop bad inputs formatting command obeyed correctly 
errors difficult get statically 
view static analysis complementary egt testing lightweight reason apply egt 
proposed simple method automatically generating test cases executing code symbolic inputs called execution generated testing 
build prototype egt system applied real code 
numerous corner case errors ranging simple memory overflows infinite loops subtle issues interpretation language standards 
results experience dealing building systems suggests egt systems code complex requirements tangled logic 
authors ted help writing related david dill writing comments 
authors especially ben pfaff extensive help code results section 
research supported nsf itr ccr nsf career award cns stanford graduate fellowship 

engler execution generated test cases systems code crash 
technical report cstr stanford university 
godefroid klarlund sen dart directed automated random testing 
proceedings conference programming language design implementation pldi chicago il usa acm press 
miller empirical study reliability unix utilities 
communications association computing machinery 
miller koski lee murthy natarajan fuzz revisited re examination reliability unix utilities services 
technical report university wisconsin madison 
barrett cvc lite new implementation cooperating valid ity checker 
alur peled eds cav 
lecture notes computer science springer 
ganesh dill decision procedure fixed width bit vectors 
unpublished manuscript 
necula rahul weimer cil intermediate language tools analysis transformation programs 
international conference compiler construction 

mutt exploit 
www com fp fu 
html 
rinard roy leu william enhancing server availability security failure oblivious computing 
symposium operating systems design implementation 

webpage 
sourceforge net 
associates exploit 
www ca com id 
exploit 
com product 
boyer levitt select formal system testing debugging programs symbolic execution 
acm sigplan notices 
botella automatic test data generation constraint solving techniques 
issta proceedings acm sigsoft international symposium software testing analysis acm press 
ball theory predicate complete test coverage generation 
symp 
formal methods components objects springer press 
ball majumdar millstein rajamani automatic predicate abstraction programs 
pldi proceedings acm sigplan conference programming language design implementation acm press 
boyapati khurshid marinov korat automated testing java predicates 
proceedings international symposium software testing analysis issta 

ferguson korel chaining approach software test data generation 
acm trans 
softw 
eng 
methodol 

gupta mathur soffa automated test data generation iterative relaxation method 
sigsoft fse proceedings th acm sigsoft international symposium foundations software engineering acm press 
kamkar analysis constraint solver una test data generation 
esec fse proceedings th european software engineering conference held jointly th acm sigsoft international symposium foundations software engineering acm press 
holzmann model checker spin 
software engineering 
godefroid model checking programming languages verisoft 
proceedings th acm symposium principles programming languages 

holzmann code models 
proc 
nd int 
conf 
applications concurrency system design newcastle tyne 

brat havelund park visser model checking programs 
ieee international conference automated software engineering ase 

corbett dwyer hatcliff laubach pasareanu robby zheng bandera extracting finite state models java source code 
icse 

ball rajamani automatically validating temporal safety properties interfaces 
spin workshop model checking software 

das lerner path sensitive program verification polynomial time 
proceedings acm sigplan conference programming language design implementation berlin germany 
swat software analysis toolset 
com 
bush pincus static analyzer finding dynamic programming errors 
software practice experience 
