advanced polymorphic worms evading ids blending normal traffic oleg david wenke lee ok wenke cc gatech edu college computing georgia institute technology atlanta ga 
normal traffic provide worms source information 
explore concept polymorphic worms mutate normal traffic 
assume worm penetrated system trying hide presence propagation attempts ids 
focus stealthy worms reliably detected increases traffic low propagation factor 
give example simple polymorphic worm 
worms evade signature ids necessarily anomaly ids 
show feasible advanced polymorphic worm gather normal traffic profile evade anomaly ids 
tested advanced worm implementation anomaly ids approaches netad service specific ids 
ids approaches able detect worm reliably 
mutated worm evade detection methods payload execution 
goal advance science ids analyzing techniques polymorphic worms hide 
showing polymorphic worms practical threat hope stimulate research improve existing ids 
shown early gro worms complex 
worms attempt hide presence intrusion detection systems ids matter time stealthy targeted worms appear 
worms employ lower propagation factor ar try hide possible 
objectives worms different worms seen far 
example stealthy worms may longer focus infecting systems internet possible 
worms target specific networks organizations federal government military disrupt services gather sensitive information attack nations critical computer infrastructures 
viruses worms designed target specific ids approaches implementations weaknesses 
focus stealthy worms 
assume worm penetrated target system attack vector evade local ids propagate 
consider worms observe traffic local host local network knowledge hide propagation 
contributions twofold 
show polymorphic blending practical attack evade ids 
second examine existing ids approaches explain vulnerable 
goal advance science ids technology prepare security professionals generation worm 
remainder structured follows 
section provides important definitions analyzes structure polymorphic worm 
section summarize known techniques polymorphism 
section describes implementation polymorphic worm 
section show worm defeat ids blending normal traffic 
section evaluate mutated attack ids approaches 
section contains overview related 
polymorphic worms definitions structure polymorphic worm pw worm changes appearance instance 
result byte sequences different worm instances may look completely different 
actual code polymorphic worm typically stays 
change appearance pw methods similar polymorphic viruses bon 
common method take original code worm encrypt random key generate short key 
polymorphic pd key change instance 
code worm 
operation typically performed polymorphic engine pe included part worm code 
sophisticated pw mutate exploits uses 
possible elements pw include attack vectors penetrate systems 
sophisticated worms vectors attack 
set includes exploits stack heap types overflows backdoors left worms password sniffing man middle attacks forth 
invariants attack vectors 
pe uses attack invariants decide parts attack volatile changed preventing attack 
example invariants offsets exploit placing return addresses handlers windows structured exception handling exploitation 
discuss invariants section 
polymorphic engine pe 
pe generate mutated versions pd attacks 
briefly describe specific techniques pe code mutation 
worm body code 
simple case worm body simply contain code selects attack vector generates set destinations mutates attack pe sends mutated instances 
consider intelligent code attempts hide worm presence ids 
exploit encrypted pe worm code return address frame pointer encrypted pe worm code pd nop sled advanced polymorphic worms bottom stack higher addresses overflowed buffer top stack lower addresses fig 

gives example stack exploit containing polymorphic worm example common polymorphic worm structure 
worm uses buffer overflow attack vector 
pd worm typically short 
basic pd describe averages bytes intel bit architecture ia 
basic evasion exploit mutation hackers ids evading code 
open source toolkits know allow mutate exploits ktw sed 
toolkits generate mutated shellcode basic restrictions zeroes lowercase characters bypass toupper restricted exploits 
attempts adjust frequencies bytes exploit adding called bytes shellcode compensate 
note mutated exploits created toolkits detected fairly easily 
describe basic detection techniques section 
detection techniques overview mentioned code worm exploit different instance 
vulnerability unknown signature ids ids defeated 
signature ids examine bytes polymorphic encrypted sled 
common way detect polymorphic code detecting sled repeating return address 
classic ia nop sled snort able detect reliably assuming sled long 
advanced technique ktw byte instructions nops 
ia total opcodes byte nops complicates sled signature 
low entropy ids detect 
detected payload execution method tc 
multi byte implemented advantage fact stack variables ia aligned cases means return address mod true worm writer merely needs guess address increments assumption alignment target platform control transfer correctly byte nop sled instructions respectively 
complicate detection worm choose sled 
case know specifically code exploit resides memory 
may possible 
common alternative technique windows find instruction jmp esp accessible dlls change version windows 
address instruction return address stack 
address popped esp points byte return address 
exploit contains code immediately overflowed return address return address points esp instruction gain control need guess address stack overwritten ret call pop eax sub eax code length variables jmp eax examples demonstrate worm writers experimenting basic obfuscation engines creating toolkits common features exploit code 
hacking technology focuses signature evasion 
toolkits provide byte frequency padding capabilities 
ids technology improves expect creative evasion techniques arise 
overview polymorphism techniques ids technology keep pace worm writers need take stock polymorphic techniques currently 
section outlines existing state art 
basic techniques pd polymorphic syntactical polymorphism include interleaving meaningful instructions instructions 
example eax esi edi meaningful part pd instruction uses ebx instruction 
consider instructions push eax pop eax xor eax ebx xor eax ebx idempotent 
different instructions achieve result 
instance mov eax infinite number equivalent instruction sequences including mov eax add eax mov eax mov ebx add eax ebx push pop eax 
shuffling register set version pd advanced polymorphic worms decrypting parts pd executed 
layers russian doll architecture nested inside start short simple minimize effective length executable 
complex pd may independent instruction blocks randomly mixed instructions blocks diluted nops reg reg sti cli dec note byte codes pd version different behavior pd remains 
typically modify memory area corresponds pe worm transfer control 
pd techniques tracing code harder isolating independent parts pd code executing parallel random order timing parameters encryption decryption excessive delays caused running pd debugger result decrypting code incorrectly storing decryption keys computer serve system parameters keys interrupt handler code hash changed debugger forth 
implementing polymorphic worm previous sections covered basic terminology outlined existing polymorphic technologies 
technologies design new ids evasive worm 
engage exercise demonstrate existing polymorphic technologies worm evade ids 
describe design worm 
choosing structure worm options worm code part exploit send worm body separately sending small bootstrap code pd exploit 
option reasonable exploits need send large amounts data overflow buffer anyway 
example windows messenger exploit ms requires data iis webdav iii exploit ca requires data 
downside approach exploits requiring lot data attractive attack vectors 
second option known staged loading advantage works smaller buffers stack overflows types overflows particularly possible fit worm code overflowed buffer upper stack addresses 
option require worm body transmitted 
additional advantage ports port initial exploit 
example covert channels icmp echo replies transmit encrypted worm body 
example shown may possible send worm body ack packets syn packets dropped firewall 
simplicity example option 
larger packet size gives ids advantage making evasion difficult 
worm exploits target system uses mutated exploit containing worm code 
worm body decrypted executed pd attack vector windows media services exploit ms remainder known exploit windows media services reported attack vector 
relatively simple stack overflow exploit targets port 
flaw exploits problem logging extension handling incoming client requests 
schematic example request causes overflow post scripts dll cr lf accept cr lf content type text plain cr lf content length cr lf cr lf 
long string 
cr lf polymorphic noted section polymorphic worm contain pd describe simple fairly generic pd main advantage size 
give example complex pd matching worm pe support blending 
objective simple pd decrypt worm body transfer control worm loader 
worm loader case writes worm disk executes 
key features pd follows 
chose registers random symmetric transformations pe pd addition subtraction add sub rotation ror rol exclusive 
select counter registers set eax ebx ecx edx address registers set esi edi cases able simple additions base byte opcode generate transformations different registers 
illustrate xor transformation specific register picked adding index base byte eax registers 
bit operations pd encrypted worm body aligned 
example pd skeleton generate pds appendix 
example just outline variable parts registers replaced labels 
note pd dynamic register setup done equivalent registers mov push pop 
codes number transformations change completely 
length pd keys vary 
worm loader pd decryption completes control transferred worm loader 
objective save contents decrypted worm pe temporary file execute 
uses windows api functions 
advanced polymorphic worms worm uses windows exploit needs take account specifics windows buffer overflow exploitation 
uses structured exception handling approach locate base kernel dll export directory table hashes locate 
note worm innovate finding api functions memory 
techniques described implemented lsd 
subsequent api calls loader offsets obtained functions hashes symbol names function 
mechanisms known covered numerous articles discuss 
simple worm pe implemented sample worm pe executable visual net 
pe simple engine 
consider threat posed complex pe 
simple worm pe details follows 
worm single threaded uses non blocking sockets 
new infection worm constructs copy exploit memory copies loader static buffer exploit generates structure containing randomly picked registers key transformations pd copies content file memory encrypts transformations key 
generates matching pd inserts buffer 
generates ip random attempts send exploit 
current version contain code detect multiple infections possible 
adding behavior trivial worm merely needs check presence exploit file disk 
example kept short clarity show proof concept pe existing toolkits technologies 
blending normal traffic previous sections illustrated basics polymorphic worms created existing toolkits 
anomaly ids detect worm part 
section consider problem posed polymorphic worms blend background traffic 
hacking toolkits offer primitive blending capabilities submit emerging trend worm writers 
ids technologies need prepared 
analysis anticipates approach worm writers may take 
learning normal profile assume worm infected network task spread alerting ids 
worm may attempt disguise polymorphic payload normal traffic 
order blend worm needs learn normal traffic looks 
precisely worm needs know statistical properties types traffic attack vectors 
example worm employs postfix windows media service exploits propagate needs know outgoing traffic destined ports size content packets forth 
worm may need witness study traffic sent local network remote target 
anomaly ids techniques screen outgoing traffic computational resources screen incoming packets 
blending worm may need match traffic direction 
ids filters outgoing traffic normal traffic destined remote target created worm accepted ids anyway 
beneficial worm focus statistical properties anomaly ids uses calculating anomaly score 
include maximum average size rate normal packets byte frequency distributions gram analysis ranges values different offsets timing information 
presume worm compromised local host knows statistics interest profiles obtained sniffing local network interface examining local tcp ip implementation buffers 
cases may possible gather normal data switched environment non root user highly worm able systems 
exploits provide immediate root access privilege level run vulnerable programs 
second worm privileges locally 
third especially windows users running entire systems superuser administrator privileges uncommon 
assume worm knows ids running remote target network knows general statistical features checks 
strong assumption information inferred products trade journals worm may simply ability address different statistical ids measures 
normal profile example gathered normal profile outgoing packets port real traffic data campus laboratory 
manually filtered traffic sure attack free 
normal profile constructed features existing anomaly detection approaches described section 
statistical properties described show worm blend average byte frequencies byte variances packet sizes 
example presume worm uses single attack vector exploit windows media services 
gather statistics outgoing post requests port 
exploit invariants constraints worm blend normal traffic 
exploits certain parts properties order exploit 
call parts exploit invariants 
instance case ms windows messenger exploit ms known message consist advanced polymorphic worms messenger protocol header body 
length message bytes exploit character overflow relies replaced characters 
example exploit 
requires packets exchanged exploitable state reached 
ability worm blend limited exploits uses 
exploits considered restrictive worm purposes 
illustrate possible exploit invariant minimal size packet 
consider case worm generate exploit udp packets service average size outgoing packet bytes 
situation probably little importance close content packets normal size trigger immediate anomaly 
appears sophisticated heap integer overflows including impossible path exploits restrictive 
plan discuss invariants usability exploits separate 
base exploit revisited illustrate polymorphic worm blend exploits uses avoid detection modify windows media services remote command execution exploit described previous section 
exploit code implementation fir 
code sends approximately data 
divided mtu ethernet interface test machine number data packets sent tcp ip stack going tcp packets 
recall invariant part exploit includes post request line 
headers content type content length mx stats exploit variations position fixed 
rest exploit including headers values changed worm 
blending normal traffic illustrate viability idea threat posed attack implemented simple traffic blender 
able elude existing anomaly ids blended packets generated implementation described section 
decline release code traffic blender describe general design assumptions 
input blender going include normal traffic profile binary blended 
objective blender input ensure output close statistically normal profile 
definition closeness depends specific anomaly score formula ids 
formulas ids analyzed derived rules operation 
output consist bytes non zero frequency normal traffic 

frequency bytes output equal close bytes frequencies normal traffic 
output bytes allowed offset possible 
example normal profile may include allowed ranges offset narrowing effective range term effective range refer number values spectrum frequencies threshold typically zero 
example effective range normal profile gathered meaning bytes variance 
remaining possible bytes appear normal traffic appear extremely rarely 
effective range input binary contrast 
words exploit distinct bytes 
comply rule narrow effective range input binary 
mapping bytes effective range binary bytes effective range normal profile 
ranges differ multi byte mappings necessary 
mapping exploit bytes ranges seen target spectrum simple 
example minimal spanning tree kruskal algorithm match byte frequencies similar exploit target spectrum 
non optimal approaches possible 
requirement blender matches exploit target byte frequencies complete quickly spanning tree algorithm 
additionally blending program space efficient risk host anomaly generate output large mutated packets 
example actual multi byte mapping ch frequent character control character followed selector bytes ch selector bytes 
frequency distribution blender output normal traffic shown 
polymorphic advanced pd reverses done pe 
objectives advanced pd set mappings decode worm pe back original binary format 
assembly source code advanced pd supporting mappings appendix 
format mappings table quite simple 
byte codes reserved control character described earlier 
control character followed selector byte 
decoded byte index mapping 
example sequence bytes representing mapping table 
control character translates mappings 
byte frequency bytes sorted frequency advanced polymorphic worms blended attack normal traffic fig 

comparison frequency distributions blended packet normal port traffic 
interim version blended packet 
see worm narrows range values uses match normal traffic 
frequencies worm bytes different normal 
step shown worm padding match frequencies normal traffic 
note mappings blend worm pe pd blended 
characters normal traffic extremely rare 
second built content little effect frequency distribution packet 
time remain executable decode worm pe 
solve problem blending worm executable ascii shellcode algorithm 
algorithm encodes sequence binary data ascii characters run ascii sequence decode original sequence execute 
pre post ascii executable form pd appears appendix 
encoding bytes fall normal range zeroes 
size ascii encoded pd bytes 
sequence forms binary code pd stack pop add sub operations valid character ranges encoded string careful stack contents stack going contain ascii pd decoded pd encoded decoded pe worm 
ascii pd going executed transfer control decoded pd reconstructed ascii pd turn decode worm pe 
putting blended exploit give example mutated exploit 
worm constructs mutated exploit copying invariants base exploit described earlier copying ascii shellcode copying encoded pd worm adding padding bytes fragments legitimate packets mutated packets look normal visually statistically 
final structure exploit shown 
initial fragment mutated exploit appears appendix 
note ascii executable decoder preceded followed fragments actual normal traffic padding disguise 
ascii executable decoder reconstructs pd stack bytes available padding 
packet mss packet mss request header post variable part filled fragments legitimate packets bytes compensate frequency differences executable ascii decoder variable part filled decoded pd pushing values stack blended pe worm code chunk variable part filled fragments legitimate packets bytes compensate frequency differences blended pe worm code chunk variable part filled fragments legitimate packets bytes compensate frequency differences blended pe worm code chunk fig 

shows structure blended exploit buffer 
variable parts depend exploit 
buffer may split packets network stack transmitted 
maximum segment size mss system packet including headers larger mss bytes 
exploit optimized anomaly score statistics ids appeared normal 
factors contributed result 
exploit contains characters frequently appear normal traffic 
second frequencies characters closely match respective frequencies normal traffic 
third strings variable parts mutated attack portions normal packets correct offsets 
provide details ids explanation section 
remarks splitting input normal profiles may prudent blender split input chunks calculate frequencies chunk independently 
result smaller mapping tables potentially better mappings normal traffic especially different chunks packets different sizes 
byte frequency bytes sorted frequency advanced polymorphic worms blended attack padded normal traffic fig 

comparison frequency distributions blended packet padding normal port traffic 
anomaly ids typically calculate statistics packet basis worm chunk take part packet pad rest better fit normal profile 
tcp streams may possible change default maximum segment size mss size force different normal packet clusters size anomaly ids may restrictive normal profiles 
conclude section presenting comparison frequency distributions final version mutated exploit normal traffic see 
experimental evaluation mutated attack ids evaluate effectiveness blending pe worms tested anomaly ids approaches mah distance anomaly ids ws service specific anomaly ids ktk payload execution ape tc evaluated approaches practice implementations received authors 
examined service specific anomaly ids approach theory obtain implementation 
anomaly ids tested polymorphic blending attacks 
details tests 
netad anomaly score netad eq 

attribute index offset byte packet time anomaly number training packets anomaly training number allowed values field frequency values appear 
approach polymorphic blending reasons 
blended packets legitimate values attack invariants 
values gathered observing traffic 
second frequency value occurs normal traffic measured easily taken account blending purposes attributes interest probably high fact occur frequently serves worms purposes take time gather statistics 
evaluation 
original netad approach considered bytes packet including headers 
result non mutated attack described earlier easily evade ids 
fair consideration modified original netad implementation consider packets full bytes tcp fragment mtu network interface 
remove restrictions including maximum processed packet sizes allowed destination addresses 
original implementation darpa ids test set allowed rfc private addresses 
optimize netad performance effectiveness trained outgoing traffic 
goal set ids best possible chances detecting mutated exploit 
performed manual semi automatic filtering input data set live packet captures network snort remove known attacks 
packet set data packet request netad considers initial data packets tcp connections 
training injected mutated packet netad checked eval function implementation calculate anomaly scores 
netad lists allowed byte values offsets 
testing consider factor allowed values 
anomaly score packet range normal packets 
anomaly score lower positions allowed bytes considered mappings 
anomaly score shown eq 

formula frequency tested packet average frequency normal traffic variance value normal traffic smoothing factor prevent division zero 
approach polymorphic blending shown frequencies values attack packet closely match normal traffic depicted 
advanced polymorphic worms evaluation 
network traces taken georgia tech college computing backbone train tool 
network load backbone averages mb trace files captured days monitoring 
replayed traces train 
created working model traffic tested vulnerability scanner cgi web servers cir 
send attack packets target 
expected caught numerous anomalies traffic 
verified working properly configured working model normal traffic issue alerts 
generated sent version worm blended fictitious normal profile 
generated alert expected 
generated blended version worm requests network 
sent worm victim host monitored 
time worm blended pattern matched model ids issue alert 
concluded 
host specific profiles effective stopping attacks probes 

worm trained packets network monitored worm evade ids 
service specific ids anomaly score service specific ids shown eq 

approach polymorphic blending type packet may legitimate case payload mutated fit normal traffic profile adjusting close explained 
attack invariants mandates sending large packet packets occur normally worm simply employ different attack 
request type component anomaly score defined probability request type component may mark mutated attack anomalous particular exploit invariant requires worm specific request type anomalous network 
base exploit mutated attack sends post request 
legitimate request commonly occurs network anomalous component anomaly score 
request length formula component mean anomaly request standard deviation requests training 
recall exploit invariants example size exploit 
size exploit overflow buffer target 
attack evade component anomaly score 
reasons post requests network involve transmitting data fairly common frequent shorter requests relative rate large posts approximately rate requests bytes 
probably untrue networks 
holds stealthy worms choose attacks normal traffic 
obviously suitable traffic local network mutation particular attack vector worm simply different attack vector 
payload distribution formula component value observed expected value 
shown earlier worm may able mutate attacks collectively close normal traffic mutated attack cause anomaly 
payload execution length packet method toth tc detects anomalies finding longest maximum executable length mel 
mel calculated possible offset packet maximum packet chosen 
publicly available implementation method part apache mod detect 
ran ei function constructing trie structure approach calculate mel mutated exploit 
ran implementation blended attack detected mel size 
meant attack marked anomalous authors average mel traffic lower tc 
able evade approach making simple change mutated attack 
diluted executable ascii decoder cause high mel randomly injecting special characters affect execution decoder decoder look small instruction sequences instruction sequence big mel 
inserted characters ch correspond esp pop esp sequence 
characters legitimate characters appear normal traffic 
result mel attack dropped normal value traffic 
diluted executable ascii decoder appears appendix 
note size executable ascii decoder previous section increased bytes 
generally speaking impact added detail improvements ids methods translates worms blend longer blended packets 
bigger worms turn detected 
result add code hide better adds complexity eventually number people write worms low significantly reduce number worms likelihood appearing 
related number documented studies investigated computer worms ways propagate 
staniford study different types worms cause damage internet spw 
zou advanced polymorphic worms analyzed propagation code red worm analytic model worm propagation moore mps analyzed propagation sql slammer worm effect internet 
existing studies provide detail respect slow propagating stealthy worms mutate code 
researchers mentioned possibility polymorphic worms sta tod sk 
describe study worms 
deri discusses classifying effects security violation network traffic purpose identifying small set traffic parameters value changes significantly attack litmus approach dsm 
relevant attacks described ideas potentially address threat 
domain ids evasion classic pertaining approach tt 
demonstrates problems reliability passive protocol analysis insufficient information wire happening networked machines fact ids inherently fail open 
approach similar exploits fact network ids may sufficient knowledge considered normal remote host 
moore explored design space worm containment systems 
studied efficacy address blacklisting content filtering various deployment scenarios 
concluded order containment system effective detection containment initiated quickly performed local network global scale 
emphasizes importance addressing threat 
singh proposed system real time detection unknown worms traffic analysis content signatures 
authors introduced propagation factor frequently referred 
singh showed detecting worms bandwidth increases quite effective worms high propagation factor 
proposed monitor unused address space ingress egress routers order detect worms early propagation stage help address multiple facets problem describe 
lee lx information theoretic measures entropy information gain describe characteristics audit data set 
offers insight result observed blending worms easily able evade gram ids lx notes length audited source increases entropy decreases suggesting blending worm able evade entropy decreases th audited data set increases 
suggests study evasion strategies gram ids 
idea stealthy worms knowledge normal traffic local network hide propagation attempts 
examined ids implementations showed polymorphic blending attacks practical evade ids 
demonstrate potential tested blended worm ids vulnerable 
suggests polymorphic worms pose problems ids implementations packet gram detection schemes 
objective bring details new threat attention ids community sure effective defenses developed malicious worms techniques described appear 
strongly urge ids researchers consider blending worm strategies defeated 
examples provided depend simple gram ids approaches speculate complex gram gram approaches may provide short term relief 
needed area 
ar gupta sekar approach detecting self propagating email anomaly detection 
raid 
bon 
trends virus writing 
technical report 
cir net 
cgi vulnerabilities scanner 
www net code shtml 
dsm deri 
design implementation anomaly detection system empirical approach 
proceedings 

polymorphic shellcode engine spectrum analysis 
phrack issue 
fir 
windows media services remote command execution exploit 
www com exploits cpp php july 
feng lee gong 
anomaly detection call stack information 
proceedings ieee security privacy conference 
gro threat intelligence group 
trojan analysis 
www com html 
kruskal shortest spanning tree graph traveling salesman problem 
american mathematical society 
ktk toth 
service specific anomaly detection network intrusion detection 
proceedings acm 
ktw 
shellcode mutation engine 
www ca tar gz 
lx wenke lee dong xiang 
information theoretic measures anomaly detection 
snort lightweight intrusion detection system 
www snort org 
mah mahoney 
network traffic anomaly detection packet bytes 
proc 
acm sac 
mps moore paxson savage shannon staniford weaver 
inside slammer worm 
ieee magazine security privacy july 
david moore shannon geoffrey voelker stefan savage 
internet quarantine requirements containing self propagating code 
proceedings ieee infocom march 
bypassing msb data filters buffer overflow exploits intel platforms 
community core sdi com bypass msb txt 
advanced polymorphic worms singh estan varghese savage 
system real time detection unknown worms 
hotnets ii august 
sed 
polymorphic shellcode generator 
ru tools services download id 
sk keromytis 
countering network worms automatic patch generation 
research report 
spw stuart staniford vern paxson nicholas weaver 
wn internet spare time 
proceedings th usenix security symposium security 
sta 
worms trying worst 
research report 
tc toth accurate buffer overflow detection payload execution 
raid 

uploading 


win assembly components 
www net documents pdf 
tod todd 
worms attack vectors theory threats defenses 
practical assignment partial requirement certification 
tt insertion evasion denial service network intrusion detection 
secure networks january 
ws wang stolfo 
anomalous payload network intrusion detection 
report 
zou gao gong towsley 
monitoring early warning internet worms 
proceedings th acm conference computer communications security ccs october 
zou gong towsley 
code red worm propagation modeling analysis 
proceedings th acm conference computer communications security ccs october 
appendix pd skeleton pd skeleton load addr reg adjust addr reg load counter adjust counter load transformation transformation 
transformation store rm increase addr reg decrease counter loop nonzero pd example entry call load addr load addr pd memory load addr pop addr reg add addr reg adjust length pd add addr reg operations push initialize counter steps pop counter reg add counter reg mov reg addr reg load value 
xor reg key transformation op arg bytes add reg key transformation op arg bytes rol reg key transformation op arg bytes add reg key transformation mov addr reg reg store value 
add addr reg increase address sub counter reg decrease counter test counter reg counter reg complete 
loader padding decrypted loader code advanced pd supporting mappings pd entry cld direction decode worm continue control advanced polymorphic worms mov esi offset worm pe read mov edi offset worm pe write xor eax eax reset eax mov ebx eax reset ebx mov bh control char control character cmp esi worm decoding complete 
continue push dword ret jump decoded worm load byte decode esi cmp bh control character 
control mov ah load selector byte ah ctl ah selector mov ebp offset mappings xor ecx ecx index lookup mapping mov bl ebp load byte mappings cmp bl match 
jz cmp bl bh control character 
skip ebp skip ebp ecx jmp lookup mapping mapping cmp bh control character 
ebp mov bl ebp cmp ah bl selectors match 
jz ebp continue looking ecx jmp lookup mapping mov cl store decoded byte jmp decode worm continue mutated exploit example post scripts dll cr lf accept cr lf user agent cr lf host media com cr lf pragma ad ae cr lf accept authentication negotiate digest basic cr lf pragma client id cr lf content length cr lf content type text plain cr lf cr lf summary media com bb rr rr ad ae en exe windows xp pentium tcp mms media com bb rr rr channel rr summary date date time time cs user agent sf cs user agent 
cookie nx az xz yp zzz tn pz zz wz za ez zz zz si cb zz zp zp zp lk cookie tag fake padding shows pd going reconstructed bytes replaced ascii decoder stack tag er eme el hv epe eke ec ny sx ap nw edm ye ee ene eu je hz xb eu 
ascii executable example original binary sequence pd fc bf fe ac ac bd fb eb dc eb aa eb bc 
ea 
advanced polymorphic worms replace non printable characters dot 
length original sequence bytes 
encoding executable ascii binary sequence nx az xz yp zzz tn zp pz wz za ez zz zz si cb zz zp zp zp lk diluted ascii decoder injected tuple appears ascii nx ht az xz zzz tn jt pz lt zz wz za ez zz zt zz zt cb dt zz zp zt zp lkt 
