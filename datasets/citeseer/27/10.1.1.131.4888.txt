deterministic part speech tagging finite state transducers emmanuel roche merl yves schabes merl stochastic approaches natural language processing preferred rule approaches robustness automatic training capabilities 
case part speech tagging brill showed state art part speech tagging achieved rule tagger inferring rules training corpus 
current implementations rule tagger run slowly previous approaches 
finite state tagger inspired rule tagger operates optimal time sense time assign tags sentence corresponds time required follow single path deterministic finite state machine 
result achieved encoding application rules tagger nondeterministic finite state transducer turning deterministic transducer 
resulting deterministic transducer yields part speech tagger speed dominated access time mass storage devices 
generalize techniques class transformation systems 

finite state devices important applications areas computer science cluding pattern matching databases compiler technology 
linguis tic adequacy natural language processing questioned past chomsky dramatic renewal interest application finite state devices aspects natural language processing 
renewal interest due speed compactness finite state representations 
efficiency ex properties finite state devices deterministic turned minimal form 
representations successfully applied different aspects natural language processing morphological analysis generation karttunen kaplan zaenen parsing roche tapanainen voutilainen phonology laporte kaplan kay speech recognition pereira riley sproat 
finite state machines part speech tagging tapanainen voutilainen approaches flexibility stochastic tech niques 
stochastic approaches part speech tagging church kupiec cutting merialdo derose weischedel knowledge finite state taggers handcrafted automatically acquired :10.1.1.109.179
brill described rule tagger performs taggers probabilistic models overcomes limitations common rule approaches language processing robust rules automatically ac mitsubishi electric research laboratories broadway cambridge ma 
mail schabes merl com 
association computational linguistics computational linguistics volume number quired 
addition tagger requires drastically space stochastic taggers 
current implementations brill tagger considerably slower ones probabilistic models may require elementary steps tag input words rules requiring tokens context 
speed current part speech taggers acceptable interac tive systems sentence time processed adequate applications large bodies text need tagged information re trieval indexing applications grammar checking systems 
furthermore space required part speech taggers issue commercial personal computer applications grammar checking systems 
addition part speech taggers coupled syntactic analysis module 
usually modules written different frameworks making difficult integrate interactions modules 
design tagger requires steps tag sentence length independently number rules length context require 
tagger represented finite state transducer framework basis syntactic analysis 
finite state tagger useful combined language components naturally extended composing finite state transducers encode aspects natural language syntax 
relying algorithms formal characterizations described sections explain rule brill tagger viewed nondeterministic finite state transducer 
show application rules brill tagger achieved composing nondeterministic transducers nondeterminism arises transducer 
prove correctness general algorithm possible finite state transducers successfully apply algorithm previously obtained nondeterministic transducer 
resulting deterministic transducer yields part speech tagger operates optimal time sense time assign tags sentence corresponds time required follow single path deterministic finite state machine 
show lexicon tagger optimally encoded finite state machine 
techniques construction finite state tagger mathematically proven correct 
introduce proof soundness completeness worst case complexity analysis algorithm ing finite state transducers 
conclude proving method applied class transformation error driven systems 

overview brill tagger brill tagger comprised parts inferred training cor pus lexical tagger unknown word tagger contextual tagger 
purposes exposition postpone discussion unknown word tagger focus mainly contextual rule tagger core tagger 
lexical tagger initially tags word tag estimated examining large tagged corpus regard context 
example assuming vbn tag word killed vbd shot lexical tagger assign part speech tags notation part speech tags adapted brown corpus francis emmanuel roche yves schabes deterministic part speech tagging sample rules 

vbn vbd np 
vbd vbn chapman np killed vbn john np np john np np shot vbd chapman np pps witnessed vbd np killed vbn chapman np lexical tagger contextual information words tagged incorrectly 
example word killed erroneously tagged verb past participle form shot incorrectly tagged verb past tense 
initial tagging obtained lexical tagger contextual tagger ap plies sequence rules order attempts remedy errors initial tagging 
example rules contextual tagger 
rule says change tag vbn vbd previous tag np 
second rule says change vbd tag vbn tag 
rule applied tag killed changed vbn vbd tagged sentences obtained chapman np killed vbd john np np john np np shot vbd chapman np pps witnessed vbd np killed vbd chapman np second rule applied tag shot changed vbd vbn resulting tag killed changed back vbd vbn resulting chapman np killed vbd john np np john np np shot vbn chapman np pps witnessed vbd np killed vbn chapman np relevant discussion note application tag rule look ahead token sentence applied application rules may perform series operations resulting net change 
see section aspects source local nondeterminism brill tagger 
sequence contextual rules automatically inferred training corpus 
list tagging errors counts compiled comparing output lexical tagger correct part speech assignment 
error determined instantiation set rule templates results greatest error reduction 
set new errors caused applying rule computed process repeated error reduction drops threshold 
ku era pps stands singular nominative pronoun third person vbd verb past tense np proper noun vbn verb past participle form word determiner nn singular noun word 
computational linguistics volume number tag tag tag contextual rule templates 
iii ia change previous tag change previous tag change previous tag change tag change tag change surrounding tags change bigram tag change previous bigram tag id lii iii ii partial matches input set contextual rule templates shown training brown corpus contextual rules obtained 
resulting rule tagger performs state art taggers probabilistic models 
overcomes limitations common rule approaches language processing robust rules automatically acquired 
addition tagger requires drastically space stochastic taggers 
see section brill tagger inherently slow 

complexity brill tagger lexical assignment performed brill algorithm contextual rule acquired training phase applied sentence tagged 
individual rule algorithm scans input left right attempting match rule 
simple algorithm computationally inefficient reasons 
rea son inefficiency fact individual rule compared token input regardless fact current tokens may previously examined matching rule previous position 
algorithm treats rule template tags slides input word time 
consider example rule changes tag tag previous tags applied input pattern cca compared times input shown 
step record previous partial matches mismatches remembered 
example compared second input token second steps second step skipped remembering comparisons step 
method similar naive pattern matching algorithm 
second reason inefficiency potential interaction rules 
example rules applied sentence rule results emmanuel roche yves schabes deterministic part speech tagging change undone second rule shown 
algorithm may perform unnecessary computation 
summary brill algorithm implementing contextual tagger may require elementary steps tag input words contextual rules requiring tokens context 

construction finite state tagger show function represented contextual rule represented nondeterministic finite state transducer sequential application contextual rule corresponds nondeterministic finite state transducer result composition individual transducer 
turn nondeterministic transducer deterministic transducer 
resulting part speech tagger operates linear time independent number rules length context 
new tagger operates optimal time sense time assign tags sentence corresponds time required follow single path resulting deterministic finite state machine 
relies central notions notion finite state transducer notion subsequential transducer 
informally speaking finite state transducer finite state automaton transitions labeled pairs symbols 
symbol input second output 
applying finite state transducer input consists path input symbols storing output symbols result sequence output symbols stored 
section formally defines notion transducer 
finite state transducers composed intersected merged union op eration 
basically manipulate finite state trans easily finite state automata 
finite state ton equivalent deterministic finite state automaton finite state transducers equivalent deterministic finite state transducer 
trans computed deterministic finite state transducer called subsequential functions 
see final step compilation tag ger consists transforming finite state transducer equivalent subsequential transducer 
notation pictorially describing finite state trans final states depicted concentric circles represents empty string transition state state indicates transition input symbol output symbol question mark 
input transition example labeled originating state stands input symbol appear input symbol outgoing arc document depicted finite state transducer assumed single initial state leftmost state usually labeled 
ready construct tagger 
set rules tagger constructed steps 
step consists turning contextual rule brill tagger finite state transducer 
example discussed section functionality rule vbn vbd np represented transducer shown left 
multiple output symbols emitted comma symbolizes concatenation output symbols 
computational linguistics volume number np np vbn vbd 
np left transducer representing contextual rule vbn vbd np 
right local extension 
left transducer representing vbd vbn 
right local extension 
contextual rule defined locally transformation describes applied position input sequence 
instance rule tag changes previous tag applied twice resulting output 
seen previous section method efficient 
second step consists turning transducers produced preceding step transducers operate globally input pass 
transformation performed transducer associated rule 
function fl transforms say fl want extend function word built word occurrence replaced say local extension fl write fl 
section formally defines notion gives algorithm computing local extension 
referring example section local extension transducer rule vbn vbd np shown right 
similarly transducer contextual rule vbd vbn local extension shown 
transducers obtained previous step need applied 
notion introduced roche 
bn emmanuel roche yves schabes deterministic part speech tagging vbd vbn composition 
example transducer equivalent subsequential transducer 
third step combines transducers single transducer 
corre sponds formal operation composition defined transducers 
tion notion algorithm computing composed transducer known described originally elgot 
returning running example section transducer obtained com posing local extension right local extension right shown 
fourth final step consists transforming finite state transducer ob tained previous step equivalent subsequential deterministic transducer 
transducer obtained previous step may contain nondeterminism 
fourth step tries turn deterministic machine 
determinization ways possible finite state transducer 
example transducer shown equivalent subsequential transducer 
intuitively speaking transducer look ahead unbounded distance order correctly generate output 
intuition formalized section 
proven section rules inferred brill tagger turned deterministic machine 
section describes algorithm deter finite state transducers 
algorithm terminate applied transducers representing functions 
running example transducer nondeterministic paths 
example state input symbol vbd possible emissions possible vbn vbd 
nondeterminism due rule vbd vbn rule read second symbol know symbol emitted 
deterministic version transducer shown 
nondeterminism arises deterministic machine computational linguistics volume number subsequential form 
vbd 
emits empty symbol emission output symbol 
example start state empty string emitted input vbd current state set 
word token string vbn emitted vbd emitted depending input 
appropriate implementation finite state transducers see section resulting part speech tagger operates linear time independently num ber rules length context 
new tagger operates optimal time 
shown contextual rules implemented efficiently 
turn attention lexical assignment step precedes application contextual transducer 
step efficient 

lexical tagger step tagging process consists looking word dictionary 
dictionary largest part tagger terms space compact rep resentation crucial 
lookup process fast improvement speed contextual manipulations little practical interest 
achieve high speed procedure dictionary represented deter finite state automaton fast access small storage space 
suppose wants encode sample dictionary 
algorithm described consists building tree branches labeled letters leaves labeled list tags nn vb minimizing directed acyclic graph dag 
result applying procedure sample dictionary dag 
dictionary represented dag looking word consists simply path dag 
complexity lookup procedure depends length word particular independent size dictionary 
lexicon system encodes words 
corresponding dag takes kb space provides access time words second 
size dictionary plain text ascii form kb 
emmanuel roche yves schabes deterministic part speech tagging sample dictionary 
ads nns bag nn vb bagged vbn vbd vbn vbd bids nns nns nn vb vbd vbn dag representation dictionary 
tagging unknown words rule system described brill contains module operates known words words listed dictionary tagged frequent tag contextual rules applied 
module guesses tag word suffix word ing suffix verb prefix word starting uppercase character proper noun relevant properties 
module basically follows techniques ones implement lexicon 
similarity methods provide details module 

empirical evaluation tagger constructed accuracy identical brill tagger comparable statistical methods 
runs higher speed 
tagger runs nearly times faster fastest systems 
finite state tagger inherits rule system compactness compared stochastic tagger 
fact stochastic taggers store word tag bigram trigram probabilities rule tagger finite state encode small number rules 
empirically compared tagger eric brill implementation tagger implementation trigram tagger adapted church previously implemented purpose 
ran programs large files piped output file 
times reported included time spent reading input writing output 
summarizes results 
taggers trained portion brown corpus 
experiments run hp mb memory 
order conduct fair comparison dictionary lookup part stochastic tagger implemented techniques described section 
taggers approximately current implementation functionally equivalent tagger described brill 
tagger extended include improvements described papers brill 
computational linguistics volume number stochastic tagger speed space kb performance comparison 
rule tagger kb dictionary lookup unknown words speed percent time speeds different parts program 
finite state tagger kb contextual precision tags correct 
design finite state tagger produces output rule tagger 
rule tagger finite state tagger produce exact tagging stochastic tagger errors significant difference performance systems detected 
independently cutting quote performance words second part speech tagger hidden markov models 
space required finite state tagger kb distributed follows kb dictionary kb subsequential transducer kb module unknown words 
speeds different parts system shown 
system reaches performance level speed low level factors storage access may dominate computation 
speeds time spent reading input file breaking file sentences breaking sen tences words writing result file longer negligible 

finite state transducers methods construction finite state tagger described previ ous sections described informally 
section notion finite state transducer notion local extension defined 
provide algorithm computing local extension finite state transducer 
issues related determinization finite state transducers discussed section 
definition finite state transducers finite state transducer tuple alphabet finite set states vertices initial state set final states set edges transitions 
evaluation purposes randomly selected brown corpus training purposes testing 
extended discussion precision rule tagger brill 
dictionary lookup includes reading file splitting sentences looking word dictionary writing final result file 
dictionary lookup tagging unknown words take roughly amount time second procedure applies unknown words experiments percentage time takes smaller 
emmanuel roche yves schabes deterministic part speech tagging example finite state transducer 
instance graphical representation transducer ca 
finite state transducer defines function words way extended set edges transitive closure defined recursive relation aa bb function defined iff function defined says represents writes iti 
functions words represented finite state transducers called rational functions 
input output allowed wl 
called rational transduction 
example defined ah bh ae ce 
finite state transducer additional notions useful state transition function maps defined cq emission function maps defined 
finite state transducer seen finite state automaton transition label pair 
respect deterministic transducers generally compute function relevant definition determinism consists saying transition function emis sion function lead sets containing element id qt sets empty 
notion finite state transducer deterministic apply function word determin single path transducer 
deterministic transducers called subsequential transducers 
deterministic transducer define partial functions iff iff cw 
leads definition subsequential trans subsequential transducer tuple defined deterministic state transition function maps writes deterministic emission function maps writes final emission function maps writes instance deterministic equivalent represented sense represent function sequential transducer deterministic transducer states final 
sequential transducers called generalized sequential machines eilenberg 
computational linguistics volume number subsequential transducer 
finite state transducer extended 
bh top input 
middle factorization 
bottom second factorization 
ts 
defined bh ce 
local extension section see function needs applied input positions transformed global function needs applied input 
instance consider 
represents function ab bc bca dca 
want build function word time contains ab ab factor word resp 
bca factor transformed image bc resp 
dca 
suppose instance input word shown factors dom different factorizations 
ab wl aa bca 
local extension transduction takes possible factorization transforms factor bc dca leaves parts unchanged leads outputs factorization second factorization 
notion local extension formalized definition 
definition rational transduction local extension rational transduction defined way 
ai dom bi dom bi 
dom denotes domain set words output wi wl denotes concatenation wl 
may written emmanuel roche yves schabes deterministic part speech tagging local extension identity transduction type type identity 
vy nf ud identity ud identity xes transduction transduction mf type transduction xl xl xi xl transduction transduction local extension algorithm 
intuitively factor dom transformed image remaining part left unchanged 
represented finite state transducer represented finite state transducer writes 
seen yt identity function dom tr yw 
gives algorithm computes local extension directly 
idea input word processed nondeterministically left right 
suppose instance initial transducer want build local extension ts 
input read current input letter transformed initial state letter instance left unchanged expressed looping transition initial state ts labeled hand formula concatenation stands concatenation graphs function concatenation transducers viewed automata labels form explained input transition labeled symbol stands transitions labeled letter doesn appear input outgoing arc state 
transition labeled 
stands xes computational linguistics volume number sample transducer 
local extension ts tt 
de input symbol say processed initial state doesn know word transformed ab followed sequence impossible apply transformation ac 
entertain possibilities processing input transitions identity transition leads kind states transduction states marked transduction algorithm identity states marked identity algorithm 
seen leads transducer copy initial transducer additional part processes identity making sure transformed 
words algorithm consists building copy original transducer time identity function operates dom 
see algorithm applies step step trans producing transducer 
identity line states state transducer built type identity refers initial state 
represents current state current number states 
loop 
builds transitions state transition points state built new state added incrementing program stops states inspected additional state created 
number iterations bounded number states original transducer 
line says current state loop state diagonal pairs input symbol outgoing arc state 
fact qr qx transduction identity 

emmanuel roche yves schabes deterministic part speech tagging local extension 
refers set states marked type type 
example occurrence line instantiated type identity 
line adds current identity state set final states transition initial state letters appear outgoing arc state 
lines build transitions identity states keeping track leads original transducer 
instance label verifies conditions line 
transition added identity state refers transition possible start transduction identity state 
line checks state doesn exist adds necessary means arrival state transition added state number states built incremented 
line builds transition labeled lines describe fact possible start transduction identity state 
transition added new state 
state considered built state symbol block current output 
fact state means read output reads ab current point ab transformed bc current identity transformation blocked expressed transition leads state state trash state outgoing transition final 
state marked type transduction means lines applied 
consists simply copying transi tions original transducer 
original state final transduction transition initial state added get behavior 
transducer gives complete slightly complex example algorithm 
computational linguistics volume number 
determinization basic idea determinization algorithm comes mehryar mohri 
section giving formalization algorithm introduce proof soundness completeness study worst case complexity 
determinization algorithm wl wl denotes longest common prefix wl 
finite state transducers system property deterministic exists subsequential transducer represents function 
finite state transducer subsequential transducer defined follows proved equivalent fact determinization transducer related determinization fsas sense involves power set construction 
difference keep track set states original transducer words emission postponed 
instance state ql wl means state corresponds path leads original transducer emission wl resp 
delayed ql resp 


postponed emission initial state 
emission function defined ed means symbol set possible emissions obtained concatenating postponed emissions emission current state 
wants transition deterministic actual emission longest common prefix set 
state transition function defined cs denotes concatenation exists 
seq see proof correctness properly defined 
mohri gives formalization algorithm 
opposed automata large class finite state transducers deterministic representation 
emmanuel roche yves schabes deterministic part speech tagging determinization algorithm computes subsequential transducer 
apply determinization algorithm finite state transducer show builds subsequential transducer 
line algorithm builds state instantiates pair 
respectively denote current state number states having built far 
line takes possible input symbols possible line output symbol 
line computed follows ff 
verifies condition line new state created transition labeled points incremented 
line program goes construction transitions state 
line possible symbols 
symbol line bh 
cd henceforth computation line leads bh qe state labeled added transition labeled bh points state added 
transition input symbol computed way 
subsequential transducer generated algorithm turn min algorithm described mohri 
case trans nearly minimal 
proof correctness decidable function subsequential determinization algorithm described previous section terminate run function 
issues addressed section 
proof soundness fact algorithm terminates output transducer deterministic represents function 
second proof completeness algorithm terminates case subsequential functions 
soundness completeness consequence main proposition states transducer represents subsequential function algorithm described previous section applied computes sub sequential transducer representing function 
order simplify proofs consider transducers input transitions loss generality computational linguistics volume number foreach determinization algorithm 
es es subsequential transducer transducers reduced deterministic sense finite state automata 
order prove proposition need establish preliminary notations lemmas 
extend definition transition function emission function deterministic transition function deterministic emission function words classical way 
properties ab bh ql ab ql 
cd ql cd ab transducer defines automaton labels pairs input output automaton assumed deterministic 
emmanuel roche yves schabes deterministic part speech tagging ab useful note function function 
lemma states invariant holds state built algorithm 
lemma proof soundness 
lemma initial state 
iteration loop transducer holds qed ii andu proof ii obviously true show true true wa 
assuming ii hold 
qed ed 
qed ed es ed wa proves 
turn ii 
assuming ii hold algorithm line wa wa 
wa show 




wa 
wa 


show 
wa wa 
sl concludes proof ii 
computational linguistics volume number lemma states common property state complexity analysis algorithm 
lemma built loop vq pair element 
proof suppose wl wl fi 

lemma soundness 
states final state emission function function 
lemma built algorithm proof state set built line algorithm 
suppose ii lemma 
function itl uq lemma completeness 
lemma transducer representing subsequential function exists bound built line lu rely theorem proven theorem function subsequential iff bounded variations rational language rational 
definitions definition left distance strings iv 
definition function bounded variations iff exists dom proof lemma 
string minimal strings 
note number states emmanuel roche yves schabes deterministic part speech tagging state af 
define maxl max ic subsequential bounded variations exists vi am 
state set built line ql pair exists ii lemma es cs ii wl ed contradicts lemma 
ql ql ql 
iia cii lab cd ibl fact ab iab cd lal ibi idi iab cd ii lab cd ib iab cd ila ci aac idi ibi idi iia cil ab ib idl 
particular lui au avi iw iif ql 
ql ll ql ic iif ql time ripe main proposition proves soundness com 
proposition transducer represents subsequential function algorithm transducer described previous section applied computes subsequential transducer representing function 
proof lemma shows algorithm terminates subsequential 
show dom iti dom iti 
dom iti 
ii lemma terminal dom 
conversely dom 
exists qf qf qf 
zi 
qf ii lemma qf qf qf lemma shows 
qf iti 
iti 
computational linguistics volume number worst case complexity section give worst case upper bound size subsequential transducer terms size input transducer 
iw bound defined proof lemma 
lemma state set contains pair maximal number states built algorithm smaller sum number functions states strings state set ill iq ill ill iql 
ill 
isl isl ill 
formula described lemma 
note maxa sl maximal length simple transitions emissions number states bounded gl xp lee 
transformation systems proof correctness determinization algorithm fact algo rithm terminates transducer encoding brill tagger show final function subsequential equivalent brill original tagger 
section prove general transformation system brill subsequential function 
words transformation system turned deterministic finite state transducer 
define transformation systems follows 
definition transformation system finite sequence fn subsequential func tions domains bounded 
applying transformation system consists applying function fi 
applying function consists looking position input function triggered 
function triggered longest possible string starting position transformed function 
string transformed process iterated starting previously transformed string 
function applied 
program ends functions applied 
true general local extension subsequential function subsequential 
tm instance consider function fa 
local extensions functions compute subsequential emmanuel roche yves schabes deterministic part speech tagging function fa 
local extension function fa function 
fact consider input string decomposed aaa 
ad da aaa 
decomposition leads output second output 
intended rules tagger defined brill apply function left right 
addition decompositions possible occurs chosen 
previous example means output generated 
notion defined precisely 
rational function defined additional symbols 

definition 
decomposition string 

instance dom fa aaa set decompositions aaa ad da aaa 
definition total order additional symbols 
extend order va 
defines lexicographic order denote 
minimal decomposition decomposition minimal 
instance minimal dom fa decomposition aaa ad 
fact da aaa proposition finite function associates minimal decomposition subsequential total 
proof dec defined dec 

dec uv minimal strings dec exists 
function total function dec returns output decomposition shall prove function rational bounded variations prove theorem function subsequential 

transduction ty generates set decompositions defined ty idx 
eft 

idx idx resp 
stands identity function resp 

furthermore computational linguistics volume number transduction 
transduction tu string associates set strings strictly greater defined transducer ix 
right minimal decomposition function defined ty tu ty proves rational 

xk xm wherem maxx bes vii consider cases ii lu 
av av vi decomposition iw fact doesn contain number resp 
smaller iw 
li 
ii 

suppose instance 

vi possible situations ii 
case length elements smaller ll letter different 
decomposition decomposition strictly smaller contradicts minimality 
second situation ii 
gj 
decomposition decomposition strictly smaller leads contradiction 
ilu ll la la proves bounded variations subsequential 
define precisely effect function applies left right done original tagger 
construction similar transduction built proof eilenberg cross section theorem eilenberg 
refers th letter emmanuel roche yves schabes deterministic part speech tagging definition rational function bounded domain dom right minimal local extension denoted composition right minimal decomposition ida 

ida 
composition subsequential functions subse proves final proposition states rule system similar brill system build subsequential transducer represents proposition fl 
fn sequence subsequential functions bounded domains fi fn subsequential 
proven section techniques apply class transformation systems 
turn attention implementation finite state trans 

implementation finite state transducers final finite state transducer computed applying input straight forward consists unique sequence transitions left labels correspond input 
order complexity fully independent size grammar particular independent number transitions state carefully choose appropriate representation trans 
implementation transitions accessed randomly 
transducer represented dimensional table rows indexed states columns indexed alphabet possible input letters 
content table line column word transition input label outputs transitions allowed states table sparse compressed 
compression achieved maintaining random access procedure sparse data tables method tarjan yao 

techniques described general problem part speech tagging applicable class problems dealing local transfor mation rules 
showed transformation program transformed deterministic finite state transducer 
yields optimal time implementations transformation programs 
case study applied techniques problem part speech tagging finite state tagger requires steps tag sentence length independently number rules length context require 
achieved result representing rules acquired brill tagger nondeterministic finite state transducers 
composed istic transducers turned resulting transducer deterministic transducer 
resulting deterministic transducer yields part speech tagger operates optimal time sense time assign tags sentence corresponds time required follow single path deterministic finite state machine 
computational linguistics volume number tagger outperforms speed brill tagger stochastic taggers 
finite state tagger inherits rule system compactness compared stochastic taggers 
proved correctness generality methods 
believe finite state tagger useful combined language components naturally extended composing finite state transducers encode aspects natural language syntax 
acknowledgments eric brill providing code tagger useful discussions 
aravind joshi mark liberman mehryar mohri valuable discussions 
anonymous reviewers helpful comments led improvements content presentation 
brill eric 
simple rule part speech tagger 
proceedings third conference applied natural language processing 
trento italy 
brill eric 
report progress transformation error driven learning 
proceedings tenth national conference artificial intelligence aaai 
seattle washington 
christian 
une des fonctions des fonctions sous en tant que relations 
theoretical computer science 
christian 
contribution de quelques families de fonctions 
doctoral dissertation universit paris vii th se etat 
chomsky noam 
syntactic structures 
mouton 
church kenneth ward 
stochastic parts program noun phrase parser unrestricted text 
proceedings second conference applied natural language processing 
austin texas 
david 
structuration du reconnaissance de mots 
doctoral dissertation universit paris 
cutting doug kupiec julian pederson jan sibun penelope 
practical part speech tagger 
proceedings third conference applied natural language processing 
trento italy 
derose 

grammatical category disambiguation statistical optimization 
computational linguistics 
eilenberg samuel 
automata languages machines 
academic press 
elgot 

relations defined generalized finite automata 
ibm journal research development 
francis nelson ku era henry 
frequency analysis english usage 
houghton mifflin 
kaplan ronald kay martin 
regular models phonological rule systems 
computational linguistics 
karttunen lauri kaplan ronald zaenen annie 
level morphology composition 
proceedings th international conference computational linguistics coling 
nantes france 
kupiec 

robust part speech tagging hidden markov model 
computer speech language 
laporte eric 
phon 
technical report universit paris june 
merialdo bernard 
tagging text probabilistic model 
technical report rc ibm research division 
mohri mehryar 
minimisation sequential transducers 
proceedings fifth annual symposium combinatorial pattern matching 
lecture notes computer science springer verlag 
mohri mehryar 
applications finite state automata theory natural language processing 
technical report institut monge 
pereira fernando riley michael sproat richard 

weighted rational transductions application human language processing 
human language technology workshop 

morgan kaufmann 
dominique 
algorithmes 
doctoral dissertation universit paris 
roche emmanuel 
analyse du fran ais par 
doctoral dissertation universit paris 
sch marcel paul 
sur emmanuel roche yves schabes deterministic part speech tagging une des fonctions 
theoretical computer science 
max 
analyse du le syst 
masson 
tapanainen pasi voutilainen 
ambiguity resolution parser 
proceedings sixth conference european chapter acl 
utrecht netherlands 
tarjan robert endre chi chih yao andrew 
storing sparse table 
communications acm 
weischedel ralph meteer marie schwartz richard ramshaw lance jeff 
coping ambiguity unknown words probabilistic models 
computational linguistics 

