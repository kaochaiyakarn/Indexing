multidimensional access methods volker gaede ic parc imperial college london oliver nther humboldt universit berlin 
search operations databases require special support physical level 
true conventional databases spatial databases typical search operations include point query find objects contain search point region query find objects overlap search region 
years spatial database research resulted great variety multidimensional access methods support operations 
give overview 
brief survey spatial data management general class point access methods search sets points dimensions 
second part devoted spatial access methods handle extended objects rectangles polyhedra 
conclude discussion theoretical experimental results concerning relative performance various approaches 
categories subject descriptors database management physical design access methods database management systems database management database applications spatial databases gis information storage retrieval information search retrieval search process selection process general terms design experimentation performance additional key words phrases data structures multidimensional access methods increasing number computer applications rely heavily multidimensional data database community devoted considerable attention spatial data management 
main motivation nated geosciences mechanical cad range possible applications expanded areas robotics visual perception autonomous navigation environmental protection medical imaging nther buchmann 
range interpretation partially supported german research society dfg sfb esprit working group 
authors address institut wirtschaftsinformatik humboldt universit zu berlin str 
berlin germany email gaede hu berlin de 
permission digital hard copy part personal classroom granted fee provided copies distributed profit commercial advantage copyright notice title publication date appear notice copying permission acm copy republish post servers redistribute lists requires prior specific permission fee 
acm acm computing surveys vol 
june contents 

organization spatial data special spatial 
definitions queries 
basic data structures dimensional access methods main memory structures 
point access methods multidimensional hashing hierarchical access methods space filling curves point data 
spatial access methods transformation overlapping regions clipping multiple layers 
comparative studies 
term spatial data management just broad range applications 
vlsi cad cartography term refers applications rely dimensional layered dimensional data 
vlsi data usually represented rectilinear polylines polygons edges parallel coordinate axes 
typical operations include intersection geometric routing shekhar liu 
cartographic data dimensional points lines regions basic primitives 
contrast vlsi cad shapes characterized extreme irregularities 
common operations include spatial searches map overlay distance related operations 
mechanical cad hand data objects usually dimensional solids 
may represented variety data formats including cell decomposition schemes constructive solid geometry csg boundary representations kemper 
applications emphasize processing unanalyzed images rays satellite imagery features extracted 
areas terms spa multidimensional access methods tial database image database interchangeably 
strictly speaking spatial databases contain multidimensional data explicit knowledge objects extent position space 
objects usually represented vector format relative positions may explicit implicit derivable internal representation absolute positions 
image databases place emphasis data analysis 
provide storage retrieval unanalyzed pictorial data typically represented raster format 
techniques developed storage manipulation image data applied media infrared sensor signals sound 
survey assume goal manipulate analyzed multidimensional data unanalyzed images handled source spatial data derived 
challenge developers spatial database system lies providing collection special purpose data structures 
find abstractions architectures implement generic systems build systems generic spatial data management capabilities tailored requirements particular application domain 
important issues context include handling spatial representations data models multidimensional access methods pictorial spatial query languages optimization 
article survey multidimensional access methods support search operations spatial databases 
inspired similar graph lu ooi gives overview diversity existing multidimensional access methods 
goal describe structures discuss prominent ones possible taxonomies establish literature 
acm computing surveys vol 
june gaede nther shorter surveys published previously various ph theses ooi 
widmayer gives overview published 
thesis survey available german 
samet books state art 
primarily cover quadtrees related data structures 
lomet discusses field systems oriented point view 
remainder article organized follows 
section discusses basic properties spatial data implications design implementation spatial databases 
section gives overview traditional data structures acm computing surveys vol 
june 
history multidimensional access methods 
impact design multidimensional access methods 
sections form core survey presenting variety point access methods pams spatial access methods sams respectively 
remarks theoretical experimental analyses contained section section concludes article 

organization spatial data special spatial 
obtain better understanding requirements spatial database systems discuss basic properties spatial data 
spatial data complex structure 
spatial data object may composed single point thousands polygons arbitrarily distributed space 
usually possible store collections objects single relational table fixed tuple size 
second spatial data dynamic 
insertions deletions interleaved updates data structures context support dynamic behavior deteriorating time 
third spatial databases tend large 
geographic maps example typically occupy gigabytes storage 
integration secondary tertiary memory essential efficient processing chen 
fourth standard algebra defined spatial data proposals past egenhofer ting scholl ting schneider 
means particular standardized set base operators 
set operators depends heavily application domain operators intersection common 
fifth spatial operators closed 
intersection polygons example may return number single points dangling edges disjoint polygons 
particularly relevant operators applied consecutively 
sixth computational costs vary spatial database operators generally expensive standard relational operators 
important class geometric operators needs special support physical level class spatial search operators 
retrieval update spatial data usually value certain alphanumeric attributes spatial location data object 
retrieval query spatial database requires fast execution geometric search operation point region query 
operations require fast access data objects database occupy location space 
support search operations multidimensional access methods needs special multidimensional access methods 
main problem design methods exists total ordering spatial objects preserves spatial proximity 
words mapping higher dimensional space dimensional space objects spatially close higher dimensional space close dimensional sorted sequence 
design efficient access methods spatial domain difficult traditional databases broad range efficient understood access methods available 
examples onedimensional access methods called single key structures term somewhat misleading include tree bayer mccreight extendible hashing fagin see section brief discussion 
popular approach handling multidimensional search queries consists consecutive application single key structures dimension 
unfortunately approach inefficient kriegel 
index traversed independently exploit possibly high selectivity dimension narrow search remaining dimensions 
general easy obvious way extend single key structures order handle multidimensional data 
variety requirements multidimensional access methods meet properties spatial data applications robinson lomet salzberg nievergelt dynamics 
data objects inserted deleted database order access methods continuously keep track changes 
secondary tertiary storage management 
despite growing main memories possible acm computing surveys vol 
june gaede nther hold complete database main memory 
access methods need integrate secondary tertiary storage seamless manner 
broad range supported operations 
access methods support just particular type operation retrieval expense tasks deletion 
independence input data insertion sequence 
access methods maintain efficiency input data highly skewed insertion sequence changed 
point especially important data distributed differently various dimensions 
simplicity 
intricate access methods special cases error prone implement sufficiently robust large scale applications 
scalability 
access methods adapt database growth 
time efficiency 
spatial searches fast 
major design goal meet performance characteristics dimensional trees access methods guarantee logarithmic worst case search performance possible input data distributions regardless insertion sequence second worst case performance hold combination attributes 
space efficiency 
index small size compared data addressed guarantee certain storage utilization 
concurrency recovery 
modern databases multiple users concurrently update retrieve insert data access methods provide robust techniques transaction management significant performance penalties 
acm computing surveys vol 
june minimum impact 
integration access method database system minimum impact existing parts system 
definitions queries introduced term multidimensional access methods denote large class access methods support searches spatial databases subject survey 
class distinguish point access methods pams spatial access methods sams 
point access methods primarily designed perform spatial searches point databases databases store points 
points may embedded dimensions spatial extension 
spatial access methods manage extended objects lines polygons higher dimensional polyhedra 
literature finds term spatial access method referring call multidimensional access method 
terms purpose include spatial index spatial index structure 
generally assume objects embedded dimensional euclidean space suitable subspace thereof 
article space referred universe original space 
point object stored spatial database unique location universe defined coordinates 
distinction essential term point locations space point objects stored database 
note point space occupied point objects stored database 
convex dimensional polytope defined intersection finite number closed halfspaces dimension smallest affine subspace containing ifa dimensional set defines hyperplane hyperplane defines closed halfspaces positive halfspace negative halfspace 
hyperplane supports polytope embeds parts boundary 
hyperplane supporting face faces dimension called edges dimension vertices 
forming union finite number polytopes obtain dimensional polyhedron necessarily convex 
intuitive understanding polyhedra require connected 
note allows polyhedra holes 
face face fraction thereof result intersection polyhedron divides points space subsets mutually disjoint interior boundary exterior 
usual conventions terms line polyline denote dimensional polyhedron terms polygon region denote dimensional polyhedron 
assume multidimensional access methods 
multistep spatial query processing brinkhoff 
set dimensional polyhedra forms data type leads common collection spatial data types point line region 
combined types occur 
object spatial database usually defined nonspatial attributes attribute spatial data type 
spatial attribute describes object spatial extent spatial database literature terms geometry shape spatial extension spatial extent 
description finds terms shape descriptor shape description shape information geometric description 
indices perform efficiently handling simple entries size 
abstracts actual shape spatial object inserting index 
achieved approximating original data object simpler shape bounding box sphere 
minimum bounding interval describing extent spatial object dimension dimensional minimum bounding box mbb defined 
index may administer mbb object acm computing surveys vol 
june gaede nther pointer object database entry object id object 
design index produces set candidate solutions 
candidate obtained filter step decide mbb sufficient guarantee object satisfies search predicate 
cases object added directly query result dashed line 
cases mbb prove sufficient 
refinement step retrieve exact shape information secondary memory test predicate 
predicate evaluates true object added query result false drop 
way obtaining simple index entries represent shape data object geometric union simpler shapes convex polygons bounded number vertices 
approach called decomposition 
mentioned term efficiency times far giving formal definition 
case space efficiency easily done goal minimize number bytes occupied index 
time efficiency situation clear 
elapsed time obviously user cares keep mind corresponding measurements greatly depend implementation details hardware utilization external factors 
literature finds seemingly objective performance measure number disk accesses performed search 
approach popular tree assumption searches bound cpu bound assumption true spatial data management 
applications objects complex shapes refinement step incur major cpu costs change balance gaede hoel samet 
course keep acm computing surveys vol 
june 
point query 
tion number disk accesses mind design goal 
practical evaluations give information elapsed times conditions achieved 
noted previously contrast relational databases exists standard spatial algebra standard spatial query language 
set operators strongly depends application domain operators intersection generally common 
queries expressed extension sql allows data types represent spatial objects associated operators roussopoulos egenhofer 
result query usually set spatial data objects 
remainder section give formal definition common spatial database operators 
figures give concrete examples 
query exact match query object query 
object spatial extent find objects spatial extent 
query point query pq 
point find objects overlap ping 
window query 

intersection query 
pq 
point query regarded special case queries intersection query window query enclosure query 
query window query wq range query 
dimensional interval find objects having point common wq 
multidimensional access methods 
enclosure query 

containment query 
query implies window iso oriented faces parallel coordinate axes 
general variant region query permits search regions arbitrary orientations shapes 
query intersection query iq region query overlap query 
object spatial extent find objects having point common iq 
query enclosure query eq 
object spatial extent acm computing surveys vol 
june gaede nther 
adjacency query 
find objects enclosing eq 
query containment query cq 
object spatial extent find objects enclosed cq 
enclosure containment query duals 
restrictive formulations intersection query specifying result intersection inputs 
query adjacency query aq 
object spatial extent find objects adjacent aq 
denote interiors spatial extents respectively 
query nearest neighbor query 
object spatial extent find objects acm computing surveys vol 
june having minimum distance dist dist 
distance extended spatial data objects usually defined distance closest points 
common distance functions points include euclidean manhattan distance 
spatial selections exemplified queries spatial join important spatial operations defined follows nther query spatial join 
collections spatial objects spatial predicate find pairs objects evaluates true 
spatial predicate brief survey literature yields wide variety possibilities including intersects contains enclosed distance northwest adjacent 
closer inspection spatial predicates shows intersection join intersects plays crucial role computation virtually cases gaede 
predicates contains encloses adjacent example intersection join efficient filter yields set candidate solutions typically see orenstein becker rotem nther brinkhoff gaede brinkhoff lo ravishankar aref samet papadias nther 
smaller cartesian product 
basic data structures dimensional access methods classical dimensional access methods important foundation multidimensional access methods 
related surveys knott comer somewhat dated represent coverage different approaches 
practice common dimensional structures include linear hashing litwin larson extendible hashing fagin tree bayer mccreight 
hierarchical access methods tree scalable behave case skewed input nearly independent distribution input data 
necessarily true hashing techniques performance may degenerate depending input data hash function 
problem aggravated order preserving hash functions orenstein garg try preserve neighborhood relationships data items order support range queries 
result highly skewed data keep accumulating selected locations image space 
linear hashing larson litwin 
linear hashing divides universe possible hash values binary intervals size 
interval corresponds bucket collection records stored disk page 
pointer separates smaller intervals larger ones intervals size left intervals size right bucket reaches capacity due insertion interval split subintervals equal size advanced multidimensional access methods large interval remaining 
note split interval need interval caused split consequently guarantee split relieves bucket question overload 
interval contains objects bucket capacity permits overload stored overflow page linked original page 
file doubled intervals length case reset pointer resume split procedure smaller intervals 
extendible hashing fagin 
linear hashing extendible hashing organizes data binary intervals called cells 
overflow pages avoided extendible hashing central directory 
cell index entry directory initially corresponds bucket 
insertion bucket maximal depth exceeds maximum capacity cells split 
new index entries created directory doubles size 
bucket full capacity split may possible fit cell bucket 
case adjacent cells data regions stored disk page 
case skewed data may lead situation numerous directory entries exist data region disk page 
case uniformly distributed data average directory size superlinear flajolet 
denotes bucket size number index entries 
exact match searches take page accesses directory bucket data 
best case performance linear hashing better worst case 
potentially poor space utilization index extendible hashing suffers nonincremental acm computing surveys vol 
june gaede nther growth index due doubling steps 
address problems lomet proposed technique called bounded index extendible hashing 
proposal index grows extendible hashing size reaches predetermined maximum index size bounded 
limit reached inserting new items bounded index extendible hashing starts doubling data bucket size index size 
tree bayer mc 
hashing schemes tree variants comer organize data hierarchical manner 
trees balanced trees correspond nesting intervals 
node corresponds disk page interval 
interior node intervals corresponding immediate descendants mutually disjoint subsets 
leaf nodes contain pointers data items depending type tree interior nodes may 
trees upper lower bound number descendants node 
lower bound prevents degeneration trees leads efficient storage utilization 
nodes number descendants drops lower bound deleted contents distributed adjacent nodes tree level 
upper bound follows fact tree node corresponds exactly disk page 
insertion node reaches capacity split 
splits may propagate tree 
size intervals depends data insertion sequence tree adaptive data structure 
uniformly distributed data extendible linear hashing outperform tree average exact match queries insertions deletions 
main memory structures early multidimensional access methods take account paged second acm computing surveys vol 
june ary memory suited large spatial databases 
section review fundamental data structures adapted incorporated numerous multidimensional access methods 
illustrate methods introduce small scenario running example survey 
scenario depicted contains points pi polygons ri randomly distributed finite dimensional universe 
represent polygons centroids ci pictured minimum bounding boxes mi 
note quality mbb approximation varies considerably 
mbb example provides fairly tight fit half large mbb 
tree bentley 
prominent ddimensional data structures dtree 
tree binary search tree represents recursive subdivision universe subspaces means dimensional hyperplanes 
hyperplanes iso oriented direction alternates possibilities 
example splitting hyperplanes alternately perpendicular axes 
splitting hyperplane contain data point representation tree 
interior nodes descendants function discriminators guide search 
searching insertion new points straightforward operations 
deletion somewhat complicated may cause reorganization subtree data point deleted 
shows tree running example 
tree handle points represent polygons centroids ci 
splitting line vertical line crossing 
store root corresponding tree 
splits occur horizontal lines cross ing left subtree right subtree 
disadvantage tree structure sensitive order points inserted 
data points scattered tree 
adaptive tree bentley friedman mitigates problems choosing split finds number elements sides 
splitting hyperplanes parallel axes need contain data point directions multidimensional access methods 
running example 

tree 
need strictly alternating anymore 
result split points part input data data points stored leaves 
interior nodes contain dimension coordinate corresponding split 
splitting continued recursively subspace contains certain number points 
adaptive tree static structure obviously difficult keep tree balanced presence frequent insertions deletions 
structure works best data known acm computing surveys vol 
june gaede nther priori updates rare 
shows adaptive tree running example 
note tree depends order insertion 
variant tree bintree tamminen 
structure partitions universe recursively dimensional boxes equal size contains certain number points 
kind partitioning adaptive advantages implicit knowledge partitioning hyperplanes 
remainder article encounter structures kind partitioning 
disadvantage common certain distributions hyperplane splits data points evenly lomet salzberg 
introducing flexible partitioning scheme avoids problem completely 
bsp tree fuchs 
splitting universe iso oriented hyperplanes severe restriction schemes far 
allowing arbitrary orientations gives flexibility find hyperplane suited split 
known example method binary space partitioning bsp tree 
trees bsp trees binary trees represent recursive subdivision universe acm computing surveys vol 
june 
adaptive tree 
subspaces means dimensional hyperplanes 
subspace subdivided independently history subspaces 
choice partitioning hyperplanes depends distribution data objects subspace 
decomposition usually continues number objects subspace threshold 
resulting partition universe represented bsp tree hyperplane corresponds interior node tree subspace corresponds leaf 
leaf stores objects contained corresponding subspace 
shows bsp tree running example objects subspace 
order perform point query insert search point root tree determine side corresponding hyperplane located 
insert point corresponding subtree proceed recursively reach leaf tree 
examine data objects corresponding subspace see contain search point 
range search algorithm straightforward generalization 
bsp trees adapt different data distributions 
typically balanced may deep subtrees tive impact tree performance 
bsp trees higher space requirements storing arbitrary hyperplane split occupies storage space simple discriminator typically just real number 
bd tree 
bd tree binary tree representing subdivision data space interval shaped regions 
regions encoded bit string associated bd tree nodes 
bit strings called dz expressions known peano codes st values cf 
section 
region computes corresponding dz expression follows 
simplicity restrict presentation dimensional case assume subdividing hyperplane vertical line 
lies left line bit corresponding dz expression 
step subdivide subspace containing horizontal line 
lies line second bit dz expression 
decomposition progresses obtain bit splitting line 
bits odd positions refer vertical lines bits positions horizontal lines explains scheme referred bit interleaving 
multidimensional access methods 
bsp tree 
avoid storage utilization problems associated strictly regular partitioning employs flexible splitting policy 
split node making interval shaped excision corresponding region 
child nodes node split different interpretations represents excision represents remainder original region 
note remaining region longer interval shaped 
policy bd tree guarantee node splitting data buckets contains third original entries 
shows bd tree running example 
excision represented left child node split 
exact match compute full bit interleaved prefix search record 
starting root recursively compare prefix stored dz expressions internal node 
matches follow corresponding link follow link reach leaf level bd tree 
sophisticated algorithms proposed sorenson 
quadtree 
quadtree variants closely related tree 
extensive discussion structure see samet acm computing surveys vol 
june gaede nther 
term quadtree usually refers dimensional variant basic idea applies arbitrary tree quadtree decomposes universe means iso oriented hyperplanes 
important difference fact quadtrees binary trees anymore 
dimensions interior nodes quadtree descendants corresponding interval shaped partition subspace 
partitions equal size case 
example interior node descendants corresponding rectangle 
rectangles typically referred nw ne sw se northwest quadrants 
decomposition subspaces usually continued number objects partition threshold 
quadtrees necessarily balanced subtrees corresponding densely populated regions may deeper 
searching quadtree similar searching ordinary binary search tree 
level decide subtrees need included search 
case point query typically subtree qualifies range queries 
repeat search step recursively reach leaves tree 
finkel bentley proposed acm computing surveys vol 
june 
bd tree 
quadtree variants point quadtree essentially multidimensional binary search tree 
point quadtree constructed consecutively inserting data points 
point perform point search 
find point tree insert leaf node search terminated 
corresponding partition divided subspaces new point center 
deletion point requires restructuring subtree corresponding quadtree node 
simple way achieve reinsert points subtree 
shows dimensional point quadtree running example 
popular variant region quadtree samet 
region quadtrees regular decomposition universe subspaces resulting partition equal size 
greatly facilitates searches 
running example shows region quadtrees represent sets points 
threshold number points subspace set 
complex versions region quadtree pm quadtree samet webber possible store polygonal data directly 
pm quadtrees divide quadtree regions data objects contain small number polygon edges vertices 
edges vertices form exact description data objects attached leaves tree 
class quadtree structures designed management collections rectangles see samet survey 

point access methods multidimensional data structures previous section take secondary storage management account explicitly 
originally designed main memory applications data available accessing disk 
despite growing main memories course case 
spatial database applications geography amount data managed notoriously large 
multidimensional access methods 
point quadtree 

region quadtree 
certainly main memory structures data reside disk performance considerably optimum control operating system performs disk accesses 
access methods section designed secondary storage management mind 
operations closely coordinated operating system ensure performance optimized 
mentioned selection point access methods 
usually points database organized number buckets corresponds disk page subspace universe 
subspaces called data regions bucket regions simply regions acm computing surveys vol 
june gaede nther table 
classification pams seeger kriegel dimension may greater need rectilinear 
buckets accessed means search tree dimensional hash function 
grid file nievergelt example uses directory partition universe answer exact match query exactly disk accesses 
furthermore multidimensional hashing schemes tamminen kriegel seeger multilevel grid files whang krishnamurthy hash trees ouksel organize directory tree structure 
tree access methods usually generalization tree higher dimensions tree robinson hb tree lomet salzberg 
remainder section discuss approaches hashing followed hierarchical treebased methods space filling curves 
classification hardly unambiguous especially presence increasing number hybrid approaches attempt combine advantages different techniques 
approach resembles classification samet dis acm computing surveys vol 
june hierarchical methods point region quadtrees trees range trees bucket methods grid file 
discussion primarily context main memory applications 
presentation focuses structures take secondary storage management account 
interesting taxonomy proposed seeger kriegel classify point access methods properties bucket regions table 
may pairwise disjoint may mutual overlaps 
second may shape interval box arbitrary polyhedral shape 
third may cover complete universe just parts contain data objects 
taxonomy results classes populated existing access methods 
multidimensional hashing total order objects higher dimensional space completely preserves spatial proximity numerous attempts construct hashing functions preserve proximity extent 
goal heuristics objects located close original space stored close disk 
contribute substantially minimizing number disk accesses range query 
presentation structures extendible hashing 
structures linear hashing discussed section 
discussion hybrid methods bang file buddy tree postponed section 
grid file nievergelt 
typical representative access method hashing discuss grid file variants 
grid file see hinrichs ouksel whang krishnamurthy widmayer 
multidimensional access methods 
grid file 
dimensional orthogonal grid universe 
grid necessarily regular resulting cells may different shapes sizes 
grid directory associates cells data buckets stored disk page 
cell associated bucket bucket may contain adjacent cells 
directory may grow large usually kept secondary storage 
guarantee data items disk accesses exact match queries grid kept main memory represented dimensional arrays called scales 
shows grid file running example 
assume bucket capacity data points 
center shows directory acm computing surveys vol 
june gaede nther scales axes 
data points displayed directory demonstration purposes course stored 
lower left part cells combined single bucket represented pointers single page 
directory entries page illustrates known problem grid file suffers superlinear growth directory data uniformly distributed regnier widmayer 
bucket region containing point merged neighboring buckets better storage utilization 
various merging strategies discuss deletion data points 
answer exact match query uses scales locate cell containing search point 
appropriate grid cell main memory disk access necessary 
loaded cell contains page possibly matching data 
retrieving page may require disk access 
altogether page accesses necessary answer query 
range query examine cells overlap search region 
eliminating duplicates fetches corresponding data pages memory detailed inspection 
insert point performs exact match query locate cell data page entry inserted 
sufficient space left new entry inserted 
distinguish cases depending number grid cells point data page new data item inserted 
checks existing hyperplane stored scales splitting data page successfully 
new data page allocated data points distributed accordingly data pages 
existing hyperplanes suitable grid cell points data acm computing surveys vol 
june page question splitting hyperplane introduced new data page allocated 
new entry entries original page redistributed depending location relative inserted corresponding scale cells intersect split accordingly 
splitting local operation lead superlinear directory growth uniformly distributed data regnier widmayer 
deletion local operation 
deletion entry storage utilization corresponding data page may drop threshold 
depending current partitioning space may possible merge page neighbor page drop partitioning hyperplane corresponding scale 
depending implementation grid directory merging may require complete directory scan hinrichs 
hinrichs discusses methods finding candidates data bucket merge including neighbor system multidimensional buddy system 
neighbor system allows merging adjacent regions result rectangular region 
buddy system adjacent regions merged provided joined region obtained regular binary subdivision universe 
systems able eliminate completely possibility deadlock case merging feasible resulting bucket region box shaped hinrichs seeger kriegel 
theoretical analysis grid file variants see regnier becker 
regnier shows particular grid file average directory size uniformly distributed data db bucket size 
proves average space occupancy data buckets ln 
tamminen 
closely related grid file method extendible cell proposed tamminen 
contrast grid file partitioning hyperplanes may spaced arbitrarily method decomposes universe regularly grid cells equal size 
order maintain property presence insertions new split results halving cells doubling directory size 
alleviate problem tamminen suggested hierarchical method similar multilevel grid file whang krishnamurthy 
overflow pages introduced limit depth hierarchy 
level grid file hinrichs 
basic idea twolevel grid file second grid file manage grid directory 
levels called root direc multidimensional access methods 
level grid file 
tory coarsened version second level actual grid directory 
entries root directory contain pointers directory pages lower level turn contain pointers data pages 
having second level splits confined subdirectory regions affecting surroundings 
modification leads slower directory growth solve problem superlinear directory size 
furthermore hinrichs implicitly assumes second level kept main memory disk access principle holds 
shows level grid file running example 
cell root directory pointer corresponding entries subdirectory scales turn 
twin grid file 
twin grid file tries increase space utilization compared acm computing surveys vol 
june gaede nther original grid file introducing second grid file 
indicated name twin relationship grid files hierarchical case level grid file somewhat balanced 
grid files span universe 
distribution data files performed dynamically 
report average occupancy twin grid file compared original grid file substantial performance penalties 
illustrate underlying technique consider running example depicted 
assume bucket accommodate points 
number points bucket exceeds limit possibility create new bucket redistribute points new buckets 
doing twin grid file tries redistribute points grid files 
transfer points primary file secondary file may lead bucket overflow may imply bucket underflow may turn lead bucket merge reduction buckets objective minimize total number buckets grid files shift points resulting decrease number buckets outweighs increase number buckets strategy favors points placed primary file order form large empty buckets acm computing surveys vol 
june 
twin grid file 
secondary file 
consequently points associated empty full bucket region note usually exists unique optimum distribution data points files 
fact data points may grid files requires search operations visit files causes overhead 
performance results reported indicate search efficiency twin grid file competitive original grid file 
twin grid file somewhat inferior original grid file smaller query ranges changes larger search spaces 
multidimensional linear hashing 
multidimensional extendible hashing multidimensional linear hashing uses small directory 
occupies relatively little storage compared extendible hashing usually possible keep relevant information main memory 
different strategies proposed perform required address computation 
early proposals ouksel scheuermann failed support range queries kriegel seeger proposed variant linear hashing called multidimensional order preserving linear hashing partial expansions 
structure idea partially extending buckets expanding file size time 
dimensional expansion pointer referring group pages expanded 
strategy kriegel seeger guarantee modest file growth case behaved data 
experimental results outperforms competitors uniformly distributed data 
fails nonuniform distributions hashing function adapt gracefully distribution 
solve problem authors applied stochastic technique burkhard determine split points 
name technique quantiles access method called quantile hashing kriegel seeger 
critical property division quantile hashing original data may nonuniform distribution transformed uniformly distributed values 
values input algorithms retrieval update 
region boundaries necessarily simple binary intervals small directory needed 
exchange skewed input data maintained efficiently uniformly distributed data 
piecewise linear order preserving plop hashing proposed authors year kriegel seeger 
structure access method extended objects delay discussion section 
variant better properties reported 
dynamic hashing uses space filling technique called ordering orenstein guarantee points located close stored close disk 
ordering described detail section 
disadvantage hashing number useless data blocks generated interpolation grid file ouksel 
hand hashing lets multidimensional access methods buckets read row average seek required manages read 
widmayer noted hashing limited practice due inability adapt different data distributions 
hierarchical access methods section discuss pams binary multiway tree structure 
bang file buddy tree hybrid structures perform address computation 
hashing methods organize data points number buckets 
bucket usually corresponds leaf node tree called data node disk page contains points located corresponding bucket region 
interior nodes tree called index nodes guide search typically corresponds larger subspace universe contains bucket regions subtree 
search operation performed topdown tree traversal 
point individual tree structures dominate field generic concepts gradually attracting attention 
generalized search gist tree hellerstein example attempts subsume common features generic architecture 
differences individual structures mainly characteristics regions 
table shows pams regions tree level form partitioning universe mutually disjoint union complete space 
sams necessarily true show section overlapping regions partial coverage important techniques improve search performance sams 
acm computing surveys vol 
june gaede nther tree robinson 
tree combines properties adaptive tree bentley friedman tree comer handle multidimensional points 
partitions universe manner adaptive dtree associates resulting subspaces tree nodes 
interior node corresponds region 
regions corresponding nodes tree level mutually disjoint union complete universe 
leaf nodes store data points located corresponding partition 
tree tree perfectly balanced tree adapts distribution data 
trees minimum space utilization guaranteed 
tree running example sketched 
search queries answered straightforward manner analogously tree algorithms 
insertion new data point performs point search locate right bucket 
full entry inserted 
split acm computing surveys vol 
june 
tree 
half entries shifted new data node 
various heuristics available find optimal split robinson 
parent index node space left accommodate new entries new page allocated index node split hyperplane 
entries distributed pages depending position relative splitting hyperplane split propagated tree 
split index node may affect regions lower levels tree split hyperplane 
forced split effect possible guarantee minimum storage utilization 
deletion straightforward 
performing exact match query entry removed 
number entries drops threshold data node may merged sibling data node long union remains dimensional interval 
procedure find suitable sibling node merge may involve nodes 
union data pages results deletion hyperplane parent index node 
underflow occurs deletion propagated tree 
lsd tree 
list lsd local split decision tree point access method inventors emphasize structure managing extended objects 
claim fact lsd tree adapts data nonuniformly distributed suited connection transformation technique detailed discussion approach appears section 
directory lsd tree organized adaptive tree partitioning universe disjoint cells various sizes 
results better adaption data distribution fixed binary partitioning 
tree may arbitrarily unbalanced lsd tree preserves external balancing property heights external subtrees differ 
property maintained special paging algorithm 
structure large fit main memory algorithm identifies subtrees paged external balancing property preserved 
efficient special paging strategy obviously major impediment integration lsd tree general purpose database system 
shows lsd multidimensional access methods 
lsd tree 
tree running example external directory page 
indicated previously split strategy lsd tree assume data uniformly distributed 
contrary tries accommodate skewed data combining split strategies data dependent sp choice split depends data tries achieve balanced structure equal number objects sides split 
name structure suggests split decision locally 
distribution dependent sp split done fixed dimension position 
data taken account underlying known distribution assumed 
determine split position sp computes linear combination split locations result applying just strategies sp sp sp 
factor determined empirically data vary objects inserted deleted tree 
algorithms improve storage utilization lsd tree redistributing data entries buckets 
acm computing surveys vol 
june gaede nther strategies lsd tree sensitive insertion sequence splitting strategy adapted accordingly 
order improve search performance data range queries ller suggest storing auxiliary information existing data regions index entries lsd tree 
buddy tree seeger kriegel 
buddy tree dynamic hashing scheme treestructured directory 
tree constructed consecutive insertion cutting universe recursively parts equal size iso oriented hyperplanes 
interior node corresponds dimensional partition interval 
mbb points intervals 
partitions intervals correspond nodes tree level mutually disjoint 
tree structures leaves directory point data pages 
important properties buddy tree include directory node contains entries node split resulting subnodes recomputed reflect current situation root directory exactly pointer referring directory page 
due property buddy tree may balanced leaves directory may different levels 
property tries achieve high selectivity directory level 
properties sure growth directory remains linear 
avoid deadlock problem grid file buddy tree uses trees orenstein partition universe 
restricted number buddies admitted obtained recursive halving universe 
shown acm computing surveys vol 
june seeger kriegel number possible buddies larger grid file structures buddy tree flexible case updates 
experiments kriegel indicate buddy tree superior pams including hb tree bang file level grid file 
buddy tree running example shown 
older structures interpolation grid file ouksel balanced multidimensional extendible hash tree special cases buddy tree obtained restricting properties regions 
grid files avoid excessive growth grid file directory representing blocks explicitly guarantees directory entry data bucket 
disadvantage approach empty regions introduced case skewed data input 
seeger showed buddy tree easily modified handle spatially extended objects techniques section 
bang file 
obtain better adaption data points proposed new structure called bang balanced nested grid file differs grid file aspects 
similar grid file partitions universe intervals boxes 
different bang file bucket regions may intersect possible regular grid file 
particular form bucket regions geometric difference intervals nesting 
increase storage utilization possible insertion redistribute points different buckets 
manage directory bang file uses balanced search tree structure 
combination hash partitioning universe bang file viewed hybrid structure 
shows bang file running example 
rectangles cut universe 
turn rectangles nested respectively 
represents resulting space partitioning tree bit interleaving obtains structure shown right hand side 
asterisk represents empty string universe 
comparison shows bang file fact regarded version bd tree discussed section 
order achieve high storage utilization bang file performs spanning splits may lead displacement parts tree 
result point search may worst case require traversal entire directory depth manner 
address problem proposed different splitting strategies including forced splits tree 
strategies avoid multidimensional access methods 
buddy tree 
spanning problem possible expense lower storage utilization 
kumar similar proposal bd tree called resulting structure tree grid tree 
structure differs bd tree way partitions mapped buckets 
obtain simpler mapping tree sacrifices minimum storage utilization holds bd tree 
data partitioning feasible bd tree original bang file achieved bang file forced splits 
variant split root move example entry bucket containing entries 
proposed extension bang file handle extended objects 
pam extensions centroid determine bucket place object 
account object spatial extension bucket regions extended necessary seeger kriegel ooi 
acm computing surveys vol 
june gaede nther ouksel mayer proposed access method called nested interpolation grid file closely related bang file 
major difference concerns way directory organized 
essence directory consists list dimensional access methods trees storing order encoding different data regions pointers respective data buckets 
doing ouksel mayer improved worst case bounds case bang file logb bucket size 
hb tree lomet salzberg 
hb tree holey brick tree related tree utilizes trees organize space represented interior nodes 
noteworthy differences node splitting multiple attributes 
result nodes longer correspond dimensional intervals intervals smaller intervals excised 
similar bang file result somewhat fractal structure holey brick external enclosing region cavities called extracted regions 
show technique avoids cascading splits typical structures 
order minimize redundancy tree corresponding interior node leaves pointing child node 
strictly speaking hb tree longer tree acm computing surveys vol 
june 
bang file 
directed acyclic graph 
regard geometry corresponds union corresponding regions 
resulting region typically longer box shaped 
peculiarity illustrated shows hb tree running example 
root node contains pointers left descendant node 
corresponding region union rectangles left 
remaining space right lower quadrant excluded explicit entry ext corresponding dtree 
similar observation applies region shaped corresponds nw se ne quadrants rectangle 
searching similar tree internal tree traversed usual 
insertions carried analogously tree leaf node reaches capacity split required 
just single hyperplane split node hb tree split attribute internal tree data node split 
lomet salzberg show policy guarantees worst case data distribution resulting nodes observation restricted hb tree generalizes access methods bd tree bang file 
split leaf node causes additional tree node describe resulting subspace 
may turn lead split ancestor node tree 
trees height balanced splitting tree root may lead unbalanced distribution nodes 
tree usually split lower level corresponds excision convex region space corresponding node split 
entries belonging subspace extracted moved new hb tree node 
reflect absence excised region hb tree node assigned external marker indicates region longer simple interval 
technique problem forced splits avoided 
splits local propagated downwards 
summary leaf nodes internal trees collection data records hb tree nodes indicate part tree extracted 
ph thesis hb tree extended allow concurrency recovery modifying way special case tree lomet salzberg 
consequently new structure called hb tree 
result modifications new structure immediately take advantage multidimensional access methods 
hb tree 
tree node consolidation algorithm 
lack algorithm major weaknesses 
furthermore hb tree corrects flaw splitting posting algorithm hb tree may occur index levels 
essential idea correction impose restrictions splitting posting algorithms turn affects space occupancy 
minor problem remains mentioned hb tree may store child node 
number nodes may principle expose growth behavior superlinear number regions observation mainly theoretical interest 
authors hb tree quite rare leaf underlying tree refers child 
experiments index nodes data nodes 
bv tree 
bv tree represents attempt solve dimensional tree problem find generic generalization tree higher dimensions 
bv tree meant concrete access method conceptual framework applied variety existing access methods including bang file hb tree 
proposal acm computing surveys vol 
june gaede nther conjecture maintain major strengths tree higher dimensions provided relaxes strict requirements concerning tree balance storage utilization 
completely balanced 
furthermore tree guarantees worst case storage utilization argues comparatively high storage utilization ensured higher dimensions topological reasons 
bv tree manages achieve lower bound suggested lomet salzberg 
achieve guaranteed worst case search performance bv tree combines excision concept technique called promotion 
intervals lower levels tree moved tree closer root 
keep track resulting changes promoted region store level number called guard denotes region original level 
search algorithms notional backtracking technique 
descending tree store possible alternatives relevant guards different index levels guard set 
entries set act backtracking points represent single path root level currently inspected point queries maintained stack 
answer point query start root inspect node entries see cor acm computing surveys vol 
june 
bv tree 
responding regions overlap search point 
entries inspected choose best matching entry investigate 
may possibly store guards guard set 
level procedure repeated recursively time stored guards account 
best matching entry level guard set updated merging matching new guards existing ones 
guards level merged discarding poorer match 
search continues recursively reach leaf level 
note point queries length search path equal height bv tree region space represented unique node entry 
shows bv tree corresponding space partitioning running example 
illustration purposes confine grouped regions objects tight polyline loosely wrapped boundary 
example region acts guard 
clear space partitioning originally belongs bottom index level middle level 
functions guard enclosed region promoted root level 
suppose interested objects intersecting black rectangle starting root place guard set investigate 
inspection reveals search region included backtrack inspect entries 
example entry satisfies query 
discusses complexity issues related updates guards 
presence updates necessary downgrade demote entries longer guards may turn affect structure negatively 
logarithmic access performance minimum storage utilization bv tree preserved postponing demotion entries may lead large index nodes 
space filling curves point data mentioned main reason design multidimensional access methods difficult compared dimensional case total order preserves spatial proximity 
way dilemma find heuristic solutions look total orders preserve spatial proximity extent 
idea objects located close original space high probability close total order dimensional image space 
organization total order dimensional access method ab tree may provide performance point queries 
range queries somewhat complicated simple mapping multidimensional dimensional range queries implies major performance penalties 
herzog sophisticated efficient algorithm problem 
research underlying mapping problem goes back century see sagan survey 
regard relevance spatial searching samet provides overview subject 
thing proposals common multidimensional access methods partition universe grid 
grid cells labeled unique number defines position total order spacefilling curve 
points data set sorted indexed grid cell contained 
note labeling independent data obviously critical preservation proximity dimensional address space 
way label cells determines clustered adjacent cells stored secondary memory 
shows common labelings 
corresponds rowwise enumeration cells samet 
shows cell enumeration imposed peano curve morton called quad codes finkel bentley trees white locational codes abel smith ordering orenstein 
shows hilbert curve faloutsos roseman jagadish depicts gray ordering faloutsos obtained interleaving gray codes coordinates bitwise manner 
gray codes successive cells differ exactly bit 
experiments abel mark conclude ordering hilbert curve suitable multidimensional access methods 
jagadish faloutsos rong prefer hilbert curve 
ordering spatial access methods way commercial database products 
particular oracle adapted technique offered time product 
important advantage spacefilling curves practically insensitive number dimensions dimensional keys arbitrarily large 
mapped dimensional space favorite dimensional access method acm computing surveys vol 
june gaede nther applied manage data 
obvious disadvantage space filling curves incompatible index partitions joined recomputing codes indices 

spatial access methods multidimensional access methods previous section designed handle sets data points support spatial searches 
methods directly applicable databases containing objects spatial extension 
typical examples include geographic databases containing polygons mechanical cad data consisting dimensional polyhedra 
order handle extended objects point access methods modified techniques transformation object mapping overlapping regions object bounding clipping object duplication multiple layers 
acm computing surveys vol 
june 
space filling curves 
simpler version classification introduced seeger kriegel 
kriegel added dimension taxonomy spatial access method base type spatial data type supports primarily 
table shows resulting classification spatial access methods 
note structures interval base type 
sections techniques detail sams 
transformation dimensional access methods section pams section manage spatially extended objects provided objects transformed different representation 
essentially options transform object higher dimensional point hinrichs seeger kriegel transform set dimensional intervals means space filling curves 
discuss techniques turn 
mapping higher dimensional space 
simple geometric shapes represented points higher dimensional space 
example takes real numbers represent dimensional rectangle numbers may interpreted coordinates point possibility take coordinates diagonal corners endpoint transformation option centroid additional parameters extension object direction midpoint transformation 
transformation maps database rectangles database dimensional points managed pams discussed previous section 
search operations expressed point region queries dual space 
original database contains complex objects approximated example rectangle sphere transformation 
case point access method lead partial solution cf 

figures show dual space equivalents common queries 
uses endpoint transformation midpoint multidimensional access methods table 
classification sams kriegel transformation 
presentation purposes shows mapping intervals points figures show transformation result range query search range 
dual space range query maps general region query 
point dual space lies shaded areas corresponds interval original space overlaps search interval vice versa 
enclosure containment queries interval argument map general region queries figures 
point query maps range query endpoint transformation fig 
general region query midpoint transformation fig 

notwithstanding conceptual elegance approach disadvantages 
preceding examples indicate formulation point range queries dual space usually complicated original space nievergelt hinrichs 
finite search regions may map infinite search regions dual space complex queries involving spatial predicates may longer expressible acm computing surveys vol 
june gaede nther 
search queries dual space endpoint transformation intersection query containment enclosure queries point query 

search queries dual space midpoint transformation intersection query containment enclosure queries point query 
orenstein pagel 
second depending mapping chosen distribution points dual space may highly nonuniform original data uniformly distributed 
endpoint transformation example image points main diagonal faloutsos 
third images objects close original space may arbitrarily far apart dual space 
overcome problems faloutsos rong pagel proposed special transformation split strategies 
structure designed explicitly connection transformation technique lsd tree cf 
section 
performance studies confirm claim adapts nonuniform distributions particular relevance context 
contains mecha acm computing surveys vol 
june nism avoid searching large empty query spaces may occur result transformation 
space filling curves extended objects 
space filling curves cf 
section different type transformation approach fewer drawbacks listed previous section 
space filling curves represent extended objects list grid cells equivalently list dimensional intervals define position grid cells concerned 
words complex spatial object approximated simpler object union objects 
different variations basic concept including ordering orenstein hilbert tree kamel faloutsos ub tree bayer 
example discuss ordering detail 
discussion hilbert tree see section 
ordering orenstein peano curve 
simple algorithm obtain ordering representation extended object described follows 
starting fixed universe containing data object space split recursively subspaces equal size dimensional hyperplanes 
tree splitting hyperplanes iso oriented directions alternate fixed order possibilities 
subdivision continues conditions holds 
current subspace overlap data object 
current subspace fully enclosed data object 
level accuracy reached 
data object represented set cells called peano regions regions 
shown section peano region represented unique bit string called peano code st value dz expression 
bit strings cells stored standard dimensional index tree 
shows simple example 
shows polygon approximated frame represent multidimensional access methods 
ordering polygon 
ing universe 
splits starting vertical split line obtain 
peano regions different shapes sizes approximate object 
labeling peano region shown 
consider peano region lower left part polygon 
lies left vertical hyperplane horizontal hyperplane resulting bits 
partition lower left quadrant lies left second vertical hyperplane second horizontal hyperplane 
complete bit string accumulated far 
round decompositions lies right third vertical hyperplane third horizontal hyperplane resulting additional 
complete bit string describing 
figures give bit strings coordinate axes describe splits orthogonal axis 
string axis example describes subspace left vertical split right second vertical split 
bit interleaving bit strings finds projecting peano region coordinate axes obtain peano code 
note peano code prefix peano code peano region corresponding encloses peano re acm computing surveys vol 
june gaede nther corresponding 
peano region corresponding example encloses regions corresponding 
important observation query processing gaede 
shows peano regions running example 
ordering underlying grid resulting set peano regions usually approximation original object 
termination criterion depends accuracy granularity maximum number bits desired 
peano regions obviously yield accuracy increase size complexity approximation 
pointed orenstein possibly conflicting objectives number peano regions approximate object small results fewer index entries accuracy approximation high reduces expected number false drops orenstein gaede 
objects paged secondary memory find acm computing surveys vol 
june 
ordering 
satisfy search predicate 
simple way reduce number false drops add single bit encoding reflects peano region completely enclosed original object gaede 
advantage ordering local changes granularity lead local changes corresponding encoding 
overlapping regions key idea overlapping regions technique allow different data buckets access method correspond mutually overlapping subspaces 
method assign extended object directly single bucket region 
consider instance tree running example depicted polygons scenario say 
overlaps bucket regions containing containing 
extend regions accommodate polygon stored corresponding bucket 
note extension inevitably leads overlap regions 
search algorithms applied unchanged 
differences due fact overlap may increase number search paths follow 
point query may require investigation multiple search paths may subspaces index level include search point 
range region queries average number search paths increases 
functionality problem overlapping regions performance 
particularly relevant spatial database contains objects size large relative size universe 
typical examples known geographic applications represent objects widely varying size buildings states spatial database 
insertion new data object may increase overlap average number search paths traversed query 
eventually overlap subspaces may large render index ineffective ends searching index single query 
known example degenerate behavior observed tree guttman greene 
modifications mitigate problems including technique minimize overlap roussopoulos see section detailed discussion 
minor problem overlapping regions concerns ambiguities insertion 
insert new object principle enlarge subspace accommodate 
optimize performance exist strategies pagel 
example try find subspace causes minimal additional overlap requires enlargement 
takes long compute multidimensional access methods optimal strategy insertion heuristic may 
subspace needs split tries find split leads minimal overlap 
guttman greene beckmann suggest heuristics problem 
tree guttman 
tree corresponds hierarchy nested dimensional intervals boxes 
node tree corresponds disk page dimensional interval 
interior node intervals corresponding descendants contained 
intervals tree level may overlap 
leaf node dimensional minimum bounding box objects stored 
object turn stores mbb complete object description 
properties tree include 
node contains entries root 
lower bound prevents degeneration trees ensures efficient storage utilization 
number node descendants drops node deleted descendants distributed sibling nodes tree condensation 
upper bound derived fact tree node corresponds exactly disk page 
root node entries leaf 
tree height balanced leaves level 
height tree log index records 
searching tree similar tree 
index node index entries tested see intersect search interval visit child nodes 
due overlapping region paradigm may intervals satisfy search predicate 
worst case may acm computing surveys vol 
june gaede nther visit index page 
shows tree running example 
remember mi denote polygonal data objects ri 
point query search point results paths 
tree manages solve search problem completely course actual data objects 
result rtree query set candidate objects actual spatial extent tested intersection search space cf 
fig 

step may involve additional disk accesses considerable computation taken account published performance analyses guttman greene 
insert object insert minimum bounding interval object tree 
contrast searching traverse single path root leaf 
level choose child node corresponding interval needs enlargement enclose data object interval 
intervals satisfy criterion guttman proposes selecting descendant associated smallest interval 
result insert object object dispersed buckets 
reached leaf level try insert object 
requires acm computing surveys vol 
june 
tree 
enlargement corresponding bucket region adjust appropriately propagate change upwards 
space left leaf split distribute entries old new page 
adjust new intervals accordingly propagate split tree 
deletion perform exact match query object question 
find tree delete 
deletion causes underflow check bounding interval reduced size 
perform adjustment propagate upwards 
deletion causes node occupation drop copy node content temporary node remove index 
propagate node removal tree typically results adjustment bounding intervals 
reinsert orphaned entries temporary node 
alternatively merge orphaned entries sibling entries 
cases may adjust bounding intervals tree 
original guttman discusses various policies minimize overlap insertion 
node splitting example guttman suggests algorithms including simpler linear time complexity elaborate quadratic complexity 
researchers led development sophisticated policies 
packed tree roussopoulos example computes optimal partitioning universe corresponding minimal tree scenario 
requires data known priori 
interesting variants rtree include sphere tree hilbert tree kamel faloutsos 
sphere tree corresponds hierarchy nested dimensional spheres intervals 
hilbert tree combines overlapping regions technique space filling curves cf 
section 
stores hilbert values data rectangles centroids tree enhances interior tree node mbb subtree 
facilitates insertion new objects considerably 
revised splitting policy kamel faloutsos report performance results searches updates 
splitting policy takes objects centroids account performance structure deteriorate presence large objects 
ng kameda discuss support concurrency trees adopting lock coupling technique trees bayer trees 
similarly ng kameda banks apply ideas link tree lehman multidimensional access methods 
tree 
yao trees yielding structures called link tree 
banks empirically demonstrate link tree superior tree lock coupling 
tree beckmann 
careful study rtree behavior different data distributions beckmann identified weaknesses original algorithms 
particular confirmed observation roussopoulos insertion phase critical search performance 
design tree see introduces policy called forced reinsert node overflows split right away 
entries removed node reinserted tree 
parameter may vary beckmann suggest maximal number entries page 
issue investigated beckmann concerns node splitting policy 
guttman tree algorithms tried minimize area covered bucket regions tree algorithms take objectives account 
overlap bucket regions tree level minimized 
overlap smaller probability follow multiple search paths 
region perimeters minimized 
preferred rectangle acm computing surveys vol 
june gaede nther square compact rectangular representation 
storage utilization maximized 
improved splitting algorithm beckmann plane sweep paradigm preparata shamos 
dimensions time complexity log node intervals 
summary tree differs tree mainly insertion algorithm deletion searching essentially unchanged 
beckmann report performance improvements compared basic tree 
implementation shows reinsertion may improve storage utilization 
broader comparisons hoel samet nther gaede cpu time overhead reinsertion substantial especially large page sizes see section details 
major insights tree node splitting critical performance access method 
naive exhaustive approach time complexity intervals need efficient optimal splitting policies 
becker proposed polynomial time algorithm finds balanced split optimizes possible objective functions minimum sum areas minimum sum perimeters 
assume analysis intervals specific order 
ang tan new linear node splitting algorithm simple heuristic 
results reported outperforms competitors 
berchtold proposed modification tree called particularly suited indexing high dimensional data 
tree reduces overlap directory intervals new organization node splitting introducing supernodes nodes larger acm computing surveys vol 
june usual block size 
order find suitable split tree maintains history previous splits 
tree jagadish 
applications intervals approximation data objects enclosed 
order combine flexibility polygon shaped containers simplicity tree jagadish independently proposed different variations polyhedral trees trees 
distinguish structures refer tree jagadish jp tree tree sp tree 
jp tree introduces variable number orientations dimensional universe instance dimensions may orientations parallel coordinate axes iso oriented parallel main diagonals 
objects approximated minimum bounding polytopes faces parallel orientations 
clearly quality approximations positively correlated map original space dimensional orientation space dimensional approximating polytope turns dimensional interval point inside outside maps point inside outside opposite necessarily true 
maintain dimensional intervals large selection sams available jagadish suggests tree tree cf 
section purpose 
interesting feature jp tree ability add hyperplanes attribute space dynamically having reorganize structure 
projecting new intervals extended orientation space old orientation space possible old structure 
consequently obtain tree higherdimensional jp tree structure drop ping hyperplanes 
interior nodes jp tree represent hierarchy nested polytopes similar tree cell tree cf 
section 
polytopes corresponding different nodes tree level may overlap 
search operations compute minimum bounding polytope search region map dimensional interval 
search efficiency depends chosen pam 
applies deletion 
additional hyperplanes yields better approximation increases size entries reducing fanout interior nodes 
experiments reported jagadish suggest dimensional orientation space choice storing dimensional lines arbitrary orientation 
needs compared simple mbb approach 
technique may render poor approximations representation requires numbers line 
storing dimensional interval hand requires numbers times 
drawback jp tree fixed orientation hyperplanes 
shows running example 
overcome problem poor filtering brodsky proposed methods effectively computing set optimal axes separating multidimensional access methods 
tree jagadish 
dra 
continues line jagadish nonstandard axes better filtering 
tree 
tree called chooses slightly different approach storing polygonal objects tries combine advantages cell tree tree twodimensional case avoiding drawbacks methods 
basically sp tree tree interior nodes correspond nesting polytopes just rectangles 
general number vertices storage requirements polytope bounded 
approximating objects accuracy approximation positively correlated number vertices approximating convex polygon 
hand index entries upper bound order guarantee minimum fanout interior nodes 
determine reasonably compromise conflicting objectives extensive investigations conducted brinkhoff 
studies hexagons offer best tradeoff storage requirements approximation quality 
node splittings insertions lead additional vertices bounding polygons vertices acm computing surveys vol 
june gaede nther threshold surplus vertices removed 
leads larger area decrease quality approximation 
reduce overlap convex containers suggests method similar tree 
furthermore order save storage space improve storage utilization possible restrict number orientations polygon edges similar jp tree 
shows sp tree running example 
knowledge performance results reported far trees 
tree ooi ooi 
variant tree capable storing spatially extended objects spatial tree tree 
tree allows regions overlap 
keep track mutual overlap store upper lower bound discriminator representing maximal extent objects subtrees 
example consider splitting hyperplane discriminator hx depicted upper lower bounds bx bx respectively 
solid lines splitting hyperplanes dashed lines represent upper lower bounds corresponding subtrees 
rectangle closest hx crossing determining maximum extent bx objects left lower subspace 
similarly determines minimum extent bx right acm computing surveys vol 
june 
tree 
subspace 
objects placed corresponding subspace crosses splitting hyperplane lower bound upper interval greater discriminator upper bound lower interval leaf nodes binary tree contain minimal bounds dotted lines objects corresponding data page 
prior inserting object determine centroid mbb 
comparing centroid stored discriminators determine child inspected 
note ambiguity 
insertion adjust upper lower bounds extended objects accordingly 
reaching data node level test space available accommodate object 
insert object split data node insert new discriminator tree 
likewise bounds new subspaces need adjusted 
usual searching starts root corresponds top tree traversal 
interior node check discriminator boundaries decide child ren visit 
deleting object starts exact match query determine correct leaf node 
deletion causes underflow insert remaining entries sibling data node remove splitting hyperplane 
insertion results overflow split page insert new hyperplane tree 
merge sibling leaf node possible delete leaf parent node 
redirecting sibling interior node extend subspace sibling 
affected entries reinserted 
results reported ooi ooi tree competitive tree storage utilization search efficiency 
tree 
tree generalized bd tree extension bd tree allows secondary storage management supports management extended objects 
bd tree binary tree tree balanced multiway tree stores spatial objects hierarchy minimum bounding boxes 
leaf node bucket stores objects centroids contained corresponding bucket region 
interior node stores mbb usually overlapping descendants 
intervals encoded dz expressions described section 
advantage tree tree insertions deletions may processed efficiently due encoding scheme placement centroid 
multidimensional access methods 
tree 
point enables tree perform insertion single path root leaf 
apparent advantage gained search performance 
reported performance experiments compare storage utilization insertion performance tree 
important comparison search performance omitted 
depicts tree running example 
partitioning left hand side shows minimum bounding boxes dotted dashed underlying intervals peano regions 
approaches similar tree extension buddy tree seeger extension bang file handle extended spatial objects 
plop hashing kriegel seeger seeger kriegel 
piecewise linear order preserving plop hashing seeger kriegel variant hashing allows storage extended objects transforming points 
earlier version structure kriegel seeger able handle multidimensional point data 
plop hashing partitions universe similar way grid file extended objects may span directory cell 
hyperplanes extend axes data space 
organization hyperplanes plop acm computing surveys vol 
june gaede nther hashing uses binary trees dimension universe 
interior node binary tree corresponds dimensional hyperplane 
leaf nodes represent dimensional subspaces forming slices universe 
depicts binary trees axes slices formed 
index entries stored leaf nodes easily identify data page looking 
efficiently keep binary trees main memory similar scales grid file 
speedup leaf nodes binary tree linked 
suggested arrows attached leaves trees 
handle extended objects enlarge storage representation slice lower upper bound 
bounds indicate minimum maximum extension current dimension objects stored slice hand 
insertion straightforward similar grid file 
avoid ambiguities plop hashing uses centroid object determine data bucket place object 
case node splitting deletion adjust respective upper lower bounds 
noted plop hashing easily modified supports clipping overlapping regions 
acm computing surveys vol 
june 
tree 
analytical experiments indicate plop hashing superior tree tree uniform data distributions seeger kriegel 
clipping clipping schemes allow overlaps bucket regions mutually disjoint 
typical access method kind tree stonebraker sellis variant tree allows overlap regions corresponding nodes tree level 
result point queries follow single path starting root means efficient searches 
main problems approaches relate insertion deletion data objects 
insertion data object spans bucket region subdivided partitioning hyperplanes 
eventually bucket entries created object 
bucket stores geometric description complete object object duplication geometric description corresponding fragment object 
case data object dispersed data pages spanning property 
resulting redundancy orenstein nther gaede may cause increase average search time increase frequency bucket overflows 
second problem applies access methods partition complete data space 
case insertion new data object may lead enlargement bucket regions 
object fragment thereof passed bucket case tree structure interior node region cover region extended 
cases enlargement possible getting overlap bucket regions called deadlock problem clipping 
overlap allowed compute new region structure complicated 
may particular cause bucket overflows insertions lead chain reaction worst case complete breakdown structure nther bilmes 
access methods partitioning complete data space suffer problem 
multidimensional access methods 
plop hashing 
final problem concerns splitting buckets 
may situations bucket corresponding region split splitting hyperplane splits objects bucket 
split may trigger splits may problematic increasing size database 
objects inserted higher probability splits smaller average size bucket regions 
new objects split larger number smaller fragments may worst case lead chain reaction 
alleviate problems nther suggest storing large objects split large number fragments special buckets called shelves inserting structure 
extended tree matsuyama 
earliest extensions adaptive tree handle extended objects acm computing surveys vol 
june gaede nther extended tree 
contrast tree section extended tree clipping 
interior tree node corresponds dimensional partitioning hyperplane represented dimension splitting coordinate discriminator 
leaf node corresponds rectangular subspace contains address data page describing subspace 
data pages may referenced multiple leaf nodes 
insert object start root tree 
interior node test intersection stored hyperplane 
depending location object relative hyperplane move corresponding child node clip object hyperplane follow branches 
procedure guarantees insert object overlapping bucket regions 
data page accommodate additional object split page new hyperplane 
splitting dimension perpendicular dimension greatest extension 
distributing entries data page new pages insert hyperplane tree 
note may turn cause objects split may lead page overflows 
delete object visit subspaces intersecting object delete stored object identifier 
data page empty due deletion remove mark leaf acm computing surveys vol 
june 
extended tree 
nodes pointing page nil 
merging sibling nodes performed 
depicts extended dtree running example 
rectangle clipped inserted nodes 
partitions contain additional bounding hyperplanes dotted lines provide better localization objects corresponding subspace 
tree stonebraker sellis 
overcome problems associated overlapping regions tree sellis introduced access method called tree 
tree tree uses clipping overlap index intervals tree level 
objects intersect index interval stored different pages 
result policy point searches trees correspond single path tree traversals root leaves 
tend faster corresponding tree operation 
range searches usually lead traversal multiple paths structures 
inserting new object may follow multiple paths depending number intersections mbb index intervals 
tree traversal may split disjoint fragments ii ii 
fragment placed different leaf node provided space insertion straightforward 
bounding interval overlaps space covered enlarge intervals corresponding leaf nodes 
may require considerable effort overlaps avoided 
rare cases may possible increase current intervals way cover new object mutual overlap nther ooi 
case deadlock data intervals split reinserted tree 
leaf node overflows split 
node splittings similarly case tree 
important difference splits may propagate tree tree 
resulting forced split nodes may lead complications including fragmentation data intervals see example rectangles 
deletion locate data nodes fragments object stored remove 
storage utilization drops threshold try merge affected node siblings reorganize tree 
possible reason tree guarantee minimum space utilization 
multidimensional access methods 
tree 
cell tree nther 
main goal design cell tree nther facilitate searches data objects arbitrary shapes especially data objects intervals 
cell tree uses clipping manage large spatial databases may contain polygons higher dimensional polyhedra 
corresponds decomposition universe disjoint convex subspaces 
interior nodes correspond hierarchy nested polytopes leaf node corresponds subspaces 
tree node stored disk page 
avoid disadvantages resulting clipping convex polyhedra restricted subspaces bsp binary space partitioning 
view cell tree combination bsp tree bsp tree mapped paged secondary memory 
order minimize number disk accesses occur search operation leaf nodes cell tree contain information required answering search query load pages containing relevant data 
important advantage cell tree tree related structures 
inserting nonconvex object decompose number convex components union orig acm computing surveys vol 
june gaede nther inal object 
components mutually disjoint 
components assigned object identifier inserted cell tree 
due clipping may subdivide component cells insertion overlaps subspace 
cell stored leaf node cell tree 
insertion causes disk page overflow split corresponding subspace cell tree node distribute descendants resulting nodes 
split may propagate tree 
point searches start root tree 
underlying bsp partitioning identify subspace includes search point continue search corresponding subtree 
step repeated recursively reach leaf node examine cells see contain search point 
solution consists objects contain cells qualify 
similar algorithm exists range searches 
performance evaluation cell tree nther bilmes shows competitive popular spatial access methods 
shows running example partitioning hyperplanes stored interior nodes 
partitioning means bsp tree offers flexibility rectilinear hyperplanes clipping acm computing surveys vol 
june 
cell tree 
objects may inevitable 
split insert resulting cells pages 
structures clipping cell tree cope fragmentation space increasingly problematic objects inserted tree 
time new objects split fragments insertion 
avoid negative effects fragmentation nther proposed concept shelves 
shelves special disk pages attached interior nodes tree accommodate objects split fragments inserted regularly 
authors propose dynamically adjusting threshold choosing placing new object shelf inserting regularly 
performance results nther gaede show substantial improvements compared cell tree shelves 
multiple layers multiple layer technique regarded variant overlapping regions approach data regions different layers may overlap 
important differences 
layers organized hierarchy 
second layer partitions complete universe different way 
third data regions layer disjoint overlap 
fourth data regions adapt spatial extensions corresponding data objects 
order get better understanding multilayer technique discuss insert extended object 
try find lowest layer hierarchy hyperplanes split new object 
layer insert object corresponding data page 
insertion causes page overflow done 
split data region introducing new hyperplane distribute entries accordingly 
objects intersecting hyperplane moved higher layer overflow page 
database populated data space lower layers fragmented 
result large objects keep accumulating higher layers hierarchy worse longer possible insert objects intersecting existing hyperplanes 
multilayer approach offer advantage overlapping regions technique possibly higher selectivity searching due restricted overlap different layers 
disadvantages multilayer approach suffers fragmentation may render technique inefficient data distributions certain queries require inspection existing layers clear cluster objects spatially close different layers ambiguity layer place object 
early static multilayer access method mx cif quadtree kedem abel smith samet 
structure stores extended spatial object quadtree node associated quadrant provides tightest fit intersecting object 
objects node organized means binary trees 
sevcik koudas proposed similar sam multiple multidimensional access methods layers called filter tree 
mx cif quadtree layer result regular subdivision universe 
new object assigned unique layer depending object position extension 
objects layer sorted hilbert code center packed data pages size 
largest hilbert code data page inserted tree 
continue detailed description dynamic sams multiple layers 
multilayer grid file widmayer 
variant grid file capable handling extended objects multilayer grid file confused multilevel grid file whang krishnamurthy 
multilayer grid file consists ordered sequence grid layers 
layers corresponds separate grid file freely splitting hyperplanes covers universe 
new object inserted grid file sequence imply clipping object 
important difference twin grid file see section objects moved freely layers 
grid files extended adding splitting hyperplane objects split moved layer 
illustrates multilayer grid file layers running example 
multilayer grid file size bucket regions typically increases sequence larger objects find final location layers 
new object stored current layers clipping new layer allocated 
alternative allow clipping layer 
widmayer claim layers sufficient store set dimen acm computing surveys vol 
june gaede nther sional intervals clipping hyperplanes cleverly chosen 
exact match query easily determine scales grid file sequence supposed hold search interval 
search queries particular point range queries answered traversing sequence layers performing corresponding search grid file 
performance results reported widmayer suggest multilayer grid file superior conventional grid file clipping handle extended objects 
possible disadvantages multilayer grid file include low storage utilization expensive directory maintenance 
file 
overcome problems multilayer grid file proposed alternative structure managing sets rectangles called file see example 
order avoid low storage utilization multilayer grid file file uses single directory 
universe partitioned similarly bang file splitting hyperplanes cut universe recursively equal parts ordering encode resulting bucket regions 
contrast bang file 
bucket regions may overlap clipping 
data interval stored bucket smallest region contains entirely acm computing surveys vol 
june 
multilayer grid file 
overflow pages may necessary cases 
interesting feature file splitting algorithm 
cutting bucket region halves retain original bucket region create new bucket halves original region 
data intervals assigned new bucket completely contained corresponding region 
half chosen way distribution data intervals resulting buckets 
region split may subsequently split algorithm 
objects located near middle universe intersect partitioning hyperplanes assigned cell region corresponding universe 
objects cell tend cluster near splitting hyperplanes cf 
rectangle 
avoid searching dead space file maintains minimum enclosing boxes stored objects called search regions 
shown feature encoding partitions file competitive tree 
drawback file fact partitions entire space tree indexes part universe contains objects 
data distributions nonuniform file performs poorly 
disadvantage file shares grid file 
widmayer notes file algorithmically complicated 
comparative studies section give brief overview theoretical experimental results comparison different access methods 
unfortunately number evaluations especially theoretical analyses limited 
greene compares search performance tree btree tree uniformly distributed rectangles varying size 
query parameters include size query rectangles page size 
greene study shows tree really compete tree variants 
hand difference tree tree significantly difficult code 
expected multidimensional access methods 
file 
tree performs better overlap data rectangles 
kriegel extensive experimental study performance variety point distributions 
study involves point access methods hb tree bang file level grid file buddy tree 
authors decided include plop hashing performance suffers considerably nonuniform data 
tree orenstein included authors considered bang file improvements strategy 
kriegel include quantile hashing claim kriegel seeger structure efficient nonuniform data 
benchmarks buddy tree degree bang file outperform structures 
reported results show impressive way performance acm computing surveys vol 
june gaede nther access methods studied varies different data distributions query range sizes 
clustered data query range size size universe performance difference buddy tree bang file 
size query range drops size universe buddy tree performs twice fast 
extended objects kriegel compared tree buddy tree bang file 
techniques enhanced transformation technique handle rectangles 
buddy tree bang file outperformed access methods nearly data distributions 
note benchmarks measured number page accesses cpu time 
beckmann compared tree variants rtree variety data distributions 
performance different structures point intersection enclosure queries varying query region sizes compared spatial join performance 
tree clear winner data distributions queries best storage utilization insertion times 
comparison point data confirms results 
similarly previous performance measurements number disk accesses measured 
related study kamel faloutsos finds better search results hilbert tree updates take time tree 
impact global clustering search performance tree investigated brinkhoff kriegel 
kamel hilbert codes bulk insertion dynamic trees 
seeger studied relative performance clipping overlapping regions transformation techniques implemented top buddy tree 
included level grid file tree comparison 
acm computing surveys vol 
june buddy tree clipping grid file failed completely certain distributions produced large files 
transformation technique supports fast insertions expense low storage utilization 
tree hand requires fairly long insertion times offers storage utilization 
intersection containment queries buddy tree combined overlapping regions continuously superior buddy tree transformation 
performance advantage overlapping regions technique decreases larger query regions buddy tree transformation outperforms buddy tree overlapping regions 
data set contains uniformly distributed rectangles varying size buddy tree clipping outperforms techniques intersection enclosure queries 
queries buddy tree overlapping performs slightly better tree 
ooi compares static dynamic variant tree packed tree described roussopoulos 
large page sizes tree clearly outperforms tree terms page accesses search operation 
space requirements tree higher tree 
tree stores extended objects centroids containment queries answered efficiently tree 
behavior clearly reflected performance results 
comparison extended tree enhanced overflow pages suggests tree superior extended tree clipping performs uniformly distributed data 
nther bilmes compare tree clipping access methods cell tree tree 
studies data sets consist convex polygons just rectangles 
cell tree requires twice space competitors 
average number page accesses search operation access methods 
advantage tends increase size database size query regions 
measurements number page faults cpu time measurements 
nther gaede compare original cell tree nther cell tree shelves nther tree beckmann hb tree lomet salzberg real cartographic data 
slight performance advantage cell tree shelves compared tree hb tree major difference original cell tree 
earlier comparison artificially generated data nther 
studies suggest shelves may lead significant improvements access methods clipping 
compares query times kd tree sphere tree tree different queries 
kd tree paged version kd tree turn variant bsp tree 
structures differ aspects interior node stores iso oriented lines allow overlap gaps corresponding partition lines clip object handled unit 
kd tree outperforms tree queries sphere tree inferior tree 
hoel samet compare performance pmr quadtree nelson samet tree tree indexing line segments 
tree shows best insertion performance tree occupies space 
insertion behavior tree heavily depends page size 
performance structures compared pmr quadtree shows multidimensional access methods slight performance benefits 
tree compact structures search performance tree line segments 
unfortunately hoel samet report performance times different queries 
carried similar performance comparison quadtree variants variant tree tree 
study different structures implemented top commercial object oriented system application programmer interface 
difference hoel samet polygons line segments test data 
furthermore report various times index traversal loading polygons 
showing tree quadtree variant hierarchical tamminen outperform tree point queries clearly demonstrate database system provide means physical clustering 
reading single index page may induce page faults 
smith gao compare performance variant tree grid file tree tree insertions deletions search operations 
measured storage utilization 
experiments ordering grid file perform insertions deletions deliver poor search performance 
trees contrast offer moderate insertion deletion performance superior search performance 
tree performs slightly better tree search operations authors conclude tree choice general purpose applications due potentially poor space utilization 
showed file performance advantage tree data set containing rectangles high degree overlap point acm computing surveys vol 
june gaede nther database covered rectangles average 
experimental studies tree related structures frank barrera kamel faloutsos stonebraker 
splitting data buckets important operation structures studied split strategies 
theoretical analysis verified means lsd tree 
provide performance results tree uses splitting strategy comparison unchanged tree 
empirical performance comparison tree improved variant hashing called layered hashing lz hashing 
proposed structure needs significantly seek operations tree average storage utilization higher 
jagadish studies properties different space filling curves gray coding 
means theoretical considerations experimental tests concludes hilbert mapping multidimensional space line superior spacefilling curves 
results accordance abel mark 
trying summarize experimental comparisons multidimensional access methods best performing ones alphabetical order buddy hash tree seeger kriegel cell tree shelves nther gaede hilbert tree kamel faloutsos kd tree pmr quadtree nelson samet tree sellis tree beckmann acm computing surveys vol 
june emphasized ranking needs great care 
clever programming inherent deficiencies access method vice versa 
factors unpredictable impact include hardware buffer size page size data sets 
note list take account access methods comparative analyses published 
preceding discussion shows numerous experimental studies exist hardly comparable 
theoretical studies may bring objectivity discussion 
problem studies usually hard perform wants stick realistic modeling assumptions 
reason theoretical results comparison multidimensional access methods 
regnier becker investigated grid file variants 
complete theoretical analysis range trees overmars smid overmars 
nther gaede theoretical analysis cell tree 
analyses show theory fractals particularly suitable modeling behavior sams data distribution nonuniform 
analytical exists tree related methods 
comparison tree tree published faloutsos 
pagel interesting probabilistic model window query performance comparison different access methods independent implementation details 
things model reveals importance perimeter criterion node splitting intuitively anticipated see faloutsos kamel faloutsos faloutsos gaede papadopoulos manolopoulos 
inventors tree beckmann 
central formula pagel compute number disk accesses tree independently kamel faloutsos 
faloutsos kamel refined formula properties data set 
theodoridis sellis proposed theoretical model determine number disk accesses tree requires parameters amount data density data space 
model extends nonuniform distributions 
pursuit implementation independent comparison criterion access methods pagel suggest degree clustering 
lower bound assume optimal clustering static situation complete data set exposed 
incidentally significance clustering access methods demonstrated numerous empirical investigations 
area constraint database systems see gaede wallace survey number interesting papers related multidimensional access methods published 
kanellakis example structure guarantees certain worst case bounds space search insertion 
subramanian ramaswamy hellerstein complement proving important lower upper bounds 
sexton stuckey look indexing language point view 
regarded generalization hellerstein proposed generic framework modeling hierarchical access methods 

research spatial database systems resulted multitude spatial see jagadish kamel faloutsos brinkhoff kriegel kumar ng han 
multidimensional access methods access methods 
experts difficult recognize merits weaknesses new method claim superiority access method previously published 
survey try resolve problem give overview pros cons variety structures 
come surprise reader access method proven superior competitors sense 
benchmark declares structure clear winner benchmark may prove structure inferior 
comparisons difficult 
different criteria define optimality parameters determine performance 
time space efficiency access method strongly depend data processed queries asked 
access method performs reasonably iso oriented rectangles may fail arbitrarily oriented lines 
strongly correlated data may render fast access method irrelevant practical application 
index optimized point queries may highly inefficient arbitrary region queries 
large numbers insertions deletions may deteriorate structure efficient static environment 
initiative kriegel set standardized testbed benchmarking comparing access methods different conditions important step right direction 
world wide web provides convenient infrastructure access distribute benchmarks nther 
remains far easy compare rank different access methods 
experimental benchmarks need studied care indicator usability 
comes technology transfer access methods commercial products vendors resort structures easy un acm computing surveys vol 
june gaede nther implement 
quadtrees siemens informationssysteme ag smallworld gis newell doe trees informix informix ordering oracle oracle typical examples 
performance minor importance selection comes surprise relatively small differences methods virtually published analyses 
tendency take structure simple robust optimize performance highly tuned implementation tight integration system components 
implementation experimental evaluation access methods essential reveals deficiencies problems obvious design theoretical model 
order comparative evaluations easier perform easier verify essential provide platform independent access implementations broad variety access methods 
extensions world wide web including mmm project nther may provide right technological base paradigm change 
published includes url uniform resource locator internet address points implementation possibly standardized user interface transparency increase substantially 
users rely general wisdom experiments select access method provides best fit current application 
acknowledgments working survey pleasure discussions colleagues 
special go abel buchmann faloutsos frank freytag hellerstein 
kriegel nievergelt orenstein 
rotem 
salzberg samet schneider scholl seeger sellis sexton widmayer 
acm computing surveys vol 
june referees detailed insightful comments 
abel mark 
comparative analysis dimensional orderings 
int 

inf 
syst 

abel smith 
data structure algorithm linear key rectangle retrieval problem 
comput 
vis 

ang tan 
new linear node splitting algorithm trees 
advances spatial databases scholl eds lncs springer verlag berlin heidelberg new york 
aref samet 
spatial filter revisited 
proceedings sixth international symposium spatial data handling 
bayer 
universal tree multidimensional indexing 
tech 
rep technische universit nchen munich germany 
www leo org pub comp doc techreports tum informatik report tum ps gz 
bayer mccreight 
organization maintenance large ordered indices 
acta inf 

bayer 
concurrency operations trees 
acta inf 

becker widmayer 
enclosing boxes optimal pair boxes 
proceedings stacs finkel eds lncs springer verlag berlin heidelberg new york 
becker 
new algorithm cost model join processing grid file 
ph thesis universit siegen germany 
beckmann kriegel schneider seeger 
tree efficient robust access method points rectangles 
proceedings acm sigmod international conference management data 
faloutsos 
estimating selectivity spatial queries correlation fractal dimension 
proceedings st international conference large data bases 
bentley 
multidimensional binary search trees associative searching 
commun 
acm 
bentley 
multidimensional binary search database applications 
ieee trans 
softw 
eng 

bentley friedman 
data structures range searching 
acm comput 
surv 

berchtold keim kriegel 

tree index structure high dimensional data 
proceedings nd international conference large data bases bombay 
meek van den 
generalized grid file description performance aspects 
proceedings sixth ieee international conference data engineering 
brinkhoff 
der spatial join 
ph thesis ludwig maximilians universit nchen 
germany german 
brinkhoff kriegel 

impact global clustering spatial database systems 
proceedings twentieth international conference large data bases 
brinkhoff kriegel schneider 
comparison approximations complex objects approximation query processing spatial database systems 
proceedings ninth ieee international conference data engineering 
brinkhoff kriegel seeger 
efficient processing spatial joins trees 
proceedings acm sig mod international conference management data 
brinkhoff kriegel schneider seeger 
multi step processing spatial joins 
proceedings acm sig mod international conference management data 
brodsky lassez lassez maher 
separability polyhedra optimal filtering spatial constraint data 
proceedings fourteenth acm sigact sigmod sigart symposium principles database systems san jose ca 
burkhard 
index maintenance non uniform record distributions 
proceedings third acm sigact sigmod symposium principles database systems 
burkhard 
interpolation index maintenance 
bit 
chen keating louis rotem shoshani 
access multidimensional datasets tertiary storage systems 
inf 
syst 

comer 
ubiquitous tree 
acm comput 
surv 

sorenson 
algorithms bd trees 
softw 
pract 
exper 

multidimensional access methods sorenson 
improved partial match search algorithms bd trees 
comput 

egenhofer 
spatial query languages 
ph thesis university maine egenhofer 
spatial sql query presentation language 
ieee trans 
knowl 
data eng 


hb tree concurrent recoverable multi attribute index structure 
ph thesis northeastern university boston ma 
lomet salzberg 
hb tree modified hb tree supporting concurrency recovery node consolidation 
proceedings st international conference large data bases 
fagin nievergelt pippenger strong 
extendible hashing fast access method dynamic files 
acm trans 
database syst 

faloutsos 
multiattribute hashing gray codes 
proceedings acm sigmod international conference management data 
faloutsos 
gray codes partial match range queries 
ieee trans 
softw 
eng 

faloutsos gaede 
analysis dimensional quadtrees hausdorff fractal dimension 
proceedings nd international conference large data bases bombay 
faloutsos kamel 
uniformity independence analysis trees concept fractal dimension 
proceedings thirteenth acm sigact sigmod sigart symposium principles database systems 
faloutsos rong 
dot spatial access method fractals 
proceedings seventh ieee international conference data engineering 
faloutsos roseman 
fractals secondary key retrieval 
proceedings eighth acm sigact sigmod sigart symposium principles database systems 
faloutsos sellis roussopoulos 
analysis object oriented spatial access methods 
proceedings acm sigmod international conference management data 
finkel bentley 
quad trees data structure retrieval composite keys 
acta inf 

flajolet 
performance evaluation extendible hashing trie searching 
acta inf 

acm computing surveys vol 
june gaede nther frank barrera 
data structure geographic information systems 
design implementation large spatial database systems buchmann nther smith 
wang eds lncs springer verlag berlin heidelberg new york 

bang file new kind grid file 
proceedings acm sig mod international conference management data 

advances design bang file 
proceedings third international conference foundations data organization algorithms lncs springer verlag berlin heidelberg new york 

behaved structure storage geometric objects 
design implementation large spatial database systems buchmann nther smith 
wang eds lncs springer verlag berlin heidelberg new york 

general solution dimensional tree problem 
proceedings acm sigmod international conference management data 

complexity updates 
proceedings cdb cp workshop constraint databases application gaede brodsky nther srivastava vianu wallace eds lncs springer verlag berlin heidelberg new york 
fuchs 
near real time shaded display rigid objects 
computer graph 

fuchs kedem naylor 
visible surface generation priori tree structures 
computer graph 

gaede 
geometric information spatial query processing efficient 
proceedings third acm international workshop advances geographic information systems acm gis baltimore md 
gaede 
optimal redundancy spatial database systems 
advances spatial databases egenhofer herring eds lncs springer verlag berlin heidelberg new york 
gaede 

spatial access methods query processing object oriented gis 
proceedings workshop delft netherlands netherlands geodetic commission 
gaede wallace 
informal constraint databases 
proceedings cdb cp workshop constraint databases application acm computing surveys vol 
june gaede brodsky nther srivastava vianu wallace eds lncs springer verlag berlin heidelberg new york 
garg 
key transformation 
acm trans 
database syst 

greene 
implementation performance analysis spatial data access methods 
proceedings fifth ieee international conference data engineering 
nther 
efficient structures geometric data management 
lncs springer verlag berlin heidelberg new york 
nther 
cell tree object oriented index structure geometric databases 
proceedings fifth ieee international conference data engineering 
nther 
evaluation spatial access methods shelves 
geographic database management systems scholl 
eds springer verlag berlin heidelberg new york 
nther 
efficient computation spatial joins 
proceedings ninth ieee international conference data engineering 
nther bilmes 
tree access methods spatial databases implementation performance evaluation 
ieee trans 
knowl 
data eng 

nther buchmann 
research issues spatial databases 
sigmod rec 

nther gaede 
shelves storage management technique large spatial data objects 
int 

inf 
syst 

nther 
spatial database indices large extended objects 
proceedings seventh ieee international conference data engineering 
nther ller schmidt bhargava krishnan 
mmm www approach sharing statistical software modules 
ieee internet comput 

nther scholl 
benchmarking spatial joins la carte 
proceedings th international conference scientific statistical database management 
ieee new york 
ting 
extendible relational database system geometric applications 
proceedings fifteenth international conference large data bases 
ting schneider 
realms foundation spatial data types database systems 
advances spatial databases abel ooi eds lncs springer verlag berlin heidelberg new york 
guttman 
trees dynamic index structure spatial searching 
proceedings acm sigmod international conference management data 
hellerstein koutsoupias 
theory 
proceedings sixteenth acm sigact sigmod sigart symposium principles database systems 
hellerstein naughton fer 
generalized search trees database systems 
proceedings st international conference large data bases 

adapting transformation technique maintain multidimensional objects tree access structures 
proceedings third acm international workshop advances geographic information systems acm gis baltimore md acm press new york 
ller 
extending spatial access structure support additional standard attributes 
advances spatial databases egenhofer herring eds lncs springer verlag berlin heidelberg new york 


split buckets spatial data structures 
geographic database management systems scholl 
eds springer verlag berlin heidelberg new york 
widmayer 
lsd tree spatial access multidimensional point non point objects 
proceedings fifteenth international conference large data bases 
hinrichs 
implementation grid file design concepts experience 
bit 
hoel samet 
qualitative comparison study data structures large segment databases 
proceedings acm sigmod international conference management data 
hoel samet 
benchmarking spatial join operations spatial output 
proceedings st international conference large data bases 
widmayer 
globally order preserving multidimensional linear hashing 
proceedings fourth ieee international conference data engineering 
widmayer multidimensional access methods 
twin grid files space optimizing access schemes 
proceedings acm sig mod international conference management data 
widmayer 
file efficient access structure proximity queries 
proceedings sixth ieee international conference data engineering 
widmayer zimmermann 
global order spatial access faster 
geographic database management systems scholl 
eds springer verlag berlin heidelberg new york 
informix 
architecture 
url www informix com 
jagadish 
linear clustering objects multiple attributes 
proceedings acm sigmod international conference management data 
jagadish 
indexing line segments 
proceedings sixteenth international conference large data bases 
jagadish 
spatial search polyhedra 
proceedings sixth ieee international conference data engineering 
kamel faloutsos 
parallel 
proceedings acm sigmod international conference management data 
kamel faloutsos 
packing trees 
proceedings second international conference information knowledge management 
kamel faloutsos 
hilbert rtree improved tree fractals 
proceedings twentieth international conference large data bases 
kamel khalil 
bulk insertion dynamic trees 
proceedings seventh international symposium spatial data handling delft netherlands 
kanellakis ramaswamy vitter 
indexing data models constraints classes 
proceedings twelfth acm sigact sigmod sigart symposium principles database systems 
kedem 
quad cif tree data structure hierarchical line algorithms 
proceedings nineteenth conference design automation 
kemper 
analysis geometric modeling database systems 
acm comput 
surv 


pattern search statis acm computing surveys vol 
june gaede nther tics 
optimizing methods statistics ed 
knott 
hashing functions 
comput 


indexing techniques multi dimensional spatial data historical data database management systems 
ph thesis university california berkeley 
stonebraker 
segment indexes dynamic indexing techniques multi dimensional interval data 
proceedings acm sigmod international conference management data 
kriegel 

performance comparison index structures multikey retrieval 
proceedings acm sigmod international conference management data 
kriegel schneider 
access method query processor spatial database systems 
geographic database management systems scholl 
eds springer verlag berlin heidelberg new york 
kriegel schneider seeger 
performance comparison point spatial access methods 
design implementation large spatial database systems buchmann nther smith 
wang eds lncs springer verlag berlin heidelberg new york 
kriegel 
seeger 
multidimensional order preserving linear hashing partial expansions 
proceedings international conference database theory lncs springer verlag berlin heidelberg new york 
kriegel 
seeger 
multidimensional quantile hashing efficient non uniform record distributions 
proceedings third ieee international conference data engineering 
kriegel 
seeger 
grid file directory 
proceedings fourth ieee international conference data engineering 
kriegel 
seeger 
multidimensional quantile hashing efficient non uniform distributions 
inf 
sci 

banks 
high concurrency locking trees 
proceedings st international conference large data bases 
kumar 
tree new data structure organizing multidimensional data 
ieee trans 
knowl 
data eng 

kumar 
study spatial clustering techniques 
proceedings fifth confer acm computing surveys vol 
june ence database expert systems applications dexa karagiannis ed lncs springer verlag berlin heidelberg new york 
larson 
linear hashing partial expansions 
proceedings sixth international conference large data bases 
lehman yao 
efficient locking concurrent operations trees 
acm trans 
database syst 

lin jagadish faloutsos 
tv tree index structure high dimensional data 
vldb 
litwin 
linear hashing new tool file table addressing 
proceedings sixth international conference large data bases 
lo ravishankar 
spatial joins seeded trees 
proceedings acm sigmod international conference management data 
lomet 
index exponential hashing 
acm trans 
database syst 

lomet 
grow post index trees role techniques potential 
advances spatial databases nther schek eds lncs springer verlag berlin heidelberg new york 
lomet salzberg 
robust multiattribute search structure 
proceedings fifth ieee international conference data engineering 
lomet salzberg 
multiattribute indexing method guaranteed performance 
acm trans 
database syst 

reprinted readings database systems stonebraker ed morgan kaufmann san mateo ca 
lomet salzberg 
access method concurrency recovery 
proceedings acm sigmod international conference management data 
lu ooi 

spatial indexing past 
ieee data eng 
bull 

matsuyama hao nagao 
file organization geographic information systems spatial proximity 
int 
comput 
vis 
graph 
image process 

morton 
computer oriented geodetic data base new technique file sequencing 
ibm nelson samet 
population analysis hierarchical data structures 
proceedings acm sigmod interna tional conference management data 
newell doe 
discrete geometry seamless topology gis 
url www smallworld com 
ng han 
efficient effective clustering methods spatial data mining 
proceedings twentieth international conference large data bases 
ng kameda 
concurrent accesses trees 
advances spatial databases abel ooi eds lncs springer verlag berlin heidelberg new york 
ng kameda 
link tree recoverable index structure spatial data 
proceedings fifth conference database expert systems applications dexa karagiannis ed lncs springer verlag berlin heidelberg new york 
nievergelt 
criteria assessing comparing spatial data structures 
design implementation large spatial database systems buchmann nther smith 
wang eds lncs springer verlag berlin heidelberg new york 
nievergelt hinrichs 
storage access structures geometric data bases 
proceedings international conference foundations data organization ghosh tanaka eds plenum new york 
nievergelt hinterberger sevcik 
grid file adaptable symmetric multikey file structure 
proceedings third eci conference eds lncs springer verlag berlin heidelberg new york 
nievergelt hinterberger sevcik 
grid file adaptable symmetric multikey file structure 
acm trans 
database syst 


bd tree new dimensional data structure efficient dynamic characteristics 
proceedings ninth world computer congress ifip 

new tree type data structure homogeneous node suitable large spatial database 
proceedings sixth ieee international conference data engineering 
ooi 
efficient query processing geographic information systems 
lncs springer verlag berlin heidelberg new york 
ooi sacks davis 
spatial kd tree indexing mechanism spatial databases 
proceed multidimensional access methods ings ieee computer software applications conference 
ooi sacks davis 
spatial indexing binary decomposition spatial bounding 
inf 
syst 


reactive data structures geographic information systems 
ph thesis university leiden netherlands 
oracle 
oracle advances relational database technology spatial data management 
white 
orenstein 
multidimensional tries associative searching 
inf 
process 
lett 

orenstein 
dynamic file random sequential accessing 
proceedings ninth international conference large data bases 
orenstein 
redundancy spatial databases 
proceedings acm sig mod international conference management data 
orenstein 
strategies optimizing redundancy spatial databases 
design implementation large spatial database systems buchmann nther smith 
wang eds lncs springer verlag berlin heidelberg new york 
orenstein 
comparison spatial query processing techniques native parameter space 
proceedings acm sigmod international conference management data 
orenstein 
class data structures associative searching 
proceedings third acm sigact sigmod symposium principles database systems 
orenstein 
spatial query processing object oriented database system 
proceedings acm sigmod international conference management data 

mapping function directory multidimensional extendible hashing 
proceedings tenth international conference large data bases 

symmetric dynamic index maintenance scheme 
proceedings international conference foundations data organization plenum new york 

balanced multidimensional extendible hash tree 
proceedings fifth acm sigact sigmod symposium principles database systems 
ouksel 
interpolation grid acm computing surveys vol 
june gaede nther file 
proceedings fourth acm si sigmod symposium principles database systems 
ouksel scheuermann 
storage mappings multidimensional linear dynamic hashing 
proceedings second acm sigact sigmod symposium principles database systems 
ouksel mayer 
robust efficient spatial data structure 
acta inf 

overmars smid berg van kreveld 
maintaining range trees secondary memory part partitions 
acta inf 

pagel 
transformation technique spatial objects revisited 
advances spatial databases abel ooi eds lncs springer verlag berlin heidelberg new york 
pagel winter 
window query optimal clustering spatial objects 
proceedings fourteenth acm sigact sigmod sigart symposium principles database systems 
pagel wid mayer 
analysis range query performance spatial data structures 
proceedings twelfth acm sigact sigmod sigart symposium principles database systems 
papadias theodoridis sellis egenhofer 
topological relations world minimum bounding rectangles study trees 
proceedings acm sigmod international conference management data 
papadopoulos manolopoulos 
performance nearest neighbor queries trees 
proceedings international conference database theory icdt afrati kolaitis eds lncs springer verlag berlin heidelberg new york 
scholl 
evaluation spatial indices implemented dbms 
ing ni rie des syst mes information 
preparata shamos 
computational geometry 
springer verlag new york 
regnier 
analysis grid file algorithms 
bit 
robinson 
tree search structure large multidimensional dynamic indexes 
proceedings acm sigmod international conference management data 
rotem 
spatial join indices 
pro acm computing surveys vol 
june ceedings seventh ieee international conference data engineering 
roussopoulos 
psql pictorial structured query language 
proceedings ieee workshop visual languages 
roussopoulos 
direct spatial search pictorial databases packed trees 
proceedings acm sigmod international conference management data 
sagan 
space filling curves 
springer verlag berlin heidelberg new york 
samet 
quadtree related hierarchical data structure 
acm comput 
surv 

samet 
hierarchical representation collections small rectangles 
acm comput 
surv 

samet 
applications spatial data structures 
addison wesley reading ma 
samet 
design analysis spatial data structures 
addison wesley reading ma 
samet webber 
storing collection polygons quadtrees 
acm trans 
graph 


und geo objekte 
ph thesis ludwig maximilians universit nchen germany german 
schneider kriegel 

tr tree new representation polygonal objects supporting spatial queries operations 
proceedings seventh workshop computational geometry lncs springer verlag berlin heidelberg new york 
scholl 
thematic map modeling 
design implementation large spatial database systems buchmann nther smith 
wang eds lncs springer verlag berlin heidelberg new york 
seeger 
performance comparison segment access methods implemented top buddy tree 
advances spatial databases nther schek eds lncs springer verlag berlin heidelberg new york 
seeger kriegel 

techniques design implementation spatial access methods 
proceedings fourteenth international conference large data bases 
seeger kriegel 

buddy tree efficient robust access method spatial data base systems 
proceedings sixteenth international conference large data bases 
sellis roussopoulos faloutsos 
tree dynamic index multi dimensional objects 
proceedings thirteenth international conference large data bases 
sevcik koudas 
filter trees managing spatial data range size granularities 
proceedings th international conference large data bases bombay 
sexton 
querying indexed files 
proceedings cdb cp workshop constraint databases application gaede brodsky nther srivastava vianu wallace eds lncs springer verlag berlin heidelberg new york 
shekhar liu 

connectivity clustered access method aggregate queries transportation networks summary results 
proceedings eleventh ieee international conference data engineering 
siemens informationssysteme ag 
url www sni de 
widmayer 
spatial searching geometric databases 
proceedings fourth ieee international conference data engineering 
smid overmars 
maintaining range trees secondary memory part ii lower bounds 
acta inf 

smith gao 
experimental performance evaluations spatial access methods 
proceedings fourth international symposium spatial data handling rich 
stonebraker ed 

readings database systems 
morgan kaufmann san mateo ca 
stonebraker sellis hanson 
analysis rule indexing implementations data base systems 
proceed received august revised august accepted january multidimensional access methods ings international conference expert data base systems 
stuckey 
constraint search trees 
proceedings international conference logic programming clp naish ed mit press cambridge ma 
subramanian ramaswamy 
range tree new data structure range searching secondary memory 
proceedings acm siam symposium discrete algorithms soda 
tamminen 
extendible cell method closest point problems 
bit 
tamminen 
performance analysis cell geometric file organisations 
int 
comp 
vis 
graph 
image process 

tamminen 
comment quad octrees 
commun 
acm 
theodoridis sellis 
model prediction tree performance 
proceedings fifteenth acm sigact sigmod sigart symposium principles database systems 
herzog 
multidimensional range search dynamically balanced trees 
angewandte informatik 
whang 
krishnamurthy 
multilevel grid files 
ibm research laboratory yorktown heights ny 
white 
trees large ordered indexes multi dimensional space 
tech 
rep application mathematics research staff statistical research division bureau census 
widmayer 

bei systemen vossen 
witt eds oldenbourg verlag munich chapter german 
acm computing surveys vol 
june 
