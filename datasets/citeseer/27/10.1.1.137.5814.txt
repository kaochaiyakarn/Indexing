appeared rd usenix workshop electronic commerce aug 
trusting trusted hardware formal model programmable secure coprocessors sean smith vernon secure systems smart cards ibm watson research center yorktown heights ny sean watson ibm com watson ibm com secure coprocessors provide foundation exciting electronic commerce applications previous demonstrated 
explored building high secure coprocessor easily programmed deployed wide range third parties important step realizing promise 
step requires trusting trusted hardware achieving trust di cult face problem solution space surprisingly complex subtle 
formal methods provide means express verify analyze solutions required solution certi ed fips level 
discusses current orts apply principles architecture secure coprocessor 
formal statements security goals architecture needs provide argue correctness enumerating architectural properties goals proven argue conciseness showing eliminating properties causes goals fail discuss simpler versions architecture satisfy weaker security goals 
view developing formal models address trust challenges arising trusted hardware electronic commerce 
third usenix workshop electronic commerce proceedings 
appear august 
motivation context programmable secure coprocessors foundation commerce applications demonstrated laboratory tygar yee seminal 
enable real world deployment applications team ibm completed multi year project design build device meets requirements realistic manufacturing scenarios reached market fall 
bootstrap software enables secure con guration programmability requiring site security trusted shipping channels played akey part meeting requirements 
trusted hardware foundation real commerce applications gives rise additional requirement validating trust 
ecommerce orts cite fips government standard addresses crypto modules general purpose secure coprocessors 
certi cation standard means device passed suite speci tests administered independent laboratory 
level stringent level standard requires secrets rendered unavailable foreseeable physical attacks standard de nition high secure coprocessor 
writing device certi ed level 
team plans meet trust requirement submitting hardware full certi cation fips level research project carrying formal modeling veri cation necessary certifying bootstrap software level 
applying formal methods sizable implemented system project appeared rd usenix workshop electronic commerce aug 
challenging applies standard originally crafted cryptographic modules programmable secure coprocessors exible platform necessary commerce applications 
ort involves building formal model con guration programmable secure coprocessor expressing security requirements terms model translating bootstrap software aspects system behavior set transformations model formally verifying security properties preserved transformations presents initial plan attack translating formal methods goals requirements guided implementation device 
proceeded carry plan building model assertions transformations proofs acl mechanical theorem prover :10.1.1.49.9936
nearly complete follow reports detail experiences modeling fips process 
potential trusted hardware security electronic commerce applications requires participating computers storage devices correctly carry tasks 
adversary modi es clones devices undermine entire system 
current proposed electronic commerce scenarios adversary may physical access machines compromise bene ts 
threats include insider attack attacks exposed machines dishonest users attacking machines 
secure coprocessor general purpose computing device secure memory protected physical electrical techniques intended ensure foreseeable physical attack contents 
previous laboratory explored potential building coprocessor high computational environment cryptographic accelerators encapsulated protective membrane protected tamper response circuitry senses physical changes membrane 
subsequent cmu prototypes de ne demonstrate power secure model achieving broad protocol security amplifying security device trusted keep secrets despite physical attack 
particular model addresses security problems electronic commerce applications 
building trusted hardware order move secure model research laboratory real world commerce applications group years researching designing implementing high secure coprocessor 
needed accommodate constraints device detect respond foreseeable avenues tamper 
rely physical inspection distinguish tampered device untampered device 
device tamper protected life time leaves factory eld hostile environment 
nearly software device including bootstrap operating system remotely replaceable eld security secure trusted physical channels 
di erent layers software device controllable di erent mutually suspicious authorities need allow malicious authorities byzantine failure fundamental code os bootstrap 
di erent users application di erent coprocessors may necessarily trust possibly may met 
application running untampered device able prove concerned real thing doing right thing 
constraints driven goal building mass produced tool enables widespread development commerce applications secure hardware earlier generation laboratory appeared rd usenix workshop electronic commerce aug 
prototypes enabled tygar yee development research proofs concept 
separate reports discuss broader problem space details solution resulting commercial product 
trusting trusted hardware clearly critical component device ective tamper response physical attack contents secure memory near instantly extremely high probability 
protections active circuitry memory senses changes tamper detecting membrane tamper resistant material force attacks ect membrane 
widely reported designing ective techniques verifying tricky discusses suite techniques device currently independent evaluation fips level criteria 
important components include hardware software design enable fast crypto performance software programming environment enables applications easily exploit abilities 
security architecture connect pieces order ensure tamper response 
developing architecture required simultaneously addressing complex issues nd presenting material leads questions secure coprocessor 
architecture trying achieve 
pieces 
believe 
solving simpler problem eliminate property 
part veri cation commercial design preparation secure commerce systems currently developing formal models formalism guided implementation frame answer questions 
presents preliminary results 
section presents english statements security goals programmable high secure coprocessor 
section statements formal terms 
section enumerates elements architecture properties hold 
section presents arguments conciseness design showing eliminating elements design causes properties fail 
section shows weakening security properties lead simpler designs 
presents snapshot aspect broader orts required ensure trusted hardware trusted 
section explores broader picture 
english statements security goals system components noted earlier generic secure coprocessor consists cpu secure memory may volatile non volatile potentially additional non secure non volatile memory cryptographic accelerators 
see 
packaged physical security design intended render unavailable contents secure memory attack 
exploring ectiveness physical tamper response lies scope analysis simply assumes physical tamper response works 
stress part meeting trust requirement trusted hardware device physical security design undergoing extensive independent tests required fips level 
design non volatile secure memory consists battery backed static ram 
hardware constraints limited amount kilobytes business goal required device carry software security model require software secret adversaries 
consequently design includes megabyte flash memory clearly design extends model software secret putting flash part program part uses secrets verify decrypt second part 
flash memory provides non volatile storage rewriting involves lengthy process erasing mod appeared rd usenix workshop electronic commerce aug 
primary code store memory contained secure boundary attacks rst trigger tamper response attack 
constraints faced caused partition code space flash layers foundational miniboot layer operating system layer application layer 
refer generic layer layer boot block rom code layer miniboot 
see 
device layers may potentially controlled di erent authority 
articulating accommodating nature control constituted major challenges moving secure coprocessor laboratory real world device 
permit authority site card recognize potentially card site may trustworthy 
allow di erent authorities distrust 
particular device refer party charge software layer authority layer includes code space public key authority layer additional parameters 
partition region code layer page belongs layer multitude potential owners potential failure properties flash include notion status particular time owned unreliable reliable runnable 
desired properties accommodating constraints dictated business engineering concerns device easy third party programmers develop deploy applications style 
led articulate basic goals security architecture 
sector tens kilobytes long done relatively small number times compared ordinary ram 
control software suppose ownership particular software layer particular untampered device 
designated superior load code layer device card may hostile environment far away superiors 
access secrets secrets belonging layer accessible code authority trusts executing untampered device authority trusts appropriate context 
authenticated execution possible distinguish remotely message particular layer particular software environment particular untampered device message clever adversary adversary access untampered devices untampered di erent software environment 
recoverability able recover arbitrary failure layer including operating system miniboot 
failures include layer contents scrambled program layer behaves arbitrary evil intent furthermore recovery meaningful able con rm recovery taken place 
appeared rd usenix workshop electronic commerce aug 
authority external interface secure memory cpu flash rom non volatile volatile crypto software secrets keys software working data support physical security boundary high level sketch secure coprocessor 
authority authority authority external interface flash rom secure memory volatile layer page layer page layer page layer page authority authority different authority subset potentially controlled di erent authority 
di erent devices may di erent authority sets set device may change time 
appeared rd usenix workshop electronic commerce aug 
fault tolerance interruption execution point leave device condition violates 
justi cation driven particular design constraints goals arguably apply general purpose secure coprocessor intended third party rich require code maintenance 
section party deploys ecommerce application device wants sure alter code 
application subverted adversary updating program include backdoor trojan horse 
section coprocessor really provide trusted environment safely store application secrets 
example adversarial application able copy secret keys modify balance wallet 
section possible participant coprocessor commerce application verify interacting correct software untampered device 
failure conditions leaves basic coprocessor applications cryptographic accelerators open attack 
section failures interruptions leave safe state recoverable adversary expected cause necessary failures interruptions 
cost device inevitability errors complex software stress recovery byzantine action loaded software 
arguable necessary set properties su cient interesting avenue exploration 
formal statements security goals model components formalizing english statements requires introducing terms 
layer authority page introduced section 
system con guration consists tuple relevant properties including conditions layer status owner code contents page contents device tampered 
hardware failures may occurred dram scratch area 
standard notation denote layer component con guration organize possible values layer components natural partial order 
owned unreliable dominates 
owned reliable runnable contents dominates owned reliable contents turn dominates owned unreliable 
page need notion initial contents 
runnable program layer software environment con guration consists programs status components kc denote envn intention correct secure execution layer code untampered device depends correct secure execution code software environment 
initial state 
design devices initialized factory left con guration layers installed self generated random secret appeared rd usenix workshop electronic commerce aug 
page corresponding certi cate stored flash layer 
layer just rsa keypair public key signed factory certi cate authority ca layer rom contain public key code consists set des keys certi cate consisting encryption signature keys privileged authority 
transitions 
con guration device change due potential causes explicit con guration changing commands design carried miniboot layers failures hardware components flash discussed section tamper events ordinary operation device execution code layers 
model notion de ning set valid transitions con gurations causes 
valid con guration reached valid initial con guration sequence zero valid transitions 
frequently discuss sequence con gurations particular valid con guration ci reachable ci transition 
tamper 
earlier assumption physical tamper response works natural characterization tamper device doesn secrets 
characterization ect secrets overlooks critical issues device secrets may copied card tamper due exploitation error memory management restored 
example os bug permits hostile application download entire contents secure memory 
secrets belonging device may loaded tamper 
device secrets may tamper due malicious code loading command device thinking secret storage area contained new code burned flash 
far secrets go thing say certain tamper event transforms device con guration destroying contents 
immediately event secrets longer location 
potential tamper caused headaches formal analysis 
possible conguration transformations device governed current code layers physical construction device 
physical construction causes tamper response occur 
physical tamper change properties arbitrarily change possible transformations behaviors tamper 
clearly reasoning remote party authenticate untampered device requires reasoning tamper 
initial necessary include assumption properties memory restrictions useful behaviors hold certainty 
reason ended including memory tampered explicit element system conguration distinguish traces terrain traces remained safe 
authentication 
need consider scenarios needs determine particular message came particular consider authentication schemes secret possessed secret schemes de ne necessary trust set consist parties abuse distribute secrets impossible distinction 
example standard public key scheme single ca necessary trust set include root ca 
scheme multiple certi cate authorities trust set include intermediate certi cate authorities 
appeared rd usenix workshop electronic commerce aug 
goals attempt express goals section formally 
recall section discussed initial conditions device 
control software formal statement suppose untampered device valid con guration auth set authorities kc sequence valid transitions takes device untampered kc precede equal kc layer partial order transition sequence caused con guration changing command rst command sequence required knowledge secret belonging member auth english authority able control layer appropriate conditions superior authority able repair layer 
need recognize fact failures hardware trust invariants ect con guration action authorities 
formal statement attempts express layer demoted due failure reasons change modi es contents traceable action current authority access secrets formal statement suppose authority layer untampered device valid con guration page initial contents program envn executed contents initialized 
ta set software environments trusts 
ci valid sequence con gurations ck rst sequence true device tampered ck mck runnable envn ck ta contents page destroyed returned initial state ck 
programs envn ci directly access page english formal statement expresses authority program establishes secrets device maintains supporting environment trusted authority period protects layers 
motivation authority able trust con guration safe trusting envn environment right 
particular permit regard cause envn trustworthy ci ci transition include change code layer trust 
parent don trust 
nand try attack layer 
child try secrets 
appeared rd usenix workshop electronic commerce aug 
authority ci behave maliciously private key try change device believes public key 
parent try authority 
authenticated execution formal statement suppose bob receives message allegedly layer untampered device particular envn ck valid con guration ck 
bob determine came program environment adversary necessary trust set small possible 
particular bob able correctly authenticate despite potential adversarial control new code layer cj code layer alternate con guration follows cj sequence valid transformations tamper code layer ck old code layer english formal statement basically section acknowledging clever adversary load new code device including new bootstrap code control code privileged layer device controlled code layer replaced 
recoverability formal statement suppose untampered device con guration auth set authorities runnable arbitrary may attempted cause unauthorized con guration changes execution pn speci es proposed new contents layer exists sequence con commands members auth takes kc kc pn 
device untampered members auth verify properties hold english formal statement basically says layer bad higher privileged layers authorities layers repair layer nal condition expresses necessary aspect code downloading ability repair device hostile environment meaningful authenticate repair took place 
new code get 
secret authenticate fact accessible faulty code 
fault tolerance statements asserted properties untampered devices con guration reachable initial con guration sequence valid transformations 
achieve real world goal fault tolerance important model complete possible transformations include just con guration changing commands ordinary operation improperly formatted authentic commands early termination command processing hardware failures flash storage failures possible appeared rd usenix workshop electronic commerce aug 
desired property goal best expressed meta statement properties hold model expanded cover conditions 
process carrying plan outlined discovered requirement leads quite subtleties 
example easily extend initial formal model express abnormal termination inadequate address improper formatting 
issues potentially amenable formal models level abstraction chose 
consequently resorted separate systematic code analysis address improper formatting 
independence initial statements section came directly engineering requirements 
note rendered formally goals appear remain independent 
example control software imply recoverability 
scheme software change software change public key layer owner contained flash segment satisfy 
conversely layer owner change layer establishes recoverability imply control software 
remains area investigation particularly mechanical theorem prover 
exploring set necessary properties expressed smaller concise form interesting problem 
correctness previous section attempted render statements important security properties formal terms 
section try examine assumptions proof strategies verify architecture meets goals 
architecture components examining architecture achieve goals rst requires articulating common preliminary subgoals 
boot sequence reasoning run time behavior device requires addressing issue doing 
architecture addresses problem linking device reset hardware ratchet ratchet circuit independent main cpu tracks ratchet value ratchet hardware ensures reset signal forces cpu execution miniboot rom forces ratchet zero 
software cpu increment ratchet point reset bring back zero 
intention layer advances ratchet rst passing control invoking layer ratchet controls access control code critical resources 
model introducing execution set programs control invoked reset 
hardware reset forces execution set empty invocation passing control adds program set 
hardware locks hardware permit access critical memory 
purposes simplify behavior ratchet restrict access flash policy protected flash segments written ratchet 
page read written ratchet appeared rd usenix workshop electronic commerce aug 
stress enforced hardware cpu free issue forbidden request memory device see 
key management outside world know hearing real device 
noted earlier miniboot generates keypair factory initialization private key retained page public key certi ed factory ca 
miniboot regenerate keypair certifying new public key old private key 
design miniboot generates keypair layer private key left page public key certi ed miniboot keypair regenerated time layer altered 
lacking public key code miniboot possesses set random des keys mutual secret key authentication authority 
section section discuss detail architecture report 
flash locks play critical role solution locks ensure secrets accessible right layers flash locks ensure right layers thought 
authentication works device know hearing right party outside world 
design addresses problem having authority generate rsa keypair private key sign commands miniboot veri es signatures public key currently stored layer 
public key code miniboot authority uses secret key authentication 
reasoning miniboot accepted authenticated command authority implies authority signed command requires additional assumptions intractability assumption underlying cryptography true keys really generated randomly authorized owner private key keeps secret miniboot leak secret keys miniboot correctly carries cryptographic protocols algorithms 
code works item previous section continually need assertions code works 
example reasoning identity con guration requires assuming code previous con gurations correctly followed policy updating code layers reasoning behavior envn con guration requires assuming envn correctly evaluated responded hardware failures status changes ecting layer passes control layer appropriate asserting envn access page requires just locks assumption layer correctly incremented ratchet assumption envn thought proving assertions require careful mutual induction establishing code layers change action miniboot requires rst establishing miniboot hasn changed unauthorized way 
fact miniboot change means trust assertions architecture follow schema believing true system requires believing miniboot right 
appeared rd usenix workshop electronic commerce aug 
assumptions goals control software establishing architecture achieves control software goal requires establishing noted miniboot executing miniboot change flash code layers authentication commands works correctly tracing possible transformations show demotion status occur failure response transition requires authenticated command authority issuing command authority set access secrets establishing architecture achieves access secrets goal requires lemma noted section envn access page untampered device showing con guration transitions preserve invariant ci di ers ci reasons device tampered envn ci stopped fully runnable envn ci ta ci di ers contents page cleared returned initial state 
departure ta layer perspective essentially equivalent tamper 
enforcing invariant requires developing reasonable way device determine new con guration member ta 
adopted simple trust parameter schemes characterize detectable ta reduce detectable set requiring device able con rm new envn ta directly verifying signature reliable public key currently layer change occurs fact invariant enforced miniboot code part envn subject untrusted change complicates implementation 
ck transition involved loading untrusted miniboot ensure trusted miniboot code currently part envn ck ensures page secrets erased transition succeeds 
fact trust new miniboot ck trust miniboot correctly carry authentication ck leads additional protocol considerations 
authenticated execution basically scheme section binds public key certain software environment con nes private key environment 
suppose bob trying authenticate message layer ck 
simplicity suppose 
argument extends layer schemes discussed 
hierarchical nature code layers coupled fact layer replaceable gives dimensional history code changes 
extract history con guration sequence ci undergone device ci depends ci succeeded ci 
dimensions create dimensions spoo ng axis sent message cj sent message envn cj envn ck 
preliminary subgoal envn sees page gives result bob necessary trust set consisting miniboot miniboot factory participates initialization authority factory ca 
preliminary subgoal coupled regeneration policy gives result bob appeared rd usenix workshop electronic commerce aug 
necessary trust set consisting miniboot factory ca version miniboot ck 
fact code changing action authority requires repeating factory removes authority set 
preliminary subgoal layer key policy gives result bob necessary trust set consisting set ck 
necessary trust set arguably minimal secret scheme forces factory ca card code participates initialization set ck set card components set connected certi cation path exist initializer ck hierarchical dependence set bottom closed jci set ci 
recoverability establishing recoverability follows subgoals envn sees page miniboot changes layers permanent miniboot correctly replace miniboot appropriate boot sequence gives miniboot chance authenticate commands 
successful change follows authenticated execution property miniboot 
fault tolerance establishing architecture meets fault tolerance goal follows careful code design 
code works tests responds hardware failures 
con guration transitions need structured despite interruptions failures device left clean predictable state 
various constraints forced design depart standard atomicity change fails completely succeeds completely subtle ways 
hardware constraints permit redundant flash areas layer layer force device rst erase entire layer 
handle destructive transitions implementing sequence transitions atomic 
intermediate failure state taken safe state transformation performed clean boot 
second failures leave device fairly odd state requires clean execution code 
handle situations having miniboot enforce clean rules boot sequence subgoal argue clean happens chance perceive troubled state 
complicates formal analysis atomicity con guration change happen device con gurations exist real time device con gurations perceived 
design permits code authorities specify family untampered devices software environments accept particular code loading command 
target features provide hooks authorities enforce serializability compatibility rules nd important 
conciseness argue conciseness design considering aspects code loading authenticated execution 
code loading code loading involves control software access secrets recoverability goals 
correctness scheme follows number items include ratchet locks flash ratchet locks trust parameters happens page envn changed 
scheme omitted flash locks longer sure layer code carrying appeared rd usenix workshop electronic commerce aug 
code changes contents code layer supposed evaluating carrying changes 
scheme omitted locks wewould able authenticate change occurred example recover memory manager vulnerability ina deployed operating system 
scheme forced code changes erase lose ability authenticate untampered device performing updates remotely hostile eld device code change able prove untampered device existed change rely testimony code loader 
treat untrusted changes miniboot di erently layers force authorities inconsistent situation relying code longer trust correctly evaluate statements trust 
authenticated execution outgoing authentication scheme section forces recipients message allegedly untampered ck trust envn ck ic factory ca 
noted earlier trust set arguably minimal party set published abused secret keys standard pki approach authentication recipient ascertain message came ck 
device page keypair regenerated atomic part miniboot reloads possible new code ck forge message 
regeneration protects attack evil versions miniboot 
separate keypair layer ine ciency forcing layer reboot device order get signature miniboot carefully format signs behalf layer leave private key outside page vulnerability ck forging messages ck 
regenerate layer key env change permit ck ck forge messages ck 
example suppose authority releases new operating system known hole old 
xed version retain operational secrets forcing change keypair permits buggy version impersonate xed version 
conversely authority mistakenly introduces hole new version forcing change keypair permits new version impersonate old 
locks forge messages ck general flash locks jci forging message 
simpli cations developed security architecture support secure coprocessor speci set constraints 
exibility security goals high product forced part di cult situation 
easy way freedom spontaneously load arbitrary mutually suspicious peer applications 
put succinctly design arguably minimal solution arguably problem 
simplifying problem certainly simplify solution 
example forcing con guration change envn kill page outgoing authentication keys simplify secrets 
allowing code authority family mutually trusting authorities simplify authentication trust 
assume os memory access vulnerabilities eliminate flash locks locks memory enforced trusted 
miniboot possibly os changed key management secret access schemes greatly simpli ed 
appeared rd usenix workshop electronic commerce aug 
anticipate simpli cations may arise architecture mapped smaller device generation smart card 
related previous current explores formal methods tools examine basic question design 
orts apply automated tools speci cally electronic commerce protocols 
noted earlier reports initial strategy formal veri cation existing implementation commerce tool 
having re ned design goals statements formal model step express verify properties mechanical veri cation tool accordance fips level rigorously document model transformation system correspond actual device code 
underway independent veri cation physical security device 
convincing users trusted hardware trusted requires addressing additional issues 
example implementation match design 
history clearly shows secure software fraught unintended vulnerabilities 
address techniques evaluation independent laboratories part fips certi cation continual consultation evaluation house penetration specialists general principles careful coding design clearing stack safely tolerating input negative sets authenticated product purchased match implementation 
policy life protects device leaves factory procedures place address potential attack point 
existence exible powerful trusted secure coprocessors help secure computation untrusted environments 
research part group broader orts achieve security making tools available 
acknowledgments authors gratefully acknowledge contributions entire watson development team including dave suresh joan dyer gideon bob juan gonzalez je mark joe mcarthur dennis nagel elaine palmer ron perez pankaj rohatgi david toll steve bennet yee ibm global security analysis lab watson ibm development teams charlotte 
wish ran canetti michel hack matthias mike referees helpful advice bill arnold doug tygar steve white bennet yee pioneering 
availability hardware secure coprocessor exists ibm commercially available pci card 
additional research prototypes exist pcmcia format 
software toolkits exist independent parties develop experiment deploy applications platform 
addition application software available ibm transforms cryptographic accelerator 
data information including development manuals available web www ibm com security appeared rd usenix workshop electronic commerce aug 
anderson kuhn 
tamper resistance cautionary note 
second usenix workshop electronic commerce 
november 
anderson kuhn 
low cost attacks tamper resistant devices 
preprint 

clarke wing 
formal methods state art directions 
acm computing surveys 

december 
mitchell 
derived test requirements fips pub 
national institute standards technology 
march 
heintze tygar wing wong 
model checking electronic commerce protocols 
second usenix workshop electronic commerce 
november 
ibm pci cryptographic coprocessor 
product brochure 
august 
kaufmann moore :10.1.1.49.9936
industrial strength theorem prover logic common lisp 
ieee transactions software engineering 

april 
wing 
fast automatic checking security protocols 
second usenix workshop electronic commerce 
november 
meadows 
language generation veri cation nrl protocol analyzer 
proceedings th computer security foundations workshop 

meadows syverson 
formal speci cation requirements payment transactions set protocol 
proceedings second international conference financial cryptography 
springer verlag lncs 
appear 
national institute standards technology 
security requirements cryptographic modules 
federal information processing standards publication 
palmer 
secure crypto coprocessor workstations 
computer science research report rc ibm watson research center 
september 
smith palmer 
high performance programmable secure coprocessor 
proceedings second international conference financial cryptography 
springer verlag lncs 
appear 
smith 
building high performance programmable secure coprocessor 
report rc 
ibm watson research center 
february 
preliminary version available report rc 
tygar yee 
dyad system physically secure coprocessors 
proceedings joint harvard mit workshop technological strategies protection intellectual property network multimedia environment 
april 

physical security system 
ieee computer society conference security privacy 

white 
trusted architecture software protection 
ieee computer society conference privacy 

white arnold palmer 
architecture security physically exposed environments 
technical report rc distributed systems security group 
ibm watson research center 
march 
white arnold double 
evaluation system physical security computing systems 
sixth annual computer security applications conference 

yee 
secure coprocessors 
ph thesis 
computer science technical report cmu cs carnegie mellon university 
may 
yee tygar 
secure coprocessors electronic commerce applications 
usenix workshop electronic commerce 
july 
young yung 
dark side black box cryptography trust 
crypto 
lncs 
