constraint generation automated theory formation simon colton ian miguel division informatics department computer science university edinburgh university york south bridge edinburgh eh hn uk york yo dd uk dai ed ac uk cs york ac uk adding constraints basic csp model significantly reduce search golomb rulers 
generation process usually performed hand focused automatically generating symmetry breaking constraints generating implied constraints 
describe approach generating implied symmetry breaking specialisation constraints apply technique quasigroup construction 
problem class parameterised size basic model solve small instances choco constraint programming language 
give solutions hr automated theory formation program detects implied constraints proved follow specifications induced constraints true subset solutions 
interpreting hr results reformulate model lead reduction search larger instances 
efficient run hr interpret results solve csp solve problem basic model 
system architecture hr program performs theory formation domains pure mathematics 
finite algebraic domains quasigroup theory examples algebra hr invents new concepts proves theorems otter theorem prover 
basic model family quasigroup csps employ stage approach choco produces solutions small instances 
hr employed form theory examples supplied choco 
interpret hr results implied induced constraints csp 
problem additional constraints see reformulations increase efficiency small instances 
add constraints improve efficiency csp model look solutions larger problem instances 
look concepts theorems hr output 
theorems potentially added implied constraints basic csp model 
concept specialises notion quasigroup ways 
firstly case split csp twice specify quasigroups specialised property 
performing searches covers space splitting fashion introduce symmetry breaking constraints reducing search 
secondly interested finding example exhausting search space choose look solutions specialised csp solutions original problem 
quasigroup generation experiments quasigroups finite algebras element appears row column latin squares 
quasigroups size exist certain specialised classes quasigroups open questions existence examples 
classes include termed qg qg quasigroups additional axioms qg lambda lambda lambda qg lambda lambda lambda qg lambda lambda lambda qg lambda lambda lambda lambda qg lambda lambda lambda lambda 
constraint satisfaction approaches existence questions successful size qg quasigroups settled slaney 
find quasigroup size variables ij domain ng 
quasigroup constraint imposed different row column constraints imposed quasigroup type implemented sets implication constraints 
quasigroup class ran choco increasing sizes backtracks reached 
small orders choco constructed solutions size hr removed isomorphic copies 
class ran hr full functionality minutes examples choco 
minutes turned theorem proving abilities hr performed best search concepts coverage heuristic measure discussed 
average theory formed prime implicates implication theorems proper subset premises implies goal concepts specialisations suitable case splits 
reformulations class summarised 
qg choco produced non isomorphic quasigroups hr formed theory 
noticed prime implicate lambda meaning element appear diagonal multiplication table different constraint diagonal constraint 
noticed theorem lambda lambda lambda 
lambda lambda quasigroup elements element commutes qg quasigroups anti abelian pair distinct elements commute interpreted constraint 
hr prime implicate lambda lambda highlights symmetry diagonal constraint 
hr qg results lexicographic column wise variable ordering reformulation size backtracks nodes time size backtracks nodes time size backtracks nodes time qg results smallest domain variable size backtracks nodes time size backtracks nodes time size backtracks nodes time size backtracks nodes time qg results lexicographic column wise variable size backtracks nodes time size backtracks nodes time size backtracks nodes time qg results smallest domain variable ordering reformulation size backtracks nodes time size backtracks nodes time size backtracks nodes time size backtracks nodes time table 
quasigroup class results 
dash solutions backtracks specialisations including quasigroups symmetry left identities lambda lambda interpreted constraint 
specialisation constraints specialise model 
shown table combinations constraints reformulated problem additional ways 
tested reformulations reduced number backtracks number nodes cpu time solve csps 
order test relative effectiveness reformulations different search strategies ran choco lexicographic column wise variable ordering top left hand corner smallest domain heuristic 
results table 
qg hr similar theory qg theorems held 
better results reformulations qg qg results table 
qg reformulation specialisation constraint idempotent quasigroups lambda implied constraints clearly beneficial solver 
choco solve instance order basic model implied constraints choco solved instances orders qg qg 
variable ordering important implied constraints anti abelian effective reformulations lexicographic ordering effective smallest domain heuristic 
heuristic forces choco jump quasigroup table extra pruning anti abelian constraint 
reformulated models containing implied constraints solved order problem specified limits 
induced models solve problem quickly 
qg reformulation symmetry left identities allowed instance order seconds 
similarly reformulation idempotency instance qg size 
shows value induced constraints searching specific quasigroup types reduces effort required solution obtained relatively easily 
discussed classes qg qg analysis hr output making reformulation 
qg result hr lambda lambda reformulate problem 
significantly outperformed basic model measures finding instance order basic model 
basic model solve problem slower reformulated model 
trend increased problem size easily justified time spent reformulation 
smallest domain heuristic beneficial model advantage extra pruning power limited value basic model 
qg hr re discovered theorem stated quasigroup types idempotent lambda 
added constraint produce reformulations see 
smallest domain heuristic basic model qg qg solvable orders respectively matching abilities reformulated idempotent models 
qg decrease search offered reformulated models significant increased problem size 
qg qg smallest domain heuristic substantial saving suggesting structure problem classes solver allowed focus constrained areas quasigroup table efficient 
complete account additional applications group theory balanced incomplete block designs 
demonstrated hr find implied induced constraints csps reformulating model include additional constraints gives clear improvement efficiency considering time taken run hr interpret results re formulate csp 
implied constraints produced consistent significant speedup implied induced constraints able find solutions larger problems 
far approach interactive interpret hr results reformulate csp 
intend automate interaction tween hr solver eventually cycle examples solver feed hr theory formation turn generates constraints improve solver performance 
may problematic implied constraints may improve search combining implied constraints may reduce efficiency constraint subsumes 
pruning phase important fully automated approach 
question reformulate csps automatically general needs research 
system described applied problem classes tournament scheduling shed light automating process 
hope added evidence reformulating csps particular adding implied induced constraints dramatically increase efficiency shown automating certain aspects process certainly possible worthy area research 
acknowledgments author affiliated department computer science university york 
toby walsh alan bundy continued input 
supported epsrc gr gr 

colton 
automated theory formation pure mathematics 
phd thesis division informatics university edinburgh 

colton bundy walsh 
hr automatic concept formation pure mathematics 
th ijcai pages 

colton miguel 
automatic generation implied induced constraints 
technical report apes apes research group 
available www dcs st ac uk apes html 

crawford 
theoretical analysis reasoning symmetry order logic 
proceedings workshop tractable reasoning aaai 

frisch miguel walsh 
extensions proof planning generating implied constraints 
proceedings th symposium integration symbolic computation mechanized reasoning 

jaumard morales 
constraint approach golomb ruler problem 
proceedings rd international workshop integration ai techniques 

laburthe group 
choco implementing cp kernel 
proceedings cp post conference workshop techniques implementing constraint programming systems 

mccune 
otter user guide 
technical report anl argonne national laboratories 

schaerf 
scheduling sport tournaments constraint logic programming 
constraints 

slaney fujita stickel 
automated reasoning exhaustive search quasigroup existence problems 
computers mathematics applications 
