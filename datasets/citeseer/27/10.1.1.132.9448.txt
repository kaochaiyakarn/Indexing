distrib 
comput 
doi original article roussopoulos mary baker practical load balancing content requests peer peer networks received august accepted september published online january springer verlag studies problem balancing demand content peer peer network heterogeneous peer nodes hold replicas content 
previous decentralized load balancing techniques distributed systems base decisions periodic updates containing information load available capacity observed serving entities 
show techniques peer peer context address peer node heterogeneity suffer significant load oscillations result unutilized capacity 
propose new decentralized algorithm max cap maximum inherent capacities replica nodes 
show previous algorithms tied timeliness frequency updates consequently requires significantly update overhead 
max cap handle heterogeneity peer peer environment suffering load oscillations 
keywords peer peer networks load balancing content replica selection peer peer networks popular architectures content distribution 
basic premise networks set replica nodes provide requested content increasing availability interesting content requiring presence particular serving node 
peer peer networks push index entries overlay peer network response lookup queries specific content :10.1.1.140.3129:10.1.1.105.3673
index entries roussopoulos harvard university cambridge ma mail eecs harvard edu baker ca mail hp com point locations replica nodes particular content served typically cached finite amount time considered stale 
little focus individual peer node choose returned index entries forward client requests 
reason considering choice load balancing 
explore problem load balancing demand content peer peer network 
primary goal fairly balance uplink bandwidths serving peers upload bandwidth typically scarce resource peer peer network 
balancing upload bandwidths challenging reasons 
peer peer network centralized dispatcher performs load balancing requests peer node individually decision assign incoming requests replicas 
second nodes typically know identities peer nodes network coordinate nodes 
replica nodes peer peer networks necessarily homogeneous 
replica nodes may powerful connectivity may limited inherent capacity handle content requests 
previous load balancing techniques base decisions periodic continuous updates containing information load available capacity 
refer information load balancing information lbi 
previous approaches take account heterogeneity peer nodes techniques migration handoff tasks require close coordination serving entities achieved peer peer environment suffer significant load oscillations herd behavior peer nodes simultaneously forward unpredictable number requests replicas low reported load high reported available capacity causing overloaded 
herd behavior defeats attempt provide load balancing 
roussopoulos baker techniques depend timeliness lbi updates 
wide area nature peer peer networks variation transfer delays peer nodes guaranteeing timeliness updates difficult 
peer nodes experience varying degrees staleness lbi updates receive depending distance source updates 
maintaining timeliness lbi updates costly updates travel internet reach interested peer nodes 
smaller inter update period larger overlay peer network greater network traffic overhead incurred lbi updates 
peerto peer environment effective load balancing algorithm critically dependent timeliness updates 
propose new practical load balancing algorithm max cap decisions inherent maximum capacities replica nodes 
define maximum capacity maximum number content requests time unit replica claims handle 
alternative measures maximum allowed connections 
maximum capacity contract replica agrees abide 
replica sustain advertised rate may choose advertise new maximum capacity avoid overload 
max cap tied timeliness frequency lbi updates result applied peer peer environment outperforms algorithms load available capacity benefits heavily dependent timeliness updates 
show max cap takes peer node heterogeneity account algorithms load 
algorithms available capacity take heterogeneity account show surprisingly suffer significant load oscillations presence small fluctuations workload workload request rate total maximum capacity replicas 
hand max cap avoids overloading replicas cases resilient large fluctuations workload 
key advantage max cap uses information affected changes workload 
peer peer environment expectation set participating nodes changes constantly 
replica arrivals departures peer network affect information carried lbi updates compare max cap availability algorithms set replicas continuously changes 
show max cap affected changes replica set availability algorithms 
evaluate load availability algorithms compare max cap 
controlled update propagation cup protocol propagate lbi updates required algorithms 
lbi updates propagated replica nodes serving particular content conceptual tree similar applicationlevel multicast tree 
vertices tree peer nodes receiving requests content 
peer nodes lbi updates choosing replica forward client request 
study load balancing problem context peer peer systems results presents apply distributed system goal balance demand content service replicated set widely dispersed heterogeneous servers 
rest organized follows 
section describes system model study 
section introduces algorithms compared 
section presents experimental results showing peer peer environment max cap outperforms algorithms overhead 
section describes related sect 
concludes 
system model assume peer peer overlay network widely distributed nodes 
peers store share content peers heterogeneous capacity serve content 
placement file particular peer decided owner peer global placement policy 
control replicas particular file placed 
set participating peers system dynamic peers enter leave system continuously content availability peer little minutes 
algorithms evaluate different algorithms inv load avail cap 
represents different class algorithms proposed distributed systems literature 
study algorithms perform applied peerto peer context compare proposed algorithm max cap 
algorithms depend different lbi propagated goal balance demand specific piece content fairly set replicas providing content 
particular algorithm avoid overloading replicas especially aggregate capacity replicas sufficient handle content request workload 
algorithm prevent individual replicas oscillating overloaded underloaded 
oscillation undesirable reasons 
applications limit number requests host outstanding 
means replica node overloaded drop requests receives 
forces requesting client user resend request resulting additional delay 
applications allow requests queued replica node overloaded queuing delay incurred increase 
second importantly peer peer network issue fairness sensitive 
owners replica nodes practical load balancing content requests peer peer networks want nodes overloaded nodes network underloaded 
particularly true peer topeer networks placement content particular node decided owner node global placement policy 
algorithm fairly distribute request workload causing replicas oscillate overloaded underloaded preferable 
describe algorithms evaluate turn inv load allocation proportional inverse load 
load balancing algorithms base allocation decision load observed reported serving entities see related sect 

representative load algorithm examine inv load algorithm genova 
homogeneous environment algorithm shown perform better load algorithms 
algorithm peer node network chooses forward request replica probability inversely proportional load reported replica 
means replica smallest reported load report received receive requests node 
load defined number request arrivals replica time unit 
possible load metrics include number request connections open replica reporting time request queue length replica 
applied heterogeneous environment peer peer network inv load fails 
intuitive inv load distinguish replicas observing load having different maximum capacities 
completeness verify intuition appendix altered inv load take heterogeneity account weighting scheme maximum capacity 
find results variation identical avail cap algorithm consider 
reason consider inv load weighted inv load remainder 
avail cap allocation proportional available capacity 
algorithm peer node chooses forward request replica probability proportional available capacity reported replica 
available capacity maximum request rate replica handle minus load actual request rate experienced replica 
algorithm algorithm proposed zhu load sharing cluster heterogeneous servers 
avail cap takes account heterogeneity distinguishes nodes experience load different maximum capacities 
example global placement policy distributed hash table requires particular file stored node responsible portion hash table name file hashes 
contrast scheme node simply stores pointers locations nodes voluntarily store content 
focus replication approaches content distribution networks beehive premise proactive replication difficult enforce peer peer network voluntary non dedicated peers 
avail cap appears intuitive sends requests replicas currently capable handling requests 
replicas overloaded report available capacity zero excluded allocation decision report positive available capacity 
unfortunately exclusion cause avail cap suffer severe load oscillations sect 
main reason instability 
inv load avail cap depend load available capacity reported replica report available 
metrics directly affected changes request workload algorithms require replicas periodically update lbi 
assume replicas synchronized send reports 
decreasing period consecutive lbi updates increases freshness lbi cost higher overhead measured number updates pushed peer peer network 
overhead exacerbated increasing network size 
large peer peer networks may hops updates travel time order seconds 
max cap allocation proportional maximum capacity 
algorithm propose 
algorithm peer node chooses forward request replica probability proportional maximum capacity replica 
maximum capacity contract replica advertises indicating maximum number requests replica claims handle time unit 
load available capacity maximum capacity replica affected changes request workload 
max cap depend timeliness lbi updates 
fact replicas push updates choose advertise new maximum capacity 
choice depends extraneous factors unrelated independent workload see sect 

replicas rarely choose change contracts max cap incurs near zero overhead 
show independence timeliness frequency lbi updates max cap practical elegant peer peer networks distributed systems 
experiments describe experimental setup including details simulator network model parameters 
evaluate performance avail cap max cap variety scenarios observed real world peer peer systems 
experimental setup describe experiments measure ability avail cap max cap algorithms balance requests specific piece content fairly replicas holding piece content 
say piece content roussopoulos baker widely peer peer networks files divided equal sized chunks clients fetch chunks file parallel improve download time 
movie file may larger song file means take larger number chunk requests download 
assume replica serving file partition maximum capacity files advertise file accordingly 
describe sect 

experiments requests particular piece content posted nodes peer peer network seconds 
peer node receives local client request content uses controlled update propagation cup protocol retrieve set index entries pointing replica nodes network serve content lbi replica 
lbi peer node applies load balancing algorithm choose replica nodes 
points client chosen replica 
cup cache maintenance protocol delivers updates cached index entries scales efficiently tens thousands nodes 
particular mechanism lbi delivered peer nodes essential goal comparing load balancing algorithms defer discussion cup appendix simulate peer peer network implements distributed hash table dht index entries content addressable network approach :10.1.1.140.3129
dht virtual coordinate space evenly divided participating peer nodes peer authority particular portion coordinate space 
index entries pointing locations content items mapped virtual coordinate space uniform hash function peer portion index entry maps peer responsible particular index entry 
dimensional cartesian coordinate space torus 
results 
note varying dimensions topology peer topeer overlay network exhibits similar results client peers requesting content overlay network retrieve index entries pointing serving peers 
request content directly serving peers content transferred overlay network 
java discrete event simulator designed scalability large numbers nodes large amounts traffic long periods time 
offers facilities variety flow network models allowing trade offs fast runtimes accuracy 
interested fairly balancing upload links serving peers 
internet typically bottleneck link communicating hosts edge network 
network model assumes bottleneck link exists core network 
means transfers hosts limited link connections network 
example dsl peer downloading content peer dial modem limited speed dsl link modem link 
case modem link limiting factor 
assumption need simulate intermediate routers network achieves faster runtime fold speedup memory network simulator ns maintaining accuracy 
simulation input parameters include number nodes overlay peer peer network number replica nodes holding content interest maximum capacities replica nodes distribution content request inter arrival times lbi update period amount time replica waits sending lbi update avail cap algorithm 
assign maximum capacities replica nodes applying results previous measures upload capabilities nodes peer peer networks 
upload capabilities peer nodes vary orders magnitude 
particular gnutella networks measured nodes connected dial modems connected broadband connections cable modem dsl upload speed times dial modems remaining high connections upload speed times dial modems 
assign maximum capacities requests second nodes probability respectively 
experiments number nodes network node individually decides assign incoming content requests replica nodes 
stress test compare load balancing algorithms examine workloads approach exceed magnitude workload serving replica nodes capable satisfying workloads require total maximum capacities replica nodes 
poisson pareto request inter arrival distributions hold peer peer networks :10.1.1.132.970
find experiments vary number nodes network keep request workloads exhibit similar behavior 
magnitude content request workload highlights differences load balancing algorithms 
compare avail cap max cap poisson arrivals show avail cap takes replica heterogeneity account suffer significant load oscillations caused small fluctuations workload sect 

second compare max cap avail cap bursty pareto arrivals sect 

third explain avail cap suffers sect 

fourth compare effect performances avail cap max cap replicas continuously enter leave system sect 

fifth consider effect max cap replicas honor advertised maximum capacities significant extraneous load sect 

examine tradeoffs arise handling multiple objects max cap sect 

practical load balancing content requests peer peer networks utilization time seconds utilization replica utilization fig 
replica utilization versus time avail cap max cap poisson request arrivals compare avail cap max cap experiment replicas poisson request arrival rate total rate handled replicas total maximum capacity replicas 
workload load balancing algorithm able avoid overloading replicas 
avail cap inter update period second quite aggressive large peer peer network advantageous avail cap 
max cap parameter inapplicable replica nodes send periodic updates 
shows scatterplot utilization replica proceeds time avail cap max cap 
define utilization request arrival rate observed replica divided maximum capacity replica 
graph distinguish points different replicas 
see fig 
avail cap consistently overloads replicas 
contrast fig 
max cap tends cluster replica utilization 
ran experiment range poisson arrival rates similar results rates total maximum capacity replicas 
avail cap consistently overloads replicas max cap clusters replica utilization utilization average request rate divided total maximum capacity replicas 
avail cap replicas consistently overloaded underloaded experiment 
individual replicas continuously oscillate overloaded severely underloaded 
see sampling oscillation looking utilizations individual replicas time 
fig 
utilization minute period experiment representative replica replica classes low medium high maximum capacity 
plot ratio request rate total maximum capacity replicas line showing utilization 
see replica classes avail cap suffers utilization time seconds utilization replica utilization significant oscillation compared max cap causes little oscillation utilization line 
behavior occurs experiment 
shows replica percentage received requests arrive replica overloaded series experiments replicas avail cap max cap respectively 
axis order replicas maximum capacity low capacity replicas plotted replica ids followed medium capacity replicas replica ids followed high capacity replicas replica ids 
avail cap inter update period second fig 
results higher percentages max cap fig 

avail cap causes fairly percentages 
consistent oscillations observed fig 
replica overloaded roughly amount time regardless low medium high capacity replica 
performance avail cap highly dependent inter update period 
increase period available capacity updates grow stale performance avail cap suffers 
example fig 
show avail cap period seconds 
overloaded percentages jump replicas 
max cap fig 
exhibits step behavior low capacity replicas having highest overloaded percentages followed medium capacity replicas high capacity replicas overloaded 
step behavior occurs lower capacity replicas tolerance noise random coin tosses peer nodes perform assigning requests 
tolerance small fluctuations request rate 
result lower capacity replicas overloaded easily higher capacity replicas 
see fig 
max cap replicas lower maximum capacity overloaded time replicas higher maximum capacity 
peer peer environment believe max cap practical choice avail cap 
max cap typically incurs overhead 
second max cap better handle request rates total maximum roussopoulos baker utilization utilization low cap replica utilization time seconds low cap replica utilization time seconds utilization utilization medium cap replica utilization time seconds medium cap replica utilization time seconds utilization utilization high cap replica utilization time seconds high cap replica utilization time seconds fig 
replica utilization versus time representative low medium high capacity replicas 
top graphs show avail cap bottom show max cap queries overloaded queries replica id queries overloaded queries replica id queries overloaded queries replica id fig 
percentage overloaded requests versus replica id experiments 
show avail cap inter update period seconds max cap inter update period capacity replicas handle small fluctuations workload typical poisson arrivals 
compare avail cap max cap perform workload rates fluctuate total maximum capacity replicas 
scenario occur requests bursty inter request arrival times follow pareto distribution 
pareto request arrivals observed peer peer networks request inter arrivals exhibit burstiness time scales making pareto distribution candidate modeling inter arrival times 
pareto request arrivals characterized frequent intense bursts requests followed idle periods varying lengths 
bursts average request arrival rate times total maximum capacity replicas 
representative experiment pareto shape parameter scale parameter respectively 
particular settings cause bursts total maximum capacity replicas 
intense bursts load balancing algorithm expected keep replicas underloaded 
best algorithm avoid replicas leaving unutilized capacity goes wasted 
fig 
plot representative replica utilizations minute period experiment 
plot ratio request rate total maximum capacity utilization line 
see avail cap suffers higher peaks range shown axis lower valleys replica utilization max cap 
request rate total maximum capacity practical load balancing content requests peer peer networks utilization utilization low cap replica utilization time seconds low cap replica utilization time seconds utilization utilization medium cap replica utilization time seconds medium cap replica utilization time seconds fig 
representative replica utilization versus time pareto arrivals 
top graphs show avail cap bottom show max cap times replicas avail cap underloaded 
contrast max cap generally avoids having unutilized capacity request rate 
max cap medium high capacity replicas causes little utilization low capacity replica 
evident fact curve replica utilization tends match curve request rate medium high capacity graphs 
avail cap suffer avail cap suffer cycle created available capacity update replica affects subsequent update replica 
affects allocation decisions nodes turn affect replica updates 
consider happens replica overloaded reports available capacity zero 
report eventually reaches nodes causing directing requests replica 
exclusion overloaded replica allocation decision shifts burden workload replicas 
cause replicas overload report zero available capacity excluded replica experiences sharp decrease utilization 
sharp decrease causes replica reporting positive available capacity attracts requests 
replicas overloaded excluded allocation decision replica receives flock requests cause overloaded 
replica experience severe oscillation utilization continuously rises maximum capacity falls sharply 
utilization utilization high cap replica utilization time seconds high cap replica utilization time seconds studied effect adding damping avail cap algorithm replica advertises available capacity function previously advertised capacity current available capacity replica approaching overload advertises available capacity ward requests prevent overload happening 
damping beneficial single replica serving content multiple replicas simultaneously damping find interdependence updates results oscillation 
max cap replica overloaded overload condition confined replica 
true case underloaded replicas 
overload situations replicas reported influence subsequent requests allocated replicas 
key property allows max cap avoid herd behavior 
situations avail cap performs reasonably suffering oscillation 
describe factors affect performance avail cap get clearer picture reactive nature avail cap beneficial harmful causes oscillation 
factors affecting avail cap factors affect performance avail cap inter update period inter request period amount time takes nodes network receive latest update replica ratio roussopoulos baker request rate total maximum capacity replicas 
examine factors considering cases case smaller sufficiently small replica pushes update peer nodes receive update request arrival network 
case avail cap performs nodes latest load balancing information receive request 
case long relative request rate total maximum capacity replicas 
case replica overloads remaining replicas able cover proportion requests intended overloaded replica lot extra capacity system 
result avail cap avoids oscillations 
see experimental evidence sect 

threshold specific particular configuration replicas results 
configurations different threshold percentages message request rate total maximum capacity replicas avoid oscillation 
provisioning extra capacity system avail cap avoid oscillation particular case high price pay load stability 
case long relative request rate total maximum capacity replicas 
case observe experiments avail cap suffer oscillation 
request arrives directly affects available capacity replicas 
request rate greater update rate update stale shortly replica pushed 
replica inform nodes changing available capacity current update period 
point requests arrived assigned previous stale available capacity information 
case avail cap suffer updates arrive nodes instantly issued 
nodes simultaneously avoid overloaded replica making allocation decision update issued 
increases staleness report exacerbates performance avail cap 
large peer peer network expect order seconds current peer peer networks nodes diameters ranging handful hops 
consider second small aggressive inter update period practical peer peer network 
fact second may aggressive due overhead generates 
means particular content experiences high popularity expect typically circumstances avail cap load balancing choice 
popular content avail threshold specific particular configuration replicas low capacity high capacity 
cap feasible choice unclear loadbalancing replicas important request rate low 
performance max cap independent values andt importantly max cap require continuous updates replicas issue updates choose re issue new contracts report changes advertised maximum capacities 
believe max cap practical choice peer peer context avail cap 
dynamic replica set key characteristic peer peer networks subject constant change peer nodes continuously enter leave system 
section compare max cap avail cap dynamic experiments poisson request arrival rate total maximum capacity replicas 
network starts replicas period seconds movement network begins 
experiment replica leaves replica enters network seconds 
second dynamic experiment replicas leave replicas enter network seconds 
studies peer peer file sharing systems median user session duration peer approximately minutes 
content may available peer deleted peer point user session 
results content availability order minutes 
show results experiments stress test load balancing algorithms kind dynamism 
replicas leave randomly chosen 
replicas enter network enter maximum capacities probability respectively initial configuration 
means total maximum capacity active replicas network varies experiment depending differences capacities entering leaving replicas 
figures show dynamic experiment utilization active replicas versus time avail cap max cap 
note points zero utilization indicate newly entered replicas 
jagged line plots ratio current sum maximum capacities network original sum maximum capacities 
change replica set replica utilizations avail cap max cap change 
replica utilizations rise falls vice versa 
see times times double workload request rate 
time period avail cap performs workload demanding plenty extra capacity system case previous section 
time falls back algorithms exhibit behavior start 
max cap adjusts nicely clusters replica utilization avail cap starts suffer 
practical load balancing content requests peer peer networks utilization utilization time seconds replica utilization time seconds replica utilization utilization utilization time seconds replica utilization time seconds replica utilization fig 
replica utilization versus time 
top graphs show switch seconds bottom show switches seconds data point measure difference actual replica utilization optimal replica utilization time defined query rate divided total maximum capacity replicas 
average utilization difference exhibited max cap standard deviation 
average utilization difference avail cap standard deviation 
figures show utilization scatterplot second dynamic experiment 
see changing half replicas seconds dramatically affect 
example drops time utilizations rise dramatically avail cap max cap 
period workload request rate times starts increase see max cap adjusts replica utilization quickly 
average utilization difference max cap standard deviation average utilization avail cap standard deviation 
dynamic experiments show things workload demanding plenty extra capacity behavior avail cap comes close max cap 
avail cap suffers capacity decreases 
second reactive nature avail cap causes affected short lived decreases total maximum capacity max cap conclude dynamic environment peer peer network max cap continues better choice 
extraneous load shown replicas honor maximum capacities max cap avoids oscillation avail cap suffer update overhead 
occasionally replicas may able honor maximum capacities extraneous load caused applications running replicas network conditions unrelated content request workload 
deal possibility extraneous load modify max cap algorithm slightly honored maximum capacity maximum capacity minus extraneous load replica experiencing 
peer node chooses replica forward content request probability proportional honored maximum capacity 
view honored maximum capacity reported replica contract 
adhere contract extra capacity give report deficit surplus affected may overloaded underloaded receiving request share proportional previous advertised honored maximum capacity 
hand replica chooses issue new contract new honored maximum capacity cause portion workload shift replicas 
shift affect contracts replicas 
contract replica affected extraneous load experienced thatis may point choose roussopoulos baker re issue contract chooses devote capacity extraneous load received requests result change contract 
contrast avail cap available capacity reported replica directly affects available capacities reported 
experiments inject extraneous load replicas find performances max cap avail cap similar seen dynamic replicas experiments 
replica advertises new honored maximum capacity behaves replica leaving replaced new replica different maximum capacity 
handling multiple objects shown max cap practical fair avail cap allocating load replicas serving particular object 
peer serving multiple files peer partition maximum capacity files advertise file accordingly 
policy determine partition independent policies nodes example individual file popularity observed node 
couple interesting questions scenarios arise handle multiple objects peer hosts popular object relieved duties objects hosts 
example consider scenario peer high capacity hosts unpopular object highly popular object peer low capacity hosts unpopular ifo receives requests swamp peer system send requests 
scenario highlights important tradeoff 
peerto peer system control objects stored served peer 
peer chooses objects store serve independently objects peers choose 
peer serving particular object cares peers serving object getting fair share load respect object 
main objective fairness utilization serving peers respect object correct thing send requests continue sending requests 
peer reject requests handle due workload requests eventually sent coin toss retries rejected clients 
hand assume main objective fairness utilization serving peers objects argue fair thing send requests support need modify max cap peers take account peers storing 
unfortunately requires close coordination kind dynamic update propagation avail cap suffers workload fluctuation 
object popularity changes quickly peer re partition capacities objects peer advertise reallocation 
example consider scenario objects 
replicated peers replicated peers suppose maximum capacities ratio ratio 
starts popular 
time suddenly popular 
highest capacity replica serving receive largest proportion requests experience overload 

max cap node individually decides partition maximum capacity objects serves 
example node choose simply allocate maximum capacity evenly objects serves 
example scenario node may allocate total capacity requests 
means ratio maximum capacities nodes 
option allocate capacity overbooking approach 
case unused capacity cover potential overload vice versa 
third option take advantage popularity tracking algorithm allocate capacity object proportional object popularity 
choice policy belongs individual node require consultation nodes system 
choice peer advertises re allocation capacities similar choice faces experiencing extraneous load sect 

peer advertise change allocations chooses simply borrow unused allocated capacity object serve requests affected 
overload peer experiences result confined peer affect nodes 
peer chooses advertise new maximum capacity result adjusting allocations effect similar results dynamic replica experiments node behaves leaving replaced new node different maximum capacity 
related load balancing focus studies described distributed systems literature 
describe previous techniques applied peer topeer context 
techniques directly applied peer peer context task handoff redirection process migration heavily loaded lightly loaded servers cluster described thesis format 
load algorithms algorithms load common approach performing load balancing set servers choose server reported load set practical load balancing content requests peer peer networks servers 
approach commercial settings research community performs homogeneous system task allocation performed complete date load information 
system multiple dispatchers independently performing allocation tasks approach shown behave badly especially load information stale 
studies focused strategy subset load information available 
advantage incurring traffic load updates servers sent network allocation decision 
approach involves randomly choosing small number homogeneous servers choosing server smallest reported load set :10.1.1.28.7396
particular homogeneous systems mitzenmacher studies tradeoffs various choices various degrees staleness load information reported 
degree staleness increases smaller values preferable 
focus heterogeneous servers 
max cap probabilistic approach maximum capacities allows avoid transmitting stale information altogether 
dahlin proposes load interpretation algorithms take account age staleness load information reported set distributed requests arrive system determine server allocate request 
dahlin shows primary drawback algorithms exhibit poor performance estimate rate request arrivals system inaccurate known case arrivals bursty workload unpredictable 
algorithms assume clocks participating entities synchronized difficult achieve large peer peer system spread internet 
reasons focused developing algorithm depend arrival rate accurately estimated 
cfs uses proportional allocation resources provide load balancing files nodes 
cfs file system built top chord peer peer system implements distributed hash table :10.1.1.105.3673
chord peers responsible portion identifier space conceptually depicted ring 
queries search particular identifiers routed ring peers responsible identifiers 
cfs deals heterogeneity file serving peers allocating ring virtual peers actual peers allowing administrators assign peer number virtual peers roughly proportional peer network storage capabilities 
cfs authors suggest possibility having servers delete virtual peers high load 
deletion causes peers acquire additional virtual peers cover identifier space deleted virtual peers 
high system load authors suggest cascade deletions virtual peers network occur 
deleting virtual peers high load analogous sending updates reporting reduced available capacity 
confirm load approaches capacity system kind dynamic inter dependent behavior peers lead oscillation worth cost propagating updates 
subsequent studies examine prevent thrashing problem moving virtual servers heavily loaded lightly load peers transfer cause load light peers surpass pre defined threshold 
studies structured distributed hash tables examine loadbalancing problem perspective item stored virtual server requests item go peer owns virtual server 
study replica nodes serve item problem enable large numbers widely dispersed client nodes independently choose replica nodes demand fairly distributed replicas 
available capacity algorithms algorithms available capacity common approach choose set servers available capacity server available bandwidth network server 
server highest available capacity bandwidth chosen client request 
assumption reported available capacity bandwidth continue valid chosen server finished servicing client request 
approach exclude servers fail utilization threshold choose remaining servers 
classify machines lightly utilized heavily utilized choose randomly lightly utilized servers 
focuses local area distributed systems 
approach enhance round robin dns loadbalancing set widely distributed heterogeneous web servers 
maximum capacities capable servers factor capable servers 
see sect 
context peer peer network maximum capacities replicas differ orders magnitude excluding serving node temporarily allocation decision result severe load oscillation 
examine problem load balancing peer peer network goal distribute demand particular content fairly set replica nodes serve content 
existing load balancing algorithms proposed distributed systems literature roussopoulos baker appropriate peer peer network 
algorithms purely load handle peer heterogeneity 
algorithms available capacity suffer load oscillations workload request rate total maximum capacity replicas 
load oscillations result unutilized capacity 
provide model shows available capacity information detracts enhances allocation decision 
propose evaluate max cap practical loadbalancing algorithm handles heterogeneity suffer oscillations workload rate approaches total maximum capacity replicas 
adjusts better large fluctuations workload constantly changing replica sets 
max cap incurs overhead algorithms available capacity avoids chasing dynamic updates interdependent 
contract issued replica independent contracts issued 
fact replicas rarely choose change contracts max cap incurs overhead regardless network size 
believe max cap practical elegant algorithm loadbalancing peer peer networks distributed systems large number client dispatchers heterogeneous servers widely dispersed internet 
benefited greatly discussions petros maniatis armando fox nick mckeown rajeev motwani 
invaluable feedback 
anonymous reviewers suggested ways improve including suggesting multiple object scenarios described 
research supported national science foundation stanford networking research center darpa contract 
appendix propagating lbi updates appendix briefly describe leverage cup protocol study load balancing problem peer peer context 
cup protocol maintaining caches index entries peer topeer networks 
summarize cup works structured peer topeer networks 
networks lookup queries particular content follow defined path querying node authority node guaranteed know location content network 
cup node peer peer network maintains logical channels neighbor query channel update channel 
query channel forward lookup queries content interest neighbor closest authority node content 
update channel forward query responses asynchronously neighbor 
query responses contain sets index entries point nodes holding content question 
update channel update index entries cached neighbor 
shows snapshot cup progress network nodes 
logical channels shown pair nodes 
left half node shows set content items node authority 
right half shows set content items node cached index entries result handling lookup queries 
example node authority node content nodes cached index entries content 
process querying updating index entries particular content forms cup tree root authority node fig 
cup trees content branches tree formed paths traveled lookup queries nodes network 
example fig 
node root cup tree branch grown result lookup query node authority node content guaranteed know location nodes called content replica nodes serve content 
replica nodes send birth messages authority indicate serving content refreshes invalidation messages indicate serving longer serving content 
forwards birth refresh invalidation messages receives propagated cup tree interested nodes network 
example fig 
update messages index entries associated content arrive replica nodes forwarded cup tree level level level 
cup reduces average latency content search queries order magnitude variety workloads scales tens thousands nodes 
details refer reader prior published 
leverage cup propagate updates load balancing information replica load available capacity interested peer nodes overlay network 
peer nodes information choosing replica client request forwarded 
appendix inv load heterogeneity appendix examine performance inv load heterogeneous peer peer environment 
fairly short inter update period second quite aggressive large peer peer network 
replica nodes serve content item interest 
generate request rates item poisson process arrival rate total maximum capacity replicas 
workload load balancing algorithm able avoid overloading replicas 
shows scatterplot utilization replica proceeds time inv load 
define utilization request arrival rate load observed replica divided maximum request rate replica handle maximum capacity replica 
described sect 
assign maximum capacities requests second nodes probability respectively 
graph distinguish points different replicas 
see simulation practical load balancing content requests peer peer networks utilization time seconds utilization replica utilization queries overloaded replica id fig 
inv load replica utilization versus time percentage overloaded requests versus replica id point time replicas severely lightly underutilized 
shows replica percentage received requests arrive replica overloaded 
replicas receive requests overloaded replicas low medium capacity replicas 
replicas receive requests overloaded replicas high capacity replicas 
see inv load penalizes capable replicas giving high capacity replicas easy time 
inv load designed perform homogeneous environment 
applied heterogeneous environment peer topeer network fails 
see sect 
max cap better suited heterogeneous environments 
nice bonus max cap better load balancing performance inv load homogeneous environment require continuous inter dependent updates 
focus heterogeneous environments peer peer networks refer reader author thesis information homogeneous environments 

www overnet com 
www kazaa com 
ns project 
www isi edu nsnam ns 
project network simulator 
sourceforge net projects 
gnutella protocol specification 
gnutella wego 
com 
yang ibarra scalable distributed www server networked workstations 
journ 
parallel distributed computing 
bestavros load balancing cluster web servers distributed packet rewriting 
ieee intl performance computing communications conference 
azar broder karlin upfal balanced allocations 
acm symp 
theory computing 
blake rodrigues high availability scalable storage dynamic peer networks pick 
hotos 
byers considine mitzenmacher simple load balancing distributed hash tables 
iptps 
byers considine mitzenmacher geometric generalizations choices 
spaa 
cao search replication unstructured peer peer networks 
talk stanford edu 
yu redirection algorithms load sharing distributed web server systems 
icdcs 
carter crovella server selection dynamic path characterization wide area networks 
infocom queries 
chu levine availability locality measurements peer peer file systems 
proc 
scalability traffic control ip networks ii conferences 
cohen incentives build robustness bittorrent 
workshop economics peer peer systems 
yu dynamic load balancing geographically distributed heterogeneous web servers 
icdcs 
dabek kaashoek karger morris stoica wide area cooperative storage cfs 
sosp 
dahlin interpreting stale load information 
icdcs 
cisco distributed director 
cisco systems whitepaper 
eager lazowska zahorjan adaptive load sharing homogeneous distributed systems 
ieee trans 
software engineering 
fox gribble chawathe brewer gauthier cluster scalable network services 
symposium operating systems principles 
genova christensen challenges url switching implementing globally distributed web sites 
workshop scalable web services 
giuli baker scalable flow network simulator 
technical report cs pf computer science department stanford university stanford ca usa 
godfrey lakshminarayanan surana karp stoica load balancing dynamic structured systems 
infocom 
godfrey stoica heterogeneity load balance distributed hash tables 
infocom 
karger ruhl simple efficient load balancing algorithms peer peer systems 
spaa 
karp luby heide efficient pram simulation distributed memory machine 
th acm symposium theory computing 
seltzer distributed secure load balancing skew heterogeneity churn 
infocom 
lu lau adaptive load balancing algorithm heterogeneous distributed systems multiple task classes 
icdcs 
manku balanced binary trees id management load balance distributed hash tables 
podc 
markatos tracing large scale peer peer system hour life gnutella 
nd ieee acm intl symposium cluster computing grid 
towsley stankovic analysis effects delays load sharing 
ieee trans 
computers 
towsley stankovic adaptive load sharing heterogeneous distributed systems 
journal parallel distributed computing roussopoulos baker 
mitzenmacher power choices randomized load balancing 
phd thesis uc berkeley 
mitzenmacher useful old information 
podc 
paxson floyd wide area traffic failure poisson modeling 
ieee acm transactions networking 
sirer beehive lookup performance power law query distributions peer peer overlays 
proceedings networked system design implementation nsdi 
rao lakshminarayanan surana karp stoica load balancing structured systems 
iptps 
ratnasamy francis handley karp shenker scalable content addressable network 
sigcomm 
ripeanu foster mapping gnutella network macroscopic properties large scale peer peer systems 
iptps 
roussopoulos controlled update propagation peer peer networks 
phd thesis stanford university 
roussopoulos baker cup controlled update propagation peer peer networks 
usenix annual technical conference 
rowstron druschel pastry scalable distributed object location routing large scale peer peer systems 
middleware 
saroiu gummadi gribble measurement study peer peer file sharing systems 
proc 
multimedia computing networking 
krueger singhal load distributing locally distributed systems 
ieee computer pp 

stoica morris karger kaashoek balakrishnan chord scalable peer peer lookup service internet applications 
sigcomm 
queuing systems selection shortest queues asymptotic approach 
problems information transmission 
wang pai peterson effectiveness request redirection cdn robustness 
osdi 
weber optimal assignment customers parallel servers 
journal applied probability 
winston optimality shortest line discipline 
journal applied probability 
zhu yang zheng watson ibarra smith adaptive load sharing clustered digital library services 
th ieee hpdc roussopoulos assistant professor computer science gordon mckay endowment harvard university 
joining harvard postdoctoral fellow computer science department stanford university 
received phd master degrees computer science stanford bachelor degree computer science university maryland college park 
interests areas distributed systems networking mobile wireless computing 
mary baker senior research scientist hp labs 
research interests include distributed systems networks mobile systems security digital preservation 
joining hp labs faculty computer science department stanford university ran project 
received phd university california berkeley 
