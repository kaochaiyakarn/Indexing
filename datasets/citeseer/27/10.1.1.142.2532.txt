programming language extension probabilistic robot programming sebastian thrun school computer science carnegie mellon pittsburgh pa thrun org years probabilistic techniques led improved solutions robotics problems 
general tools currently available aid development probabilistic robotic software 
presents programming language extension integrates probabilistic computation learning 
main ideas probability distributions usable floating point numbers smoothly integrate function approximators code 
innovations facilitate development robust probabilistic robot software illustrated proto type program mail delivery robot 
robots sensor systems cope uncertainty 
uncertainty arises sensor limitations unpredictable aspects robot environments 
years increased interest apply probabilistic techniques learning algorithms problems robotics 
established fact real world domains probabilistic algorithms robust traditional non probabilistic solutions see survey 
virtually published algorithms field tuned specific robot problems little assistance available developing new probabilistic programs 
observation raises question distill principles probabilistic robotics package domain independent way 
principles 
describes attempt develop special purpose programming language developing probabilistic robot programs 
language called ces short embedded systems extension arguably popular programming language robotics date 
ces offers new basic features currently programming environment mechanism computing probability distributions mechanism incorporating learning algorithms 
particular ces programming probability distributions easy programming floating point numbers 
learning mechanism allows data driven adaptation software robot software shaped teaching 
existing implementations illustrate approach reduces programming effort probabilistic software order magnitude discussed gesture driven mail delivery robot programs lines long requires approximately hours training functional 
probabilistic computation probabilistic data types basic computational entity ces probability distribution 
probability distribution defined sets events underlying random variables 
event space random variable type base type template prob base type defines probability distribution type base type 
base type may atomic numerical data type int double composite data type struct vector 
example base type double declaration prob double declares variable probability distribution dimensional continuous space doubles 
just multiple ways define constants multiple ways define constants probabilistic variables 
ces offers different approaches 
enumeration 
probability distribution specified list type vn pn tuple specifies discrete event associated probability length list may vary 
example statement assigns probabilistic variable distribution assigns probability values probability values domain variable base type 

type conversion 
point mass distributions assign probability mass single value base type specified value 
example assignment assigns point mass distribution centered value 
statement example implicit type conversion base types probabilistic generalizations 

library 
common discrete continuous distributions offered library 
example assignments uniform normal assign dimensional uniform distribution variance respectively 
normal distribution mean 
complex probability distributions constructed command described 
type conversions straightforwardly defined 
particular interest conversion probabilistic variable base type vice versa 
statement type assigns point mass distribution probabilistic base type 
conversely probabilistic variable base type statement assigns expectation example code segment prob double double assigns value notice expectation certain base types 
int part domains case result truncated 
arithmetic operations arithmetic operators applicable probabilistic variables 
probability distribution complex numbers 
consequently statements affecting probabilistic variable interpreted way 
see consider example represent probability distributions 
possible interpretations statement multiplication independent random variables defined different independent event spaces multiplication probability distributions defined event space 
illustrate different views assume probabilistic variables interpretation correspond independent events 
set possible outcomes multiplication underlying random variables may independently take values independence assumption resulting distribution second interpretation random variables take value times 
product product individual probability measures normalization see note product probability underlying event similarly normalization resulting distribution specified 
ways interpret statements ones important ones 
call operations adhere interpretation type operations correspond second type ii operations 
defined general terms 
type operations binary argument operator probabilistic variables base type 
probabilistic variable represents probability distribution indicator variable argument true 
put words probability assigned event takes value total probability values domains 
equals probability variables discrete base type integrals replaced sums 
reader quickly verify general definition compliant example section 
implementation type operations overloaded conventional function symbols 
type ii operations type ii operators manipulate probability measures directly assuming operands defined event space fully dependent 
binary operator probabilistic variables 
probabilistic variable distribution clearly expression sense conditions defined real numbers domain probabilities combination nonnegative denominator larger zero 
example type ii operator bayes rule suppose represents 
ab represents ab bayes rule obtained type ii multiplication 
implementation type ii operators realized textual commands multiply distinguishes type operators 
type ii operators similar language described 
probabilistic statement execution final powerful tool enables programmers extend probabilistic type calculations complex elements loops recursions complex functions 
suppose manipulate elements probabilistic variable complex function defined conventional non probabilistic variables 
idea type operations resulting distribution integral sum discrete case command generalizes equation multiple input output variables 
particular command form xn ym sequence statements sequence statements implements function variables xn input variables ym output variables variables probabilistic necessarily type 
inside loop variables reduced non probabilistic base type just definition type operators applied base type elements participating probabilistic variables 
construct possible bootstrap arbitrary statements probabilistic variables 
illustrate example 
suppose furthermore consider statement input variables output variable truly probabilistic interpretation statement execute clause probability clause probability 
resulting variable represent distribution fact exactly command generates 
conceptually executed values input variables calculates corresponding values keeping track corresponding probabilities defined input distributions 
applied sequence commands generalizing idea probabilistic computation loops nested loops recursion element conventional programming 
fact binary operators discussed viewed special cases command 
gives programmer control scope dependencies program 
example statements return point mass distribution centered 
matter value takes 
contrast statements treat independent variables second statement return implementation probabilistic variables ces separates interface actual implementation probabilistic variables 
ces allows programmers define distributions arbitrary data types operations implemented exactly 
example probabilistic variables type prob double implemented exactly require parameters different doubles effectively gb ram 
currently implementations exist different representations probabilistic variables 
histogram representations historically 
represents probabilistic variables histograms domain 
example variable type prob double approximated histogram cells covering support distribution equi distance intervals 
unfortunately histogram representation applicable arbitrary probabilistic variables variables defined complex data structures reasons abandoned 

sampling 
represent distributions set weighted samples drawn base type domain distribution 
example consider probabilistic variable type prob double 
distribution represented values type double drawn probability distribution sample representations common place markov chain monte carlo mcmc literature 
pleasing properties accommodate base type second mild conditions converge uniformly true probability distribution increases 
sampling representation implementing constants type operations including command remarkably straightforward 
example statements prob double uniform prob double normal prob double translated generate samples uniform distribution memorize samples subsequently generate samples normal distribution generate pairs samples sets samples representing memorize sum training second important aspect ces ability tune code built learning mechanisms 
consider example robot programmed perform mail delivery 
imagine robot occasionally gets lost collides obstacles 
way remedy problem analyze modify software problem fixed 
alternative way robot target values desired behavior specific situations 
example robot collides programmer specify desired behavior situation left turn robot executed right turn 
similarly robot lost track position programmer tell robot correct location 
situation specific feedback interpreted training examples desired output robot specific situations 
key idea learning ces similar jordan rumelhart notion learning distal teacher 
imagine function approximator neural network program code 
way training neural network provide target outputs network back propagation tune weights 
require target signals available neural network 
alternative view put forward adopted provide target signals variables way depend function approximator 
distal teacher approach releases programmer burden having provide target values function approximator directly 
robot example specification right turn better action sufficient train function approximator long influenced actual control decision 
flip side approach creates difficult credit assignment problem assigning credit blame function approximator distal target signal 
approach follows rationale jordan rumelhart distal teacher 
particular ces performs error minimization gradient descent 
jordan approach gradients propagated neural network ces propagates gradients program code 
necessary gradients propagated forward code back propagation phase necessary 
function approximators function approximators map floating point values vectors values values vectors values 
declared class template fa type input variables type output variables function approximator 
doubles vectors doubles probabilistic counterparts double vector double prob prob vector function approximator declarations require additional information parameters specifying type function approximator dimension input dimension output 
addition certain function approximators require additional parameters specify internal structure 
example declaration fa prob vector double prob double net declares neural network hidden units maps dimensional probabilistic vector dimensional probabilistic variable 
options available documented ces users program function approximators long trained gradient descent 
declared function approximators just mathematical functions method fa eval 
example statement assigns value running function approximator net variable net eval type mismatches assignments involving function approximators caught compile time 
function train member probabilistic variables function approximators training 
example statement train specifies desired value probabilistic variable current point program execution 
variables type type prob foo type foo 
ces changes function approximator took part calculation accordingly 
example illustrate concepts consider example program processes sensor scan sonar scan generates motion command robot aligns parallel nearest wall 
assume finding orientation nearest wall difficult problem train examples code hand 
wall orientation known generating corresponding turning command trivial 
go coding routine 
obviously wall orientation determined certainty probabilistic variable training set result top testing set result bottom learning estimate robot orientation vertical axis second sequence horizontal axis time 
white solid line indicates true orientation 
small circles samples gray ares result applying gaussian smoother samples 
notice orientation tracked 
prob double orientation need function approximator maps sensor measurements assumed reside vector orientation fa vector double prob double net orientation net eval sensors motion command calculated conversion back doubles 
example double turn cmd double orientation need train code 
correct motion command resides variable target cmd training function approximator achieved statement turn cmd train target cmd shows code segment similar described result training 
solid white line depicts true wall angle function time randomly rotating robot 
small dots samples shaded area indicates robot probabilistic estimate training quite accurate 
importance probabilities learning notion probabilistic computation essential training function approximators gradient descent 
conventional code usually non differentiable 
example typical statement gradient variable respect variable zero statement differentiable 
zero gradients cause gradient descent stuck adaptation occur 
problem naturally arises 
picture different probabilistic variables 
total probability distribution assigns values equal values greater respectively 
gradients 
comes surprise probabilities differentiable base values 
differentiability probabilistic statements encompasses arbitrary probabilistic variables complex base types 
notion learning probabilistic computation highly intertwined ces 
real world interface robot research 
schematics robot environment 
plot robot trajectory raw odometry consecutive runs pieces mail delivered 
shown raw sonar measurements 
robot reaches various destination points high accuracy despite significant error robot odometry 
implementation mechanism propagating gradients ces code accounts substantial overhead implementation conceptually relatively straightforward 
implementation calculates gradients forward manner values exploiting chain rule differentiation 
histogram representation gradients calculated individual histogram probabilities respect contributing function approximator 
sample representation similar gradients measure posterior probability sample respect parameters function approximator 
training signal available gradients calculated parameters adjusted immediately 
effectively implements online training scheme distal teacher 
function approximator calculation variable ces detects exploits additivity gradients integrating multiple gradients 
computational overhead gradient computation substantial programs discussed section easily executed real time 
mail delivery robot central objective ces facilitates development robust robot software 
section describes prototype implementation serves proof concept 
clearly single program insufficient demonstrate utility programming framework see additional examples 
remarkable lines long program plus hours worth training suffices control mobile robot raw sensor data motor velocity commands 
ces developed specific application mind 
application put forward challenge developing ces 
target application mail delivery robot 
shows robot equipped sensors camera schematic drawing environment 
robot instructed visual gestures 
delivering mail navigate pre defined target locations horn wait person pick mail return home location 
clearly restrictive assumptions example robot knows locations delivery operates single corridor monitor battery task challenging involves localization collision avoidance way point navigation gesture recognition 
table shows full program 
final program lesser importance stripped comments nearly robot software 
important process getting 
programming began implementing estimator wall orientation lines 
code uses bayes rule incorporate new sensor readings line convolution normal distribution accommodate robot motion lines 
mapping sonar sensors angle estimates realized neural network line trained hand labeled data lines collected minutes labeled hour time 
main declarations fa vector double prob double fa prob vector double prob double fa vector double prob int prob double alpha prob double theta prob double prob int coin 
prob int prob vector double double scan image double struct double rotation transl struct double dir stack int int initialization alpha uniform pi theta uniform pi main loop localization scan get sonar scan eval scan pi alpha multiply alpha coin coin pi theta multiply theta robot orientation theta int int theta pi int scan scan scan scan eval eval multiply robot coordinate multiply robot coordinate get odometry data prob double rotation normal fabs rotation alpha alpha alpha pi alpha pi alpha pi theta new orientation theta theta pi theta pi theta pi theta theta prob double transl normal fabs transl cos theta sin theta truncate new coordinate truncate new coordinate gesture interface scheduler image eval image eval image wait gesture double stack xa location stack stack ya stack dir double stack xb location stack stack yb stack dir stack home location stack stack stack dir stack dir reached goal 
double stack robot depth horn wait button navigation stack stack theta double atan double theta location goal pi pi pi pi rotate left rotate right fabs pi translation go ahead double convert double double convert double sonar sonar set velocity training command alpha train enabled training 
train removed 
train train train table complete implementation mail delivery program 
line numbers added reader convenience 
functions capital letters get set 
part interface robot 
wall orientation estimator operates interval lines generate orientation estimate assuming initial robot orientation known breaking symmetry 
implemented localization algorithm space utilizes fact probabilistic orientation estimate available mapping sonar sensors lines 
estimator trained distal teacher lines 
implemented gesture recognizer lines uses neural networks map images gestures hand raised gesture 
network trained minutes worth data lines 
probabilistic output variable input stack target locations lines 
rudimentary way point navigation system implemented drives robot predefined locations lines stopping path blocked line 
probabilistic variables converted back numerical values lines determine actual velocity commands robot motors 
probabilistic data types program require specific skill entire program implemented trained matter day 
ces program robust control mobile robot reliably crowded environment 
extensive tests robot navigated long periods time hours populated corridor loosing position colliding obstacle 
shows example trace raw data recorded minutes continuous deliveries sonar measurements odometry measurements 
notice raw odometry insufficient track robot position 
program reliably navigated robot correct location acceptable accuracy meter delivered pieces mail correctly 
tests independently collected data error rate gesture interface consistently despite simplicity measured independently collected testing examples 
examples described 
related ces computes probability distribution related bayes networks bns 
relation ces bns best explained analogy ces bns procedural object oriented programming languages declarative ones prolog see 
bns inference knowledge representation strictly separated case prolog ces program statements computational 
characteristic multiple ramifications 
example bayes networks knowledge bases inference subset variables 
representation include powerful concepts recursion iteration nested function calls 
ces allows things ces programs computational statements inverted marginalized 
consider ces viable alternative software design probabilistic flavor 
field robotics developed multitude special purpose languages robot programming 
languages address important topics concurrency real time control 
consequently issues addressed entirely orthogonal 
knowledge robotics language design addressed issues 
idea learning prior knowledge studied extensively machine learning community 
prior knowledge usually represented declarative form horn clauses knowledge idea integrating learning procedural programming language novel 
related approach evolutionary algorithms eas modify program code directly built function approximators 
believe stricter separation learning programming increases human comprehensibility program code typically low eas 
special purpose language extension robot aimed integrating probabilistic computation learning mainstream programming 
language essentials large number approaches field probabilistic robotics providing programmers mechanisms handling uncertainty learning 
conjecture mechanisms essential robust software development real strength approach comes integration mechanism conventional programming 
research opens range interesting follow questions principles advocated stipulated programming languages paradigms 
worthwhile embed learning approaches reinforcement learning credit assignment mechanisms mainstream programming 
place parametric representations probability distributions programming 
ces program debugged randomness play crucial part execution 
despite open questions believe current results indicate probabilistic data types learning clear role play core level robotic programming language design 
believe ideas transcend robotics applicable sensor embedded systems large 
author express gratitude frank pfenning park jonathan moody input invaluable 
research sponsored national science foundation career number iis regular number iis gratefully acknowledged 
views contained document author interpreted necessarily representing official policies endorsements expressed implied united states government national science foundation 
gilks richardson spiegelhalter editors 
markov chain monte carlo practice 
chapman hall crc 
jordan rumelhart 
forward models supervised learning distal teacher 
cognitive science 
koller mcallester pfeffer 
effective bayesian inference stochastic programs 
proceedings th national conference artificial intelligence aaai providence rhode island 
konolige 
language reactive control 
ki advances artificial intelligence lnai pages 
springer verlag 
koza 
genetic programming programming computers means natural selection 
mit press cambridge ma 
pearl 
probabilistic reasoning intelligent systems networks plausible inference 
morgan kaufmann publishers san mateo ca 
poole 
probabilistic horn abduction bayesian networks 
artificial intelligence 
russell 
prior knowledge autonomous learning 
robotics autonomous systems 
simmons 
task description language robot control 
proceedings conference intelligent robots systems iros victoria ca 
thrun 
framework programming embedded systems initial design results 
technical report cmu cs carnegie mellon university computer science department pittsburgh pa 
thrun 
probabilistic algorithms robotics 
ai magazine 
towell shavlik 
knowledge artificial neural networks 
artificial intelligence 

