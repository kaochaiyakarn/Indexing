collide interactive exact collision detection system large scale environments jonathan cohen ming lin dinesh manocha ponamgi department computer science university north carolina chapel hill nc lin manocha ponamgi unc edu exact interactive collision detection system collide large scale environments 
environments characterized number objects undergoing rigid motion complexity mod els 
algorithm assume objects motions expressed closed form function time 
collision detection system general easily variety applications 
algorithm uses level approach pruning multiple object pairs bounding boxes performing exact collision detection selected pairs polyhedral models 
demonstrate performance system walkthrough simulation environments consisting large number moving objects 
particular system takes second determine collisions contacts environment consisting moving polytopes consisting faces hp 
collision detection fundamental problem computer animation physically modeling computer simu lated environments robotics 
applications object motion constrained collisions objects dynamic constraints 
prob lem studied literature 
general collision detection algorithms systems known interactive large scale environments 
large scale virtual environment walkthrough creates computer generated world filled real virtual objects 
environment give user feeling presence includes making images user surrounding objects feel solid 
example objects pass things move expected pushed pulled currently nc state university permission copy fee part material granted provided copies distributed ct commercial advantage acm copyright notice title publication date appear notice copying permission association computing machinery 
copy republish requires fee specific permission 
symposium interactive graphics monterey ca usa acm grasped 
actions require accurate collision detec tion 
may hundreds thousands objects virtual world brute force approach tests possible pairs collisions acceptable 
efficiency critical virtual environment interactive nature lost 
fast interactive detection algorithm fundamental component complex virtual environment 
objective collision detection report geo metric contacts objects 
know positions orientations objects advance solve collision detection function time 
case virtual environments interac tive applications 
fact walkthrough environment usually information regarding maximum velocity acceleration user may move abrupt changes direction speed 
due unconstrained variables collision detection cur rently considered major bottlenecks building interactive simulated environments 
main contribution collision de tection algorithm system interactive exact collision detection complex environments 
contrast previous show accurate interac tive performance attained environments coherence speed pairwise interference tests reduce actual number tests form 
able successfully trim pos sible interactions simultaneously moving objects number objects 
particular objects close axis aligned bounding boxes overlap 
ap proach flexible handle dense environments making assumptions object velocity ac 
system successfully applied architectural walkthroughs simulated environments works practice 
rest organized follows 
sec tion review previous collision detection 
section defines concept coherence describes exact pairwise collision detection algorithm applies 
describe algorithm collision detection multiple objects section dis implementation sections 
section presents experimental results walkthrough envi ronments simulations 
previous problem collision detection extensively studied robotics computational geometry com puter graphics 
goal robotics planning collision free paths obstacles 
differs virtual environments physically simulations motion subject dy namic constraints external forces typi cally expressed closed form function time 
time emphasis computational geometry theoretically efficient intersection detection algorithms 
restricted static inst ance problem non trivial implement 
convex polytopes linear time algo rithms linear programming tracking closest points lo proposed 
temporal geometric coherence devise algo rithms checking local features pairs convex polytopes 
alonso bounding boxes spatial partitioning test pairs arbi polyhedral objects 
different methods proposed overcome bottleneck pairwise tests environment bodies 
simplest spatial sub division space divided cells equal vol ume instance objects assigned cells 
collisions checked object pairs belonging particular cell 
approach works sparse environments objects uni distributed space 
approach operates directly dimensional volumes swept object motion time 
algorithms adequately address issue collision detection virtual environment re quires interactive rates thousands pair wise tests 
hubbard proposed solution ad dress problem trading accuracy speed 
early extension lin canny proposed scheduling scheme handle multiple moving objects 
zeltzer extended sparse model 
background section highlight importance coherence dynamic environments 
briefly review algo rithm exact pairwise collision detection mult body collision detection scheme exploit coherence achieve efficiency 
temporal geometric coherence temporal coherence property application state change significantly time steps frames 
objects move slightly frame frame 
slight movement objects trans geometric coherence geometry defined vertex coordinates changes minimally tween frames 
underlying time shall refer bounded dimensional polyhedral set convex polytope briefly polytope 
common parlance polyhedron denote union boundary interior 
steps small objects travel large distances frames 
pairwise collision detection convex polytopes briefly review lin canny collision detection algo rithm tracks closest points pairs convex polytopes 
algorithm lowest level collision detection determine exact contact stat en convex polytopes 
method maintains pair closest features convex pair calculates euclidean distance fea tures detect collisions 
approach static environment especially suited dy namic environments objects move sequence small discrete steps 
method takes advantage coherence closest features change infrequently move finely discretized paths 
algorithm runs constant time polytopes moving closest feature pair changing rapidly algorithm ta kes slightly longer running time proportional number feature pairs traversed function relative motion polytopes undergo 
method finding closest feature pairs voronoi regions 
algorithm starts candidate pair features polytope checks closest points features 
polytopes faces convex local test involving neighboring features current candidate features 
feature fails test algorithm 
steps neighboring feature candidates tries 
simple pre processing algorithm guarantee fea ture constant number neighboring features 
penetration detection convex polytopes core collision detection algorithm built ing properties voronoi regions convex polytopes 
voronoi regions form partition space outside polytope 
polytopes features may fall voronoi regions 
times lead cycling feature pairs 
circumvent prob lem partition interior space convex poly 
partitioning form exact internal voronoi regions interested knowing closest features ing polytopes detecting case 
pseudo voronoi regions obtained joining vertex polytope centroid polytope pll 
partition exterior interior polytope walk external voronoi regions pseudo internal voronoi regions necessary 
closest features falls pseudo voronoi region walk know 
ensuring convergence walk pseudo internal voronoi regions requires special case analysis omitted 
extension non convex objects extend collision detection algorithm convex polytopes handle non convex objects lated bodies hierarchical representation 
hierarchical representation internal nodes convex non convex sub parts leaf nodes convex polytopes features 
leaf nodes construct convex hull bounding volume tree level level root 
bounding volume associated node bounding volume union children root bounding volume encloses hierarchy 
instance hand may indi vidual joints leaves fingers internal nodes entire hand root 
test collision pair hierarchical trees recursively 
collision detection algorithm tests collision parent nodes 
collision parents algorithm returns closest feature pair bounding volumes 
collision algorithm expands children recursively proceeds tree determine collision occurs 
details 
multiple object collision detection large scale environments consist stationary moving objects 
moving objects stationary objects 
moving objects collide moving objects stationary ones 
keeping track nm pairs objects time step ime ing get large 
achieve interactive rates reduce number performing pairwise collision tests 
architecture multiple object collision detection algorithm shown fig 

sorting key pruning approach 
ob ject surrounded dimensional bounding volume 
sort bounding volumes space determine pairs overlapping 
need perform exact pairwise collision tests remaining pairs 
intuitively obvious sort ob jects space 
dimension reduction approach 
bodies collide dimensional space projections zy yr zz planes axes overlap 
observation choose axis aligned bounding boxes bounding volumes 
efficiently project bounding boxes lower dimension perform sort lower dimensional structures 
approach quite different typical space partitioning approaches reduce number pairs 
space partitioning approach puts considerable effort choosing partition sizes 
partition size prunes object pairs ideally testing bounding box overlaps 
partitioning schemes may environments small com pared object sorting works small large 
bounding volumes collision detection algorithms bounding boxes spheres ellipses rule collisions objects far apart 
bounding box laps trigger collision detection algorithm 
architecture multi body collision detection palm object odd pruning multi body pairs pain architecture multiple body collision de tection algorithm considered types axis aligned bound ing boxes fixed size bounding cubes fixed cubes dynamically resized rectangular bounding boxes dy namic boxes 
fixed size bounding cubes compute size fixed cube large contain object orientation 
define axis aligned cube center radius 
fixed cubes easy recompute objects move making suited dynamic environments 
object nearly spherical fixed cube fits 
preprocessing steps calculate center ra fixed cube 
time step object moves recompute cube follows 
transform center vector matrix multi plication 

compute minimum maximum coordinates subtracting adding radius coordinates center 
step involves vector matrix multiplication 
step needs arithmetic operations additions subtractions 
dynamically rectangular bounding boxes compute size rectangular bounding box tightest axis aligned box containing object particular orientation 
defined minimum maximum coordinates convex ob ject correspond coordinates vertices 
object moves recompute minima maxima account object ori 
objects rectangular boxes fit better cubes resulting fewer overlaps 
long objects moving lb bounding box behavior environment 
environment savings gained reduced number pairwise sion detection tests outweigh cost computing dynamically resized boxes 
precomputation compute object ini tial minima maxima axis 
assumed objects convex 
non convex polyhedral models algorithm applied convex hulls 
object moves recompute minima maxima time step follows 
check see current minimum maximum vertex coordinate small est largest value comparison neighboring vertices 
finished 

update vertex extremum replacing neighboring vertex smallest largest value neighboring vertices 
repeat entire process necessary 
hm recomputes bounding boxes ex pected constant rate 
exploiting temporal geometric coherence addition lo convex polytopes 
transform vertices objects un motion 
updating bounding boxes new positions computed current vertices matrix vector multiplications 
optimize ap proach realizing interested te value extremal vertex say coor updating minimum maximum value axis 
need transform coordinates order compare neigh boring vertices 
reduces number arithmetic operations thirds 
dimensional sweep prune dimensional sweep prune algorithm begins projecting dimensional bounding box 
axes 
bounding boxes axis aligned projecting coordinate axes re sults intervals see fig 

interested laps intervals pair bounding boxes overlap intervals overlap dimensions 
construct lists dimension 
list contains values endpoints intervals corresponding dimension 
sorting determine intervals overlap 
general case sort take log time number objects 
reduce time bound keeping sorted lists previous frame changing values interval endpoints 
environments objects relatively small movements tween frames lists nearly sorted sort expected time shown 
insertion sort works previously sorted lists 
addition sorting need keep track changes overlap status interval pairs overlapping time step non overlapping current time step vice versa 
done ey time number exchanges axes 
runs expected linear time due coherence worst case ey extremely small constant 
method suitable dynamic coherence preserved 
computational geom etry literature algorithms exist solve static version determining bounding box overlaps log time number pairwise overlaps 
reduced coherence 
dimensional intersection tests dimensional intersection algorithm begins projecting dimensional axis aligned bounding box planes 
eac projections rectangle space 
typically fewer overlaps rectangles intervals sweep prune technique 
results fewer swaps objects move 
sit projections dimension result densely clustered intervals dimensional tech nique efficient 
interval tree common data structure performing dimensional range queries 
query interval intersection takes log time number reported intersections number intervals 
reporting inter sections rectangles done log zi total number intersecting rectangles 
alternatives dimension reduction different methods reducing num ber pairwise tests binary space partitioning bsp trees octrees practical efficient algorithms uniform space division 
divide space unit cells volumes place object cell 
check collisions examine cell occupied object verify cell shared objects 
choosing near optimal cell size difficult failing sb results large memory usage computational inefficiency 
implementation section describe ion details collide sweep prune algorithm exact collision detection algorithm multi body simulation applications walkthrough simulations 
sweep prune described earlier sweep prune algorithm re duces number pairwise collision tests eliminating polytope pairs far apart 
involves steps calculating bounding boxes sorting minimum maximum coordinates bounding boxes gorithm sweeps list determining bounding boxes overlap 
urns sec ond third steps simultaneously 
bounding box consists minimum max imum coordinate value dimension minima maxima maintained sep lists dimension 
sort list coordinate values insertion sort maintaining overlap status bounding box pair 
lap status consists boolean flag dimension 
flags set bounding boxes polytope pair overlap 
flags modified insertion sort performs swap 
de toggle flag coordinate values refer bounding box min ima refer bounding box maxima refers bounding box minimum maximum 
flag toggled overlap status indicates situations dimensions bounding box pair overlap 
case add corresponding poly pair list active pairs 
bounding box pair overlapped previous time step 
case remove corresponding polytope pair active list 
bounding box pair overlap pre vious time step overlap current time step 
case 
sorting completed time step active pair list contains polytope pairs bounding boxes currently overlap 
pass active pair list exact collision detection routine find closest features polytope pairs determine colliding 
exact collision detection collision detection routine processes polytope pair active list 
time polytope pair considered select random feature poly previous closest feature pair starting point 
previous closest feature pair may guess polytope pair just active 
zeltzer suggest puting lookup table polytope help find better starting guesses 
multi body simulation multi body simulation application developed test collide system 
represents general non restrict ed environment objects move arbitrary fashion resulting collisions simple im pulse responses 
load convex polytopes sim ulation typically generated tion random points sphere 
number vertices large resulting polytopes spherical appearance range fat 
sim ulation parameters polytopes number complexit measured number faces rotational velocity 
translational velocity den sity environment measured ratio poly volume environment volume bounding volume method sweep prune fixed size dynamically resized boxes 
simulation begins placing polytopes ran dom positions orientations 
time step positions orientations updated transla tional rotational velocities detection rou pre defined path polytopes paths just easily randomized time step 
simulation calls collide sys tem receives list colliding polytope pairs 
exchanges translational velocities pairs simulate elastic reaction 
objects rebound walls constraining volume 
simulation test funct speed detection algorithm 
addition able visually display key features 
example bounding boxes polytopes rendered time step 
bounding boxes polytope pair overlap render line connecting clos est features polytope 
possible show pairs closest features time step 
vi aids proven useful indicating actual collisions additional geometric information algo study analysis 
see frame example simulation 
walkthrough walkthrough head mounted display application involves large number polytopes depicting re scene 
integration library environment demonstrates interactive envi ronment collision detection library affecting application real time performance 
walkthrough creates virtual environment video shows kitchen porch 
user travels environment interacting polytopes picking virtual objects changing scale mov ing 
user hand collides polytopes environment walkthrough pro vides feedback making colliding bodies appear red 
incorporated collision detection library routines walkthrough application 
scene composed polytopes stationary 
user hand composed convex polytopes moves complex environment modifying poly environment 
frames show sequence shots kitchen walkthrough environment 
pict ures show images seen left eye 
frames show user porch walkthrough 
system issues collide application loads library polytopes 
file format fairly simple 
straightforward convert polytope data format output modelling package minimal format collide 
loading polytopes application hen chooses polytope pairs act collision detection 
set active pairs fully configurable collision passes 
inside application loop application forms collide world polytope moves 
point appli cation may call collision test routine 
collide returns list 
colliding pairs including pair colliding features 
application responds collisions appropriate way 
space issues pair objects collide maintains struc ture contains bounding box overlap status closest feature pair objects 
struc tures conceptually form upper triangular ma trix 
access entry time object id numbers row column entries 
pairs objects interacting reduced expense slightly larger access ime 
example traverse sparse matrix list access entry 
geometric robustness practice types degeneracies er convex polytope models du vertices extraneous vertices polygons tracking error non planar faces non convex faces 
non convex polytopes disconnected faces writ pre processor scan common correct possible 
numerical issues numerical robustness important issue exact collision detection code 
special case ge tests module difficult ensure algorithm get cycle due erate overlap 
deal performing ail feature tests tolerance 
tolerance floating point errors allow feature tests cycle infinitely 

observed practice far careful tests stable presence small errors 
multi body sweep prune code designed resist small numerical errors 
bounding box ext ended small epsilon di 
addition insulating overlap tests errors precaution helps give exact collision detection test chance activated ob jects act penetrating 
quantity function velocity object pairs 
generality multi body pruning code works exact collision detection routine functions indepen dently underlying collision detection routine 
second level collision routine exact certainly need limited handling convex polytopes 
performance analysis measured performance collision detection algorithm multi body simulation mark 
profiled entire application tabulated cpu time relevant detection routines 
tests run hp 
main routines involved collision detection date boxes sort bounding boxes perform exact collision detection overlapping bound ing boxes 
described implementation section wo different types bounding boxes 
fixed cubes boxes resulted low collision time parameter ranges tested 

graphs plot lines 
bold line dis plays performance dynamically resized bounding boxes line shows performance fixed size cubes 
graphs re fer seconds frame frame step simulation involving iteration collision detec tion rendering time 
graph produced parameters holding con stant 
number polytopes 
default value polytopes 
complexity polytopes define num ber faces 
default value faces 
rotational velocity define number degrees object rotates axis passing centroid 
default value degrees 
translational velocity define relation object size 
estimate radius object define velocity percentage radius object travels frame 
default value 
density define percentage en vironment volume polytopes occupy 
default value 
graphs timing results include com puting polytope transformation matrix rendering times course minor initialization cost 
ignored costs wanted measure cost collision detection 
graph shows number seconds frame scales increasing number polytopes 
took uniformly sampled data points poly 
fixed dynamic bounding box methods scale nearly linearly small higher order term 
dynamic bounding box method results slightly larger non linear term resizing bounding boxes graph graph numb ot faces graph graph 
volume rotational graph rotational velocity dynamic box graph ior cube causes swaps sorting 
explained fur ther discussion graph 
seconds frame numbers graph compare favorably zeltzer hub bard 
polytopes simulation collision time results frames second fixed bounding cubes 
graph shows number faces affects collision time 
took uniformly sampled data points 
dynamic bounding box method increas ing model complexity increases time update bounding boxes finding minimum maximum values requires walking longer path 
surprisingly time sort bounding boxes decreases number faces poly spherical fat 
polytopes spherical fat bounding box dimen sions change polytopes rotate fewer swaps need sweeping step 
fixed bounding cube time update bounding boxes sort constant 
graph shows effect changes density simulation volume 
bounding box methods increasing density polytope volume simulation volume results larger sort time collisions 
number collisions scales linearly density simulation volume 
graph shows collision time scales increases density 
graphs show effect rotational ity collision time 
slope line dynamic bounding box method larger han fixed cube method 
reasons difference 
reason increase rotational velocity increases time required update dynamic bounding boxes 
walk old maxima minima find new ones need traverse features 
second reason larger number swapped minima maxima sorted lists 
dimensional volume simulation fairly sparse dimensional view volume dense bounding box intervals overlap ping 
boxes grow shrink cause swaps dimensional lists 
ro tational velocity increases boxes change size rapidly 
graph clearly shows advantages static box method 
update bounding box time sort lists time constant velocity increases 
tests show collision detection de environments achieved incurring expensive time penalties 
architectural walkthrough models showed perceptible performance degradation collision detection added frame 
collision detection considered major bottle neck computer simulated environments 
making geometric temporal coherence algorithm system detects collisions efficiently effec tively earlier algorithms 
circumstances system produces collision frame rates hertz environments moving complex poly 
walkthrough experiments showed dation frame rates collision detection added 
currently working incorporating general poly spline models system extending hms deformable models 
grateful john canny david baraff productive discussions brian mirtich help implementation convex polytope pair algo rithm 
kitchen porch models walk applications designed unc walk group headed fred brooks 
supported part darpa isto order nsf mip nsf ccr arpa contract dabt onr contract nsf arpa science technology center computer graphics scientific visualization nsf prime contract 
dl pi pi pi pi pi pi alonso serrano 
ing collision detect ion problem 
ieee computer graphics applications 
baraff 
curved surfaces coherence non penetrating rigid body simulation 
computer 
baraff 
dynamic simulation non penetrating rigid body simulation 
phd thesis cornell univer sii 
cameron 
collision detection dimensional intersection testing 
proceedings international conference robotics automation pages pp 

cameron 
approximation hierarchies bounds 
proceedings 
symposium solid model cad cam applications pages austin 
tx 
cohen lin manocha ponamgi 
interactive exact collision detection large scaled environments 
technical report tr department computer science university north carolina 
zeltzer 
new model effi cient dynamics simulation 
proceedings eurographics workshop animation simulation pages 

new approach rectangle inter sections part internat 
comput 
math 
snyder interval methods multi point col time dependent curved surfaces 
proceedings acm siggraph pages 
po wi pf pi po gilbert johnson fast procedure computing distance objects dimensional space 
ieee robotics automation vol ra pp 

hahn 
realistic animation rigid 
computer graphics pp 

hopcroft schwartz sharir 
effi cient detection intersections spheres 
international journal robotics research 
wood 
counting reporting sections ranges 
ieee transactions com pages 
hubbard 
interactive collision detection 
proceedings ieee symposium research tiers reality october 
latombe 
robot motion planning 
kluwer ca publishers 
lin canny 
efficient collision detection animation 
proceedings third workshop animation simulation cambridge england 
lin 
collision detection animation robotics 
phd thesis department electrical engineering computer science university california berkeley december 
moore 
collision detection response computer animation 
computer graphics 
hoey 
geometric intersection prob lems 
proc 
th 
ieee symp 

com put 
science pages 
pentland 
computational complexity versus simulated environment 

computer graphics ponamgi manocha lin 
tal algorithms collision detection lj models 
technical report tr department computer science university north carolina chapel hill 
preparata shamos 
computational geometry 
springer verlag new york 
thibault naylor 
set operations poly binary space partitioning trees 
acm computer graphics 
zeltzer 
autonomy interaction presence 
presence 
frame polytopes density faces 
pair bounding boxes overlapping 
frame bounding boxes overlap closest feature pairs appear 
frame multi polytope hand moves kitchen walkthrough environment 
frame red indicate 
frames hand touches swing porch walkthrough 
cohen lin 
mocha ponamgi exact collision system 
