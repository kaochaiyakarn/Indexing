globus planetlab resource management solutions compared ripeanu university chicago cs uchicago edu mic bowman intel research mic bowman intel com ian foster university chicago argonne national lab 
foster cs uchicago edu planetlab globus toolkit gaining widespread adoption respective communities 
designed solve different problems planetlab deploying worldwide infrastructure testbed experimenting network services globus offering general standards software running distributed applications aggregated shared resources build infrastructures enable federated extensible secure resource sharing trust domains 
instructive compare resource management solutions 
review approaches taken systems attempt trace back starting assumptions differences approaches explore scenarios platforms cooperate benefit user communities 
believe key step identifying pieces shared communities pieces complementary globus planetlab ultimately evolve 

planetlab project deploying managing worldwide infrastructure testbed experimenting new class network services 
globus alliance developing general standards software toolkit running distributed applications aggregated shared resources 
systems similarities user communities goals approaches technologies important differences 
take step elucidating commonalities differences undertaking comparison approaches resource management systems 
resource management complete final goal project resource management jeffrey chase duke university chase cs duke edu milan milenkovic intel research milan milenkovic intel com perspective planetlab globus attack similar problems need discover monitor allocate resources applications services coordinated secure resilient fashion 
natural compare systems understand differences underlying goals premises assumptions technical differences shape evolving architectures 
believe understanding key identifying pieces transfer domains wheels community reinvent avoid reinventing pieces complementary globus planetlab ultimately evolve 
proceeding comparison note caveats 
globus planetlab active research projects 
attempt compare existing planned functionality features 
aspects comparison obsolete projects evolve 
second focus comparing contrasting resource management abstractions mechanisms projects large degree complementary globus open grid services architecture ogsa define protocols interfaces behaviors distributed resource management ws agreement distributed systems constructed 
planetlab developers hand focus larger degree implementing interfaces behaviors manage local systems global behaviors left services built common base 
table abbreviations 
gt globus toolkit gt globus toolkit version vo virtual organization web services resource framework ogsa open grid services architecture gsi grid security infrastructure vm virtual machine third key differences ultimately influence solutions globus software toolkit standards deployments :10.1.1.25.8254:10.1.1.25.9598
planetlab deployment software system may ultimately influence produce standards 
example gt multiple deployments planetlab current instantiation building equivalent single deployment 
planetlab consortium produces planetlab software manages single deployment homogeneous hardware software base 
contrast multiple deployment assumption requires globus developers fewer assumptions participating resources existing infrastructure deployments security infrastructure performance parameters deployments achieve 
approach standardization side effect different maturity stages similarly strong influence globus project works closely global grid forum oasis ietf define standards gain community acceptance 
planetlab infrastructure solutions rough consensus working code focus efficient testbed operations ultimately influence produce standards planetlab considers infrastructure open research topic hindered early standardization 
caveats mind proceed comparison 
briefly describe globus planetlab section contrast starting assumptions section decompose solutions basic mechanisms compare try highlight appears valuable technique particular sub domain section scenario globus planetlab provide services valuable isolation section 

background provide background information globus planetlab systems 

grids globus toolkit grids aim enable resource sharing coordinated problem solving dynamic virtual organizations 
words grids provide infrastructure federated resource sharing trust domains 
grids evolved idea metacomputing building uniform computing environment diverse resources defining standard network protocols interposing uniform api library level :10.1.1.25.8254
internet build current grids define grid protocols middleware mediate access wide range resources requiring modifications operating systems 
applications services provided layer discover aggregate harness resources 
proposed ws resource framework implementation globus toolkit define uniform mechanisms managing remote state creating standard substrate building virtual organizations vos developing new services applications exploit resources shared vos 
related web services ogsa standards crucial grid vision standards possible develop largescale reliable interoperable grid applications services 
standards largely independent underlying resource management mechanisms 
rest document discuss superficially focus mechanisms standards protocols 
globus toolkit collection technologies instantiation web services compliant provides basic middleware create vos addressing issues security resource discovery resource management data movement :10.1.1.25.8254
deployment depending available resources planned applications specific service implementations chosen deployed conjunction gt components 
gt production vos integrating resources sites thousands computational data resources expected scale sites sites goal 

planetlab planetlab large scale distributed platform new network services content distribution networks robust routing overlays network measurement services scalable object location network embedded storage application level multicast :10.1.1.115.4299:10.1.1.161.2760
planetlab envisioned global testbed developing deploying generation internet services offering experimental eventually production 
current planetlab user community consists primarily researchers networking distributed systems planetlab may host services user communities unaware existence 
testbed best suited services need multiple possibly geographically dispersed points presence planetlab designed run dedicated hosts 
provides purpose built software ground including operating system currently modified linux extensions virtualization 
planetlab uses virtualization containers manage resource allocation achieve isolation potentially large number long lived independent services 
planetlab provides users virtual container host act point presence service 
service programmer perspective planetlab provides distributed virtual machine relatively low level system abstraction form distributed set virtual containers familiar unix style api 
envisaged high value services storage naming built user community successful ones eventually incorporated common core 
planetlab currently includes hosts sites planned grow sites nodes plus small number sites substantial computing resources clusters 
significant part planetlab infrastructure dedicated managing resources node level aggregate 

different starting assumptions globus planetlab efforts tackle similar resource management problems assumptions regarding resources application requirements lead different solutions 
starting assumptions differ number key areas user communities serve characteristics frequent applications resources degree control individual sites retain resources available vo 

user communities planetlab globus serve distinct overlapping user communities 
planetlab user community comprises primarily computer science researchers interested experimenting infrastructure building planetary scale services 
globus user community heterogeneous pool users science industry including computer scientists interested efficiently running enduser applications 
distinction results different functionality noted 
planetlab provides minimal functionality leaving services unconstrained way provide richer functionality applications 
downside short term may duplicated user effort functionality implemented multiple services 
potential upside having multiple implementations similar functionality emerging competing services selected application writers merit 
globus hand aims provide richer standardized functionality closer current application requirements exist rich ecology higher level tools services build globus mechanisms address specific application requirements 
example security infrastructure planetlab provides limited security functionality services build security layer needed sharp resource trading framework develops trust delegation authentication mechanisms planetlab context 
contrast globus toolkit grid security infrastructure gsi framework includes complete machinery protocols apis tools ws security mechanisms :10.1.1.25.9598

application characteristics 
applications services targeted communities different characteristics generally result different resource requirements 
grid applications compute intensive consume significant amounts disk network bandwidth result focusing example integration large scale data repositories data grids virtual observatory collaboration control scientific instruments 
planetlab services generally network intensive rarely significant cpu demands 
experimental services include network measurement application level multicast dhts storage resource allocation distributed query processing content distribution networks monitoring overlay networks 
axis communities take different approaches geographical resource distribution resource partitioning services applications 
roughly difference summarized follows planetlab services embracing resource distribution objective grid applications resource distribution necessary evil 
classes planetlab services network monitoring services wide geographical distribution essential 
grids geographic resource distribution typically consequence vo membership rarely application requirement 
exceptions content distribution collaboration applications 
choice current grid applications prefer operate large set resources limited capabilities 
contrast network services envisioned planetlab try exploit wide area distribution multiple network vantage points presumably uncoordinated failures offered large set resources resources come limited individual capabilities 

resources planetlab mission testbed deployment platform new class network services allows little resource heterogeneity underlying infrastructure legacy hardware software supported 
planetlab assumes exploits lack heterogeneity 
example security infrastructure ssh excludes sites require different security model say kerberos certificate standard pgp spki 
currently planetlab supports intel desktop server configurations operating system linux 
globus operate wide range devices clusters workstations pdas file systems databases sensors scientific instruments integrated vo 
major operating systems supported gt java implementation ogsa standards gt gt expands set environments globus deployed 

resource ownership globus planetlab aim allow participating sites retain control local resources allocating local resources site specific priorities black white listing users site level specifying enforcing site specific usage policies 
tradeoffs space autonomy offered individual sites functionality built federation level globus planetlab distinct decisions follows planetlab limits control individual sites functionality vo level planetlab globus individual site autonomy planetlab globus different decisions balancing individual site autonomy functionality offered vo level 
resources number ways operating system key components security infrastructure allowing planetlab administrators root access individual nodes giving planetlab administrators access remote power button site 
decisions enable faster evolution testbed compact set software evolve quickly software updates easily distributed deployed central administrators 
contrast globus individual sites bring resources vo typically relinquish control external organizations permit application communities tools pacman automate deployment application software grid resources privileged services firmly control local site administrators 
respect say planetlab emphasizes global coordination local autonomy greater degree globus planetlab sites relinquish control external administrators 

lead different solutions planetlab globus built orthogonal sets mechanisms naturally grouped categories mechanisms managing resources individual node site level mechanisms enable federated sharing resources building virtual organizations 
compare globus planetlab solutions category 

local resource management abstractions platforms different foci 
gt focuses integrating extent possible existing resources hardware operating systems local resource management security infrastructure 
gt provides effect set unifying interfaces local resource management functionality discovered 
gt communities require standardization hardware define standard software suites may include local resource management functions 
rare amount heterogeneity manage 
assume example application runs hour starting midnight day week node 
manager user application discover node supports reservations query available timeslots reservation claim reservation day bind application functions accessed standard protocols map node specific functionality 
planetlab contrast specifies individual node architecture functionality hardware level 
result platform participating nodes sites provide uniform individual resource management functionality 
result planetlab need build glue level gt provides enable uniform access management heterogeneous set resources 
main abstraction offered planetlab node virtual machine vm user planetlab node image raw dedicated machine 
currently interface familiar unix api true virtual machine improved isolation better user control operating system local resources 
emphasis simplicity generality assumption homogeneous hardware software base intel servers running software bottom layer dictated planetlab 
contrast globus evolved metacomputing idea building uniform computing environment diverse resources interposing uniform api library level standard protocols network layer 
globus extend full range deployed systems including legacy os security architectures 
corresponding abstractions offered globus toolkit service gt job gt gt 
gt service interfaces defined management jobs managing computational resources example creation initialization new virtual machine 
local authorization resource allocation decisions revolve abstractions user allowed create vm invoke operation grid service run job node 
vm grid service allowed access certain resources 
resource allocations specified bound vm service job 
questions active research topics globus planetlab communities 

global federation building mechanisms delegation key mechanism enabling federated sharing resources 
rest section compare delegation approaches globus planetlab show exploited systems build global resource allocation scheduling services 

delegation mechanisms essential building federations 
resource management functionality vo level generally resource usage delegation ability node site delegate right consume resources identity delegation principals ability delegate identity principals act behalf 
resource usage delegation planetlab globus projects developing mechanisms protocols enable node site wide resource manager delegate resource consumption rights application broker 
planetlab builds resource capabilities offer basic mechanism resource usage delegation 
planetlab resource capabilities represent time limited claims low level resources available node site fair share dedicated cpu network memory disk network ports file descriptors local resource manager keeps track resources available node hands capabilities brokers operate vo level 
planetlab capability represented bit opaque identifier 
services transfer capabilities add detailed description underlying resource authentication authorization trust building mechanisms 
planetlab standardize level 
silk linux kernel module os level mechanism supports enforces capabilities 
higher level corresponding solution development grid community ws agreement protocol 
goal ws agreement define uniform representation agreements resource service providers consumers formalize negotiation process establish modify agreements 
note capability fact implied agreement issuer capability agrees provide specified resources specified time interval capability holder 
ws agreement specifies standard representation agreements web services re negotiation protocol agreement states lifetimes standard way describe agreement monitoring services enforcement mechanism provider side specified planetlab capability queuing system supporting reservations cluster ad hoc solution 
note efforts complementary planetlab focuses implementing capabilities various resource types integrating fine grained resource control offer vm functionality ws agreement focuses uniform agreement representation naming lifecycle 
planetlab globus intend capabilities agreements enable resource delegation 
planetlab resource owner node manager delegates right local resource handing corresponding capability user service 
users services acquire required capabilities directly node managers specialized brokers trade capabilities bind capabilities vm 
scenario imagined ws agreement similar users negotiate agreements resource owners may bind agreements submitted jobs running services 
identity delegation resource federation scenarios principal needs perform certain actions behalf principal 
example user calls service needs call behalf accounting authorization decisions depend original caller identity needs provide unforgeable claim call behalf globus compatible schedulers built identity delegation scheduler receives jobs descriptions users submits individual sites behalf users 
focus identity delegation motivated part frequent requirement able associate resource usage specific individuals communities services 
related community authorization service implements service 
briefly summarize existing functionality 
grid security infrastructure gsi uses time limited proxy certificates stored unencrypted private keys address identity delegation issue :10.1.1.25.9598
certificates correctly formatted certificates marked proxy certificates signed user delegates identity certificate authority 
choosing lifetime proxy certificates requires compromise allowing long term jobs continue run authenticated entities need limit damage event proxy compromised 
proxy certificates restricted rights way limiting potential damage caused stolen proxy 
authorization software run relying parties recognizes proxy certificates searches certificate chain user certificate order authorization identity token 
planetlab currently provide mechanism identity delegation 
services implement mechanisms 

global resource allocation scheduling 
strictly speaking schedulers resource allocation brokers part globus planetlab 
relevant compare existing planned implementations platforms 
resource management mechanisms individual node level ability delegate key coordinated resource management vo level 
generally schedulers built planetlab employ resource usage delegation built globus exploit identity delegation 
planetlab node managers brokers push capabilities resource reservations resources users originate requests 
existing functionality practice primitive resources allocations best effort resources shared network ports allocated come served basis 
planned functionality multiple brokers schedulers presumably different incentive models implementing different allocation policies having application specific knowledge operate independently dynamically share planetlab resources 
arrangement enabled ability site node delegate resource usage rights multiple brokers fine granularity 
vision quickly materializing sharp detail example resource allocation framework currently developed planetlab 
sharp sites trade resources dynamically discovered partners contribute resources federations local policies 
multiple resource management systems may coexist alongside sharp operating independent planetlab slices 
application services batch schedulers may exist slices scheduling resources control local policies 
globus flow reversed brokers pass job requests users applications resources instantiate service virtual machine lease site ticket site site lease service manager service manager ticket request request ticket request agent ticket sharp planetlab resource management example 
broker agent acquires tickets representing resources sites steps 
application acquires tickets broker tries tickets issuers hard resource reservations leases 
application obtained leases create vm bind resources represented leases vm start service 
note mechanism allows individual sites nodes split resources distribute multiple brokers operate independently 
source tickets site site agent agent ideally knowledge resource availability allocation policies 
brokers identity delegation user sends job description broker submits job forwards broker delegated identity user originated job 
environments broker may forward job identity identity vo user associated 
existing functionality numerous vo level schedulers meta schedulers domain application specific developed various groups nimrod grads dagman condor asci drm eu datagrid 
addition gt includes allocation broker 
planned functionality example efforts community platform computing developing community scheduler framework ws agreement specification 

planetlab globus preceding discussion focused comparing contrasting planetlab globus resource management solutions 
view efforts compatible complementary competing 
planetlab considered instance larger grid agenda attempts simplify deployment narrower range platforms applications 
focusing developing capabilities wide area monitoring instrumentation extend piece grid agenda necessarily excluding pieces 
platform planetlab enables layering globus alternative environment interoperable heterogeneous computing primitive support provides 
words planetlab just platforms host globus globus just distributed systems environment run planetlab 
installed globus planetlab testbed built machinery enable user access deployment service 
scenario globus planetlab complement provide benefits able provide 
data grids address problem occurring increasing number fields large data collections important community resources 
data collections large bytes geographically distributed computing storage resources scientific communities rely store analyze 
globus build vos shared data collections implement services distributed data management access analysis 
addition security mechanisms ability define access policies vo level supported community authorization service gt includes tools aimed high performance data transfers gridftp reliable file transfer service 
tools integrated globus security authorization infrastructure split data transfers multiple tcp streams increase transfer throughput data striped multiple nodes ends 
imagine experimental planetlab services bananas optimize transfers monitoring internet multipath routing improve transfer throughput endpoints 
believe layering globus top planetlab significantly strengthen data grid infrastructure 
architecture benefit large planetlab deployed base ability monitor internet offer low level networked services improved performance reliability case multi path tcp data transfer service discussed 
building set lower level services globus add mature widely adopted security infrastructure higher level services integrated user applications 
generally data grids face need develop deploy distributed services various sorts resource discovery data distribution kangaroo stork data movement services mentioned 
planetlab contribute ways community source ideas expertise deployment potentially place deploy services network edges network currently done projects grid eu datagrid 
hand planetlab benefit globus experience promoting service interoperability uniform handling identities authentication service discovery representation invocation 

summary recommendations reviewed approaches taken resource management globus planetlab systems attempted trace back starting assumptions differences solutions explored scenarios platforms cooperate benefit user communities 
believe key step identifying pieces shared communities pieces complementary globus planetlab ultimately evolve 
conclude noting experiences potentially ported system planetlab promote interoperability services 
planetlab moves production platform number services grows client applications planetlab services need interoperate planetlab services 
facilitate interoperation planetlab provide guidelines service interoperability 
believe ogsa uniform service discovery representation invocation error notification starting point 
uniform handling user service identities authentication necessary minimum 
planetlab add support identity delegation 
currently planetlab provide identity delegation mechanisms 
mechanisms implemented needed higher level services risk incompatible services 
proxy certificates gsi offer possible model 
globus add support delegating resource usage rights address virtualization 
planetlab resource usage delegation approach rests technical advances came globus project started complete 
planetlab relies kernel functions fine grained resource control developed research community scout resource containers weak deployed systems 
current globus compatible resource schedulers employ identity delegation 
fine grained resource control technologies mature gain deployment ws agreement protocol vehicle experiment global schedulers delegating right consume resources building planetlab experience sharp global schedulers 
ws agreement provide basis negotiating aspects resource virtualization installed software network connectivity 
globus integrating community contributions 
planetlab setup single vo enables effective feedback loop integrate community contributions 
user contributions appear service deployments proven successful integrated testbed infrastructure considered public goods continue live independent services provided appropriate solution compensate providers 
grids user contributions may take similar path vo level 
limits impact user contributions grid community 
contributions entire globus toolkit generally service implementations arguably laborious adoption deployment process 
possible solution streamline adoption process user contributions globus enable vos outsource non critical services planetlab style backbone 
note globus planetlab face significant challenges seek construct open secure distributed systems increasingly hostile internet 
surely advantages pooling experiences expertise communities attack critical security policy issues 

grateful robert adams paul brett clay adriana iamnitchi anne rogers vijay insightful discussions support 
ripeanu intern intel research initial stages research 

foster kesselman globus metacomputing infrastructure toolkit international journal supercomputer applications vol :10.1.1.25.8254
pp 

fu chase chun schwab vahdat sharp architecture resource peering sosp lake george ny 
foster kesselman nick tuecke physiology grid open grid services architecture distributed systems integration globus project 
foster kesselman tsudik tuecke security architecture computational grids acm conference computers security pp :10.1.1.25.9598

czajkowski dan tuecke xu ws agreement agreement grid service management global grid forum 
global grid forum www grid forum org 
foster kesselman grid blueprint new computing infrastructure second edition morgan kaufmann 
catlett metacomputing communications acm vol 
pp 

johnston gannon nitzberg grids production computing environments engineering aspects nasa information power grid proc 
th ieee symposium high performance distributed computing 
allen foster goodale karonis ripeanu seidel supporting efficient execution heterogeneous distributed computing environments cactus globus sc denver colorado 
johnson humphreys rhea constructing asci grid proc 
th ieee symposium high performance distributed computing 
foster alpert chervenak kesselman middleton shoshani sim williams earth system grid ii turning climate datasets community resources annual meeting american meteorological society 
catlett primer www org 
peterson anderson culler roscoe blueprint introducing disruptive technology internet acm hotnets workshop princeton nj 
bowman chun culler karlin muir peterson roscoe operating system support planetary scale network services nsdi san francisco ca 
wang pai peterson effectiveness request redirection cdn robustness fifth symposium operating systems design implementation osdi boston ma 
feamster balazinska balakrishnan karger infranet circumventing censorship surveillance th usenix security symposium san francisco ca 

chu rao seshan zhang case system multicast ieee journal selected areas communication jsac special issue networking support multicast vol 

andersen balakrishnan kaashoek morris resilient overlay networks th acm banff canada :10.1.1.161.2760
spring wetherall anderson public internet measurement facility usenix symposium internet technologies systems usits 

wolski forecasting network performance support dynamic scheduling network weather service proc 
th ieee symp 
high performance distributed computing 
portland oregon 
pratt mcauley hand www cl cam ac uk research srg 
stoica morris karger kaashoek balakrishnan chord scalable peer peer lookup service internet applications sigcomm san diego usa 
ratnasamy francis handley karp shenker scalable content addressable network sigcomm san diego usa 
rowstron druschel pastry scalable distributed object location routing large scale peer peer systems ifip acm international conference distributed systems platforms middleware heidelberg germany 
zhao kubiatowicz joseph tapestry infrastructure fault tolerant wide area location routing uc berkeley technical report csd 
kubiatowicz bindel chen czerwinski eaton geels gummadi rhea weatherspoon weimer wells zhao oceanstore architecture global scale persistent storage th international conference architectural support programming languages operating systems asplos cambridge ma :10.1.1.115.4299
castro druschel 
kermarrec rowstron scribe large scale decentralised application level multicast infrastructure ieee journal selected areas communications jsac special issue network support multicast communications 
yu vahdat design evaluation continuous consistency model replicated services appear acm transactions computer systems tocs 
avery foster griphyn project virtual data grids nsf proposal funded griphyn 
datagrid architecture eu datagrid project datagrid 
particle physics data grid project ppdg www ppdg net 
avery foster gardner newman szalay international virtual data grid laboratory data intensive science technical report griphyn 
zhao wilde kent foster applying chimera virtual data concepts cluster finding sloan sky survey sc 
olson papka stevens access grid immersive group group collaborative visualization proc 
th international immersive projection technology workshop 
kesselman foster distributed telepresence earthquake engineering collaboratory grid blueprint new computing infrastructure nd edition foster ed morgan kaufmann 
defanti stevens grid blueprint new computing infrastructure foster kesselman eds morgan kaufmann pp 

dabek kaashoek karger morris stoica wide area cooperative storage cfs th acm symposium operating systems principles sosp chateau lake louise banff canada 
muthitacharoen morris gil chen ivy read write peer peer file system fifth symposium operating systems design implementation osdi boston ma 
fu kaashoek mazi res fast secure distributed read file system acm transactions computer systems vol 
pp 

huebsch hellerstein lanham loo shenker stoica querying internet pier vldb 
peterson roscoe pdn sophia information plane networked systems june 
gibbons karp ke nath seshan irisnet architecture world wide sensor web ieee pervasive computing pp 

ganglia ganglia sourceforge net 
touch dynamic internet overlay deployment management bone computer networks vol 
pp 

pearlman kesselman gullapalli spencer foster hubbard distributed hybrid earthquake engineering experiments experiences ground shaking grid application hpdc honolulu ha 
medical data federation biomedical informatics research network grid blueprint new computing infrastructure nd edition foster kesselman eds morgan kaufmann 
chun slice creation management pdn pdn june 
foster kesselman tuecke anatomy grid enabling scalable virtual organizations international journal high performance computing applications vol 
pp 

keahey ripeanu dynamic creation management runtime environments grid ggf workshop designing building grid services chicago il 
gasser mcdermott architecture practical delegation distributed system ieee symposium research security privacy 
voigt peterson silk scout paths linux kernel tr department information technology uppsala university uppsala sweden 
czajkowski foster kesselman resource service management grid blueprint new computing infrastructure foster kesselman eds morgan kaufmann 
pearlman welch foster kesselman tuecke community authorization service group collaboration ieee rd international workshop policies distributed systems networks 
butler foster kesselman tuecke welch design deployment national scale authentication infrastructure ieee computer vol 
pp 

welch foster czajkowski kesselman pearlman tuecke security grid services twelfth international symposium high performance distributed computing hpdc 
welch foster kesselman pearlman tuecke proxy certificates dynamic delegation rd annual pki workshop gaithersburg md 
tuecke foster thompson pearlman kesselman internet public key infrastructure proxy certificate profile ietf draft draft ietf proxy txt 
chase irwin moore dynamic virtual clusters grid site manager hpdc 
abramson sosic giddy hall nimrod tool performing parameterised simulations distributed workstations proc 
th ieee symp 
high performance distributed computing 
berman casanova dongarra liu yang foster scheduling grid application development software project resource management grid kluwer 
livny dagman 
dongarra grid th ieee international symposium high performance distributed computing edinburgh scotland 
czajkowski foster kesselman services computational grids proc 
th ieee symposium high performance distributed computing 
community scheduling framework csf www platform com 
chervenak foster kesselman salisbury tuecke data grid architecture distributed management analysis large scientific data sets network computer applications pp 

globus toolkit reliable file transfer service globus org toolkit reliable transfer html 
allcock chervenak foster kesselman tuecke data management transfer high performance computational grid environments parallel computing 
zhang lai krishnamurthy peterson wang improving performance reliability multi path tcp princeton university 
gandhi bananas evolutionary framework explicit multipath routing internet sigcomm workshop 
frey tannenbaum foster livny tuecke condor computation management agent multi institutional grids th ieee international symposium high performance distributed computing 
thain 
son livny kangaroo approach data movement grid hpdc san francisco california 
ranganathan foster decoupling computation data scheduling distributed data intensive applications hpdc edinburgh scotland 
livny stork making data placement class citizen grid th ieee int 
conference distributed computing systems icdcs tokyo japan 
grid project grid production grid principles practice robert gardner hpdc honolulu ha 
banga druschel mogul resource containers new facility resource management server systems osdi 
