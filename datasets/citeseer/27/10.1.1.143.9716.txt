search software engineering mark harman brunel university ub ph united kingdom tel fax mark harman brunel ac uk bryan jones school computing university cf dl united kingdom tel fax ac uk claims new field software engineering research practice emerging software engineering 
argues software engineering ideal application metaheuristic search techniques genetic algorithms simulated annealing tabu search 
search techniques provide solutions difficult problems balancing competing inconsistent constraints may suggest ways finding acceptable solutions situations perfect solutions theoretically impossible practically infeasible 
order develop field search software engineering reformulation classic software engineering problems search problems required 
briefly sets key ingredients successful reformulation evaluation criteria search software engineering 
software engineers face problems associated balancing competing constraints trade offs concerns requirement imprecision 
perfect solutions impossible impractical nature problems definition analytical algorithms problematic 
engineering disciplines software engineering typically concerned near optimal solutions fall specified acceptable tolerance 
precisely factors robust metaheuristic search optimization techniques readily applicable 
metaheuristic algorithms genetic algorithms simulated annealing tabu search applied successfully number engineering problems 
example literature survey genetic algorithms reveals applications ffl mechanical engineering ffl chemical engineering ffl medical biomedical engineering ffl civil engineering ffl electronic engineering genetic algorithm ga research researchers received interest observers field social science 
ga practitioners may agree findings sociologists indication wide appreciation significance search technologies penetrated collective consciousness non technical disciplines social science 
discipline software engineering appears unique regard application genetic algorithms similar search metaheuristic optimisation techniques metaheuristic algorithms received comparatively little attention software engineers comparison received researchers practitioners established fields engineering 
literature search software engineering genetic algorithms reveals areas testing cost estimation 
taken place automatic programming genetic programming parallelization thought specific topics coding turn considered part software engineering 
inclusion coding application search techniques problems software engineering hitherto somewhat 
thesis underpinning search metaheuristic optimisation techniques highly applicable software engineering investigation application software engineering long overdue 
time software engineering catch mature counterparts traditional fields engineering 
software engineering problems typified observations paraphrased usually need balance competing constraints 
occasionally need cope inconsistency 
potential solutions 
typically perfect answer ones recognised 
precise rules computing best solution 
properties software engineering engineering disciplines precisely attributes application search techniques attractive 
order apply metaheuristic search techniques software engineering problems software engineers face reformulated search problems 
section briefly sets key ingredients reformulation 
section provides criteria judge success application search techniques software engineering problem 
essentially manifesto software engineering 
section sets research goals search software engineering section concludes call area 
reformulating software engineering search problem principal intention section demonstrate conceptually simple reformulation software engineering search software engineering 
hoped reader convinced principal possible apply metaheuristic search large body software engineering problems natural representations fitness functions operators suggest 
order reformulate software engineering search problem necessary define ffl representation problem amenable symbolic manipulation ffl fitness function defined terms representation ffl set manipulation operators 
addition perception problem may need shift order recast search problem 
example case testing problem searching test cases satisfy test adequacy criterion 
issues covered far detail general literature metaheuristic search 
mentioned demonstrate reformulation suggested consequent development search software engineering conceptually feasible 
representation representation candidate solution critical shaping nature search problem 
representations frequently existing applications problem parameters floating point numbers binary code 
case grey codes generally preferred pure binary numbers successor instance near neighbours pure binary code mutations required mutate differing digits 
grey coding avoids problem 
fitness fitness function characterisation considered solution 
measurement theoretical terms fitness function need merely impose ordinal scale measurement individual solutions applied 
generally sufficient know candidate solutions better properties set properties measured 
fitness function imposes fitness landscape characteristics determine search techniques applicable shed light nature problem candidate solutions terms perceived fitness 
fitness landscapes flat sharp maxima easily missed 
fitness function occurs requires tuning avoid problems help guide search solutions 
cases may hard define fitness function artifact optimised may aesthetic qualities determination ordinal scale metric difficult 
situations search approach may applicable argued section 
operators different search techniques different operators 
minimum requirement necessary mutate individual representation candidate solution produce representation different candidate solution 
clearly minimal requirement 
possible apply hill climbing approaches certain forms evolutionary computation 
possible determine set near neighbours candidate solution terms representation simulated annealing tabu search applied 
addition possible sensibly cross individuals produce child retain characteristics parents genetic algorithms applicable 
section glossed lot issues underly choice representation fitness function operators 
intention suggest issues unimportant 
contrary issues form large body research undertaken successfully move speculation application 
highly domain dependent adequately covered overview 
evaluation criteria search software engineering section sets guidelines attempt apply metaheuristics software engineering validated 
base line criteria suggest essential goals search approach 
thorough validation section suggests ways search software engineering combined classical software engineering ways combined approaches validated 
base line validity achieve measure base line acceptability metaheuristic technique perform purely random search 
metaheuristics find better solutions find computational effort random search 
metaheuristic techniques able find values compare known solutions tend produce fitness values considered acceptable reasonable subclass elements problem space 
course criteria somewhat vague depend application domain 
section merely sets guidelines 
random search search technique perform better purely random search order qualify worthy consideration successful application search software engineering 
random search provides lowest benchmark application metaheuristic search 
metaheuristic search consistently outperform random search rejected 
occurs may indicate poor choice search technique example hill climbing multi modal rugged fitness landscape may invalidate merely choice technique implementation notion applying metaheuristics software engineering problem consideration 
discovery known solutions situations known general algorithm solving problem may known examples constructed hand individual solutions known particular elements problem domain 
natural approach validation establish metaheuristic search able find solutions compare known individual solutions 
course compare requires elucidation 
known solutions provided small set simple problems metaheuristic search perform better 
hand constructed solutions illustrate difficult problems solutions hard define praise compare interpreted 
discovery desirable solutions fitness function measure goodness solutions natural approach validation consists seeing just fitness increases gathering empirical data provide evidence kinds solution may obtained typical problem elements 
efficiency means cases search approach may slower existing analytical approach search involve repeated trials fitness function evaluate candidate solutions 
long search technique produce better solutions software engineering applications search approach appropriate quality overrides speed 
exists technique producing solutions applicable produces consistently high quality solutions search approach clearly preferable produces solutions equal better quality 
validation respect existing analytical techniques section phrase analytical techniques describe non search algorithm constructing solutions software engineering problem question 
exist analytic techniques constructing reasonable solutions search techniques applicable 
instance analytical techniques known favour certain forms solution biases affect behaviour search technique may find solutions discovered analytical technique 
analytical techniques applicable subset problem space search techniques may provide mechanism filling gaps 
analytical techniques consistently constructing solutions search techniques may second guess 
analytic techniques exist known produce sub optimal solutions existing techniques may seed metaheuristic search initial population reasonable solutions 
hoped metaheuristic search improve initial seeds 
situations analytic techniques produce part answer metaheuristic search augment existing approach 
avoiding bias analytical techniques metaheuristic search address bias existing analytic solutions evaluation criteria measure novelty solutions relative produced relative fitness compared produced analytic approaches 
situations metaheuristic technique outperform analytic techniques fitness may validated terms additional insight gained considering solutions previously thought atypical non standard 
filling problem space gaps left analytical solutions existing analytic techniques applicable entire problem space metaheuristics may partially validated simply showing fill gaps 
stronger validation clearly involve demonstrating comparable improved fitness metaheuristic solutions relative produced analytic algorithms 
problem subspaces uncovered analytic algorithms represent harder problems solve covered criterion may stringent 
situation validation may simply show metaheuristic technique capable producing better solutions previously uncovered areas problem space random search 
optimisation partial suboptimal analytical solutions metaheuristic techniques provide second guesses algorithms seeded initial population results existing analytic algorithm metaheuristic technique clearly shown provide improvement increased fitness 
simple minded hybrid approach simply try existing approach search approach select best solution 
fortunately combined analytical metaheuristic technique need produce better results pure analytical approach occasions order considered worth 
interpretation depend domain application 
choice technique fitness function general application metaheuristic techniques software engineering presents large number choices 
representation fitness functions operators search technique apply carefully considered 
applications simple hill climbing approach may produce adequate results 
problems multi modal nature fitness landscape may demand robust technique 
general wise experiment variety techniques fitness functions operators 
fortunately highly generic nature search techniques support just form experimentation 
applications fitness function may require form validation 
exist understood widely accepted metrics assessing elements solution space fitness function require validation simply appropriated software measurement literature 
software measurement literature uncontroversial metrics 
disagreement measure candidate solutions fitness function landscape imposes solution space require validation 
cases algorithmic complexity computation fitness function may issue 
application areas computationally demanding fitness evaluation may render approach impractical searches highly productive respect solutions 
psychological considerations software engineering involves aesthetic technical qualities 
may aesthetic applications metaheuristic search non automatic human fitness evaluation required 
cases psychological implications repeated trials human subject judgment biases may induce considered 
human dimension search software engineering research solution produced requires explanation 
cases fitness function understood solutions explained purely terms superior fitness 
may case metaheuristic search approach applied give insight fitness function 
metric captures property properties interest hard define search may explore fitness landscapes created candidate metrics fitness functions 
authors expect see dramatic development field search software engineering 
special issue information software technology forms part represents embryonic state rapidly growing sub area software engineering research 
section sets goals milestones emergent search software engineering research community 
years metaheuristic search applied areas software engineering 
authors knowledge progress areas 

requirements prioritisation 
finding designs 
test data selection 
reverse re engineering transformation re factoring 
development software measurement 
user fitness evaluation aesthetic aspects software engineering addition hoped field search software engineering provide 
comparative studies evaluations different techniques applied software engineering problems 
embryonic field research natural results represent isolated advances related slightly different directions 
field develops matures reasonable hope expect comparative studies surveys start appear 
relative number studies thought crude approximation assessment maturity search software engineering 

theoretical development order answer questions technique operators fruitful software engineering problem 
comparative studies help answer questions technique works best problem 
addition hoped development search software engineering deep broad theoretical studies emerge complement empirical field 

analyses fitness landscapes software engineering problems 
may yield deeper insight nature problems 

tailoring fitness functions 
examination behaviours metaheuristic search may suggest modifications fitness landscape order improve success search 
modifications may produce useful feedback software measurement community 
case wide spread development search software engineering inform informed software measurement clear strong connection software metrics fitness evaluation 

deeper appreciation metaheuristics wider software engineering community 
currently software engineers tangentially familiar metaheuristic search 
hoped reformulation software engineering problems search problems widen awareness metaheuristic search wider software engineering community 

wider application search software engineering practice 
naturally hoped years witness large increase application metaheuristic search building existing successes test data generation 

provision surprising solutions 
novel features search software engineering adds software engineering way solutions occasionally surprising previously considered analytic solutions 
metaheuristic search simply aims optimise value fitness function 
search approach entirely declarative formulated terms required constructed 
applications metaheuristic search observed declarative nature approach leads unexpected solutions tend yield additional insight formulation problem 
software engineering problems nature ideal application metaheuristic search techniques 
argued new field software engineering research search software engineering emerging 
sub area software engineering seeks reformulate software engineering problems search problems facilitating application metaheuristic search techniques genetic algorithms simulated annealing tabu search 
sets key ingredients reformulation provides criteria success individual approaches development field research measured 
authors believe development search software engineering long overdue 
aim part motivation special issue encourage research gold rush 
exciting challenging problems software engineering lie reach metaheuristic search 
essentially manifesto search software engineering 
authors benefitted extensive discussion auspices epsrc funded seminal network gr 
particular authors acknowledge contribution len colin burgess john clark jose gross rob hierons martin rudi lutz mark proctor vic smith marc roper nick martin shepperd harman sthamer nigel tracey joachim wegener darrell whitley 
course errors omissions remain sole responsibility authors 
software engineering metaheuristic innovative algorithms 
mining sediment transport data genetic programming 
proceedings international conference new information technologies decision making civil engineering montreal canada oct pp 

baluja pomerleau simulating user preferences automated artificial evolution computer generated images 
tech 
rep cmu cs carnegie mellon university pittsburgh pa usa oct 
balzer tolerating inconsistency software development 
proceedings th international conference software engineering may pp 

krishnamurthy event contexts matching constraints monitor software processes effectively 
proceedings th international conference software engineering apr acm press pp 

bennett iii keane andre koza automatic synthesis topology sizing analog electrical circuits genetic programming 
evolutionary algorithms engineering computer science jyv finland may june aki periaux eds john wiley sons pp 

bentley wakefield generic representation solid geometry genetic search 
microcomputers civil engineering 
genetic algorithm generating jazz 
international computer music conference san francisco ca usa international computer music association pp 

birge protein optical computing memories 
computer nov 
caldwell johnston tracking criminal suspect face space genetic algorithm 
fourth international conference genetic algorithms july morgan kaufmann pp 

cheung kramer compositional reachability analysis finite state distributed systems user specified constraints 
proceedings sigsoft third acm sigsoft symposium foundations software engineering oct pp 

cord herrera anchez evolutionary learning processes data analysis electrical engineering applications 
genetic algorithms evolution strategy engineering computer science winter eds 
john wiley sons chichester pp 

validation component method software size estimation 
ieee transactions software engineering 
problem software cost function 
information software technology 
feng liu burns genetic algorithms solve construction time cost trade problems 
journal computing civil engineering 
fenton software measurement necessary scientific basis 
ieee transactions software engineering 
glover tabu search tutorial 
interfaces 
goldberg genetic algorithms search optimization machine learning 
addison wesley reading ma 
recombination rationality reductionism romantic reactions culture computers genetic algorithm 
social studies science 
jenkins genetic algorithm improve design breeding 
iee colloquium artificial intelligence civil engineering london uk jan iee pp 

jones sthamer automatic structural testing genetic algorithms 
software engineering journal 
jones sthamer strategy genetic algorithms automate branch fault testing 
computer journal 
karr sharma hatcher harper fuzzy control chemical reaction genetic algorithms 
engineering applications artificial intelligence 
koza genetic programming programming computers means natural selection 
mit press cambridge ma 
optimization tensor polynomial failure theory genetic algorithm 
transactions canadian society mechanical engineering 
miyamoto mori parameter turning dynamic simulation power plants genetic algorithms 
electrical engineering japan 
ning architecture driven business specific component approach software engineering 
proceedings third international conference software reuse pp 

ou uml class diagram object oriented database design specification integrity constraints 
unified modeling language uml notation 
international workshop france june 
muller eds pp 

harrold peck test data generation genetic algorithms 
journal software testing verification reliability 
poli valli genetic design optimum linear nonlinear qrs detectors 
ieee transactions biomedical engineering nov 
pressman software engineering practitioner approach th ed 
mcgraw hill new york ny 
european adaptation 
adapted 
isbn 
ryan walsh evolution provable parallel programs 
genetic programming proceedings second annual conference stanford university ca usa july koza deb dorigo fogel garzon iba riolo eds morgan kaufmann pp 

sanchez miyano brachet optimization fuzzy queries genetic algorithms 
applications data base patents biomedical engineering 
proc 
sixth international fuzzy systems association world congress 
paulo 
sebag schoenauer parametric non parametric identification macro mechanical models 
genetic algorithms evolution strategy engineering computer science winter eds 
john wiley sons chichester pp 

shepperd foundations software measurement 
prentice hall 
sommerville software engineering th ed 
addison wesley 
tracey clark mander automated program flaw finding simulated annealing 
international symposium software testing analysis march acm sigsoft pp 

van laarhoven aarts simulated annealing theory practice 
kluwer academic publishers dordrecht netherlands 
wegener grimm sthamer jones systematic testing real time systems 
th international conference software testing analysis review 
wegener sthamer jones testing real time systems genetic algorithms 
software quality 
weiss knight engineered communications microbial robotics 
proceedings th dimacs workshop dna computers held university leiden leiden netherlands june dimacs series discrete mathematics theoretical computer science leiden center natural computing pp 

whitley genetic algorithm tutorial 
statistics computing 
whitley free lunch proof gray versus binary encodings 
proceedings genetic evolutionary computation conference orlando florida usa july banzhaf daida eiben garzon honavar smith eds vol 
morgan kaufmann pp 

whitley overview evolutionary algorithms practical issues common pitfalls 
information software technology special issue software engineering metaheuristic innovative algorithms 
volume 
williams evolutionary algorithms automatic parallelization 
phd thesis university reading uk department computer science sept 

