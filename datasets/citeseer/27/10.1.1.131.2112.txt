disp practical efficient secure fault tolerant data storage distributed systems daniel ellard harvard university ellard eecs harvard edu disp practical efficient secure client server protocol data storage retrieval distributed environment show protocol tolerate byzantine failure 
discuss variations disp building blocks different applications measure performance disp commodity hardware 
describes disp distributed information storage protocol 
disp practical efficient secure fault tolerant client server protocol distributed data storage 
disp practical simple describe easy implement reasonable assumptions capabilities client server 
disp efficient terms network traffic presence failures protocol requires transferring marginally bytes order retrieve object size disp secure data stored transferred james com encrypted form compromise network server reveals data 
disp able ensure integrity data data retrieved correctly servers corrupted 
disp novel ways requires server server client client communication 
communication clients servers 
protocols require server server communication order achieve consensus agreement scale number servers grows communication overhead complexity protocols daunting 
contrast upper bound number messages required disp operation proportional number servers worst case 
fact disp servers communicate means easier isolate server failures prevent byzantine server influencing correct servers 
second novel aspect disp simplicity 
disp sacrifices functionality small degree performance fault tolerance favor simplicity ease implementation 
garay alon describe systems address issues disp share characteristics systems protocols encoding schemes significantly complex disp 
systems desirable properties believe implementation substantially difficult disp 
disp manages storage immutable data objects distributing responsibility storing data object pool autonomous independently functioning servers 
disp implement semantics file system may storage manager distributed file system immutable storage venti 
disp permit mutable objects support versioning may number versions object versions accessible 
important aspect disp parameterized single protocol tuned type application really family protocols may applications 
disp scalable nearly computation required protocol performed clients 
envision clients greatly outnumber servers disp designed minimize amount client overhead computation required server 
disp satisfies base semantics described fox 
erasure replication data tolerance byzantine server failures allow disp clients access system face large number partial failures 
permission write servers granted soft state manner client fails complete write protocol reason may simply initiate write 
write completed successfully clients see consistent view new version object 
terms cap principle disp sacrifices perfect consistency high availability resilience face network partitions 
objects stored disp system accessible long sufficient number disp servers hold data related object reachable correct number parameter chosen writer new objects may added system long subset containing number correct servers reachable 
rest organized follows section describe basic protocol show extend protocol handle byzantine failures section 
section discusses efficiency disp section gives example applications 
section describe implementation benchmark performance 
section discuss related conclude section 
overview disp disp india protocol turn ideas rabin description possible applications information dispersal algorithm ida 
disp client server protocol 
data stored servers 
contemporary peer peer systems prepared handle frequent changes constituency peers enter leave system assume servers available stable time 
protocol optimized case servers available behave correctly require true 
clients hand dedicated system may enter leave system point 
sets client server machines may overlap 
assume exists secure network infrastructure allows participants protocol perform mutual authentication establish encrypted communication channels 
assume server able sign messages manner verified client server 
data object stored set disp servers called domain 
disp supports number server domains domain may support number clients 
contrast systems designed handle dynamic membership disp routing protocol find servers 
hosts members disp domain dns alias name domain clients discover list servers domain secure dns 
description ida basis data encoding 
introduce central ideas disp describing simplified version protocol 
extensions complete full protocol show tolerates byzantine failures 
information dispersal algorithm underlying representation scheme system rabin information dispersal algorithm ida 
ida erasure code known forward error correcting code original data stored set mutually redundant shares dispersed different locations safe storage 
ida coding scheme analogous coding scheme raid data fill disks encoded stored disks way data reconstructed single disk fails 
essential difference ida typical raid coding schemes raid usually tolerate loss single share data 
ida uses general scheme permits construction arbitrarily large number distinct shares 
ida denote ida code shares may created data object subset shares sufficient reconstruct original data 
ida code properties relevant protocol 
original data size share ida encoding data size share size shares necessary reconstruct total size shares needed reconstruct object size 
ida code exists prime long ida code degenerates simply mirroring data times 
ida codes isomorphic parity checksum codes typically raid 
benefit ida comes desire larger possible construct ida code desired degree redundancy 
properties proven original description ida 
step obtaining 
client sends request arbitrary server domain asking create object specific name ida code attributes 
request valid server chooses unique disp object identifier object creates returns user 
step distributing shares 
client prepares shares object sends write handle share server domain 
server stores share acknowledges receipt 
step committing shares 
client received acknowledgments distribution shares sends request includes server commit share 
server acknowledges share committed 
write protocol disp write protocol consists steps essentially phase commit protocol client serving leader illustrated 
certificate signed server authorizes specific client store share object specified server domain 
includes name object object attributes specified client identity requesting client server server generation number ida code time 
note ida encoding chosen writer writer free choose encoding feel appropriate object disp servers accept shares code part disp specification 
essential choice server step protocol arbitrary 
write handle signed server domain honored server domain 
server client chooses basic disp write protocol 
unavailable incapable granting write handle client free try 
important transparent client verify receives step corresponds object requested 
essential contain name client signed server 
party authenticates communication servers accept shares client initially granted 
side effect rule usable single client current specification disp may delegated shared clients 
client may attempt subvert protocol requesting invalid attributes ownership different client 
correct server check credentials client create write handle valid attributes 
server client conspire create invalid attributes resulting accepted correct servers second step correct server accepts shares attributes valid client attempting write 
server check signature server granted ensure altered clients authenticate server write shares server verify client attempting client granted 
addition resisting attacks clients basic write protocol resilient kinds misbehavior servers 
example server contacted step may refuse attempt delay client responding slowly return object different attributes requested 
client detect situation inspecting check matches request 
situations client free repeat request try different server 
correct server respond quickly created correct server accepted correct servers 
worst case client discover invalid attempts write shares servers rejected 
server prevent client creating object creating object possibly different attributes different data 
may create object name marked identity writer correct servers accept shares object writer create object 
correct server accept shares client client named server forge shares object send servers worst corrupt shares objects 
read protocol disp read protocol consists steps illustrated 
note objects created name shares may referenced possible different versions object share name 
happens server return list match requested name client authorization read 
responsibility client select version wishes access 
may happen server respond quickly possess share object client desires 
case client may poll servers domain finds shares reconstruct discovers object exists 
note disp ensure observers system see state system converge time 
client observe causally consistent view servers depending order clients commit shares ask concurrent clients may observe system different states 
clients free coordinate activity ensure observe contents disp domain protocol part disp time 
operations disp includes delete operation removes object system 
note chosen way new object share object including deleted objects 
step requesting 
client sends request server domain asking objects name server share 
server return corresponding objects complete committed share 
step gathering shares 
client sends servers server replies share corresponding object 
soon shares arrived client reconstructs object 
disp includes mechanisms allow new servers enter domain acquire shares existing objects property object 
method original writer take responsibility creating new shares second ability create new shares object delegated trusted third party 
method advantage client need delegate authority disadvantages requires client check periodically new servers client perform potentially huge amount 
discussion protocols tradeoffs part 
tolerating byzantine failure basic write protocol client able write object ida code long servers available correct 
similarly basic read protocol tolerates fail failures long number participating servers fall unfortunately basic protocol tolerate byzantine failure servers correct 
byzantine server may corrupt share prevent correct reconstruction may reveal contents share basic disp read protocol 
unauthorized party 
section show extend basic protocol address issues 
assume writer uses ida code servers domain 
extend protocols handle byzantine failures size quorum 
client trusts set servers supply consistent information shares 
follows order ensure reader find shares reconstruct byzantine servers form quorum 
number failures tolerated max imum choice operation ba sis 
depending priorities client choose disable fault tolerance altogether tolerate small number failures pay full cost tolerating failures 
ensuring share integrity simple protocol client reading object trust shares returned server identical shares written shares mutually consis tent 
server returns share modified way client way detect modification 
compound problem ida shares malleable byzantine server alter client view data predictable value 
common approach problem data integrity signatures writer signs share creates reader verifies signature accepting share 
method suited applications small number readers writers scale gracefully problems associated key management 
example writer signing key compromised easy way revoke key issue new key update relevant shares 
key lost way check signature 
approach store message digest original object share reader check reconstruction matches original 
unfortunately method able detect reconstruction failed helpful finding corrupted shares way find correct subset shares trial error 
avoid problems approach idea check vectors proposed krawczyk 
cryptographic hash function compute check vector consisting message digests share object store check vector share modify reconstruction step shown 
reader shares reconstruction proceeds normal 
long reader able find correct value check vectors find set consistent shares reconstruct 
byzantine servers accomplish produce group consistent check vectors 
drawback approach server cause reader transfer corrupt share entirety reader determine share corrupt discard third step 
root problem single bit error check vector share invalidate entire share 
bound amount information invalidated single error block oriented variation ida check vectors 
possible isolate errors reduces amount new data requested third step single block error 
byzantine server cause reader extra adding errors blocks share client free choose servers uses adapt situation preferring gather shares step servers provided bad blocks 
share privacy encryption writer trust server share information stored objects unauthorized parties 
servers behave correctly physically secure part system may divulge secrets attacker get copy backups discarded storage disks 
general solution problem ensure data encrypted reaches storage 
unfortunately implementing non trivial large scale system reasons similar problems signatures decryption key may lost may revealed 
situation data lost step reader gathers check vectors servers 
step reader discovers check vectors identical gathers additional check vectors servers match 
step reader gathers shares servers provided matching check vectors compares corresponding element check vector 
match share retained 
share discarded client requests share server 
process repeats client shares match check vector 
reconstruction check vectors forever 
second case data may revealed unauthorized party 
compromised key revoked data new key authorized readers rediscover 
method defeating attack replace ida shamir secret sharing scheme 
context shamir method sharing secrets essentially pad data randomly selected values slight variation ida encode result 
resulting share reveals information whatsoever value original data 
unfortunately amount padding required prohibitive resulting shares size original data total size shares needed reconstruct object times larger object 
secret sharing schemes described garay reduce overhead considerably increase storage network requirements 
time feel better trade cpu disk network bandwidth 
employ different solution encrypt share randomly selected key encode keys ida code store key shares shares data 
key sufficient length key shares known ida code quorum size sary remaining key space large provide equivalent large key 
reconstruct client obtains key shares reconstructs key obtains data shares uses key decrypt reconstruct 
approach similar proposed herlihy 
protocol keys stored reconstructed mechanism shares long key threshold scheme order prevent partial discovery key shares 
cost disp section analyze cost disp terms computation number messages total size 
analysis assume disp domain servers may byzantine ida code quorum size length data object length ida share total size shares encryption decryption fingerprinting steps cost steps shares proportional ida calculation takes time proportional time required compute value shares proportional time necessary perform reconstruction shares total amount considered different erasure codes disp order reduce share computation overhead 
tornado codes particularly promising relatively low computational requirements proven suitable disp application 
small values ida performs reasonably lends efficient implementation 
small total size check vectors proportional check vector contains fingerprint share 
large domains size check vectors problem rea kilobytes shares constitute data transferred protocol expected quantity data transferred marginally reading writing 
failures quantity data transferred reading near block oriented check vectors bad block discovered reader immediately terminate transfer corresponding server transfer block 
reader keeps track servers provided bad blocks worst case byzantine servers provides bad block ignored rest read operation 
case reader read extra blocks 
size block gives total large reasonably small value close worst case equal share size expected case write protocol requires message exchange step messages total similarly read protocol requires exchange step second exchanges gather check vectors followed exchanges gather shares total worst case client contact maximum number servers round search sufficient number correct servers write may require exchanges read may require obvious optimization permit operations piggy backed exchange example combining request write share object request commit share 
implementation optimistically requests share time requests check vector share 
means may waste time transferring corrupt shares absence failures total number message exchanges necessary reading reduced applications disp disp family protocols permits writer choose ida code security fault tolerance options desire object object basis 
permits applications system integrators tailor disp needs 
section outline possible applications disp describe disp tuned 
widespread data availability integrity disp infrastructure system lockss goal disperse information manner remains available correct face coordinated attacks 
application ida code check vectors modest quorum size appropriate 
ensure complete copies object reader gets correct copy 
fault tolerant san disp basis fault tolerant san constructed commodity hardware 
case ida code permit access data long servers functional 
san isolated network servers trusted encryption shares messages omitted increasing potential throughput system considerably 
media archival servers variation fault tolerant san pool media archival servers 
distributing shares large pool servers load balancing provide degree fault tolerance consuming excessive storage 
example imagine movies stored servers 
server stores movie server popular movie may overwhelmed idle 
movies dispersed ida code load server equal matter movie popular 
performance results current implementation disp written entirely uses home grown rpc toolkit 
sha compute check vectors blowfish share encryption openssl implementation rsa keys rc secure authenticated communication 
disp places limitation number servers number shares necessary reconstruct ida codes available 
prototype chose limit number servers domain implemented ida schemes ida ida ida fixed block size share storage check vector calculation 
blocksize block overhead check vectors key shares 
testbed test client pentium iii xeon cpu running ghz alteon gigabit copper ethernet nic 
test servers variety pentium iii machines cpus running speeds ranging ghz ghz 
servers intel pro copper gigabit ethernet nic 
computational demands servers relatively modest bottleneck servers fast read write disks communicate ssl 
clients servers run freebsd 
version generates significantly faster code default gcc provided freebsd 
benchmark results table shows throughput read protocol combinations protocol options 
performance av protocol options ida code secure check share communications vectors encryption mb mb mb table effect protocol options read performance different ida codes 
equivalent mirroring share exact copy original data 
code shares suffice reconstruct data code shares sufficient 
throughput average speed mb mb transfers 
standard deviation average mb time recorded transfer includes time needed establish connection client number servers necessary protocol 
quorum size check vectors share encryption 
erage speed mb mb transfers 
time measured transfer includes time necessary establish connection perform mutual authentication client servers 
include time necessary read data disk warm cache contents shares starting benchmark 
warm cache experience shown throughput limited speed slowest disk servers 
fact code runs quickly code row table fluke artifact testbed systems 
tests exactly amount data transferred due limitations hardware details tcp flow control possible client read data hosts slightly quickly 
quirk visible network bottleneck particular situation 
implementation uses threads pipeline process gathering share blocks performing reconstruction set share blocks read network share blocks reconstructed 
cases share reconstruction faster network 
cases computation increases throughput drops 
cpu testbed client particularly fast contemporary standards network limited gigabit network tests 
slowest benchmark mb factor saturating mb link 
performance drops check vectors enabled drops share encryption point point secure communications enabled 
high cost encryption ssl communication noted researchers 
see solution availability faster ci message digests better implementations hardware corresponding algorithms 
important point ida share reconstruction fast contemporary processors overhead ida apparently unavoidable overhead secure communication 
time needed ida computations time required data transfer write protocol proportional time required read protocol writer prepares writes shares time required steps roughly number shares needed recon struct time required read protocol 
total time required protocol influenced amount time server requires write shares disk 
related ideas new great deal efficient fault tolerant data storage 
garay alon describe systems share characteristics disp 
systems protocols encoding schemes significantly complex disp 
schemes desirable properties remains seen protocols implemented practical manner 
disp addresses issues contemporary systems oceanstore cfs differs crucial ways 
disp global scale 
dht schemes allocate resources pseudo random manner entire set machines system expect disp world divided federated domains 
second disp client coordinates activities servers acting behalf server communication 
oceanstore protocol client communicates system single server turn communicates servers byzantine agreement protocol 
weatherspoon provide interesting comparison erasure replication versus copy replication terms cost failure modes 
weatherspoon identifies strengths weaknesses kinds replication supports argument disp provide seamless support order support applications possible 
disp practical flexible easy protocol performance fault tolerance characteristics 
simple easy analyze implement optimize provides strong guarantees data availability integrity 
disp flexibility follows fact clients choose ida code represent object quorum size necessary reconstruction trade offs total storage necessary represent object speed object reconstructed number server failures object survive 
plan port prototype standard secure rpc framework home grown library restate protocol terms framework implemented portable manner 
point release full specification implementation opensource project 
noga alon haim kaplan michael malkhi julien stern 
scalable secure storage half system faulty 
automata languages programming th international colloquium icalp pages july 
george vinod peris saha 
transport layer security really cost 
proceedings ieee infocom conference computer communications eighteenth annual joint conference ieee computer communications societies pages march 
john byers michael luby michael mitzenmacher 
accessing multiple mirror sites parallel tornado codes speed downloads 
proceedings ieee infocom conference computer communications eighteenth annual joint conference ieee computer communications societies pages new york ny usa march 
frank dabek frans kaashoek david karger robert morris ion stoica 
wide area cooperative storage cfs 
proceedings th acm symposium operating systems principles sosp pages chateau lake louise banff alberta canada october 
daniel ellard james lori park nina yuan 
india protocol project report 
technical report tr harvard university deas 
armando fox eric brewer 
harvest yield scalable tolerant systems 
proceedings seventh workshop hot topics operating systems pages 
armando fox steven gribble chawathe eric brewer paul gauthier 
extensible cluster scalable network services october 
juan garay rosario gennaro jutla tal rabin 
secure distributed storage retrieval 
theoretical computer science 
garfinkel 
remembrance data passed study disk sanitization practices 
ieee distributed systems online 
maurice herlihy tygar 
replicated data secure 
crypto pages august 
hugo krawczyk 
distributed fingerprints secure information dispersal 
proceedings th acm symposium principles distributed computing pages ithaca new york usa august 
john kubiatowicz david bindel yan chen steven czerwinski patrick eaton dennis geels ramakrishna gummadi sean rhea hakim weatherspoon weimer christopher wells ben zhao 
oceanstore architecture global scale persistent storage 
asplos ix proceedings th international conference architectural support programming languages operating systems pages 
acm november 
sean quinlan sean dorward 
venti new approach archival storage 
proceedings fast conference file storage technologies pages monterey ca january 
michael rabin 
efficient dispersal information security load balancing fault tolerance 
journal acm 
david rosenthal reich 
permanent web publishing 
proceedings annual usenix technical conference freenix track freenix pages june 
adi shamir 
share secret 
communications acm november 
hakim weatherspoon john kubiatowicz 
erasure coding versus replication quantitative comparison 
peer peer systems international workshop iptps pages march 
