automatically hardening web applications precise tainting anh nguyen salvatore doug greene david evans university virginia computer science technical report cs december nguyen evans cs virginia edu web applications contain security vulnerabilities 
simple natural ways creating web application prone sql injection attacks cross site scripting attacks common vulnerabilities 
response tools developed detecting mitigating common web application vulnerabilities 
existing techniques require effort site developer prone false positives 
presents fully automated approach securely hardening web applications 
precisely tracking taintedness data checking specifically dangerous content parts commands output came untrustworthy sources 
previous derived tainted input tainted approach precisely tracks taintedness data values 
describe results prototype implementation predominant lamp linux apache mysql php platform 

nearly web applications security critical small fraction deployed web applications afford detailed security review 
review possible tedious overlook subtle security vulnerabilities 
serious security vulnerabilities largest commercial web applications including gmail wei ebay ebay yahoo grey hotmail grey microsoft passport eye 
tools developed partially automate aspects security review including static analysis tools scan code possible vulnerabilities huang automated testing tools test web sites inputs designed expose vulnerabilities bene hua 
taint analysis identifies inputs come untrustworthy sources including user input tracks data affected input values 
error reported tainted data passed security critical parameter command passed exec command 
taint analysis done statically dynamically 
section describes previous security web applications 
approach effective vast majority web applications needs fully automated 
people build websites accept user input understanding security issues 
example php mysql dummies val provides inexperienced programmers knowledge need set database backed web application 
book include warnings security example warns readers malicious input advises check correct format warns script tags user input examples book accept user input contain security vulnerabilities listings allow sql injection listing allows cross site scripting 
typical introductory books web site development 
propose completely automated mechanism preventing important classes web application security vulnerabilities command injection including sql injection cross site scripting 
solution involves replacing standard php interpreter modified interpreter precisely tracks taintedness checks dangerous content uses tainted data 
web application developer need benefit technique long hosting server uses modified version php 
main contribution development precise tainting taint information maintained fine level granularity checked context sensitive way 
enables design implement fully automated defense mechanisms command injection attacks including sql injection cross site scripting attacks 
describe common web application vulnerabilities 
section reviews prior securing web applications 
section describes design implementation explains prevent exploits web application vulnerabilities 

vulnerabilities shows typical web application 
client sends input web server form request step 
get post common requests 
request encodes data created user header field including file names parameters included requested uri 
uri php file server load requested file file system step execute requested file php interpreter step 
parameters visible php code predefined global variable arrays including get post 
php code may values construct commands sent php functions sql query sent database steps produce output web page returned results return client step 
attacker access confidential information corrupt application state carefully constructing malicious input application vulnerable command injection attack 
attacker arrange server produce page execute script constructed attacker application vulnerable cross site scripting attack 

web application architecture 
command injection php injection scripting languages php perl drive generation dynamic web pages represent line defense forms attacks sql injections xss target attackers 
successful injection scripting language level yields control web site attackers including ability execute dangerous os commands 
simple example php injection version earlier online viewing system genealogy information 
attack url form target directory php config 
passwd vulnerable php code uses config value filename require config 
semantics require load file interpret php code php tags display content 
code leaks content password file 
abuse require related functions commonly reported occurrence manip wi sek 
properly configured php thwart type attack 
php safe mode provides open allow url fopen settings control access local filesystem prevent remote files read 
unfortunately security point view default settings permissive 
growing popularity php php ip addresses installed apache servers coupled php emphasis functionality security ensures continued availability exploitable web sites 
example illustrates sophisticated attack popular package managing databases 
stores database configuration parameters array cfg 
attack add additional server configuration parameters growing array get variables 
attacker sets sql server waits connection 
note attacker breaks implicit common assumption trusted database server 
query attacker database list table names 
code eventually executes table name controlled attacker argument eval eval string table pma name str replace table eval eval string authors included code perform sanitization table name passing eval 
sanitization routine properly handle quotes 
table name form exec attack code results successful attack eval evaluates attack string php code 
turn php exec command execute commands attack code host server 
multi step attack illustrates level sophistication attackers dangers ad hoc sanitization routines 
sql injection attacking web applications injecting sql commands described early rai remains common method attacking web applications 
illustrate sql injection attack simple example common practice authenticating web site visitors login form requesting name password 
suppose code fragment construct sql query authenticate users database store passwords cleartext commercial websites cmd select user users user user password password value user comes post user value provided client login form 
malicious client enter value begins comment sql continues line 
resulting sql query select user users user password injected command closes quote comments part query 
succeed regardless entered password 
main problem single quote provided attacker closes open quote remainder user provided string passed database part sql command 
fact attack thwarted php installations retain default magic quotes option 
enabled magic quotes automatically input data adding backslash strings submitted web forms cookies 
magic quote option panacea defending sql injections 
web administrators turn magic quotes may interfere applications explicitly manipulate quotes prior inserting data database 
second example illustrates magic quotes enabled sql injection attacks succeed needing insert quote character 
example illustrates sql injection vulnerability widely open source web portal management system attacker acquire administrator password hash mistake way authentication cookies able login cracking actual password arm 
done select fish attack attacker guesses value column database character time 
case column holds md hash administrator password 
full attack string exploit description available online arm 
attack injects sql code parameter url encodes space site modules php name search query days mid pwd type stories salient part resulting query string select sid url stories authors aid aid mid pwd example attacker guesses character password hash 
attacker guesses correctly test satisfied generated output displays matching record 
md hashes characters long possible values character attacker obtain full password hash maximum guesses 
program easily written automate process steal password hash matter minutes 
authors provided ad hoc fix vulnerability version checking parenthesis get variables 
neglected check post variables permitted similar exploit succeed arm 
example illustrates sophistication attackers danger relying ad hoc fixes underscores need automated approach prevent sql injections 
solution sql injection vulnerabilities sql prepared statements supported mysql fisk php php 
prepared statement query string placeholders variables subsequently bound statement typechecked 
clean delineation application data logic prevents sql injections 
depends programmers changing development practices replacing legacy code 
dynamic generation queries regular queries continue prevalent foreseeable 
cross site scripting cross site scripting vulnerability enables attacker insert script code web page produced site trusted victim 
script code steal victim cookies capture data victim enters web site 
especially effective phishing attacks attacker sends victim email convincing victim visit url 
url may trusted domain cross site scripting vulnerability attacker construct parameters url cause trusted site create page containing form sends data back attacker 
example attacker constructs link href www trusted com search php 
key script src com attack js script implementation search php uses key parameter provided url generated page malicious script appear resulting page print results get key clever hacker character encodings malicious script appear nonsensical victim inspects url opening 
years ago cert advisory cert described problem cross site scripting advised users disable scripting languages web site developers validate web page output 
cross site scripting problems remain serious problem today 
far functionality web depends scripting languages users cause unwilling disable 
security conscious web developers frequently produce websites vulnerable cross site scripting attacks 
mcgraw hog describe different examples websites vulnerable simple cross site scripting attacks 
example typical cross site scripting vulnerabilities reported microsoft com october 
attacker able inject scripting code web page generated microsoft com url parameter href www microsoft com download asp 
javascript attack code attack code appear link generated page execute victim clicked link 
particularly dangerous cross site scripting vulnerability microsoft hotmail application eye 
hotmail displays email html format sent user 
site took measures filter obvious dangerous content received messages including applets javascript 
user clicks link email message msn site user passport credentials transmitted new site 
auctions msn com site included asp script asp passed arguments 
url links scripts scripting code arguments interpreted executing script created attacker victim clicks link 
site access victims passport credentials attack script steal victim cookie send credentials attacker 
initial fixes vulnerability eye involved filtering script arguments ignore dangerous tags common scripting code 
filters circumvented alternate character encodings 
asp script longer supported 
ad hoc approaches rarely fix problem 
cross site scripting vulnerabilities continue widely web sites 
past weeks vulnerabilities google ley gmail wei 
persistence cross site scripting vulnerabilities stems need accept user input provide functionality web applications combined lack clear separation content code 
ad hoc solutions close vulnerabilities fail prevent exploits easily overlooked security conscious developers 
focus fully automated solutions 

prior numerous approaches proposed securing web applications including vulnerability testing bene hua static analysis 
describing web application security outside scope focus describing relevant information flow perspective 
web vulnerabilities described section stem insecure information flow data untrusted sources trusted way 
security community studied information flow extensively sab 
earliest focused confidentiality particular preventing flows trusted untrusted sources bell 
case primarily concerned integrity 
biba showed information flow provide integrity considering flows untrusted trusted sources biba 
information flow policies enforced statically dynamically combination static dynamic techniques 
static taint analysis detect security vulnerabilities programs eva shan 
static approaches advantage increased precision run time overhead ability detect correct errors deployment 
require substantial effort programmer 
focused solutions practically deployed typical web development scenarios focus dynamic hybrid techniques 
information flow policies enforced dynamically steps 
input output filtering observes traffic client web server 
closely related taint checking 
input output filtering scott sharp sco developed system providing application level firewall preventing malicious input reaching vulnerable web servers 
approach required specification constraints different inputs compiled constraints checking program 
approach requires programmer provide correct security policy specific application ill suited protecting typical web developers 
commercial web application firewalls developed including watch aps 
tools provide input output filtering observing web traffic detect possible attacks 
example aps configured detect text appears credit card number output pages prevent returned 
extensive configuration tools prone false positives false negatives dyck 
taint checking taint checking enforces information flow policies application execution 
perl ruby popular scripting languages enforce information flow policies dynamic checking 
perl taint mode provides simple rules preventing untrusted data critical functions 
general approach mark external data tainted track taint information perl expressions 
perl implements simple rule tainted data subexpression entire expression 
variables requires regular expression pattern match 
assumes pattern match provides needed data validation 
contrast chosen force developers variables explicitly 
disadvantage approach forces developers modify application code need variable false positive php injection xss detection code 
mitigate potential problem keeping track tainting level single character php strings 
armed information selectively apply injection detection algorithms strength novelty precise tainting approach 
ruby provides levels taint modes tho 
ruby safe level corresponds roughly perl taint mode taint information prevent php injections 
ruby stricter safe levels define additional restrictions tainted variables including ability completely sandbox tainted variables untainted ones 
ruby additional safe levels designed generic environment php primarily targeted web development distinguishing external trusted input usually sufficient 
perl ruby provide generic mechanism tainting variables focused maintaining taint information strings 
practice seen need php taint non string variables php external sources data cookies get post database session values represented strings 
note notion precise tainting complementary coarse grain tainting perl ruby 
approach hardening web applications precise tainting applied effectively perl ruby languages 
newsome song new dynamic tainting granularity memory locations detect analyze security exploits binaries 
modified valgrind emulator net mark input untrusted sources tainted keep track tainting information program executes machine instructions 
attack detected tainted data jump target passed certain system calls 
approach precise taint information enables automated defense false positives 
tracking taint information machine level expensive imposes unacceptable overhead applications 
approach level programming language semantics able perform precise tainting minimal overhead 
huang developed hybrid approach securing web applications hua 
tool static analysis type information flow identify possible vulnerabilities php web applications 
input external sources considered tainted type static analysis detect insecure uses tainted data 
type approach operates coarse grain data derived tainted input considered fully tainted 
addition reporting warnings describing detected vulnerabilities insert calls sanitization routines 
routines programmed programmer filter potentially dangerous content tainted values passed security critical functions 
precise tainting approach automated require server uses modified interpreter php web applications running server protected 
precise tainting context specific checking approach limits number false positives 

automatic web hardening design maintaining precise information data tainted processing request checking user input sent external command output resulting web page contains safe content 
solution fully automatic prevents large class common security vulnerabilities direct effort required web application developer 
illustrates system architecture 
change standard lamp architecture replace standard php interpreter modified interpreter identifies data comes untrusted sources precisely tracks data 
modified web server architecture 
propagates php code interpretation section check parameters commands contain dangerous content derived user input section ensure generated web pages contain scripting code created untrusted input section 
section evaluates performance prototype implementation 
taint marking mark input untrusted sources including data provided client requests tainted step 
php external variables strings 
modified php interpreter implementation string datatype include tainting information string values granularity individual characters 
propagate taint information function calls variable assignments composition granularity single character 
call fine grained level maintaining taint information precise tainting 
application precise tainting enables prevention sql injection attacks ability easily filter output xss attacks 
function uses tainted variable dangerous way reject call function done sql queries php system functions variable values done preventing cross site scripting attacks 
web application developers remember inputs get posts forget omit check variables set directly manipulating protocol directly 
approach ensures external variables hidden form variables cookies header information marked tainted 
external variables accessible php associative arrays get post cookie request server 
values get post cookie correspond respectively parameters passed get post requests transmitted cookies 
request array aggregates values get post cookie arrays 
server array contains variables set web server related execution environment current script 
mark tainted variables server sent client accept accept charset accept encoding ac cept language connection host referer user agent 
keep track taint information session variables database results 
session variables provide mechanism web developers keep track application state information having information exposed potentially manipulated clients provided session id difficult guess 
taint strings php string track tainting information individual characters 
done associating taint string string value 
taint string null indicating entire string untainted array characters representing taintedness character 
efficient encoding need full bit encode taint information typical taint strings long sequences character simple implementation concept prototype 
handle characters handled similarly 
provide precise tracking maintain source tainting taint string 
taint markings untainted tainted get method tainted post method tainted cookie tainted database response tainted session variable consider code fragment part string came external input came cookie hello get name am cookie name values get name cookie name fully tainted assume alice bob tainting propagates concatenations 
final assignment value taint markings hello alice 
am bob 
ccc illustrates precise tainting taint information kept character source taint maintained taint information kept lifetime php script 
functions keep track taint information function calls particular functions manipulate return strings 
feasible keep track taint information granularity single character 
example consider substring function tainted characters underlined original precise taint substr original precise substr original ta taint markings results substr call depend part string select 
table lists functions keep track fine grained taint information 
list functions obtained php list string functions 
type function name formatting sprintf taint information kept string string conversion string selection variables substr str split white space chop trim string explode str functions str pad str replace substr replace str split table 
taint preserving string functions 
table provides examples precise tainting various string functions 
functions mapping input output characters obvious feasible keep track taint information coarse level result strings marked tainted arguments function tainted 
include regular expression functions grep match match quote replace split complex string functions get headers get meta tags 
approach perl regular pattern expression match indicative sanitization routine implicitly variable assume pattern matching expressions produce untainted results 
allow developers circumvent taint markings provide function explicitly marks string parameters untainted 
conservative perl approach tainting information may lost accidentally attack permitted faulty function result sprintf bye john bye bye john hello hello hello str replace hello john explode col col array col col table 
precise tainting examples 
bye john john hello hello hello hello john col col col col pattern expression 
increases risk legitimate web site uses fail overly strict tainting 
mitigate providing context sensitive checking tainted values 
general eschew implicit variables potentially dangerous 
cast operations implicit explicit strings type variables 
example untainted get anumber tainted implicit cast integer float explicit cast float untainted database values databases provide potential venue attackers insert malicious values 
options dealing disallow tainted data stored database maintain tainting information database consider data received database untrustworthy 
option strict break functionality web applications 
applications typically database keep track user input reasonable disallow storing tainted data database 
variation attempt check stored data potentially dangerous content see examples sections possible safely determine content dangerous knowing context 
second option provide precise tainting information require modifications database server modifications application database example keeping shadow table corresponding tainting information entry data table 
implementation option desirable 
modifying database server tie applications particular database server 
modifying application involve extensive rewriting database commands 
automated added complexity increase likelihood security vulnerabilities 
opt third option treat strings returned database queries untrusted mark tainted 
approach may appear overly restrictive sense legitimate uses may prevented show section precise tainting approach checking cross site scripting mitigates potential problem typically web applications 
advantage option database compromised means attacker able compromised database construct cross site scripting attack 
modified php functions return data database mysql fetch array mysql fetch row mysql fetch assoc mysql result automatically mark characters resulting string values tainted 
focus mysql straightforward modify analogous functions databases 
session variables stateless nature hypertext transfer protocol protocol underlies world wide web requires developers keep track application state client requests 
exposing session variables clients allow attackers manipulate applications 
designed web applications keep session variables server session id communicate clients 
steps commonly protect session id including encrypting traffic https secure socket layer generating session ids difficult predict timing sessions 
default php stores retrieves session variables files 
modified php store retrieve tainting information 
session variable read file taint markings restored 
php allows developers replace default implementations handlers example storing session state shared memory back database 
circumvent modified handlers developers approach lose tainting information need modify handlers maintain 
preventing command injection tainting information determine calls security critical functions safe 
prevent command injection attacks check tainted information passed command safe 
actual checking depends command designed precise allow typical web applications function false positives 
php injection prevent php injection attacks disallow calls functions shown table arguments tainted 
similar extensive functions disallowed perl taint mode ruby taint level 
sql injection cross site scripting checking checking done coarse level tainted input functions dangerous allow 
type functions program execution system exec shell exec proc open filesystem fopen glob mkdir readfile file php eval include require include language require table 
taint checked php functions 
attacks described section thwarted propagate tainting information get post variables string manipulation functions database operations eventual arguments require eval 
example argument require marked tainted 
attack example database table name table marked tainted comes result database query case trojan database setup attacker 
value eval string indirectly derived table partially tainted 
call eval permitted attack unsuccessful 
sql injection prevent sql injection attacks modify php functions send commands database mysql query mysql unbuffered query check presence special sql tokens tainted portion query string allowing command sent database 
algorithm detecting sql injection involves steps 
tokenize query string preserving taint markings tokens 

scan token identifiers operator symbols ignore literals strings numbers boolean values 

operator symbol marked tainted detected sql injection 
operator symbols 
identifier marked tainted keyword detected sql injection 
example keywords include union select drop 
step appears simple implementation quite complicated potentially error prone 
deal various complex quoting rules sql commands 
adopted scanner postgres implementation appeared easier extract modify mysql scanner 
stripped postgres scanner code related parsing kept just tokenizer 
approach prevent certain sites working properly especially application semantic explicitly allow users issue sql queries 
developers need call explicitly 
examples section show techniques defend sql injections 
recall example cmd select user users user user password password attacker provides malicious value user 
resulting query string tainted follows select user users user password list keywords obtained merging keywords mysql postgres scanners 
additional measure add critical table names list potentially harmful stored procedures 
inspection sql injection exploits date existing rules suffice 
detect injection tainted keyword step algorithm 
note detected injection tokens 
detecting injection modified php interpreter returns error result mysql query sending command database 
second example query string select sid url stories authors aid aid mid pwd injection detected tainted 
contrast ad hoc filtering original patch approach stops attack just parenthesis comprehensive list sql tokens 
preventing cross site scripting approach preventing cross site scripting relies checking generated output 
potentially dangerous content generated html pages contain untainted data 
accomplish modifying php output functions print echo printf printing functions functions check tainted output containing dangerous content 
replacement functions output untainted text normally keep track state output stream necessary checking 
contrived example consider application opens script prints tainted output print script document write user script attacker inject javascript code setting value user value closes parenthesis executes arbitrary code alert yo 
note opening script tag divided multiple print commands 
modified output functions need keep track open partially open tags output 
need parse output html completely web applications generate ungrammatical html 
checking output input avoids common problems ad hoc filtering approaches 
looking generated output tricks involving separating attacks multiple input variables character encodings handled systematically 
checking involves safe content blacklisting dangerous content 
blacklist attempts prevent cross site scripting attacks identifying known dangerous tags script object 
fails prevent script injection involving tags 
example script injected apparently harmless bold tag parameters 
text enable attacker steal victim cookie script tags apparent calls javascript routines location href evil com steal php 
document cookie defense takes advantage precise tainting information identify web page output generated untrusted sources 
tainted text dangerous removed output altered prevent interpreted example replacing unknown tags lt 
conservative assumptions mean safe content may inadvertently suppressed precise tainting information limited content generated untrusted sources 
performance current prototype implementation implements precise tainting performs checking necessary prevent command injection cross site scripting attacks 
report performance microbenchmarks designed stress modified php interpreter benchmarks typical web applications 
prototype implementation designed simple proof concept opportunities improve performance production implementation 
performance adequate typical web applications 
table presents results micro benchmark tests 
micro benchmark measures time required execute iterations loop body executes specific php functions 
illustrates worst case performance mechanisms 
highest measures overhead sql php micro benchmark isolates sql injection checking 
creates partially tainted string passes function checks sql commands 
standard tainting benchmark php ms php ms overhead concat php print php sql php table 
micro benchmark results 
time average executions 
concat php benchmark concatenates tainted strings print php benchmark prints partially tainted strings sql php benchmarks checks partially tainted sql command send request database 
measured system overhead testing typical web application requests processing login entering message generating output page contents database table 
table summarized impact modified interpreter request rate 
application benchmarks measured overhead 
simple optimizations implementation reduced 
benchmark standard php req tainting php req overhead login php message php members php table 
application benchmark results 
time average requests 
flood flood test application benchmarks starting modified normal server machine different ports 
login php benchmark tests login involves constructing sql query generating welcome page 
message php benchmark posts message 
members php benchmark executes sql queries generates large output page containing entries 

described fully automated approach hardening web applications 
exploiting precise tainting takes advantage program language semantics performing contextdependent checking able prevent large class web application exploits requiring effort web developer 
internet continues insecure web applications despite detecting vulnerabilities hardening web applications 
effective solutions need balance need precision limited time effort web developers spend security 
fully automated solutions described provide important point design space 
funded part darpa srs fa national science foundation nsf career ccr 
arm lucas armstrong 
sql injection 
bugtraq message february 
bell bell lapadula 
secure computer systems mathematical foundations 
mitre mtr vol 


bene benedikt freire godefroid 
automatically testing dynamic web sites 
www 
may 
biba biba 
integrity considerations secure computer systems 
usaf electronic systems division esd tr 
april 
cert cert advisory ca malicious html tags embedded client web requests 
february 
www cert org advisories ca html dyck timothy dyck 
review review aps 

may 
www com article asp david 
evolution cross site scripting attacks 
labs 
may 
www com lib xss pdf eva david evans david 
improving security extensible lightweight static analysis 
ieee software 
jan feb 
eye 
microsoft passport account hijack attack hacking hotmail 
hacker digest winter 
fisk harrison fisk 
prepared statement 

dev mysql com tech resources articles prepared statements html harry 
magic quotes add slashes php 

www com tutorials magic quotes shtml gallery php injection linux security advisory feb 
www com advisories advisory html grey software 
remotely exploitable cross site scripting hotmail yahoo 
march 
www com security advisories gm mc hog greg gary mcgraw 
exploiting software break code 
addison wesley 

hua yao wen huang huang lin tsai 
web application security assessment fault injection behavior monitoring 
www 
may 
hua yao wen huang fang yu christian hang chung hung tsai lee sy yen kuo 
securing web application code static analysis runtime protection 
www 
may 

cross site scripting vulnerability microsoft com 
full disclosure mailing list 
october 
php injection jan 
iss net web application firewall 

www com products asp stephen 
sql injection attacks oracle developers 
white 
january 
www net security org dl articles pdf ley jim ley 
simple google cross site scripting exploit 
october 
david 
sql server security 
mcgraw hill osborne media 
august 
manip manip 
centre php injection 
july 
org lists jul html survey 
november 
news com net nicholas nethercote julian seward 
valgrind program supervision framework 
workshop runtime verification 
july 
new james newsome dawn song 
dynamic taint analysis automatic detection analysis signature generation exploits commodity software 
appear ndss 
february 
perl documentation perl security 
www com perl pod html php improved mysql extensions 
www php net manual en ref php php manual string functions 
www php net manual en ref strings php php manual security 
php net manual en security php rai rain forest 
nt web technology vulnerabilities 
phrack magazine 
volume issue 
december 
tonella 
analysis testing web applications 
ieee international conference software engineering 
may 
sab andrei sabelfeld andrew myers 
language information flow security 
ieee journal selected areas communications 
january 
sco david scott richard sharp 
abstraction application level web security 
www 
may 
shan umesh shankar talwar jeffrey foster david wagner 
detecting vulnerabilities type qualifiers 
usenix security symposium 

critical bug 
iss net kevin 
sql injection web applications vulnerable 
spi labs white 

www com whitepapers pdf application protection system 

www com products aps aps shtml tho dave thomas chad fowler andy hunt 
programming ruby pragmatic programmer guide second edition 
pragmatic programmers 

val janet 
php mysql dummies 
wiley publishing 

watch 
technical overview 

www 
com resources overview pdf wei 
security hole gmail 
magazine 
october 
net il article sid wi sek wi sek system administrator php injection 
feb 
lists com full disclosure february html 
