acm sigsoft software engineering notes vol oct page foundations study software architecture perry bell laboratories mountain avenue murray hill new jersey dep research att com purpose build foundation software architecture 
develop intuition software architecture appealing established architectural disciplines 
basis intuition model software architec ture consists components elements form rationale 
elements processing data connecting elements 
form defined terms properties relationships elements constraints elements 
ratio provides underlying basis architecture terms system constraints derive system requirements 
discuss compo nents model context architectures architectural styles extended exam ple illustrate important architecture style considerations 
conclude presenting benefits approach software architecture sum contributions relating approach current 
software design received great deal attention researchers 
research arose response unique problems developing large scale soft ware systems recognized 
premise research design activity separate implementation requiring special nota tions techniques tools 
results software design research begun roads marketplace computer aided software engineering case tools 
focus software engineering re search moved away software design specifically alexander wolf department computer science university colorado boulder colorado alw cs colorado edu perry alexander wolf integrating designs design process broader context software process management 
result integration notations techniques developed soft ware design absorbed implementation lan guages 
consider example concept support ing large 
integration tended blur confuse distinction design implementation 
saw great advances ability describe analyze software systems 
refer things formal descriptive techniques notions typing enable reason effectively software systems 
example able reason consistency inconsistency effectively able talk type conformance just type equivalence 
believe decade software architecture 
term architecture con trast design evoke notions codification abstraction standards formal training soft ware architects style 
defining particular software architectures developing gen eral support process developing architectures notably sara time reexamine role ar chitecture broader context software software process management marshal various new techniques developed 
benefits expect gain emer gence software architecture major discipline architecture framework satisfying require ments architecture technical basis design conformance describe relationship types subtypes 
acm sigsoft software engineering notes vol oct page managerial basis cost estimation pro cess managment architecture effective basis reuse architecture basis dependency consistency analysis 
primary object research support development software architecture specifications 
intended build dation research software architecture 
section developing intuition software architecture background established disciplines hardware network building architecture establish context software architecture provide motivation ap proach 
section propose model characterization software architecture software architectural styles 
section discuss easily understood example elicit important software architecture delineate require ments software architecture notation 
section elaborate major benefits ap proach software architecture 
conclude sec tion summarizing major points considering related 
intuition context motivation presenting model software architecture lay philosophical foundations devel oping intuition software architecture analogies existing disciplines proposing con text software architecture multi level product paradigm providing motivation soft ware architecture separate discipline 
developing intuition soft ware architecture interesting note named software architectures 
intuition different kinds software architectures formalized institutionalized 
claim software architectures state affairs exists 
section look architectural disciplines order develop intuition software architecture 
look hard ware network architecture tra considered sources ideas software architecture look building architecture classical architectural discipline 
computing hardware architecture different approaches hardware architecture distinguished aspect hardware emphasized 
risc machines ex amples hardware architecture emphasizes instruction set important feature 
pipelined ma chines multi processor machines examples hardware architectures emphasize configura tion architectural pieces hardware 
interesting features second ap proach hardware architecture important consideration software architecture relatively small number design ele ments scale achieved replication design ele ments 
contrasts software architecture exceedingly large number possible design elements 
scale achieved replicating design el ements adding distinct design elements 
similarities organize configure software architectures ways analogous architectures mentioned 
ex ample create multi process software systems pipelined processing 
important insight discussion fundamental important differences kinds architecture 
differences somewhat ironic software architecture hardware terms 
network architecture network architectures achieved abstracting design elements network nodes connec tions naming kinds relationships elements 
get star networks ring networks manhattan street net works examples named network architectures 
interesting architectural points net architecture components nodes connec tions topologies considered 
certainly case similar level software architecture example processes communication 
topologies consider exceedingly acm sigsoft software engineering notes vol oct page large number possible topologies gies generally go names 
size aspects different topology nodes connections 
consider matters placement processes architectures kinds interprocess communication mes sage passing architectures 
benefit networks analogy software architecture look architectural elements similar level abstraction 
building architecture classical field architecture provides interesting insights software architecture 
subject matter quite different number interesting architectural points building architecture suggestive software architecture multiple views architectural styles style engineering style materials 
building architect works customer means number different views particular aspect building emphasized 
example elevations floor plans give exterior views top views respectively 
elevation views may supplemented contextual drawings scale models provide customer look building context 
builder ct provides floor plans plus additional structural views provide immense amount detail various explicit design consider ations electrical wiring plumbing heating air conditioning 
analogously software architect needs number different views software architecture var ious uses users 
view implementation 
real sense im plementation builders detailed view building skin details visible 
difficult design ar chitecture system details 
consider center paris example 
notion architectural style particularly ful descriptive prescriptive points view 
descriptively architectural style defines partic ular codification design elements formal arrange ments 
style limits kinds design elements formal arrangements 
architectural style constrains design elements formal relationships design elements 
analogously shall find useful concept software architecture 
extreme importance relationship engineering principles architectural style course architecture 
example get light feel perpendicular style ex chapel king college cambridge engineering 
different engineering principles needed move lightness perpendicular 
just matter aesthetics 
relationship tween engineering principles software architecture fundamental importance 
relationship architectural style materials critical importance 
als certain properties exploited pro particular style 
may combine structural aesthetic uses materials post beam construction style houses 
build skyscraper wooden posts beams 
material aspects design elements provide aesthetic engineering bases architecture 
relationship critical importance software architecture 
find building architecture funda mental insights software architecture multiple views needed emphasize understand dif ferent aspects architecture styles cogent important form codification descriptively engineering principles material properties fundamental importance development support partic ular architecture architectural style 
context architecture discussing motivation software archi tecture specifications posi characterization ar chitecture context entire software product 
note mean imply particular process product created course may implications process inherent view 
purpose primarily provide context architecture considered fairly standard software product 
characterize different parts software acm sigsoft software engineering notes vol oct page product kinds things important part kinds entities properties relationships important level kinds decision evaluation criteria rele vant level requirements concerned determination information processing character information processing needed user system architecture concerned selection archi elements interactions con straints elements interactions necessary provide framework sat requirements serve basis design design concerned modularization detailed interfaces design elements algorithms procedures data types needed support architecture satisfy requirements implementation concerned representa tions algorithms data types satisfy design architecture requirements 
different parts particular product means simple characterization 
continuum possible choices models abstractions transformations representations 
simplify continuum discrete parts primarily provide intuition architecture related requirements design software system 
noted development paradigms characterization apply example exploratory programming paradigm ai research 
tion represents wide variety development evo paradigms creation production software delineates important hitherto un part unified software product 
motivation architectural speci number factors contribute high cost software 
factors important note notion requirements ide 
practice requirements pure contain constraints architecture system constraints system design constraints implementation 
software architecture evolution tion 
systems evolve adapted new uses just buildings change time adapted new uses 
frequently accompanying property evolu tion increasing brittleness system increasing resistance change chang ing gracefully 
due part architec tural problems architectural erosion architectural drift 
architectural erosion due violations ar chitecture 
violations lead increase problems system contribute increasing brittleness system example removing load bearing walls leads disastrous results 
architec tural drift due insensitivity architecture 
insensitivity leads disasters results lack coherence clarity form turn easier violate architecture obscured 
customization important factor software ar chitecture problems causes lack architectural maturity 
building software systems stage recreating design element new architecture 
arrived stage standard set architectural styles accompanying design elements formal arrangements 
system essence new ar chitecture new architectural style 
ubiquitous customization indicates gen eral need codification need architectural templates various architectural styles 
standard parts system particular style architect select set known understood elements ways appropriate desired architecture 
standard tem plates architectural elements frees architect concentrate elements customization crucial 
characterization architecture moti problems number things want able architectural specification prescribe architectural constraints rid desired level indicate desired restrictiveness determine desired level generality particularity define necessity luxury pin point degree rel 
want means supporting principle constraint able express constraints ar chitecture necessary architectural level system description 
impor acm sigsoft software engineering notes vol oct page tant departure current practice specifying constraints supplies specific solu tions embody desired constraints 
separate engineering load bearing dec 
separation enables avoid kinds changes result architectural erosion 
express different aspects architecture appropriate manner describe different parts architecture appropriate view 
perform dependency consistency analysis determine interdependencies architecture requirements design determine interdependencies various parts ar chitecture determine consistency lack architectural styles styles architecture architectural ele ments 
model software architecture section field building architecture provide number insights software ar chitecture 
concept building architec ture appeal standard definition art science building especially designing building structures 
relevant needs secondary definition unifying coherent form structure 
sense architecture providing unifying coherent form structure model software archi tecture 
model software architecture introduce notion software architectural style discuss interdependence processing data connector views 
model building architecture propose model software architecture software architecture elements form rationale software architecture set architectural design elements particular form 
distinguish different classes architectural elements processing elements data elements connecting elements 
processing elements components sup ply transformation data elements data elements contain information transformed connecting elements times may processing data elements glue holds different pieces architecture 
example procedure calls shared data messages different examples connecting elements serve glue architectural elements 
consider example water metaphor different classes elements processing elements ball data element water primary connecting element glue 
consider similarities water soccer 
similar architecture dif fer glue similar elements shapes forms differ mainly context played way elements connected 
shall see connecting elements play fundamental part distin architecture may important effect characteristics particu lar architecture architectural style 
architectural form consists weighted proper ties relationships 
weighting indicates things importance property relationship necessity selecting alterna tives may preferred 
weighting indicate importance enables ar distinguish load bearing dec formal aspects weighting indicate alternatives enables architect constrain choice giving degree latitude designers satisfy implement architecture 
properties constrain choice archi elements properties define constraints elements degree desired architect 
properties define minimum de constraints stated default constraints defined properties constrained architect may take form desired designer implementer 
relationships constrain placement architectural elements constrain different elements may interact organized respect architecture 
acm sigsoft software engineering notes vol oct page properties relationships define minimum desired constraints stated 
underlying integral part architecture rationale various choices defining architecture 
rationale captures motivation choice architectural style choice elements form 
building architecture rationale explicates underlying philosophical aesthetics motivate architect 
software architecture rationale explicates satisfaction sys tem constraints 
constraints determined considerations ranging basic functional aspects various non functional aspects economics performance reliability 
architectural style architecture formal arrangement architec tural elements architectural style abstracts elements formal aspects various spe cific architectures 
architectural style con strained complete specific architecture 
example talk distributed style multi process style 
cases concentrate certain aspects specific architecture relation ships processing elements hardware pro cessors constraints elements respectively 
definition architecture architectural style hard dividing line ar style leaves architecture begins 
continuum person architecture may architectural style 
architecture style depends sense 
example propose section archi styles constraints architecture 
want architectural specification constrained level desired architect easily happen person architecture constrained architec tural style 
important thing architectural style encapsulates important decisions architectural elements emphasizes important con straints elements relationships 
useful thing style constrain architecture coordinate ing architects 
style embodies decisions suffer erosion drift 
emphasis style constraint architecture provides visibility certain aspects architecture violations aspects insensitivity obvious 
process data connector interdependence mentioned important insight build ing architecture multiple views 
im portant views software architecture pro cessing data connections 
observe process view architecture provided result ing emphasis data flow processing elements aspects connections tween processing elements respect data elements 
conversely data view architecture provided resulting emphasis process ing flow emphasis connecting elements process view 
current common wisdom put emphasis object oriented data oriented approaches believe views necessary useful architectural level 
argue informally way process data interdependence properties distinguish state data properties result transforma tion produced processing element 
views intertwined dependent important charac data processing 
gen eral discussion process data interdependence see 
interdependence processing data connections obvious connecting elements mechanisms moving data pro cessor processor 
activity data connecting elements necessarily properties required data elements pre way processing elements properties required data elements 
architectural level need views ability move freely easily 
example section provides illustrations interdependence provide different overlapping views 
dichotomy process data object terms neutral 
terms suggest specific terms programming 
acm sigsoft software engineering notes voi oct page examples software architectural styles achieved widespread acceptance multi phase compiler 
practically style software engineer expected trained 
rely familiarity illustrate insights gained software archi descriptions 
section look compiler architectures multi phase style compiler organized sequentially compiler organized set parallel pro cesses connected means shared internal rep resentation 
space limitations presentation pur poses examples somewhat simplified ideal ized details ignored 
exist ing notations convenient illustrative purposes proposals specific architectural notations scope 
case focus architectural considerations interesting derive particular example 
course examples multi phase compiler ar exist claims exhaustive coverage architectural landscape 
ing examples provide brief review common architectural style 
multi phase architectural style simplified model compiler distinguishes phases lexical analysis syntactic analysis semantic analysis optimization code generation 
lexical analysis acts characters source text produce tokens syntactic analysis 
syntactic analysis pro duces phrases definition phrases phrases 
semantic analysis correlates phrases definition phrases program element identifier associated definition element resulting correlated phrases 
optimiza tion produces annotations correlated phrases hints generation object code 
optimization phase considered preferred necessary aspect style 
multi phase style recognizes architectural elements processing elements lexer parser op code generator data elements characters tokens phrases correlated phrases annotated phrases object code 
notice specified connecting elements 
simply case style dictate connecting elements 
course choice connecting elements profound impact resulting architecture shown 
form architectural style expressed weighted properties relationships archi elements 
example optimizer notated phrases preferred elements necessary 
example linear relationships characters constituting text program tokens produced lexer phrases produced parser 
particular tokens consist sequence characters phrases consist sequence 
exists non linear relationship phrases correlated phrases 
relation ships depicted 
final example processing elements set properties defines constraints elements 
lexer instance takes input characters represent program text produces output sequence tokens 
ordering correspondence tokens characters preserved lexer 
architectural descrip tion capture properties relationships 
illustrate formally describing rela characters tokens describing order preserving property lexer 
description data view stated terms se quences disjoint subsequences 
cl cm sequence char representing source text subsequence elements el ements ci cj inclusive tl tn sequence tokens indicate correspondence token subsequence said preserve ff exists exists tl tn cr tk tk acm sigsoft software engineering notes vol oct page characters tokens phrases correlated phrases lexer constrained processing tive accept sequence characters produce sequence tokens preserve ordering cor characters tokens lexer preserves interesting note connec tor view reveals additional constraints placed architectural style 
constraints illustrated connection lexer parser 
particular connecting elements ensure tokens produced lexer preserved parser order remains intact losses duplicates spurious additions 
sequential architecture classical multi phase compiler archi tecture sequential phase performs function completion phase begins data elements passed directly processing element 
add architectural elements characterizing style connecting elements procedure call parame ters 
furthermore refine tokens include ing identifier tokens name table nt refine phrases organized syntax tree ast 
correlation phrases results syntax graph asg optimization annotated syntax graph 
gives process ing view sequential architecture showing flow data system 
notice paths code generator passes optimizer 
reflects fact separate optimization phase necessary architecture 
design satisfying architecture need provide optimizer 
illustrate interdependence processing data views consider data 

data element relationships 
characters object code correlated phrases nt asg tokens annotated cor 
phrases correlated phrases nt nt asg processing view se compiler ar chitecture 
phrases nt ast created transformed flow sys tem 
data view best captured notion call application oriented properties 
application oriented properties describe states data structure significance process ing elements manipulating structure 
things controlling order process ing helping define effects processing element data structure helping define op erations needed processing elements achieve effects 
example simplified application oriented properties follows tokens state produced result lex ically analyzing program text necessary parser processing acm sigsoft software engineering notes vol oct page state produced parser necessary gin processing correlated phrases state produced necessary opti code generator processing annotations state produced optimizer preferred code generator process ing 
notice property preferred 
example application oriented proper ties may appear obvious trivial example crucial description archi tecture guaranteeing compliance designs implementations architecture 
interesting question consider evi dently chose property scheme de architectural elements type scheme 
rea type models cur rently exist essentially able characterize el ements element types terms relationship element type subtyping terms relationships par ticular elements elements terms operations performed elements 
suited descriptions characteristics elements application oriented properties mentioned 
example simply knowing operation sociated syntax graphs connect phrase lead understanding syntax graph phrases correlated code generator access graph 
property schemes hand capture easily characteristics prop erty element set operations associated 
reasonable consider enhancing type models regard see potentially interesting area 
note type schemes ap design level mentioned section 
note application oriented properties provide vehicle drive design justify suitability set opera tions element type 
returning interdependence pro cessing data views see data tor code optimizer te ser data view sequential compiler architecture 
view concentrates particular application oriented properties importance describing data structure processing view concentrates functional properties processing element 
views complementary 
fact depict data view done com pare processing view shown correspondence fairly obvious 
important architectural considerations de example summarized follows form descriptions include relation ships constraints elements includ ing relative weightings preferences current type schemes characterizing ele ments insufficient natural interdependence pro cessing data views provide descriptions architecture 
parallel process shared structure architecture data suppose performance paramount impor tance wants optimize speed compiler possible 
possible solution adopt architecture treats processing elements independent processes driven shared internal representation connecting ele ment shared representation processing element performs eager evaluation 
depicts acm sigsoft software engineering notes vol oct page characters internal representation partial process view parallel process shared data structure com piler architecture 
simplified partial process view architecture showing relationships internal repre sentation lexer parser 
consider processing elements remainder example 
application oriented properties shared representation architecture complicated interesting previous example 
particular number process ing elements affecting state internal repre sentation doing concurrently 
implies application oriented properties provide ordination synchronization processing elements 
giving basic properties internal representation may exhibit tokens token tokens phrases phrase phrases correlated phrases correlated phrases phrases correlated notice properties imply tokens phrases consumed correlated phrases accumulated consider phrase versus correlated phrases 
parallel behavior processing el ements interrelationships various ba sic properties explicitly described 
num ber notations exist suitable making descriptions including parallel path expressions constrained expressions petri nets 
example parallel path expressions comma indicates sequence plus sign indicates repetitions asterisk indicates zero repetitions subexpressions enclosed paren theses 
synchronization points occur names application oriented properties differ ent parallel path expressions 
path expres sions data elements tokens phrases correlated phrases tokens token tokens token tokens phrases phrase phrases phrase phrases correlated phrases correlated phrases phrases correlated path expressions relating application oriented properties tokens phrases correlated token phrase phrase correlated phrase tokens consumed produce phrases phrases correlated processed 
far essentially connector view case effectively data view 
concentrating processing view allows describe processing element transforms internal representation processing elements synchronized lexer parser tokens token tokens phrases token phrase tokens token phrase tokens phrases correlated phrases phrase correlated phrase phrases phrase correlated phrase phrases phrases correlated interesting question ask architec ture relates previous 
fact ability acm sigs oft software engineering notes vol oct page relate similar architectures important aspect software process example evaluation com architectures 
certainly architectures common style captures portion relationship 
said application oriented properties 
particular draw correlation properties different architectures 
table shows cor relations 
sequential architecture tokens phrases correlated phrases parallel architecture tokens phrases correlated case correlations indicate common points processing leading instance better standing possible reusability processing elements 
important points example summa follows processing elements previous architecture different locus control properties form architecture complex previous application oriented properties proper ties require richer notation express interrelationships benefit processing data connector view interdependence albeit complexity application oriented properties useful relat ing similar architectures 
benefits derived software architecture previously mentioned software ar chitecture context requirements design 
software architecture provides framework satisfy system requirements provides technical managerial basis design implementation system 
fur ther benefits 
wish discuss detail kinds analysis software architecture specifications enable perform kinds reuse gain approach software architecture 
software architecture analysis aside providing clear precise tion primary purpose specifications provide automated analysis documents expose var ious kinds problems go unde 
primary categories analysis wish perform consistency dependency analysis 
consistency occurs dimensions con architecture architectural styles consistency architecture requirements consistency design architecture 
way inscape formally automat ically manages interdependencies interface specifications implementations want able manage interdependencies require ments architecture design 
want provide support kinds analysis consistency architectural style constraints satisfaction architectural styles architec ture consistency architectural constraints satisfaction architecture design establishment dependencies architec ture design architecture require ments determination implications changes ar chitecture architectural style design re vice versa 
architecture problems reuse important aspect improving productivity designers programmers able build efforts reusing components come part system parts standard components catalogs 
attention problem finding components reuse 
finding components may important reducing duplication effort code system primary issue attaining effective standardized compo nents 
example finding components math library issue 
primary issue standing concepts embodied library 
acm sigsoft software engineering notes vol oct page understood usually problem find ing appropriate component library 
ndt understood browsing help conjunction acquisition appropriate concepts 
primary focus architecture identification important properties relationships constraints kinds components necessary architecture design implementation system 
basis reuse architect designer implementer may able select ap architectural element design element im plemented code satisfy specified constraints appropriate level 
various parts previously imple mented software may apart select useful 
example design component system may just right architectural constraints satisfy particular architectural element implementa tion constrained conflicts sys tem constraints 
solution design implementation possible architectural design implemen tation constraints satisfy desired goals architecture design implementation 
important lesson reusing components possibilities reuse greatest specifi cations components constrained architectural level 
component reuse im plementation level usually late imple mentation elements embody constraints 
consideration reuse architectural level may lead development different equally valid solution path results greater reuse 
efforts past years directed improving software process associated large complex software systems 
come software architecture play vital role process underutilized underdeveloped 
begun address sit uation establishing intuition context software architecture architectural style 
formulated model software architecture emphasizes architectural elements data process ing connection highlights relationships properties captures constraints realization satisfaction 
begun delineate necessary features architectural description tech niques supporting infrastructure 
doing set direction research establish primacy software architecture 
begun look soft rare architecture 
relevant man shaw 
define architecture allowed set connections components 
agree aspect architecture important feel architecture simply components connections demonstrate 
uses metaphor building architec ture advantage constructing architecture information systems 
exploits notion differ ent architectural documents provide vision various documents ought building information system 
architect mediator user builders system 
various documents provide various views different parts product users view contractors views differs proposing specific architecture specific applica tion domain attempting define underpinnings discipline determine notation expressing specification various architectural documents determine doc uments automated ways 
shaw comes closest approach 
takes view programming language designer abstracts classes components methods composi tion schemas wide variety systems 
correspond somewhat notions processing data elements connecting elements architectural style respectively 
major difference shaw traditional type approach describing architecture expressive property approach 
approach appears better able directly cap ture notions weighted properties relationships 
shaw approach abstracting various properties relationships existing architectures embody ing small set component composition types appears restrictive 
seeking provide fixed set useful architectural elements mix match create architecture 
shaw approach clearly important useful promote understanding basic important architectural concepts 
approach hand emphasizes importance acm sigsoft software engineering notes vol oct page underlying properties relationships gen eral mechanism describe partic ular types elements compositions way provides latitude choice 
offer conjecture reason slow progress develop ment evolution software systems trained contractors architects 
dillon riddle constrained expressions adding anal ysis ties design methods concurrent systems ieee trans 
software engineering vol 
se feb pp 

bentley writing efficient programs addison wesley reading ma 
guided tour program design methodologies ieee computer vol 
oct pp 

boehm software engineering economics prentice hail englewood cliffs 
brooks jr 
mythical man month addison wesley re ding ma 
campbell habermann specifica tion process synchronization path expressions lecture notes computer science apr pp 

chikofsky ed software development computer aided software engineering technol ogy series ieee computer society press 
estrin fenchel ver non sara system architects apprentice ieee trans 
software engineering vol 
se feb pp 

freeman tutorial soft ware design techniques ieee computer society press 
ja composing data process descriptions design software systems lcs tech 
re port massachusetts institute technology cam bridge ma may 
ninth new collegiate die webster springfield ma 
moss md wolf principles subtyping programming languages coins tec 
report coins dept univ mass amherst ma nov 
musa software reliability measurement prediction application mcgraw hill new york ny 
perry environment proc 
eleventh inter 
conf 
soft ware engineering pittsburgh pa ieee computer society press may pp 

perry industrial strength software development environments 
ifip congress th world computer congress san francisco ca aug 
peterson petri nets acm computing sur vol 
sept pp 

riddle wileden tutorial software system design description analysis com puter society press 
rosenblatt wolf type model software development environments 
oopsla new orleans louisiana october 
sandewall software architecture communicating residential en proc 
fifth inter 
conf 
software engineering san diego ca ieee computer society press mar pp 

dis covering visualizing software struc ture 
fifth inter 
workshop soft ware specification design pittsburgh pa may appearing acm sigsoft notes vol 
may pp 

shaw larger scale systems require higher level abstractions proc 
fifth inter 
workshop software specification design pittsburgh pa may appearing acm sigsoft notes vol 
may pp 

spector ar architectures distributed database systems 
eighth acm sigact sigmod sigart symp 
princi ples database systems philadelphia pa acm press mar pp 

framework information sys tems architecture ibm systems journal vol 

