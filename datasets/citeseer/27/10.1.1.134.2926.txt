mit press journals mit edu journals article provided courtesy mit press 
join mail alert list receive latest news publications please visit mit edu mail cooperative coevolution architecture evolving subcomponents mitchell potter navy center applied research artificial intelligence naval research laboratory washington dc usa aic nrl navy mil kenneth de jong computer science department george mason university fairfax va usa cs gmu edu successfully apply evolutionary algorithms solution increasingly complex problems develop effective techniques evolving solutions form interacting subcomponents 
major difficulties finding computational extensions current evolutionary paradigms enable subcomponents emerge hand designed 
describe architecture evolving subcomponents collection cooperating species 
simple task show evolutionary pressure increase fitness ecosystem provide needed stimulus emergence appropriate number interdependent subcomponents cover multiple niches evolve appropriate level generality adapt number roles fellow subcomponents change time 
explore issues context complicated domain case study involving evolution artificial neural networks 
keywords coevolution genetic algorithms evolution strategies emergent decomposition neural networks 
basic hypothesis underlying described apply evolutionary algorithms eas effectively increasingly complex problems explicit notions modularity introduced provide reasonable opportunities solutions evolve form interacting subcomponents 
example problems behavior learning tasks encounter domain robotics complex behavior decomposed simpler 
finding solutions problems sort especially difficult natural decomposition leads interacting subcomponents highly dependent 
critical requirement evolution 
primary reasons traditional eas entirely adequate solving types problems 
population individuals evolved algorithms strong tendency converge response increasing number trials allocated observed regions solution space average fitness 
strong convergence property precludes long term preservation diverse subcomponents strongest individual ultimately eliminated 
second individuals evolved massachusetts institute technology evolutionary computation potter de jong traditional eas typically represent complete solutions evaluated isolation 
interactions population members modeled evolutionary pressure occur 
complicate matters may know priori subcomponents roles subcomponents assume 
difficulty comes finding computational extensions current evolutionary paradigms reasonable subcomponents emerge designed hand 
issue identify represent subcomponents provide environment interact credit contributions problem solving activity evolution proceeds human involvement 
organized follows 
section begins discussion important issues related evolving subcomponents describes previous approaches extending basic evolutionary model purpose 
followed section description architecture evolving subcomponents collection cooperating species 
section investigates reasonable subcomponents automatically arise systems attempting show evolutionary pressure increase fitness ecosystem provide needed stimulus emergence appropriate number interdependent subcomponents cover multiple niches evolved appropriate level generality adapt number roles fellow subcomponents change time 
section explores emergence subcomponents case study neural network evolution 
section summarizes main contributions discusses directions research 
evolving subcomponents extend basic computational model evolution provide reasonable opportunities emergence subcomponents address issues problem decomposition interdependencies subcomponents credit assignment maintenance diversity 
problem decomposition consists determining appropriate number subcomponents role play 
problems appropriate decomposition may known apriori 
consider problem optimizing function independent variables 
may reasonable decompose problem subtasks assigned optimization single variable 
problems little information pertaining number roles subcomponents ideally decomposition 
example task learn classification rules multimodal concept preclassified examples probably know rules required cover examples modality concept rule respond 
appropriate decomposition obvious extremely important ea addresses decomposition task explicit component algorithm emergent property 
second issue concerns evolution interdependent subcomponents 
problem decomposed subcomponents interdependencies clearly evolved regard 
graphically imagine subcomponent evolving achieve higher position fitness landscape disjoint fitness landscapes subcomponents 
unfortunately problems decom evolutionary computation volume number cooperative coevolution posed subcomponents exhibiting complex interdependencies 
effect changing interdependent subcomponents described deforming warping fitness landscapes associated interdependent subcomponents kauffman 
eas adaptive suited dynamics coupled landscapes 
natural selection result environment interaction subcomponents modeled 
third issue determination contribution subcomponent making solution 
called credit assignment problem traced back early attempts arthur samuel apply machine learning game checkers 
example set rules playing player game checkers evaluate fitness rule set letting play actual games alternative rule sets human opponents keeping track wins 
far obvious credit single rule rule set receive win blame rule accept loss 
fourth issue maintenance diversity ecosystem 
ea find single individual representing complete solution problem diversity needs preserved population long perform reasonable exploration search space 
typically solution ea terminates best individual discarded 
contrast evolving solution consisting subcomponents 
coevolutionary paradigm subcomponents may stronger respect contribution solution subcomponents required final solution 
previous approaches earliest extensions basic evolutionary model support subcomponents classifier system holland reitman holland 
classifier system rule system population stimulus response rules evolved genetic algorithm ga 
individual rules population form complete solution target problem 
micro economy model rules place bids privilege activation handle interactions population members enabling highly interdependent 
credit assignment accomplished algorithm called bucket brigade passes value back rules activation chain system doing 
complex dynamics micro economy model results emergent problem decomposition preservation diversity 
task specific approach evolving population rules taken giordana 
system 
learns classification rules consisting conjunctive descriptions order logic preclassified training examples 
problem decomposition handled selection operator called universal clusters individuals coverage randomly chosen subset positive examples 
complete solution formed selecting best rule cluster provides necessary interaction subcomponents 
seeding operator maintains diversity ecosystem creating appropriate individuals necessary properties cover particular element exist current population 
fitness individuals cluster function consistency respect set negative examples simplicity 
fitness evaluation procedure effectively solves evolutionary computation volume number potter de jong credit assignment problem highly specific task concept learning preclassified examples 
performance improved population islands giordana neri 
island consists population conjunctive descriptions evolve classify subset preclassified training examples 
universal operator applied island population seeding operator ensures examples assigned island covered 
migration individuals islands occurs generation 
supervisor process determines examples assigned islands occasionally island ultimately produce single conjunctive description correctly classify training examples disjunctively combined description islands 
hypothesized population wright population islands enable system maintain diversity reach higher fitness peaks possible single freely population 
multiple species models incorporating genetically isolated populations evolve subcomponents 
early includes application model hosts parasites evolution sorting networks ga hillis 
species hosts represents sorting networks species parasites represents test cases form sequences numbers sorted 
interaction species takes form complementary fitness functions 
specifically sorting network evaluated sorts test cases test cases evaluated poorly sorted 
host parasite species genetically isolated interact fitness functions full fledged species biological sense 
species model solve number game learning problems including tic tac toe nim go having species represent competing players rosin belew 
competitive species models demonstrated form interaction helps preserve genetic diversity results better final solutions compared non coevolutionary approaches 
addition credit assignment problem trivially solved complementary fitness functions 
limitation approaches narrow range applicability due requirement problem hand decomposed antagonistic subcomponents 
researchers explored cooperative species models 
approach discussed detail rest coevolution multiple cooperative species applied job shop scheduling husbands mill species cooperative model applied goldberg bit deceptive function paredis 
decomposition job shop scheduling system species evolve plans manufacturing different component 
single remaining species evolved arbitrator resolving conflicts plans required piece shop equipment time 
species system solving goldberg bit deceptive problem assigned species task evolving effective representation form mapping genes subproblems species task evolving subproblem solutions 
species symbiotic relationship second species representations species 
cooperative species models involved hand decomposition problem approach emphasized emergent problem decomposition 
evolutionary computation volume number cooperative coevolution application eas construction artificial neural networks motivated extensions basic evolutionary model support subcomponents 
example sane system moriarty moriarty miikkulainen individual population represents single neuron specifying input output units connects weights connections 
collection neurons selected population constitutes specification constructing complete neural network 
genetically isolated population network blueprints evolves records neurons 
neural evaluation phase sane performs cycles selecting neurons population blueprint connecting neurons functional network evaluating network passing resulting fitness back blueprint 
fitness neuron computed average fitness best networks participates effectively measure neuron collaborates neurons population solve target problem 
relationship blueprint population neuron population collaborative 
rewarding individuals collaborate results long term maintenance population diversity form emergent decomposition 
macroscopic approach taken de garis evolve artificial neural networks controlling simulated creatures 
evolving single large neural network control creature de garis hand decomposes problem set component behaviors control inputs 
ga evolve small specialized neural networks exhibit appropriate 
similar chaining technique pioneered skinner reinforcement learning community train robots singh lin 
clearly human loop approach 
biological model inspired evolution subcomponents vertebrate immune system forrest perelson smith forrest 
forrest introduced technique called emergent fitness sharing preserves diversity single population results emergent problem decomposition modeling interactions occur antibodies antigens 
emergent fitness sharing computes fitness generation antibodies performing iterations step process 
single antigen randomly chosen fixed collection second set antibodies randomly chosen evolving population third tournament held determine selected antibodies matches antigen closely 
winner tournament receives fitness increment quality match 
model similar ways sane relationship individuals competitive cooperative 
extending basic single population evolutionary model allow subcomponents specific construction computer programs 
koza example reported beneficial hand decomposition problems main program number subroutines 
taken emergent approach exploration techniques automatically identifying blocks useful code generalizing adapting subroutines generations rosca ballard 
evolutionary computation volume number potter de jong species ea population fitness individual domain model representatives species species ea ea population population representatives species ea population representatives individual domain model fitness species ea population representatives species population species ea ea representatives population individual fitness domain model representatives species ea population species ea population coevolutionary model species shown perspective turn 
cooperative coevolution architecture describe generalized architecture evolving interacting subcomponents 
architecture call cooperative coevolution models ecosystem consisting species 
nature species genetically isolated individuals mate members species 
mating restrictions enforced simply evolving species separate populations 
species interact shared domain model cooperative relationship 
basic coevolutionary model shown 
particular illustration shows species actual number ecosystem may 
evolutionary computation volume number cooperative coevolution species evolved population adapts environment repeated application ea 
principle ea appropriate task hand experience constructing coevolutionary versions genetic algorithms evolution strategies 
shows fitness evaluation phase ea perspective species 
implementations model utilized sequential pattern evaluation complete population species evaluated turn species evaluated parallel 
evaluate individuals species collaborations formed representatives species 
possible methods choosing representatives collaborate 
cases appropriate simply current best individual species representative 
cases greedy alternative strategies preferable 
example sample individuals species chosen randomly ecological approach representatives chosen non deterministically fitness 
alternatively topology introduced individuals share neighborhood allowed collaborate 
examples simple examples may help illustrate architecture 
uses cooperative coevolution maximize function independent variables potter de jong 
problem hand decomposed species assigned independent variables 
species consisted population alternative values assigned variable 
evaluate individual species selected current best individual species combined individual evaluated vector variable values 
vector applied target function 
individual rewarded maximized function context variable values selected species 
second example cooperative coevolution develop rule control system simulated autonomous robot potter 
species consisting population rule sets class behaviors 
wanted species evolve behaviors appropriate beating hand coded robot food pellets randomly placed environment evolve behaviors appropriate time spent waiting food appear 
species seeded initial knowledge assigned area expertise encourage evolution proceed desired trajectory 
evaluate individual species selected current best rule set species merged rule set evaluated resulting superset control robot 
individual rewarded rule set complemented rule set selected species 
problem decomposition previous examples known species required task hand role play 
took advantage knowledge produce human engineered decompositions problems 
situations quite possible may little prior knowledge help determination 
ideally number species ecosystem roles species assume evolutionary computation volume number potter de jong emergent property cooperative coevolution 
possible algorithm achieving premise evolution may species ecosystem construct solution 
stagnation detected new species added ecosystem 
initialize species randomly evaluate individuals fitness ecosystem 
bias new individuals initial evolutionary cycles species spent searching appropriate niche useful contribution role new species emergent 
species finds niche contribution tend exploit area 
better adapted species species evolve individuals perform function receive reward doing 
conversely species unproductive determined contribution individuals collaborations participate species destroyed 
stagnation detected monitoring quality collaborations application inequality fitness best collaboration time constant specifying fitness gain considered significant improvement constant specifying length evolutionary window significant improvement 
characteristics architecture evolving genetically isolated species separate populations simple solution problem maintaining sufficient diversity support subcomponents 
evolutionary pressure species population converge finds useful niche pressure exists various species converge niche 
rewarding individuals collaborate representatives species provides evolutionary pressure unique contribution problem solving effort 
ensures ecosystem consist diverse collection species 
evolving species separate populations eliminates destructive cross species mating 
individuals highly specialized mixing genetic material cross species mating usually produce non viable offspring 
demonstrated nature genetic distance species highly correlated mating discrimination likelihood mating occur offspring survive sterile smith 
course existence separate breeding populations preclude interaction species 
architecture handles interdependencies subcomponents evolving species parallel evaluating context 
requires individuals different species merged shared domain model form composite solution target problem 
credit assignment occurs levels abstraction 
evaluating individuals species representatives species remain fixed 
fitness differential making reproduction decisions strictly function individual relative contribution problem solving effort context species 
fitness assigned individual evaluated shared evolutionary computation volume number cooperative coevolution representatives species 
greatly simplifies credit assignment problem need determine species contributed 
hand need occasionally estimate level contribution species determine allowed survive 
accomplished computing fitness differential solution participation species question 
species evolved ea 
communication species limited occasional broadcast representatives global control required create new species eliminate unproductive ones 
parallel implementations species assigned separate processors trivial 
heterogeneous representations supported 
increasingly important apply evolutionary computation larger problems 
example developing control system autonomous robot components may best implemented artificial neural networks collections symbolic rules parameter vectors 
cooperative coevolution architecture enables components represented appropriately evolved suitable class ea 
analysis decomposition capability empirical analysis explore algorithm outlined section capable producing problem decompositions purely result evolutionary pressure increase fitness ecosystem 
describe studies designed answer questions concerning ability algorithm decompose problems species locate cover multiple environmental niches 
species evolve appropriate level generality 
adaptation occur number role species change 
appropriate number species emerge 
course inductive argument 
positive answers questions may guarantee problem decompositions emerge certainly expect positive answers capability fact exist 
coevolving string covers studies binary string covering target problem part task provides relatively simple environment emergent decomposition properties cooperative coevolution explored related studies forrest 
problem consists finding set binary vectors match strongly possible set binary vectors typically larger call sets match set target set respectively 
larger match set contain patterns shared multiple target strings cover target set optimally match set generalize 
match strength binary vectors length determined simply summing evolutionary computation volume number potter de jong number bits position value follows lx xi yi compute strength match set apply target set average maximum computed match strengths respect target set element follows kx max ti mn ti elements match set target set respectively 
string covering problem easily mapped model cooperative coevolution 
recall evaluate individual species collaborate representatives species ecosystem 
individuals represent match strings species contribute string match set 
representatives chosen current best string species 
words match set size consist string evaluated species current best string species 
initial generations species may participate collaborations population evaluated 
case random representative chosen 
fitness match set computed equation assigned string evaluated 
problem decomposition context consists determining size match set coverage match set element respect target strings 
studies size match set predetermined 
species randomly initialized coverage emergent property system studies 
particular ea studies ga cases initialize population species randomly population size point crossover rate bit flipping mutation rate set reciprocal chromosome length proportionate selection scaled fitness 
experimental results locating covering multiple environmental niches fundamental questions concerning emergent problem decomposition method locate cover multiple environmental niches 
string covering niches interested schemata common target strings 
schemata referring string templates consisting fixed binary part variable part designated symbol 
previous study forrest 
experiment performed demonstrating ability traditional single population ga detect common schemata large collection target strings 
compute match strength strings linear function similar equation 
schema detection experiment duplicated cooperative coevolution substituted traditional single population ga experiment consists evolving match sets separate target sets consisting bit strings 
strings target set generated equal proportion half length schemata evolutionary computation volume number cooperative coevolution variable half strings consist random patterns ones zeros 
similarly strings second target set generated equal proportion quarter length schemata strings third target set generated equal proportion eighth length schemata niches target set generated eighth length schemata significantly harder find generated half length quarter length schemata fixed regions define eighth length niches smaller respect variable region strings 
know niches exist interested locate cover simply evolve equal number species niches 
example know target set generated schemata contain niches evolve species cover niches 
similarly species evolved cover second target set species evolved cover third target set 
average bits matched half length quarter length eighth length generations finding half length quarter length eighth length schemata 
average number bits matched target string match set consisting best individual species shown 
curve evolutionary computation volume number potter de jong computed average runs generations indicated target set 
overlaid curves increments generations percent confidence intervals 
horizontal lines graph represent expected match values produced best possible single string generalist 
half length quarter length length schemata shown generalist consist entirely ones average match scores target sets respectively 
forrest study demonstrated traditional single population ga consistently evolves best possible single string generalist 
study shows multiple species collaborate able cover target set better single individual evolved traditional ga furthermore species employed eighth length schema experiment amount improvement traditional ga increases 
half length species species quarter length species species species species eighth length species species species species species species species species final species representatives schemata experiments 
reason improvement seen 
shows best individual species final generation runs half length quarter length eighth length schemata experiments 
substrings perfectly matching fixed regions schemata highlighted 
couple observations 
clearly species focuses niches relies species cover remaining ones 
enables species cover respective target strings better generalize entire target set 
stated way species locates niches useful contribution collaborations formed 
strong evidence species cooperative relationship 
second species may occasionally occupy common niche 
see example fourth fifth species eighth length schemata experiment 
model cooperative coevolution exclude possibility species unique contribution considered viable 
third species example third species eighth length schemata experiment obvious contribution 
may species pattern repeatedly occurs random region evolutionary computation volume number cooperative coevolution target strings contribution simply readily visible 
possibility particular species genuinely making useful contribution eliminated 
evolving appropriate level generality determine species evolve appropriate level generality generate target set bit test patterns vary number species 
patterns species species able specialize pattern 
fewer species patterns generalize cover patterns best possible 
previous study study inspired experiments done emergent fitness sharing forrest 

test patterns shortened complements ones forrest follows optimal single string cover patterns string produces average match score 
optimal string cover patterns string consisting ones string bit middle segment zeros 
cover composed strings produce average match score 
example strings scored follows 
makeup extreme left right bit segments second string unimportant 
optimal string cover patterns obviously patterns 
build section hid bit test patterns embedding schemata length target set composed strings generated equal proportion schemata 
sets runs performed 
set evolved cover target set single species equivalent traditional single population ga remaining sets runs include evolving species respectively 
plots show number target bits matched best individual species 
generated run set average runs instability occurs early generations masked 
verified runs set produced similar results 
evolutionary computation volume number potter de jong target bits matched target bits matched target target target species generations target target target species generations target bits matched target bits matched target target target species generations target target target species generations covering hidden niches species 
shows just number bits matching bit target patterns fitness individuals bits target string matched 
single species plot see initial period instability species stabilizes appropriate level generality 
specifically bits pattern matched bits second third patterns matched 
result consistent optimal single string generalist described previously 
increase number species pattern matched perfectly patterns matched level bits respectively consistent optimal string generalization 
species evolved patterns matched perfectly indicating species specialized different test pattern 
species plot see number species increased number niches perfect matches achieved fitness evaluations required achieve level performance 
shows best individual species final generation 
removing bits corresponding variable regions target strings patterns remain optimal element covers described earlier conclusive evidence species evolved appropriate levels generality 
see third fourth species focused bit target pattern 
bits individuals corresponding variable regions target strings quite different 
occurring species adapting different repeating patterns variable regions target evolutionary computation volume number species experiment species noise removed species experiment species experiment species species noise removed species species species noise removed species experiment species species species species noise removed cooperative coevolution final representatives species experiments removal bits corresponding variable target regions 
strings 
enabled ecosystem species achieve slightly higher match score full bit target strings ecosystem species 
determine difference significant additional runs performed species ecosystems bring total runs apiece 
arithmetic means sets runs respectively test verified difference occurred chance 
adaptation number role species change know species required dynamically create evolution progresses existing species able adapt new species 
forces driving adaptation freedom older species specialized new species making useful contributions 
specializing manner similar notion character displacement occurs evolutionary computation volume number potter de jong target bits matched target target target generations shifting specialists new species added ecosystem fixed schedule 
natural ecosystems brown wilson 
example study gal lack determined islands occupied average depth beak approximately mm average depth beak approximately mm 
islands daphne occupied occupied average beak depth species approximately mm 
interpretation observation finch species compete food ecosystem evolve specialized larger smaller variety seeds 
species occupies ecosystem species evolves general purpose beak suitable consuming wider variety seeds 
determine species model cooperative coevolution mimic process specialized new species introduced ecosystem experiment single species add second species generation add third species generation 
element target set generated schemata section 
number target bits fixed region schemata matched best individual species shown 
performance bit fixed region shown fitness individuals entire bits string covered 
dashed vertical line marks creation new species 
period instability just species introduced evidence quick role changes species decide niche occupy 
roles species stabilize evolve generations 
clear second species introduced species specializes strings containing target pattern species generalizes strings containing target patterns 
similarly third species introduced species able specialists 
furthermore comparing plots see adaptation results levels generalization specialization achieved species evolved 
evolving appropriate number species important evolve species requires computational resources support increasing number fitness evaluations need performed evolutionary computation volume number cooperative coevolution need applying operators crossover mutation individuals conversion genotypic higher level representations may required 
hand evolve species forced general resulting mediocre covers saw previous studies 
algorithm evolving appropriate number species introduced section 
test effectiveness algorithm target set previous studies evolving single species 
ecosystem generation check evolutionary stagnation making sufficient improvement add new randomly initialized species destroy making significant contribution 
precisely constitutes stagnation application dependent determined experimentation current best fitness computed equation improve generations significant improvement addition new species 
regarding species destruction consider species contributes fitness collaboration representative matches target strings better member collaboration ties won older species 
refer amount contribution species considered viable extinction threshold 
set extinction threshold eliminate species gain advantage matching spurious shared patterns random regions target strings 
interested significant patterns set extinction threshold smaller value just slightly zero species matching patterns preserved 
fitness collaboration fitness species contribution generations changing contributions species dynamically created eliminated ecosystem 
fitness best collaboration amount fitness contributed species ecosystem generations plotted 
vertical dashed lines represent stagnation events unproductive species eliminated new species created 
generations ecosystem consists species contribution period equal collaboration fitness 
generation stagnation detected second species added ecosystem 
contribution species drops contribution new species causes collaboration fitness increase 
generation evolution species add third species ecosystem generation mean species evolved generation 
evolutionary computation volume number potter de jong focuses strings matched species causing contribution species drop 
third species contributes fitness collaboration jumps 
generation evolution species ecosystem collaboration fitness species contributing respectively 
know previous studies optimal number species particular problem system possess knowledge creates new species 
species able contribute fitness collaboration extinction threshold eliminated generation 
point species created making contribution generation 
new species contributes eliminated generation new species created 
point run new species non zero contribution eliminated turn stagnation detected 
observation experiment appropriate number species emerges 
specifically ecosystem stabilizes state species making significant contributions fourth exploratory species providing insurance contingency significant change environment 
simple string covering application stationary objective function insurance really necessary case real world problems 
second observation fourth fifth species eventually eliminated able small contributions matching patterns random regions targets generalizing large number 
interested maintaining specialists ecosystem lower extinction threshold survive 
case study emergent problem decomposition moving simple studies previous section describe complex case study cooperative coevolution applied construction artificial neural network 
task construct multilayered feed forward artificial neural network input pattern produce desired output signal 
basic topology network know number neural units required adequately produce desired output role unit play determination constitutes decomposition task 
primary focus case study directly compare contrast decompositions produced cooperative coevolution produced non evolutionary approach specific construction artificial neural networks 
evolving cascade networks topology evolved case study cascade network 
cascade networks input units direct connections hidden units output units hidden units ordered hidden unit sends output downstream hidden units output units 
cascade networks originally conjunction learning architecture fahlman lebiere :10.1.1.125.6421
cascade network evolution easily mapped cooperative coevolution architecture assigning species evolve weights connections leading output units assigning species evolve connection weights evolutionary computation volume number inputs hiddens units species species species cooperative coevolution output mapping cascade network species 
hidden units 
example species network mapping cascade network having inputs bias signal hidden units output shown 
small black gray white boxes represents connection weight evolved 
add new hidden unit network simply create new species unit add new randomly initialized weight individuals species assigned output unit 
fitness individual determined combining current best individual species produce connection weight specification entire network 
sum squared error computed preclassified training patterns fed forward network 
individuals producing networks lower sum squared errors considered highly fit 
network shown constructed incrementally follows 
evolution network begins species ecosystem individuals represent alternatives output connection weights denoted black boxes 
network evolution hidden unit added second species created represent new unit input connection weights 
addition new connection weight added individual species 
new weights denoted gray boxes 
species creation event triggered evolutionary stagnation described earlier 
evolution second hidden unit added third species created represent unit connection weights individuals species lengthened 
connection weights denoted white boxes 
cycle continues network created produces sufficiently low sum squared error 
scheme cascade network hidden units constructed species 
alternatively started liberal estimation number hidden units required destruction species pare network done network topologies easily mapped cooperative coevolution architecture 
evolutionary computation volume number potter de jong appropriate size option explored 
due complexity neural network search space adding new species helpful temporarily focus computational resources enabling find niche contribution 
accomplished simply evolving just new species species representing weights connections output unit progress approaches asymptote 
point eliminate new species making significant contribution create replace continue evolution species ecosystem 
ea case study evolution strategy es described schwefel 
previously applied ga task potter de jong achieved better results es 
individual consists real valued vectors vector connection weights vector standard deviations mutation operator 
require standard deviations greater adapted follows te gauss denotes time expressed discretely generations 
rate convergence es sensitive choices initial setting standard deviation vectors 
follow schwefel recommendation set equation depends es 
schwefel recommends initializing equation rk pj constant rk maximum uncertainty range corresponding variable 
randomly initialized connection weights limited range rk correspondingly set 
mutation evolutionary operator 
cascade correlation approach decomposition context cascade network problem decomposition consists determining number hidden units roles 
comparing contrasting decompositions produced cooperative coevolution produced second order gradient descent technique constructing cascade networks called cascade correlation learning architecture fahlman lebiere :10.1.1.125.6421
prior development cascade correlation learning architecture feed forward networks constructed rules thumb determine number hidden layers units connectivity 
roles hidden units allowed emerge application backpropagation algorithm order gradient descent technique rumelhart 
source inefficiency process considerable time takes emergence roles stabilize fahlman lebiere :10.1.1.125.6421
evolutionary computation volume number cooperative coevolution cascade correlation specifically designed eliminate inefficiency constructing network hidden unit time freezing roles hidden units established 
simply allowing roles emerge hidden unit trained respond positively negatively largest portion remaining error signal gradient descent adjust input connection weights gradient respect magnitude correlation output hidden unit sum squared error training patterns fed forward network 
training hidden unit fire problematic patterns training set network forcing hidden unit focus specific region input space 
input connection weights hidden unit trained frozen output connection weights trained descending sum squared network error gradient 
addition new hidden unit triggered reduction sum squared network error approaches asymptote 
cycle adding new hidden unit training freezing input connection weights training output connection weights continues sufficiently low sum squared error produced 
spirals problem construct cascade networks solve spirals problem originally proposed mailing list wieland 
problem classification task consists deciding interlocking spiral shaped regions coordinate lies 
interlocking spiral shapes chosen problem linearly separable 
finding neural network solution spirals problem proven difficult traditional gradient descent learning method backpropagation number studies test new learning methods lang witbrock fahlman lebiere whitley potter :10.1.1.125.6421
training set spirals problem 
learn solve task training set consisting preclassified accurately small number candidate units created trained parallel sake clarity ignore detail description 
evolutionary computation volume number potter de jong coordinates shown 
half coordinates located spiral shaped region marked black circles half spiral shaped region marked white circles 
coordinates black circles generated equations sin cos 
coordinates white circles generated simply negating coordinates black circles 
performing correct classification neural network takes inputs corresponding coordinate produces positive signal point falls black spiral negative signal point falls white spiral 
experimental results runs performed cascade correlation runs performed cooperative coevolution 
runs terminated training patterns classified correctly subjectively determined learning stuck local optimum 
cascade correlation generated networks capable correctly classifying training patterns runs cooperative coevolution successful runs 
address unsuccessful runs section 
table required number hidden units 
method hidden units mean max min cascade correlation cooperative coevolution table shows average number hidden units produced method percent confidence intervals mean maximum minimum number hidden nodes generated 
cascade correlation networks required average hidden units consistent results reported fahlman lebiere 
contrast successful runs cooperative coevolution networks required average hidden units perform task 
represents statistically significant difference number hidden units required solve problem 
value produced test means 
characterization roles played hidden units produced methods describing reduction misclassification sum squared error attributable unit 
table generated starting final networks produced runs methods eliminating hidden unit time measuring number training set misclassifications sum squared error 
evolutionary computation volume number table effect adding hidden units training set classification 
hidden units misclassifications sum squared error cooperative coevolution run chosen comparison arbitrarily appears provide reasonably fair comparison 
find sequences methods quite similar 
similarity misclassification sum squared error sequences monotonically decrease methods created hidden units looked isolation matters worse 
units presumably play complex roles working conjunction hidden units 
similarity misclassification sequences methods erratic sum squared error sequences surprise method misclassification information training 
major difference methods cooperative coevolution sequences tend bigger steps higher variance contain fewer elements 
fahlman lebiere gain insight roles played hidden units studying series field response diagrams generated networks summarized table 
field response diagrams shown produced cascade correlation network shown produced network evolved cooperative coevolution 
diagrams generated feeding elements grid coordinates forward network measuring output signal produced individual hidden units entire network 
positive signals displayed black pixels negative signals displayed white pixels 
example top right pair field response diagrams generated cascade correlation network hidden units eliminated 
left diagram particular pair shows output second hidden unit right diagram pair shows corresponding output network 
evolutionary computation volume number potter de jong hidden units network output st hidden unit output network output rd hidden unit output network output th hidden unit output network output th hidden unit output network output th hidden unit output nd hidden unit output network output th hidden unit output network output th hidden unit output network output th hidden unit output network output th hidden unit output network output th hidden unit output network output th hidden unit output network output network output th hidden unit output network output th hidden unit output th hidden unit output network output network output field response diagrams generated neural network constructed cascade correlation showing incremental effect adding hidden units network 
number observations comparison sets figures 
cascade correlation decompositions produced cooperative coevolution clearly exploit symmetry inherent spirals problem 
second similarity early hidden units focus recognition center region field 
shows methods exploiting greater central concentration training set elements see 
third similarity hidden units added network response patterns tend increasingly complex evolutionary computation volume number hidden units network output st hidden unit output network output cooperative coevolution nd hidden unit output network output rd hidden unit output network output th hidden unit output network output th hidden unit output network output th hidden unit output network output th hidden unit output network output th hidden unit output network output th hidden unit output network output th hidden unit output network output th hidden unit output network output th hidden unit output network output field response diagrams generated neural network constructed cooperative coevolution showing incremental effect adding hidden units network 
true cooperative coevolution cascade correlation 
increase complexity may simply result network topology hidden units inputs early hidden units shown 
couple noticeable differences sets figures 
cascade correlation field response diagrams tend consist angular shaped regions shapes diagrams produced network evolved cooperative coevolution rounded 
addition cascade correlation diagrams visually complex ones cooperative coevolution 
hypothesize differences decompositions highlighted field response diagrams due nature cascade correlation decomposition technique 
recall uses correlation output hidden unit network error signal train weights connections leading unit 
enables hidden evolutionary computation volume number potter de jong unit respond precisely training patterns responsible error signal ignoring training patterns 
manifested field response diagrams complex angular regions 
particular instantiation cooperative coevolution architecture task specific statistical information focusing tool tends paint broader brush strokes 
painting broad brush strokes may advantageous respect ability generalize disadvantage 
unsuccessful runs training patterns correctly classified species created unable find niche contribute 
investigation unsuccessful runs revealed sum squared error generated remaining misclassifications masked residual sum squared error generated training patterns 
variation individuals produced selective advantage evolutionary progress occurred 
probably addressed utilizing correlation statistic fitness function species representing hidden units 
summary approach letting decompositions emerge purely result evolutionary pressure increase fitness ecosystem works simple domains potential producing decompositions domains complex described 
domains increasingly complex may need fitness functions specialized ability steer species niches useful contributions 
believe apply evolutionary algorithms solution increasingly complex problems explicit notions modularity introduced provide reasonable opportunities solutions evolve form interacting subcomponents 
difficulty comes finding computational extensions current evolutionary paradigms subcomponents emerge hand designed 
described architecture evolving subcomponents collection cooperating species 
showed evolutionary pressure increase fitness ecosystem provide needed stimulus emergence appropriate number interdependent subcomponents cover multiple niches evolve appropriate level generality adapt number roles fellow subcomponents change time 
explored emergence subcomponents detail case study involving neural network evolution suggested domains increasingly complex evolution species may need driven fitness ecosystem produce decompositions 
results quite positive number ways 
architecture demonstrated ability evolve useful decompositions expressed computationally emergence cooperating species 
second cooperative coevolutionary architecture shown general extension standard ec paradigms tightly coupled specific approach gas 
architecture allowing scale complex problems possible standard eas 
example currently approach evolve complex behaviors robots multi agent environments 
regard architecture suitable coevolving various modalities behavior single robot coevolving behavior group cooperating robots 
evolutionary computation volume number cooperative coevolution time number improvements current system exploring 
mechanism evaluating collaborative potential coevolving components deliberately kept simple possible 
ways evaluations effective 
similarly mechanism creation destruction species currently quite simplistic provides opportunities significant improvements 
current coevolutionary architecture implemented serially parallel implementations quite natural 
particular interest scale complex domains implementations architecture species assigned separate processors asynchronously 
acknowledgments supported office naval research 
brown jr wilson 

character displacement 
systematic zoology 
de garis 

building artificial nervous systems genetically programmed neural network modules 
porter mooney editors proceedings seventh international conference machine learning pages morgan kaufmann palo alto california 
fahlman lebiere 

cascade correlation learning architecture 
technical report cmu cs school computer science carnegie mellon university pittsburgh pennsylvania 
forrest perelson 

genetic algorithms immune system 
schwefel 
nner editors parallel problem solving nature pages springer verlag berlin germany 
forrest smith perelson 

genetic algorithms explore pattern recognition immune system 
evolutionary computation 
giordana neri 

search intensive concept induction 
evolutionary computation 
giordana saitta 

learning disjunctive concepts means genetic algorithms 
cohen hirsh editors proceedings eleventh international conference machine learning pages morgan kaufmann san francisco california 
hillis 

evolving parasites improve simulated evolution optimization procedure 
langton taylor farmer rasmussen editors artificial life ii sfi studies sciences complexity volume pages 
addison wesley redwood city california 
holland 

escaping brittleness possibilities general purpose learning algorithms applied parallel rule systems 
michalski carbonell mitchell editors machine learning volume pages 
morgan kaufman los altos california 
holland reitman 

cognitive systems adaptive algorithms 
waterman hayes roth editors pattern directed inference systems 
academic press new york new york 
husbands mill 

simulated evolution mechanism emergent planning scheduling 
belew booker editors proceedings fourth international conference genetic algorithms pages morgan kaufmann san mateo california 
evolutionary computation volume number potter de jong das whitley 

genetic cascade learning neural networks 
whitley schaffer editors international workshop combinations genetic algorithms neural networks pages ieee computer society press piscataway new jersey 
kauffman 

evolution edge chaos coupled fitness landscapes poised states evolutionary 
langton taylor farmer rasmussen editors artificial life ii sfi studies sciences complexity volume pages 
addison wesley redwood city california 
koza 

hierarchical automatic function definition genetic programming 
whitley editor foundations genetic algorithms pages 
morgan kaufmann san mateo california 
lack 

darwin 
cambridge university press cambridge england 
lang witbrock 

learning tell spirals apart 
touretzky hinton sejnowski editors proceedings connectionist models summer school pages morgan kaufmann san mateo california 
lin 

hierarchical learning robot skills reinforcement 
proceedings international joint conference neural networks pages ieee computer society press piscataway new jersey 
moriarty 

symbiotic evolution neural networks sequential decision tasks 
ph 
thesis department computer science university texas austin texas 
moriarty miikkulainen 

forming neural networks efficient adaptive coevolution 
evolutionary computation 
paredis 

symbiotic evolution solutions representations 
eshelman editor proceedings sixth international conference genetic algorithms pages morgan kaufmann san francisco california 
potter 

genetic cascade correlation learning algorithm 
whitley schaffer editors international workshop combinations genetic algorithms neural networks pages ieee computer society press piscataway new jersey 
potter de jong 

cooperative coevolutionary approach function optimization 
davidor schwefel editors proceedings third conference parallel problem solving nature pages springer verlag berlin germany 
potter de jong 

evolving neural networks collaborative species 
ren editors proceedings summer computer simulation conference pages society computer simulation san diego california 
potter de jong grefenstette 

coevolutionary approach learning sequential decision rules 
eshelman editor proceedings sixth international conference genetic algorithms pages morgan kaufmann san francisco california 
rosca ballard 

hierarchical self organization genetic programming 
cohen hirsh editors proceedings eleventh international conference machine learning pages morgan kaufmann san francisco california 
rosca ballard 

discovery subroutines genetic programming 
angeline kinnear editors advances genetic programming chapter 
mit press cambridge massachusetts 
rosin belew 

methods competitive evolution finding opponents worth beating 
eshelman editor proceedings sixth international conference genetic algorithms pages morgan kaufmann san francisco california 
evolutionary computation volume number cooperative coevolution rumelhart hinton williams 

learning internal representations error propagation 
rumelhart mcclelland editors parallel distributed processing explorations cognition volume pages 
mit press cambridge massachusetts 
samuel 

studies machine learning game checkers 
ibm journal research development 
schwefel 

evolution optimum seeking 
john wiley sons new york new york 
singh 

transfer learning composing solutions elemental sequential tasks 
machine learning 
skinner 

behavior organisms experimental analysis 
appleton century new york new york 
smith 

evolutionary genetics 
oxford university press new york new york 
smith forrest perelson 

searching diverse cooperative populations genetic algorithms 
evolutionary computation 


comparison artificial neural networks traditional classifiers spiral problem 
editor proceedings third workshop neural networks academic industrial nasa defense pages society computer simulation san diego california 
whitley 

generalization feed forward neural networks 
proceedings international joint conference neural networks seattle volume pages ieee piscataway new jersey 
wright 

roles mutation selection evolution 
jones editor proceedings sixth international conference genetics pages brooklyn garden brooklyn new york 
evolutionary computation volume number 
