directed steiner network problem tractable constant number terminals jon feldman matthias ruhl mit laboratory computer science cambridge ma usa consider directed steiner network problem called point point connection problem directed graph pairs sp tp nodes graph find smallest subgraph contains paths si ti problem np hard general directed steiner tree problem special case 
complexity unknown constant 
prove problem polynomially solvable constant number nodes edges weighted goal minimize total weight subgraph addition give efficient algorithm strongly connected steiner subgraph problem constant directed graph nodes graph compute smallest strongly connected subgraph containing nodes 

address general steiner problems directed steiner network problem called point point connection problem 
directed steiner network dsn directed graph pairs nodes graph sp tp find smallest subgraph contains paths si ti smallest defined variations problem 
smallest mean minimum number nodes 
possibilities minimum number edges smallest cost mail theory lcs mit edu mail ruhl theory lcs mit edu graph node edge costs 
extend results variations 
dsn problem occurs naturally designing networks delivering goods sources destinations underlying network services paid 
example graph set internet routers edges connections routers 
suppose bank needs send secure data network sources si destinations ti 
transmit data securely routers transmissions upgraded expensive 
bank naturally wants minimize number routers upgrade 
just original steiner tree problem dsn np complete number pairs part input 
constant hand complexity unknown far 
case just shortest path query problem solved li mccormick levi 
state case open problem 
contribution give polynomial time algorithm constant resolve open problem 
precisely running time mn logn algorithm dsn best understood terms game player moves tokens graph 
initially tokens placed starting nodes sp token node 
player allowed certain types moves tokens goal perform series moves get tokens respective destinations tp token token 
possible move cost associated number nodes visited moving tokens 
define moves carefully lowest cost move sequence get tokens sp tp visit exactly nodes optimal subgraph difficulty construction ensure sequence exists optimal easy involved paths share vertices restricted manner 
relationships paths significantly complex 
critical argument structural lemma analyzing paths may overlap 
find difficulty dsn contained special case ti si tp 
hard see optimal solution special case strongly connected subgraph 
problem equivalent strongly connected steiner subgraph problem defined follows 

sample graph strongly connected steiner subgraph scss directed graph vertices sp find smallest strongly connected subgraph contains sp 
give algorithm scss runs time mn logn constant token game similar mentioned 
related related steiner problems studied undirected graphs 
monograph subject see 
previously known polynomial time algorithm dsn constant trivial case li mccormick levi 
running time algorithm natu fang improved running time mn logn algorithm conjecture variant algorithm works constant appendix provide believe counterexample correctness algorithm conjecture 
strong evidence dsn tractable algorithm running time nk constant independent parameter follows results proved defined downey fellows shown directed steiner tree hard 
dsn problem harder paths si ti required edge disjoint node disjoint 
restriction problem npcomplete 
precisely nphard determine feasible solution exists 
centered approximability dsn general best positive result obtained far charikar achieve approximation ratio log give approximation algorithm scss general achieves approximation ratio runs time nip negative side dodis khanna prove dsn log hard 
overview section give simple algorithm solves scss defining token game detail 
generalize approach constant state algorithm solving scss section 
correctness proof sections 
algorithm scss section give algorithm dsn problem prove correctness 
conclude summarizing results discussing possible research directions section 
solution scss solving scss problem finding minimum strongly connected subgraph graph includes specified nodes 
equivalent finding smallest contains paths 
considering simple problem allows introduce notation methodology sections 
algorithm described similar natu fang 
illustrates difficulties problem 
terminals 
optimal subgraph consists nodes 
paths share vertex share vertex sequence 
note optimal subgraph includes shortest path shortest path 

token game compute optimal subgraph place tokens called vertex 
move tokens edges moving forward edges moving backwards edges reach 
set nodes visited sequence moves contain paths 
find smallest subgraph containing paths charge moves 
cost move number new vertices entered tokens move 
lowest cost move sequence get tokens corresponds optimal solution 
kinds moves allow 

notation refers situation token vertex token vertex expression 

means legal move token token time move cost want find move sequence 

minimal cost 
token moving forward edge allow 

move move 
ii token moving backward edge allow move 



move iii tokens switching places pair vertices path allow 
move 
length shortest path length mean number vertices path 
type ii moves allow tokens move forward single edge backward edge respectively 
usually cost accounting new vertex token visits 
case token reaches vertex token cost new vertices visited 
type iii moves allow tokens switch places 
call type move flip say vertices shortest path implicitly traversed tokens 
cost move accounts vertices 
return example see moves 
lowest cost way move tokens subscripts denote type move 

ii 

iii 
ii 
ii 


weight sequence 
difference due fact pay entering 

algorithm phrase preceeding discussion algorithmic form 
compute construct game graph nodes graph correspond token positions 
edges legal moves positions 
case nodes just edges ones legal moves 
clearly game graph computed polynomial time 
finding done computing lowest cost path 

graph consists vertices mentioned path including vertices implied type iii moves 

correctness proof algorithm solves scss split claims 
just provide essential ideas proof refer reader section general case alternative proof case 
claim legal move sequence 

cost subgraph size contains paths 
easy see 
follow move sequence 

trace paths 
tokens traverse vertices pay vertex visit 
claim optimal subgraph containing paths 
exists move sequence 

total cost 
difficult part correctness proof 
prove constructing move sequence 

visits vertex 
key idea fix paths wlog share vertices restricted manner 
may share disjoint sequences vertices sequences occur reverse order paths see 
segments occur order merged making paths segments 
construct move sequence move tokens type ii moves reach shared segment paths 
token reach vertex 

paths sharing sequences vertices 
straight horizontal line gives path round segments part 
bold lines sequences shared paths 
occur opposite order paths 
token moving backwards reach vertex apply type iii move exchange tokens count vertices shared segment 
continue type ii moves hit shared segment tokens reach 
token movements involved paths share vertices complex ways 

strongly connected steiner subgraphs section give algorithm scss generalization algorithm scss previous section 
token movements trace solution way tokens move motivated observation 
consider strongly connected containing sp contain paths sp sp paths chosen form tree rooted sp call tree forward tree 
graph contain paths sp sp forming call backward tree 
union trees feasible solution scss instance 
note scss trees just single paths 
ease notation set remainder section section sp sp plays special role root trees 

token moves scss trace trees tokens moving forward edges forward tree sq tokens moving backward edges sq set legal moves look lowest cost move sequence moves tokens correspond 
flipping tokens need picked black nodes set smallest subgraph containing paths si si graph looking 
sets tokens trace tree tokens kind reach vertex travel way root 
case simply merge token 
describe positions tokens pair sets 
sets nodes currently occupied tokens 
types legal token moves 
type moves correspond tokens moving forward edge type ii moves correspond tokens moving backward edge 
charge entering vertex token 
set set subsets size 
single moves tokens edge 
token sets legal move 
vb 
cost move 
ii single moves tokens edge 
token sets vd legal move cost move 
type iii moves allow tokens pass similar type iii moves previous section time flip complex see 
outer tokens trying pass 
tokens moving forward trying pass tokens moving backward trying pass tokens sitting node sets fe picked flip 
iii flipping pair vertices vertex sets path vertices fe legal token move going kj fe bb set vertices shortest path going vertices fe vertices fe 
algorithm scss state algorithm scss 
construct game graph set possible positions token sets legal token moves defined 

find shortest path sq sq 

union sq nodes including sets type iii moves 
difficult part constructing game graph computing costs type iii moves flip require shortest path going vertices simple 
number tokens fe bounded constant compute path polynomial time simply trying possible sequences nodes fe computing shortest paths sequence 
details running time see appendix 
example example look algorithm works graph terminals 
optimal solution node set sequence lowest cost moves graph ii ii ii iii iii total cost moves equal expected 
solution terminals nodes mentioned sequence moves nodes set type iii move 

correctness scss algorithm correctness proof scss algorithm split parts scss 
lemma suppose move sequence sq total cost exists solution scss instance size move sequence easy construct proof follows directly definition moves 
cost move sequence upper bound number vertices traversed sequence 
constructive nature moves easy find involved lemma correctness algorithm proved 
lemma suppose minimum cardinality feasible solution 
move sequence sq weight equal proof prove lemma effectively construct move sequence intermediate positions tokens moving tokens sq pay time reach new vertex 
order achieve total cost sure pay vertex 
ensure enforce rule token moves vertex token move vertex 
say vertex dead token moves tokens allowed move vertices alive 
sure move sequence finite token return vertex visited 
note notion dead alive vertices analysis algorithm explicitly keeps track 
construct move sequence greedy fashion 
move tokens type ii moves token sits vertex needed token get case apply type ii moves doing leave token stranded allowed move dead vertex 
case need type iii move resolve deadlock 
showing possible core correctness proof flip lemma shown section 
state lemma see implies correctness algorithm introduce additional notation 
say token requires vertex legal paths get pass legal paths mean paths go appropriate direction token include dead vertices 
speak tokens requiring tokens case mean token requires vertex second token sitting 
note requirement relation tokens moving direction transitive requires requires requires tokens tokens required token 
similarly tokens tokens required token 
lemma flip lemma suppose token required token 
token token requires token requires requires token requires prove lemma section 
see concludes proof lemma 
chosen flip lemma 
fix path uses live vertices 
vertices path path include move visiting suppose token esc requires vertex transitivity requires token token flip lemma tells token requires note due transitivity token token required token required token transitivity requires ed flip lemma 
token summary tokens require vertex symmetry applies tokens 
fe set tokens path set tokens apply type iii move switches picks fe way 
vertices dead token stranded 
proves continue construction move sequence tokens reach 
flip lemma proof lemma flip lemma new directed graph nodes tokens 
edges correspond requirements edge iff token requires token assumption token required token definition token required token know token required token 
know token token token requires token 
transitivity token required token 
symmetry token required token 
node incoming edge 
bipartite tokens tokens require 
view dag directed acyclic graph strongly connected components sort strongly connected components topologically 
component ordering 
means token outside requires token furthermore consist node token required token contradiction assumption token required token 
contains exactly nodes tokens require required tokens lemma proven 
prove consist nodes 
claim strongly connected component nodes 
proof proof rests observation satisfies kind transitivity property 
suppose nodes edges 
holds nodes edge edge 
hard see 
definition legal path avoiding requires path avoiding see 
proving transitivity 
solid lines paths ht corresponding edges dashed line edge 
yx scss scss cb ed gf 
components elements impossible 
solution dsn dag strongly connected components 
assume 
requirement graph legal path avoiding requires 
combining obtain path visit contradiction 
symmetric argument holds exchanging triple edges token edge edge 
prove claim contradiction 
assume strongly connected component elements fk bu 
pair fi path fi 
applying transitivity observation path conclude edge fi 
symmetry contains edges fi 
assume case handled manner 
token requires fi legal path visits fi solid lines 
loss generality assume node path path avoids 
token node requires require path avoids dashed lines 
combining obtain legal path avoids contradiction assumption requires fi contradiction shows elements 

directed steiner network problem 
algorithm section show apply algorithm developed previous sections solve directed steiner network problem dsn constant general model token game tokens moving source si destination ti 
time backwards moving tokens tokens merge reach node 
describe positions tokens tuple fp 
kinds moves tokens 
kind move allows single token move step edge 
edge include moves meaning ken moves remain 
cost move token 
allow group tokens move strongly connected component 
see useful consider optimal solution dsn contract strongly connected component single node resulting graph dag see 
contracted component tokens entering tokens exiting 
compute best way group tokens move specific entrance points specific exit points strongly connected component solving instance scss 
ii set fk xk strongly connected subgraph containing fk xk allow move fk xk cost move size smallest strongly connected component containing vertices fk xk minus size set fk algorithm developed section compute cost 
similar structure algorithm scss section algorithm dsn consists steps 

compute game graph vertices tuples vertices input graph edges included legal token move 

find minimum weight path sp 
tp 

output subgraph induced subgraph containing 
correctness vertices explicitly mentioned vertices type ii moves vertices making smallest strongly connected component containing fi xi define move 
previous algorithms easy see move sequence sp 
tp 
cost feasible solution size sp easy find move sequence 
lemma implies correctness algorithm 
lemma minimum size subgraph contains paths si ti legal sequence token moves sp 
tp 
cost sp proof constructive proof 
start tokens fp sp move respective destinations tp 
regard strongly connected component single node topologically sort dag strongly connected components 
cm resulting order strongly connected components 
consider component order move token component destination destination component component ordering 
doing nodes component dead 
ensures pay node 
component ci containing tokens perform moves 
execute ci consists node ci consists single node 
apply type ii move 
token fu ci define node xu ci moves 
tokens fu destination tu ci set xu destination 
tokens fu choose legal path destination tu xu node path ci 
type ii move simultaneously move tokens fu respective xu 
apply type move token fu ci destination tu move edge path tu new component cj 

weights edges algorithms provided dsn scss easily modified handle weighted nodes just cost move total weight unoccupied nodes entered move just number 
easy minimize total edge weight vertex weight replace edge new vertex having weight connect new vertex vertices incident naturally possible combine vertex weights edge weights 

developed polynomial time algorithm computes smallest subgraph containing paths pairs nodes directed graph 
interesting question tools developed obtain result construct improved approximation algorithms arbitrary closely related directed steiner tree problem 
open question techniques obtain new results network design problems 
acknowledgments david karger helpful suggestions frank asking scss problem started research topic 
marshall bern dodis john matt levine comments 
charikar chekuri cheung dai goel guha li 
approximation algorithms directed steiner problems 
proceedings ninth annual acm siam symposium discrete algorithms soda pages 
dodis khanna 
designing networks bounded pairwise distance 
proceedings st annual acm symposium theory computing stoc pages 
downey fellows 
fixed parameter tractability completeness basic results 
siam journal computing 
fortune hopcroft wyllie 
directed subgraph homeomorphism problem 
theoretical computer science 
fredman tarjan 
fibonacci heaps uses improved network optimization algorithms 
journal acm 
garey johnson 
computers intractability guide theory np completeness 
freeman 
hwang richards winter 
steiner tree problem 
number annals discrete mathematics 
elsevier science publishers amsterdam 

li mccormick levi 
pointto point delivery connection problems complexity algorithms 
discrete applied mathematics 
natu 
fang 
point point connection problem 
information processing letters 
natu 
fang 
point point connection problem analysis algorithms 
discrete applied mathematics 
natu fang algorithm dsn natu fang propose algorithm dsn problem provide correctness proof conjecture extension algorithm solves dsn 
section briefly discuss approach give counterexample algorithm apparently correctly 
algorithm operates edge weighted graphs minimizes total weight edges compute optimal divide conquer approach dynamic programming 
central design algorithm optimal decomposition theorem 
states optimal solutions broken independent parts manner 
theorem optimal decomposition theorem suppose optimal subgraph dsn instance partition edge disjoint subgraphs vertices contain edge contains path si ai contains path ai ti contains path ai ti contains path si ai 
theorem stated hold graph 
note optimal contain edges graph 
suppose split graph nonempty edge disjoint subgraphs 
counterexample optimal decomposition theorem pair consecutive edges subgraph 
assume different subgraphs 
subgraphs contain path path subgraph 
subgraph contains edges incident contain path path theorem fails 
pairs consecutive edges graph essentially argument applies 
runtime analysis section provide running time analysis algorithms solving scss section dsn section 
aim section mainly give idea running time distributed different parts algorithms game graph construction shortest path computation 
goal produce optimal algorithms keep simple explain 

scss algorithm algorithm consists main parts generation game graph input computation shortest path sq compute size number vertices edges respectively input graph number vertices game graph iq number type edges computed follows 
vv ud fix edge choices type edges choices total number xw mn symmetry number type ii edges 
type iii edges obtain upper bound number multiplying number choices nq fe choosing 
yields bound number edges larger number nodes 
edges stored lists vertex adjacency matrix 
computing edge weights takes constant time type ii edges slightly expensive type iii edges 
done reasonable efficiency running pairs shortest paths algorithm input graph takes time logn mn computing shortest path node node visiting nodes done time going possible sequences vertices appear path 
long constant time constant 
summarize spend constant amount time compute edges graph leads total time mn game graph construction subsuming time pairs shortest path computation 
second part algorithm compute shortest path query game game fibonacci heaps done time log mn logn mn logn computing shortest path takes time constructing graph total running time algorithm 

dsn algorithm algorithm game graph consists np nodes edges 
means final shortest path computation take time turns algorithm time construct game graph shortestpath computation 
time consuming part game graph construction determine weights type ii edges 
obviously inefficient call scss algorithm type ii edge game graph 
fortunately simple observation possible avoid 
note game graph constructed instance scss depend source terminal vertices si ti underlying graph number call game graph gk 
true gk sub graph 
edges sub graph gk vertices 
solving scss instance requires computing shortest path gk equivalently node form suggests strategy solve problems time running single destination shortest path algorithms destination weights type ii edges computed constant time looking appropriate shortest path length 
running time single destination shortest path queries mn logn total running time algorithm 
aside simpler way solve dsn algorithm graph node pairs add nodes edges graph solve scss terminals hard see solution problem optimal solution original dsn problem omit 
leads improved running time mn logn running time obtained natu fang 

