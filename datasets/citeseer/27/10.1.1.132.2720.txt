open implementation design guidelines gregor kiczales john lamping cristina lopes chris maeda anurag mendhekar xerox palo alto research center coyote hill road palo alto ca gregor parc xerox com designing reusable software modules extremely difficult 
design balanced general address needs wide range clients focused truly satisfy requirements specific client 
area particularly difficult strike balance implementation strategy module 
problem generalpurpose implementation strategies tuned wide range clients aren necessarily optimal specific client especially issue modules intended reusable provide high performance 
examination existing software systems shows increasingly important technique handling problem design module interface way client assist participate selection module implementation strategy 
call approach open implementation 
designing interface module allows clients control implementation strategy important retain possible advantages traditional closed implementation modules 
explores issues design interfaces open implementation modules 
identify key design choices guidelines deciding choices best particular situations 
gail murphy department computer science university british columbia main mall vancouver canada murphy cs ubc ca keywords open implementation software design software reuse software traditionally constructed principle module expose functionality hide implementation 
principle informally known black box abstraction basic tenet software design underlying approaches portability reuse important issues computing 
black box abstraction attractive qualities amortized development costs localization change exposing functionality module interface lead performance difficulties module gets reused 
observed cases clients code problem re implementing appropriate version module existing modules ways 
case goals motivated creating module place realized 
systems address problem having modules allow client control implementation strategy 
say modules open implementations 
open implementation approach works somewhat shifting black box guidelines module design 
black box modules hide aspects implementation open implementation modules allow clients control selection implementation strategy hiding true details implementation 
doing open implementation module designs strive appropriate balance preserving kind opacity black box modules providing kind performance clients require 
number existing systems open implementation style interfaces far systematic study open implementation design result designers systems little general guidance assist 
addresses need examining series specific modules open implementations including designs taken published systems toy designs illustrate specific issues 
designs serve illustrate important concepts guidelines tradeoffs 
provide concrete instances study idioms designs 
specifically focused design interfaces modules open implementation 
implementation techniques support interfaces crucial scope 
focus general motivation open implementation operate premise modules benefit open implementation approach focus issues design interfaces 
base case exploration open implementation interface designs necessary provide basis terms module interface 
terms similar fashion module represents assignment interface set assumptions client programmer module may behavior 
modules subject open implementation conceived manner module application information hiding principle 
principle modules selected localize hide design decisions 
interface design simple set module illustrative example 
black box interface presents functionality set module hides implementation issues interface 
serve comparison point subsequent open implementation designs interfaces set modules 
set module help differences designs clear 
designs appropriate module simple 
noted explicitly 
implementation techniques straightforward apparent simply looking interface design 
subtle involve developed techniques language system implementation 
unified presentation techniques separate describing preparation 
concerned guidelines selection form interface open implementation module 
issues related specification interface outside scope 
set module interface design simple black box design 
usual procedures creating sets adding removing elements sets mapping elements set 
calling interface module look makeset insert item set delete item set isin item set map function state set interface design attractive simplicity 
addition adheres characteristics quality interface designs outlined 
interface consistent set parameter consistently passed argument essential service offered way general set may insertions insertions deletions minimal function provides operation opaque interface hides secret module defined 
inherently difficult develop implementation interface please large range prospective clients 
difficulty arises determining best implementation strategy set depends knowing going done 
elements 
new elements inserted 
existing elements deleted 

set operations called 
factors important determining implement set 
different implementation strategies sets 
library example eleven variants set including linked lists trees hash tables name 
design set module implementor little basis selecting implementation strategy interface difficult set module know specific client usage pattern 
short appropriate case open implementation design 
separation implementation strategy control design addresses difficulty developing reusable implementation design providing clients limited control selection module implementation strategy 
set module interface design design interface design makeset optionally called argument describes client pattern 
intent set map procedure calls function element set passing element state block 
design possible simulate closure module implementation examine description select appropriate specialized implementation strategy tuned pattern 
optional usage parameter string simple declarative language supports encoding information size set relative frequency various operations called 
makeset usage makeset insert item set delete item set isin item set map function state set example calls makeset show usage parameter works makeset insert lo delete lo isin hi makeset insert hi delete hi design opacity criteria relaxed somewhat design design kept implementation entirely secret design admits clients selecting implementation strategy important issue understanding set help selection 
note secrets remain hidden 
client know actual implementation strategies certainly know details strategies implemented 
simple observations new interface design small change interface design makeset procedure accepts optional argument procedures unchanged 
client new functionality optional 
possible call makeset arguments leave set module free choose default general purpose implementation strategy design client new functionality inherently bounded effect 
implementation strategy control associated call set affects sets created call 
possible sets new functionality different sets new functionality different ways get different implementation strategies 
new part interface seen relatively orthogonal original interface 
new part supports client control implementation strategy old part supports sets 
observation means set module interface design effectively splits client code kinds client code simply uses set module functionality parameter makeset involved controlling set module implementation strategy 
important property fact subject design guideline open implementation module interfaces support clear separation client code uses module functionality code client code controls module implementation strategy isc code clear separation client code isc code important helps preserve advantages black box modules 
helps client programmer selectively focus attention way code uses module functionality way code controls module implementation strategy 
focusing code client programmer effectively working black box interface module 
design job respect client programmer simply selectively ignore passed makeset order focus code 
easy build automatic tool hide isc code programmer wanted ignore 
working guideline important effective separation client programmer manifested code 
goal supported isc separation interface separation client code real benefit 
addition having clear separation client isc code open implementation module interfaces designed isc code optional isc code easy disable support alternative isc codes piece code 
additional guidelines provide support development clients open implementation modules 
enable clients developed focus getting functionality right leaving isc code 
assist performance debugging selectively turning parts isc code 
facilitate porting allowing different isc code different environments 
support division expertise code written person group expertise isc code written person group expertise 
example system clear isc code separation high performance fortran hpf fortran extension intended support efficient data parallel programming 
hpf principal components set declarations allows programmers assist compiler runtime system determining strategies distributing arrays multiple processors 
terminology declarations isc code 
clear isc separation achieved embedding declarations comments fortran program 
example mechanism real hpf align line code declares large arrays second line isc code saying lay elements arrays respect 
scoring hpf interface design isc separation guidelines isc code separation clear isc code easily ignored client programmer hidden tool 
isc code optional hpf fortran compilers compile hpf program isc code 
isc code easy disable simple tool strip program passing program compiler 
hpf doesn directly support multiple isc codes code easy build tool example extending syntax mark line isc code platform intended pre processor strip inappropriate lines passing code hpf compiler 
properties translate direct benefits hpf programmers 
programs developed focusing just code 
isc code added tuning possibly different programmers 
isc code added code internally complete executable evolution accomplished adjusting testing code making needed adjustments isc code 
example doesn quite job isc separation library large library classes building blocks includes set module open implementation 
design isc code mandatory set construction requiring client programmers think set module implementation strategy cases general purpose strategy sufficient 
result benefits black box interface lost 
means way tell reading client code particular piece isc code thought merely intended default 
code harder reason maintain 
makeset insert count makeset insert insert count function count map scope control design described improves design ways provide clear isc separation 
scope control important observation design piece isc code affects implementation sets just sets created makeset isc code appears 
important point focus design guideline open implementation module interfaces designed allow scope influence isc code controlled way natural sufficiently fine grained 
isc separation motivation guideline help client programmer understand program case making easier reason effect isc code write 
programmer reasoning directly facilitated scope influence isc code natural fine grained 
design job meeting guideline 
isc code specific call makeset affects sets returned call set operations 
natural client programmer think terms sets created call makeset 
granularity sufficiently fine grained programmer reason easily effect piece isc code 
shows effect design scope control client programmer perspective 
shows number lines code pieces isc code strings 
dashed lines indicate parts code scope influence piece isc code 
note count function call map inside scopes passed sets kind implementation 
choosing scope control importance natural fine grained isc code scope control easy state designing appropriate scope control interface subtle problem 
coming design involves considering client going want control implementation strategy making sure design gives clients fine granularity overly difficult implement 
section presents alternative scope controls illustrate considerations come play 
alternative scope control design consider design client control implementation strategy application basis 
done declaration associated makefile application affected sets application 
scope control fine grained reasonable expect application want sets different ways want different implementations strategies 
alternative design useful closed implementation sets 
example consider file systems allow client control pre fetching caching strategy 
systems tend provide control stream basis 
file basis coarse granularity cause problems different clients opened file wanted different implementation strategies 
similarly isc scope control process basis coarse reasonable expect system running process want open different streams different implementation strategies 
important sufficiently fine grained scope control tension finegrained gets harder implement 
example file system allowed client control pre fetching strategy byte basis call control pre fetching happened call undoubtedly powerful stream basis cumbersome difficult implement 
implementation technology capable supporting design exist 
cases coarse isc scope control proven useful 
consider example blas libraries matrix routines 
different library implementations customized different hardware architectures 
library linked execution starts affects matrix arithmetic application case appropriate granularity 
summary natural fine grained scope control complements clear isc separation 
clear isc separation divides client code code isc stream mean result opening file handle file read write bytes 
code 
natural fine grained isc code scope control partitions client code parts depending isc code affects 
subject matter design address original need client control implementation strategy way potential weaknesses client programmer mis describes behavior program may wind implementation strategy worse default 
client programmer properly describes behavior program guarantee get implementation strategy optimal purposes 
implementation design include implementation strategy optimal usage profile client describe call makeset 
essence design allows client say behavior leaves client unsure effect module implementation strategy 
addressing uncertainty motivation design 
set module interface design design set module interface identical design optional argument makeset 
design client programmer option explicitly specify fixed list implementation strategies new set 
fixed list btree linkedlist hashtable makeset strategy makeset insert item set delete item set isin item set map function state set example calls makeset makeset linkedlist makeset hashtable note ways design similar design similar isc separation parameter procedure interface 
similar scope control piece isc code affects operations sets returned call makeset 
designs differ important respect having nature isc code clients 
capture difference introduce concept called isc code subject matter open implementation mod subject matter client isc code example client program behavior insert hi delete lo isin performance requirements module meet interface module implementation strategy ule interface design 
term refer explicit subject isc code 
design isc code subject matter client program behavior 
design module implementation strategy 
distinction may appear somewhat subtle designs allow client affect module implementation strategy 
pieces isc code designs intent different subject matter insert lo delete lo isin hi hashtable 
difference isc code explicitly client program behavior design vs module implementation strategy design third important possibility isc code subject matter performance requirements module meet interface 
subject matter may appropriate interface set module useful cases 
example open implementation modules isc code subject matter network protocol interfaces allow clients request particular quality service 
guarantees critical applications audio video conferencing send real time data streams network 
possibilities isc code subject matter summarized table 
tradeoffs choosing isc code subject matter key decision design interface open implementation module 
isc code subject matter significant ef set library uses module implementation strategy isc code subject matter 
design sense 
documentation different strategies includes description strategy order complexity describes terms performance properties module interface 
design bandwith network quality service hashtable design table subject matter style isc code fect easy module design specify implement clients 
making isc code subject matter client behavior feels easier client programmer behavior program module rest 
isn case 
easier client programmer simply name known implementation strategy know appropriate 
give client programmer certainty isc code effect desire 
set library module implementation strategy subject matter client program behavior 
design design 
hand having isc code subject matter module implementation strategy opens door potential problems client programmer chooses inappropriate strategy 
familiar fact compilers ignore register declarations programmers incorrectly 
interface designer choice isc code subject matter reasonable chance client programmer able choose correctly 
having subject matter performance requirements interface happy compromise best choice 
cases easier client programmer speak terms subject matters 
rule thumb selecting isc code subject matter seeing process selecting implementation strategy series analysis steps client code interface 
client usage pattern performance properties require 
performance requirements implementation strategy best satisfy 
process illustrated 
implementation strategy appropriate clients need open implementation 
client code analysis client usage analysis client performance analysis profile requirements seeing process way guideline pick subject matter process criteria hold possible build automatic mechanism completes chain reasoning point onwards get optimal implementation strategy 
easy design interface express subject matter point 
easy client programmer interface express subject matter 
includes figuring say say 
note guideline provides way knowing open implementation 
open implementation needed steps inference process handled automatically arrive optimal implementation strategy 
example appropriate choice isc code subject matter inline declaration programming languages including common lisp 
declaration allows programmer name implementation strategy procedure calling 
comes inference process programmer clear sense effect 
corresponding example inappropriate choice isc code subject matter speed space safety declarations common lisp 
declarations don clear subject matter isn clear fall inference process programmers don clear sense effect 
implementation details hidden design relaxes original secrets design defined 
existence fixed set implementation strategies longer secret 
notice true details strategies implementation hidden 
plenty information hiding interface client implementation 
stated design guideline open module interfaces designed pass essential implementation strategy information 
subject matters different ways encoding essential information 
style isc code design addresses lack guarantees design designs limited set implementation strategies provided module 
vulnerable implementation flexible wider range clients 
motivates design 
set module interface design design interface exactly design design allows client programmers choose fixed set default implementation strategy allows provide entirely new implementation strategies set module 
client provides strategies form entirely new implementation set functionality packaged subclass class set 
mechanism object oriented programming capture kind design mechanisms callbacks dispatching procedures just 
example illustrates interface design file isc file makeset class set method insert method delete method isin method map module implementation strategy analysis steps process selecting implementation strategy design similar design ways scope control 
similar isc code separation 
key difference design client isc code includes code inside arguments makeset code defines new implementation strategies sets 
isc code subject matter design implementation strategy module 
design isc code takes different forms 
part inside arguments makeset just design part defines new subclasses set different 
capture difference declarative isc code designs programmatic isc code design introduce new concept style isc code 
declarative style isc code simple power limited forms declarations supported interface 
limitation problematic client needs fall purview declarations 
interface supports programmatic isc code addresses limitation allowing client write isc code form small program 
design set primitives insert delete isin invoke client programmatic isc code client defined implementations requested 
errors isc code cause errors seen code 
situation earlier designs isc code potential breaking functionality interface 
programmatic style interface lead robust designs 
reason cases client forced code performance deficiency module 
programmatic isc code puts premium having right scope control restrict consequences bad programmatic isc code places requested 
example buggy backing store mach external pager operating system come crashing 
process requesting backing store affected 
design space page summarizes design approaches 
illustrates progressively deeper involvement client implementation successive styles 
right style particular module lets client get involved implementation strategy need having get involved 
layering different clients module need different implementation strategies different clients module may better served different interface design styles 
fortunately accommodated 
notice interface design subsumes design design client design choices regarding control set module implementation strategy 
specify isc code get default implementation strategy 

choose list built strategies 

provide new strategy 
client code client appears inside module module effects isc code design say design layered interface design 
design client get implementation strategy selection process different levels 
fact levels layering implicitly design stemming guideline isc code optional 
existing open implementation modules layering sense 
file system mentioned example closely parallels design client case get default pre fetching policy choose small set built policies write programmatic isc code define new policy 
layered interface design aims exploiting version rule 
idea clients default strategy remaining need write isc code 
select built strategies final probably important provide entirely new strategy 
layering technique address trade 
particular layering way design interface robustness ease declarative isc code time having power programmatic isc code 
guideline simple interface describe strategies satisfy significant fraction clients impractical accommodate important strategies interface interfaces layered 
layered interface designs refer structure interface underlying software structure 
layered interface design implemented layered software architecture 
interface style example style implementation strategy control interface style client provides declarative information usage pattern 
sequential file scan style client specifies implementation strategy module 
lru cache management style client provides implementation strategy 
object implements custom strategy top cache management protocol designs range design approaches suitable large class open implementations 
room cover approaches 
notable omissions approach particularly open operating systems allows incremental definition new strategies approaches allocating shared resources 
approaches explored 
open implementation appropriate reusable modules clients wide range different performance requirements 
open implementation reworking opacity guidelines traditional black box modules 
open implementation modules allow clients participate implementation strategy hide aspects implementation details 
open implementation requires new design guidelines augment existing ones black box modules 
provides initial set guidelines issues having clear isc client code separation natural fine grained isc code scope control selection appropriate isc code subject matter strategy tradeoffs appro selected priate module selects imple black box implementation mentation strategies tion 
strategy satisfy observing client clients 
module black box interface 
determine strategy 
module selects strategy client provided information easy choose matching usage pat usage pattern doesn effective implementation tern information constrain implementation 
strategy client client best avail difficult client know havior known 
able strategy 
influencing module strategy 
module adopts strat easy specify exact strategy 
specified client 
client implementation formed wrong best strategies diffi strategy 
cult choose automatically 
module adopts strat easy specify exact strategy 
feasible egy provided client 
designing module module implement support replaceable strategies implementation strate difficult 
client gies clients building new strategy implementation expensive 
need 
open implementation interface styles 
selection appropriate isc code style incrementality isc interface layering balance ease power acknowledgments people contributed directly art lee rob deline john irwin jean marc loingtier marvin theimer 
bibliography 
kiczales bobrow art metaobject protocol 
mit press 

chambers ungar 
making pure object oriented languages practical 
oopsla proceedings sigplan notices 

phoenix az 

pu massalin overview synthesis operating system 
columbia university 

chiba metaobject protocol 
oopsla conference proceedings object oriented programming systems languages applications 

austin acm press 

stonebraker operating system support database management 
communications acm 


kiczales new model abstraction software engineering 
proceedings international workshop new models software architecture reflection meta level architecture 

tokyo japan 

young exporting user interface memory management communication oriented operating system 
vol 
technical report cmu cs 
carnegie mellon university computer science department 

hamilton spring nucleus microkernel objects 
sun microsystems laboratories 
reflective operating system concept implementation 
proceedings conference object oriented programming systems languages applications 

shin 
combining contracts exemplar programming class hiding customization 
object oriented programming systems languages applications 

portland oregon acm press 
maeda bershad 
service servers 
fourth workshop workstation operating systems 
ieee computer society technical committee operating systems application environments ieee computer society press 
anderson scheduler activations effective kernel support user level management parallelism 
acm transactions computer systems 

shaw wulf relaxing assumptions languages implementations 
sigplan notices 

britton parker parnas 
procedure designing interfaces device interface modules 
th international conference software engineering 
ieee computer society press 
kiczales black box open implementation 
ieee software 


open implementation home page xerox palo center www parc xerox com oi 
parnas clements rational design process fake 
ieee transactions software engineering methodology 
se 
parnas criteria decomposing systems modules 
communications acm 

hoffman criteria module interfaces 
ieee transactions software engineering methodology 


gnu lib documentation www com gnu docs 
steele jr high performance fortran status report 
acm sigplan notices 

patterson status report research transparent informed prefetching acm operating systems review 


dongarra extended set fortran basic linear algebra subprograms 
acm transactions mathematical software 

zhang rsvp new resource reservation protocol 
ieee network september 
steele jr common lisp language 
second ed 
digital press 

