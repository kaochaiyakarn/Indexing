data knowledge engineering elsevier data knowledge engineering snoop expressive event specification language active databases chakravarthy mishra systems research development center computer information sciences department university florida gainesville fl usa communications systems berkeley ca usa accepted july making database system active meet requirements wide range applications entails developing expressive event specification language implementation 
extant systems support database events cases predefined events 
discusses event specification language termed snoop active databases 
define event distinguish events conditions classify events class hierarchy identify primitive events introduce small number event operators constructing composite complex events 
snoop supports temporal explicit composite events addition traditional database events 
novel aspect lies supporting rich set events event expressions notion parameter contexts 
essentially parameter contexts augment semantics composite events computing parameters 
concreteness parameter computation relational model 
show contingency plan includes time constraints supported stepping outside framework proposed 
keywords event specification primitive composite events contingency plan parameter contexts active databases 
consensus emerging database community structure rules supporting active functionality 
rule consists primarily components event condition action 
rule consisting components termed eca event condition action rule literature 
rules declared database corresponding author 
email sharma cis ufl edu elsevier science rights reserved chakravarthy mishra data knowledge engineering management system dbms responsible detecting occurrences events evaluating condition event signaled executing action condition evaluates true 
significant body exists rules rule processing dbms 
event component rules received little attention understood contrast condition action components 
conditions actions viewed side effect free queries transactions respectively 
active dbms meet requirements non traditional applications support rules needs complemented expressive event specification language 
myopic view supporting small number events database events insert delete modify severely limit ability model complex applications temporal external events need combined database events 
example management portfolios various customers stock trading applica tions may require rule form average changes hour interval average reaches value execute customer portfolio model determine buy sell 
rule requires database events temporal combinations events rule requires expressive event specification language modeling event 
straightforward provide set predefined events approach restrictive difficult extend 
identifying primitive events providing set useful constructs building composite events provide richer set event expressions 
proposes event specification language supports primitive events types operators constructing complex events needed large class applications 
introduce notion parameter contexts modeling semantics parameter computation complex events 
clearly distinguish events conditions classify types events required identify primitive events introduce event modifiers small number event operators constructing composite complex event expressions 
snoop supports temporal explicit composite events addition traditional database events 
shown contingency plan includes time constraints supported operators proposed 
introduce notion parameter contexts mechanism disambiguating parameters computed complex event 
concreteness parameter computation relational model 
rest structured follows 
section defines event context active databases 
section classify events discuss primitive events 
section highlight need event operators introduce operators discuss semantics usage 
section discusses expressive power snoop including parameter contexts 
section outline transformation contingency plan eca rules execution equivalent original contingency plan 
section contains comparison snoop related 

events event modifiers conditions notion time central understanding events event modifiers introduce 

notion time chakravarthy mishra data knowledge engineering time real world may continuous dense having unlimited precision digital computer discrete finite time represented discretely limited precision 
assume equi distant discrete time domain termed integer time domain shown fig 
having origin time point represented non negative integer 
assumption time fixed origin instant absolute time system mapped time axis 
integer time domain isomorphic absolute calendar time 
granularity time line determined system application 
adopt indefinite time constants infinity 
moving time point keeps track current time 
deemed macro expanded current time rule specification rule activation time 
represent indefinite time interval oo indefinite time point greater current time 

events distinguish event expression event 
informally event expression defines interval time line shown fig 

notion event expression needed quantify operations take finite amount time execution 
example database operation function transaction viewed event expression 
point time line corresponding absolute time viewed degenerate event expression point special case interval 
interest event expressions comes fact needs choose point time line closed interval defined event expression denote occurrence event 
words event expression needs associated point declared event corresponding event expression 
introduce notion event modifier section transform event expression events correspond various points interest closed interval defined event expression 
event 
event atomic happens completely occurrence 
distinguish logical physical internal events 
conform definition 
logical event corresponds specification event conceptual level 
example insert logical event event expression insert duration 
similarly transaction logical event event expression transac tion 
logical events associated event expression 
purpose detecting logical event point detection associated execution event expression 
point termed physical internal event 
example physical 

fig 

time line 
chakravarthy mishra data knowledge engineering event insert point code statement insert returning insert 
logical events mapped physical internal events mapping specification hardwired implementation 
mapping specification consistent conceptual internal levels dbms clearly distinguishes implementation specification 
shall term event rest refer logical events usage ambiguous 
logical events need mapped uniquely physical events physical event may correspond logical events 
physical events ones detected underlying system 
database applications interest events comes state changes produced database operations 
state changes concomitant operation execution event occurrences corresponding operations interest 
state changes affected parameters associated operations 
events associated operations event expressions interest operation parameters viewed parameters event associated operation 
physical events viewed occurrences fast compared granularity time scale chosen 
associate time occurrence toc point time line event occurrence instance 
time occurrence associated logical event time occurrence associated physical event corresponding 
occurrences event expressed granularity time scale chosen mapped distinct points time line 
example event occurs point lies consecutive points ts ts considered occurred execution event expression insert tuple tl generates logical event insertion occurs different points time line 
multiple occurrences event grouped class instances correspond actual occurrences particular event 
event class system unique event type identifies class 
event may precede follow events may unrelated 
example events abort rollback follow causally related causally dependent 
events causally independent said unrelated 
causally precedes 
event el causally precedes event existence event el definitely cause occurrence event 
transitive irreflexive anti symmetric 
simultaneous occurrence 
event el occurs simultaneously event time occurrence el time occurrence 
uniprocessor environment assume events occur simultaneously absence explicit temporal events 
distributed multiprocessor environ elaborate temporal explicit events explicit events external events detected dbms 
chakravarthy mishra data knowledge engineering ment presence explicit events possible event occur simultaneously 
adds complexity event detection parameter computation 
shall address simultaneous event occurrences scope 
definite event 
event definite guaranteed occur 
example event corresponds pre determined point time line definite event 
causally precedes occurs definite event 

event condition differences important distinguish semantics conditions events 
condition boolean function data values salary john greater 
condition produce side effects change database state 
condition may valid interval time state changes event atomic definition 
example salary remains academic year condition 
database state interest defined terms condition conversely state condition 
conditions define states eca rules guards transitions 
guarded transition fires event occurs guard condition true 
example withdraws account event balance minus amount withdrawn parameter event minimum amount required condition indicate amount withdrawn action may lead database state 

event modifiers operations including database operations insert delete shall see complex event expressions meaningful time interval 
treated instantaneous occurrences event corresponds pre determined point closed interval 
event modifiers provide mechanism creating logical events correspond points interest closed interval ii mapping points interest physical events system suggest feasible implementation 
define event modifiers transform arbitrary interval time line logical events 
modifiers corresponding events instantaneous precisely map point occurrence event physical level 
example event function mapped point statement function control returned calling function 
event similarly defined 
modifiers map operation interval defined events 
fact correspond pre post respectively events provided systems 
semantics event modifier approach user specified name mapping physical event 
database dbc uses specification implement event detection typically done wrapper pre processing step 
approach supports extensibility changing implementation chakravarthy mishra data knowledge engineering mapping affecting logical event rule specification 
additional event modifiers defined mapped physical events 
currently event modifiers pre defined snoop 
attempt execute operation corresponding event occurs 
successful execution operation corre sponding event occurs 
part mapping event modifiers parameters computed need specified 
parameters computed event snoop consist parameters event class parameters event expression parameters specified event modifier 
event type time stamp parameters associated event class event exp id parameter associated event expressions transaction id event expression transaction block id operation labeled block code parameters operation event expression 
typically parameters event include input parameters parameters event include input output parameters operation 
block id parameter identifies type operation insert delete name procedure 
generalization event modifiers applied uniformly expression snoop composite event expressions define interval 
default event specification absence explicit modifier assumed 
event expression corresponds event event expression 
example insert modifier insert 
event expressions correspond degenerate form interval point time line semantics coincide 
summary processing event involves temporal order occur event occurrence event occurs formal parameters instantiated bound values actual parameters event detection event detected parameters collected recorded event detector event signaling event signaled sending interrupt message actual parameters computed condition rule evaluator 

event classification basis structure behavior events organized hierarchy event classes 
event class represents unique event type logical event instances class identified class type time occurrence 
term event refer event instance event class 
intent usually clear context 
associate number attributes event class 
attributes instantiated run time event occurs 
attributes inherited subclasses event hierarchy 
event type time occurrence attributes events 
example relational database insert event class invocation insert operation produces event instance class may parameters relation name tuples inserted addition class parameters 
chakravarthy mishra data knowledge engineering events broadly classified primitive events events pre defined system primitive event expressions event modifiers mechanism efficient detection embedded system primitive event ii composite complex events events formed applying set operators primitive composite events 
classification shown fig 

primitive events classified database temporal explicit events 
database events correspond database operations retrieve insert update delete relational model 
temporal events related time types absolute relative 
absolute events map discrete points time line relative events defined respect explicit point seconds event occurs primitive composite event 
explicit events events detected signaled parameters application programs managed system 
prior usage explicit events formal parameters need registered system 
event primitive defined set parameters instantiated occurrence event 

database events database events correspond database operations transformed events event modifiers manipulating data 
relational model correspond variations insert delete modify retrieve transaction operations 
examples drawn relational model approach general 
events associated arbitrary function expression snoop parameters events correspond visible bound points logical events events primitive events composite events database events explicit events transaction access insert delete update procedure function fig 

event classification 
temporal events absolute relative chakravarthy mishra data knowledge engineering mapped corresponding physical events 
obvious approach arbitrary labeled block transformed events 
generalization events arbitrary functions handle function recognized system 
especially useful object oriented model number data manipulation operations fixed case relational model 

temporal events temporal event instance temporal event class 
temporal event defined specifying point time line 
essentially ways specifying point time line absolute value offset defined point time line 
string having format hh mm ss mm dd yy define point time line 
format representing absolute relative temporal events 
accommodate ways specifying time temporal event class specialized absolute relative event subclasses 
absolute event absolute temporal event specified absolute value time represented 
example march th specified 
intuitive notation examples readable 
absolute temporal events useful situations 
example university database students required pay fees deadline fail charged late fee 
database eca rule reports adds late fee needs defined absolute event part eca rule specification 
condition part may check exceptions 
action part rule charge late fee account students missed deadline generate notification statement effect 
specification absolute temporal event field time string may contain wild card notation denoted matches valid value field 
especially useful specification events match time points time line 
example banking application print local branch report day specify event wild card notation follows 

addition wild card method increasing granularity time line pre specified amounts seconds minutes days 
empty field allowed time string representing absolute event order avoid ambiguities 
notion current time specified indefinite variable 
absolute events value meaningful 
absolute events values greater specification activation time considered meaningful 
relative event relative event corresponds unique point time line case point offset explicitly specified 
point may event specified snoop including absolute temporal event 
syntax show wild card notation provides special types periodic events 
chakravarthy mishra data knowledge engineering relative event event 
representation offset empty field time string substituted minimum value field 
example consider airline reservation system reservations invalid ticket bought hours time reservation 
enforcement modeled eca rule relative temporal event 
syntax relative event different square brackets angle brackets indicate semantic difference 
observe relative event subsumes absolute event relative event primitive event 
absolute version retained practical reasons 
note absolute event definite event 
relative event definite event provided definite 

explicit external events explicit called external events defined users application programs registered system 
parameters explicitly specified supplied time external event signaled dbms 
consistency stipulate parameters explicit events include event type time occurrence 
explicit events assumed detected outside system signaled system parameters 
events accepted processed detected system 
words occurrence detection signaling processed dbms 
example atm atm id time location replenish amount viewed external event signaled system 
fact mechanism signal event application 
difference detection event signaling event explicitly case parameters computed system case supplied 
mechanism simulating hypothetical scenarios planning heavily event driven 

event operators various categories primitive events discussed far useful modeling number applications requiring active functionality 
possible specify combinations primitive events 
example possible model single eca rule primitive events defined far sample ibm stock minutes working day compute maximum value day withdrawals account day flag allow withdrawals average changes hour interval execute portfolio model determine buy sell check referential integrity constraint object inserted deleted compute new average ibm dec boeing stock prices change day chakravarthy mishra data knowledge engineering withdrawal deposit permitted fixed amount irrespective account balance 
instance modeled multiple eca rules chaining rules specifying control information explicit events need part rule 
example expressed ri deposit condition 
action set deposit true deactivate ri activate condition action withdraw deposit true set deposit false allow withdraw specifying control information part rule avoided large part providing language constructing event expressions suit application requirements 
help rule designer concentrate semantics application enables system optimize detection events execution eca rules 
define composite event event obtained application event modifier complex event expression 
default event modifier assumed 
define composite event expression recursively event expression formed set primitive event expressions event operators composite event expressions constructed far 
fig 
shows event operators supported snoop 
describe operators semantics 
examples illustrate applicability event operators sequence aperiodic fig 

event operators 
fact production rule systems ops programs written incorporating rule control information part rules form similar eca rule 
specifically ops rule events explicitly specified inferred 
chakravarthy mishra data knowledge engineering expressiveness event operators introduced 
section discuss parameter computation snoop expressions relational context relational algebraic operators 
arbitrary snoop event expression substituted event 
semantics event operators defined operands event expressions snoop 
furthermore event modifiers assumed applied event expression interval transform event assumed default event modifier 
upper case alphabets represent event expression event lower case alphabets represent instance event disjunction disjunction events denoted occurs occurs occurs 
operator useful occurrence exclusive assumption simultaneous events occur inclusive events set events may cause rule fire 
example constraint needs checked insertion deletion tuple specified operator 
composite event insert delete specifies required semantics 
event modifier expression expressions identical semantics 
sequence sequence events composite event denoted el occurs occurs provided occurred 
implies time occurrence guaranteed time occurrence 
constructor useful predefined order imposed occurrences events 
example banking application special consideration sequence events deposit withdraw 
example checking integrity constraint postponed transaction event insert delete transaction 
snoop event expressions 
event modifier signal start event expression 
possible occurrence el occur 
avoid situation desirable expression having include definite event defined earlier transaction absolute temporal event 
event transac tion natural choice definite event occurs starvation irrespective transaction aborts commits database applications 
assumed events occur simultaneously 
assumption realistic multiprocessor distributed environment 
explicit events occur simultaneously non explicit events 
case concurrent occurrences necessary gather parameters events signal composite event 
long system wait detecting computing parameters disjunction clear 
may meaningful include time window dealing simultaneous event occurrences 
discussion scope 
advantage approach proposed define event modifier say commit abort meaningful database applications stepping outside framework 
chakravarthy data knowledge engineering con conjunction event denoted el 
en occurs events events corresponding distinct events specified occur ignoring order occurrence 
conjunction events useful situations firing rule depends occurrence number events necessarily order 
possible simulate operator combination 
example el written equivalently el 
shorthand el en 
en desirable event definite event el transaction 
note multiple occurrences event count parameter computation see section 
closure operator introduced denoted event 
closure introduced essentially specifies zero occurrences event 
terminating event definite event recommended closure operator 
closure operator expressed 
useful construct require definite event expressed snoop upper bound specified pre determined constant 
course connotes distinct occurrences event opposed event types previous case 
variation occurrences withdrawal event expressed withdrawal 
variation specify interesting events el 
illustrate variation aperiodic operator 
aperiodic operators aperiodic operator allows express occurrence aperiodic event bounded arbitrary events providing interval 
variations event specification 
non cumulative variation aperiodic event expressed el arbitrary events allowed snoop 
event signaled time occurs closed interval defined occurrences 
occur zero times zero times occur interval interval exists definitions 
operator useful rule associated occurrence prescribed interval expressed events 
example event corresponding example section expressed modify ibm modify dec modify boeing average recomputed occurrence corresponds occurrence stock price changes 
situations event signaled interval transaction firing rule time event occurs rule fired 
meet requirement provide operator occurs occurs accumulates parameters occurrence 
constructor especially useful integrity checking constrains need checked transaction 
useful collect parameters event interval compute aggregate values 
example highest lowest stock chakravarthy mishra data knowledge engineering price computed interval operator 
changes stock price accumulated specified interval condition action aggregate operators language parameters computed obtain highest lowest value 
connotes zero occurrences aperiodic event interest 
occurs occurs specified interval occurs occurs definite 
formulate operator definite events follows definite definite event occurs definite event occurs provided definite occurred expresses zero occurrences 
periodic event operator define periodic event event repeats constant finite amount time 
time specification meaningful periodic event represented triplet consisting event el time period temporal event takes place terminating event marks periodic event 
events may event snoop including absolute temporal event 
interval specified time string 
note corresponds offset 
notation expressing periodic event events time specification 
important note constant preferably contain wild card specification fields result continuous point time line occurrences terminating event marks time interval begins occurrence el occurrences periodic event detected 
example report generation quarter periodic event specified 
note event interest middle event time specification include state change operation 
event practical meaningful real life applications may useful allow parameter frequency specification 
accommodate define cumulative variation denoted includes parameter occurrence periodic event 
absence parameter cumulative operator just accumulates time occurrences periodic event parameter object 
non temporal database may possible get data values time occurrences periodic events generated parameters cumulative periodic operator 
example order sample ibm stock price minutes value stock price needs included parameter shown min ibm stock price min ibm stock price 
aperiodic periodic specifications time interval marked occurrences distinct events primitive composite 
furthermore semantics event modifiers equivalent semantics parameter 
semantics equivalent semantics 
form meaningful events time occurrence time occurrence 
possible multiple occurrences occurs 
shall discuss section expressiveness bearing parameter computation 
chakravarthy mishra data knowledge engineering 
examples operators introduced far illustrate event component examples modeled snoop 
simplified syntax rules readable 
sample ibm stock minutes working day compute maximum value day condition action mins ibm stock price true compute maximum parameters collected withdrawals account day allow withdrawals condition action withdraw account true block withdrawals changes hour interval execute portfolio model determine buy condition action parameter context changes changes changes hrs change execute portfolio model continuous explained section check referential integrity constraint object inserted object deleted condition action transaction insert delete transaction constraint satisfied abort transaction compute average ibm dec boeing stock prices change day condition action modify ibm modify dec modify boeing true compute average withdrawal deposit permitted fixed amount irrespective account balance 
chakravarthy da know engineering deposit withdraw condition true action allow withdraw exceeding fixed amount 
expressiveness snoop provide unambiguous way composing event expressions snoop default precedence event operators 
grammar snoop shown ei value value el time string el time string parameter parameter el explicit events database events label el value integer oo event expressions generated bnf left associative 
event expression primitive composite 
label associated event expression identifies primitive composite event 
rule id considered label entire event expression eca rule 
labels expressing interest sub expression presence determines parameter attributes computed expression 
label acts identification subexpression complex event expression 
label interpreted event type sub expression associated event time occurrence attribute generated parameter 
label association possible distinguish occurrence event corresponding sub expression access need time occurrence parameter object 
generalized version closure operator introduced included snoop addition periodic aperiodic operators 
aperiodic cumulative operator expressed regular expression closure sequence operators 
periodic aperiodic operators essentially provide mechanism supporting set event occurrences taken individually collectively 
notion parameter contexts described section interpretation composite events precise 
chakravarthy mishra data knowledge engineering proposed number event operators primitive 
noted earlier absolute time event primitive added rule specification simpler 
obtained stipulating time specification frequency aspect apply operators primitive expressive language defined regular expression 

parameter computation event specification language incorporated data model 
concreteness relational model show computation parameters 
stipulating parameters computed valid expression snoop form relation relational algebraic operators applicable parameter relation 
parameter relation condition action components rule relation available part database 
assume rule name rule id param rule id represents parameter relation computed event rule 
describe schema parameter relation corresponding event computed event rule specification 
course extension relation param rule id computed run time 
attributes associated primitive event form attributes parameter relation param rule id parameter relation primitive event attributes event type time occurrence 
event type value uniquely identifies event class name event class 
time occurrence event value 
attributes event specific 
example insert database event may relation name attributes relation additional attributes parameter relation 
event occurs parameters relation extension computed stored parameter relation passed condition evaluator 
parameters absolute temporal event event type time occurrence 
parame ters relative event time consist event type time occurrence 
parameters act explicit point included parameter treated strictly temporal event 
schema parameter relation event operator follows 
disjunction conjunction sequence schema formed attributes participating events 
event type composite non primitive non explicit event types 
parameters aperiodic event parameters event expression event type 
parameter relation passed condition evaluator time occurs closed interval defined occurrences events 
event parameters accumulated parameter relation passed condition evaluator occurrence 
course situations parameters relevant need included parameter relations cases sequence operator needs el el time 
chakravarthy mishra data knowledge engineering time occurrence time occurrence 
parameter relation periodic event attributes event type time occurrence 
event type periodic event taken periodic differentiate temporal event type 
time occurrences periodic event included parameter relation relevant parameters 
parameter explicitly specified frequency value included parameter relation 
schema parameter relation associated arbitrary event computed attributes participating events 
time occurrence composite event time occurrence component event entire composite event happen default event modifier explicitly associated expression 
subexpression complex event expression preceded label additional time occurrence attribute inserted parameter relation represent time occurrence component event 

parameter contexts introduce notion parameter contexts purpose capturing application semantics computing parameters composite events unique 
notion parameter contexts primarily introduced disambiguate parameter computation time accommodate wide range application requirements 
detection event corresponding event expression may require detection constituent events occurrences constituent events 
situations requiring multiple event occurrences included parameter set give rise alternate ways computing parameters events occur interval 
furthermore parameters may computed way suits semantics application may vary class application 
composite events expressed snoop language generated bnf earlier 
composite event may comprised primitive events 
occurrence composite event marked default case occurrence event composite event occur event expression semantics 
sequence event occurrences period time happen 
composite event detector needs record occurrence event save parameters compute parameter set composite event 
adopt notation represent event expression ei 
parameter event set 
occurrences primitive events constitute composite event different possibilities detecting composite events exist 
illustrate consider event expressions el primitive events 
fig 
shows occurrences different instances event el complex events chakravarthy mishra data knowledge engineering tl time el el el el fig 

event occurrences 
event signaled point instance events occurred occurrence 
event signaled time instance events el occurs 
parameters event include parameters events el parameters event include parameters events assumption events occur simultaneously 
parameter contexts proposed motivated careful analysis classes applications 
identified parameter contexts cover wide range applications 
briefly indicate characteristics applications motivated choices parameter contexts applications events happening fast rate multiple occurrences event refine previous data value 
typical sensor applications hospital monitoring global position tracking applications correspondence occurrence events correspondence needs maintained 
applications exhibit causal dependency chakravarthy mishra data knowledge engineering aborts rollbacks operations bug reports releases come category trend analysis forecasting applications securities trading stock market fact diagnosis composite event detection moving time window needs supported example compute change average day period applications clear parameters need packaged 
case parameters collected passed 
introduce contexts classes applications described context occurrence started parameter computation taken account computing parameters occurs composite event signaled occurrences parameter relation deleted 
example context parameters event include parameters event instances el detected occurs 
context occurrences primitive event computing parameters composite event 
context parameters el el wrong el occurrence started parameter computation el el 
chronicle context instances component events taken account chronological order occur computing parameters composite event signaled parameters computed oldest instance component event parameters instances deleted 
example parameters event chronicle context computed event instances el 
type event occurs signaled parameters el 
buffer flushed event signaled 
rule deactivated entire set partial buffers flushed 
context primitive event occurrence computing parameters composite event 
continuous case occurrence event marks interval event expression considered potential candidate starting parameter set computation 
especially useful tracking trends interest sliding time window 
example examples computed change hour interval elegantly modeled parameter context 
example fig 
occurrences el el el start detection event occurrence parameters 
parameters second occurrence consist el 
parameters third occurrence el 
context occurrence primitive event computing parameters composite event 
subtle difference chronicle continuous contexts 
pairing respect event detects composite event interval pairing respect event begins interval composite event 
clarification consider event expression event occurrences shown fig 

event initiated events el el chakravarthy mishra data knowledge engineering case composite event parameters computed event chronicle context el parameters computed event continuous context el el 
context parameters computed el 
cumulative context parameters include parameters occur signaled entries parameter relations associated deleted 
example parameters event include instances event occurs 
entire table shown fig 
parameter relation 
event occurs event parameters point include computed parameters 
continuous context event occurrence participate parameter computations cumulative context 
event expressions broadly classified categories 
category consists expressions consisting primitive events operators context specification expressions affect semantics corresponding composite events 
second category consists event expressions involve operators sequence cumulative versions composite events characterized time interval occurrences primitive events need monitored 
context specification affect semantics operators 
table shows parameters computed complex events event occurrences shown fig 
various contexts 
currently context specified top level event expression 
need table event attributes parameters event event type context occurrence complex el complex chronicle el continuous el el el el chronicle continuous el el el el chakravarthy mishra data knowledge engineering implications associating parameter contexts different ones sub expres sions event expression investigated 

storage requirements parameter contexts introduce additional complexity event detection computation parameters 
parameter contexts continuous cumulative impose heavy storage requirements 
parameter context implemented fixed size buffer operator parameter occurrence event stored 
chronicle context queue required amount storage needed dependent duration interval composite event frequency event occurrences interval 
similarly continuous context storage requirements excessive implying choice parameter context rule needs judiciously 
overlapping event sub expressions rules may possible shared data structures parameters reduce storage requirements 
cumulative context storage requirements excessive 
semantics parameter contexts storage requirement increases monotonically cumulative chronicle continuous 
additional research required analyzing performance language system developed sentinel real life applications 

complement exceptions formulation event specification language include operator complement 
semantics operator especially context events tricky 
difficult express detect non occurrence happening 
done bounded finite interval leading unsafe expressions analogous unsafe expressions relational calculus 
ode complement operator denoted introduced applicable primitive composite events 
operator specifies complement universe primitive events 
snoop operator specifying non occurrence primitive event defined interval 
utility operator complement universe primitive events clear 
furthermore detection parameter computation difficult inefficient operator complement universe semantics 
complex events semantics difficult comprehend notwithstanding detection computation parameters 
interpretation operator non occurrence primitive complex events defined interval meaningful transforming contingency plans aggregate operator count shown 
possible define non occurrence operator event expression occurs occurs occurs occurred closed interval defined 
main problem events terminate composite event occurs condition disguised form event condition 
differs chakravarthy mishra data knowledge engineering philosophy snoop having single event occurrence terminate complex event words unique semantics essentially including semantics part event semantics 
semantics gets complicated parameter contexts 
furthermore recognize need type exception part event specification language need ignore subset event occurrences set 
example wants specify banking application rule generate report withdrawals greater working day formulation express 
difficulty currently possible ignore specific instances event occurrences corresponding weekend pre defined set 
feature non cumulative event specification ignore exceptions occur removing set events detected 
currently investigating language features support elegantly 

contingency plans number applications require time constrained processing actions carried pre specified time alternative actions need scheduled 
rules termed contingency plans 
example replicated distributed database data requested remote primary copy site requester wait data arrive prescribed time account node failure communication problems store forward mode operation may initiated contingency plan complete transaction release locks 
model contingency plans necessary recognize non occurrence event action execution specified interval 
propose pragmatic solution problem explicit events aggregate operator count determine event interest occurred changing semantics event operators introducing additional event operators 
example event corresponds transmission message phase commit ack event represents receipt acknowledgment remote site event condition parts rule retransmit data acknowledgment arrive units time transmission expressed cumulative aperiodic operator follows 
ack rule ack count ack param ack rule take needed action event rule occurs time units occurrence event 
assume parameters event rule recorded relation param rule id count aggregate operator returns number tuples corresponding occurrences event ack parameter relation event 
rule essentially models non occurrence event defined time interval example 
chakravarthy mishra data knowledge engineering time constrained applications require monitoring specified situations executing corresponding actions subject timing constraints 
contingency plans alternate actions executed specified action realized specified time limit 
contingency plans easily implemented event operator count function transforming rules supported snoop 
rule compiler converts contingency plan rules 
rule contains event condition action original rule signals rule event explicitly action 
case rule events essentially correspond action part rule 
rule events form event part second rule 
example contingency rule rule id event condition time action transformed rule idl event condition signal rule raise explicit event signal rule event raise explicit event rule id event rule rule event rule time count rule event param rule id check non occurrence abort action rule idl abort equivalent rule action rule id triggered specified event 
evaluates condition 
condition evaluated true executes action specified time units done action executed 
seen combined effect rules rule idl rule id equivalent semantics rule id function count condition part assumed immediate coupling mode 
chakravarthy mishra data knowledge engineering rule id special function gives number tuples parameter relation corresponding occurrence specified event 
note illustrates translation contingency rule conceptual level 
implementation mechanism force abort rule action execution needed part system 

defined event event modifier developed language supports complex events needed model non traditional applications 
part language supported database temporal explicit periodic aperiodic events 
constructs available snoop contingency plans required time constrained rules supported 
introduced notion parameter contexts detecting computing parameters composite events 
notion event modifiers enables provide mapping events conceptual level physical internal level changing rule specification 
show contingency plan includes time constraints transformed eca rules stepping outside framework proposed 
developed algorithm detecting composite events computing parameters parameter context 
language compares events supported related efforts event specification including postgres starburst adam ode sybase :10.1.1.50.3821
ode sentinel provide different sets operators event specification 
event detection techniques approaches different ode uses finite automata uses petri nets sentinel uses event graphs 
notion parameter contexts restrict participating events composite event unique snoop 
operators similar ones snoop fundamental differences approaches event specification 
eca rules ode uses ea event action rules conditions specified part events masks 
conditions formed parameters event addition shared data separation event condition specification provides extensibility clear understanding event condition action 
system part optimization create masks part rule optimization events conditions actions portions rule 
furthermore granularity coupling mode specification see details restricted event conditions combined 
furthermore merging conditions events severely restricts extensibility system 
event detection usually embedded system adding deleting requires recompilation system 
hand conditions actions modified recompiled dynamically loaded system 
provides great user extensibility 
differs snoop support monitoring intervals petri nets event detection 
emphasis systems rules event specification 
event specification language snoop context active chakravarthy mishra data knowledge engineering database language adapted event driven applications robotics planning 
current research focuses efficient detection complex events various parameter contexts object oriented data model 
developed algorithms event detection parameter contexts techniques concurrent rule execution 
evaluating adequacy snoop planning air traffic control applications 
acknowledgments supported part national science foundation research initiation iri part office naval research navy command control ocean surveillance center division 
ms critical comments initial draft 
anonymous reviewers valuable suggestions 
chakravarthy new perspective rule support object oriented databases proc 
int 
conf 
management data washington 
may 
ceri widom deriving production rules incremental view maintenance proc :10.1.1.50.3821
th int 
conf 
large data bases barcelona catalonia spain sep 
chakravarthy research project active time constrained database management final report technical report xerox advanced information technology cambridge ma aug 
chakravarthy 
kim anatomy composite event detector proc 
th int 
conf 
large data bases 
chakravarthy mishra snoop expressive event specification language active databases technical report uf cis tr university florida cse gainesville fl march revised extended version uf cis tr 
colton replicated data distributed environment jan presentation pdis conference san diego ca 
bowman transact sql user guide 
document sybase 
dayal buchmann mccarthy rules objects knowledge model active object oriented database management system proc 
nd int 
workshop object oriented database systems bad am stein germany sept 
diaz paton gray rule management object oriented databases unified approach proc 
th int 
conf 
large data bases barcelona catalonia spain sept 
forgy rete fast algorithm pattern object pattern matching problem artificial intelligence 
dittrich events object oriented database system proc 
st int 
conf 
rules database systems sept 
dittrich detecting composite events active databases petri nets proc 
th int 
workshop research issues data engineering active database systems feb 
gehani jagadish ode active database constraints triggers proc 
th int 
conf 
large data bases barcelona catalonia spain sep 
chakravarthy mishra data knowledge engineering gehani jagadish shmueli event object oriented database proc 
int 
conf 
management data san diego ca june 
hsu ladin mccarthy execution model active data base managment systems proc 
rd int 
conf 
data knowledge bases washington 
jun 
software bedford ma 
ddl manual version 
event detection supporting active capability oodbms semantics architecture implementation master thesis database systems center cis department university florida cse gainesville fl march 
mishra snoop event specification language active databases 
master thesis database systems center cis department university florida cse gainesville fl august 
stonebraker integration rule systems database systems ieee trans 
knowledge data eng 
oct 
widom finkelstein set oriented production rules relational database systems proc 
acm sigmod may 
shin rim received degree electrical engineering indian institute science bangalore india 
re ph degrees university maryland col park respec tively 
currently associate professor computer formation sciences department university florida uf gainesville 
current research active real time data bases adaptive databases query optimization multi media databases 
prior joining uf worked computer scientist computer america cca cambridge ma member technical staff xerox advanced information technology cam bridge ma 
published papers refereed journals conference proceedings 
tutorials number database topics active real time distributed heterogeneous databases north america europe asia 
ra currently senior engineer communica tions systems berkeley cali 
prior position worked senior software analyst mapping science division huntsville alabama 
received degree computer engineering institute technology science india ms degree computer science university florida gainesville florida 
research interests include distributed systems geographical information systems 
