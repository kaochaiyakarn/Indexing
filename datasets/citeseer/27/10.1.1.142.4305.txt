international conference computer systems education bangalore type safe composition object modules banavar gary lindstrom douglas orr department computer science university utah salt lake city utah usa describe facility enables routine type checking linkage external declarations de nitions separately compiled programs ansi primary advantage server style type checked linkage facility ability program composition object modules suite strongly typed module combination operators 
programmability enables easily incorporate programmer de ned data format conversion stubs link time 
addition linkage facility able automatically generate safe coercion stubs compatible encapsulated data 
research sponsored advanced research projects agency dod monitored department navy ce chief naval research number 
views contained document authors interpreted representing cial policies expressed implied advanced research projects agency government 
contact author banavar computer science university utah salt ut usa mail banavar cs utah edu phone fax 
widely agreed strong typing increases reliability ciency software 
compilers statically typed languages traditional non integrated programming environments guarantee complete type safety compilation unit units 
longstanding widely available linkers compose separately compiled units matching symbols purely name equivalence regard types 
common denominator linkers accommodate object modules various source languages simply ignoring static semantics language 
commonly object le formats designed incorporate source language type information easily accessible manner 
perform type checking object modules routine link time activity 
technique characterized design speci language type systems system wide linker ii programmed link time control individual symbols object modules iii style name accomplish complete type safety compilation units see section 
utilization standard debugging information generated compilers type checking 
describe detail realization steps ansi crucial enabler facility ability resolve inconsistencies compiled object modules link time 
existence link time type errors mean program source les need modi ed recompiled may possible pre compiled libraries 
programmer control correcting link time type errors provided existing programming facilities omos dynamic linker 
instance consider case type declaration translation unit match de nition 
usually xed uniformly renaming declaration uses match intended de nition name ii case names match types introducing new declaration match de nition binding renamed original declaration type conversion function 
linkage facility easily supports transformations 
type error corrected simple transformations object modules indicate serious error design modules involved 
link time type checking facility permits adapt utilize full expressive power language type systems better suit modern persistent distributed heterogeneous environments 
example structural typing applied languages ansi name typing 
pure name typing problem persistent distributed environments data types migrate outside program originally created lead matching names may programmer intended meaning 
argues structural matching aggregate types similar modula member order type signi cance names 
furthermore programmable linkage facility enables incorporation automatic user de ned conversion routines encapsulated data 
automatic conversion postulate safe adaptability rules converting built data types language de nition conjunction characteristics particular hardware platforms 
utilize rules automatically generate data conversion stubs link time 
importantly programmer de ned conversion stubs easily incorporated link time 
opens possibility programmer controlled data evolution conversion heterogeneous data formats arising di erent languages hardware architectures 
provide ability oftype systems designing typechecking facility extension objectoriented framework 
framework contains generic type system related abstractions named types function types record types specialized inheritance implement type domain speci languages 
sections describe detail type checking object modules generated compiling ansi programs 
section introduces notion modules interfaces section brie describes object server omos section discusses essential aspects type system ansi give implementation details discuss related conclude 
object modules interfaces refer ansi program source object le module consisting set attributes order signi cance 
attribute le level declaration name associated type extern int le level de nition name data storage function binding 
type de nitions struct de nitions typedef attributes module 
interface module consists name type declared de ned tuples attributes module 
context type checking object module interfaces attributes match name 
matching attributes single attributes match interfaces type compatible 
notion type particular module combination operation performed informally described 
linker formal model modules proposed achieving ne level control individual attributes object modules 
brie object modules combined suite module combination operators originally conceived describe facets inheritance object oriented programming 
gives primary operators informal semantics type rules 
operators provide control aspects visibility sharing individual attributes modules 
power model lends object module linkage brie section described detail original implementation type omos linker described 
current ort incorporates rules strongly typed module model illustrates applications 
semantics common module operator merge 
simple example module operator consider 
gure order model languages support ned overloading model extended include ordinal value tuple signi cant attribute matching 
compiled module provides de nition function consider case programmer creates compiles module intention de nition performing merge incorrect presumption returns int 
untyped common linkage merge legal linker interfaces type compatible merge operation 
say programmer returns desired int value component returned structure 
traditionally order compatible programmer modify source code module extensively available recompile 
course adversely ect combination modi ed module modules 
alternatively model exible link time module adaptation adapted get desired effect constructing stub module 
consists new declaration matches de nition stub function extracts desired value structure returned modi ed version obtained module expression rename stub merge merge ed get originally desired ect 
omos linker section describe linkage facility object meta object server omos 
omos linker loader designed provide dynamic linking loading facility client programs module combination instantiation 
omos implements persistent hierarchical namespace unix directory hierarchy leaf nodes object modules les meta objects 
meta objects operator semantics typing merge combine 
matching de nitions disallowed de nition subtype matching declaration 
override merge resolve matches favor right operand 
merge right operand de nition subtype matching left opnd 
de nition 
restrict unde ned 
de ned 
freeze static 
de ned 
hide attribute private 
de ned 
rename rename uses 
exist 
copy attribute named 
de ned exist 
informal semantics typing module operators module module module struct struct int extern int int 
void bar int foo extern struct struct int stub 
return 
modules composed expression rename stub merge merge linkage adaptation named placeholders modules speci ed module combination expressions 
omos essentially provides level indirection named omos entity actual implementation module instance loaded client 
clients may directly load named module implementations generate new modules combining modifying existing ones 
facility basis system program execution shared libraries dynamic loading simple modules 
expressions specifying module combination encoded scripting language lisp syntax 
expressions consist primarily operations manipulating modules module namespaces shown 
additionally omos supports operations constructing object module program source code specializing implementation module library vs ordinary module 
operands module expressions may executable code data fragments module expressions named meta objects 
omos active entity server capable performing sophisticated module manipulations instantiation module 
evaluation module expression potentially produce di erent results time 
omos operations implement program monitoring reordering enact program transformations operations module expressions 
example monitoring program omos involve extracting transforming expression generates program de ned procedure transparently wrapped outer routine monitors entry exit pro cedure 
shows module operations wrap procedure module automatically generated routine 
note illustrates adaptation service provider module showed client module adaptation 
process wrapping procedures enhanced module type information 
wrapper procedure constructed signature identical wrapped procedure simple language constructs propagate caller arguments wrapped routine 
type information available cases routine dened number arguments necessary machinedependent wrapper preserve pass call frame knowledge contents 
omos capable performing sophisticated manipulations invocation caches results operations avoid re doing unnecessarily 
practice combining caching linker system object loader gives omos exibility implementations deems necessary re ect updated implementation shared module clients 
type system concludes general discussion linkage module manipulation 
order ascertain type safety modules combined module type rules shown informally built linker requires knowledge type system type domain type equivalence subtyping base language ansi section describes relevant type system ansi type domain type equivalence enhancements type checking compilation units structural typing subsumption 
type domain ansi consists basic types primitive types int float enumerated types ii derived types function types struct union types array pointer types iii typedef ed names 
speci ers types augmented type quali ers const volatile storage class speci ers auto register static extern 
type quali er volatile concerns optimization relevant 
quali er const explicitly dealt section 
storage class speci ers auto register relevant may functions interested le level declarations de nitions 
storage speci er extern indicates attribute declaration non extern attributes considered de ned 
storage speci er static le level attribute gives internal linkage attribute viewed having subjected hide module operation 
similarly attributes subjected hide link time programming regarded having converted static storage class fact 
permits calls functions declared module 
call undeclared function module results implicit le level declaration extern int 
type equivalence type equivalence ansi single translation unit extensions type checking translation units 
rationale modi cations 
aggregate types struct union name equivalence weak module module automatically generated extern short short extern void log enter char extern void log exit char void short short short short log enter short short log exit 
return module expression restrict merge hide wrapping routine monitor execution type equivalence translation unit equivalence translation units primitive type name equivalence function type structural parameter types signi cant enum type name equivalence structure name tag equivalence tag types structural tag member order union type unique member names signi cant pointer type equivalence target types array type equivalence element types eq typedef ed name typedef ed type typedef name equivalence type equivalence ansi applied outside single translation unit explained 
adopt conservative structural typing regimen names order types members signi cant 
retain signi cance aggregate tags application speci semantic content 

typedef ed names application speci semantic content adopt strict name equivalence 
furthermore type speci ers implied short implies short int types equivalent 
type quali er const signi cant equivalence distinguishes read variables read write variables 
subtyping module operators merge override utilize subtyping rules type checking combination 
base language ansi notion subtypes subtyping considered restricted type equivalence 
module composition exible retroactively formulate subtyping rules consistent language de nition 
ansi language speci es safe conversion rules certain primitive arithmetic void long double double long int int float long unsigned int unsigned int short int short unsigned int bit field enum signed char unsigned char sizeof short sizeof int sizeof long sizeof float sizeof float sizeof double sizeof long double subtyping primitive datatypes data types float double 
said safe values type represented values loss precision change numerical value 
compilers usually expected support safe conversions dened language governed hardware characteristics 
safe conversion rules thought rules turn provide basis formulating subtype rules primitive arithmetic types 
shows data type sizes partial order subtypes hp series machines 
instance avalue type short safely coerced value type float platform loss precision change numerical value 
ask rules exploited type checking attributes translation units 
consider le level variable declarations 
variables evaluators expressions return values acceptors expressions receive values di erent contexts 
expressions evaluators replaced expressions types subtypes original expressions acceptors replaced expressions types supertypes original 
result subtyping variables restricted type equivalence 
consider le level read const variables 
subtyping involving type quali er const described follows non const type subtype non const type const subtype const subtype const const example declaration extern const float translation unit considered subsumed de nition short 
unfortunately case size layout formats various primitive data types certainly incompatible 
certain cases enum types compilers usually optimize layout packing fact enum int utilized 
translation unit subsumption rules applied compiler complete knowledge layout usage generate appropriate conversion access code 
similar arguments hold subtyping constant user de ned aggregate data types struct union translation units 
example struct shorts considered subtype const struct const floats short subtype const float 
furthermore unions discriminated member access type checked runtime 
example union short component read accessed supertype union const short const float component translation unit way supertype accessor know run time union contains short value float value 
result subtyping read variables restricted type equivalence 
arguments formulated show subtyping pointer types restricted type equivalence 
consider subtyping function types 
subtyping function types contravariance 
function type subtype number arguments return type input argument types supertypes corresponding ones 
rule pass function actual parameters subtypes formal parameters function de nition 
subtyping function types unspeci ed variable number arguments require subtype number explicitly speci ed supertype proper relationship 
rule translation units compiled function amount space allocated input parameters exactly size expected types format expected exactly speci ed 
surprisingly useful subtyping rules discovered existing language direct application type checking translation units 
crucial observation useful subsumption rules utilized data encapsulated functions stubs perform appropriate coercion data types inserted combined modules link time 
feasible stub functions compiled utilize data format conversion knowledge compiler uses translation unit 
applying stub technique global data feasible involves initializing global variables non constant values illegal ansi function types lend particularly technique performance function calls ected indirection performance data access 
unreasonable impose requirement users encapsulate data foresee accessed supertypes 
linker automatically generates coercion stubs functions primitive type conversions shown 
example type adaptation language de ned subtypes consider 
mentioned earlier type short subtype float 
de nition function module contravariance declaration function module 
directly merged general calling sequence compatible de nition expecting input oating point register integer register 
remedied rst combining automatically generated stub module incorporates safe coercions performing desired merge shown gure 
incorporated comprehensive subtyping model including structural module module module automatically generated short float extern float short extern short float 
void float stub short float return float float modules combined expression rename stub merge hide stub merge automatic data coercion language rules record subtyping member name type order signi cance example shown 
emphasized technique applies input output parameters functions coercion stubs automatically generated account function subtyping 
technique type conversion stubs generalized illustrated provide general facility incorporate user de ned stubs link time arbitrary data format conversion 
gure module comprises user de ned stubs 
implementation usage details ideally wewould compilers generate object modules self describing format information source language machine architecture interface packaged object module readily accessible format 
far reality closest approximation object le compiled debugging les compiled debugging option contain type information compiled debugging option contain information necessary type checking linkage types local variables line numbers 
instructs compiler generate type information standard encoded format 
conceptually simple actual process extracting type information generated debugging information technically challenging prototype involved steps 
gnu compiler gcc generate debugging information extern symbols debugging normally performed executable les external resolved 
solve ed back generate debugging information symbols 
accessing sections object le contain debugging information stab cygnus binary file descriptor library parse format debug strings yacc lex generated parser 
implementing framework embodies formal module model brie described section 
abstractions classes framework implement thetype rules discussed previous section 
instance framework class implements partial order primitive types introduced 
framework class called interface implements type rules module operations 
parser mentioned previous paragraph instantiates appro module module module automatically generated struct struct struct short float short float float extern struct struct struct float 
void 
extern struct struct stub struct struct struct struct ret ret float return ret modules combined expression rename stub merge hide stub merge automatic conversion structs structural subtyping module module module extern extern 
void stub value return 

modules combined expression rename stub merge merge programmer de ned data conversion priate classes framework create interface object module 
type checked linkage facility source programs currently written ansi function declarations speci ed new style prototypes 
furthermore usage header les minimized explicit declarations external functions provided 
programs type checked link time re compiled modi ed compiler debug option 
legitimate concern size object les result inclusion debugging information 
size object les increase signi cantly due debugging information problem exacerbated inclusion huge library header les 
solution problem typechecking link time necessary include header les traditional way 
programs explicitly declare prototypes external library functions called 
discussion disadvantages header les traditional manner insection 
related integrated development environments ide strongly typed languages ei el undoubtedly utilize mechanisms type checking separately compiled modules complete knowledge control source object modules 
di ers ide provide systemwide linkage attempts typecheck combined modules independent language processors 
furthermore programmability linker enables ne tuning compatibility possibly heterogeneous object modules link time 
header les longstanding attempt type safety separate compilation 
annotated manual page explains inadequacy header les follows 
tried ensure consistency separately compiled programs controlling information compiler header les 
approach works ne point involve extra linguistic mechanisms usually error prone costly need programs addition linker compiler know detailed structure program 
including header les clearly modular error prone explicitly declare expected external functionality library functions linker check consistency link time correct inconsistencies programming 
objective enabling type safe linkage constraints existing linkers stroustrup describes mechanism encoding functions types input arguments 
mechanism inadequate purposes certain classes type errors detected page variable types function return types encoded ii extended deal structural typing aggregate types scale arbitrarily large types large structs iii want type checking useful adaptation link time utilize sophisticated linker technology 
berkeley pascal compiler pc similar ort employs debugging information check type consistency separately compiled modules 
compiler routinely generates type information object modules binding phase compiler check consistency delegating actual linking ld 
crucial advantage approach form type checking controlled programmable link time activity 
plethora literature related stub generation 
system representative automatic stub generation programming heterogeneous environment 
packages heterogeneous modules utilizing programmer de ned speci cation interfaces execution environments specied common module language 
packaging process involves generation client server stubs handle module interconnection data type coercion dynamically 
technique di ers enable combination precompiled object modules automatic extraction interfaces link time programming 
ongoing currently completing implementation look forward get experience atype safe linkage facility 
acknowledge shift traditional cycle programming may required result programmable typechecking linker 
automatically generating stub functions varieties type compatible functions considerably hard 
example generating sensible stubs function calls involving parameters pointer parameters somewhat di cult currently worked 
foresee applications type safe linkage facility 
immediate plan extend technique apply languages type systems signi cantly complex simple type system furthermore type equivalence subtyping rules established programming languages facility enables multilingual programming 
link time type checking module combination opens possibility expressive type systems 
current status static type systems languages unable deal example polymorphic inheritance operators software engineering applications 
currently process extending omos include small lisp interpreter replace special purpose module expression language 
change allow conditional processing modules de nition functions addition producing interface omos allow subsume role system linker 
programmable linkage facility separately compiled ansi object modules 
programming model linker formal notion modules composition suite strongly typed operators 
design type system ansi linker typecheck composition extracting interfaces object modules compiled debugging information 
furthermore automatically generate conversion stubs compatible encapsulated types permit easy incorporation arbitrary user de ned type conversion stubs link time 
demonstrated powerful exible typesafe linkage facility 
acknowledgments thankful robert mecklenburg jay lepreau numerous useful comments pete je rey law sharing knowledge inner workings current compilers linkers 
insights support tim moore benny yih mach shared objects project participants gratefully acknowledged 
roberto amadio luca cardelli 
subtyping recursive types 
acm transactions programming languages systems september 
banavar gary lindstrom 
framework module language processors 
computer science department technical report uucs university utah march 
bershad anderson lazowska levy 
lightweight remote procedure call 
association computing machinery transactions computer systems february 
birrell nelson 
implementing remote procedure calls 
association computing machinery transactions computer systems february 
gilad bracha 
programming language jigsaw mixins modularity multiple inheritance 
phd thesis university utah march 
technical report uucs pp 
kim bruce 
paradigmatic objectoriented programming language design static typing semantics 
technical report cs williams college january 
john callahan james 
packaging system heterogeneous execution environments 
ieee transactions software engineering june 
steve chamberlain 

free software foundation contributed cygnus support march 
berkeley software distribution 
unix programmer supplementary documents 
university california berkeley california april 
margaret ellis bjarne stroustrup 
annotated manual 
addison wesley reading ma 
brian kernighan dennis ritchie 
programming language 
prentice hall englewood cli nj 
lyon 
sun remote procedure call speci cation 
technical report sun microsystems 
julia jim david mackenzie 
debug format 
free software foundation contributed cygnus support 
bertrand meyer 
ei el environment august 
ed 
greg nelson 
systems programming modula 
prentice hall englewood cli nj 
douglas orr john bonn jay lepreau robert mecklenburg 
fast exible shared libraries 
proc 
usenix summer conference pages cincinnati june 
douglas orr robert mecklenburg 
omos object server program execution 
proc 
international workshop object oriented operating systems pages paris september 
ieee computer society 
available technical report uucs 
douglas orr robert mecklenburg peter jay lepreau 
dynamic program monitoring transformation omos object server 
proceedings th hawaii international conference system sciences pages january 
available technical report uucs 
bjarne stroustrup 
type safe linkage 
usenix conference 
satish thatte 
automated synthesis interface adapters reusable classes 
symposium principles programming languages january 
