fast text searching regular expressions automaton searching tries ricardo baeza yates university chile santiago chile gaston gonnet informatik zurich switzerland 
algorithms efficient searching regular expressions preprocessed text patricia tree logical model index 
obtain searching algorithms run logarithmic expected time size text wide subclass regular expressions sublinear expected time regular expression 
algorithm complexity 
categories subject descriptors data structures analysis algorithms problem complexity information storage retrieval information search retrieval pattern recognition applications text processing general terms algorithms additional key words phrases digital trees finite automata regular expressions text searching 
pattern matching text searching important components problems including text editing data retrieval symbol manipulation 
problem consists finding occurrences pattern long string text 
important variations pattern matching preprocessing preprocessing text building index language specify query 
interested preprocessing case query specified regular expression 
formally text string regular baeza yates partially funded university waterloo institute computer research province ontario 
authors addresses baeza yates department computer science university chile blanco santiago chile mail dcc uchile cl gonnet informatik eth zurich switzerland 
permission digital hard copy part personal classroom granted fee provided copies distributed profit commercial advantage copyright notice title publication date appear notice copying permission association computing machinery acm copy republish post servers redistribute lists requires prior specific permission fee 
acm journal acm vol 
november pp 

baeza yates gonnet expression query problem consists finding short obtaining information location occurrence specifically longest exists 
formally find position 
example occurrence defined fulfills condition 
number occurrences pattern text 
formally number possible values previous category 
locations pattern occurs set possible values 
general problems complexity 
interested starting positions match find shortest string matches position 
assume member 
answer trivial values possible 
traditional approach searching text matches regular expression finite automaton recognizes language defined regular expression thompson text input 
main problems approach general text processed giving algorithm running time linear size text rivest 
applications unacceptable 
automaton deterministic construction time number states exponential size regular expression hopcroft ullman 
crucial problem practice size query typically small treated bounded constant 
results searching strings sets strings patterns don cares classes symbols see gonnet baeza yates chapter new results time complexity searching regular expressions published 
algorithms achieve sublinear expected time search regular expression text constant logarithmic expected time restricted regular expressions 
main idea algorithms simulation finite automaton query digital tree patricia tree text index 
run automaton paths digital tree root leaves stopping possible 
time savings come fact edge tree traversed edge represents pairs symbols places text 
exact average case analysis simulation interesting right 
organized follows section gives background necessary rest 
sections algorithms restricted classes regular expressions 
section gives main result algorithm search regular expression expected time analysis 
section gives heuristic optimize generic pattern matching queries particular regular expressions 
preliminary version fast text searching regular expressions baeza yates gonnet results part baeza yates 

preliminaries 
notation 
denote alphabet set symbols 
string alphabet finite length sequence symbols 
empty string string symbols 
strings xy denotes concatenation ifw xyz string prefix suffix length string number symbols contiguous sequence letters string called substring 
usual definition regular expressions re short defined operations concatenation union star kleene closure hopcroft ullman 
denote symbol ambiguity clearly resolvable context 
denote zero occurrence 

denote finite closure 
regular languages query domain regular languages represented regular expressions 
main motivation done part new oxford english dictionary oed project university waterloo main problem size dictionary 
context interesting queries may expressed regular expressions 
example queries oed appendix regular languages accepted deterministic dfa nondeterministic nfa finite automata 
standard definition finite automata hopcroft ullman 
simple algorithm aho regular expression constructs nfa accepts ino time space 
algorithms convert nfa nfa transitions states dfa states worst case hopcroft ullman 

text databases 
text databases classified update frequency static dynamic 
static text suffer changes update frequency low 
static databases may new data added considered static 
examples static text historical data changes dictionaries case interested 
type database worthwhile preprocess text build indices data structures speed query time 
preprocessing time amortized time text searched data changes 
possible characterization static databases updating index done discrete times larger query response time example day year 
case searching oxford english dictionary 
hand dynamic text text changes frequently justify preprocessing example text editing applications 
case search algorithms scan text sequentially efficient algorithms update index 
baeza yates gonnet text viewed long string data 
text little structure applications wish process text concern structure 
gonnet term unstructured database refer type data 
examples collections dictionaries legal cases articles wire services scientific papers text structured sequence words 
word string include symbol special separator set 
example space usually element set 

logical index text 
assume text searched single string padded right infinite number null special characters 
suffix semi infinite string knuth gonnet sequence characters starting position text continuing right 
example text traditional approach searching regular expression possible sistrings traditional approach searching traditional approach searching traditional approach searching approach searching regular sistrings starting different positions different 
guarantee semi infinite string prefix text unique text symbol appears knuth 
sistrings unambiguously identified starting position aho position trees 
result lexicographic comparison sistrings text sistrings positions 
introduce text index binary digital tree binary trie gonnet baeza yates constructed set sistrings text 
particular class tries 
theoretical model practice space 
discuss index implemented efficiently practice 
tries recursive tree structures digital decomposition strings represent set strings direct searching 
tries invented de la name suggested fredkin information retrieval 
alphabet ordered lexicographically ordered tree 
root trie uses character children root second character 
remaining subtrie contains string string position stored external node 
shows binary trie binary alphabet string inserting sistrings start positions 
case represented starting position text 
height trie number nodes longest path root external node 
length path root external node fast text searching regular expressions fig 

binary trie external node label indicates position text sistrings 
bounded height trie 
average height trie logarithmic square integrable probability distribution devroye 
random uniform distribution log log binary trie containing strings 
main disadvantage plain tries number internal nodes worst case 

practical aspects 
section briefly discuss implement binary trie practice 
possible solution reduce number internal nodes patricia tree 
patricia tree morrison trie additional constraint single descendant nodes eliminated 
counter kept node indicate bit inspect 
sistrings index external nodes positions text internal nodes 
internal node consists pair pointers plus counters 
space required 
applications necessary store possible sistrings 
example may sufficient store sistrings start word 
reduces space factor proportional average word size large databases may significant saving 
note change binary representation underlying alphabet typically ascii 
possible build index time denotes height tree 
tries expected height patricia tree logarithmic height binary trie 
expected height patricia tree log log 
refer reader gonnet baeza yates updated algorithms patricia tree 
name acronym practical algorithm retrieve information coded 
baeza yates gonnet fig 

prefix searching 
complete prefix trie words abb abd 
trie built sistrings string called suffix tree aho 
similarly patricia tree called compact suffix tree 
compact suffix tree maintaining bit inspect pointers piece text represent collapsed path 
disadvantage compact suffix trees general need space internal node 
random trie independent strings different random suffix tree dependent strings general models equivalent symbols uniformly distributed apostolico szpankowski 
complexity cases suffix tree trie apostolico szpankowski 
simulation results suggest asymptotic ratio heights converges szpankowski 
applications patricia trees need space 
tries simulated efficiently suffix arrays called pat arrays gonnet manber myers 
suffix array just stores leaves trie lexicographical order text contents 
pointer simulated log time binary searches 
case binary alphabet 
results valid suffix arrays overhead 

searching set strings efficient searching sistrings having prefix done patricia tree knuth 
search string word sequence words start root tree searched string 
search may skip bits final comparison actual text needed verify result necessary compact suffix trees mentioned 
search ends inside tree subtree rooted inspected node contains complete answer see 
search string extends limits tree position text matches 
search done string steps 
similarly build tree reversed text sistrings left suffix searching 
extend prefix searching algorithm case finite set strings 
simplest solution prefix searching member set 
improve search time recognizing common prefixes query 
fast text searching regular expressions complete prefix trie cpt trie set strings truncated paths word corresponds complete path trie word prefix word stored trie 
words search sufficient find occurrences shows example 
note cpt automaton recognizes set strings final states nodes 
algorithm simulates automaton tree trie 
extend concept sections 
new searching algorithm construct complete prefix trie query binary alphabet 
traverse simultaneously possible complete prefix trie patricia tree sistrings text index 
follow time edge exist trie cpt 
subtrees index associated terminal nodes complete prefix trie answer 
prefix searching may skip bits traversing index final comparison actual text needed verify result 
sum lengths set strings query 
construction complete prefix trie requires time 
similarly number nodes trie searching time order 
extension idea leads definition prefixed regular expressions 

prefixed regular expressions prefixed regular expression pre short defined recursively pre denotes empty set 
empty string pre denotes set 
symbol pre denotes set 
pres denoting regular sets respectively regular expression denoting regular set expressions pres union denotes set xp concatenation symbol left denotes set xp 
pr concatenation regular expression right denotes set pr star denotes set 
example ab bc pre pre 
note regular expressions corresponding finite languages pre 
main property pre exists unique finite set words language called baeza yates gonnet table membership testing pre type query string language words proper prefix string prefix property hopcroft ullman page holds word set proper prefix word set 
words automaton recognizes pre seen graph having tree final states lie 
note size complete prefix trie linear size query 
example ab bc abb abd 
complete prefix trie set shown 
notation pre true pre denote set table gives descriptive recursive techniques test query pre find query 
cases total time needed linear size query 
search pre query algorithm search set strings query 
number nodes complete prefix trie query search time query 
formally theorem 
possible search pre query time query independently size answer 

general automaton searching section algorithm search arbitrary regular expressions time sublinear average 
simulate dfa binary trie built sistrings text 
main steps algorithm convert regular expression passed query minimized dfa may take exponential space time respect query size independent size text hopcroft ullman 
eliminate outgoing transitions final states see justification step 
may induce minimization 
convert character dfas binary dfas suitable binary encoding input alphabet 
state outgoing transitions labelled labelled 
fast text searching regular expressions fig 

simulating automaton binary digital tree 
simulate binary dfa binary trie sistrings text binary encoding step 
associate root tree initial state internal node associated state associate left descendant state bit associate right descendant state bit see 
node index associated final state accept subtree halt search subtree 
reason need outgoing transitions final states 
find shortest string matching query starting position 
reaching external node run remainder automaton single string determined external node 
adapt algorithm run patricia tree skip bits necessary read corresponding text determine validity skipped transition starting position current subtree may 
depth traversal associate automaton states trie nodes ensures space simulation 
changes algorithm suitable nondeterministic finite automata 
event node tree query active states simulation transitions handled special manner state expansion closure corresponding transition 
need query space simulation 
compromise complexity achieved non deterministic finite automaton transitions 
case nfa query states transitions hopcroft ullman 
potential exponential size dfa avoided 
average case analysis algorithm simple 
reason appendix give account proof approximate analysis presenting main results 
incidence matrix graph represents dfa 
suppose trie perfectly balanced expected number internal nodes visited algorithm 
express step simulation hn baeza yates gonnet fig 

deterministic finite automaton 
iterating recurrence obtain log 
power matrix times vector written linear combination eigenvectors 
largest eigenvalue obtain log 
able prove regular expression final states 
total running time algorithm proportional number internal nodes visited plus time spent searching text associated final states 
number final states proportional idea show expected searching time just string bounded constant 
patricia tree balanced able show complexity balanced case 
fact appendix show theorem 
expected number comparisons performed dfa query represented incidence matrix searching trie random strings sublinear log log maxi maxi eigenvalues multiplicities mi 
appendix give time complexity nfas relation suffix trees application analysis techniques problems 
complexity patricia trees suffix arrays sub linear worst case constant factor patricia tree log factor suffix arrays included 
give example algorithm execution example 
dfa regular expression see 
suppose want search regular expression digital trie 
simulating dfa trie es input input possible paths trie algorithm stops internal nodes leaves marked 
final answer text positions subtrees leaves involved 
average case analysis example appendix corollary theorem possible characterize complexity different types regular expressions dfa structure 
example dfas having cycles length largest eigenvalue equal multiplicity proportional number cycles obtaining complexity polylog 
fast text searching regular expressions fig 

recursive definition substring graph 

substring analysis query planning section general heuristic call substring analysis plan algorithms order execution generic pattern matching problem apply regular expressions 
queries represented regular expressions query planning better automata searching 
example query followed choices 
search follow possible path index trying find possible second go text sequentially search cases useless text 
aim section find query set necessary conditions satisfied 
cases heuristic save processing time 
introduce graph representation query 
define substring graph regular expression acyclic directed graph node labelled string 
graph defined recursively rules single node labelled 
single node labelled graph built labelled node edges source nodes labelled node edges sink nodes shown 
st graph built joining sink node source node relabelling node concatenation sink label source label 
copies edge sink node source node shown 
labelled nodes connected edge 
shows substring graph query ca 
path graph represents sequence substrings pattern match 
baeza yates gonnet fig 

substring graph queries 
possible construct graph time query recursive definition 
regular expression source unique source node incoming edges 
similarly sink unique sink node node outgoing edges 
node labels path source sink substrings subset words 
example strings ca substrings subset ca sa 
label condition nonempty subset words 
words word regular set described contains labels path substrings 
explain substring graph example 
suppose query ab ef ij op uv de hi tu 
substring graph shown 
building search node labels index sistrings determining string exists text 
step requires time sum label lengths 
example number occurrences label example text sample node 
nonexistent labels remove corresponding node adjacent edges adjacent nodes recursively incoming edges outgoing edges deleted 
example remove node labelled ij adjacent edges 
reduces size query 
reduction happens practice long labels erroneous queries misspellings 
second number occurrences label obtain upper bound size final answer query 
adjacent nodes serial nodes multiply numbers parallel nodes nodes add number occurrences 
stage nodes simplified treated special way consecutive serial nodes replaced single node example lowest nodes chains parallel single node deleted leftmost node labelled fast text searching regular expressions number occurrences remaining nodes defined simplifications nodes adjacent non nodes assumed member query 
example number occurrences bounded 
similar search strategies inverted files knuth batory bound useful deciding searching strategies rest query 

final remarks shown trie patricia tree search types string searching queries logarithmic average time independently size answer 
show automaton searching trie sublinear size text average regular expression algorithm achieve complexity 
similar ideas approximate string searching simulating dynamic programming digital tree gonnet ukkonen achieving sublinear time average 
particular gonnet algorithm protein matching 
general worst case automata searching linear 
regular expressions algorithm possible construct text algorithm forced inspect linear number characters 
pathological cases consist periodic patterns unusual pieces text practice rarely 
implementation algorithm oxford english dictionary showed real queries coming users regular expressions resolved node inspections 
efficient practical purposes 
finding algorithm logarithmic search time re query open problem galil 
open problem derive lower bound searching res preprocessed text 
interesting question exist efficient algorithms bounded followed problem fixed 
solutions case see baeza yates manber baeza yates 
appendix query examples examples arise oed tags represent structure 
tag tag denote starting tags 
citations author prefix scot followed arbitrary characters works prefix discov scot discov 
tag authors titles 
citations accredited shakespeare eq lq baeza yates gonnet eq citations citation lq citation dates 
author scott denotes space 
sir scott appendix exact analysis analyze algorithm random trie independent model 
know independent model equivalent dependent model random uniform case pointed section 
initial state dfa labelled 
incidence matrix dfa hij number symbol transitions state state constant vector fi lemma 
vector expected number internal nodes visited dfa state initial state simulated binary trie random strings number states dfa 
kh proof 
state expected number internal nodes visited starting binary trie random strings expressed ni 
similar analysis expected number nodes binary trie knuth 
final states 
undefined states defined define undef 
initial conditions state introducing exponential generating functions equation obtain zn 
ni exp exp writing equations matrix functional equation fast text searching regular expressions exp hn functional equation may solved formally iteration flajolet puech obtaining exp 
easy obtain series expansion exp denotes coefficient polynomial result follows 
previous lemma obtain exact number nodes visited dfa fixed note ith element represents possible paths dfa length finish state step obtain asymptotic value 
analysis partial match queries tries flajolet puech 
fact analysis similar dfa single cycle length extend analysis dfa 
lemma 
asymptotic value expected number internal nodes visited log log log log log log eigenvalues multiplicities mt order number states mi oscillating function period constant mean value small amplitude 
show strictly 
proof 
decomposing upper normal jordan form block diagonal matrix form square matrix form ji jt baeza yates gonnet columns respective eigenvectors 
pj block diagonal matrix ji form ji kh mi mi mi mi mi mi kj convergence guaranteed fact fixed large exp exp 
asymptotic value obtained flajolet puech log log periodic function period mean value depending small amplitude 
details exact computation function mellin transform techniques refer reader flajolet puech 
asymptotic value obtained similar way mellin transform techniques obtaining log 
log log 
log 
dominant term fast text searching regular expressions include constant log log mi log mi part function highest order term inthe case eigenvalue modulus largest multiplicity 
example analysis 
dfa regular expression see 
incidence matrix state initial state state final state 
eigenvalues multiplicity 
jordan normal form matrix column eigenvector associated eigenvalue ii 
computing pj obtain 
log log log baeza yates gonnet oscillating functions period average value small amplitude 
example 
regular expression eigenvalues modulus 
solution case 
fact dfa connected final states outgoing transitions lemma gives characteristics eigenvalues lemma 
max 
proof 
decompose dfa directed graph strongly connected components cycles states state eigenvalue value 
strongly connected component irreducible nonnegative matrix incidence matrix 
matrices real eigenvalue maximal modulus positive associated eigenvector perron frobenius theorem 
eigenvalues modulus distinct roots equation 
words re 
automaton graph weakly connected row ij ik words transition state maximal eigenvalue nonnegative irreducible matrix bounded max due result schneider min min mini aii mini aij aij maxi ri ajk smallest integer ri rj 
number states transition total number states 
case min fast text searching regular expressions di 
replacing values bound maximum possible values max min si 
similar result gives lower bound max schneider 
previous lemma shows average time strictly sublinear gives upper bound largest eigenvalue bound tight example example obtain upper bound 
construct dfa visit nodes arbitrarily small 
example queries type common practice 
lemma 
expected number external nodes visited dfa 
proof 
starting state expected number external nodes binary trie visited expressed ni knuth 
final states 
undefined states defined define undef 
initial conditions state solution case order solution recurrence lemma 
total time spent dfa proportional number nodes visited internal external plus number comparisons performed check remainder single string corresponding external node 
find expected number comparisons performed dfa external node reached 
dfa outgoing transitions final states 
lemma 
expected number comparisons performed dfa searching random string length bounded constant independent 
proof 
average number comparisons random string length starting non final state expressed knuth 
final states 
undefined states defined define undef 
initial conditions state matrix form baeza yates gonnet solving iteration obtain hc hj decomposition lemma summations form jj geometric sum converges constant lemma 
constant proportional multiplicity 
norm maximum eigenvalue example possible bound worst case number comparisons exponential size query 
previous lemmas obtain main result theorem 
expected number comparisons performed minimal dfa query represented incidence matrix searching trie random strings sublinear log log maxi maxi eigenvalues multiplicities mi 
proof 
number comparisons proportional number internal nodes plus number external nodes visited 
external node constant number comparisons performed average 
nfas result holds multiplied length query query states active node 
case incidence matrix computed closure state 
similarly complexity patricia trees number internal nodes fast text searching regular expressions strictly subset equivalent trie checking text equivalent internal nodes skipped 
independent dependent models equivalent random binary tries random binary suffix trees apostolico szpankowski complexity random suffix tree 
practice compact suffix tree 
asymptotic complexity algorithm compact suffix tree asymptotic complexity algorithm complete balanced trie number sistrings order 
suffix tree equivalent compact suffix tree number nodes 
analysis technique merges matrix theory generating functions 
matrix algebra possible simplify analysis set recurrence equations 
example consider problem power 
suppose reduce problem 
particular case appears difficult solve 
writing problem matrix recurrence obtain hf recurrence solved simple iteration log 
decomposing jordan normal form obtain exact solution 
fact hide dependencies inside matrix step known summations depend eigenvalues solved 
applied technique problems solution fringe analysis type recurrence baeza yates gonnet baeza yates 
acknowledgments 
grateful helpful comments alberto apostolico wojciech szpankowski frank tompa anonymous referees 
baeza yates gonnet aho hopcroft ullman 
design analysis computer algorithms 
addison wesley reading mass apostolico szpankowski 
self alignments words applications 
algorithms 
baeza yates 
efficient text searching 
ph dissertation 
dept computer science univ waterloo waterloo ont canada 
baeza yates 
fringe analysis revisited 
acm comput 
surv 
mar 
baeza yates gonnet 
efficient text searching regular expressions 
proceedings icalp 
ausiello dezani ciancaglini ronchi della rocca eds lecture notes computer science vol 

springer verlag new york pp 

baeza yates gonnet 
solving matrix recurrences applications 
tech 
rep cs 
department computer science univ waterloo 
batory 
searching transposed files 
acm trans 

syst 

de la 
file searching variable length keys 
afips western san francisco calif pp 

devroye 
note average depth tries 
computing 
flajolet puech 
partial match retrieval multidimensional data 
acm apr 
fredkin 
trie memory 
commun 
acm sept 
galil 
open problems 
combinatorial algorithms words apostolico galil eds volume nato asi series 
springer verlag new york pp 


theory matrices vols 
chelsea publishing new york 
gonnet 
unstructured data bases efficient text searching 
proceedings nd acm symposium principles database systems atlanta ga mar 
acm new york pp 

gonnet 
efficient searching text pictures extended 
tech 
rep oed 
centre new oed univ waterloo waterloo ont canada 
gonnet baeza yates 
handbook algorithms data structures pascal nd ed addison wesley wokingham uk 
gonnet cohen benner 
matching major protein sequence database 
science 
hopcroft ullman 
automata theory 
addison wesley reading mass knuth 
art computer programming sorting searching vol 

addison wesley reading mass manber baeza yates 
algorithm string matching sequence don cares 
inf 
proc 
lett 
feb 
manber myers 
suffix arrays new method line string searches 
proceedings st acm siam symposium discrete algorithms san francisco calif jan 
acm new york pp 

morrison 
patricia practical algorithm retrieve information coded alphanumeric 
acm oct 
schneider 
bounds maximal characteristic root non negative irreducible matrix 
duke math 

paths random digital tree limiting distributions 
adv 
appl 
prob 


average height trees digital search dynamic hashing 
inf 
proc 
lett 

rivest 
worst case behavior string searching algorithms 
siam comput 

szpankowski 
generalized suffix tree un expected asymptotic behaviors 
siam comput 

thompson 
regular expression search algorithm 
commun 
acm june 
ukkonen 
approximate string matching suffix trees 
cpm padova italy june 
lecture notes computer science vol 

springer verlag new york pp 

received october revised april accepted may journal acm vol 
november 
