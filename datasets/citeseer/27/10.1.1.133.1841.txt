web odyssey codd xml victor vianu lambda san diego vianu cs ucsd edu web presents database area vast opportunities commensurate challenges 
databases web connected levels 
web sites increasingly powered databases 
collections linked web pages distributed internet tempting targets database 
emergence xml lingua franca web brings needed order greatly facilitate database techniques manage web information 
discusses developments related web viewpoint database theory 
shall see web scenario requires revisiting basic assumptions area 
sure database theory remains valid classical setting database industry continue represent multi dollar target applicability foreseeable 
web represents opportunity entirely different scale 
important juncture 
database theory retain classical focus turn inwards 
attempt take heads challenge web contribute important part formal foundations 
leave familiar reinvent 
signs journey begun 
web scenario different classical databases 
short 
classical database coherently designed system 
system imposes rigid structure provides queries updates transactions concurrency integrity recovery controlled environment 
web escapes control 
changing collection data sources various shapes forms interacting flexible protocol 
database polished artifact 
web closer natural ecosystem 
lambda abridged version title pods 
supported part national science foundation number iis 
principles column 
column editor leonid libkin department computer science university toronto toronto ontario canada 
mail libkin cs toronto edu 
bother 
tremendous need database functionality efficiently provide access data web wide range applications 
despite differences turns database remains extremely valuable effective 
design xml query schema languages heavily influenced database community 
xml query processing techniques underlying algebras rewrite rules execution plans relational counterparts 
database paradigm web success story testament robustness databases field 
traditional framework database theory needs reinvented web scenario 
data longer fits nicely tables 
self describing irregular little distinction schema data 
formalized semi structured data 
schemas available far cry tables complex object oriented schemas 
provide richer mechanisms specifying flexible recursively nested structures possibly ordered 
related problem constraints generalizing semi structured xml frameworks classical dependencies functional inclusion dependencies 
specifying requires recursive navigation nested data path expressions 
query languages differ significantly relational 
lack schema leads navigational approach data explored specific entry points 
nested structure data leads recursion queries form path expressions 
paradigms proven useful structural recursion 
query languages typically provide mechanisms construct complex answers 
resulting classes queries neat example query languages closed composition expressiveness easy characterize 
complexity queries hard evaluate relevant way traditional means query complexity logspace size web called tractable 
corollary rich schema formalisms query typechecking important issue 
development internet technology occurred rapidly initially leaving theory 
case situations practical development ad hoc principled 
happened order formal beauty emerged surprising satisfying ways 
elegant theoretical developments connection xml schemas queries tree automata 
classical theory queries languages intimately related child mother child mother name age name age name age mary roy john root person person person semi structured data graph finite model theory automata theory emerged natural formal companion xml 
interestingly research xml feeding back tree automata theory re somewhat arcane area language theory 
connection recurring theme 
section discuss data web including semi structured data xml schemas constraints 
section deals queries web 
section discusses query typechecking 
means comprehensive survey developments database theory related web 
excellent articles serving purpose referenced 
book invaluable source information databases web 
data schemas constraints discuss kinds data web mechanisms describe structure schemas constraints 
data web web fascinating target databases 
viewing web huge database queried daunting proposition 
data web irregular heterogeneous globally distributed 
lack common structure meaning difficult locate data relevant query relate information different sources 
worse web sense fictional virtual object 
blind men discovering elephant centralized repositories web data retrieve crawling small locally consistent fragments web rapidly stale 
uncertainty principle possible capture maintain consistent snapshot entire web 
radically different database framework queries full access input 
short defined input meaning querying web open discussion 
single defined notion data web 
focus specific aspects levels web find data best fits needs 
interested graph web pages hyperlinks 
wish focus xml documents available web internal structure 
alternatively interested relational database database tup tup tup tup data graph provide retrieve information databases exporting xml views interacting outside world forms providing limited access 
semi structured data xml semi structured data bare bones abstraction irregular self describing data web 
motivated applications scientific databases integration heterogeneous data 
semi structured data labeled graph 
nodes viewed objects object ids 
atomic complex 
complex objects linked objects labeled edges 
atomic objects data values associated 
intent schema data represented way yields flexible powerful formalism describing data unified manner 
shows data graph 
relational objectoriented databases represented graphs 
example database represented data graph 
note explicit distinction data schema graph 
variants semi structured data model proposed minor differences formalism 
dealer 

ad 
model honda model 
year year 
ad 


ad 
model bmw model 
ad 

dealer 
dealer ad ad model dealer xml document semi structured data model object exchange model oem introduced tsimmis project vehicle integrating heterogeneous sources 
soon followed lore :10.1.1.45.8397:10.1.1.41.3062
model unql developed university pennsylvania motivated oem model acedb graph model biological databases :10.1.1.32.3916
semi structured data models xml extended markup language originate database community 
introduced document community subset sgml 
xml sense augmentation html allowing annotating data information meaning just presentation 
xml document consists nested elements ordered sub elements 
element name called tag label 
full xml bells simplest abstraction labeled ordered tree labels nodes possibly data values associated leaves 
example xml document holding ads cars new cars shown left abstraction labeled tree right data values omitted 
emergence xml placed increased importance labeled trees capturing structure xml documents 
xml additionally provides referencing mechanism elements allows simulating arbitrary graphs semi structured data 
aspect left formal models xml xml schemas query languages take advantage 
worth mentioning xml viewed object model 
illustrated standard api xml proposed xml documents described terms document object model dom 
extensions xml dtds proposed rdf object oriented flavor see web site 
schemas schemas semi structured data 
flexibility semi structured data comes price loss schema 
schemas useful 
describe data help query allow query optimization efficient storage 
retain advantages attempts recover schema information semistructured data 
led proposals data guides representative objects :10.1.1.41.3258:10.1.1.25.9024
discussion schemas semi structured data 
schemas xml 
xml marks return schema semistructured data form data type definitions dtds 
schema languages extending dtds proposed including xml schema dsd sox relax proposals technical reports www org 
comparative presentations xml schema languages 
survey xml schema languages scope 
focus dtds useful extension allowing decouple definition structure element name 
essentially dtd extended context free grammar 
non terminals grammar labels tags elements labeled tree corresponding xml document 
terminal symbols 
sigma finite alphabet labels 
dtd consists set rules form sigma regular expression sigma rule dtd specifies label root 
xml document satisfies dtd derivation extended context free grammar 
label associated rule node labeled sequence labels children spells word example dtd consist rules ffl rules omitted root section section intro section lambda conc example labeled tree satisfying dtd intro section conc intro section section conc intro conc section intro conc dtd defines set labeled ordered trees denoted sat 
turns dtds limitations schema languages 
addressed extensions proposed state flux 
example set tree languages definable dtds closed union boolean operators 
important limitation inability separate type element name 
example consider dealer document 
dtd corresponding consist rules root dealer dealer ad lambda ad lambda ad model year model may natural car ads different structure new car ads 
mechanism dtds rules depend name element context 
overcome limitation extensions dtds provide mechanisms decouple element names types allow context dependent definitions structure 
interestingly leads closure definable sets trees boolean operations 
show way formalize decoupling names types notion specialized dtd studied similar formalisms proposed adopted restricted form xmlschema xquery 
idea necessary specializations element names type definition 
precisely specialized dtd alphabet sigma tuple sigma sigma sigma sigma finite alphabets dtd sigma mapping sigma sigma intuitively sigma provides sigma set specializations sigma note induces homomorphism words sigma trees sigma yielding trees sigma 
denote induced homomorphisms 
denote specialized dtds bold letters sigma sigma specialized dtd 
tree sigma satisfies sat 
homomorphic image derivation tree equivalently labeled tree sigma valid specialized tree valid respect dtd specialized alphabet 
example write specialized dtd distinguishing car ads new car ads dealer example follows 
sigma ad model sigma sigma fad ad new identity sigma ad ad new ad dtd sigma ffl rules omitted root dealer dealer 
ad lambda 
ad new lambda ad model year ad new model interesting basic questions arise connection xml schemas 
hard check validity xml document respect schema 
set xml documents characterized schema 
precise schema describing set xml documents 
union difference intersection sets valid documents specified schemas turn described schema 
schema computed 
discuss powerful effective tool dealing questions remarkable connection schemas tree automata 
xml schemas tree automata logic 
informally review notion regular tree language tree automaton 
tree automata devices function accept reject input classical framework complete binary tree nodes labeled symbols finite alphabet sigma equivalent variations tree automata 
non deterministic top tree automaton sigma finite set states including distinguished initial state accepting state qf computation automaton labels nodes tree states set rules called transitions 
internal node transition form 
sigma says internal node symbol labeled state left right children may labeled respectively 
leaf transition form qf sigma allows changing label leaf symbol accepting state qf computation starts labeling root start state proceeds labeling nodes trees nondeterministically transitions 
input tree accepted computation results labeling leaves qf set complete binary trees regular iff accepted top tree automaton 
deterministic non deterministic bottom automata defined equivalent non deterministic top automata 
strong connection regular tree languages logic similar string case 
regular tree languages precisely definable monadic secondorder logic mso structures representing binary trees 
regular languages finite binary trees surveyed 
prima facie mismatch dtds tree automata dtds describe unranked trees classical automata describe binary trees 
ways 
unranked trees encoded standard way binary trees 
alternatively machinery results developed regular tree languages extended unranked case described extension unranked infinite trees described 
way prove surprising satisfying connection specialized dtds tree automata precisely equivalent 
equivalence specialized dtds tree automata powerful tool understanding xml schema languages 
properties regular tree languages transfer specialized dtds including closure union difference complement decidability emptiness ptime inclusion exptime automata techniques yield algorithmic insight processing dtds 
example naive algorithm checking validity xml document respect specialized dtd exponential size document due guessing specializations labels 
existence bottom deterministic automaton equivalent specialized dtd shows validity checked linear time single bottom pass document 
efficient incremental validation xml documents tree automata 
see shortly tree automata crucial tools static analysis xml queries 
constraints constraints essential ingredients classical databases 
primary role filter invalid data useful query optimization schema design choice efficient storage access methods 
common database constraints functional dependencies fds inclusion dependencies 
surprisingly continue important semi structured data xml 
difference frameworks leads significant differences constraints specified properties 
constraints semi structured data 
constraints emerged semi structured data variants inclusion dependencies 
expressed path constraints 
viewed logical statements atoms expressions form regular expression set sigma labels data graph 
intuitively states reached path labels spell word example consider relational database representation data graph 
suppose wish state inclusion dependency 
database easily done schema 
data graph referring done specifying reached root 
done path constraint form database tup root database tup root simplicity abbreviate statement root root stands 
scenarios path constraints arise naturally 
may capture instance structural information web site collection sites cached information 
example consider paths cs department db group ullman classes cs cs department courses cs may case starting site stanford paths lead object 
path constraint holds site stanford 
similarly site cs department constraint sigma lambda stanford cs main ffl stating paths starting site cs department final label stanford cs main lead back site 
implication problem path constraints core technical issue 
example testing path query replaced simpler path query structural constraints caching information captured set sigma path constraints amounts verifying sigma 
instance suppose know path label returns source site sigma lambda 
suppose query la lb lambda executed site 
shown equivalent query simpler original particular non recursive guaranteed terminate 
turns general implication problem regular path queries decidable expspace 
shown placing bound minimum size data graphs providing counter example implication 
tractable case word constraints form single words 
implication problem word constraints ptime implication path constraints word constraints pspace 
interestingly implication word constraints reduced testing satisfiability fo sentence known decidable nexptime 
improved ptime bound obtained showing language fv sigma vg regular automaton accepting constructed ptime sigma turns complex path constraints needed situations 
example paths considered start root data graph 
useful allow defining limited scope constraints root internal node reachable global root specified path 
gives rise constraints meaning holds node reachable root path surprisingly seemingly benign extension dramatic impact earlier decidability results implication problem undecidable words single letter 
proof reduction word problem finite monoids 
constraints extensions allowing express inverse relationships takes relationship students courses inverse taken relationship courses students studied 
interaction schemas constraints studied shown schemas significant impact constraint implication problem instances problem decidable schema case undecidable schemas conversely 
constraints xml 
just semi structured data natural need express inclusion dependencies fo denotes fo sentences variables 
xml documents 
addition key constraints part various schema proposals xml schema 
types constraints arise xml documents generated databases 
xml key constraints inclusion dependencies involve data values associated leaves xml documents values attributes viewed leaf elements semi structured data inclusion dependencies refer nodes data values easily modeled nodes doing xml destroy tree structure documents 
inclusion dependencies xml expressed semi structured data path expressions extensions case 
key constraints formalized pair fp png pi path expressions 
intuitively identifies elements key constraint applies pn nodes data values collectively identify element precisely nodes reachable root paths node ei reachable path pi node fi reachable path pi values ei fi equal node 
note definition uses separate notions value equality node equality 
implication problem key constraints harder relational case involves reasoning regular path expressions recall equivalence regular expressions isolation 
restrictions path expressions leading algorithm testing implication shown 
intricate interaction xml constraints dtds 
shown satisfiability problem key foreign key constraints undecidable presence dtds np complete unary case trivial classical databases 
checking consistency dtds constraints studied normal forms xml documents discussed 
impact dtds schema formalisms constraints interesting theoretically practically remains largely unexplored 
survey constraints semi structured data xml 
constraints semi structured data discussed 
queries web classical database theory revolves theory query languages 
relational framework solid familiar ground 
queries defined computable generic mappings relational databases relations 
language complete expresses queries 
wellunderstood hierarchy languages ranging conjunctive queries relational calculus algebra datalog way complete languages 
relational calculus standard yardstick yielding notion relational completeness 
complexity classes provide language independent measure expressiveness 
web scenario foundation 
data queried moving target queries defined input 
accepted expressiveness replace relational completeness nice match query complexity classes 
query languages mix declarative navigational features usually involve limited recursion idiosyncratic forms negation 
expressiveness various languages hard characterize closed composition 
short challenging fascinating ride 
illustration impact web scenario consider query complexity 
measure complexity query posed web puzzling question 
database theory characterizing query tic terms provides cut evaluating difficulty 
order queries complexity logspace size database considered reasonable 
paradigm transfer web 
hard imagine query takes logspace standard complexity bound size web considered reasonable 
query evaluated live web cost accessing shipping information network paramount 
various attempts develop cost models take factors account 
example cost model distinguishing local remote links proposed conjunction language websql :10.1.1.11.3892
radical proposal put forward suggested web best modeled infinite graph node finite degree possibly infinite degree just computers potentially large finite memory best modeled turing machines infinite tapes :10.1.1.29.9090
model exhaustive exploration web penalized non terminating computation 
draws sharp distinction exhaustive exploration web controlled forms computation 
consider simple model queries mappings web infinite rooted graph returning subset nodes 
queries classified categories finitely computable queries evaluated finite time infinite web ii eventually computable queries non terminating queries possibly infinite answers node answer output finite time need backtrack iii non eventually computable queries 
example query finitely computable find nodes reachable root path length 
queries eventually computable finitely computable find nodes reachable root ii output root iff belongs cycle 
note query finite answer 
finitely computable 
seemingly innocuous query finite answer eventually computable output root iff referenced node 
clear classification natural finitary analog 
similar classification applied standard query languages 
relational calculus express non eventually computable queries positive fragment defined expresses eventually computable queries 
datalog languages yield surprises standard semantics stratified founded ill suited expressing eventually computable queries inflationary semantics turns naturally suited express queries advantage semantics :10.1.1.29.9090:10.1.1.121.6788
query languages query languages proposed context web vary depending target data 
languages aimed querying web hyperlink structure web pages 
languages include websql ql :10.1.1.11.3892
languages aimed semi structured data lorel unql :10.1.1.45.8397:10.1.1.32.3916
struql part strudel web site management system allows defining linked web pages views semistructured data inputs 
query language semistructured data ambient calculus modal logic mobile computation proposed 
flurry proposals xml query languages including xml ql xslt web site xql xduce quilt :10.1.1.33.2943
language xquery adopted committee standard query language xml 
survey query languages semi structured data xml scope see survey querying semi structured data 
subtleties distinguish xml queries semi structured data 
ensured output tree care taken links specified 
second output ordered tree mechanisms needed specifying desired order 
order induced bindings input tree usually default 
query languages yatl allow querying order input tree placing ordering conditions variables pattern bound sibling nodes horizontal path expressions 
expressiveness query languages xml semi structured data easy characterize 
appear mix useful ad hoc constructs declarative navigational features 
limited recursion style datalog chain queries 
common core monotonic monotonicity lost minor variations regular path expressions 
variants closed composition 
classes queries expressed languages xml semi structured data appear idiosyncratic lack robustness 
show formal framework convincingly subsumes xml languages tree transducers 
xml queries tree transducers pebble transducers 
xml query languages take trees input produce trees output 
despite diversity turns tree manipulation capabilities subsumed single model tree transducer called transducer 
provides uniform framework measuring expressiveness xml languages instrumental developing static analysis techniques 
section see transducers typechecking xml queries 
pebble transducer uses pebbles mark certain nodes tree 
transitions determined current node symbol current state existence absence various pebbles node 
pebbles ordered numbered machine place pebbles root move remove 
order limit power transducer pebbles restricted stack discipline pebbles placed tree order removed reverse order highest numbered pebble tree moved 
transducer works follows 
computation starts placing pebble root 
point pebbles tree kg pebble called current pebble node sits current node 
current pebble serves head machine 
machine decides transition information current state symbol current pebble presence absence gamma pebbles current node 
kinds transitions move output transitions 
move transitions kinds place new pebble pick current pebble move current pebble directions left right left right edge 
move specified direction possible transition apply 
move transition machine enters new state specified transition 
output transition emits labeled node move input head 
kinds output transitions 
binary output machine spawns computation branches computing left right child respectively 
branches inherit positions pebbles input communicate moves pebbles independently 
nullary output node output leaf branch computation halts 
looking global picture machine starts single computation branch output nodes 
constructed top fragment output tree computation branches continue compute remaining output subtrees 
entire computation terminates computation branches terminate 
turns transformations unranked trees finite alphabet expressed existing xml query languages xquery xml ql lorel struql unql fragment xslt expressed pebble transducers 
extend queries joins data values require infinite alphabet 
pebble transducers easily extended handle data values 
details examples 
pebble transducers generalize known formalisms 
aho ullman introduce tree walking automata 
devices single head move tree starting root 
set tree languages accepted tree walking automata included set regular tree languages long standing open problem inclusion strict 
question pebble transducers simulate bottomup transducers reduced open problem fact problems equivalent 
case strings analog tree walking automata precisely way automata known express regular languages 
string automata restricted form pebbles considered harel 
prove certain lower bounds gap succinctness expressibility automata 
similarly turns emptiness problem pebble automata nonelementary lower bound 
models 
transducer model xml queries called query automaton described 
mso study query languages xml 
query automata differ significantly pebble transducers take xml input tree return set nodes tree 
contrast pebble transducer returns new output tree 
abstractions xml languages studied connections extended transducers look ahead established 
various static analysis problems considered termination emptiness usefulness rules 
shown ranges transducers closed intersection generalized dtds defined tree regular grammars 
tree walking automata relationship logic regular tree languages studied 
computation model trees attribute grammars considered 
capture queries return sets tuples nodes input trees 
main variants considered 
expresses unary queries definable mso formulas 
second captures precisely queries definable order inductions linear depth 
equivalently queries computable parallel random access machine polynomially processors 
precise characterizations terms logic complexity suggest attribute grammars provide natural robust querying mechanism labeled trees 
remedy low expressiveness pattern languages regular path expressions guarded fragment mso equivalent mso evaluated efficiently studied 
example shown fragment mso express fo extended regular path expressions 
formal model xslt defined incorporating features modes variables parameter passing 
model computational complete simulate pebble transducers extended equality tests data values 
consequently contrary conventional wisdom xslt simulate xml ql 
feedback automata theory 
match xml automata theory promising problems 
classical formalism needs adapted extended fit needs xml 
example tree automata defined ranked trees xml documents unranked trees 
required extending theory regular tree languages unranked trees rise fertile line research formalisms unranked trees 
includes extensions tree transducers push tree automata attribute grammars caterpillar expressions 
mismatch arises fact xml documents data values corresponding trees infinite alphabets 
regular tree languages infinite alphabets studied investigations consider string case 
tree walking transducers accessing data values xml documents considered 
xml schema languages contain new constructs allowing specify flexible order constraints particular mix ordered unordered data 
xml query languages turn provide constructs specify ordering nodes answer 
aspect captured traditional tree automata transducer models 
interesting questions involve processing xml including validation respect dtds computing queries 
special interest processing streaming xml see 
formalizing require automata transducer models perform single traversal input tree depth left right order 
xml stimulating new research directions language theory trend amplify 
successful relationship symbiotic mold relational database theory finite model theory 
informative surveys logic automata theoretic approaches xml provided 
typechecking xml queries relational databases typechecking non issue standard relational query languages schema result apparent syntax query 
situation different xml 
result xml query transformation satisfies target dtd far obvious 
important question scenarios 
typical data integration user community agree common dtd producing xml documents valid respect specified dtd 
static typechecking problem input xml schema specialized dtd query output schema case sat sat related typechecking problem type inference problem input schema query compute output schema sat 
mean things 
sat sat inference algorithm computing sound clearly minimum requirement 
ideally case sat sat inference algorithm said sound complete 
note particular sound complete inference algorithm solve typechecking problem 
verify sat sat sufficient check sat sat decidable 
unfortunately sound complete type inference possible standard xml queries 
approach incomplete type inference taken xduce 
xduce types essentially specialized dtds 
recursive functions defined xml data pattern matching regular expressions 
xduce performs static typechecking functions verifying output function claimed output type 
typechecking algorithm sound complete write xduce function returns results required output type typechecker rejects 
expected general purpose language express non terminating functions 
xduce focuses making typechecker practical application writer language implementer 
similar approach taken yatl 
language semistructured data original type system unordered types 
xduce yatl admits incomplete type inference 
turns sound complete typechecking performed wide variety xml languages long query tree structure input data values 
explored pebble transducer 
discussed earlier subsumes tree manipulation core xml languages 
done means inverse type inference 
suppose input specialized dtd equivalently tree automaton output specialized dtd 
consider pebble transducer shown gamma sat regular tree language tree automaton effectively constructed typechecking amounts checking sat gamma sat decidable 
limitations approach 
complexity typechecking full generality high tower exponentials height equal number pebbles non elementary 
general typecheck variant state differs programming languages assuming input type 
ing appears prohibitively expensive 
approach restricted cases practical interest typechecking reduced emptiness automata pebbles 
pebbles quite powerful 
example typechecking selection xml ql queries joins queries extract list bindings variable occurring tree pattern reduced emptiness pebble automaton exponentially states 
limitation data values 
general presence data values leads undecidability typechecking 
example pebble transducers extended equality tests data values sitting pebbles emptiness undecidable 
approach extended restricted classes queries data value joins 
overview typechecking xml provided 
twist problem arises increasingly common scenario relational databases exporting xml views data 
queries mappings relations trees 
example silkroute research prototype enabling definition xml views relational database 
typechecking problem asks views generated database satisfy target dtd possibly specialized 
database may satisfy integrity constraints 
problem investigated abstraction query language silkroute 
general problem undecidable limits decidability established 
order meaningfully contribute formal foundations web database theory embarked fascinating journey rediscovery 
process basic assumptions classical theory revisited convincingly 
recurring technical themes 
include extended conjunctive queries limited recursion form path expressions ordered data views incomplete information active features 
automata theory emerged powerful tool understanding xml schema query languages 
specific needs xml scenario turn provided feedback automata theory generating new lines research 
important areas research left incomplete account 
addressed length surveys include data integration hidden data privacy protection cryptography workflows interactive web sites data schema mining information retrieval meta data 
web scenario raising unprecedented wealth challenging problems database theory new frontier explored 
acknowledgments author grateful serge abiteboul peter buneman frank neven luc dan suciu moshe vardi useful comments suggestions full version 
abiteboul 
querying semi structured data 
proc 
icdt pages 
abiteboul buneman suciu 
data web 
morgan kauffman 
abiteboul kanellakis 
object identity query language primitive 
jacm 
extended sigmod 
abiteboul quass mchugh widom wiener :10.1.1.45.8397
lorel query language semistructured data 
journal digital libraries 
abiteboul vianu 
procedural declarative database update languages 
proc 
acm pods pages 
abiteboul vianu 
regular path queries constraints 
jcss 
abiteboul vianu :10.1.1.29.9090
queries computation web 
theoretical computer science 
extended icdt 
aho ullman 
translations context free grammar 
information control 
alon milo neven suciu vianu 
typechecking xml views relational databases 
proc 
ieee lics pages 
alon milo neven suciu vianu 
xml data values typechecking revisited 
proc 
acm pods 
arenas fan libkin 
verifying consistency xml specifications 
proc 
acm pods pages 
arenas libkin 
normal form xml documents 
proc 
acm pods pages 
baru xml information mediation mix 
acm sigmod conf 
demo pages 
beeri milo 
schemas integration translation structured semi structured data 
int 
conf 
database theory pages 
neven 
formal model expressive fragment xslt 
proc 
dood pages 
klein murata wood 
regular tree regular hedge languages unranked alphabets 
technical report hong kong university science technology 
br klein wood 
caterpillars context specification technique 
markup languages 
buneman davidson fan hara tan 
keys xml 
proc 
www 
buneman davidson hillebrand suciu :10.1.1.32.3916
query language optimization techniques unstructured data 
proc 
acm sigmod pages 
buneman fan simeon weinstein 
constraints semi structured data xml 
sigmod record 
buneman fan weinstein 
path constraints semistructured structured databases 
proc 
acm pods pages 
buneman fan weinstein 
interaction path type constraints 
proc 
acm pods pages 
cardelli ghelli 
query language ambient logic 
proc 
european symp 
programming 
invited 
chamberlin robie florescu 
quilt xml query language heterogeneous data sources 
webdb informal proceedings pages 
chawathe garcia molina hammer ireland papakonstantinou ullman widom 
tsimmis project integration heterogeneous information sources 
pages 
christophides cluet simeon 
wrapping query languages efficient xml integration 
proc 
acm sigmod pages 
cluet delobel simeon 
mediators need data conversion 
proc 
acm sigmod conf pages 
deutsch fernandez florescu levy suciu :10.1.1.33.2943
query language xml 
www pages 
engelfriet best 
trips trees 
acta cybernetica 
fan libkin 
xml integrity constraints presence dtds 
jacm 
fan sim eon 
integrity constraints xml 
proc 
acm pods pages 
fernandez florescu levy suciu 
catching boat strudel experience web site management system 
proc 
acm sigmod conf 
fernandez tan suciu 
silkroute trading relations xml 
computer networks 
garey johnson 
computers intractability 
freeman 

tree languages 
rozenberg salomaa editors handbook formal languages volume chapter pages 
springer 
gelder ross schlipf :10.1.1.121.6788
founded semantics general logic programs 
acm 
harel 
complexity results way multi pebble automata logics 
tcs 
goldman widom :10.1.1.41.3258
dataguides enabling query formulation optimization semistructured databases 
proc 
vldb pages 
gr adel kolaitis vardi 
complexity decision problem variable order logic 
bulletin symbolic logic 
hammer information translation mediation mosaic browsing tsimmis system 
proc 
acm sigmod conf page may 
hosoya pierce 
xduce typed xml processing language preliminary report 
informal proceedings pages 
hosoya vouillon pierce 
regular expression types xml 
int 
conf 
functional programming pages 
ives levy weld 
efficient evaluation regular path expressions streaming xml data 
univ washington tech 
rep cse 
francez 
finite memory automata 
theoretical computer science 
kolaitis papadimitriou 
negation fixpoint 
proc 
acm pods pages 
konopnicki shmueli 
qs query system world wide web 
proc 
vldb conf pages urich switzerland sept 
lee chu 
comparative analysis xml schema languages 
sigmod record 
mukhopadhyay papakonstantinou 
transducer xml query processor 
proc 
vldb conf 
neven 
structured document transformations xsl 
proc 
dbpl pages 
lncs springer 
mchugh abiteboul goldman quass widom 
lore database management system semistructured data 
sigmod record 
mendelzon mihaila milo :10.1.1.11.3892
querying world wide web 
proc 
pdis conf 
milo suciu vianu 
typechecking xml transformers 
proc 
acm pods pages 
full appear special issue jcss 
nestorov ullman wiener chawathe :10.1.1.25.9024
representative objects concise representations semistructured data 
proc 
icde conf 
neumann seidl 
locating matches tree patterns forests 
proc 
foundations software technology theoretical computer science pages 
lncs springer 
neven 
extensions attribute grammars structured document queries 
proc 
dbpl pages 
lncs springer 
neven 
automata logic xml 
proc 
computer science logic pages 
springer lncs 
neven 
automata theory xml researchers 
sigmod record 
neven 
power walking querying treestructured data 
proc 
acm pods pages 
neven den bussche 
expressiveness structured document query languages attribute grammars 
jacm 
extended pods 
neven schwentick 
expressive efficient pattern languages tree structured data 
proc 
acm pods pages 
neven schwentick 
power automata 
proc 
icalp pages 
neven schwentick 
query automata finite trees 
theoretical computer science 
neven schwentick vianu 
regular languages infinite alphabets 
proc 
mfcs pages 
papakonstantinou garcia molina widom 
object exchange heterogeneous information sources 
proc 
icde conf pages 
papakonstantinou vianu 
dtd inference views xml data 
proc 
acm pods pages 
papakonstantinou vianu 
incremental validation xml documents 
proc 
icdt conf pages 
buneman davidson suciu 
programming constructs unstructured data 
proc 
dbpl 
lapp schach 
xml query language xql 
query languages workshop ql 
schwentick 
diving trees 
proc 
mfcs pages 
vianu 
validating streaming xml documents 
proc 
acm pods pages 
suciu 
xml typechecking problem 
sigmod record 
thierry durbin 
syntactic definitions acedb data base manager 
technical report mrc xx mrc laboratory molecular biology cambridge uk 
vianu 
web odyssey codd xml 
proc 
acm pods pages 
