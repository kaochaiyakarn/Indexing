webos operating system services wide area applications amin vahdat thomas anderson michael dahlin david culler paul chad yoshikawa demonstrate power providing common set operating system services wide area applications including mechanisms naming persistent storage remote process execution resource management authentication security 
single machine application developers rely local operating system provide abstractions 
wide area application developers forced build abstractions 
ad hoc approach results individual programmers implementing non optimal solutions wasting programmer effort system resources 
address problems building system webos provides basic operating systems services needed build applications geographically distributed highly available incrementally scalable dynamically reconfigurable 
experience number applications developed webos indicates simplifies system development improves resource utilization 
particular webos implement rent server provide dynamic replication overloaded web services wide area response client demands 
world wide web geographically distributed read data easy geographically distributed computing resources remain difficult access 
supported part defense advanced research projects agency national science foundation cda sun microsystems california micro novell hewlett packard intel microsoft mitsubishi 
anderson supported national science foundation presidential faculty fellowship 
dahlin supported nsf career award ccr 
information please see cs berkeley edu webos 
science division university california berkeley computer science engineering university washington seattle science department university texas austin result wide area applications require access remote cpu cycles memory disk programmed ad hoc application specific manner 
example popular services digital alta vista netscape download page geographically replicated improve bandwidth reduce latency improve availability single connection internet support tens millions users 
today replication manually managed server client side users forced poll essentially equivalent services system managers manually distribute updates replicas 
situation get worse currently predicted number internet users increase order magnitude years 
address problems building webos framework supporting geographically distributed highly available incrementally scalable dynamically reconfiguring applications 
webos includes mechanisms global naming persistent storage remote process execution resource management authentication security 
webos demonstrate synergy services simplifying development wide area distributed applications providing efficient global resource utilization 
webos framework enables new paradigm internet services 
fixed single location services dynamically push parts functionality internet computing resources way client 
dynamically reconfiguring geographically mobile services provide number advantages including better availability service specific extensions running client mask internet server failures ii better cost performance dynamically moving information closer clients network latency congestion cost reduced maintaining server control iii better burst behavior dynamically recruiting resources handle spikes demand 
example internet news services overwhelmed night presidential election framework enable services handle demand dynamic repli cation 
push distribution active components network technologies active networks java 
goal webos provide framework assist application developers utilizing programmable active network components 
overview webos effort snapshot current status implementation 
webos composed number different components 
space allowed briefly describe main ideas individual components described detail 
completed prototypes component working integrate 
goal provide platform development deployment wide area applications 
demonstrate extensible mechanism running service specific functionality client machines show allows flexible implementation name resolution load balancing fault tolerance 
second provide file system abstraction combines persistent storage efficient wide area communication patterns demonstrate simplifies implementation number wide area applications including internet chat remote compute server 
describe security infrastructure facilitates finegrained transfer rights wide area 
demonstrate utility webos substrate development wide area applications motivate describe implementation rent server application allows transparent automatic dynamic replication service wide area response client load 
rent server demonstrates power exporting common operating system abstractions wide area applications webos services simplified design implementation rent server 
rest organized discuss component webos turn 
section overview webos system components delving detail sections describe smart clients fault tolerant load balanced access web services ii webfs global cache coherent file system iii authentication secure access global web resources iv process control model supporting secure program execution mechanisms resource allocation section demonstrates framework simplifies implementation sample wide area applications 
section describes detail design implementation performance application built webos rent server 
section presents related leading section 
webos overview section provide brief overview major webos components provide wide area analogue local area operating system services simplifying geographically remote resources 
components operational current prototype 
global naming wide area services geographically distributed 
provide best system performance client application able dynamically locate server able deliver highest quality service 
webos global naming includes mapping service name multiple servers algorithm balancing load available servers maintaining state perform fail server unavailable 
operations performed smart clients flexibly extend service specific functionality client machine 
wide area file system support replication wide scale sharing webos provides cache coherent wide area file system 
webos extends wide area applications running secure name space interface caching performance existing distributed file systems :10.1.1.12.7323:10.1.1.110.7161:10.1.1.12.448
addition argue benefit integrating file system application controlled efficient wide area communication 
security authentication support applications operating organizational boundaries webos defines model trust providing security guarantees interface authenticating identity principals 
key enabling feature fine grained control capabilities provided remote processes executing behalf principals 
process control webos executing process remote node simple corresponding local operation 
underlying system responsible authenticating identity requester determining proper access rights held 
precautions taken ensure process violate local system integrity consume resources allocated local system administrators 
explicit design choice leverage functionality possible existing low level services 
example compatibility existing applications adopt ip addresses url global namespace tcp provide reliable communication ssl link level security 
naming section discuss abstraction location independent dynamic naming allows webos clients locate representatives geographically distributed dynamically reconfiguring services providing load balancing high availability 
approach consists number components 
service name mapped list replicated service representatives 
service selection decision determine server able deliver best performance evaluation dynamic non binding cope potentially bursty client access patterns 
state request content maintained perform fail service provider unavailable 
section describes limitations associated current approaches internet naming shows webos addresses limitations smart clients 
discussion focuses naming context service accessed url 
currently process generalizing techniques domains active names pieces code responsible name resolution flexibly applied different points network 
flexibility active names provide urn transcoding resource discovery applications may benefit availability code perform name translation various points distributed system 
motivate problem naming webos simple example 
user wishes access replicated web site alta vista search engine download page latest version netscape communicator 
ideally users employ single name web service system translates name ip address replica provide best service client 
ideally translation account number factors current members replicated service available performance current load server network connectivity client location network congestion client replicas 
course exact algorithm weighing factors needs application service specific 
current internet architecture impossible accurately determine listed considerations approximations utilized 
implementation attempt approach ideal loading application server specific code clients perform perform name translation 
smart clients enable extensions server functionality dynamically loaded client machine 
java portability availability major internet browsers allow distribute extensions java applets 
smart client architecture summarized 
user requests client side applet gui thread director thread request response state update nearby mirror distant mirror 
cooperating threads smart client architecture 
gui thread presents service interface passes user requests director thread 
director responsible picking service provider provide best service user 
decision service specific manner 
case nearest mirror site chosen 
typical applet code composed cooperating threads customizable graphical interface thread implementing user view service director thread responsible performing load balancing service representatives maintaining necessary state transparently mask individual failures 
interface director threads extensible service specific manner 
outstanding issue architecture choice load balancing algorithm 
smart clients impractical keep clients changes load servers 
high variability load context internet clients date information may strictly worse choices clients making random decisions 
fortunately smart clients static state information influence load balancing decision available servers server capacity server network connectivity server location client location 
load balancing algorithm service specific implement algorithm default 
service state replicated group membership load information piggy backed percentage server responses part header 
client chooses server distance client biased server load 
influence load information decayed information stale fallback random load balancing case load information stale considerations equal 
clients actively interacting service current information load balancing decisions inactive clients initially static information 
described smart client architecture provides portable mechanism fault tolerant load balanced access web services 
naive implementation java code retrieved time particular service accessed effectively doubling latency small requests 
implementation smart clients service specific java code retrieved time service accessed cached disk java object serialization 
persistent shared state webos seeks raise level abstraction largescale distributed programs manipulate shared state 
today applications share state transfer control network communication abstraction caching cache consistency security transactional updates location independence application programmers 
analogy simpler program parallel applications shared memory opposed message passing contend global cache coherent file system abstraction simplify implementation applications 
example caching cache consistency security provided prototype system webfs greatly simplified implementation internet chat remote compute engine rent server applications described 
providing abstractions diverse applications wide area network challenging 
example applications remote compute engine rent server require strong cache consistency applications internet news service may prefer weaker consistency reduce overhead ensure network failures delay updates 
focus design provide flexibility demanding applications control details key abstractions implemented 
believe approach crucial internet file system different applications different demands internet scale limited performance unreliability expensive provide stronger guarantees applications strictly require 
webfs associates list user extensible properties file extend basic properties owner permissions cache consistency policy prefetching cache replacement policy encryption policy 
properties set accessed unix ioctl system call 
currently webfs implements writer wins cache consistency protocol support traditional file access ip multicast update invalidate protocol widely shared frequently updated data files 
ip multicast widely deployed increase efficiency popular internet push applications 
believe providing ip multicast support file system interface simplify development applications 
demonstrate point implemented stock ticker application regularly distributes multicast file writes updated stock prices interested clients performing blocking read operations 
addition writer wins ip multicast updates process extending webfs support optimistic re integration deal disconnected operation endemic today internet 
webfs prototype provides caching cache consistency access control 
implemented dynamically loadable solaris file system extension interfacing vnode layer 
vnode layer upcalls user level webfs daemon file accesses cached virtual memory 
webfs uses url name space webfs daemon uses access standard web sites 
webfs allows unmodified unix programs take url url pathname syntax place conventional file names ls www mcs 
anl gov hpdc 
chose url global namespace transport wide deployment desire provide backward compatibility existing distributed applications 
preferable export namespace location independent names currently investigating combining smart proxies webfs provide urn support webfs file names 
additionally server site running webfs authenticated read write access cache consistency enabled custom extensions 
webfs day day approximately year users authors site 
publically available download successfully installed number users un affiliated authors 
performance remote file access highly dependent network connection remote site 
cost network connection subsequent transfer dominates added overhead making upcall user level 
transferred network file pages cached kernel file cache 
file transferred remote site performance cached access webfs versus cached access nfs virtually identical 
security authentication applications operating wide area susceptible variety potential attacks sophisticated adversaries 
motivate need wide area security system consider simple example user wishing run simulation 
typically simulation executed locally program run user privileges 
running simulation remotely necessary assign program set privileges necessary complete task read access input file write access output file 
confinement privileges protects users remote machine compromised simulation data may user iden private files hopefully remain secure 
provide level protection wide area security system provide fine grained transfer rights principals different administrative domains 
goal security abstraction transparently enable rights transfer 
crisis security system webos described publication overview 
validating revoking statements principal contribution crisis transfer certificates lightweight capabilities support fine grained transfer rights 
transfer certificates signed statements granting subset signing principal privileges target principal 
transfer certificates chained recursive transfer privileges 
entire chain transfers monitors validation allowing confinement rights monitor reject access principal chain transfers trusted 
transfer certificates form basis wide area rights transfer webos supporting operations delegation privilege confinement creation roles described 
crisis certificates signed authorities trusted endpoints communication channel 
certification authority ca generates identity certificates mapping public keys principals 
crisis ca sign identity certificates long timeout usually weeks identify locally trusted online agent ola responsible counter signing identity certificate transfer certificates originating principal 
endorsement period application specific typically order hours 
redundancy employed fashion offers number advantages successfully steal keys ola ca subverted ca subverted undetected ii ca usually left line certificates signed long timeouts increasing system security line entity difficult attack iii malicious ca unable revoke user key issue new identity certificate masquerade user colluding ola iv system performance improved certificates cached timeout counter signature removing need synchronous way communication common case 
transfer certificates revoked modulo timeout 
revocation exceptional events stolen keys applies common operations revoking rights remote job completion revoking rights login session user logout revoke particular privilege ola certificate informed certificate longer endorsed 
timeout period endorsed certificate expires rights described certificate effectively revoked ola refuse re endorsement certificate 
processes roles ability authenticate principals crisis requires mechanism associating privileges running processes 
crisis node runs security manager responsible mediating access local resources mapping privileges security domains 
crisis programs execute context security domain 
example login session creates new security domain possessing privileges principal successfully requested login 
security domain minimum associated transfer certificate principal local node allowing node act principal behalf subset principal privileges 
restricting rights available process detailed section 
wide area vital principals restrict rights jobs 
example logging machine principal implicitly authorizes machine local os speak principal duration login session 
convenient associate names specific subset principal privileges 
functionality achieved crisis named roles 
principal user creates new role generating identity certificate containing new public private key pair transfer certificate describes subset principal rights transferred role ola chosen principal responsible certificates 
creating new roles principals act certification authority 
principal stores role identity certificate role transfer certificate purse certificates contains roles associated principal 
authorization request securely transmitted wide area properly authenticated remaining task authorization determining principal making request granted access 
crisis employs access control lists acls describe principals groups privileged access particular resources 
file acls contain lists principals authorized read write execute access particular file 
process execution acls simple list describing principals permitted run jobs node 
determine request particular operation authorized monitor verifies certificates un expired signed public key current endorsement trusted ca ola 
doing monitor checks path trust home domain domains signing principals 
monitor reduces certificates identity single principals 
transfer certificates accomplished working back chain transfers original granting principal 
monitor checks reduced list principals contents object acl granting authorization match 
process control simplify development wide area applications webos execution processes remote nodes simple forking process local processor 
local case webos process control model addresses issues safety fairness 
local machines safety provided execution separate address space fair allocation resources accomplished local operating system scheduling mechanisms 
resource manager webos machine responsible job requests remote sites 
executing job resource manager authenticates remote principal identity determines proper access rights held 
maintain local system integrity ensure running processes interfere resource manager creates virtual machine process execution 
virtual machines interact crisis security system enforce rights restriction associated different security domains 
processes granted variable access local resources virtual machine depending privileges user originally responsible creating process 
janus create virtual machine 
processes virtual machine execute limited privileges preventing interfering operation processes virtual machines 
janus uses solaris proc file system intercept subset system calls potentially violate system integrity forcing failure dangerous operation attempted 
janus configuration script determines access rights local file system network devices 
configuration scripts set local system administrator principal basis 
webos uses virtual machine abstraction basis local resource allocation 
startup process runtime priority set system system call set maximum amount memory maximum cpu usage 
hope integrate robust policies allowing finegrained control allocation allowing webos provide quality service guarantees 
example techniques reverse lotteries flexibly allocate physical memory pages 
webos applications section provides overview applications designed webos framework 
applications completed development 
section describe detail design performance fifth application rent server 
internet chat internet chat allows individuals enter leave chat rooms converse logical room 
implementation chat rooms implemented webfs files accessed smart clients 
file system interface matched chat semantics number ways file appends reads away need send messages ii chat file provides persistent log chat activity iii access control lists allow private secure webfs encryption chat rooms 
scalability allow multiple webfs servers handle client requests single file room 
webfs server accumulates updates periodically propagates updates servers webfs group turn transmit updates local clients 
smart clients choose loaded webfs server load balancing connect alternative servers host failure network partition fault transparency 
quantify benefits available webos framework implemented versions chat identical semantics webos 
initial implementation consisted lines java code client lines code server 
webfs handle message transmission failure detection storage size chat client code reduced lines webfs interface entirely replaced lines chat server code 
main reason savings complexity replacement separate code managing communication persistent storage chat room contents single globally accessible consistent file 
added benefit common webfs interface similarly available distributed applications 
example currently implementing shared distributed whiteboard application interface 
remote compute engine sites unique computing resources supercomputer centers wish resources available internet 
webos allow remote pro grams invoked way local programs allow access files local programs 
webos functionality address number issues associated access identity requesting agents authenticated programs provided secure access private files local remote systems programs run restricted virtual machine isolated programs protect local system malicious users 
site webos provides compute access research cluster machines 
resource allocation virtual machine allows external users take advantage aggregate computing resources ensuring system developers requisite priority 
wide area cooperative cache webos build geographically distributed web cooperative cache validate design provide immediate benefit internet doing intelligent caching web content 
existing proposals hierarchical caching web suffer inability dramatically grow cache size processing power level hierarchy 
cooperative caching peer servers aggregate capacity grows dramatically distance client 
caches level existing hierarchical designs low hit rates simply increase latency clients cooperative cache successfully retrieve cached copy peer 
plan explore tradeoffs associated maintaining directories peer cache contents hints simple ip multicasts broadcasts 
webos simplifies implementation cooperative cache number ways 
smart clients determine appropriate proxy cache contact 
webfs transport cache files proxies securely share necessary private state proxies 
authentication model allows proxies validate identities client 
internet weather number sites currently attempting provide regular updates congestion latency partitions internet 
information invaluable services making placement load balancing decisions 
current efforts take network measurements centralized site making difficult measure network characteristics arbitrary sites 
addressing limitation webos framework generate comprehensive snapshots internet conditions 
implementation centralized server provides smart client applets wishing view current internet weather 
exchange weather report user implicitly agrees allow applet execute traceroute subset server determined sites transmit result back server 
results multiple sites service able construct fairly comprehensive snapshots internet weather 
rent server section describes design implementation performance rent server general model graceful scaling temporal geographic spikes client demand particular service 
particular implementation focuses web service enables overloaded servers shed load idle third party servers called surrogates webos framework coherently cache data primary server 
surrogate able satisfy requests original server including requests static dynamically generated objects data pages cgi script results 
goal implementation rent server demonstrate power unified system interface wide area resources moving service internet 
current approaches current efforts distribute server load focus distributing load fixed set machines maintained owner data distributing data proxy caches client server control 
server implementations achieve scalability replicating data fixed set servers single site domain name service dns randomly distribute requests servers 
unfortunately approach requires site purchase computing power network bandwidth satisfy peak demand 
mirror sites improve locality distribute load manual approach requires effort set mirrors maintain data consistency mirrors 
users specify mirror inconvenient yield balanced load sites 
approach running multiple servers site mirror sites allocated statically 
system maintain mirrors deal peak loads location mirrors shifted address shifts geographic hotspots 
approach distributing load caching proxies reduce server load improve network locality 
proxy groups clients send requests proxy machine 
proxy machine attempts satisfy requests local cache sending requests remote server cache supply system design 
rent server architecture 
servers periodically send load information load daemon 
response update load daemon transmits state servers 
turn servers transmit state information part header smart clients 
smart clients information determine server contact request 
load daemon notices service overloaded contacts resource manager available surrogate create server replica 
webfs securely transmit executables data files needed start server 
data 
proxies satisfy requests server caches server load network congestion reduced 
proxies conceptually agents web clients web servers 
instances provide poor match requirements overloaded services 
proxy servers cache data pages 
proxy send requests cgi scripts original server describes approach relaxing limitation 
second servers regard proxies ordinary clients proxy supply stale data clients limitations cache consistency protocols 
example importance having server controlled client controlled load distribution sites asserted proxy caches violate copyright laws storing site content 
effect proxies reducing generated advertising revenues hiding page access counts 
subsection demonstrate webos services simplify implementation application 
architecture rent server described 
smart clients load balanced access services 
periodically currently tenth response servers piggyback service state information smart clients reply header 
state information includes list servers currently providing service 
information included server geographic location estimate processing power estimate current load time period server guaranteed active 
rent server maintains information client geographic locations location sent smart clients part request load information form requests second bytes transmitted second 
rent server periodically transmits state information centralized load daemon 
load daemon currently separate process functionality rolled elected member server group 
load daemon responsible determining need spawn tear rent servers current load information client access patterns 
transmits server group state membership load information member server group turn piggy backed servers smart clients part replies described 
load daemon determines need spawn additional server determines location new rent server 
new server located close hotspots client access patterns conserve bandwidth minimize client latency policy implemented 
target machine selected load daemon establishes ssl channel surrogate resource manager 
load daemon creates transfer certificates surrogate access webfs files containing executables server internal service state cgi scripts internal database 
setup negotiation completed surrogate site builds janus virtual machine execute necessary programs case arbitrary server establish service identity surrogate 
virtual machine ensures surrogate system integrity violated buggy executable malicious server 
service executable necessary service state securely accessed cached demand webfs 
load daemon propagates identity new surrogate members server group turn transmit identity location new server smart clients 
tear surrogate accomplished client demand load daemon decides renew hops ms hops ms hops ms 
rent server experimental setup 
clients seattle berkeley austin act clients service 
fixed server measurements single server exists seattle site 
rent server measurements system begins single seattle server additional servers spawned berkeley austin response client load 
leases surrogate 
load daemon removes surrogate appropriate acl 
performance demonstrate power dynamic resource recruitment available approach measure performance rent server placed heavy synthetic load 
measurements preliminary system ready production deployment measurements section suggest refinement model potentially lead improved wide area web service 
experiments conducted wide area depicted 
sun ultra workstations seattle berkeley austin acting clients web service 
client continuously requests 
initially single server located seattle running apache sun ultra workstation 
described surrogate sun ultra available berkeley austin demonstrate utility rent server 
machines run solaris 
depicts relative connectivity sites measured traceroute ping weekend night 
reported numbers demonstrate best case connectivity information 
shown connectivity berkeley seattle quite ms round trip latencies reported ping 
packets traveling berkeley austin ms latency approximately packets dropped 
connectivity seattle austin quite poor ms latency packets dropped 
experiment client machine starts smart client processes continuously retrieve copies kb html file 
results tests summarized 
graphs plot average latency seconds function elapsed time seconds 
shows performance case single server available seattle 
graph shows performance clients berkeley seattle quite poor averaging approximately seconds retrieve kb html file seattle server 
clients austin suffer worse performance widely varying average latency seconds 
poor performance berkeley seattle results overloading single server seattle 
performance austin clients relative berkeley seattle clients explained poor network connectivity austin server located seattle 
shows improved performance available rent server 
case approximately seconds experiment rent server load daemon spawns additional server berkeley 
point latency berkeley seattle improves second latency range 
latency texas clients poor poor network connectivity texas seattle berkeley 
seconds experiment third server spawned texas corresponding improvement latency texas clients 
shown graph corresponding savings wide area bandwidth clients berkeley seattle fall back local servers opposed traversing wide area links reach seattle server 
performance rent server demonstrates power dynamically recruiting resources wide area services 
equally important provide convenient interface application development 
implementation rent server webos consists solely load daemon additions apache server transmit state information load daemon transmit aggregate service state headers smart clients 
load daemon consists lines code added lines code apache 
webos framework prototype rent server operational week 
related number efforts exploit computational resources available internet wide area parallel programming including wax legion atlas globus globe netsolve 
detailed comparison abstractions projects scope 
webos latency seattle berkeley austin response time berkeley startup texas startup seattle berkeley austin time time fixed server rent server 
rent server performance 
graphs plot average client latency function time operation 
line represents average latency sampled second intervals clients located seattle berkeley austin 
fixed server graph single server seattle serves pages 
rent server graph single server initially available system able spawn additional servers berkeley austin improve client latency reduce consumed wide area bandwidth 
shares need similar underlying technology systems need global name space file system 
systems focus programming model computing wide area focuses system level support building running wide area applications 
draws large body previous file systems exporting global namespace including afs alex coda bayou ufo 
main differentiating point webfs earlier works backward compatibility name space security model appropriate wide area access 
plan build done coda bayou address issues replication fault tolerance wide area 
kermarrec propose framework supporting flexible cache consistency similar model advocate 
harvest squid web caching efforts focused methods extending client cache internet caching proxies 
caching proxies general limited number ways 
proxies unable produce dynamic web content results cgi bin programs 
proxies logical extensions client making difficult service providers track things hit counts 
rent server addresses limitations proxy caching mechanisms allowing full replication overloaded services locations determined client access patterns 
kernel uses multicast client communication multiple members server group load balancing fault tolerance 
mechanism related smart clients extending service functionality client 
smart clients allow service specific naming load balancing algorithms 
example quality network fabric non uniform wide area making important distinguish sites client latency sites 
active networks proposal modify internet routers dynamically programmable connection packet level 
goal easier extend network protocols provide new services minimizing network bandwidth consumed multicast video streams 
major motivation move computation internet minimize network latency congestion 
webos seen logical extension active networks active computing elements internet servers addition individual processors inside routers operating packet streams 
demonstrate synergy available exporting traditional operating system functionality wide area applications 
prototype implementation webos describes possible organization system services 
framework contributions 
show extending server func tionality client machines allows flexible implementation name resolution load balancing fault tolerance 
second providing file system abstraction combining communication persistence simplify implementation number wide area applications 
security system enabling finegrained transfer rights wide area 
demonstrate utility combined abstractions describe implementation number wide area applications including rent server server capable dynamically replicating internet improved client latency efficient utilization widearea link bandwidth 
acknowledgments content presentation greatly benefited discussions members uc berkeley project 
addition specifically eric anderson arpaci dusseau doug ken goldberg steve steve mccanne john ousterhout dave patterson marvin theimer feedback ideas 
alexandrov schauser 
ufo personal global file system user level extensions operating system 
proceedings usenix technical conference anaheim ca january 
anderson dahlin neefe patterson roselli wang 
serverless network file systems 
proceedings th acm symposium operating systems principles pages dec 
blumofe brewer 
atlas infrastructure global computing 
proc 
seventh acm sigops european workshop systems support worldwide september 
vahdat anderson dahlin 
cri sis wide area security architecture 
proceedings usenix security symposium san antonio texas january 
casanova dongarra 
netsolve network server solving computational science problems 
proceedings supercomputing november 
cate 
alex global filesystem 
proceedings usenix file system workshop pages may 
chankhunthod danzig neerdaels schwartz worrell 
hierarchical internet object cache 
proceedings usenix technical conference jan 
cheriton 
distributed system 
communications acm pages mar 
lomas 
certification scheme electronic commerce 
security protocols international workshop pages cambridge uk april 
springer verlag lncs series vol 

dahlin wang anderson patterson 
cooperative caching remote client memory improve file system performance 
proceedings st usenix symposium operating systems design implementation pages november 
deering 
multicast routing datagram internetwork 
phd thesis stanford university dec 
digital equipment 
alta vista 
www altavista digital com 
feeley morgan karlin levy thekkath 
implementing global memory management workstation cluster 
proceedings th acm symposium operating systems principles december 
foster kesselman 
globus metacomputing infrastructure toolkit 
proc 
workshop environments tools 
fox gribble brewer amir 
adapting network client variability demand dynamic distillation 
proceedings seventh international conference support programming languages operating systems cambridge ma 
fox gribble chawathe brewer 
cluster scalable network services 
proceedings th acm symposium operating systems principles malo france october 
freier kocher 
secure socket layer 
netscape mar 
goldberg wagner thomas brewer 
secure environment untrusted helper applications 
proceedings sixth usenix security symposium july 
gosling 
java tm language environment white 
java 
com whitepaper java whitepaper html 
grimshaw nguyen wulf 
campus wide computing results legion university virginia 
technical report cs university virginia march 
howard kazar menees nichols satyanarayanan sidebotham west 
scale performance distributed file system 
acm trans 
comput 
syst feb 
internet weather report 
www 
com 
katz butler mcgrath 
scalable server ncsa prototype 
international conference world wide web apr 

kermarrec van steen tanenbaum 
framework consistent replicated web objects 
proceedings th international conference distributed computing systems may 
kistler satyanarayanan 
disconnected operation coda file system 
acm transactions computer systems feb 
kleiman 
vnodes architecture multiple file system types sun unix 
proceedings usenix summer technical conference pages 
luotonen 
world wide web proxies 
international conference world wide web apr 
matrix information directory services internet weather report 
see www org weather index html 
mitzenmacher 
power choices randomized load balancing 
phd thesis university california berkeley 
nelson welch ousterhout 
caching sprite network file system 
acm transactions computer systems feb 
netscape communications 
netscape navigator 
www netscape com 

network 
www 
com 
rivest lampson 
sdsi simple distributed security infrastructure 
theory lcs mit 
edu cis sdsi html 

testimony house representatives committee science 
available www isoc org ht hearing html july 
sarkar hartman 
efficient cooperative caching hints 
operating systems design implementation pages october 
sollins masinter 
functional requirements uniform resource names 
rfc december 
squid internet object cache 
squid 
nlanr net squid 
stout 
wax wide area computation system 
phd thesis carnegie mellon university 
cmu cs 
filesystem world wide web 
technical report sun microsystems 
see www 
sun com wp 
tennenhouse wetherall 
active network architecture 
acm sigcomm computer communication review pages apr 
terry theimer petersen demers spreitzer hauser 
managing update conflicts bayou weakly connected replicated storage system 
proceedings fifteenth acm symposium operating systems principles pages dec 
vahdat anderson 
transparent result caching 
proceedings usenix technical conference new orleans louisiana june 
vahdat anderson 
webfs global cache coherent file system 
see www cs 
berkeley edu vahdat webfs webfs html december 
van steen tanenbaum 
architectural design globe wide area distributed system 
technical report technical report ir vrije universiteit march 
waldspurger weihl 
lottery scheduling flexible proportional share resource management 
operating systems design implementation pages 
walsh lyon sager chang goldberg kleiman lyon sandberg weiss 
overview sun network file system 
proceedings usenix winter conference pages jan 
wolski 
dynamically forecasting network performance support dynamic scheduling network weather service 
proceedings th high performance distributed computing conference august 
yoshikawa chun vahdat anderson culler 
smart clients build scalable services 
proceedings usenix technical conference jan 
