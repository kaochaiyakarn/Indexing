backoff protocols distributed mutual exclusion ordering gregory chockler malkhi school computer science engineering hebrew university jerusalem jerusalem israel cs huji ac il michael reiter secure systems research department bell labs lucent technologies mountain ave murray hill nj usa reiter research bell labs com simple efficient protocol mutual exclusion synchronous message passing distributed systems subject failures 
protocol borrows design principles prior backoff protocols multiple access channels ethernet 
protocol adaptive expected amortized system response time informally average time process waits entering critical section function number clients currently contending independent maximum number processes contend 
particular contention free case process enter critical section round trip message delay 
protocol derive protocol ordering operations replicated object asynchronous distributed system subject failures 
protocol safe probabilistically live periods stability suitable deployment practical systems 
describe simple distributed mutual exclusion protocol process gain right execute fixed time interval interference processes 
protocol directly inspired backoff protocols multiple access channels collision detection protocol ethernet known example 
ethernet process wishing send apparently empty channel simply 
detects send collided process backs random delay tries 
similar principles derive mutual exclusion algorithm synchronous message passing systems deterministically safe ensures entry critical section probability 
appear icdcs 
performance protocol generally characterized terms amortized system response time 
amortized system response time mean delay processes incurs entering critical section assuming start contending time 
prove upper bound expected amortized system response time showing protocol adaptive amortized system response time independent maximum number processes contend 
addition case contention delay process incurs entering critical section merely round trip message delay network independent fault tolerance feature protocol 
protocol system model distinct clients servers motivated system implemented described 
clients contend mutual exclusion may crash affecting protocol 
particular client granted exclusion fixed time period designated unlock operation client perform client failure succeeds gaining exclusion preclude clients subsequently gaining exclusion time period expires 
protocol masks arbitrary byzantine failure threshold number servers 
mutual exclusion protocol develop protocol operations replicated object serially ordered 
despite fact ordering protocol deterministically safe asynchronous system mutual exclusion protocol mutual exclusion protocol key ensuring operations ordered complete probability system stabilizes 
ordering protocol orders arbitrarily operations object soon single contender gains access critical section 
aside safe operation ordering mutual exclusion protocol useful tasks system motivated called fleet 
fleet supports highly available shared data clients infrastructure servers may suffer arbitrary byzantine failures 
order detect presence faulty servers statistical fault detection algorithms mine evidence faulty servers responses return 
detection accurate data accessed sequentially fleet attempts serialize data accesses employ mutual exclusion protocol described purpose 
mutual exclusion protocol useful property remains probabilistically live periods instability asynchrony system 
fault detection may suffer periods instability nonblocking properties fleet data access protocols compromised 
rest structured follows 
review related section precisely state system model section 
section describe mutual exclusion protocol outline certain optimizations section 
develop ordering protocol section 
proof correctness ordering protocol section 
related singhal taxonomy mutual exclusion protocol type protocol 
class protocols process requests permission enter critical section set processes process request set exclusive access critical section exited allowed enter critical section processes access 
due intersection property request sets exclusive locking process request set process critical section time 
due properties type algorithms generally prone deadlock consequently require extra messages detect recover deadlocks 
deadlock free type protocols proposed strengthening constraints request sets 
context strengthening possible clients requesting mutual exclusion distinct servers comprise request sets 
clients added request sets transient population clients contend known priori 
protocol works original weaker intersection property fault formally probabilistic liveness periods instability holds scheduling adversary nonadaptive 
execution scheduler chooses distribution message delays drawn protocol execution begins change distribution response events execution 
omit discussion issue note practice assumption willing adopt fleet 
model addressed 
time protocol prone deadlock 
discussed section evaluate protocol amortized system response time achieves 
measure introduced context shared memory mutual exclusion algorithms examples amortized system response times 
alternative protocol employ algorithms distributed protocol emulate shared variable uses 
resulting algorithm superior amortized system response time asymptotically performance practice far worse protocol main case care performance due overheads variable emulation protocols 
holds backoff style mutual exclusion algorithms explored shared memory setting assumes stronger objects shared variables 
manner build mutual exclusion protocol order operations data objects asynchronous system similar fetzer cristian consensus timed asynchronous model works lamport paxos keidar dolev extended phase commit pc 
works compose necessarily safe mutual exclusion protocol commit protocol derive solutions problems equivalent ordering problem 
paxos pc building mutual exclusion protocols propose mutual exclusion implementations 
fetzer cristian employ mutual exclusion protocol rotates preference access critical section possible contenders sequence enables preferred contender bypassed delay contender 
mutual exclusion primitive adaptive sense 
order achieve protocol relies clock synchronization participating servers 
clock synchronization required protocol 
generally contributes relative providing new efficient mutual exclusion primitive admitting arbitrary byzantine server failures ordering protocol 
system model system model divides set processes clients servers 
assume fixed known set servers arbitrary finite unknown number clients 
protocol process described terms event handlers triggered arrival events receipt message tick local clock input calling application 
triggered assume event handler runs completion delay 
processes obey protocol specifications receive handle infinitely events infinite run called correct 
processes called faulty 
threshold servers may fail may arbitrarily byzantine failures event handlers faulty server may conform specifications 
number clients may fail clients assumed fail crashing simply longer receiving events 
restriction client failures crashes may unrealistic servers presumed fail arbitrarily 
typically little done protect application byzantine clients clients corrupt object data submitting requests incorrect content 
way dealing practice allow creator object prohibit untrusted clients modifying objects access control mechanisms remain force correct servers provided fewer servers fail arbitrarily 
assumption client crashes practice reduces assumption clients trusted modify object creator 
assume local clock correct process ticks rate real time process accurately measure passage chosen real time timeout period 
timeout periods involved protocols short practice reasonable assumption 
assume clocks processes synchronized 
processes communicate message passing 
assume communication channels provide message transmission correct receives message sent 
obviously assume sends message twice implement including unique sequence number message 
globally known constant say run stable real time correct client exists quorum correct servers message sent time client server quorum arrives time definition quorum section 
run synchronous stable time run begins 
processes communicate message passing protocols terms remote operation invocations servers simplicity presentation 
synchronous runs neglect processing time remote assume complete instantaneously 
return explicit message passing events necessary prove correctness 
mutual exclusion section mutual exclusion protocol clients contend opportunity run time units interference clients 
precisely operation contend client invoke 
invocation returns client client time units execute isolation 
time units pass client contend operation may return 
discussed section addition requiring mutual exclusion concerned system response time 
idea protocol clients access servers simply find clients simultaneously contending 
order provide mutual exclusion pair clients access correct servers common 
client detects client contending backs random delay chosen distribution adapts number contending clients 
intuitively clients delay amount time proportional number simultaneously contending clients eventually sufficiently space contentions succeeds 
precisely protocol probabilistically live synchronous system probability client contend operation returns 
requirement clients access common correct servers satisfied client queries servers special variant masking quorum systems 
specific variant need system quorums ii exists property ensures client queries quorum servers clients queries intersect correct servers 
property ii ensures quorum available 
quorum systems special variants request sets protocol see section address arbitrary server failures 
straightforward adaptation corollary find requirement quorums implies protocol extremely simple see 
denotes concurrent invocation statements 
denotes selection element set uniformly random assignment element high level protocol executes follows 
request client server returns free returned free time ago returns locked 
contend client collects free locked responses quorum succeeds responses locked 
responses locked delays random duration interval trying retry value records number times client previously queried servers contend operation 
clients employ exponential backoff strategy expected duration client delay proportional twice delay retry 
contend repeat status status return 
vu sleep false hg client program try clock clock return free return locked server program 
mutual exclusion protocol correctness protocol proved easily lemma lemma system synchronous client contend operation returns real time client contend returns interval proof suppose time contend returns assumption implies invoked try servers earlier 
consider contend returns interval bac 
assumption implies invoked try servers earlier correct servers queried responded time frame aq response free 
similarly correct servers queried responded time free 
servers correct server responded free 
correct server returns free client frame aq nm fail time attempts follow client 
happens probability tv indicator random variable ifz attempt pn 
succeeds 
analysis number clients attempt pn 
time deu fails 
linearity expectation time ao 
client attempt tv vh tv example nz follows constant ez vh ez tv tv time period contradiction discussed previously measure quality focus mutual exclusion protocol amortized system response time 
lemma implies expected amortized system response time follows expected meaning expected time clients contend operations return clients succeed intersect zt epn correct tv lemma system synchronous clients contend clients fails client contend operations return expected time 
proof sketch 
allt denote time clients contending 
time contend operation returned retry th retry client time units previous try 
value satisfies number number clients contend operations returned denote time yw corollary system synchronous expected amortized system response time contending clients corollary system synchronous correct client invokes contend probability client contend invocation returns 
denote mutual exclusion protocol analyzed lemma client backoff exponential function number retries contend operation 
exponential backoff yields amortized system response time analysis backoff strategies context multiple access channels shows performs measures various polynomial backoff strategies 
analysis apply case directly expect similar properties hold setting practice may preferable experiment backoff strategies 
improvements optimizations mutual exclusion protocol section sketch possible improvements optimizations mutual exclusion protocol 
implementation proposed ideas assessment practical implications subject ongoing 
avoiding backoff breaking symmetry application client repeatedly contends little delay contentions improve response time back consecutive try attempts 
backoff protocol adequately space client retries asymmetric strategy enable gain mutual exclusion quickly 
client requests optimization server maintains internal data structure called delayed reply list records ids clients try requests arrive server locked 
soon server status free goes records delayed reply list sends free client lowest id locked 
optimization may allow lowest ranking contending client smooth entry critical section backoff 
making mutex safe possible protocol safe instability periods clients disregard replies requests arrive time units 
practice optimization negatively affect throughput applications implementation require underlying mutex safe operation ordering section 
parameterized contend order allow better adaptation changing system conditions application needs possible parameter contend operation consequently try request system wide constant 
safety expected delay parameterized actual employed 
operation ordering discussed section main applications mutual exclusion protocol section protocol serializing operations replicas object distributed system 
order perform operation replicated object client application submits operation execution 
properties ordering protocol satisfies order defined sequence submitted operations applied result operation returns consistent sequence 
liveness run eventually stable operation submitted correct client performed probability performed result returned client 
due order liveness properties protocol emulates state machine replication 
implementation supports distinct features ordering responsibilities delegated clients byzantine assumption 
way need employ digital signatures cryptographic constructions improving performance scalability protocol 
second protocol progress updating quorums replicas helps achieve better load balancing enhances scalability 
third protocol supports nondeterministic operations operation applied client resulting object state copied back servers 
modern protocols implementing state machine replication byzantine environments assume restricted failure model allowing arbitrary client failures 
solutions clients actively participate protocol serve merely users inject new operations server universe collect responses 
approach prevents byzantine clients interfering ordering protocol prevent attacks faulty clients corrupt object data submitting operations arbitrary parameter values 
practice added value providing protection byzantine client failures terms system security guarantees outweighed performance scalability gain resulting delegating ordering responsibilities clients 
detailed client server programs shown respectively 
client program consists threads executed concurrently 
thread described lines simply submits operation servers execution awaits responses 
second thread lines invokes operations create new state commits states serial order call ordering thread 
functions denotes function see line 
subsections contain details operations states ranks essential understanding ordering thread 
operations states protocol works applying operation state produce new state return result 
client submits operation performed invoking simplicity presentation assume operation submitted distinct clients twice client 
practice enforcing uniqueness operations implemented client labeling operations client identifier sequence number 
state denoted possibly subscripts superscripts data type interfaces integer valued field 
denotes ver sion state 
field set protocol manipulating state 
applies operation state forming modifications place 
defined return result oper ation indicates previ ously executed 


state interfaces assumed satisfy properties 
iff invoked previous state 
practice implemented recording state highest operation sequence number performed client 
second result applying operations prior instance defined returns result operation note assumption eliminated garbage collected incremented 
way size limited 
aside instance garbage collection just mentioned elaborate garbage collection 
primary data structures grow protocol figures record client operations performed compute ii response function maintained server records response client operation see lines 
practice eliminating unnecessary data structures achieved example propagating information servers background techniques convey information operation purged system 
optimizations possible trade passing complete states versus update suffixes 
rank client executes ordering thread protocol associated integer called rank 
assume clients adopt rank ensured client rank formed identifier low order bits 
invoking operation server protocol client sends current rank argument invocation rank denoted 


invocations 
server responds highest ranked client contacted 
particular server contacted client lower rank client responded throws notifies client higher rank client contacted 
order get respond client abort current protocol execution adjust rank try starting line 
precise criteria dictate client aborts protocol run adjust rank important liveness protocol 
hand client aborts protocol run receiving single client risks aborted faulty server fact contacted higher ranking client 
hand client requires order abort client may abort correct servers contacted higher ranking client refuse return responses client 
solution issue mandates quorum system employ satisfy property 

exists restriction enables client complete protocol run quorums provided correct servers respond 
consequently original masking quorum systems existed long stronger con straint limits existence systems see corollary 
client forced adjust rank due receiving choosing value larger maximum ranks reported 
note alternative approach clients digitally sign ranks key available clients allowed access object subset submit waiting waiting 
return repeat contend proposer pending 
proposer completed completed proposer sorted descending order proposer proposer ed gf proposer proposer proposer count count count count repeat count count return return 
completed 

completed 
pending pending 
pending 


completed completed 
pending 
pending pending pending return waiting 
client side ordering protocol designated execute ordering protocol 
server throws client passes highest rank client contacted including digital signature rank client 
client receiving verify validity rank verifying digital signature 
implementation client abort protocol run single client receives validly signed rank faulty server forge signatures 
approach imposes overheads terms key pending pending sleep return 
pending return proposer throw 
proposer return throw 
pending pending 
return throw 
server side ordering protocol management computation opt 
particular digital signatures tend relatively intensive compute verify 
small number clients digital signatures emulated message authentication codes approach scale 
protocol overview high level ordering thread protocol client works contending mutual exclusion protocol section line 
contend returns protocol executes similarly phase commit protocol 
invokes get server quorum obtain states committed proposed rank proposer client proposed current set pending pending operations submitted client computes values set state highest version number committed correct server servers lines 
set state proposed correct serv er servers set proposers lines 
completed set highest version number states responses servers reveal committed full quorum 
particular servers report proposed states version numbers larger state version committed full quorum line 
client chooses state propose commit quorums values 
version number larger completed propose commit 
ensure 
gets committed full quorum line 
second choice propose commit proposed state version number larger completed line 
creates new tate applying operations 
lines proposes commits state 
protocol ensures newly proposed object state derived state committed applying operations pending sets correct servers line 
guaranteed follows 
committed full quorum correct server quorum 
implies client succeeds invoking get full quorum 
evaluates applies pending operations 
hand committed full quorum possible clients evaluate prior state 
proposed full quorum committed client invokes get full quorum evaluates client complete commitment bypassing 
completed 
continue applying new operations derive 
rank break ties clients attempt propose different states simultaneously 
suppose invoke get quorum servers obtain 
succeeds propose new state full quorum protocol ensures rank higher rank thrown correct server intersection 
note rank lower succeed proposing new state servers full quorum intersecting quorum incurring 
proposed state proposed state version subroutine correctly identify proposal complete 
correctness proof ordering protocol section prove order liveness satisfied protocol 
denote finite set methods object state rank operation consists 

assume method invoked server execution 
practice requirement easily enforced unique method identifiers composed client identifier sequence number 
rank method invoked 
consider system events client client event sends method invocation server client event triggered reply server return value previously sent method server event computation performed receiving get propose commit submit invocations client 
event occurs server result invocation denoted code executed correct server reception invocation code corresponding server method see 
code executes completion return atomically exception submit submit executes atomically sleep command return constitutes separate event 
faulty server perform arbitrary computation steps reception client invocations 
model system execution countable set events partially ordered relation induced natural order method invocations returns 
define causal cone event denoted subset iff unite events client invokes method server single event called client invocation method de noted write iff define server invocation method simply event occurs server invocation called complete called complete exists quorum correct server complete 
result 
client invocation assume history begins complete propose commit invocations initial object state rank arguments 
set prove order property protocol 
start proving simple facts correlate causal order propose events ranks 

lemma complete proof result straightforward protocol definition causal order 

corollary complete ordered relation 


lemma introduce definition 
define closest complete propose 
complete ii 

iii exist com note propose system ini closest complete propose closest complete propose unique corollary 




lemma consider closest complete propose results true exists complete result applying operations sequential order 
proof sketch prove result induction suppose result holds 




prove result 


complete propose invocation causal chain leading 

induction hypothesis computed protocol value values proposer pending returned response server cation 
correct value proposer determined necessarily complete propose invocation applying results lemma corollary induction hypothesis conclude closest 

complete propose 

causally follows 

state extends previously submitted operations 
closest complete propose 
causally precedes 

know possible values proposer returned quorums intersect servers derive value computed lines results satisfies lemma theorem order defined sequence submitted operations applied result operation returns consistent sequence 
proof sketch lemma committed state derived applying block pending operations line previously committed state 
state 
operations pending block applied serial order lines defined sequence operations applied theorem liveness run eventually stable operation submitted correct client performed probability performed result returned client 
proof sketch system stable eventually correct client returns invocation contend probability 
client executes sufficiently iff long chosen adequately isolation clients 
commits existing state full quorum extends operations pending proposes commits new state quorum full alvisi malkhi pierce reiter 
fault detection byzantine quorum systems 
proceedings th ifip international working conference dependable computing critical applications pages january 
anderson 
performance spin lock alternatives sharedmemory multiprocessors 
ieee transactions parallel distributed systems january 
alur 
fast timing algorithms 
distributed computing 
castro liskov 
practical byzantine fault tolerance 
proceedings rd symposium operating systems design implementation february 
singh 
adaptive solutions mutual exclusion problem 
distributed computing 
fetzer cristian 
possibility consensus asynchronous systems 
proceedings pacific rim international symposium fault tolerant systems december 
hastad leighton 
analysis backoff protocols multiple access channels 
siam journal computing october 
keidar dolev 
increasing resilience distributed replicated database systems 
journal computer system sciences december 
moser melliar smith 
securering protocols securing group communication 
proceedings st ieee hawaii international conference system sciences pages january 
lamport 
time clocks ordering events distributed systems 
communications acm july 
lamport 
part time parliament 
acm transactions computer systems may 

algorithm mutual exclusion decentralized systems 
acm transactions computer systems may 
malkhi mansour reiter 
diffusing updates byzantine environment 
proceedings th ieee symposium reliable distributed systems october 
malkhi reiter 
byzantine quorum systems 
distributed computing 
malkhi reiter 
secure scalable replication phalanx 
proceedings th ieee symposium reliable distributed systems pages october 
malkhi reiter 
architecture survivable coordination large scale systems 
ieee transactions knowledge data engineering march april 
reiter 
rampart toolkit building high integrity services 
theory practice distributed systems lecture notes computer science pages springer verlag 
rivest shamir adleman 
method obtaining digital signatures public key cryptosystems 
communications acm february 
schneider 
implementing fault tolerant services state machine approach tutorial 
acm computing surveys december 
singhal 
class deadlock free type mutual exclusion algorithms distributed systems 
distributed computing february 
singhal 
taxonomy distributed mutual exclusion 
journal parallel distributed computing may 
