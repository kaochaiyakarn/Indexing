system implementing intelligent camera control steven drucker david zeltzer mit media lab mit research laboratory electronics massachusetts institute technology cambridge ma 
usa media mit edu dz mit edu method encapsulating camera tasks defined units called camera modules described 
encapsulation camera modules programmed sequenced underlying framework controlling virtual camera widely disparate types cal environments 
examples camera framework shown agent film conversation virtual actors visual programming language filming virtual football game 
keywords virtual environments camera control task level interfaces 

manipulating viewpoint synthetic camera fundamental interface deal dimensional cal environment number articles discussed various aspects camera control problem detail 
focused techniques directly manipulating camera 
view source difficulty 
direct con trol degrees freedom dofs camera field view included problematic forces human participant attend interface control knobs addition goals constraints task hand 
order achieve task level interaction computer mediated graphical environment low level direct controls 
abstracted higher level camera primitives turn combined higher level interfaces 
clearly specifying specific tasks need accomplished partic ular unit time wide variety interfaces easily con structed 
technique successfully applied interactions museum :10.1.1.27.7888
permission copy fee part material granted provided copies distributed direct commercial advantage acm copyright notice title publication date appear notice copying permission association computing machinery 
copy republish requires fee specific permission 
symposium interactive graphics monterey ca usa acm 
related ware osborne described different metaphors exploring environments including scene hand eyeball hand flying vehicle control metaphors 
dof input device control camera position virtual envi ronment 
discovered flying vehicle control ful dealing enclosed spaces scene hand metaphor useful looking single object 
metaphors easily implemented system 
mackinlay describe techniques scaling camera motion moving virtual spaces example users maintain precise control camera approach ing objects interest 
possible implement techniques camera modules 
brooks discusses methods instrumented mechanical devices stationary bicycles enable human participants move virtual worlds natural body motions gestures 
chapel hill course focused time architectural walk argue direct manipulation devices sense application 
may said virtual museum easy think circumstances reviewing list paintings appropriate require human participant physically walk ride bicycle 
times may wish interact topological temporal abstractions spatial 
camera mod ules accept data arbitrary input devices appropriate 
blinn suggested modes camera specification description placed frame just describing camera aimed 
phillips suggest methods automatic viewing control 
primarily camera hand metaphor view ing human figures system provide automatic fea tures maintaining smooth visual transitions avoiding viewing obstructions 
deal problems gation exploration presentation 
karp feiner describe system generating automatic pre sentations consider interactive control cam era 
gleicher witkin lo describe system controlling movement camera screen space projection object system works primarily manipulation tasks 
prior attempted establish procedural framework controlling cameras 
problems constructing generalizable procedures led current 
constraint framework described 
concentrate meth ods satisfying multiple constraints camera position important part camera framework outline 
complete see 
earlier form current system applied domain virtual museum :10.1.1.27.7888

system design framework formal specification different types camera control 
central notion framework camera placement movement usually done particular rea sons reasons expressed formally number primitives constraints camera parameters 
iden constraints analyses tasks required specific job hand 
analyzing wide variety tasks large base primitives easily drawn rated particular task specific interface 
camera modules camera module represents encapsulation constraints transformation specific user controls duration specific module active 
complete network camera modules branching conditions modules incorporates user con trol constraints response changing conditions envi ronment time 
concept camera module similar concept cinematography 
shot represents portion time starting stopping filming particular scene 
shot represents continuity camera parameters period time 
unit single camera module requires additional level continuity continuity control camera 
requirement added ability com puter graphics identically match camera parameters side cut blurring distinction sepa rate shots 
imagine camera initially pointing character moves environment 
camera pans character follows period time 
camera pans back character cinematic terms single shot continuity camera parameters entire period 
terms broken separate modules 
module task follow character second module task pan ib specified amount time 
third module task follow module task pan back notion breaking cinematic shot modules specify implementation mal description goals constraints camera period time 
shown 
generic module contains components generic camera module containing controller initializer constraint list local state local state vector 
contain camera position camera view normal camera vector field view 
state contain values camera parame ter derivatives value time local information specific operation module 
module active state camera parameters output ren 
initializer 
routine run activation module 
typical initial conditions set camera state previous module state 

component translates user inputs directly camera state constraints 
controller module 
constraints satisfied time period mod ule active 
examples constraints follows maintain camera vector align world 
maintain height relative ground maintain camera gaze view normal spe object sure certain object appears screen 
sure objects appear screen zoom possible system constraint list viewed simply black box produces values dofs camera 
con straint solver combines constraints constrained opti solver come final camera parameters particular module 
camera optimizer discussed extensively 
constraints directly produce values degree freedom example specifying vector camera height camera 
involve calculations pro duce multiple dofs adjusting view normal cam era look particular object 
path planning constraint discussed quite complicated gene rate series dops time environment ini tial final position :10.1.1.27.7888
system system system examples shown 
system extension virtual environ ment software testbed developed mit 
system struc tured way emphasize division virtual environment database camera framework interface provides access 
system contains elements 
general interpreter run pre specified scripts man age user input 
interpreter important part develop ing entire runtime system 
currently interpreter tcl interface widgets created tk 
commands embedded system including ability dynamic simulation visibility calculations finite element simulation matrix computations various data base inquiries 
embedded interpreter rapid prototyping virtual environment sacrificing performance great deal system written low level language addition tk provides convenient creation interface widgets interprocess communication 
especially important processes need perform computation intensive parts algorithms offloaded separate machines 
built renderer 
subsystem hard ware graphics workstation currently hps supported software create high quality image 
object database particular environment 
camera modules 
described previous section 
essen tially encapsulate behavior camera differ ent styles interaction 
prespecified user associated various interface widgets 
widgets connected camera modules 
currently active camera module handles user inputs attempts satisfy constraints contained module order compute camera parameters passed ren creating final image 
currently cam era module active time multiple assigned unique camera 

example filming conversation interface conversation filming example construction software agent perceives changes lim aspects environments uses number primitives implement agent behaviors 
sensors detect movements objects environment perceive character designated talking moment 
general position camera conven tional techniques established filming tion 
books conversations come simplified rules effective presentation 
tion encapsulates rules camera modules software agent calls construct assist director construction film sequence 
implementation placement camera position people having conversation see 
important placing camera approximate geometric relationship shown positioning camera framed image 
filming conversation katz 
constraints shoulder shot height character facing view approx size frame 
person facing view line screen 
person facing away line screen 
camera aligned world 
field view degrees 
camera view close facing directly character facing viewer possible 
interconnected camera modules filming conversation constraints corresponding shoulder shot constraints described people switch sides screen person fac ing screen placed line person facing away placed line 
find initial positions cameras necessary constraint solver contained camera module sure composition screen desired 
shows camera modules connected auto matically film conversation 
complicated combination modules incor behaviors simple software agent 
agent con tains rudimentary reactive planner pairs camera behaviors combination camera primitives response sensed data 
agent primary sets camera behaviors character speaking character speaking 
agent needs sensors detect speak ing direct camera module desired set behaviors active 
modules necessarily keep track positions characters environment simulated actors move proper screen composition maintained 
conversation filming agent behaviors 
shows shoulder shot automatically generated conversation filming agent 

example virtual football game virtual football game chosen example exists methodology filming football games called comparing controls resultant output virtual football game 
temporal flow football game convenient contains starting stopping points specific kinds movements easily identifiable participants 
visual programming language com camera primitives camera behaviors explored 
interface top visual programming language directly way conventional football game filmed developed 
important note significant differences virtual football game filming real football game 
attempts virtual football game realistic dimensional video images players incor football plays real plays vir tual football game intended testbed intelligent camera control portrayal real football game 
implementation shows visual programming environment cam era modules 
similar spirit haeberli kass go system allows user connect camera modules drag drop initial conditions constraints order control output system 
currently active camera module camera state render view graphical environment 
modules connected drawing line module 
boolean expression added connector indicate control shifted module connected module 
possible set multiple branches single module 
frame branching conditions evaluated control passed module branching condition evaluates true 
constraints existing constraints new ones created constraint functions entered text editor 
information individual constraints entered keyboard mouse clicks screen 
constraints dragged module constraints module included optimization 
constraints may grouped slightly higher level behaviors composed group low level primitives may dragged directly camera module 
initial conditions dragged modules force min start conditions 
initial conditions retrieved time current state camera 
camera modules indicated current state opti mization control passed modules 
controllers palette existing control new ones created functions entered text edi tor 
controller dragged module translate actions user subject constraints module 
example controller orbit object may added module constrains camera vector align world vector 
visual programming environment camera modules user necessarily wish concerned visual programming language camera control 
interface connected representation visual program ming language shown 
interface provides mechanism setting positions movements players environment way control virtual cam 
players selected new paths drawn time 
players move paths response click ing appropriate buttons football play controller 
passes indicated selecting appropriate players appropriate time step pressing pass button play con 
virtual football game interface user select move camera icons viewpoint immediately shifted camera 
essentially pressing camera icons activates camera module set initial conditions constraints camera 
cameras track individual characters ball selecting players middle mouse button 
automatically adds tracking constraint currently active module 
multiple players selected camera attempts keep players frame time adding multiple tracking constraints 
image currently fine tuned adjusting constraints visual programming environment 
complete interface provide bridges actions user user interface visual programming language 
view game camera virtual football game 

results implemented variety applications disparate set visual domains including virtual museum mission planner :10.1.1.27.7888
conversation football game described 
formal evaluations notoriously difficult enlist ihe help domain experts observe comment ion applications implemented 
con agent domain expert mit prof davenport capacity accomplished documentary film maker 
virtual football game consulted eric eisen 
sports director tv boston 
addition mit professor tom sheridan invaluable source expertise teleoperation supervisory control 
thorough discussion applications including comments domain experts 

summary method encapsulating camera tasks defined units called camera modules described 
camera modules designed aid user wide range interaction graphical environments 
system uses encapsulation gong constrained optimization techniques visual programming greatly ease development interfaces 
interfaces distinctly dif ferent environments demonstrated 

supported part arpa rome ries japan broadcasting office naval research equipment gifts apple computer hewlett packard silicon graphics 


id grammar film language 
los angeles james press 

blinn am 
am looking 
ieee computer graphics applications july 

brooks jr grasping reality illusion interactive graphics serving science 
proc 
chi 
may 

brooks jr walkthrough dynamic graphics system simulating virtual buildings 
proc 
acm workshop inter active graphics 
october 

chapman ware 
manipulating predictor feedback velocity control virtual environment gation proc 
symposium interactive graphics 

cambridge ma acm press 

chen 
zeltzer 
virtual environment dynamic system 
cambridge ma technical memo 
mit media la august 
drucker galyean zeltzer 
cinema system procedural camera movements 
proc 
symposium inter active graphics 

cambridge ma acm press 

drucker zeltzer 
intelligent camera control virtual 
graphics 


drucker intelligent camera control graphical envi ronments 
phd 
thesis 
mit media lab 

io 
gleicher lens camera control 
com puter graphics 
pp 


haeberli 
visual programming language interactive graphics 
computer graphics 
pp 
ii 

karp 
feiner 
issues automated generation animated pre 
graphics interface 


kass go graphical optimizer 
acm siggraph course notes physically modeling 
july august 
las vegas nm 

katz film directing shot shot con cept screen 
studio city ca michael weise productions 
pro football hall fame 
new york simon schuster 

ma card rapid controlled movement virtual workspace 
computer graphics 


ousterhout tel embeddable command language 
proc 
winter usenix conference 


philips john 
automatic viewing control direct manipulation 
proc 
symposium interactive graphics 

cambridge ma acm press 

ware 
exploration virtual camera con trol virtual dimensional environments 
proc 
sym interactive graphics snowbird utah 
acm press 

zeltzer autonomy interaction presence 
presence teleoperators virtual environments 
arch 


zeltzer drucker virtual environment system mission planning 
proc 
image vi conference phoenix az july 
