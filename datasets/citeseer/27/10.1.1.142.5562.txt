importance 
non data touching processing overheads tcp ip jonathan kay joseph pasquale computer systems laboratory department computer science engineering university california san diego san diego ca okay pasquale cs ucsd edu detailed measurements various processing overheads tcp ip udp ip protocol stacks decstation running ultrix operating system 
overheads include data touching operations checksum computation data known major time consumers 
stud considered overheads due non data touching operations network buffer manipulation protocol specific processing operating system functions data structure manipulations network buffers error checking 
show considers realistic message size majority messages small cumulative time consumed touching overheads represents majority processing time 
assert difficult significantly reduce cumulative processing time due non data touching overheads 
goal study determine relative importance various processing overheads network software particular tcp ip protocol stacks 
significant focus placed maximizing throughput noting data touching operations computing checksums data copying responsible primary bottlenecks throughput performance 
maximal throughput typically achieved sending large messages 
tcp ip packets local area networks smaller bytes 
furthermore ip packets sent wide area networks bytes long suggested default tcp maximum segment size 
relative influences processing overheads packets sizes bytes greatly differ packets lengths maximum transmission units mtus typical lans ethernet bytes especially fddi bytes 
detailed measurements processing times various interesting categories overhead udp ip wide variety message sizes 
importantly detailed aggregated times realistic distribution packet sizes generated measured workload real environment 
expected studies lan packet traces majority messages small require significant time computing checksums copying data 
show realistic distribution messages sizes considered checksum computation data movement large expenses contribute supported part national science foundation digital equipment trw connection sequoia ncr 
permission copy fee part granted provided copies distributed direct commercial advantage acm copyright notice publication date notice copying permission th association computing machinery 
copy requires fee permission 
sigcomm ithaca usa acm minority processing time 
consequently show cumulative effect overheads protocol specific processing network buffer allocation important 
details processing overheads expensive predominance messages affects resulting breakdown overheads unexpected ways 
organized follows 
section describes categorization major network software processing overheads 
section describes experimental setup obtain measurements 
section contains analysis network processing overheads full range message sizes 
section presents message size distribution obtained measurements carried real workload 
section analyzes aggregated processing overheads measured message size distribution 
section contains finer analysis category overheads emphasis individual overheads 
section 
overhead categories categorized major processing overheads network software follows name abbreviations subsequent graphs parentheses checksum computation checksum data movement data structure manipulations data struct error checking network buffer management mbuf operating system functions protocol specific processing 
studies shown overheads expensive 
checksum computing checksums accomplished single procedure internet checksum routine performed data udp header 
data movement includes involved moving data place 
operations categorized follows copying data user kernel buffers usr cpy copying data fddi controller device copy cache coherency protocol cache clear 
data structure manipulation comprises manipulations various data structures mbufs see 
data structures socket buffer socket buffer ip queue queue interface queue device queue 
error checking category checks user decstation decstation kernel isolated fddi network kernel system test experimental system consisted decstation workstations connected fddi network 
process machine sends message process system test sends message back 
tbe lima connecting show path message 
measurements part executed code located kernel system test highlighted patterned lines 
system errors parameter checking socket system calls 
network software subsystems require complex buffer descriptor allows headers packets done cheaply 
berkeley network subsystems buffer network data io data called mbuf 
mbuf operations part category 
allocation freeing mbufs time consuming mbuf operations 
operating system overhead includes support sockets synchronization overhead sleep wakeup general operating system support functions 
category includes protocol specific setting header fields maintaining state included categories 
category narrowly defined called protocol processing 
example checksumming usually considered part tcp udp ip protocol processing categorize checksumming separately high expense limited protocols 
final overhead includes operations small measure 
example symmetric multiprocessing locking mechanism called frequently dec ultrix operating system measured 
estimate called hundreds times message call consumes close amount time overhead executing probes unable tell certainty time consumed mechanism 
processing times time due difference total processing time sum times categories listed 
experimental setup instrumented lt tp udp ip protocol stacks dec ultrix kernel 
measurements taken decstation workstation specint mips risc machine connected similar workstations fddi lan 
connected hp logic analyzer decstation bus obtain software processing time measurements resolution nanoseconds decstation clock cycle time 
preprocessor macros placed source code operation interest 
time macro executes pattern plus event identifier sent decstation bus 
logic analyzer programmed recognize pattern store event identifier timestamp 
measurement software causes minimal interference generating overhead total network software processing time 
measured total message processing time various components network software receiving sending sized message 
experimental system shown consists workstations connected fddi network workstations network traffic generated experiment 
experiment consists workstation sending message system test sends message back 
measurements system test executing probed kernel hooked logic analyzer 
experiment carried message sizes evenly spaced byte bytes 
experiments repeated times message size obtain statistical significance results average error 
experiments designed intended specifically capture cpu time spent processing network packets 
delays communications ignored 
timings include network transmission times 
count time packet held flow congestion control processing time needed decision hold packet workload provoke flow congestion controls 
note described workload design result acknowledgments acks nearly piggybacked 
overhead times message size section presents results processing overhead times message size 
results interesting provide basis understanding performance effects network workload 
figures show message processing times versus message size kp udp messages large range message sizes bytes 
distinguish different types overheads due touching operations operations touch message data due non operations 
generally data touching overhead times scale linearly message size non data touching overhead times roughly constant 
somewhat non data touching overhead times may indirectly affected message size 
example touching operation times usually rise tcp processing overhead times 


rot 
qz message size bytes udp processing overhead times checksum data love 


jj 


mbi ct message size bytes figures breakdown processing overhead times tcp udp message sizes ranging small bytes large 
udp cumulative overhead times bytes figures breakdown processing overhead times expressed cumulative percentage total processing overhead time tcp udp message sizes 
number allocated mbufs number fragments fragmented 
scales message sizes figures breakdowns processing times tcp udp similar 
case tcp slightly expensive udp 
explained tcp complicated portion tcp ip implementation relatively small part executed layers network software 
sending receiving tcp ox udp message involves calling socket layer fddi driver numerous support routines 
known processing overhead time large messages dominated data touching overheads 
clear wishes achieve high throughput maximally sized messages operations focus attention touch data 
interesting feature presence various jumps humps touching overhead times 
reason due fragmentation mtu fddi bytes tcp ip fragment messages larger bytes fddi mtu sum tcp header lengths multiple packets resulting operations 
reason humps due design mbuf data structure 
dec ultrix network software berkeley unix mbuf byte 
directly store bytes data indirectly point byte page store data size greater bytes 
pointer page combination called cluster mbuf data stored header 
mbufs contain linked list pointers easily connected mbuf chain contain larger packets prepend protocol headers mbuf chains 
mbufs complex allocation algorithm 
reduce internal fragmentation socket send code allocates string small mbufs message size greater bytes calling memory allocation routine explains humps bytes 
messages larger bytes page cluster mbuf allocated causes calls memory allocator mbuf page 
similar fashion string mbufs allocated messages larger page greater bytes bytes byte page second cluster mbuf allocated messages larger bytes 
remarked potential problems due resulting apparent 
figures data differently showing breakdown processing overhead times expressed cumulative tcp small message processing overhead times messages 
defined message size mean amount actual user data sent including protocol headers 
message sizes computed information contained packets 
figures show message size distributions tcp udp messages 
distribution tcp message sizes 

message size bytes udp small message processing overhead times 


mbuf checksum 

err 



uct size bytes figures breakdown processing overhead times small tcp udp message sizes 
total processing overhead time 
notice upper regions figures due data touching overheads large message sizes operations consume approximately total processing overhead time 
messages get smaller non data touching overhead times prominent 
fact single byte messages data touching overheads contribute yo total processing overhead time 
figures magnify leftmost regions graphs figures focus small messages 
message sizes range common sizes packets sent internet 
small messages especially smaller bytes generally rpc acknowledgment non data touching overheads clearly dominate 
tcp udp message size distributions determine realistic tcp udp message size distributions obtained packet trace fddi network primarily lan workstations tile servers university computer science department program cp dump 
message sizes collected messages udp messages generated nfs 
rest tcp lll 
sg im am lw mm distribution tcp message sizes 
tcp messages small tcp messages larger bytes merely invisible graph 
distribution udp message sizes cq sim message size distribution udp message sizes 
messages small 
significant fraction messages large 
observed message size distributions matched expectations previous ethernet packet traces 
shows ail tcp messages small tcp messages bytes long 
shows bimodal distribution udp message sizes 
great majority udp messages small large messages udp messages bytes long bytes long 
median message sizes tcp udp messages bytes respectively 
low udp median reflects fact visible dk tributions case udp messages nfs status directory reading messages reason number kilobyte udp messages nfs 
scarcity large kp messages large messages large bytes just visible aggregated 

checksum profile aggregate times tcp processing overheads 
time consuming overhead protocol specific processing non data touching overhead 
tcp messages small data touching overheads consume small amount time 
ted ui processing times 
checksum pro aggregate times udp processing overheads 
area significant number large udp messages data touching overheads checksum major time consumers 
consume total time dn non data touching overheads 
mbuf figures 
check ethernet serves lan computing different university computer science department see behavior simply art artifact fddi network measured similar results 
determined common application produces large tcp messages remote file distribution workstations done increasingly nfs udp lans 
large messages observed environments udp messages 
applications produce large messages window system image transfer network news transfer protocol messages relatively infrequent 
expect detectable fraction messages size size headers tcp default maximum segment size large wide area network data packets 
indication 
contained packets size fraction show graphs 
large packets observed 
aggregate overhead times established network software processing overhead times messages depend mainly non data touching operations large messages processing overhead times depend mainly data touching operations 
established distributions tcp udp message sizes different real 
categories processing overheads defined section different relative costs tcp udp differing distributions message sizes 
consider aggregate processing overhead times message size distributions 
show aggregate processing overhead times udp 
importance non data touching overheads shows fraction time spent processing tcp messages due checksumming data movement 
case udp shown checksumming data movement significant factors categories overhead represent majority total processing time 
consequently non data touching operations major effect performance 
considering reasons large size touching overheads believe berkeley unix network subsystem poorly tuned 
observation berkeley unix implementation tcp ip protocol suite rich functionality 
udp ip protocol stack unix great deal functionality despite udp reputation minimal protocol port space checksum integrity scalable internetworking fragmentation dynamic lan address resolution level input buffering queuing error checked system call interface user programs functionality due layers udp 
bit functionality carries cos sum significant 
consider tcp portion protocol specific processing accounts lg total processing time single byte messages processing times affected data touching operations time consumed functionality provided layers operating system 
aggregated tcp data movement times 

difficulty optimizing non data touching overheads eliminating single operation checksumming sufficient produce large reduction processing time messages 
increasing number icp ip implementations succeed reducing avoiding checks operation various strategies 
vendors disabled udp checksumming default loss packet integrity internet host requirements 
clark tennenhouse suggested combining checksumming copying integrated layer processing 
silicon graphics workstations move burden performing checksum computation cpu fddi interfaces 
proposed scheme intended preserve performance gain disabling checksums loss integrity additional cost hardware 
suggest avoiding tie udp data checksum computations source destination lan lan supports hardware crc 
majority packets stay single lan packets covered lan crc checksum redundancy avoidance algorithm provides dramatic performance improvement packets loss checksum protection 
strategies result maximum throughput 
improving performance optimizing non data touching operations difficult 
example lack large tcp messages prominent category tcp profile 
category protocol specific processing overhead protocol layer tcp link layer fddi driver 
largest component tcp mentioned consumes total processing time tcp protocol specific processing large number smaller operations 
prominent categories mbuf similarly combinations number smaller operations 
wide range improvements needed produce significant improvement performance touching operations 
iu depth analysis cache clear aggregated usr cpy til 
section overview analysis aggregate processing overhead times 
section takes closer aggregate times individual categories decreasing order ce 
category examined detail factors explained 
differences tcp udp time breakdowns explained 
general differences result differences distributions message sizes differences udp protocol complexity 


cache clear device copy usr cpy figures aggregate data movement times tcp udp messages 
copying times higher udp greater number large udp messages 
touching data checksum operations touch byte entire message operation times increase message size 
routines tcp udp 
seen figures checksum dominant overhead large messages 
figures see aggregate times checksum usec usec tcp udp message size distributions respectively 
checksum single operation analyze 
largest time consuming category overheads large messages see figures breakdown category 
includes operations usr cpy device copy cache clear 
usr cpy amount time spent copying incoming messages kernel user buffers outgoing messages user kernel buffers 
device copy cache clear concern movement data kernel buffers fddi controller 
controller access support send side dma cpu copy data controller 
device copy amount time needed copy message kernel buffers buffers fddi controller 
controller support receive side dma sc receive side equivalent device copy cache coherency protocol needed cache clear amount time insure cache consistency fddi controller dmas incoming packets memory 
network aggregated tcp buffer management times mbuf mbuf mist aggregated udp network buffer management times aggregated udp protocol processing times mm 
aw mu hd figures aggregate protocol specific processing times tcp udp messages 
tcp protocol specific processing time large half total protocol specific processing time 
comparison udp protocol specific processing time relatively small 
time copy data device memory dominates times user kernel time coming close second 
fact device copy cpy roughly amount caching improves time 
time consumed overheads increase message size higher times udp reflect higher average udp message length 
smaller source difference tcp udp device copy lower usr copy tcp pattern reversed udp 
data touching overhead times effectively constant component component rising linearly message size 
usr copy larger constant component smaller linear component device copy reversal relative sizes due different tcp message size distributions 
protocol specific processing seen figures dominant category lvp prominent udp 
tcp messages consumes nearly half total processing overhead time 
mbuf mbuf mist aggregate network buffer management times tcp udp message sizes 
large cost memory operations performed mbuf software largest single operation costs 
breakdown category shown figures ab 
interface device driver layer link part ieee encapsulation layer ip ip layer kp tcp layer 
arp entire address resolution protocol demux operation finding protocol control block tcp udp header pcb disconnect operations checking route exists connection setting protocol control block reflect current connection state properly 
ltp dominates category 
stark contrast udp udp small portion 
despite tcp size consumes total icp ip processing time 
reduction icp protocol specific processing time useful questionable performance improvement worth major effort required 
substantial reductions entire processing category produce significant performance category consumes tcp udp 
reduction require improvements entire stack protocols glance may surprising demux small microseconds reports operation bottleneck 
single user testing environment single connection single entry list protocol control blocks 
aggregated tcp operating system overhead times mist miscellaneous processing socket layer 
wakeup call awaken process 
proc restart time needed sleeping process start running 
sched soft intr operation scheduling software interrupt process incoming packet handler software interrupt handler dequeues incoming packets calls ip handle 
interesting aspect category various transfer control operations cheap relative categories overheads aggregated tcp checking ti mc rem sdd sb mint aggregated udp operating system overhead times aggregated udp error checking ti es mm figures aggregate system overhead times tcp loa udp lob message sizes 
control surprisingly inexpensive 
mbufs mbuf second largest non data touching categories overhead 
mbuf data structure supports number operations costly mbuf 
figures contain breakdowns mbuf category mbuf allocation deallocation mbuf mbuf operations mbuf mist 
mbuf expensive reasons memory allocation inherently expensive operation memory allocation performed number times message 
mbuf consumes time udp mbuf allocation strategy 
messages bytes long stored small buffers needed individually allocated store bytes 
overwhelming majority tcp messages fit single mbuf udp messages long require mbufs data storage 
mbuf operations constituting mbuf mist simpler operations copying mbuf chains done certain extent pointers implemented joining linked lists mbufs message length checking 
tcp spends time mbuf mist copy message case retransmission necessary 
operating system overheads figures show breakdown operating system overheads 
sleep kernel call process uses block 
socket chk figures ila aggregate error check kg thn tcp ha udp sage 
checking user specified correct receive buffer expensive imposes large penalty large receive buffers 
error checking category checks user system errors 
figures la show breakdown overheads category 
contains assorted checks errors socket layer 
syscall checking specifically incorrect user arguments system calls send receive messages 
interestingly syscall relatively large especially udp 
time spent verifying user buffer correct size 
data structure manipulations category consists manipulations various data expensive worth individual scrutiny case mbufs 
figures show break overheads 
socket buffer data structure limited amount data enqueued protocol 
tcp heavier data structure 
udp socket buffer structure outgoing messages uses finite length queue reception 
contrast uses socket buffer implement windowing flow control send receive sides 
queue data structure ip packets 
times queue processing require explanation 
general messages larger fddi mtu sent multiple pieces fragmented 
fragmentation implemented ltp 
udp messages fragmented cp fragmentation specifically avoid fragmentation 
surprising code checking queue called lcp messages reflects place code check matching fragments avoided 
interesting fact amount time spent queue udp noticeably greater minimal value 
udp messages fragmented processing times large messages sufficient raise average cost 
implies cost queue derives checking queue necessary 
device queue data structure outgoing data enqueued link layer network controller prepared process incoming data enqueued device diver ip ready process software interrupt 
udp messages spend time device queue processing fragmentation 
udp message fragmented fddi frames twice performed device queue send message 
detailed measurements various categories processing overhead times ip protocol stacks decstation shown important consider effects non data touching overheads performance particularly messages observed real small 
appropriately focused significant costs processing time data touching specifically computing checksums data copying costs important considering large message sizes 
considers aggregate costs realistic distribution message sizes touching overheads consume majority total software processing time tcp udp 
non data touching overheads received relatively little attention compared data touching overheads 
significant ongoing efforts reduce data touching overheads integrated layer processing computing checksums hardware avoiding checksum computations redundant hardware restructuring operating system software data movement 
efforts effective optimizing single operation produces large improvement 
unfortunately time evenly spread non data touching overheads 
reducing single touching overhead tcp protocol specific processing relatively significant effect performance 
wide range optimization non data touching operations needed produce significant performance improvement 
gratefully acknowledge help keith muller helping design debugging experiments described 
aggregated tcp data structure manipulation times socket buffer 
aggregated queue udp 
device queue data structure manipulation times 
socket buffer queue 
device queue figures aggregate data structure manipulation times tcp udp message 
tcp extensive socket buffer properties udp 
braden berman partridge computing internet internet rfc september 
braden cd requirements internet communication layers internet rfc october 

hunter karels user process communication performance networks computers ieee transactions software engineering january 
caceres danzig jamin mitzel 
characteristics wide area ip conversations proceedings symposium communications architectures pp 
august 
clark modularity efficiency protocol implementation internet rfc 
clark structuring systems upcalls proceedings tenth acm symposium operating sys em principles pp 
december 
jacobson analysis tcp processing overhead ieee communications magazine pp 
june 
clark tennenhouse considerations new generation protocols proceedings sigcomm symposium communications architectures protocols pp 
september 
measurement study diskless workstation traffic ieee transactions pp 
september 
hutchinson mishra peterson thomas tools implementing network protocols practice experience pp 
september 
jacobson bsd tcp ethernet throughput comp protocols tcp ip usenet 
kay pasquale measurement analysis improvement udp fp throughput decstation proceedings writer usenix conference pp 
january 
leffler mckusick karels quarterman design implementation bsd unix operating system addison wesley november 
mckenney dove efficient demultiplexing incoming tcp packets proceedings fhe sigcomm symposium communications architectures protocols pp 
august 
mogul network locality scale processes proceedings sigcomm symposium communications protocols pp 
august 
ousterhout aren operating systems getting faster fast hardware proceedings summer usenix conference pp 
june 
plummer ethernet address resolution protocol converting network protocol addresses bit ethernet address transmission ethernet hardware internet rfc november 
postel transmission control protocol internet rfc september 
postel tcp maximum segment size related topics internet rfc november 
private communication november 
sun microsystems nfs network file system protocol specification internet rfc march 
watson gaining efficiency transport services appropriate design implementation choices acm transactions computer systems pp 
may 

