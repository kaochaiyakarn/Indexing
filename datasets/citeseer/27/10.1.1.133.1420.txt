rc encryption algorithm ronald rivest mit laboratory computer science technology square cambridge mass rivest theory lcs mit edu 
document describes rc encryption algorithm fast symmetric block cipher suitable hardware software implementations 
novel feature rc heavy data dependent rotations 
rc variable word size variable number rounds variable length secret key 
encryption decryption algorithms exceptionally simple 
rc designed objectives mind 
rc symmetric block cipher 
secret cryptographic key encryption decryption 
plaintext ciphertext fixed length bit sequences blocks 
rc suitable hardware software 
means rc computational primitive operations commonly typical microprocessors 
rc fast 
implies rc basic computational operations operators full words data time 
rc adaptable processors different word lengths 
example bit processors available possible rc exploit longer word length 
number bits word parameter rc different choices parameter result different rc algorithms 
rc iterative structure variable number rounds 
user explicitly manipulate trade higher speed higher security 
number rounds second parameter rc 
rc variable length cryptographic key 
user choose level security appropriate application required external considerations export restrictions 
key length bytes third parameter rc 
rc trademark rsa data security 
patent pending 
rc simple 
simpler structure interesting analyze evaluate cryptographic strength rc rapidly determined 
rc low memory requirement may easily implemented smart cards devices restricted memory 

rc provide high security suitable parameter values chosen 
addition development rc began focus attention intriguing new cryptographic primitive data dependent rotations word intermediate results cyclically rotated amount determined low order bits intermediate result 
developed additional goal 
rc highlight data dependent rotations encourage assessment cryptographic strength data dependent rotations provide 
rc encryption algorithm hopefully meets goals 
hopefully refers course fact new proposal cryptographic strength rc determined 
parameterized family encryption algorithms section discuss somewhat greater detail parameters rc tradeoffs involved choosing various parameters 
noted rc word oriented basic computational operations bit words inputs outputs 
rc block cipher word input plaintext block size word ciphertext output block size 
nominal choice bits rc bit plaintext ciphertext block sizes 
rc defined simplicity proposed values allowable number rounds second parameter rc 
choosing larger number rounds presumably provides increased level security 
note rc uses expanded key table derived user supplied secret key 
size table depends number rounds words 
choosing larger number rounds implies need somewhat memory 
distinct rc algorithms depending choice parameters summarize parameters word size bits word contains bit bytes 
nominal value bits allowable values 
rc encrypts word blocks plaintext ciphertext blocks bits long 
number rounds 
expanded key table contains words 
allowable values 
addition rc variable length secret cryptographic key specified parameters number bytes secret key allowable values 
byte secret key notational convenience designate particular parameterized rc algorithm rc example rc bit words rounds byte bit secret key variable expanded key table words 
parameters may dropped talk rc dropped parameters unspecified 
example may ask rounds rc 
propose rc providing nominal choice parameters 
nominal values parameters provide bit words rounds bytes key 
analysis needed analyze security choice 
rc suggest increasing number rounds 
suggest implementation parameters may packaged form rc control block containing fields byte version number hex version 
byte 
byte 
byte 

control block represented bytes 
example control block bb hexadecimal specifies rc algorithm version bit words rounds byte bit key 

rc key management schemes typically manage transmit entire rc control blocks containing relevant parameters addition usual secret cryptographic key variable 
discussion parameterization section discuss extensive parameterization rc provides 
note intended rc secure possible parameter values 
example provides essentially encryption easily broken 
choosing clearly gives security 
hand choosing maximum allowable parameter values overkill applications 
allow range parameter values users may select encryption algorithm security speed optimized application providing evolutionary path adjusting parameters necessary 
example consider problem replacing des equivalent rc algorithm 
reasonable choose rc replacement 
input output blocks bits long just des 
number rounds rc round des rounds data registers just half updated rc round 
des rc bit byte secret keys 
des parameterization flexibility rc permits upgrades necessary 
example upgrade choice des replacement bit key moving rc 
technology improves true strength rc algorithms better understood analysis appropriate parameter values chosen 
choice affects encryption speed security 
applications high speed may critical requirement wishes best security obtainable encryption time requirement 
choosing small value say may provide security albeit modest speed constraint 
applications key management security primary concern speed relatively unimportant 
choosing rounds appropriate applications 
rc new design study required determine security provided various values rc users may wish adjust values results studies 
similarly word size affects speed security 
example choosing value larger register size cpu degrade encryption speed 
word size primarily researchers wish examine security properties natural scaled rc 
bit processors common move rc natural extension rc 
may convenient specify larger rc basis hash function order bit larger input output blocks 
may considered unusual risky specify encryption algorithm permits insecure parameter choices 
responses criticism 
fixed set parameters may dangerous parameters increased necessary 
consider problem des key size short easy way increase 

expected implementors provide implementations ensure suitably large parameters chosen 
unsafe choices usable principle forbidden practice 
expected typical rc implementation rc control block 
may certain fixed parameter values parameters certain range 
parameters andb received transmitted rc control block merely type checking values supported implementation disallowed 
flexibility rc utilized system design stage appropriate parameters chosen run time unsuitable parameters chosen user 
note rc applications require cryptographic security 
example consider rc secret key applied inputs generate sequence pseudo random numbers randomized computation 
notation rc primitive operations lg denote base logarithm rc uses primitive operations inverses 

complement addition words denoted 
modulo addition 
inverse operation subtraction denoted 

bit wise exclusive words denoted 

left rotation left spin words cyclic rotation word left bits denoted interpreted modulo power lg low order bits determine rotation amount 
inverse operation right rotation denoted operations directly efficiently supported processors 
distinguishing feature rc rotations rotations variable plaintext dependent amounts 
note modern microprocessors variable rotation constant time time independent rotation amount note rotations non linear operator rc nonlinear substitution tables nonlinear operators 
strength rc depends heavily cryptographic properties data dependent rotations 
rc algorithm section describe rc algorithm consists components key expansion algorithm encryption algorithm decryption algorithm 
encryption decryption algorithms 
recall plaintext input rc consists bit words denote recall rc uses expanded key table consisting bit words 
key expansion algorithm initializes user secret key parameter 
note table rc encryption box des rc uses entries sequentially time 
assume standard little endian conventions packing bytes input output blocks byte occupies low order bit positions register fourth byte occupies high order bit positions fifth byte occupies low order bit positions eighth byte occupies high order bit positions encryption assume input block bit registers assume key expansion performed array computed 
encryption algorithm pseudo code output registers note exceptional simplicity line algorithm 
note rc round updates registers round des updates half registers 
rc half round assignment statements updating body loop analogous des round 
decryption decryption routine easily derived encryption routine 
downto key expansion key expansion routine expands user secret key fill expanded key array resembles array random binary words determined key expansion algorithm uses magic constants consists simple algorithmic parts 
definition magic constants key expansion algorithm uses word sized binary constants pw qw 
defined arbitrary follows pw odd qw odd 
base natural logarithms 
golden ratio odd odd integer nearest rounded integer won happen 
constants binary hexadecimal 
aed converting secret key bytes words 
algorithmic step key expansion copy secret key array words number bytes word 
operation done natural manner consecutive key bytes fill successive word low order byte high order byte 
unfilled byte positions zeroed 
little endian machines intel task accomplished merely zeroing array copying string directly memory positions representing pseudo code achieves effect assuming bytes unsigned array initially zeroed 
downto initializing array second algorithmic step key expansion initialize array particular fixed key independent pseudo random bit pattern arithmetic progression modulo determined magic constants pw qw 
odd arithmetic progression period pw qw mixing secret key 
third algorithmic step key expansion mix user secret key passes arrays precisely due potentially different sizes larger array processed times may handled times 
max times mod mod key expansion function certain amount wayness easy determine discussion distinguishing feature rc heavy data dependent rotations amount rotation performed dependent input data predetermined 
encryption decryption routines simple 
operations substitution operations included basic round operations objective focus data dependent rotations source cryptographic strength 
expanded key table initially added plaintext round ends adding expanded key intermediate values just computed 
assures round acts potentially different manner terms rotation amounts 
xor operations back forth provide avalanche properties causing single bit change input block cause multiple bit changes rounds 
implementation encryption algorithm compact coded efficiently assembly language processors 
table quite small accessed sequentially minimizing issues cache size 
implementation rc sample input output pairs provided appendix 
non optimized implementation encrypts bytes second mhz laptop bit borland compiler bytes second sparc gcc compiler 
speeds certainly improved 
assembly language rotation operator directly accessible routine perform half round just instructions 
initial assembly language implementation runs bytes sec mhz slc 
pentium able encrypt megabytes second 
analysis section contains preliminary results strength rc 
remains done 
report results experiments studying changing number rounds affects properties rc 
test involved examining uniformity correlation input output bits 
rounds sufficed get uniform correlations individual input output bits rc 
second test checked see data dependent rotation amounts depended plaintext bit trials random plaintext keys 
checked flipping plaintext bit caused intermediate rotation rotation different amount 
rounds rc sufficient cause message bit affect rotation amount 
number rounds chosen practice great substantially greater simple tests suggest 
noted suggest rounds nominal choice rc rounds rc 
rc data dependent rotations may help frustrate differential cryptanalysis biham shamir linear cryptanalysis matsui bits rotated random positions round 
obvious way rc key weak short 
invite reader help determine strength rc 
burt kaliski lisa yin paul kocher rsa laboratories comments constructive criticisms 
note added press karl bringing attention cipher due uses data dependent rotations albeit different manner 

biham shamir 
differential cryptanalysis data encryption standard 
springer verlag 


high performance encryption algorithm 
computer security global challenge pages 
north holland elsevier science publishers 

matsui 
experimental cryptanalysis data encryption standard 
desmedt editor proceedings crypto pages 
springer 
lecture notes computer science 
appendix note rc ref removed electronic version compliance export restrictions 
information send mail rc info rsa com 
rc examples 
key plaintext ciphertext 
key ce plaintext ciphertext ac 
key eb bb plaintext ac ciphertext fc 
key dc db af plaintext fc ciphertext cc 
key plaintext cc ciphertext eb da 
