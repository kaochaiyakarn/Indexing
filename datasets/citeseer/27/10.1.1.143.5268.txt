architecture demand active web content distribution huang abdelzaher department computer science university virginia charlottesville va chuang cs virginia edu phenomenal growth world wide web popular internet application today 
web caching content delivery services recognized valuable techniques mitigate explosion web traffic 
increasing fraction web traffic today dynamically generated uncacheable static approaches 
scalable delivery active content poses myriad challenges including content replication update propagation consistency management 
describes scalable architecture transparent demand driven distribution active content 
approach involves migrating scripts generate dynamic web traffic data server active content distribution proxy nearest client 
architecture extendible incorporate variety data consistency management policies ensure client sees date copy dynamically generated web page 
show significant improvements observed effective throughput client response time 
dramatic explosion internet information source generates significant demand efficient content delivery architectures 
world wide web dominant internet application today motivating web content distribution service 
web caching content delivery networks currently key performance accelerators web infrastructure 
services traditionally operated static content 
increasing fraction traffic web today dynamically generated web sites evolve provide sophisticated commerce personalized services 
dynamically generated content uncacheable static approaches 
considerable interest caching dynamic content 
approaches investigate caching dynamic pages resulting script execution server 
dynamically generated pages personalized hit ratio low 
cases caching aid reducing server load 
propose content distribution service requested content generating script need computing power migrated transparently origin server network active cache proxies nearest requesting client 
effect service replicates active web content reported supported part national science foundation ani ccr demand 
active web content refers scripts generate dynamic web pages content generate 
dynamically generated content requested proxy proxy requests script generates content origin server installs locally executes serve request 
script said cached 
file accesses cached scripts handled proxy subsystem instrumented fetch copy accessed data objects origin server 
copy subsequently kept consistent counterpart origin server qos aware consistency management protocol 
protocol allows specify content class temporal consistency requirements enforced run time system 
example may specify fetched premium objects minutes date fetched basic objects minutes date 
architecture useful sites yahoo com large number personalized pages dynamically generated limited base underlying fairly static data objects 
pages called pseudo dynamic content 
caching pages useful shared multiple clients 
caching underlying data objects scripts hand significantly reduce load origin server 
architecture provides benefits better scalability improves client observed access latencies 
architecture active caches providers mutually authenticate active content migrated content shared trusted caches ii trusted cache 
develop services schemes proposed web caches applied directly architecture described related 
focus demand driven active content caching protocol 
content providers subscribe content distribution service presumably price benefit lower origin server load improved service scalability lower latency clients 
service behaves load balancer original content web servers sense request load popular server gets distributed multiple proxies 
requests filtered origin servers preliminary page accesses active proxy requests maintain data consistency 
local isps perspective service reduces backbone traffic isp responsible backbone provider requests active content satisfied locally 
reduces costs paid isp 
clients observe improvement access latencies pages served client closer location internet 
rest organized follows 
section describes related 
section describes active caching architecture various components 
section describes implementation details 
section presents experimental evaluation architecture 
section concludes discusses avenues 
related proxy caching static content discussed length prior literature 
caching active content web proxies received consideration generally confined java code 
benefits static web content caching limited considering significantly increasing fraction uncacheable objects current web caching schemes 
web server workload reduced server side caching dynamically generated content 
smith proposed solution cooperative caching dynamic web content distributed web server 
system clustered nodes collaborate cache maintain result consistency time live methods 
iyengar propose cache servers export api allows individual applications explicitly cache invalidate application specific content 
techniques developed caching identical requests origin content providers feasible proxy caches 
efficient consistency management protocol proposed dynamic content cached front web servers 
dynamic pages classified url patterns invalidated application 
complementary approach fine grained invalidation update scheme dependency graphs 
beck discussed issues replicating dynamic content due platform heterogeneity proposed portable channel representation 
candan addressed problem making changes database content reflected cached dynamically generated web pages intelligently invalidating dynamic content caches state changes database 
dynamic content caching inherent limitations terms performance improvement deployed web servers 
example user perceived latency due backbone delay reduced 
contrast proxy caching reduce backbone traffic user response time due backbone delay caching dynamic content near clients 
focus proxy caching scripts generate dynamic content 
cao propose elegant architecture similar piece java code called cache applet attached dynamic document cached proxy 
cache applet task deciding cached version dynamic document returned new version created proxy request forwarded origin server regeneration 
cache applet run proxy request cached document received 
approach extremely flexible maintain consistency application specific manner dynamically modify existing documents 
flexibility achieved price 
requires starting new java process virtual machine compiled code request order execute applet 
addition keeping track result equivalence requires creation maintenance pattern matching network 
cache applet document independent security reasons cache applets implement result equivalence caching need save restore pattern matching network persistent storage significant performance constraint 
cache applet handle situations dynamic content written java 
proxy caches capable delivering dynamic content vulnerable bad content may control applications change state origin server selling products behalf commerce site 
traditional security mechanisms longer sufficient ensure integrity 
gemini security aware publisher centric web cache 
help public key infrastructure provide key distribution clients caches publishers check digital signature 
origin server publisher certificate identifying public key 
origin server decides proxy caches 
content object origin server associated access control list specifying caches allowed stored object 
cache receives content object access control list generates dynamic content 
client cache may attach access control list origin server client verify cache authorized generate requested content 
scheme adopted architecture authenticate caches servers vice versa digital signatures ensures active content replicated executed presence mutual trust 
akamai uses edge side include esi technology handle dynamic content content distribution network service 
esi markup language developers identify content fragments dynamic assembly network edge servers 
non expired fragments need fetched origin servers lowering need retrieve complete web pages decreasing workload origin servers 
scheme dynamic content cached proxy cache servers 
research peer peer networks investigates efficient scalable distributed content lookup services 
efforts generally focus content application layer routing find content location key network tens thousands nodes 
efficiency scalability fault tolerance major design concerns 
example applying concepts specifically web caching squirrel decentralized peer peer web cache 
setting centralized proxy cache server group client machines client machines cooperate peer peer fashion provide functionality web cache 
client machine allocates certain portion disk caching web content exports local cache machines 
local caches group machines synthesize large shared peer peer virtual web cache 
target environment squirrel corporate networks client desktops 
calo proposed architecture active content caching similar 
architecture proxy caches receive dynamic content requests determine execution parameters may needed invocation download program configuration information origin server 
application logic executed proxy server administrative information error messages logged sent origin server 
difference architecture theirs implementation download programs java implementation restrictions application programming languages 
explicitly consider qos requirements associated content classes 
architecture section architecture content distribution service 
consider network model shown 
architecture web cache proxies capable replication execution active objects addition traditional caching static objects 
call active cache proxies 
proxies connected servers export active content replication 
call origin servers 
call caches servers support extensions compliant 
active caches take care maintaining scripts data cache consistent origin server 
subsections discuss respectively protocol architectural issues regarding origin servers active proxies consistency management 
origin server origin server contains original copy particular site 
associate site single origin server 
updates content site originate server 
server network core network node cache storage comput 
power storage capable qos aware rim clients network model active caching support demand active content replication server software needs slightly modified 
extensions integrated way violate current standard protocols compliant server communicates non compliant legacy cache vice versa 
current version allows clients proxies negotiate type requested content servers 
example client proxy specify accepts documents written french 
departure point lies introducing content type definitions refer active content requests fetch content generating scripts 
introduce header option alerts receiver active content requested 
architecture active content types classified language script cache compiler interpreter operating system script designed 
type scripts example perl scripts unix 
non compliant server receives request url www server com prog cgi execute named script locally default sending resulting page back client proxy 
compliant server receives request looks new header option 
serves result script execution ordinary server 
identifies request coming compliant sender active cache examines types scripts cache says supports 
list include requested script type server executes script locally 
particular script type supported cache replication protocol invoked script replicated 
extensions fully interoperable current standards 
software origin server requires changes order recognize requests active caches 
dynamic content module implemented determines requested script executed locally sent requester 
case server may send additional information pertaining consistency management script replica discussed shortly 
information called ticket 
active caching protocol illustrated 
steps protocol shown identical standard 
steps specific active content replication 
active cache active cache architectural component responsible locally replicating scripts remote origin servers 
active cache composed primary components proxy cache active server shown 
proxy cache handles job caching static content dynamic content generated executing server scripts needed 
active server handles job executing web server 
server decides execute script send cache 

server replies script execution results script plus ticket 

cache fetches dependent objects needed 

cache requests script server 

script executed applicable ticket marked cache proxy 
cache sends results client 
client issues request dynamic content client active caching protocol types related dynamic content say example cgi fast cgi active cache multiple active servers handle different types dynamic content 
example server handle perl scripts handle asp content 
modified version freely available squid proxy cache proxy cache component apache web server active server 
squid proxy cache includes redirector component 
clients contact squid cache component content requests 
requests static content squid directly contacts origin server retrieves results caches accesses 
requests dynamic content squid uses redirector modify client requested urls 
squid redirects requests dynamic content apache active server component fetches script origin server executes returns results squid 
proxy active server components running physical machine machines local network overhead involved far going internet backbone origin server 
addition squid proxy cache cache results execution script active server configured 
requests scripts inputs may served squid cache 
components architecture shown url rewriting engine timer module script cache part active server component 
url rewriting engine receives requests active content forwarded proxy cache component 
active server visible outside world services requests squid proxy cache component 
url rewriting engine rewrites urls proxy requests server client originally requested 
active server component active cache receives reply origin server executes client requested parameters 
fetched script saved local script cache 
data script requires order execute fetched server cached detailed section 
deal read scripts modify data 
significantly simplifies consistency management 
consistency management consistency management protocol ensures script data objects kept weakly consistent server 
active server consistency manager module handles job maintaining consistency 
consistency management periodic polling similar common time ttl approach 
cached script associated ttl 
scripts re executed long ttl expired 
believe practice scripts change 
weak active cache dynamic content module dynamic content module redirector cri pt url rewriter content server content server timer active server proxy cache 
internet url rewriter fi le script timer active server client client client dynamic content module content server server components active cache consistency sufficient 
data objects scripts associated polling period retrieved origin server 
considered consistent origin server long period expired 
time cached data objects accessed scripts user requests 
new copy data objects requested origin server period expiration 
reduce periodic polling server may associate data object ticket 
ticket specifies number accesses occur polling period periodic polling continue 
required number accesses occur polling period cache contact server period expiration 
contacts arrival request 
request rate low extra polling overhead observed 
polling period dynamically adapted qos sensitive manner response network load conditions 
maximum allowable polling period specified content class basis 
consistency manager maintains mapping scripts data files 
contains timer thread invoked constant intervals time 
timeout consistency manager checks data files need re fetched origin servers 
files fetched parallel concurrent threads 
current bandwidth available cpu workload monitored time new thread spawned 
available bandwidth falls threshold cpu workload exceeds certain threshold consistency manager expands polling period data files data files fetched time 
main objective dynamic content caching scheme maximizing timely hits resource consistency constraints 
service model content divided classes 
class associated deadline minimum consistency nominal consistency requirements 
deadline specifies desired response time class 
sets order polling requests origin servers 
minimum nominal consistency requirements specify maximum nominal tolerable staleness data objects class denotes respectively 
example stock data may nominal tolerable staleness minutes maximum tolerable staleness minutes 
objective maximize weighted sum timely hits 
hit timely meets deadline constraint 
weighted utility function content freshness consistency constraints 
implementation averaged data items touched script serving request time elapsed data item fetched server 
ensure fairness consistency manager adjusts polling periods objects utility weights equal maximized current load conditions 
implementation details section discuss implementation details architecture protocol 
active cache chose freely available squid proxy cache proxy cache component apache web server active server component mentioned section 
implementation describe implementation journey request arriving client active cache 
arrival request redirector component selectively rewrite urls requested client 
case redirect client urls requesting dynamic content active server requested origin server 
client requests static content redirected directly forwarded requested origin server 
example original request www xyz com hello cgi active server cs virginia edu redirection request cs virginia edu cgi bin hello cgi 
redirection capabilities available squid redirector component 
squid useful feature allows third party redirector 
tool available gnu general public license version redirector 
chose purpose popular times faster highly configurable 
order url redirection squid configured redirector 
default squid rewrites host header redirected requests point new host url redirected 
turn option save name host request originally meant eventually forward request host 
configuration parts configuring access control list configuring redirector rules 
configured accept urls squid accepts 
part redirection rules configured ignore url html htm shtml java jpg requests static content redirected handled squid just handles static content 
contrast urls contain strings cgi bin asp redirected active server 
done adding rule similar cgi bin cs virginia edu cgi bin cgi bin squid proxy cache receives request dynamic content checks see cached version content 
performing checks determine cached content valid returns cached page redirects request appropriate active server obtain date version content 
active server receives redirected request checks see script requested cached locally 
executes script current inputs returns results squid proxy cache 
case cached version script available locally active server initiates url rewrite operation 
url rewritten fetch script server specified host header case holds name server request originally meant 
functionality provided apache mod rewrite module perform url rewriting 
sample rewrite rule cgi bin host cgi bin rule states urls meant served cgi bin directory rewritten served directory host specified host environment variable 
wish cache script returned force request proxy request indicated 
proxy request handled apache mod proxy module 
example request meant www xyz com cgi bin hello cgi redirected active server residing cs virginia edu active server determining url script called hello cgi cached locally rewrites url www xyz com cgi bin hello cgi 
origin server receives proxy request dynamic content able distinguish request originated active cache 
order facilitate active server modifies request header forwarding request 
modifies accept header adding string script header :10.1.1.35.2623
dynamic content module destination server recognizes special extension script executed locally returned requester implemented security mechanism experimental prototype server look digital signature requesting proxy decide trusted script 
cache script executed locally 
trusted active server receives reply origin server checks origin server signature versus supplied content provider subscription time 
server trusted caches reply script local script cache 
apache proxy caching capabilities provided mod proxy module purpose 
executes script parameters supplied client returns results squid proxy cache 
script api order active server able fetch data script origin server require script performed read write primitives 
require script executable linked library 
allows implement location transparency script finds needed data objects locally regardless executes consistency manager fetch origin server 
requirement particular middleware api arguably limitation 
limitation shared technologies depart legacy code 
example java recognized important vehicle software portability time inception obvious limitation having portability user learn new programming language translate current code 
similar arguments regarding corba rpc languages middleware 
simply tools potential engaging argument commercial viability interfaces current form 
may worthwhile investigate hiding api calls beneath standard library interface making transparent programmer 
api buys location independence server scripts implemented languages java proof concept implementation api consists calls fd file mode class ttl call open existing file cases create 
file parameter name path file opened 
mode indicates modes opened class parameter different values file expires ttl amount time automatically 
file fetched demand fetched request 
file temporary file consistency requirements 
created locally exist removed closed 
third fourth parameters optional 
specified consistency mechanism assumed demand ttl zero 
call call status fd buffer count call attempts read count number bytes file description fd buffer buffer 
provide call 
currently call write files consistency requirements indicate temporary file 
call call closes file associated file descriptor fd 
call api 
call basically indicates script ip address host name origin server written 
required order distinguish script currently cached active server proxy executing origin server 
ip address evaluation section evaluate performance system experiments emulation environment planetlab real world internet testbed 
experiment results demonstrate system lead significant average client perceived latency improvement better service scalability 
mechanisms provide real time guarantee client requests leveraging trade client request processing latency content staleness 
analysis performance mechanisms provided 
experiment testbed consists full implementation active cache origin server instrumented squid apache servers discussed sections 
emulate large number clients sending requests surge scalable urls generator tool generates matching empirical measurements web request size distribution relative file popularity embedded file idle periods individual clients locality 
advantage surge mimics set real clients generates realistic web workloads 
slight extension surge generate urls dynamic content provided content publishers 
show general performance gain client observed response time sets experiments conducted scenarios active cache 
client requests scripts generated sent server approximately minutes 
set experiments requests sent directly origin servers 
second set requests sent active cache 
conducted experiments planetlab 
origin server active cache server deployed europe universita di bologna north carolina usa duke university respectively 
clients running surge virginia usa university virginia 
setup clients relatively close active cache origin server far away vision origin server virtually world active cache server widely deployed cdn system client able connect cdn server runs service close client 
delay consists internet backbone delay clients active cache server delay active cache server origin server server proxy processing time client delay 
experimental results show average reduction latency average 
plots observed response time community users accessing script active cache 
client observed latency limited milliseconds time active cache 
note time script executed active server results sent back clients active cache 
latency correspondingly low 
spikes occur active server goes wide area network re fetch data files origin server consistency requirement script 
active cache latency higher compared active cache large variabilities attributed instability internet backbone 
going illustrate evaluate system performance high workload 
planetlab shared platform explicitly discouraged running extensive overload experiments servers 
nist net wan emulator emulate environment planet lab servers 
nist net linux kernel module add configured latencies incoming packets 
servers lan configured module network latency data gathered planetlab 
demonstrate fidelity emulated wan environment experiments lan nist net 
shows result emulated wan matches fairly planetlab 
experiments point conducted emulated wan 
active cache active cache active cache emulation avg client perceived delay msc scripts average latency improvement active cache active cache client perceived delay msec consistency manager working set observations client perceived latency single script cpu utilization polling active cache origin server origin server cpu utilization polling active cache origin server origin server observations ii observations cpu utilization polling active cache origin server origin server cpu utilization iii observations iv observations cpu utilization impact polling period architecture achieves reduction workload origin server client perceived latency cost adding workload active cache 
depicts important metrics workload cpu utilization origin server active cache 
shown active cache considerably reduces cpu utilization origin server effectively shifting computational demand remote server local proxy 
figures ii iii show cpu utilization active cache origin server cache different polling periods active cache 
expected higher polling periods correspond higher utilization quantifies overhead scheme 
active cache utilizations different polling periods compared iv 
important advantage architecture better ability provide real time guarantees latency content access replicating content network edge closer clients reduces clients average content access latencies impact variabilities internet 
previous studied feasibility cdn service replicates content internet global delay bound guaranteed access requests cdn 
focus put dealing network latencies 
provide real time guarantee content access system latency dominate client perceived delay 
providing mechanisms system adapt workload change avoid overloading server crucial success provisioning real time guarantee 
argue applications getting prompt response server important served content 
sacrifice staleness content favor better performance conforming latency bound 
specifically active cache large number scripts registered system responsiveness system suffered consistency manager high workload maintaining consistency scripts 
protect system overloaded consistency maintenance workload reduce frequency consistency manager polling origin servers release consistency content 
mentioned section active cache system latency bound content access consistency requirements nominal maximum tolerable staleness specified qos contract content providers 
requests timely hit ratio defined ratio client requests served latency bound drops certain value called low watermark release consistency content gradually 
content categorized different classes consistency degradation started lowest priority class 
consistency releasing continued requests timely hit ratio rises certain level content classes maximal tolerable staleness 
timely hit ratio reaches certain point called high watermark system try tighten consistency starting important class timely hit ratio drops low watermark classes nominal staleness 
implemented mechanisms adaptive consistency adjustment requests requests timely hit ratio 
mechanism consistency manager periodically gets reports proxy cache informing current request timely hit ratio decision adjusting consistencies content classes 
period adjusting consistency comparable consistency content classes 
call minimal adjustment consistency value adjustment granularity 
mechanisms discussed linear adjustment time consistency manager received reports timely hit ratio changes adjustment granularity relaxing tightening consistency 
proportional adjustment changes consistency manager determined current timely hit ratio reported proxy cache constant configurable system parameter 
mechanism proportional adjustment proportional difference current targeted timely hit ratio 
compared linear adjustment proportional adjustment faster bringing timely hit ratio back low watermark potential effect adjustment may fully taken consistency manager adjustment 
going evaluation mechanisms 
experiments content classes seconds nominal staleness seconds maximum tolerance staleness 
chose low watermark high watermark 
proxy cache reports current timely hit ratio consistency manager seconds 
illustrates workload experiments 
small number clients requesting scripts small set labelled working set 
time unit introduce clients system requests span large set scripts 
change number clients gradual increase working set time plotted 
working set size number clients number clients consistency manager working set time unit workload sets experiments choose ms ms latency bound content classes 
see client requests introduced time unit significantly impact timely hit ratio times 
consistency manager immediately takes action relaxing consistency timely hit ratio gradually rises back 
depict performance linear adjustment proportional adjustment tight latency bound ms 
figures see linear adjustment conservative relaxing consistency minimal change time unit relaxes content classes maximum tolerable staleness 
contrast proportional adjustment abrupt changes content consistency large latency bound ratio seen 
content classes quickly reach tolerance bound 
note proportional adjustment aggressiveness help pulling timely hit ratio faster 
note experiments class chance get back better consistency latency bound tight 
show results stringent latency bound ms 
different previous case content classes pushed maximum tolerable staleness larger latency bound 
process fist relaxing tightening consistency content seen linear proportional adjustment cases 
proportional adjustment mechanism enjoys slightly faster recovery timely hit ratio linear adjustment 
hand linear adjustment achieves better consistency content 
tell class important class enjoyed nominal staleness time time unit class got back nominal staleness shows class suffered long period time degraded maximum staleness classes get consistency linear adjustment case 
additional observations figures 
cases classes roughly timely hit ratios experiment time indicates fairness terms delay guarantee 
second clear consistency lowest priority class gets relaxed gets tightened supposed 
consistency sec timely hit ratio class class class time class class class time consistency timely hit ratio linear adjustment latency bound ms consistency sec timely hit ratio class class class time class class class time consistency timely hit ratio adjustment latency bound ms consistency sec timely hit ratio class class class time class class class time consistency timely hit ratio linear adjustment latency bound ms consistency sec timely hit ratio class class class time class class class time consistency timely hit ratio adjustment latency bound ms proposed implemented novel scalable architecture dynamic web content replication 
solution involves replicating scripts generate active web content data server active caches nearer clients 
experimental results showed significant improvement effective throughput client response time 
reducing workload origin servers improves service scalability 
addition architecture provides customizable consistency semantics 
currently implementation supports read scripts 
subscribers clients modify data publisher origin server 
investigating methods allow replicated scripts modify shared objects 
current implementation just downloads executables publishers active server potentially platform heterogeneity issue 
origin servers active just passively serving requests active caches 
origin servers take certain proactive strategies feed data active caches internet backbone 
origin server active server cooperate effective way interesting topic 
implementation requires scripts set api 
trying remove limitation programmer write scripts favorite languages consideration new interface 
apache 
apache software foundation www apache org 
barford crovella 
generating representative web workloads network server performance evaluation 
acm sigmetrics 
beck moore johansson 
enabling full service surrogates portable channel representation 
international world wide web conference 
calo verma 
architecture acceleration large scale distributed web applications 
candan 
li luo 
agrawal 
enabling dynamic content caching web sites 
proceedings acm sigmod international conference management data management data 
cao irani 
cost aware www proxy caching algorithms 
usenix symposium internet technologies systems 
cao zhang beach 
active cache caching dynamic contents web 
proceedings ifip international conference distributed systems platforms open distributed processing middleware 
challenger dantzig iyengar 
scalable system consistently caching dynamic web data 
proceedings th annual joint conference ieee computer communications societies new york new york 
chankhunthod danzig neerdaels schwartz worrell 
hierarchical internet object cache 
usenix annual technical conference pages 
douglis rabinovich 
hpp html macro preprocessing support dynamic document caching 
usenix symposium internet technologies systems 
edge side include www esi org 
gettys mogul frystyk masinter leach berners lee :10.1.1.35.2623
hypertext transfer protocol 
smith yang 
cooperative caching dynamic content distributed web server 
proceedings seventh ieee international symposium high performance distributed computing hpdc pages 
huang abdelzaher 
performance evaluation content distribution networks real time guarantees 
iyengar challenger 
improving web server performance caching dynamic data 
usenix symposium internet technologies systems 

www ivs cs uni magdeburg de 
rowstron druschel 
squirrel decentralized peer peer web cache 
proceedings th acm symposium principles computing podc 
myers chuang xie zhuang zhang 
secure publisher web caching infrastructure 
ieee infocom 
net 
ncsl nist gov itg 
planet lab 
www planet lab org 
rajamani cox 
simple effective caching scheme dynamic 
technical report tr computer science dept rice university 
ratnasamy francis handley karp shenker 
scalable content addressable network 
sigcomm 
rowstron druschel 
storage management caching past large scale persistent peer peer storage utility 
proceedings th acm symposium operating systems principles banff canada oct 
smith acharya yang zhu 
exploiting result equivalence caching dynamic web content 
usenix symposium internet technologies systems 
squid 
squid web proxy cache www squid cache org 

redirector squid foote com au 
stoica morris karger kaashoek balakrishnan 
chord scalable peer peer lookup service internet applications 
sigcomm 
wolman voelker sharma cardwell karlin levy 
scale performance cooperative web proxy caching 
symposium operating systems principles pages 
yu breslau shenker 
scalable web cache consistency architecture 
sigcomm pages 
zhao kubiatowicz joseph 
tapestry infrastructure fault tolerant wide area location routing 
technical report ucb csd berkeley 
zhu yang 
class cache management dynamic web contents 
ieee infocom 

