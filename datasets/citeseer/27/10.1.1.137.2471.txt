just fast keying pi calculus mart abadi bruno blanchet dric fournet university california santa cruz cnrs partement informatique cole normale sup rieure paris max planck institut informatik saarbr cken microsoft research 
jfk attractive protocol fast key establishment part securing ip communication 
analyze formally applied pi calculus partly terms observational equivalences partly assistance automatic protocol verifier 
treat jfk core security properties properties rarely articulated studied rigorously resistance denial service attacks 
course analysis ambiguities minor problems obtain positive results jfk 
purpose develop ideas techniques useful generally specification verification security protocols 
design security mechanisms internet focus activity 
particular ip security received attention area seen progress disappointment controversy 
internet key exchange ike protocol important method establishing cryptographic keys secure ip communication subject considerable reasonable criticisms 
criticisms tend concern core authenticity secrecy properties ike offers complexity ike inefficiencies poor resistance denial service dos attacks 
protocols aim address ike shortcomings 
include jfk protocol just fast keying protocol currently development 
respects ike successors fairly classical security protocols 
employ common pieces standard arsenal modern cryptography aim guarantee integrity secrecy ip communication 
subject common efficiency considerations limit expensive cryptographic operations number size messages 
basic aspects protocols jfk particular exhibit number interesting features address security objectives 
objectives subtle seldom articulated precisely 
give rise new tensions delicate compromises 
instance name privacy protocol may attempt hide identities participants provide identity protection guarantee plausible deniability actions may accordingly avoid delay earlier version appears proceedings th european symposium programming 
schmidt ed esop lncs pp 

springer verlag berlin heidelberg 
authentication participants 
hand strong early authentication simplify dos resistance 
course tensions unique jfk close relatives 
increasingly important design modern security protocols 
jfk exemplifies resolves nicely 
analyze jfk relying applied pi calculus extension standard pi calculus functions 
specifically formalization variants jfk known closer 
fairly short formalization gives fine level detail modelling contexts parallel sessions 
covers aspects protocol messages wire protocol interfaces checks performed participants delicate features treatment duplicate requests 
treat properties protocol plausible deniability dos resistance 
consider properties single model protocol need define special partial models particular properties 
provide proofs properties 
proofs done hand done automated protocol verifier 
cases overlaps kinds proofs overlaps provide extra assurance correctness formalization proofs 
establishing standard security properties correspondence assertions limited comes subtler properties prove partly hand 
course analysis identified minor limitations weaknesses jfk 
particular discovered jfk provide identity protection expected basis informal descriptions protocol 
discover fatal mistakes 
surprising authors jfk substantial experience protocol design jfk benefited careful review prolonged discussion ietf context 
observations results jfk study contributes specification verification security protocols ways 
basic approach tools come pleasing confirm effectiveness 
hand approach formalizing protocol mundane facets largely new applicable 
similarly proofs non trivial motivate new developments techniques 
novelties include formulation plausible deniability general lemma state elimination extensions 
proofs provide opportunity integrating manual automatic methods applied pi calculus 
contents section review informal discussion jfk 
section presents model applied pi calculus 
section treats dos resistance 
section concerns core security properties secrecy authenticity 
briefly addresses identity protection 
section mentions related concludes 
space constraints version omits material appears extended version discussion ambiguities minor problems description partial analysis protocol variant review applied pi calculus material identity protection dos resistance study plausible deniability details proofs 
jfk protocol jfk protocol discussed series internet drafts starting described conference 
documents tend privilege contents conference permanence 
refer additional material protocol motivation 
indicated focus variant called 
involves principals play roles initiator responder 
protocols principals wish open secure communication channel attempt accomplish establishing shared secret 
shared secret serves basis computing session keys 
principals associate shared secret verify identities agree various communication parameters example sort session keys employ 
attackers may eavesdrop delete insert messages may attempt impersonate principals 
communications initiator responder cryptographically protected 
informally consists messages xi di message ni xi message ni nr xr tr message ni nr xi xr tr ei hi message er hr ku xr di ni nr xr dr tr kr xr nr ni ipi ei ke idi id sai si er ke idr sar sr hi ka ei hr ka er si ni nr xi xr gr sr xr nr xi ni summarizes notations exchange 
pair messages establishes shared secret diffie hellman exchange 
principal generates communicates fresh nonce nz 
principal selects generates secret exponent dz communicates corresponding exponential xz dz 
relying equation xr di xi dr independent shared keys derived nonces exponentials ka ke messages kv returned principal newly established session secret 
reuse exponentials allowed trade forward secrecy efficiency case freshness nonces suffices guarantee generated shared secrets differ sessions 
message includes authenticator cookie tr keyed secret local responder kr 
responder expects see cookie message need perform expensive cryptography allocate resources successful roundtrip initiator 
furthermore receiving message responder remember handling tr avoid expense event tr replayed 
roles protocol initiator responder 
nz random fresh nonce session 
dz diffie hellman secret exponents 
xz dz diffie hellman exchange values 
diffie hellman group possibly obtained previously received gr 
gr responder choice group cryptographic algorithms 
tr authenticator cookie responder dos 
kr responder secret hash key authenticators tr 
usages keys authentication encryption main session secret 
ku shared key obtained diffie hellman computation specialized shared key encryption function 
keyed hash function macs message authentication codes 
ez hz encrypted payload messages macs protecting identity signature 
public key signature function 
sz signed nonces exponentials 
private signature key principal playing role identity principal playing role public signature verification key 
id hint responder identity provided initiator 
ipi ip source address initiator hashed tr 
saz additional parameters setting ip security associations sa sa 
principals part protocol roles 
fig 

main notations second pair messages provides authentication 
specifically messages include encrypted signatures nonces exponentials material 
encryptions protect identity information 
signatures interpreted delegations principals control signature keys possibly users protocol endpoints control exponents 
transient protocol data signed identities long term keys associated users 
respect protocol tune concerns plausible deniability appeared time time context 
protocol specification clear focuses messages exchanged single successful protocol run 
say local processing parties perform deployment protocol subjects relevant security 
instance prescribe principals protocol especially sharing signing keys exponentials messages checked responder manage state order resist dos attacks 
reason believe implementations differ respects unfortunate consequences 
protocol specification state security objectives 
discuss study formally 
model jfk applied pi calculus section express applied pi calculus 
calculus extension pi calculus function symbols instance tupling encryption assumed satisfy particular equations 
refer prior syntax semantics 
select function symbols equational theory terms variable name diffie hellman group exponential shared key encryption decryption true public key signature verification pk public key identity private key keyed cryptographic hash function constant tags keyed hash specialization cons 
constructors pairs formatted messages cons cons 
selectors pairs formatted messages empty set set extension additional functions attacker diffie hellman pk true public key signature verification shared key decryption 
xi 
xi projections tuples cons idempotence set extension commutativity set extension pk public key recovery signature attacker signed text recovery signature attacker fig 

grammar equational theory jfk modelling messages discuss representations ip network attackers principals assemble processes represent configurations principals 
outline program processes 
equational theory grammar terms equations 
deal cryptographic operations auxiliary functions constructing tags pairs formatted messages sets 
functions constructing sets set membership relation abbreviate equations embody fairly standard hypotheses primitives introduced section 
instance keyed hash function appear equation particular inverse represents perfect way function 
interestingly exponentiation inverse equation accounts commutativity property establishing shared secret 
functions equations needed protocol may principle weaken protocol benefit attacker extract information signatures 
refine theory reflecting known weaknesses underlying cryptographic algorithms interactions 
syntax informal semantics processes recall main notations processes applied pi calculus typically omit parallel composition behaves infinite number copies running parallel new name behaves standard depending equational theory 
input process ready input message channel run actual message replaced formal parameter output process ready output message channel run process 
xn vn local variables 
xn bound 
vn respectively 
active substitution 
xn vn similarly defines 
xn restrict scope environment 
xn aliases 
vn computations 
context process hole result filling hole guard evaluation context 
labelled transitions represent interactions environment inputs outputs respectively 
communication channel message 
transitions represent internal computation steps 
syntactic sugar write true omit pair constructors parentheses nested pairs writing instance xr nr ni cons xr cons nr ni 
pattern matching tuples syntactic sugar corresponding selectors writing instance ni xi xi ni xi fresh variable process receives message channel matches ni subterm runs substituted xi 
define syntax filtering duplicate messages fresh stands context pattern fresh channel name fresh variable 
local channel maintaining set previous values term arrival message may cause addition particular may depend variables bound set execution network attacker model ip messages transmitted free pi calculus communication channel represents public ip network message contents serve differentiating traffic flows 
arbitrary environment arbitrary evaluation context represents attacker 
environment interact principals inputs outputs free channel including special case model weaker passive attacker messages modify 
attack step process consists eavesdropping message sent amounts message interception formally output label followed re emission mes sage input label 
write shorthand transitions configurations principals model allows arbitrary number principals 
principal may run number sessions initiator responder may perform operations session establishment independently protocol 
principals follow protocol 
interested security properties hold 
purposes essence principal lies ability produce signatures verifiable public key 
accordingly refer principal public key variables ida idb 
identities public keys 
associate context ka principal context restricts signing key process context exports corresponding verification key ida put process context intent communicates environment 
range sets compliant principals principals entirely delegate signing keys 
properties obviously hold compliant principals initiator responder code assume knowledge compliant non compliant principals attempt establish sessions 
representation compliant principal parts implementation written user process written pa user process defines additional behavior protocol runs initiated happens shared secret kv session establishment 
define treat pa parameter context encloses possibly control attacker 
user process interacts control interface initiator pa sends message init id sai initiate new session responder hint id security association sai 
protocol completes successfully sends connect idb id sai sar kv notify pa session accepted shares kv principal identifier idb 
responder sends accept idb id sai sar kv notify pa accepted session initiated principal identifier idb parameters id sai sar shared secret kv 
control initiate session param acceptable initiator identities 
need set set sa sa initiator completion protocol initiator user process decide new session depending responder identity connect message 
simplicity sar fixed 
interface principal consists communication channels plus set identities sa channels restricted order hide interface environment 
instance principal play role initiator modelled easily restricting communication init protocol shows implementation applied pi calculus 
includes definitions processes role single process initiator processes share session state responder 
principal replicated processes detail tests performed incoming messages interleaved computations outgoing messages 
includes definition configuration assembly arbitrary fixed set compliant principals potentially share arbitrary fixed pool exponentials design jfk allows reusing diffie hellman exponents sessions principals roles impose particular policy changing 
exponent decide exponent new sessions 
init id sai 
initiator message init ni 
create fresh nonce ni xi send message ni nr xr gr tr 
wait message compute dh shared keys see si ni nr xi xr gr sign ei ke ida id sai si encrypt hi ka ei compute mac ni nr xi xr tr ei hi send message er hr 
wait message ka er hr check mac idr sar sr ke er decrypt idr sr ni nr xi xr check signature connect idr id sai sar kv complete keying ni xi 
responder message nr 
create fresh nonce tr kr xr nr ni compute anti dos token ni nr xr gr tr send message ni nr xi xr tr ei hi 
responder message tr kr xr nr ni check anti dos token tr fresh xr accept token branch dh exponential compute dh shared keys see ka ei hi check mac idi id sai si ke ei decrypt idi authorize idi si ni nr xi xr gr check signature accept idi id sai sar kv accept session sr ni nr xi xr er ke ida sar sr sign encrypt hr ka er compute mac er hr send message dx ka compliant principal configuration xi ia initiator kr xr ra responder ida pk signing verification keys dx dx dx dh secret exchange value dx dx 
dxn 
xn shared exponentials ku xr dxi ni nr key computations ku xi ni nr key computations fig 

applied pi calculus instance exponent may expire session established exponent terminates discarding session keys prevents compromise 
model compliant principals may number shared exponentials roles number parallel sessions 
results configurations sharing immediate corollaries 
context dx represents diffie hellman party dx corresponding secret exponent derived exchange value exponential group compliant principals 
set contains exponentials shared compliant principals 
context dx consists contexts dx simplicity code compliant principals disclose exponents 
contrast actual implementations jfk model treats abstractly aspects protocol 
particular uses unambiguous format messages assuming instance wire format messages leak additional information ill formed messages safely ignored 
furthermore cover ip addressing routing fragmentation concerns contents security association parameters saz handling id potential usage groups aspects caching error messages 
simplifications partly choice partly necessity resulting model remains quite informative rich 
script proof automation rely partially proofs 
purpose code jfk configurations input syntax ascii syntax applied pi calculus specify properties prove simply run 
correctness proofs relies theory developed prior secrecy correspondence assertions extensions 
additional details script appear full 
script differs superficially gives interface adversary enables creation compliant principals provides identities control interfaces shared exponents provides exponentials 
unfoldings best omitted statements theorems 
configuration apply evaluation context process defined script resulting process observationally equivalent exporting exponentials principal identities control channels init accept connect resistance denial service attacks consider security mechanisms early stages protocol mutual authentication 
mechanisms aim hardening jfk certain dos attacks relevant ip security 
formal analysis relies understanding costs incurred stages characterize occurrences operations deemed expensive formal measure cost 
jfk protocol dos concern responder 
design computation processing messages fast involves state 
point protocol performs cpu intensive operations including diffie hellman exponentiation public key operations allocates session state 
general protocol processing message depends contents previously received messages principal may maintain local state session protocol 
state problematic servers willing start session receive message adequate authentication 
attacker may send redirect message traffic server filling buffers eventually causing valid session attempts dropped 
concern motivates common protocol transformation keeping state session progress parties mac encrypt state append result outgoing messages check decrypt corresponding values incoming messages processing 
show transformation correct preserves equivalence general class protocols coded processes 
relate sequential implementation protocol complex stateless implementation observational equivalence relation 
relation closed application evaluation contexts represent active attackers 
lemma 
context binds variables fresh name fresh rely syntactic sugar pattern matching retry message matches pattern received writing 
automated proofs need equivalent verbose encoding collects variables bound 
informally represents state protocol represents message carrying represents new data received message 
presence state message received checked authenticator inclusion fresh nonce guarantees generated authenticators different 
generation fresh matching serve functional purpose performed implementations protocol behave similarly 
additional process necessary account possibility receiving message discarding failed test 
lemma reminiscent classical replication laws process calculi contain replications typically 
lemma applies protocol transformation 
relates main model see features stateless responder till reception message valid token simplified linear model lemma enables prove properties preserved trace properties lemma 
replacing ni xi nr tr ni nr xr gr tr ni nr xi xr tr ei hi 

theorem expresses responder commits session specific resources initiator established round trip communication sent message received message returned message matching nonces 
property helps responder controls emission tokens cheaply invalidate old ones rekeying kr blind attacker weaker typical needham schroeder attacker may send messages fake ip addresses may able eavesdrop corresponding messages 
theorem protection dos 
additional output ni nr diffie hellman computation ra trace output ni nr distinct successive actions ni ni nr ni nr 
additional output serves marker start expensive processing public key operations session state allocation 
theorem formulates roundtrip authentication injective correspondence actions 
correspondence depends authenticator prove applying variant lemma obtain equivalent linear protocol invoking protocol 
incorrect interpretations theorem false messages may processed authenticator 
core security secrecy authenticity consider session key secrecy mutual authentication 
configuration compliant principals sharing exponentials study arbitrary runs protocol examining transitions arbitrary sequence labels 
labelled transitions omit internal steps 
informally represents reachable state configuration presence attacker controls low level ip network control interfaces principals theorem characterizes runs protocol involve compliant principals terms observed eavesdropper 
write communications ni ni xi nr tr ni nr xr gr tr ei hi ni nr xi xr tr ei hi er hr er hr 
write frames map variables ni nr tr ei hi ni nr tr ei hi er hr kv respectively distinct restricted names 
frame basically active substitution restricted names 
frames represent simplified net effect runs including passing kv 
examine sessions compliant principals starting reachable state protocol 
theorem secrecy complete sessions 
assume principals exponentials xi xr terms id sai exists ida init id sai kv accept ida id sai sar kv idb id sai sar kv ii ida 
theorem expresses functioning protocol normal outcomes depending ida sb disjunct acceptance second rejection 
uses observational equivalence give simple characterization protocol outcomes apparently back state protocol just session began export variables bound plain names representation independent fresh values pi calculus 
viewpoint attacker eavesdrop communicate control interfaces intercepted message fields session key appear fresh independent names computed values 
particular attacker learn kv control interfaces ei er leak encrypted contents 
furthermore equivalences ensure session depend affect session statement theorem deals temporarily passive attacker combination theorem cover cases complete sessions 
complementary authentication properties expressed correspondence properties control actions messages control interfaces active attacker 
theorem authenticity control actions 
assume actions properties 
accept ida id sai sar kv ida sb distinct init id sai 

connect idb id sai sar kv distinct init id sai distinct accept ida id sai sar kv proof properties relies 
property analyze linear variant extend result lemma contrast direct automated analysis yields weaker non injective correspondence keep track linearity enforced authenticator cache 
yields proofs properties variants protocol sharing exponentials 
theorem deals active attacker 
says trace includes control message connect idb 
trace essentially contains normal successful run protocol eavesdropper described theorem 
hypotheses exclude internal communication assumption means attacker sees messages convenient essential 
theorem authenticity complete sessions 
assume idb id sai sar kv internal communication steps fresh distinct exported variables 

contains series transitions match init id sai kv ida id sai sar kv order possibly argument xi input argument tr second input third output 
erasure transitions 
show point theorem lemma 
theorem simpler theorem deals interface protocol control actions 
theorem complex expresses properties control actions lower level ip messages exchanged protocol 
properties imply certain protocol inputs match previous protocol outputs inputs authentic 
general expect exact match message fields matches facilitate formal analysis fields authenticated 
absence authentication xi message weakens identity protection 
absence authentication tr initiator harmless inasmuch tr perfect forward secrecy corollary theorems session key kv exported control actions equivalent variable bound fresh independent name contains kv 
observational equivalence kv syntactically independent values intercepted attacker 
previously discussed provides characterization perfect forward secrecy session key 
obtain property liberal reuse exponentials 
derive specific property kv distinct key established session protocol 
independently shows key kv exchanged compliant principals remains secret adversary compute give long term secret keys principals attacker protocol run 
similarly presupposes verifies environment obtains signing keys diffie hellman secrets dx 
identity protection rely observational equivalence identity protection 
intercepted variables defined independent ida id idb property strong privacy guarantee sessions compliant principals 
guarantees obtained particular hypotheses see 
instance identities form ida accept sessions attacker input init responder theorems easily check identity idb occurs outputs connect observed active attacker 
prove additional identity protection properties cases hand limitations identity protection 
despite substantial body formal analysis security protocols despite interest ike related protocols ike successors subject exhaustive analysis 
presents jfk argues informally core properties calls formal analysis 
datta explores sts protocol jfk variants core ike derived successive refinements 
particular isolates usage authenticators discusses properties precise claims proofs 
afield literature contains partial useful verifications ike skeme protocol influenced ike framework study dos 
broadly literature contains formal techniques protocol analysis examples :10.1.1.145.4394:10.1.1.27.6385
number techniques potentially yield partial results jfk believe applied pi calculus particularly appropriate 
permits rich formalization protocol reasonable effort formulation properties process equivalences terms behaviors proofs automatic ones rely language methods 
regard analysis jfk important case study goes previously attempted jfk attractive intricate state art protocol possible practical impact influence protocols jfk tightly packages ideas appear field analysis explores properties central jfk explained rigorously 
furthermore noted case study contributes development ideas results specification verification security protocols useful analysis jfk 
obvious problem analysis 
undertaken addition analysis jfk relatively time writing continues evolve influence jfk sources 
jfk specification inherently self contained interesting 
hand substantial awareness benefits formal analysis ietf may look forward rigorous studies significant protocols 
acknowledgments grateful ran canetti angelos keromytis information jfk john mitchell information research refinement cortier comments draft michael roe dieter gollmann early discussions 
mart abadi partly done microsoft research silicon valley partly supported national science foundation ccr ccr 

abadi blanchet 
analyzing security protocols secrecy types logic programs 
th acm sigplan sigact symposium principles programming lan guages popl pages jan 

abadi blanchet 
computer assisted verification protocol certified email 
static analysis th international symposium sas volume lncs pages 
springer verlag june 

abadi blanchet fournet 
just fast keying pi calculus 
manuscript available www di ens fr blanchet crypto jfk html dec 

abadi fournet 
mobile values new names secure communication 
th acm sigplan sigact symposium principles programming languages popl pages jan 

aiello bellovin blaze canetti keromytis reingold 
efficient dos resistant secure key exchange internet protocols 
th acm conference computer communications security ccs pages nov 

aiello bellovin blaze canetti keromytis reingold 
just fast keying jfk 
ietf internet draft draft ietf ipsec jfk txt july 

blanchet 
efficient cryptographic protocol verifier prolog rules 
th ieee computer security foundations workshop csfw pages june 

blanchet 
secrecy authenticity security protocols 
static analysis th international symposium sas volume lncs pages 
springer verlag sept 

datta derek mitchell pavlovic 
derivation system security protocols logical formalization 
th ieee computer security foundations workshop csfw pages july 

datta mitchell pavlovic 
derivation jfk protocol 
www 
stanford edu composition ps 

fournet abadi 
hiding names private authentication applied pi calculus 
software security theories systems 
nsf international symposium isss volume lncs pages 
springer verlag jan 


rfc internet key exchange ike 
www 
ietf org rfc rfc txt nov 

internet key exchange protocol 
ietf internet draft www ietf 
org internet drafts draft ietf ipsec txt oct 

kemmerer meadows millen 
systems cryptographic protocol analysis 
journal cryptology spring 

lincoln mitchell mitchell scedrov 
probabilistic poly time framework protocol analysis 
fifth acm conference computer communications security ccs pages 

lowe 
breaking fixing needham schroeder public key protocol fdr 
tools algorithms construction analysis systems volume lncs pages 
springer verlag 

meadows 
analysis internet key exchange protocol nrl protocol analyzer 
ieee symposium security privacy pages may 

meadows 
cost framework analysis denial service networks 
journal computer security 

needham schroeder 
encryption authentication large networks computers 
communications acm dec 

paulson 
inductive approach verifying cryptographic protocols 
journal computer security 

thayer herzog guttman 
strand spaces security protocol correct 
ieee symposium security privacy pages may 

