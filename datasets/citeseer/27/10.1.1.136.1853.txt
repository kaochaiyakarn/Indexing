workshop conference reports empirical studies object oriented artifacts methods processes state art directions briand carleton university canada university oslo norway college university london uk daimler ag germany th laas cnrs france 
object oriented technologies pervasive software development organizations 
methods processes tools notations thorough evaluation 
empirical studies aim investigating performance technologies quality resulting object oriented oo software products 
words goal provide scientific foundation engineering oo software 
summarizes results working group empirical studies software development evolution workshop los angeles may 
authors took part working group involved various aspects empirical studies oo software development 
hope achieve coverage current state art 
provide overview existing research results research directions important issues regarding methodology conducting empirical studies 
section cover existing empirical studies relate claims usually associated oo development technologies 
section describes depth believe important directions research concretely precise research questions 
section identifies think important methodological points strategies answer questions 

state art section current state knowledge understanding regarding oo software development 
describe relevant empirical studies published briand date 
summarize think open issues addressed community 

existing data claims object oriented oo technologies programming languages tools methods processes claimed improve quality software product deliverables support reuse reduce effort developing maintaining software product 
little evidence exists support claims jones daly 
example inheritance polymorphism claimed provide benefits greater extensibility reusability oo systems booch 
daly 
showed results suggesting certain level inheritance serious hindrance maintainability 
characteristics oo technologies decentralised architecture genericity encapsulation inheritance client server relationships polymorphism set number new challenges perspective testing 
result traditional testing approaches revisited take account oo mechanisms binder mcgregor kung 
basic testing issues define testing levels unit integration test criteria guide selection test data reconsidered 
addition design test environments complex due controllability observability problems drastically increased encapsulation mechanisms 
summarize oo technologies facilitate testers lower testing cost open issue perry kaiser 
furthermore anecdotal evidence polymorphism encapsulation decrease testability significantly binder voas 
see simple answer regarding performance oo technologies 
changing face software development bring unconditional improvements promised hoped 
general perspective software engineering community followed traditions past technology adoption result marketing forces scientific evidence 
addition different choices terms processes follow tool support employ languages notations 
various oo technologies show different properties advantages drawbacks 
need better understand 
large amount focused understanding quality oo artifacts design code assessed 
external quality attributes maintainability reliability measured late software life cycle 
need identify early indicators qualities example structural properties artifacts 
existing data suggests important relationships structural attributes external quality indicators 
example evidence forms coupling negative impact fault proneness briand 
general exists insufficient empirical evidence supporting usefulness vast number proposed oo measures 
workshop conference reports goals hypotheses underlying proposed measures clearly stated 
measures defined fully operational form briand making difficult replicate studies researchers :10.1.1.50.5308
measures properly defined validated empirically external factors architectural design developer experience tools software engineering processes organizational maturity may limit external validity results briand :10.1.1.50.5308
consequently required replicate existing studies different development environments 
allow better understand build quality models variety circumstances understand relationships early indicators external quality attributes stable vary environments 
early investigations testing approaches oo software performed published 
presents partial solutions placing emphasis specific issue determination testing levels jorgensen erickson kung reuse test data inheritance harrold test selection strategies small oo software th kung test environments mcgregor th 
partial solutions compared address similar issues attempt combine 

overview existing empirical studies certainly remains impact object orientation fully understood 
section suggests state practice needs improvement 
support claims object oriented technologies improve quality software product deliverables support reuse reduce effort develop maintain software product 
available technologies yield benefits 
assess quality oo artifacts early software life cycle 
define test plans design test data early life cycle 
section attempts give overview empirical validation methodologies existing empirical studies attempted shed light questions 
existing empirical research oo paradigm classified overlapping research areas methodology formal definition theoretical empirical validation oo measures 
empirical evaluation oo quality models maintainability testability 
empirical evaluation oo design principles 
empirical evaluation oo technologies 
briand measurement validation principles authors suggested measures adhere measurement theoretical principles zuse fenton fenton means evaluating software measures qualify certain statistical techniques depending measurement level measures 
briand 
argues pragmatic approach provide software engineering community practical results 
guidelines frameworks theoretical empirical validation measures proposed weyuker briand briand :10.1.1.24.25
frameworks argue measures obey certain fundamental properties compound measures justified explicit theory internal measures validated empirically external quality attributes 
methodologies definition construction oo coupling cohesion measures proposed churcher shepperd briand 

empirical assessment object oriented design principles surprisingly papers exist empirically compare oo technologies processes traditional structured techniques 
jones identified lack empirical evidence claims related gains productivity quality oo technologies 
study described basili 
oo reuse techniques applied medium sized management information systems waterfall life cycle model 
study indicated significant benefits reuse terms reduced defect density rework increased productivity 
results described briand 
strongly suggest quality guidelines coad yourdon design principles significant beneficial effect maintainability oo design documents 
preliminary results showed strong evidence oo designs easier maintain structured designs 

conducted experiment comparing structured oo methods applied embedded software systems 
results identified minor differences development time quality developed systems 
cohen experiments comparing alternative oo technologies reported 
authors conducted experiment compared data driven responsibility driven design method 
systems developed requirement specification data driven responsibility driven design method respectively 
structural attribute measures systems collected compared 
measured values authors suggested design produced higher quality software data driven design 
design measures experiment measured quality empirically validated 
words experiment involve direct measurement external quality attributes 
workshop conference reports empirical evaluation quality models object oriented software large portion empirical research oo research arena involved development evaluation quality models oo software 
immediate goal research relate structural attribute measures intended quantify important characteristics oo software encapsulation polymorphism inheritance coupling cohesion external quality indicators fault proneness development effort test effort rework effort reusability maintainability 
main motivations able assess quality early software life cycle able structural attribute measures surrogates external attribute measures 
greatly facilitate technology assessment comparisons studies cohen 
measures oo designs proposed li henry chidamber kemerer brito abreu briand bieman kang validated basili brito abreu melo briand briand harrison harrison briand briand :10.1.1.50.5308
historical reasons ck metrics suite proposed chidamber kemerer chidamber kemerer frequently referenced oo design measures 
basili 
ck measures lcom lack cohesion methods useful predicting class fault proneness high low level design phases 
chidamber 
high values cbo coupling objects lcom associated lower productivity greater rework greater design effort 
daly 
experiment conducted evaluate effects inheritance depth maintainability oo software 
results suggest systems approximately levels inheritance depth may result reduced time required perform briand maintenance tasks compared inheritance 
results study indicate decreased maintainability levels inheritance depth 
melo conclude polymorphism may increase fault proneness oo software 
discussed results interpreted care fundamental flaws undermine analysis 
briand 
report highly accurate predictive models fault prone classes developed various dimensions coupling oo systems 
data suggest current measures cohesion including lcom poor indicators fault proneness 
binkley schach collected maintenance data development projects written cobol java respectively 
results suggested significant impediment maintenance level interaction coupling modules 
modules low coupling subjected maintenance effort fewer maintenance faults fewer run time failures 
summary oo code design measures empirically assess structural characteristics oo systems affect developer productivity product quality 
internal product measures properly defined implemented extensive empirical validation externally observable quality indicators internal product measures may eventually provide common validated measurement framework allow researchers industry evaluate improve efficiency oo technologies evaluate improve quality resulting oo software products 
empirical assessment testability object oriented software theoretical studies focused testing oo software empirical studies feasibility adequacy proposed techniques conducted 
regards issue defining testing levels approaches defined implemented software tools 
aim minimizing number test stubs needed conduct dependent class tests 
object oriented software testing maintenance environment kung implements test order algorithm defined kung second tool implements different approach 
approaches class test model digraph captures static dependencies classes objects 
exhibit notable differences 
example environment class test model constructed reverse engineering programs test order algorithm applies cyclic acyclic digraphs cycles static dependencies take account dynamic dependencies object classes polymorphism dynamic binding tool class test model derived documents produced early development process uml documents algorithm define order workshop conference reports testing levels assume cycle static dependencies takes account static dynamic dependencies object classes including cycles due dynamic dependencies 
tool case studies known interviews library 
tool single case study avionics field conducted far 
clearly approaches different limitations empirically compared 
knowledge complete experiment object oriented analysis program testing reported 

experiment production cell case study initially defined framework german project 
starting informal specification case study linder oo version controller developed fusion analysis design method coleman implemented ada 
controller consists concurrent objects linked client server relationships 
tests designed different approaches statistical testing th formal testing allowing authors analyze feasibility approach problems met results 
case study representative oo applications 
particular inheritance relations basic classes 
provides significant example empirical assessment testability certain types oo software products 
particular need take account testability issues early software life cycle emphasized regardless testing approach 

common problems open issues pervasive problem empirical studies software engineering low quality study designs analyses 
true regardless specific topic addressed studies 
correct analysis approach results misinterpreted 
example melo statistically insignificant results interpreted meaningful strong drawn regarding impact polymorphism 
brito abreu melo shotgun correlations applied small sample projects making risk committing errors type results hardly interpretable 
practices accepted experimental fields published software engineering 
experimental fields defined analysis reporting procedures followed scientific article considered 
maturing issue mentioned addressed easy undertaking involves changing way educate software engineering researchers extent way software engineering research perceived altogether 
researchers software engineering mathematical science 
spectrum perceived social human intensive process studied techniques approaches developed social medical sciences 
briand regarding empirical studies oo artifacts need re focus research investigate artifacts earlier states life cycle requirements architectural design order build early quality models 
proposing new product measures investigate existing ones thorough rigorous complete analysis procedures context designed empirical studies 
lead identification relevant measurement needs regarding quality modeling oo products 
replicate studies environments establishing solid body empirical knowledge perform meta analysis draw general 
additionally oo process notations languages proposed need investigated experiments field studies 
fields engineering social medical research uncommon propose solutions technologies going thorough evaluation process 
software engineering exception 
discussed section 

research directions section discuss directions research field empirical studies related object oriented software development evolution 
identify experience important objectives research 
provide non exhaustive list open research questions matching research objectives 

objectives objective empirical studies object oriented technologies products gather tangible evidence properties gain deeper insights nature object oriented paradigm relationship approaches 
precisely identified interdependent goals 
identify important productivity quality factors 
performance quality object oriented technologies products may depend factors training support tools 
prerequisite valid empirical research know factors control 
control research results questionable sense may due causes ones hypothesized 
relevant factors may related human factors staff experience training development processes time pressure methodology product class coupling depth inheritance hierarchy 
may dependencies factors staff experience may influence inheritance workshop conference reports depth inheritance hierarchy 
lot object oriented measures seen contributions goal see section helps understand product characteristics software fault prone expensive develop 
evaluate oo technologies alternative oo technologies methods tools assessed compared 
order determine external validity obtained results studies specify clearly context evaluation performed characterizing controlling influential factors 
building quality productivity models 
important factors may independent explanatory variables quality productivity models 
quality productivity regardless specific way measured dependent variables models 
words relationships independent dependent variables explored modeled 
resulting models form essential input plan control evaluate processes products 
example models trigger defect detection activities specific parts system support impact analysis maintenance devise design guidelines 
meta analysis 
current literature instances research contributions specify clearly goal research 
difficult draw useful tangible 
addition setting study characteristics data collected time superficially described 
problems limit capability generalize settings 

research questions list potentially relevant research questions endless provide important ones 
experience discussions took place workshop 
group questions goal structure proposed 

identify important factors important part determining influential factors perform proper measurement 
useful measurement frameworks provided past 
proposed metrics mainly related static aspects object oriented briand systems 
measurement dynamic attributes coupling run time considered depth 
measurement single classes investigated great extent see section 
typical systems built collection single independent classes collection class clusters cots products 
measuring single classes sufficient clusters classes interest 
date unclear transfer existing measurement techniques single classes class clusters 
number measures proposed object oriented products large 
conference field proposes new ones 
point needs shift effort defining new measures investigate properties applications replicated studies 
need better understand measures really capturing really different useful indicators quality productivity properties interest 
need new measures arise driven results studies 
application domain usually seen major factor determining usefulness measures effectiveness technologies 
application domains may defined different ways mean characterize type functionality delivered type development technologies scale development level complexity products characteristic typically associated domain 
variations application domains task complicated limits external validity empirical study 

evaluation object oriented technologies unified modeling language booch uml defacto standard important investigate thoroughly 
example possible subset notation efficiently uml quite large set notations moment 
certain parts formalism may lead confusion need precise semantics 
different tools available support uml development 
tools need evaluated prerequisite successful investigated 
studies shown success case tools driven extraneous factors training development processes proposed rational jacobson open graham processes 
processes carefully monitored require degree tailoring organization 
workshop conference reports 
building quality productivity models quality models reported literature measurement obtained late stages detailed design coding 
quality models need available earlier life cycle order example drive inspections ensure early built quality 
certain aspects quality focus little research 
example recognized issue object oriented development testability rarely addressed 
different aspects maintenance object little attention 
example factors affect design code comprehension ease impact analysis briand :10.1.1.50.5308
exist studies trying relate productivity cost product characteristics chidamber 
studies scarce information obtained late stages design 
need productivity models earlier course development accurate project planning risk analysis performed 
may solved new measurement models empirical studies selection development process documents requirements specifications design decisions early 

meta level issues quantitative measurement analysis limits 
order interpret results coming empirical studies rely qualitative methods 
example rarely case quantitative results interpreted performing structured interviews study participants administering debriefing questionnaire organizing feedback sessions development teams 
techniques usually ways interpreting results may outcome phenomena thought 
remember studies oo processes products exploratory nature 
order build body evidence set empirical studies results need combined need generalized 
field meta analysis developed fields medicine 
allow software engineering studies need better reported 
important details missing research papers case study reports 
typical example significance levels effect independent variable dependent variables usually reported size effect systematically missing 

strategies methodologies design performance empirical studies difficult craft 
pitfalls may compromise validity scientific results 
general principles techniques briand available perform empirical studies experiments case studies discipline needs develop body experience strategies answer pressing research questions 
example oversimplification sociology focused design surveys medicine longitudinal studies psychology controlled experiments 
strategy reflects working constraints respective field 
disciplines software engineering revealing empirical studies prior studies support refute prior claims 
progress empirical research comes questioning past research learning past mistakes insights 
section discuss important pre requisites acceptable empirical oo software development 

success factors empirical studies large number empirical studies undertaken past 
range identification oo features may cause higher fault rates software study effectiveness different design 
need meta analysis results studies underlies number inherent problems way empirical studies carried 
example experiment carried results interesting useful researchers replicate experiment closely possible 
research reaches dead possible blocking path may interesting insightful research 
consequently number called success factors broad factors create conditions successful empirical study identified 

nature data nature empirical study requires collection dissemination analysis data 
system oo studies collection data problematic 
example consider state art oo cohesion metrics briand 
emphasis cohesion measures distribution instance variables class 
class single attribute methods class considered cohesive 
alternatively class attributes method considered lacking cohesiveness 
problem proposed metrics theoretically flawed produce meaningless incomparable values counter examples render metric inadequate 
theoretically sound unsupported tool aid collection 
remainder analysis collection small systems computationally intensive problems brings 
success factor ensure empirical study quality data collection maintained 
entails ensuring reliability completeness efficiency workshop conference reports data collected 
furthermore measurement perfect clearly justified underlying assumptions explicit aid interpretation results 
replication studies key successful empirical research crucial measurement reported defined operational unambiguous manner 

consistent terminology common problem software engineering community inconsistent terminology notation 
example terms analysis design oo development 
terms interchangeably 
empirical studies community different respect arguments correct approach measurement theory empirical research started 
questions raised exact meaning case studies vs experiments conditions hold research claimed results credible 
example misuse terminology oo world term coupling 
oo setting forms coupling arise systems 
establishing different forms coupling establishing harmful open research questions done area briand :10.1.1.50.5308

nature research cases empirical research undertaken establishing problem worth investigating complex stage knowledge addresses different underlying issue 
example study program complexity goals concepts study lacked clarity briand :10.1.1.24.25
important reasons confusion regarding practical software engineering problems addressed research meaning complexity 
successful empirical research require clearly defined problem results useful community addresses problem head 

design case studies experiments factors need considered designing case study experiment basili pfleeger 
careful planning pre requisite credibility results 
harrison 
details experiment involving undergraduate students described illustrates need care undertaking task 
features experiment 
experiment modifiability understandability inheritance systems previous experiment carried daly 

briand 
pilot study twelve students carried initially identify problems may hampered larger experiment 

random allocation students twelve different groups 
group member allocated systems 
learning effects took place student allocated just system 

random allocation students group ensured results suffer experience bias 

strict limits placed time available experiment carried minute weekly slot 

materials available line web 

results contradicted earlier experiment 
considered interesting added body knowledge particular aspect oo 
just example experiment number overriding features highlighted 
proper materials example code listings need readily available tested ensure minor problems embarking full experiment 
pilot study mentioned revealed features tasks required undermined results experiment wording questions 

subjects know tasks carry obtain representative results careful training may pre requisite subjects familiar experimental tasks 

groups comparable terms experience 
important know individual capability overriding factor software development 
far trivial know characterize experience software engineering 

experiment repeatable materials available wider community 
replication package available containing details experiment 
point important building knowledge base past experiments 
possible described undertake experiment experienced practitioners 
reveal differences student experienced workshop conference reports programmers worthwhile area research 
oo community little known facets 
situation improve sharing results resources 

large amount research done terms studying empirically objectoriented software development maintenance 
empirical research far scarce exploratory 
learning right ways measure important attributes research 
example concepts testability maintainability cohesion elusive 
studies kind measurement questionable threatening validity results 
furthermore exploring ways design empirical studies research programs answer efficiently pressing research questions 
investigation new medical treatments follows various phases animal experiments small scale case studies voluntary patients carefully sampled field studies surveys sequentially performed limit risks stage 
field investigate new technologies way limit cost investigation risks pilot projects ensure minimal benefits software development organizations 
question take time answer require substantial experience 
real laboratory experiments possible involve student experiments early stages research 
results experiments show promise followed low risk small scale pilot projects moving representative development projects 
scheme implies close collaboration academic institutions industry acceptance medicine empirical studies worthwhile investments 
provided representative overview current understanding community identified pressing research issues directions 
considering pace technology change software engineering evident program requires great deal resources currently spent 
community research need grow undertake challenges facing 
addition efficient schemes collaboration industry education empirical methods key success factors 

theory specification testing object oriented software 
proc 
nd european dependable computing conference italy 
basili selby 
experimentation software engineering 
ieee transactions software engineering 
basili briand melo 
reuse influences productivity object oriented systems 
communications acm 
basili briand melo 
validation object oriented design metrics quality indicators 
ieee transactions software engineering 

modelling production cell case study fusion method 
technical report epfl di 
briand gaudel th 
requirements tests object oriented design 
year deliverables 
available laas report 
melo 
polymorphism measures early risk prediction st international conference software engineering icse los angeles ca bieman kang 
measuring design level cohesion 
ieee transactions software engineering 
binder 
design testability object oriented systems 
communications acm 
available kung 
binder 
testing object oriented software survey 
software testing verification reliability 
binkley schach 
validation coupling dependency metric predictor runtime failures maintenance measures 
th international conference software engineering icse 
booch 
object oriented analysis design applications 
benjamin cummins publishing booch rumbaugh jacobson 
unified modeling language user guide 
addison wesley 
briand daly 
unified framework cohesion measurement object oriented systems 
empirical software engineering 
briand devanbu melo 
investigation coupling measures 
th international conference software engineering icse 
boston briand el 
theoretical empirical validation software product measures 
isern technical report 
briand 
application measurement theory software engineering 
empirical software engineering 
briand basili 
property software engineering measurement 
ieee transactions software engineering 
briand daly 
experimental comparison maintainability object oriented structured design documents 
empirical software engineering 
briand daly porter 
comprehensive empirical validation product measures object oriented systems 
technical report isern 
briand daly 
unified framework coupling measurement object oriented systems 
ieee transactions software engineering 
briand 
investigating quality factors object oriented designs industrial case study 
st international conference software engineering icse 
los angeles ca 
briand daly 
controlled experiment evaluating quality guidelines maintainability object oriented designs 
fraunhofer institute experimental software engineering germany isern 
published ieee transactions software engineering 
briand 
coupling measurement impact analysis objectoriented systems 
fraunhofer institute experimental software engineering germany isern 
published proceedings ieee icsm 
oxford england 
brito abreu 
mood metrics set 
proc 
ecoop workshop metrics 
brito abreu melo 
evaluating impact object oriented design software quality 
proceedings third international software metrics symposium metrics 
berlin 
janssen henshaw 
impact tools software productivity 
ieee software 
ieee computer society press 
chidamber kemerer 
managerial metrics object oriented software exploratory analysis 
ieee transactions software engineering 
chidamber kemerer 
metrics suite object oriented design 
ieee transactions software engineering 
churcher shepperd 
conceptual framework object oriented software metrics 
software engineering notes 
coleman arnold hayes 
object oriented development fusion method 
object oriented series prentice hall 
workshop conference reports daly brooks miller roper wood 
evaluating inheritance depth maintainability object oriented software 
empirical software engineering 
fenton 
software measure measure 
software engineering journal 
fenton 
software measurement necessary scientific basis 
ieee transactions software engineering 
graham henderson sellers 
open process specification 
addison wesley 
harrison 
investigation applicability validity object oriented design metrics 
empirical software engineering 
harrison 
experimental assessment effect inheritance maintainability object oriented systems 
proceedings empirical assessment software engineering ease 
keele 
harrison 
evaluation mood set object oriented software metrics 
ieee transactions software engineering 
harrold mcgregor fitzpatrick 
incremental testing object oriented class structures 
proc 
th ieee int 
conference software engineering icse 
melbourne australia 
available kung 
ernst 
comparing structured object oriented methods embedded systems controlled experiment 
icse workshop empirical studies software development evolution 
los angeles 
international committee medical journal editors 
uniform requirements manuscripts submitted biomedical journals 
ann 
inter 
medicine 
jacobson booch rumbaugh 
unified software development process 
addison wesley 
jones 
gaps object oriented paradigm 
ieee computer 
jorgensen erickson 
object oriented integration testing 
communications acm 
available kung 
fenton pfleeger 
framework software measurement validation 
ieee transactions software engineering 
kung gao hsia chen kim song 

objectoriented software testing maintenance environment 
communications acm 
available kung 
kung hsia gao 
eds 

testing object oriented software 
ieee computer society 
th durand 
test ordering tool object oriented programs 
proc 
th european workshop dependable computing 
vienna austria 
linder 
eds 

formal development reactive systems case study production cell 
lecture notes computer science vol 
springer verlag 
li henry 
object oriented metrics predict maintainability 
journal systems software 
mcgregor 
quality assurance 
journal object oriented programming 
monthly columns january 
mcgregor 
parallel architecture component testing 
journal object oriented programming 

effort estimation prediction object oriented systems 
journal systems software 
perry kaiser 
adequate testing object oriented programming 
journal object oriented programming 
available kung 
pfleeger 
experimental design analysis software engineering 
annals software engineering 
jones combining software engineering results software engineering 
proceedings ease conference 
keele uk 
cohen 
object oriented comparison object oriented development methods 
software engineering notes 
th 
statistical approach testing object oriented programs 
proc 
th symposium fault tolerant computing ftcs 
seattle 
voas 
object oriented software testability 
proc 
rd international conference achieving quality software 
chapman hall 
briand th 
case study statistical testing reusable concurrent objects 
proc 
rd european dependable computing conference 
prague czech republic appear september 
weyuker 
evaluating software complexity measures 
ieee transactions software engineering 
zuse 
software complexity measures methods 
de gruyter 
