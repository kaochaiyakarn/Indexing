scheduling reduced cpu energy mark weiser brent welch alan demers scott shenker xerox parc coyote hill road palo alto ca weiser welch demers shenker parc xerox com energy usage computer systems important especially battery operated systems 
displays disks cpus order energy 
reducing energy displays disks studied considers new method reducing energy cpu 
introduce new metric cpu energy performance millions instructions joule 
examine class methods reduce characterized dynamic control system clock speed operating system scheduler 
reducing clock speed reduce system run longer 
number methods available reducing energy reduced clock speed reducing voltage chandrakasan horowitz reversible knight adiabatic logic 
right scheduling algorithms advantage reduced clock speed especially presence applications demanding instructions second 
consider methods varying clock speed dynamically control operating system examine performance methods workstation traces 
primary result adjusting clock speed fine grain substantial cpu energy saved limited impact performance 
energy typical laptop computer dominated backlight display secondarily disk 
laptops number techniques reduce energy consumed disk display primarily turning period li douglis 
expect slow steady progress energy consumption devices 
smaller computing devices disk eliminate display backlight consumes display related power 
power consumed cpu significant apple newton designers sought maximize mips watt 
considers methods reducing energy executing instructions 
results go simple power idle techniques today laptops 
consider opportunities dynamically varying chip speed energy consumption 
give users appearance mips cpu peak moments drawing mips energy users active notice reduction clock rate 
knowing full power requires cooperation operating system scheduler 
consider number algorithms operating system scheduler attempt optimize system power monitoring idle time reducing clock speed reduce idle time minimum 
simulate performance traces process scheduling compare results theoretical optimum schedules 
energy metric cpus measure energy performance computer system millions instructions joule 
mips watts 
course mips superseded better metrics mips stand workload time benchmark 
improving high processors 
example mips consumed watts mhz mips alpha chip consumes watts 
lower speed processors laptops optimized run low power 
example motorola rated mips consumes mw 
things equal unchanged changes clock speed 
reducing clock speed causes linear reduction energy consumption similar reduction mips 
effects cancel 
similarly turning computer reducing clock zero idle loop effect instructions executed 
reduced clock speed creates opportunity quadratic energy savings clock speed reduced energy cycle reduced methods achieve voltage reduction reversible logic adiabatic switching 
simulations assume savings really important energy savings greater amount clock rate reduced order achieve increase 
voltage reduction currently promising way save energy 
chips manufactured run volts voltage levels commonly 
intuition power savings comes basic energy equation proportional square voltage 
clock settling time gate proportional voltage lower voltage drop gate longer gate takes stabilize 
lower voltage operate correctly cycle time lowered 
raising clock rate voltage increased 
voltage cycle time chip adjusted clear lower voltage slower clock chip dissipate energy cycle 
voltage level reduced linearly clock rate reduced energy savings instruction proportional square voltage reduction 
course real chip may possible reduce voltage linear clock reduction 
possible reduce voltage running slower net energy savings cycle 
currently manufacturers test rate chips smooth range voltages 
data available chips set voltage levels 
example motorola cmos microcontroller cloned sgs thomson rated mhz volts mhz volts mhz volts 
close linear relationship voltage clock rate 
important factor time takes change voltage 
frequency voltage regulators order khz speculate take tens microseconds boost voltage chip 
run slower 
suppose task deadline milliseconds take milliseconds cpu time running full speed complete 
normal system run full speed milliseconds idle milliseconds assuming ready tasks 
idle time cpu stopped altogether putting mode wakes interrupt periodic clock completion 
compare system runs task half speed completes just deadline 
reduce voltage half task consume energy normal system account stopping cpu idle time 
number cycles executed systems modified system reduces energy reducing operating voltage 
way view idle time represents wasted energy cpu stopped 
approach evaluates fine grain control cpu clock speed effect energy means trace driven simulation 
trace data shows context switching activity scheduler time spent idle loop 
goals simulation evaluate energy savings possible running slower reduced voltage measure adverse affects running slow meet supplied demand 
simulation perfect true evaluation require experiments real hardware 
trace data taken unix workstations hours variety users 
trace data described section 
assumptions simulations described section 
speed adjustment algorithms section 
section evaluates different algorithms basis energy savings delay penalty function 
section discusses including things traced fully utilize simulations 
section provides 
trace data trace data unix scheduler taken number workstations periods hours working day 
times workloads included software development documentation mail simulation typical activities engineering workstations 
addition short traces taken specific workloads typing scrolling documents 
appendix summary different traces 
table trace points sched context switch away process idle enter idle loop idle leave idle loop run process fork create new process exec overlay new process program exit process termination sleep wait event wakeup notify sleeping process trace points took summarized table 
idle loop events provide view busy machine process information classify different programs foreground background types 
sleep wakeup events deduce job ordering constraints 
addition program counter call sleep recorded kernel sources examined determine nature sleep 
sleep events classified waits hard soft events 
hard event disk wait sleep done kernel routine 
soft event select done awaiting user input network request packet 
goal classification distinguish idle time eliminated rescheduling soft idle idle mandated wait device hard idle 
trace record microsecond resolution time stamp 
trace buffer periodically copied kernel compressed sent network central collection site 
trace data measure tracing overhead range traced machine 
assumptions simulations basic approach simulations lengthen runtime individually scheduled segments trace order eliminate idle time 
trace period divided intervals various lengths runtime interval speed adjustment decision 
excess cycles left interval speed slow carried interval 
carry measure penalty speed adjustment 
ability stretch runtime idle periods refined classifying sleep events hard soft events 
point classification fair idle time squeezed simulated schedule slowing processor 
obviously running slower allow disk request postponed just request completes trace 
reasonable slow response keystroke editor processing keystroke finishes just 
simulations reorder trace data events 
justify noting offered load far capacity cpu speed changes affect job ordering significantly 
furthermore cpu speed ramped full speed offered load increases times high demand cpu running speed matches trace data 
addition assumptions machine considered energy idle energy instruction proportion running speed varies minimum relative speed 
bit optimistic chip draw small amount power standby mode get reduction voltage clock speed 
baseline power usages running full speed reported graphs assume cpu idle times 
takes time switch speeds 
optimistic 
practice raising speed require delay wait voltage rise speculate delay order instructions 
second period greater idle assumed laptop turned skipped simulating second period idle 
models typical power saving features 
energy savings reported count periods 
assumed lower bound practical speed represents full speed 
logic voltage reduction power savings correspond minimum voltage levels respectively 
level optimistic levels existing low power chips 
graphs section minimum voltage system indicated meaning voltage vary minimum speed adjusted linearly voltage 
scheduling algorithms simulated types scheduling algorithms unbounded delay perfect opt bounded delay limited bounded delay limited past past 
algorithms adjust cpu clock speed time scheduling decisions goal decreasing time wasted idle loop retaining interactive response 
opt takes entire trace stretches run times fill idle times 
periods machine idle seconds considered available stretching runtimes 
kind batch approach seen trace period long done period piece take arbitrarily long 
opt power savings limited minimum speed achieving maximum possible savings period 
algorithm impractical undesirable 
impractical requires perfect knowledge done interval 
assumes idle time filled stretching reordering jobs 
undesirable produces large delays runtimes individual jobs regard need effective response real time events user keystrokes network packets 
opt peers small window optimizes energy window delaying past window 
assumed idle time interval eliminated minimum speed cpu reached 
simulated windows small millisecond savings usually small large seconds generally approaches opt energy savings 
impractical uses knowledge desirable realtime response delayed longer window 
setting window milliseconds user interactive response remain high 
addition window size substantially reduce long idle time trigger spin disk display 
decisions idle times seconds minutes stretching computation tens milliseconds affect 
past practical version 
looking fixed window looks fixed window past assumes window previous 
past speed setting algorithm shown top column 
parts code 
part computes percent time interval speed setting algorithm past run cycles number non idle cpu cycles interval 
idle cycles idle cpu cycles split hard soft idle time 
excess cycles cycles left previous interval ran slow 
cycles measured time units 
idle cycles hard idle soft idle run cycles excess cycles run percent run cycles idle cycles run cycles excess run cycles speed run cycles soft idle excess cycles 
excess cycles 
energy run cycles excess cycles speed speed excess cycles idle cycles elseif run percent speed elseif run percent speed run percent min speed min speed speed excess cycles excess cpu running 
run cycles come sources runtime trace data interval excess cycles simulation previous interval 
excess cycles represents carry previous interval cpu speed set slow accommodate load supplied interval 
consider excess run cycles speed run cycles soft idle run cycles sum cycles trace data previous value excess cycles 
initial value reduced soft idle time number cycles formed current speed 
calculation represents ability squeeze idle time lengthening runtimes interval 
soft idle waiting keyboard events available elimination idle 
soft idle time interval approaches zero excess cycles approach run cycles energy interval computed relationship speed power consumption cycle 
cycles serviced interval subtracted 
accounted interval probably higher cpu speed 
section represents speed setting policy 
adjustment clock rate simple heuristic attempts smooth transitions fast slow processing 
system busy idle speed ramped 
idle slowed 
simulated variations code shown come constants shown 
evaluating algorithms compares results algorithms single trace kestrel march adjustment interval varied 
opt energy unaffected interval shown comparison 
vertical access shows relative power scheduling algorithms full power 
sets lines shown corresponding voltage levels determine minimum speed algorithms opt past 
past algorithms approach opt interval lengthened 
note log scale axis 
interval past better allowed defer excess cycles interval effectively lengthening interval 
intervals msec msec considered detail figures 
shows excess cycles result setting speed slow past msec adjustment interval trace data 
note graph uses log log scales 
cycles measured time take execute full speed 
data taken histogram point counts excess cycles equal point axis greater previous bucket value histogram 
lines connect points spike zero evident 
large spike zero indicates intervals excess cycles 
smaller peak near interval length values drop 
minimum speed lowered cases excess cycles build accumulate longer intervals 
evident power 
kestrel march algorithms opt past opt past opt past adjust interval secs provide minimum energy minimum 
main point conveyed traces potential energy savings 
savings range data points falling savings 
fixes minimum voltage shows effect changing interval length 
opt energy savings plotted comparision position axis represents different trace 
position corresponding trace data figures indicated arrow 
main message get difference relative savings trace interval varied 
represented spread points plotted trace 
longer adjustment period results savings consistent 
figures show average excess cycles trace runs 
averages count intervals zero excess cycles 
shows excess cycles adjustment interval msec different minimum voltages 
shows excess cycles minimum voltage different intervals 
lower minimum voltage power 
comparison min volts past msec traces sorted run cycles trace power 
comparison vs interval past msec past msec past msec past msec opt traces sorted run cycles trace results show excess cycles longer intervals accumulate excess cycles 
trade excess cycles penalty energy savings function interval size 
interval decreases cpu speed adjusted finer grain matches offered load better 
results fewer excess cycles save energy 
consistent motivating observation better execute average speed alternate full speed full idle 
discussion primary source feedback speed adjustment percent idle time system 
approach classify jobs background periodic foreground classes 
similar wilkes proposes schemes utilize idle time wilkes 
sort classification speed need ramped executing background tasks 
periodic tasks impose constant measurable load 
typically run short burst sleep relatively long time 
tasks defined notion fast excess cycles secs 
average excess cycles msec interval traces sorted total runtime excess cycles secs 
average excess cycles msec msec msec msec traces sorted total runtime cpu speed adjusted finish tasks just time 
combination background periodic foreground tasks standard approach schedule periodic tasks fit foreground tasks lastly fit background tasks 
case minimum speed execute periodic tasks time system increase speed response presence foreground background tasks 
simulations performed simplified reordering scheduling events 
real rate adjusting scheduler change processing rates effect jobs preempted due time slicing order ready jobs scheduled 
argue large job mix reordering significant 
speed adjustment algorithm ramp full speed heavy loads light loads reordering significant effect energy 
order evaluate realistic scheduling algorithms interesting generate load simulation 
load includes cpu runs preemption points eliminated pause times due delays preserved causal ordering jobs preserved 
load possible simulate scheduler detail giving ability reorder preemption events preserving semantics delays ipc dependencies 
attempted model waits classifying idle time hard soft idle 
think approximation valid verify detailed simulation 
presents preliminary results cpu scheduling reduce cpu energy usage simple approaches taken today laptops 
metric interest instructions executed amount energy 
observation motivates reducing cycle time cpu allows power savings primarily allowing cpu lower voltage 
examine potential saving power scheduling jobs different clock rates 
trace driven simulation compare classes schedules opt spreads computation trace period eliminate idle time regardless deadlines uses limited look ahead determine minimum clock rate past uses past predictor 
past scheduler msec window shows power savings conservative circuit design assumptions aggressive assumptions 
savings addition obvious savings come stopping processor idle loop powering machine extended idle periods 
energy savings depends interval speed adjustments 
adjusted fine grain power saved cpu usage bursty 
adjusted coarse grain excess cycles built slow interval adversely affect interactive response 
adjustment interval milliseconds represent compromise power savings interactive response 
interestingly having low minimum speed results efficient schedules tendency excess cycles need speed catch 
particular minimum voltage provide savings minimum voltage system tends larger delay penalty measured excess cycles 
general scheduling algorithms potential provide significant power savings respecting deadlines arise human factors considerations 
effective way predicting workload significant power saved adjusting processor speed fine grain just fast accommodate workload 
put simply efficient hare better spread reducing cycle time voltage run cpu full speed short bursts idle 
stems non linear relationship cpu speed power consumption 
acknowledgments supported part xerox arpa contract dabt funding imply endorsement 
david wood university wisconsin helped get started research provided substantial assistance understanding cpu architecture 
authors benefited stimulating open environment computer science lab xerox parc 
appendix description trace data table page lists characteristics traces runs reported figures 
table sorted shortest longest runtime match ordering figures 
elapsed time trace broken time spent running cpu behalf process runtime time spent idle loop time machine considered idle turned typical laptop power manager 
short traces labeled mx emacs fm typing runs scrolling run various editors 
remaining runs taken hours everyday william jeffrey koller lars 
energy efficient cmos line driver adiabatic switching ieee fourth great lakes symposium vlsi pp 
march 
chandrakasan sheng brodersen 
low power cmos digital design 
april pp 
michael low power hardware high performance pda appear proc 
computer conference san francisco 
fred douglis krishnan brian marsh power hungry disk proc 
winter usenix conference january pp mark horowitz 
self clocked structures low power systems 
arpa semi annual report december 
computer systems laboratory stanford university 
li roger paul horton thomas anderson quantitative analysis disk drive power management portable computers proc 
winter usenix conference january pp 
knight 
practical implementation charge recovering asymptotically zero power cmos symposium integrated systems ebeling borriello eds univ washington 
wilkes john idleness appear proc 
winter usenix conf table summary trace data trace runtime idle elapsed feb idle heur emacs emacs mx mx fm em fm mx feb fm mar feb mar feb kestrel feb mar mar feb feb feb mar mar kestrel feb mar feb mar mar mar mar 
