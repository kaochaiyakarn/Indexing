vldb journal mariposa wide area distributed database system vldb journal springer verlag michael stonebraker paul aoki witold litwin avi pfeffer adam sah jeff carl staelin andrew yu department electrical engineering computer sciences university california berkeley ca usa edited henry korth amit sheth 
received november revised june accepted september 
requirements wide area distributed database systems differ dramatically local area network systems 
wide area network wan configuration individual sites usually report different system administrators different access charging algorithms install site specific data type extensions different constraints servicing remote requests 
typical point production transaction environments fully engaged normal business hours take additional load 
may sites participating wan distributed dbms 
world single program performing global query optimization cost optimizer 
cost optimization respond type extension access constraints charging algorithms time day constraints 
furthermore traditional cost distributed optimizers scale large number possible processing sites 
traditional distributed dbmss cost optimizers appropriate wan environment new architecture required 
proposed implemented economic paradigm solution issues new distributed dbms called mariposa 
architecture implementation mariposa discuss early feedback operating characteristics 
key words databases distributed systems economic site autonomy wide area network name service address universit paris ix dauphine section place de de paris cedex france address department computer science stanford university stanford ca usa address hewlett packard laboratories box palo alto ca usa address illustra information technologies broadway suite oakland ca usa mail mariposa postgres berkeley edu correspondence stonebraker mariposa distributed database system addresses fundamental problem standard approach distributed data management 
argue underlying assumptions traditionally implementing distributed data managers apply today wide area network wan environments 
set guiding principles apply system designed modern wan environments 
demonstrate existing architectures adhere principles invalid assumptions just mentioned 
show mariposa successfully apply principles adoption entirely different paradigm query storage optimization 
traditional distributed relational database systems offer location transparent query languages distributed ingres stonebraker williams sirius litwin sdd bernstein collection underlying assumptions 
assumptions include static data allocation traditional distributed dbms mechanism objects quickly easily change sites reflect changing access patterns 
moving object site done manually database administrator secondary access paths data lost process 
object movement heavyweight operation done frequently 
single administrative structure traditional distributed database systems assumed query optimizer decomposes query pieces decides execute pieces 
result site selection query fragments done optimizer 
mechanism traditional systems site refuse execute query example overloaded 
neighbor assumptions valid machines distributed system controlled administration 
uniformity traditional distributed query optimizers generally assume processors network connections speed 
optimizer assumes join done site sites ample disk space store intermediate results 
assume site collection data types functions operators subquery performed site 
assumptions plausible local area network lan environments 
lan worlds environment uniformity single administrative structure common 
high speed reasonably uniform interconnect tends mask performance problems caused suboptimal data allocation 
wan environment assumptions plausible 
example sequoia project stonebraker spans sites state california wide variety hardware storage capacities 
site database administrator willingness site perform behalf users site varies widely 
furthermore network connectivity uniform 
lastly type extension available selected machines licensing restrictions proprietary software type extension uses unique features particular hardware architecture 
result traditional distributed dbmss nonuniform multi administrator wan environments sequoia typical 
expect explosion configurations sequoia multiple companies coordinate tasks distributed manufacturing share data sophisticated ways example built query optimizer world wide web 
result goal mariposa project design wan distributed dbms 
specifically guided principles assert requirements non uniform multi administrator wan environments scalability large number cooperating sites wan environment may large number sites wish share data 
distributed dbms contain assumptions limit ability scale sites 
data mobility easy efficient change home object 
preferably object remain available movement 
global synchronization schema changes force site synchronize sites 
operations exceptionally poor response time 
total local autonomy site complete control resources 
includes objects store queries run 
query allocation done central query optimizer 
easily configurable policies easy local database administrator change behavior mariposa site 
traditional distributed dbmss meet requirements 
centralized query optimizer scale high cost moving object sites restricts data mobility schema changes typically require global synchronization centralized management designs inhibit local autonomy flexible policy configuration 
claim implementation issues argue traditional distributed dbmss meet requirements defined fundamental architectural reasons 
example distributed dbms address distributed query optimization placement dbms objects 
sites refuse process subqueries difficult perform cost global optimization 
addition cost global optimization brittle scale large number participating sites 
example consider requirement objects able move freely sites 
movement complicated fact sending site receiving site total local autonomy 
sender refuse relinquish object recipient refuse accept 
result allocation objects sites done central database administrator 
inherent problems mariposa design rejects conventional distributed dbms architecture favor supports microeconomic paradigm query storage optimization 
distributed dbms issues multiple copies objects naming service reformulated microeconomic terms 
briefly implementation economic paradigm requires number entities mechanisms 
mariposa clients servers account network bank 
user allocates budget currency bank query 
goal query processing system solve query allotted budget contracting various mariposa processing sites perform portions query 
query administered broker obtains bids pieces query various sites 
remainder section shows economic entities mechanisms allows mariposa meet requirements set 
implementation economic infrastructure supports large number sites 
example centralized metadata determine run query broker distributed advertising service find sites want bid portions query 
broker specifically designed cope successfully large mariposa networks 
similarly server join mariposa system time buying objects sites advertising services bidding queries 
leave mariposa selling objects bid 
result achieve highly scalable system economic paradigm 
mariposa site storage decisions buy sell fragments optimizing revenue expects collect 
mariposa objects notion home merely current owner 
current owner may change rapidly objects moved 
object movement preserves secondary indexes coded offer high performance possible 
consequently mariposa fosters data mobility free trade objects 
avoidance global synchronization simplified places economic paradigm 
replication area 
details mariposa replication system contained separate 
short copy holders maintain currency copies contracting copy holders deliver updates 
contract specifies payment stream update information delivered specified time bound 
site runs system merge update streams consistent way 
result copy holders serve data date varying degrees 
query processing divergent copies resolved bidding process 
metadata management related area benefits economic processes 
parsing incoming query requires mariposa interact name services identify relevant metadata objects referenced query including location 
copy mechanism described designed name servers just servers replicated data 
name servers contract mariposa sites receive updates system catalogs 
result architecture schema changes entail synchronization changes name services asynchronously 
mariposa site free bid business interest total local autonomy 
site expected maximize individual profit unit operating time bid queries feels accomplish goal 
course net effect freedom queries may solvable bid aggregate minimum bids exceeds client willing pay 
addition site buy sell objects 
refuse give objects may find buyers object want 
mariposa provides powerful mechanisms specifying behavior site 
sites decide objects buy sell queries bid 
site bidder storage manager decisions 
conditions change time policy decisions change 
bidder storage manager modules may coded language desired mariposa provides low level efficient embedded scripting language rule system called rush sah 
rush straightforward change policy decisions simply modifies rules modules implemented 
purpose report architecture implementation operation current prototype 
preliminary discussions mariposa ideas previously reported stonebraker 
time june complete optimization execution system running performance results initial experiments 
sect 
major components economic system 
section describes bidding process broker contracts service processing sites mechanisms bidding process efficient methods network utilization integrated economic model 
section describes mariposa storage management 
section describes naming name service mariposa 
section presents initial experiments mariposa prototype 
section discusses previous applications economic model computing 
sect 
summarizes completed date directions project 
architecture mariposa supports transparent fragmentation tables sites 
mariposa clients submit queries dialect sql table referenced clause middleware layer local execution component client application sql parser single site optimizer query broker coordinator bidder executor storage manager fig 

mariposa architecture query potentially decomposed collection table fragments 
fragments obey range hash distribution criteria logically partition table 
alternately fragments unstructured case records allocated convenient fragment 
mariposa provides variety fragment operations 
fragments units storage bought sold sites 
addition total number fragments table changed dynamically quite rapidly 
current owner fragment split storage fragments deemed desirable 
conversely owner fragments table coalesce single fragment time 
process queries fragmented tables support buying selling splitting coalescing fragments mariposa divided kinds modules noted fig 

client program issues queries complete bidding instructions mariposa system 
turn mariposa contains middleware layer local execution component 
middleware layer contains query preparation modules query broker 
lastly local execution composed bidder storage manager local execution engine 
addition broker bidder storage manager tailored site 
provided high performance rule system rush coded initial mariposa implementations modules 
expect site administrators tailor behavior implementations altering rules site 
lastly lowlevel utility layer implements essential mariposa primitives communication sites 
various modules shown fig 

notice client module run mariposa network 
communicates middleware process running different site 
turn mariposa middleware communicates local execution systems various sites 
section describes role module plays mariposa economy 
process describing modules give overview query processing query select emp bid curve parse tree plan tree fragmented select select ss emp emp single site optimizer plan jeff 
paul 
mike 
answer delay sql parser query select merge ss emp ss emp ss emp fig 

mariposa communication client application coordinator broker win 
bid acceptance delay bid execute query jeff 
paul 
mike 
request works economic framework 
section explain process detail 
queries submitted client application 
query starts budget expressed bid curve 
budget indicates user willing pay query executed time query budgets form basis mariposa economy 
includes bid curve indicating user willing sacrifice performance lower price 
budget assigned administrative means discussed client software hands query mariposa middleware 
mariposa middleware contains sql parser single site optimizer query broker coordinator module 
broker primarily coded rush 
modules described 
communication modules shown fig 

parser parses incoming query performing name resolution authorization 
parser requests metadata table referenced query name server 
metadata contains information including name type attribute table location executor select ss emp bidder select ss emp bid answer local execution component middleware layer fragment table indicator staleness information 
metadata part economy price 
choice name server determined desired quality metadata prices offered name servers available budget local rush rules defined prioritize factors 
parser hands query form parse tree single site optimizer 
conventional query optimizer lines selinger 

single site optimizer generates single site query execution plan 
optimizer ignores data distribution prepares plan fragments located single server site 
accepts plan produced optimizer 
uses location information previously obtained name server decompose single site plan fragmented query plan 
decomposes restriction node single site plan subqueries fragment referenced table 
joins decomposed join subquery pair fragment joins 
lastly groups operations proceed parallel query strides 
subqueries stride completed subqueries stride 
result strides form basis synchronization 
notice notion strides support pipelining result subquery execution subsequent subquery 
complication introduce sequentiality query stride complicate bidding process described 
inclusion pipelining economic system task research 
broker takes collection fragmented query plans prepared sends requests bids various sites 
assembling collection bids broker decides ones accept notifies winning sites sending bid acceptance 
bidding process described detail sect 

broker hands task coordinating execution resulting query strides coordinator 
coordinator assembles partial results returns final answer user process 
mariposa server site local execution module containing bidder storage manager local execution engine 
bidder responds requests bids formulates bid price speed site agree process subquery local resources cpu time disk bandwidth storage bidder site data fragments specified subquery may refuse bid may attempt buy data site contacting storage manager 
winning bids sooner processed 
execute local queries mariposa site contains number local execution engines 
idle allocated incoming subquery perform task hand 
number executors controls multiprocessing level site may adjusted conditions warrant 
local executor sends results subquery site executing part query back coordinator process 
mariposa site storage manager watches revenue stream generated stored fragments 
space revenue considerations engages buying selling fragments storage managers mariposa sites 
storage managers bidders brokers prototype primarily coded rule language rush 
rush embeddable programming language syntax similar tcl ousterhout includes rules form condition action mariposa entity embeds rush interpreter calling execute code determine behavior mariposa 
rush conditions involve combination primitive mariposa events described computations rush variables 
actions rush trigger mariposa primitives modify rush variables 
result rush thought fairly conventional forward chaining rule system 
chose implement system packages available ai community primarily performance reasons 
rush rules inner loop mariposa activities result rule interpretation fast 
separate sah blow discusses achieved goal 
mariposa contains specific inter site protocol mariposa entities communicate 
requests bids execute table 
main mariposa primitives actions events messages received messages request bid receive bid request bid receive bid award contract contract won notify loser contract lost send query receive query send data receive data subqueries buy sell fragments sent sites 
additionally queries data passed 
main messages indicated table 
typically outgoing message action part rush rule corresponding incoming message rush event recipient site 
bidding process query budget solve query 
budget non increasing function time represents value user gives answer query particular time constant functions represent willingness pay amount money slow answer quick steeply declining functions indicate user pay fast answer 
broker handling query receives query plan containing collection subqueries 
qn 
subquery variable restriction fragment table join fragments tables 
broker tries solve subquery qi expensive bid protocol cheaper purchase order protocol 
expensive bid protocol involves phases phase broker sends requests bids bidder sites 
bid request includes portion query execution plan bid 
bidders send back bids represented triples ci di ei 
triple indicates bidder solve subquery qi cost ci delay receipt subquery bid valid expiration date ei 
second phase bid protocol broker notifies winning bidders selected 
broker may notify losing sites 
bids expire deleted bidders 
process requires expensive messages 
queries computationally demanding justify level overhead 
queries simpler purchase order protocol 
purchase order protocol sends subquery processing site win bidding process example storage sites fragment sequential scan 
site receives query processes returning answer bill services 
site refuses subquery return broker pass third processing site 
broker uses cheaper purchase order protocol danger failing solve query allotted budget 
broker know cost delay charged chosen processing site 
risk taken faster protocol 
bid acceptance subqueries stride processed parallel stride previous completed 
consider bids individual subqueries consider collections bids subqueries stride 
bidding protocol brokers choose winning bid subquery aggregate cost aggregate delay aggregate cost equal cost requirement 
problems finding best bid collection difficult subquery parallelism combinatorial search space 
aggregate delay sum delays di subquery qi parallelism stride query plan 
number possible bid collections grows exponentially number strides query plan 
example strides viable bids broker evaluate bid possibilities 
estimated delay process collection subqueries stride equal highest bid time collection 
number different delay values total number bids subqueries collection 
delay value optimal bid collection expensive bid subquery processed delay 
coalescing bid collections stride considering single aggregate bid broker may reduce bid acceptance problem simpler problem choosing bid set aggregated bids query stride 
expensive bid protocol broker receives collection zero bids subquery 
bid subquery collection bids meets client minimum price performance requirements broker solicit additional bids agree perform subquery notify user query run 
possible collections bids meet minimum requirements broker choose best collection bids 
order compare bid collections define difference function collection bids difference note negative value cost bid curve 
simplest queries referencing tables minimal number fragments exhaustive search best bid collection combinatorially prohibitive 
crux problem determining relative amounts time cost resources allocated subquery 
offer heuristic algorithm determines 
shown optimal believe practice demonstrate results 
preliminary performance numbers mariposa included support supposition 
detailed evaluation comparison complex algorithms planned 
algorithm greedy 
produces trial solution total delay smallest possible substitution profitable ones 
series solutions proposed steadily increasing delay values processing step 
iteration algorithm proposed solution contains collection bids certain delay processing step 
collection bids greater delay cost gradient computed 
cost gradient cost decrease result processing step replacing collection solution collection considered divided time increase result substitution 
algorithm begins considering bid collection smallest delay processing step computing total cost total delay compute cost gradient unused bid 
consider processing step contains unused bid maximum cost gradient bid replaces current processing step cost delay resulting difference greater bid substitution 
replace recalculate cost gradients processing step includes continue making substitutions increase difference 
notice current mariposa algorithm decomposes query executable pieces broker tries solve individual pieces heuristically optimal way 
planning extend mariposa contain second bidding strategy 
strategy single site optimizer bypassed 
broker get entire query directly 
decide decompose collection heuristics developed 
try find contractors freely subdivide subcontract 
contrast current query processing system bottom algorithm alternative top decomposition strategy 
hope implement alternative test current system 
finding bidders expensive bid purchase order protocol previous section broker able identify sites process subquery 
mariposa achieves advertising system 
servers announce willingness perform various services posting advertisements 
name servers keep record advertisements ad table 
brokers examine ad table find servers willing perform tasks need 
table shows fields ad table 
practice fields advertisement 
general advertisements specify fewest number fields 
table summarizes valid fields types advertisement 
yellow pages server advertises offers specific service processing queries specific fragment 
date advertisement helps broker decide timely yellow pages entry faith put information 
server issue new yellow pages advertisement time table 
fields ad table ad table field description query template description service offered 
query template query parameters left unspecified 
example select param emp indicates willingness perform select query emp table select param emp name param indicates server wants perform queries perform equality restriction name column 
server id server offering service 
start time time service offered 
may time server expects performing certain tasks specific point time 
expiration time time advertisement ceases valid 
price price charged server service 
delay time server expects complete task 
limit quantity maximum number times server perform service cost delay 
bulk quantity number orders needed obtain advertised price delay 
set brokers advertised services available 
fields comments information specific particular advertisement 
explicitly revoking previous 
addition server may indicate price delay service 
posted price current start date indicated 
guarantee price hold time yellow pages server may issue new posted price revoking old 
specific types advertisements available 
expiration date field set details offer known valid certain period time 
posting sale price manner involves risk advertisement may generate demand server meet forcing pay heavy penalties 
risk offset issuing coupons supermarket coupons place limit number queries executed terms advertisement 
coupons may limit brokers eligible 
similar coupons issued nevada gambling establishments require client years age possess valid california driver license 
bulk purchase contracts renewable coupons allow broker negotiate cheaper prices server exchange guaranteed pre paid service 
analogous travel agent books seats sailing cruise ship 
allow option guaranteeing bulk purchases case broker pay specified queries uses 
bulk purchases especially advantageous transaction processing environments workload predictable brokers solve large numbers similar queries 
referring ad table expect broker remember sites bid successfully previous queries 
presumably broker include sites bidding process generating system learns time processing sites appropriate various queries 
lastly broker knows location fragment returned previously query preparation module name server 
site data automatically bidder 
setting bid price subqueries site asked bid subquery respond triple noted earlier 
section discusses current bidder module extensions expect 
noted earlier coded primarily rush rules changed easily 
naive strategy maintain billing rate cpu resources site 
constants set site administrator local conditions 
bidder constructs estimate amount resource required process subquery objects exist local site 
simple computation yields required bid 
referenced object site site declines bid 
join queries site declines bid conditions satisfied possesses referenced objects 
bid query answer formed referenced objects 
time site promises process query calculated estimate resources required 
zero load estimate elapsed time perform query 
adjusting current load site bidder estimate expected delay 
multiplies site specific safety factor arrive promised delay bid 
expiration date bid currently assigned arbitrarily promised delay plus site specific constant 
naive strategy consistent behavior assumed local site traditional global query optimizer 
current prototype improves naive strategy ways 
site maintains billing rate fragment basis 
way site administrator bias bids fragments business wants away business want 
bidder automatically declines bid queries referencing fragments billing rates site specific threshold 
case query processed site buy copy indicated fragment order solve user query 
tactic hasten sale low value fragments somebody 
second improvement concerns adjusting bids current site load 
specifically site maintains current load average periodically running unix utility 
adjusts bid current load average follows actual bid computed bid load average way nearly idle load average near zero bid low prices 
conversely bid higher higher prices load increases 
notice simple formula ensure crude form load balancing table 
ad table fields applicable type advertisement ad table field type advertisement query template server id start date expiration date price delay limit quantity bulk quantity yellow pages posted price sale price coupon bulk purchase fields null valid optional collection mariposa sites 
third improvement concerns bidding subqueries site possess data 
seen section storage manager buys sells fragments try maximize site revenue 
addition keeps hot list fragments acquire done 
bidder automatically bids query hot list fragment 
way gets contract query instruct storage manager accelerate purchase fragment line goals storage manager 
expect increase sophistication bidder substantially 
plan sophisticated integration bidder storage manager 
view hot lists merely primitive step direction 
furthermore expect adjust billing rate fragment automatically amount business fragment 
hope increase sophistication choice expiration dates 
choosing expiration date far incurs risk honoring lower outof date prices 
specifying expiration date close means running risk broker able bid inherent delays processing engine 
lastly expect consider network resources bidding process 
proposed algorithms discussed subsection 
network bidder addition producing bids cpu disk usage processing sites need take available network bandwidth account 
network bidder separate module mariposa 
network bandwidth distributed resource network bidders path source destination calculate aggregate bid entire path reserve network resources group 
mariposa version tenet network protocols zhang fisher rcap mah perform bandwidth queries network resource reservation 
network bid request broker transfer data source destination pairs query plan 
network bid request sent destination node 
request form transaction id data size node node 
broker receives bid network bidder destination node form transaction id request id price time 
order determine price time network bidder destination node contact intermediate nodes source node 
convenience call destination node source node nk see fig 
call intermediate node path destination source second node available bandwidth adjacent nodes function time represented bandwidth profile 
bandwidth profile contains entries form available bandwidth indicating available bandwidth time time 
ni ni directly connected nodes path source destination data flowing ni ni node ni responsible keeping track charging available bandwidth ni maintains bandwidth profile 
call bandwidth profile node ni node ni bi price ni charges bandwidth reservation pi 
available bandwidth entire path source destination calculated step step starting destination node 
node contacts bandwidth profile network link 
sends profile node bandwidth profile 
node calculates min producing bandwidth profile represents available bandwidth path 
process continues intermediate link ultimately reaching source node 
bandwidth profile reaches source node equal minimum available bandwidth links path source destination represents amount bandwidth available function time entire path 
source node nk initiates backward pass calculate price bandwidth entire path 
node nk sends price reserve bandwidth pk node nk adds price aggregate price arrives destination 
bandwidth reserved time 
bandwidth reserved bidding time chance source destination chosen broker 
bandwidth reserved time window time bidding bid award available bandwidth may changed 
investigating approaches problem 
destination bw time bandwidth profile bw time bw bw bw time min fig 

calculating bandwidth profile time min time bw bw bw time min min source time min min addition choice reserve network resources choices broker sends network bid requests bidding process 
broker send requests network bids time sends bid requests wait single site bids returned send requests network bids winners phase 
case broker request bid pair sites potentially communicate 
number parallelized phases query plan si number sites phase approach produce total bids 
second case broker request bids winners phase query plan 
winning group sites phase number network bid requests sent 
approach advantage parallelizing bidding phase reducing optimization time 
sites asked reserve bandwidth guaranteed win bid 
reserve bandwidth bid request receive approach result reserving bandwidth needed 
difficulty may overcome reserving bandwidth specified bids essentially overbooking flight storage management site manages certain amount storage fill fragments copies fragments 
basic objective site allocate cpu storage resources maximize revenue income unit time 
topic subject part section 
time turn splitting coalescing fragments smaller bigger storage units 
buying selling fragments order sites trade fragments means calculating expected value fragment site 
access history kept fragment sites predictions activity 
specifically site maintains size fragment revenue history 
record history contains query number records qualified time query revenue delay cpu 
cpu information normalized stored site independent units 
estimate revenue site receive owned particular fragment site assume access rates stable revenue history predictor revenue 
convert site independent resource usage numbers ones specific site weighting function lohman 
addition assume successfully bid set queries appeared revenue history 
faster slower site revenue history collected adjust revenue collected query 
calculation requires site assume shape average bid curve 
lastly convert adjusted revenue stream cash value computing net value stream 
site wants bid subquery buy fragment referenced subquery subcontract site 
site wishes buy fragment query comes demand advance prefetch 
purchase fragment buyer locates owner fragment requests revenue history fragment places value fragment 
buys fragment evict collection fragments free space adding cost fragment purchased 
extent storage full fewer evictions required 
case collection called alternate fragments formula 
buyer willing bid price fragment offer price value fragment value alternate fragments price received calculation buyer obtain value new fragment lose value fragments evict 
sell evicted fragments receive price 
item problematic compute 
plausible assumption price received equal value alternate fragments 
conservative assumption price obtained zero 
note case offer price need positive 
potential seller fragment performs calculation site receive offered price lose value fragment evicted 
fragment evicted collection alternate fragments summing size indicated fragment evicted 
case site lose value desirable fragments receive expected price received 
willing sell fragment transferring buyer offer price value fragment value alternate fragments price received price received problematic subject plausible assumptions noted 
sites may sell fragments time reason 
example server implies server sell fragments 
sell fragment site conducts bidding process essentially identical subqueries 
specifically sends revenue history collection potential bidders asks offer fragment 
seller considers highest bid accept bid considerations applied selling fragments request offered price value fragment value alternate fragments price received bid acceptable seller try evict higher value fragment sold 
fragments site lower value fragments sale 
fact site wishes go business find site accept fragments lower internal value buyer 
storage manager asynchronous process running background continually buying selling fragments 
obviously harmony bidder mentioned previous section 
specifically bidder bid queries remote fragments storage manager buy done 
contrast decline bid queries remote objects storage manager interest 
primitive version interface hot list mentioned previous section 
splitting coalescing mariposa sites decide split coalesce fragments 
clearly fragments class parallel execution mariposa queries hindered 
hand fragments overhead dealing fragments increase response time suffer noted copeland 

algorithms splitting coalescing fragments strike correct balance effects 
current time storage manager general rush rules deal splitting coalescing fragments 
section indicates current plans 
strategy market pressure correct inappropriate fragment sizes 
large fragments high revenue attract bidders copies diverting revenue away owner 
owner site wants keep number copies low break fragment smaller fragments revenue attractive copies 
hand small fragment high processing overhead queries 
economies scale realized coalescing fragment class single larger fragment 
direct intervention required mariposa resort tactic 
consider execution queries referencing single class 
broker fetch number fragments class name server assuming fragments size compute expected delay ed query class run fragments parallel 
budget function tells broker total amount available entire query delay 
amount expected feasible bid site situation expected feasible site bid ed broker repeat calculations variable number fragments arrive num number fragments maximize expected revenue site 
value num published broker request bids 
site fragment large small steady state able obtain larger revenue query splits coalesces fragment 
site keeps track average value num class stores fragment decide fragments split coalesced 
course site honor outstanding contracts 
discards splits fragment outstanding contract site endure consequences actions 
entails site portion previously committed buying back missing data 
case revenue consequences site take outstanding contracts account fragment allocation decisions 
site carefully consider desirable expiration time contracts 
shorter times allow site greater flexibility allocation decisions 
names name service current distributed systems rigid naming approach assume changes globally synchronized structure limits scalability system 
mariposa goals mobile fragments avoidance global synchronization require flexible naming service 
developed decentralized naming facility depend centralized authority name registration binding 
names mariposa defines structures object naming 
structures internal names full names common names name contexts defined 
internal names location dependent names determine physical location fragment 
low level names defined implementation described 
full names completely specified names uniquely identify object 
full name resolved object regardless location 
full names specific querying user site location independent query fragment moves full name valid 
name consists components describing attributes containing table full name components fully specified 
contrast common names known synonyms user specific partially specified names 
avoids tedium full name 
simple rules permit translation common names full names supplying missing name components 
binding operation gathers missing parts parameters directly supplied user user environment stored system catalogs 
common names may ambiguous different users may refer different objects name 
common names context dependent may refer different objects different times 
translation common names performed functions written mariposa rule extension language stored system catalogs invoked module parser requires name resolved 
translation functions may take arguments return string containing boolean expression looks query qualification 
string stored internally invoking module called name service module 
user may invoke translation functions directly naming emp 
expect users usual set name parameters user may specify function name string argument default system catalog 
user specifies simple string emp common name system applies default function 
name context set affiliated names 
names context expected share feature 
example may application directory may form part complex object class definition 
programmer define name context global access private name context visible single application 
advantage name context names globally registered names tied physical resource unique birth site williams 

objects name context named 
addition data fragments migrated name servers multiple copies residing different servers better load balancing availability 
scheme differs proposed decentralized name service cheriton mann avoided centralized name authority relying type server manage names relying dedicated name service 
name resolution name resolved discover object bound name 
client server name cache site support local translation common names full names full names internal names 
broker wants resolve name looks local name cache see translation exists 
cache yield match broker uses rule driven search resolve ambiguous common names 
broker fails resolve name local cache query name servers additional name information 
previously discussed names unordered sets attributes 
addition user may know object attributes may incomplete 
common names may ambiguous match matches 
broker discovers multiple matches common name tries pick policy specified rule base 
possible policies match exemplified unix shell command search path policy best match uses additional semantic criteria 
considerable information may exist broker apply choose best match data types ownership protection permissions 
name discovery mariposa name server responds metadata queries way data servers execute regular queries translate common names full names list name contexts provided client 
name service process uses bidding protocol sect 
interact collection potential bidders 
name service chooses winning name server economic considerations cost quality service 
mariposa expects multiple name servers collection may dynamic name servers added removed mariposa environment 
name servers expected advertising find clients 
name server arrangements read local system catalogs sites catalogs serves periodically build composite set metadata 
requirement processing site notify name server fragments change sites split coalesced name server metadata may substantially date 
result name servers differentiated quality service regarding price staleness information 
example name server minute date generally better quality information day date 
quality best measured maximum staleness answer name service query 
information broker appropriate tradeoff price delay quality answer various name services select best meets needs 
quality may name server polling rate 
estimate real quality metadata may observed rate update 
predict chance invalidating update occur time period fetching copy data local table 
mariposa site configurations wan lan site host location model memory host location model memory santa barbara mb arcadia berkeley mb berkeley mb berkeley mb pisa san diego mb berkeley mb table 
parameters experimental test data table location number total size site mb site mb site mb cache 
benefit calculation probing actual metadata see changed 
quality service measurement metadata rate update name server rate update 
mariposa status experiments current time june complete mariposa implementation architecture described operational digital equipment alpha axp workstations running digital unix 
current system combination old new code 
basic server engine postgres stonebraker modified accept sql postquel 
addition implemented broker bidder coordinator modules form complete mariposa system portrayed fig 

building functional distributed system required addition substantial amount software infrastructure 
example built multithreaded network communication package onc rpc posix threads 
primitive actions shown table implemented rpcs available rush procedures action part rush rule 
implementation rush language required careful design performance engineering described sah blow 
presently extending functionality prototype 
current time coordinator broker fairly complete 
storage manager bidder simplistic noted earlier 
process constructing sophisticated routines modules 
addition implementing replication system described 

plan release general mariposa distribution tasks completed 
rest section presents details simple experiments conducted lan wan environments 
experiments demonstrate power performance flexibility mariposa approach distributed data management 
describe experimental setup 
show measurement mariposa protocols add excessive overhead relative traditional distributed dbms 
show mariposa query optimization execution compares traditional system 
experimental environment experiments conducted alpha axp workstations running versions digital unix 
table shows actual hardware configurations 
workstations connected mb ethernet lan case internet wan case 
wan experiments performed midnight order avoid heavy daytime internet traffic cause excessive bandwidth latency variance 
results section generated simple synthetic dataset workload 
database consists tables 
tables part wisconsin benchmark database bitton modified produce results sizes indicated table 
available statistics allow query optimizer estimate size join join join join mb mb mb respectively 
workload query equijoin tables select wide area case query originates berkeley performs join wan connecting uc berkeley uc santa barbara uc san diego 
comparison purchase order expensive bid protocols discussing performance benefits mariposa economic protocols quantify overhead add process constructing executing plan relative traditional distributed dbms 
analyze situation follows 
traditional system plans query sends subqueries processing sites process follows essentially steps purchase order protocol discussed sect 

mariposa choose purchase order protocol expensive bid protocol 
result mariposa overhead relative traditional system difference elapsed time protocols weighted proportion queries expensive bid protocol 
measure difference protocols repeatedly executed way join query described table 
elapsed times various query processing stages network stage time purchase order protocol expensive bid protocol parser lan optimizer broker parser wan optimizer broker previous section lan wan 
elapsed times various processing stages shown table represent averages runs query 
experiment install rules cause fragment migration change optimizer statistics 
query executed identically time 
plainly difference purchase order expensive bid protocol brokering stage 
difference elapsed time protocols due largely message overhead brokering way expect simple message counting 
purchase order protocol single site optimizer determines sites perform joins awards contracts sites accordingly 
sending contracts remote sites involves round trip network messages previously mentioned worse cost traditional distributed dbms initiating remote query execution 
expensive bid protocol broker sends request bid rfb messages joins site 
prospective join processing site sends remote table scans 
brokering process involves round trip messages including round trip messages recording bids notifying winners join subqueries 
note bid collection process executed parallel broker bidder multithreaded accounts fact additional cost high thought 
evident results table expensive bid protocol unduly expensive 
query takes minutes execute savings better query processing strategy easily outweigh small cost bidding 
recall expensive protocol purchase order protocol 
expect expensive protocol majority time 
subsection shows economic methods produce better query processing strategies 
bidding simple economy illustrate economic paradigm works running way distributed join query described previous section repeatedly simple economy 
discuss query optimization execution strategy mariposa differs traditional distributed database systems mariposa achieves performance improvement adapting query processing strategy environment 
show data migration mariposa automatically ameliorate poor initial data placement 
simple economy site uses pricing scheme set rules 
expensive bid protocol economic transaction 
sites adequate storage space need evict alternate fragments buy fragments 
exact parameters decision rules price queries fragments follows queries sites bid subqueries described sect 

bidder bid join criteria specified sect 
satisfied 
billing rate simply estimated cost leading offer price actual bid estimated cost load average load average duration experiment reflecting fact system lightly loaded 
difference bids offered bidder solely due data placement bidders need subcontract remote scans 
fragments broker remote scans considers buying fragment paying scan 
fragment value dis scan cost cussed section set load average combined fact eviction necessary means site consider selling fragment offer price times scan cost load average broker decides try buy fragment pay remote scan rule frag frag acquire frag words broker tries acquire fragment amount money spent scanning fragment previous queries greater equal price buying fragment 
discussed sect 
broker keeps hot list remote fragments previous queries associated scan costs 
rule cause data move closer query executed frequently 
simple economy entirely realistic 
consider pricing selling fragment shown 
load average increases sale price fragment decreases 
desirable effect sale fragments load busy site 
tends cause sale hot fragments 
effective mariposa economy consist rules sophisticated pricing scheme currently experimenting 
performance behavior mariposa simple economy described wan environment shown table 
experiments show table 
execution times data placement revenue site steps elapsed time brokering total location site site revenue site query site mariposa adapts environment bidding process economy rules described 
traditional query optimizer fixed query processing strategy 
assuming sites uniform query processing capacity optimizer ultimately differentiate plans movement data 
tend choose plans minimize amount base table intermediate result data transmitted network 
result traditional optimizer construct plan move berkeley santa barbara 
perform join santa barbara 
move answer san diego 
perform second join san diego 
move final answer berkeley 
plan causes mb data moved mb step mb step mb step 
query executed repeatedly identical load conditions plan generated time resulting identical costs 
contrast simple mariposa economy adjust assignment queries fragments reflect current workload 
mariposa optimizer pick join order traditional optimizer broker change query processing strategy acquires bids joins sites 
examination table reveals performance improvements resulting dynamic movement objects 
shows elapsed time location data revenue generated site running way join query described sect 
repeatedly site berkeley 
step experiment santa barbara winner join 
price scanning smaller table remotely santa barbara scanning remotely berkeley result santa barbara offers lower bid 
similarly san diego winner second join 
steps execution plan resulting bidding identical obtained traditional distributed query optimizer 
subsequent steps show mariposa generate better plans traditional optimizer migrating fragments necessary 
instance moved santa barbara step experiment subsequent joins performed locally 
eliminates need move mb data 
similarly moved san diego step joins performed locally cost moving tables amortized repeated execution queries require data 
experimental results vary considerably wide variance internet network latency 
table shows set results best illustrate beneficial effects economic model 
related currently systems documented literature incorporate microeconomic approaches resource sharing problems 
huberman presents collection articles cover underlying principles explore behavior systems 
miller drexler term systems software systems deploying market mechanisms resource allocation independent objects 
datatype agents proposed article comparable brokers 
mediate consumer supplier objects helping find current best price supplier service 
extension agents reputation services brokered agent selection agent 
analogous notion quality service name servers offer services brokers 
kurose simha solution file allocation problem microeconomic principles cooperative competitive environment 
agents economy exchange fragments order minimize cumulative system wide access costs incoming requests 
achieved having sites voluntarily fragments portions thereof sites lowers access costs 
model sites cooperate achieve global optimum competing resources maximize utility 
malone describe implementation process migration facility pool workstations connected lan 
system client broadcasts request bids includes task description 
servers willing process task return estimated completion time client picks best bid 
time estimate computed basis processor speed current system load normalized runtime task number length files loaded 
parameters note total elapsed time include time move fragments 
takes move site step move site step supplied task description 
prices charged processing services provision shortcut bidding process mechanisms posting server characteristics advertisements servers 
distributed process scheduling system 
cpu time remote machines auctioned processing sites applications hand bids time slices 
contrast system processing sites bids servicing requests 
different types auctions computations aborted funding depleted 
application structured manager worker modules 
worker modules perform application processing execute parallel 
managers responsible funding workers divide available funds application specific way 
adjust degree parallelism availability idle cpus manager changes funding individual workers 
wellman offers simulation multicommodity flow quite close bidding model bid resolution model converges multiple rounds messages 
violate constraint single points failure 
mariposa name service thought partial list possible suppliers 
optimality results clearly invalidated possible exclusion optimal bidders 
suggests importance high quality name service ensure winning bidders usually solicited bids 
model similar proposed ferguson 
fragments moved replicated nodes network computers allowed split coalesced 
transactions consisting simple read write requests fragments budget entering system 
accesses fragments purchased sites offering desired price quality ratio 
sites trying maximize revenue lease fragments copies access history fragment suggests profitable 
model bidding process service purchase fragment lease 
relevant prices published site catalogs updated time reflect current demand system load 
network distance site offering fragment access service included price quote give quality ofservice indication 
major difference model site needs perfect information prices fragment accesses site requiring global updates pricing information 
assumed name service perfect information fragments network available site requiring global synchronization 
name service provided cost excluded economy 
expect global updates metadata suffer scalability problem sacrificing advantages decentralized nature microeconomic decisions 
computer centers main source computing power authors studied economics centers services 
focussed cost services required scale center user needs cost user delays pricing structure 
results reported literature computer man agement sciences 
particular mendelson proposes microeconomic model studies queueing effects popular pricing policies typically considering delays 
model shows delay cost taken account low utilization ratio center optimal 
model refined dewan mendelson 
authors assume nonlinear delay cost structure necessary sufficient conditions optimality pricing rules charges service resources marginal capacity cost 
similar results intended human decision making apply mariposa context 
hand mendelson propose methodology trading cost incomplete information data related costs constructing minimum cost answers variety query types 
results useful mariposa context 
users brokers face compromise complete costly cheaper incomplete partial data processing 
distributed microeconomic approach managing query execution storage management 
difficulty scheduling distributed actions large system stems combinatorially large number possible choices action expense global synchronization requirement supporting systems heterogeneous capabilities 
complexity increased presence rapidly changing environment including time varying load levels site possibility sites entering leaving system 
economic model studied reduce scheduling complexity distributed interactions seek globally optimal solutions 
forces market provide invisible hand guide reasonably equitable trading resources 
demonstrated power flexibility mariposa experiments running wide area network 
initial results confirm belief bidding protocol unduly expensive bidding process results execution plans adapt environment unbalanced workload poor data placement flexible manner 
implementing sophisticated features plan general release 

authors jim sharp institute computational earth system science university california santa barbara joseph pasquale eric anderson department computer science engineering university california san diego providing home remote mariposa sites assistance initial setup 
mariposa designed implemented team students faculty staff includes authors robert devine marcel michael olson robert patrick rex 
presentation ideas greatly improved suggestions critiques provided sunita sarawagi allison woodruff 
research sponsored army research office contract daah advanced research projects agency contract dabt national science foundation iri microsoft mah ba real time channel administration protocol 
proc nd int workshop network operating system support digital audio video heidelberg germany november bernstein pa goodman wong reeve cl query processing system distributed databases sdd 
acm trans database syst bitton dewitt dj benchmarking data base systems systematic approach 
proc th int conf large data bases florence italy november cheriton mann tp decentralizing global naming service improved performance fault tolerance 
acm trans comput syst copeland alexander keller data placement bubba 
proc acm sigmod conf management data chicago ill june pp dewan mendelson user delay costs internal pricing service facility 
management sci ferguson nikolaou yemini economy managing replicated data autonomous decentralized systems 
proc int symp autonomous decentralized kawasaki japan march pp huberman ba ed ecology computation 
north holland amsterdam kurose simha microeconomic approach optimal resource allocation distributed computer systems 
ieee trans comp litwin sirius system distributed data management 
schneider hj ed distributed data bases 
north holland amsterdam lf lohman gm optimizer validation performance evaluation distributed queries 
proc th int conf large data bases kyoto japan august pp malone tw fikes re kr howard mt enterprise task scheduler distributed computing environments 
huberman ba ed ecology computation 
north holland amsterdam mendelson pricing computer services queueing effects 
commun acm mendelson incomplete information costs database design 
acm trans database syst miller ms drexler ke markets computation open systems 
huberman ba ed ecology computation 
north holland amsterdam ousterhout jk tcl tk toolkit 
addison wesley reading mass sah blow new architecture implementation scripting languages 
proc usenix symp high level languages santa fe nm october 
pp sah blow dennis rush language 
proc tcl workshop new orleans la june pp selinger pg astrahan mm chamberlin dd lorie ra price tg access path selection relational database management system 
proc acm sigmod conf management data boston mass june aoki pm barr sah staelin stonebraker yu data replication mariposa sequoia technical report university california berkeley calif stonebraker design implementation distributed 
stonebraker ed ingres papers 
addison wesley reading mass stonebraker overview sequoia project sequoia technical report university california berkeley calif stonebraker postgres generation database management system 
commun acm stonebraker aoki pm devine litwin olson mariposa new architecture distributed data 
proc th int conf data engineering houston tex february pp stonebraker devine litwin pfeffer sah staelin economic paradigm query processing data migration mariposa 
proc rd int conf parallel distributed information syst austin tex september pp waldspurger ca hogg huberman kephart stornetta spawn distributed computational ecology 
ieee trans software eng wellman mp market oriented programming environment applications distributed multicommodity flow problems 
ai res williams daniels haas lapis lindsay ng obermarck selinger walker yost overview architecture 
ibm research report rj ibm research laboratory san jose calif zhang fisher preliminary measurement rmtp 
proc third int workshop network operating system support digital audio video san diego calif november 
