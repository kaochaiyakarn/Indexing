speci cations proofs ensemble layers jason hickey nancy lynch robbert van renesse dept computer science cornell university 
laboratory computer science massachusetts institute technology 
ensemble widely group communication system supports distributed programming providing precise guarantees synchronization message ordering message delivery 
ensemble eases task distributed application programming result ensuring correctness ensemble di cult problem 
automata formalizing specifying verifying ensemble implementation 
focus speci cally message total ordering property commonly guarantee consistency process group 
systematic veri cation protocol led discovery error implementation 
ensemble working system supporting group communication 
group communication model processes join form views vary time time process belongs exactly view 
ensemble provides precise semantics message delivery ordering view views change 
ensemble implementation modular applications acquire services constructing layered protocol stacks 
ensemble currently provides protocol layers number useful protocols constructed composing layers protocol stacks numbers thousands 
ensemble eases task distributed application programming supporting properties failure detection recovery process migration message ordering con ict resolution common application interface 
perspective ensemble provides model establishing con dence critical algorithms cleanly isolated modularized 
perspective task verifying thousands protocols seemingly impossible 
veri cation model capture modularity ensemble able provide automated assistance module composition 
experience applying automata ensemble 
automaton model provides framework 
support research provided darpa contract cornell darpa contract afosr contract nsf ccr ccr mit 
modeling ensemble ensemble layers described formally automata composition layers corresponds composition automata automaton model language supports range speci cation speci cations characterize services operational speci cations characterize program behavior automata interpreted formally part mechanical veri cation performing nuprl system 
demonstrate experience case study ensemble total order protocol speci es ordering property message delivery 
built incrementally virtual synchrony basic ensemble service 
contributions evs speci cation safety properties guaranteed ensemble virtual synchrony layer 
eto ensemble totally ordered virtual synchrony layer 
local program node ensemble implementation eto evs 
original program written ocaml mark hayden code developed robbert van renesse horus system 
simulation relation showing composition evs implements eto 
document gives speci cations summarizes proofs total order case study 
full proofs detail provides formal arguments mechanical veri cation nuprl proof development system 
time writing mechanical veri cation partially complete 
discuss proof automation speci cally speci cations developed process reverse engineering hand translating ensemble code nuprl speci cation proofs developed concert nuprl formalism 
outline rest follows 
section give brief description automata formalism section specify ensemble client 
specify eto evs services sections develop layer speci cation veri cation section nish discussion speci ordering properties led discovery error ensemble horus section 
notation mathematical foundations sets functions sequences 
set containing notation refers set write hhii empty sequence 
sequence jaj denotes length notation jaj denote number elements equal sequence jaj denotes ith element denotes subsequence 
say sequence pre sequence written exists 
views 
denotes universe processes 
totally ordered set identi ers distinguish views 
distinguish view identi ers process assume special view identi ers come view identi ers total ordering hg pi consists view identi er nonempty set processors called members view 
set views 
view hg pi notation id refers view identi er view notation set refers view membership set view distinguish special initial views hg 
speci cations associate view identi er refer view meaning view identi er messages 
denote universe possible messages 
messages placed queues paired processors message processor pair hm pi notation msg refers message proc refers processor automata 
automata provide reactive model programs react environment ongoing manner described lynch 
automaton consists set actions classi ed input output internal possibly ini nite set states set transitions state action state triples 
valid execution state action sequence ia triple ia transition automaton 
automata pseudocode describes automaton parts possible actions described signature state expressed collection variables domains transitions described precondition ect clauses action 
client automaton cp speci cation ensemble client shown 
client automaton formalize restrictions environment ensemble services exist 
client process client represents single process ensemble application 
group membership changes time distinct phases represented modes 
client initialized normal mode communicate processes view sending receiving messages 
cp signature input eto eto newview set eto gprcv state mode normal preparing blocked initially normal transitions input eto newview mode normal input eto mode preparing output eto block pre mode preparing mode blocked fig 

cp speci cation output eto block eto output eto pre mode blocked input eto gprcv new view installed ensemble noti es client sending block message 
block message puts client preparing mode client may continue send receive messages preparing mode 
client may respond block request block ok message client blocked 
client allowed send messages blocked mode 
transition blocked normal mode occurs ensemble delivers newview message installs new view client potentially new list view members 
ensemble virtual synchrony evs virtual synchrony provides semantics group communication 
view guarantees provided ensemble summarized informal properties 
evs self process installs view set 
evs view order views installed ascending order view id evs non overlap processes install view previous views disjoint 
failures may prevent messages delivered virtual synchrony provides delivery guarantees 
evs msg view delivered messages delivered view sent 
evs fo messages processes view delivered fifo order 
evs sync processes install view preceding view deliver messages view 
automaton evs shown 
automaton contains state shared processes external events signature indexed processes 
event match evs signature evs evs block internal evs evs gprcv evs 
evs newview set state created initially pg mode normal preparing blocked initially normal initially pending initially hhii initially derived variables views fv created id current max current view default view created id current pred largest strictly smaller exists pred view default view views id pred id views exists transitions output evs pre mode normal mode preparing input evs block mode blocked output evs newview choose pre mode blocked current view created id id set pred view internal evs pre created id id created created fvg input evs append pending current output evs gprcv choose pre current pending hhii pending pred view pred view set set fg pred view set id id mode normal fv idg fig 

evs speci cation client events 
addition new internal action evs creates new views may eventually installed 
state keep history process 
variable mode represents mode client sequence history views delivered process sequence pending sequence messages sent process view index indicates message delivered process process view pending message delivered 
view current view view delivered client pred view view delivered just view process transitions evs block evs block ok represent state changes client 
transition evs places message current sequence pending messages process transition evs gprcv takes message pending queue process delivers process evs newview transition requires properties new view delivered client precondition id id requires new view larger current view ensures evs view order 
process precondition pred view pred view set set fg provides evs non overlap property processes installed view pred view 
precondition id id provides evs sync property messages delivered process processes installed view view 
properties evs fo property follows ordering messages pending queues yield informal properties claimed designers 
ensemble total order eto eto service guarantees properties evs ordering guarantees message delivery 
eto total messages delivered process delivered order 
eto causal messages causally ordered process receives message process received messages received sent 
automaton eto derived evs di erences shown evs actions evs renamed eto pre transitions eto eto gprcv replace corresponding transitions evs eto order new action eto state adds state variables queue pending state evs 
total order view gis eto changes evs signature eto eto block internal eto eto gprcv eto 
eto newview set eto order mf mf state queue initially hhii pending initially hhii derived variables enabled bool indicates totally ordered message delivered process process view queue transitions input eto choose current choose append internal eto order mf choose pre pending mf insert queue ati output eto gprcv choose pre current pending enabled fig 

speci cation modi cations eto represented queue process sequence message total order process queue 
queue entries inserted internal action eto order inserts process total order queue location occurrences process total order 
message delivery ordering process determined precondition evs gprcv precondition provides causal ordering eto transition saves causal snapshot delivery state message sent causality requirement 
total ordering determined enabled predicate enabled index total order queue number delivered messages process pis number occurrences queue 
condition ordering allows message deliveries contain gaps 
example consider ordering queue hhp ii underlined process identi ers represent messages delivered process messages delivered processes 
message deliveries longer enabled violate total order 
possible delivery process 
implementation algorithm ensemble implements services separate protocol stacks process 
layer implements total order uses phase token algorithm 
view rst installed evs newview action token generated group leader process smallest process identi er 
message sent rst phase called ordered phase associated token 
process message send required obtain token 
obtains token sends message token generates new token 
phase sent messages totally ordered tokens 
messages received layer evs ordered phase saved queue called ordered queue order determined tokens 
layer delivers message client messages successfully received layer evs gprcv action delivered client eto gprcv action 
second phase protocol called unordered phase entered layer time 
unordered phase outgoing messages sent waiting token designated unordered 
layers receive unordered messages place queue called unordered queue 
delivery unordered message client delayed installation view layer sorts contents unordered queue process identi er delivers queued messages client delivering new view 
speci cation layer shown figures speci cation tokens messages ordered mode represented number 
layer uses message types communicate information messages ordering ordered pairs token message unordered designates unordered message request token process deliver token process signature layer includes actions communicating evs evs events client eto version xes original error ensemble horus di ered implementation precondition eto gprcv discussed section 
signature de ne mt ordered unordered input evs gprcv mt evs evs newview eto block eto internal evs state blocked bool initially false block bool initially false block ok bool initially false newview bool initially false holds token bool initially true token initially token bool initially true view initially vp transitions input evs gprcv ordered ordered hm qi input evs gprcv unordered append hm qi unordered input evs gprcv request request fqg input evs gprcv token holds token true token input eto append pending output evs mt evs block eto eto newview set eto gprcv request initially fg requested bool initially false pending initially hhii initially order initially ordered initially unordered initially hhii input evs block true input evs newview newview true view input eto block block ok true blocked true internal eto pre true holds token false token false fig 

state input internal transitions events 
speci cation process allowed initiate unordered mode time internal event evs unordered state parts 
view part maintains information view state pending views 
blocked ag true client considered blocked 
block block ok new view ags keep track queued block events passed evs client instance block set transition evs block reset transition eto block view eld valid ag new view set contains view delivered client 
part state token management 
holds token ag set process known hold valid token token output transitions output eto pre block newview block false output evs block pre block ok block ok false output evs ordered pre pending holds token token token output evs unordered pre token pending output eto newview pre newview view ordered order 
unordered proc view set newview false token order pending hhii ordered 
holds token set request fg requested false blocked false token true output eto gprcv choose pre ordered order hm qi newview order ordered hm qi view set order ordered ordered proc view set newview order ordered ordered proc view set unordered hm qi unordered proc view set unordered proc view set ordered order hm pi order order ordered 
remove element unordered output evs pre token holds token requested requested true output evs pre holds token token request holds token false request request frg requested false fig 

output transitions represented number stored token eld 
token ag true layer ordered phase protocol 
request eld set processes known requesting token 
requested ag set process actively requesting token 
nal part state ordering queueing 
pending eld contains messages sent client current view 
eld index message sent evs pending queue 
ordered queue queue ordered messages received layer current view 
order eld index ordered message delivered client ordered queue 
unordered messages stored unordered queue arrival view 
ordered message sent evs action process token pending message pending messages sent unordered unordered phase initiated 
ordering part protocol implemented transition eto gprcv cases message delivered client ordered message ordered order queued 
case message delivered client order eld incremented 
new view pending ordered message process ordered queue survives new view 
message delivered client removed ordered queue 
new view pending messages ordered queue belong failed processes processes new view message rst message surviving process message delivered client removed unordered queue 
new view delivered client messages surviving process delivered client ordered unordered queues 
messages failed processes discarded 
layer veri cation forward simulation relation described chapter lynch showing implementation evs composed layers clients implements speci cation eto composed clients implement speci cation automaton implementation automaton abbreviate notation layer evs virtual synchrony 
speci cation automaton composition eto 
implementation de ne additional derived variables correspond values speci cation shown 
list pending messages evs automaton process view number messages process queued process layer number messages process delivered process layer index message delivered process process layer eld list messages ordered unordered queued layer delivery process variables provide state correspondence shown 
proof simulation relation induction length executions 
summarize proof 
show evs corresponds action eto eto order index number messages 
choose index follows 
ordered ordered mes compose evs cp hide evs mt evs block evs gprcv mt evs 
evs newview set derived variables current evs current newview evs pred evs current 
view represents current view layer 
pending entry evs pending ordered 
length number pending ordered messages 
pending entry evs pending unordered jp number unordered messages pending sorted processor ordering evs queue de ned queue de ned sequence ordered unordered messages evs pending de ned number messages processor ordered order unordered de ned number ordered unordered messages evs pending evs current evs evs current 
de ned de ned sequence messages ordered unordered fig 

total order implementation sage insertion occurs location ifm unordered unordered message location location queue ordered messages occurrences processes show action eto gprcv corresponds directly action eto gprcv part need prove delivery eto gprcv causal enabled eto enabled predicate 
ordering argument parts corresponding precondition eto gprcv 
ordered messages rst clause precondition ordering conditions straightforward 
message associated token messages delivered strict token order causality totality trivially preserved 
eto created created cp mode cp mode eto mode cp mode eto flp lp newview eto queue queue eto pending lp pending eto eto current fig 

state relation proof second disjunct eto gprcv complex causal relationships queued messages arrival new view 
new view ordered queue may contain messages interspersed gaps messages received layer 
assumption lost messages received process new view evs sync property 
causal relationships unknown implementation deliver messages processes remain new view 
discuss section original ensemble horus implementations implement step exactly 
lastly proof ordering messages unordered queue straightforward 
delivery unordered messages postponed view unordered messages causally unrelated 
total ordering property follows layers sort messages ordering causality follows messages failed processes delivered 
discussion complex part proof action evs gprcv di erent cases handled case ordered messages unordered ordered messages received transition layers sending ordered messages sending unordered messages 
message delivery properties evs guarantee gaps ordered queue messages new view passed layer evs newview action 
subtle point involves issue causal ordering messages 
illustrate problem scenario involving processes initially view 
scenario message delivered process immediately delivers client 
client sends new message received processes processes fail 
message causally related message causally unrelated clients receive messages arrival new view due gap ordered queue left message 
failures way recover message 
messages delivered 
implementations addressed problem di 
en initial view token token token unordered new view implementation discarded pending ordered messages arrival new view horus implementation delivered 
ensemble discard message deliver violating property horus deliver message delivering violating eto causal 
implementation evs fo eto causal properties deliver messages 
rst started working veri cation problem rst step derive speci cations ensemble ml code gave speci cation shown middle precondition eto gprcv clear doing simulation proof simulation step eto gprcv fail message deliveries allowed speci cation total order eto 
solution strengthen properties evs strengthen precondition eto gprcv 
spoke developers problem line reasoning common implementations evs preserve causal ordering messages implementations correctly 
causal ordering provided evs ciency reasons applications need causal ordering add additional protocol layer implement property 
code corrected implementing additional precondition ect eto gprcv changes implementation code minimal implementations corrected 
related birman joseph earliest accounts virtual synchrony 
time group membership communication speci cations appeared 
article published points attempts unsatisfactory 
new speci cations appeared su er shortcomings 
speci cation protocol layers composition appeared 
automata specifying distributed systems 
protocol layers point point messaging formally speci ed composed tla 

charron bost pascale sam toueg 
formal speci cation group membership services 
technical report tr cornell university computer science department august 

babaoglu baker 
system support partition aware network applications 
proceedings th ieee international conference distributed computing systems may 

kenneth birman 
building secure reliable network applications 
manning publishing prentice hall january 

kenneth birman thomas joseph 
exploiting virtual synchrony distributed systems 
proc th symposium operating systems principles sosp pages november 

constable implementing mathematics nuprl proof development system 
prentice hall 

alan fekete 
formal models communications services case study 
ieee computer august 

alan fekete nancy lynch alex shvartsman 
specifying partitionable group communication service 
proc acm symposium principles dist comp pages 

mark hayden 
ensemble system 
phd thesis dept computer science cornell university january 

jason hickey nancy lynch robbert van renesse 
speci cations proofs ensemble layers 
technical report forthcoming mit cornell university 
available www cs cornell edu papers hlr ps 

bengt jonsson 
compositional speci cation veri cation distributed systems 
acm transactions programming languages systems march 

david karr 
protocol composition horus 
phd thesis dept computer science cornell university december 

leslie lamport 
tla 
technical report digital src palo alto ca 

nancy lynch mark tuttle 
input output automata 
centrum voor wiskunde en informatica amsterdam netherlands september 
tech 
memo mit lcs tm 

nancy lynch 
distributed algorithms 
morgan kaufmann 

gil 
new look membership services 
proc acm symposium principles dist comp pages may 

robbert van renesse ken birman mark hayden david karr 
building adaptive systems ensemble 
software practice experience july 

robbert van renesse kenneth birman roy friedman mark hayden david karr 
protocol composition horus 
proc 
th annual acm symposium principles dist comp pages ottawa ontario august 
acm sigops sigact 
