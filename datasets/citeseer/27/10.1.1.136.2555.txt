design patterns abstraction reuse object oriented design erich gamma 
richard helm ralph johnson john vlissides de blvd cupertino ca usa thomas watson research center box yorktown heights ny usa department computer science university illinois urbana champaign spring eld ave urbana il usa 
propose design patterns new mechanism expressing object oriented design experience 
design patterns identify name common themes objectoriented design 
capture intent design identifying objects collaborations distribution responsibilities 
design patterns play roles object oriented development process provide common vocabulary design reduce system complexity naming de ning abstractions constitute base experience building reusable software act building blocks complex designs built 
design patterns considered reusable micro architectures contribute system architecture 
describe express organize design patterns introduce catalog design patterns 
describe experience applying design patterns design object oriented systems 
design methods supposed promote design teach new designers design standardize way designs developed 
typically design method comprises set syntactic notations usually graphical set rules govern notation 
describe problems occur design design 
studies expert programmers conventional languages shown knowledge organized simply syntax larger conceptual structures algorithms data structures idioms plans indicate steps necessary ful ll particular goal 
designers think notation recording design 
look patterns match plans algorithms data structures idioms learned past 
designers appears rely large amounts design experience experience just important notations recording designs rules notations 
experience design object oriented systems frameworks bears observation 
exist idiomatic class object structures help designs exible reusable elegant 
example model view controller mvc paradigm smalltalk design structure separates representation presentation 
mvc promotes exibility views independent model 
factories hide concrete subclasses applications class names hard wired application 
performed union bank switzerland zurich switzerland 
appear ecoop conference proceedings springer verlag lecture notes computer science 
de ned design structures positive impact software development 
software architect familiar set design structures apply immediately design problems having rediscover 
design structures facilitate reuse successful architectures expressing proven techniques design structures readily accessible developers new systems 
design structures improve documentation maintenance existing systems furnishing explicit speci cation class object interactions underlying intent 
propose design patterns new mechanism expressing design structures 
design patterns identify name common themes object oriented design 
preserve design information capturing intent design 
identify classes instances roles collaborations distribution responsibilities 
design patterns object oriented development process design patterns provide common vocabulary designers communicate document explore design alternatives 
reduce system naming de ning abstractions classes instances 
set design patterns ectively raises level programs 
design patterns constitute reusable base experience building reusable software 
distill provide means reuse design knowledge gained experienced practitioners 
design patterns act building blocks constructing complex designs considered micro architectures contribute system architecture 
design patterns help reduce learning time class library 
library consumer learned design patterns library reuse experience learning new class library 
design patterns help novice perform expert 
design patterns provide target reorganization refactoring class hierarchies 
design patterns early lifecycle refactoring stages design 
major contributions de nition design patterns means describe system classi cation importantly catalog containing patterns discovered building class libraries patterns collected literature 
roots gamma thesis abstracted design patterns framework 
re ned extended collective experience 
thinking uenced inspired discussions architecture handbook workshops oopsla conferences 
parts 
rst introduces design patterns explains techniques describe 
classi cation system characterizes common aspects patterns 
classi cation serve structure catalog patterns second part 
discuss design patterns impact object oriented programming design 
review related 
second part appendix describes current catalog design patterns 
include complete catalog currently runs pages give brief summary include abridged patterns 
pattern catalog representative judge object oriented design 
tried reduce subjectivity judgment including design patterns seen practical application 
design pattern included works twice discovered independently variety application domains 
design patterns design pattern consists essential parts 
description class object collaboration structure 
description concerns design particular design 

issue system design addressed structure 
determines circumstances design pattern applicable 

consequences applying structure system architecture 
determine pattern applied view design constraints 
design patterns de ned terms object oriented concepts 
su ciently avoid specifying implementation details ensuring wide applicability pattern may provide hints potential implementation issues 
think design pattern micro architecture 
architecture serves blueprint may realizations 
micro de nes complete application library 
useful design pattern applicable problem domains design patterns tend relatively small size scope 
design pattern considered transformation system structure 
de nes context transformation change consequences transformation 
help readers understand patterns entry catalog includes detailed descriptions examples 
template structure descriptions ensure uniformity entries catalog 
template explains motivation structure 
appendix contains design patterns template 
urge readers study patterns appendix referenced text 
categorizing design patterns design patterns vary granularity level abstraction 
numerous common properties 
design patterns need way organize 
section introduces classi cation system design patterns 
classi cation easy refer families related patterns learn patterns catalog nd new patterns 
characterization creational structural behavioral jurisdiction class factory method adapter class template method table 
design pattern space bridge class object factory adapter object chain responsibility prototype bridge object command solitaire iterator object glue mediator proxy memento observer state strategy compound builder composite interpreter wrapper iterator compound walker design pattern name jurisdiction characterization pattern name classi cation 
name convey pattern essence succinctly 
name vital part design vocabulary 
intent design pattern 
rationale intent 
particular design issue problem address 
motivation scenario pattern applicable particular design problem issue pattern addresses class object structures address issue 
information help reader understand description pattern follows 
applicability situations design pattern applied 
examples poor designs pattern address 
recognize situations 
participants describe classes objects participating design pattern responsibilities crc conventions 
collaborations describe participants collaborate carry responsibilities 
diagram graphical representation pattern notation object modeling technique omt wehave added method pseudo code 
consequences pattern support objectives 
trade results pattern 
design pattern 
aspect system structure allow tobe varied independently 
implementation pitfalls hints techniques aware implementing pattern 
language speci issues 
examples section presents examples real systems 
try include examples di erent domains 
see design patterns closely related intent 
important di erences 
patterns 
fig 

basic design pattern template think set design patterns terms orthogonal criteria jurisdiction characterization 
table organizes current set patterns criteria 
jurisdiction domain pattern applies 
patterns having class jurisdiction deal relationships base classes subclasses class jurisdiction covers static semantics 
object jurisdiction concerns relationships peer objects 
patterns having compound jurisdiction deal recursive object structures 
patterns capture concepts span jurisdictions 
example iteration applies collections objects object jurisdiction recursive object structures compound jurisdiction 
object compound versions iterator pattern 
characterization re ects pattern 
patterns characterized creational structural 
creational patterns concern process object creation 
structural patterns deal composition classes objects 
behavioral patterns characterize ways classes objects interact distribute responsibility 
sections describe pattern jurisdictions greater detail characterization examples catalog 
class jurisdiction class creational 
creational patterns objects instantiated hiding speci cs creation process 
useful undesirable specify class name explicitly instantiating object 
doing limits exibility forces programmer commit particular class particular protocol 
avoids hard coding class possible defer class selection run time 
creational class patterns particular defer part object creation subclasses 
example factory method method called base class de ned subclasses 
subclass methods create instances type depends subclass method implemented 
way base class hard code class name created object 
factory methods commonly instantiate members base classes objects created subclasses 
example application class needs create application speci documents conform document type 
application instantiates document objects calling factory method 
method overridden classes derived application 
subclass say overrides return object 
class structural 
structural class patterns inheritance compose protocols code 
simple example consider multiple inheritance mix classes 
result amalgam class unites semantics base classes 
trivial pattern quite useful making independently developed class libraries 
example class form adapter pattern 
general adapter interface adaptee conform providing uniform abstraction di erent interfaces 
class adapter accomplishes inheriting privately adaptee class 
adapter expresses interface terms adaptee 
class behavioral 
behavioral class patterns capture classes cooperate subclasses ful ll semantics 
template method simple known behavioral class pattern 
template methods de ne algorithms step step 
step invoke method subclass de ne base method 
purpose template method provide de nition algorithm 
subclass implement speci behavior provide services required algorithm 
object jurisdiction object patterns apply various forms non recursive object composition 
object composition represents powerful form reusability collection objects easily reused variations composed subclassed 
object creational 
creational object patterns sets objects created 
factory pattern page creational object pattern 
describes create product objects generic interface 
subclasses may manufacture specialized versions compositions objects permitted interface 
turn clients factories avoid making assumptions classes instantiate 
factories composed create larger factories structure modi ed run time change semantics object creation 
factory may manufacture custom composition instances shared kind instance computed run time long conforms creation protocol 
example consider user interface toolkit provides types scroll bars motif open look 
application programmer may want hard code application choice scroll bar determined say variable 
code creates scroll bar encapsulated class kit factory abstracts speci type scroll bar instantiate 
kit de nes protocol creating scroll bars user interface elements 
subclasses kit rede ne operations protocol return specialized types scroll bars 
scroll bar operation instantiate return motif scroll bar corresponding operation return open look scroll bar 
object structural 
structural object patterns describe ways assemble objects realize new functionality 
added exibility inherent object composition stems ability composition run time impossible static class composition 
proxy example structural object pattern 
proxy acts convenient surrogate placeholder object 
proxy local representative object di erent address space remote proxy represent large object loaded demand virtual proxy protect access original object protected proxy 
proxies provide level indirection particular properties objects 
restrict enhance alter object properties 
pattern concerned object sharing 
objects shared reasons ciency consistency 
applications large quantities objects pay careful attention cost object 
substantial savings accrue sharing objects replicating 
objects shared de ne context dependent state 
context dependent state 
additional information need perform task passed needed 
context dependent state may shared freely 
may necessary ensure copies object stay consistent copies changes 
sharing provides automatic way consistency 
object behavioral 
behavioral object patterns describe group peer objects cooperate perform task single object carry 
example patterns mediator chain responsibility control ow 
call objects exist solely redirect ow messages 
redirection may simply notify object may involve complex computation bu ering 
observer pattern abstracts synchronization state behavior 
entities dependent extent state remain synchronized may exploit observer 
classic example model view pattern multiple views model noti ed model state changes 
strategy pattern page es algorithm 
example text composition object may need support di erent line breaking algorithms 
infeasible hard wire algorithms text composition class subclasses 
alternative di erent algorithms object models support dynamic inheritance notably self exible object composition theory 
provide subclasses 
interface de ned class derived classes provide di erent layout strategies simple line breaks full page justi cation 
instances subclasses coupled text composition run time provide appropriate text layout 
text composition nd line breaks forwards responsibility current object 
compound jurisdiction contrast patterns having object jurisdiction concern peer objects patterns compound jurisdiction ect recursive object structures 
compound creational 
creational compound patterns concerned creation recursive object structures 
example builder pattern 
builder base class de nes generic interface incrementally constructing recursive object structures 
builder hides details objects structure created represented composed changing adding new representation requires de ning new builder class 
clients una ected changes builder 
consider parser rtf rich text format document exchange format able perform multiple format conversions 
parser convert rtf documents plain ascii text text object edited text viewer object 
problem parser independent di erent conversions 
solution create class takes builder object argument 
knows parse rtf format noti es builder recognizes text rtf control word 
builder responsible creating corresponding data structure 
separates parsing algorithm creation structure results parsing process 
parsing algorithm reused create number di erent data representations 
example ascii builder ignores noti cations plain text text builder uses noti cations create complex text structure 
compound structural 
structural compound patterns capture techniques structuring recursive object structures 
simple example composite pattern 
composite recursive composition composites 
composite treats multiple recursively composed objects single object 
wrapper pattern page describes attach additional properties services object 
wrappers nested recursively compose complex object structures 
example wrapper containing single user interface component add decorations borders shadows scroll bars services scrolling zooming 
wrapper conform interface wrapped component forward messages 
wrapper perform additional actions border component forwarding message 
compound behavioral 
behavioral compound patterns deal behavior recursive object structures 
iteration recursive structure common activity captured iterator pattern 
encoding distributing traversal strategy class structure extracted implemented iterator class 
iterators traversal algorithms recursive structures 
di erent iterators implement pre order order post order traversals 
required nodes structure provide services enumerate sub structures 
avoids hard wiring traversal algorithms classes objects composite structure 
iterators may replaced run time provide alternative traversals 
experience design patterns applied design patterns design construction systems 
brie describe systems experience 
highly interactive tool lets traders value price perform analyses nancial instrument called swap 
project developers rst learn class library implement tool nally design framework creating calculation engines di erent nancial instruments 
teaching emphasized learning class library describing applied design patterns 
noticed design patterns reduced ort required learn 
patterns proved helpful development design code reviews 
patterns provided common vocabulary discuss design 
encountered problems design patterns helped explore design alternatives nd solutions 
constraint solving toolkit quadratic optimization constraint architecture new object oriented constraint solving toolkit developed ibm research 
leverages results symbolic computation geometry support cient incremental interactive constraint manipulation 
architecture designed exible 
permits experimentation di erent classes constraints domains reals booleans di erent constraint solving algorithms domains di erent representations doubles nite precision objects domains 
qo ca object oriented design allows parts system varied independently 
exibility achieved example strategy patterns factor constraint solving algorithms bridges factor domains representations variables 
addition observable pattern propagate noti cations variables change values 
summary observations points summarize major observations wehave applying design patterns design patterns motivate developers go concrete objects concepts immediately apparent objects problem domain 
choosing intuitive class names important di cult 
design patterns help name classes 
calculation engine framework encoded name design pattern class name example 
convention results longer class names gives clients classes purpose 
apply design patterns rst implementation architecture improve design 
example easier apply strategy pattern initial create objects notions calculation engine constraint solver 
patterns targets class refactorings 
nd saying part class strategy split implementation portion class bridge 
presenting design patterns examples application turned ective way object oriented design example 
important issue reuse technology reusable component adapted create problem speci component 
design patterns particularly suited reuse 
concrete class structure may reusable design pattern underlying design patterns reduce ort required learn class library 
class library certain design culture characterized set patterns implicitly developers 
speci design pattern typically reused di erent places library 
client learn patterns rst step learning library 
familiar patterns reuse understanding 
patterns appear class libraries possible reuse knowledge patterns learning libraries 
related design patterns approach software reuse 
krueger introduces taxonomy characterize di erent reuse approaches software component reuse software schemas application generators transformation systems software architectures 
design patterns related software schemas reusable software architectures 
software schemas emphasize reusing algorithms data structures 
abstractions represented formally instantiated automatically 
paris system representative technology 
design patterns higher level schemas focus design structures level collaborating classes algorithmic level 
addition design patterns formal descriptions instantiated directly 
prefer view design patterns reusable software architectures 
examples krueger lists category blackboard architectures expert systems adaptable database subsystems coarse grained architectures 
design patterns ner grained characterized reusable micro architectures 
research patterns software engineering community geared building knowledge assistants automating application patterns synthesis write programs analysis debugging example 
major di erence knowledge design patterns encode higherlevel expertise 
tended focus patterns enumeration selection expressed directly reusable components existing object oriented languages 
believe characterizing cataloging higher level patterns designers informally immediate bene teaching communicating designs 
common approach reusing object oriented software architectures object oriented frameworks 
framework codi ed architecture problem domain adapted solve speci problems 
framework possible reuse architecture partial concrete implementation 
contrast frameworks design patterns allow reuse micro architectures concrete implementation 
design patterns help de ne develop frameworks 
mature frameworks usually reuse design patterns 
important distinction frameworks design patterns frameworks implemented programming language 
patterns ways programming language 
sense frameworks concrete design patterns 
design patterns related idioms introduced coplien 
idioms concrete design solutions context 
coplien focuses idioms programs expressive 
contrast design patterns higher level idioms 
patterns try design programming techniques 
design patterns usually independent implementation language 
interest object oriented community pattern languages architecture buildings communities advocated christopher alexander timeless way building 
alexander patterns consist parts context describes pattern applicable 
problem system con icting forces pattern resolves context 
con guration describes physical relationships solve problem 
design patterns alexander patterns share notion context problem con guration patterns currently form complete system patterns strictly de ne pattern language 
may object oriented design young technology may experience constitutes design extract design patterns cover phases design process 
may simply problems encountered software design di erent architecture amenable solution pattern languages 
johnson advocated pattern languages describe object oriented frameworks 
johnson uses pattern language explain extend customize hotdraw drawing editor framework 
patterns design patterns descriptions reuse existing components frameworks rules generating new designs 
coad object oriented patterns motivated alexander closely related 
patterns broadcast observer patterns di erent 
general coad patterns closely related analysis design 
design patterns wrapper generated naturally analysis analyst knows patterns thinks terms 
coad patterns naturally arise simple attempt model problem 
fact hard see large model avoid patterns state collection explains aggregation behavior collection describes distribute responsibility objects aggregate 
patterns catalog typical mature object oriented design departed original analysis model attempt system reusable objects 
practice types patterns probably useful 
design patterns revolutionized way think design teach object oriented systems 
applicable stages design process initial design reuse refactoring 
new level abstraction system design 
new levels abstraction ord opportunities increased automation 
interactive tools take advantage design patterns 
tools lets user explore space objects running program watch interaction 
observation user may discover existing entirely new patterns tool lets user record catalog observations 
user may gain better understanding application libraries design general 
design patterns may profound impact object oriented systems designed discussed 
common patterns permit certain aspects system varied independently 
leads thinking design terms aspect design variable 
answers question lead certain applicable design patterns application leads subsequently modi cation design 
refer design activity variation oriented design discuss fully catalog patterns 
caveats order 
design patterns applied indiscriminately 
typically achieve exibility additional levels indirection complicate design 
design pattern applied exibility ords needed 
consequences described pattern help determine 
tempted brand new programming trick new design pattern 
true design pattern non trivial application 
hope design patterns described companion catalog provide object oriented community common design terminology repertoire reusable designs 
hope catalog motivate describe systems terms design patterns develop design patterns reuse 
authors wish doug lea kent beck detailed comments discussions bruce anderson participants architecture handbook workshops oopsla 

adelson soloway role domain experience software design 
ieee transactions software engineering 

christopher alexander 
timeless way building 
oxford university press new york 

association computing machinery 
addendum proceedings object oriented programming systems languages applications conference phoenix az october 

association computing machinery 
addendum proceedings object oriented programming systems languages applications conference vancouver british columbia october 

kent beck ward cunningham 
laboratory teaching object oriented thinking 
object oriented programming systems languages applications conference proceedings pages new orleans la october 

peter coad 
object oriented patterns 
communications acm september 

james coplien 
advanced programming styles idioms 
addison wesley reading 

ward cunningham kent beck 
constructing abstractions object oriented applications 
technical report cr computer research laboratory tektronix 

bill curtis 
cognitive issues reusing software artifacts 
ted alan perlis editors software reusability volume ii pages 
addison wesley 

thomas erich gamma 
object technology nancial engineering domain 
object oriented programming systems languages applications conference proceedings pages vancouver british columbia october 

erich gamma 
software entwicklung am beispiel von design 
springer verlag berlin 

erich gamma richard helm ralph johnson john vlissides 
catalog object oriented design patterns 
technical report preparation ibm research division 

mehdi frank young 
software design reusable algorithm abstraction 
proc 
nd ieee bcs conf 
software engineering pages 

richard helm tien huynh catherine lassez kim marriott 
linear constraint technology user interfaces 
graphics interface pages vancouver british columbia 

richard helm tien huynh kim marriott john vlissides 
object oriented architecture constraint graphical editing 
proceedings third eurographics workshop object oriented graphics pages switzerland october 
available ibm research division technical report rc 

ralph johnson 
documenting frameworks patterns 
object oriented programming systems languages applications conference proceedings pages vancouver bc october 

ralph johnson carl mcconnell michael lake 
rtl system framework code optimization 
robert giegerich susan graham editors code generation concepts tools techniques 
proceedings international workshop code generation pages dagstuhl germany 
springer verlag 

katz richter 

paris system reusing partially interpreted schemas 
proc 
ninth international conference software engineering 

glenn krasner stephen pope 
cookbook model view controller user interface paradigm smalltalk 
journal object oriented programming august september 

charles krueger 
software reuse 
acm computing surveys june 

mark linton 
encapsulating library 
proceedings usenix conference pages portland august 

mark linton john vlissides paul calder 
composing user interfaces interviews 
computer february 

william opdyke ralph johnson 
refactoring aid designing application frameworks evolving object oriented systems 
conference proceedings pages college ny september 

charles rich richard waters 
formalizing reusable software components programmer apprentice 
ted alan perlis editors software reusability volume ii pages 
addison wesley 

james rumbaugh michael blaha william premerlani frederick eddy william 
object oriented modeling design 
prentice hall englewood cli new jersey 

elliot soloway kate ehrlich 
empirical studies programming knowledge 
ieee transactions software engineering september 

james spohrer elliot soloway 
novice mistakes folk correct 
communications acm july 

parcplace systems 
parcplace systems smalltalk release users guide 
mountain view california 

david ungar randall smith 
self power simplicity 
object oriented programming systems languages applications pages orlando florida october 

john vlissides mark linton 
framework building domain speci graphical editors 
acm transactions information systems july 

erich gamma rudolf marty 
object oriented application framework 
object oriented programming systems languages applications conference proceedings pages san diego ca september 

rebecca wirfs brock ralph johnson 
survey current research object oriented design 
communications acm 
catalog overview summarizes patterns current catalog 
factory provides interface creating generic product objects 
removes dependencies concrete product classes clients create product objects 
adapter protocol class conform protocol 
bridge separates abstraction implementation 
abstraction may vary implementations transparently dynamically 
builder provides generic interface incrementally constructing aggregate objects 
builder hides details objects aggregate created represented composed 
command es request service 
decouples creator request service executor service 
composite treats multiple recursively composed objects single object 
chain responsibility de nes hierarchy objects typically arranged speci general having responsibility handling request 
factory method lets base classes create instances subclass dependent objects 
de nes objects shared 
support object abstraction nest granularity 
glue de nes single point access objects subsystem 
provides higher level encapsulation objects subsystem 
interpreter de nes grammar syntax tree interpreter simple languages 
iterator es traversal algorithms object structures 
mediator decouples manages collaboration objects 
memento encapsulates snapshot internal state object restore object original state 
observer enforces synchronization coordination consistency constraints objects 
prototype creates new objects cloning prototypical instance 
prototypes permit clients install con gure dynamically instances particular classes need instantiate 
proxy acts convenient surrogate placeholder object 
proxies restrict enhance alter object properties 
solitaire de nes kind object provides access unique known services variables 
state lets object change behavior internal state changes ectively changing class 
strategy es algorithm behavior 
template method implements algorithm deferring speci steps subclass methods 
walker operations object structures class operations changed independently classes de ning structure 
wrapper attaches additional services properties behavior objects 
wrappers nested recursively attach multiple properties objects 
factory object creational intent factory provides interface creating generic product objects 
removes dependencies concrete product classes clients create product objects 
motivation consider user interface toolkit supports multiple standard look feels say motif open look provides di erent scroll bars 
undesirable hard code dependencies standard application choice look feel scroll bar may deferred run time 
specifying class scroll bar limits exibility reusability forcing commitment particular class particular protocol 
factory avoids commitment 
base class declares services creating scroll bars controls 
controls motif open look derived common classes 
look feel concrete subclass de nes services create appropriate control 
example operation instantiate return motif scroll bar corresponding operation returns open look scroll bar 
clients access speci kit interface declared class access controls created kit generic interface 
window scrollbar applicability classes product objects variable dependencies classes removed client application 
variations creation composition representation aggregate objects subsystems removed client application 
di erences con guration obtained di erent concrete factories 
clients explicitly create con gure aggregate subsystem defer responsibility class 
clients call method returns object providing access aggregate subsystem 
participants declares generic interface operations create generic product objects 
de nes operations create speci product objects 
declares generic interface product objects 
speci de nes product object created corresponding concrete factory 
product classes conform generic product interface 
collaborations usually single instance class created run time 
concrete factory creates product objects having particular implementation 
di erent product objects clients con gured di erent concrete factory 
defers creation product objects subclasses 
diagram consequences factory provides focus development changing controlling types objects created clients 
factory es responsibility process creating product objects isolates clients implementation classes 
generic interfaces visible clients 
implementation class names appear client code 
clients de ned implemented solely terms protocols classes 
factories encode class names operation signatures di cult extend new kinds product objects 
require 
factories composed subordinate factory objects 
responsibility creating objects delegated sub factories 
composition factories provides simple way extend kinds objects factory responsible creating 
examples interviews uses kit su denote factory classes 
de nes factories generating look feel speci user interface objects 
interviews includes generates di erent composition objects depending layout desired 
employs factory pattern achieve portability di erent window systems windows example 
base class de nes interface creating objects representing window system resources example color 
concrete subclasses implement speci window system 
run time creates instance concrete subclass creates system resource objects 
implementation implementation possible smalltalk 
classes rst class objects necessary distinct subclasses create variations products 
possible store classes create products variables inside concrete factory 
classes create new instances behalf concrete factory 
technique permits variation product objects ner levels granularity distinct concrete factories 
classes kept variables need changed 
see factory method factories implemented factory methods 
strategy object behavioral intent strategy es algorithm behavior allowing algorithm behavior varied independently clients 
motivation algorithms breaking text stream lines 
impossible hard wire algorithms classes require 
di erent algorithms appropriate di erent times 
way address problem de ning separate classes encapsulate di erent algorithms 
algorithm ed way called strategy 
interviews approach 
suppose composition class responsible maintaining updating line breaks text displayed text viewer 
strategies implemented class composition 
implemented separately subclasses class 
subclasses implement di erent strategies follows implements simple strategy determines line breaks time 
implements nding line breaks 
strategy tries optimize line breaks globally paragraph time 
implements strategy text breaking collection icons rows 
selects breaks items 
composition maintains object 
composition required nd line breaks forwards responsibility current object 
client composition speci es installing corresponding composition see diagram 
applicability algorithm behavior selectable replaceable run time exist variations implementation algorithm re ecting di erent space time tradeo example 
strategy related classes di er behavior 
strategies provide way con gure single class behaviors 
participants strategy es encapsulates algorithm behavior 
maintains strategy object 
maintains state manipulated strategy 
con gured passing appropriate strategy object 
collaborations strategy manipulates 
normally passes argument strategy methods 
allows strategy call back required 
forwards requests clients strategy 
usually clients pass strategy objects 
clients interact 
family strategy classes choose 
diagram strategy context strategies compose consequences strategies de ne family policies reuse 
separating strategy context increases reusability strategy may vary independently strategy context 
variations algorithm implemented inheritance class subclasses implement di erent behaviors 
hard wires implementation speci class possible change behaviors dynamically 
results related classes di er behavior 
better break variations behavior classes 
strategy pattern increases modularity localizing complex behavior 
typical alternative scatter conditional statements code select behavior performed 
implementation interface strategy common functionality strategies factored class 
strategies avoid maintaining state invocations repeatedly multiple contexts 
examples rtl system compiler code optimization strategies de ne di erent register allocation schemes di erent instruction set scheduling policies 
gives exibility targeting optimizer di erent machine architectures 
calculation engine framework computes prices di erent nancial instruments 
key abstractions instrument 
di erent instruments implemented subclasses instrument 
calculates discount factors value cash ows 
classes delegate behavior strategy objects 
framework provides family strategy classes de ne algorithms generate cash ows value swaps calculate discount factors 
new calculation engines created parameterizing instrument appropriate strategy objects 
approach supports mixing matching existing strategy implementations permitting de nition new strategy objects 
see walker implements algorithms recursive object structures 
walkers considered compound strategies 
wrapper compound structural intent attaches additional services properties behavior objects 
wrappers nested recursively attach multiple properties objects 
motivation desirable attach properties individual objects classes 
graphical user interface toolkit example properties borders services scrolling freely userinterface component 
way properties components inheritance 
inheriting border base class give instances derived classes border 
exible choice border statically 
exible client decorate component border 
achieved enclosing component object adds border 
enclosing object transparent clients component called wrapper 
transparency key nesting wrappers recursively construct complex user interface components 
forwards requests enclosed user interface component 
wrapper may perform additional actions forwarding request drawing border user interface component 
typical properties services provided user interface wrappers decorations borders shadows scroll bars services scrolling zooming 
diagram illustrates composition scroll wrapper produce bordered scrollable 
applicability properties behaviors individual objects dynamically transparently 
need extend classes inheritance hierarchy 
modifying base class instances enclosed wrapper adds additional behavior properties 
wrappers provide alternative extending base class requiring modi cation 
particular concern base class comes class library modi ed 
participants component object additional properties behaviors attached 
wrapper encapsulates enhances component 
de nes interface conforms component 
wrapper maintains component 
collaborations wrapper forwards requests component 
may optionally perform additional operations forwarding request 
diagram draw consequences wrappers add properties exible inheritance 
wrappers properties attached detached run time simply changing wrapper 
inheritance require creating new class property composition example 
name space classes unnecessarily avoided 
providing di erent wrapper classes speci component class allows mixing matching behaviors properties 
examples object oriented user interface toolkits wrappers add graphical widgets 
examples include interviews parcplace smalltalk class library 
exotic applications wrappers interviews parcplace smalltalk 
prints debugging information forwards request enclosed object 
trace information analyze debug layout behavior objects complex object composition 
enable disable user interactions enclosed object 
implementation implementation set wrapper classes simpli ed base class forwards requests component 
derived classes override operations want 
base class ensures requests passed automatically component 
see adapter wrapper di erent adapter wrapper changes object properties interface adapter give object completely new interface 
composite wrapper considered degenerate composite component 
adds additional services object aggregation 
article processed lat macro package llncs style 
