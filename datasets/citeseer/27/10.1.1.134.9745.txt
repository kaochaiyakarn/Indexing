answer set planning vladimir lifschitz university texas austin tx usa vl cs utexas edu answer set programming solutions problem represented answer sets answer substitutions produced response query conventional logic programming 
prolog answer set programming uses software systems capable computing answer sets 
applications idea planning 
years declarative semantics negation failure attracted attention researchers 
take line program program logic programming system expected answer query explain referring query evaluation procedures declarative terms 
existing theories negation failure answers question way 
say instance logically follows completion program true founded model belongs answer set :10.1.1.49.9332:10.1.1.121.6788
logic programs theories negation failure describe part set ground queries definitely program 
may gray area appropriate answer 
happens instance program consisting rules completion entail entail negation 
truth value assigned founded model true false undefined 
furthermore answer sets 
fpg suggests viewed query 
second answer set fqg suggests incorrect 
situation query similar 
gray area program 
accordingly evaluation queries sldnf resolution terminate 
think programs large gray areas pretty useless 
programs play important part proponents answer set programming represent solutions problem answer sets answer substitutions produced response query conventional logic programming :10.1.1.116.2895
prolog answer set programming requires software system capable computing answer sets 
systems demonstrated workshop logic ai held june washington dc smodels dlv creators keep learning experience accumulated users performance systems keeps improving new release 
examples answer set programming section 
potentially important application programming style described 
answer set programming planning method main subject 
answer sets review definition answer set 
consider set propositional symbols called atoms 
literal expression form atom 
call symbol classical negation distinguish symbol negation failure rule element expression form literal 
rule ordered pair head body head body finite sets rule elements 
head fl lk lk body fll lm lm write lk lk ll ll lm lm ln rule constraint head 
program set rules 
notion answer set defined programs contain negation failure rule program 
pi program consistent set literals say closed pi rule pi head body say answer set pi minimal sets closed pi relative set inclusion 
instance program answer sets fp rg fqg 
add constraint get program answer set fp rg 
example illustrates general property constraints adding constraint program affects collection answer sets eliminating answer sets violate constraint 
true programs negation failure 
extend definition answer set programs negation failure take program pi consistent set literals 
reduct pi pi relative set rules lk ll lm rules pi contains literals lk ll contain lm ln 
pi program negation failure 
say answer set pi answer set pi instance reduct relative fpg consists rule set fpg answer set reduct answer set 
reduct relative fp qg empty set 
set fp qg answer set reduct answer set 
programming answer sets example show answer set programming find hamiltonian cycles finite directed graph turn program answer sets correspond hamiltonian cycles 
program reproduced minor changes 
vertices set atoms program consists expressions edges hu vi expressions reachable vertices group rules edges hu vi 
answer sets part program correspondence subsets edges answer set corresponds subset vi xg 
add constraints eliminate subsets hamiltonian cycles 
done steps 
constraints edges hu vi hu wi constraints configurations blocks edges hu wi hv wi added 
constraints prohibit edges common endpoint 
remains ensure starting edges visit vertices come back 
define reachable reachable reachable add constraints reachable second example favorite toy world ai researchers blocks world 
blocks table top exactly block 
block block immediately top 
shows possible configurations blocks 
number possible configurations 
find possible configurations 
answer sets program correspond possible configurations set blocks 
range block variables consists names blocks range location variables includes names blocks symbol table 
supported table supported supported supported systems dlv smodels briefly describe possibilities systems mentioned 
system dlv computes answer sets finite programs negation failure heads rules rule program 
instance input file return answer sets program 
input file return answer sets program 
schematic rules variables specify sets rules obtained instantiation 
variables assumed range object constants program function symbols allowed current version built predicates express restrictions values variables 
instance program turned input dlv follows edge 
reachable 
reachable reachable 
reachable int 
appended description graph form definition edge 
built predicate int expresses membership initial segment nonnegative integers length segment specified command line dlv invoked 
input language system smodels expressive program supposed nondisjunctive rule required 
current version smodels support classical negation purposes unavailability disjunctive rules essential limitation 
disjunctive rule form replaced pair rules similar see 
furthermore classical negation avoided negative literal replaced new atom provided constraint added program 
tricks programs turned programs containing cases adding constraints necessary 
smodels initial state goal planning problem blocks world dlv find hamiltonian cycles configurations blocks 
smodels allows user specify modified programs concise way introducing new atoms explicitly 
done planning program discussed section 
planning planning problem look sequence actions leads initial state goal state turning configuration blocks planning problem 
example illustrate ideas answer set planning 
specify planning problem completely need say actions allowed plan 
block clear top assume placed top tower blocks table 
moving block located middle tower top prohibited 
think moving performed robot grasps blocks 
blocks world interesting assume robot grippers move blocks independently 
instance initial state shown blocks moved concurrently 
block moved clear moving blocks concurrently impossible 
require better synchronization grippers robot supposed 
assume robot unable move moved 
restrictions planning problem solved steps 
place blocks table 

place block block block block 
place block block block block 
research planning components representation design declarative languages specifying planning problems search design planning algorithms 
important class planning algorithms idea reducing planning problem problem finding satisfying tation set propositional formulas 
known satisfiability planning 
latest satisfiability planning system created inventors method available www research att com kautz blackbox answer set planning differs satisfiability planning uses logic programming rules propositional formulas 
important advantage answer set planning representation properties actions easier logic programs classical logic view nonmonotonic character negation failure idea answer set planning due subrahmanian zaniolo results computational experiments smodels compute answer sets reported 
logic programming representation blocks world follows ideas 
key element answer set planning representation dynamic domain blocks world form history program program answer sets represent possible histories evolutions system fixed time interval 
section show write program blocks world 
answer sets program represent possible evolutions blocks world time interval fixed positive integer history blocks world characterized truth values atoms kinds block location time move block moved location times 
ranges blocks ranges locations section time variable ranges time instants atoms move introduced program available find plan length solves planning problem establish plan way 
history program extended constraints representing initial state goal state problem 
example constraints table table answer sets extended program correspond plans length lead initial state goal state 
planner invoke system computing answer sets find answer set extended program return list atoms represent actions case blocks world atoms move 
find plan consisting smallest possible number steps planner invoke system computing answer sets times different values binary search desired 
similar process satisfiability planning 
history program blocks world actions blocks world domain deterministic history completely defined starting point truth values atoms actions executed truth values move 
construction history program allowing atoms arbitrary values move move rules encode know effects moving blocks characterizing truth values atoms 
rules expressing know executability actions possible configurations blocks 
main rule tells moving block location causes move needs said configuration blocks time 
things missing 
need say blocks moved remain 
words need solve frame problem blocks world 
done postulating idea solution frame problem goes back 
second need ensure block moved new location disappears old 
elegant way mention moving blocks 
rule similar second line time argument rule constraint history program includes constraints expressing assumptions executability move stated section 
block moved clear move target moving move move robot grippers move move move hb li hb hb li hb hb hb history program includes constraints possible configurations blocks applied time instant supported table supported supported supported need include counterpart constraints included stronger rule 
history program solve planning problems blocks world described previous section information performance answer set solvers planning problems blocks world www cs utexas edu users experiments experiments html expressiveness formalism representing properties actions logic programming remarkably expressive 
examples handles relatively complex cases expressive classical strips language 
conditional effects 
toggling switch light room way light toggle light light toggle light implicit effects 
walk place action indirectly affects locations objects pockets 
action changes location running riding bus driving car implicit effect 
describing implicit effects actions known ramification problem 
logic programming solve ramification problem writing rules mention actions pocket implicit preconditions 
rules history program specify cases moving blocks impossible block moved clear target block moved blocks moved 
possible initial state shown place block top block 
violate explicitly stated preconditions 
answer block initially top block moved time 
fact consequence constraint blocks located top block 
expressiveness logic programming language describing actions illustrated fact definite action description action language translated logic programming 
answer sets 
notion answer set mentioned mathematical concepts give declarative meaning negation failure completion founded model 
concepts serve basis logic programming style similar answer set programming 
founded model classifies ground queries groups true false undefined 
useful specification query answering systems similar prolog better termination properties xsb www cs sunysb edu xsb page html 
program query system expected terminate return answer undefined 
information program provided founded model adequate similar answer set programming 
allow instance distinguish programs founded model 
answer set approach negation failure recognizes big difference programs answer sets 
completion semantics situation different 
definition completion applicable disjunctive programs programs kinds negation 
discussed section severe limitations 
particular classical negation eliminated cost adding new atoms constraints 
completion counterpart defined programs classical negation literal completion consider finite nondisjunctive program pi classical negation 
simplicity assume pi contain constraints 
basic facts known relationship answer sets pi models completion pi see 
identify interpretation sense classical logic set atoms true interpretation ffl answer set pi model completion pi ffl pi tight conversely model completion pi answer set pi instance program tight answer sets models completion program tight completion inconsistent 
follows answer sets tight program computed finding models completion 
essentially see operates find answer sets logic program 
forms literal completion program pi submits result propositional solver 
find answer sets pi pi tight know way model completion pi answer set 
programs completion programming differs answer set programming uses different computational mechanism computing answer sets 
hand completion program model answer set model usually unwanted reflect intended meaning program 
case examples answer set programming 
generally completion result eliminating disjunctive rules classical negation program models correspond hamiltonian paths 
completion models correspond valid configurations blocks 
completion history program section models correspond possible evolutions blocks world 
sense completion programming idea 
interesting examples small modification part program involves supported help get rid unwanted models completion 
case history program sufficient replace rules table resulting program tight model completion answer set norman mccain hudson turner personal communication 
modification may helpful planning blocks world 
report outcome enjoyable discussions erdem michael gelfond nicola leone victor marek norman mccain ilkka niemel przymusinski truszczy nski hudson turner 
partially supported national science foundation iis 
notes 
answer set programming known stable model programming 
term stable model place answer set preliminary publication answer set semantics :10.1.1.24.6050
old terminology stems view rule logic programming merely clause sense classical logic positive literals designated head 
talk models logic program sense classical logic semantics negation failure defined specifying additional condition models stability 
instance program view simply disjunction written logic programming notation 
usual truth table disjunction shows formula models fpg fqg fp qg 
model stable 
view extend programs kinds negation defined :10.1.1.49.9332:10.1.1.49.9332
better think inference rules clauses classical logic counterpart logic programming rules 
rule negation failure similar default sense combines inference rule list justifications 
analogy precise relationship answer sets programs extensions default theories :10.1.1.49.9332

see www tcs hut fi software smodels www dbai tuwien ac proj dlv www cs engr edu lpnmr html www cs utexas edu users mccain cc 
authors call second kind negation strong explicit 
natural think negation taken classical logic connection relationship logic programs default theories mentioned note 
generally default formula classical logic 
require literal limit syntactic form parts default prerequisite justifications similar way arrive class defaults corresponding nondisjunctive logic programs 

expositions answer set semantics allow answer sets inconsistent different papers treat case different ways 
best eliminate inconsistent answer sets altogether 

hand smodels permits function symbols schematic rules convenient 
system permits function symbols 
problem function symbols answer set programming set ground atoms infinite 
user system computing answer sets careful provide input infinite answer set set returned output 

generally planning problem may involve set initial conditions specific initial state set goal conditions specific goal state 
sequence actions may looking strategy built actions conditional operators loops 

fact emergence formal nonmonotonic reasoning years ago motivated large degree need solve knowledge representation problem related properties actions frame problem 
history attempts solve frame problem relation nonmonotonic logics logic programming described 

difference constraint similar difference ramification constraints qualification constraints sense :10.1.1.51.3134

extended program described section part consisting disjunctive rules constraints equivalently replaced initial conditions represented facts table importantly program extended constraints limit set executable sequences actions changing class solvable planning programs 
way domain dependent control information conveyed answer set solver may help find solution faster 
instance tell solver block blocks final positions block moved adding constraint move impossible 

literal completion defined language causal theories extended nondisjunctive logic programs 
introduce new atoms 
models literal completion program similar complete answer sets contain element complementary pair literals 

say pi tight exists function atoms ordinals rule am am pi am condition impose restrictions am 
programs called positive order consistent 
keith clark 
negation failure 
gallaire jack minker editors logic data bases pages 
plenum press new york 
yannis dimopoulos bernhard nebel koehler 
encoding planning problems non monotonic logic programs 
proc 
european conf 
planning pages 
erdem vladimir lifschitz 
transformations logic programs related causality planning 
logic programming nonmonotonic reasoning proc 
fifth int conf 
appear 
fran cois fages 
consistency clark completion existence stable models 
journal methods logic computer science 
richard fikes nils nilsson 
strips new approach application theorem proving problem solving 
artificial intelligence 
michael gelfond vladimir lifschitz :10.1.1.24.6050
stable model semantics logic programming 
robert kowalski kenneth bowen editors logic programming proc 
fifth int conf 
symp pages 
michael gelfond vladimir lifschitz :10.1.1.49.9332
classical negation logic programs disjunctive databases 
new generation computing 
enrico giunchiglia vladimir lifschitz 
action language causal explanation preliminary report 
proc 
aaai pages 
henry kautz bart selman 
planning satisfiability 
proc 
ecai pages 
vladimir lifschitz 
action languages answer sets planning 
logic programming paradigm year perspective pages 
springer verlag 
vladimir lifschitz hudson turner 
representing transition systems logic programs 
logic programming non monotonic reasoning proc 
fifth int conf 
appear 
fangzhen lin raymond reiter :10.1.1.51.3134
state constraints revisited 
journal logic computation 
victor marek truszczy nski 
stable semantics logic programs default theories 
proc 
north american conf 
logic programming pages 
victor marek truszczy nski 
stable models alternative logic programming paradigm 
logic programming paradigm year perspective pages 
springer verlag 
norman mccain hudson turner 
causal theories action change 
proc 
aaai pages 
ilkka niemel logic programs stable model semantics constraint programming paradigm 
annals mathematics artificial intelligence 
raymond reiter 
logic default reasoning 
artificial intelligence 
murray shanahan 
solving frame problem mathematical investigation common sense law inertia 
mit press 
timo soininen ilkka niemel developing declarative rule language applications product configuration 
gopal gupta editor proc 
int workshop practical aspects declarative languages lecture notes computer science pages 
springer verlag 
subrahmanian carlo zaniolo 
relating stable models ai planning domains 
proc 
iclp 
hudson turner 
representing actions logic programs default theories situation calculus approach 
journal logic programming 
allen van gelder kenneth ross john schlipf :10.1.1.121.6788
founded semantics general logic programs 
journal acm pages 
