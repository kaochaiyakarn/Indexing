mapping features models template approach superimposed variants krzysztof czarnecki micha university waterloo canada 
feature model represent commonalities variabilities concise taxonomic form features feature model merely symbols 
mapping features models behavioral data specifications gives semantics 
propose general template approach mapping feature models concise representations variability different kinds models 
show approach applied uml activity class models describe prototype implementation 
feature modeling important method notation elicit represent common variable features systems product line 
level abstraction including requirements architecture design components platforms kind artifacts code models documentation stages product line engineering 
early stage feature modeling enables product line scoping deciding features supported product line 
design points ranges variation captured feature models need mapped common product line architecture 
furthermore feature models allow scope derive domain specific languages specify product line members generative software development 
feature models useful product development basis estimating development cost effort automated manual product derivation 
feature model represent commonalities variabilities concise taxonomic form features feature model merely symbols 
mapping features models behavioral data specifications gives semantics 
propose general approach mapping feature models concise representations variability different kinds models 
contrast variability approaches separate model fragments corresponding different features composed approach presents modeler model representing superimposition variants elements related corresponding features annotations 
argue approach particularly desirable requirements level directly shows impact selecting feature resulting model 
proposed approach general works model metamodel gl ck lowry eds lncs pp 

springer verlag berlin heidelberg mapping features models expressed meta object facility mof comparable modeling formalism easily incorporated existing model editor 
give details approach mapping feature models uml activity diagrams indicate applied kinds models 
describe prototype implementation approach 
sample models taken large model commerce platform test approach 
remainder organized follows 
section reviews background concepts related feature modeling 
describe idea sections 
section presents details template instantiation algorithm 
describe implementation prototype section 
discuss related section conclude section 
background feature modeling feature modeling originally proposed part feature oriented domain analysis method applied range business technical domains see list applications 
cardinality feature modeling extends original feature modeling feature group cardinalities feature attributes feature diagram user defined annotations 
feature system property relevant stakeholder capture commonalities discriminate systems family 
features organized feature diagrams 
feature diagram tree root representing concept software system descendant nodes features 
feature model consists feature diagrams plus additional information feature descriptions global constraints binding times priorities stakeholders presents small excerpt feature model describing family online business consumer solutions entire model features 
model contains feature diagram ecommerce root feature 
root feature solitary subfeatures 
indicates feature cardinality 
feature cardinality interval denoting feature subfeatures cloned child parent specifying concrete system 
cardinality indicates feature exist 
hand symbol indicates optional feature cardinality 
available checkout types registered guest group 
group symbol indicates group cardinality group size 
available checkout types non empty subset checkout types 
grouped features indicated symbol 
specify additional constraints requires excludes 
example feature requires system implement registration wish list stored customer account 
check czarnecki type registered requires feature registration selected 
general additional constraints cardinality feature models require tree oriented navigation query facilities may involve logic arithmetic string set operators feature attributes feature sets 
constraints adequately expressed xpath 
online feature model feature configuration fig 

sample online feature model feature configuration semantically feature model describes set possible valid configurations 
presents sample configuration online feature model 
configuration specifies concrete system 
example checkout registered customers available checkout type catalog subdivided categories product classified multiple categories catalog contains electronic goods basic idea superimposed variants mapping features models overview approach shown 
model family represented feature model model template 
feature model defines hierarchy features constraints possible configurations 
model template contains union model elements valid template instances 
set valid template instances corresponds extent model family 
model template model expressed target notation template instances 
example want represent family uml activity models model template template instances expressed uml activity modeling notation 
elements model template may annotated presence conditions pcs meta expressions mes 
annotations defined terms features feature attributes feature model evaluated respect feature configuration 
pc attached model element indicates element removed template instance 
mes compute attributes model elements name element 
instance model family specified creating feature configuration feature model 
feature configuration model template instantiated automatically 
instantiation process model transformation input output expressed target notation 
involves evaluating pcs mes respect feature configuration removing model elements pcs evaluate false possibly additional processing simplification section 
particularly useful form pcs boolean formulas set variables variable corresponds feature feature model 
feature configuration value boolean variable true corresponding feature included feature configuration 
feature model manual configuration process feature configuration refers features annotations fig 

overview approach model template expressed target notation annotated presence conditions meta expressions automatic template instantiation evaluation presence conditions meta expressions element removal post processing template instance czarnecki presence conditions true registration create wish list send wish list choose activity 
order product template register create wish list choose activity 
order product register instance fig 

sample template activity diagram instance example consider uml activity diagram models top level activity 
diagram template elements relevant features registration annotated pcs 
annotations rendered coloring scheme different pc assigned different color 
simple example pc consists single variable corresponding single feature 
shows template instance created feature configuration 
pcs corresponding feature included configuration evaluated false annotated elements removed template 
important note pcs interpreted locally respect containment hierarchies defined metamodel target notation 
words pc element controls presence element respect container container removed contained elements removed regardless pcs 
reason annotate guards flows contained flows uml metamodel 
complex pcs expressed xpath 
conditions access feature attributes count number feature clones configuration xpath operations long xpath expression evaluates boolean value 
necessary xpath easily extended user defined functions 
mes may compute attributes basic types model elements 
consider computing existing elements 
mes expressed xpath 
exam colors assigned diagram number colors needed limited diagrams usually split diagram fit computer screen 
note colors indexed order annotations readable black white 
mapping features models ple consider activity diagram fragment 
type input pin action set category catalog depending presence categories feature feature configuration 
customer select category go catalog system categories category catalog fig 

example type meta expression presence conditions categories categories presence conditions true multilevel categories categories categories asset product string name products categories category subcategories product float price products string weight categories catalog products fig 

example annotated class diagram shows annotated class diagram 
class category template instance feature categories selected 
feature multilevel implies containment hierarchy category 
implies products classified multiple categories 
implies class asset storing documents technical specifications manuals media 
implies attribute weight product 
realization approach target notation involves steps czarnecki 
decide form pcs mes example boolean formulas xpath expressions 
decide implicit pcs 
model elements explicitly annotated user implicit pcs implicit pcs explained shortly 
decide annotation mechanism rendering options annotations target notation uml annotations realized stereotypes rendering options include labels icons coloring 
decide additional processing 
steps depend target notation 
sections demonstrate details uml activity diagrams target notation 
implicit presence conditions element explicitly assigned pc user implicit pc ipc assumed 
general assuming pc true simple choice adequate practice useful ipc element type provided presence conditions elements syntax semantics target notation 
example uml syntax binary association requires classifier ends 
reasonable choice ipc binary association conjunction pcs classifiers 
way removing classifiers lead removal association 
ipcs reduce necessary annotation effort user 
example ipc associations described association product asset need annotated explicitly 
table shows choice ipcs uml class activity model elements 
ipc element assumed type 
order determine ipc model element look closest matching supertype table take corresponding ipc 
example ipc instances class action true closest matching type table element 
subclasses uml metamodel ipc table 
choice ipcs table reflects cardinality integrity constraints specified uml metamodel 
class models ipc elements relationships true 
case generalization binary relationship ipc reflects fact relationship exist template instance classifiers ends relationship template instance 
ipcs dependencies associations need handle general case ary relationships 
activity models ipc elements control nodes central buffer node call actions true 
control nodes incoming flow simplicity limit intermediate level activity diagrams defined uml superstructure document 
mapping features models table 
implicit presence conditions uml class activity model elements model kind element type implicit presence condition general element true class generalization conjunction pcs general specific classifiers dependency true iff client element pc evaluates true supplier element pc evaluates true association true iff properties classifier pcs evaluating true type activity disjunction pcs outgoing flows disjunction pcs incoming flows true iff exactly incoming flow pc evaluates true outgoing flows pcs evaluate true true iff exactly outgoing flow pc evaluates true incoming flows pcs evaluate true disjunction pcs incoming outgoing flows true iff accumulated pc called operation evaluates true true iff accumulated pc called behavior evaluates true pc stands presence condition explicit implicit 
names typewriter font true refer properties corresponding element 
outgoing flow instance specified metamodel 
central buffer incoming flow outgoing flow 
target call actions 
control nodes intended annotated pcs explicitly ipcs adequate 
true relationships class models want remove relationship template instance elements relationship connects removed 
ipcs call actions fact removal target force removal actions calling 
accumulated pc element true iff pcs parents element evaluate true 
template instantiation simple general template instantiation process involves computing mes removing elements pcs false general process specialized notation additional processing steps allow expressing templates notation compactly 
identified categories additional steps patch application simplification 
patch transformation automatically fixes problem may result removing elements 
defined situations exists unique intuitive solution problem created element removal 
simplification involves removing elements redundant removing elements 
case activity models useful provide automatic flow closure patch removal redundant control nodes simplification explained 
czarnecki presence conditions true availability availability costs costs apply discounts apply discounts fig 

model templates optional actions automatic flow closure motivating example automatic flow closure 
actions optional implement features respectively 
top part presents optional actions modeled automatic flow closure 
bottom part contains fragment expressed natural way automatic flow closure 
ensures removing optional action remaining incoming flow outgoing flow closed 
desired closure prevented user annotating flows removed action 
easy see flow closure number flows needed chain optional actions grows exponentially number actions 
complete template instantiation algorithm summarized follows 
evaluation mes explicit pcs 
evaluation done traversing element containment hierarchy template depth order 
children elements pcs evaluate false visited removed 

removal analysis 
removal analysis involves computing ipcs information required patch application 
ipcs table computed single additional pass computing explicit pcs different choice ipcs require multiple iterations 
furthermore ipcs table necessary analysis automatic flow closure performed separately ipcs computed 
depending choice ipcs patches separation may possible 

element removal patch application 
step elements pcs false removed patches applied 
application patch depends type performed removal 

simplification 
simplification performed 
interesting note removing optional action sequence actions activity model corresponds removing optional statement statement list textual language preprocessor removes statement ifdef endif program 
case flow closure happens naturally need additional processing 
template instantiation activity diagrams mapping features models removal analysis activity diagrams identifies situations flows interrupted removed elements closed 
identification performed removal analysis ipcs computed proceeds follows 
set elements contained activity pcs explicit implicit evaluated false 
partition set regions elements region connected elements different regions connected 
furthermore ar set flows adjacent region said iff 
exactly incoming exactly outgoing adjacent flow ar target source 
flow path connecting target 
types consistent control object flows regions closed elements pcs false removed 
closing region ar means removed target set target region ar empty annotation error flows ar dangling removal region annotation error occur flow region ends 
simplification activity nodes involves removing redundant control nodes having outgoing flow having incoming flow 
sophisticated control flow simplification applied point merging parallel flows actions decision merge nodes 
example template instantiation activity models automatic flow closure consider checkout items template instance 
instance implements features selected feature configuration specified checkout method registered customers feature registered 
features guest selected 
note control nodes template gray indicating annotated ipcs assumed 
result removal analysis patch application shown 
configuration instantiation algorithm removes regions blue green guest checkout magenta pink 
note closed removal 
case blue region adjacent flows red 
note decision node type 
included blue region implicit pc evaluated false 
allow incoming outgoing flow 
reason case incoming outgoing flow way close flows 
czarnecki customer select type enter billing shipping address select shipping method customer enter billing shipping address select shipping method registered type 
quick regular availability system type 
costs guest apply discounts 
fig 

checkout items diagram template system type 
registered apply discounts 
checkout instance region removal enter billing shipping address select shipping method fig 

checkout template instance presence conditions true registered guest customer system registered apply discounts checkout instance simplification final result simplification removed decision node customer type 
merge nodes shown 
examples useful patches class models include generalization chain closure containment chain closure 
counterpart automatic flow closure generalization containment relationships classifiers andc ifa connected connected pcs incoming relationship outgoing relationship true connect 
prototype implementation mapping features models built prototype illustrate approach works practice 
prototype rsm eclipse plug integrates feature modeling plug rational software modeler rsm uml modeling tool ibm 
plug implements template instantiation algorithm section performs automatic coloring templates pc annotations 
implementation handles uml point convenience additional processing available activity models described section 
plug works artifacts uml model template created rsm feature model created contains screen shots variability profiles pc profile pc annotations profile annotations 
pc profile offers forms pc annotations boolean formulas disjunctive normal form dnf general xpath expressions 
disjunct conjunction literals pc dnf represented stereotype boolean formula created selection multiple features automatically menu operation 
created stereotype available rsm annotating template elements 
application multiple stereotypes interpreted disjunction 
general annotations xpath created applying stereotype pc allows user enter desired xpath expression value expression string property 
profile contains stereotypes structured similarly pc applicable elements specific type 
example applied element type namedelement order compute name 
similarly property expression return fully qualified name primitive type uml string class category interface enumeration 
profile automatically generated metamodel notation 
related variability mechanisms commonly models available target notation decision node activity model decide alternative flows representing class variants subclasses rsm plug downloaded gp uwaterloo ca rsm 
stereotype extends element read properties encoding actual boolean formula 
encoding uses fully qualified feature names available literals enumeration type automatically generated rsm feature model 
words stereotype name just documentation may abbreviated feature names 
czarnecki class 
inheritance classical variability mechanism class diagrams adapted activities statecharts 
limitations approaches include lack static configuration case dynamic choice decision node potential combinatorial explosion static inheritance hierarchies complexity increase limited traceability case design patterns 
class approaches annotations expressing variability 
case uml annotations usually provided profile stereotypes optional variant 
approach annotation provide separate representation variability form feature model 
clear notion features user find select variable elements model directly 
furthermore patching simplification proposed approach results simpler templates 
provide full template support means mes 
describes automatic generation variants behavioral models particular statecharts restrictions 
approach modeler creates single model containing variants 
variant automatically created form partial evaluation slicing specified restrictions 
restriction approach differs template approach ways 
involves sophisticated analysis restrictions inputs outputs propagated model automatically 
may result significantly reduced annotation effort effect automatic partial evaluation slicing may hard predict user 
template approach user full control explicit annotations 
difference model restricted semantically correct sense ready executed processing templates need syntactically formed 
restriction approach adequate particularly variant contains initial model restrictions case template simpler unrestricted model 
example alternative flows simply attached activity node model restriction approach require decision node 
additional processing automatic flow closure reduces complexity template model restriction approach optional action need extra decision node 
template easily adapted notation 
different restriction approach semantics needs individually developed notation 
group concern separation approaches ahead hyperspace approach uml realization 
approaches allow composition crosscutting model fragments 
particular uses feature models represent composition space uml model fragments 
mixin composition statecharts falls category particular focus ensuring provably correct composition 
concern separation approaches focus separation 
templates hand best user wants see model fragment correspond mapping features models ing feature embedded context entire model 
example separating blue region corresponding feature component interesting 
fragment reusable best understood context applied 
separation approaches particular interest features realized components composed ways case mature highly flexible architectures 
preferred representing crosscutting concerns meaningfully stated separation logging security 
example fact checkout activity requires authorization expressed security annotation kind join point leaving insertion call actions authorization authentication activities aspect weaver 
modeling tools market support model templates form usually ad hoc manner 
example templates rational xde modeled parameterized collaborations template contain meta code creating arbitrary models template instance collaboration 
obviously variability realized direct model manipulation composition directives xmi manipulation 
feature models previously textual templates structure definition template input 
application model templates knowledge new 
concluding remarks purpose seen different perspectives giving semantics features feature models mapping models feature models provide concise representation variability contained models 
expressing pcs mes terms features provides traceability features realization models 
think approach particularly useful requirements level applied models level architecture implementation models 
usability perspective approach intuitive 
model templates target notation need learn new specialized languages simple feature models existing tools reused 
implicit conditions patching simplification minimize annotation effort decrease visual complexity model templates concise 
coloring easy see contributed selecting feature 
model templates created incrementally simultaneously feature model 
case study observed majority pcs single features 
ability write complex pcs allows avoid polluting feature model features related implementation details template 
example glue element usually requires pc conjunction features 
pc simple features additional feature corresponding glue element need introduced 
czarnecki possible concern annotation simple may require iterations tool support offered filtering model template parts relevant certain features subset systems automatic verification guaranteeing formedness possible template instances 
additional capabilities support element cloning model templates covered 

czarnecki eisenecker generative programming methods tools applications 
addison wesley boston ma 
czarnecki overview generative software development 
proceedings european commission national science foundation strategic research workshop unconventional programming paradigms september mont saint michel france 
www uwaterloo ca pdf 

batory feature models grammars propositional formulas 
technical report tr university texas austin texas 
object management group meta object facility 
www omg org technology documents formal mof htm 

kang cohen hess nowak peterson feature oriented domain analysis feasibility study 
technical report cmu sei tr software engineering institute carnegie mellon university pittsburgh pa 
czarnecki eisenecker staged configuration specialization multi level configuration feature models 
software process improvement practice uwaterloo 
ca pdf 

czarnecki eisenecker formalizing cardinality feature models specialization 
software process improvement practice 
czarnecki feature modeling plug eclipse 
oopsla eclipse technology exchange etx workshop 
available www uwaterloo ca etx pdf 
software available gp uwaterloo ca 

world wide web consortium xml path language xpath 
www org tr xpath 

object management group unified modeling language 
www omg org cgi bin apps doc ptc zip 

activity diagram inheritance 
ed bis business information systems 
th international conference poznan poland proceedings 

lee xue note state modeling inheritance 
sigsoft softw 
eng 
notes 
simons holcombe plug play safely rules behavioural compatibility 
proc 
th iasted int 
conf 
software engineering applications 

lou quel uml profile software product lines 
pfe 
mapping features models 
automatic generation program families model restrictions 
nord ed software product lines third international conference boston ma usa august september 
proceedings 
volume lecture notes computer science heidelberg germany springer verlag 
batory scaling step wise refinement 
proceedings th international conference software engineering icse portland oregon los alamitos ca ieee computer society 
tarr ossher harrison stanley sutton degrees separation multi dimensional separation concerns 
icse proceedings st international conference software engineering los alamitos ca usa ieee computer society press 
hyper uml approach feature software design 
booch clarke gray harrison stein tarr eds th aosd modeling uml workshop 

simons state machines mixins 
journal object technology 
prehofer plug play composition features feature interactions statechart diagrams 
fiw 

straw georg song ghosh france bieman model composition directives 
baar moreira mellor eds uml unified modeling language 
model languages applications 
th international conference lisbon portugal october proceedings 
volume lncs springer 
zhang xml method tool handling variant requirements domain models 
re 

czarnecki unger eisenecker generative programming embedded software industrial experience report 
batory consel taha eds proceedings acm sigplan sigsoft conference generative programming component engineering pittsburgh october 
volume lecture notes computer science heidelberg germany springer verlag 
