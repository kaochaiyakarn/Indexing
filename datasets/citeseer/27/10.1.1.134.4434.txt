simple summaries hashing multiple choices adam kirsch michael mitzenmacher division engineering applied university oxford st cambridge ma kirsch eecs harvard edu multiple choice hashing scheme item stored possible hash 
availability multiple choices allows substantial reduction maximum load buckets 
lookup may require examining locations 
cost undesirable song propose keeping summary allows determine locations appropriate item summary may positives items hash table 
propose alternative simple constructions summaries space summary underlying hash table 
easily analyzable tunable 
multiple choice hashing scheme hash table built approach item hash values 
hd corresponding bucket hash table andthe item placed possibly locations 
schemes lessen maximum load number items bucket giving item choice bucket hash table leads significant improvement balance items 
schemes ensure bucket contains item probability 
reasons multiple choice hashing schemes proposed applications including network routers peer peer applications standard load jobs machines 
context routers song suggested drawback multiple time lookup know possible locations check item 
natural solution problem lookups parallel 
keep lookup time standard single choice hashing scheme generally costs resources pin count router setting 
song provide framework lookup related costs allowing insertions deletions items hash table 
suggest keeping small summary fast memory significantly faster practical store larger hash table efficiently answer queries form hash table 
hd store 
course items hash table may yield false positives summary efficient hash table 
small summary song consists counting 
review construction detail section 
suggest alternative approaches maintaining summaries multiple schemes 
interpolation search standard bloom filters simple variants thereof clever choice underlying hash table 
numerous advantages including space hash table similar smaller space summary better performance insertions deletions 
advantage approaches supported part nsf graduate research fellowship nsf ccr cisco 
supported part nsf ccr cisco 
simple analyze provides analysis basic variation advanced versions required adequate performance analyzed 
believe ability analyze performance important allows informed engineering decisions formal guarantees 
interesting feature multiple choice hashing schemes sense items placed hash function fewer placed second 
show take advantage skew providing dividing hash table space unequally sub tables allows skew tradeoffs allow significant performance improvements corresponding summary 
related great deal multiple choice hashing schemes bloom filters :10.1.1.127.9672
background 
mentioned starting point song approach summarizing locations items hash table uses multiple hash functions 
review detail section influenced significant early broder karlin 
items give construction multilevel hash table consists log log sub tables function geometrically decreasing size 
item placed sub table hash location empty hashing scheme skewed sense 
main result seen adding summary multilevel hash table give thorough description multilevel hash tables section problem constructing summaries multiple choice hash tables closely connected generalization bloom filters called bloomier filters represent functions set :10.1.1.5.7502
bloomier filter problem setting item set associated value items set null value 
goal design data structure correct value item set allowing false positives items set 
query item set may return non null value 
setting values correspond tothe hash function place item table 
static hash tables insertions deletions current results bloomier filters directly applied give inefficient solution 
limited results exist bloomier filters cope changing function values 
lower bounds filters suggest take advantage tics specific problem setting example skew distribution values order guarantee performance 
scheme song comparison purposes review summary scheme introducing approaches basic scheme works follows 
hash table consists buckets item hashed independent fully random hash functions buckets multiplicity case 
summary consists bit counter bucket 
counter tracks number item hashes corresponding bucket static setting hash table built subsequently modified items initially hashed preliminary hash table stored hash buckets 
items hashed table pruned item copy hash bucket smallest counter breaking ties bucket ordering kept copies deleted determining location item table quite easy need compute buckets corresponding item choose corresponding counter minimal breaking bucket ordering 
course looking item hash table chance examined counters nonzero case summary yields false positive item appears hash table table checked lookup procedure 
song appear strive parameters guarantee maximum load probability approach generally 
basic scheme particularly effective 
improve scheme song give heuristics inorder remove collisions hash table 
heuristics appear effective analyzed 
insertions handled readily require relocating previously placed items 
song show expected number relocations insertion constant give high proba bility bounds number relocations required 
deletions significantly challenging framework necessitating additional data structures summary require example copy unpruned hash table item stored corresponding hash buckets smaller variation called shared node fast hash table possibly time see details 
separating hash tables summaries song give list goals hash table summary construc tions achieving maximum load item hash table bucket high probability 
generalized handle fixed constant maximum load 
minimizing space hash table minimizing space summary 
minimizing false positives generated summary items hash table allowing insertions deletions hash table corresponding updates summary 
step suggest key idea summary data structure need counter bucket hash table 
wish separate format summary structure format hash table 
cost separation additional hashing 
withthe approach hashes item access summary hash table 
separating formats summary hash table separate roles functions introduce extra hash functions computation 
hashing computation bottleneck resource applications mind reasonable pay gain particularly storage requirements 
small disadvantage separating summary structure hash table suggest immediately tell hash table bucket empty summary 
handle insertions deletions easily require bit table bucket denote bucket contains item 
strictly speaking table necessary simply check buckets hash table needed practice inefficient add cost analysis summary structures 
additional cost outweighed gain having decided separate summary structure underlying hash table design issue underlying hash table 
argue multilevel hash table broder karlin offers excellent performance small space overhead 
broder karlin multilevel hash table mht multilevel hash table mht representing set elements consists log log sub tables 
td ti ci buckets hold single item 
ti geometrically decreasing size total size linear bounded place item mht simply find smallest hi empty place hi 
course scheme relies assumption ti hi empty 
say crisis occurs assumption fails 
modifying original analysis show reasonable values example crisis polynomially small 
original broder karlin result shows crises effectively dealt certain settings replacing certain hash functions rehashing viable technique setting consider occurrence crisis serious failure need high probability result theoretically justify mht omit formal statement proof reasons space 
note deletions handled simply removing items hash table 
bounds harder come deletions occur related shows multiple choice hashing generally face deletions 
approximate exact calculations specific configuration mht number items easily exactly calculate probability crisis occurs sequential insertion items initially empty mht 
ability calculate numbers important making decisions useful feature approach 
simple approximate calculation expectations 
general hash items sub table size expected number nonempty buckets expected number items placed sub table theta lambda exp 
expected number items left placed subsequent sub tables theta lambda exp 
note inequalities quite tight reasonable values approximate behavior mht assume number items placed sub table exactly follows give little wiggle room near tight inequality 
course may deviate somewhat expectations particularly small heuristic approximations 
number items consideration small markov inequality expected number items hashed sub table nonzero exact calculation performed similarly 
successively calculate distribution ofthe number items passed sub table distribution previous sub table 
requires combinatorial fact items placed randomly buckets distribution ofthe number buckets remain empty calculated 
care required ensure computation efficient memory requirement reasonable procedure implement 
skew multilevel hash tables mentioned strong skew property sense sub table lot items second sub table contains lot rest 
seen experimenting various values 
property cleanly approach give looser approximation 
proceed follows 
suppose insert set items mht 
fori 
si set items placed tables 
ti mi size oft note si number pairwise collisions elements si ti see gamma si delta possible pairwise collisions elements si collisions occurs probability mi 
linearity expectation tells theta si si lambda si mi si mi heuristic approximation si bound expectation difficult show decay doubly exponentially certain 
property show perform log log 
case property tells expect distribution sto skewed 
summary approach interpolation search straightforward approach constructing summary hash item placed table distributed bit string sufficiently large associate string value requiring log log log log bits indicates hash function corre sponding item 
searching item summary done interpolation search requires log log operations average 
insertions deletions trivial simply remove appropriate string 
summary construction failure occurs items yield bit string 
case able record proper value item 
number chosen large event extremely 
course chosen probability false positive quite small 
note items bit string yield failure hash sub table 
convenience weare choosing call collision failure allowing collisions handling deletions problematic probabilities computed easily 
probability failure calculated standard probabilistic techniques just special case birthday paradox 
probabilityof false positive conditioned failure occurring items distinct bit strings concreteness describe specific instances scheme 
choosing allows bits associated value fit bit word bits hash functions suitable implementations 
setting gives failure probability false positive probability conditioned failure occurring 
achieve similar results 
values probability false positive probability conditioned scheme requires theta log bits ensure failures occur asymptotically vanishing probability case false positives occur vanishing probability 
practice implied constant factor nontrivial number bits required significantly larger approaches 
approach requires application amenable interpolation search 
great advantages summary construction discussed notably ability handle insertions easily small false positive probability 
bloom filter mht summaries section propose summaries exploit skew property 
particular theory bloom filters 
consider insertions deferring discussion deletions section 
start initially empty summary mht items sequentially 
summaries require items moved mht high probability correctly identify sub tables storing items bloom filter mht summary seen simple bloomier filter meant allow insertions 
better illustrate point start placing problem general setting suppose set items item integer type range 

filter variant consists cells cell contains single value 
bits hash functions domain universe possible items 
convenience assume cells divided disjoint groups size group hash function 
alternatively structure built hash functions hash entire set cells 
decision affect asymptotics 
partitioned usually easier implement hardware unpartitioned version may give lower false positive probability cell structure initially value :10.1.1.127.9672
item inserted hash hash functions obtain set cells corresponding 
cells value maximum value type item 
cell corresponding inserted item gives overestimate type item cell corresponding item hasvalue item set represented structure 
lookup operation obvious perform lookup item hash hash functions compute minimum resulting counters declare represented summary type 
note lookup operation may give different kinds false positives summary returns positive type element represented set type failures structure returns incorrect type element type errors mind analysis structure follows easily standard analysis bloom filter :10.1.1.127.9672
lemma 
suppose insert set items structure described 
particular item gives false positive jn items type greater probability specific item type causes failure structure summary mht simply insert items structure mht define type item sub table mht containing item 
course type item defined inserting mht causes crisis thatis different sort failure considered separately 
false positive corresponds case summary returns positive type item underlying mht failure corresponds case item underlying mht type queried item 
false positives problematic appear sufficiently infrequently want avoid failures summary general lemma conjunction union bound bound probability type errors jn items type probability type jn ss jn exp kb jn setting lemma demonstrates important tradeoff constructing probability type failure false positive probability depend significantly numbers hash functions filter 
standard analysis fromthe theory bloom filters minimize type failures ln 
integer neighboring integer values optimal 
typically large number hash functions may suitable practice 
far optimal number hash functions minimize false positives ln choosing large number hash functions may false positive high 
general choice number hash functions balance considerations appropriately significant tradeoffs structuring hash table corresponding summary structure 
specifically vary number sub tables sizes hash table asthe size summary number hash functions 
generally hash functions hash table smaller probability crisis point increasing numberof hash functions increases number types increasing storage requirement summary structure 
division space mht affects crisis probability thenumber items type turn affects probability failure 
aside note bit level tricks minimize summary space multiple values 
example cells values range byte easily 
similar techniques saving bits non trivial impact performance 
asymptotically choosing theta log theta log theta log log log bits cell probability failure vanish total theta log log log log bits 
constant factors approach appealing quite small advantage skew 
skew improved construction lemma highlights importance skew factor exponent drastically reduces failure 
alternatively factor seen reducing space required toachieve certain false positive probability non trivial constant factor 
construction failure occur type failure items types greater correspondingly little probability failure technically may wish differentiate false positive probability false positive rate defined distinction unimportant practice 
see explanation 
items 
natural way reduce probability type failure introduce skew specifically making size sub table larger keeping linear total size 
significantly reduce number elements type larger shrinking leads total failure probability probability item causes type failure 
willing give additional space mht usually sensible sub table 
idea constructions experiments 
problem single filter classifying items types lose control tradeoff false positives type errors 
advantage skew suggest multiple bloom filter approach allows control fact uses space expense hashing 
cells take values requiring roughly log bits represent new summary consists multiple bloom filters 
bt 
bloom filter simply determine element mht itis standard classical bloom filter set items mht 
convenient terms separates items type greater equal elements mht small false 
note element gives false positive care 
standard bloom filter designed represent set items type greater equal 
item passes assumed type table mht 
false positive item type leads type failure require extremely small false positive probability filter avoid failure 
continue 
bt corresponding way assumed type item smallest pass passes 
bt skew successive filter smaller previous compromising total failure probability 
skew setting key approach yield suitably size 
total size multiple bloom filters single filter described section provide example section 
separating filters control false positive probability probability type error quite precisely 
separating type way levels small bloom filters replaced items hashes items interpolation search section 
downside approach require significantly hashing applications may bottleneck 
number hashes required bloom filter dramatically reduced techniques related double hashing required sufficiently large filter 
aiming small false positive probabilities immediately clear techniques applied context remains area 
deletions handling deletions substantially difficult handling insertions 
example handling deletions requires significant memory essentially requires separate version hash table records hash locations item 
deletions significant repositioning elements hash table 
address issues suggest alternative ways handle deletions general specific construction natural general approach lazy deletions 
keep bit array bit cell hash table initially 
item deleted bucket simply set corresponding 
looking item treat deleted find bucket corresponding bit 
preset number deletions occurs preset amount reconstruct entire data structure hash table bit array summary scratch items hash table leaving deleted items 
allow items items time simply build data structures able cope items 
obvious disadvantage approach expensive necessary potentially frequently depending insertions occur 
extra space required maintain deleted items reconstruction occurs multiple choice hashing schemes delete item simply removing hash table repositioning elements necessary 
summary reflect deletion 
order handle changes single filter summary modify cell contains counter type counter tracks number items inthe hash table corresponding type hash cell containing counter 
deletion occurs simply decrement appropriate counters 
similar modification works equally forthe construction multiple filters replacing bloom filter counting bloom filter 
keeping counters multiple types expensive terms storage 
tion search summary section appealing deletions handled 
high probability counter values filter summaries extremely small appropriately packing bits counters competitive interpolation approach 
numerical evaluation section constructions summaries items various storage requirements false positive probabilities failure probabilities 
completeness compare results song 
represent represent 
summaries constructions handle insertions leave considerations extra memory required deletions subsequent 
fair scheme requires additional structures handle deletions 
mht summaries preliminary goal buckets item lessthan size hash table terms buckets reasonable goal led underlying 
items sub tables sizes giving crisis probability calculated method 
items sub tables sizes giving crisis probability 
crisis probabilities dominated probabilities corresponding summaries case items multiple filters crisis probability smaller failure probability mht summaries discussed section attempt optimize various parameters 
simply exhibit parameters simultaneously perform respect metrics consider 
note practical exactly compute false positive failure probabilities schemes 
standard probabilistic techniques thesame sort calculations described section possible efficiently compute upper bounds probabilities built calculator purpose 
believe upper fairly tight probabilities small actual probabilities may overestimates configure bloom filter mht summaries follows 
items configure summary cells hash functions 
computing storage requirement cells integral values packed byte 
multiple bloom filter summary filters sizes bits hash functions forthe filter items configure bloom filter summary cells hash functions bits cell values 
configure multiple bloom filter summary filters sizes hash functions filter results calculations table 
column note sum failure crisis probabilities thought bound probability scheme properly 
mentioned previously case items multiple filters failure probability dominates 
seen table interpolation search performs extremely expense fairly large summary 
single filter scheme appears comparable structure items uses space multiple filter scheme allows space gains just slightly complexity 
schemes appear quite scalable items maintain ratio buckets item hash table just slightly superlinear summary space proposed schemes 
scheme song failure probability described location summary may crisis bucket may item 
technically failure multiple bloom filter construction unpartitioned bloom filters number hash functions need divide size filter 
false positive failure crisis scheme buckets space probability probability song sf mbf false positive failure crisis scheme buckets space probability probability song 
sf mbf table hash table size buckets storage requirement bytes false positive probability plus crisis probability schemes 
denotes interpolation search scheme section sf denotes single filter scheme section mbf denotes multiple bloom section 
configure interpolation search summary examples section 
notation song summary denotes information available 
storage requirements summaries include space bit table mentioned section 
bit counters hash functions probability failure small canbe ignored 
numerical results crisis probability scheme including heuristics left table results 
note crisis trials 
experimental validation ideally able directly verify extremely low failure probabilities experiments 
probabilities small impractical simulate construction summaries sufficiently times accurately estimate real failure prob abilities 
attempted validate calculator developed summaries bloom filters give upper bound tests 
fact weak upper bound failure probability large greater example 
simulation tests simulated random hashing fixing hash values item standard bit pseudorandom number generator simulated single filter items table simulations saw errors crises predicted calculations 
experimented variant filter counters hash functions 
calculations filter gave upper bound probability failure just trials failure natural calculations 
large scale experiments needed experiments far validated numer ical results 
shown designing small efficient summaries conjunction multiple schemes feasible improving results 
believe fact summaries analyzed bound performance useful characteristic ease adoption possible additions plan pursue 
results extended easily case buckets hold multiple items plan complete analyses case 
experimentation done test summary structures applications including large scale tests hash functions commonly practice 
detailed analysis deletion workloads determine effect best approach deletions 
azar broder karlin upfal 
balanced allocations 
siam journal computing pp 
bloom 
space time tradeoffs hash coding allowable errors 
communications acm 
broder karlin 
multilevel adaptive hashing 
proceedings st acm siam symposium algorithms soda pp 

broder mitzenmacher 
multiple hash functions improve ip lookups 
proceedings infocom pp 

broder mitzenmacher :10.1.1.127.9672
network applications bloom filters survey 
internet mathematics 
byers considine mitzenmacher geometric generalization power choices 
proc th acm symposium parallel algorithms architectures spaa pp 

bose guo kranakis maheshwari morin morrison smid tang 
false positive rate bloom filters 
submitted 
cg scs carleton ca morin publications ds bloom submitted pdf chazelle kilian rubinfeld tal :10.1.1.5.7502
bloomier filter efficient data structure static sup port lookup tables 
proceedings fifteenth annual acm siam symposium discrete algorithms soda pp 
dahlin 
interpreting stale load information 
ieee transactions parallel distributed systems pp 


fast accurate bitstate verification spin 
proceedings spin workshop model checking software spin pp 

fan cao almeida broder 
summary cache scalable wide area web cache 
ieee acm transactions networking 
gonnet baeza yates 
handbook algorithms data structures pascal 
addison wesley publishing 
kirsch mitzenmacher 
building better bloom filter 
harvard university computer report tr 
ftp ftp deas harvard edu techreports tr pdf 
mitzenmacher 
power choices randomized load balancing 
ph 
thesis berkeley 
mitzenmacher 
useful old information 
ieee transactions parallel distributed systems pp 

mitzenmacher 
compressed bloom filters 
ieee acm transactions networking 
mitzenmacher richa sitaraman power choices survey results 
kluwer academic publishers norwell ma pp 

edited pardalos rajasekaran reif 
mitzenmacher upfal 
probability computing randomized algorithms 
cambridge university press 
pagh pagh srinivas rao 
optimal bloom filter replacement 
proceedings annual acm siam symposium discrete algorithms soda pp 

ramakrishna 
practical performance bloom filters parallel free text searching 
acm 
song turner lockwood 
fast hash table lookup extended bloom filter aid network processing 
proceedings acm sigcomm pp 

