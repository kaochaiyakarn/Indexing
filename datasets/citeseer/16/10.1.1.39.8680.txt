preprocessing substitution composition edward research limited drive reading england ed rrl uk muchnick department computing university surrey guildford england muchnick ee surrey ac uk problems lexical substitution mechanism preprocessor known 
resolve problems new syntax substitution mechanism meta variables 
implementation meta concepts style leads naturally meta expressions meta statements generalisation syntax 
show meta compilation renders preprocessor redundant offers intuitive powerful programming language pattern solutions provided aspect oriented programming practiced 
companion go stage putting concepts context meta classes meta programming reflection supported compile time 
keywords object oriented language preprocessor meta level composition weaving aspect oriented programming pattern implementation widely industrial strength language support object orientation 
popularity part attributable high degree compatibility 
portability run time efficiency consequently attractions programmers 
efficiency achieved providing programming constructs relatively low level 
efficiency preserved restrictive form object model enables resolve compile time object oriented languages resolve run time 
programmers compiler writers seek trade compile time run time activity 
order improve run time efficiency programmer may identify better algorithms select efficient compiler structure code exploit avoid poor characteristics compiler 
order improve compile time appear alternatives different coding styles appropriate management include file dependencies compilation unit sizes show surprising benefits 
dramatic improvements programming time may achieved automatic code generator lex yacc applicable application generator gui builder suitable 
mundane programming applications structure code way predictable sufficient complexity justify development custom code generator 
applications programmer forced perform editing necessary exploiting tools available 
cpp preprocessor long time main tool available programmers 
prior templates standard practice large preprocessor macros define generic classes containers 
templates provide powerful solution problems characterised requirement define single type function 
problems cpp remains alternative 
compatibility required preserve cpp limitations programming tool long recognised 
introduces number new syntaxes eliminate traditional uses cpp uses remained 
power complexity object orientation increasing simple patterns idioms considerably increases need programmers program compile time result cpp important proceedings eastern european conference technology object oriented languages systems tools ee bulgaria june 
briefly review known deficiencies cpp propose new form substitution integrates operates spite 
find cpp problem resolved making conventional run time characteristic available compile time natural corollaries enhancement extension supports meta programming 
ground cover describe improvements short meta programming leave companion 
extended syntax pure superset new reserved words changed semantics 
new substitution syntax achieved new operators tokens 
changes realised generalising existing syntax giving useful meaning declarations valid meaning 
practical implementation extended syntax provided fog flexible object generator 
fog source source translator converting extended syntax source files conventional 
order preserve compatibility fog contains full implementation cpp need facilities redundant 
organised follows 
section review problems traditional cpp substitution mechanism propose better mechanism compile time meta variables meta functions 
section replace cpp meta variables meta functions meta expressions evaluation may resolved meta statement compile time 
section generalise syntax remove need duplication declarations definitions find enables programs structured suit programming requirements supports weaving required aspect orientation 
section compare approach related consider relevance languages section 
substitution traditional functionality cpp supports definition replacement object function macros 
object macro associates identifier replacement sequence preprocessor tokens 
define octal cases case case case case case case case replacement tokens replace macro identifier occurs 
switch case octal cases 
break case alphabetic cases 
break case 
break substitution occurs low level offering programmer considerable flexibility 
example replacement sequence apparently omits initial case keyword trailing token 
missing tokens accompany instantiation 
readers may form opinion unusual definition leads dangerously obscure aesthetically pleasing implementation switch statement 
function macro associates identifier list formal parameters replacement sequence 
define max 
invocation macro provides actual arguments replace formal parameters replacement sequence 
macro substitution simple prone accidents 
substitution occurs lexical level ignores logical structure may source code 
intention max returns expression pair expression arguments realised actual usage appropriate 
apparently redundant parentheses macro definition avoid surprising evaluation result interpretation price max current rate fixed rate commission price current rate fixed rate current rate fixed rate commission different set problems occurs arguments side effect 
max arguments evaluated twice receives double increment 
argument greater result obtained increment occurred 
program function required 
serious problem preprocessor name capture 
names occur single namespace conventional name defined macro malfunction 
instance enumeration struct options enum left right max operate quite satisfactorily options max denoting number options 
definition options enumeration max macro probably provided include files include files options max fail 
macro defined enumeration syntax error spring enumeration 
form error obscure confusing 
appear intermittent compilations include files succeed 
novice programmers confused 
experienced programmers may take little time detect hand preprocessor 
traditional functionality may characterised substitution imposition 
macro definition imposed subsequent code 
invited substitution propose new substitution mechanism substitution invited imposed 
incurs lexical penalty substitution operator danger unwanted code changes 
presence substitution operator serves clear indication substitution intended occurring 
object substitution occurs object name object name function substitution function name args function name args problem unwanted substitutions 
independence macros underlying language resolved replacing concepts object function macros meta variables meta functions declared similar fashion conventional variables functions 
auto number pi auto expression max expression expression meta variable meta function meta function parameter defined meta type corresponds terminal const string non terminal declaration statement grammar examples meta types number expression 
number meta type describes value corresponding integer literal character literal boolean literal 
expression meta type corresponds directly expression grammar 
auto keyword totally redundant 
permitted function bodies may assist reader identifying local declarations 
avoid introducing new keywords reusing existing keyword identify meta functionality declarations appear functions 
similarities normal declarations extend default parameter values overloading exception specifications 
associating meta type meta function meta variable preserves style declarations enables programmer select style substitution 
meta type determines syntax parsed arguments removing potential ambiguity improving error diagnosis 
implementations original kernighan ritchie preprocessor performed character substitution 
replacement characters inserted surrounding characters resulting character stream re analysed 
offered considerable flexibility different implementations varied treatment obscure recursions encountered difficulties composite token arose result character concatenation 
ansi preprocessor changed token substitution 
preprocessor identifies tokens substitution replaces sequence tokens 
composite tokens arise explicit operator 
new substitution mechanism supports syntax substitution 
syntax elements inserted place invocation 
original syntactical structure preserved 
need protective parentheses removed 
multiple substitution may occur problem side effects resolved 
inline functions provide adequate solution problems 
new substitution syntax token substitution supported token meta type 
token primitive generic terminal grammar 
number string identifier piece punctuation token 
auto token octal cases case case case case case case case 
style appendix substantially 
italics denote non terminals 
fixed width font literal text meta type names 
grammar comprises lexical syntactical levels strictly ascii characters reserved words punctuation sequences terminals 
concentrate syntactical level refer lexical production string literal identifier terminal non terminal 
declaration octal cases list array tokens causes syntax substitution occur token level provides token substitution 
free format language grammar avoids need continuation characters cpp line grammar 
concatenation character substitution preprocessor enabled composite tokens normally extended identifier formed causing character sequences abut 
identifier converted string substitution macro define text text ansi preprocessor change token substitution requirement comment replaced whitespace character lost flexibility necessitating operator request concatenation operator support 
define conc conc define text text major syntax elements comprise whitespace punctuation characters numbers strings identifiers keywords 
characters strings surrounded single double quotes unambiguously distinct surrounding text 
numbers identifiers keywords associated punctuation separated numbers identifiers keywords punctuation whitespace 
punctuation separated whitespace cases ambiguity arise 
consequence practical constraints contexts adjacent characters identifiers keywords numbers strings occur intervening punctuation whitespace valid programs adjacent strings intervening whitespace concatenated treated single string 
single string single string string may occur keyword identifier case linkage specification 
extern size programmers choose economical whitespace case 
may define concatenation property incurring trivial compatibility problem respect unusual formatting little form linkage specification token sequence comprising character identifier number string followed intervening whitespace arbitrary mix characters identifiers keywords numbers strings concatenated character representation yield extension token 
resulting text correspond possible extension program ill formed error reported 
restores flexibility character substitution eliminates need special concatenation operator 
empty string character provide separation elements require concatenation 
empty string character meta cast 
subsequent text acquires string character characteristics start sequence 
text text examples show new mechanism context simpler write intended text place 
utility concatenation arises concatenated elements expression 
scoping meta variables meta functions declared similar fashion conventional variables functions 
similarity extends scopes templates 
preprocessor macros contribute single global namespace irrespective prevailing language context meta objects declared part language 
class simple 
auto declaration identifier name expression init static const simple name static const simple init return class smart 
auto declaration identifier name expression init static const smart name static const auto ptr new smart init return class provides isomorphic meta function returns declaration comprising static function declaration 
body function creates static instance class local variable construction procedure appropriate rest class implementation shown 
provides solution pattern applicable concrete enumerated compile time 
application code may define class application public simple easy smart null providing isomorphic implementations meta function avoids invoker needing understand different construction protocols class 
possible introduce extra level indirection invoke auto identifier smart null course possible preprocessor 
preprocessor approach unnatural programmers tend avoid 
meta functions fit context language provide useful addition programmer toolbox 
defining template generic case specialisations variations solve particular example 
template class const operator const static const init return template class const smart operator const static const auto ptr new smart init return class application private static const easy static const null single declaration required template approach fails preprocessor approach may remain viable 
instance declarations required define member variable name protected set accessor set name public get accessor get name 
meta function defines declarations simple scalar type bool 
auto declaration seq identifier type identifier name expression init private type name init protected void set name const type avalue name avalue public const type get name const return name similar isomorphic meta functions provided cover alternate data types smart pointers 
member variables standard accessors may defined class application 
bool valid false bool valid 
semantic meta functions applications desirable avoid lexical cost invited substitution 

private type specifier private prefix member specification fog extension avoids invocation meta function disrupting prevailing access subsequent declarations 

initializer member variables fog extension avoids accidental omission initializer constructor 
specified initializer incorporated non copy constructors provide explicit initializer 
auto declaration persistent declaration meta function body invoked persistent int avalue lacks clarity invocation persistent int avalue alternate form meta function declaration provided comprising return meta type syntax template comprising sequence identifier punctuation meta parameter followed meta function body 
syntax template start identifier reserved word prevailing namespace 
semantic alternative supports direct usage auto declaration persistent declaration meta function body declares syntax template comprising identifier persistent followed declaration may accessed subsequent meta function body 
application programmer appears seamless language extension 
meta statements preprocessor supports various forms directive test state lexical expression 
meta variables limited utility support 
function bodies grammar involves sequence statements may comprise expressions declarations control statements 
outside functions grammar involves declarations 
grammar little irregular distinction expressions declarations may require careful analysis cases remains ambiguous 
ambiguity resolved definition favour interpretation declaration 
safe extend grammar allow expression control statements outside functions apply resolution rule ambiguities 
extension provides meta expressions meta statements evaluated compile time 
may replace preprocessor directive class 
debug preprocessor directive executed pre compile time void debug print ostream const declaration endif equivalent meta statement class 
debug meta statement executed meta compile time void debug print ostream const declaration object hierarchy may want smart pointers intrusive count 
count functionality provided exactly 
define meta function provide intrusive count functionality meta variable prevent multiple copies 
class private mutable size shares public shares const shares operator const return assert shares bool const return shares false shares true void share const shares auto declaration seq install count auto number count true private shares public void const shares delete public void share const shares share friend inline void const anobject anobject anobject auto number count false 
built meta variable resolves current declaration scope class example 
built variable avoids need pass declaration scope formal parameter 
avoids need specify redundant information 
lines example define class encapsulates required behaviour count member variable counted object 
counter constructed value unaffected assignment 
count adjusted share 
method returns true counted object continue exist false counted object destroyed 
destructor may contain assertion count counted object 
functionality incomplete additional declarations required counted object 
extra declarations provided counted object invokes install meta function class 
install meta function starts conditional meta statement guard double installation 
invoked count meta variable defined class base classes resolved global definition line example 
value false conditional succeeds 
count meta variable defined class true value 
result meta function suppressed conditional 
guard code followed definition member variable member functions friend function 
shares member variable provides run time storage needed share count interacts constructors destructors equivalent functions counted class 
share member function simply delegates member variable 
member function completes share counting protocol deleting counted object final share removed 
friend function just provides convenient destruction option avoiding need worry null pointers 
accidental double installation class may conventionally structured code meta function invoked class 
install install multiple installation occur indirectly 
accidental double installation inheritance tree easily occur trapped inheritance count true value 
difficult achieve preprocessor achieved templates 
improved implementation eliminates global variable guarantees compile time error counted object destroyed way 
unfortunately scope appear 
meta functions single line install required add share count functionality application class 
achieved separation concerns goal aspect orientation 
composition meta functions meta variables introduced outright extensions 
incidental extensions mentioned main text alluded footnotes 
earlier examples involved single class master class controlling slave class 
code written appears inline part class interface 
problems involve class generally undesirable abuse inline functions 
leads code bloat cache misses run time excessive include file dependencies compile time 
need ensure meta functions generate declarations lead unwarranted problems 
splitting separation function bodies function declarations requires interfaces specified twice body interface include file body implementation file 
repeated interface uses slightly different syntax virtual keyword default parameter initializers template scope qualification 
duplication inconvenience programmers doubles number files declarations create maintain introduces opportunities inconsistency 
duplication slightly discourages factoring repetitive code preprocessor macros macros provided contribute interface contribute implementation 
fog source source translator 
converts fog source files superset conventional files 
fog require separate interface implementation files 
fog accepts contributions source files provided emits pairs interface implementation files appropriate classes need interface implementation separated fog source files potential inlining problems resolved providing programmer control 
absence explicit inlining information small functions inlined fog functions 
explicit inlining interface file occurs response inline keyword 
converse inline prevents inlining 
intermediate form inlining implementation file may specified inline implementation 
fog eliminates need distinct interface implementations fog eliminate syntactical differences 
specifying non trivial functions confines single class declaration result unwieldy classes 
upward compatibility requires interface implementation style definition supported 
fog generalises syntax allow declarations interface implementation style 
requires independent interface implementation implemented pure virtual function class application 
public virtual void function int avalue void application function int avalue 
fog supports complete declaration interface style class application public virtual void function int avalue 
implementation style public virtual void application function int avalue 
composing means class declaration closed 
class may extended presence declarations defined implementation style just class 
declarations class application public int variable 
public int application second variable 
class application public int third variable define class member variables 
total violation major principles definition rule simply stated requires exactly declaration entity 
fog translator definition rule satisfied generated translator may take liberal view sources 
fog implements composite definition rule composing class members array initializers function bodies potentially disparate sources single composite definition subsequent compilation 
weaving persuasive case implementing patterns pattern classes 
pattern class just grouping functions types collaborator 
pattern class contains member variables friend collaborator 
pattern invoking static member function pattern class appropriate collaborator instances parameters 
pattern class friend collaborator function free peek poke working variables collaborator objects perform required actions 
approach achieves regular style implementation beneficial effects reducing include file dependencies 
extensive friend declarations runs counter normal programming practice 
instantiation pattern pattern class requires instantiation pattern class insertion friendship declarations working variables collaboration classes 
instantiation pattern class 
ensuring multiple source file output file translations leads consistent results introduces configuration management complexities scope 

command line option defaulting non whitespace lexical tokens 
readily resolved conventional template instantiation 
insertion declarations collaborators performed manual editing 
describes custom preprocessor library performs insertion automatically provided programmer left hook class form 
class state member state hook enable cpp insert arbitrary declarations class town member town hook enable cpp insert arbitrary declarations custom preprocessor scans pattern class instantiations part state town declaration state towns produce conventional cpp definitions define member town friend class state multiple patterns readily accommodated 
cpp macro just grows 
approach demonstrates implementation particular pattern solution requires declarations injected code collaborator classes 
degenerate case pattern involving single class injection avoided 
terminology aspect orientation declarations associated aspect pattern woven create composite declarations acceptable compiler 
fog supports weaving eliminating need custom preprocessor preprocessor hooks support library 
template auto declaration seq install class friend class static private list parts optional construction delegations destruction class part friend class static private optional construction delegations destruction install invocation installation function just adds required friend declaration member variable collaborator class identified template parameters 
semantics meta function execution involve replacement formal parameters scope meta function returning declarations meta function body interpretation invocation scope 
meta function apparently formal parameters 

meta functions built formal parameters static dynamic corresponding declared scope meta function actual scope differs invoked derived class 
addition template parameter formal parameter 
usage ensures replacement occurs body returned calling scope may undefined differently defined 
example shows minimum activate pattern solution 
additional declarations enforce appropriate construction destruction protocols provide delegation users unaware pattern class 
necessary pattern class approach pleasant symmetry 
installation organised respect dominant collaborator probably class case 
necessary perform code injection collaborators 
approach adopted pattern solution collaborator class requires manual editing spread pattern solution automatic code injection 
related stroustrup highlighted inadequacies preprocessor calls eventual demise 
little published practical alternatives 
straightforward lexical alternatives suffer problems operating independently underlying language 
operation collaboration involves tackling challenge syntax difficult parse difficult extend 
provides sensible proposal completely new syntax conventional syntactical styles ada pascal 
clean syntactical framework easier researchers examine alternative syntaxes possible meta program perform syntax extension 
introduced concepts syntactic macro arguments types corresponding parts language grammar gave concepts sound efficient foundation syntax tree ast interpretation 
weise applies ideas ansi exploits lisp backquote support pattern template substitution avoiding need extensive call trees rearrange ast 
weise approach extension ansi introducing new keywords lexical operators 
approach fog ways similar weise giving existing concepts compile time meaning retaining degree consistency corollaries fog achieves notation compact supports character syntax substitution new lexical operators new reserved words 
weise needs explicit return statement activate source declarations fog just treats declarations return 
fog concepts put object oriented perspective 
term code weaving conjunction aspectj supports programmer partitioning code locate aspect distinct source units 
aspectj weaves various contributions create java classes incorporate multiple aspects 
form code weaving provided custom preprocessor pattern classes 
general purpose capability provided enhancements effectively introduce new languages 
researchers extended view resolving pre processor problems introduced variants support requirements concurrency persistence 
provides articles leading parallel processing researchers activities pursued 
different approaches demonstrate language extension occur different levels library classes run time environments developed language compiler changes 
fog increased capabilities compile time provide library developers options supporting simpler interfaces reduced requirements user support code stronger compile time detection protocol violations 
translators recognise extra reserved words require development translator affect underlying compiler 
fog provides ability introduce custom extensions enabling characteristics custom translators achieved general purpose translator 
new forms code generation necessitate significant revision language compiler 
fog offers little applications need rewrite basic compiler 
original patterns book provoked considerable interest number specialised conferences workshops 
patterns evolution concern identifying appropriate contexts forces influence problems different solutions resolve particular combinations forces 
difficulty fielding reusable implementation particular solution neglected 
vlissides participated development gui tool generate code patterns automatically expresses considerable reservations book 
difficult conceive automatic generator sufficient flexibility balance conflicting forces select appropriate cookbook implementation 
rightly generality ambiguity pattern descriptions 
programmers regularly reuse particular pattern implementations familiar providing improvement cut paste reuse essential 
aspect orientation recognised aspect fault diagnosis synchronization application beneficially isolated aspects realisation code aspect patterns cuts class boundaries 
integration code partitioned aspects requires weaver combine class declarations 
aspectj provides java 
fog provides weaving replacement preprocessor meta programming 
languages resolving deficiencies preprocessor concentrates 
solutions applicable structures member functions meta functions global scope appropriate 
preprocessor lexical tools languages ignorance underlying language avoids language dependence incurs problems lack language compatibility 
java particularly relevant context 
java replacements preprocessor constructs include provides concept portability undermines traditional usage 
elimination replacement define line appears retrograde 
causes unwarranted problems java code generators aspectj 
programming involves repetition levels programmers naturally seek factor repetition reusable construct may loop subroutine class template macro file library 
omission capabilities simplifies language limits programmer program efficiency 
form macro perform lexical processing meta programming beneficial languages precise syntax carefully chosen fit traditional style language 
performance fog research tool fully described 
available source solaris nt binaries www ee surrey ac uk research csrg fog expected research tool efficiency falls production compiler 
fog relatively complete covering dark corners syntax 
run time cost associated fog source translation just offers programmer alternative compact ways writing program 
opportunity exploit package reusable meta functions may incur small penalties occurs general purpose solutions locally optimised implementations 
compile time efficiency dependent way fog 
fog comprises full parser possible doubling compile time source parsed fog compiler 
exact ratio depends extraneous declarations processed stage result include files 
careless organisation build procedures result high penalty comparable instantiating templates time early compilers 
subsystem subsystem organisation compilations substantially reduce meta compilation costs fog proportion compilation costs may full subsystem recompilation occur changes subsystem dependencies 
parsing fog duplicates activity subsequent compiler efficient system envisaged results translation communicated compiler directly 
new substitution syntax proposed render cpp redundant resolve long standing limitations prepare way compile time meta programming 
unwanted token replacement avoided performing replacement invitation imposition 
incorrect substitution caused surrounding context avoided meta types drive substitution 
independence language need backslash continuations avoided defining behaviour part main language 
problems single namespace cpp macros resolved namespaces scopes 
concatenation implemented simple concept adjacency need additional operators 
extending statements occurring outside functions denote meta execution provides 
syntax generalised remove distinction need distinct interfaces implementations 
shown allow code organised suit programmer allowing declarations woven support aspect oriented programming 
ideas developed companion compile time capability meta level extended support meta programming static compile time reflection 
authors brian diligent reading manuscript 
author grateful research providing time resources pursue research 
aksit composition separation concerns object oriented model 
acm computing surveys vol 
es december 
www acm org pubs citations journals surveys es aksit aksit html ansi 
american national standard information systems programming language american national standards institute 
ansi 
working draft proposed international standard information systems programming language 
american national standards institute known committee draft adopted standard 
www maths warwick ac uk cpp pub dl cd cd pdf tar vlissides yu automatic code generation design patterns 
ibm systems journal vol 

carroll ellis designing coding reusable 
addison wesley 
definitional facilities higher level programming languages 
proceedings fall joint computer conference afips vol 


coplien advanced programming styles idioms 
addison wesley 
gamma helm johnson vlissides design patterns elements reusable object oriented software 
addison wesley 
kernighan ritchie programming language 
prentice hall 
syntax macros extended translation 
communications acm vol 
november 
lopes kiczales developments aspectj 
proceedings aspect oriented programming workshop ecoop 
workshop reader european conference object oriented programming ecoop lncs springer verlag june 
cs utwente nl aop ecoop papers lopes pdf mens lopes kiczales aspect oriented programming workshop report 
proceedings aspect oriented programming workshop ecoop 
workshop reader european conference object oriented programming ecoop lncs springer verlag june www parc xerox com spl projects aop ecoop aop ecoop proceedings pdf taming pattern classes persistence large projects 
addison wesley 
stroustrup design evolution 
addison wesley 
stroustrup programming language 
third edition 
addison wesley 
extensions dans une ll 
pour le grade de de cycle 
vlissides pattern hatching design patterns applied 
addison wesley 
weise crew programmable syntax macros 
proceedings acm sigplan conference programming language design implementation acm sigplan notices vol 
june 
conway modest proposal 
acm sigplan notices vol 
november 
wild instantiating code patterns 
dr dobb journal june 
muchnick preprocessing meta class aspects 
proceedings eastern european conference technology object oriented languages systems june 
www ee surrey ac uk research csrg fog gz pdf ps zip meta compilation 
phd thesis department computing university surrey preparation 
www ee surrey ac uk research csrg fog gz pdf ps zip wilson lu parallel programming 
mit press 
