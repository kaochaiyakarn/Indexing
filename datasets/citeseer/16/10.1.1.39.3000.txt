stochastic approach weighted region problem design testing path annealing algorithm mark man tak shing neil rowe code cs naval postgraduate school monterey ca usa presents efficient heuristic algorithm planning near optimal high level paths point agent moving complex terrain modeled weighted region problem 
input weighted region problem set non overlapping convex polygonal homogeneous cost regions dimensional plane 
region associated cost coefficient weight cost unit distance movement region point agent 
objective find minimum cost path weighted regions start point goal point 
efficient algorithm combines heuristic search probabilistic optimization simulated annealing 
explores constrained random perturbations sequence edges path passes sequence solves convex local optimization subproblem find locally optimal path cost 
extensive test results indicate new algorithm runs faster previously known techniques minimal sacrifice optimality 
keywords path planning shortest path simulated annealing weighted regions 
ltc mark army currently software technology branch army research laboratory keefe building georgia institute technology atlanta ga 
research reported conducted naval postgraduate school 
prepared navy center applied research artificial intelligence 
presents efficient heuristic algorithm planning near optimal high level paths point agent complex terrain modeled weighted region problem wrp 
input weighted region problem set non overlapping convex polygonal homogeneous cost regions dimensional plane 
region associated cost coefficient weight indicates relative cost unit distance movement region point agent 
cost regions assumed isotropic respective weights invariant respect direction movement 
examples cost measures include ease movement terrain cover concealment exposure enemy positions fuel energy consumption enemy weapons danger contamination 
weighted length path segment joining points convex region product corresponding weight euclidean distance 
path segment coincides boundary edge edge separating weighted regions incurs lesser weight regions separated edge 
start goal point plane cost path joining start goal sum weighted lengths segments forming path 
objective weighted region problem find minimum cost path start goal weighted regions 
due non convex solution space wrp solved standard techniques drawing line start goal perturbing line local optimum reached 
existing algorithms solve wrp means combinatorial searching techniques 
way tackle wrp means wavefront propagation technique 
wavefront propagation technique approximating method overlays input map grid 
searches grid start breadth manner goal reached 
path reaches goal retrieved solution 
algorithm drawbacks 
simple map regions may require high resolution grid accurately represent detail 
result execution times suffer 
second requirement paths fixed grid introduces digital bias 
stair stepping effect results solutions longer optimal solutions 
attempts smooth paths may result paths worse feasible paths infeasible 
mitchell papadimitriou continuous dijkstra algorithm finds optimal solution wrp 
algorithm runs time space total number vertices regions precision weights problem instance 
rowe developed snell law search method find exact solution 
algorithm exponential worst case time complexity showed empirically snell law approach better average performance continuous dijkstra algorithm 
applying wrp real life problems necessary combine overlays complex maps order plan paths simultaneously optimize mission critical parameters 
example weighting relative importance cost measure optimal solution represent path best trade minimum travel time exposure enemy maximum survivability 
difficulty optimization increases number overlays 
problem instances approach reality complexity battlefield mission planning faster solutions desirable absolute optimality 
existing algorithms slow planning routes complex battlefield 
order speed search process propose tackle wrp means stochastic search 
proposed algorithm called path annealing customization probabilistic combinatorial optimization technique known simulated annealing 
simulated annealing successfully finding near optimal solutions problems having unusually large complex search spaces 
algorithm uses simulated annealing guarantee globally optimal solution 
experiments conducted researchers show simulated annealing algorithms generate near optimal solutions reasonable execution times complex search spaces 
reasons tackling wrp simulated annealing 
computer science viewpoint search space wrp appears suited approach 
depending resolution required particular application problem instance arbitrarily complex terms number regions number vertices edges composing shapes orientations 
approximating nature polygonal regions coupled sensitivity true optimal paths small changes geometry coefficient magnitude suggests effort associated finding true optimal path rarely worth result 
wrp tends local minima costs close globally optimal solution 
annealing approach solving wrp interesting unusual reasons 
problems simulated annealing applied past wrp solvable represents number map vertices number bits precision 
annealing research applied problems np hard 
real challenge design annealing solution wrp 
second simulated annealing criticized large running times inability compete problem specific heuristics empirical studies indicate 
approach wrp attempts merge simple intelligence practical engineering coupling simple heuristics non exhaustive stochastically controlled sampling 
path annealing primarily stochastic algorithm important search 
fact fair say path annealing draws major part performance power search component 
just application simulated annealing path annealing intelligent marriage global local search continuous discrete probabilistic control 
employ simulated annealing simple tool control local search 
doing specific design concepts annealing schedule adapted previous research 
emphasize significant contribution annealing novelty design annealing approach solving wrp set heuristics bounding techniques increase performance efficiency proposed algorithm 
implemented path annealing quintus prolog version version sun sparc workstation running sunos 
presents algorithm experimental results running implementation 

basic simulated annealing algorithm simulated annealing adaptive search technique metropolis algorithm simulates complex system particles molecules heat bath 
recognizing concepts similar optimization kirkpatrick independently developed simulated annealing 
researchers obtain solutions variety combinatorial optimization problems 
starting initial solution evaluated cost move generator randomly perturbs solution obtain new 
cost new solution computed compared current solution 
standard local iterative improvement approach new solution replaces current change cost dc non positive 
local iterative improvement approach new solution accepted probability dc positive 
control temperature value units cost function 
regulates probability distribution defines acceptance criteria solutions increasing costs 
temperature procedure attempts moves acceptances permitted 
temperature reduced factor reset zero 
resulting behavior downward biased random walk solution space ability escape local minima 
gradually decreasing control temperature changes exponential probability distribution 
acceptance criteria larger cost increases 
value cost increases reasonably expected improvements freezing temperature 
stage algorithm returns current solution halts 
variety heuristics enhancements improvements basic annealing algorithm 
extensive bibliography simulated annealing theory applications 

path annealing customization annealing wrp loss generality assumptions regarding input map 
cost coefficients integers taken set 
necessary rational number coefficients handled rescaling 
furthermore assume weighted regions convex 
case possible insert additional boundary edges existing vertices regions convex 
edges boundaries regions equal cost 
refer phantom edges sole purpose ensure convexity 
border edges border vertices define outer limits map bound non convex region 
current implementation path annealing requires linear regions roads modeled regions positive non zero area 
restriction essential algorithm removed data structure modifications 
solve weighted region problem define basic annealing components 
solution space definition 

initial solution taken space 

cost cost function evaluated solution 

move generator randomly generate small changes solutions 

annealing schedule parameters control algorithm 
idea states represent edge window sequences path passes 
annealing see sections search space states find promising sequences 
local optimization see section necessary sequence determine actual minimum cost path cost 

efficient representation solution space efficient annealing search space discrete finite 
furthermore reduce search space possible 
optimization problems simulated annealing applied wrp solution space continuous uncountably infinite 
impose discreteness defining concept window sequence ws 
assign unique integer identifier region boundary edge 
assign identifiers designated start goal points respectively 
concept window sequence originally adopted describe family paths cross sequence boundary edges vertices obey set movement constraints 
definition window sequence similar identical 
consider continuous infinite set paths start goal points cross ordered sequence edges 
uniquely label family paths ordered list edge identifiers 
elements list corresponding start goal respectively 
middle list contains identifier edge crossed associated paths 
ordered list called window sequence 
duplicate edge identifiers permitted legitimate ws 
simply means family paths crosses edge multiple times 
partitioning original continuous solution space wrp ws advantages 
ws discrete representation terms regions edges 

total number ws finite 

path continuous space start goal contained ws 

ws contains globally optimal path 

convexity theorem applies ws theorem places restriction edge length path cost function remains 
unique locally optimal path exist ws standard continuous function optimization method locate 

window sequence compare ws defining ws cost cost locally optimal path ws 
consider ws states annealing process solve wrp searching optimal ws 
order efficient high level representation solution space preprocess wrp map primitive data structures designed facilitate rapid navigation solution space 
input map list boundary edges defining vertices associated cost coefficients side 
list represents complete set straight line segments planar graph 
henceforth refer graph weighted region map 
enhance efficiency map preprocessing assigns unique integer identifier edge stores defining vertices associated weights linear equation form midpoint length bounded regions directional data 
provide quick access edges vertices regions data structures essentially inverted index files vertex edge list stores clockwise ordered list edges incident vertex 
region edge list holds associated cost coefficient ordered list boundary edges convex region 
region vertex list stores ordered list vertices region 
obstacles treated special oversized vertices 
similar vertex edge list obstacle edge list stores ordered list incident edges obstacle 
facilitate computation initial ws generation new ws annealing create dual representation wrp map 
connected graph embeddable cartesian plane intersecting arcs vertices minimum degree known planar graph 
restricting arcs planar graph straight lines results planar graph pslg 
wrp input maps pslg 
restrict maps consist convex regions 
structures graph theory defines notion dual graph 
regions planar graph vertices dual graph vertices planar graph regions dual graph 
dual graph arcs connect vertices corresponding adjacent regions original graph 
correspondence exists arcs planar graph arcs dual 
kind dual graph valuable problem transformation min max cut problem useful purposes 
construct different kind dual representation wrp map called edge dual graph follows 
discussion follows refers distinct representations problem instance weighted region input map corresponding edge dual graph 
order avoid confusion terms vertices edges regions map describe weighted region map 
terms nodes arcs graph describe edge dual graph 
edge dual graph essentially adjacency list representing spatial structure map relatively high level abstraction 
create graph assign node midpoint map edge bound obstacle border 
special nodes assigned start goal points 
non obstacle region add arcs connect nodes midpoints edges bound region 
fact regions convex guarantees arcs intersect obstacles regions 
region contains clique consisting nodes representing non obstacle boundary edges 
regions containing start goal points additional arcs connecting start goal node clique 
illustrates simple wrp map associated edge dual graph 

weighted region map edge dual graph 
initial solution annealing solution space 
empirical evidence suggests reasonably initial solutions provide better final results 
obvious straight line path start goal feasible obstacle regions 
algorithms constructing searching visibility graph necessary 
initialize path annealing obtain initial solution conducting search edge dual graph 
cost arc edge dual graph equals weighted euclidean distance points 
cost path sum costs arcs forming path 
estimated cost goal straight line distance goal weighted map lowest cost coefficient 
underestimate goal search admissible 
returns shortest weighted midpoint path corresponding ws resides 
refer path optimal midpoint path 
note expect midpoint path globally optimal expect corresponding ws necessarily contains globally optimal path 
fact optimal midpoint path arbitrarily bad 
usually represents reasonably initial solution 
input map edge dual graph simulated annealing start optimal midpoint path 
feasible solution regardless cost 
overestimate distance goal inducing greater depth component search 
evaluation function usually finds solution faster 
resulting midpoint path higher cost feasible edge dual graph pass infinite cost regions 
advantages initializing admissible search 
resulting midpoint path usually reasonably starting solution 
generally high speed avenue greater potential containing necessarily optimal near optimal path 
empirical research indicates simulated annealing faster provided reasonably initial solutions 
second total cost path provides upper bound cost globally optimal path 
bound useful constrain search space 
shortest midpoint path desirable 

evaluating cost window sequence main phase annealing newly generated ws evaluated find cost locally optimal path 
annealing applications cost sample solution easily evaluated 
path annealing cost function evaluation difficult may require relatively large amount computing time 
streamlining procedure high priority 
single path relaxation spr arbitrary ws start goal locate optimal path constrained defining edges coordinate descent method proposed smith suggested 
path midpoints edges fix points edge start goal adjust crossing points optimal locations 
pass reverses direction goal start works alternate edges 
process continues complete pass direction point moves previous position precision relaxation tolerance 
procedure converges locally optimal path total weighted path length monotonically decreasing function sequence adjustments 
possible ws continuously direction start goal 
moving alternating directions tends cause faster convergence 
simulated annealing afford expensive primitive operations 
coordinate descent method proposed smith uses golden ratio search compute optimal crossing points avoiding direct snell law expensive trigonometric functions 
golden ratio search accurate slow practical value path annealing 
long ws require large number iterations wide window sequences long edges converge slowly 
designed table lookup technique computing snell law crossing point constant time 
refer method coordinate descent single path relaxation spr 
fixed approach points normalize geometry typical crossing episode standard rectangle shown rectangle oriented crossing edge parallel axis 
parameters characterize crossing episode geometrically similar rectangle ratio cost coefficients eq inverse slope line eq ratio coordinates eq ratio coordinate coordinate eq 
crossing episode geometry boundary edge ordered triple table lookup procedure returns efficiently compute location desired crossing site golden ratio search precompute table loaded runtime path annealing 
construct appropriate snell law lookup table necessary determine expected working range cost coefficient ratios priori 
working range mean encountered maps interest 
necessary set include ratio encountered bounds conditions trigger expensive golden ratio search 
objective severely reduce number times lookup resort iterative search 
extensive testing golden ratio search conclude snell law table lookup method provides reasonably accurate efficient means computing optimal crossing points boundary edges 
uniform discrete point udp approximation local path optimization spr fast practice relatively slack relaxation tolerance spr may converge unacceptably slow rate 
happens midpoint path starting condition far optimal sharp bends 
situations crossing point adjustment may slight 
large number iterations may necessary optimize path 
usually high annealing temperatures large number ws sampled large locally optimal path costs 
accurate ws cost evaluation necessary locally optimal path globally optimal 
theoretical empirical evidence validate approximations actual cost function 
capitalize idea implement simple approximation pre evaluate cost ws 
refer method point udp search 
essentially dijkstra algorithm restricted ws 
udp rapidly approximate locally optimal path ws necessary provide starting path spr 
uniformly spaced points called edge points specified edge ws 
start point paths constrained pass set points searched 
discrete interval defines upper bound separation distance pair adjacent edge points 
value edge points predetermined stored boundary edges 
edge length number required edge points 
points include terminating vertices evenly spaced edge 
edge non zero length minimum edge points terminating vertices 
note resulting structure viewed higher resolution edge dual graph 
approximate optimal cost ws udp procedure works follows 
start point inversely goal dijkstra algorithm proceeds ws goal 
back pointer maintained edge point indicate direction shortest path back start 
goal point reached shortest path retrieved back pointers 
search fast restricted ws 
consequently search proceeds order ws edges start point 
time complexity algorithm nm maximum number edges ws maximum number edge points assigned edge map 
note function length longest edge map 
combining udp spr implementation employ stage combination udp approximation spr find locally optimal path ws 
ws udp solution path refined estimate local optimum midpoint path 
udp hasten spr convergence finding starting path usually closer true local optimum midpoint path 
stage udp rapidly selects locally shortest path constrained discrete spaced edge points ws 
stage spr begins path returned udp 
passes spr suffice convergence true local optimum 
udp search spr tuned desired accuracy adjusting discrete interval relaxation tolerance respectively 
setting equal average length edges tends balance assignment edge points uniformly map 
assume length shortest edge closely related intended map resolution required solution accuracy 
mean edge length set strikes compromise accuracy speed problem instances associated map 
value computed dynamically lengths boundary edges vicinity start goal locations 
shall discuss heuristic choice provides opportunity improve performance 
locating locally optimal paths reentrant window sequences reentrant path travels high cost region boundary edge shared low cost region striking snell law critical angle travels edge incurring lower cost critical angle high cost region came 
paths part globally optimal solutions particularly start goal lie high cost region 
window sequence contains reentrant path called reentrant window sequence 
reentrant ws special problem udp approximation method snell law 
note ws distinctly different contain reentrant paths 
ws contains reentrant paths list reflective edge twice succession indicate distinct turning points point exit point reentry higher region bounds 
udp approximation simply assumes edge identifier ws corresponding optimal path crossing turning point 
ws edge points algorithm determines optimal edge point edge running dijkstra algorithm 
edge listed twice succession weighted distances pairings edge points computed lesser weight regions separated edge 
pair returned optimal edge pair shortest weighted path retrieved back pointers goal point reached 
reentrant path locally optimal ws pair returned udp approximation usually edge points path violate snell law 
cases reentrant path locally optimal ws cheaper path travel directly region reflecting 
happens reentrant ws forced boundary edge low cost side 
illustrates situation 
reentrant path edge approach points advantage direct path case pair entry exit points returned udp approximation corresponds single point 
resulting path segments shortcut cost 
expect reentrant ws intentionally forces cost evaluation mechanism find best path hits reentrant edge path represents cost improvement original direct route 
reentrant ws costing original direct routes needed serve stepping stones annealing reach potentially optimal ws 
refer section details 

uniform discrete point udp approximation forced reenter low cost region low cost side boundary edge udp approximation spr recognize reentrant path location ws adjust entry exit points snell law critical angle 
angle measured approach points edge crossing episodes just prior reflective edge 
reentrant path encountered spr pass critical angle reflection points determined snell law current approach points 
stopping condition spr complete pass ws point adjustment greater tolerance depends crossing point adjustments reflection point adjustments 
reflection points predetermined adjustments corresponding approach points 
sufficient monitor adjustments crossing points non reflection points order detect convergence locally optimal path 
recall phantom edges edges bound regions equal cost coefficients 
ensure regions convex 
reentrant path forced phantom edge edge shared higher cost region known priori path violate snell law locally optimal 
cases spr ignores reentrant path route optimizes straight line path crossing episodes immediately points reflection approach points effectively bypassing reflective edge 
situation illustrated 
ws lists reflective edge twice 
reason high cost region low cost region may exist edge adjacent region bounded reflective edge reflection advantageous 
discussed section 

single path relaxation spr ignores non advantageous reentrant path forced re enter low cost region 
move operations simulated annealing samples different solutions randomly applying move operators explore solution space 
move generator perturbs current ws rerouting neighboring edges regions 
vertex rotation consider arbitrary window sequence ws designated start goal 
simplest ways obtain new window sequence ws shift ws vertex defines edges 
call operation vertex rotation 
operation relatively efficient vertex edge lists see section readily available sorted order 
ws path annealing generates neighboring ws follows 
randomly select vertex adjacent edges ws vertex called rotation vertex defines site intended displacement 
rotation vertex border vertex backtrack randomly select vertex 
vertex edge list rotation vertex 
edges low cost region high cost region reentrant path exits vertices members ws ws defined set operations ws ws eq eq simply implies replace edges ws edges ws result ws course set order significant list reversals performed necessary 
vertex rotation operator important side effect 
rotation vertex current ws scanned occurrences edges vertex edge list edges ws edges inclusive including removed 
vertex rotation automatically eliminates ws crosses 
sideeffect desirable ws crosses contain globally optimal paths 
obstacle jumping presence obstacles necessitates special consideration 
recall edge dual graph represents feasible solution space contain arcs obstacle regions 
view obstacles enlarged vertices non zero area 
enable obstacle rotation obstacle jumping employ special data structure similar vertex edge list 
obstacle edge list see section records clockwise ordered list incident edges obstacle 
obstacle vertex selected displacement site ws shifts completely obstacle operation eq appropriate obstacle edge list 
possible jump obstacles sequence normal interior vertex rotations 
jump type occurs result looping path circled obstacle 
illustrates path ws potential jumping obstacle region 
path potential jump obstacle single vertex rotation closing base loop rotating vertex remove detour obstacle region replacing dotted path segment associated ws 
obstacles jumped manner 
jump occur interior vertices edges surround obstacle ws perturbed completely direction 
obstacles interior vertices logically equivalent respect rotation operator ensure distinguishable 
move generator natural bias selection jumping large obstacles vertices 
problem instances may efficient inhibit temporarily prevent obstacle jumping 
especially true current ws includes edges incident obstacle case immediately jumping 
situations equal probability selecting edge ws rotation vertex obtained vertex obstacle ws incident edges greatest likelihood selection 
bias cause wasted sampling time move generator may tend jump back forth single obstacle 
jumping obstacles may require investigation problem empirical study 
reachability recall move operators guarantee reachability feasible solutions optimal accessible annealing process non zero probability 
ensure optimal solution overlooked intentionally 
generator rotation operators vertex obstacle guarantee reachability subset ws potential contain globally optimal path 
refer subset class proper window sequences 
window sequence proper enter cost region 
definition implies proper ws cross boundary edge necessarily region 
contrast improper window sequence may enter cost region multiple times 
shown induction number regions proper ws reachable initial proper ws convex weighted region map 
proper ws contain globally optimal paths move generator guarantee reachability 
unfortunately problem instances improper ws may contain optimal path 
section discusses improper ws additional move operator required reach 
reentrant installation optimal path cross cross edge reenter region 
recall optimal reentrant path obey snell law striking boundary edge critical angle traveling edge just inside lower cost region 
disallow linear regions roads path may exit edge ways 
may travel terminating vertex snell law apply 
may reenter region snell law critical angle 
case path globally optimal 
case involving terminating vertex contained proper ws 
path reenter region cross different edge reaches vertex 
paths contained proper ws reached rotation operators 
reentrant path case reside improper ws 
reason path region definition see section improper ws 

critical angle reflection path non reentrant 
critical angle reentrant path rotation operator reach improper ws edges current ws inserted new ws rotation operator copy edge inserted new ws single rotation 
need additional operator reach improper reentrant ws 
reentrant installation operator perturbs ws forcing reflect edge 
called reflective edge selected randomly set edges current ws bound regions current ws passes 
transformation new ws simple double insertion reflective edge identifier 
window sequence reentrant installation reflective edge 
note new ws improper crossing edge twice reflect ws enters cost region twice 
critical angle critical angle 
installation reentrant window sequence possible optimal path reflect adjacent boundary edges reenter region twice roll 
path detour common vertex cut straight region approach points 
fact proof concludes critical point entry exit critical point exit entry path pass vertex 
path annealing prototype create ws contain paths consecutive reflections adjacent boundary edges 
possible optimal paths cross sequence boundary edges reflect reenter region edge double back sequence edges reverse order 
illustrates case optimal path cross edges reflect return 

reentrant path crosses edges multiple times reach improper ws containing path reentrant installations stacked 
reach special cases requires move generator install reentrant paths edge reentrant resides 
allow reentrant installations push stack ensuring special situations reachable 
recall reentrant path optimal solutions tend rare require particular cost region placements angular alignments 
regardless give reentrant installation rotation operators equal probability selection annealing process accept reject resulting transitions stochastically 
means reentrant edges frequently installed current ws newly installed reentrant edge greatly improves local optimal path cost current ws kept current ws 
reduces chance eliminating reentrant paths vertex rotation 
improving reachability rotation reentrant operators described far capable reaching proper ws improper ws contain reentrant path edge 
exist acyclic improper ws reached operators 
furthermore ws contain optimal path 
trace problem interaction rotation reentrant operators 
consider special case optimal path 
note long edge bounding top narrow cost region crossed times optimal path 
vertex rotation operator create ws automatically removes edges ws 
reentrant operator stacks edge 
install side side 
combination operators generate ws arbitrary proper ws 
rotation reentrant operators ensure complete reachability possible globally optimal paths 

optimal path crosses edge multiple times integers cost coefficients problem concerns resolution disparity map 
disproportionately long edge allows ample opportunity short high cost region crossings greatly improve path cost 
multiple crossing optimal paths rare easily avoided balancing map resolution localized areas 
simply partition long edges associated situations inserting additional vertices break 
illustrates general concept 
note situation occurs cost coefficients adjacent regions large relative surrounding coefficients 
long edge partitioned case difference adjacent cost coefficients extreme 

additional edges dotted vertex small circle prevent optimal path multiple crossings long edge 
annealing schedule control applications simulated annealing require large amounts computing time arrive reasonably optimal solutions path annealing performs reasonably need 
path annealing efficiency rely wrp bounds heuristics discussed tuned annealing schedule 
annealing schedule admittedly crude uses simpler ideas proposed researchers 
control parameters established follows 
starting temperature recall annealing temperature controls shape exponential probability distribution accept reject new solution samples 
cost decreasing changes accepted changes increase cost accepted probability dc eq dc difference costs new current solutions 
acceptance ratio sample transitions estimated dc eq number cost decreasing transitions number cost increasing transitions dc mean cost increase cost increasing transitions 
ensure annealing sample solution space trapping high cost peaks freezing early desirable set produce acceptance ratio close 
ratios generally considered close 
determine starting temperature initial value tried empirical technique suggested 
randomly generate sample transitions solution space rejections 
sample values dc compute dc eq determines value produces required suggest simple application specific formulas usually derived basis desired acceptance ratio problem specific parameters 
way determine starting temperature value consider worst case transition move generator map 
complex problems approach possible 
fortunately representation wrp window sequences allows efficient analysis individual transitions 
desire value acceptance ratio close possible 
eq replace dc estimate greatest cost increasing value max dc 
determine value acceptance ratio close assume generator applies single operator current ws returns new ws cost evaluation 
cost increasing reentrant installations usually result large cost changes way spr computes costs essential move freely solution space consider rotations 
wish determine largest possible cost increasing transition 
transition site long edge bounding regions large cost coefficient differential 
intuitively max dc depend edge large weight differential 
dependence length edge may clear 
reason length factor rotation followed local optimization find cost 
rotation just forced current ws large weight differential local optimization force locally optimal path little high cost region possible 
second transition vertex edge gives optimization choice cross region 
possible local optimization dampen cost difference second transition assume worst case 
ignoring smaller surrounding effects largest change generally occur entire length edge 
situation depicted 

maximum cost difference max dc occurs ws transition cost coefficients boxed integers estimate max dc analyze length weighted region cost differential edge map equation locally optimal path ws locally optimal path ws max dc max edges eq assume random sample transitions eq max dc eq solving yields max dc ln eq approach need conduct empirical testing 
computation map preprocessing establish common starting temperature problem instances 
major advantage tendency method independent problem instance depending particular map 
conservative increase annealing running times unnecessarily 
emphasize approach quite flexible 
possible conduct analysis max dc subset map edges confined vicinity start goal 
variation problem instance dependent efficient 
presence obstacles requires special consideration 
small obstacles boundary edges significantly affect transitions 
larger obstacles hamper lateral movement jumping may require acceptance large cost changes 
wish set starting temperature obstacle rotations accepted early annealing necessary analyze worst case cost differences 
consider single obstacle rotation 
worst transition tends occur current ws forced detour completely obstacle single edge incident 
estimate value worst case cost difference compute cost traveling boundary edges obstacle closed loop 
subtract weighted length cheapest edge boundary edges account portion cost incurred original path passed near obstacle 
stopping criteria freezing temperature final value significant cost increasing transition reasonable probability acceptance 
reduction unnecessary search time dependent low current ws trapped local minimum escape improve cost lowest discovered 
point desire process terminates soon 
case algorithm waste lot time halts 
possible determine proper value apparently depends priori knowledge optimal solution cost location 
fortunately annealing runs exhibit similar characteristics 
annealing curve plot mean solution cost versus logarithm temperature 
illustrates curve typical annealing runs 
average cost solutions sampled discrete temperature note axis represents log direction time 
log decreases left right 
path annealing curves tend higher temperatures left half curve starting solutions reside cost function valleys 
path annealing climbs valleys value low stabilize trapping localized area 
lower temperature path annealing curves resemble tail 

annealing curve average cost vs log way set dynamically extrapolate annealing curve tracking change mean cost 
path annealing smoothing mean cost fluctuate significantly low temperatures 
suggestion simpler opt log log log average cost solutions sampled temperature better indicator freezing condition path annealing 
cost difference largest smallest accepted transitions nearly largest accepted dc apparently solutions neighborhood similar cost 
point simulated annealing default iterative improvement halt 
guard premature freezing suggest condition exist consecutive temperatures 
procedure stops annealing algorithm dynamically 
prototype uses fixed value determined value observations path annealing criteria 
temperature cooling sophisticated cooling schemes devised efficient adaptive reduction temperature 
prefer simplistic approach taken original adopted 
fixed parameters control temperature cooling reduction cooling factor typically geometrically rt eq parameter controls dt speed algorithm approach accordance underlying theory simulated annealing best reduce gradually possible values closer 
case trade time spent temperature value size dt 
large dt approaches relatively fast requires time value hand smaller dt approaches stopping criteria slower requires time amount search time spent temperature directly controlled chain length maximum number transitions attempted move generator value best value generally believed approximate size local search neighborhood 
local search neighborhood number distinct states window sequences transition application move generator away current state 
path annealing local neighborhood size function number edges current ws move generator selects transitions basis 
contrast cardinality solution set problems traveling salesman problem number edges ws changes frequently 
note ws length varies greatly number bends 
suggest employment average stable value representative ws length 
length starting ws search midpoint paths 
ws biased may represent size neighborhoods 
testing choose fixed value problem instances map 
reasonable value derived map sample straight lines equal length diameter map 
computed averaging number boundary edges crossed line lines sample 
procedure essentially estimate map resolution 
advantages simplicity problem instance independence option allow adjustments particular problem instances efficiency desired 
closely associated maximum number accepted transitions temperature recall transition attempted move generator accepted corresponding solution cost current solution cost probability see eq 
referred cutoff 
purpose cutoff simply compensate overestimating starting temperature desire minimum value acceptance ratio close 
better annealing overestimated value risk possibility trapping early bad local minimum 
assuming overestimated approaches proper value consecutive sequence acceptances cause premature temperature reduction eq 
essentially annealing specific heuristic devised reduce search time spent high temperatures 
appears little published guidance establish parameter 
forms annealing algorithm 
fact claims effect insignificant usually unnecessary starting temperatures 
expect gain efficiency cutoff starting temperatures tend higher necessary 
path annealing exhibits generally faster execution times performance control parameter effect 
efficiency enhancements path annealing path annealing approach wrp suggests ways bounds heuristics 
techniques applied systematic search methods 
techniques unique path annealing rely fact examines complete solutions 
designed implemented tested bounding techniques heuristics path annealing bounding ellipse implemented rowe approximation compute exact ellipse start goal points foci obtain absolute bound location globally optimal path 
theorem path reside outside bounding ellipse 
depending problem instance significantly reduce search space 
cost function estimation caching annealing computations cost function estimates increase efficiency 
solutions examined algorithm store retrieve cache candidates potential proximity globally optimal path 
move generator techniques effectiveness path annealing tends depend fast uniform sampling solution space 
adjustment move generator policies rules enhance search characteristics 
initial solutions starting solutions tighten search bounds 
tests find optimal midpoint path see section starting solution 
techniques exist obtaining initial solutions faster heuristic knowledge provide reduce search space 
informal testing shown enhancements basic path annealing algorithm significantly reduce execution times improve final solution costs 
detailed discussions bounding heuristic techniques refer 

evaluating algorithm performance input maps gain understanding path annealing performs different levels input map complexity tested algorithm maps 
maps represent levels increasing complexity terms resolution cost coefficient range 
cost coefficients shown integers respective regions obstacles appear gray areas map 
map complex represents synthetic terrain created 
map medium complexity represents synthetic terrain design 
map test maps 
maps constructed meter grid square actual terrain extracted standard military map fort hunter california 
represent section terrain different seasons 
map represents wet season reservoir full 
map represents dry season reservoir completely dry 
validity maps region weights confirmed site visit 
wish emphasize cost regions associated weights necessity interpretation combined elevation vegetation terrain feature data 
effort ensure unbiased testing created additional test maps randomly reassigning different cost coefficients regions map 
cost coefficients maps taken sets respectively 
maps intended test performance path annealing handling search space varying degrees smoothness 
control algorithm measure performance path annealing place direct competition wrp algorithms 
existing algorithms limitations prevent direct comparison test maps designed path annealing 
continuous dijkstra algorithm implemented 
recursive wedge decomposition prototype limited maps distinct cost coefficients obstacles 
furthermore designed handle maps vertices incident boundary edges 
update include revised prototype account restrictions 
prototype construct optimal path maps solving specified start goal pairs 
wavefront propagation limited comparison path annealing empirical results possible map 
recall map taken directly 
compare solution quality directly terms total path cost physical location identical problem instances 
direct comparison execution times difficult different machines prolog dialects 
compare timing results indirectly grid wavefront propagation algorithm 
wrote wavefront propagation quintus prolog similar prolog implementation 
wavefront program implements branchand bound search neighbor lattice graph representing homogeneous cost regions map 
provide maximum advantage wavefront algorithm search graph weighted distances precomputed independently wavefront algorithm 
cost arc graph product euclidean length assigned weight 
neighbor implementation lengths orthogonal distance grid intersection points 
manner weight arc search graph cost coefficient region midpoint resides 
tests grid resolution corresponds cell lattice 
relative test cases grid medium resolution 
tested low resolution grid high resolution grid 
expect solution quality generally comparable 
uniform discrete point global search noted earlier grid wavefront propagation solution path cost generally greater optimal path cost added percentage due stair step effect 
demonstrated added percentage vary randomly resolution 
apparent random nature additional cost solution wavefront propagation drawbacks 
assuming know window sequence solution resides stair step effect eliminated single path relaxation spr straighten path 
single path relaxation removes grid effects final solution path 
path cost errors resulting grid bias cause systematic wavefront search overlook optimal window sequence fail find globally optimal path help single path relaxation 
higher grid resolution improve accuracy execution times 
improve solution quality grid wavefront propagation developed simple algorithm compare annealing 
uniform discrete point global search generalization uniform discrete point udp method approximating locally optimal path ws map 
algorithm bears resemblance wavefront propagation important advantages 
uniform discrete point global udpga search technique quite simple adapts naturally geometry orientation boundary edges terrain map wavefront propagation grid size udpga resolution established priori form discrete interval concept identical uniform discrete point search time tradeoff applies 
edge map locate uniformly spaced discrete points spacing bounded value algorithm proceeds phases 
phase fast search dual edge graph midpoints 
done exactly manner search initial solution path annealing 
purpose obtain early upper bound optimal path cost construct bounding ellipse manner path annealing 
ellipse bounded search space refined search begins uniformly spaced points 
cheapest path points returned ws resides 
apply udp spr ws find locally optimal path 
path returned solution 
udpga approximating algorithm sense wavefront propagation 
solves wrp systematically searching discrete graph predetermined size 
size function discrete interval sets resolution essentially visibility graph 
udpga important advantages wavefront propagation 
simulate movement regions uniform incremental time steps 
algorithm takes complete path segments regions weighted arcs search graph 
crosses region single step selecting path segment connecting pair discrete points boundary edges 
second udpga effective terrain map geometry discrete points lie boundary edges 
path segments points conform natural arrangements edges vertices map 
tends reduce error resulting strict adherence grid points 
third udpga actively searches find reentrant path solutions 
udpga effective bounding ellipse wavefront 
udpga obtain initial solution compute ellipse quickly exactly search graph oriented boundary edges lattice 
validation criteria desire compare performance terms factors weighted region problem solutions total weighted path length total execution time 
indicated section test maps generated study path annealing performance cost function environments ranging smooth hilly 
time wish vary size problem instance examine time complexity function problem size 
establish fixed set points cartesian plane units square generate distinctly different problem instances pairing points start goal 
illustrates placement points map 
similar points placed maps 
general location points desire ensure wide variety size situation problem instances minimizing advantage algorithm gain start goal point close border reduce search space 
experiments grid wavefront propagation refers exploitation advantage heuristic selection strategy 

placement start goal points map order compare algorithms need consistent measure size problem instance 
straight distance start goal rough measure account resolution area map search path annealing udpga conducted 
determine problem size function number vertices searched 
search performed algorithms oriented boundary edges 
estimate problem size total number boundary edges reached initial search midpoints 
note euler equations establish linear upper bound number vertices exist connected planar graph edges 
count edge regardless times visited search 
technique estimating problem size approximates number boundary edges inside initial bounding ellipse crude search generally expands edges area roughly equal size ellipse 
actual bounding ellipse usually smaller clips portions longer edges limits search expansion 
wavefront propagation problem size ordinarily measured number grid cells expanded search 
order common measurement compare algorithms number boundary edges wavefront 
execution time algorithm computed total central processing unit cpu time expended initial search return final solution 
time required preprocess map create necessary data structures included times 
excluded cpu time required accumulate summarize statistical data 
algorithms capable graphical display outputs 
facilities extremely useful debugging 
maintenance displays expends significant amount cpu time time included timing statistics 
total cpu time run reasonably reliable indicator relative search time 
established relationship wavefront propagation uniform discrete point global udpga timing solution quality udpga search gold standard compare solution costs accordingly 
compare relative goodness solutions problem instance take ratio total weighted path costs path annealing solution udpga solution 
ratio value indicates algorithms achieved similar optimal cost results problem instance 
value greater favors udpga technique 

experimental results testing grid wavefront propagation vs udpga support claim udpga effective algorithm assessing performance path annealing relate algorithms results compare prototypes implementation grid wavefront propagation map 
shows results algorithms wavefront udpga path annealing problem instances tested 
udpga solution paths shown identical returned recursive wedge decomposition algorithm 
path annealing solutions identical udpga solution paths exception short segments problem instance identified 
wavefront propagation paths shown somewhat better shown 
recall lower resolution maximum resolution tested see bottom 
recall additional cost wavefront solutions vary somewhat randomly resolution 
large difference execution times wavefront algorithm attributed factors 
algorithm executed different machine architectures different implementations prolog 
timing results relative 
second wavefront implementation bounding ellipse wavefront implementation uses precomputed bounding box reduce search area 
accounts execution time differences wavefront algorithm udpga 
computation bounding ellipse box requires initial solution wavefront easily obtain 
spite discrepancies timing results show path annealing udpga far efficient wavefront algorithms recursive wedge decomposition algorithm 

map problem instances comparing algorithm performance wavefront udpga cost time sec resolution wavefront udpga cost time sec resolution path annealing path annealing wedge decomposition wavefront rich wedge decomposition wavefront ref wavefront udpga propagation path annealing timing results different machine architecture prolog implementation relate execution times function problem size examine performance algorithm set problem instances generated picking starts goals points shown 
possible pairs tested 
remaining cases trivial result straight line solutions 
cases space search bounding ellipse degenerate solution 
uniform discrete point global udpga algorithm set value discrete interval 
results udpga resolution usually adequate finding globally optimal solution 
case map resolution finer example 
chose consistent studies complex maps 
udpga requires hours cpu time solve cases larger maps sun sparc workstation 
plots running time cpu seconds vs problem size terms edges wavefront propagation grid udpga path annealing respectively 
plot quadratic squares curve fit points associated algorithms 
quadratic fit assumption area visited wavefront execution time grow roughly circular area search state expansion start point 
bounding ellipse search udpga tend flatten circular area 
shows admissible search expands number states 
quadratic curves show execution time growth rate wavefront greater udpga path annealing 
compared timing results wavefront propagation problem instances reduced resolution 
case run wavefront propagation cell lattice 
halving resolution growth rate remains significantly higher udpga path annealing 

map cpu time vs problem size edges examined relative solution quality systematic search algorithms dividing solution path cost udpga wavefront propagation problem instance path annealing compared udpga 
value means algorithms obtained solutions identical cost 
shows cost ratio vs problem size instances 
note cases udpga obtains solution better wavefront 
stair step effect wavefront solution paths results additional cost discussed earlier 
smoothing wavefront solution paths generally result costs close identical udpga instances tend indicate 
computation required results guaranteed optimal 
path annealing udpga wavefront quadratic squares curve fit wavefront path annealing udpga cpu time sec cpu time sec cpu time sec 
map cost ratio udpga wavefront vs problem size basis foregoing results say udpga algorithm generally faster accurate wavefront propagation kind maps studying 
udpga provides better competition path annealing wavefront 
testing path annealing vs udpga testing small problem instances having demonstrated udpga search faster accurate wavefront propagation focus attention path annealing performance udpga gold standard 
path annealing schedule uses fixed value uses cost initial solution values control parameters cost initial solution 
consider comparison goodness solutions measured ratio solution costs 
plot solution cost ratios path annealing udpga function size problem instance terms number edges 
inset indicates key statistics computed cases 
note maximum difference udpga solution majority points lie axis cost ratio 
cost ratio wavefront problem size edges udpga wavefront resolution udpga resolution map 
map cost ratio path annealing udpga vs problem size major advantage path annealing execution time savings 
designed path annealing efficient larger problem instances surprisingly relatively small instances 
shows central processing unit cpu time required function problem size udpga path annealing 
plots contain problem instances compared wavefront propagation earlier 
displaying wavefront data able expand axis better show relationship path annealing udpga 
smaller instances plots indicate path annealing lower average time 
map cpu time required vs problem size edges cost ratio pa udpga problem size edges map problem size edges map udpga cpu time sec cpu time sec problem size edges map path annealing final comparison path annealing udpga map plot solution cost ratio time ratio problem instance 
plot provides rough indication relative time cost trade offs algorithms 
consider point origin quadrants define classes categorize test results bad 
test run falls quadrant upper right indicates bad path annealing performance time cost ratios exceed 
hand point occurs quadrant iii lower left indicates path annealing performance 
keep mind performance measure relative udpga guarantee optimal solutions 
fact large number test points reside axis path annealing cost udpga cost reasonably indication true optimal paths discovered 

map cost ratio vs time ratio path annealing udpga testing moderately complex problem instances remaining tests standard set start goal pairs defined earlier section 
recall set generates distinct problem instances 
kinds graphs section common basis discussion results 
section examine results map twice edges regions map 
map compare performance algorithms larger intermediate level complexity 
cost ratio pa udpga time ratio pa udpga map tests path annealing solutions compared udpga solutions 
annealing schedule cost initial solution 
displays cost ratio vs problem size comparison path annealing udpga 
comparison figures reveals slight increase path annealing udpga cost ratio complexity maps increases 
note quartiles statistical summary small majority points rest close axis 
attribute tiny deviations rounding errors accumulated total path cost computation physical deviation optimal path 

map cost ratio path annealing udpga vs problem size edges plots figures illustrate significant savings execution time required path annealing 
better understand relative time cost trade offs path annealing udpga plot solution cost ratio time ratio problem instances 
comparison shows points reside left consistent increasing time requirement udpga 
cost ratio pa udpga map 
map udpga cpu time required vs problem size edges 
map path annealing cpu time required vs problem size edges 
map cost ratio vs time ratio path annealing udpga map udpga cpu time sec problem size edges map path annealing cpu time sec problem size edges map time ratio pa udpga cost ratio pa udpga testing real terrain section results tests conducted map map model actual terrain 
maps times number edges regions map 
important realize exception obstacle regions cost functions maps relatively smooth approximate cost movement determined real elevation vegetation data 
addition large reservoir cost coefficient differences maps account seasonal changes 
assumed regional topology remains unchanged wet dry season 
superimposed tactical data cover concealment enemy weapons induce drastic cost differentials boundaries elevation data tend cause locations 
maps set achieve relatively high quality udpga solutions annealing schedule cost initial solution 
note path annealing schedule adjusted somewhat account longer window sequences result complexity maps 
extended annealing chain length cutoff respectively 
figures plots cost ratio function problem size runs map map respectively 
maps path annealing reasonably complex maps 
interesting note appear significant decrease solution quality path annealing size problem instances increases 
furthermore assume moment fine resolution ensure udpga overlook optimal path path annealing solutions fall margin error 
attribute behavior success crude initial search finds window sequence vicinity optimal path 
emphasize success path annealing dependent power initial crude systematic search 

map cost ratio path annealing udpga vs problem size edges 
map cost ratio path annealing udpga vs problem size edges algorithm timing comparisons map map yield similar results 
figures plots map 
important difference viewed fact time plots provide empirical evidence average time complexities large problem instances edges extrapolation 
path annealing timing requirements rise slowly linear function problem size 
reason behavior annealing algorithm random sampling mechanism annealing schedule large extent running time 
reason timing results cost ratio pa udpga map problem size edges cost ratio pa udpga map problem size edges vary problem size general length window sequences determines quickly locally optimal path 
longer ws require somewhat time 
larger problem instances generally optimize longer ws 

map udpga cpu time required vs problem size edges 
map path annealing cpu time required vs problem size edges cost ratio vs time ratio plots figures tests map map respectively reflect savings cpu time required path annealing 
points remain right axis time ratio correspond smallest problem instances 
note path annealing runs significantly improve optimal cost 
demonstrated problem size edges cpu time sec map udpga map path annealing problem size edges cpu time sec section usually indication udpga solutions optimal 
reason udpga overlooks true optimal solutions path annealing runs usually discover better solutions optimal returned udpga 
result points dip axis cost ratio 

map cost ratio vs time ratio path annealing udpga 
map cost ratio vs time ratio path annealing udpga visual inspection physical locations solution paths returned algorithms shows location shape annealing solution paths compare favorably udpga 
majority solution paths identical 
solutions slight physical differences little impact corresponding total path cost 
time ratio pa udpga cost ratio pa udpga map time ratio pa udpga map cost ratio pa udpga testing maps highly variable cost coefficients series tests determines path annealing performs maps generally hilly cost functions 
tests indicate kind performance expect model extremely complicated battlefield situations variety overlapping interacting cost coefficients 
recall map map map randomly assigned region cost coefficients drawn respectively sets 
general character map follows map uniformly choppy shallow local minima map choppy irregular deeper local minima map high cost peaks deep valleys deep local minima tests chosen udpga search algorithm 
modify path annealing schedule conduct thorough local search temperature raising reduction factor slightly 
start somewhat higher temperature delay onset freezing enable annealing algorithm climb deeper local minima 
new schedule cost initial solution expect larger numbers deeper local minima tax ability path annealing algorithm find solutions 
conjecture partially confirmed cost ratio vs plots figures 
path annealing solution quality map somewhat worse smoother maps see noticeable trend going map map points wander higher axis 
hand points axis indicate udpga difficulty finding true optimal solutions 
fix problem decrease value increase resolution 
execution time suffer udpga execution time square problem size 

map cost ratio vs time ratio path annealing udpga 
map cost ratio vs time ratio path annealing udpga 
map cost ratio vs time ratio path annealing udpga fact points left side axis right side cost ratio versus time ratio plots illustrates significant time advantage path annealing annealing schedule modified search thoroughly 
cost ratio pa udpga problem size map edges cost ratio pa udpga problem size map edges cost ratio pa udpga problem size map edges general rightward movement points cost coefficients varied 
time required path annealing depends annealing schedule problem instance rightward movement indicates reduction time required udpga cost functions 
attribute behavior increase number deep local minima effectiveness bounding ellipses 
recall algorithms conduct crude initial search initial solution 
udpga uses solution compute bounding ellipse prune large amount search space 
crude initial search locates deep local minimum bounding ellipse tight 
spreading points shows bounding ellipses small dramatically reduce udpga 
path annealing improved bound 
improvements reflected path annealing solution optimality cpu time requirements sensitive annealing schedule 
testing difficult problem instance final test path annealing behavior selected particular problem instance path annealing appears overlook globally optimal path fairly 
problem instance map start point goal point 
best midpoint path cost returned initial search weighted units udpga indicates optimal solution cost weighted units 
repeated runs discovered window sequences ws locally optimal path cost values range 
applied path annealing times problem instance 
freezing temperature reduction factor annealing chain length cutoff values fixed respectively 
different starting temperatures runs conducted starting temperature 
results summarized 
plot indicates percentage runs path annealing returns optimal path cost function starting temperature 
chart shows particular problem instance advantageous annealing lower starting temperature 
reason initial search returns midpoint path represents high speed corridor containing global optimum 
higher temperatures allow annealing process easily wander corridor 
recall map hilly relatively deep cost function valleys exist 
corridor corresponding initial solution decreasing temperature may prevent annealing returning 
cases annealing discover optimal solution inside corridor settle non optimal solution corridor 

percentage optimal solutions vs starting temperature behavior lends support concept referred tunneling 
basic concept tunneling locate set initial window sequences representing different high speed corridors permit annealing search corridor intensively starting lower temperature 
method reduces time necessary climb move corridors 
time devoted thorough searching high speed corridors potential contain optimal solutions 
particular problem instance provides indication wide range solutions path annealing settle 
represents list final solution costs sorted cost runs path annealing algorithm problem instance 
note starting temperatures vary path annealing globally optimal solution cost runs better solutions initial cost runs 
starting temperature solutions optimal 
final solution costs sorted cost runs path annealing particular problem instance start goal map 
new algorithm weighted region problem described efficient implementation provided experimental results performance 
algorithm clearly far superior popular technique currently grid wavefront propagation speed accuracy far superior reported performance recursive algorithm 
algorithm generally superior speed similar accuracy obvious algorithm problem udpga 
requires little space compared algorithms 
path annealing probabilistic algorithms guaranteed get optimal answer time impressive results demonstrated wide range test problems annealing parameters 
furthermore algorithm suited parallel implementation provide processing speed improvements 
clearly path annealing preferred way solve weighted region problem real world applications 
final path annealing solutions sorted cost cost globally optimal solution cost initial midpoint solution path cost 
aarts van laarhoven new polynomial time cooling schedule proc 
international conference computer aided design pp 


aarts korst simulated annealing boltzmann machines john wiley sons 

adam deutsch harrison hierarchical planner intelligent systems proc 
spie applications artificial intelligence ii vol 
pp 


alexander rowe path planning optimal path map construction homogeneous cost dimensional regions proc 
ieee international conference robotics automation 

lutton city traveling salesman problem statistical mechanics metropolis algorithm siam review vol 
pp 


approach traveling salesman problem efficient simulation algorithm journal optimization theory application vol 
pp 


collins golden simulated annealing annotated bibliography american journal mathematical management sciences vol 
pp 


defense mapping agency hunter special edition stock 
center washington 
application artificial intelligence automated route planning proc 
spie vol 
pp 


hajek tutorial survey theory applications simulated annealing proc 
th conference design control pp 


huang romeo sangiovanni vincentelli efficient general cooling schedule simulated annealing proc 
international conference computer aided design ieee pp 


johnson aragon mcgeoch schevon optimization simulated annealing experimental evaluation part graph partitioning operations research vol 
pp 


johnson aragon mcgeoch schevon optimization simulated annealing experimental evaluation part ii graph coloring number partitioning operations research 

stochastic approach path planning weighted region problem doctoral dissertation department computer science naval postgraduate school monterey ca 

kirkpatrick gelatt jr vecchi optimization simulated annealing science vol 
pp 


convergence annealing algorithm mathematical programming vol 
pp 


metropolis rosenbluth rosenbluth teller teller equation state calculations fast computing machines journal chemical physics vol 
pp 


mitchell planning shortest paths ph dissertation dept operations research stanford university ca 

mitchell papadimitriou weighted region problem proc 
rd annual symposium computational geometry pp 


mitchell papadimitriou weighted region problem finding shortest paths weighted planar subdivision journal acm vol 

sahni experiments simulated annealing proc 
nd design automation conference pp 


sahni simulated annealing combinatorial optimization proc 
rd design automation conference pp 


pearl heuristics intelligent search strategies computer problem solving addison wesley reading ma 

preparata computational geometry springer verlag 

flannery teukolsky numerical recipes press university cambridge 

solving class spatial reasoning problems minimal cost path planning cartesian plane tech 
report nps dept computer science naval postgraduate school monterey ca 

romeo sangiovanni vincentelli probabilistic hill climbing algorithms properties applications memorandum 
ucb erl erl college engineering university california berkeley ca 

romeo sangiovanni vincentelli research simulated annealing berkeley proc 
iccd pp 


ross planning minimum energy paths road environment anisotropic traversal costs motion constraints tech 
report nps dept computer science naval postgraduate school monterey ca 

rowe roads rivers obstacles optimal dimensional route planning linear features mobile agent international journal robotics research vol 


rowe efficient snell law method planning multiple dimensional irregular homogeneous cost regions international journal robotics research vol 


rowe plan fields real world uncertainty aaai workshop planning uncertain unpredictable changing environments stanford ca 

smith peng family local asynchronous iterative parallel procedures solving weighted region cost path problem santa barbara 

tovey simulated simulated annealing american journal mathematical management sciences vol 
pp 


van laarhoven aarts simulated annealing theory applications reidel publishing 
white concepts scale simulated annealing proc 
international conference computer design pp 


expert systems aid board mission management defense computing vol 
pp 


