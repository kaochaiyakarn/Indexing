understanding java stack inspection dan wallach edward felten cs princeton edu felten cs princeton edu secure internet programming laboratory department computer science princeton university current implementations java security decisions searching runtime call stack 
systems attractive security properties criticized dependent specific artifacts java implementation 
models stack inspection algorithm terms understood logic access control demonstrates stack inspection useful tool expressing managing complex trust relationships 
show access control decision stack inspection corresponds construction proof logic efficient decision procedure generating proofs 
examining decision procedure demonstrate statements logic equivalent expressed simpler form 
show finite number statements allowing represent security state system pushdown automaton 
show automaton may embedded java rewriting java classes pass additional argument procedure invoked 
call security passing style describe benefits previous stack inspection systems 
show logic allows describe straightforward design extending stack inspection remote procedure calls 
java language virtual machine wide variety applications web copyright ieee 
published proceedings may oakland california 
personal material permitted 
permission reprint republish material advertising promotional purposes creating new collective works resale redistribution servers lists reuse copyrighted component works obtained ieee 
contact manager copyrights permissions ieee service center lane box piscataway nj usa 
telephone intl 

browsers servers multi user chat systems muds agent systems commerce applications smart cards 
systems java simply better programming language java type safety prevent host bugs endemic programming 
systems java relied access control 
java promise initial hotjava web browser allow mutually code modules exist virtual machine secure controllable manner 
security problems way security java implementations improving java continued grow popularity 
implement java application runs untrusted code hotjava web browser java system libraries need way distinguish calls originating untrusted code restricted calls originating application allowed proceed subject access controls applied underlying operating system 
solve problem java runtime system exports interface allow security checking code examine runtime stack frames executing untrusted code allows security decisions runtime state stack 
number techniques may achieve goals stack inspection stack inspection proven quite attractive adopted major java vendors meet need provide flexible security policies rigid sandbox policy restricted non local code set privileges 
stack inspection useful technique allow highly trusted code operate full privileges help prevent common program bugs security holes 
stack inspection criticized implementation specific seemingly ad hoc definition restricts flexibility optimizing compiler hinders applicability languages 
address concerns model stack inspection belief logic designed abadi burrows lampson plotkin ablp logic reason access control 
logic derive alternate technique implementing stack inspection applicable java languages 
procedure applies remote procedure calls local ones 
organized follows 
section begins reviewing java stack inspection model 
section explains subset ablp logic 
section shows mapping stack inspection ablp logic discusses equivalence 
section presents high performance portable procedure implement stack inspection 
section considers remote procedure calls shows stack inspection helps address remote procedure call security 
appendices list axioms ablp logic proofs theorems 
java stack inspection section describes java current stack inspection mechanism variations approach taken netscape communicator microsoft internet explorer sun java development kit 
stack inspection number useful security properties little prior art 
ways resembles dynamic variables free variables resolved caller environment environment function defined early versions lisp 
ways resembles notion effective user id unix current id inherited calling process set executable owner explicit setuid bit 
type safety encapsulation java security depends fundamentally type safety java language 
type safety guarantees program may treat pointers integers vice versa likewise may exceed allocated size array 
prevents arbitrary access memory possible software module encapsulate state declare variables procedures may accessed code outside 
allowing access carefully written entry points module apply access control checks attempts access state 
example java virtual machine protects access operating system calls way 
virtual approach incorrectly referred security vendor literature 
machine may directly system call code call virtual machine explicit entry points implement security checks 
simplified stack inspection explain stack inspection works consider simplified model stack inspection 
model principals system untrusted 
likewise privilege available full 
model resembles stack inspection system internally netscape navigator 
model stack frame labeled principal system frame executing code part virtual machine built libraries untrusted contains privilege flag may set system class chooses enable privileges explicitly stating wants dangerous 
untrusted class set privilege flag 
stack frame exits privilege flag automatically disappears 
procedures perform dangerous operation accessing file system network apply stack inspection algorithm decide access allowed 
stack inspection algorithm searches frames caller stack sequence newest oldest 
search terminates allowing access finding stack frame privilege flag 
search terminates forbidding access throwing exception finding untrusted stack frame gotten privilege flag 
stack inspection stack inspection algorithm current java systems thought generalization simple stack inspection model described 
having system untrusted principals principals may exist 
likewise having full privileges number specific privileges defined different principals may different degrees access system 
fundamental primitives necessary stack inspection ffl ffl ffl ffl java vendor different syntax primitives 
follows netscape syntax 
dangerous resource file system needs protected system sure call accessing code wishes call 
consults local policy see principal caller permitted permitted annotation current stack frame 
code may normally 
afterward code may call discard annotation may simply return causing annotation discarded stack frame 
creates stack annotation hide earlier enabled privilege simply removes annotations current frame 
generalized algorithm implementations shown 
algorithm searches frames caller stack sequence newest oldest 
search terminates allowing access finding stack frame appropriate enabled privilege annotation 
search terminates forbidding access throwing exception finding stack frame forbidden local policy accessing target explicitly disabled privileges 
note vendor takes different actions search reaches stack netscape denies permission sun microsoft allow 
access control logic model behavior java stack inspection ablp logic 
ablp logic allows reason believe true state system set axioms 
describe authentication authorization distributed systems taos appears match describing access control java 
subset full ablp logic describe 
readers want full description formal development logic see 
logic simple concepts principals conjunctions principals targets statements quotation authority 
ffl principal person organization entity may right take actions authorize actions 
addition entities programs cryptographic keys modeled principals 
target loop newest oldest stack frame foreach stackframe local policy forbids access target class executing stackframe throw stackframe enabled privilege target return allow access stackframe disabled privilege target throw reached fell stack netscape throw microsoft jj sun jdk return allow access java stack inspection algorithm 
ffl target represents resource wish protect 
loosely speaking target attach access control list 
targets traditionally known objects literature confusing talking object oriented language 
ffl statement kind utterance principal emit 
statements explicitly principal implicitly side effect actions principal takes 
words interpret says meaning act principal supports statement note saying true speaker false statement maliciously 
logic supports informal notion place faith statement trust speaker kind statement speaker authority 
common type statement looks says ok principal target statement means authorizing access target saying action ok speaker saying action allowed current context specifically ordering action take place 
ffl logic supports conjunctions principals 
specifically saying says saying says says ffl quotation allows principal statement principal says 
notation says pronounce quoting says equivalent says says 
statement consider utterance incorrect degree faith depend beliefs quotes guarantee said 
ffl authority principal allowing principal speak principal power 
statement pronounced speaks means statement assume supports statement 
authority note operator represent group membership member group say meaning exercise rights granted appendix gives full list axioms logic 
subset ablp logic omit operators defined ablp need 
mapping java ablp describe mapping stack privilege calls stack inspection algorithm ablp logic 
principals java code digitally signed private key shipped virtual machine run 
signer public key signer public key infrastructure generate proof statement signer signer 
signer digital signature code code interpreted signer says code signer 
equations implies code signer assume sound cryptographic protocols ignore extremely possibility adversary successfully guess private key 
code invoked generates stack frame frame 
virtual machine assumes frame speaks code executing frame code transitivity derived equation implies frame signer define set valid frame signer statements 
call frame credentials 
note code signed principal 
case code stack frames speak signers 
simplify discussion examples single signers theory supports multiple signers extra difficulty 
targets recall resources wish protect called targets 
target create dummy principal name identical target 
dummy principals statements various principals may speak 
target statement ok means access allowed context 
axiom targets says ok oe ok says allow access 
targets defined relation services offered operating system underlying java virtual machine jvm 
operating system point view jvm single process system calls coming jvm performed authority jvm principal user running jvm 
jvm responsibility allow system call justification issuing system call jvm authority 
model support intuition requiring jvm prove ablp logic system call authorized suitable principal 
setting policy standard access matrix keep track principals permission access targets 
vm java virtual machine define avm set statements form principal target 
informally avm means local policy vm allows access call avm access credentials virtual machine vm 
ok says ok ok says ok says ok ok example interaction stack frames 
rectangle represents stack frame 
stack frame labeled name 
example stack frame call written inside rectangle 
frame written belief set call 
stacks java program executing treat stack frame principal 
point time stack frame set statements believes 
refer belief set write describe beliefs come 
starting program program starts need set belief set initial stack frame netscape model fg 
sun microsoft models fok 
correspond netscape initial unprivileged state sun microsoft initial privileged state 
enabling privileges stack frame calls target really saying authorizes access target 
represent simply adding ok calling procedure stack frame procedure call creates new stack frame side effect creation tells beliefs 
tells statement statement says added bg disabling reverting privileges stack frame choose disable privileges 
call asks disable privilege access target implemented giving frame new belief set consists old belief set statements says ok removed 
handled similar manner giving frame new belief set equal belief set originally 
treatment bit inelegant best 
example shows example rules action 
fg 
calls adds statement ok created tells ok initially ff says ok calls adds ok initially contains says ok says ok 
calls belief deleted initially contains says ok 
calls adds ok checking privileges making system call invoking dangerous operation java virtual machine calls sure requested operation authorized 
returns true statement ok derived avm belief set frame called 
define vm virtual machine frame running 
define vm call environment frame goal determine frame invoking oe ok 
questions generally undecidable ablp logic efficient decision procedure gives correct answer subset logic 
implements decision procedure 
decision procedure takes arguments environment target decision procedure examines statements divides classes 
ffl class statements form ok target 
ffl class statements form atomic principals 
ffl class statements form delta delta delta says ok atomic principal target 
decision procedure examines class statements 
equal ok decision procedure terminates returns true 
decision procedure uses class statements construct directed graph call speaks graph graph edge class statement decision procedure examines class statements time 
examining statement delta delta delta says ok decision procedure terminates returns true ffl path speaks graph ffl decision procedure examines class statements success terminates returns false 
theorem termination decision procedure terminates 
theorem soundness decision procedure returns true invoked stack frame exists proof ablp logic oe ok 
proofs theorems appear appendix conjecture completeness decision procedure returns false invoked stack frame proof ablp logic statement oe ok 
believe conjecture true presently complete proof 
conjecture false legitimate access may denied 
result theorem access improperly granted 
conjecture true java stack inspection access control decision procedure proving statements subset ablp logic mutually equivalent 
theorem equivalence stack inspection decision procedure described equivalent java stack inspection algorithm section 
proof theorem appears appendix differences number cases java implementations differ model described 
minor differences effect strength model 
extension groups natural extend model allowing definition groups 
ablp logic group represented principal membership group represented saying member speaks group 
deployed java systems groups ways simplify process defining policy 
microsoft system defines security zones groups principals 
user administrator divide principals groups names local intranet internet define policies group basis 
netscape defines macro targets groups targets 
typical macro target called typical game privileges 
macro target speak privileges network games typically need 
sun system general notion targets target imply 
fact target required define implies procedure ask target implies particular target 
handled simple extension model 
extension threads java multi threaded language meaning multiple threads control multiple stacks exist concurrently 
new thread created netscape system frame new stack begins empty belief set 
sun microsoft systems frame stack new thread told belief set stack frame created thread exactly way happens normal procedure call 
optimization enabling privilege model section differs somewhat netscape implementation stack inspection stack frame successfully call local access credentials include restriction imposed netscape related user interface necessary formulation statement says ok sun jdk implementation closer model 
optimization frame credentials java implementations treat stack frames code separate principals 
track public key signed code call frame principal 
saw section stack frame prove stack frame speaks public key signed code 
practice stack frame code speaks principal public key 
likewise access control policies represented directly terms public keys need separately track principal public key speaks 
result java implementations say principal stack frame exactly public key signed frame code 
means java implementations internal notion frame credentials 
improved implementation addition improving understanding stack inspection model decision procedure help find efficient implementations stack inspection 
improve performance ways 
show evolution belief sets represented finite pushdown automaton opens variety efficient implementation techniques 
second describe security passing style efficient convenient integration pushdown automaton state program 
belief sets automata simplify representation belief sets making observations decision procedure 

interchanging positions principals quoting chain affect outcome decision procedure 

atomic principal replacing statement affect result decision procedure 
observations easily proven follow directly structure decision procedure 
follows affecting result decision procedure rewrite belief canonical form atomic principal appears atomic principals appear canonical order 
rewriting beliefs canonical form discard duplicate beliefs belief set 
set principals finite set targets finite principal target may mentioned canonical form belief finite set possible canonical form beliefs 
follows simple argument finite number canonical form belief sets may exist 
represent evolution stack frame belief set finite automaton 
stack frames created destroyed lifo order execution thread represented finite pushdown automaton calling procedure corresponds push operation state transition returning procedure corresponds pop operation correspond state transitions representing system automaton advantages 
allows analysis tools model checkers derive properties particular policies 
admits variety efficient implementation techniques lazy construction state set advanced data structures 
security passing style implementation discussed far disadvantage security state tracked separately rest program state 
means subsystems security subsystem code execution subsystem separate semantics separate implementations pushdown stacks coexisting java virtual machine jvm 
improve situation implementing security mechanisms terms existing jvm mechanisms 
adding extra implicit argument procedure 
extra argument encodes security state finite state representation belief set procedure stack frame 
eliminates need separate pushdown stack security states 
dub approach security passing style analogy continuation passing style transformation technique compilers replaces explicit pushdown stack implicitly passed procedure arguments 
note security passing style implemented rewriting code loaded system add extra parameter procedures procedure calls rewrite privilege manipulation operations equivalent operations security state 
straightforward implement java bytecode bytecode format contains information rewriting possible 
required 
implement need remember security state stack frame created 
encode information finite state store stack doing push operation procedure call 
main advantage security passing style program rewritten longer needs special security functionality jvm 
rewritten program consists ordinary java bytecode executed jvm knows stack inspection 
advantages including portability efficiency 
main performance benefit jvm standard compiler optimizations dead code elimination constant propagation remove unused security tracking code inlining tail recursion elimination reduce procedure call overhead 
advantage security passing style lets express stack inspection model existing semantics java language requiring additional possibly incompatible definition semantics security mechanisms 
security passing style lets easily transplant stack inspection idea language systems 
currently implementing security passing style rewriting bytecode load time tool 
rewriter trusted module add jvm 
full description security passing style implications programming language implementations appear 
remote procedure calls advantage security passing style suggests implementation strategy remote procedure call rpc security 
simple translation security passing style rpc case security passing style modifications works rpcs 
rpc security received deal attention literature 
prevailing styles security capabilities access control lists 
systems support simple principals 
systems support complex principals mechanisms express principals relatively unwieldy 
section discusses extend java stack inspection model rpcs 
principal uses ablp logic reasoning access control distributed systems customary ablp model network communication derive straightforward extension model case rpc 
channels machines establish encrypted channel machine proves knows specific private key corresponds known public key 
side sends message encrypted channel model statement sender session key write says sender session key statement 
discussed section public key infrastructure session key establishment protocol establish speaks principal sent message 
order extend java stack inspection rpcs rpc call transmit belief set rpc caller rpc callee 
caller beliefs sent channel established caller virtual machine belief caller frame arrives callee side cvm says cvm cryptographic key speaks caller virtual machine 
stack frame executes rpc callee initial belief set consisting arriving statements 
note framework supports intuition remote caller allowed access resources caller virtual machine trustworthy 
beliefs transmitted network arrive statements caller virtual machine properly key callee statements trusts caller virtual machine 
strategy fits security passing style 
think transmitted belief set representation caller security state pass security state net translate belief set canonical form arrival destination translate back security state 
issue deal 
rpc caller belief set expressed terms caller stack frames correct beliefs caller useful callee callee know caller side stack frames 
address issue caller sends belief network caller replaces stack frame principal principal key signed code 
running unsigned code anyway beliefs regarding statements safely discarded 
presents example 
java stack inspection algorithm executes callee machine access control decision exactly local case 
dealing malicious callers interesting question attacker accomplish sending false misleading statements channel 
caller virtual machine malicious may send beliefs wants provided correct format 
regardless beliefs sent belief arrives callee statement caller ok says ok ok vm says ok vm vm vm example interaction stack frames remote procedure call 
rectangle represents stack frame 
stack frame labeled name belief set call 
larger rounded rectangles represent separate java virtual machines dotted arrow represents channel remote procedure call 
virtual machine 
callee trust caller statements convince callee allow access 
suppose malicious caller virtual machine mc wants cause access target callee 
powerful belief mc send support attempt simply ok arrive callee mc says ok 
note statement mc lying mc entitled add ok belief set 
lie mc tell powerful true statement lying help mc gain access powerful thing mc ask authority access dealing malicious code trustworthy caller malicious code trustworthy caller cause new problems 
malicious code add ok belief set belief transmitted correctly callee 
callee allow access trusts malicious code access result occurred malicious code running directly callee 
matches intuition proper cryptography authentication confidentiality integrity communication ignore machine boundaries communicating processes trust platforms running 
commercial java applications need execute untrusted code applets 
order allow sufficiently expressive security policies granting different privileges code signed different principals latest java implementations support runtime technically mc send belief false stronger assume protocol transmitting beliefs allow 
mechanism search call stack code different privileges decide call stack configuration authorized access protected resource 
formalization java stack inspection logic developed abadi burrows lampson plotkin 
model demonstrated java access control decisions correspond proving statements ablp logic 
reduced stack inspection model finite pushdown automaton described implement automaton efficiently security passing style 
extended model apply remote procedure calls ablp expression model suggest novel implementation java secure rpc system 
implementation rpc system model gives greater confidence system useful sound 
acknowledgments martn abadi andrew appel dirk balfanz drew dean anonymous referees comments suggestions presentation 
andrew appel coined term security passing style convinced importance technique suggested state machine implementation ideas 
supported donations intel microsoft sun microsystems bellcore merrill lynch 
edward felten supported part nsf national young investigator award alfred sloan fellowship 
abadi burrows lampson plotkin calculus access control distributed systems 
acm transactions program ming languages systems sept 
birrell nelson owicki wobber network objects 
software practice experience dec 
cohen chase kaminsky automatic program transformation 
proc 
usenix technical symposium june 
appear 
dean felten wallach java security hotjava netscape 
proceedings ieee symposium security privacy oakland california may pp 

gong secure identity capability system 
proceedings ieee symposium security privacy oakland california may pp 

gong implementing protection domains java development kit 
internet society symposium network distributed system security san diego california mar internet society 
gosling joy steele java language specification 
addison wesley reading massachusetts 
hu dce security programming 
reilly associates sebastopol california july 
lampson abadi burrows wobber authentication distributed systems theory practice 
acm transactions computer systems nov 
lampson protection 
proceedings fifth princeton symposium information sciences systems princeton university mar pp 

reprinted operating systems review jan pp 

lindholm yellin java virtual machine specification 
addison wesley reading massachusetts 
mccarthy edwards hart levin lisp programmer manual nd ed 
computation center research laboratory electronics massachusetts institute technology cambridge massachusetts 
mcgraw felten java security hostile applets holes 
john wiley sons new york new york 
microsoft 
trust security java 
redmond washington apr 
www microsoft com java security htm 
netscape communications ration 
capabilities classes 
mountain view california aug 
developer netscape com library documentation capabilities index html 
object management group 
common secure interoperability july 
omg document number orbos 
evolving security model java navigator navigator netscape communications mountain view california aug 
developer netscape com library security html 
steele rabbit compiler scheme 
tech 
rep ai tr mit cambridge ma 
tanenbaum mullender van renesse sparse capabilities distributed operating system 
th international conference distributed computing systems cambridge massachusetts may pp 

van doorn abadi burrows wobber secure network objects 
proceedings ieee symposium security privacy oakland california may 
wallach balfanz dean felten extensible security architectures java 
proceedings sixteenth acm symposium operating system principles saint malo france oct pp 

wobber abadi burrows lampson authentication taos operating system 
acm transactions computer systems feb 
ablp logic list subset axioms ablp logic 
omit axioms delegation roles exceptions necessary discuss java stack inspection 
axioms statements instance theorem propositional logic true ablp 
oe says says oe oe says says principal axioms principals says says says says says says oe says says associative 
distributes arguments 
says oe proofs section proves theorems section 
theorem termination decision procedure terminates 
proof result follows directly fact bounded cardinality 
implies loop algorithm bounded number iterations clearly amount done iteration bounded 
theorem soundness decision procedure returns true invoked stack frame exists proof ablp logic oe ok 
lemma path speaks graph oe 
proof assumption path speaks graph order path exist know statements gamma members transitive implies oe proof theorem cases decision procedure return true 

decision procedure returns true iterating class statements 
occurs decision procedure finds statement ok case ok follows trivially 
decision procedure returns true iterating class statements 
case know decision procedure class statement form delta delta delta says ok path speaks graph follows lemma follows oe delta delta delta says ok applying equation repeatedly directly derive oe ok 
theorem equivalence stack inspection decision procedure described section equivalent java stack inspection algorithm section 
proof java stack inspection algorithm formal definition 
treat evolution system inductively focus primitives 
induction number steps taken step procedure call operation 
clarity ignore existence procedure return operations proof easily extended accommodate 
assume netscape semantics 
simple adjustment base case prove equivalence decision procedure sun microsoft semantics 
base case base case steps taken 
case stack inspection system single stack frame privilege annotation ablp model stack frame belief set empty 
base case fail systems 
inductive step assume steps taken situation call yield result models 
cases step stack inspection system adds enabled privilege annotation current stack frame 
ablp model adds ok current belief set 
followed operation operation succeed systems new stack annotation new belief 
followed new stack annotation belief irrelevant fall back inductive hypothesis show systems give result 
procedure call step principal procedure called 
stack inspection system adds stack unannotated stack frame belonging ablp system prepends says front statement current belief set 
occurs sub cases 
sub case trusted stack inspection case fail current frame trusted access ablp case decision procedure deny access belief starts says speak second sub case trusted stack inspection case stack search ignore current frame proceed frame stack 
ablp case says front belief effect 
systems give answer step 
inductive hypothesis systems give result 

