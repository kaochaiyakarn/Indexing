domain specific meta languages eric van wyk oxford university computing laboratory eric van wyk comlab ox ac uk different problem domains implementation language processing tools 
manipulation textual data generating code creation inspection environments type checking analysis dependency graphs program optimization parallelization 
domain specific languages solve sub problems reduce complexity tools specification 
argue point realm attribute grammars domain specific meta languages write attribute definitions 

attribute grammars provide convenient specification mechanism defining language processing tools 
attaches attribute definitions productions context free grammar define attribute values language constructs production 
specification declarative nicely decomposed production grammar attribute grammars complex repetitive difficult write read debug 
technique addressing problems comes realization specification language processing tools different problem domains 
claim domain specific languages express solutions sub problems reduce complexity tools specification 
framework attribute grammars means attribute definitions written domain specific languages appropriate problems addressed attributes 
call languages domain specific meta languages 
approach different attribute grammar systems single meta language attribute definitions 
common task language translators generate target language text text set error messages 
macro processors provide convenient mechanism generating textual output adopt macro language domain funded microsoft research 
permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
copyright acm specific meta language text attributes show example translator simple language 
translators generate complex internal data structures queried language translation 
type checking internal representation program defined types generated environment structure created associating type variable names types 
specific domain definition attributes solving sub problem benefit written domain specific language 
describe simplified version language example 
area domain specific languages useful program optimization parallelization 
process represents source program form flow graphs data dependency graphs program dependency graphs 
domain language built graph construction analysis operations simply solution specifications 
distinct problem sub domains language processing tool specification natural specify solutions domain specific languages 
languages raise level abstraction providing data types control structures specific items domain 
frees specification writer dealing implementation details leaves free concentrate problem solution encoding general purpose language 
domain specific meta languages definitions attributes significantly simplify attribute grammar specifications 
aim research explore possible meta languages defining various semantic aspects programming language extensions called intentions intentional programming ip system development microsoft research 
intention seen production definitions appropriate attributes allow added existing language framework 
aim ip allow applications programmers extend programming languages meet particular needs problem domain 
programmer defines new intention syntactic representation semantics specified 
interested exploring different meta languages programmer find useful defining intentions 
system described provides convenient mechanism designing implementing meta languages 
describe related simplifying specifications language processors section 
section provides motivating language translation problem 
section give solution form attribute grammar uses meta languages defining attributes general purpose language similar attribute grammar systems macro language defining textual target code simple language designed specify environment 
section briefly describes domain specific meta languages easily implemented integrated system 
section provides discussion 

related techniques designed address problems complexity attribute grammars 
domain specific meta languages conjunction techniques 
common complaint attribute grammars described modular manner 
attribute coupled grammars ganzinger increase modularity attribute grammars recognizing translation process broken distinct phases mapping source program series intermediate representations final target language representation generated 
attribute coupled grammars specify translation phase attribute grammar generates intermediate form expected phase 
attribute grammars usually specified attribute definitions production non terminals written production 
decomposing attribute grammars production decomposed attribute writing definitions related attributes 
attribute grammar systems provide methods grouping attribute definitions attribute textually regrouping definitions production analysis attribute specifications 
grouping definitions attribute allows concentrate specific sub problem solved attribute definitions 
method proposed dueck cormack attribute definition templates automatically generate attribute definitions 
definition templates associated production pattern matched productions context free grammar 
match attribute definitions generated templates matching information 
eli provides similar facilities allows different types mechanisms attribute values remote nodes tree definition restricted referencing attributes parent child nodes 
macro processors implement language translators 
essentially defines macro construct source language 
body macro expands translation construct target language 
macro processors provide powerful extensions perform rudimentary semantic analysis tasks source program 
tanenbaum instance symbol table facilities ml macro processor hold type run time address program variables source program 
macro processors rarely single solution writing language translators extensions provided handling non textual data inadequate complex semantics modern languages 
macro processors appropriate mechanism generating textual attribute values processes domains written appropriate language 

motivating example motivating example shall implement translator toy language scope rules algol 
scope rules state identifier visible smallest enclosing scope inner blocks define identifier concrete syntax language program program 
program block 
list block 
stmtlist 
slist stmtlist 
stmt 
slist stmtlist 
stmtlist 
stmt 
local stmt 
block 
dec stmt 
dec id stmt 
id example program may program dec dec dec inner block refers inner declaration inner block refers declaration outer block 
map language simple stack machine language instructions identifier statements marking entrance exit block 
block entrance enter statement labelled lexical level block number local variables defined block 
exit block exit statement labelled lexical level 
variable indicated ref statement labelled lexical level offset variable declaration 
offset variable declaration order appears block 
example program mapped target program enter ref ref enter ref ref exit ref exit 
meta languages section provide specification attribute grammar maps code toy language stack machine code uses domain specific meta languages definitions attributes 
attribute grammar attributes code synthesized text attribute defining target code level inherited integer attribute defining lexical block nesting level env inherited attribute defining environment queried operations id level id offset give respectively level offset variable declaration 
third operation number locals returns number local variable declarations block 
solution aspect oriented manner attribute definitions grouped attribute aspect production 
definitions attribute appear single file 
defining attributes different meta languages grouping attribute production specification easier read 
simple example attach semantic functions concrete syntax rules 
allows generate parser directly grammar rules avoid mapping concrete syntax 
definitions level attribute written general purpose meta language introduce basic framework notations 
language essentially haskell naming conventions referencing attributes associated terminal nonterminal symbols 
similar attribute definition languages systems 
definitions code attributes domain specific macro language 
definitions compare favorably equivalent definitions written general purpose meta language 
definitions environment attribute env domain specific language 
lexical level level attribute inherited attribute defines lexical level blocks source program 
inherited attribute default copy rule copies inherited attribute values parent child nodes rule specified 
need write attribute definitions program local productions level haskell program program 
program block 
block level local stmt 
block 
block level stmt level line gives name attribute defined level domain specific language write definitions haskell meta language 
attributes nonterminal referenced name nonterminal angle brackets dot 
attribute name 
nonterminal production name name non terminal followed integer indicating order production 
target code section macros domain specific meta language define code attribute 
macros write commands build textual value attribute writes macro body expanded plugging attribute values terminals nonterminals holes macro body 
holes formal parameters macro just macro attribute values terminals nonterminals written style 
macros define synthesized attribute nonterminal left hand side production drop attribute left keyword seen text production production seen body macro defining attribute value 
group attribute definitions attribute definitions single file define attribute confusion 
specification unary productions program slist local shown simply copy code attribute single child parent 
code text list block 
stmtlist 
enter block level stmtlist env stmtlist level stmtlist code exit block level slist stmtlist 
stmtlist 
stmt 
stmtlist code stmt code stmt 
id ref stmt env id lex stmt env id lex dec stmt 
dec id definition code attribute block 
nonterminal list rule line macro shown enter non blank line rule 
compile time macro expanded filling formal parameters attribute values 
generated text begins enter statement followed lines code statement list indented spaces shown macro concludes exit statement 
text value code attribute block 
note backslash line continuation symbol 
enter statement needs number local variables block ref statement needs level offset referenced variable take parameters stored directly attributes 
values extracted data structures stored attributes need common interface language macro extract required information 
naturally choose interface general purpose meta language section 
inside macro phrases language written expressions return desired value copied expanded text macro 
list macro phrase stmtlist env stmtlist level written general purpose attribute definition language number locals function compute number local variables defined block level statement list 
similarly macro uses common interface language extract environment stmt env level offset identifier lexeme id lex 
macro language provides domain specific meta language clearly better choice general purpose specification language 
written definition code attribute slist production general purpose meta language looked string concatenation 
slist stmtlist 
stmtlist 
stmt 
stmtlist code stmtlist code stmt code definition list daunting list block 
stmtlist 
block code enter show block level show stmtlist env stmtlist level stmtlist code show block level difficult comprehend domain specific macro versions see exactly structure target code text want generate 
general language definition study code understand target code 
show function converts value textual representation 
significant advantage macro specification language white space spaces tabs new lines text attribute values inserted automatically expanded text 
inserts white space parameters empty string 
example dec rule generates empty string code attribute value stmt 
slist rule declaration want new line formal parameters macro body inserted generated code 
lead spurious blank lines final target code 
macro language ensures happen 
adding feature general purpose specifications complicated 
macro meta language lets write specifications say exactly want target code look shields complexities deal general purpose specification language 
environment section define environment attribute env domain specific language tailored example 
language define environment block allows remote contributions declared local variables environment 
env inherited attribute default copy rule copy attribute value parents children 
need specify attribute definitions env rules program list 
env program program 
program block 
block env empty environment list block 
stmtlist 
stmtlist env add locals stmtlist level block env dec stmt 
dec id contribute id lex locals rules define environment outer block empty environment inner blocks adding ordered list local variables specific lexical level enclosing environment 
contribute statement dec rule adds lexeme identifier id lex list local variables added environment enclosing block 
id level id offset operations query environment identifier name search set local variables environment decreasing lexical level identifier 
contribute statement similar remote attribute access methods eli allows avoid creating attribute pass local variable names nearest enclosing block tree 
scenes meta language may implement contribute defining hidden synthesized attribute pass local variables definition enclosing environment concern person writing attribute definitions 
simply seeking admittedly simple example raise level abstraction dealing environment 

tools set tools evaluate attribute grammars domain specific meta languages map attribute grammar specifications lazy functional program written haskell 
generated haskell program composed set functions embody structure functionality attribute grammar 
functions composed generate single function translates input program desired attribute values 
fact attribute grammars seen style writing lazy functional programs 
special importance fact attribute grammars written style haskell type system verifies attributes defined exactly lazy evaluation strategy haskell schedules evaluation attributes 
generated haskell program written aspect oriented style code defining particular attribute held single extensible record structure called aspect 
aspect type checked parameterized separately compiled 
aspect definitions attribute combined generate haskell function mapping input programs attribute values 
attribute grammar specifications decomposed attribute attribute definitions individual attribute kept separate file straight forward write translators map attribute definitions desired haskell aspect code merged final target program 
addition haskell code attribute main set enclosing functions generated translator productions combine attribute definition functions main function implementing attribute grammar 
functions generated translator maps set productions set functions 
heart system collection loosely integrated translators maps source language syntax main structural code attribute grammar domain specific meta language maps attributes defined language haskell code implementation 
generated functions combined single haskell module implements language processing tool defined attribute grammar 
meta language requires translator implementation natural define implement translators set tools 
meta language define attribute grammar specifying translation attribute definitions written meta language haskell function implementation 
meta language processors enclosing syntactic structure sketched aspect 



spec 

spec 
spec 
rulename 


construct contains entire attribute specification associated production 
meta language complete control syntax semantics components 
automatically generate meta language processors specifications difficult extend meta language new features build completely new environment attribute 
easy add new meta language translators system integrate new domain specific meta languages attribute grammar system 

discussion attribute definitions aspect oriented approach specifications easier read visible attribute computations written language 
grouped production may see attribute computations written different languages 
may confusing reflects fact reading attribute grammars grouped production confusing allowed separate concerns 
note put definitions attribute written different meta language specification file 
required separate completely done example 
cases attributes rely quite closely helpful store definitions file 
usually appropriate balance grouping attribute definitions file spreading individual files 

adams 
modular grammars programming language prototyping 
phd thesis university southampton department electronics computer science uk 
aho sethi ullman 
compilers principles techniques tools 
addison wesley reading ma 
bird 
functional programming haskell 
international series computer science 
prentice hall 
brown 
macro processor aid implementation 
computer journal 
de moor peyton jones van wyk 
aspect oriented compilers 
international symposium generative component software engineering 
dueck cormack 
modular attribute grammars 
computer journal 
ferrante ottenstein warren 
program dependence graph optimization 
acm transactions programming languages systems july 
ganzinger giegerich 
attribute coupled grammars 
sigplan notices 
gray levi sloane waite 
eli complete flexible compiler construction system 
communications acm 
johnsson 
attribute grammars functional programming paradigm 
kahn editor functional programming languages computer architecture volume lecture notes computer science pages 
springer verlag 
jourdan parigot juli le 
design implementation evaluation fnc attribute grammar system 
conference programming languages design implementation pages 
published acm sigplan notices 
kastens zimmermann 
gag practical compiler generator volume lecture notes computer science 
springer verlag 
kastens waite 
modularity reusability attribute grammars 
acta informatica 
knuth 
semantics context free languages 
mathematical systems theory 
koskimies 
compiler construction attribute grammars 
sigplan notices 
kuiper swierstra 
attribute grammars derive efficient functional programs 
computing science netherlands csn 
available ftp ftp cs ruu nl pub ruu cs cs ps gz 
lee 
macro processors compiler code generators 
master thesis university iowa department computer science iowa city ia 
reps teitelbaum 
synthesizer generator system constructing language editors 
texts monographs computer science 
springerverlag 

intentional programming innovation legacy age 
ifip working group 
available url www research 
microsoft com ip 
tanenbaum 
general purpose poor man compiler compiler 
ieee transactions software engineering june 
van wyk 
semantic processing macro processors 
phd thesis university iowa iowa city iowa usa july 
waite 
building mobile programming system 
computer journal february 
wilkes 
experiment self compiling compiler simple list processing language 
annual review automatic programming 
