th acm symposium operating systems principles sosp published operating systems review dec progress regulation low importance processes john douceur william bolosky microsoft research redmond wa bolosky microsoft com ms manners mechanism employs progress regulation prevent resource contention processes degrading performance high importance processes 
mechanism assumes resource contention degrades performance high importance process progress low importance process 
ms manners detects contention monitoring progress process inferring resource contention drop progress rate 
technique recognizes contention system resource long performance impact contending processes roughly symmetric 
ms manners employs statistical mechanisms deal stochastic progress measurements automatically target progress rate manual tuning required supports multiple progress metrics applications perform distinct tasks multiple low importance processes prevent measurement interference 
experiments low importance applications show ms manners reduce degradation processes order magnitude 
categories subject descriptors operating systems process management scheduling probability statistics mathematical software general terms algorithms measurement performance additional key words phrases progress feedback symmetric resource contention process priority 
developed method prevents low importance processes interfering performance processes 
interference generally caused contention shared resources method relieves contention suspending low importance process detects resource contention 
method detects resource contention means feedback control system monitors progress low importance application regards drop progress rate indication resource contention 
refer control system ms manners determines low importance process defer high importance process 
need method arose development sis groveler microsoft windows system utility finds merges duplicate files file system 
needed mechanism allow utility idle resources degrading processes 
groveler bound cpu priority insufficient control resource usage 
windows kernel support priority resources wish modify kernel 
groveler runs server environments continuously running applications unpredictable workload schedules prior solutions aware 
method worked groveler expected longrunning low importance applications backup system disk defragmenter file virus scanner housekeeping utilities 
re packaged method general application different forms library called low importance applications executable program externally monitors regulates low importance applications report progress standard windows nt mechanism 
performance measurements indicate ms manners effective reducing impact low importance processes high importance processes 
example low importance applications ms manners reduced performance hit high importance applications order magnitude running low importance process increased execution time concurrent process applying ms manners reduced increase 
sections review previous approaches low importance process regulation explain assumptions limitations approach describe technique detail experimental results effectiveness 

previous approaches approaches low importance process regulation proposed implemented scheduling specific times running screen scanning permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
sosp kiawah island sc acm microsoft windows windows nt registered trademarks trademarks microsoft united states countries 
system process queue various resource specific methods 
approaches vary considerably generality complexity 
approach strictly better merely design point problem space 
system activity coarsely predictable simple approach schedule low importance process run expected periods little system activity middle night 
technique fails exploit unanticipated idle times fails regulate periods unanticipated activity 
system activity predictably periodic technique mechanism dynamically determine idle periods needed 
method determining idle periods approach screen activate low importance process absence keyboard mouse activity 
approach relies assumption lack user input indicates system unused 
assumption may reasonable desktop workstation valid server busy rarely receives direct user input 
approach run low importance processes high importance processes system process queue 
high importance process may process queue consuming significant resources 
example database server application run continuously require resources workload 
scenario approach allow low importance process run 
time honored method cpu priority 
assigned low cpu priority low importance process prevented cpu normal priority process 
works cpu limiting resource 
resource disk memory limiting factor cpu cpu priority ineffective 
priority extended resources cpu 
general requires modifying os kernel 
example stealth process scheduler prioritizes cpu virtual memory file system cache 
extension limited specific resources techniques resource specific 
similar general approach performance isolation supports various allocation sharing policies multiple resources 
low importance process entitled zero resources shares resources unused processes 
performance isolation framework general resource requires specific isolation technique 
resource specific approach comes domain real time systems 
resource kernels schedule multiple system resources concurrent processes 
processes explicit reservations resources actual resource usage monitored enforced kernel 
approach resource independent requires kernel modifications 
works server environments high importance applications run continuously receive workloads unpredictable times 
features differentiate previous approaches 

assumptions limitations earlier approaches described ms manners relies assumptions primarily symmetry performance impact resource contention accessibility progress measures accurately reflect resource consumption 
driving assumption performance impact resource contention roughly symmetric 
process substantially degrading process low importance process substantially degraded method observe effect appropriately suspend low importance process 
hand degradation process small observe impact high importance process small low importance process continue 
assumption symmetry violated operating system aim fairness sharing resources processes 
example disk scheduler favor small transfers large ones process making small disk transfers degrade performance high importance process making large disk transfers experiencing reciprocal degradation 
noteworthy example resource asymmetry physical memory 
combined memory requirement processes exceeds available physical memory operating systems tend drastically favor process order avoid page thrashing 
reasonable behavior invalidates key assumption important resource 
general case solution problem resource asymmetry 
resources priority problem lowering resource priority low importance process 
second critical assumption regulator access progress metric low importance process 
means application export progress metrics standard interface application modified indicate progress library call 
malicious application provide false progress information order avoid regulated 
method assumes progress information correct reasonably accurate attempt detect suspend malicious processes 
assumptions ms manners limitations follow premises 
automatically tuning parameters see section requires significant periods resource idleness 
resources continually busy determine correct parameter values 
significant idle periods calibration require hours days execution begins heavily loaded system 
calibration started relatively idle system time shortened minutes 
limitation generally restricts progress regulation processes long running 
ms manners completely resource independent discriminate various classes resources internal external machine 
example web crawler progress rate degrade network loaded triggering ms manners suspend process may desired 
solving problem requires making ms manners modifying application adjust progress metrics external delays 
fixes oppose goals resource independence 
ms manners regulate unmodified applications see section may suspend process holding shared system resource lock exclusive file handle 
resource remain unavailable high importance process requires causing priority inversion 
applications modified ms manners directly suspension occurs defined points application code problem avoided holding resource point 
unmodified applications solution 

architectural components illustrates application environment standard operating system multiple applications may run concurrently 
system resources may exclusively single application may shared application 
shared resource limited resource process degrade performance processes resource 
user explicitly designates applications having low importance ms manners control system prevents process resources normal high importance application 
control system monitors progress low importance application 
control system sees drop rate progress infers application experiencing resource contention suspends execution 
illustrates main architectural components ms manners 
periodically low importance process provides indication progress library call standard reporting interface 
rate calculator combines progress indication temporal information system clock determine process progress rate 
progress rate purposes fed target analyzes progress rate measurements determine target rate process 
second progress rate fed rate comparator compares target rate target 
rate comparator judges current progress rate target progress rate 
judgment purposes fed suspension time calculator maintains suspension time value calculator increases value progress judged target decreases value progress judged target 
second judgment fed execution regulator progress target regulator suspends process suspension time 
sections describe components 
implementation details see section 
core components ms manners core components measuring application rate progress comparing rate target rate suspending process rate falls target 
section describes components simplest form sophisticated versions described subsequent sections 
periodically times known control system acquires metrics application progress 
moment ignore mechanism progress metrics conveyed application control system 
mechanisms described section 
progress metrics expressed virtually unit meaningful easily tracked application 
example file compressor indicate quantity data compressed content indexer indicate number directory entries scanned 
section discusses properties progress metrics 
fairly frequently milliseconds process suspended promptly necessary 
testpoint ms manners calculates elapsed time progress low importance application resource high importance application control system resource resource resource execution control progress feedback 
application environment low importance application rate calculator target suspension time calculator execution regulator clock progress rate time execution control target rate time 
system architecture previous testpoint 
calculates progress rate ratio values 
ms manners compares progress rate target progress rate 
target rate progress rate expected application contending resources see section 
actual progress rate target ms manners judges progress rate judges poor 
progress rate control system allows process continue immediately 
progress rate poor control system suspends process period time allowing continue 
execution stopped entirely way determine okay continue 
time process suspended depends successive indicate poor progress 
testpoint indicates poor progress suspension time doubled set limit 
testpoint indicates progress process allowed continue suspension time restored initial value 
exponential increase low importance process adjust time scale processes execution patterns 
short periods activity high importance process low importance process resume promptly long periods activity low importance process infrequent execution probes 
limit suspension time places bound worst case resumption time 
components necessary progress regulation sufficient 
example progress measurements stochastic directly comparing target rate may yield incorrect judgment progress rate 
components include method determining target progress rate 
rate calculation cope application progress naturally measured dimensions 
multiple low importance threads execute time interfere progress measurements common resources 
sections describe additional components deal complications 
statistical rate comparison progress rate fluctuate due factors variable timing coarse progress measures clock granularity 
control system directly compares progress rate target rate may frequently incorrect progress rate judgments causing inappropriate suspension execution process 
ms manners copes noisy measurements statistical rate comparator 
making immediate judgment progress rate comparator continues collect progress rate measurements data confidently judgment 
comparator feeds progress rate measurement statistical hypothesis test see section 
test determines progress rate target rate target rate data judgment 
case process allowed continue testpoint current value suspension time preserved 
manner process repeatedly allowed continue progress rate repeatedly measured hypothesis test determines data judgment 
point judgment reset suspension time poor judgment double suspension time suspend process 
technique assumes variability application measured progress rate serially correlated 
example disk bound application may unloaded system encounter lengthy seeks 
long lengthy seeks interspersed short seeks statistical comparator correctly recognize progress rate 
correlated series long seeks inappropriately trigger suspension 
automatic target calibration progress regulation requires target progress rate regulated process 
ideally target rate represents expected progress rate process contending resources 
ideal target rate may change time properties resources change example file fragmentation may reduce ideal target rate process reads files 
necessary track changes ideal target rate time 
determine ideal target rate process run resource contention 
require user low importance application perform calibration procedure process runs system 
burden user especially calibration re run periodically track changes resource characteristics 
ms manners automatically establishes target rate exponential average measured progress rate testpoint see section 
clearly approach tracks changes time clear reflects progress 
key insight averaging procedure gives equal weight testpoint progress rate measurement 
process usually suspended progress rate poor reflect poor progress 
process usually executing progress rate reflect progress 
average tends converge rate progress 
procedure self requires way get started 
method begins allowing process execute briefly true regulation 
time averages progress rate measurements bootstrap calibration procedure 
initial execution performed relatively idle system initial value target rate close ideal target rate correct regulation immediately commence 
process experiences resource contention initial execution target progress rate set low 
eventually low importance process executes resource contention increase target rate mean time control system prevent process running 
deal problem ms manners limits maximum execution rate period reducing impact processes 
major weakness approach may significant length time resources target rate may set correctly 
weakness inherent approach require user establish idle system 
calibration procedure relies suspension behavior regulated process 
process critical choose ignore regulation 
example utility archives old files disk space scarce choose execute contends high importance process 
process runs aggressively regulator dictates subsamples progress data ignoring measurements executed thread regulation strictly 
preserve target values restarts calibration data maintained persistently see section 
multiple progress metrics progress applications easily measured single dimension 
applications execute sequential phases different type progress phase 
example garbage collector progress measured mark rate mark phase sweep rate sweep phase 
furthermore applications progress multiple dimensions concurrently 
example content indexer measure progress bytes content scanned count indices added database 
long term separate metrics may positively correlated type progress may precursor scanning indexing content indexer 
short term separate metrics may negatively correlated time spent progressing axis time spent progressing 
applications single scalar value accurately reflects progress rate 
method includes ways dealing multiple progress metrics 
applications execute discrete phases testpoint occur specific phase 
phase known method compares progress rate measured testpoint target rate specific phase testpoint occurs 
garbage collector example testpoint occurs mark phase measured mark rate compared target mark rate testpoint occurs sweep phase measured sweep rate compared target sweep rate 
target rate calibrated separately 
number phase small statistical rate comparator may accrue sufficient data phase judgment 
comparator unable combine measurements separate phases control system able judge progress rate process regulated 
hypothesis test described section compares sample separate target combines separate comparisons single judgment 
enables rate comparison span multiple phases permitting regulation execution phases brief 
second way dealing multiple progress metrics applications progress multiple dimensions concurrently phases available control system 
accommodate situation change way progress rates compared 
section stated control system calculates progress rate measured progress measured duration previous testpoint compares calculated rate target rate 
modification calculate target duration measured progress target rate compare calculated duration measured duration testpoint 
single progress metric formulations produce equivalent results allows extension support multiple progress metrics 
multiple progress metrics control system calculates target duration follows progress metric combined corresponding target rate yield target duration progress metric 
separate target durations added produce target duration compared measured duration testpoint 
example consider content indexer scans data target rate kb sec adds indices database target rate indices sec 
testpoint indicates scanned kb data added indices database milliseconds target durations msec scanning msec indexing 
sum durations milliseconds target duration 
rate comparator compares value actual duration milliseconds determines progress rate 
method assumes time progress multiple dimensions equal sum times progress separate dimension 
assumption rendered incorrect overlapping operations 
establishes target rate progress metric 
phased execution straightforward testpoint reports progress single metric 
multiple concurrent progress uses linear regression infer contribution metric duration see section particular uses technique called ridge regression thwarted highly correlated metrics 
exponentially averaging progress rate time system exponentially averages state information needed linear regression 
multiple threads processes multiple threads processes run concurrently low importance process defer process 
high importance process contending system resources low importance processes share resources fairly 
multiple low importance processes threads execute concurrently contend resources reducing progress rates causing control system suspend 
mutually induced suspension binary exponential back lead unfairness instability fully suspending processes idle system 
address problem ms manners allows low importance process thread execute time 
multiple low importance processes threads run concurrently control system multiplexes allowing execute testpoint suspending executing 
time multiplex isolation somewhat inefficient prevents processes overlapping usage different resources 
processes critical consider acceptable cost 
thread regulated separately 
progress rate comparator thread threads different system resources implicitly coupled 
example disk computer high importance process low importance thread disk suspended thread disk may 
subset application threads designated low importance 
unregulated threads process time multiplex isolated reduce progress rate regulated threads contend resources 
contention reduce target rate interfere progress regulation 

progress metrics progress regulation unit progress meaningful application regulated 
method assumes drop progress rate indicates resource contention progress metric regulation approximately constant target rate life application 
example numerical solver estimated solution accuracy poor metric rate change decreases solution converges 
better metric example count iterated solution steps expected rate change constant barring interference due resource contention 
important metrics provide sufficient coverage progress application 
example consider file archive utility scans files archives older certain date 
sufficient regulate count files scanned rate drop scanning old files time consumed archiving 
similarly sufficient regulate count files archived rate drop scanning new files time consumed scanning archiving 
help convey choices progress metrics various applications representative list low importance applications profitably progress regulation suggested set progress metrics file compressor indicate quantity data compresses 
account resources consumed reading data writing data compressing data 
indicate count files compresses overhead opening closing file significant relative reading writing compressing 
content indexer indicate quantity content scans count indices adds database 
file archive utility mentioned indicate count files scans count files archives indicate quantity data archives resource cost byte resource cost file 
seti home program downloads analyzes radio telescope data currently runs screen 
progress regulation indicating quantity data transfers number computation steps performs 
backup system indicate quantity data uploads 
account disk network resources 
virus scanner indicate count files quantity data scans 
synchronization engine distributed file system coda scans files uploads copies modified certain date 
indicate count files scans count files uploads quantity data uploads 
disk defragmenter described section indicates count file blocks moves count move operations performs 
single instance store groveler described section finds merges duplicate files 
reports count read operations performs quantity data reads 

mathematical details sections provide mathematical details statistical hypothesis test statistical comparator exponential averaging technique automatic calibration procedure linear regression technique automatic calibration procedure multiple progress metrics 
statistical hypothesis test statistical comparator described section statistical hypothesis test determine progress rate target rate target rate data judgment 
comparator uses paired sample sign test non parametric hypothesis test 
nonparametric test assumptions distribution data robust 
test depends sample size count sample rates corresponding target values count sample durations target values 
greater threshold value function control parameter progress rate judged poor 
different threshold value function control parameter progress rate judged 
falls threshold values progress rate indeterminate current data 
control parameters determine sensitivity comparator 
parameter probability making type error judging progress rate poor 
parameter probability making type ii error judging progress rate poor 
increasing improves system responsiveness decreasing improves system efficacy increasing relative improves system efficiency follows increasing allows faster reaction poor progress negatively related minimum number samples sign test recognize poor progress log decreasing reduces performance impact processes definition probability marginally poor progress rate judged incorrectly 
increasing relative improves stability process execution progress process suspension state birth death system isomorphic bulk service queue infinite group size arrival rate bulk service rate steady state probability judgments poor progress occurred judgment progress probability judgment yield poor progress 
required judgment suspension time mean steadystate fraction time suspended ab ab system unstable increasing relative increases duty cycle background process progress rate 
selected values experiments 
theoretically testpoint milliseconds values yield reaction time seconds performance degradation low importance process 
empirically see section values demonstrate prompt reaction high importance activity stable suspension state fairly low impact high importance process 
exponential averaging automatic calibration procedure described section uses exponential averaging track changes target progress rate time 
time testpoint occurs duration previous testpoint amount progress dp previous testpoint update target progress rate rule dp value determined equation selected effect values expected time maximum suspension time time constant smoothing short term variations progress large maintain steady target rate 
time constant tracking long term changes target progress rate small respond changes resource performance characteristics 
performance experiments set 
parameters smooth short term variation time constant minutes track long term changes time constant days 
linear regression averaging method dealing multiple progress metrics described section uses linear regression infer contributions separate progress metrics duration 
track changes target progress rates time exponentially averages state information needed linear regression 
multiple metric calibration procedure determines target rate values progress metric assumes duration testpoint equals sum times type progress times inverse target progress rate times measured progress dp calibration procedure performs squares linear regression equation estimate regression coefficients equation zero offset regression constrained bias term 
minimum data needed solve regression known sufficient statistics case matrix vector defined follows track changes resource performance characteristics time exponentially averages sufficient statistics 
testpoint initialization phase sufficient statistics updated rules dp dp dp progress metrics correlated may exhibit linear dependence causes singularity numerical instability regression 
deal uses ridge regression adds small linear offset main diagonal normal equation matrix solving normal equations parameter controls trade solution accuracy numerical stability 
empirical testing perturbs solution equal order error floating point round ridge regression offset 

implementation developed implementations progress regulation windows nt 
ms manners library requires single function call perform testpoint processing 
program externally regulates unmodified program reports progress standard interface 
internal process regulation packaged ms manners library simple interface 
single function call performs testpoint processing 
calling interface testpoint function follows testpoint int index int count int metrics application calls testpoint function progress metrics index value set metrics 
time function called returns okay application thread proceed blocking necessary 
function called rapid succession lightweight test causes return immediately sufficient time passed justify expense testpoint processing 
application executes sequential phases call testpoint function different metric set phase code 
application progresses multiple dimensions concurrently pass progress metric testpoint function call 
time testpoint function called new metric set allocates initializes internal data structure set explicit initialization function need called application 
ms manners library special actions need taken multi threaded application 
library controls time multiplex isolation threads see section 
calling testpoint function distinct metric index thread isolates progress threads 
call testpoint function spins supervisor thread 
call subsequent testpoint calls record index progress metrics thread local storage alert supervisor thread wait supervisor signal thread proceed 
thread judged progressing poorly eligible continue suspension time elapsed 
supervisor selects eligible thread proceed decay usage scheduling share execution time regulated threads 
threads eligible continue supervisor sleeps 
ms manners library provides function call thread set priority relative threads 
supervisor favors high priority threads low priority threads 
supervisor thread spins process spawns process 
communicates process supervisor thread shared memory 
releasing thread supervisor waits permission shares execution time processes 
ms manners library sets threshold duration successive 
regulated thread call testpoint threshold thread presumed hung thread selected execute 
hung thread calls testpoint ms manners discards progress rate information testpoint 
time threshold deals large external delays dialogue user failed network connection 
external delays factored progress rate cause process suspend indefinitely 
library persistently maintains target rates regulated application 
time testpoint function called scans directory running program executable file 
finds matching initialization file initializes target rates file 
periodically termination target rate information written file preserve targets executions 
external process regulation built program called externally regulates unmodified application 
monitors application progress windows nt performance counters standard means programs export measurements aid performance tuning 
performance counters exported housekeeping programs long running system utilities 
suspends application suspending threads 
obtain handles application threads uses windows program debugging interface back door access internal application state 
interface primarily debuggers program development optimized programs 
periodically suspends process threads polls performance counters calls ms manners testpoint function resumes threads 
real need suspend process poll experiments see section show periodic interruptions cause little performance reduction 
automatically adjusts polling frequency track rate performance counter updates 
fraction polling intervals change progress exceeds threshold increases polling interval 
fraction falls threshold decreases interval subject lower limit 

example applications ms manners regulate application programs disk defragmenter windows system utility called sis groveler 
disk defragmenter progressively refines disk layout series passes examines layout rearranges blocks files improve physical locality disk 
relocation operation defragmenter calls ms manners testpoint function non orthogonal measures progress count file blocks moved count move operations 
defragmenter creates separate execution thread disk partition thread calls testpoint function pair metrics specific partition 
sis groveler component windows remote install server ris 
ris allows system administrator define set standard windows installations store images installations server 
client machine set downloading installation image ris server 
installation may files common installations single instance store sis component eliminates duplicates replacing original file link common store file holds contents original files 
duplicate files discovered sis groveler 
groveler maintains database information files disk including signature file contents 
periodically scans file system change journal log records changes contents file system 
new modified files groveler reads file contents computes new signature searches database matching files merges duplicates finds 
disk partition groveler creates threads lightweight thread scanning file system change journal main thread reading comparing file contents 
thread regulated order prevent change journal overflowing 
thread periodically non orthogonal progress measures count read operations performed volume data read 
groveler tells ms manners give highest priority thread working disk free space 

performance results results sections show high importance process degraded due resource contention low importance process ms manners reduce degradation order magnitude albeit expense performance loss process 
low importance process running idle system ms manners negligible effect performance 
analysis dynamic application behavior illustrates necessity statistical comparator judging progress rate 
experiment multi threaded low importance process demonstrates efficacy time multiplex isolation 
test shows automatic calibration mechanism converges target value close ideal initial calibration performed heavily loaded system 
experimental setup test machine pentium ii mhz personal computer mb ram pci bus uw scsi controller connected seagate st disk drives px ts cd rom drive 
operating system beta release microsoft windows 
tested ms manners representative pairs low high importance processes 
processes disk defragmenter sis groveler described section corresponding high importance processes microsoft sql server microsoft office professional setup respectively 
chose application sets typical examples realistic server environments disk defragmenter reasonable low importance application run database server installation large application office professional typical operation performed remote install server running sis groveler 
established fixed workloads application 
configured disk defragmenter halt pass file system starting fixed disk layout 
provided groveler identical directory trees scan 
configured office setup complete installation cd find fast component interfered performance measurements 
drove sql server initial sequence tpc database benchmark performance results interpreted claims oltp performance sql server 
experiments calibration test established target progress rate running application idle system initial calibration phase completed 
zeroed probation period normal regulated operation immediately commence 
illustrate results box plots precise robust means displaying result variances deviation error bars 
example 
waist box indicates median value shoulders indicate upper quartile hips indicate lower quartile 
vertical line top box extends horizontal bar indicating maximum data value upper cutoff upper quartile plus height box 
similarly line bottom box extends bar indicating minimum data value greater lower cutoff lower quartile minus height box 
data outside cutoffs represented points 
contending processes experiment tested impact sql server performance running disk defragmenter 
sql server running started defragmenter waited seconds applied database workload 
measured time defragmenter complete file system pass time sql server execute workload 
performed test progress regulation defragmenter 
control measured time sql server complete workload defragmenter running 
repeated test times 
illustrates impact disk defragmenter sql server 
non system process executing sql server takes median time seconds complete workload 
disk defragmenter runs concurrently unregulated process resource contention increases median completion time 
reducing defragmenter cpu priority appreciable difference 
defragmenter employs ms manners directly program sql server median completion time merely greater defragmenter running 
words ms manners reduces performance degradation order magnitude 
second experiment tested impact office setup performance running sis groveler 
started groveler waited seconds clicked continue button final office setup configuration box 
measured time groveler execute workload time office setup complete installation 
performed test progress regulation groveler 
control measured time office setup complete workload groveler running 
experiment automated repeated test times 
illustrates performance impact sis groveler office setup 
non system process executing office setup takes median time seconds complete workload 
groveler runs concurrently unregulated process resource contention increases median completion time 
reducing groveler cpu priority appreciable difference 
groveler employs ms manners office setup median completion time merely greater groveler running 
previous experiment ms manners reduces performance degradation nearly order magnitude 
low importance process experiment tested impact ms manners disk defragmenter idle system 
high importance process running started defragmenter measured time complete file system pass 
performed test progress regulation defragmenter repeated test times 
illustrates impact progress regulation defragmenter 
note axis origin zero zero scale execution times indistinguishable 
high importance process running median execution time defragmenter unregulated cpu priority ms manners running status disk defragmenter 
database workload run time unregulated cpu priority ms manners running status sis groveler 
office setup time seconds irrespective running normally low cpu priority employing ms manners 
running control median execution time increases due suspension resumption process threads testpoint 
illustrates result experiment section 
database workload runs seconds running parallel defragmenter increase defragmenter run time seconds due resource sharing 
increase run time seconds greater due inefficiency resource contention 
defragmenter run ms manners run time increases seconds greater due suspension sql server running plus suspension overshoot described section 
dynamic behavior explain ms manners improves performance high importance application illustrates dynamic execution behavior disk defragmenter employing ms manners 
trace taken arbitrary sample run experiment described section 
axis run time defragmenter execution 
axis value defragmenter executing zero blocked testpoint function 
vertical dotted lines indicate start completion sql server workload test 
shows initially sql server workload defragmenter runs normally 
seconds sql server begins executing consuming resources defragmenter progress 
ms manners senses reduction progress rate suspends defragmenter exponentially increasing intervals 
ms manners execution probe shortly sql server completes workload exponential back keeps defragmenter suspended seconds longer necessary 
shows nearly worst case 
execution probe occurred just completion sql server workload just suspension overshoot avoided 
outliers ms manners column suggest overshoots may avoided occasionally 
show necessity statistical comparator illustrates progress disk defragmenter ms manners 
trace taken sample run 
axis run time 
axis indicates defragmenter progress rate expressed normalized target duration calculated second intervals 
values greater indicate progress target rate values indicate progress target rate 
shows brief period unregulated cpu priority ms manners status disk defragmenter time contended unregulated cpu priority ms manners status disk defragmenter 
time database workload run time seconds process execution binary 
defragmenter duty database workload run time seconds 
progress database workload seconds long period seconds defragmenter progressing target rate 
individual progress rate measurements fall target rate 
ms manners suspend process measurement target execution highly erratic 
statistical comparator correctly ignores measurements low progress rate properly balanced measurements high progress rate providing relatively smooth execution pattern shown 
thread isolation experiment tested time multiplex isolation multiple low importance threads 
provided sis groveler workloads separate disk drives labeled shared common scsi controller 
drive free space available groveler set thread priority higher ms manners library call 
dummy applications generate intensive disk cpu loads 
illustrates dynamic execution behavior threads sis groveler 
axis run time 
axis divided sections indicating high value corresponding task executing low value 
top curves indicate dummy loads drives 
middle curve indicates dummy cpu load 
bottom curves indicate groveler threads drives 
shows ms manners favors execution drive thread higher priority 
dummy load runs drive ms manners shifts execution drive thread 
cpu drives loaded threads exponentially suspended 
groveler cpu priority set low responsive cpu load 
noticeable perturbation execution patterns part due exponential back part due incomplete isolation drives common scsi controller 
target calibration final experiment tested behavior automatic calibration mechanism 
prior calibration target progress rate started disk defragmenter allowed operate hours 
set probation period see section hours 
absence real data regarding daily load typical server system generated time varying bursty disk load dummy application 
burst times seconds minutes separated similarly fluctuating idle periods 
mean load varied sinusoidal pattern simulate cyclical pattern system activity 
illustrate worst case started defragmenter continuous burst disk activity initially computes target rate far low 
illustrates results calibration test 
axis run time 
faint solid line shows mean value bursty disk load plotted left axis dark solid line shows calibrating target plotted right axis 
disk defragmenter progress metrics dark solid line aggregates single value reflects target duration calculated equation mean progress entire run 
ideal target duration msec 
shows target duration initially calculated nearly msec due contention dummy process 
hours target dropped msec dropped msec 
slowly approaches ideal value 
dotted line shows defragmenter activity plotted left axis 
hours process probation activity level constrained 
second hours defragmenter theoretically active time dummy process idle time 
defragmenter active time due suspension overshoot see section 
suspension causes defragmenter execute inefficiently job preventing interference el seconds cpu 
groveler thread duty run time hours mean disk load defragmenter activity target duration mean disk load defragmenter activity target duration 
defragmenter target calibration dummy process defragmenter execution occurs dummy idle dummy active 

related basic idea progress regulation processes inspired feedback regulation control congestion tcp 
tcp regards packet losses indication congestion responds reducing transmission rate 
closely analogous regarding reduction progress rate indication contention responding suspending process execution 
tcp goal quite different tcp uses exponential suspension linear resumption senders share network bandwidth fairly 
ms manners uses exponential suspension instantaneous resumption low importance process adjust time scale processes execution patterns goal utterly deferring processes 
primary strengths ms manners ability automatically calibrate target rate frees application designer tedious process manual tuning enables target dynamically track sustained changes system performance time 
number researchers explored automatic tuning calibration mechanisms areas cpu scheduling database tuning operating system policies andersen investigated automatic tuning cpu scheduling algorithms optimization simulated evolution concluded tuning computationally intensive performed real time 
comfort project investigated automatically tuning configuration operational parameters database system improve performance 
implemented control system dynamically adjusts multi programming level avoid lock thrashing implemented self tuning memory manager exploit inter transaction locality 
vino extensible operating system employs self monitoring data correlation situ simulation estimate effects policy changes 
changes proposed heuristics attempt minimize performance degradation causes paging disk wait poor code layout interrupt latency lock contention 
ms manners employs exponential averaging sufficient statistics target calibration 
common technique discipline artificial intelligence various contexts example spiegelhalter lauritzen nowlan 

focus addressing limitations progress regulation assumption symmetric performance impact resource contention 
primary assumption technique especially hard requirement remove 
significant limitation need application cooperation measuring progress 
method resource independent applicationspecific insofar progress measures depend high level task application performs 
complete list resources application attempt measure application resource consumption indication application progress 
resource usage poor indicator progress resource consumption application progress positively negatively correlated 
example low importance application starts contending high importance application cpu cycles cpu usage decrease 
contrast contending cache lines cpu usage increase 
program monitors application progress windows nt performance counters 
alternate method obtaining progress information application tap progress bar visual meter computer monitor denotes progress lengthy operation 
progress bar common control usable application code modified relay progress updates receives application 
anecdotal evidence suggests progress bar poor metric actual progress program 
suspect part due need aggregate progress multiple dimensions single metric 
method thwarted malicious program provides false progress information 
possibly detect instances performing sanity checks progress metrics relative measurable system resource usage 
automatic calibration procedure requires significant time periods resource 
develop new calibration technique determines target rates fewer measurements 
method fails discriminate resources internal external machine 
strategies determining physical location resource sacrificing main benefits resource independence 
need solution priority inversion 
techniques presumably specific operating system automatically detect application holding shared resource 
may value investigating alternate schemes suspension resumption 
tests exponential suspension instantaneous resumption appear strategies efficient robust 
non parametric hypothesis test statistical comparator requires minimum number samples judgment 
parametric test responsive require modeling progress rate distribution progress metric application 

progress regulation demonstrably effective technique preventing low importance processes interfering performance high importance processes 
resource independent requires kernel modifications works server environments continuously running applications unpredictable workload schedules 
progress regulation requires fair amount computational machinery including statistical apparatus deal stochastic progress measurements calibration mechanism establish target progress rate mathematical inferencing separate effects multiple progress metrics orchestration infrastructure prevent measurement interference multiple low importance processes threads 
appropriate packaging incorporating progress regulation application straightforward 
ms manners library requires adding single function call low importance program 
program monitors suspends process externally program modifications required long process reports progress standard mechanism 
control system application needs know system resources 
owe scott cedric assistance sis groveler charles levine assistance ms sql server john platt help ridge regression laura bain rich anna little invaluable research assistance rick rashid richard draves marvin theimer venkat padmanabhan galen hunt brian sosp program committee especially shepherd jeff mogul suggestions improving presentation 
andersen 
tuning computer cpu scheduling algorithms evolutionary programming rd conf 
evolutionary prog world scientific singapore feb 
anderson wertheimer 
search intelligence home ssl berkeley edu 
bishop 
neural networks pattern recognition 
oxford press 
freund 
mathematical statistics th ed 
prentice hall 
goodman greenberg madras march 
stability binary exponential backoff acm july 
harrison 
mathematica experimental data analyst 
wolfram research champaign il 
hellerstein 
achieving service rate objectives decay usage scheduling ieee trans 
sw eng 
aug 
jacobson 
congestion avoidance control 
sigcomm aug 
kistler satyanarayanan 
disconnected operation coda file system 
tocs feb 
kleinrock 
queueing systems volume theory john wiley sons 
krueger chawla 
stealth distributed scheduler 
th intl 
distr 
comp 
sys 
lampson 
hints computer system design ieee software jan 
microsoft 

microsoft developer network msdn library jul 
microsoft 
debugging 
msdn jul 
microsoft 
performance data helper 
msdn jul 
microsoft 
thread local storage 
msdn jul 
microsoft 
common controls 
msdn jul 
nowlan 
soft competitive adaptation neural network learning algorithms fitting statistical mixtures ph thesis carnegie mellon university 
cs 
rajkumar 
resource kernels resource centric approach realtime multimedia systems spie jan 
ramakrishnan yang 
ethernet capture effect analysis solution th conf 
local computer networks oct 
rosenkrantz 
theorems instability exponential back protocol th models computer system performance dec 
seltzer small 
self monitoring operating systems th hotos may 
silberschatz 
operating system concepts th ed 
addison wesley 
smith seltzer 
file system aging increasing relevance file system benchmarks 
sigmetrics jun 
spiegelhalter lauritzen 
sequential updating conditional probabilities directed graphical structures networks 

dynamic process management avoiding development program job producing animation frames 
th pacific conf 
computer graphics applications ieee computer soc oct 
verghese gupta rosenblum 
performance isolation sharing isolation shared memory multiprocessors 
th asplos oct 
weikum hasse 
comfort automatic tuning project information systems jul 
worthington ganger patt wilkes 
line extraction scsi disk drive parameters 
sigmetrics may 
