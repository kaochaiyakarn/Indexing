representing control presence class continuations robert hieb kent dybvig carl bruggeman indiana university computer science department lindley hall bloomington languages scheme smalltalk provide continuations class data objects challenge efficient implementation 
allocating activation records heap proven unsatisfactory increased frame linkage costs increased garbage collection overhead decreased locality 
simply allocating activation records stack copying continuation created results unbounded copying overhead 
describes new approach stack allocation require stack copied continuation created allows place small upper bound amount copied continuation reinstated 
new approach faster naive stack allocation approach suffer problems associated unbounded copying 
programs approach worst constant factor slower heap allocation approach typical programs significantly faster 
important additional benefit recovery stack overflow handled gracefully efficiently 
stacks traditionally implement activation records local environments languages support recursive procedure calls 
stacks allow rapid allocation deallocation call frames material supported part national science foundation number ccr 
appear proceedings sigplan conference programming language design implementation 
efficient linkage calls returns 
modern architectures hierarchical memory stacks help maintain locality memory operations 
traditional stack management techniques inadequate modern languages 
language allow arbitrarily deep recursion means detecting recovering stack overflow necessary 
multiple control threads address space require multiple control stacks possible scatter stacks memory occupy bounded amount space 
complications result language provides means capturing storing control stacks scheme class continuations smalltalk context objects 
need support continuations contexts objects indefinite extent precludes simple stack implementation call frames 
continuation represents rest computation point 
rest computation determined current chain activation records continuation captured current chain activation records preserved continuation reinstated current chain activation records replaced previously captured chain computation continue point continuation captured 
continuation may reinstated continuation accomplished simply switching control back old stack area overwrite saved activation records 
stack overflow traditionally handled locating stack area memory extended indefinitely 
standard approach locate heap memory stack memory grow 
system trap stack overflow 
multiple execution threads require multiple stacks stacks easily extended overflow occurs may possible memory system trap stack overflow 
simply restricting size stack area control thread automatically programmer control unsatisfactory languages support encourage recursive programs 
stack overflow underflow thought continuation capture reinstatement surprising method allows efficient continuation operations provides means handling stack overflow underflow efficiently 
simplest way allow continuation operations multiple control threads time avoid stack overflow problems allocate activation records linked list heap 
approach virtue simplicity price increased allocation expensive linkage procedure call return 
show stacks implement activation records way compatible continuation operations multiple control threads deep recursion 
approach allows small upper bound placed cost continuation operations stack overflow underflow recovery 
retaining benefits traditional stack management ordinary procedure calls returns adversely affected 
cost continuation operations greater heap model increased cost expensive procedure call interface 
important feature method stack copied continuation captured 
consequently capturing continuation efficient objects known dynamic extent stack allocated modified remain locations originally allocated 
copying small portion stack continuation reinstated reinstatement costs bounded small constant 
section provide background 
discuss importance class continuations review methods implementing 
section describe stack model 
section model develop techniques continuation capture restoration 
section show techniques handle stack overflow underflow efficient method detecting stack overflow absence hardware operating system support 
background stack management techniques implementing scheme machines operating systems 
scheme test bed techniques relies heavily procedure calls provides access continuations class objects 
fact conditionals procedure calls continuations control operations provided scheme 
looping accomplished tail recursive procedure calls support exception handling gotos provided continuations 
continuations scheme procedure objects represent remainder computation point computation 
procedure call continuation commonly abbreviated call cc allows program obtain current continuation 
procedure argument call cc creates continuation procedure passes argument procedure 
procedure created call cc represents continuation call call cc 
continuation procedure invoked returns argument continuation call call cc created 
essence argument passed continuation procedure returned result call call cc 
control passed call call cc invoking continuation merely results nonlocal exit 
control passed call call cc continuation may invoked result restart computation point system returned 
feature may implement interesting control structures including loops backtracking coroutines engines 
continuation procedure call control stack procedure activation records 
continuations nonlocal exits common lisp essence continuation object pointer control stack 
continuations outlive context capture continuation objects indefinite extent pointer stack sufficient 
control passes context continuation created stack may overwritten procedure activation records information required return continuation lost 
simplest way support continuation operations abandon reusable stack store activation records maintain activation records linked list heap see 
model previous activation records overwritten new activation record allocated call 
return activation record automatically deallocated continuation captured may needed 
storage manager reclaims record longer reachable 
chief advantage approach capture invocation continuation quick easy 
continuation may captured reinstated little cost ordinary procedure call 
current continuation 
heap model provides simplest method supporting constant time continuation operations 
activation record allocated heap linked current activation record call 
called procedure uses link restore old frame pointer returning 
continuation operations involve saving restoring pointer current frame 
need separate stack overflow detection recovery mechanism stack overflow simply special case heap overflow 
multiple control threads easily accommodated 
disadvantage ordinary procedure calls may slowed increased overhead caused allocating activation records heap complicated activation record linkages 
furthermore storage manager reclaim abandoned activation records 
appel points heap allocation associated cost garbage collection competitive stack allocation large physical memories 
argument fact copying collector takes time proportional amount retained data discarded data 
memory sufficiently large comparison amount retained data cost garbage collection insignificant 
fact assuming stack frame explicitly deallocated popped cost heap allocation operations stack allocation operations 
unfortunately argument may apply memory systems assumes arbitrarily large amounts memory penalty hierarchical memory systems caches virtual memory penalize programs large amounts memory high degree locality 
heap model frames contiguous memory frame pointer saved restored call resulting extra memory write read recursive call 
stack model see hand combine frame allocation deallocation linkage adjusting frame pointer small constant procedure call return 
heap model assume frame may captured part continuation frame reused modified 
stack model hand portions frame may reused local storage subordinate calls 
order preserve benefits stack management activation records implementors copy strategy 
copy strategy uses ordinary stack management techniques continuation captured invoked 
continuation captured stack copied heap pointer heap copy stored continuation structure 
continuation invoked stack image heap copied stack area treated ordinary stack activation records 
approach mcdermott suggests copying continuations control stack programs class continuations need pay cost supporting 
continuation operations relatively rare size stack usually quite small cost copying stack images continuation operations inordinately expensive 
possible construct programs cause naive copy model behave poorly cost continuation operation proportional size stack 
furthermore copies arbitrarily large continuation may fp stack control base top frame 
traditional stack model provides expensive frame linkage 
frames physically adjacent frame links maintained simple register adjustments 
continuation operations require time proportional size active portion stack amount time required effectively unbounded 
retained continuation captured saved repeatedly large amount memory may wasted resulting worse memory usage supposedly memory intensive heap model 
allocation reclamation stack inexpensive objects known dynamic extent survive call frame allocated allocated stack part call frame 
copy model sort stack allocation useful 
possible general retain pointers objects modify contents stack allocated may moved stack area heap 
devoted developing techniques allow stack model making continuations expensive 
instance optimistically control frames temper optimism stack cache limited size 
places bound worst case costs continuation capture reinstatement bounded amount memory copied 
top frame stack cache copied heap stack overflow essentially forcing continuation capture deep recursion possible 
direct relationship bound cost continuation operations bound depth recursion stack overflows 
handling stack overflow underflow expensive compared cost ordinary procedure calls small stack size lead substantial decrease performance recursive programs 
worst case bouncing phenomenon may occur 
program just recursive calls place stack verge overflow enters loop causes stack repeatedly overflow underflow worst case cost recursive procedure calls average case cost making calls expensive continuation operations 
method representing control threads limits amount memory copied continuation operations requiring small stack size results increased overflow underflow overhead programs continuations 
control stack model control stack represented linked list stack segments see 
stack segment structured true stack frames activation records frame procedure call 
stack record associated stack segment contains information stack segment including 
pointer base stack segment 
pointer stack record 
size stack segment 
return address topmost frame 
frame consists sequence machine words 
word base frame return address current active procedure 
words contain actual parameters procedure pointers cells heap containing actual base segment stack current segment stack record stack current ra fp return address argument local value local value argument top frame previous 
segmented stack model simple generalization traditional stack model 
implementing control stack linked list stack segments continuation operations bounded size top segment size entire control stack 
parameters parameters assignable 
possible pass return address arguments registers leaving hole frame return address placed called routine recursive call 
remaining words frame contain values local variables compiler temporaries partial frames procedure calls initiated completed 
frame pointer register fp points base current frame topmost stack segment 
separate stack pointer maintained point topmost word stack gap frame pointer topmost word 
create difficulties long stack purpose asynchronous interrupt handling 
frame pointer stack pointer simplifies argument local variable access eliminates register increments decrements support stack push pop operations 
savings important architectures risc architectures support auto increment auto decrement addressing modes 
explicit links formed frames stack 
compilers place current frame pointer stack frame adjusting frame pointer point new frame 
saved pointer dynamic link called routine reset frame pointer various tools exception handlers debuggers walk stack 
model frame pointer adjusted just prior procedure call point new frame adjusted called routine returns point back old frame 
order frame pointer point called routine frame return 
compiler generating code calling procedure keep track displacement start calling procedure frame start called procedure frame order adjust frame pointer call 
cases adjustment performed single instruction add subtract displacement frame pointer 
exception handlers debuggers tools need walk frames stack way get frame preceding frame 
continuation mechanism requires ability order find appropriate place split stack see section 
place explicit dynamic link compiler places word code stream contains size frame 
word placed immediately return point stack walkers return address find size stack frame see 
return address placed known frame location frame size effectively gives offset return base segment stack code fs fs instr instr fs instr ra ra fs fs top frame frame 
walking backwards stack segment straightforward 
return address field continuation stack record points instruction code stream preceded data word containing frame size 
frame size find base top frame return address stored 
return address find frame size frame find return address address current frame return address preceding frame 
scheme useful return address stored base frame need moved tail recursive calls 
assuming compiler generates instruction reset frame pointer immediately point return stack walker disassemble instruction determine frame size avoid storing frame size explicitly code stream 
complicate stack walker unnecessarily constrain compiler able move frame pointer directly base frame procedure call cases 
constraint return address placed constant offset frame relaxed storing actual offset code stream frame size 
continuation operations system initialized large stack segment associated stack record created 
initial stack segment large reasons stack overflow deeply recursive programs second continuation captures shorten stack 
time continuation captured see occupied portion current stack segment sealed current stack record converted continuation object adjusting size field storing current return address return address field 
return address current frame replaced address underflow handler see 
new stack record allocated serve current stack record 
base address word occupied portion old stack segment link address old stack record continuation size number words remaining old stack segment 
stack shortened time continuation captured 
creating continuation entail copying stack shorten current stack object eventually results stack overflow allocation new stack object see section 
continuation captured recursive procedure call saved stack segment contain exactly frame resulting list continuation objects essentially equivalent heap control stack 
current stack segment empty continuation captured changes current stack record link field current stack capture segment current stack record stack current segment current stack record stack current capture ra underflow underflow fp underflow fp ra captured continuation 
capturing continuation constant time operation segmented stack model 
current stack segment divided segments top frame 
bottom segment stack segment captured continuation top segment current stack segment 
record serves new continuation 
necessary implement tail recursion properly growth control stack occurs continuations created repeatedly tail recursive situation 
instance scheme function loop indefinitely calls tail recursively define lambda call cc lambda new link added control stack iteration call call cc control stack grow progressively longer program eventually run memory 
continuation complex see 
simplest case current stack segment overwritten stack segment continuation frame pointer adjusted point top frame copied segment 
current stack segment large new allocated 
unfortunately size saved stack segment bounded size initial stack segment 
stack segments allocated large chunks reduce frequency stack overflows segment copied cost continuation reinstatement bounded large amount 
prevented placing upper bound amount copied 
size saved stack segment equal bound entire segment copied 
segment split segments size top stack segment copy bound 
sufficient split single frame efficient split possible exceeding bound overhead splitting continuation initiating copy 
appropriate bound machine determined experimentation 
finding appropriate splitting point entails walking backwards continuation stack segment see adding frame exceed copy bound 
stack segment split way stack split continuation captured see 
base link pointers continuation stack record return address frame splitting point stored newly allocated stack record 
size field new current continuation current continuation fp fp new continuation ra top frame new continuation ra top frame top frame reinstatement reinstatement 
continuation reinstated contents stack segment continuation copied current stack segment 
size stack segment greater predetermined limit segment split segments see 
current stack segment large hold contents reinstated stack segment new stack segment allocated 
stack record set size stack segment splitting point 
new stack record stack link old stack record 
old stack record base pointer set splitting point size field set size stack segment splitting point 
return address frame replaced address underflow handler 
frame copied continuation reinstated amount copying bounded size frame bounded 
bound bound splitting continuations practice reasonable larger frames larger optimum splitting size unusual 
frame bound determines worst case cost copy bound determines average case cost continuation invocations 
order maintain bound frame size number arguments procedure amount storage necessary local bindings intermediate results limited 
extra arguments passed auxiliary data structure number local bindings limited converting local binding blocks unnamed procedures 
intermediate results pending calls operations stored linked list heap 
practice reasonably large frame bound conversions rarely necessary 
necessary special return attempted call frame bottom stack segment 
initial stack segment return address base segment address routine exits operating system 
segments address underflow handler stored base segment 
underflow handler simply continuation link field current stack record 
stack overflow heap model continuation allocation depth recursion limited amount available heap memory 
stack implementation control stack method ra underflow ra underflow underflow 
large stack segments split reinstated 
splitting point walking stack find frame gives largest value exceeding predetermined limit copying 
return address splitting point stored new stack record address underflow handler stored place 
stack overflow detection recovery necessary allow indefinite depth recursion 
stack overflow detected system known state overflow treated implicit continuation capture 
unfortunately detecting stack overflow inexpensively simple matter particularly goal portable implementation model 
furthermore detecting overflow part problem state system time overflow known completely computation continued new stack area allocated linked continuation containing previous area 
architectures stack overflow detection virtually cost free help memory management system 
stack located adjacent area memory writable exception generated stack attempts grow area 
approach especially compatible copy copy model continuation management permanently place stack cache suitable region memory 
model requires new stack areas allocated demand essential hardware operating system allow areas memory selectively marked read 
machines possible reliably generate memory faults means detecting stack overflow may possible recover stack overflow hardware operating system preserve state system 
particular may possible determine instruction caused overflow contents registers overflow occurred 
requirements met system create cost solution stack overflow detection problem 
process recovering stack overflow need extremely efficient 
system allows arbitrarily large stack areas suffer danger bouncing back forth overflow underflow arbitrarily large amounts computation done stack overflows amortize cost 
consequently efficiency host system memory management exception handlers issue 
unfortunately experience memory exceptions tenable means detecting stack overflow machines implemented scheme 
find reasonable way generate restore state system detected 
furthermore machines memory management system programmer time necessary implement maintain special system base segment current stack fp esp space call frames 
stack pointer esp points region actual stack 
region contain space call frames 
reserving room frames simplifies overflow check procedures recursive non tail calls eliminates overflow check procedures recursive calls 
machine may reasonable 
result turned explicit checks stack overflow detection 
challenge implement overflow checks minimal impact speed procedure calls 
implementation uses tactics minimize cost overflow detection 
test inexpensive possible 
second avoid test possible 
important part making test inexpensive avoid memory keeping pointer esp register see 
frame pointer fp register checking stack overflow requires simple register compare branch 
point esp constant amount actual stack area comparison take account expected frame size long exceed esp offset 
fact size frame bounded see section esp offset set overflow check need take account frame size 
cases avoid stack overflow check entirely 
esp offset larger large procedure uses bounded amount stack space need check overflow 
space extra frame maintained stack procedures recursive opposed tail recursive calls procedures recursive calls need check overflow 
result leaf routines routines form tight loop need check overflow 
additional stack overflow checks eliminated static analysis code 
procedures contain paths meet criteria eliminating stack checks procedure 
desirable delay stack check known recursive call long necessary repeat check 
second compiler determine stack space recursive calls 
called procedure uses known bounded amount stack space sum space requirements current frame size space reserved non checking procedures calling procedure need check stack overflow 
approach stack management supports continuation operations stack overflow recovery adversely affecting efficiency procedure calls returns 
creating continuation effi cient requiring creation small stack record adjustment small number fields existing stack record 
continuation requires copying saved stack segment current stack segment splitting continuation limit size copied segment 
stack overflow underflow recovery essentially identical continuation creation reinstatement 
various problems naive stack copying approaches supporting continuations solved approach 
continuation operations bounded stack overflow occurs infrequently overflow underflow bouncing avoided stack allocation possible data objects dynamic extent 
main advantage approach approach heap allocating linked list call frames procedure calls returns maintain explicit frame linkage information 
addition method memory intensive consuming heap space exhibiting greater locality 
result approach results smaller indirect costs garbage collection cache misses page faults 
approach suffer limitations heap approach inability reuse frames inability stack allocate objects dynamic extent 
clinger argue hybrid stack heap mechanism may appropriate scheme smalltalk 
mechanism provides frames allocated stack moved heap allocated linked list continuation created 
list remains heap indefinitely frames list copied back stack 
procedure returns check returning frame stack requires adjustment stack pointer heap requires frame link 
hybrid stack heap model suffers disadvantages pure heap model 
particular small additional cost paid procedure returns calls objects dynamic extent generally stack allocated move continuation created 
addition stack kept small cost creating continuation bounded results frequent stack overflows 
primary advantage hybrid stack heap mechanism copy frame 
motivated danvy pointed multiple continuation copies lead unbounded allocation 
approach avoid duplication stack frames bound place stack segment size continuation reinstatement places bound amount duplication amount memory resulting duplication worst constant factor stack heap approach 
implemented continuation overflow mechanisms described incorporated implementation chez scheme 
modified compiler enforce frame size bound 
clear doing worth effort static analysis source code chez scheme indicates frames smaller words suspect dynamic behavior skewed smaller frames 
investigating similar mechanisms implementation concurrent continuations 
wish olivier danvy providing comments earlier draft 
andrew appel garbage collection faster stack allocation information processing letters 
david john jensen implementation pc scheme proceedings acm conference lisp functional programming august 
william clinger anne eric ost implementation strategies continuations proceedings acm conference lisp functional programming july 
olivier danvy memory allocation higherorder functions proceedings sigplan symposium interpreters interpretive techniques june 
edsger dijkstra recursive programming programming systems languages saul rosen ed mcgraw hill ny 
kent dybvig implementation models scheme university north carolina chapel hill department computer science technical report phd dissertation april 
kent dybvig robert hieb engines continuations indiana university computer science department technical report july 
daniel friedman christopher haynes mitchell wand obtaining coroutines continuations computer languages 
adele goldberg david robson smalltalk language implementation addison wesley 
christopher haynes daniel friedman abstracting timed preemption engines journal computer languages 
robert hieb kent dybvig continuations concurrency second acm sigplan symposium principles practice parallel programming ppopp march appear 
drew mcdermott efficient environment allocation scheme interpreter lexically scoped lisp conference record lisp conference august 
david kranz richard kelsey jonathan rees paul hudak james philbin norman adams orbit optimizing compiler scheme proceedings sigplan symposium compiler construction published sigplan notices july 
jonathan rees william clinger eds revised report algorithmic language scheme sigplan notices december 
guy steele jr common lisp language digital press 
gerald sussman guy steele jr scheme interpreter extended lambda calculus massachusetts institute technology artificial intelligence memo 

