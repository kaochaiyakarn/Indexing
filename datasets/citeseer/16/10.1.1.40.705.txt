cascon examination software engineering practices janice singer timothy lethbridge norman nicolas supported nserc serving site study 
sponsored consortium software engineering research 
ibm contact patrick 
institute information technology national research council ottawa school information technology engineering university ottawa ottawa presents practice data daily activities software engineers 
separate studies looking individual se looking software engineering group looking tool usage statistics 
discuss advantages considering practices designing tools software engineers include requirements tool developed result studies 

knowledge reverse engineering project goal provide software engineers ses industrial telecommunications group toolset help maintain system effectively 
achieve goal adopted user centered design approach tool development 
traditional approaches focused ses practices 
represents new approach tool design 
approach borrows different fields effort accurately assess users behavior provide tools enhance displace replace practices 
rationale tools built created mesh existing behavior 
describe experiences approach learned practices group ses large telecommunications 
rest critically examine traditional uses psychology program comprehension literature second describe study practices 
outline results study conducted large telecommunications 
discuss implications results tool design empirical studies programmers esp human computer interaction approach design tools study cognitive processes programmers attempt understand programs 
results studies supposed provide basis designing better tools 
words understanding mental processes involved programming permit design tools mesh programming process 
vein esp research identified number programmers approaches comprehension problem including top bottom needed strategies integrated meta model 
problems research pertains tool design 
vast majority research conducted graduate advanced undergraduates serving expert programmers 
clear subjects accurately represent population industrial programmers 
conse cascon quently results studies involving students generalized programmers industry 
second control extraneous variables researchers programs small terms lines code logic relative industrial software 
poses generalization problem clear approaches comprehending small programs scale comprehension large programs 
third assumption understanding programmer mental model efficient route designing effective tools 
obvious design tool specification programmer mental model 
instance knowing programmers top strategy understand code inform tool design 
doesn tell kind tool build integrate tool workplace programmer 
furthermore knowledge clear help programmer build mental model help apply help effectively software engineering activities 
problems esp approach suggest alternative approach tool design may effective 
human computer interaction currently strong focus usability field human computer interaction 
designers attempt ensure prospective users software encountering interface difficulties 
instance clear users action take step preferably referring documentation 
aspect usability minimization number steps amount time needed accomplish task 
determine software sufficiently usable prospective users observed software minutes 
reaction times errors backtracking previous states failures accomplish task recorded conditions occurred 
data fix interface ideally test redesign iterations take place software sufficiently usable 
see problems approach 
may increase usability systems guarantee systems built genuinely useful 
usability approach speak issue user adopt new tool workplace point focus usability 
features usability approach prevent informing designers acceptance tool workplace 
usability testing usually takes place outside normal setting room especially designed purpose 
method testing prevents user behaving normal manner isolates resources part software colleagues documentation notes 
words prevents user engaging day today practices 
addition usability testing user essentially forced software 
consequence impossible collect data user software choice existing practices new software 
lack tool adoption major problem area tool design software engineering 
features techniques usability inform designers issue 
believe build tools designers understand ses 
reason focus practices designing software engineering tools 
practices study practices relatively new field seeks understand occurs understanding suggest appropriate technologies workplace 
practices studied diverse fields law navigation document studies practices data generally collected recording people 
researchers rely ethnographic methodologies producing diverse sets data 
challenge take practice data sets put form useful designers 
cascon approach problem implement different data collection techniques see evidence converges 
data decide types tools best solve problems ses face daily activities 
thing struck entered place know exactly ses day day basis 
knew kinds activities performed frequency various activities took place 
far tell hypotheses kinds things ses clear cataloging exactly ses go solving problems 
consequently decided study practices finding ses 
briefly describe characteristics workplace 
rest findings studies conducted answer question 

workplace characteristics group studying maintains large telecommunications system key products 
management group fairly informal group members able select problems 
group members close proximity walk desks questions 
group laboratory target hardware installed 
system system includes real time operating system interacts large number different hardware devices 
system contains lines code routines files 
divided numerous layers subsystems written proprietary high level language 
system fielded early continually updated 
importance evolution expected continue years come 
methods detailed precisely approximately people actively various aspects system current time 
people changes source code life system 
software engineering process tools group group follows defined process creating new system features 
keep detailed records problem reports consequent changes system 
important documents include practices followed install run system field 
careful attention paid quality control form design reviews informal code inspections independent test team 
development done sun platform ses spend considerable time installing running software various configurations target hardware 

se activities collected basic types se practice data 
web questionnaire simply asked ses 
second followed individual se weeks went 
third individually shadowed different ses hour worked 
fourth performed series interviews software activity people read documentation look source write documentation write code attend meetings research identify alternatives ask questions configure hardware answer questions fix bug design testing review learn replicate problem library maintenance table questionnaire results practices responses 
cascon engineers 
obtained wide tool usage statistics 
sections outline precisely methodologies results various studies 
questionnaire study began research administering webbased questionnaire 
questionnaire covered different aspects ses 
report answers question spend time doing 
ses group responded 
question open ended ses decide describe choosing certain activities list 
average ses said spend time fixing bugs time making enhancements system 
table shows specifically things reported engaged percentage people reporting activity 
reported activity reading documentation 
ses reported spend time looking source writing documentation attending meetings writing code 
activities include consulting answering asking questions working hardware testing designing fixing bugs 
questionable validity self reports felt extremely important just rely ses said observe worked 
sections describe studies undertook goal 
individual study se time joined november 
months spent hours week expert sense meet weeks 
new things happen frequently experience new tool busy real tasks 
experienced se previously team leader new certainly new maintenance telecommunications software 
sessions consist distinct components 
talk time met 
code review learning new tool reading documentation second ask look diagram system description call trace looking execution trace program consult consulted consulting compile linking compiling program configuration mgt entering house configuration management system updating search past updates debug high level low level debugger documentation looking documentation edit making change source code management general software activities meetings code reviews house tools house tools primarily static software analysis tools notes notes reading past notes search grep house search tools searching editor source looking source code editors code viewers hardware interacting hardware loading software running software configuring hardware unix issuing general unix command ls cd table categories activities observed shadowing software engineers cascon ously constructed ask modify reflect current understanding 
shadow works hour 
report data shadowing 
method subject worked software industry years 
prior joining telecommunications worked team leader nearby competitor 
maintained product category current product developed smaller scale 
experience languages prior joining considered expert house proprietary language 
likewise experience platforms prior joining considered expert inhouse proprietary development platform 
worked different systems involved development involved maintenance 
joined november 
experience house pascal proprietary language 
experience pascal programmed structured languages 
utilized vi coming planned switching emacs editor 
similarly grep previously switching egrep 
previous experience tools available procedure data shadowing data result half hour sessions ranging october february 
days missing vacation schedule conflicts 
part dates reflect weekly meetings half hour sit write things 
instance grep recorded pencil 
read documentation wrote notes written 
recorded activities detail point exactly typed said 
example record edited file interacted hardware detailing exact nature involvement activities 
new activity recorded time switch activity occurred 
instance row recorded single instance event grep 
diffs single diff event recorded 
extreme grep hour single activity recorded hour 
time measures taken 
know duration involvement distinct event 
followed shadowing procedure regardless nature 
meant observed reading documentation 
times engaged wide variety tasks 
general note probably activities involved choices things 
instance highly chosen respond personal email shadowed 
rule directly involved activities 
consider problem goal build tools help ses 
results shadowing events categorized distinct categories described table 
events classified belonging event categories 
shows percentage days day span event occurred 
example searched information day search count incremented regardless searched time times times particular day 
searching interacting hardware events occur daily basis occurring days 
looked source code days 
reason searched days looked source code searching activity occurred interacting hardware debugging 
looked documentation days 
surprising time relative novice software system commonly cascon assumed novices spend time reading documentation get handle doing 
data show strategy pursued 
novice surprising find editing code compiling management done days 
data examined distinct ways 
shows proportion event type total distinct events 
shows total count searched times day counted instances search 
see searched times 
frequently looked source code times 
particular day hardware see distinct occasions 
remember data include time measurements simply activity switches 
instance management activities day code review undertaken took entire hour 
terms daily activities frequency different activities search information system grep house search tools particular editor debugger figures prominently 
significant amount effort expended interacting hardware looking source code 
group study generalize findings conducted studies focus different aspects entire group ses 
collected types data group 
asked ses draw diagram picture current understanding system conceptual map 
second conducted intensive interviews ses solved real problem software 
generally involved hour interviews course days 
third asked ses search hardware source unix notes configuration mgt call trace debug house tools documentation consult edit compile 
percentage days engaged particular activity 
search source call trace unix house tools edit compile management 
percentage times type event occurred total distinct events 
cascon solved encountered problem 
spent hour shadowing se went 
report focuses fourth type data shadowing data 
method subjects group members participated shadowing study 
experience ranged expert member group years experienced months college graduate 
shadowed subjects worked main controller hardware 
subjects worked primarily database component 
subjects expert wide variety platforms languages experience development maintenance environments 
procedure data shadowing occurred manner sat ses recorded activities engaged 
new activity recorded switch activity row counted instance activity search 
durations activities recorded 
recorded activities gross fine detail record arguments particular commands 
shadowing schedules chosen reflect particular activity scheduled times convenient ses 
shadowed times relatively free stress ses shadowed deadlines approached 
probably self selection involved activities ses pursued 
clear working real problems evidenced concern problem report contents 
results data shadowed events categorized distinct categories described table 
events classified belonging event categories 
distinct events recorded 
shows proportion users engaged particular type activity shadowed hour 
ses looked source conducted search changed source code hour 
ses engaged activities ses interacting hardware debugger house tools 
hand ses looked call trace se performed management activity 
shows percentage times particular type event occurred total events ses 
issuing unix command frequent activity occurring times 
close second looking source done times 
interacting hardware debugger searching changing source code done occasions respectively 
configuration management consulting compiling looking house tools done times 
surprisingly reading documentation done ses accounted separate events 
clearly act looking documentation salient source search edit unix configuration mgt compile consult documentation notes hardware debug house tools call trace management 
percentage users engaged particular type activity 
cascon ses minds evidenced questionnaire data actual occurrence warrant 
ses occasionally wrote notes looked call trace management activities 
say events important merely occur frequently events 
group frequently examined source code 
se group search shadowing session search prominent activities 
search ranked frequent event type th frequent group 
code editing compiling prominent activities group data 
probably learning system time shadowed position changes 
may explain higher prominence call trace data call trace may effective gaining initial understanding system 
interestingly house tools documentation relatively infrequent activities group group data converge data suggest looking searching source code prominent activities ses 
editing compiling important 
expect code focus 
study final study report concerns wide tool usage statistics 
data obtained tool group 
group responsible acquiring updating maintaining tools 
collecting usage statistics part mission 
results data represent week sun tool usage users late may note week occurred vacation season fairly representative peak tool usage 
separate tool calls logged sun operating system 
call counts usage event 
tool calls classified scheme table 
shows proportion times type tool 
compilers accounted calls calls included graph 
compiler data include automatic software builds done nightly various testing verification groups 
data representative ses real practices 
overwhelming finding data search done far activity 
fact search accounts events course week average searches individual user 
compression un compression tools 
observed tools 
verification groups 
unix source hardware debug search edit configuration mgt consult compile house tools documentation notes call trace management 
proportion times particular type event occurred total events 
cascon configuration management system activated times accounting approximately events 
configuration management system central process retrieving files filing changes searching past changes associated documentation 
editors viewers account approximately events total number events 
low frequency due counting particularities apply editors 
tool data editor command counted editor opened 
editor open generally stays open regardless changes files viewed 
contrast shadowing data edit recorded individual time source changed source event counted time source examined editor open 
consequently comes surprise shadowing data edit source frequency higher data 
house tools frequently importance 
tools important perform necessary functions performed tools 
search frequently tool wide level 
grep variants frequently search tools accounting separate invocations 
clearly search important aspect ses practices 
discussion examination practices suggests search important component real day today software engineering 
quite reasonable think improvement search tools help ses job better 
tool description compilers compilers assemblers linkers compression compression tools zip unzip configuration mgt house configuration management tool debuggers general house debuggers editors emacs vi various formatters tools latex groff graphics tools tools create display graphics hardware connectors house tools connect hardware internet tools web browsers news readers email programs house tools primarily software static analysis tools operating system windowing terminal various os tools search primarily variations grep house tools viewers document viewers collection various tools table 
classification types sun tools 
search compression editors house tools formatters 
proportion tool calls accounted tool type 
cascon fact group decided focus efforts direction 
currently implementing source code exploration tool investigating ways introduce workplace 
order improve new tools continuing study se practices ways 
examining source code search activity identifying kinds things ses search searches need find particular piece information second continuing longitudinal study involvement group 
talking ses companies determine findings generalize practices 
shadowing studies indicate ses expend significant amount effort just looking source 
suggests intelligent viewers prove valuable 
process reading navigating huge pieces source code considered type navigation information retrieval problem 
plan exploiting perspective code viewing especially terms relationship viewers search 

application studies development tool requirements data gathered studies described section order develop requirements software engineering tools 
section describes requirements 
software engineering task address just time comprehension programs ses studied spend considerable proportion total working time task trying understand source code prior making changes 
call approach just time comprehension reason label explained 
choose focus research task particularly important lacking sufficient tool support 
changes mentioned paragraph may fixes defects addition features type change appears little importance perspective approach ses 
case se explore system goal determining modifications 
second factor relatively little difference way task performed class user major classes users perform task novices experts 
novices familiar system learn conceptual detailed level experts know system may written able maintain complete mental model details 
main differences novice expert ses novices focused clear idea items source code start searching spend time studying things fact relevant problem 
appears novices focused merely knowledge look rarely set deliberately learn aspects system bear current problem 
vision novice trying learn system 
described section observe ses repeatedly search items interest source code navigate relationships items 
ses rarely seek understand part system entirety content understand just change required confirm proposed change correct impact analysis 
working particular area system rapidly forget details move part system part system encounter 
call general approach just time comprehension 
ses studied confirm accurately describes paradigm exceptions fact source code requirements analysts cascon list key requirements software exploration tool result practices studies section developed set requirements tool support just time comprehension approach section 
requirements relevance listed explained paragraphs 
actual requirements italics explanations follow plain text 
reader note requirements system discussion scope 
examples requirements regarding interaction configuration management environments external systems 
requirements regarding links sources information source code documentation 
detailed requirements usability 
functional requirements 
system shall provide search capabilities user search exact name way regular expression pattern matching named item group named items semantically significant source code 
ses studied high frequency 
case file name know course operating system retrieve 
definitions routines variables embedded files form search tool see section 
term semantically significant exclude necessity tool required retrieve hits arbitrary sequences characters source code text 
example character sequence occurs near footnote wouldn expect information retrieval system index sequences retrieve hits words 
software semantically significant names filenames routine names variable names semantically significant associations include things routine calls file inclusion 
provide capabilities display relevant attributes items retrieved requirement relationships items 
observed ses spending considerable time looking information things routine call hierarchy file inclusion hierarchy definitions variables visually scanning source code times tools discussed section 
able willing invest time obtain partially accurate results 
provide capabilities keep track separate searches problem solving sessions allow navigation persistent history 
requirement come observe users working multiple problems subproblems span days 
observe losing information previously redoing searches 
non functional requirements 
system nf able automatically process body source code large size consisting lines code 
concerned systems real industrial ses engineer able pick software system tool explore 
nf respond queries perceptible delay 
hardest requirements fulfill important 
observations ses waste substantial time waiting tools retrieve results source code queries 
delays interrupt thought patterns 
nf process source code variety programming languages 
ses studied languages tool single language 
want validate tools wide va cascon software engineering environments prepared languages 
nf possible able interoperate software engineering tools 
want able connect tools researchers tools ses 
nf permit independent development user interfaces clients 
want perform separate independent research user interfaces tools 
addresses architecture server aspects user interfaces 
nf integrated incorporate frequently facilities advantages tools ses commonly 
important acceptance tool represent step backwards require arounds switching alternative tools frequent tasks 
survey ses frequent complaint tools integrated incompatible second common complaint missing features 
section discuss tools ses program comprehension task 
nf user complete information manner facilitates task 
information software described latent 
words software engineer see pointed 
examples information effects conditional compilation macros 
acceptable limitations server component tool may limited run particular platform 
simplifies implementation decisions unduly restricting ses 
system required time handle object oriented source code 
restricting focus ses working large bodies legacy code happens written non object oriented languages 
clearly decision subsequently lifted tool universally useful 
system required deal dynamic information information occurs run time 
purview debuggers dynamic analysis tools 
useful integrate currently requirement 
observed software engineers spending considerable time dynamic analysis tracing stepping consume time performing static code exploration 
tools able meet requirements types tools ses perform code exploration task described section section explains general fulfill requirements grep studies described section indicated command executions members grep family grep egrep agrep 
interviews show widely software engineering tool 
observations interviews show grep just time comprehension 
ses tools key enabler situations provides fall back position tools missing functionality 
grep weaknesses regard requirements identified section works arbitrary strings text semantic items requirement routines variables ses spend considerable time performing repeated trace relationships requirement grep help organize presentation relationships 
cascon large body source code grep take large amount time requirements nf nf 
search browsing facilities editors editors capability search file 
grep rarely semantic information 
advanced editors emacs total users text editing tools study basic abilities search semantic items starts procedures facilities means complete 
browsing facilities integrated development environments compilers come limited tools browsing editors normally allow browsing full spectrum semantic items 
smalltalk browsers years exception browsers typically meet requirements speed nf interoperability nf multiple languages nf 
ibm visualage tools extent dealing problem 
special purpose static analysis tools observed ses variety tools allow extract information definitions variables routine call hierarchy 
biggest problems tools integrated requirement nf slow nf commercial browsing tools commercial tools specific purpose meet requirements similar 
particularly example sniff take 
sniff fulfills functional requirements key non functional requirements size nf speed nf multiple languages nf commercial nature means hard extend integrate tools 
program understanding tools university researchers produced tools specially designed program understanding 
examples rigi software bookshelf 
rigi meets requirements fast nf easy integrate tools nf 
see differs details items relationships 
software bookshelf differs requirements key way somebody bookshelf describes body code se organize advance 
conform fully automatically aspect requirement nf 
tools developing consequence practices studies requirements described section developed improved software exploration tool call 
view tool shown 
main features fulfill search capabilities bottom panes 
bottom left pane shows hierarchy user incrementally expands asking show attributes items search information relations grep results item 
currently selected item shown pane user hyper jump selecting item text 
main feature fulfills top pane 
element pane complete state bottom panes 
hierarchy states saved persistently time user starts tool state previous session 
non functional requirements met architecture shown 
architecture includes fast database interchange language language independent information software client server mechanism allows incorporation existing tools grep software engineers continue tools find useful 
details tool 
continuing involvement users studying practices evolve choose adopt tool 

study practices provides path tool design alternative traditional paths taken human computer interaction issuing study users cognitive processes mental models emphasis usability 
problem plagued software tools designed traditional human computer interaction approaches 
focusing workplace activities study practices increases likelihood cascon tools smoothly integrated users daily activities 
turn increase acceptance software tools designed basis practices 
wishes examine user necessary tools consistent practices 
consistency established usability approach taken ensure ses effectively tools accomplish 
possible study practices reduce eliminate need study cognitive processes mental models 
depend accuracy detail practices described 
described detail terms system state explicitly intentionally accessed user may necessary users 
may need abide general principles usability usability testing addition practice specifications order design useful tools 
may efficient terms time take practice approach tool design cognitive approach 
empirical required order strengthen confidence statements 
details research 
acknowledgments ses participated studies particular worked months 
tools group providing tool usage statistics 
group helpful suggestions 
authors janice singer cognitive psychologist researching software engineering practices software engineering laboratory national research council canada 
prior ph studies conducted research human computer interaction worked software engineer 
timothy lethbridge assistant professor site university ottawa 
teaches software engineering human computer interaction heads knowledge reverse engineering group sponsored 
dr lethbridge worked software developer public private sectors 
norman cognitive psychologist working interactions modeled environments group institute information technology national research council canada 
prior joining nrc dr main window tool 
ta files parsers database source code file dbms clients user interfaces analysis tools rd party tools read ta rd party tools produce ta analysis tools query engine interchange format ta query response interchange format ta interchange format ta write api data ta parser read api data read api data ta generator data flow diagram showing architecture software cascon user interface designer northern telecom 
nicolas completed ph universit de working research associate part time professor site university ottawa 
authors reached singer iit nrc ca tcl site 
ca web site project www csi ca tcl institute information technology www iit nrc ca 
anderson cognitive psychology implications wh freeman 
suchman trigg reflections oriented design project 
human computer interaction pp 

beyer customer 
cacm pp 

brooks theory comprehension computer programs int 
man machine studies pp 

holt software bookshelf overview construction www turing toronto edu holt papers html lethbridge architecture source code exploration tool software engineering case study 
site technical report 
lethbridge singer understanding software maintenance tools empirical research workshop empirical studies software maintenance wess bari italy october 
lethbridge singer strategies studying maintenance workshop empirical studies software maintenance monterey november 
littman pinto letovsky soloway mental models software maintenance empirical studies programmers pp 

mayhew principles guidelines software user interface design prentice hall 
mller mehmet tilley uhl reverse engineering approach subsystem identification software maintenance practice vol 
pennington stimulus structures mental representations expert comprehension computer programs 
cognitive psychology pp 

singer lethbridge methods studying maintenance activities workshop empirical studies software maintenance monterey november 
singer lethbridge 
preparation just time comprehension new model program understanding 
singer lethbridge practices alternative method tool design software engineering chi 
storey fracchia mller cognitive elements support construction mental model software visualization 
proc th workshop program comprehension mi pp 
may 
take home page www com index htm vicente pejtersen cognitive analysis press von mayrhauser vans program comprehension tool requirements industrial environment proc 
nd workshop program comprehension capri italy pp 
july 
von mayrhauser vans code understanding needs reverse engineering tool capabilities proc 
th int 
wkshp computer aided software engineering singapore pp 
july 
von mayrhauser vans program comprehension software maintenance evolution computer pp 
aug 
