structured type theory chalmers university preliminary version june implementation agda type theory 
limit presentation primitive form type theory dependent product simple notion sorts extend structure facility find programming language expressions local definition package mechanism 
call language structured type theory 
part describes syntax language informal description type checking 
second part contains detailed description core language implement type theory 
give realisability semantics type checking rules proved correct respect semantics 
notion meta variables explained level 
third part explains interpret structured type theory core language 
main contributions ffl explicit substitution simplify fully precise metatheory system ffl simplification constraint solving mechanism tested large examples implementation ffl notion parametrised constants package mechanism tested implementation brings module structure complicating meta theory system 
type checking problem correct type term correct term type 
type inference type synthesis problem term correct type 
main difference approach works concentrate problem type checking type inference 
property require uniqueness types 
experience application type theory proof checking decidability type checking restricted class terms 
presentation covers part implemented agda 
covered record types structure signature data types case 
structured type theory extend type theory product universes expressions packages 
hope possible directly represent definitions functional language haskell 
compared approach approach possible analyse reductions untyped way 
approach relatively simple realisability interpretation may interest 
syntax sort expr varid meta variables holes expr expr varid selection varid 
expr expression expr expr application sort expr 
expr function type varid params expr expr def postulate varid expr package varid params defs package varid params expr open expr opens 
params expr 
expr open varid expr varid opens open 
open varid 
varid varid string som syntactic sugar ffl set abbreviation type 
ffl varid expr varid expr varid expr expr 
ffl infix notation similar haskell 
ffl writing layout rule haskell 
ffl write expr 
expr non dependent function type ffl open construction take away type 
ffl definition type equivalent set ffl expression open expr opens expr equivalent open expr opens expr informal description constructions standard constructions type theory automath language 
add possibility leaving places incomplete symbol 
occurence interpreted different meta variables 
add possibility introducing postulates 
addition expressions local definition standard functional programming languages 
notion package allows group definitions share common set parameters 
instantiate parameters give name instantiated package 
definitions package instantiating parameters making constant dot notation 
core language structured type theory untyped language reduction rules 
language give realisability interpretation type theory 
expressions family sets indexed finite set intuitively represents set variables declared stage 
usual notation logic write indicate may occur free expression notation gets meaning syntax 
notation fxg supposes notation fx zg elements ffl variables ffl applications follow notation combinatory logic ffl abstraction ffl instantiation ae mapping notice general subset instance xn may write xn xn mean xn xn define set values clauses ffl variables ffl applications ffl instantiation ae mapping notice constants may add constants name body finite set parameters intuitively instance may introduce distinction variable argument function parameter definition consider automath introduce primitive notions 
postulated constants name finite set parameters 
notation pn 
weak conversion rules weak conversion values ffl ae ffl ae ae ae ffl ae ae ffl xn ae ae xn ae ffl cae constant body equality seen rewrite rule rewriting system level result generalisation 
proposition rewriting system confluent 
expression reduced form reduced ae expression ae reduced 
values considered weak conversion 
proposition xn xn strong conversion define conversion relation values corresponds equality possibly infinite bohm tree conversion 
greatest family symmetric relations jx jx ae ae jx vn wn jx theorem jx equivalence relation congruence jx jx jx think equivalence class value possibly infinite bohm tree 
say value normalisable associated bohm tree finite 
described inductive definition value un normalisable normalisable value ae normalisable ae normalisable value cae un primitive notion normalisable ae normalisable normalisable 
neutral value normalisable value form cae un primitive notion form un metavariables constraints add metavariables new constants declared stage 
metavariable intuitively constant definition 
constraint equation form describe simplifications constraints untyped level 
consider constraint ae ae renaming 
test written ae unique constraint solution 
ae introduce new metavariables define fn add constraints ae similar operation constraint ae xn primitive notion ae renaming 
ae ae renaming choose variable introduce new metavariable define add constraint ae ae notice ae renaming 
examples taken need renaming maps 
assume constraint write xy xy constraint remaining constraint possible see constraint follows constraint 
example write xy xy constraint image constraint solution 
realisability model add products sorts new weak conversion rules ae new strong conversion rule ae jx ae ae jx ae ae jx ae results confluence weak reduction strong conversion forms congruence stay valid extension 
follow describe realisability model type theory 
type checking rules describe correct model 
simplify leave implicit finite index set free variables 
define induction set types intuitively types universe way simultaneously define set ea values type definition clear ea depends known induction furthermore ae aae ae aae case ae set values aae eb ae neutral value ea set neutral values 
value value type iff union sets semantical context sequence xn gamma value type value type ea 
un gamma value type ea un gamma gamma gamma gamma xn context ae xn un say ae fits gamma iff ea un gamma show theorem value type normalisable furthermore element ea normalisable 
furthermore value type iff value type ea eb value type ea iff ea type checking rules core language context gamma gamma list declarations xn gamma gamma context xn write gamma set xn variables gamma may write gamma gamma gamma write ae gamma instantiation xn xn sigma sigma denote list constant declarations form gamma gamma sigma sigma gamma sigma pn gamma typing judgement form gamma sigma gamma gamma form gamma type gamma leave sigma implicit 
type checking rules typing judgements gamma type gamma gamma type gamma type gamma aae gamma type gamma type types gamma gamma gamma gamma gamma gamma gamma ae gamma aae ae ae gamma gamma gamma gamma bae ae gamma ae gamma gamma aae gamma gamma gamma sigma ae gamma gamma gamma cae aae gamma 
ae gamma gamma gamma aae ae gamma gamma ae denotes ae gamma xn ae gamma ae xn gamma gamma list definitions defined grammar ds gamma ds pn gamma ds define list definitions correct gamma gamma sigma aae gamma sigma gamma ds sigma gamma ds state correctness typing rules respect realisability semantics 
theorem gamma semantical context ae fits gamma gamma type gamma aae gamma aae value type aae see type checking rules basic derivations judgements form jm judgement typing judgement gamma equality judgement jx values define jn mean derivation rules assumption jm limit term form clear applications rules typing judgement gamma fail produce list equality judgements jn jn type checking rules interpreted deterministic algorithm jn typing judgement produces list jn typing constraints equality constraint 
corollary judgements type value type decidable 
meta variables may meta variables judgement 
add syntax terms applications rules typing judgement gamma fail produce list judgements jn equality constraints typing constraints form gamma 
jn constraints displayed user help find value metavariables 
explained simplifications constraints may done automatically 
refinement operation typing constraint form gamma 
refinement consist substituting replacing gamma 
gamma typing constraint typing constraints stay typing constraints equational constraints jx 
jx 

new idea respect lena magnusson introducing systematically new metavariables refinement expression contain new meta variables heuristic introducing new sharing terms 
way meta variable correspond exactly context exactly expected type problem checking dependency conditions meta variables arise 
adding expressions alternatives translating structured type theory core language 
implemented 
interpret definitions global local structured type theory definition constants core language 
add local expressions 
second alternative add expressions new weak conversion rule ae ae ae type checking judgement form gamma ae gamma type gamma ae gamma gamma context free variables gamma context bound variables ym bm gamma ae identity free variables gives value gamma bound variables new typing rule gamma ae gamma type gamma ae gamma ae gamma ae ae gamma ae gamma ae gamma typing rules changed accordingly 
instance rule typing product gamma ae gamma type gamma aae ae gamma type gamma ae gamma type translation structured type theory core language translation quite straight forward give example 
may constants find possible expression metavariable shorter suggested constraint 
implementation user may choose constraint solved automatically 
simple substitution operation possible captures explicit substitution 
syntactically ensures parsing interpreted fresh metavariable 
follows typing constraint gamma 
place holder occurence gamma example fragment postulate set package set translated approach pn second approach translated pn possible extensions add abstraction mechanism 
syntax package set effect definitions hidden outside package changed having change 
extension add sigma types pairs 
needed represent mathematical structures 
system represent conveniently algebra category theory 
delicate extension addition inductive data types recursively defined functions data types 
barthe sorensen 
domain free pure type systems 
appear journal functional programming 
de bruijn 
mathematical language automath usage extensions 
symposium automatic demonstration versailles lnm pp 


approach constructive analysis type theory 
phd thesis chalmers university technology 
coquand 
realizability interpretation martin lof type theory 
years type theory sambin smith eds oxford university press 
courant 
mc module calculus pure type systems 
tech 
report orsay nr 

curien 
framework environment machines 
theoret 
comput 
sci 

dowek th 
hardin cl kirchner pfenning 
unification explicit substitutions case higher order pattern 
inria report 
maclane moerdijk 
sheaves geometry logic 
springer verlag 
magnusson 
implementation alf proof editor martin lof monomorphic type theory explicit substitution 
phd thesis chalmers university technology 
munoz 
dependent type systems explicit substitutions 
phd thesis inria 
persson 
integrated developments type theory 
ph 
thesis chalmers university technology 

category theory type theory 
ph 
thesis inria 
luther 
guided tour 
report university ulm 

