constructive category theory erard huet inria rocquencourt le chesnay cedex notes part preliminary attempt developing algebra constructive type theory 
developments follow inspired previous axiomatization aczel lego jan initial step program formal development galois theory 
version type theory calculus inductive constructions implemented coq 
give full transcript coq axiomatisation 
note develop possible axiomatisation notion category modeling objects types hom sets hom setoids arrows parameterized domain codomain types 
may quotient arrows objects 
develop setting functors functions objects maps arrows 
show cat category need distinguish effect small big categories 
implicitly categories relatively small structures indexed universe 
just need instances notion category order define cat 
construct functor category natural definition natural transformations 
show interchange law exhibits categorical structure functor category 
giving corollary yoneda lemma 
constructive category theory shows type theory adequate represent faithfully categorical reasoning 
ingredients essential sigma types represents structures dependent types arrows indexed domains codomains hierarchy universes order escape foundational difficulties 
amount type reconstruction necessary order write equations arrows having indicate type binder notational abbreviations allowing infix notation necessary offer formal mathematician language close ordinary informal categorical notation 
relations assume number basic constructions define quantifiers equality level sort type 
definitions included prelude module coq system 
start standard definitions pertaining binary relations 
require 
section orderings 
research partially supported esprit basic research action types 
variable type 
definition relation 

prop 
variable relation 
definition reflexive 
definition transitive 


definition symmetric 

structure equivalence prop reflexive transitive symmetric 
structure prop symmetric transitive 
orderings 
syntactic definition equivalence equivalence 
syntactic definition 
notations familiar reader gets fact universal quantification denoted typing judgments standing delta 
similarly functional abstraction denoted square brackets standing delta 
section mechanism coq allows parameterize notions defined body section variables axioms depend 
case notions defined inside section orderings parameterized parameters instance definition reflexive closing section definition reflexive type relation 
combinator equivalence defined syntactic definition 
just macro definition facility rest session replace occurrence equivalence equivalence 
question marks arguments automatically synthesized context 
systematically facility development convention generic notions defined macros name starting upper case letter generate internally name corresponding lower case letter applied question marks 
number question marks indicated macro symbol 
context macro shall expect corresponding parameters derivable mechanically type checking 
setoid move development setoids 
setoids triples composed type relation proof equivalence relation setoid set considered quotient type congruence 
setoids investigated hofmann framework martin lof type theory 
terminology due burstall 
setoid structure structure setoid type carrier type equal relation carrier equivalence equal 
understand happens type synthesis 
subformula equivalence equal gets replaced equivalence equal 
type checker instantiates question mark carrier equal declared relation carrier 
way type synthesis elide information implicit context 
coq sigma types records primitive built inductive types constructor 
macro structure constructs corresponding inductive type defines projection functions destructuring setoid constituent fields 
defines constructor build setoid constituents 
choose different name constructor putting desired name opening brace structure defining expression 
specialized macros user definable way tactics 
order pleasant notation introduce concrete syntax declaration allowing parse carrier grammar command command command 
carrier 
grammar declaration may read follows 
grammar production command language consists parts 
part represents production added corresponding non terminal entry command receives new production command 
second part semantic action builds corresponding syntax tree firing production indicate build application constant carrier result parsing entry command enclosed vertical bars 
various entries stratify commands priority levels 
setoid equal associated relation 
give infix notation parameter synthesised type checking 
symbol predefined declare new token extensible lexer coq 
token 
grammar command command command command 
equal 
note generic setoid equality type elements may general inferred context shall see immediately 
extracted field proof equality setoid equivalence relation 
right equivalence proof give corollaries reflexivity symmetry transitivity equality 
get proofs easily help coq proof engine driven tactics 
rest document give proof scripts just statements lemmas 
lemma setoid reflexive equal 
lemma setoid symmetric equal 
lemma setoid transitive equal 
example example preceeding notions define setoid natural numbers 
type elements directly inductively defined nat set easy define isomorphic nat type 
inductive nat type nat suc nat 
nat 
definition nat 
symbol appears body definition standard polymorphic leibniz equality defined module 
case instantiated type nat inferred type 
right give equivalence proof build setoid natural numbers lemma equivalence 
definition nat 
alternative partial setoids alternatively build partial setoids equality equivalence replaced weaker partial equivalence relation coherence total elements defined coherent structure type type coherence relation coherence 
definition total coherence 
setoid maps setoids define map setoid setoid function respects equality 
generic equality 
section maps 
variables setoid 
definition 

structure map type ap pres ap 
map similar pair packing function ap type proof pres function respects equality 
maps defined equal iff equal definition ext map ap ap 
lemma equivalence ext 
definition map ext 
maps 
syntactic definition 
syntactic definition 
write token 
grammar command command command command 
ext 

grammar command command command command 

command allows writing appropriate precedence level setoid maps setoids section defining generic ap denoting application function associated map curried binary application ap useful follows 
syntactic definition ap ap 
definition ap setoid ap ap 
syntactic definition ap ap 
categories category structure axiomatise category consisting type objects family hom setoids indexed domain codomain types 
section cat 
variable ob type 
variable hom ob ob setoid 
component category composition operator objects belongs hom 
hom 
hom 
write operator parameters implicit type synthesis infix variable ob hom 
hom 
hom 
definition ob ap 
grammar command command command command 


composition assumed associative definition ob hom hom hom 
final component category object arrow identity composition variable id ob hom 
definition ob hom id definition ob hom id 
cat 
give generic notations various laws syntactic definition 
syntactic definition 
syntactic definition 
able define synthetically category structure category type ob type hom ob 
ob 
setoid ob hom 
hom 
hom id ob hom id id 
successively define projections extract various components category 
syntactic definition hom hom 
syntactic definition id id 
definition comp category ob ob hom 
grammar command command command command 
comp 

infix notation context local category parameter noticed grammar definitions inside sections disappear section closed 
new rule giving syntax comp conflict previous giving syntax 
composition operator binary function verifying congruence laws arguments 
provide general method allowing construction composition operator function 
shall systematically tool category definition 
section 
variable ob type 
variable hom ob ob setoid 
variable ob hom hom hom 
definition ob hom hom 

definition ob hom hom 

definition ob hom hom 


hypothesis 
hypothesis 
variable ob 
lemma comp hom 
definition comp map hom comp 
lemma hom hom hom comp map 
definition hom hom hom comp map 

check composition preserves morphisms equalities left right prove corollary congruence law composition lemma category 
comp 
lemma category 
comp 
lemma category 
comp 
hom equality need technical definition arrows hom category equal iff corresponding elements setoid hom equal 
typical example type theory explicit information come standard mathematical discourse set theory 
course standard abus de notation implemented transparent way overloading implicit coercions 
deal problem implicit synthesis category parameter object parameters order write simply equality arrows inductive category ob hom ob hom 
prop hom 

token 
grammar command command command command 



reader may puzzled seemingly general type arrow equality predicate takes arguments category objects arrows hom hom 
possible constructor equality requires second arrow type sufficient restrict type accordingly 
generality needed want able state equality arrows respective domains definitionally equal equal certain parameters 
instance problem arise defining functor equality want able write force say definitionally equal objects way specify type declarations 
necessitate extension type theory definitional constraints problematic respect decidability definitional equality 
extension really needed takes care write dependent equalities sufficiently general types 
section 
variable category 
variable ob 
variable hom 
lemma variable ob 
variable hom 
lemma 
variable ob 
variable hom 
lemma 


dual categories dual category ffi category objects arrows opposites arrows ffi gamma 
morphism ffi iff gamma 
morphism section 
variable category 
definition ob hom 
composition defined expected ffi ffi ffi ffi ffi ffi identity arrows invariant 
check category laws 
definition ob df dg dg df 
lemma ob 
lemma ob 
definition ob 
lemma ob 
lemma ob id 
lemma ob id 
write dual dual category definition dual ob 

category exercises define monos isos 
exercise show initial objects isomorphic 
morphism gamma 
epi morphisms gamma 
equality ffig ffih implies section 
variable category 
variable ob 
definition hom ob hom 
structure hom type 

syntactic definition 
morphism gamma 
monic morphisms gamma 
equality ffi ffi implies section 
variable category 
variable ob 
definition hom ob hom 
structure hom type 

syntactic definition 
morphism iso morphism gamma gamma 
gamma ffi id ffi gamma id section 
variable category 
definition ob hom hom id 
variable ob 
structure hom type hom 


say objects isomorphic connected iso arrow 
structure iso type hom 

syntactic definition 
syntactic definition 
syntactic definition iso iso 
say object initial category iff object exists unique arrow hom 
section 
variable category 
definition atmost mor ob hom structure ob type mori ob hom ob atmost mor 

syntactic definition 
syntactic definition mori mori 
dually define object terminal category object exists unique arrow hom 
section 
variable category 
structure ob type mort ob hom ob atmost mor 

syntactic definition 
syntactic definition mort mort 
exercise may prove easily initial objects isomorphic lemma category ob 

iso 
prove property terminal dual initial initial object terminal ffi lemma category ob 
dual 
properties defined type level 
defined level prop case extract field type type 
category setoids define category setoids maps homs 
define composition identity maps 
composition maps defined composition underlying functions check extensionality resulting function 
infix notation section 
variable setoid 
variable map 
variable map 
definition ap ap 
lemma 
definition 

token 
grammar command command command command 


operator just function 
shall proving extensional arguments order get map composition operator 
lemma setoid 
lemma setoid 
definition setoid 
checking associativity composition operation define identity map identity function checking category laws 
lemma setoid 
section 
variable setoid 
definition lemma 
definition 

definition 
lemma setoid 
lemma setoid 
ingredients form category setoids set 
definition set setoid 
functors definition functor functors categories defined usual way components function objects objects map hom sets hom sets type theory expresses natural way type constraints notions arbitrary codings 
section functors 
variable category 
variable fob ob 
ob 
variable fmap ob map hom hom fob fob 
functors preserve category structure verify laws ffi ffi id id definition ob hom hom ap fmap ap fmap ap fmap 
definition ob ap fmap id id fob 
functors 
syntactic definition 
syntactic definition 
structure functor category type fob ob 
ob fmap ob map hom hom fob fob fob fmap fob fmap 
usual define syntactical abbreviations 
written fob written fmor 
definition fmor category ob functor hom ap fmap 

syntactic definition fob fob 
syntactic definition fmor fmor 
lemma category functor ob ap fmap 

define setoid functors 
equality functors extensional equality morphism function component written infix appropriate type synthesis definition category functor ob hom fmor fmor 
token 
grammar command command command command 


lemma category equivalence 
ingredients form functor setoid 
definition category functor 
hom functors give section example functor construction family hom functors 
category object functor hom gamma gamma 
set defined ffl object hom gamma hom section 
variable category 
variable ob 
definition ob hom 
ffl gamma 
hom gamma hom gamma 
hom map mapping morphism gamma 
morphism ffi section 
variable ob 
section 
variable hom 
definition hom 
lemma 
definition 

lemma hom hom set 
definition hom hom set 

check functorial properties hom gamma define notation 
lemma set 
lemma set 
definition set 

syntactic definition 
category categories section reflect theory categories may form type category categories cat arrows functors 
really needed define functor composition identity prove easy lemmas exhibiting category structure cat 
step consists defining composition functors 
compose functors gamma 
gamma 
form functor ffi gamma 
composing separately object functions morphism maps 
write functor composition 
section 
variable category 
variable functor 
variable functor 
definition ob fob fob 
section 
variable ob 
definition hom fmor fmor 
lemma 
definition 

lemma 
lemma 
definition 

syntactic definition 
syntactic definition 
token 
grammar command command command command 


construct composition operator checking congruence laws 
lemma category 
lemma category 
definition category 
lemma category 
category construct identity functor idc identity function objects identity map morphisms 
section 
variable category 
definition ob definition definition ob hom 
lemma 
lemma 
definition 

lemma category 
lemma category 
ingredients recognize cat structure category 
need take second copy notion category called category 
implicit universe adjustment mechanism sure type refers bigger universe 
structure category type ob type hom ob 
ob 
setoid ob hom 
hom 
hom id ob hom id id 
definition cat category category 
note essential universes hierarchy unique cat family cat cat category small large categories relatively small categories 
construction cat consistent analysis coquand paradoxes related category categories 
remarked example justifies mechanism called universe polymorphism defined harper pollack 
universe polymorphism directly define cat category having explicit copy notion copying done implicitly occurrence name category 
coq implement universe polymorphism mechanism costly space seldom practice 
functor exercises easy check functor preserves property iso 
section 
variable category 
variable functor 
lemma ob iso 
iso fob fob 
functor gamma 
said faithful pair objects pair gamma 
morphisms definition ob hom fmor fmor 

structure type 
functor said full pair objects morphism gamma 
exists morphism gamma 

axiom choice exists function morphism gamma 
corresponds 
definition ob hom fob fob 
hom ob hom fob fob fmor 
structure type ob hom fob fob 
hom 
syntactic definition 
syntactic definition 
properties closed composition section 
variable category 
variable functor 
variable functor 
lemma 


lemma 



functor category type functors category category admits category structure 
corresponding arrows called natural transformations 
natural transformations define natural transformations functors natural transformation maps object category arrow object object category naturality law holds ffi ffi 
note natural transformations defined functions maps objects types necessarily setoids 
section 
variable category 
variable functor 
variable ob hom fob fob 
definition ob hom fmor fmor 

syntactic definition 
structure nt category functor type ob hom fob fob 

syntactic definition 
syntactic definition nt nt 
syntactic definition 
define ff gg natural transformations setoid functors equality natural transformations extensional 
natural transformations said equal components equal arbitrary object previously write nt equality 
section 
variable category 
variable functor 
definition nt ob 
lemma equivalence 
definition nt 

token nt 
grammar command command command nt command 


grammar command command command command 


example natural transformation category gamma 
morphism define natural transformation hom gamma gamma 
hom gamma called yoneda map follows 
hom gamma set ffi hom gamma set object map mapping morphism gamma 
morphism ffi section 
variable category 
variable ob 
variable hom 
section 
variable ob 
definition hom lemma 
definition 

check naturality map define natural transformation written nth 
lemma 
definition nth 

syntactic definition nth nth 
constructing category functors tools define category functors objects functors arrows corresponding natural transformations setoids 
define composition natural transformations ffi ffi subscript stands vertical shall define horizontal composition 
section 
variable category 
section 
variable functor 
variable nt 
variable nt 
definition ob 
lemma 
ob 
definition 


lemma functor 
lemma functor 
definition functor 
lemma functor 
functor associate identity natural transformation id defined id section 
variable functor 
definition ob id fob 
lemma 

definition 


lemma functor 
lemma functor 
having checked categorical properties may define functor category 
definition functor 

token 
grammar command command command command 


interchange law order put test categorical constructions prove interchange law 
laws categories categories arrows category structure 
notion theoretical computer science study programming languages semantics type theory 
categories gamma 
gamma 
functors 
define horizontal composition natural transformations gamma 
gamma 
ffi ffi 
check ffi natural transformation ffi ffi ffi ffi ffi section 
variable category 
variable functor 
variable functor 
variable nt 
variable nt 
definition ast ob hom fob fob ob fob fmor 
order prove naturality ffi equality ffi ffi ffi follows naturality diagram morphism lemma ob fmor fob fob fmor 
lemma ast 
definition ast 

shall write nth horizontal composition 
grammar command command command nth command 


shall verify important algebraic property interchange law links horizontal vertical composition 
categories gamma 
gamma 
functors gamma 
gamma 
gamma 
gamma 
natural transformations 
interchange law ffi ffi ffi ffi ffi ffi section 
variable category 
variable functor 
variable functor 
variable nt 
variable nt 
variable nt 
variable nt 
lemma nth nth nt nth 

section showing horizontal composition natural transformations associative 
small difficulty 
categories functors functors horizontal composition natural transformation natural transformation yields natural transformation ffi ffi ffi expressing associativity horizontal composition operation need identify types say ffi ffi ffi ffi 
run problem 
terms equal sense functor equality definitionally equal unable write statement associativity horizontal composition typecheck 
order circumvent problem need define constrained equality nth natural transformations follows 
definition category functor functor nt nt ob 
token nth 
grammar command command command nth command 


section 
variable category 
variable functor 
variable functor 
variable functor 
variable nt 
variable nt 
variable nt 
lemma nth nth nth nth nth 

yoneda embedding construct functor ffi gamma 
set follows ffl object hom gamma ffl morphism ffi gamma 
ffi ffi section 
variable category 
section 
variable ob 
lemma hom dual hom set nth 
definition hom dual hom set nth 

lemma dual set 
lemma dual set 
definition dual set 
lemma full faithful 
lemma 
lemma 

result may obtained corollary general result known yoneda lemma 
give direct proof 
gamma 
morphisms ffi ffi implies gamma 
ffi ffi id obtain ffi ffi 
shows faithful 
show full 
gamma 
hom gamma gamma 
hom gamma natural transformation hom functors looking morphism gamma 
ffi 
know hom gamma 
hom map 
define id 
check ffi 
equivalent gamma 
id ffi assertion particular case naturality property hom hom hom hom gamma hom hom gamma simplification gamma 
ffi ffi id get id ffi conclude full 
result shows natural transformation hom functors hom gamma gamma 
hom gamma completely determined unique morphism gamma 
id 
development shown tiny initial fragment theory categories 
quite promising power dependent types inductive types sigma types put full note particular dependent equality morphisms possibly non convertible types 
point syntactic facilities offered new version coq step right direction user may define notations extensible grammars types implicitly known dependencies synthesised automatically facility called syntactic definition allows certain amount high level notation 
order show crucial tools give statement interchange law syntactic abbreviations closing gap standard mathematical practice supplementary overloading mechanisms obviously lacking order implement usual abus de notation 
point view user comfort proof assistant main difficulties encountered 
due fact coq automatic unfoldings constants 
required explicit manual unfoldings allowed apply lemma 
second difficulty due lack non trivial automatic theorem proving tools 
instance development benefit efficient multi relations rewriting tactics 
tactics ought extensible allow user specification rewriting strategies generic usable developments 
tactics written lcf nuprl 
adaptation coq currently study 
logical reconstruction basics category theory follows initial attempts dyckhoff martin lof type theory 
shows intentional type theory sufficient developing kind mathematics may hope develop sophisticated notions adjunction far formally pursued extensional type theory 
burstall rydeheard implemented substantial number concepts constructions category theory sml ml dialect 
essential difference approach include formalisation properties equations deriving diagrams categorical constructions 
mechanically check constructions intended properties 
exhibits essential expressivity increase functional programming language simple types type theory dependent types curry howard interpretation includes verification predicate calculus conditions 
axiomatisation may pursued include significant segment category theory 
shows define adjunction limits develops standard constructions defining limits products shows existence left adjunct functors conditions freyd theorem 
aczel 
galois theory development project 
turin workshop representation mathematics logical frameworks january 
panangaden 
mechanically assisted constructive proof category theory 
proceedings cade springer verlag lncs 
asperti longo 
categories types structures 
mit press 
coquand 
analysis girard paradox 
proceedings lics cambridge mass july ieee press 
dyckhoff 
category theory extension martin lof type theory 
internal report cs dept computational science university st andrews scotland 
harper pollack 
type checking universes 
theoretical computer science 
hofmann 
elimination extensionality martin lof type theory 
proceedings workshop types nijmegen may 
types proofs programs eds 
barendregt nipkow lncs springer verlag 
huet 
initiation la th eorie des cat egories 
notes de cours dea paris nov 
jackson 
enhancing nuprl proof development system applying computational algebra 
ph dissertation cornell university ithaca ny 
mac lane 
categories working mathematician 
springer verlag 
paulson 
higher order implementation rewriting 
science programming 
rydeheard burstall 
computational category theory 
prentice hall 

une axiomatisation constructive de la th eorie des cat egories 
rapport de recherche en pr 

