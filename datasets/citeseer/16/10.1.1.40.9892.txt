mining sequential patterns rakesh agrawal ramakrishnan srikant ibm almaden research center harry road san jose ca large database customer transactions transaction consists customer id transaction time items bought transaction 
introduce problem mining sequential patterns databases 
algorithms solve problem empirically evaluate performance synthetic data 
proposed algorithms apriorisome aprioriall comparable performance albeit apriorisome performs little better minimum number customers support sequential pattern low 
scale experiments show apriorisome aprioriall scale linearly number customer transactions 
excellent scale properties respect number transactions customer number items transaction 
database mining motivated decision support problem faced large retail organizations 
progress bar code technology possible retail organizations collect store massive amounts sales data referred basket data 
record data typically consists transaction date items bought transaction 
data records contain customer id particularly purchase credit card frequent buyer card 
catalog companies collect data orders receive 
introduce problem mining sequential patterns data 
example pattern department computer science university wisconsin madison 
customers typically rent star wars empire strikes back return jedi 
note need consecutive 
customers rent videos support sequential pattern 
elements sequential pattern need simple items 
fitted sheet flat sheet pillow cases followed followed example sequential pattern elements sets items 
problem statement database customer transactions 
transaction consists fields customer id transaction time items purchased transaction 
customer transaction transaction time 
consider quantities items bought transaction item binary variable representing item bought 
itemset non empty set items 
sequence ordered list itemsets 
loss generality assume set items mapped set contiguous integers 
denote itemset item 
denote sequence itemset 
sequence contained sequence exist integers example sequence contained 
sequence contained vice versa 
represents items bought represents items bought 
set sequences sequence maximal contained sequence 
transactions customer viewed sequence transaction corresponds set items list customer id items bought june june june june june june june june july june database sorted customer id transaction time customer id customer sequence customer sequence version database transactions ordered increasing transaction time corresponds sequence 
call sequence customer sequence 
formally transactions customer ordered increasing transaction time tn set items denoted itemset 
customer sequence customer sequence itemset itemset itemset customer supports sequence contained customer sequence customer 
support sequence defined fraction total customers support sequence 
database customer transactions problem mining sequential patterns find maximal sequences sequences certain user specified minimum support 
maximal sequence represents sequential pattern 
call sequence satisfying minimum support constraint large sequence 
example consider database shown fig 

database sorted customer id transaction time 
fig 
shows database expressed set customer sequences 
set minimum support customers sequences maximal satisfying support constraint desired patterns support answer set patterns 
sequential pattern supported customers 
customer buys items items supports pattern looking patterns necessarily contiguous 
sequential pattern supported customers 
customer buys supports pattern subset 
example sequence minimum support sequence supported customer 
sequences having minimum support answer maximal 
related problem discovering items bought transaction basket data introduced 
related problem finding items bought concerned finding intra transaction patterns problem finding sequential patterns concerned inter transaction patterns 
pattern problem consists unordered set items pattern case ordered list sets items 
discovering patterns sequences events area active research ai see example 
focus body discovering rule underlying generation sequence order able predict plausible sequence continuation rule predict number come sequence numbers 
hand interested finding common patterns embedded database sequences sets events items 
problem related problem finding text subsequences match regular expression unix grep utility 
finding text subsequences approximately match string 
techniques oriented finding matches pattern 
problem difficulty figuring patterns try efficiently finding ones contained customer sequence 
techniques multiple alignment proposed find entire text sequences similar 
find locally similar subsequences 
pointed techniques apply discovered patterns consist consecutive characters multiple lists consecutive characters separated fixed length noise characters 
closest problem problem formulation context discovering similarities database genetic sequences 
patterns wish discover subsequences consecutive characters separated variable number noise characters 
sequence problem consists list sets characters items simply list characters 
element sequential pattern discover set characters items simply character 
solution approach entirely different 
solution guaranteed complete guarantee discovered sequential patterns interest specified minimum number sequences 
algorithm main memory algorithm generalized suffix tree tested database sequences contain hints extend approach handle larger databases 
solution targeted millions customer sequences 
organization solve problem finding sequential patterns phases sort phase ii phase iii transformation phase iv sequence phase maximal phase 
section gives problem decomposition 
section examines sequence phase detail presents algorithms phase 
empirically evaluate performance algorithms study scale properties section 
conclude summary directions section 
finding sequential patterns terminology length sequence number itemsets sequence 
sequence length called sequence 
sequence formed concatenation sequences denoted support itemset defined fraction customers bought items single transaction 
itemset sequence support 
itemset minimum large itemsets mapped large itemsets support called large itemset 
note itemset large sequence minimum support 
large sequence list 
algorithm split problem mining sequential patterns phases 
sort phase 
database sorted customer id major key transaction time minor key 
step implicitly converts original transaction database database customer sequences 

phase 
phase find set simultaneously finding set large sequences set just fh lg 
problem finding large itemsets set customer transactions albeit slightly different definition support considered 
papers support itemset defined fraction transactions itemset sequential pattern finding problem support fraction customers bought itemset possibly transactions 
straightforward adapt algorithms find 
main difference support count incremented customer customer buys set items different transactions 
set mapped set contiguous integers 
example database fig 
large itemsets 
possible mapping set shown fig 
reason mapping treating single entities compare equality constant time reduce time required check sequence contained customer sequence 

transformation phase 
see section need repeatedly determine set large sequences contained customer sequence 
test fast transform customer sequence alternative representation 
transformed customer sequence transaction replaced set contained transaction 
transaction contain retained transformed sequence 
customer sequence contain sequence dropped transformed database 
contributes count total number customers 
customer sequence represented list sets 
set represented fl 

transformed database called depending disk availability physically create transformed database transformation done fly read customer sequence pass 
experiments physically created transformed database 
transformation database fig 
shown fig 

example transformation customer sequence id transaction dropped contain transaction replaced set 
sequence phase 
set find desired sequences 
algorithms phase described section 
maximal phase 
find maximal sequences set large sequences 
algorithms section phase combined sequence phase reduce time wasted counting sequences 
having set large sequences sequence phase algorithm finding maximal sequences 
length longest sequence gamma gamma foreach sequence sk delete subsequences sk data structures hash tree algorithm quickly find subsequences sequence described similar find subsets itemset 
sequence phase general structure algorithms sequence phase multiple passes data 
pass start seed set large sequences 
seed set generating new potentially large sequences called candidate sequences 
find support candidate sequences pass data 
pass determine candidate sequences large 
large candidates seed pass 
pass sequences minimum support obtained phase form seed set 
families algorithms call count count 
count algorithms count large sequences including non maximal sequences 
non maximal sequences pruned maximal phase 
count algorithm called aprioriall apriori algorithm finding large itemsets 
count algorithms apriorisome 
intuition algorithms interested maximal sequences avoid counting sequences contained longer sequence count longer sequences 
careful count lot longer sequences minimum support 
time saved counting sequences contained longer sequence may time wasted counting sequences counted subsequences large 
count algorithms forward phase find large sequences certain lengths followed backward phase find remaining large sequences 
essential difference procedure generating candidate sequences forward phase 
see momentarily apriorisome generates candidates pass large sequences previous pass pass data find support 
generates candidates onthe fly large sequences previous passes customer sequences read apriorihybrid algorithm better apriori finding large itemsets 
property itemset transaction gamma subsets transaction avoid scanning database passes 
property hold sequences expect algorithm apriorihybrid better algorithm apriori 
customer id original transformed customer sequence customer sequence mapping transformed database result phase gamma new candidates generated gamma see section 
foreach customer sequence database increment count candidates contained candidates minimum support 
answer maximal sequences algorithm aprioriall database 
notation algorithms denotes set large sequences set candidate sequences 
algorithm aprioriall algorithm fig 

pass large sequences previous pass generate candidate sequences measure support making pass database 
pass support candidates determine large sequences 
pass output phase initialize set large sequences 
candidates stored hash tree quickly find candidates contained customer sequence 
apriori candidate generation apriori generate function takes argument gamma set large gamma sequences 
function works follows 
join gamma gamma insert ck select gamma gamma lk gamma lk gamma large candidate candidate sequences sequences sequences join pruning candidate generation gamma gamma delete sequences gamma subsequence gamma example consider set sequences shown column fig 

input apriori generate function get sequences shown second column join 
pruning sequences subsequences sequences shown third column left 
example pruned subsequence proof correctness candidate generation procedure 
example consider database customer sequences shown fig 

shown original database example 
customer sequences transformed form transaction replaced set contained transaction replaced integers 
minimum support specified customer sequences 
pass database phase determine large sequences shown fig 

large sequences support second third fourth passes shown 
candidate generated customer sequences fifth pass 
maximal large sequences sequences algorithm apriorisome algorithm fig 

forward pass count sequences certain lengths 
example count sequences length forward phase count sequences length backward phase 
function takes parameter length sequences counted pass returns length sequences counted pass 
function determines exactly sequences counted balances tradeoff time wasted counting non maximal sequences versus counting extensions small candidate sequences 
extreme length candidates counted non maximal sequences counted extensions small candidate sequences counted 
case apriorisome degenerates aprioriall 
extreme function non maximal large sequence counted lots extensions small candidates counted 
hit denote ratio number large sequences number candidate sequences jl jc 
function experiments 
intuition heuristic percentage candidates counted current pass minimum support increases time wasted counting extensions small candidates skip length goes 
function integer return elsif return elsif return elsif return return apriori generate function section generate new candidate sequences 
kth pass may large forward phase result phase nice loop condition counted gamma gamma known new candidates generated gamma new candidates generated gamma foreach customer sequence database increment count candidates contained candidates minimum support 
backward phase gamma gamma gamma gamma forward phase delete sequences contained foreach customer sequence increment count candidates contained candidates minimum support 
known delete sequences contained answer algorithm apriorisome sequence set gamma available count gamma candidate sequences 
case candidate set gamma generate correctness maintained gamma gamma backward phase count sequences lengths skipped forward phase deleting sequences contained large sequence 
smaller sequences answer interested maximal sequences 
delete large sequences forward phase non maximal 
implementation forward backward phases interspersed reduce memory candidates 
omitted detail fig 
simplify exposition 
sequences support sequences support sequences support sequences support large sequences candidate sequences example database example aprioriall algorithm find large sequences shown fig 
phase pass database 
take illustration simplicity 
second pass count get fig 

third pass apriori generate called argument get candidates shown fig 

count generate apriori generate called get pruning turns shown third column fig 

counting get fig 
try generating turns empty 
start backward phase 
gets deleted longer sequences 
skipped counting support sequences forward phase 
deleting sequences subsequences sequences subsequences left sequences counted get maximal large sequence 
sequences deleted contained longer sequence 
reason sequences deleted 
algorithm algorithm shown fig 

apriorisome skip counting candidate sequences certain lengths forward phase 
candidate sequences counted determined variable step 
initialization phase candidate sequences length upto including step counted 
forward phase sequences lengths multiples step counted 
step set count sequences lengths initialization phase forward phase 
really wanted count sequences lengths 
generate sequences length joining sequences length 
generate sequences length joining sequences length sequences length generate sequences length need sequences lengths initialization phase 
apriorisome backward phase count sequences lengths skipped forward phase 
apriorisome candidate sequences generated forward phase 
intermediate phase generates 
backward phase identical apriorisome 
example assume count turns empty forward phase 
generate intermediate phase count followed deleting non maximal sequences backward phase 
process repeated actual implementation intermediate phase interspersed backward phase omitted detail fig 
simplify exposition 
apriori generate initialization intermediate phases otf generate forward phase 
otf generate procedure step integer initialization phase result phase step gamma new candidates generated gamma foreach customer sequence increment count candidates contained candidates minimum support 
forward phase step step find step step step foreach customer sequences otf generate step see section sequence increment count step adding step necessary 
step candidates step min support 
intermediate phase gamma gamma gamma gamma determined gamma known new candidates generated gamma new candidates generated gamma backward phase apriorisome algorithm section 
reason apriori generate generates candidates otf generate generate 
may hold try find step step case forward phase 
addition size jl jl step size step generated apriori generate may faster find members step contained find members step contained fly candidate generation otf generate function takes arguments set large sequences set large customer sequence returns set candidate sequences contained intuition generation procedure contained don overlap candidate sequence 
sequence implementation function shown sequence xk subseq lk forall sequences xk contained ig subseq forall sequences start contained ig answer join xk join condition xk start example consider set sequences fig 
otf generate called parameters customer sequence corresponds start values sequence contained shown fig 

result join join condition start denotes set sequences length single sequence example continuing example section consider step 
initialization phase determine shown fig 

forward phase get candidate sequences support support 
large 
pass find apriori generate procedure section needs generalized generate essentially join condition changed require equality gamma terms concatenation remaining terms 
sequence start start values empty 
intermediate phase generate turns empty count just backward phase get performance assess relative performance algorithms study scale properties performed experiments ibm rs workstation cpu clock rate mhz mb main memory running aix 
data resided aix file system stored gb scsi drive measured sequential throughput mb second 
generation synthetic data evaluate performance algorithms large range data characteristics generated synthetic customer transactions 
environment 
model real world people buy sequences sets items 
sequence itemsets potentially maximal large sequence 
example sequence sheets pillow cases followed followed 
people may buy items sequence 
instance people buy sheets pillow cases followed 
may contain sequence 
example customer place order dress jacket ordering sheets pillow cases dress jacket form part sequence 
customer sequence sizes typically clustered mean customers may transactions 
similarly transaction sizes usually clustered mean transactions items 
synthetic data generation program takes parameters shown table 
generated datasets jdj number customers size database jcj average number transactions customer jt average number items transaction jsj average length maximal potentially large sequences jij average size itemsets maximal potentially large sequences ns number maximal potentially large sequences ni number maximal potentially large itemsets number items table parameters name jcj jt jsj jij size mb table parameter settings synthetic datasets setting ns 
number customers jdj set 
table summarizes dataset parameter settings 
refer reader details data generation program 
relative performance fig 
shows relative execution times algorithms datasets table decreased support support 
plotted execution times low values minimum support generated candidates ran memory 
memory cost finding support candidates ensured execution times larger apriori apriorisome 
expected execution times algorithms increase support decreased large increase number large sequences result 
performs worse algorithms mainly generates counts larger number candidates forward phase 
difference number candidates generated due otf generate candidate generation procedure uses 
apriori generate count candidate sequence contains subsequence large 
otf generate pruning capability 
major advantage apriorisome aprioriall avoids counting non maximal se time sec minimum support apriori apriorisome time sec minimum support apriori apriorisome time sec minimum support apriori apriorisome time sec minimum support apriori apriorisome execution times quences 
advantage reduced reasons 
candidates aprioriall generated gamma apriorisome uses gamma purpose 
gamma gamma number candidates generated apriorisome larger 
second apriorisome skips counting candidates lengths generated stay memory resident 
memory gets filled apriorisome forced count set candidates generated heuristic suggests skipping candidate sets 
effect decreases skipping distance candidate sets counted apriorisome starts behaving aprioriall 
lower supports longer large sequences non maximal sequences apriorisome better 
scale section results scale experiments apriorisome algorithm 
performed experiments aprioriall results similar 
report aprioriall results conserve space 
scale results selected datasets 
similar results obtained datasets 
fig 
shows apriorisome scales number customers increased times 
scale graph increasing number customers looks similar 
show results number customers scale number customers dataset levels minimum support 
size dataset customers mb 
execution times normalized respect times customers dataset 
shown execution times scale quite linearly 
investigated scale increased total number items customer sequence 
increase achieved different ways increasing average number transactions customer keeping average number items transaction ii increasing average number items transaction keeping average number transactions customer 
aim experiment see data structures scaled customer sequence size independent factors database size number large sequences 
kept size database roughly constant keeping product average customer sequence size number customers constant 
fixed minimum support terms number transactions experiment 
fixing minimum support percentage led large increases number large sequences wanted keep size answer set roughly 
experiments large sequence length set large itemset size set 
average transaction size set graph number transactions customer set second 
numbers key refer minimum support 
results shown fig 

shown execution times usually increased size gradually 
main reason increase spite setting minimum support terms number customers number large sequences increased increasing customer sequence size 
secondary reason finding candidates customer sequence took little time 
support level execution time went little transaction size increased 
reason decrease overhead associated reading transaction 
high level support overhead comprises significant part total execution time 
decreases number transactions decrease total execution time decreases little 
introduced new problem mining sequential patterns database customer sales transactions algorithms solving problem 
algorithms apriorisome aprioriall comparable performance apriorisome performs little better lower values minimum number customers support sequential pattern 
scale experiments show apriorisome aprioriall scale linearly number customer transactions 
excellent scale properties respect number transactions customer sequence number items transaction 
applications user may want know ratio number people bought items sequence number people bought items length sequence 
case additional pass data get counts prefixes large sequences apriorisome algorithms 
aprioriall algorithm counts 
applications aprioriall preferred algorithm 
algorithms implemented data repositories including aix file system db part quest project run data data 
plan extend lines ffl extension algorithms discover sequential patterns item categories 
example category dish kitchen appliance heavy electric appliance relative time transactions customer relative time transaction size scale number items customer ffl transposition constraints discovery algorithms 
item constraints sequential patterns involving home appliances time constraints elements patterns come transactions days apart 
agrawal imielinski swami 
mining association rules sets items large databases 
proc 
acm sigmod conference management data pages washington may 
agrawal srikant 
fast algorithms mining association rules 
proc 
vldb conference santiago chile september 
expanded version available ibm research report rj june 
agrawal srikant 
mining sequential patterns 
research report rj ibm almaden research center san jose california october 
altschul gish miller myers lipman 
basic local alignment search tool 
journal molecular biology 
califano rigoutsos 
flash fast lookup algorithm string homology 
proc 
st international intelligent systems molecular biology bethesda md july 
dietterich michalski 
discovering patterns sequences events 
artificial intelligence 
hui 
color set size problem applications string matching 
apostolico galil manber editors combinatorial pattern matching lncs pages 
springer verlag 

search common patterns sequences 
computer applications biosciences 
argos 
fast sensitive multiple sequence alignment algorithm 
computer applications biosciences 

wang 
chirn marr shapiro shasha zhang 
combinatorial pattern discovery scientific data preliminary results 
proc 
acm sigmod conference management data minneapolis may 
waterman editor 
mathematical methods dna sequence analysis 
crc press 
wu manber 
fast text searching allowing errors 
communications acm october 
