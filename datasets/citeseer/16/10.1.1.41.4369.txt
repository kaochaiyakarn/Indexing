meta model analysis design organizations multi agent systems jacques ferber ferber lirmm fr olivier gutknecht lirmm fr laboratoire informatique micro de montpellier 
universit montpellier ii france presents generic meta model multi agent systems organizational concepts groups roles structures 
model called aalaadin defines simple description coordination negotiation schemes multi agent systems 
aalaadin meta model artificial organization build multi agent systems different forms organizations market hierarchical organizations 
show meta model allows agent heterogeneity languages applications architectures 
introduce concept organizational reflection uses conceptual model describe systemlevel tasks remote communication migration agents 
briefly describe platform called madkit model 
relies minimal agent kernel platform level services implemented agents groups roles 
organization major issue multi agent systems works attempted develop models systems organizational approaches 
concepts roles groups organizations informal casual way 
practically effort incorporate organizational terms concepts multi agent systems 
rare attempts include organizational concepts multi agent systems occurs gasser 
early system mace introduced concept role describe multi agent systems 
instance contract net protocol agents role manager proposals agents role bidder 
advocated importance computational organizational theories fertilize multi agent researches invited talk icmas 
examples organizational concepts mas come fox lesser decker see instance tackle problem design software engineering terms organizations 
organizational theories conducted context commonkads effort focused human organizations models 
exception describes analysis method mas organizational terms describes algorithm reorganizing societies agents 
close specific approach 
lack interest organizations comes general conceptual trend defines multi agent systems mere aggregations agents interacting agent means autonomous entity behaves individually 
today multi agent systems chosen describe coordination interaction structures called agent oriented path 
view designer multi agent system concerned agents individual actions supposed social structures come patterns actions arise result interactions 
admitted behavior agent consequence mental state beliefs intentions goals commitments 
see instance 
works reactive agents take agent oriented view considering structures emerge interaction individual agents agents supposed mental states 
agent oriented view difficult design complex systems problems ffl heterogeneity language 
heterogeneity considered important issue multi agent systems implemented systems knowledge accept agents speaking different languages 
efforts bring standardized language kqml acl fipa group show problem language heterogeneity consid ered important required standardization methods reduce language discrepancies 
ffl multiple applications architectures 
implemented systems knowledge allow applications different objectives different internal architectures concurrently platform 
ffl security 
security major concern distributed systems multi agent techniques knowledge proposed prevent agents interacting agents 
agent system supposed able interact agent regardless capabilities goals authorizations 
claim contrary considering organizational concepts groups roles structures dependencies class citizens relating behavior agents key issue building large scale complex systems resolves previous problems clear efficient manner 
organization defined adapting framework activity interaction definition groups roles relationships 
regard organization structural relationship collection agents 
view organization described solely basis structure way groups roles arranged form concerned way agents behave multi agent systems analyzed outside set interaction modes 
address issues architecture agents way agents act 
agents defined functions organization roles sets constraints accept able play roles 
mean structures static groups totally separated 
contrary power structures comes ability agents join groups doing acquire new abilities obtained 
power lies see fact agents play different roles different groups computer scientist tennis player average musician cook 
activities related different communities plays different roles different languages world tennis words expressions world computer science world cooking obvious computer scientists speak english speak french 
aalaadin generic meta model multi agent systems main concepts agents groups roles 
meta model describing organizations build different models organizations aalaadin market hierarchical organizations 
section devoted description metamodel call simply model short 
reader bear mind model describe specific organizations generic way describe specific organizations 
see section aalaadin directly provides sort reflection call organizational reflections 
kind reflection describes operational aspects groups system level functions remote message passing migration resources management meta level groups agents 
section briefly describes implementation aalaadin java called madkit allows description multi agent systems working concurrently 
system level aspects way agents groups roles represented platform described 
conceptual model assume model idea collective structure permits levels analysis concrete level corresponds core concepts agent group role 
describes actual agent organization 
methodological level defines possible roles valid interactions structures groups organizations 
core concepts aalaadin model core concepts agent group role 
presents diagram model 
contains handles member group agent role 
core model agent model places constraints internal architecture agents assume formalism individual agents 
agent specified active communicating entity plays roles groups 
database wrapper agent ticket bidder agent user agent ticket bidder agent search bot kqml agents group mobile agents group contract net group machine machine 
scenario involving multiple groups agent definition intentionally left general allow agent designers adopt accurate definition agenthood relative application 
agent designer responsible choosing appropriate agent model 
group define groups atomic sets agent aggregation 
agent part groups 
basic form group way tag set agents 
developed form conjunction role definition may represent usual multi agent system 
agent member groups time 
major point aalaadin groups freely overlap 
group founded agent agent request admission existing group 
groups distributed machines 
take example classical application travel assistance agents 
example suppose composed agents involved specific contract net protocol find best offer user bidder agents travel assistance communicating kqml database agents 
model bidder agent part application dependant contract net group involved type dialog kqml group able communicate language 
user agent part group gathering mobile agents simultaneously contract net group 
role role representation agent function service identification group 
agent handle roles role handled agent local group 
group admission handling role group requested candidate agent necessarily awarded 
relating communications roles authorizing agent play roles model allows agents handle heterogeneous dialog definitions simultaneously 
travel assistance agent example cited section contract net group contain roles bidder role multiple unique manager role 
contract net example reveals communication model group easily described identifying abstracted interaction scheme bidder manager roles individual actual agents 
special role group group manager role automatically awarded group creator 
responsibility handling requests group admission role requests 
revoke roles group membership 
default request fulfilled agent specify specific group management behavior 
evaluator acceptance functions agent enter group play role associated boolean acceptance evaluation function evaluates true 
notice define particular mechanism role access group 
examples illustrate possible functions controlling acceptance role group systematic acceptance refusal local group gathering agent running agent platform accept agent acceptance conditioned competences scheme role awarded agent depending owned skills 
supposing group role requires set competences required fc 
true required competences constrained implementation candidate exhibit interface authorized join group 
conditioned admission dialog request induces interaction manager candidate negotiate admission 
constrained group status instance defining coefficient similarity current group members candidate similar trusted agents 
methodological concepts addition core agent group role model concepts added represented directly multiagent organizations 
additional concepts serve analysis design tool 
purpose provide organizational model specification actual multi agent system ultimately developed expressed core concepts 
section detail concepts group organizational structure relation core model 
organizational structure group structure group organization agent role agent class interaction contains handles member defines defined contains holds instantiates instantiates instantiates core concepts 
methodological model group structure group structure description group 
identifies roles interactions appear group 
define group structure tuple hr li ffl finite set roles identifiers 
represents enumeration possible roles played agents group 
ffl interaction graph 
precisely labelled oriented graph specifying valid interactions roles 
theta edge orientation role initiating interaction 
edge represents interaction initiated role named label ffl interaction language 
chosen formalism individual interaction definitions 
relation graph associate unique protocol definition edge label label emphasize fact group structure instantiated partial form actual group roles defined group structure moment group depending group dynamics 
instance define highly sophisticated market group broker client service roles market group may include roles 
organizational structure define organizational structure set group structures expressing design multi agent organization scheme 
organizational structure seen specification initial problem conceiving agent marketplace 
different group structures involved organizational structure permits viable management heterogeneity agent communication languages models local applicative domains single system 
define organizational structure couple hs ffl set valid group structures 
ffl rep representative graph 
labelled graph edge labelled roles roles included set roles defined group structures respectively 
representative structure definition groups agent having role group role group relation group structures groups note actual organization just possible manifestation organizational structure 
include group defined organizational structure 
market organization example clarify inter relations structures actual instances organizational group model short example market community modeled methodological guidelines 
define groups 
link different interaction models held broker role acts representative service provider group way broker role group 
clients interact broker find suitable service agent contract group structure definition aimed ephemeral groups containing agents involved final phase 
possible state market organization resulting organizational structure shown 
reflection large amount done reflection computer science 
smith coined term computational reflection describe process market organizational structure unique unique seller buyer contract group structure unique service providers group structure broker service specialized service language interactions defined unique mandatory competence broker service group client group structure interactions defined kqml client broker service service buyer client seller service client client temporary contract group service providers group client group broker broker 
organizational group structure market organization actual market organization able represent reason 
computational reflection applied various languages implementations 
computational reflection shown important representing system level activities resource management task load balancing object migration parallel distributed systems 
important body devoted computational reflection object oriented languages general see instance 
common implementation procedural reflection object oriented language model reflection object meta object governs computation 
attempt kind reflection context agent oriented languages 
model difficult represent various aspects object agent just meta object 
limitation led definition called group model reflection behavior object realized meta level coordinated action multiple meta level objects 
group reflection useful representing implementing various aspects set distributed objects requires complete redesigning language addition resource consuming great number meta level objects requires 
introduce new model reflection call organization model overcomes difficulties 
organization model direct consequence organizational meta model 
need introduce new concepts meta level entities meta level groups reflective power comes directly fact agents belongs groups play different roles different groups 
theories reflection describe entities processes reified represented meta level 
reflection performed general complementary mechanisms 
cross membership 
agent belong domain related group meta level group handle system level activities management resources remote message passing dynamic security migration agents meta level operations realized entering meta level group 
instance agent able migrate enter local group called mobility play role 

services 
system level services represented aalaadin agents play specific roles meta level groups 
instance mobility achieved agents play migratory role local mobility group 

representative 
agent representative group group possible transform agent group necessary implement kind group reflection 
modify behavior agent delegates tasks agents group example reflective behavior aalaadin consider problem migration accomplished 
mobility carried groups 
agent system wants mobile 
expressing mobility specialized group allows description mobility features standard formalism group roles 
site local group called mobility group contains agents agents potentially mobile site migratory agent agents migrate 
play role receive capacity able migrate agent needs competence serializable 
agent serialized accepted member group 
agent migratory role mobility group 
agent responsible local mobility group local group mobility control group domain group local group system group local mobility group migratory agent migratory agent kernel agent kernel agent transmit migration suspend request migration request suspend system group site site system group kernel agent kernel agent migratory agent kill request activate confirm migration deserialize activate request kill local mobility group migratory agent system group mobility control group domain group site local group local mobility group local group site 
migration scenario migration local agents remote platform 
migratory agents members system group contains agents control resources allocated agents able control life cycle agents 
group called mobility control gathers agents migratory role different local groups 
group eases communication negotiation migratory agents necessary control actual migration process 
consider scenario agent migration 
suppose agent belongs domain group resides site suppose reason needs migrate site agents instance 
typical scenario agent migration ffl agent sends request group manager local mobility group join group role 
group manager decides agent suitable migration possesses competence serializable 
ffl agent wants migrate agent kernel reason request sent agent having migratory role group migrate 
request sent reason agent micro kernel agent micro kernel agent micro kernel agent micro kernel mobile agent system agent software wrapper agent database agent interface agent pda laptop group workstation applet group group 
madkit platform architecture things system level agent charge resource allocation 
ffl migratory agent serializes candidate requests kernel agent suspend activity candidate sends peer site ffl remote migratory agent agent confirms reception asks kernel agent resume new local migratory agent resides asks kernel agent kill old suspended agent 
madkit platform demonstrate effectiveness model built agent platform called madkit multiagent development kit validate approach 
madkit platform implements core concepts agent group role adds design principles ffl micro kernel architecture ffl services ffl graphic component model basic philosophy madkit architecture possible platform management services assured micro kernel handled agents organized groups identified roles 
madkit runs platform supporting java implementation 
agent micro kernel madkit micro kernel small kb agent kernel 
term micro kernel role micro kernels domain os engineering 
define agent microkernel minimal set facilities allowing deployment agents services 
madkit micro kernel handles tasks control local groups roles micro kernel responsible maintaining correct information group members roles handled transmits admission requests appropriate group manager 
agent life cycle management micro kernel launches agents full control life cycle 
assigns globally unique agent identifiers 
local message passing messages agents delivered micro kernel facilities receiver local agent 
message delegated specialized system agent 
platform agent platform classical sense 
reduced size micro kernel combined principle modular services managed agents enable range multiple scalable platforms 
services agents groups roles platform agents defined inheriting class provides agent identification messaging api group role related calls 
methods offer group creation joining various calls identify roles group agents playing role request role handling delegation removal 
special groups roles exist platform 
local group contains agent running local micro kernel 
admission group automatic finding local agents uses standard group role model implementation 
second special group system group gathers members having capacity access micro kernel potentially having control life cycles agents 
access system group tightly restricted agents identified trusted entity 
interaction micro kernel uses standard agent communication 
agent created kernel bootstrap wrapper agent having full access control agent micro kernel 
role system local groups 
members system group request privileged actions interacting group role mechanisms manage agent groups 
agents services contrast architectures madkit uses agents achieve distributed message passing migration control dynamic security aspects system management 
allows high level customizing service agents replaced difficulty instance possible implement completely different mechanism distributed messaging changing agents platform 
services change runtime delegating roles agents 
role delegation principle interesting side effect allowing easy scaling 
agent hold roles group group grows launch agents delegate roles 
communication distribution messaging group role management uses unique agent identifier identifier unique distant kernels madkit agents transparently distributed changing agent code 
groups spread different kernels agents usually notice 
distribution madkit platform relies agents handling roles system group ffl communicator micro kernel route non local messages communicator agents distant platforms inject local messages kernel 
ffl group synchronizer agents allow groups roles distributed kernels distributing group role changes synchronizers turn enter information local kernel 
group synchronizers distributed group ease distributed group management bootstrap phase 
distributed systems mechanisms built regular agents platform communication migration tailored specific platform application requirements changing communication agents instance manage disconnected modes laptops 
madkit platform run full local mode just launching communication agents 
services necessarily handled agent 
instance communicator agent representative group gathering agents specialized smtp sockets corba iiop communications delegate task appropriate agent 
graphic model madkit graphic model independent graphic components 
agent solely responsible graphical interface respect rendering event 
madkit running applet box console modes processing actions 
agent interface simple label complex construction multiple widgets 
agent micro kernel run various graphical modes 
current implementation madkit run different modes development environment called box console mode applets 
development complex systems necessitates development models multi agent systems allow real heterogeneity agents communication languages 
meta model organizations mas called aalaadin able overcome problems allowing designers multiagent systems describe kind organization core concepts groups agents roles 
development platform called madkit concepts implemented 
various projects meta model platform development 
early application resulted construction agents collaborative genetic sequencing 
group role formalism allowed easy customization auto assembly processing chains 
current projects include dynamic load balancing scheme agents multi agent robot control various projects distributed simulation 
drogoul 
agent oriented design soccer robot team 
kyoto editor proc 
second international conference multi agent systems pages 
aaai press 
de vogler menezes 
organisation model model definition document 
technical report esprit project 
ferber 
computational reflection class object oriented languages 
oopsla proceedings 
ferber 
reactive distributed artificial intelligence principles application 
hare jennings editors foundations distributed artificial intelligence 
ferber carle 
actors agents reflective concurrent objects iv perspective 
ieee trans 
systems man cybernetics 
finin fritzson 
kqml language protocol knowledge information exchange 
proc 
th intl 
distributed artificial intelligence workshop 
fox 
organizational view distributed systems 
ieee trans 
man systems cybernetics 
gasser 
overview distributed artificial intelligence 
gasser editors distributed artificial intelligence theory praxis 
kluwer academic publishers 
gasser herman 
mace flexible testbed distributed ai research 
huhns editor distributed artificial intelligence pages 

glaser 
autonomous agents reorganization 
atal 
gustavsson 
multi agent systems open societies 
th workshop agent theories architectures languages 
gutknecht ferber 
madkit page 
www lirmm fr madkit 
lashkari metral maes 
collaborative interface agents 
proc 
aaai 
maes nardi editors 
meta level architectures reflexion 
matsuoka watanabe yonezawa 
hybrid group reflective architecture object oriented concurrent reflective programming 
proc 
european conference object oriented programming pages 
mller wooldridge jennings editors 
intelligent agent iii agent theories architecture language 
springer verlag 
prasad decker garvey lesser 
exploring organizational designs case study distributed data processing 
tokoro editor proc 
second international conference multi agent sytems pages 
aaai press 
rashid baron forin golub jones orr 
mach foundation open systems 
proc 
second workshop workstation operating system september 
smith 
reflection semantics procedural language 
phd thesis 
technical report 
white 
telescript technology mobile agents 
bradshaw editor software agents 
mit press 
yonezawa smith editors 
imsa workshop reflection meta level architecture 
acm sigplan 
