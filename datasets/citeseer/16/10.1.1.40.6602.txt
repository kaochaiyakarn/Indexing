models requirements traceability bala ramesh department computer information systems georgia state university atlanta ga usa edu matthias jarke informatik rwth aachen 
aachen germany jarke informatik rwth aachen de may requirements traceability intended ensure continued alignment stakeholder requirements system evolution 
useful traces organized modeling framework 
frameworks proposed theoretical considerations analysis literature 
contrast follows empirical approach 
focus groups interviews conducted major software development organizations demonstrate wide range traceability practices distinct low high users traceability 
observations models comprising important kinds traceability links various development tasks synthesized 
resulting models validated case studies incorporated number commercial traceability tools 
discussion link types usage practice implications design generation traceability methods tools 
supported part office naval research european commission esprit project crews deutsche forschungsgemeinschaft project ja prime cooperation empirical formal methods requirements traceability jointly funded german daad national science foundation 

models prototypical models application domain usually organized underlying basic metamodel 
purpose models reduce significantly task creating application specific models systems user selects relevant parts model adapts problem hand configures solution adapted parts 
analysis domain take enormous effort started scratch models reported save development costs systems standardized domains scheer 
surprisingly models highly successful industries best known example sap approach 
domain sufficiently standardized allow model final product system built 
approaches followed sap necessarily supportive change especially change goes initially covered domain 
experience get product reused dhar jarke 
leads idea models capturing development process confused prescriptive software process models finkelstein 
process developing models arduous 
traditional normative computer science approach imposing models developers long known failed cases 
models abstraction best practice condensed numerous case studies extended period time followed case studies refine evaluate proposed model 
provably correct models derive relevance slice practice cover 
formalizing model appropriate mathematical framework number elementary desirable properties ensured 
models traceability 
interest development models requirements traceability 
summarizing earlier views perspectives finkelstein define requirements traceability ability describe follow life requirement forward backward direction origins development specification subsequent deployment periods going refinement iteration phases 
importance requirements traceability highlighted fact example department defense spends costs traceability getting adequate value money traceability organizations haphazard standards provide little guidance models mechanisms vary large degree poorly understood 
surprisingly market requirements traceability tools current tools support simple traceability models services 
previous models requirements traceability focus different aspects requirements traceability 
version configuration management systems focus source aspect physical artifacts traceability information maintained emphasizing document management role traceability rose conradi westfechtel 
source aspect remains important trace objects available persistent sources constitute long term traceability traceability methods tools traces persistent reliably acceptable cost 
studies management level usually focus stakeholder aspect agents involved management traceability 
example yu mylopoulos dependencies stakeholders starting point driving documenting requirements processes 
roles stakeholders respect objects emphasized thesis contribution structures finkelstein 
empirical study shows practical value rich system stakeholder roles documenting creation requirements finkelstein longitudinal case study ramesh shows different usage roles important designing implementing traceability systems 
summarizing stakeholder aspect important duration complexity projects grow 
despite importance considering physical trace management stakeholder roles current practice shows efficiency effectiveness traceability support largely determined system object types traceability link types offered 
important fine grained change management repercussions aspects source management stakeholder dependencies pohl 
focus analysis object types trace link types current practice organize models 
presenting models shall discuss embedding stakeholder source management aspects including implications tool design drawn studies 
research overview efforts develop model traceability driven experiences deployment remap model design rationale dependency management developed late dhar jarke ramesh dhar 
development model guided experiments experienced software engineers fact served starting point commercial tool developments including environment anderson consulting slate tool td technologies 
despite apparent success users remap pointed complex usage situations features needed 
informal feedback gained discussions broad variety traceability strategies practiced industry existing models simple rigid deal variety 
embarked pronged strategy 
european nature project began develop model driven approaches process guidance traceability provide technical means dealing wide spectrum traceability techniques 
starting point activity developed basic traceability framework known dimensions requirements engineering jarke pohl pohl 
pohl framework elaborated set types traceability links literature rsm model synthesizes objects traced international software engineering standards 
pohl pohl resulting process integrated tool environments discussed 
parallel began year series empirical studies american software development organizations goal capturing current desired practice requirements traceability developing validating models guide improved practice assessing impact traceability software development maintenance process 
presents models grounding empirical studies relates findings requirements traceability mechanisms 
companion papers discuss organizational factors guide selection user organizations models ramesh organizational implementation impact traceability year case study specific organization ramesh 
section describe design empirical studies starting brief survey traceability uses reported literature 
section presents group results simple meta model traceability schemes organized 
studies show clear distinction low high users traceability representing simple comprehensive traceability practices explained detail section 
sections describe low high models separately indicate ways migrate 
section contains fairly detailed example high models supporting large system engineering project 
sections discuss implications results 
section define basic categories traceability link types show map concrete link types models discussing available support link type relate results existing research 
section general concerning functionality traceability tools drawn application demonstrated case study development design rationale tool adm system andersen consulting 
section summarizes results 

empirical studies section describe empirical studies defining validating applying models 
background definitions uses traceability requirements traceability identified literature quality factor characteristic system possess include non functional requirement standards governing development systems government mil std mil std replaces dod require development requirements traceability documents 
edwards howell define traceability technique provide relationship requirements design final implementation system 
palmer states traceability gives essential assistance understanding relationships exist software requirements design implementation 
relationships allow designers show design meets requirements help early recognition requirements satisfied design 
palmer states traceability helps system development products satisfy stakeholder requirements 
hamilton view traceability ability discover history feature system impacts changes requirements identified 
greenspan state ability allow changes artifacts requirements specification implementation traced system important property systems description technique 
short requirements traceability characteristic system requirements clearly linked sources artifacts created system development life cycle requirements 
different stakeholders project sponsors project managers analysts designers maintainers users involved system development life cycle 
traceability needs stakeholders differ due differences goals priorities problems traceability stem differences interest understanding ramesh edwards 
identifies criteria perspective managing system development effort 
traceability helps promote contractor contracted method working demonstrate requirement satisfied 
helps ensure component system satisfies requirement ward gold wright addition expensive unnecessary features system 
requirements engineering major challenge linking rationales sources requirements 
traceability facilitates communication involved project alleviate problems 
requirements management facilitated capturing information necessary understand requirements evolution verification 
design traceability allows designers maintainers keep track happens change request implemented system redesigned edwards howell 
traceability helpful link designs justifications important decisions assumptions contexts design solutions arrived smithers 
systems evolution requires better understanding requirements achieved tracing back sources pinheiro goguen 
traceability provides ability cross items requirements specifications items design specifications dorfman thayer 
complete traceability accurate costs schedules changes determined depending engineer programmer know areas effected changes 
test procedures traceable requirements designs modified errors discovered brown 
motivation study design consequence different uses perspectives traceability wide variations format content traceability information different system development efforts 
detailed proposals traceability frameworks finkelstein pohl current literature standards provide detailed guidelines types information captured contexts 
variety tools industry provide mechanisms represent various types linkages system components interpretation meanings linkages left user 
clear need development models guidelines software development activities 
comprehensive scheme models help ensure traceability maintained phases systems development process requirements stated contracted customer analysis design implementation testing operationalization product 
step generic link types usage typical development tasks encoded model requires empirical analysis 
discussed earlier providing traceability requirements sources outputs system development process dimensions 
different stakeholders contribute capture traceability information different perspectives 
example types links interest user may different interest system designer 
user may interested answer question system components affected requirement 
systems designer may addition interested answer components affected requirement 
semantics linkage viewed different stakeholders may differ 
instance consider relationship maintained traceability table requirement linked design object 
user may view relationship means identify design component generated requirement 
designer may view linkage providing information constraint requirement restricts design object 
semantics meaning attributed linkage guided reasoning user performing linkage 
user may interested just connectivity information designer may interested repercussions changes solutions relaxation constraint redefinition requirement 
conducted empirical studies capture information needs respect traceability different stakeholders involved software development process 
data collection methods included evaluation major traceability tools structured interviews practitioners focus groups involving various stakeholders depth case study traceability practice organization 
due elaborate preparation required assemble experienced practitioners organizational settings empirical studies data collection spanned period years 
subsequently models incorporated number prototypical commercial tools 
table summarizes various steps data collection analysis steps identifies major outputs phases 
steps described subsections 
stage data sources outputs pilot study focus groups verbal protocols structured interviews initial version metamodel detailed design empirical study analysis current tools data commercial traceability tools house traceability tools including review literature vendor training interviews major users tools capabilities shortcomings current tools understanding various approaches traceability support phase focus groups traceability practitioners group experts traceability meta model initial coding scheme development models phase ii focus groups traceability practitioners evaluation traceability documents low model traceability high models traceability main study phase iii groups experts drawn different industries comments informal validation models model models case tools design rationale models adm requirements management models recap high models slate case studies models industrial uptake results table summary data collection analysis pilot study pilot study determined appropriateness various data collection approaches guided development relevant instruments questionnaire structured interviews focus groups 
involved focus groups idea generation protocol analysis study problem solving behavior structured interviews evaluate initial results 
focus group semi structured exchange small group people conducted clear agenda 
technique commonly qualitative data collection methodology market research 
protocol analysis commonly building expert systems 
thought process subjects captured think aloud verbal protocols 
protocols recorded subjects think problem verbalize thoughts 
recorded protocols analyzed capture knowledge elements operators characterize problem solving behavior 
context knowledge elements provide insights relationships linkages operators provide insights reasoning performed relationships 
structured interviews designed provide insights nature traceability links potential areas providing support explicit representation relationships 
various types reasoning performed stakeholders identified mechanisms developed aid tasks design maintenance nature relationships perceived areas potential benefits 
pilot study involved master students information technology graduate university 
subjects extensive experience domains ship building aviation maintenance traceability widely practiced 
participants completed comprehensive project involving analysis design segment largescale real life system 
focus groups consisting subjects conducted 
discussion moderated discuss definitions need traceability different stakeholder perspectives issues involved creating comprehensive traceability practice 
subjects participated protocol analysis phase project 
think aloud protocols subjects involved defining traceability links requirements design elements implementation projects participated collected 
subjects participated structured interviews results developed data collection sessions reviewed elaborated 
development initial versions meta model primary outcome pilot study development detailed design empirical study 
focus groups structured interviews identified primary methods data collection subsequent phases 
importance incorporating contributors users traceability information study highlighted 
area business stakeholders involved study project size cost number requirements traceability focus computer hardware system integration system engineers project manager quality assurance system analysts lines requirements management satisfying requirements contract compliance project monitoring control rationale change control government system development organization project sponsors project manager lead system engineers multi dollar rationale project monitoring satisfying requirements resource management government system development project management project sponsor contractor engineers dollars standards compliance project tracking control resource management area business stakeholders involved study project size cost number requirements traceability focus organization system analysts change control government system development organization systems analysts project sponsors requirements requirements evolution standards compliance government system testing organization test engineers manager contractor engineers requirements satisfaction requirements standards compliance development appropriate verification procedures system integration system engineers test engineers maintenance engineers dollars satisfaction requirements inter component dependencies development appropriate verification procedures rationale pharmaceuticals system engineers maintenance engineers requirements satisfaction requirements rationale quality assurance requirements allocation utility project manager system engineers maintenance engineers approx 
dollars satisfying requirements change control project tracking monitoring compliance regulations telecommunications project manager system engineers test engineer requirements satisfying requirements quality assurance project tracking monitoring aerospace project lead engineer system engineer dollars requirements allocation requirements management evolution requirements rationale aerospace system engineers maintenance engineer requirements requirements allocation design rationale component dependencies resource monitoring electronics system engineers project manager maintenance engineers multi dollars quality assurance satisfying requirements standards compliance design rationale defense contractor system integrator system engineers dollars requirements allocation satisfaction requirements requirement management evolution electronics system engineers requirements satisfaction requirements contractor financial services system engineers requirements satisfaction requirements 
contractor system engineers requirements satisfaction requirements contract compliance 
project management organization project managers systems analysts dollars project tracking control contracts compliance standards compliance resource management 
project sponsor project sponsors project manager system analysts dollars development requirements compliance standards mission organizational needs project costing estimating automobile system engineers multi requirements allocation area business stakeholders involved study project size cost number requirements traceability focus maintenance engineers dollars satisfaction requirements resource monitoring rationale electronics test engineers project manager systems analyst satisfaction requirements development appropriate verification procedure 
contractor system engineers requirements development documents required sponsor requirements test matrix contract software developer system engineers requirements development allocation test matrices government contracting organization contract specialists project manager requirements contract compliance standards compliance project monitoring control contract software development maintenance maintenance engineers requirements requirements satisfaction test plan development aerospace configuration management personnel quality assurance system engineers requirements requirements evolution system component evolution requirements satisfaction telecommunications system engineers systems analysts requirements development requirements requirements rationale project costing estimating table organizations involved focus groups interviews analysis current tools step developing clear understanding current practice traceability detailed study capabilities major tools support traceability undertaken 
leading case tools market included study 
include doors rtm teamwork rdd slate rts requirements tracer 
case tools developed system engineering organizations house studied 
study included detailed review vendor provided literature participation vendor provided training ranging days tools interviews major users tools 
provided clear understanding capabilities current tools areas traceability supported tool shortcomings different approaches traceability supported valuable design focus groups interviews 
details tool analysis reported subsumed survey traceability tools conducted international council systems engineering see www org tools html extended pohl 
main study main part study comprised focus group discussions organizations 
conducted wide variety industries including defense government aerospace hardware development pharmaceuticals utility system integration electronics telecommunications 
table gives overview organizations involved 
feasible participants representing different user consumer perspectives included 
average focus groups consisted participants 
pilot study focus groups followed selected structured interviews 
participants experience key areas systems development including project management software engineering training requirements management software testing system integration configuration management procurement development support software quality assurance systems analysis maintenance software implementation 
participants average years experience systems development 
phase focus groups conducted phases 
phase building results pilot study data focus groups involving participants developing traceability meta model 
meta model defines language traceability models described 
provides primitives represent different traceability linkages various objects produced systems development 
represents agents involved systems development process sources traceability information captured 
meta model discussed section 
meta model checked plausibility terminology group experts drawn different industries stakeholder groups 
important outcome study identification various types traceability information development initial scheme encoding models data collected subsequent phases 
phase ii second phase involved development models traceability practice 
data focus groups development classification traceability links representing current practice ideal practice 
issues addressed focus groups focus group started clarifications definitions terms 
included identification various stakeholders involved traceability system lifecycle phases covered project discussed system components traceability intended various views traceability 
focus group participants asked discuss current traceability practice desired traceability practice 
achieve comprehensive understanding current desired practices participants asked elaborate ideas different perspectives user perspective types traceability information needed useful different phases system development process 
information captured phase system development life cycle 
costs associated capture information 
provider perspective types traceability information stakeholder capture 
phase lifecycle 
benefits associated capture information 
available participants asked answer questions specific reports documents produced organization 
part focus group devoted discussion different types traceability links organization 
various traceability relationships identified traceability documents 

traceability relationships created defined prioritized 
stakeholders involved managing links 

traceability links maintained reviewed updated changed activities 

mechanisms defining semantics links maintaining 

uses type traceability link identified 

issues facilitate impede implementation traceability 
focus group session lasted hours 
sessions audio video taped analysis 
prohibited security confidentiality concerns scribe documented discussions 
focus groups deeper understanding different types traceability links discussed literature developed 
usage link types practice gradually encoded models major uses traceability discussed section 
high low users quickly apparent participants study categorized distinct groups respect traceability practice 
refer low high traceability users 
characteristic low traceability user high traceability user number organizations study seventeen number participants typical complexity system requirements requirements traceability experience level zero years years user definition traceability documents transformation requirements design increases probability producing system meets customer requirements easy maintain main application traceability requirements decomposition requirements allocation compliance verification change control full coverage life cycle including user customer captures discussion issues decisions rationale capturing traces product process dimensions table characterization low high usage requirements traceability characteristics groups summarized table 
representation groups empirical study discussed table 
briefly low users just years traceability experience see simply mandate project sponsors compliance standards 
contrast experienced high users experiencing traceability major opportunity customer satisfaction knowledge creation systems lifecycle 
perceived importance traceability grows system complexity 
sections show models low high traceability users differ substantially 
noted organization predominantly low practice may mature traceability practice areas vice versa 
development models analysis data followed standard procedures qualitative research employ focus groups interviews 
data analyzed form content analysis data categorized concepts 
primary concepts study various types traceability links current ideal practice 
results qualitative ethnographic summary morgan rely direct quotations data 
suggested morgan analysis done phases 
phase detailed examination data focus groups provided initial categories concepts data coded 
scheme developed iteratively sufficient explain data 
scheme study analysis data phase ii identity refine components traceability models 
triangulation multiple data sources multiple participants represent different stakeholder perspectives organization data collection methods focus groups interviews review traceability documents helped confirm findings 
concept represented models section included observed practice reported current practice focus group discussions structured interviews represented traceability documents identified part desired practice 
traceability information high models considered desired practice organizations study 
developed sets models low models describe current practice low organizations 
models high users different systems development activities represent best practices industry 
phase iii models developed phase ii groups experts comments feedback 
groups composed experienced traceability users drawn different industry groups 
groups provided informal validation models provided suggestions implementation models system engineering environments 
model tools suggestions received experts analysis current traceability tools identified characteristics system engineering environments implementation traceability models cf 
sections 
develop adapt models software information system requires support specialization instantiation applied nodes links 
order ensure formal consistency proposed models able demonstrate users tool vendors meta model models encoded conceptbase jarke knowledge meta database management system telos language mylopoulos 
shall conceptbase screenshots show models sections 
initial validation conceptbase prototype early submodel included concept demonstrator knowledge software assistant project 
demonstrations prototypes empirical grounding led adoption models commercial traceability tools traceability scheme slate leading system engineering tool architected earlier versions models 
design rationale models primary components knowledge software assistant tools concept demo adm created andersen consulting behalf air force models incorporated tool supports capture traceability multiple environments models tailored large commercial government system engineering organization ramesh 
models tailored support traceability formal specifications model management system ramesh 
detailed discussion experiences implementations scope provide strong evidence usability scalability models real life system engineering 
case studies sections 
simple meta model requirements traceability sections models resulting studies 
assume traceability models implemented trace repository manual computerized 
widely accepted repository comprise layers details see bernstein jarke pohl meta model defining language traceability models defined set traceability models customized scope defined meta model possibly distributed database actual traces recorded chosen models 
adopt convention denote node metaclasses stakeholder small bold caps instances customer non bold small caps 
similarly link metaclasses traces denoted bold italics specific link types standard italics refines 
practitioners focus groups phase main study confirmed essential aspects traceability captured simple meta model shown provides basic language primitives categorizing describing traceability models detail 
object source stakeholder documents traces role manages traceability meta model entity link meta model specialized instantiated create organization project specific traceability models 
meta model represent dimensions traceability information cf 
table 
information represented including salient attributes characteristics information 
model objects represent inputs outputs system development process 
examples various types objects include requirements assumptions designs system components decisions rationale alternatives critical success factors represent major conceptual elements traceability maintained various life cycle stages 
objects created various organizational tasks 
examples tasks include systems analysis design activities 
information represented attribute objects 
traceability various objects represented traces links 
example depends link objects requirement assumption represented specialization traces link 

stakeholders play different roles creation maintenance various objects traceability links 
model stakeholders represent agents involved system development maintenance life cycle activities 
examples stakeholders include project managers systems analysts designer stakeholders act different roles capacities establishment various conceptual objects traceability links 

represented terms sources document traceability information 
objects documented sources may physical media documents intangible things people undocumented policies procedures 
examples sources include requirement specification documents meeting minutes design documents memoranda telephone calls various stakeholders phone numbers mail address stakeholders manage sources create maintain 

information represented formal informal means relates components traceability 
sources mentioned physical intangible 
represented different levels formality 
sources requirements specifications may text documents design documents may represented multiple formats graphics text 

certain conceptual object created modified evolved 
rationale creation modification evolution various conceptual objects represented specialization meta class object 
linked conceptual object specialization traces link 
complex models rationale issue information systems framework include issues alternatives arguments supporting opposing represented specialization object object relationship model 

information captured modified evolved 
relevant temporal information entities links model represented attributes 
example frequency time duration requirement design created reviewed modified justified specific rationale represented scheme 
dimension example 
rationale design decisions 
systems designer 
design documentation library 
tool represented rationale justifies design decision traceability link 
facilitate understanding communication designers maintainer avoid rework 
finalization design table traceability dimensions example nodes meta model correspond roughly dimensions requirements engineering proposed pohl cover aspects understanding objects agreement stakeholders physical representation sources 
note discussing requirements process se creation usage traces 

low traceability model typical low user traceability efforts provided 
names objects links interpretations validated expert groups observed practice 
organizations simply traceability tables link various components information explicit identification semantics relationships 
low users created traceability links model requirement dependencies allocation requirements system components compliance verification change control 
recall denote traceability linkages italic small caps linkages components link indicated uppercase letters objects 
link model inverse may defined 
low model typical low users viewed requirements traceability providing link initial requirements actual system components satisfy requirements 
higher level requirements decomposed refined level 
recursive process lower level requirements derived higher level system requirements 
derived requirements problem don know got 
want sure low level requirement tied bigger level specification typically information captured relational data base form traceability matrix 
direct quote subject participating focus group interview 
henceforth quotes subject italicized included quotation marks specific 
original derived requirements allocated system components want track component take care requirement creating allocation table 
allocation table common mechanism maintain information 
simple way mapping requirements system components usually ensure components system satisfy requirements want know part system satisfies requirement go allocation table identify 
matter testing worry 
capturing components satisfy various requirements requirements mapped different components designer able verify requirements addressed system 
compliance verification phase systems development low users requirements database contains current version system validated requirements develop system compliance verification procedures cvps tests simulations 
cvps developed requirement usually maintained requirements tests traceability matrix 
matrix showing tests requirements important sure requirements adequately taken care 
change occur requirements traceability links identify cvps modified 
cvps performed system components verifying component satisfies requirements 
results tests verify system works meets requirements 
tests performed indicate achieved success implementing goals satisfied requirements 
system component may depend may interface external systems 
information evaluating requirement satisfied system component 
low users lacked especially area capturing rationale 
requirements management example information concerning requirement issues resolved rationale decisions seldom captured 
likewise similar information absent design implementation phases idea decisions impact rest effort 
simply trying project fact doesn 
people worked gone trace happened 
disciplined document 
demands team 

high traceability high users traceability employ richer traceability schemes low users traceability information richer ways 
segregated high model parts clarity requirements management design allocation compliance verification 
addition rationale management takes center stage 
requirements management submodel traceability implemented correctly greatly benefit requirements management facilitating requirements understanding capture tracking verification 
discussion requirements management model 
systems built primarily satisfy organizational needs 
needs may long term strategic needs immediate operational needs denoted hierarchy shown thick lines figures 
needs support detailed scenarios describing intended purpose system 
build system obviously satisfy long term operational goals sponsors 
environment clearly stated mission needs statement mns operational requirements document ord important documents effort 
obviously high level 
laying goals 
requirements management submodel objectives system trying meet system objectives justified organizational needs system draws legitimacy mns ord 
stakeholders customer program manager program sponsor specify system objectives 
requirements system generated system objectives high level goals vague called requirements contracting 
specific detailed requirements developed proceed 
due large number requirements associated complex systems important determine factors critical success project manage requirements contribute factors 
stakeholders involved identification organizational needs identify critical success factors csf stakeholders issues values mistakes system errors performance important thing power requirements critical item area 
resources cost time weight voltage examples 
lot decisions cost weight cost combination technical cost trades 
requirements system managed monitored tracked 
example mission criticality csf requirements classifying monitoring requirements 
similarly weight aerospace system total cost development tracking monitoring requirements 
part negotiation process stakeholders tradeoffs deciding scope functionality system depending impact typically enter complex negotiation process scope scope affordable affordable 
believe traceability earns keep 
decisions determine things requirements identified initially feasible cost effective desirable 
requirements equal significance criticality requirements may traced lifecycle different levels granularity detail order optimize resources spent 
may unnecessary undesirable considering overhead involved maintaining traceability maintain linkages requirement output created systems design process 
may deciding essential trace requirements detail fine grained traceability important just try get traceability information critical requirements requirements may important 
requirements traced lifecycle provide stakeholders view understand evaluate system supports smaller subset driving high risk set requirements merit visibility tracking program attribute requirement call technical performance measure tpm 
high risk want put tpm requirement 
programmed tracking giving higher visibility see re doing 
requirements may standards policies procedures 
maintaining links requirements sources requirements help understand correctly interpret 
constraints may treated type requirement denoted link 
focus groups stated constraints hard requirements set limits system developed systems designed decisions constraints considered 
evolution biggest challenges managing large complex systems due way requirements constantly evolving changing 
focus group noted order accurately reflect volatility requirements traceability scheme help document understand evolution requirements 
major sources changes need fix deficiency system identified say operations testing discussed detail section changes organizational needs 
various stakeholders modify system objectives changed organizational needs leading changes requirements 
projects long life cycles military applications nature systems requirements dynamic organizational needs mission operational system objectives keep evolving systems considered successful cold war era longer considered useful strategic mission needs evolving rapidly 
possible abandon investments systems develop new systems meet current needs 
lack comprehensive traceability primary reason inability identify components linked various objectives modify meet current requirements clearly part system retain part longer relevant 
don traceability details systems 
traceability links needed requirements get specified different levels detail evolve various stages development lifecycle 
recursive links requirements shown model useful providing historical record requirements evolution mapping requirement back sources facilitating complete understanding requirement comes 
derived requirements lower level requirements derived higher level requirements usually assumptions stakeholders 
derived requirements need tracked carefully major source conflicts issues subject changes assumptions 
requirements derived create collection requirements different level detail 
traceability helps clearly identify derived requirements partially satisfy originating requirement find things requirements documents people didn know came 
created consolidating clarifying requirements 
policy identify agree derived requirements 
lot room problems go customer requirements lower levels interpretations 
try document detail know responsible 
traceability information useful managing explosion number requirements start pages requirements top level go prime item development specifications consider requirements derived pages second third generation derived requirements explosion derived requirements relationships 
requirements elaborated providing explanation clarification 
added detail assists understanding assumptions requirements interpreted 
add requirements really find unclear 
refined specific detail fact demanding original requirement 
requirements depend 
example requirement specific software platform may depend requirement specific hardware platform 
identifying dependencies important especially requirements change impact change entire system determined different people teams different parts requirements parts organization sub contractors 
difficult trace part affects 
part system 
get major problems line unable connections 
complex requirements broken components identifying simpler requirements form part 
links help understanding various pieces requirement fit especially important large complex systems requirements may contain interdependent parts 
split requirement deal different aspects 
functionality 
links requirements show parent child hierarchical relationships 
higher levels requirements just abstractions lower levels initially top hierarchical decomposition starting general goals customer flowing set systems performance requirements children multiple parents originally probably looking children single parent 
hierarchies show relationship requirements specified entire class hardware specific type hardware component 
rationale sub model discussion rationale sub model 
specification elaboration decomposition derivation modification objects requirements designs generate lead issues conflicts due differing interpretations assumptions interests viewpoints experience objectives stakeholders 
information decisions resolve issues maintained system lifecycle ensure customer requirements understood satisfied traceability pays making sure understand requirement interpreted implemented issues considered design satisfy 
decisions turn may affect requirements 
various alternatives address resolution issues considered want know options picking versus 
immediately see decisions affect parts feedback important making right decisions 
getting resolution process helpful bringing board sheet music 
arguments alternative may proposed decision select alternatives influenced parties understand various possibilities looks better terms critical project 
common observation focus groups seldom detailed information alternatives considered arguments supporting opposing alternatives assumptions decisions explicitly recorded 
chosen alternative documented discarded ones recorded 
evolving requirements availability information may help avoid expensive rework debated weeks 
thrown years ago got camp arguing put back keep 
gone back assessed decision years ago saved lot time 
capture rationale detail described impractical due overhead involved capture due lack tools facilitate 
simple descriptions rationale requirements designs may recorded assumptions 
assumptions underlying various components deliberation recorded record rationale simple notes 
add specifically assumptions 
useful keep track assumptions clearly possible candidates changed requirements 
return issue section 
rationale submodel lifecycle large projects requirements assumptions change 
projects experience personnel turnover 
detailed rationale maintained changes lead lot rework looked tradeoff approach person analysis leaving person reviewed gone churn thing 
lengthy look issues lot people contribute touch change add information 
systems development process different stakeholders bring different interpretations requirements origins 
example different stakeholders review origins requirement say standard may interpret differently 
difference interpretation cause conflicts stakeholders cooperative setting 
look set requirements meaningless don really know customer needs interpret wrong different ways reason detailed rationale provide accountability 
information requirements design evolved changes status development extremely helpful stakeholders involved creating requirement don traceability rationale impossible understand low level requirements 
may sense person evaluated options 
design allocation term design refer activity creates artifacts including implementation 
requirements drive design mandates standards policies methods govern system development activity follow military standards policies sure compliant 
design allocation submodel system subsystem component referred components building blocks system 
defined created design process 
requirements allocated components supposed satisfy 
components piece hardware software 
allocation step re going allocate people processors memory hardware 
components depend components functionality performance may depend 
interfaces different components explicitly identified example interface specifications maintenance dependency information easier 
difficulty identification indirect dependencies components important record discovered 
instance operating system component may affect choice hardware may direct interfaces 
component created modified traceability information helpful determining impact entire system 
information hard people know piece affects seemingly unrelated piece don share information 
leads lots rework 
composition components identified part links 
information allows designers identify inter component dependencies change part break sub parts sort traceability mesh structure gives sort relationships know characteristic component 
hierarchy specifies components organized different levels system subsystem item unit want keep track common details types components 
resources money weight personnel power components 
discussed section resources important track allocation distribution utilization design implementation allocation level needs parameters associate budgets resources going consumed re going test see re compatible complying grossly bounds budgeting want traceability give level assurance particular steps design process meeting meet system goals help allocate resources capabilities way maximize likelihood meeting system goals 
cost happens major system driver am really interested keeping track actual supposed cost components 
hand memory space primary driver really pay attention cost decisions impact allocation memory space focus groups mentioned important identify functions performed components 
functions typically traced functional requirements explicitly identified requirements documents keep functionals separate 
want sure addressed way different pieces system traceability design allocating functions way re sure support don interfere 
component may partially satisfy requirements design progresses requirements fully satisfied 
difficulty explicitly creating traceability links non functional requirements system components highlighted groups non functionals problem 
going say part system affects performance requirement give millisecond response 
components depend external systems interface 
direct interfaces easier recognize represent traceability framework indirect dependencies particular product line going brought board ship going plug existing system things need know functionality system needs demand services range demand 
especially respect system plugging 
discussion section capture rationale applies capture rationale development designs components 
traceability come handy determining reasons design design knowledge capture supposed maintain 
basically design way decisions thought went decision 
changed changed 
compliance verification sub model variety cvps prototyping simulation testing inspection shown links developed ensure requirements adequately addressed write test specifications apart srs component specifications 
got able specify re going test standards account 
ability develop cvps critical factor deciding requirement considered elect test longer requirement agree 
compliance verification submodel development cvps governed resources personnel money 
utilization assignment availability resources determines perform compliance test cost benefit analysis performing justifies 
tradeoff resources allocated development cvps source issues conflicts resolved going find far go testing 
matter trade discussion 
mandates standards policies methods commonly basis cvps determine cvps required performed 
requirements written comply decide testing strategy want go standard requirement trying meet 
important cvps requirement interpretation standards developing requirements 
absence traceability requirements standards difficult develop cvps lack way firmly assure tests generating really reflect thing standard writing requirement cvps produce results verify components satisfy requirements help generate change proposals requirements design implementation 
certify completeness correctness system identify changes may necessary meet objectives design requirement changed tests current system continues support objectives 

implementing high traceability models case study section illustrate advanced usage models section case study adopted system government organization 
case study combat systems section new ship refereed ecs discussion highlights implementation traceability various stages systems development 
focus development passive sonar ecs describe traceability high models described section implemented project 
implementation described scenarios various stages development life cycle 
objective discussion illustrate implementability models 
section requirements management design allocation rationale management purpose 
implementation models popular commercial case tool viz system level automation tool engineers slate slate traceability scheme represented links abstraction blocks building blocks represent physical conceptual objects 
user defined subtype trace link object represent specific types links 
link type identified link 
slate object helps define object termed defining object objects comply objects called complying objects example traceability link system objective organizational need identify mission need defining object 
traceability link system objective requirement identify requirement complying object 
discussion sanitized protect proprietary confidential data 
trademark td technologies requirements management traceability scheme requirements management adopted high requirements management model implemented slate shown 
specifically shows linkages requirements mission needs system objectives critical success factors 
includes components rationale model represent rationale requirements 
requirements management model mission needs 
traceability model step system development problem defining mission needs justify system objectives 
mission needs provided document called mission needs statement mns 
document segment shown resides living document slate database 
mns document contains big picture requirements surface ship subject ecs 
provides general guidelines mission capabilities design architecture constraints personnel constraints 
provides operational constraints 
mission needs identified mns represented slate abstraction block 
example line shows mission need represented abstraction block specified defining object 
contrast line identifies complying object viz 
system overview 
fact represents system objectives corresponding organizational needs 
tracing relevant parts system objectives statements mns shown justifies link 
project sponsors involved definition system objectives create linkages justify objective relation higher level mission needs provide backward traceability origins requirements 
discussions rationale different functionalities system traceability valuable 
example systems analyst information initially get big picture customer wants system 
mns document requirement identification 
step development identification requirements 
shown requirements generated system objectives 
original requirements document ecs includes requirements passive sonar requirements maintained living document slate 
slate utility called requirements identifier parses documents identify statements meet user defined criteria identifying requirements keywords 
case study compliance project standards sentences contain word shall identified distinct requirements 
parsed text subsequently requirements objects 
slate terminology requirements objects comply system objectives 
shows system objective system overview complying requirements requirements 
traceability links requirements compliance system objectives requirements rationale 
depicts information particular requirement 
identifies broadband merit geometric mean frequency radio frequency band source level target 
requirement link paragraph source document identified see line 
source paragraph identified defining object 
slate rationale attached requirements form notes 
user defined note type called rationale purpose 
example requirement supported rationale note see line rationale addresses merit fom required achieve sufficient detection range submarine threat 
requirement linked paragraph system objectives generated 
requirements rationale design allocation design allocation model high users tailored ecs problem 
model shown identifies linkages requirements design system components functions 
identifies resources system components standards policies methods constrain design 
model link standards policies methods design defined inverse link shown objects high design allocation model shown 
mentioned earlier link models inverse may defined 
design allocation model design phase ecs data flow diagrams dfd entity relationship diagrams erd capture information flow system 
slate provides interface teamwork case tool ecs purpose 
abstraction blocks slate linked teamwork objects called teamwork handles formed 
illustrates abstraction blocks representing sonar components teamwork handles corresponding 
teamwork handles represent traceability link information represented slate teamwork 
slate objects treated teamwork requirements attached individual processes dfd 
slate provides mechanism synchronizing teamwork objects change slate 
similar mechanism link requirements represented slate functions represented teamwork 
shows defining objects requirement source document paragraph rationale system objectives 
complying object line cell row column table contains constraints satisfied design 
constraints created design team analysis requirements 
fact value cell string requirements statement 
changes requirement automatically reflected constraint 
example requirements statement mentions need bf microcode turn referenced cell 
requirement changed bf microcode sc microcode automatically change constraint functional design 
requirements project trademark cadre technologies contain parameters may get modified development 
maintaining information location referencing requirements relevant objects significantly increases integrity information reducing possibilities overlooking important changes 
design linked system components objects shown functions represented abstraction blocks signal conditioner digital beamformer 
requirement allocated blocks depict functional view passive sonar system 
just easily describe view instance physical system components requirements allocated 
slate critical success factors csf resources modeled budgets 
ecs requirements managed shown resources system components 
represented attaching budgets relevant objects requirements system components 
shows requirement linked component abstraction block budget hull size attached 
budgets planning performing analyses 
slate supports hierarchical budgets similar nested spreadsheets 
example budget hull size attached linked hierarchically budgets children 
allocations done lowest level leaf nodes rolled hierarchy 
potential budgets complex projects ecs ability monitor cost schedule project 
traceability requirements design budgets modeling resources critical success factors rationale capture rationale management discussions requirements may raise issues conflicts 
alternative ways addressing issues explored decisions stakeholders resolve issues 
issues alternatives arguments rationale represent rationale shown represented slate different types notes 
shows example 
issue relates requirement tracking targets 
alternatives proposed 
alternative suggests system keep capabilities simultaneously tracking targets 
alternative advocates design reduce capabilities simultaneous tracking targets 
argument supports alternative stating need capable drug operations 
argument supports alternative stating cold war ended need capability tracking targets simultaneously 
arguments decision keep capability tracking targets simultaneously 
note type assigned attributes 
case attributes identify originator issue arguments 
capturing type information useful project completed customer questions implemented particular way 
information useful performing system maintenance 
capturing original issues decisions prevent rework issues resolved long ago 
mechanism described maintaining rationale phase lifecycle 
section illustrated high models proposed section tailored implemented large scale system design situations 
provides concrete example illustrating instantiation model components 
commercial case tool highlight implementability models 
case studies models proposed section shown adaptable implementable currently available commercial environments 

supporting traceability links summarizing differences low high uses traceability observe characterized extensions employ richer type system product related object link categories enabling easier retrieval precise human computerized reasoning traces stronger emphasis process related categories longterm case study conducted part ramesh step high traceability followed strong increase sei capability maturity rating 
large number different link types precludes individual treatment 
shown section group link types models basic categories 
go back empirical studies order identify necessary tool support category point proposals commercial research literature may address issues 
conversely discussion provides classification solution proposals advanced traceability tool services 
basic classification traceability links formally speaking traceability system defined semantic network nodes represent objects stakeholders sources consider moment traceability established links different types strengths 
dependency directed approach maintaining consistency designs dates back stallman sussman established 
simplest traceability tools purely relational form relational databases spreadsheets systematically distinguish different node link types 
rdd basic entity relationship structure distinguish nodes links allow user introduce distinctions different types nodes links 
begs question node link types defined 
literature software information systems large number link types proposed important traceability 
basic organization abstraction mechanisms independent traceability detailed 
nature project comprehensive literature survey revealed eighteen different types dependencies traceability context pohl grouped clusters named condition contents documentation evolutionary mentioned abstractions 
satisfies rationale dependency evolves product process related categories traceability links starting point classifying empirical observations adopt simple system just types traceability links shown 
group traceability links mechanisms called product related describe properties relationships design objects independent created 
high level object requirement standard policy complex design object defines kind constraint goal satisfied lower level objects 
satisfaction usually just claim substantiated compliance verification procedures cf 
section 
shared constraint goal satisfied implies dependency lower level objects 
generalization aggregation abstractions configuration complex objects special kinds dependencies 
basic kinds product related traceability links satisfaction links dependency links low traceability users tend characterized relying link types 
second group traceability links called process related captured looking history actions taken process recovered product relationships 
looks similar important difference evolution link types temporal direction left lower level design object evolves right kind action rationale captured higher level object 
kinds process related links evolution rationale links 
advanced traceability users typically higher share link types belonging category 
enhance traceability meta model traceability link types get onion shell meta model traceability shown 
reflecting back empirical studies models low traceability users tend focus inner kernel model advanced users tend venture issue explicit source stakeholder management 
evidence observations table summarizes link types high models way link category belong 
abbreviations right column refer submodels section link types occur rm requirements management rationale da design allocation cv compliance verification 
requirement policy requirement design 
compliance verification procedure satisfies depends product objects rationale process objects stakeholder source evolves traceability meta model extended principal link types link type purpose uses examples model link satisfaction links ensure requirements satisfied system 
relationships design implementation objects requirement objects verified cvps ensure consistency outputs different phases life cycle track designs created satisfy requirements track system subsystem components requirements allocated identify system subsystem components satisfy requirements component satisfies requirement track cvps developed requirement track results cvps ensure requirements satisfied da requirements drive design da requirements allocated system component da component satisfies requirement da system performs function functions address requirement cv cvp developed requirement cv cvp verify system satisfies requirements evolution links document inputoutput relationships actions leading existing object new modified object identify various objects come 
identify origins various objects facilitate better understanding requirements objects establishment accountability creation modifications objects tracking modification refinement history various objects 
rm system objectives rm organizational needs objectives rm scenarios describe organizational needs system objectives requirements rm change proposals rm system objectives generate change proposals rm requirements drive design rm organizational needs identify csf rm requirements basedon standards cv cvp generate change proposals cv compliance verification procedures standards decisions affect requirements da design standards policies methods da change proposals modify design da design defines creates component rm requirements derive requirements rm requirements rationale links represent rationale objects document reasons evolutionary steps identify reasons creation various object clearly identify justifications creation modification objects important decisions assumptions identify context requirements basedon rationale requirements generate issues conflicts alternatives address issues conflicts arguments support arguments depend assumptions requirements rationale decisions link type purpose uses examples model link objects created provide transparency decision process including discarded alternatives order provide clear understanding current solution facilitate maintenance reuse manage system development line organizational needs objectives arguments depend assumptions decisions select evaluate alternatives decisions resolve issues conflicts decision influenced csf rm requirements managed csf rm system components resources dependency link help manage dependencies objects typically stage development imposed constraint resource competence compatibility track composition hierarchies objects manage repercussions changes objects depend rm requirement constraint rm requirement part requirement rm strategic need operational need isa organizational need rm resource isa csf cv test inspection simulation prototype isa cvp rm requirement part requirement da component part component da component depends external system da component depends component rm requirement depends requirements rationale decisions arguments depend assumptions table traceability link types models issues implementing traceability link types classification different link types second goal study identify issues implementing capture system engineering practice 
link types discussed previous subsection issues raised empirical study participants discuss solution strategies proposed literature 
result local solutions exist identified issues question configure individual solutions usable powerful trace tools today market remains open 
section general design goals systems discussed example interesting solution issues addressed section combined creative manner 
satisfies links focus groups raised main issues concerning support satisfaction links derived links important requirements traceability ensure system meets current set user requirements 
representing information considered critical project management perspective 
usually accomplished creating link set requirements set system components satisfy 
links may indirectly derived 
important concern study participants lack support case tools automated identification derived links don time link requirement produced different stages 
links automatically derived possible 
example requirements may linked designs intended satisfy 
designs turn may linked relevant system components 
derived link created requirements system components 
mechanisms automated inferencing incorporated deductive active database environments conceptbase jarke infer derived links traceability environment 
critical step semantics different linkages objects clearly represented 
multiple sources support set requirements may satisfied set system components status requirement satisfied ascertained relevant set system components meet goals 
tools provide way represent fact alternate ways may exist satisfying requirement state requirement met solution combination system components easily tools 
give flexibility accurately convey multiple solution paths need follow anyway 
goal tree representation answering questions goals achieved attempted winston 
defined inference procedures finding optimal solutions goal tree finding best possible way satisfy requirement resolve issue say cost represented goal tree 
context system engineering goals correspond requirements need satisfied issues need resolved complex decisions need 
objects model represented goal tree 
nodes goal tree types nodes represent choices satisfied immediate subgoals satisfied nodes represent simultaneous subgoals compatible solutions satisfied subgoals satisfied charniak mcdermott 
degrees satisfaction systems development project managers ascertain close satisfying critical requirements 
complex systems requirements especially nonfunctional requirements said satisfied absolutely 
designer interested maximizing degree requirement satisfied 
instance performance requirement provide response time milliseconds missile system may thought reasonably satisfied system meets requirement milliseconds target 
millisecond millisecond response times may considered satisfy requirement different degrees 
current tools provide natural ways represent information 
compliance want track am doing requirement progress implementation 
hard get information tools 
need information trade offs 
suggest goal satisficing satisfying may appropriate way characterizing situation 
concept satisficing defined simon refers methods look satisfactory optimal solutions 
framework system component may thought contributing positively negatively satisficing requirement 
hauser house quality categories relate development characteristic affects customer quality requirement strong positive medium positive medium negative strong negative 
measure directionality positive negative relationship strength high medium 
scheme incorporated traceability model follows system component may contribute satisficing requirement finer grained categories 
example user interface component may strong negative impact performance requirement 
issues derived links multiple support degrees satisfaction occur combined form 
requirement satisfied set component mechanisms combining evidence satisfaction developed 
example evidence direction positive degree requirement satisfied may treated minimum support receives 
situations requirement receives positive negative support varying degrees pose significant problem 
requirements rely user perceptions usability system require qualitative measures ascertaining compliance qualitative mechanisms combining evidence 
combining beliefs evidence propagating beliefs inference network may supported mechanisms dempster shafer bayesian probability belief networks fuzzy logic hau kashyap 
fuzzy logic provides mechanisms representing combining imprecise qualitative evidence quantitative methods provide stronger methods combining evidence multiple sources 
dependency links dependencies created objects trying satisfy goals minimally supported traceability models 
issues raised study participants address lack precision characterizing types strength dependencies resulting automated support possible 
types dependency inferencing services traceability models explicitly represent dependencies objects 
example dependencies system components requirements assumptions decisions part high traceability scheme 
type dependencies exist objects vary widely 
example software requirement may depend requirement specific hardware implying order meet met 
dependency different relationship outputs produced pre determined order 
example organization may policy test plans requirement developed design solutions satisfy requirement considered 
empirical studies identified problems related management dependency links 
traceability frameworks simply identify exists dependency set related objects ability specify nature dependency create matrices show hardware requirements column affect software requirements 
obviously 
clear related consume resource power completed 
needs intuitively connection 
second nature dependency specified ability provide support traceability information limited 
got dependency components share memory 
keep developing impact easy 
total memory accounted 
trace matrix stops just listing involved components 
help assessing changing affects 
study suggests ability define different types dependencies traceability framework developing support mechanisms manage dependencies valuable 
addition research theoretical computer science operations research 
schemes identifying different types trace oriented dependencies proposed literature 
example yu mylopoulos classify dependencies stakeholders categories goal dependency task dependency resource dependency 
scheme adapted extended manage dependencies follows dependency links requirements may goal dependencies 
instance software requirement may depend requirement specific hardware 
goal dependency requirements exists inference procedures monitor dependent requirement satisfied necessary dependency objects created common reliance task creates task dependency 
design objects say erd dfd task dependencies 
corresponding artifacts produced specified method structured methodology 
object say erd produced procedure correspondence components may expected 
task dependency exists objects procedures monitoring progress task specified procedure essential 
instance change artifacts initiated associated task dependencies checked compatibility 
resource dependency may involve resources physical money electricity informational data 
navigation control system may resource depend radar input 
dependency exists quality quantity frequency dependence interfaces transfer resources identified 
resource dependency exists procedures monitoring dependee provides desired quality quantity resources specified frequency necessary 
may necessary identify responsible resource conditions resource delivery depends 
additionally temporal dependency exists actions relating objects done specified temporal order 
temporal order specified operators concurrently system development activities involve strict temporal ordering 
instance temporal dependency link set enforce policy test plans created designs addressing requirement completed 
violations temporal dependency constraints monitored temporal reasoning system 
strength dependency problem associated maintaining dependency information dependencies treated equally critical 
studies identified inability precisely identify strength dependency link important issue users traceability information 
got requirements matrix know changing affect 
cases really need take serious 
impact devastating 
times serious 
got ask see ones really worry 
matrix 
hauser propose scheme assigning qualitative quantitative weights links 
yu adapt scheme non functional requirements framework 
degree dependency important involved dependency linkage termed strength dependency 
measure object affects 
measured qualitatively high medium low quantitatively point scale 
strength dependency influence type inference procedures monitoring necessary ensure enforcement various types dependencies 
network dependencies discussed section defined different levels formality stallman sussman 
basic level link simply identifies existence dependency objects 
information contained representation object potential automated reasoning limited type dependency identified 
example exists resource dependency say components satellite infer weight changes affect component 
detailed representation capture direction dependency affects object 
example information effect change positive negative captured 
detailed model represent exact nature influence component possibly expressed detailed domain specific mathematical model 
may possible compute effect change weight component 
obviously defined dependencies sophisticated inferencing capabilities 
evolves links traceability models represent process modification refinement evolution different objects variety links 
objective capture history development structured manner facilitate understanding management objects 
example high models requirements evolution modeled links modify define elaborate derive links considered specializations generic evolves link 
empirical studies highlighted dilemmas management links representing evolution 
traceability frameworks simply represent fact object evolved elaboration 
example derived requirements may simply identified new requirement don know derived requirements came 
hand fine grained representation evolutionary path may desired cases process implicitly understood 
manage derived requirements separate document 
long create simple trace matrix showing customer requirements derived requirements fine area concern weak support versioning configuration management traceability tools sense source code managed configuration system nice features notification changes traceability tool 
fine grained representation evolutionary path object desired higher level view captured just generic link 
pre requirements traceability information thought representing evolution needs goals requirements represented links 
evolutionary links chronological replay evolution artifact 
subsequent phases development transformational approaches software engineering constraint techniques research version configuration management created elaborate refinements associated reasoning schemes simple evolution link 
pursue specializations just mention easily embedded framework 
software configuration management conradi westfechtel tools provide facilities representing enacting policies regarding evolution coarse grained artifacts provide mechanisms notification user changes 
functionalities useful managing traceability information 
traceability tools manage finer grained objects representational diversity combination configuration management traceability remains partially open issue 
rationale links issues concerning rationale links partially repeat demand multi granular representations discussed link types addition capture stakeholder dimension traceability considered key issue 
rationale different levels detail study participants wish maintain rationale different types artifacts decisions different levels detail 
criticality importance requirement instance principal factor deciding granularity rationale needs captured 
contrast traceability schemes observed practice prescribe single framework representing rationale fine grained justify overhead cases coarse value critical instances 
supposed documenting critical decisions 
just going review critical decision 
worth dollars 
life project came came place 
looks doubly bad sponsors come different answer 
details assumptions 
traceability paid big time 
detail decision 
just afford time detailed documentation case 
right major issue got details 
manager get quick glimpse big picture reports easily 
tools management rationale traceability tools rdd support uniform approach representation rationale 
results simple scheme detailed document critical aspects systems development comprehensive scheme complex implemented stage systems development 
detailed study ramesh reveals amount rationale captured left discretion project participants quality content information fluctuates depending time pressure personal preferences 
rationale management approach taken tool discussed section illustrates compromise 
tool supports capture rationale multiple levels detail provide way map rationale captured comprehensive rationale simple view provide big picture 
link sources stakeholders rationale links help represent context various objects developed 
empirical study highlighted common concerns need link various sources information reduce overhead capturing rationale ensure minimal loss detail long know look want understand decided way sufficient 
am busy reenter trace tool don want interrupt critical activities 
large projects overhead involved detailed representation rationale considerable 
facilities link object say requirement decision sources documents meeting minutes mail exchanges help minimize overhead 
facilitates non intrusive capture 
multiple media capture informal knowledge long recognized literature goldman segall mead confirmed studies design situations sults 
thick descriptions representing traceability discussed detail section 
implications traceability mechanisms traceability mechanisms support capture usage trace data document parse organize edit change manage requirements traceability links 
generic tools word processors spreadsheets hypertext editors relational databases number specialized rt tools offered stand rdd alford doors qss slate td technologies embedded integrated case environment teamwork cadre 
majority traceability tools offer tabular representations dependency structures relational database formalism 
suited support low user requires little differentiation link types simple allocation dependency analysis 
tools allow user specialize link types hard attach semantics 
offer fixed high set link types hardcoded semantics tend force user supply detailed information cases simpler model suffice 
tools just offer mechanisms persistent storage display traceability information support process capturing reusing traces guidance enforcement systematic manner tend rigid process models 
surprisingly empirical studies showed users happy current mechanisms supporting traceability 
high development teams built elaborate house extensions arounds existing tools tend inflexible difficult maintain 
high users sophisticated models section 
indicated discussing various link types carefully consider trade effort needed capture complex traceability information subsequent value having information situation development process 
observations indicate new generation traceability mechanisms needed shall try characterize section 
key observation situated nature traceability capture 
implications observation include need abstraction mechanisms allow variation granularity aggregation abstraction sophistication generalization abstraction traceability tasks need inference services supporting semantics different traceability link types need maintaining baseline thick descriptions traces multimedia case initially chosen level trace analysis needs re assessed need mechanisms allow project managers developers define enact model driven trace process accompanying development process 
discuss implications turn 
final subsection design adm tool andersen consulting illustrates principles applied practice 
abstraction mechanisms trace representation relational representation existing tools lend naturally simultaneous representation traces multiple levels granularity milestone level document level fine grained level 
act representation entails making judgments level granularity information represented 
overly large grained representations may result loss useful detail overly fine grained representations may create trivial knowledge benefits warrant cost creating knowledge 
aggregation hierarchies semantic data models offer adequate formal means deal granularity problem 
existing literature offer demonstrably effective decision rules making judgments granularity tools support multi granular strategies section 
similar problem commitment faced considering generalization abstraction 
hierarchies allow smooth transition low high traceability models sense mix traces captured varying sophistication interpreted uniformly terms low models 
instantiation abstraction allows definition change meta models adaptability traceability environments new needs re organization possibly integrated interpretation traces captured heterogeneous environments 
summary advocate move semantics traceability data models 
move facilitated trends object relational database technology offer required extensibility features top proven framework relational data model 
inference services large projects traceability knowledge base quite large 
information needs various participants vary widely navigating entire knowledge base retrieve relevant information difficult sophisticated browsing capabilities 
ability access relevant information ad hoc queries helpful 
inferencing helps maintain integrity knowledge base interdependent components get incrementally defined modified 
inferencing aided mechanisms aggregation classification generalization traceability information 
ability deductive inferences traceability knowledge base helpful reducing overhead increasing usefulness traceability knowledge base 
mechanisms maintain manage dependencies various components requirements traceability supported deductive database capabilities query processing deductive rules integrity enforcement 
grounding traceability models thick descriptions requirements traceability represented variety ways mathematically formal representations transformations derive problem state formal software development informal representations design notebooks record rationale natural language lee 
primary benefit formal representations facilitate automated reasoning 
formal representation requirements traceability difficult design situations lack defined formal models 
converting informal traceability information formal models extremely labor intensive subject personal bias choices 
design primarily collaborative process fischer requirements traceability knowledge consists deliberations individuals engaged process 
anderson point attempts represent informal knowledge formal tools notations result thin descriptions consequence meaning embedded information lost 
informal representations requirements traceability address problems 
thick descriptions enable user requirements traceability grasp subtleties tacit mutual knowledge glean descriptions practices explicit 
formal representations individuals familiar formalisms informal representations wide set users 
informal representations provide set problems classification indexing retrieval information large projects impractical 
understandable humans information representations amenable automated reasoning 
informal representations hold promise respect information content ease capture difficulty accessing reasoning information undermine utility 
summary formal informal representations requirements traceability complement respective strengths weaknesses 
informal representations easy capture formal representations manipulated defined inference procedures 
observed studies design rationale shum hammond effective schemes capture requirements traceability seek combine advantages forms representations 
tight integration formal informal aspects requirements traceability information facilitate capture various types information format appropriate help reuse captured information efficient manner 
model driven trace capture usage assuming mentioned formal representational problems solved project manager developer define kind information recorded trace specify products traceability 
traceability environment lacks important features provides means define trace steps defined information recorded 
example project manager define decisions recorded arguments 
define situation specific process steps happen 
words define process guidelines trace information captured development process 
provides tool support stakeholders capturing information defined trace process 
depending importance attached certain trace information situation environment simply wait information entered optionally default option current tools remind stakeholder record information force stakeholder blocking development process record information automatically 
development approach requires traceability process just defined effectively embedded development process supporting case environment 
pohl describe prototypical environment selective model driven trace capture possible 
applied modeling approach taken approach works roughly follows 
basic element traceability meta model seen product associated process steps create delete change product 
addition normal process steps additional kinds trace steps 
supplementary product steps define capture maintain supplementary information design rationale process execution steps record activities development environment dependency steps record dependencies artifacts created process steps supplementary product steps process execution steps 
process execution steps dependency steps performed largely automatically simply observing process development environment kinds steps usually require human intervention 
conventions project manager empowered define trace information captured kinds trace steps defining information recorded interleaving trace steps normal process steps trace information captured 
sufficiently flexible process centered software engineering environment extended process enacted guaranteeing desired traceability sub process 
noted process centered software environments market moment practical feasibility approach assessed case studies conducted available prototypes 
example multi granular rationale capture adm subsection rationale capture part andersen consulting adm tool illustrate practical application principles discussed section role multi granular abstraction inference services formal informal representations traceability degree model driven trace capture usage 
combination principles mainly aimed achieving systematic customizing traceability needs spanning distance high low models 
abstraction rationale models 
design goal adm offer coherent series rationale models results remap project ramesh dhar maintaining rationale different levels detail 
simple rationale model model sketched capturing rationale simple level detail 
links object rationale 
model provides explicit representation assumptions dependencies 
model assumptions providing justifications creation objects explicitly identified reasoned 
changes assumptions primary factor evolution complex systems representation help development support mechanisms manage evolution 
situations detailed representation rationale necessary intermediate rationale model may 
model issues generated object decisions resolve explicitly represented 
intermediate model provides elementary details decision process involved creating various objects 
issue decision objects complex attributes 
model richer context objects created captured 
object issue generates decision resolves depends depends assumption position argument depends responds supports objects depends influences detailed rationale model finer grained model representing detailed deliberations leading creation objects may appropriate critical situations 
empirical studies remap project ramesh dhar suggest explicit identification alternatives considered arguments alternatives assumptions arguments part deliberation 
detailed rationale model incorporating primitives shown 
incorporates concepts issue information systems ibis framework conklin 
models successfully large scale system development efforts represent complex decision situations leading creation artifacts 
components detailed model closely resemble rationale submodel 
objects model represented rationale submodel major links objects identified model 
hierarchy simple intermediate detailed rationale models reimplemented anderson consulting knowledge software assistant environment adm implementation added advantage different stakeholders may interested different depth rationale example designers detailed rationale models managers simple rationale view model focusing just decisions 
adm screenshots example ramesh dhar shown figures 
inference services 
model components defined formal semantics system components support sophisticated reasoning rationale information 
example dependency network assumptions managed truth maintenance system propagates effects changes beliefs assumptions components design rationale knowledge 
detailed model mechanism help identify decisions need reevaluated changes assumptions underlying network rationale change 
adm supports truth maintenance structures just simple logic approach dempster shafer theory evidence determine belief status decisions 
rationale simple view thick descriptions 
adm provides facilities integrating formal informal components traceability knowledge 
object discussion annotated multimedia clips 
example discussion involving processing orders utility shown node representing location graphical location various services provided utility annotated map service area 
tool provides hypermedia editor various objects model created simply highlighting section hypermedia document 
integration facilitates easy capture traceability information 
model driven capture 
adm provides mechanisms specifying executing monitoring process steps 
define steps involved system engineering process conditions steps executed 
facility tailored define various types traceability information captured 
example facility prompt user design rationale information major design decisions 
agenda mechanism monitor compliance 
current implementation include comprehensive model driven traceability capture 
summary adm example illustrates advanced tool features discussed section feasible industrial settings 
example shows quite bit creativity required combine features practically useful manner 
rationale detailed view 
summary conducted empirical studies broad range software development organizations come models objects traceability links recorded 
models levels user sophisticated fairly clearly distinguished organizations mark different understandings importance requirements traceability 
simple meta model derived part pre studies indicates principle models extended explicit consideration different stakeholders involved contribution usage structures cf 
finkelstein yu mylopoulos 
mapping conceptual trace objects technical media sources documents third element basic meta model addressed discussion different traceability link categories supported inference services requirements traceability mechanisms intended usage traceability link types implies 
importance differentiation conceptual objects media emphasized case studies re practice nissen 
summary believe models constitute step models requirements traceability 
evidence statement surprisingly broad acceptance early versions submodels industry 
accompanying longitudinal case study indicates uptake models accompanied appropriate management support user attitudes may yield substantial benefits terms quality efficiency leading improved software process maturity ramesh 
course case study backed greatly helped findings concerning generation tools addressed status vendors 
identified structured knowledge representation link type related inference capabilities grounding possibly multiple trace models thick multi media descriptions model driven tool supported trace process important ingredients 
current efforts devoted maturing tool technologies evaluating industrial settings 
alford 
strengthening systems engineering process 
proc 
san jose ca 
anderson heath luff moran 
social cognitive human computer interaction 
technical report epc rank xerox europarc cambridge 
zweben 
recovering rationale design changes knowledge approach 
proceedings ieee los angeles ca 
bernstein carlson pal sanders 
microsoft repository open information model 
information systems 
brown 
assurance software quality 
sei curriculum model sei cm software engineering institute pittsburgh pa 
charniak mcdermott 
artificial intelligence 
addison wesley 
cadre technologies 
cadre user manual 
conklin 
hypertext tool exploratory policy discussion 
acm transactions office information systems october 
conradi westfechtel version models software configuration management 
acm computing surveys 
jarke mylopoulos vassiliou software information base server reuse 
vldb journal 
dhar jarke learning prototypes 
proc 
th intl 
conf 
information systems indianapolis dhar jarke dependency directed reasoning learning systems maintenance support 
ieee trans 
software engineering february 
dod 
military standard defense system software development 
department defense 
pohl 
adapting traceability environments project specific needs 
comm 
acm 
dorfman thayer 
standards guidelines examples system software requirements engineering 
ieee computer society press 
dourish bly 
supporting awareness distributed group 
proc acm conference human factors computer systems chi monterey ca 
edwards howell 
methodology system requirements specification traceability large realtime complex systems 
technical report naval surface warfare center 
fellows 
art skill talking people new guide personal business success 
prentice hall englewood cliffs 
finkelstein kramer eds 
software process modeling 
john wiley rsp 

new requirements management software supports concurrent engineering 
washington dc 
fischer grudin lemke mccall reeves shipman 
supporting indirect collaborative design integrated knowledge design environments 
human computer interaction 

thick description interpretive theory culture chapter 
interpretation cultures 
basic books new york 
goldman segall 
collaborative virtual communities learning constellations multimedia research tool 
barrett ed multimedia hypermedia social construction knowledge 
mit press cambridge ma 
finkelstein analysis requirements traceability problem 
proc 
intl 
conf 
requirements engineering colorado springs 
finkelstein contribution structures 
proc 
nd intl 
symp 
requirements engineering york uk 
finkelstein extended requirements traceability results industrial case study 
proc 
rd intl 
symp 
requirements engineering annapolis md 
greenspan 
structuring software development reliability 
microelectronics reliability 
hamilton 
issues traceability integrating tools 
proc 
colloquium iee professional group london 
hau kashyap 
belief combination propagation lattice structured network 
ieee transactions systems man cybernetics january february 
hauser 
house quality 
harvard business review may june 
heath luff 
explicating face face interaction 
gilbert ed researching social life 
sage 
bender 
evidence combination fuzzy linguistic terms dynamic multisensor environment 
proc 
ieee conf 
multisensor fusion integration intelligent systems las vegas 
jarke jeusfeld staudt 
conceptbase deductive object base meta data management 
intl 
intelligent information systems 
jarke pohl establishing visions context model requirements processes 
proc 
th intl 
conf 
information systems orlando fl 
jarke pohl rolland schmitt 
experience method evaluation improvement process modeling approach 
proc 
ifip working conf 
cris maastricht netherlands 

technology social interaction notes achievement authoritative knowledge complex settings 
technical report irl institute research learning palo alto ca 
kidd 
applying hypermedia medical education author perspective 
educational training technology international 
lee 
design rationale capture 
ai magazine summer 
leifer cannon 
electronic design notebook performing medium processing medium 
international journal computer graphics 
mead 
anthropology discipline words chapter 
principles visual anthropology ed 

mouton publishers paris 
moran carroll eds 
design rationale concepts techniques 
lawrence erlbaum 
mylopoulos chung nixon 
representing nonfunctional requirements approach 
ieee transactions software engineering june 
mylopoulos jarke koubarakis 
telos language representing knowledge information systems 
acm trans 
information systems 
nissen jeusfeld jarke huber managing requirements perspectives meta models 
ieee software march 
palmer traceability software requirements engineering thayer dorfman eds ieee computer society press 
pinheiro goguen 
object oriented tool tracing requirements 
ieee software march 
pohl dimensions requirements engineering framework applications 
information systems 
pohl 
process centered requirements engineering 
john wiley research science press 
pohl jarke 
process integrated modeling environments prime foundations implementation framework 
appear acm transactions software engineering management 
qss dynamic object oriented requirements system manual oxford uk 
ramesh 
factors influencing requirements traceability practice 
comm 
acm 
ramesh dhar 
supporting systems development knowledge captured requirements engineering 
ieee transactions software engineering june 
ramesh edwards 
issues development model requirements traceability 
proc 
international symposium requirements san diego ca january 
ramesh powers edwards 
requirements traceability theory practice 
annals software engineering vol 
forthcoming 
pea trigg 
tool exploratory video analysis 
technical report irl institute research learning palo alto ca 

developing software government standards 
prentice hall 
rose jarke nissen 
decision configuration process environment 
iee software engineering journal 

concept mind 
worth 
scheer models business processes 
springer 
simon 
sciences artificial 
mit press cambridge ma 
shum hammond 
argumentation design rationale conceptual roots current 
technical report epc rank xerox limited cambridge europarc cambridge cb ab uk 
smithers tang 
maintenance design history ai design 
proc 
colloquium iee professional group london 
stallman sussman forward reasoning dependency directed backtracking system computeraided circuit analysis 
artificial intelligence 

requirements traceability real time systems 
proc 
ii london 

experimental uses videotapes support design activities 
technical report ss xerox palo alto research center palo alto ca 
td technologies 
slate user manual 
dallas tx 

focus groups guide marketing advertising professionals publishing ny 
winston 
artificial intelligence 
addison wesley reading ma 
wright 
requirements traceability 


proc 
colloquium iee professional group london uk 
yu mylopoulos understanding software process modeling 
proc 
th intl 
conf 
software eng sorrento italy 
