trace testing equivalence asynchronous processes michele boreale rocco de nicola rosario pugliese dipartimento di sistemi informatica universit di firenze firenze italy mail dsi study trace may testing equivalences asynchronous versions ccs calculus 
start operational definition may testing preorder provide finitary fully trace characterizations complete equational proof system 
touch variants theory considering demanding equivalence notion testing richer version asynchronous ccs 
results throw light difference synchronous asynchronous communication weaker testing power asynchronous observations 
keywords asynchronous communications process algebras semantics 
extended revised version 
contents asynchronous ccs syntax 
operational semantics 
may testing semantics 
trace characterization set theoretic interpretation proof system asynchronous calculus syntax semantics 
trace characterization 
set theoretic interpretation 
proof system 
variations testing accs 
accs general relabelling 
related works distributed systems protocols seldom rely global clock little assumptions relative speed 
consequence natural adopt asynchronous communication mechanism 
calls non blocking sending primitives oblige producers consumers synchronize exchanging messages allow sender continue tasks message travels destination 
respect model imposes clear distinction input output primitives appears natural choice reason systems 
spite considerations studied process algebraic models synchronous communications 
focus asynchronous versions ccs accs calculus 
models communication medium understood bag messages output actions waiting consumed corresponding input actions 
reminiscent linda model 
differently linda process algebraic models communication medium described separate entity regarded part process syntax 
precisely bag standing messages seen parallel composition independent output actions 
model process algebra accs calculus system properties conveniently expressed verified means behavioural equivalences 
focus trace may testing equivalences appropriate reasoning safety properties 
start operational definition may testing preorder kernel may testing equivalence provide finitary fully trace characterizations complete equational proof system 
proceeding provide additional motivations 
reasoning system properties behavioural equivalences asynchrony model play crucial role 
example consider simple communication protocol users sharing private channel protocol requires uses send bit information receives messages channels sends channel messages received ordering inputs depends message received calculus formulate protocol follows recall cm stands output input parallel composition creation local channel boolean guard cm zi zi secrecy property want check protocol externally possible guess message behaviour system property formalized requiring behaviour protocol depend bit sends words processes stands process obtained replacing equivalent 
appropriate equivalence induced may testing equivalent processes may pass tests proposed observers running parallel 
views passing test revealing piece information equivalent processes may reveal externally information 
external observer tell apart synchronous communication try communication orders see succeeds kind traffic analysis 
equivalent truly asynchronous scenario ordering guaranteed arrival messages 
unfortunately definition may testing equivalence requires account possible observers reasoning processes hard practice 
full understanding semantics rely observer independent characterizations equivalence 
synchronous models ccs calculus characterization provided trace equivalence just requires equivalent processes able perform sequences actions traces 
trace equivalence widely outside process algebra world see great relevance practical point view 
coincidence may testing important provides full justification trace equivalence observational terms 
coincidence fails hold asynchronous case 
instance equation valid trace equivalence valid may testing equivalence 
example equation empty process 
reason disagreement transition systems traditional process calculi just account processes willing 
case asynchronous communications environment outputs immediately executed demanded processes receptive able receive message sent environment time process sense hidden input actions 
models communication medium modelled explicitly issue just moved process medium 
models modify traditional transition systems explicitly introduce possible process inputs 
result infinitary descriptions obtained simple non recursive processes 
example operational description empty process recx forever performs input action followed complementary output action similarly presents trace model permits arbitrary gaps traces take account external influence processes behaviour :10.1.1.53.4500
approach taken different settings including input output automata nondeterministic asynchronous networks 
models regarded mathematically complex difficult reason 
differently keep traditional finitary transition system modify definition trace semantics 
factoring set process traces preorder induced laws 
intuition trace accepted environment trace accepted ffl deletion ffl process inputs forced ffl postponement sa observations process inputs delayed ffl annihilation ffl aa complementary actions consume 
building usual operational semantics shall define weaker version trace equivalence coincides may testing equivalence 
trace characterization starting point defining finitary set theoretic interpretation processes complete equational axiomatization finite processes 
fact turns comparing processes minimal traces need taken account 
traces outputs occur soon possible 
model obtained way assigns finite interpretations finite processes tackle problem assigning meaning operator language 
precisely interpretation may preorder suggested model follows consuming messages produce messages axiomatization accs relies laws laws specific asynchronous testing sound synchronous may preorder 
completeness proof relies existence canonical forms directly inspired finitary set theoretic interpretation 
trace model axiomatization asynchronous ccs asynchronous calculus 
simpler calculus sufficient isolate key issues asynchrony serves guidance understand theory calculus 
section touch testing appropriate liveness properties interest 
variant accs permits non injective leads quite different treatment asynchrony briefly discussed section 
rest organized follows 
section introduces asynchronous ccs may testing preorder 
section presents alternative characterization traces sections set theoretic interpretation processes complete proof system finite accs processes respectively 
section results previous sections extended asynchronous calculus 
section discusses variations theory 
section contains concluding remarks discussion related 
asynchronous ccs section syntax operational testing semantics asynchronous ccs accs short 
differs standard ccs guarded choices output guards allowed 
absence output guards forces asynchrony possible define processes causally depend output actions 
syntax ranged infinite set names model input actions fa ng ranged set names model outputs 
ar gamma gamma 
ar gamma gamma 
ar gamma gamma 
gamma gamma gamma gamma 
ffg ar gamma gamma 
pnl gamma gamma 
nl ar gamma gamma 
gamma gamma 
ar recx gamma gamma 
recx gamma gamma 
ar gamma 
gamma 
gamma gamma 
table operational semantics accs symmetric rule ar omitted disjoint bijection complementation function delta define set visible actions range 
fg distinct silent action set actions labels ranged shall range finite subsets range define fl lg similarly ranged countable set process variables 
definition set accs terms generated operators output guarded sum parallel composition restriction relabelling agent variable recursion fi fi fi fi fi fi fi fi fi fi fi fi fi fi fi fi fi fi recx fg finite called relabelling function injective fa ag finite 
extend letting ranged denote set closed guarded terms processes terms occurrence agent variable lies scope recx operators 
notation rest abbreviated write 
write fa relabelling function ng note permutation injective 
usual write term obtained replacing free occurrence possible renaming bound process variables 
write denote set visible actions occurring definition def def ff ag 
operational semantics operational semantics language terms labelled transition system gamma gamma 
defined rules table 
usual ffl denote reflexive transitive closure gamma gamma 
resp 
gamma gamma 
gamma 
resp 
gamma 
gamma gamma 
ls write gamma gamma 
gamma gamma 
similarly 
language generated def fs say process stable gamma gamma 
structural congruence similar calculus defined equivalence relation accs processes congruence satisfies structural laws ffl monoid laws parallel composition ffl laws restriction nl pnl nl pnl jq nl ffl laws injective relabelling ffg ffg pnl ffg nf ffg ffl law recursion recx recx 
fundamental property commutes transition relation gamma gamma gamma gamma 
gamma gamma 
crucial lemma operational semantics accs intuitively says behaviour causally depends execution output actions 
lemma gamma gamma 
proof easy transition induction gamma gamma 
may testing semantics ready instantiate accs general framework define may preorder equivalence 
definition observers computations observers defined accs processes perform distinct output action success action 
set accs observers range 
computation process observer sequence transitions gamma gamma 
gamma gamma 
gamma gamma 
delta delta delta gamma gamma 
gamma gamma 
delta delta delta infinite stable 
computation successful iff exists gamma gamma 
process observer say may exists successful computation definition may testing preorder processes set observer may implies denote equivalence obtained kernel preorder gamma 
ss sas slas ss table trace ordering laws trace characterization adaptation testing framework asynchronous setting defined previous section straightforward synchronous case universal quantification observers difficult operational definition may preorder 
calls alternative characterizations easier reason processes 
synchronous case characterization terms trace inclusion see 
section study trace characterization accs 
preorder traces defining alternative characterization may testing preorder 
definition preorder relation satisfies laws table reflexive transitive closure intuition laws definition process interacts environment performing sequence actions interaction possible process performs put differently environment offers offer specifically law deletion says process inputs enforced 
example bc abc environment offers sequence abc offer bc causal dependence bc output law postponement says observations process inputs delayed 
example bac abc 
environment offers abc offer bac 
law annihilation allows environment internally consume pairs complementary actions aab 
environment offers aab internally consumed offered 
preorder preserved prefixing implies delta delta delta delta building preorder traces define new preorder processes 
definition alternative preorder processes set exists 
difference respect synchronous case see require condition weaker trace inclusion advantage preorder single traces 
prove coincidence need preliminary results 
crucial lemma relates preorder operational semantics accs 
lemma suppose 

proof proof proceeds induction case trivial 
suppose gamma thesis follow induction hypothesis show 
prove distinguish possible cases laws table analyze detail cases law case similar 
ffl law 
virtue lemma gamma gamma 
lr holds lar gamma gamma gamma thesis 
ffl law 
rr virtue lemma gamma gamma 
ar communication take place result get thesis 
define special class observers 
definition observers defined inductively follows ffl def def def 
lemma trace 
rw proof proceed induction analyze case case similar 
possibilities depending execution actions action interleaved 

rw action fire 
ar action fires 
ar interact 
case thesis follows induction hypothesis law 
analyze case 
induction hypothesis prefixing ar repeated application law move right past get smaller trace ar ar case handled similarly relies law 
prove full abstraction theorem 
theorem coincidence processes stands identity relation relation composition gamma delta 
proof part 
suppose show exists 
sw get may 

sequence action trace lemma get wanted claim 
part 
suppose may observer show 
may means 
sequence transitions may sequences sw trace hypothesis implies exists 
implies sw 
sw lemma get 
combining sequence get wanted coincidence gives minimal set observers set observers definition preorder processes defined definition considering observers proof corollary easy consequence lemma 
corollary processes preorder easily proven pre congruence relying alternative characterization omit details 
example show examples pairs processes related preorder 
relationships easily proven alternative characterization preorder ffl implies inequalities synchronous may preorder hold accs 
ffl ffl process table get 
particular get imply processes containing input actions equivalent 
ffl important law converse hold instance true just take observer 
ffl interesting law ajb generally guarded summation instantiation general law 
set theoretic interpretation section tackle problem defining interpretation semantic mapping assigns object may equivalent processes 
furthermore require interpretation finitary finite processes mapped finite objects 
shall deal problem defining truly denotational semantics assign meaning operator calculus 
immediate consequence theorem fully set theoretic interpretation obtained interpreting set traces fs sg ordering interpretations set inclusion 
naive interpretation processes satisfactory includes infinitely traces finite processes instance fffl aa aaa bb obtain finitary interpretation shall minimize language process trace preorder sequel denote equivalence class set fs define partial ordering denotations 
definition ffl consider set equivalence classes 
say denotation 
call set denotations 
ffl ordered setting iff words denotation set equivalence classes minimal lemma follows standard arguments particular anti symmetry property follows minimality 
lemma partial ordering 
definition interpret denotation def implies example 
def fffl aa ab aab ffl minimal ffl 
def fffl ab abc ba bac bc bca set minimal traces ffl bc abc ffl bc abc bca 
def def ffl bc abc bca ffl abc technical lemma 
lemma non empty set equivalence classes 
minimal elements partial ordering defined iff proof sufficient show infinite descending chain delta delta delta distinct 
note js jsj delta denotes size actions appearing subset appearing formally fact proven induction number 
finitely proves lemma 
theorem proof alternative characterization suppose show 
choose minimal set exists virtue lemma 
definition delta conversely suppose show assume choose minimal element set mid exists virtue lemma 
definition furthermore definition thesis 
possible give concrete representation equivalence classes 
proposition delta delta delta trace resp trace containing inputs resp 
outputs 
suppose form delta delta delta permutation proof trace denote number occurring number input actions jrj example 
laws delta decrease right left instances input action leave delta unchanged 

instances law input action deduce instances law permit permutation consecutive inputs thesis follows 
proposition equivalence classes traces viewed sequences multisets input actions alternate sequences output actions elements mul mul set finite multisets 
model optimized 
example defining delta possible enrich theory commutativity law outputs ab ba permit regard sequences outputs multisets yield compact denotations processes 
instance denotation process example reduce ffl bc abc similar optimization definition canonical processes section 
proof system section define proof system accs prove sound complete respect finite recursion processes 
proof system call equational laws table plus usual inference rules reflexivity transitivity 
range guarded sums 
guarded sums define general guarded sums ff ij ij denotes sum ff ij ij equation abbreviation pair inequations write indicate derived proof system laws differentiate asynchronous synchronous may testing sound synchronous may preorder 
particular law states processes insensitive arrival ordering messages environment law states execution depends availability message worse immediately re issued 
laws table sound synchronous may testing 
laws table easily proven sound advantage preorder consider important derived laws ffl ffl law easily follows inequality inferred noting follows implies applying 
particular 
law get 
proving completeness proof system shall rely existence canonical forms processes unique commutativity parallel composition permutation consecutive input actions 
canonical form process obtained minimizing set traces summing resulting traces guarded sum 
guarantee uniqueness convenient extend commutativity law output actions relieve having consider traces arise different permutations parallel output actions note traces ab ba related 
definition preorder reflexive transitive closure binary relation traces induced laws plus law course included definition canonical forms ffl process defined induction follows ffl def def def 
ffl consider fin say complete inference rules con pnl sum ff ff axioms exp ffg ffg ffg nl ig nl nl pnl nl pnl na na na pna table laws accs minimal ffl canonical form process form fin complete minimal 
note complete set traces contains empty trace ffl 
proof uniqueness canonical forms decomposed simple lemmas 
lemma 
proof proof proceeds induction length interesting case 
cases 

rar rr traces 
rr rar traces case thesis follows induction hypothesis 
case induction hypothesis get rr rr repeated applications get rar rr thesis 
case handled similarly relies laws 
lemma def def canonical forms proof implies completeness obtain follows write ac derived laws 
proof lemma follows arguments similar proposition just note equivalent input instances infer implies obtained permutation consecutive inputs consecutive outputs 
lemma ac 
theorem uniqueness canonical forms ac proof suppose 
prove result follow lemma symmetry 
suppose lemma deduce deduce existence minimality deduce example consider def 
get canonical form compute language obtain complete set fffl ab ba bb abb bab 
minimize finding minimal set fffl ag complete 
canonical form proceed prove completeness proof system 
lemma absorption 
proof prove thesis induction number times laws derive proof relies laws 
example analyze base case derived application 
means rr traces note term obtained replacing single occurrence 
con law get existence canonical form guaranteed lemma 
lemma exists canonical form proof induction laws table easy show provably equivalent process set consider facts 


complete set 
suppose gamma fs complete 
consequence lemma follows definition complete set part lemma law 
repeatedly applying saturate proving equivalent summation complete set repeatedly applying remove redundant traces proving equivalent summation complete minimal set traces 
theorem completeness finite processes implies proof lemma allows assume canonical form def def 
sufficient show thesis follows law 
fact follows lemmas 
asynchronous calculus section discuss extensions theory asynchronous variant calculus :10.1.1.53.4500
syntax semantics presuppose countable set names ranged 
processes ranged 
syntax asynchronous calculus contains operators output action guarded summation restriction parallel composition matching replication ab ff ff input action silent action adopt guarded summation shorthands defined accs 
input prefix restriction binders name free names bound names process written fn bn respectively defined expected names written fn bn 
substitutions oe ae finite partial functions particular tuples names length having distinct components denotes function maps component corresponding component term name process action toe denotes result replacing free name oe renaming bound names possibly involved avoid captures 
operational semantics terms labelled transition system specified rules table 
label action transition gamma gamma 
forms interaction ab input ab output bound output 
functions bn delta fn delta delta extended actions expected particular bn fbg bn 
shall consider processes ff equivalence 
ff equivalent processes transitions 
bound names assumed pairwise distinct different free names touched substitutions 
definition may preorder calculus formally accs defines observers processes capable distinct output action ww abbreviated sequel 
usual see presence matching causes preorder preserved input prefix instance distinct ab ab processes told apart observer ca trace characterization gamma gamma gamma 
binary relation defined rule ab gamma gamma 
fn gamma gamma gamma 
new kind action called bound input extend bn delta bound inputs letting bn fbg 
convenient uniform notation input bound input actions range ab def ab fbg ab def bn ab 
similar uniform notation inp ff gamma gamma gamma 
yg ff tau ff gamma gamma 
ff ab ab gamma gamma 
par gamma gamma 
gamma gamma 
com ab gamma gamma 
ab gamma gamma 
gamma gamma 
close gamma gamma gamma gamma 
ab gamma gamma 
gamma gamma 
fn res gamma gamma 
gamma gamma 
open ab gamma gamma 
gamma gamma gamma gamma 
match gamma gamma 
gamma gamma 
rep gamma gamma 
gamma gamma 
table operational semantics asynchronous calculus symmetric versions par com close omitted adopted free bound outputs setting ab def ab fbg ab def 
notation extended processes follows def fbg def shall denote set visible non actions including bound inputs range trace say normal delta delta improve readability explicitly denote trace composition delta bn occur bn different bound name occurring functions bn delta fn delta extended normal traces expected 
complementation function normal traces defined setting def ab def ab ab def ab def extending traces note shall consider normal traces ff equivalence 
set normal traces denoted ranged shall consider normal traces 
order define trace preorder extend notation delta traces assume occur bound distinct symbol def fn delta delta fbg delta ab delta fn fag 
instance fbg cd delta ab delta cb cd delta delta cb fag cd delta ab delta cb 
definition binary relation induced laws table reflexive transitive closure rules natural extensions asynchronous calculus rules accs 
extra attention paid bound names delta delta ab delta delta delta ab delta delta ab delta delta delta ab delta delta delta ab delta ab delta delta ac delta bg delta delta table trace ordering laws example comment law 
output action declaring new name bound output postponed actions name 
consider instance observer ab postpone execution output ab execution input 
accordingly execution sequence delta bc delta observed process input action receiving new name postponed output bc get smaller sequence 
formally forbidden side condition fbg bc delta ab delta 
similar considerations apply side conditions laws 
law specific calculus linked impossibility observers fully discriminate free bound outputs 
informally rule states bound new name leads observer success public name lead observer success 
rule disappear extended language mismatch operator considered allow observers fully discriminate free bound outputs 
case accs preserved prefixing implies delta delta provided delta delta normal 
similarly implies delta delta provided bind name free 
definition calculus relies trace preorder remains formally unchanged accs 
repeat sake completeness 
definition alternative preorder processes exists 
proof coincide calculus follows pattern saw accs 
structural congruence calculus 
structural congruence equivalence relation processes congruence satisfies structural laws ffl monoid laws parallel composition ffl laws restriction fn ffl law replication ffl law matching accs commutes labelled transition relation gamma gamma 
preliminary results 
lemma process 

ab gamma gamma gamma gamma gamma 
ab 

gamma gamma gamma 
ac gamma gamma 
bg 
gamma gamma 
resp 
gamma gamma 
oe oe gamma gamma gamma 
oe resp 
oe gamma gamma 
oe 
proof easy transition inductions 
lemma calculus 
lemma suppose 

proof 
proof proceeds induction case trivial 
suppose gamma thesis follow induction hypothesis show 
prove distinguish possible cases laws table analyze detail case law law cases similar 
ffl law 
delta delta ab delta delta ab delta delta virtue lemma ab gamma gamma gamma gamma gamma 
deltar ab 
cases fn follows delta ab deltar thesis delta ab delta delta ab delta ii fbg fn cb delta ab delta deltar implies thesis case delta ab delta delta ab delta ffl law 
suppose delta ac delta bg delta delta means gamma gamma gamma 

lemma ac gamma gamma 
bg repeated application lemma bg thesis case 
definition canonical observers trace 
observer defined induction follows ffl def delta def ab ab delta def fresh ab delta def ab delta def analogue lemma calculus 
lemma trace 
deltaw proof proceed induction analyze case delta ab difficult 
possible cases depending execution actions action ab interleaved case ab fire case ab fires case ab interact 
cases turn divided sub cases depending restriction extruded virtue rule open deltaw delta delta deltaa deltar deltaw delta delta deltar deltaw delta delta delta ab delta deltaa deltar deltar deltaw delta deltaa deltar deltaw delta delta delta deltaa deltar deltar deltaw 
cases thesis follows induction hypothesis law 
analyze case easier 
induction hypothesis delta delta delta delta delta delta delta delta repeated applications law move right note get delta delta delta delta delta delta ab delta delta moving right ab get delta delta delta ab delta cases handled similarly rely law 
previous lemmas full abstraction proof accs carries calculus formally unchanged 
state theorem coincidence processes set theoretic interpretation definition delta theorem carry calculus formally unchanged 
small modification necessary proof lemma due presence rule 
contradiction suppose infinite descending chain delta delta delta distinct 
note rules leave number bound output actions unchanged left right rule number decrease 
point chain number bound output actions remains constant inequalities sub chain delta delta delta deduced 
straightforward show deduced js jsj fn fn 
implies chain delta delta delta contain infinitely elements 
stands proposition hold calculus 
problem due side condition consecutive input actions commute instance actions delta bc swapped 
prevents viewing sequence consecutive input actions simply multiset 
clear model fixed comply calculus 
proof system sound complete proof system finite replication part language obtained translating proof system accs calculus adding simple laws 
particular inp replaces substitutivity rule input prefix concern matching related law write inequality derivable system table 
similarly proving soundness system straightforward 
completeness requires appropriate definition canonical form 
accs requires extending commutativity output actions 
definition preorder reflexive transitive closure relation induced laws plus laws delta ab delta cd delta delta cd delta ab delta fa bg fc dg delta delta cb delta delta delta ab delta definition trace 
process defined induction follows ffl def delta def ab delta def ab ab delta def fresh delta def ab modulo new definitions definitions complete set minimal set canonical form remain formally definition 
lemma carries calculus formally unchanged 
proofs analogues lemma lemma lemma require modifications 
analogue absorption lemma 
lemma absorption 
proof proof proceeds induction analyze case delta ab difficult 
possible cases depending execution actions action ab interleaved case ab fire case ab fires case ab interact 
cases turn divided sub cases depending restriction extruded virtue rule open delta delta deltaa deltar delta delta deltar delta delta delta ab delta deltaa deltar deltar delta deltaa deltar delta delta delta deltaa deltar deltar 
inference rules con inp fn pf xg qf xg sum ff ff axioms exp ff ff ff resp 
ff bind free names resp 

ff ff ff ib ff ff ab ff ff ab ff ab pf cg ab ff ab ff ff ff ff ff bd bd pf cg ab ac pf cg table laws asynchronous calculus case rely induction hypothesis note 
analyze case similar 
induction hypothesis delta delta delta def ab delta delta delta ab hand repeatedly applying move right ab inside get delta delta delta ab delta oe move right reaches get delta delta delta ab delta thesis 
cases handled similar techniques 
analogue lemma 
proof recall denotes term obtained replacing unique occurrence lemma 
proof thesis proven induction number times laws derive example analyze base case derived application 
example consider case delta ab delta ab delta delta traces fresh ab ax rule inp axioms 
inequality depends identity names fn fa bg proven substitution context congruence rules proof system 
fact get ab ax turn existence provably equivalent canonical forms analogue lemma 
respect accs proof presents additional difficulty due peculiar form input prefix substitutivity rule inp calculus 
proving equivalent sum rule plain structural induction 
lemma exists canonical form proof show proof proceeds exactly lemma 
order establish convenient prove stronger result 
introduce couple notational shorthands 
write sub substitution oe holds oe qoe note sub preserved input prefix sub implies sub rule inp 
letters range sequences matchings form delta delta delta 
shall prove set traces sequences matchings sub follow contains matching axioms 
proof proceeds structural induction examine case interesting 
sequel shall laws easily derived proof system sub sub sub qf bg mq sub ma 
induction hypothesis rule inp deduce sub set consider generic cases 
apply deduce sub delta 
suppose say suppose simply discarded 
deduce sub xg xg sub xg sf xg easy prove fact xg sf xg congruence sub xg sf xg sub xg sf xg sub xg ab delta sf xg hold thesis follows rule sum 
deal uniqueness canonical forms proof technically cumbersome central main result part completeness 
ingredients proof remains formally unchanged 
state theorem soundness completeness finite processes variations section discuss variations semantic theory 
part consider testing preorder useful liveness properties interest 
semantics offer characterization terms traces acceptance sets vein relying trace preorder result case accs obvious extend calculus 
second part consider accs general form relabelling allows functions 
discuss small change language leads sensibly different treatment asynchrony 
testing accs firstly building definitions section instantiate general framework obtain preorder equivalence 
definition testing preorder process observer say computation successful 
preorder processes defined follows observer implies denote equivalence obtained kernel preorder gamma 
provide observer independent characterization testing preorder vein 
give preliminary definitions notations 
definition fj jg denote multiset actions occurring fj jg resp 
fj jg denote multiset input resp 
output actions psi denote multiset input actions fj jg fj jg fj jg fj jg denotes difference multisets 
intuitively psi multiset input actions deleted annihilated instance abac psi fj jg 
multiset actions write pi denoting process pi parallel composition actions definition ffl process write say converges infinite sequence internal transitions gamma gamma 
gamma gamma 
gamma gamma 
delta delta delta starting write say converges prefix 
write say diverges case ffl process set processes defined def pi psi ffl set processes fin write exists 
sequel set traces mean furthermore define def fs sg 
definition alternative preorder set holds ffl ffl fin implies note definition formally close synchronous case 
apart requirements convergence fundamental difference lies definition set seen set possible states reach interaction environment offered sequence asynchronous setting output messages freely emitted environment involvement process consideration 
definition particular actions represent difference behaviour environment actual behaviour process pi psi proof coincide split parts 
show implies purpose introduce additional notations list easy properties operational semantics 
notation call input resp 
output successors set def fl def fl successors set 
finite multiset shall write sequence obtained arranging actions fixed order 
similarly write sm trace obtained concatenating order trace actions shall write free exists sequence transitions gamma gamma gamma 
gamma gamma gamma 
delta delta delta gamma gamma gamma 
gamma 
obtained delta delta delta erasing 
give stronger version lemma follows lemma process action suppose free exists process free pi psi proof easy induction number defined definition 
easy properties accs operational semantics 
lemma process 

stable 
stable exist unique multiset fin pi 
fag 
stable denote unique multiset implicitly defined part lemma 
theorem proof observer suppose show 
case analysis 
cases easily reduced case finite non successful computation sequence transitions free stable 
furthermore suppose fact stable lemma deduce ii iii show build non successful computation define set output actions def multiset input actions def note stable multiset defined virtue lemma 
show sm sm pi sm furthermore pi gamma gamma 
ii gamma gamma 
iii 
facts follows pi proves 
definition follows sm means sm pi sm psi stable lemma follows exists pi gamma gamma sm free 
sm lemma follows pi sm psi free 
combining transitions get pi sm psi free 
prove leads non successful computation suffices show pi sm psi 
consequence facts 
pi sm psi derives lemma applied gamma gamma 


lemma applied gamma gamma 
prove converse theorem prove included families observers tests convergence processes sequences set second tests pair acceptance process 
definition fin observers defined induction follows ffl def ffl def bs def bs def bs def bs def lemma process fin 

suppose proof concentrate part part easier handled similar techniques 
order establish prove fact suppose free stable 
pi psi proceed induction examine case bs case handled similarly 
definition stable gamma gamma ffl br induction hypothesis pi psi implies br bs easy see psi bs psi br psi thesis fact follows 
turn proof 
suppose assume hold show hold 
assumption unsuccessful computation 
gamma gamma 
free prefix trace consequence fact 
consequence finite unsuccessful computation free stable 
fact get pi psi stable deduce pi psi sum pi psi converse implication implies proven similar techniques relying lemma 
theorem implies proof easy consequence lemma 
coincidence immediately yields minimal set observers definition fully acceptance model define process denotation def order denotations set inclusion 
course model far optimal trivial process infinite denotation contains pairs form fag 
clear model optimized form minimization may preorder section 
relying straightforward show pre congruence 
example give meaningful examples processes related unrelated preorder 
examples easily checked relying alternative characterization provided examples shall refer asynchronous bisimilarity 
defined largest equivalence relation gamma gamma 
ii ffl process represents top element family terms built input actions consequence vice versa 
ffl far input concerned action prefix distributed summation sharp contrast asynchronous bisimilarity processes distinguished 
ffl sequences input actions absorb prefixes law 
law valid asynchronous bisimilarity 
ffl finite buffers equated null process 
instance general law guarded summation law hold infinite buffers recx ajx 
due divergence put parallel recx diverges 
shown examples equivalence asynchronous bisimilarity general incomparable due divergence 
comparison gets interesting confine class strongly convergent processes crux characterization proposition pi psi vice versa proof define iff pi psi vice versa clearly implies show converse implication suppose show induction pi psi vice versa follows symmetry 
example analyze case ar 
gamma gamma 
hypothesis gamma gamma 
cases definition suppose case ii occurs simpler fact induction hypothesis get pi psi cases depending action performed 
action fire 
ar action fires 
ar interact 
deal case handled similar techniques 
set def note get ar ar ar ar aar ar ar ar easy calculations yield psi ar psi psi ar psi setting def pi psi easy corollary get corollary strongly convergent processes 
implies accs general relabelling part briefly discuss form relabelling permits functions enables external observers get precise information inputs observed processes 
observers discriminating 
instance proved considering observer fa proved considering observer fa general law sound anymore 
intuitively observers able distinguish local remote copies message example 
outline necessary modifications get trace characterization new may testing preorder conjecture trace acceptance characterization preorder 
leave proof conjecture discussion problems axiomatizations 
trace preorder defined reflexive transitive closure relation satisfying laws table 
notice fj jg fj jg psi fj jg fj jg definition canonical observers follows 
definition say delta delta delta 
fix bijective correspondence 
fresh distinct actions 
observers defined inductively follows ffl fa convenient assume elements multiset negative occurrences 
instance get fj jg fj jg 
note psi contains elements positive occurrences 
lemma longer holds replaced lemma processes gamma gamma 
gamma gamma 
implies exists process gamma gamma 
gamma gamma 
proved induction derivation transition gamma gamma 
lemmas carry new language 
proof lemma simpler missing lemma place lemma swapping actions case proof lemma arise anymore fresh interact 
lemmas proof coincidence remains unchanged 
trace model section remains modulo different definition 
consider briefly preorder 
shall write iff fj jg fj jg finite multiset fin shall write multiset fj jg 
re define predicate take account fact general observers ascertain part actions sequence performed 
definition multiset sm denotes set processes fp sm psi psi conjecture preorder defined coincides definition set iff holds fin psi implies psi 
related works studied trace testing equivalence asynchronous variants ccs calculus 
languages offered trace characterization finitary set theoretic interpretation complete proof system may testing preorder 
touched variants theory involving testing accs non injective relabelling 
major direction investigation algorithms deciding asynchronous trace equivalence 
possibility set theoretic interpretation starting point define minimal process representatives 
asynchronous variant calculus proposed honda tokoro independently boudol :10.1.1.53.4500
particular operational rule ab gamma gamma 
ab arbitrary processes input receptive infinitary put forward 
asynchronous variants ccs came essentially means studying linda communication primitives simple process algebraic setting 
realm accs calculus testing semantics aware castellani hennessy 
authors complete axiomatization testing preorder accs 
differently alternative characterization preorder relies infinitary operational semantics similar 
problem extending results asynchronous calculus left open 
substantial deal bisimulation accs asynchronous calculus 
definition asynchronous bisimulation calculus put forward face axiomatization problems language best knowledge 
amadio castellani sangiorgi offer characterization asynchronous calculus bisimilarity avoids infinitary operational semantics honda tokoro 
furthermore strong sensitive version bisimilarity axiomatized 
models methods decide asynchronous bisimilarity 
particular hot potato bisimulation implies executing output actions soon available bear relationship set theoretic interpretation takes account minimal traces obtained anticipating output actions early possible law 
bisimulation context join calculus refinement asynchronous calculus enjoying uniform property 
axiomatic presentation asynchronous transition systems bisimulation syntax free framework 
past different process languages proposed explicit external buffers correspondence output channels outputs non blocking immediately executable preserving ordering different output actions 
group includes asynchronous variants process algebras acp csp lotos 
group place actors foundation 
papers closest testing equivalences studied assumption observers processes connected fifo channels 
characterization may equivalence terms traces differently forbids swapping consecutive input actions annihilation complementary input output pairs 
complete axiomatization provided 
similarly considers testing semantics gives set laws helps understanding proposed semantics offer complete axiomatizations 
languages equipped observational semantics bisimulation failures equational characterizations studied 
notable exception de boer palamidessi collaborators 
hand propose trace model variant failure semantics provide axiomatizations rely state operators explicit modelling buffers evolution 
input key property asynchronous systems advocated different settings including input output automata nondeterministic asynchronous networks 
de nicola segala define algebraic testing theory input output automata bridging gap kind automata process calculi 
acknowledgments 
anonymous referees fossacs fossacs provided valuable suggestions 
marco pistore spotting error previous version 
amadio castellani sangiorgi 
bisimulations asynchronous calculus 
theoretical computers science elsevier science 
abadi gordon 
calculus cryptographic protocols spi calculus 
information computation academic press 
agha mason smith talcott 
foundation actor computation 
journal functional programming 
bergstra klop 
process algebra synchronous communication 
information control academic press 
de boer klop palamidessi 
asynchronous communication process algebra 
lics pp ieee computer society press 
de boer kok palamidessi rutten 
failure failures paradigm asynchronous communication 
proc 
concur lncs baeten groote eds pp springer 
boreale de nicola 
testing equivalence mobile systems 
information computation academic press 
boreale de nicola pugliese 
asynchronous observations processes 
proc 
foundations software science computation fossacs lncs nivat ed pp springer 
boreale de nicola pugliese 
theory may testing asynchronous languages 
proc 
foundations software science computation fossacs lncs thomas ed pp springer 
boreale fournet laneve 
bisimulations join calculus 
proc 
gries de roever eds chapman hall 
boudol 
asynchrony calculus note 
rapport de recherche inria 
busi gorrieri 
zavattaro 
process algebraic view linda coordination primitives 
theoretical computers science elsevier science 
castellani 
testing theories asynchronous languages 
proc 
lncs arvind ramanujam eds pp springer 
de nicola hennessy 
testing equivalence processes 
theoretical computers science elsevier 
de nicola pugliese 
process algebra linda 
proc 
coordination lncs ciancarini hankin eds pp springer 
appear theoretical computers science de nicola segala 
process algebraic view automata 
theoretical computers science north holland 
fournet gonthier 
reflexive chemical machine join calculus 
proc 
acm symp 
principles programming languages pp acm press 
fournet gonthier 
hierarchy equivalences asynchronous calculi 
proc 
icalp lncs pp springer 
gelernter 
generative communication linda 
acm transactions programming languages systems 
hansen 
bisimulations asynchronous mobile processes 
proc 
symposium language logic computation 
available research hcrc rp human communication research centre university 
hennessy 
algebraic theory processes 
mit press 
hoare 
communicating sequential processes 
prentice hall international 
honda tokoro 
object calculus asynchronous communication 
proc 
ecoop lncs america ed pp springer 
honda tokoro 
asynchronous communication semantics 
ecoop proceedings lncs pp springer 
jonsson 
model proof system asynchronous networks 
proc 
th acm symposium principles distributed computing pp acm press 
jifeng hoare 
theory synchrony asynchrony 
proc 
ifip working conf 
programming concepts methods pp 
lynch stark 
proof kahn principle input output automata 
information computation academic press 
lamport 
temporal logic actions 
acm transactions programming languages systems acm press 
milner 
communication concurrency 
prentice hall 
milner 
polyadic calculus tutorial 
technical report university edinburgh lfcs report ecs lfcs 
milner parrow walker 
calculus mobile processes part ii 
information computation 
montanari pistore 
finite state verification asynchronous calculus 
proc 
tacas lncs springer 
pnueli 
temporal logic programs 
proc 
th ieee symposium foundations computer science pp ieee computer society press 
pugliese 
process calculus asynchronous communications 
proc 
th italian conference theoretical computer science de santis ed pp world scientific 

resource models asynchrony 
proc 
foundations software science computation fossacs lncs nivat ed pp springer 
selinger 
order axioms asynchrony 
proc 
concur lncs mazurkiewicz eds pp springer 
tretmans 
formal approach conformance testing 
ph thesis university twente 

