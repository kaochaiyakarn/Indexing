constraint programming pursuit holy grail roman bart charles university faculty mathematics physics department theoretical computer science st czech republic mail mff cz constraint programming cp emergent software technology declarative description effective solving large particularly combinatorial problems especially areas planning scheduling 
represents exciting developments programming languages decade surprisingly identified acm association computing machinery strategic directions computer research 
strong theoretical foundation attracting widespread commercial interest particular areas modelling heterogeneous optimisation satisfaction problems 
give survey constraint programming technology applications starting history context interdisciplinary nature cp 
central part dedicated description main constraint satisfaction techniques industrial applications 
conclude overview limitations current cp tools outlook directions 
keywords constraint satisfaction search inference combinatorial optimisation planning scheduling years constraint programming cp attracted high attention experts areas potential solving hard reallife problems 
strong theoretical foundation attracting widespread commercial interest particular areas modelling heterogeneous optimisation satisfaction problems 
surprisingly identified acm association computing machinery strategic directions computer research 
time cp known understood technologies 
constraints arise areas human endeavour 
formalise dependencies physical worlds mathematical abstractions naturally transparently 
constraint simply logical relation unknowns variables value domain 
constraint restricts possible values variables take represents partial information variables interest 
constraints heterogeneous bind unknowns different domains example length number word string 
important feature constraints declarative manner specify relationship hold specifying computational procedure enforce relationship 
constraints guide reasoning key part everyday common sense 
clock typical constraint plan time 
naturally solve constraint collection constraints rarely independent 
complicates problem bit usually give take 
constraint programming study computational systems constraints 
idea constraint programming solve problems stating constraints requirements problem area consequently finding solution satisfying constraints 
constraint programming represents closest approaches computer science holy grail programming user states problem computer solves freuder interdisciplinary origins earliest ideas leading cp may artificial intelligence ai dating back sixties seventies 
scene labelling problem probably constraint satisfaction problem formalised 
goal recognise objects scene interpreting lines drawings lines edges labelled categorised types convex concave occluding edges 
advanced systems shadow border recognised 
scene labelling lot ways label scene exactly number edges meaning 
idea solve combinatorial problem find legal labels junctions satisfying constraint edge label ends 
reduces problem lot limited number legal labels junctions 
available labelling junction main algorithms developed years waltz labelling algorithm related achieving form consistency 
application constraints interactive graphics ivan sutherland sketchpad developed early pioneering system 
sketchpad follower alan borning interactive graphics applications allowed user draw manipulate constrained geometric figures computer display 
systems contribute developing local propagation methods constraint compiling 
main step cp achieved gallaire jaffar lassez noted logic programming just particular kind constraint programming 
basic idea logic programming lp declarative programming general user states solved solve close idea constraints 
combination constraints logic programming natural constraint logic programming clp nice declarative environment solving problems means constraints 
mean constraint programming restricted clp 
constraints integrated typical imperative languages java 
nowadays real life applications cp area planning scheduling optimisation rise question traditional field operations research competitor associate cp 
significant overlap cp field np hard combinatorial problems 
long research tradition successful method solving problems linear programming cp emphasis higher level modelling solutions methods easier understand final customer 
advance promises methodologies exploit particular cp serve roof platform integrating various constraint solving algorithms including developed checked successful 
paragraphs show cp inner interdisciplinary nature 
combines exploits ideas number fields including artificial intelligence combinatorial algorithms computational logic discrete mathematics neural networks operations research programming languages symbolic computation 
solving technology currently see branches constraint programming constraint satisfaction constraint solving 
share terminology origins solving technologies different 
constraint satisfaction deals problems defined finite domains currently probably industrial constraint applications finite domains 
deal constraint satisfaction problems 
constraint solving shares basis cp describing problem set constraints solving constraints 
constraints defined infinite complex domains 
combinatorial methods constraint satisfaction constraint solving algorithms mathematical techniques automatic differentiation taylor series newton method 
point view say famous mathematicians deal certain constraints satisfiable proved fermat theorem 
constraint satisfaction constraint satisfaction problems subject research artificial intelligence years 
constraint satisfaction problem csp defined set variables xn variable xi finite set di possible values domain set constraints restricting values variables simultaneously take 
note values need set consecutive integers need numeric 
solution csp assignment value domain variable way constraints satisfied 
may want find just solution preference solutions optimal solution objective function defined terms variables 
solutions csp searching systematically possible assignments values variable 
search methods divide broad classes traverse space partial solutions partial value assignments explore space complete value assignments variables stochastically 
systematic search theoretical point view solving csp trivial systematic exploration solution space 
practical point view efficiency takes place 
systematic search methods additional improvements look simple non efficient important foundation advanced efficient algorithms 
basic constraint satisfaction algorithm searches space complete labellings called generate test gt 
idea gt simple complete labelling variables generated randomly consequently labelling satisfies constraints solution labelling generated 
gt algorithm weak generic algorithm failed 
efficiency poor non informed generator late discovery inconsistencies 
consequently ways improve efficiency gt generator valuations smart informed generates complete valuation way conflict test phase minimised 
basic idea stochastic algorithms local search discussed 
generator merged tester validity constraint tested soon respective variables instantiated 
method backtracking approach 
backtracking bt method solving csp incrementally extending partial solution specifies consistent values variables complete solution repeatedly choosing value variable consistent values current partial solution mentioned see bt merge generating testing phases gt algorithm 
variables labelled sequentially soon variables relevant constraint instantiated validity constraint checked 
partial solution violates constraints backtracking performed instantiated variable alternatives available 
clearly partial instantiation violates constraint backtracking able eliminate subspace cartesian product variable domains 
consequently backtracking strictly better generate running complexity nontrivial problems exponential 
major drawbacks standard chronological backtracking thrashing repeated failure due reason redundant conflicting values variables remembered late detection conflict conflict detected really occurs 
methods solving drawbacks proposed backjumping backmarking see attention paid detect inconsistency partial solution sooner consistency techniques 
consistency techniques approach solving csp removing inconsistent values variables domains till solution got 
methods called consistency techniques introduced scene labelling problem 
notice consistency techniques deterministic opposed non deterministic search 
exist consistency techniques complete 
consistency techniques rarely solve csp completely 
names basic consistency techniques derived graph notions 
csp usually represented constraint graph network nodes correspond variables edges labelled constraints 
requires csp special form usually referred binary csp contains unary binary constraints 
easy show arbitrary csp transformed equivalent binary csp practice binarization worth doing algorithms extended tackle non binary csp 
simplest consistency technique referred node consistency nc 
removes values variables domains inconsistent unary constraints respective variable 
widely consistency technique called arc consistency ac 
technique removes values variables domains inconsistent binary constraints 
particular arc vi vj arc consistent value current domain vi satisfies constraints vi value domain vj vi vj permitted binary constraint vi vj 
removed ac consistent pairs values vi arc consistency removes local inconsistencies exist arc consistency algorithms starting ac concluding ac 
algorithms repeated revisions arcs till consistent state reached domain empty 
popular ac ac 
ac algorithm performs re revisions arcs possibly affected previous revision 
require special data structures opposite ac works individual pairs values remove potential inefficiency checking pairs values 
needs special data structure remember pairs consistent values incidental variables memory efficient ac 
inconsistent values removed path consistency pc techniques 
path consistency requires pair values variables satisfying respective binary constraint exists value variable path binary constraints path satisfied 
shown csp path consistent paths length path consistent 
path consistency algorithms triples variables paths length 
exist path consistency algorithms pc pc need extensive representation matrix constraints memory consuming 
interesting ratio complexity simplification factor modifications connectivity constraint graph adding edges graph disadvantages pc 
vj values path consistency checks constraints path 
mentioned consistency techniques covered general notion consistency strong consistency 
constraint graph system values variables satisfying constraints variables exits value arbitrary th variable constraints variables satisfied 
constraint graph strongly consistent consistent visibly nc equivalent strong consistency ac equivalent strong consistency pc equivalent strong consistency 
algorithms exist making constraint graph strongly consistent practice rarely efficiency issues 
algorithms remove inconsistent values arc consistency algorithm eliminate need search general 
clearly constraint graph containing nodes strongly consistent solution csp search 
worstcase complexity algorithm obtaining node constraint graph exponential 
unfortunately graph strongly consistent general backtracking search avoided exist inconsistent values 
vn 
vi 
strongly consistent graph complete labelling 
consistency techniques nc ac pc complete remain inconsistent values restricted forms algorithms takes attention remove similar amount inconsistencies efficient 
example directional arc consistency dac revises arc works ordering variables requires computation ac space ac 
dac able achieve full arc consistency problems tree constraint graphs 
possible weaken path consistency similar way 
resulting consistency technique called directional path consistency dpc computationally expensive achieving full path consistency 
half way ac pc pierre restricted path consistency rpc extends ac algorithm form path consistency 
algorithm checks path consistency path value variable supporting value domain incidental variable consequently rpc removes amount inconsistent pairs values ac pairs 
removed rpc rpc removes inconsistencies ac constraint propagation systematic search consistency techniques solve csp completely rarely done 
combination approaches common way solving csp 
look back schema uses consistency checks instantiated variables 
bt simple example schema 
avoid problems bt thrashing redundant look back schemas proposed 
backjumping bj method avoid thrashing bt 
control backjumping exactly backtracking backtracking takes place 
algorithms pick variable time look value variable making sure new assignment compatible values committed far 
bj finds inconsistency analyses situation order identify source inconsistency 
uses violated constraints guidance find conflicting variable 
values domain explored bj algorithm backtracks conflicting variable 
main difference bt algorithm backtracks immediate past variable 
look back schemas called bc backmarking bm avoid redundant bt 
descendent backmarking useful algorithms reducing number compatibility checks 
algorithm finds label incompatible label remembers incompatibility 
long committed considered 
backmarking improvement avoids redundant constraint checking redundant discoveries inconsistencies 
reduces number compatibility checks remembering label incompatible labels 
furthermore avoids repeating compatibility checks performed succeeded 
look back schemas share disadvantage late detection conflict 
fact solve inconsistency occurs prevent inconsistency occur 
look ahead schemas proposed prevent conflicts 
forward checking fc easiest example look ahead strategy 
performs arc consistency pairs instantiated variable instantiated variable value assigned current variable value domain variable conflicts assignment temporarily removed domain 
fc maintains invariance unlabelled variable exists value domain compatible values instantiated labelled variables 
fc bt assignment added current partial solution better choice chronological backtracking 
inconsistencies removed partial look ahead pla method 
fc performs checks constraints current variable variables partial look ahead extends consistency checking variables direct connection labelled variables directional arcconsistency 
approach uses full arc consistency labelling step called full look ahead la maintaining arc consistency mac 
arbitrary ac algorithm achieve arcconsistency noted la fc partial la assignment added current partial solution 
cases la may expensive bt fc bt applications 
instantiated variables instantiated variables checked backtracking forward checking comparison propagation techniques partial look ahead full look ahead stochastic heuristic algorithms till constraint satisfaction algorithms extend partial consistent labelling full labelling satisfying constraints 
years greedy local search strategies popular 
algorithms alter incrementally inconsistent value assignments variables 
repair hill climbing metaphor move complete solutions 
avoid getting stuck local minimum equipped various heuristics search 
stochastic nature generally voids guarantee completeness provided systematic search methods 
hill climbing probably famous algorithm local search 
starts randomly generated labelling variables step changes value variable way resulting labelling satisfies constraints 
strict local minimum reached algorithm restarts randomly generated state 
algorithm stops soon global minimum constraints satisfied resource exhausted 
notice hill climbing algorithm explore lot neighbours current state choosing move 
avoid exploring state neighbourhood min conflicts mc heuristic proposed 
heuristic chooses randomly conflicting variable variable involved unsatisfied constraint picks value minimises number violated constraints break ties randomly 
value exists picks randomly value increase number violated constraints current value variable picked values increase number violated constraints 
pure min conflicts algorithm go local minimum noise strategies introduced mc 
rw strategy popular 
conflicting variable random walk strategy picks randomly value probability apply mc heuristic probability 
random walk heuristic applied hill climbing algorithm get steepest descent random walk algorithm 
tabu search ts method avoid cycling getting trapped local minimum 
notion tabu list special short term memory maintains selective history composed previously encountered configurations generally pertinent attributes configurations 
simple ts strategy consists preventing configurations tabu list recognised iterations called tabu tenure size tabu list 
strategy prevents algorithm trapped short term cycling allows search process go local optima 
tabu restrictions may overridden certain conditions called aspiration criteria 
aspiration criteria define rules govern configuration considered possible move tabu 
widely aspiration criterion consists removing tabu classification move move leads solution better obtained far 
method searches space complete labellings till solution connectionist approach represented genet algorithm 
csp problem represented network nodes correspond values variables 
nodes representing values variable grouped cluster assumed exactly node cluster switched means respective value chosen variable 
inhibitory link arc nodes different clusters represent incompatible pair values constraint respective variables 
values variables connectionist representation csp algorithm starts random configuration network re computes state nodes cluster repeatedly account state neighbouring nodes weights connections nodes 
algorithm reaches stable configuration network solution problem able recover cluster state simple learning rule strengthens weights connections representing violated constraints 
mentioned stochastic algorithms genet incomplete example oscillate 
constraint optimization real life applications want find solution solution 
quality solution usually measured application dependent function called objective function 
goal find solution satisfies constraints minimise maximise objective function respectively 
problems referred constraint satisfaction optimisation problems 
constraint satisfaction optimisation problem consists standard csp optimisation function maps solution complete labelling variables numerical value 
widely algorithm finding optimal solutions called branch bound applied 
needs heuristic function maps partial labelling numerical value 
represents estimate case minimisation objective function best complete labelling obtained partial labelling 
algorithm searches solutions depth manner behaves chronological bt soon value assigned variable value heuristic function labelling computed 
value exceeds bound sub tree current partial labelling pruned immediately 
initially bound set plus infinity computation records value best solution far 
efficiency determined factors quality heuristic function bound early 
observations real life problems show step optimum improving solution usually computationally expensive part solving process 
fortunately applications users satisfied solution close optimum solution early 
branch bound algorithm find sub optimal solutions second acceptability bound 
algorithm finds solution better acceptability bound solution returned user proved optimal 
constrained problems large set constraints solved appears typically possible satisfy constraints inconsistency 
systems possible find valuation satisfying constraints called constrained 
approaches proposed handle overconstrained systems partial constraint satisfaction constraint hierarchies popular 
partial constraint satisfaction pcsp freuder wallace involves finding values subset variables satisfy subset constraints 
viewed way constraints weaken permit additional acceptable value combinations 
weakening constraint mean enlarging domain 
easy show enlarging constraint domain covers ways weakening csp enlarging domain variable removing variable removing constraint 
formally pcsp defined standard csp evaluation function maps labelling variables numerical value 
goal find labelling best value evaluation function 
definition looks similar note require constraints satisfied 
fact global satisfaction constraints described evaluation function constraints guide find optimal value evaluation function 
consequently addition handle overconstrained problems pcsp seen generalisation 
standard algorithms backjumping backmarking arc consistency forward checking branch bound customised pcsp 
constraint hierarchies alan borning approach handling constrained problems 
constraint weakened explicitly specifying strength preference 
allows specify constraints required hold weaker called soft constraints 
intuitively hierarchy permit weakest constraints influence result expense dissatisfaction stronger constraint 
constraint hierarchies allow relaxing constraints strength applying weighted sum squares similar methods 
currently groups constraint hierarchy solvers identified refining method local propagation 
refining methods solve constraints starting strongest level continuing weaker levels local propagation algorithms gradually solve constraint hierarchies repeatedly selecting uniquely satisfiable constraints 
technique single constraint determine value variable 
variable value known system may able constraint find value variable forth 
straightforward execution phase paid foregoing planning phase chooses order constraints satisfy 
note pcsp relevant satisfaction constraints finite domains constraint hierarchy general approach suitable types constraints 
applications constraint programming successfully applied different problem areas diverse dna structure analysis time tabling hospitals industry scheduling 
proves adapted solving real life problems application domains evoke constraint description naturally 
assignment problems type industrial application solved constraint tools 
typical example stand allocation airports aircraft parked available stand stay airport airport paris counter allocation departure halls hong kong international airport 
example allocation ships harbour hong kong international terminals refinery allocation 
typical constraint application area personnel assignment rules regulations impose difficult constraints 
important aspect problems requirement balance different persons 
systems developed production rosters nurses hospitals crew assignment flights sas british stuff assignment companies italian railway 
schedule description gantt charts probably successful application area finite domain constraints scheduling problems constraints express naturally reallife limitations 
constraint software activity scheduling saga petroleum forest treatment scheduling production scheduling plastic industry planning production military business jets dassault aviation 
usage constraints advanced planning scheduling systems increases due current trends demand manufacturing 
large area constraint application network management configuration 
problems include planning telecommunication networks building france telecom electric power network reconfiguration maintenance scheduling disrupting customer services ether 
example optimal placement base stations wireless indoor telecommunication networks 
areas tackled constraints 
applications include computer graphics expressing geometric coherence case scene analysis drawing programs user interfaces natural language processing construction efficient parsers database systems ensure restore consistency data molecular biology dna sequencing chemical hypothesis reasoning business applications option trading electrical engineering locate faults circuit design compute layouts transport problems limitations extensive application usage constraint programming solving real life problems uncovers number limitations shortcomings current tools 
problems solved cp belong area np hard problems identification restrictions problem important theoretical practical points view 
approaches np hard problems efficiency constraint programs unpredictable intuition usually important part decision constraints 
common problem stated users constraint systems stability constraint model 
small changes program data lead dramatic change performance 
unfortunately process performance debugging stable execution variety input data currently understood 
problem choosing right constraint satisfaction technique particular problem 
fast blind search chronological backtracking efficient expensive constraint propagation vice versa 
particular problem constraint models cost optimisation 
difficult improve initial solution small improvement takes time finding initial solution 
trade anytime solution best solution 
constraint programs incremental sense add constraints dynamically support online constraint solving required current changing environment 
time constraint systems produce plans executed machines break planes delayed new orders come worst possible time 
requires fast rescheduling upgrading current solution absorb unexpected events 
trade optimality solution usually means tight schedule optimal stable solution absorbs small deviations 
trends shortcomings current constraint satisfaction systems mark directions development 
modelling looks important 
discussions started global constraints encapsulate primitive constraints efficient package different constraint 
general question concerns modelling languages express constraint problems 
currently cp packages extensions programming language clp libraries conventional programming languages ilog solver 
constraint modelling languages similar algebraic description introduced simplify description constraints numerica visual modelling languages generate constraint programs visual drawings 
visual modelling language lower level point view visualisation techniques understanding search popular help identify bottlenecks system 
controlling search probably developed parts constraint programming paradigm may problems choice search routine done ad hoc basic 
study interactions various constraint solving methods challenging problems 
hybrid algorithms combining various constraint solving techniques results research 
interesting area study solver collaboration correlative combination theories prove theory 
combination constraint satisfaction techniques traditional methods integer programming challenge current research 
parallelism concurrent constraint solving cc studied methods improving efficiency 
systems multiagent technology looks promising 
summary give survey basic solving techniques constraint programming 
particular concentrate constraint satisfaction algorithms solve constraints finite domains 
overview main techniques solving constraint optimisation problems overconstrained problems 
list key application areas constraint programming describe current shortcomings ideas development 
constraint technology applied forest treatment scheduling proc 
practical application constraint technology pact london uk bart line guide constraint programming prague mff cz constraints plane planning system aircraft production 
proc 
practical application prolog pap london uk deux variations sur le theme de la arc rr inria borning programming language aspects constraint oriented simulation laboratory acm transactions programming languages systems borning freeman benson kramer wolf constraint hierarchies 
proc 
acm conference object oriented programming systems languages applications acm chan weil nurse scheduling global chip proc practical application constraint technology pact london uk chow airport counter allocation constraint logic programming proc 
practical application constraint technology pact london uk rocca constraint maintenance scheduling electric power distribution network proc 
practical application prolog pap paris france dincbas simonis apache constraint automated stand allocation systems proc 
advanced software technology air transport london uk lamma mello milano constraint logic programming crew rostering problem proc 
practical application constraint technology pact london uk freuder synthesizing constraint expressions communications acm acm freuder wallace partial constraint satisfaction artificial intelligence fr optimal placement base stations wireless indoor telecommunication proc 
principles practices constraint programming cp pisa italy gaschnig performance measurement analysis certain search algorithms cmu cs carnegie mellon university gallaire logic programming developments ieee symposium logic programming boston ieee glover laguna tabu search modern heuristics combinatorial problems blackwell scientific publishing oxford haralick elliot increasing tree search efficiency constraint satisfaction problems artificial intelligence jacquet hybrid methods large scale optimisation problems perspective proc 
practical application constraint technology pact london uk jaffar lassez constraint logic programming proc 
acm symposium principles programming languages acm jaffar maher constraint logic programming survey logic programming johansen activity scheduling application constraint reasoning proc 
applications constraint technology pact london uk kumar algorithms constraint satisfaction problems survey ai magazine lawler wood branch bound methods survey operations research mackworth consistency networks relations artificial intelligence stuckey 
programming constraints mit press cambridge mass minton johnston laird minimising conflicts heuristic repair method constraint satisfaction scheduling problems artificial intelligence solver collaboration constraint logic programming phd thesis universite henri poincare nancy networks constraints fundamental properties applications picture processing information sciences nadel tree search arc consistency constraint satisfaction algorithms search artificial intelligence springer verlag new york nilsson principles artificial intelligence tioga palo alto constraint logic programming techniques container port planning icl technical journal may selman kautz domain independent extensions gsat solving large structured satisfiability problems proc 
ijcai simonis search tree debugging technical report sa smith tutorial constraint programming tr university leeds sutherland sketchpad man machine graphical communication system proc 
ifip spring joint computer conference tsang foundations constraint satisfaction academic press london van hentenryck constraint satisfaction logic programming mit press cambridge mass van hentenryck saraswat deville design implementations evaluation constraint language cc fd tech 
report cs brown university van hentenryck michel deville numerica modeling language global optimization mit press cambridge mass waltz understanding line drawings scenes shadows psychology computer vision mcgraw hill new york wang tsang solving constraint satisfaction problems neural networks proc 
second international conference artificial neural networks ilog france www ilog fr israel www il 
