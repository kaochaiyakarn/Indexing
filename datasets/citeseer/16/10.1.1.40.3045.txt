fast approximate graph partitioning algorithms guy joseph naor satish rao schieber siam comput 
society industrial applied mathematics vol 
pp 

study graph partitioning problems graphs edge capacities vertex weights 
problems balanced cuts balanced partitions unified new problem called minimum capacity separators 
separator subset edges removal partitions vertex set connected components sum vertex weights component times weight graph 
new simple log approximation algorithm minimum capacity separators spreading metrics yielding log approximation algorithm balanced cuts balanced partitions 
particular result improves previous best known approximation factor balanced partitions undirected graphs factor log 
enhance results presenting version algorithm obtains log opt approximation factor 
algorithm technique called spreading metrics enables formulate directly minimum capacity separator problem integer program 
introduce generalization called simultaneous separator problem goal find minimum capacity subset edges separates collection subsets simultaneously 
extend results directed graphs values 
conclude cient algorithm computing optimal spreading metric separators 
yields cient algorithms computing balanced cuts previously known 
key words 
graph partitioning approximation algorithms graph separator spreading metrics ams subject classifications 
pii 


studied graph partitioning problems finding minimum capacity balanced cuts balanced partitions undirected directed graphs 
input problems consists graph having edge capacities vertex weights 
parameter balanced cut problem find minimum capacity cut weight vertex sets side cut times weight graph 
integer balanced partitioning problem find minimum capacity subset edges removal partitions graph roughly equally weighted subgraphs disconnected 
section formally defines problems vertex counterparts 
problems applications vlsi layout circuit testing simulation parallel scientific processing sparse linear system solving 
essence graph partitioning applications divide conquer algorithms facilitating parallelism 
graph partitioning problems np hard approaches taken 
approach cient heuristics designed received editors august accepted publication revised form june published electronically july 
www siam org journals html department electrical engineering tel aviv university tel aviv israel guy eng tau ac il 
computer science department technion haifa israel naor cs technion ac il 
research author supported part united states israel binational science foundation jerusalem israel 
nec research institute independence way princeton nj satish research 
nj nec com 
ibm watson research center box yorktown heights ny sbar watson 
ibm com 
naor rao schieber heuristics guarantee quality solution 
second approach polynomial time approximation algorithms designed upper bound ratio value approximate solution optimal solution 
techniques approaches di er greatly 
lang rao conducted experiments reported technique successful large graphs long running times allowed additional clean phase 
see 
unify problems balanced cuts balanced partitions new problem called separators 
parameter separator problem find minimum capacity cut partitions vertex set connected components weight times weight graph 
introduce general problem called simultaneous separators collection subsets 
vertex set separation parameters 
goal find minimum capacity cut partitions vertex set connected components connected component contains weight subset unified framework allows obtain new graph partitioning algorithms 
algorithms help bridge gap heuristics approximation algorithms ways obtain improved approximation factors 
second algorithm faster factor 
third main technique may conjunction techniques cutting planes 
apart yielding improved algorithms graph partitioning techniques may design new heuristics di er significantly kernighan lin algorithm simulated annealing 
framework spreading metrics provide direct fractional relaxation graph partitioning problems 
spreading metrics introduced obtain improved approximation factors certain np hard graph problems amenable divide conquer approach 
informally spreading metric graph assignment lengths edges vertices subgraphs optimization problem nontrivial spread apart associated metric space 
addition volume spreading metric provides lower bound cost solving optimization problem input graph 
spreading metrics find cut graph cost depends volume spreading metric resulting subgraphs 
cut defines divide step subproblem solved recursively 

results 
believe definition separators captures type partitioning required applications 
limiting number resulting parts important divide andconquer applications parallelism limit sizes weights part 
enables unify problems balanced cuts balanced partitions 
consider generalization called simultaneous separators 
approximation algorithms simple deal easily weighted version 
approximation factors undirected graphs summarized table denotes number vertices graph 
note order perform fair comparison table assume optimal spreading metric 
approximate spreading metric approximation factor problems solve multiplied 
similar issue applies previous algorithms regard solving linear programs 
particular approximation factor balanced partitioning algorithm improves previous algorithms factor fast approximate graph partitioning algorithms table capacities solutions optimal spreading metric opt cap 
optimal separator opt cap 
optimal balanced cut opt cap 
optimal balanced partition opt cap 
optimal bisector 
problem previous separator ln opt log log opt balanced cut ln opt ln ln opt balanced ln opt log log opt partition separator ln opt ln opt log separator approximation improves previous algorithms roughly factor 
note compare cost solution cost optimal solution restricted problem reason term literature 
example compute separator compare cost cost optimal separator algorithm approximating separators holds directed graphs constants times large 
require directed graphs able approximate balanced partitions directed graphs requires 
spreading metrics introduces direct fractional relaxation partitioning problems 
connection fractional relaxation original problem natural repeated evaluation fractional edge lengths required opposed leighton rao algorithm 
running time algorithms dominated complexity finding spreading metric 
spreading metrics computed general linear programming algorithms ellipsoid algorithm 
cient approximate algorithms framework papers plotkin tardos shmoys young 
cient algorithms apply undirected graphs 
specifically complexity deterministic algorithm computes constant approximation spreading metric 
randomized version expected running time running time achieved probability balanced cuts typically constant 
improves implementation leighton rao algorithm suggested leighton time complexity mn expanders mn expanders 
expanders needed reduce number commodities 
cient algorithms approximate spreading metrics compute exactly applying increases approximation factors separators 
specifically case arbitrary vertex weights error terms notation ignores polylogarithmic factors naor rao schieber generated approximate algorithm spreading metrics multiplicative error bounded introduced approximating optimization oracle see section multiplicative error bounded introduced randomized version see section additive error bounded opt introduced scaling procedure needed bounding optimal cost see section additional multiplicative error terms specified items randomized version introduced transformation solution spreading metric see section 
log opt approximation factors problems small values opt better log approximation factors 

comparison previous 
seminal leighton rao previous provides algorithm balanced cuts 
graph parameters min typically leighton rao algorithm finds cut capacity log opt opt denotes capacity optimum balanced cut 
leighton rao approach problem finding balanced cuts indirectly 
define notion sparse cut fractional relaxation dual problem multicommodity flow problem 
log approximation algorithm computing optimal sparse cut 
leighton rao algorithm proceeds accumulating approximate optimal sparse cuts cutting iteration smaller part graph fraction weight graph accumulated 
approximating optimal sparse cut iteration done stages 
new linear program solved 
cut searched trying find shallow depth subgraph contains majority vertices 
finding right expansion ratio done trial error right value observed 
leighton rao show union log approximate sparse cuts results log opt capacity balanced cut 
algorithm di ers leighton rao algorithm ways 
consider direct linear programming formulation separators 
need solve linear program leighton rao algorithm needs solve new linear program cut taken 
spreading metrics enables control weight pieces chopped undirected graphs chopped pieces need partitioned 
contrast leighton rao algorithm guarantee weight chopped part half weight remaining subgraph 
controlling weight chopped pieces enables find balanced partitions undirected graphs having recursively partition chopped pieces 
criterion finding cuts expansion ratio known advance need trial error stage order compute cut 
garg vazirani yannakakis log approximation algorithm undirected networks 
described approximate sparse cuts obtain log approximation 
results related ways 
credit scheme cut procedure basically identical region growing technique 
fact algorithm cut packing algorithm may interpret algorithm finding cuts graphs constant diameter 
balanced partitioning problem considered leighton simon teng 
suggested approximation algo fast approximate graph partitioning algorithms rithm recursive bisection recursively partitioning graph approximate separators yielding approximation factor log log 
employed spreading metrics improved approximation factor log log log log variety graph optimization problems 
graph partitioning framework cast problems deal paradigm yielding somewhat weaker approximation factors factors 
fact unable apply algorithm balanced partitioning problem directed graphs best approximation algorithm problem applying framework recursion yielding log log log approximation factor 
able obtain log approximation factors compared log log log approximation factors partition graph iteration parts smaller part small partitioning required 
refer partitioning chopping piece 
able guarantee parts trivial parts needed recursively partitioned 
simultaneous separation problem considered previously case number sets partitioned constant 
instances simultaneous separation problem solved recursively applying leighton rao algorithm 
number sets partitioned logarithmic ect approximation factor approach yields weaker approximation factors approximation factors 
note steiner multicut problem considered klein modeled simultaneous separation problem 
separation steiner multicut problem required balanced approximation algorithm yields inferior results compared 
weighted balanced cut problem considered previously researchers literature lacks description approximation algorithm weighted case brief sketch available 
organized follows 
section define problems considered 
section consider spreading metrics separators undirected graphs 
section describe approximation algorithm finding separator undirected graphs 
section consider separators directed graphs 
section consider simultaneous separators 
section describe cient algorithm computing suboptimal spreading metrics 

problems 
section define problems considered 
start known problems finding balanced cuts balanced partitions 
define problem finding separators captures previous problems special case 
define general problem call simultaneous separators 
problems np complete 
simplify presentation define edge version problems consider undirected graphs 
section remarks vertex version problems directed case 
undirected graph nonnegative edge capacities nonnegative vertex weights cut subset disconnects 

balanced cut problem 
balance parameter graph naor rao schieber balanced cut cut satisfies 
balanced cut problem input find minimum capacity balanced cut balance parameter equals balanced condition relaxed 
relaxation avoids having infeasible constraint case bisection due rounding problems 
balanced partitioning problem 
integer real balanced partition subset edges removal partitions graph parts part consists union connected components sum vertex weights part 
balanced partitioning problem input find minimum capacity balanced partition claim implies loss generality may assume 
claim 
balanced partition induces balanced partition 
proof 
denote balanced partition 

denote vertex sets connected components graph define 
definition merge connected components denote edges connecting vertices belonging di erent components merging small components 
simplify notation assume merging took place 
prove get balanced partition substituting get 
prove index distinguish cases 
case 
case upper bound follows 
case 
exists index case indices summing get implies kw kw kw refer balanced partitions balanced partitions 
separator problem 
separator subset edges removal partitions graph connected components sum vertex weights component 
separator problem input find minimum capacity separator simultaneous separator problem 

denote set subsets vertices 
denote set parameters satisfies simultaneous separator subset edges removal partitions graph connected components component 
simultaneous separator problem input find minimum capacity simultaneous separator fast approximate graph partitioning algorithms note algorithm extended solve general case node weight values associated partitioning constraint respect ith weight measure 
exhibit certain connections problems defined 
clearly balanced cut separator 
claim shows separator induces balanced cut cost 
assertions imply balanced cut problem equivalent separator problem 
claim 
separator induces balanced cut 
proof 
denote separator 

denote vertex sets connected components graph 
exists cut balanced cut capacity capacity separator 
define max 

conclude bw balanced cut cost capacity separator 
follows definitions balanced partition induces 
claim separator induces balanced partition 
claim 
separator induces balanced partition 
proof 
denote separator 

denote vertex sets connected components graph 
define 
definition merge connected components denote edges connecting vertices belonging di erent components merging small components 
simplify notation assume merging took place 
similar claim shown claim follows 
conclude remarks 

vertex version problems vertex capacity weight 
problem find minimum capacity subset vertices removal partitions graph connected components weight satisfies relevant constraint 

edge version reducible vertex case introducing dummy vertices edge 
consider heterogeneous versions simultaneous separation problem separation constraints subsets containing edges vertices 

problems extended directed graphs 
case definitions modified connected components replaced strongly connected components 

spreading metric separators undirected graphs 
spreading metric assignment edge lengths satisfies properties provides lower bound satisfies radius guarantee 
obviously interested computing spreading metrics ciently 
obtain spreading metric writing linear program showing optimal solutions spreading metrics 
integer program corresponding linear program direct formulation separators shown lower bound property 
start defining spreading metric 
note parameters involved lower bound respect separators goal find separator 
radius guarantee stated respect naor rao schieber notation 
edge lengths subset vertices dist denote distance subgraph induced vertices definition 
assignment nonnegative edge lengths spreading metric separators finding separators satisfies properties 
lower bound volume assignment defined lower bound minimum capacity separator 

radius guarantee loosely speaking heavy subset vertices constant radius 
formally subset vertex radius radius max dist 
obtain spreading metric separators writing linear program attaches edge lengths edge linear program defined follows min subject dist 
note type constraints holds trivially 
formulate linear program dist dist 
denote linear program obtained dist dist 
dist smaller dist follows feasible solutions subset feasible solutions cost minimum cost solution greater minimum cost 
section show feasible solutions feasible solutions optima linear programs equal 
section consider modification subset constraints kept constraints corresponding subsets weight greater 
notation 
denote cost optimal fractional solution linear program 
show optimal solution spreading metric lower bound radius guarantee satisfied 
show optimal solution computed polynomial time 
lower bound 
show separator induces feasible solution linear program defining 
consider subset satisfies consider vertex need show constraint corresponding satisfied 
comp denote connected component contains graph 
path vertex comp contain fast approximate graph partitioning algorithms edge length equals dist 
dist comp dist comp comp 
cost integral solution induced separator equals capacity separator 
cost optimal fractional solution linear program greater cost minimum capacity separator 
radius guarantee 
feasible solution satisfies radius guarantee 
lemma 
satisfies vertex radius proof 
fix consider constraint corresponding 
constraint gives lower bound weighted sum distances vertices provides lower bound weighted average distance vertices denote vertex distance weighted average distance vertex dist dist dist lemma follows 
polynomial time computability 
formulation linear program shorthand linear program contains exponentially constraints heavy subset consider combinations paths vertices require weighted sum lengths paths satisfies corresponding constraint 
number constraints exponential naive implementation known polynomial time lp solvers provide cient way computing spreading metrics 
running time solvers polynomial number variables number constraints 
describe spreading metric computed polynomial time ellipsoid algorithm 
algorithms computing spreading metrics better asymptotic running times section 
applying ellipsoid algorithm requires polynomial time separation procedure candidate solution finds violated constraint proves solution 
rewrite constraints follows dist 
vertex left hand side minimized subset dist chosen 
constraint corresponding naor rao schieber satisfied constraints distances measured satisfied 
means constraints corresponding satisfied vertex edge lengths constitute feasible solution 
polynomial time separation procedure exists 
sphere radius follows dist dist linear programs feasible solutions optima 

finding separator 
section describe approximation algorithm separators 
input consists graph edge capacities vertex weights 
input contains spreading metric separator represented edge lengths algorithm consists cut procedure partitions subset vertices weight larger 
procedure cuts subset vertices weight chopped pieces need partitioned 
initially cut procedure applied graph applied iteratively remaining part weight greater 
cut procedure section identical sphere growing procedure di erence parameters definition volume upper bound radius 
presentation emphasizes ability find cut capacity logarithmic volume spreading metric diameter graph constant see 

assigning volumes 
garg vazirani yannakakis assign volumes spheres grown vertices 
volumes define credit attributed spheres order pay cut disconnecting rest graph 
definition volume deviates slightly definition reduce constants 
definition 
denote vertex subgraph induced sphere centered denoted defined dist note includes vertices distance strictly notation 
denote set edges endpoints belong 
cut denote set edges belong cut 
volume sphere positive value attach spheres sum components seed value set cost optimal fractional solution contribution edges contribution edges cut 
definition 
volume denoted vol defined vol cut dist ln 
cut procedure 
section describe procedure partitioning subgraph parts spreading metric separator procedure applied finds fast approximate graph partitioning algorithms cut proc choose arbitrary closest vertex ln vol vol vol dist closest vertex return fig 

cut procedure 
sphere satisfies properties ratio cut vol logarithmic 

description 
cut procedure runs dijkstra single source shortest paths algorithm arbitrary vertex iteration adding closest vertex set vertices distances determined procedure checks dist radius 
procedure stops finds radius returns set vertices chopped 
procedure called cut proc depicted 
theorem 
subgraph satisfies spreading metric procedure cut proc finds subset satisfies 

proof theorem 
vertex chosen cut procedure 
consider vol function depicted 
note monotone piecewise linear function initial value equals final value equals endpoints linear segments correspond distances measured vertices words sort vertices ascending distance order 
function vol linear closed interval dist dist 
vol dr open interval dist dist equals cut 
readily seen observing open interval cut edges contribute growth volume coe cient equals sum capacities cut edges 
cut procedure searches radius ratio vol vol logarithmic 
need show radius exists procedure finds 
note implies see lemma 
recall denote open interval dist dist 
claim proves existence radius 
naor rao schieber vol dist dist fig 

vol function claim 
vertex exists satisfies vol vol ln vol vol proof 
contradiction suppose vol vol ln vol vol left hand side equation defined continuous interval finitely points 
may take integral sides yielding vol vol dr ln vol vol dr 
identity dx ln evaluate left hand side inequality vol vol dr ln vol ln vol ln vol vol right hand side inequality equals value contradiction claim follows 
cut proc procedure considers radii set dist 
note sphere follows dist dist vertex 
order enable computability radius show fast approximate graph partitioning algorithms distances dist exists radius 
claim proves property 
claim 
denote arbitrary vertex 
denote radius existence guaranteed claim 
define min dist dist satisfies cut ln vol vol vol 
proof 
consists vertices distance strictly follows spheres define cut 
particular cut vol 
inequality follows claim vol vol 
lemma implies inequality claim follows 
claims show set radii dist exists radius 
cut procedure simply performs exhaustive search ascending distance order stops soon finds radius satisfies inequality 
radius satisfies inequality greater theorem follows 

analysis approximation factor 
section prove log approximation factor proposed algorithm 
outline algorithm may modified obtain log approximation algorithm 
cut procedure called repetitively weight remaining subset vertices drops equal 
call chops sphere chopped spheres disjoint 
volume sphere consists contribution edges contained inside contribution edges cut contribution seed value 
sum contributions edges edges cut volumes chopped spheres bounded sum seed values bounded capacity cut cut procedure satisfies ln vol vol vol dist 
vol vol sum capacities cuts calls cut procedure bounded ln 
plugging ln yields theorem 
theorem 
algorithm finds separator capacity ln naor rao schieber volume spreading metric lower bound cost optimal separator 
obtain log approximation factor minimum edge capacity 
assume loss generality minimum edge capacity show obtain log approximation factor 
done modifications 
define add seed values volume spheres 
denote positive parameter specified 
start cut procedure initial sphere radius substitute occurrences vol vol 
considering half open interval consider half open interval 
substitute occurrences 
reciprocal length half open interval 
modifications sum volumes chopped pieces bounded edge vol subgraph connected 
sum capacities cuts calls cut procedure bounded ln 
assign example capacity separator bounded ln 
obtain log approximation factor 

separators directed graphs 
section describe approximation algorithm separators directed graphs 
algorithm similar algorithm undirected separators control weight chopped pieces diminished guarantee weight chopped pieces half weight vertices remaining subgraph 
algorithm applicable values approximation factors larger factor 
define spreading metrics directed graphs point modifications undirected separator algorithm required directed separators 

spreading metrics directed graphs 
spreading metric directed case parameter obtained linear program min dist dist 
omit proofs optimal spreading metric computable polynomial time lower bound capacity optimal separator 
omit proof spreading metric satisfies modified radius guarantee stated 
fast approximate graph partitioning algorithms lemma 
satisfies vertex exists vertex dist dist 
finding separator directed graphs 
iteration find pair vertices achieves diameter dist max dist 
note lemma implies dist finding call cut procedure twice instance remaining subgraph initial vertex second instance reversed subgraph rev rev initial vertex 
reversed graph obtained reversing directions edges preserving edge weights capacities 
cut procedure assigns volumes fashion undirected case 
modify definition cut procedure denote subset vertices returned call cut procedure rev denote subset vertices returned second call 
theorem claim min rev 
choose cut chop choose cut rev rev chop rev theorem 
directed subgraph satisfies 
directed spreading metric satisfy dist rev subsets vertices returned calls procedure cut proc input initial vertex second input rev initial vertex 
weights rev satisfy min rev 
proof 
rev rev rev denotes sphere reversed graph recall 
dist follows rev disjoint 
rev conclude rev 
complete show rev rev min rev min rev 
easy claims inequality applicable theorem follows 

approximation factor directed graphs 
directed case ratio capacity directed separator volume spreading times larger corresponding ratio undirected case 
due fact directed case approximation factors increase factor compared approximation factors undirected case 

simultaneous separators 
section review modifications needed solve problem simultaneous separators similar approximation factors 
problems describe algorithm 
input consists graph edge capacities vertex weights sequence subsets vertices 
sequences separation parameters 


required output simultaneous separator compare cost optimal simultaneous separator 
describe undirected case discussion carries directed case naor rao schieber 
spreading metric simultaneous separators 
spreading metric simultaneous separators obtained linear program min dist 
omit proofs concerning optimal spreading metric state radius guarantee lemma case 
lemma 
satisfies vertex radius modification required finding simultaneous separator definition define min algorithm proceeds chopping parts graph cut procedure long remaining subgraph satisfy simultaneous separation requirements 
approximation factor obtained ln di erence ratio capacity simultaneous separator volume spreading metric stems definition 
computing spreading metrics ciently 
plotkin tardos shmoys defined framework fractional packing covering problems developed fast algorithms computing approximate solutions 
young devised fast algorithms finding approximate solutions framework 
section show framework compute spreading metrics ciently 
note results hold case undirected graphs 
henceforth refer algorithm described pst algorithm algorithm described algorithm 
describe fractional packing setting 
denote graph optimization problem graphs input consists 
convex set 
note may exponential influence running time indirect 

nonnegative linear function consider real valued linear functions indexed edges graph 
goal fractional packing problem compute defined min max 
computing precisely pst algorithms 
error parameter find vector compute solution dual fractional covering problem 
input dual problem consists 
convex set 
nonnegative linear function fast approximate graph partitioning algorithms view point assignment lengths edges consider real valued linear functions 
goal fractional covering problem compute defined max min 
pst algorithms require existence optimization oracle 
input optimization oracle dual solution assignment edge lengths output vector minimizes objective function 
words optimization oracle computes minimizes inner product 
pst algorithms optimization oracle returns suboptimal result 
specifically optimization oracle outputs vector min algorithms find vector key parameter ects running time pst algorithms width set respect function width denoted max defined max max max 
setting complexities pst algorithms follows 
complexity pst algorithm max ln ln compute oracle compute denotes time required compute respect intermediate value oracle denotes time required optimization oracle answering single query 
complexity algorithm max ln compute oracle note may exponentially large ecting complexity algorithms long ciently compute intermediate vectors encountered course running algorithms ciently compute oracle 
rest section cient implementations pst algorithms computing spreading metric separators 
deterministic algorithm running time randomized algorithm expected running time 
implementation issues discussed section modification linear program fits framework adjustment linear program width convex set naor rao schieber section scaling problem optimal solution satisfies 
section construction deterministic optimization oracle runs mn time randomized version succeeds finding approximate solution time high probability 
section implementation issues computing time deriving dual solution 

modified formulation 
section rewrite linear program fits framework 
modification ensure width constant 
define modified version denoted 
min dist 
observe details constraints omitted distances dist important omit constraints subsets weight equal 
omitting constraints change cost optimal solution 
reason feasible solution min 
easy show cost optimal solution lower bound minimum capacity separator ii feasible solution satisfies radius guarantee stated lemma 
optimal solutions spreading metrics 
define linear program notation 
rooted tree graph pair vertices edges tree belong designated vertex called root 
removing edge disconnects tree subtrees contains root contain 
edge rooted tree define sum weights vertices subtree disconnected root removing edge denote set rooted trees weight greater 
define linear program follows min rooted trees 
lemma 
sets feasible solutions linear programs equal optima equal 
fast approximate graph partitioning algorithms proof 
consider rooted tree define dist distance easy see dist 
expressions interchangeable 
subset vertex consider rooted tree shortest paths follows dist dist 
feasible solution feasible solution 
show feasible solution feasible solution 
rooted tree denote vertex set denote shortest path tree constraint corresponding satisfied identical constraint corresponding dist dist vertex follows constraint corresponding satisfied lemma follows 
utilization edge rooted tree defined define rewrite linear program follows min rooted trees 
construct dual program follows 
rooted tree define nonnegative variable 
vector define utilization edge follows 
dual program defined follows max edges rooted trees 
translate linear program fractional packing problem solvable pst algorithms 
define fractional rooted tree convex combination rooted trees 
fractional rooted tree represented nonnegative vector 
define convex set set fractional rooted trees denotes cardinality fractional packing problem compute minimizes max 
approximate solution computed naor rao schieber pst algorithm algorithm satisfies max min max 
relation problems follows 
feasible solution scaled vector setting 
maximum edge utilization bounded 
conversely vector maximum edge utilization define obtain feasible solution 
optimal solution problem scaled optimal vice versa 
translation scaling preserves approximation factors approximate solutions 
fractional covering problem dual corresponds defined follows 
denote convex set vectors 
define cost rooted tree respect cost 
problem find vector maximizes cost minimum cost tree respect words define max min cost goal find vector cost rooted trees 
precise pst algorithms find vectors min cost max 
combined linear programming duality implies computed costs solutions factor optimum scale back vector obtain approximate solution linear program constitutes spreading metric 
conclude showing width respect constant 
point convex combination rooted trees linear follows width obtained single rooted tree 
claim 
capacities edges unit width max proof 
discussed max max max max note 
consider rooted trees follows claim follows 

bounding optimal cost 
running time pst algorithms depends optimal cost fractional packing problem 
section show scaling bound value 
opt denote capacity optimal separator 
separator feasible solution linear program follows opt su ces bound opt 
reduction scales minimum capacity separator bounded 
cost associated reduction opt reduction adds edges separator compute sum capacities edges opt course su ces constant approximation 
overhead running reduction multiplicative factor log needs execute pst algorithm log times 
fast approximate graph partitioning algorithms suppose bound satisfying opt opt consider scaling 
define light heavy clearly edges heavy belong optimal separator 
contracting edges heavy modify capacity optimal separator 
contracting mean connected components heavy merged single node weight equals sum weights original vertices capacity edge incident merged vertices equals sum capacities edges connecting original vertices 
total capacity edges light bounded opt add edges light solution overhead step bounded opt adding edges light solution means may delete edges graph 
scale capacities remaining edges follows 
note capacities remaining edges 
denote graph obtained contracting edges heavy deleting edges light scaling edge capacities 
opt denote capacity optimal separator claims prove required properties reduction claim 
capacity optimal separator satisfies opt opt 
proof 
show separator capacity 
consider optimal separator optimal contain edges heavy follows heavy transform separator separator simply choosing edges originate edges 
opt opt 
claim 
separator transformed linear time separator opt proof 
separator transformed separator light choosing edges edges originate 
translation satisfies 
adding edges light yields separator cost bounded opt conclude claims separator capacity opt transformed separator capacity opt reduction far enables run approximation algorithms graph optimal separator capacity 
reduction assumes existence approximation opt 
resort guessing starting doubling guess 
suppose graph opt edge capacities remain log guesses required 
guess solve approximately problem corresponding graph choose best solution log solutions 
note guess large edges contained light light separator 
small heavy spans subgraph heavy rendering problem infeasible 
naor rao schieber discuss perform opt note keeps edge capacities 
su ces consider guesses pick best solution log possibilities 
order edges increasing cost order 
compute index satisfies min 
separator 
note binary search computed log time 
claim opt 
upper bound follows directly definition lower bound follows opt optimal separator consist edges subset 
contradiction definition scaling technique discussed define light heavy 
opt sum capacities edges light bounded opt add edges light solution delete graph 
opt capacity edge heavy opt edges heavy belong optimal separator contracted 
scale capacities remaining edges follows 
easy see achieves desired 

optimization oracle 
optimization oracle receives input nonnegative edge lengths finds fractional rooted tree minimizes 
vector called min cost fractional rooted tree may interpret edge lengths edge costs 
claim 
min cost fractional rooted tree 
rooted tree 
proof 
observe rooted tree fractional rooted tree 
exists rooted tree exists rooted tree yielding contradiction assumption min cost fractional tree 
claim follows 
fast approximate graph partitioning algorithms follows claim order compute min cost vector su ces find min cost tree 
goal find rooted tree minimizes cost prove finding minimum cost rooted tree case vertices arbitrary weights np complete reduction subset sum problem 
input instance subset sum problem consists fraction positive weights 
satisfy 
question exists subset indices 
reduction weighted optimization oracle follows 
choose pair 
simplicity choose 
consider star graph center vertex vertices connected center denoted 
define edge capacities edge lengths define vertex weights follows case means 
claim 
cost minimum cost rooted tree instance weighted optimization oracle answer instance subset sum problem 
proof 
readily verified relatively large minimum cost tree rooted due unit edge lengths edge capacities cost rooted tree equals cost follows cost minimized minimized 
exists tree cost smallest possible cost 
exists tree exists subset 
occurs claim follows 
rest section organized follows 
algorithm computing optimization oracle case unit vertex weights 
running time algorithm mn 

approximation algorithm optimization oracle case arbitrary vertex weights 
running time algorithm mn 

randomized approximation algorithm optimization oracle weighted unweighted case reducing running time optimization oracle 
randomized algorithm reduces running time factor 
naor rao schieber 
precise optimization oracle unit weight case 
consider case vertices unit weight 
define vertex min cost tree rooted denoted rooted tree cost minimum rooted trees find min cost tree computing root vertex min cost tree rooted min cost tree chosen trees 
henceforth focus computing fixed root define cost 

rooted tree dist denote distance respect edge lengths 
clearly dist 
consequence computing reduces computing closest vertices respect edge lengths 
root compute values running dijkstra shortest paths algorithm complexity log 
need run algorithm choices root get total running time min cost subroutine mn log 

approximate optimization oracle weighted case 
extend definition unweighted case deal vertex weights 
define cost 
clearly dist 
optimization oracle weighted case searches rooted tree minimizes 
approximate oracle guesses interval denominator searches rooted trees minimize numerator 
depicts approximation algorithm optimization oracle 
algorithm apx opt oracle procedure called apx min root threshold finds rooted tree weight min 
algorithm apx opt oracle calls procedure apx min possible root sequence increasing thresholds returns rooted tree minimum cost computed trees 
claim summarizes approximation factor algorithm apx opt oracle 
claim 
algorithm apx opt oracle finds approximate min cost rooted tree 
proof 
consider min cost rooted tree 

denote sequence thresholds considered algorithm 
suppose denote rooted tree procedure apx min respect threshold root fast approximate graph partitioning algorithms apx opt oracle assume known set rooted tree set initial threshold root apx min return fig 

approximation min cost rooted tree 
approximation procedure apx min implies 
fact implies 
cost cost algorithm apx opt oracle returns rooted tree cost greater cost claim follows 
turn procedure apx min depicted 
recall procedure finds rooted tree weight min 
note computationally prohibitive find exact minimum fixed searching tree rooted weight minimizes np hard 
reduction subset sum problem analogous reduction problem searching tree rooted weight minimizes 
procedure apx min grows shortest path tree rooted total weight vertices tree exceeds threshold resulting tree considered candidate min cost tree vertex added tree deleted tree 
procedure returns minimum cost tree candidate trees 
claim summarizes approximation factor obtains 
claim 
algorithm apx min computes approximate min cost tree weight rooted vertex proof 
denote min cost tree rooted weight tree list denote vertex added consider tree list show cost twice cost prove tree exists 
assume contrary trees list vertex added list get empty termination 
denote naor rao schieber apx min list empty list list candidate trees set deleted vertices current tree repeat closest vertex subgraph induced vertices 
edge shortest path subgraph induced 
add list add add empty return min cost tree list fig 

approximation min cost tree weight rooted tree added list 
empty follows consider vertex added added weight current tree subtree added contradiction 
consider partitioning sets 
partition 
cost greater cost show cost greater cost 
definition constructed added set contain vertices algorithm adds vertices order distance distance measured subgraphs induced distances subgraphs distances graph 
vertices closer close vertex dist dist definition hand follows 
fact vertices closer vertex obtain cost smaller cost cost smaller cost claim follows 
complexity algorithm apx min dominated complexity dijkstra shortest paths algorithm complexity log 
number iterations algorithm apx opt oracle root bounded log log 
total complexity computing approximate min cost tree mn 
fast approximate graph partitioning algorithms 
randomized algorithm 
consider tree root cost minimum costs rooted trees claim shows root chosen random probability expected cost twice cost 
denote cost rooted tree cost expected cost exp cost 
claim 
root chosen probability exp cost cost 
proof 
cost tree defined suppose edge disconnects subtrees 
clearly 
hand exp yielding bound exp 
linearity expectation exp cost exp exp cost completing proof 
combining claim algorithm computing min cost tree rooted vertex yields randomized algorithm finding approximate min cost tree 
algorithm chooses vertex probability outputs min cost tree rooted saves need compute min cost rooted trees possible root 
fix optimal min cost rooted tree 
probability case expected cost twice cost 
probability bounded fail 
amplify probability success may need repeat algorithm times yielding complexity randomized algorithm 

implementation issues 
point compute intermediate values time 
main reason possible optimization oracle returns single rooted tree 
edge utilizations respect rooted tree need computed 
algorithm need pst algorithm new vector weighted average old rooted tree returned optimization oracle 
function linear simply take weighted average edge utilizations 
second discuss scale vector returned pst algorithms obtain spreading metric 
scaling consists stages 
transform solution setting mint note weighted case denominator approximated adds error approximation factor 
deterministic oracle error bounded randomized oracle error bounded 

transform solution setting 
naor rao schieber acknowledgments 
serge plotkin eva tardos generous help applying framework described approximating spreading metrics 
naveen garg discussions constants previous related approximation algorithms 
neal young helpful remarks 
mark rosenschein pointing need di erent oracle weighted case 
goldberg path optimization graph partitioning problems discrete appl 
math pp 

naor schieber sudan approximating minimum feedback sets directed graphs algorithmica pp 

naor rao schieber divide conquer approximation algorithms spreading metrics proceedings th annual ieee symposium foundations computer science ieee computer society press piscataway nj pp 

fredman tarjan fibonacci heaps uses improved network optimization algorithms acm pp 

garey johnson computers intractability guide theory np completeness freeman san francisco 
garg vazirani yannakakis approximate max flow min multi cut theorems applications siam comput pp 

johnson aragon schevon optimization simulated annealing part graph partitioning oper 
res pp 

kernighan lin cient heuristic procedure partitioning graphs bell system tech 
pp 

treewidth lecture notes comput 
sci 
springer verlag berlin heidelberg 
klein plotkin rao tardos approximation algorithms steiner directed algorithms pp 

leighton plotkin stein tardos fast approximation algorithms multicommodity flow problems comput 
system sci pp 

leighton approximation algorithms vlsi partition problems proceedings ieee international symposium circuits systems iscas new orleans la vol 
ieee computer society press piscataway nj pp 

leighton rao approximate max flow min cut theorem uniform multicommodity flow problems applications approximation algorithms proceedings th annual ieee symposium foundations computer science ieee computer society press piscataway nj pp 
acm appear 
lang rao finding near optimal cuts empirical evaluation proceedings th annual acm siam symposium discrete algorithms austin tx siam philadelphia pp 

nesterov nemirovskii interior point polynomial algorithms convex programming siam stud 
appl 
math 
siam philadelphia 
plotkin shmoys tardos fast approximation algorithms fractional packing covering problems math 
oper 
res pp 

simon 
teng recursive bisection siam sci 
comput pp 

young randomized rounding solving linear program proceedings th annual acm siam symposium discrete algorithms san francisco siam philadelphia pp 

