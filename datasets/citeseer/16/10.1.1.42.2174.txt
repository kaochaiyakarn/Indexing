query language semistructured data ambient logic luca cardelli microsoft research giorgio ghelli universit di pisa preliminary version april ambient logic modal logic proposed describe structural computational properties distributed mobile computation 
structural part ambient logic essentially logic labeled trees turns ideal foundation query languages semistructured data way rst order logic tting foundation relational query languages 
de ne query language semistructured data ambient logic describe execution model language 
language turns quite expressive 
strong foundation wealth results proved ambient logic helpful de nition language semantics execution model 
arises unexpected convergence studies di erent elds mobile computation semistructured data 
unstructured collections unstructured data collections respect prede ned schema need carry description structure 
call semistructured collections recognize pieces data structure presents degree homogeneity 
partial regularity semistructured collections amenable accessed query languages query languages designed access fully structured databases 
new languages needed able tolerate irregularity data query data structure 
semistructured collections usually modeled terms labeled graphs labeled trees abs 
ambient logic modal logic proposed describe structural computational properties distributed mobile computation cg 
logic comes equipped rich set results 
particular issues logical implication equivalence studied inference systems devised 
structural part ambient logic essentially logic designed describe properties labeled trees 
ideal foundation query languages semistructured data way rst order logic tting foundation relational query languages 
de ne query language semistructured data ambient logic describe execution model language 
language turns quite expressive 
strong foundation wealth results produced relation ambient logic helpful de nition language semantics execution model 
structured follows 
section preview query language 
section de ne tree data model 
section logic query language de ned section de ned 
section evaluation model 
section subset restricted queries enjoy safety property 
section hint extensions needed deal xml data 
section compare language related proposals 
section draw 
preview consider bibliography expressed syntax language tql explain detail 
informally represents piece data labeled contents contents collection similar pieces data separated 
collection empty omit brackets popl written popl 
bibliography consists set labeled article 
entry contains number author elds title eld possibly elds 
articles article author cardelli author gordon title anytime conference popl year keyword ambient calculus keyword logics article author cardelli title wide area computation booktitle icalp year pages publisher sv article author ghelli author pierce title bounded existentials journal tcs year suppose want nd papers articles author cardelli write query articles article author cardelli select query consists list matching expressions articles article author cardelli contained select reconstruction expression select matching expressions bind piece data reachable root articles article path path author goes cardelli 
query language characterized fact matching expression logic expression combining matching logical operators 
example query combines path expressions logical implication retrieve papers author cardelli 
informally matches second condition says author cardelli 
articles article author author cardelli select queries nested giving power restructure collection explain 
information trees represent semistructured data information trees 
section rst de ne information trees 
give syntax denote de ne equivalence relation di erent expressions denote information tree 
information trees represent trees nested multisets 
set labels de ne set information trees smallest collection empty multiset fg singleton multiset fhm iig closed binary multiset union 
info terms denote information trees syntax information term info terms borrowed ambient calculus cg 
info terms information tree meaning info term info term interpretation denoting empty multiset def denoting multiset fhm ig def fhm ig denoting multiset union def denote set terms generated grammar parentheses precedence 
abbreviate assume includes disjoint union basic data type interest integers strings 
legitimate info term 
assume associates right read 
visualize information tree unordered edge labeled tree forest node labeled trees 
adopt rst view say tree edges going root leaves 
congruence info terms interpretation info terms information trees induces equivalence relation info terms 
relation called info term congruence axiomatized follows 
congruence info terms axiomatization congruence sound complete respect information tree semantics 
represent information tree 
information trees oem trees unql trees compare information trees popular models semistructured data oem data unql trees bdhs 
rst obvious di erence oem unql models represent trees graphs focus trees 
currently working extending model include labeled graphs prefer focus simpler issue trees rich warrant separate study 
unql trees characterized fact considered modulo bisimulation essentially means information trees seen sets multisets 
example considered unql trees precise sense identify terms 
hand information trees oem data oem data distinguish dag tree unfolding 
tree logic section tree logic 
tree logic cardelli gordon modal ambient logic de ned aim describing spatial temporal properties mobile processes speci ed ambient calculus cg 
ambient logic particularly attractive equipped large set logical laws particular logical equivalences provide foundation query rewriting rules query optimization 
start subset ambient logic cg enrich information tree variables label comparison recursion 
formulas syntax tree logic formulas table 
symbol label comparison clause stands label comparison operator chosen prede ned family assume contains equality sql string matching operator negations 
positivity condition recursion variable means number negations traversed path goes binder 
formulas label expression label constant label variable formula empty tree location composition true negation conjunction tree variable quanti cation labels quanti cation tree variables label comparison recursion variable recursive formula xpoint may appear positively interpretation formula semantic map maps set information trees respect substitution free variables substitution maps label variables labels elements tree variables information trees recursion variables sets information trees 
style semantics easier de ne semantics recursive formulas 
consequences semantic de nition detailed shortly 
formulas sets information trees def def fh ii def fi def def def def def def def def fs def singleton 
contains information tree hm ii 
assume maps label apply variable 
contains information tree set information trees negation denotes empty set 
complement respect set information trees exists value denotes maps coincides 
set comparison holds empty set 
xpoint respect set inclusion function maps set information trees meaning variable substitution 
substitutions connect logic pattern matching example maps 
process nding possible logic way nding possible answers query 
say satis es information tree set write def satisfaction enjoys properties help making semantic de nitions explicit easily derived 
properties form basis matching algorithm properties satisfaction afx mg afx fg af ag derived formulas usual negation allows de ne useful derived operators described table 
derived formulas def jj def def def def def def af means true shape 
appreciate di erence dual consider statements 
article ghelli author article author ghelli jt article ghelli author article author ghelli jt jj means true means decomposition appreciate di erence jj operators consider statements 
exists decomposition satis es article es article inside satis es article decomposition satis es article satis es article inside satis es article jj dual xpoint operator greatest xpoint operator example equivalent equivalent interestingly describes information tree matches nite trees equivalent 
consider nite trees distinction greatest xpoint important 
example nite tree satis es satisfy 
consider nite trees operators quite similar practice interesting formulas single xpoint 
satisfaction derived operators enjoys properties easily derived de nition subtle 
example properties greatest xpoints include coinduction principle 
properties form basis matching algorithm 
properties satisfaction derived formulas jj afx mg afx fg af ag af bg equations proved ambient logic inherited tree logic 
list 
equations basic tool logical optimizer 
equations jj jj jj jj jj jj jj jj jj jj jj path formulas query languages semistructured data provide way retrieving data reachable path described regular expression 
tree logic powerful express kind queries 
show fact de ning syntax path expressions showing expressions translated logic 
way obtain compact readable way expressing common queries outlined previous section 
consider statement article articles collection author cardelli express logic pattern articles article author cardelli special syntax path expressions express condition follows 
articles article author cardelli path expressions support features universally quanti ed paths article author cardelli 
articles article author cardelli label negation article ghelli value eld author 
articles article author ghelli path disjunction article deals ssd cites deals ssd 
articles article keyword cites article keyword ssd path iteration kleene star article deals ssd reach chain citations article deals ssd 
articles article cites article keyword ssd label matching exists path reach eld label contains mail 
articles mail de ne syntax paths interpretation 
path formulas label matching expression matches matches match path element edge matches edge matches path elementary path pq path concatenation kleene star disjunction naming tree path path formula translated tree logic shown 
rst de ne tree formula matches follows matches def matches def matches path elements interpreted translation logic patterns jj previously def matches 
def matches jj general paths interpreted follows 
recursively interpreted holds holds traversing 
target naming means nd satis es interpreted logical conjunction 
formally path interpretation de ned shown path interpretation translates non path operators exempli ed pq def def def def def def tree query language section build full query language top logics de ned 
query language query language feature functionality binding selection mechanism select values database bind variables construction result mechanism build result starting bindings collected previous stage 
tree query language tql uses tree logic binding selection tree building operations construct result 
allow tree functions chosen set functions type tree tree appear query 
examples may functions count yields tree cardinality sons op op commutative associative integer function neutral element trees sons shape natural number op combines op operation obtaining integer returns 
practice functions include user de ned functions written external programming language 
tql queries query select substitution collecting query matching variable empty result union results nesting result tree function select formula logic de ned earlier 
section abbreviate query select select select variable may tree variable label variable recursion variable free formula occurrences scope binder write fv set free variables free variables query de ned follows 
basic intuition select binder binds variables free fv def fxg fv def fg fv def fv fv fv def fv fv def fxg fv fv select def fxg fv fv semantics query de ned respect input substitution binds variables occur free query 
unnested query input substitution bind top level names play role table names sql persistence roots object databases 
nested query see input substitution internal query conveys values variables bound outer query 
semantics select query respect input substitution de ned follows 
rst de ne semantics set substitutions de ned variables appear free extend input substitution 
result query multiset union information trees returned evaluating head respect semantics example consider query articles author select author articles bound collection section semantics binder set substitutions stands binding articles collection cardelli ghelli gordon pierce answer query built union information trees get author author cardelli author ghelli author gordon author pierce semantics binder de ned set means substitutions di er value bound variable 
semantics query de ned table extends means dom dom coincide dom 
information tree interpretation de ned assumption dom fv 
little abuse notation denote corresponding operators information trees 
query semantics def dom fv dom extends def def def def select def def query nesting allows restructure data 
example want rearrange papers year publication rst select years year list papers year 
articles article year select publications year year articles article year select article safe queries known disjunction negation universal quanti cation create safety problems logic query languages 
problems appear query language 
consider example query db author select author intuitively entry db author binds vice versa entries 
formally situations generate nite amount substitutions example db author db nite set db author negation creates similar problem 
consider query 
db author select binder respect input substitution generates nite set bindings db author query nite result queries di erent related problems semantics depends sets possible labels information trees semantics nite 
say query safe semantics nite 
query safety known undecidable relational tuple calculus ahv suspect undecidable calculus 
relational calculi dicult devise sucient syntactical conditions safety solve non safety problem restricting language syntactically safe queries 
di erent way solve problem allow unsafe queries design semantics query processor 
explore solutions 
semantics accounts unsafe queries restrict set substitutions generated binder nite restrict query answer nite 
section de ne constraint algorithm process safe queries safe unsafe binders 
section de ne syntactic sucient conditions safety 
query evaluation section de ne algorithm evaluate queries 
kernel query evaluation problem binder evaluation 
binder evaluation algorithm takes binder substitution returns set substitutions set substitutions may nite develop algorithm returns nite representation set terms nite disjunction set conjunctive constraints substitutions 
precisely specify translation binders expressions constraint algebra technique evaluate expressions algebra 
approach allows algebraic expressions optimized execution 
constraint algebra constraint nite representation possibly nite set substitutions common domain set substitutions called interpretation denoted 
metavariables range respectively variables sets variables 
variable may information tree variable universe de ned label variable 
denote set substitutions domain map variable value 
seen named tuple set substitutions seen relation database sense schema 
constraint interpretation seen relation exploit isomorphism apply standard relational operators constraint interpretations 
describing implementation constraints de ne constraint algebra 
constraint algebra primitive operators information tree expression information tree variable information tree constraint expression universe binary union fy jy ig union subtrees singleton singleton projection complement test test test free variables constraint expression fv def fyg fv def fg fv def fyg fv def fg fv def fv fv def fv fv def fv fv fv def fg fv fy jy ig def fv fy fv def fv fv fv def fv fy fv fv def fv fy yg fv state fundamental equations satis ed interpretation closed constraint expression 
table operators relational algebra denotes tuple eld value substitution maps 
properties closed constraint expressions nv fy jy ig fi ji fy fy fy derived operators de ned follows 
constraint algebra derived operators abbreviations def def def fy jy ig def fy jy ig 
def 
def def nv interpretation derived operators satis es equations 
interesting states interpreted standard relational natural join 
properties derived operators fg fy jy ig fi ji fy gf yg 

nv constraint algebra implementation discuss implementation constraint expressions 
build constraints starting simple constraints 
simple constraint tuple sets labeled variable identi er written 
label variable tree variable respectively set labels set information trees represented info terms 
set singleton complement nite set nite set denoted may relax generalizing singletons nite non empty sets 
variables di erent 
denotes set dom def fv domain simple constraint 
constraint set simple constraints domain needed empty set 
simple constraint associated formula def true simple constraint represents set substitutions satisfy 
constraint fr associated formula de ned fr def false constraint represents set substitutions satisfy def example constraint fag fag fbg fbg represents set substitutions 

whilst constraint fag represents substitutions map label 
simple constraint nitary set nite 
constraint nitary contains nitary simple constraints 
constraint represents nite set substitutions nite relation nitary 
de ning implementation constraint operations de ne join simple constraints domains join corresponds conjuction simple constraint domain case singleton nite set nite intersection computed follows range nite sets result nite set nite nite set nite may singleton empty set 
empty set unsatis able set fr de ne implementation constraint operations 
fg empty set simple constraints 
fv ng singleton represents domain fv adds simple constraint fv nv 
fkg singleton containing simple constraint represents substitution maps domain fv 
fkg singleton containing simple constraint represents substitutions map domain fv set domain rst extend domain constraints put resulting simple constraints 
union domain set extends means dom dom coincide dom fr dom extends soundness implementation relies fact simple constraint satis able represents substitution 
legitimate constraint get wrong constraint represent substitution represents substitutions evaluated fy evaluated 
evaluated similar way 
fy jy ig union fy ji fy jy ig natural join fy ji complement operation complex section 
evaluation binders de ne algorithm pair returns constraint representing substitutions dom fv show exploit algorithm compute semantics binder principle may consider formulas contain primitive logical operators derived ones substituted de nition 
negation expensive operation approach produce inecient evaluation 
practice logical optimizer exploit equivalences section push negation leaves logical expression obtaining formula negation appears front variables applying transformations listed table 
pushing negation front variables jj jj af af reason give algorithm evaluate binder may contain primitive derived operators logical optimizer invoked evaluation algorithm free perform negation pushing current implementation transformation involves derived operators 
algorithm takes information tree formula returns algebraic expression ji aj built terms constraint algebra 
resulting algebraic expression executed realistic implementation may rst undergo algebraic physical optimization 
algorithm limitations deal guarded recursion notion de ne section restrict label comparison operators equality inequality interpretation restricted formulas 
presence equality inequality rst push negation speci ed 
negation pushed leaves real limitation 
algorithm works structural recursion divide presentation subsections presenting respectively simple operators iterators quanti ers equality operator recursive operators negation 
simple operators rst de ne translation simple operators operators apart iterators jj quanti ers recursive operators comparisons 
inductively de ne function ji aj maps pair algebraic expression dom ji aj fv 
function transforms mapping substitutions information trees de ned logical formula inverse mapping information trees substitutions needed evaluate query 
formally enjoys property ji aj include negation set simple operators special cases 
limitation negation pushed leaves described previous section 
binder evaluation simple operators ji tj def ji fj def ji bj def ji aj ji bj ji bj def ji aj ji bj ji def ji def 
ji def ji def ji def jy aj fv ji def jy aj fv ji def jy afx fv ji def jy afx 
fv return constraint represent respectively success failure 
operator interpreted union constraints representing sets substitutions 
constraints di erent domains extended union domain resulting substitution nitary 
operator interpreted constraint join 
variable clause just returns constraint represents relevant substitutions 
clause returns constraint constraint 
clause returns constraint fv match matches clause satis ed substitutions associate satisfy substitutions represented ji aj represented output computation ji afx yields equivalent result computed eciently 
clause returns constraint fv match case substitution fv satisfy 
matches clause satis ed substitutions associate label di erent represented 
associate satisfy compute previous case 
iterators clause executed picking possible decomposition collecting substitutions satisfy nesting algorithm corresponds nesting exists decomposition hold 
clause jj executed picking possible decomposition collecting substitutions satisfy possible decomposition 
nesting algorithm corresponds nesting decompositions hold 
binder evaluation procedure iterators ji bj def ig jy aj jy bj ji jj bj def ig jy aj jy bj iterator evaluation expensive 
sons set 
iterators require sub evaluation ji aj repeated subset sons 
queries interested iterators express conditions case decomposition may contribute result ji ji ji bj contribute external union 
way formula jj decomposition ji ji ji bj gives contribution result external join 
reason cases ecient procedure ecient common cases jj 
cases jj admit similar simpli ed evaluation procedure 
operator fm jy ig de ned similarly ig holds binder evaluation procedure iterators linear cases ji bj def fm jy ig jy aj jy bj ji tj def fm jy ig jy aj ji jj bj def fm jy ig jy aj jy bj ji jj fj def fm jy ig jy aj jj operations involve number recursive evaluations linear number trees appear sons 
jj principle expensive results sub evaluations joined general expensive union case 
practice long chains joins eciently computed special cases 
example variable free ji aj join boolean conjunction 
variable free join reduces set union operands return nite constraint test equality operands return singleton constraint test operand returns nite constraint returns singleton constraint 
quanti ers de nition ji aj simply computed fv ji aj 
evaluation universal quanti cation complex problem check formula nite set substitutions constraints help 
suppose able collect set constants meaningful result query di erent depending associated just compute result constraint fk nally represented constraint de nition contains singleton constant appears sets column relation ji aj plus set fk de nition const def fm nite sg fm nite sg binder evaluation procedure quanti ers ji aj def fv nv ji aj ji aj def ji aj const kg fkg fv nv equality order add equality change set simple constraints follows 
elds simple constraint associate variable triple hv si disjoint nite subsets dom say eq di range eld satis ed substitution eq di range 
simple constraint formed properties hold dom eq dom eq di dom dom eq di dom eq eq eq di di range range equality returns constraint hfx yg hfx yg 
inequality returns constraint fyg fxg 
natural join extended constraints computed steps 
compute equivalence relation variables generated eq constraints elds equivalence class de ne follows eq di di range range intersection unsatis able range empty empty 
intersection unsatis able empty set singleton fr general negation seen negation rst pushing leaves logical formula dealing 
approach price negation pushing transforms cheap existential quanti er expensive universal iterator expensive jj 
reason useful relational translation formulas translation gives optimizer freedom move negation convenient 
translation negation ji aj def ji aj constraint corresponds formula mg jg disjunctive normal form complement computed transforming disjunctive normal form follows push negation obtaining mg jg apply distributivity obtaining hl mi ng mg conjunctive formula mg compute corresponding simple constraint satis able put result 
approach requires analyze exponential number conjunctive formulas priori may return constraint exponential size 
solve problem rst de ne notion partitioned disjunctive formula describes disjunctive formula disjunctive complementation introduce exponential explosion show transform constraint form 
de nition set formulas partition false partition ng true partition proposition partition ng ng proof rst observe partition logical equivalences hold ng ng ng ng partition equivalence implies ng ng ng ng ng complementation partitioned constraints constraint variables partitioned shape fr simple constraint variable fr fr fr fv subsection show transform arbitrary constraint partitioned 
constraint variables partitioned constraints singleton zero ary constraint zero ary constraint complement partitioned constraint recursively computed follows 
partitioning constraints show partition arbitrary constraint 
rst observe semantics constraint change substitute simple constraint set simple constraints call splitting transformation merging inverse 
consider generic constraint fr variable written represent part refers variables fv set labels appear rst build constraint substituting constraint set feg pg constraint equivalent simple constraints shape feg shape rewritten feg partitioned 
examples examples complement computation 
example input partitioned form complement input partitioned form complement example input fag fbg partitioned form fag fbg fa bg complement fag fbg fa bg fa bg example input fag fbg fa bg fag fb cg fcg splitting fag fbg fcg fag fa cg fag fag fcg fa cg fcg partitioning fag fbg fcg fbg fcg fag fa cg fag fcg complementing fag fbg fcg fbg fcg fag fa cg fa cg complementing fbg fcg fbg fcg fbg fcg fb cg fbg fbg complementing constraints fag fbg fbg fcg fag fa cg fag fcg evaluation recursion order evaluate recursive formulas enrich constraint algebra section new metavariable ranges functions map information trees constraints information tree evaluation functions recursive expression denotes xpoint function maps information tree evaluation function information tree evaluation function luca quale delle tre de dal 
dire del su che un sso di se tale sso non 
semantics algebraic recursion minff fm fg minff fy fg operator evaluated repeated application reduction rule fy course recursion operator allows write expressions evaluation diverges 
de ne translation recursive guarded formulas formulas subformula appears inside context 
guarded formulas expressive express regular path expressions previous translation modi ed little nite trees greatest xpoints coincide guarded formulas 
informally evaluate guarded recursive formula evaluate ji reduces ji recursively evaluate ji 
precisely recursive formulas translated follows 
evaluate xpoint operator coincide guarded formulas nite trees 
binder evaluation recursive operators ji def ji aj def jy af ji aj def jy af evaluation queries extend evaluation procedure queries 
select query binder evaluated respect substitution yields constraint representing possibly nite set extensions substitution 
constraint nitary evaluated substitution results collected failure raised 
algorithm evaluates nested query select nested loop technique 
practice ecient methods easily devised 
notation stands tree variable dom substituted formula label variable dom substituted 
formula de ned 
query evaluation jx def def jq def jqj jq def jqj jf def jqj select qj def nitary jqj fail query select evaluated binding returned evaluation return nite number bindings 
safety conditions de ne notion restricted queries restricted query guaranteed safe generate nite answer 
simplicity consider comparison recursive operators 
de ne predicates binds binds rst implies informally nite second implies binds binding predicate de ned follows 
second column table redundant 
binding predicate jj jj de ne function binds binder set variables bound input substitution returns set variables guaranteed bound binder evaluated 
variables bound binder evaluation binds def fv fail talk query safety 
query safe respect input substitution safe dom holds 
select query safe safe evaluate select part substitutions produced part 
query safe free variable bound input substitution 
query safety respect input substitution binds safe select safe binds safe safe safe safe safe safe safe safe safe safe safe claim jf aj nitary jf aj nitary claim binds dom jf nitary claim binds dom jx aj nitary claim safe dom de ned extensions xml attributes attribute node di erent subtree may add speci syntax language terms attributes information tree empty tree information tree union attr edge labeled put top tree attributes attr attr attributes attribute attr attribute value add corresponding piece syntax queries formulas 
abbreviates 
querying order introduce special attribute pos integer value model ordered terms 
example article alpha zeta rst second author may modeled tree article author pos alpha author pos zeta 
query returns book rst authors replaces results db bib book title select book title author pos select author author pos true select author output order may explicitly set manipulating pos attribute may expressed adding order clause select operator 
clear features may interact 
comparisons related proposals described logic query language evaluation mechanism 
tree logic compared standard rst order formalizations labeled trees 
terminology abs encode labeled tree relation ref source oid label destination oid 
nodes tree oids appear source destination columns tuple relation represents edge label label 
course relation represent graph tree 
represents forest destination key relation exists strict order relation oids tuple source precedes destination 
order formulas de ned relation constitute logical language describe tree properties 
trees represented oid root 
say example tree saying ref ref ref di erences approach 
logic modal means formula speci subject part database currently queried 
order logic implicit subject name subject 
example modal formula implicitly describes current tree translation rst order logic gives name tree describes 
modal merit fault merely di erence 
modality easier describe just tree structure dicult describe relationship di erent trees 
modality key simpler evaluation algorithms 
modal case implicit subject taken named root database information ows matching variables 
classical relational logic xed direction ow information variables 
probably reasons current query languages base binding mechanism pattern matching followed ltering logic 
modal nature logic allows base binding logic 
apart modality feature ambient logic fundamental operators deal existence step paths decomposition trees rst order approach describes terms step paths ref 
decomposition powerful operator purposes easy describe record partially contains possibly elds completely contains complete descriptions dicult path approach possible bind variable rest record title title 
query language described derives essential select structure set theoretic comprehension sql tradition similar query languages semistructured data struql ffls ffk lorel aqm gmw extent yatl 
depth comparison xml ql yatl lorel languages carried reported result languages possess striking similarities 
analysis thirteen typical queries expressed languages plus xql 
wrote queries ghe result comparison thirteen queries tql expression similar corresponding xml ql couple exceptions 
notion skolem functions tql plan add related notion graph oriented versions language 
xml ql skolem functions couple cases 
queries expressed ghe skolem functions expression dicult 
second xml ql general way expressing universal quanti cation problem shows query section 
query asks pairs books set authors complex express xml ql dicult tql 
related class queries simpler express tql related non existence paths nd papers title nd papers author ghelli 
lorel problems allows universal quanti cation 
important feature tql clean semantic interpretation pays ways 
semantics easier prove correctness completeness speci implementation 
simpli es task proving equivalences di erent logic formulas queries 
knowledge formal semantics de ned yatl 
semantics lorel de ned looks quite involved extensive coercions 
evaluation technique propose related proposals eld constraint databases kan rev 
constraint algebra de ne studied 
extensions de ned query language semistructured data ambient logic 
modeled semistructured collection labeled tree techniques may extended collections modeled labeled graphs 
currently working extension preliminary results encouraging 
study exploited small subset ambient logic 
ambient logic calculus er operators specify perform tree updates car 
possible connections semistructured data updates explored 
way plan explore connections type systems de ned ambient calculi typing needs semistructured data 
implementation tql currently carried pisa university 
exploiting implementation model described 
andrew gordon contributed useful suggestions 
giorgio ghelli partially supported dell universit della ricerca scienti ca tecnologica project data microsoft research workgroup 
abs abiteboul buneman suciu 
data web relations semistructured data xml 
morgan kaufmann san mateo ca october 
ahv abiteboul hull vianu 
foundations databases 
addison wesley reading ma 
aqm serge abiteboul quass jason mchugh jennifer widom janet wiener 
lorel query language semistructured data 
international journal digital libraries 
bdhs buneman davidson hillebrand suciu 
query language optimization techniques unstructured data 
proc 
acm sigmod international conference management data sigmod montreal quebec canada pages june 
sigmod record june 
car cardelli 
semistructured computations 
proc 
seventh intl 
workshop data base programming languages dbpl 
available www luca demon uk 
sophie cluet claude delobel simon 
mediators need data conversion 
proc 
acm sigmod international conference management data sigmod 
cg cardelli ghelli 
query language semistructured data ambient logic 
available www di unipi ghelli papers html 
cg cardelli gordon 
mobile ambients 
proceedings fossacs volume lncs pages 
springer verlag 
accepted publication theoretical computer science 
cg cardelli gordon 
anytime modal logics mobile ambients 
proc 
principles programming languages popl 
acm press january 
deutsch florescu fernandez levy suciu 
query language xml 
proc 
eighth international world wide web conference 
ffk mary fernandez daniela florescu kang alon levy dan suciu 
catching boat strudel experiences web site management system 
proc 
acm sigmod international conference management data sigmod pages 
ffls fernandez florescu levy suciu 
query language processor web site management system 
proc 
workshop management semistructured data tucson 
mary fernandez sim eon wadler cluet deutsch florescu levy maier mchugh robie suciu widom 
xml query languages experiences exemplars 
available www db research 
com user simeon xquery ps 
ghe ghelli 
tql xml query language 
available www di unipi ghelli papers html 
gmw goldman mchugh widom 
semistructured data xml migrating lore data model query language 
proc 
workshop web data bases webdb pages 
kan kanellakis 
tutorial constraint programming database languages 
acm editor pods 
proceedings fourteenth acm sigact symposium principles database systems pods san jose california may volume proceedings acm sigact sigmod sigart symposium principles database systems pages new york ny usa 
acm press 
papakonstantinou molina widom 
object exchange heterogeneous information sources 
proc 
eleventh ieee int 
conference data engineering birmingham england pages 
rev peter revesz 
safe query languages constraint databases 
acm transactions database systems march 

