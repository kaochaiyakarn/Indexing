paradyn parallel performance measurement tools barton miller mark callaghan jonathan jeffrey hollingsworth bruce karen krishna tia bart jon krishna cs wisc edu computer sciences department university wisconsin madison dayton street madison wi paradyn performance measurement tool parallel distributed programs 
paradyn uses novel technologies scales long running programs hours days large node systems automates search performance bottlenecks 
provide precise performance data procedure statement level 
paradyn dynamic notion performance instrumentation measurement 
unmodified executable files placed execution performance instrumentation inserted application program modified execution 
instrumentation controlled performance consultant module automatically directs placement instrumentation 
performance consultant defined notion performance bottlenecks program structure associate bottlenecks specific causes specific parts program 
paradyn controls instrumentation overhead monitoring cost data collection limiting instrumentation user controllable threshold 
instrumentation paradyn easily configured accept new operating system hardware application specific performance data 
provides open interface performance visualization simple programming library allow visualizations interface paradyn 
paradyn gather performance data terms high level parallel languages data parallel fortran measure programs massively parallel computers workstation clusters heterogeneous combinations systems 

paradyn tool measuring performance large scale parallel programs 
goal designing new performance tool provide detailed flexible performance information incurring space time overhead typically associated trace tools 
paradyn achieves goal dynamically instrumenting application automatically controlling instrumentation search performance problems 
dynamic instrumentation allows defer inserting instrumentation executing program moment needed removing longer needed supported part department energy de fg er 
office naval research nsf ccr nsf infrastructure cda 
hollingsworth supported part arpa graduate fellowship high performance computing 
paradyn performance consultant decides insert instrumentation 

guiding principles characteristics describe principles guided design paradyn 
description summarize features paradyn incorporate principles 
scalability able measure long running programs hours days large node parallel machines large data sets 
correctness debugging test program small data sets confident program correctly larger data sets 
performance tuning case 
seen real application programs program data set size increase different resources saturate bottlenecks 
able measure large programs hundreds modules thousands procedures 
mechanisms instrumentation program control data display gracefully handle large number program components 
paradyn uses dynamic instrumentation instrument parts program relevant finding current performance problem 
starts looking high level problems total synchronization blocking blocking memory delays program 
small amount instrumentation inserted find problems 
general problems instrumentation inserted find specific causes problem 
detailed instrumentation inserted classes problems exist 
automate search performance problems approach performance measurement try identify parts program consuming resources direct programmer parts 
automating search performance information enables paradyn dynamically select performance data collect collect 
goal tool identify parts program limiting performance require programmer 
performance consultant module paradyn defined notion called search model types performance problems programs various components contained current program 
performance consultant uses information search model guide placement modification dynamic instrumentation 
provide defined data abstractions simple data abstractions unify design performance tool simplify organization 
paradyn uses important abstractions collecting communicating analyzing presenting performance data metric focus grids time histograms metric focus grid lists vectors information 
vector list performance metrics cpu time blocking time message rates rates number active processors 
second vector list individual program components selection procedures processor nodes disks message channels barrier instances 
combination vectors produces matrix metric listed program component 
elements matrix single values current value average min max time histograms 
time histograms fixed size data structures record behavior metric varies time 
time histogram important tool recording time varying data long running programs 
support heterogeneous environments parallel computing environments range clusters workstations massively parallel computers 
heterogeneity arises processor architectures sparc vs pa risc operating systems osf vs solaris vs sunos programming models native operating system functions vs pvm vs programming languages vs hpf vs pc 
isolating different dimensions abstractions performance tool simplify porting 
example adding support pvm requires know name new communication process creation operations underlying support unix operating system chip architecture programming language support stays 
paradyn works domains measures programs running heterogeneous combinations domains 
current hardware platforms include tmc cm sparcstation including multiprocessors hp pa risc operating systems include tmc sunos solaris hp ux programming models include unix ipc solaris thread synchronization primitives cm cm fortran cm rts pvm 
support high level parallel languages users high level parallel programming languages need accurate performance information relevant source code 
programs experience performance problems lowest levels hardware software systems programmers need ability peel back layers abstraction examine low level problems maintaining high level source code 
paradyn supports facility allowing high level language programmers view performance program terms high level objects arrays loops data parallel fortran terms primitive objects nodes messages 
open interfaces visualization new data sources graphical tabular displays important mechanisms understanding performance data 
projects paragraph pablo developed large collection visualization routines 
want tool leverage existing visualizations 
paradyn set standard visualizations time histograms bar graphs tables profiles provides simple interface incorporate displays sources 
equally important ability incorporate new sources performance data cache data processor network traffic network interfaces paging activity operating system 
paradyn instrumentation configurable performance quantity mapped program address space 
including new sources data paradyn requires change configuration file 
streamlined impediments new tool 
installation require fetching files ftp running tool need special system privileges modify system directories 
best case users modify source program special compiling techniques 
dynamic instrumentation paradyn avoids need modify recompile re link application 
characteristic shared implementations binary rewriting qpt pixie 
dynamic instrumentation allows attach running program parallel database server monitor performance interval detach 

dynamic performance measurement paradyn differs previous performance measurement tools program instrumentation performance evaluation done execution application program 
done execution comparing paradyn previous tools raises questions 
questions include transient effects 
brief periodic effects 
program run long time 
answers questions observation measuring long running programs execution times hours days 
take seconds insert new instrumentation start evaluating data little chance interesting behaviors missed 
program runs hours minute transient operation total execution time interesting performance tuning 
program repeatedly performs brief second operation detect behavior cumulative effect brief operations large 
short running programs finish paradyn chance isolate performance problem 
case paradyn save state search performance problems re run program complete search 
section describe measurement methodology overview structure paradyn tools 
section presents mechanism dynamic instrumentation implementation details 
section describes paradyn performance consultant automated module controls dynamic instrumentation searches performance problems 
section describe paradyn open interface visualizations 
provide better feel paradyn section includes examples measurement sessions real application programs 
conclude section 
system overview section provides overview paradyn system 
basic abstractions paradyn describe basic components 

basic abstractions paradyn built simple powerful data abstractions 
abstractions unify internal structure system giving users consistent view system data presents 
abstraction metric focus grid 
metrics time varying functions characterize aspect parallel program performance examples include cpu utilization memory usage counts floating point operations 
focus specification part program expressed terms program resources 
typical resource types include synchronization objects source code objects procedures basic blocks threads processes processors disks 
resources separated different hierarchies representing class objects parallel application 
example resource hierarchy cpus containing processor 
focus contains components resource hierarchy 
example focus synchronization objects accessed single procedure processor 
combination list metrics list foci forms matrix called grid paradyn containing value metric focus 
performance consultant visualizations receive performance data specifying metric focus grids 
paradyn stores performance data internally data structure called time histogram 
time histogram fixed size array elements buckets store values metric successive time intervals 
parameters determine granularity data stored time histograms initial bucket width time interval number buckets 
parameters supplied higher level consumers performance data 
program runs longer initial bucket width times number buckets double bucket width re bucket previous values 
change bucket width time interval cause corresponding change sampling rate performance data reducing instrumentation overhead 
process repeats time fill buckets 
result rate data collection decreases logarithmically maintaining reasonable representation metric time varying behavior 

components system paradyn consists main paradyn process paradyn daemons zero external visualization processes 
central part tool multi threaded process includes performance consultant visualization manager data manager user interface manager 
communication threads defined set interfaces constructed allow module request service module 
shows paradyn architecture 
data manager handles requests threads data collection delivers performance data paradyn daemon requesting thread maintains distributes information metrics resource hierarchies currently defined application 
user interface manager thread developed tcl tk provides user visual access system main controls performance data 
performance consultant controls automated search performance problems requesting receiving performance data data manager 
visualization manager starts visualization processes visualization thread created paradyn external visualization process started 
job visualization thread handle communication external visualization process paradyn modules 
paradyn daemon contains platform dependent parts paradyn 
instrumentation manager implements dynamic instrumentation responsible inserting requested paradyn performance consultant paradyn daemon application processes visualization manager visi thread visi thread manager user interface manager data metric manager instrumentation manager metric manager instrumentation manager application processes histogram visualization tabular summary table visualization cpu messages 
overview paradyn structure 
dotted ovals threads solid ovals processes 
instrumentation executing processes monitors 
interface paradyn process paradyn daemon supports main functions process control performance data delivery performance data requests delivery high level language mapping data 
daemon services requests paradyn process control performance data delivers performance data application paradyn 
encapsulating platform dependencies daemons remote procedure call interface easily handle heterogeneous applications 
currently support daemons various versions unix tmc cm networks workstations running pvm 

configuration files paradyn uses configuration language paradyn configuration language pcl describe architecture operating system environment language dependent characteristics applications platforms 
pcl allows users create new metrics instrumentation incorporate new visualizations specify alternate paradyn demons set various display analysis options specify command lines starting applications 
details metric definition part pcl section 
default pcl file describes paradyn basic metrics instrumentation visualizations daemons 
user provide additional pcl file personalized settings options 
users create application specific pcl file describes details application run 

dynamic instrumentation paradyn uses dynamic instrumentation instrument parts program relevant finding current performance problem 
dynamic instrumentation defers instrumenting program execution dynamically inserts alters deletes instrumentation program execution 
section describes dynamic instrumentation interface implementation dynamic instrumentation collects mapping information high level language views users may describe metrics 
section discuss paradyn performance consultant controls dynamic instrumentation find performance problems 

dynamic instrumentation interface requests dynamic instrumentation terms metric focus grid described section 
paradyn daemon translates instrumentation requests instructions inserted application 
translation step process 
metric focus requests translated machine independent abstractions metric manager 
second machine independent representation converted machine instructions instrumentation manager 
counters timers types instrumentation inserted application 
counters integer counts frequency event timers measure amount time spent performing various tasks wall time process time units 

points primitives predicates points primitives predicates provide simple machine independent set operations building blocks dynamic instrumentation 
points locations application code instrumentation inserted 
primitives simple operations change value counter timer 
predicates boolean expressions guard execution primitives essentially statements 
inserting predicates primitives correct points program wide variety metrics computed 
points currently available system procedure entry procedure exit individual call statements 
points extended include basic blocks individual statements 
provide primitives set counter add counter subtract counter set timer start timer timer 
predicates simple conditional statements consist expression action 
expression computed counters constants parameters procedure procedure return value numeric relational operators 
example primitives predicates combined create metrics shown 
computes amount time spent sending messages behalf procedure foo descendents 
counter keeps track foo stack incremented entry decremented exit foo 
value predicate control timer primitives called entry exit sendmsg 
foo active primitives executed 
foo 
sendmsg dest ptr cnt size 

example metric computation 
translation metric focus specifications points primitives predicates described metric definitions contained pcl configuration files 
definitions simplify addition new metrics porting paradyn new systems user customization 
provide standard library metric descriptions users tools add library 
metric descriptions pcl consist definitions constraints 
metric definitions resource constraints generic apply platforms specific platform programming model 
metric definition template describes compute metric different resource combinations 
consists series code fragments create primitives predicates compute desired metric 
need able compute metric combination resource constraints 
metric definitions compact modular divide metric definition parts base metric series resource constraints 
base metric defines metric computed entire application procedures processes processors 
resource constraint defines restrict base metric instance resource resource hierarchies 
resource constraints usually translate instrumentation predicate 

instrumentation generation instrumentation manager encapsulates architecture specific knowledge locates allowable instrumentation points performs final translation points primitives predicates machine level instrumentation 
paradyn initially connected application process instrumentation manager identifies potential instrumentation points scanning application applications binary image 
procedure entry exit procedure call sites detected noted points 
paradyn connected application instrumentation manager waits requests daemon metric manager translates small code fragments called trampolines inserts program 
types trampolines base trampolines mini trampolines 
base trampoline point active instrumentation 
base trampoline inserted program replacing machine instruction point branch trampoline relocating replaced instruction base trampoline 
base trampoline slots calling mini trampolines relocated instruction 
mini trampolines contain code evaluate specific predicate invoke single primitive 
mini trampoline primitive predicate point 
creating mini trampoline requires generating appropriate machine instructions primitives predicates requested metric manager 
necessary instructions assembled instrumentation manager transferred application process variation unix ptrace interface 
generated code includes appropriate register save restore operations 

data collection instrumentation inserted application data begins flowing back higherlevel clients 
current value active timer counter periodically sampled transported paradyn daemon data manager 
note instrumentation keeps track precise value performance metric sampling rate determines paradyn sees new value 
samples counters timers paradyn basic data type able easily integrate performance data external sources 
example operating systems keep variety performance data read user processes examples include statistics virtual memory cpu 
machines provide hardware counters source useful performance information 
example ibm power cray mp sequent symmetry systems provide detailed counters processor events 
data external sources treated identically paradyn instrumentation 
external data constrained way performance metrics relate back specific parts program 
example way read cumulative number page faults taken process read counter procedure call approximate number page faults taken procedure 

internal uses dynamic instrumentation resource discovery important dynamic instrumentation 
resource discovery process determining resources application information build resource hierarchies 
resource information application determined statically paradyn connected application example point know procedures called types synchronization libraries linked application 
aspects resource discovery deferred program executing 
example information files read written execution determined files accessed 
collect runtime resource information instrumentation inserted application program 
insert instrumentation technique normal instrumentation record file names open requests 
important dynamic instrumentation collection dynamic mapping information high level languages 
paradyn daemons collect mapping information statically sources symbol tables parallel languages defer mapping data structures processor nodes runtime languages change data mappings execution 
cases dynamically instrument runtime mapping routines paradyn daemons send information data manager 
data manager uses information support language specific views performance data described section 

search model performance consultant goal paradyn assist user locating performance problems program performance problem part program contributes significant amount time execution 
single execution program may contain problems 
assist finding performance problems paradyn defined model called search model organizes information program performance 
performance problems searching space defined paradyn performance consultant module uses search model automate searching performance problems 
conduct search performance consultant uses data gathered dynamic instrumentation 
describe search model detail describe performance consultant automates searching paradyn 

search model search model abstracts aspects parallel program affect performance answering questions application performing poorly performance problem problem occur 
answer question system includes hypotheses potential performance problems parallel programs 
collect performance data test problems exist program 
answering question isolate performance problem specific program resource disk system synchronization variable procedure 
identify problem occurs try isolate problem specific phase program execution 
finding performance problem iterative process refining answers questions 

axis performance question asked programmers application running slowly 
axis represents broad types problems cause parallel program run slowly 
potential performance problems represented hypotheses tests hypotheses represent fundamental types performance problems occur parallel programs independent program studied algorithms uses 
example hypothesis program synchronization bound 
hypotheses represent activities universal parallel computation small set couple dozen provided tool builder cover performance problems 
hypotheses refined precise hypotheses 
dependence relationships hypotheses define search hierarchy axis 
dependencies form directed acyclic graph searching axis involves traversing graph 
shows partial axis hierarchy current hypothesis 
hypothesis reached concluding exists program 

sample axis hypotheses 
shows portion axis representing types synchronization bottlenecks 
shaded node shows hypothesis currently considered 
tests boolean functions evaluate validity hypothesis 
tests expressed terms threshold metrics calculated instrumentation manager synchronization blocking time greater execution time 

axis second performance question programmers ask part application running slowly 
axis represents classes resources parts program performance problem lies 
searching axis classifies type performance problem searching axis pinpoints problem specific program components 
example search may show program synchronization bound subsequent search may isolate hot synchronization object thousands program 
axis represents different foci measured 
hierarchy axis multiple levels leaf nodes instances resources application 
resource hierarchy refined independently 
trees represent sample resource hierarchies 
axis display real application shown 
root leftmost hierarchy 
level contains types synchronization semaphore message spinlock barrier 
spinlock barrier nodes individual locks barriers application 
children message node types messages 
children semaphore node semaphore groups application 
semaphore group individual semaphores 
individual locks individual barriers group group individual message cpus semaphores individual cpu semaphore barrier spinlock machine procedure tags main io main message input 
sample axis class hierarchies 
shaded nodes show current focus 
oval objects defined search model 
triangles static application rectangles dynamically runtime identified 
paradyn resource hierarchies include classes memory process shown 
different components axis may created different times 
nodes defined statically application starts application execution 
root resource hierarchy statically defined 
search model represent resources specific high level parallel programming languages representing high level language abstraction axis 
language specific axis contains resource hierarchies correspond resources language 
example data parallel fortran axis include data parallel array hierarchy 
high level language resource may map collections resources base level 
maintains mappings resources different axes 
example builds mappings data parallel arrays understood programmers details related message communication programmers ignore 
mappings allow translate focus higher level corresponding focus lower level 
separating programming abstractions different axes allows searches concentrate abstraction time 
allows tools take advantage language abstractions explore search space 
furthermore performance problem refined high level abstraction programmer may peel back layers abstraction continue search lower level 
low level search starts focus generated applying mappings current higher level focus 

axis third performance question programmers may ask time application run slowly 
programs distinct phases execution axis represents periods time different types performance problems occur 
example simple program phases execution initialization computation output 
single phase program performance tends uniform 
program enters new phase behavior performance problems change radically 
result decomposing program execution phases provides convenient way programmers understand performance program 
searching axis involves testing hypotheses focus different intervals time application execution 
full description searching axis scope 

performance consultant performance consultant module paradyn discovers performance problems searching space defined search model 
ability automatically search performance problems key feature performance consultant 
refinements axes requiring user involved 
determine list possible refinements considering children current nodes axis order list internally defined hints 
select refinements try ordered list 
selected refinement true consider item ordered refinement list 
paradyn conduct fully automatic search allow user individual manual refinements direct search combine methods 
feedback search process currently underway provided search history graph 
search history graph records refinements considered axes result testing refinements 
shows actual display sample application programs 
node graph represents single step search process refinement axes 
nodes colored current state particular hypothesis represents currently tested pink tested true blue tested false green tested orange 
arcs indicate refinements color coded particular axis refinement refinements axis blue refinements axis purple 
node label indicates particular node axis explored example refinements considered root node include node axis 
step search limited single refinement complete focus search space represented node determined reading path root node node consideration 
useful represents refinements tried rejected possible tried 
current path exploration easily determined blue true nodes root leaf 
display options de emphasize node types smaller font size 
follow blue nodes see search discovered program cpu bound procedure module new machine partition 

open visualization interface paradyn provides simple library remote procedure call interface access performance data real time 
visualization modules visi paradyn external processes library interface 
performance visualizations implemented visi 
paradyn currently provides visi time histograms strip plots bar charts tables examples displays section 
difficult build visi provide data commercial data visualization packages avs incorporate visualization displays systems paragraph pablo 
visi interface library provide performance data uses evaluating performance predicates application steering logging performance data experiment management 
user selects visi menu paradyn provides menus select foci program components metrics display 
visi started sent initial list foci metrics display 
visi needs add delete foci metrics calls procedure visi library handles menus selection 
result visi isolated details paradyn internal structure user interface 
selection list performance metrics list foci easily pictured dimensional array basically table 
visi library provides class called datagrid visi programmer interface performance data 
datagrid appears visi programmer array array indexed metric focus id element datagrid single value representing current maximum average value time histogram representing time varying behavior metric 
visi requests performance data paradyn request sent data manager 
requested data collected data manager send current values visi provide continuous updates additional data collected 
requested data collected data manager ask instrumentation manager start collecting 
visi longer needs data part system instrumentation data removed 
visi accesses performance data datagrid standard overloaded array operations 
optionally visi library notify visi potentially interesting events occur 
events include arrival new data samples disabling currently selected focus metric pair fold event associated time histograms new phase created axis 
visi programmer register callback procedure events 
example time histogram display fold event means curves displayed redrawn doubling time interval axis tabular display displaying single values focus metric ignore events 

examples paradyn study parallel distributed sequential applications 
section demonstrate paradyn basic features show programmers paradyn find performance problems illustrate problems visualization displays 
draw examples measurements real applications graph coloring program branch bound search linear programming optimization code uses domain decomposition method 
application programs written people outside paradyn project intended solve real application problems ran tmc cm node partition 
ran applications paradyn performance consultant able discover isolate cpu bottleneck coloring application discover multiple problems synchronization problems cpu bottleneck linear programming code 
application show performance consultant displays illustrate performance problem 
shows paradyn main window 
stage programmer started application paradyn displaying axis resource trees nodes exhaustive pd pn exhaustive pd pn new barrier process procedure 
main paradyn control window trees selected display 
paradyn ready accept user commands control application display visualizations performance data invoke performance consultant find bottlenecks 
user may start application times desired execution 
stopping application stops flow data visualizations stops performance consultant 
axis display shows resource hierarchy 
select particular focus user selects node resource hierarchy 
example user selects root procedure hierarchy leaf node machine hierarchy requested procedures particular machine 
display visualization metric focus user simply selects focus axis display selects visualization start visual menu 
paradyn prompt user list metrics start visualization 
alternate high level language axis views displayed separate windows shown 
paradyn uses static dynamic mapping information map focus base view 
user selects focus view paradyn automatically highlights corresponding resources base view 
typically users start performance consultant automated search wait paradyn find performance bottleneck 
performance consultant running displays window similar shown 
top row performance consultant window contains pull menus display configuration 
middle area reports status search description current bottleneck indication previously true bottleneck longer notice new set refinements considered 
largest area display search history graph 
nodes graph colored indicate state corresponding hypotheses discussed section 
nodes added new refinements change color reflect current state search bottlenecks 
bottom window contains buttons controlling search process 

graph coloring application example demonstrates paradyn analysis graph coloring program called matchmaker 
match maker branch bound search program central manager brokers idle processors 
uses cm explicit message passing library 
program written contains lines code files 
performance consultant discovered initial cpu bottleneck match maker seconds execution 
shows hypotheses foci considered performance consultant 
starting root node performance consultant considered types bottlenecks synchronization cpu virtual memory instrumentation 
point identified cpu bottleneck 
step considered refinements cpu bottleneck confirmed program cpu bound 
performance consultant refined cpu bottleneck specific module program new performance consultant isolated bottleneck procedure module 
problem diffused processes performance consultant refine bottleneck 
displayed visualization bottleneck graph coloring application time histogram display cpu time procedure program 
time histogram display verifies responsible large percentage application cpu time 
exhaustive pd pn exhaustive pd pn exhaustive pd pn exhaustive pd pn exhaustive pd pn exhaustive pd pn spinlock semaphore barrier exhaustive initiate exhaustive semaphore exhaustive stack new lazy array new manager new root 
performance consultant search graph coloring application 
visualization bottleneck graph coloring application 
message passing optimization application second application called uses domain decomposition method optimizing large scale linear models 
application consists lines code programming language sequential constrained optimization library package called minos 
un instrumented runs hour seconds node cm partition 
paradyn bottlenecks program 
initialization phase synchronization bottleneck nodes initialized 
bottleneck lasted minute refined performance consultant 
second cpu bottleneck module minos part initial computation phase 
third performance consultant located key synchronization bottleneck persisted rest program execution 
search history graph isolation third bottleneck appears 
pd pn pd pn pd pn pd pn spinlock semaphore pd pn pd pn pd pn spinlock semaphore main iter report startup heuristic active node dax sparse sparse check termination read obj minos part minos stubs spinlock semaphore barrier barrier root 
performance consultant search application performance consultant refinements locating synchronization bottleneck 
discovered synchronization bottleneck program 
second identified bottleneck due opposed short synchronization operations performed frequently 
third isolated synchronization bottleneck file fourth refined bottleneck procedure active node 
trivially isolated problem single partition 
partition refinement labeled name partition manager 
performance consultant attempted isolate bottleneck particular processor node refinement failed bottleneck diffused processors 
gain better understanding synchronization problem displayed bar chart showing amount time spent synchronizing application 
display shows synchronization time program synchronization time spent node 
display shows 
bar chart showing synchronization time synchronization bottleneck diffused nodes refined 

paradyn parallel performance measurement tools incorporate novel technologies 
dynamic instrumentation offers chance significantly reduce measurement overhead search model embodied performance consultant provides means control instrumentation 
synergy technologies results performance tool automatically search performance problems large scale parallel programs 
paradyn support high level parallel languages lets programmers study performance programs native abstractions language 
addition provide detailed time varying data program performance 
result programmers large applications paradyn easily small prototype application 
uniform data abstractions metric focus grid time histogram allow simple interfaces paradyn provide easy understand interfaces program 
paradyn working system remain directions growth 
years expanding new machine environments cray new high level languages hpf sparse matrix languages new problem domains application steering 

acknowledgments authors sherry initially implemented bar chart visualization authors applications study gary graph coloring 


ball larus optimally profiling tracing programs th acm symposium principles programming languages albuquerque nm january pp 


heath visualizing performance parallel programs ieee software sept 
hollingsworth miller integration application system metrics parallel program performance tool acm sigplan notices symposium principles practice parallel programming april pp 


hollingsworth miller dynamic program instrumentation scalable performance tools scalable high performance computing conf knoxville 

hollingsworth miller dynamic control performance monitoring large scale parallel systems th acm international conf 
supercomputing tokyo july pp 


languages programmer guide mips computer systems december 

ousterhout toolkit tcl language proc 
usenix winter conference january 

reed noe roth shields schwartz scalable performance analysis pablo performance analysis environment scalable parallel libraries conference ieee computer society 

upson jr schlegel dam application visualization system computational environment scientific visualization vol 
july 

