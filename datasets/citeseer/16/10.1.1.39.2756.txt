fold seasons tim sheard leonidas fegaras pacific software research center department computer science engineering oregon graduate institute science technology von neumann drive beaverton cse ogi edu generic control operators fold generated algebraic type definitions 
class types techniques applicable generalized algebraic types definable languages miranda ml mutually recursive sums products tuples function types 
useful generic operators applicable type class described 
normalization algorithm automatically calculates improvements programs expressed language folds described 
reduces programs expressed fold exclusive control operator canonical form 
generic promotion theorem algorithm facilitated explicit structure fold programs analysis phase search implicit structure 
canonical programs minimal sense contain fewest number fold operations 
property normalization algorithm important applications program transformation optimization theorem proving 
addition generic promotion theorem identified operators 
hoped theorems basis normalization algorithms operators 
argued functional languages important support forms modularity difficult support languages 
malcolm meijer fokkinga paterson cockett programming language charity suggested higher level modularity abstraction may obtained generic control structures capture version appear proceedings conference functional programming computer architecture :10.1.1.41.125
copenhagen june 
tim sheard supported part tektronix leonidas fegaras supported contract arpa order number darpa 
patterns recursion large class types uniform way 
important reasons ffl abstraction 
allows specification algorithms independent type data structures operate control structure algorithm generated datatype 
ffl genericity 
allows statement proof generic theorems 
manner theorem stated proved applied different concrete instances 
ffl structure 
programming recursive definitions higher order functions powerful technique impose structure form programs may expressed 
desire structure motivated reasons structured programming methodology imperative programs motivated larger 
structure facilitate understanding maintainability paradigm functional programs target transformation optimization techniques 
techniques generally search implicit structure programs validate particular transformations 
structure explicit implicit job transformation system easier 
important operators widely applicable possible transformation techniques exploiting operators developed contribution fold ffl operators previously restricted simple sums products datatypes fact general 
extend control structures mutually recursive sums tuples function types 
ffl second general laws operators ad hoc way show laws support calculation program transformation methods 
introduce normalization algorithm automatically calculates improvements programs expressed language operators 
reduces programs expressed fold exclusive control operator canonical form 
canonical programs minimal sense contain fewest number fold operations 
normalization algorithm exploits explicit structure fold programs 
programs form transformed fully automated tools 
canonical programs minimal normalization algorithm important applications program transformation optimization theorem proving 
example ffl automation unfold simplify fold method intervention explicit laws 
addition eureka steps necessary folding function call incorporated generalization part normalization algorithm 
ffl automation techniques deforestation fusion class fold programs :10.1.1.30.9032:10.1.1.28.6971
techniques remove unnecessary intermediate data structures produced nested calls 
ffl automation simple form partial evaluation 
parameter fold term instantiated fold terms example piece data constant ground term constructed wholly constructors normalization algorithm reduce program canonical form specific instantiations furthermore paths original program reachable current data removed resulting program 
ffl theorem proving 
equality programs checked reducing canonical form comparing results 
section review meijer :10.1.1.41.125
introducing different notation originates hagino extended cockett 
feel notation ideas accessible functional programmers 
conclude section notation formally define familiar fold operator simple algebraic types 
sections extend notation cover complete set types definable languages miranda ml extending cover mutually recursive products function types 
section define term language fold control structure introduce reduction algorithm prove reduces fold programs canonical form 
example reduction described 
sections notation define number patterns recursion various levels detail 
pattern accompanied generic promotion theorem 
section briefly compare previous results 
section conclude discuss 
background section review previous introduce alternative notation facilitate extension 
simple types type definitions considered section simple sums product types defined recursive equations form ff ff delta delta delta cn tn tn mn ff ff denote type variables names value constructor functions type variables set ff ff instantiations sums products types including uniform type 
mutually recursive types types tuples function types allowed 
lift restrictions sections example simple sums products type definitions boolean false true prod ff fi pair ff fi list ff nil cons ff list ff int zero succ int tree ff tip ff node tree ff tree ff bush ff leaf ff branch list bush ff functions manipulating values types pattern recursion related pattern recursion type definitions 
capture patterns turn categorical notion functor 
functors define functor really morphism part categorical functor 
property functor require fn ffi hn ffi fn ffi hn may easily verified definition 
definition functor associated constructor ti ff ff adic functor fp ft xi ti xi bound variables type represents function obtained rules ffk fk ff ff ft tq map tq map previously defined type ff ff defined functors map fq ffic ffi fq map fq uniform mean recursive type constructor restricted applications free type variables order appear left hand side recursive type equation 
number universally quantified type variables left hand side type equation 
example type list bush map list map list nil nil map list cons cons map list folds notation possible describe familiar fold catamorphism operator simple sums type :10.1.1.41.125
definition fold fold function ff ff defined set recursive equations constructor fold ffi ffi id idp fold fn index id identity function 
call accumulating function 
example list fold defined fold list fn fc nil fn fold list fn fc cons fc fold list fn fc examples computations defined folds copy fold list nil cons append fold list cons length fold list zero succ fold int succ theta fold int zero fold boolean false fold boolean general law applies fold functions called promotion theorem 
theorem major component automated transformation algorithm called normalization algorithm 
promotion theorem states composition function fold fold accumulating functions related accumulating functions original fold fixed equations 
normalization algorithm describe new accumulating functions calculated 
promotion theorem folds appeared literature various notations theorem fold promotion theorem oe ffi id idp ffi ffi fold fold oe proof ffi fold constructor ffi ffi fold ffi ffi ffi id idp fold definition oe ffi id idp ffi id idp fold premise oe ffi id idp ffi fold composition oe ffi id idp definition ffi oe ffi id idp shows form fold accumulating functions oe definition 
fold oe 
example promotion theorem list oe fn oe fc fold list fn fc fold list oe oe types tuples exponentials tuple type sums products type products may contain tuple types theta theta tn example association ff fi alist list ff theta fi exponential type sums products type products may contain function types fi fl 
example potentially infinite lists defined strict language exponential type follows ilist ff icons ff ilist ff unit type unique type empty tuple 
define fold sums products tuples function types need generalize functor adding rules definition 
ffi ffi id example type ilist ff ft ff ft ff ft ffi ffi id ff ft ffi fold function derived generalized functor defined sums products tuples function types particularly useful 
useful necessary restrict function type covariant may functor 
example fold ilist fold ilist fn fc fn fold ilist fn fc icons fc fold ilist fn fc ffi mutually recursive types set mutually recursive types defined set mutually recursive equations form ts ff ff ts delta delta delta ts tn tn mn tr types defined 
example consider type models simple expression language local declarations exp ff fi var ff dec ff fi exp ff fi apply exp ff fi exp ff fi dec ff fi val fi exp ff fi fun string fi exp ff fi simple case associated constructor functor mutually recursive types tr constructor ts ti ts ts adic functor ts fp ft xi ti xi bound variables type replace rule definition ff ff ft generic functions map fold defined mutually recursive types mutually recursive functions 
example map functions set mutually recursive types tr defined equations map ts ffi ts ts ffi ts fp map map tr fp 
example map exp dec map exp var var map exp map dec map exp map exp apply apply map exp map exp map dec val val map exp map dec fun fun map exp 
definition mutually recursive fold mutually recursive fold functions types tr defined set mutually recursive equations fold ts ffi ts ts ffi ts id idp fold fold tr tr tr nr tuple tuples accumulating functions 
example mutually recursive fold functions exp dec fold exp var vf fold exp lf fold dec fold exp fold exp apply af fold exp fold exp fold dec val fold exp fold dec fun fold exp vf lf af 
find ml language variables application expressions 
theorem mutually recursive fold promotion ffl oe ffi id idp id idr ffi ffi fold fold oe proof analogous theorem 
fold type tk th type set mutually recursive types tr function placed th recursive position normalization fold expressions normalization algorithm reduces fold applied fold fold applied variable 
reduced program fewer folds 
fold builds data structure improved programs build fewer intermediate data structures 
program normalization accomplished pushing outer fold accumulating functions inner fold directed promotion theorem 
generalization nested loop fusion arbitrary types outer fold pushed inside inner eliminated generalizations introduced normalization algorithm 
term language definitions assume programs typed ml style polymorphic type checker folds mutually recursive sums products types may include tuples function types 
recursive fold handled fold mutually recursive single type 
definition term language program term language form xn variable term 
term forms ffl variable bound outer lambda abstraction ffl construction tn constructor term ffl fold fold ts tr tr nr mutually recursive fold term type ts ts set mutually recursive types tr form xm variable term 
definition accumulative result variable accumulating function fold term language form xm types bound variables xm associated types tm domain corresponding constructor bound variable associated type mentions recursive types tr accumulative result variable 
example definition append append fold list cons accumulative result variable 
definition potentially normalizable program program term language potentially normalizable contain terms fold contains accumulative result variable bound outer lambda abstraction 
example term potentially normalizable consider reverse function normally defined recursion equations rev nil nil rev cons xs append rev xs cons nil expressed fold fold list nil append cons nil fold list nil fold list cons nil cons append function expanded fold second equation 
term rev potentially normalizable inner fold accumulative result variable 
definition canonical terms canonical term term ffl folds term variables ffl variables accumulative result variables 
note canonical term potentially normalizable term 
show program term language potentially normalizable transformed canonical program normalization algorithm 
normalization algorithm normalization algorithm meaning preserving transformation term term 
uses parameter ae partial function terms variables 
notation ae extends ae mapping ae gn rn extends ae mappings normalization algorithm consists parts ffl generalization normalization algorithm derives term mapped ae variable term replaced ffl application construction fold definition fold ts ts ts ts id idp fold fold length fold list zero succ length cons succ length ffl fold promotion term composition fold ts fold fold promotion theorem applied derive term fold ts oe oe oe oe oe tr oe tr nr oe computed recursively improving equation oe rm xm new variables 
case ae extended mappings terms id id gk idr xm variables rm example fold promotion theorem lists fold list fn fc fold list oe oe oe fn oe fc ae type tm oe satisfies oe tm xm xm 
order solve equation oe need transform xm term tm xm depend generalizing variable find oe generalization function ae plays role 
normalization algorithm implemented efficiently 
apply promotion theorem annotate function left part application new number 
inserting ae variables insert triple number generalization phase done checking current term annotated number ae 
way complexity normalization algorithm linear size resulting canonical term 
example program normalization normalizes composition length append length fold list zero succ append fold list fn fc ae fn fc cons need find fold list oe oe equivalent composition length append 
normalization algorithm length gives oe length fn ae length fold list zero succ oe length fc ae length length cons succ length succ length generalized composition length append fold list fold list zero succ succ note intermediate list structure append longer produced 
correctness normalization algorithm section outline proof normalization algorithm transforms potentially normalizable term canonical form 
consider folds consisting products types recursive type appear parameter parametric type 
consider types bush ff leaf ff branch list bush ff 
see definitions term language canonical forms folds form fold need rewritten folds variables 
construction apply application rule 
case fold pushed inside components construction recursive type 
fold pushed accumulators inner fold directed fold promotion theorem new mappings attached ae 
recursively applying normalization algorithm terms form variable remain 
accumulative result variable way ae extended promotion bound ae new variable generalization phase algorithm 
accumulative result variable remains folds resulting term non accumulative result variables 
necessary prove fold promotion remain old accumulative result variables improved xm form generalized leaving term oe rm 
places happen ruled ffl accumulative result variable inside nonrecursive subcomponent construction pushed inside components 
impossible ruled type considerations 
consider term cons accumulative result variable 
identity construction fold 
fold ruled imply fold term containing accumulative result variable 
note terms cons type ff 
rules identity function constructions lead circular type equations form list ff ff terms typed 
ffl accumulative result variable appears term traversed fold fold pushed inside promotion 
ruled terms potentially normalizable 
composition canonical terms potentially normalizable term reduced canonical form 
canonical term language closed composition 
patterns recursion section catalog patterns recursion appeared literature investigated authors 
derivations derive operator anamorphism unfold opposite fold operator :10.1.1.41.125
traversing object type produce result value constructs object type seed value 
describe derivations additional mechanism needed 
prime types associated type related non recursive type defined ff delta delta delta cn tn tn mn defined ff delta delta delta sn sn mn ff ff 
universally quantified type variable 
obtain right hand side equation defining variable replaces recursive occurrences ff ff right hand side equation category theory defined terms fixed point 
functional programmers accustomed writing recursive equations choose define terms examples list ff nil cons ff list ff list ff nil cons ff bush ff leaf ff branch list bush ff bush ff leaf ff branch list note map defined equations map fp fr ffi ffi fp fr functor 
note recursive map recursive 
shape possible functor definition map example map list nil nil map list cons xs cons xs function defined fold cn equations ffi injects value type ff ff ff ff type ff ff 
example list nil nil list cons xs cons xs definition derive derive function type fi ff ff template form derive ffi map id idp derive ffi function called splitting function type fi ff ff fi 
example derivation list written derive list case nil nil cons xs cons derive list xs definition list integers starting point upto derivation derive list nil cons folds terminate accumulating functions terminate possible construct derivations construct infinite values 
example infinite list starting point derivation derive list cons example splitting function returns nil derivation expands indefinitely 
theorem derive promotion theorem map id idp ffi oe ffi derive ffi derive oe proof derive ffi derive ffi ffi map id idp derive ffi ffi definition ffi map id idp derive ffi map id idp ffi oe premise ffi map id idp derive ffi ffi oe composition map ffi map id idp ffi oe definition see form derivation splitting function oe 
primitive recursion fold function type useful function general 
consider factorial function fold int fold int fz fs zero fz fold int fz fs succ fs fold int fz fs straight forward attempts capture factorial fold natural numbers fail accumulating function fs passed copy value result recursively transforming fold function accumulating functions passed original variable recursively transformed value capture straight forward manner larger class functions 
function int definition factorial terms follows pr int fz fs zero fz pr int fz fs succ fs pr int fz fs straight forward mean codomain fold simple data type function tuple 
fact pr int call function type constructor primitive recursion function paramorphism generalizes primitive recursion induction scheme natural numbers arbitrary type :10.1.1.41.125
definition primitive recursion unary primitive recursive operator type pr defined set recursive equations pr ffi ffi id idp hid pr constructor hf gi 
example list primitive recursive operator defined pr list fn fc nil fn pr list fn fc cons fc pr list fn fc promotion theorem primitive recursion slightly complex fold relationship variables recursively transformed copies appear output id idp hid pr 
theorem primitive recursion promotion oe ffi id idp hid ffi pr ffi ffi id idp hid pr ffi pr pr oe proof similar theorem 
example promotion theorem list oe fn oe pr list fn fc fc pr list fn fc pr list fn fc pr list oe oe promotion theorem justifies normalization algorithm primitive recursions 
see consider generalizing term pr list fn fc variable oe fn oe fc pr list fn fc pr list oe oe theorem resembles promotion theorem folds extend normalization algorithm folds primitive recursions seamless manner 
second order folds common computations amenable normalization traverse accumulative result variables 
recall reverse example section rev fold list nil append cons nil append fold traverses accumulative result variable functions equivalently expressed functions extra parameter acts accumulator continuation 
functions expressed second order folds called accumulating functions return functions results 
second order fold computations normalizable equivalent order computation 
example iterative version list reverse rev nil computed nil cons cons second order fold form iterative computation rev fold list cons nil see form amenable normalization 
section describe fold computations recognized automatically transformed second order counterparts normalized 
definition function binary function function associative right identity ig ig functions uncommon 
fact type zero constructor cz constructor arguments nil list zero replacement function associative zero cz left right identity 
zero replacement defined zr ffi cz zr ffi ffi id idp zr call zr zero replacement replaces zeros note zero replacement function zr expressed fold recognize zr list list append operator zr int integer addition 
definition term function set accumulative result variables 
term term language term set expressed rules 
accumulative result variable term 
term contain accumulative result variables term 
terms expression term 
definition fold fold fold fold accumulating function introduces accumulative result variables subset expressed term set example reverse function rev computed fold list nil append cons nil fold append 
simple matter syntactically recognize fold programs accumulating functions expressed zero replacement functions 
examples zero replacement functions analysis valid associative function right identity ig definition fg transformation function fg transformation terms defined follows fg accum 
result var 
fg value fg fg ffi fg transformation similar cps transformation transforms program direct style program continuation passing style 
continuation function accumulation value 
theorem fold fold oe fg ffi fold fold oe proof proved induction fold oe fold theorem follows 
example non potentially normalizable order fold functions transformed potentially normalizable second order functions rev fold list nil append cons nil fold list append nil append cons nil nil fold list cons nil flat fold tree cons nil append fold tree append cons nil nil fold tree cons nil add tips fold tree plus fold tree plus zero theorem consider folds consisting sums products types recursive type appear parameter parametric type 
consider types bush 
addition simplify notation theorem assuming accumulative result variables separated 
theorem second order promotion theorem ffi ffi oe ffi fold fold oe ffi prove theorem special case list second order folds 
types proof similar 
oe ffi ffi fn ffi ffi oe ffi ffi fc ffi fold list fn fc fold list oe oe ffi proof base case nil ffi fold list fn fc nil ffi fn oe ffi fold list oe oe nil ffi induction hypothesis ffi fold list fn fc fold list oe oe ffi induction step cons ffi fold list fn fc cons ffi fc fold list fn fc oe ffi ffi ffi ffi fold list fn fc fold list oe oe ffi fold list oe oe oe ffi oe fold list oe oe ffi fold list oe oe cons ffi fold second order fold accumulating function expressed 
call accumulating stack variable 
developed extension normalization algorithm second order promotion theorem normalizes second order folds contain folds accumulative result accumulating stack variables 
allows relaxation definition potentially normalizable allowing folds accumulating functions folds accumulating result variables accumulating function expressed function apply fg transform apply extended normalization algorithm 
sketch extended normalization algorithm expression may may potentially normalizable order fold applied potentially normalizable second order fold second order promotion theorem push accumulating function fold 
process subterm normalized rewriting accumulative result variables second order promotion theorem 
process stops applied variable 
case generalized away premise promotion theorem derive new accumulating functions 
example length rev length fold list cons nil promotion theorem computed fold list oe oe length nil fold list oe oe zero apply promotion theorem oe ffi length length ffi fn length ffi length oe assuming ffi length length ffi oe ffi length length ffi fc length ffi cons length cons length cons succ length succ ffi length oe succ length rev fold list succ zero cases application second order fold second order fold normalizes second order fold traverses accumulating stack variable case necessary apply inverse transformation fg get order fold resulting second order fold 
analogous ds transformation translates program continuation passing style program direct style 
note application function potentially improvable order fold reverse append normalized order promotion theorem 
definition inverse fg transformation inverse fg transformation second order fold fold oe defined rules ig accumulative result variable fold oe variable bound function value depend accumulative result variable 
rules define inverse transformation ffi fg id rule important transforms fold zero replacement function fold proved ffi oe fold oe fold example rev rev fold list oe oe rev nil apply promotion theorem oe ffi rev rev ffi rev oe assume ffi rev rev ffi oe ffi rev rev ffi fc rev ffi cons rev cons rev cons append rev cons nil oe append cons nil rev rev fold list append cons nil nil apply transform get fold list nil append cons nil fold list nil cons list identity function 
relationship related water series expressions 
techniques apply linear data structures lists vectors streams techniques automatically detect fuse multiple walks data structure general techniques 
related wadler deforestation 
deforestation works order treeless terms 
treeless term exactly analogous potentially normalizable term described different manner due lack structure imposed terms 
wadler observation intermediate data structures primitive types integers characters really take space developed method handle terms technique calls 
chin fusion extends wadler deforestation 
generalizes wadler techniques order programs just treeless ones recognizing skipping terms techniques apply 
applies higher order programs general 
accomplished higher order removal phase removes higher order functions program 
removed recognizable simply skipped improvement phase 
normalization algorithm needs explicit higher order removal phase 
recursive definitions higher order functions functional programming languages provide powerful mechanism specifying programs impose structure form programs may expressed 
programming small fixed set recursion patterns derivable algebraic type definitions orderly structure imposed functional programs 
structure exploited facilitate proof program properties calculate program transformations 
generalized class types techniques applicable mutually recursive products tuples function types 
described useful patterns recursion fold derive primitive recursion second order fold varying levels detail applicable type class 
addition described normalization algorithm automatically calculates normalized forms programs expressed fold sub language 
algorithm generic promotion theorem facilitated explicit structure fold programs analysis phase search implicit structure 
identified generic promotion theorems pattern recursion 
hope theorems basis normalization algorithms patterns recursion fold 
moment open problem 
problems remain 
algorithms expressed different patterns recursion 
system normalization algorithms patterns recursion useful know sufficient conditions translating algorithms pattern 
enabling improvement terms normalizable pattern normalizable 
chin 
safe fusion functional expressions 
proc 
acm conference lisp functional programming san francisco ca june 
cockett spencer 
strong categorical datatypes seely editor international meeting category theory canadian mathematical society proceedings vol 
pp 
ams montreal 
cockett fukushima 
charity university calgary department computer science research report 
june 
darlington burstall 
system automatically improves programs 
acta informatica 

category theory types programming languages 
ph thesis department computer science university copenhagen diku may 
fegaras 
transformational approach database system implementation 
ph thesis department computer science university massachusetts amherst february 
appeared technical report 
fegaras sheard stemple 
uniform traversal combinators definition properties 
proceedings th international conference automated deduction cade saratoga springs new york pp 
springer verlag june 
ferguson wadler 
deforestation 
proc 
glasgow workshop functional programming research report glasgow university pp isle august 
hagino 
categorical programming language 
ph thesis university edinburgh 
hughes 
functional programming matters 
computer journal 
hook kieburtz sheard 
generating programs reflection 
oregon graduate institute technical report submitted journal functional programming 
malcolm 
homomorphisms 
mathematics program construction pp 
springer verlag june 
meijer fokkinga paterson :10.1.1.41.125
functional programming bananas lenses envelopes barbed wire 
proceedings th acm conference functional programming languages computer architecture cambridge massachusetts pp august 
wadler 
better laziness lazy evaluation garbage collection compile time 
proc 
acm symposium lisp functional programming austin texas august 
wadler 
deforestation transforming programs eliminate trees 
proceedings nd european symposium programming nancy france march 
lecture notes computer science 
wadler 
editorial lazy functional programming computer journal vol 

wand 
continuation program transformation strategies 
journal acm january 
waters 
automatic transformation series expressions loops acm transactions programming languages systems january 

