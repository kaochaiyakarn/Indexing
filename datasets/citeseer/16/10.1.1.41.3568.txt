language conveying aliasing properties dynamic pointer data structures joseph hummel laurie hendren alexandru nicolau high performance architectures rely powerful optimizing parallelizing compilers maximize performance 
compilers need accurate program analysis enable performance enhancing transformations 
domain program analysis parallelization pointer analysis difficult increasingly common problem 
faced dynamic pointer data structures existing solutions limited types data structures analyze require effort part programmer 
powerful description language expressing aliasing properties dynamic data structures 
descriptions provide compiler better information alias analysis require minimal effort programmer 
ultimately enables accurate program analysis increased application performance enhancing transformations 
high performance architectures rely powerful optimizing parallelizing compilers increase program performance 
turn compilers depend accurate program analysis enable various optimizing parallelizing transformations 
deal done area array analysis see zc extensive focused pointer analysis 
par dept computer science university california irvine irvine ca usa 
supported part darpa research parallel processing administered institute advanced computer studies university maryland 
correspondence directed author ics uci edu phone fax 
school computer science mcgill university montreal quebec canada 
supported part fcar nserc mcgill faculty graduate studies research 
dept computer science university california irvine irvine ca usa 
supported part nsf ccr onr 
ticular concerned problem analyzing programs involving dynamic pointer data structures 
problem analyzing kinds programs pointers general continues grow importance 
attributed increasing parallel processing community lesser extent realization dynamic data structures important tools achieving high performance 
example octrees important data structures body simulations app bh ws computational geometry sam sparse matrices circuit simulations kun 
preferred method analysis automatic compiler deduces properties data structure transforms program accordingly 
approaches jm lh hpr cwz hn deu ha lr cbc pkc quite limited types data structures recognize typically way linked lists trees 
second approach manual programmer annotates program directives directly supplying compiler necessary analysis information see cor 
directives typically low semantic level placed program maximize effect 
unhappy method proposed third compromising approach programmer annotates type declarations data structures compiler uses information guide remaining program analysis hhn 
requires small effort part programmer result dramatic improvements accuracy analysis performance hhn hhn 
disadvantage compiler may able verify type annotations 
program correctness currently responsibility programmer 
format follows 
section language conveying properties data structures important program analysis aliasing properties 
proceedings th international parallel processing symposium cancun mexico april pages 
copyright ieee 
personal material permitted 
permission reprint republish material advertising promotional purposes creating new collective works resale redistribution servers lists reuse copyrighted component works obtained ieee 
section discuss related followed section examples new language 
section 
overview language motivate language design supply definition lastly discuss problem verification 
motivation critical features optimizing parallelizing compilers accurate program dependence analysis ken 
case pointers requires accurate alias analysis answering questions form program point memory locations pointed pointer variable 
considering dynamic data structures alias analysis involves pointers question point node data structure 
words 
right right left left right left example binary tree 
idea description language allow specification axioms define conditions guaranteed 
alias exists properties expressed goal compiler dependence analysis prove aliases possible 
language focuses communication non aliasing properties data structure compiler 
viewing data structure directed graph edges labeled respective pointer fields aliasing properties expressed stating relationships pointer fields 
example important properties binary tree nodes tree traversing left leads different node traversing right 
stated axiom left 
right 
true distinct nodes left right traversals different nodes lead different nodes 
fact holds combination left right traversals implying axiom 
left right 
left right 
know binary trees acyclic left right fields form cycle independently 
specified follows left right 
ffl 
general axioms form id 
id regular expressions 
alphabet expressions set containing empty string ffl denotes traversal available pointer fields qualified type name name clashes arise array indices necessary 
regular expressions natural choice expressing aliasing properties information collected standard compiler analyses represented form sequence statements expressed concatenation selection alternation iteration kleene star 
ultimately allows straightforward application axioms dependence analysis hhn 
example consider code fragment root variables type pointer binary tree root 
left right 
left 
stmt 
root stmt statement dependent statement 
answer question compiler needs know relationship root 
statement reached standard analysis techniques able partially summarize relationship access path root left right left words know accessed root path set denoted regular expression left right left 
prove statement dependent statement suffices show root refer different nodes access path holds shown proof root left right left 
root 
trivially true axiom binary trees compiler conclude dependence exists definition shall refer language asap supports specification aliasing properties 
syntax asap straightforward valid asap specification consists axioms forms 
defined extended bnf shown 
simplicity presentation assume field names unique types field denotes single pointer value array pointers limitations easily lifted 
spec 
axiom 
axiom 
na 
disj na 
def 
na 
id id 
ref 
id 
ref 
disj na 
id 
id id 
ref 
id 
ref 
def 
id id 
ref 
id 
ref 
ref 
re 
ref 
re 
re 
field 
kleene 
re 
re 
re 
field 
id ffl kleene 
extended bnf definition asap 
semantics valid asap specification likewise straightforward 
data structures ds built axioms guaranteed hold 
axiom form na 
specifies nodes ds set nodes reachable path set ref 
disjoint set nodes reachable path set ref 
meaning disj na 
axiom defined similarly 
def 
axiom specifies opposite definite alias nodes details access paths collected general dependence testing performed hhn 
node memory location non null address 
ds set nodes reachable path set ref 
set nodes reachable path set ref 
fact refer node motivation type axiom clear section 
verification expressive power asap compiler able verify asap specification context possible programs 
program correctness correctness asap specification ultimately responsibility programmer 
workable solution limit asap data types small proven correct hand necessary 
availability asap aware tools code analysis debugging run time checking visualization 
regardless approach taken problem verification necessarily deter asap way deter programming general 
related discuss asap grew related 
adds asap generalization earlier adds data structure description language notion directions dimensions hhn 
adds simple powerful language describing pointer data structures 
complexity data structure grows accuracy adds diminish 
tried increase accuracy adds general enlarge class describable data structures language quickly complicated intuitive 
result trying extend possibly ruin adds studied underlying information adds conveying compiler designed language allowed information expressed directly 
led development asap 
asap descriptive power adds demonstrate section presenting important data structures adds unable describe accurately 
apparent disadvantage asap adds lower level nature asap axioms making language intuitive 
adds description automatically translated equivalent asap specification hhn programmer adds wishes asap necessary 
asap necessarily imply loss intuitiveness 
graph types graph types ks asap take similar approach describing data structures regular expressions specify relationships pointer fields 
graph types pointer fields separated types tree routing fields 
tree fields create spanning tree data structure routing fields defined terms tree fields underlying spanning tree 
primary disadvantage graph types support data structures spanning tree backbone 
class describable structures smaller structure deterministic relationship routing field underlying backbone precisely known compile time 
example skiplist pug data structure pointers skip ahead number nodes order reduce search time 
predicted compile time type structure described graph type 
true orthogonal lists sta important data structure implement sparse matrices discuss sparse matrices section 
noted cases graph types yield accurate description asap 
example graph types accurately describe post order threaded tree asap unable express threading precisely 
nice feature graph types compiler able guarantee formedness expressions 
guarantee structure described programmer mind description deterministic 
furthermore compiler guaranteeing correctness imperative style code build kind data structure 
fact graph types intended functional languages compiler responsible correctly maintaining routing fields 
related idl interface description language allows programmer define various properties data structure way assertions supplied declaration sno 
asap assertions aid analysis compiler understand implication purpose assertions ensure validity run time particular structure passed running program 
larus lar discussed technique describing acyclic structures lisp code annotations conveyed data structure compiler 
code annotation approach taken refined kkk explicit statements distinct inserted program guide analysis 
different related approach effect system fx lg effect statement explicitly associated region memory enables compiler perform coarse grain alias analysis 
examples describing simple data structures linked lists trees programmer find easier adds graph types 
case view asap lower level language adds graph type descriptions compiled resulting axioms fed dependence analysis framework hhn separates description language choice underlying analysis algorithms 
section demonstrate exist important data structures adds graph types suffice 
situations programmer asap directly provide accurate description enabling accurate program analysis 
section shall data structures pose problems adds graph types 
case adds structures described degree just accurately asap 
graph types structure described accurately asap remaining described 
general trees general tree nodes may number children 
shown done forming linked list children nodes child field points child rest children reached traversing sib field 
third field parent allows direct access parent child 
cyclic relationship involving child sib parent fields prevents accurate adds description 
problem adds child sib parent general tree 
able express simple cycles involving fields 
asap share limitation 
step express data structure shall mirror approach discussed earlier section 
nodes tree know traversing child sib lead different nodes 
state axiom child 
sib 
likewise traversing fields distinct nodes lead node 
fact traversing combination child sib fields different nodes lead node 

child sib 
child sib 
specify tree child sib 
ffl 
step consider parent field relationship fields child sib 
know node traversing parent lead different node traversing child sib parent 
child sib 
traversing different nodes possible parent field lead node child sib field axiom appropriate 
hand consider parent field true different nodes reach node 

parent 
parent 
state parent field parent 
ffl 
importantly want convey cyclic relationship parent forms child sib fields 
stated follows child sib parent ffl 
asap specification describes general tree accurately adds declaration 
case true graph type achieve accuracy asap specification 
true examples follow 
developing asap specification proceeding helpful summarize technique developing asap specifications 
firstly consider relationships pointer fields originating single node 
repeat process consider relationships originating distinct nodes case consider field relates fields field relates 
state fields combinations fields acyclic 
express cyclic relationships 
low level nature asap axioms lead somewhat lengthy specifications 
impediment note higher level languages adds description translated asap result supplemented asap axioms necessary 
note usually assumed pointer fields different types lead node need restate obvious 
union find trees union find trees data structure support efficient find union operations data elements ahu man 
find operation searches group element resides union operation unions existing groups new group 
initially element resides group 
various forms search trees wellknown allow efficient searching problem support efficient unions 
union find tree shown highlights approach fast unions note tree typical sense pointers flow leaves safe assumption ansi older code require special checks assumed 
type type union find tree type declaration example data structure 
root shall remain consistent literature 
find element accomplished traversing root tree find unions performed simply linking trees root nodes 
example union brought simply creating new node having nodes point adding just links elements unioned 
graph types declare type data structure simple reason subset pointer fields forms spanning tree backbone 
union find tree dag tree multiple pointers converging interior nodes root 
adds description capture portions data structure result accurate 
problem adds unable express relationship choices tree graph 
fact fields form dag expressed 
asap generate accurate description 
start considering simpler group nodes 
pointer field node axioms form forall nodes sense 
considering disjoint nodes possible disjoint nodes lead node traversing fields consider nodes axiom form appropriate 
lastly consider postpone accurately stated 
consider element nodes 
different types leading different nodes node distinct nodes 
know distinct nodes fields lead node 
specify axiom 


note hold fields consider nodes 
type consider relationship case distinct nodes traversing single node sense fields part node 
distinct nodes possible lead node consider nodes axiom appropriate 
consider element nodes fact group nodes 
stated single axiom 
ffl 
note axiom states substructures acyclic list elements traversing element group node asap specification consisting axioms describes union find tree accurately adds describes structure graph types describe 
sparse matrices sparse matrices example shown implemented orthogonal lists sta 
sparse matrices important data structure scientific computing commonly circuit simulations kun 
elements matrix form linked lists row column header node front list 
header nodes turn linked lists depending head row column 
pointers row column lists stored single header node serves denote entire sparse matrix 
type rows cols type integer row type integer col type integer cols rows sparse matrix type declaration example data structure 
key distinguishing characteristic data structure row column element lists intertwined allowing elements accessed row column 
equally important fact individual rows disjoint true individual columns 
fact crucial parallelization sparse matrix algorithms algorithms frequently operate row row column column 
description sparse matrix include information 
sparsity data structure prevents graph types programmer predict compile time exactly node node refer field depends state matrix run time 
adds sparse matrix partially described 
key problem adds unable express disjointness rows likewise columns property needed parallelization 
asap necessary flexibility allow accurate description sparse matrix 
adds declaration automatically translated asap specification hhn know asap worse adds 
better 
idea take bottom approach simple axioms developing complicated ones necessary 
starting element nodes see rows columns intertwined dag 
follow specification tree done section relaxing specification appropriate 
tree traversing field leads different node traversing field 

tree possible fields lead node different nodes dag 
rows elements columns list yielding axioms 





likewise rows elements disjoint columns 
stated follows 



lastly element nodes specified better postponed done accurately 
step consider row column header nodes accompanying element lists appropriate 
pointer fields nodes different types axioms inferred 
need consider cases fields type involved 
firstly row column header nodes form linear linked list implying fields lead node different nodes 





likewise fields lead node differing nodes 





possible fields lead node different header nodes consider row column 
axiom appropriate 
hand row column headers provide slightly different opportunity specifying row column disjointness 





note axioms subsume previous 
step state fields postpone 
final step consider main header node 
rows cols fields different types stated concerning fields 
main header node fields type row column header nodes relationships considered 
main header node points row column header node list state 
rows 


cols 

need consider fields main header node 
reached consider entire sparse matrix know acyclic 
implies axiom rows cols 
ffl 
note states substructures acyclic list elements row header list asap specification accurately describes sparse matrix particular conveying important properties row column disjointness necessary parallelization 
specification accurate adds declaration describes data structure graph types 
asap powerful language conveying aliasing properties dynamic pointer data structures 
powerful existing data structure description languages format axioms provides direct support alias analysis 
furthermore adds declarations automatically translated asap specifications allowing programmer asap adds depending appropriate preferred 
ability describe larger class data structures asap allow accurate program analysis larger class programs 
ultimately enable increased application compiler performance enhancing transformations programs 
dependence testing framework asap currently implemented part optimizing parallelizing compiler 
authors wish anonymous referees helpful comments result better 
ahu alfred aho john hopcroft jeffrey ullman 
design analysis computer algorithms 
addison wesley 
app andrew appel 
efficient program body simulation 
siam sci 
stat 
comput 
bh josh barnes hut 
hierarchical nlogn force calculation algorithm 
nature december 
code obtained prof barnes university hawaii ics uci edu 
cbc choi burke carini 
efficient flow sensitive interprocedural computation pointer induced aliases side effects 
proceedings acm th symposium principles programming languages pages january 
cor convex computer 
convex optimization guide april 
cwz chase wegman 
analysis pointers structures 
proceedings sigplan conference programming language design implementation pages 
deu deutsch 
model aliasing abstractions finite representations right regular equivalence relations 
proceedings ieee international conference computer languages april 
ha harrison iii 
program eye view 
gelernter nicolau padua editors proceedings th workshop languages compilers parallel computing pages august 
available yale tech report yaleu dcs rr 
hhn laurie hendren joseph hummel alexandru nicolau 
abstractions recursive pointer data structures improving analysis transformation imperative programs 
proceedings sigplan conference programming language design implementation pages june 
hhn joseph hummel laurie hendren alexandru nicolau 
applying data structure description approach parallelizing scientific pointer programs 
proceedings st annual international conference parallel processing volume ii pages august 
hhn joseph hummel laurie hendren alexandru nicolau 
general dependence test dynamic pointer data structures 
technical report ics uc irvine september 
appear acm sigplan conference programming language design implementation 
hhn joseph hummel laurie hendren alexandru nicolau 
language conveying aliasing properties dynamic data structures 
technical report ics uc irvine september 
appear th international parallel processing symposium april 
hn laurie hendren alexandru nicolau 
parallelizing programs recursive data structures 
ieee trans 
parallel distributed computing january 
hpr susan horwitz phil pfeiffer thomas reps dependence analysis pointer variables 
proceedings sigplan conference programming language design implementation pages june 
jm jones muchnick 
program flow analysis theory applications chapter flow analysis optimization lisp structures pages 
prentice hall 
ken kennedy 
foreword supercompilers parallel vector computers 
text written hans zima barbara chapman available acm press 
kkk david kang 
refined update 
david gelernter alexandru nicolau david padua editors languages compilers parallel computing pages 
mit press 
ks klarlund schwartzbach 
graph types 
proceedings acm th symposium principles programming languages pages january 
kun 
sparse matrix techniques 
editor circuit analysis simulation design pages 
elsevier science publishers 
north holland 
lar james larus 
restructuring symbolic programs concurrent execution multiprocessors 
phd thesis university california berkeley 
lg lucassen gifford 
polymorphic effect systems 
proceedings th acm symposium principles programming languages pages 
lh james larus paul hilfinger 
detecting conflicts structure accesses 
proceedings sigplan conference programming language design implementation pages june 
lr landi ryder 
safe approximation algorithm interprocedural pointer aliasing 
proceedings sigplan conference programming language design implementation pages june 
man udi manber 
algorithms creative approach 
addison wesley 
pkc plevyak karamcheti chien 
analysis dynamic structures efficient parallel execution 
gelernter nicolau padua editors proceedings th annual workshop languages compilers parallel computing pages august 
pug pugh 
skip lists probabilistic alternative balanced trees 
cacm june 
implementation cs umd edu 
sam hanan samet 
applications spatial data structures computer graphics image processing gis 
addison wesley 
sno snodgrass 
interface description language definition 
computer science press 
sta thomas standish 
data structure techniques 
addison wesley 
ws warren salmon 
astrophysical simulations hierarchical tree data structures 
proceedings supercomputing pages november 
zc hans zima barbara chapman 
supercompilers parallel vector computers 
acm press 

