optimal line algorithms single machine scheduling department mathematics computing science eindhoven university technology box mb eindhoven netherlands consider single machine line scheduling problems jobs arrive time 
set independent jobs scheduled machine preemption allowed number jobs unknown advance 
job available release date known advance characteristics processing requirement known arrival 
deal problems minimizing total completion time minimizing maximum time jobs delivered 
problems propose analyze line algorithm idea soon machine available processing choose available job highest priority schedule processing requirement large 
postpone start job 
prove algorithms performance bound respectively show problems exist line algorithm better performance guarantee 
keywords line algorithms single machine scheduling worst case analysis 
years ago basic assumptions deterministic scheduling information needed define problem instance known advance 
assumption usually valid practice 
abandoning led rapidly emerging field line scheduling 
line models proposed 
assumes release dates jobs arrive list 
line algorithm schedule job list sees job list see graham chen van vliet woeginger 
second model assumes jobs arrive time 
presence release dates main difference models second model jobs scheduled immediately arrival 
time machine idle algorithm decides available jobs scheduled 
consider single machine line scheduling problems release dates 
deal single machine scheduling problems minimizing total completion time maximum time jobs delivered respectively 
problem af ter processing machine jobs need delivered takes certain delivery time 
corresponding line problems strongly np hard preemptive versions solved polynomial time line algorithm see lawler lenstra rinnooy kan shmoys 
known line algorithms problems spt rule ldt rule choose available jobs shortest processing time largest delivery time respectively 
release dates equal problems solved algorithms 
case release dates equal mao kincaid rifkin prove spt performance guarantee number jobs ibaraki mine prove ldt performance guarantee 
question course better worst case point view 
denote job denote release date processing requirement delivery time respectively 
denote starting time completion time time delivered schedule 
denote schedule produced heuristic denote optimal schedule 
organized follows 
section consider problem minimizing total completion time single machine 
prove line algorithm problem worst case ratio algorithm achieves bound 
independent phillips stein wein developed algorithms equal performance guarantee lower bound achieved 
algorithms compare algorithm 
section consider problem minimizing time jobs delivered 
show line algorithm worst case ratio 
algorithm achieves bound 
total completion time section line approximation algorithm single machine scheduling problem minimizing total completion time show line algorithm better worst case point view 
section compare algorithms phillips algorithm 
show lower bound worst case ratio line algorithm result follows example 
schedule short notation total completion time 
theorem 
line algorithm worst case ratio 
proof 
show result describing set instances line algorithm guarantee outcome strictly twice optimum 
consider situation 
job arrives time processing requirement line algorithm decides schedule job time depending jobs arrive anymore jobs processing requirement arrive time 
case get ratio second case get ratio 
max algorithm may choose minimize expression 
simple algebra shows best choice 
implies worst case ratio tend infinity get desired ratio 
example theorem show line algorithm schedules job soon machine available unbounded worst case ratio 
algorithm wants guarantee better performance bound needs waiting strategy 
example available job large processing requirement compared optimal solution currently available instance algorithm wait extra information 
incorporate slightly modify spt rule call new rule delayed spt rule spt 
algorithm spt machine idle job available time determine unscheduled job smallest processing requirement say choice take job smallest release date 
schedule wait time new job arrives whichever happens 
seen worst case bound algorithm equal 
performance guarantee exceeds exists instance call counterexample algorithm produces schedule value twice optimal value 
show algorithm performance bound exactly equal showing exist counterexample 
derive characteristics smallest counterexample counterexample consisting minimum number jobs 
smallest counterexample schedule created spt instance 
observation 
schedule consists single block possibly starts idle time jobs executed contiguously 
proof 
suppose contains idle time execution jobs 
jobs scheduled idle period influence scheduling decision concerning jobs scheduled idle period vice versa 
instance split independent smaller instances 
partial instances spt creates schedule value twice optimal value contradicts assumption considered instance minimum number jobs 
assume jobs numbered position schedule 
partition subblocks subblock jobs ordered spt rule job subblock larger job succeeding subblock exists 
denote subblocks 
subblock consists jobs 
indices determined recursively min 
number subblocks schedule partitioned follows recursion scheme 
ease exposition define dummy job scheduled 
scheduled define index job largest processing requirement blocks pm max define pseudo schedule schedule follows 
order jobs job starts time pm furthermore jobs block scheduled contiguously 
easy verify real schedule jobs start release date jobs overlap 
note contains idle time 
optimal preemptive schedule lemma 

proof 
consider arbitrary job say suppose job pm pm sm pm spt schedules smallest available job starts job time smaller processing time 
pm pm implies pm 
lemma 

proof 
denote job set corresponding smallest counterexample 
instance pseudo schedule instance create new instance instance consists jobs processing requirements jobs remain release dates set equal min 
optimal preemptive schedule instance determine job starts earlier suppose job say belongs 
pm jobs scheduled higher priority smaller processing requirement equal processing requirement smaller release date 
implies preemptive schedule jobs higher priority scheduled contradicts fact 
pm jobs executed interval pm higher priority jobs executed interval higher priority denote set containing jobs 
job room start jobs time jobs postponed enable start time inconsistent way constructed 
job starts earlier implies 
release dates smaller equal release dates 
implies 
theorem 

proof 
combining lemmas obtain 
corollary 
line algorithm spt performance bound 
algorithm machine developed phillips uses preemptive schedule 
algorithm maintains list jobs completed preemptive schedule 
soon job finished preemptive schedule appended list 
soon machine idle job list assigned machine 
algorithm developed modifies release dates jobs line algorithm 
release date job increased processing requirement 
new instance algorithm uses spt rule 
algorithm shifts release dates uses spt call shifted spt rule spt 
algorithms spt spt create schedules cost twice value optimal preemptive schedule 
difficult see spt create idle time spt create idle time 
expect average spt performs slightly better algorithms 
exist instances algorithm performs twice ones 
table shows instances 
values limiting values denotes order jobs scheduled 
table instances compare worst case behavior spt spt 
instance algorithm spt 
spt 

spt 
spt 

spt 
spt 

maximum delivery time section line approximation algorithm single machine scheduling problem minimizing time jobs delivered show line algorithm better worst case point view 
start 
prove lower bound worst case ratio means example line algorithm required ratio 
max denote minimum time jobs delivered max denote time jobs delivered schedule schedule obtained line algorithm 
theorem 
line algorithm worst case ratio 
proof 
consider situation 
job arrives time processing requirement delivery time 
line algorithm decides schedule job time depending jobs arrive job processing requirement delivery time arrives time 
case get ratio max max second case get ratio max max 
max max max algorithm may choose minimize expression 
simple algebra shows best choice 
implies worst case ratio max max tend infinity get desired ratio 
example theorem show line algorithm schedules job soon machine available worst case ratio 
note simple algorithm ldt achieves bound 
algorithm wants guarantee better performance bound needs waiting strategy 
modify ldt rule call new rule delayed ldt rule ldt 
basic idea algorithm jobs large processing requirement available schedule job largest delivery time decide schedule large job job largest delivery time job 
section notation denotes total processing time jobs set containing jobs arrived time set containing jobs started time denotes start time idle time period time idle time define 
call job big 
note contains jobs arrived time completed time denotes job largest processing time 
denotes job largest delivery time 
algorithm ldt wait machine idle job available 
suppose happens time big job available schedule 

available job wait new job arrives time whichever happens 
schedule qm schedule schedule job second largest delivery time 
smallest counterexample smallest refers number jobs 
smallest counterexample schedule created ldt suppose denotes completed job assumes value max 
observation 
schedule consists single block possibly starts idle time jobs executed contiguously 
proof 
suppose contrary form 
show find counterexample consists smaller number jobs alleged counterexample counterexample 
suppose consists block 
suppose block block contains job max consider block precedes algorithm bases choices set existence jobs completed start block influence start time order jobs executed 
remove jobs completed start block changing value max increasing max 
similarly remove jobs released start 
may assume counterexample consists jobs block jobs available start scheduled block 
algorithm starts job job available machine empty know job available time belong know job denote marked big 
denote start time job completion time job big 
available job may equal due operation algorithm min denotes release date second available job 
job know max job max derive max max max validity counterexample 
job job start time implies max max max deduce correspond counterexample 
denote job arrives note loss generality may assume 
observation 

proof 
suppose contrary exist job 
time jobs available implies algorithm starts job done 
basis observation may conclude idle time remainder schedule 
marked big algorithm case jobs able keep machine busy time time case contradiction 
denote job delivery time smaller denote set containing jobs 
note jobs delivery time greater equal observation 

proof 
exist max job block starts time latest max max max contradicts fact consider counterexample 
assume job exists 
possibilities algorithm select jobs jobs release date larger 
job available denote marked big started 
note started case max min max deduce max max max 
concerning case max min deduce max max max 
cases corresponds counterexample conclude big 
corollary 
analysis theorem need lemma 
lemma 
job max max proof 
job available 
jobs available time algorithm starts jobs machine idle 
job starts job idle time max max 
easily checked max theorem 
line algorithm ldt performance bound 
proof 
suppose contrary exists instance algorithm finds schedule max max 
obviously exists counterexample minimum number jobs 
basis observations may assume job available defined 
note due corollary job delivery time smaller starts time job delivery time greater available 
denote set jobs selected eligible scheduled may empty 
denote start time job set available note 
proof proceeds case case analysis 
reasons possible starting time job 
simply jobs available 
second available jobs delivery time equal cover cases distinguishing 
case 
jobs available time max max max max job lemma max max implies max max max 
assume job 
max max max 
counterexample 
note jobs delivery time greater job max counterexample 
case 
jobs delivery time large job lemma max max get max max max max max max 
assume job 
jobs delivery time greater job smallest delivery time 
combining yields max max implies max max done checked possibilities conclude counterexample theorem 
chen van vliet woeginger new lower upper bounds line scheduling operations research letters 
graham bounds certain multiprocessing anomalies bell system technical journal 
ibaraki mine performance analysis approximation algorithms machine maximum lateness scheduling problem ready times journal operations research society japan 
lawler lenstra rinnooy kan shmoys sequencing scheduling algorithms complexity graves rinnooy kan eds logistics production inventory handbooks ms elsevier science publishers amsterdam chapter isbn 
mao kincaid rifkin line algorithms single machine scheduling problem nash eds impact emerging technologies computer science operations research kluwer academic press chapter 
phillips stein wein scheduling jobs arrive time proceedings fourth workshop algorithms data structures lecture notes computer science springer 
personal communication 

