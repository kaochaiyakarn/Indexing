lore database management system semistructured data jason mchugh serge abiteboul roy goldman quass jennifer widom stanford university quass db stanford edu www db stanford edu lore lore lightweight object repository dbms designed specifically managing semistructured information 
implementing lore required rethinking aspects dbms including storage management indexing query processing optimization user interfaces 
provides overview aspects lore system novel features dynamic structural summaries seamless access data external sources 
traditional database systems force data adhere explicitly specified rigid schema 
new database applications significant drawbacks approach ffl data may irregular conform rigid schema 
relational systems null values typically data irregular known headache 
complex types inheritance object oriented databases clearly enable flexibility difficult design appropriate object oriented schema accommodate irregular data 
ffl may difficult decide advance single correct schema 
structure data may evolve rapidly data elements may change types data conforming previous structure may added 
characteristics result frequent schema modifications known headache traditional database systems 
limitations applications involving semistructured data abi database management system despite fact strengths dbms ad hoc queries efficient access concurrency control crash recovery security useful applications 
popular example consider data stored world wide web 
typical web site data varied irregular structure site changes 
today web sites store available information database system 
clear web users take advantage database support having ability pose queries involving data relationships usually known site creators explicit 
second example consider information integrated multiple heterogeneous data sources com lmr sl 
considerable effort typically spent ensure integrated data conforms single uniform schema 
additional effort required information supported air force rome laboratories darpa contracts equipment ibm digital equipment corporations 
sources changes new sources added 
clearly database system easily accommodates irregular data changes structure greatly facilitate rapid integration heterogeneous databases 
describes implementation lore system stanford university designed specifically managing semistructured data 
data managed lore confined schema may irregular incomplete 
general lore attempts take advantage structure exists handles irregular data gracefully possible 
lore lightweight object repository fully functional available public 
lore data model simple self describing nested object model called oem object exchange model introduced originally tsimmis project stanford pgmw 
challenges design query language lore allows users easily retrieve update data fixed known structure 
lorel lore language extension oql cat introduces extensive type coercion powerful path expressions effectively querying semistructured data 
oem lorel reviewed briefly details see aqm 
building database system accommodates semistructured data required rethink nearly aspect database management 
architecture system relatively traditional highlights number components feel particularly interesting unique 
query processing introduces number challenges 
obvious difficulty absence schema guide query processor 
addition lorel includes powerful form navigation path expressions requires automata graph traversal techniques inside database engine 
indexing semistructured data query optimization interesting issue particularly context automatic type coercion provided lorel 
seen despite challenges able execute queries query plans primarily familiar database operators 
accommodate semistructured data physical level support multimedia data video postscript gif impose constraints size structure atomic complex objects 
layout objects disk tailored facilitate browsing processing path expressions 
novel aspects lore dataguides place standard schema lore external data manager 
dataguide structural summary current database maintained dynamically serves functions normally served schema 
example dataguides essential users explore structure database formulate queries 
important system store statistics originally lightweight referred simple object model lore fact lore lightweight system supporting single user read access 
seen lore evolving traditional heavyweight dbms functionality 
guide query optimization 
motivations dbms designed semistructured data easily integrate data heterogeneous information sources including world wide web lore includes external data manager 
component enables lore bring data external sources dynamically needed query execution user aware distinction local external data 
chosen implement lore scratch building extension existing dbms handle semistructured data 
building complete dbms allows full control components system experiment easily internal system aspects query optimization object layout 
parallel implementing semistructured data model query language top object oriented system order compare implementation effort performance lore 
focuses lore implementation discussed briefly 
related preliminary version language lorel introduced qrs 
details syntax semantics current version lorel aqm 
comparison lorel conventional languages oql cat kks sql ms appears qrs 
lore system demonstrated describe implementation aspects lore 
closest current system lore unql bds bdhs designed managing semistructured data uses data model similar oem 
unql query language expressive lorel believe user friendly 
furthermore unql focused primarily aspects query language optimizations far system implementation 
earlier system model record structures 
seen data model lore powerful includes arbitrary object nesting lore query language richer language model 
query processing lore significantly different model concentrated clever bit mapped indexing structures 
furthermore best knowledge model include concepts analogous dataguides external data 
number proposals invent extend query languages roughly lines lorel integrate traditional databases semistructured text data 
operates data cases designed specifically world wide web 
examples include bk bck cacs ccm cm ks lss mmm mw mw ya 
depth comparison languages systems lore see aqm 
outline section reviews data model query language lore 
section introduces architecture individual components lore system 
query update processing optimization indexing considered section 
section covers lore external data manager dataguides 
section describes various interfaces lore developers users application programs 
section covers system status describes obtain lore system discusses current 
representing querying semistructured data set stage discussion lore system introduce data model query language 
motivation details see aqm 
object exchange model object exchange model oem pgmw designed semistructured data 
data model thought labeled directed graph 
example small oem database shown contains fictitious information stanford database group 
vertices graph objects object unique object identifier oid 
atomic objects outgoing edges contain value basic atomic types integer real string gif java audio objects may outgoing edges called complex objects 
object complex subobjects 
object atomic value clark 
names special labels serve aliases objects entry points database 
dbgroup name denotes object 
object accessed path name considered deleted 
oem database notion fixed schema 
schematic information included labels may change dynamically 
oem database regularity imposed data 
model designed handle incompleteness data structure type heterogeneity exhibited example database 
observe example members zero offices ii office string complex object iii room may string integer 
oem object label expression denotes set labeled subobjects atomic object outgoing label empty set 
dot expressions query language described 
lorel query language subsection introduce lorel query language primarily examples 
lorel extension oql full specification aqm 
highlight features language impact novel aspects system features designed specifically handling semistructured data 
useful features lorel inherited oql standard covered 
example query introduces basic building block lorel simple path expression name followed sequence labels 
example dbgroup 
member office simple path expression 
semantics consists set objects reached starting dbgroup object edge labeled member edge labeled office 
range variables assigned path expressions dbgroup member 
office specifies ranges set offices 
path expressions directly sql style example 
example query retrieves offices older members group 
query answer sample database follow 
note query result indentation represent graph structure 
query select dbgroup member office dbgroup member age member name age project office title office office smith gates jones lore member project building room gates title tsimmis project member building room cis age name clark project name dbgroup member oem database result office gates office building cis room database query evaluated presents number irregularities discussed earlier 
guiding principle lorel write query worry irregularities know precise structure objects structure offices bother precise types type age integer 
query yield run time error age object string value complex ages offices single valued set valued absent group members 
query succeed matter actual structure database return appropriate answer 
lore query processor rewrites queries elaborate oql style 
example previous query rewritten lore select dbgroup member office exists age lore system executes oql style query incorporating certain features special coercion rules see section comparison 
note clause introduced rewritten version query 
omitting clause minor syntactic convenience lorel similar shorthand allowed postquel sk 
note comparison age transformed existential condition 
transformation occurs properties oem 
user write dbgroup member 
age regardless age known known set valued unknown 
see section important step query processing lorel rewriting query oql style 
implementing lorel top system translation oql see section brief discussion 
lorel offers richer form declarative navigation oem databases simple path expressions general path expressions 
intuitively user loosely specifies desired pattern labels database specify patterns paths match sequences labels patterns labels match sequences characters patterns atomic values 
combination forms pattern matching illustrated example query select dbgroup member name dbgroup member office room cubicle 
result name jones name smith expression room label pattern matches labels starting string room room rooms room 
path patterns symbol indicates disjunction labels symbol indicates label pattern optional 
complete syntax regular expressions syntactic wildcards matches path length 
specifies data value string 
operator loosely sql 
support grep similar unix soundex phonetic matching 
preprocessing simple path expressions eliminated rewriting query variables example 
possible general path expressions require run time mechanism described section 
note database contains cycles general path expression may match infinite number paths data 
trying match general path expression database match cycle appears reasonable simplification practice 
conclude examples illustrate advanced features language 
query illustrates subqueries constructed results 
retrieves names members lore project titles projects lore 
physical storage external read data sources query compilation data engine results non query requests utilities dataguide mgr loader index mgr query operators object manager external data manager query optimizer query plan generator preprocessing lorel oql parsing html gui textual interface api applications lore system queries lore architecture query select name select project title project title lore dbgroup member project title lore result member name jones title tsimmis larger database query construct member object group member result containing member name title qualifying project 
lore database modified lorel declarative update language example update member select dbgroup member dbgroup member name clark dbgroup project title lore title tsimmis update adds group members named clark members lore tsimmis projects 
intuitively clauses evaluated providing bindings binding expression member specifies add member edges object returned subquery 
general update language supports insertion removal edges creation new vertices objects modification atomic values name assignments 
mentioned earlier object deletion unreachability garbage collection explicit delete operation 
lorel offers grouping aggregate functions style oql external functions predicates powerful bulk loading facility allows merging new data existing database 
means attaching variables certain objects paths labels paths style attribute path variables cacs yields rich mechanism structure discovery 
features described aqm scope 
system architecture basic architecture lore system depicted 
section gives brief components lore 
detailed discussions individual components appear subsequent sections 
access lore system variety applications directly lore application program interface api 
simple textual interface primarily system developers suitable learning system functionality exploring small databases 
graphical interface primary interface users provides powerful tools browsing query results dataguide feature seeing structure data formulating simple queries example way saving frequently asked queries mechanisms viewing multimedia atomic types video audio java 
interface modules applications communicate lore api 
details interfaces discussed section 
query compilation layer lore system consists parser preprocessor query plan generator query optimizer 
parser accepts textual representation query transforms parse tree passes parse tree preprocessor 
preprocessor handles transformation lorel query oql query recall section 
query plan generated transformed query passed query optimizer 
addition doing currently simple transformations query plan optimizer decides indexes feasible 
optimized query plan sent data engine layer 
data engine layer houses oem object manager query operators external data manager various utilities 
query operators execute generated query plans explained section 
object manager functions translation layer oem lowlevel file constructs 
supports basic primitives fetching object comparing objects performing simple coercion iterating subobjects complex object 
addition performance features cache frequently accessed objects implemented component 
index manager external data manager dataguide manager discussed sections respectively 
bulk loading physical object layout disk discussed section 
query update processing lore depicted basic steps lore follows answering query query parsed parse tree preprocessed translated oql query query plan constructed query optimization occurs optimized query plan executed 
query processing lorel fairly conventional notable exceptions ffl flexibility lorel preprocessing parse tree produce oql query complex 
implemented specification described aqm discuss issue 
ffl lore engine built standard operators scan join take original flavor 
example scan may take argument general path expression may entail complex searches database graph 
ffl unique feature lore automatic coercion atomic values 
coercion impact implementation comparators importantly shall see important effects indexing 
result lorel query set oem objects subobjects newly created result object 
result object returned api 
application may routines provided api traverse result subobjects display suitable fashion user 
illustrate sequence steps lore follows answering query trace example query planning discuss operators execute query plan 
consider query introduced section oql version select dbgroup member office exists age initial query plan generated query 
discussing various operators plan necessary understand flow control auxiliary data structures executing plan 
iterators object assignments query execution strategy familiar database operators 
recursive iterator approach query processing described gra 
iterators execution begins top query plan node plan requesting tuple time children performing operation tuple 
node completes operation passes resulting tuple parent 
operators iterator approach avoids creation temporary relations 
tuples operate object assignments oas 
oa simple data structure containing slots corresponding range variables query additional slots depending form query 
example oa slots example query shown 
intuitively slot oa hold oid vertex data path currently considered query engine 
example oa holds oid member smith oa oa hold oids smith office subobjects age subobjects respectively 
note point query processing slots current oa necessarily contain valid oid 
goal query execution build complete oas 
valid oa reaches top query plan oids appropriate slots construct component query result 
query operators briefly explain query operators appearing nodes query operators appearing plan discussed 
operator takes number arguments argument oa slot contain result operation 
exceptions select project operators target slot 
scan operator leaf nodes similar functionality relational scan 
scanning set tuples relation scan returns oids subobjects object specified path expression 
scan operator defined scan scan starts oid stored iteration places oid subobject satisfies path expression matching subobjects 
note cases path expression consists single label may complex data structure representing arbitrary component general path expression recall section essentially regular expression 
regular expressions currently support sufficient scan operator keep run time stack objects visited order match path expression 
general regular expressions finite state automaton required 
recall avoid infinite numbers matching paths match acyclic paths data 
currently scan operator avoid traversing cycle ensuring oid appears stack 
stack grows larger acyclic paths database expect size problem 
simple example scan operator consider node example plan scan oa office oa iterator place slot oa time office subobjects object appearing slot oa 
note special form lower left scan scan root dbgroup oa select oa true aggr exists oa oa scan oa member oa scan oa office oa select oa scan oa age oa project oa scan root dbgroup oa join join join example lore query plan oa oa oa oa oa dbgroup oa member oa office oa age true false example object assignment oa slot argument value root system known object names dbgroup reached 
join project select nodes nearly identical corresponding relational operators 
relational nested loop join join node coordinates left right children 
partially completed oa left child returns right child called exhaustively new oas possible 
left child instructed retrieve partial oa 
iteration continues left side produces oas 
project node limit objects returned specifying set oa slots select node applies predicate object identified oid oa slot specified 
aggregation node shown right side query plan aggr somewhat novel way implements quantification aggregation 
high level aggregation node calls child exhaustively storing results temporarily computing aggregate incrementally 
child produce valid oas new object created value final aggregation new object identified target oa slot 
example shown aggregation node adds target slot oa result aggregation value true existential quantification satisfied object exists oa false 
filtering oas quantification true occurs select node immediately aggregation node 
note exists aggregation operator short circuits finds satisfying oa aggregation operators may need look oas 
primary query operators lore addition operators plans indexes see section groupby 
handles lorel set operations union intersect 
likewise handles arithmetic operations addition multiplication package results arbitrary subquery proceeding calls child exhaustively storing oid returned part newly created complex object 
child produced possible oas operator stores oid new set objects target slot oa 
groupby operator handles sub queries include groupby expression 
give depth flavor query plan construction consider second query 
query asks names number publications database group member computer science cs department 
select name count publication dbgroup member dept cs important note name publication appearing select clause sets objects general case represented subqueries 
oql translation query select select name count select publication dbgroup member exists dept cs see construction query plan refer 
subtree clause constructed 
simple path expression range variable appearing scan node 
exist left deep tree scan nodes join nodes connecting constructed 
top subtree join node connects clause subtree clause 
exists select aggr scan node predicate select node 
select clause join node added top tree query plan subtree select clause right child 
consider subtree select clause 
plans expressions constituting select clause combined union operator 
group members electrical engineering department 
select oa true aggr exists oa oa select oa cs scan oa dept oa join scan oa member oa scan root dbgroup oa join join scan oa member oa scan root dbgroup oa join clause clauses final query plan scan oa member oa scan root dbgroup oa join join project oa aggr count oa oa scan oa publications oa oa oa scan oa name oa union oa oa oa select oa true aggr exists oa oa select oa cs scan oa dept oa steps constructing query plan complex object result contains set name subobjects member left subtree union count publications member 
lorel select list indicates union ordered pairs achieved tuple constructor operator aqm 
operator described earlier needed obtain name children member returning object assignment query tree 
operator right subtree aggregation operator definition calls subquery exhaustion applies aggregation operator case count continuing 
query optimization indexing lore query processor currently implements simple heuristic query optimization techniques 
example push selection operators query tree cases eliminate combine redundant operators 
plan consider additional heuristic optimizations possibility truly exploring search space feasible plans 
despite lack sophisticated query optimization lore explore query plans indexes feasible 
traditional relational dbms index created attribute order locate tuples particular attribute values quickly 
lore value index sufficient path object important value object 
kinds indexes lore link edge index value index vindex 
takes oid label returns oids parents specified label 
label omitted parents returned 
essentially provides parent pointers supported lore object manager 
vindex takes label operator value 
returns atomic objects having incoming edge specified label value satisfying specified operator value 
arg arg string real int string gamma string real real real string real gamma int real int real int real gamma table coercion basic comparison operators useful range inequality point equality queries implemented trees 
hand single object lookups implemented linear hashing lit 
conjunction kinds indexes enable query processing lore avoid standard scan operator 
examining query plans exploit indexes take detailed look handle coercion lorel 
value indexes value indexing lore requires novel features due non strict typing system 
comparing values different types lore attempts coerce values comparable types 
currently indexing system deals coercions involving integers reals strings 
table illustrates coercion lore performs types note simplify situation coercing integers reals 
order comparisons lore maintain different kinds 
string vindex contains index entries string atomic values string html url 

real vindex contains index entries numeric atomic values integer real 
oa age oa named obj dbgroup oa project oa vindex age oa join oa join join oa member oa scan oa office oa query plan indexes 
string coerced real vindex contains string values coerced integer real stored reals index 
label vindex created separate trees type constructed 
vindex comparison find age objects cases consider type comparison value 
value type string lookup string vindex ii value coerced real lookup coerced value real vindex 

value type real integer lookup real vindex ii lookup string coerced real vindex 
index query plans user query contains comparison path expression integer real string dbgroup 
member age appropriate exist query plan uses indexes generated 
simplicity consider queries clause consists comparison 
query plans indexes different shape scan operators 
intuitively index plans traverse database bottom scan plans perform top traversal 
index query plan locates objects desired values appropriately labeled incoming edges vindex 
sequence operations traverses objects attempting match full path expression comparison 
note oa satisfies clause may necessary scan operations find components select expression appear clause 
consider query oql form introduced section obvious alternative full path indexes place 
path indexes expensive maintain faster query time 
path indexes discussed detail gw :10.1.1.41.3258
select dbgroup member office exists age query plan indexes shown 
plan introduces new query operators vindex named obj 
vindex operator appears left child second join operator iteratively finds atomic objects value incoming edge labeled age placing oids slot oa 
operator appears operator iteratively places oa parents object oa age edge 
oem data may arbitrary graph structure object potentially parents age parents labels 
age existentially quantified query want consider parent age subobjects purpose query operator 
second operator finds parents oa object member edge placing oa 
want object oa named object dbgroup named obj operator checks 
traversed database index calls constructed valid oa scan operator find office subobjects returned result topmost project operator 
currently processing clauses lore considers subplans completely index bottomup discussed subplans completely scan top 
interesting research topic just begun address combine bottom index top scan traversals 
traversals reach predefined meeting point intersection objects discovered index calls scan operators identify paths satisfy clause 
appropriate meeting point depends fan fan vertices labels database requires statistical information 
update query plans query plan modularity able handle arbitrary lorel update statements adding single operator update query execution engine 
illustrate approach example update query section query plan find projects title lore tsimmis results placed oa query plan find members name clark results placed oa update create edge oa oa member example update query plan update member select dbgroup member dbgroup member name clark dbgroup project title lore title tsimmis query plan outlined 
left subtree update node computes clauses update 
example left subtree finds projects title lore tsimmis 
oa returned right subtree called evaluate query plan subquery right 
valid update assignment operators aqm 
example right subtree finds members name clark 
right subtree completes oa update node performs actual update operation valid operations create edge destroy edge modify atomic 
example update node creates edge labeled member pair objects identified subtrees 
clearly number optimizations possible update processing 
instance example right subtree update node uncorrelated left subtree needs executed 
currently perform optimization investigating 
bulk loading physical storage data added lore database ways 
user issue sequence update statements add objects create labeled edges load file 
case textual description oem database accepted load utility includes useful features symbolic shared subobjects cyclic data ability incorporate new data existing database 
lore arranges objects physical disk pages page number slots single object slot 
objects variable length lore places objects fit algorithm provides object forwarding mechanism handle objects grow large page 
addition lore supports large objects may span pages large objects useful multimedia types complex objects broad fanout 
objects clustered page depth manner primarily scan plans traverse database depth 
obviously possible keep objects close parents object may parents 
object multiple parents stored arbitrary parent 
object reached path originating named object deleted garbage collector 
novel features section provides brief overviews novel features lore external data manager dataguides 
due space constraints coverage cursory give reader flavor components 
details external data manager see mw 
details dataguides gw :10.1.1.41.3258
external data lore external data manager enables dynamic retrieval information data sources queries issued lore 
externally obtained data combined resident lore data query evaluation distinction types data invisible user 
external data lore provides way query distributed information sources essentially transforming lore information integration engine 
external object stored lore database functions placeholder external data specifies lore interacts external data source 
query processing execution engine discovers external object information fetched external source answer query fetched information cached lore database stale 
clearly possible approaches taken integrate external data fashion 
main motivation choosing approach outlined enable lore bring data wide variety external sources introduce variety argument types optimization techniques limit amount data fetched external source immediately useful answering query 
related tsimmis project stanford focused building wrappers provide oem interfaces arbitrary data sources able easily exploit sources external data lore 
see logical physical views small database external object shaded logical view seen user external data stored lore 
physical view shows lore encodes information associated external source fetched data 
sample database contains information member jim jim publication information obtained externally 
query processing scan operator notifies external data manager external object encountered 
external data manager may need fetch information external source provide back scan operator zero oids place oid external object 
query processing proceeds normal 
physical view simplified actual implementation shows specification external object includes location wrapper program fetches external data translates oem ii quantum indicates time interval fetched information stale iii set arguments limit information fetched call external source 
arguments sent external source come places query processed query defined values objects local database data defined constant values tied subgraph containing jim publications fetched jim data defined physical view logical view fetched data pub fetch query defined keyword name publications member jim name publications member quantum wrapper arg type value arg type query label logical physical views data nal object hard coded 
example data defined arguments seen arg arg respectively 
value atomic object pointed value edge arg sent data source argument 
query defined argument specification query label object value keyword specifies query processed predicate form member publications keyword sent external data source argument 
calls external source quickly dominate query processing time 
briefly mention ways external data manager attempts limit number calls 
single query result multiple calls external source due multiple bindings query defined arguments mechanism recognizing call external source subsume scheduled call different argument set eliminate second call 
second track argument sets previous queries determine previously fetched non stale information partially entirely subsumes information required current argument set 
detailed description argument sets optimizations appears mw 
dataguides lore database explicit schema query formulation query optimization particularly challenging 
knowledge structure underlying database writing meaningful lorel query may difficult general path expressions 
may manually browse database learn structure approach unreasonable large databases 
information structure database query processor may forced perform necessary 
example consider query plan discussed section finds offices group members older 
members office query plan needlessly examine member database 
dataguide concise accurate summary age project office project member building room title dbgroup member name dataguide structure oem database stored oem object 
possible path expression database encoded exactly dataguide dataguide path expressions exist database 
typical situations dataguide significantly smaller original database 
shows dataguide sample oem database 
lore dataguide plays role similar metadata traditional database systems 
dataguide may queried browsed enabling user interfaces client applications examine structure database 
seen section interactive dataguide important part lore web interface 
assuming role missing schema dataguide guide query processor 
course relational object oriented systems schema explicitly created data loaded lore dataguides dynamically generated maintained part existing database 
oem database dataguides satisfy desired properties specified accuracy conciseness 
example fuse leaf objects single object changing fact path expression encoded exactly adding superfluous paths 
turns certain dataguides easier keep consistent response updates underlying database 
addition dataguides support storage annotations objects properties set objects reachable path expression original database 
store annotation path expression assigning single object dataguide reachable path expression 
annotations useful storing sample atomic values reachable path expression specifying statistical chances finding outgoing edge certain label 
gw formal definitions dataguides provided algorithms build incrementally maintain dataguides support annotations :10.1.1.41.3258
discussion dataguides aid query formulation practice query optimization 
interfaces lore shown lore application programming interface api provides gateway lore user interface client application 
instance system textual interface passes user commands lore presents query results hierarchical display 
summarizing api describe web interface lore simple interactive fashion 
application programming interface lore api composed small collection classes 
client lore simply viewed single library accessible api classes methods declared single header file 
eventually hope move lore traditional client server model 
highest level api allows client program connect lore database submit queries commands process query results 
session lore database encapsulated instance class 
client connect specific database eventually disconnect finished 
clients submit lorel queries submit function 
submit lore system commands index creation updates 
called lorel query submit returns query result object 
instance initially contains oid actual value fetched database demand 
atomic objects client may request type value object 
traverse subobjects complex object client instantiates 
successive call iterator method returns different subobject label 
nesting instances client may perform arbitrary traversals oem objects 
web interface user connects graphical web interface visiting specific url choosing database 
user dataguide java java program featuring dataguide described section 
users quickly easily browse dataguide explore structure underlying database 
web interface user may submit textual lorel query select sample query 
furthermore style similar query queries may formulated submitted knowledge lorel dataguide select path expressions specify selection conditions 
currently dataguide queries express lorel queries simple path expressions clause conjunctive respect unique path expressions 
example screen snapshot java presentation dataguide 
dataguide summarizes existing database stanford database group similar structure larger sample database 
arrows accompany complex objects expand collapse subobjects 
diamond associated displayed label corresponding unique path expression root 
user clicks diamond dialog box pops user may view sample values select path expression query result add filtering conditions 
user selects path expression corresponding diamond rendered different color 
filtering conditions displayed corresponding label 
dataguide shown represents query select group members phd students research interest semistructured data stanford year 
user clicks go java program automatically generates equivalent lorel query sends lore processed 
regardless query submitted interface displays query results html hierarchical format easy read navigate 
formatting oem objects html leverage web browser support multimedia data gif files audio video 
hierarchical display oem readable perform small presentation transformations 
objects share label display label show values objects underneath 
example query result contains objects label project create html page begins single header projects followed values projects 
second complex oem objects active hyperlinks 
clicking link brings new html page showing subobjects complex object 
system status june lore system functional robust large subset lorel language 
consists approximately lines code 
language features external predicates functions implementation 
general path expressions implemented full generality substantial useful subset lore server sample databases available public 
users submit queries experiment features dataguides result browsing 
visit line demo see www db stanford edu lore 
addition lore system binaries platforms available web page 
considering possible enhancements extensions lore follows 
compatibility interoperability mentioned section covered detail aqm oem lorel translated odmg oql cat 
translation oem objects represented odmg objects lorel queries transformed pure oql queries method calls handle lorel features type coercion general path expressions 
proof concept translation implementing lorel top object oriented database management system 
note implementation enables storage semistructured oem structured odmg data single repository providing useful setting studying integration data models 
plan explore lorel translated sql implemented top object relational database management system 
performance issues date done little performance analysis lore 
number performance aspects want consider performance bottlenecks system scalability system extremely large databases comparing performance lore implementation lorel top see section 
significant additional research query optimization including query rewriting operation ordering selecting best indexes query plans exploiting information stored dataguide 
described section build lore link index order quickly find parents object reachable label 
alternatively augment storage manager store objects inverse parent pointers addition subobject child pointers 
plan compare performance storage manager inverse pointers current approach 
plan consider path indexes place 
interestingly functionality path indexes incorporated easily dataguide discussed gw :10.1.1.41.3258
currently expansions path expressions query paths done run time 
classes path expressions possible information dataguide expand regular expressions possible completions query compilation time 
plan explore compile time approach compare performance run time approach take 
new functionality process implementing transaction support concurrency control recovery 
aspects lore semistructured nature lore data requiring rethink aspects traditional solutions 
user interface area plan increase expressiveness dataguide queries full power lorel 
addition follow trend enabling database systems dynamically generate customized html displays query results gaf plan investigate sophisticated techniques customizing presentation oem objects web environment 
companion project extended oem lorel order treat changes data class concept similar system operates structured data ghj 
currently implementing model language top lore system 
initial underway define view trigger mechanisms appropriate semistructured data implement lore 
see agm discussion views context oem lorel 
applications appropriate semistructured dbms lore include significant amount text data plan incorporate special text type full text indexing system lore 
acknowledgments contributions lore project system implementation grateful alphabetically kevin haas matt jacobsen lahiri luo nestorov anand rajaraman hugo michael 
members stanford database group fruitful discussions lore lorel including alphabetically sudarshan chawathe joachim hammer sagiv jeff ullman janet wiener jun yang 
grateful anonymous referee careful reading helpful comments 
abi abiteboul 
querying semistructured data 
proceedings international conference database theory delphi greece january 
agm abiteboul goldman mchugh vassalos zhuge 
views semistructured data 
proceedings workshop management semistructured data pages tucson arizona may 
aqm abiteboul quass mchugh widom wiener 
lorel query language semistructured data 
journal digital libraries november 
bck blake consens larson snider tompa 
text relational database management systems sql sgml 
proceedings international conference applications databases pages sweden 
bdhs buneman davidson hillebrand suciu 
query language optimization unstructured data 
proceedings acm sigmod international conference management data pages montreal canada june 
bancilhon delobel kanellakis editors 
building object oriented database system story morgan kaufmann san francisco california 
bds buneman davidson suciu 
programming constructs unstructured data 
proceedings international workshop database programming languages dbpl 
bk beeri 
logical query language hypermedia systems 
information sciences 
cacs christophides abiteboul cluet scholl 
structured documents novel query facilities 
proceedings acm sigmod international conference management data pages minneapolis minnesota may 
cat cattell 
object database standard odmg 
morgan kaufmann san francisco california 
chawathe abiteboul widom 
representing querying changes semistructured data 
technical report stanford university database group february 
ccm christophides cluet moerkotte 
evaluating queries generalized path expressions 
proceedings acm sigmod international conference management data pages montreal canada june 
cm consens mendelzon 
expressing structural hypertext queries graphlog 
proceedings second acm conference hypertext pages pittsburgh pennsylvania november 
com ieee computer 
special issue heterogeneous distributed database systems december 
gaf 
illustra web module 
technical report informix february 
available www informix com informix htm 
ghj ghandeharizadeh hull jacobs 
elevating deltas class citizens database programming language 
acm transactions database systems 
gra graefe 
query evaluation techniques large databases 
acm computing surveys 
gw goldman widom :10.1.1.41.3258
dataguides enabling query formulation optimization semistructured databases 
proceedings international conference large data bases athens greece august 
kks kifer kim sagiv 
querying objectoriented databases 
proceedings acm sigmod international conference management data pages san diego california june 
ks konopnicki shmueli 
qs query system world wide web 
proceedings international conference large data bases pages zurich switzerland september 
lit litwin 
linear hashing new tool file table addressing 
proceedings international conference large data bases pages montreal canada october 
lmr litwin mark roussopoulos 
interoperability multiple autonomous databases 
acm computing surveys 
lss lakshmanan sadri subramanian 
declarative language querying restructuring web 
proceedings sixth international workshop research issues data engineering ride new orleans february 
mmm mendelzon mihaila milo 
querying world wide web 
proceedings conference parallel distributed information systems pdis december 
full version appear journal digital libraries 
ms melton simon 
understanding new sql complete guide 
morgan kaufmann san francisco california 
mw watanabe 
queries structure hypertext 
proceedings conference foundations data organization fodo pages 
springer verlag 
mw mendelzon wood 
finding regular simple paths graph databases 
siam journal computing 
mw mchugh widom 
external information dbms semistructured data 
proceedings workshop management semistructured data pages tucson arizona may 
patrick neil 
model architecture performance 
proceedings nd international workshop high performance transaction systems pages asilomar ca 
papakonstantinou gupta garcia molina ullman 
query translation scheme rapid implementation wrappers 
proceedings fourth international conference deductive object oriented databases singapore december 
pgmw papakonstantinou garcia molina widom 
object exchange heterogeneous information sources 
proceedings eleventh international conference data engineering pages taipei taiwan march 
qrs quass rajaraman sagiv ullman widom 
querying semistructured heterogeneous information 
proceedings fourth international conference deductive objectoriented databases pages singapore december 
quass widom goldman haas luo mchugh nestorov rajaraman abiteboul ullman wiener 
lore lightweight object repository semistructured data 
proceedings acm sigmod international conference management data page montreal canada june 
demonstration description 
sk stonebraker 
postgres generation database management system 
communications acm october 
sl sheth larson 
federated database systems managing distributed heterogeneous autonomous databases 
acm computing surveys 
ya yan 
integrating retrieval system object oriented database system 
proceedings twentieth international conference large data bases pages santiago chile september 
zloof 
example data base language 
ibm systems journal 
