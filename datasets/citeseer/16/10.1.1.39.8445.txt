reconstructing minimum spanning tree deletion node das michael loui march lucent technologies po box il 
done part author doctoral dissertation university illinois urbana champaign 
graduate college university illinois urbana champaign hall wright st champaign il 
supported part national science foundation ccr updating minimum spanning tree mst basic problem communication networks 
consider single node deletions msts 
undirected graph nodes edges mst node node replacement minimum weight set edges connect components gamma sequential algorithm parallel algorithm find simultaneously 
sequential algorithm takes log time mff time edges weight 
parallel algorithm takes log time processors crew pram 
communication networks minimum spanning trees msts basic network tasks broadcast leader election synchronization 
updating mst changes network topology fundamental problem 
update msts single node deletions 
graph nodes possible instances single node deletion 
mst informally problem node replacements update instances single node deletion 
updating case separately ways combine different updates additional motivation network algorithms rely updates msts 
example spine routing algorithms sivakumar das bharghavan ad hoc networks msts approximate minimum connected dominating sets 
topology ad hoc network changes frequently algorithms may precompute updates mst 
formally nodes edges 
assume nodes distinctly labeled total ordering 
pair distinct nodes assume edges distinct weights unique mst 
edge weights distinct distinct follows 
wt denote weight edge assign triple wt 
triples ordered lexicographically 
triple distinct mst triples unique 
gamma graph node incident edges deleted 
problem node replacements determine mst gamma 
assume biconnected gamma connected mst 
unique mst gamma graph node deleted incident edges deleted 
set edges define gamma graph node set gamma edge set gamma union set edges gamma mst gamma call node replacement node equivalent finding nodes ffi tree degree node number edges incident gamma ffi connected components jr ffi gamma 
algorithms 
sequential algorithm find node replacements fnr takes log time general 
edges weight fnr takes mff time ff inverse ackermann function 
value ff constant ff 
parallel algorithm find node replacements parallel fnrp takes log time processors crew pram 
help explain fnr fnrp define component graph derived gamma vertices correspond connected components gamma 
distinguish node vertex 
edge edge edges correspond edges incident connect different components gamma result exactly set edges mst 
think fnr fnrp simulating mst algorithms concurrently 
related chin time algorithm 
comparison fnr faster graphs log 
words dense graphs fnr faster 
presents parallel algorithm update mst single node deletion 
concurrent versions algorithm determine delta maximum tree degree method takes log log delta time min log processors crew pram 
similarly johnson metaxas parallel algorithms determines connected components finds mst graph 
algorithm determine adjacency lists 
second algorithm explicitly find mst 
total algorithms take log time processors crew pram log 
summary parallel algorithms algorithm fastest delta log gamma algorithms johnson metaxas fastest delta log gamma fnrp requires log dense graphs 
gamma graph edge deleted 
edge replacements problem aer determine mst gamma edge aer similar simpler 
aer dixon rauch tarjan time sequential algorithm dixon tarjan log time parallel algorithm uses theta log processors crew pram 
algorithms mst verification algorithms 
combined graph transformation tarjan mst verification algorithms find edge replacements 
update general mst problem comprises deletion insertion weight change 
single edge update sequential algorithm frederickson combined sparsification technique eppstein galil italiano determine edge replacement tree edge log time update time preprocessing graph 
das ferragina improvements ferragina parallel algorithm single edge updates 
update algorithm takes log time doing log erew pram 
researchers consider node updates multiple edge updates 
crew pram algorithms deletions log processors 
algorithms respectively take log time single edge deletion log log time edge deletions log log ffi time deletion single node log log time multiple node deletions minf deleted ffi ng 
johnson metaxas erew pram algorithms node insertion updates 
single node insertion algorithm takes log time log processors 
addition algorithm part fnrp described section 
node insertions algorithm takes log log time kn log log processors 
cheng kumar distributed algorithm maintains mst multiple edge node deletions insertions 
message complexity algorithm fm rn edge failures edge recoveries occur 
randomization decrease time complexity sequential algorithms total parallel algorithms 
karger klein tarjan describe randomized sequential algorithm determines mst time high probability 
similarly cole klein tarjan randomized parallel algorithm finds mst expected 
fnr overview fnr fnr sequential algorithm determines log time 
fnr takes mff time edges weight 
recall wt denotes weight sorting edges wt takes log time 
assume fnr label edges order weight gamman wt wt delta delta delta wt gamman 
determine fnr implicitly simulates kruskal mst algorithm 
explicitly run kruskal algorithm take omega gamma mn time 
modify star transformation defined section fnr operates explicitly graph 
fnr proceeds stages stage fnr processes fundamental cycle unique cycle formed adding node loop edge 
stage fnr concentrates nodes 
give overview fnr 
denote graph stage denote mst stage fundamental cycle stage fnr executes procedure 
fnr checks non trivial 
trivial consists endpoints loop 
non trivial fnr traverses checking node 
denote component graph stage kruskal algorithm 
fnr checks loop 

loop added 

derived merging nodes 
sections explain specific nodes merged 
steps fnr uses union find operations 
fnr uses union find operations total subsets elements total fnr takes xff time total 
details fnr sections show union find operations suffice fnr 
kruskal algorithm key fnr simulating kruskal algorithm kruskal algorithm terms 
kruskal algorithm acts ffi vertices connected subset edges fragment mst subtree mst formed execution mst algorithm kruskal 
intuitively kruskal algorithm grows multiple fragments mst 
kruskal algorithm proceeds stages 
stage kruskal algorithm considers edge connects different fragments mst kruskal algorithm forms fragment consisting original fragments plus effect added mst 
kruskal algorithm merges endpoints logical entity 
call result merge operation 
general set vertices represents fragment mst 
graph gamma stages kruskal algorithm edges 
say outgoing stage connects different loop 

nodes assume vertices labels total ordering 
representative vertex smallest label 
vertex contained representative vertex denoted rep representative kruskal algorithm merges fragments represented representatives vertices set value 
shows simple example kruskal algorithm important concepts fragment merge representative 
carry operations kruskal algorithm union find operations sets vertices partition 
initially ffi sets vertex set ffi vertices 
stage kruskal algorithm represents sets 
representative set smallest labeled vertex set 
merging corresponds union operation applied sets 
fragments stage stage stage fragments isolated vertices fragments fragment kruskal algorithm terms fragments 
star transformation explain star transformation 
denote edge set tree edge edge edge edge gamma 
star transformation consists changes 
replace ffi star nodes ffi star edges ffi 
name star transformation node replaced star 

edge reassign endpoints 

assume rooted node root parent node root reassign endpoints tree edge parent ith child 
root choose node ffi 
result star node root 

graph results changes 
tree spans nodes edges comprise star edges reassigned tree edges 
illustrates star transformation 
star node corresponds vertex 
manipulating star nodes directly fnr simulates operations vertices 
supernode set star nodes 
fnr maintains invariant invariant fnr node star nodes contained supernode stage fnr corresponding vertices contained stage kruskal algorithm 
details fnr stated fnr explicitly perform union find operations vertices 
fnr performs operations star nodes representative supernode star node supernode smallest label representative star node stage representative supernode solid edges star edge star edge star edge solid edges star transformation 
contains rep denote representative 
merging supernodes means setting representatives value 
lca lowest common ancestor star nodes edge endpoints lowest common ancestor edge lca lca 
concepts explain rest fnr 
stage fnr checks trivial 
recall trivial loop terms star nodes trivial rep rep 
check uses find operations find rep rep 
suppose non trivial fnr traverse 
recall section fnr traverses process node outgoing 
traverse fnr finds lca follows 
supernodes contain respectively 
supernode parent supernode lca supernode repeats sequence 
supernode rep 
refer lca 
result way label nodes representative supernode root supernode 
lemma states star nodes lemma fnr check loop 
lemma suppose node 
lca exactly star nodes 
lca exactly star nodes 
connect lemma star node represent vertex ffi 
case lemma case loop rep rep 
example case 
case lemma case loop rep rep 
example case 
loop fnr adds 
simulate merging vr kruskal algorithm fnr merges formally fnr sets rep rep 
lca fnr merges call sibling merge 
hand lca merged call parent child merge 
example illustrate details fnr 
middle graph shows result star transformation applied stage star node rep non trivial rep rep 
fnr determines lca traverses hc traverses hd fnr checks loop 
fnr uses rep rep rep rep rep rep fnr sets rep rep parent child merge 
rep rep fnr sets rep rep sibling merge 
note rep rep merged analysis improvement fnr determine total time fnr add number union find operations stage 
star transformation stage example fnr details 

check endpoints fnr uses find operations total 

merge pair star nodes fnr uses union operation 
ffi star nodes fnr performs total ffi gamma merges corresponding total ffi gamma gamma 
fnr uses gamma union operation merges 

traverse check representatives star nodes fnr uses number operations number operations edge times number edges non trivial cycle times number non trivial cycles 
edge fnr uses find operations 
jc denote number edges 
fnr uses jc find operations non trivial 
worst case pair star nodes merged stage gamma cycles non trivial 
cycle traversal uses delta max jc union find operations 
max jc gamma 
fnr uses gamma gamma find operations traverse total fnr uses gamma gamma gamma union find operations total ff time 
initial bold stage bold bold finish stage stage note traversed times 
third time unnecessary example fnr unnecessary traversals 
illustrates improve fnr 
example fnr traverses times stages may traverse stages 
fnr traverses stage fnr merge incident fnr traverses stage fnr merge star nodes different stars 
fnr traverses stage fnr traverses third time 
improve fnr modify traversed times 
need definition 
edge processed stage edge 
suppose parent say replaces respect conditions met 
edge 

endpoint 
gamma replaced respect conditions mean connects different components gamma contains condition means minimum weight edge connects components 
similar definition applies replacing respect 
consequently modify fnr follows 
tree edge suppose fnr traverses time stage fnr merges endpoints traversal replaces respect fnr merges endpoints second time fnr traverses preceding modification fnr deals edges implicit simulations kruskal algorithm changed 
cycle traversals fnr traverses edge twice 
jt denote number edges jt denote number edges note jt jt ffi gamma gamma gamma gamma result cycle traversals gamma union find operations operations 
improvement fnr uses gamma gamma union find operations cf 
equation 
gamma gamma operations take mff time 
edges weight sorting time dominates 
case fnr takes log time 
correctness fnr correctness simulation kruskal algorithm follows invariant 
recall invariant states node star nodes contained supernode stage fnr corresponding vertices contained stage kruskal algorithm 
see full correctness proof fnr discussion gives highlights proof 
connect kruskal algorithm fnr describe different representations shown 
suppose outgoing connects different transition merged 
representative representative representative merging kruskal algorithm merges split outgoing outgoing 
suppose case lemma holds connects vertices 
argument case lemma similar 
definition representative rep rep furthermore stage rep rep terms fnr star node represents applies lower case denotes star node consequence invariant supernode corresponding supernode corresponding representative representative similarly rep rep stage fnr merges result rep rep reestablish invariant stage consider cases 
node outgoing described preceding paragraph fnr careful merge pair supernodes corresponds pair merged stage kruskal algorithm 

node outgoing stage fnr kruskal algorithm affect rep rep merged see lemma bold kruskal algorithm star transform invariant fnr algorithm rep rep merged invariant relationships fnrp overview fnrp fnrp parallel algorithm determines log time processors crew pram 
sections respectively describe fnrp identifies outgoing edges merges nodes parallel 
section explain shorten iteration fnrp takes log time 
fnrp implicitly simulates mst algorithm takes log iterations processors crew pram 
iteration algorithm performs basic operations 
find minimum weight outgoing edge minimum weigh edge loop 

merge endpoints 
suppose gamma 
algorithm merges 

remove loops 
fnr fnrp explicitly act 
fnrp acts graph resulting star transformation applied distinguish parallel algorithms sequential algorithms iterations superscripts parallel algorithms stages subscripts sequential algorithms 
example component graph resulting gamma iterations algorithm graph resulting gamma iterations fnrp identifying outgoing edges generic node level node root level children level likewise level generic edge defined lca 
fix particular node 
derive essential characteristics outgoing edge 
recall mst gamma collection connected components left deleted component graph representing gamma single vertices components 
outgoing edge 
edge lca lca lca lca outgoing expression weight 
connects different components gamma terms incident important lca ancestor shown 
outgoing edge lca 
summary identify outgoing edges may put fnrp looks edges incident level 
recall algorithm seeks 
joins suffices consider node child define minimum weight edge incident incident level equal 
subtree consisting descendants 
weight expressed minff jx edge weights distinct value uniquely identifies edge 
evaluate expression supernode algorithm implemented say uses rake compress algorithm 
rake compress algorithm takes log time log processors erew pram 
determine nodes collectively remove dependency definition delta delta 
place dependency include parameter level edges 
define minimum weight edge incident level equal supernode corresponding node level define minff jx definitions cases weight gamma parent child merge sibling merge 
fnrp know parent child merge sibling merge apply fnrp evaluates gamma 
fixed node helps evaluate values gamma 
determining fnrp evaluates 
height fnrp separate rake compress algorithms level total algorithms take log time log processors crew pram 
note processors needed achieve time bound crew pram 
fnrp allocates processor input value 
glance allocation requires processors 
node level null incident edges level number edges incident node ffi degree ffi 
fnrp requires processors total evaluate log time 
merging nodes fnr merge nodes fnrp updates representatives 
define representatives algorithm fnrp 
algorithm kruskal algorithm represents fragment mst 
iteration representative node smallest label 
similarly representative vertex representative fnrp representative supernode denoted rep star node smallest label 
representative star node denoted rep rep 
supernodes iteration merged supernode iteration fnrp assigns representative 
suppose merged rep rep rep rep minimum values 
fnrp uses parallel prefix update algorithm determine rep update value processors involved computation 
total supernodes iteration parallel prefix update algorithm takes log time processors crew pram 
remove loops fnrp uses updated representatives 
fnr outgoing respect iteration loop 
loop fnrp allocates processor edge traverse 
node processor checks star nodes 
lemma cases 
lca star nodes 
case outgoing respect iteration rep rep 

lca star nodes 
case outgoing respect iteration rep rep 
shortening tree processor edge fnrp uses processors total 
time traverse cycles max jc max jc 
unfortunately max jc iteration fnrp takes time 
total fnrp take log time 
model fnrp requires crew pram processors may need read rep concurrently star node reduce time iteration log transform tree max jc log 
total fnrp takes log time processors crew pram 
heavy paths technique dixon tarjan shorten described section 
technique takes log time log processors 
heavy paths technique alters structure fnrp requires additional phase reverse effects changes recall subtree consisting descendants 
number nodes 
tree edge parent edge heavy 
heavy path consists maximally long chain heavy tree shortening heavy path bold heavy edges bold heavy path technique dixon tarjan tree heavy path edges long effects heavy path technique 
edges see example path bold 
heavy path top node node closest root bottom node node farthest root nodes heavy path called interior nodes 
heavy path shortened making bottom node interior nodes immediate children top node 
top node heavy path 
define number edges heavy path 
tree shortening gamma new children 
consequence tree shortening component graphs top nodes interior nodes heavy paths changed 
node define tree shortening component graph corresponding superscript denotes tree shortening 
addition define vertices 
top node gamma new vertices ffi ffi ffi gamma 
interior node heavy path 
rearrange nodes loss generality heavy path goes rightmost child result tree shortening ffi merged vertex 
summary ffi ffi special cases 

tree shortening component graph top node heavy path tree shortening 

tree shortening component graph interior node heavy path tree shortening 
explain detail fnrp deals changes tree shortening 
component graphs bottom nodes nodes heavy paths changed tree shortening fnrp procedures described sections determine nodes replacements 
addition node affected tree shortening top node interior node 
tree shortening change gamma gamma ffi fnrp procedures sections determine edges mst gamma gamma ffi fnrp reverses effects tree shortening observations 
top node note edge ffi ffi ffi gamma corresponds edge ffi interior node edge connects ffi 
edge level greater edge connects ffi 

edge level equal edge connects 
top node interior node heavy path determining edges mst gamma gamma ffi fnrp executes mst update algorithm johnson metaxas simulate insertion ffi mst update algorithm johnson metaxas requires minimum weight edges ffi rest 
fnrp determines edges modified rake compress algorithm see section 
fnrp explicitly insert ffi fnrp correctly determines affected nodes total tree shortening mst update algorithm johnson metaxas take log time processors crew pram 
time number processors fnrp increase result heavy path tree shortening 
correctness fnrp correctness simulation algorithm follows invariant fnrp node star nodes contained supernode kth iteration fnrp corresponding vertices contained kth iteration algorithm 
proof invariant similar proof invariant 
proof relies mainly relationship star nodes vertices plus simulation merges 
correctness rake compress algorithm fnrp follows directly correctness standard rake compress algorithm 
section merely clarify time analysis rake compress algorithm change implementation 
addition time bound follows discussion chapter rake takes log time rake compress different parts tree asynchronously log time 
conditions rake operation takes log time rake compress operations overlap sufficient rake compress algorithm take log time processors crew pram proven theorem 
concluding remarks sequential algorithm fnr determines linear time edges weight 
result naturally leads questions 
sequential algorithm takes log time edges weight 

edges weight remove ff time factor 
example gabow tarjan special disjoint set union algorithm takes time linear number operations 
fnr sibling merges parent child merges fnr algorithm gabow tarjan 
fnrp shorten reduce time log log processors crew pram 
result leads questions 
methods reduce time fnrp log time match johnson metaxas log time 

weaken model computation erew pram achieve time processor bounds 
mentioned section cheng distributed algorithm multiple edge node insertions deletions 
unfortunately basic distributed mst algorithms appear lend implicit simulation fnr fnrp 
designing efficient distributed algorithm remains open problem 
sivakumar das bharghavan 
spine routing ad hoc networks appear acm baltzer cluster computing journal special issue mobile computing 
chin 
algorithms updating minimal spanning trees 
comput 
system sci 

tarjan 
efficiency linear set union algorithm acm apr 

handling vertex deletion updating minimum spanning trees 
information processing letters apr 
johnson metaxas 
connected components lg jv parallel time crew pram 
systems sciences 
johnson metaxas 
parallel algorithm computing minimum spanning trees 
algorithms 
dixon rauch tarjan 
verification sensitivity analysis minimum spanning trees linear time 
siam comput 
dec 
dixon tarjan 
optimal parallel verification minimum spanning trees logarithmic time 
algorithmica 
tarjan 
applications path compression balanced trees 
acm oct 
frederickson 
data structures line updating minimum spanning trees applications 
siam comput 
nov 
eppstein galil italiano 
sparsification technique speeding dynamic graph algorithms 
acm 
das ferragina 
erew parallel algorithm updating mst 
appear parallel processing letters 
ferragina 
technique speed parallel fully dynamic algorithms mst 
parallel distributed computing 

optimum parallel algorithms multiple updates minimum spanning trees 
algorithmica 
johnson metaxas 
optimal algorithms single multiple vertex updating problems minimum spanning tree 
algorithmica 
cheng kumar 
protocol maintain minimum spanning tree dynamic topology 
computer communications review aug 
karger klein tarjan 
randomized linear time algorithm find minimum spanning trees 
acm mar 
cole klein tarjan 
linear parallel algorithm finding minimum spanning trees 
proceedings th annual acm symposium parallel algorithms architectures 
kruskal 
shortest spanning subtree graph traveling salesman problem 
proceedings american mathematical society 
das 
spanning tree algorithms routing connectivity communication networks 
ph dissertation dept electrical computer engr univ illinois urbana champaign 
berg 
programming games transportation networks 
new york john wiley 
aj 
parallel algorithms 
addison wesley 
reid miller miller 
list ranking parallel tree contraction 
synthesis parallel algorithms edited reif 
morgan kaufmann 
gabow tarjan 
linear time algorithm special case disjoint set union 
comput 
system sci 

awerbuch 
optimal distributed algorithms minimum weight spanning tree counting leader election related problems 
proceedings th annual acm symposium theory computing 
faloutsos molle 
optimal distributed algorithm minimum spanning trees revisited 
proceedings th annual acm symposium principles distributed computing 
gallager 
distributed algorithm spanning trees 
acm trans 
programming lang 
systems jan 
garay kutten peleg 
sublinear time distributed algorithm minimum weight spanning trees 
siam comput 
feb 

