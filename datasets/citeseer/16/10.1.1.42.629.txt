appears proceedings th annual intl 
symposium computer architecture isca pp 
may 
hardware driven profiling scheme identifying program hot spots support runtime optimization matthew andrew trick christopher george john gyllenhaal wen mei hwu center reliable high performance computing department electrical computer engineering university illinois urbana il email george crhc uiuc edu presents novel hardware approach identifying profiling monitoring hot spots order support runtime optimization generalpurpose programs 
proposed approach consists set tightly coupled hardware tables control logic modules placed retirement stage processor pipeline removed critical path 
features proposed design include rapid detection program hot spots changes execution behavior runtime tunable selection criteria hot spot detection negligible overhead application execution 
experiments spec benchmarks large windowsnt applications demonstrate promise proposed design 
optimizing compilers gain significant performance benefits performing code transformations program runtime profile 
traditionally profiles collected running instrumented version executable 
profiling technique incurs large overhead applications profiled prior distribution set sample inputs 
consequently adaptively optimized order account changes program behavior take advantage variations production system 
low overhead methods profiling developed statistical sampling 
basic approach remains profile information program entire execution averaged large database fed back static compiler 
approach undesirable reasons 
entire profile application continuously maintained runtime production system 
profile represents average behavior extended period time 
significant length time may pass variations program behavior detected 
addresses problems presenting new method rapidly accurately transparently collecting profile information minimal runtime overhead 
proposed hardware approach provides strong foundation runtime optimizing system 
static optimizations essential application performance additional opportunities exploited continuously profiling code 
instance types optimizations performed specific runtime information 
include optimizing code value invariance inlining dynamically linked library functions 
traditional static approach disadvantage aggressive optimization applied selectively average profile weights criteria 
optimizations cause excessive code growth example applied conservatively static compiler 
runtime optimizer aggressively apply optimizations targeting small regions program represent critical execution path particular time 
support targeted optimization runtime profiler extends traditional role profilers captures temporal information reporting relative importance basic blocks 
profiler identifies code optimized quickly compared amount execution time subsequently spent code 
additionally code yields significant short term benefit priority runtime optimizer may memory disposal retain optimized code indefinitely 
observed applications exhibit behavior conducive runtime profiling optimization 
example program execution occurs distinct phases phase consists set code blocks executed high degree temporal locality 
collection intensively executed blocks small static footprint represents highly favorable opportunity runtime optimization 
refer sets blocks corresponding periods execution hot spots 
runtime optimizer take advantage execution phases isolating group hot spots active phase 
ideally aggressively optimized code deployed early phase optimized code execution shifts phase 
optimized hot spots longer active may discarded necessary reclaim memory space newly optimized code 
common types programs exhibit execution phase behavior compilers graphics packages scripting engines 
applications typically implement wide range functionality intractable aggressively optimize possible runtime scenario 
programs benefit runtime optimization divided focused tasks phases execution 
compilers example allow user select variety optimizations behavior runtime perform multiple passes input exercising different functionality time 
graphics packages allow wide variety tasks selected runtime may perform intensive transformation data 
furthermore transformations highly tuned data set available optimization 
similar situation exists scripting engines sizeable number high level commands available perform intensive operations data 
single script small selection routines may utilized 
concrete example behavior seen perl running training input spec benchmark suite 
shown benchmark contains primary distinct phases execution hot spot phase 
hot spot runs instructions hot spot hot spot 
hot spot consists reading dictionary storing internal data structure 
second hot spot processes word dictionary third selected set words dictionary 
second hot spots serves excel execution sample branches sample branch address primary hot spots 
important branches executed execution sample perl 
data point represents branch executed times sample duration branches 
sample period branches 
lent example runtime optimization needed 
input script causes perl call split breaks input word individual letters call sort sorts letters 
function split calls complicated regular expression matcher empty regular expression 
region code benefit partial inlining code layout followed classical optimization exercised blocks regular expression matcher split 
static compiler perform optimization larger code size compile time benefit input scripts 
second function sort calls library function qsort calls perl specific comparison function 
half code comparison function executed single characters sorted 
example inlining important frequent calls comparison function 
link time optimizer runtime optimizer needed support inlining library application boundaries 
shows branch profile typical branch sample second hot spot clearly demonstrates small number static branches account vast majority dynamic instances sample 
strategy detecting runtime optimization opportunities consists stages 
initially profiler detect hot spots emerge execution 
track execution frequency code blocks relatively short period time 
set blocks fit characteristics hot spot profiler notifies runtime optimizer 
detection stage arc weights accumulated sorted static branches 
profile distribution second primary hot spot perl 
branches sorted frequent 
hot spot aid profile driven optimizations 
hot spot detected add hot spot monitor table disable profiling hardware 
second stage monitor program compare executing code table currently active hot spots 
execution monitored hot spots profiler enabled allow detection new hot spots 
rest organized follows section explores mechanisms performing hot spot detection runtime section details experimental environment results section examines research related endeavors section summarizes efforts directions 
system components proposed hot spot detection scheme uses criteria classify region code hot spot 
region small static code size facilitate rapid optimization 
second hot spot active certain minimum time interval opportunity benefit runtime optimization 
instructions selected region code account large majority dynamic execution active time interval 
criteria sufficient detect code regions benefit runtime optimization placing unnecessary restrictions type hot spots identified 
proposed scheme detect execution hot spot gather profile data hot spot 
valid hot spot discovered operating system notified invoke runtime optimizer 
additional hardware ensure notifications occur significant new hot spots detected 
proposed implementation consists components hot spot detector hardware collects control flow profiles identifies collection important blocks comprise hot spot 
hot spot detector contains branch behavior buffer bbb store branches profile data hot spot detection counter hdc track percentage dynamic execution accounted hot branches 
monitor table hardware maintains collection previously discovered hot spots runtime optimizer examined 
monitors program execution noting execution previously detected hot spots profiling restarted 
operating system support software reads hot spot information bbb adds hot spot blocks monitor table 
assemble blocks region order call runtime optimizer 
hot spot detector monitor table easily tolerate large latency recording information program execution 
proposed hardware deeply pipelined located critical path affect processor performance 
invoking operating system incur penalty experimental data shows number operating system interrupts insignificant relative total execution time 
operating system typically invoked new optimization opportunity detected 
subsections describe main components context single process system 
section concludes description extensions necessary multiprocess system enhancements 
hot spot detector step process identifying hot spots detect frequently executed blocks 
employing hardware scheme operating system overhead eliminated portion process detection completely transparent system 
blocks easily collected hardware gathering branches define boundaries 
examining branch execution direction information control flow graph arc weights constructed 
hardware scheme reasonably accurate branch addr flag candidate taken cntr cntr exec saturating adder zero hot spot detected branch address branch behavior buffer hot spot detection counter refresh timer reset timer 
hot spot detector hardware 
profile information collected benefit runtime optimization effort 
branch behavior buffer achieve collection goals hardware cache structure reminiscent branch target buffer btb 
depicted structure called branch behavior buffer bbb indexed branch address contain fields tag branch address branch execution count branch taken count branch candidate flag 
processor retires branch instruction instruction address provide index bbb 
time branch address bbb execution counter incremented 
branch taken taken counter incremented 
combination values constitutes arc weight profile executed code 
note possible branch execute times represented execution counter 
execution counter reaches maximum value hardware stops incrementing execution taken counters preserve ratio 
long number branches reach saturation small profile accurately represent relative importance branches 
purpose bbb collect profile frequently executed branches corresponding blocks account vast majority dynamically executing instructions 
branches execute frequently profiling may part potential hot spot refer branches candidate branches 
order determination executed branch temporarily allocated entry bbb monitored short interval 
execution branch frequent interval execution counter surpass predefined candidate threshold 
candidate threshold associated single bit execution counter shown 
bit triggered cand flag address tag executed cntr taken cntr 
fields branch behavior buffer entry 
didate flag set entry remains marked candidate execution counter continues collect profile data 
bbb needs large hold candidate branches potential candidate branches interval 
ensure frequently executing branches marked candidates refresh timer periodically clears entries bbb surpassed candidate threshold 
refresh timer simply global counter increments time branch instruction executed triggers refresh bbb reaches certain value 
refreshing bbb flushes insignificant entries ensures branch marked candidate accounts minimum percentage total dynamic branches fixed interval 
minimum percentage execution required candidate branches expressed candidate ratio 
candidate rat io size refresh timer bits candidate threshold represented bit execution counter 
accurately represent hot spot bbb able allocate entries branches important hot spot 
bbb size equal larger total number branches hot spot 
bbb small insignificant branches may prevent important branches entering refresh intervals 
statistically important branches eventually get entries subsequent refresh intervals profile accuracy may somewhat compromised reporting hot spots may delayed 
problem possibility indexing conflicts inherent cache structure 
seen btb cache making structures set associative eliminates indexing conflicts 
organized set associative cache bbb behavior differs terms replacement policy 
btb cache lru policy order reduce cache misses 
example suppose instructions map cache location currently cache 
accessed times followed long stream 
replaced cache cache misses result access lru policy predicts access previous replace order save third accessed resulting case lru policy able reduce misses replacement required 
bbb accurately record frequently executed blocks profiles accessed 
implementing lru replacement policy allowing rare block replace frequently executed block unacceptable 
branches conflict existing bbb entries simply discarded 
function branch replacement controlled aforementioned refresh timer 
serious conflict occurs branches important map cache location 
long conflicts relatively rare runtime optimizer recover inferring profile value missing branches 
kirchhoff law heuristics input output weights block estimated branches accurately profiled 
cache btb collect information important instructions branches respectively infeasible combine bbb structures 
addition previously discussed replacement policy differences btb cache potentially critical path adding complexity structures may adversely affect cycle time 
addition true branch behavior affect bbb counters incorrectly speculated accesses allowed affect bbb entries 
bbb counters structures updated branches resolved strict timing constraints complex hardware required interface btb cache warrant cost storing bbb entries separately 
bbb best implemented stand structure retirement phase simplicity inherent accuracy 
hot spot detection counter candidate branches identified branch behavior buffer monitored determine corresponding blocks may considered hot spot useful candidates optimization 
criteria satisfied group candidate blocks dubbed hot spot 
candidate blocks active specified minimum amount time 
second candidate branches account certain percentage total branches executed time 
define minimum percentage time interval threshold execution percentage actual dynamic percentage interval candidate execution percentage 
order minimize disruption system hot spot detection perform detection hardware hot spot detection counter hdc shown 
hot spot detection counter counter detect set candidate branches reaches threshold execution percentage 
counter implemented saturating adder initialized maximum value 
counts candidate branch executed counts non candidate branch executed determination discussed 
candidate execution percentage exceeds threshold percentage counter begins move 
candidate execution percentage remains higher threshold long period time counter decrement zero 
point operating system triggered interrupt setting flag checked time operating system invoked 
difference candidate execution percentage threshold execution percentage determines rate counter decrements rate hardware identifies hot spot 
corresponds observation hot spots desirable account larger percentage total execution run longer period time 
assumed hot spots active longer period time spurious execution continue run optimization complete 
experiments shown approach quite detect major hot spots benchmarks 
primary scenarios hot spot hdc reach zero 
branches execute sufficient frequency marked candidates collectively constitute large percentage total execution 
classified hot spot optimized small benefit 

number branches execute frequently considered candidates large fit bbb 
branches able enter bbb account large percentage execution identified hot spot 
may happen execution profile region flat 
benefit may gained optimizing frequent branches overhead optimizing large region prohibitive 

execution profile consistent 
case small set branches may account large percentage execution short time execution shifts different region code hot spot detection counter saturates 
optimizing region code executes spuriously yield benefit 
scenarios branches collectively constitute hot spot may locked bbb 
hdc identified branches hot spot possible execution shifted new potentially important region code attractive optimization opportunity 
bbb periodically purged reset timer room new branches 
timer similar refresh timer bbb clears entries table non candidate branches 
reset interval large allow hdc saturate valid hot spots small allow quick identification new phase execution 
threshold execution percentage required hot spot selected hdc increment decrement values chosen 
decrement value candidate branch encountered candidate hit increment value branch table marked candidate candidate 
actual candidate execution percentage 
counter decrease candidate execution percentage multiplied decrement value greater percentage non candidates multiplied increment value 
represented equation gammad gamma rearranging terms solving yields formula minimum percentage equation shows counter decreases percentage execution threshold determined increment decrement values size hdc chosen achieve minimum detection latency 
minimum number branches executed hot spot detected 
detection occur inequality hold gammad gamma gammah dc max latency detecting hot spot determined equation hdc max gamma candidate execution percentage surpasses threshold detection latency decreases 
latency decreased independently candidate execution percentage increasing remains constant 
monitor table purpose monitor table determine hot spot profiling necessary 
hardware mechanism continuously running watching program execution comparing executing branches determined hot spots 
program executing known hot spots system said monitor mode steady state mode execution 
system enters profile mode bbb enabled monitor table determines execution known set hot spots 
note monitor table continues operate profile mode watching execution return set known hot spots 
situation occur bbb deactivated unnecessary costly extract possibly optimize hot spot processed 
new hot spot operating system notified extracts hot spot bbb new hot spot entered monitor table bbb deactivated 
new optimized code ready deployment branches new code added table just prior deployment avoid hot spot detection optimized code 
order system detect execution known set hot spots hardware aware hot spots identified 
ideal monitor table addresses branches known hot spots placed tag array shown 
branch executed instruction address looked tag array 
presence array indicates execution hot spot 
counter called monitor counter track long term execution trends operates hdc 
counts monitor table valid bit branch addr branch address saturating adder profiling zero max start profiling monitor counter 
monitor table hardware 
hot spot branch executed counts non hot spot branch executed 
monitor counter saturates maximum value monitor mode high percentage branches outside known hot spots executed indicating possible transition new hot spot 
time profile mode resumed 
similarly system profile mode monitor counter reaches zero program execution returned set known hot spots 
time bbb deactivated monitor mode resumed 
monitor mode entered profile mode monitor counter initialized zero indicating execution hot spot 
valid assumption monitor counter just saturated zero profile mode hot spot just detected execution continue hot spot 
hdc increment decrement values monitor counter determine threshold ratio hot spot non hot spot branches 
minimum ratio hot spot non hot spot branches maintained remain monitor mode ratio high hdc 
lower ratio monitor hardware allow behavior hot spots vary slightly profile mode 
ratio determined formula hdc derive suitable increment decrement values monitor counter 
operating system support interface bbb operating system designed simple bbb signals os hot spot detected operating system copies bbb table contents system memory hot spot detection 
interface minimizes operating system involvement hot spot detection 
specifically cycles stolen away os user application hot spot detected 
order os read bbb contents bbb hardware addressable readable special instructions 
extracted branches stored internally access runtime optimizer 
processed written monitor table hardware addressing special instructions 
table cache conflicts entries monitor table arise 
situation os remove old hot spot contains conflicting branch accurately preserving smaller set hot spots simply eliminate conflicting instructions table slightly compromising recognition known hot spots 
situations suboptimal code previously detected part hot spot may trigger profiling system 
os responsible deploying optimized code entering monitor table 
furthermore operating system control system parameters bbb increment decrement values adjust quality hot spots collected 
actual operating system policies scope 
multiprocess support far hardware design assumed single process execution 
operation slightly complicated considering context switching abilities microprocessors 
responsibility operating system correctly maintain state proposed hardware multiprocess environment required traditional hardware components 
expense swapping subset bbb context switches hot spot detection hardware designed operate single process mode persisting context switches 
bbb responds hot spots quickly active small percentage application execution 
low utilization single bbb shared multiple processes 
bbb configured search hot spots associated particular process id thread id code segment 
id stored control register 
bbb monitor table process 
swapping table context switch extremely costly processes share single table 
order accomplish monitor counter necessary process active subset effectively track hot spot behavior 
furthermore entry monitor table tagged process id id serves tag comparison purposes determining hit determining monitor counter update 
monitor counter saturates indicating profiling necessary bbb allocated particular process 
simple check bbb process id control register determine bbb ownership 
requesting process owns bbb profiling continue delay 
arbitration occur processes requesting bbb 
arbitration may implemented hardware os 
processes may denied bbb short time bbb may acquired waiting process soon bbb resets hdc saturates 
enhancements base hardware enhancements base hardware 
enhancement reduce size bbb considering conditional indirect branches 
execution taken profile weights blocks unconditional branches direct calls determined inference kirchhoff law need profiled 
approach requires runtime optimizer spend time analyzing constructing control flow graph 
second enhancement index bbb combination branch address direction 
taken taken paths particular branch recorded separated entries allowing elimination taken counter bbb entry 
approach result increase size bbb reduction number distinct branch addresses bbb allow system detect finer changes program hot spot behavior 
example control flow changes particular set blocks detected possibly 
third enhancement include support profiling arc weights indirect branches 
currently profiling determines branch weights branches 
additional table indexed combination branch target addresses store actual profile 
bbb entry branch gather branch execution count determine branch 
fourth enhancement add secondary coarse grained component monitor table 
secondary table track ranges addresses single branches 
range table entry consist base address size address falling inside range considered part benchmark num 
actions traced insts 
go stone training input ksim clt training input gcc training input compress test training input count enlarged li train lsp training input queens ijpeg vigo ppm training input perl pl training input vortex vortex training input opened mb doc file searched number closed loaded page doc file ran built word count selected entire document changed font undo change midway closed file generated silicon diffusion data vb script graphs data adobe photo loaded detailed tiff image increased contrast saved image adobe photo exported detailed tiff image encapsulated postscript loaded loaded page ps file viewed zoomed pages performed text extract table 
benchmarks hot spot detection experiments 
hot spot 
hot spot returned optimizer single contiguous region larger code size due aggressive optimizations region added range table help avoid conflicts entries fine grained table 
clearly enhancement require higher degree operating system support manage 
experimental evaluation trace driven simulations performed number benchmarks order explore hot spot characteristics establish effectiveness proposed hot spot detection scheme 
specint common windowsnt applications simulated provide broad spectrum typical programs 
benchmarks summarized table 
applications specint benchmark suite compiled source code microsoft vc compiler optimize speed inline suitable settings 
windowsnt applications executing variety tasks simulated 
applications general distribution versions compiled respective software vendors 
order ensure examination executed user instructions sampling parameter setting num bbb entries bbb associativity way exec taken cntr size bits candidate branch thresh refresh timer interval branches clear timer interval branches global cand cntr size bits global cand cntr global cand cntr dec global mon cntr size bits global mon cntr global mon cntr dec table 
hardware parameter settings 
trace acquisition simulation 
experiments performed inputs shown table 
hot spot detection hardware simulated instruction instruction basis entire execution 
order extract complete execution traces applications user code including statically dynamically linked libraries employed special hardware capable capturing dynamic instruction traces amd platform 
unit known donated amd research 
hardware parameters design space large experimentally evaluating individual effect hardware parameter infeasible 
selected initial parameters attempted match observed hot spot behavior refined resulting parameters exhibit desirable hot spot collection behavior 
parameters experiments section shown table 
bbb hardware configured allow branches dynamic execution percentage executions branches higher candidates candidate ratio 
hdc configured require candidate branches total execution hot spot threshold execution percentage 
bbb allowed refreshes totaling branches detect hot spot reset 
collect results monitor table large contain hot spot branches order examine hot spot behavior course execution 
results table summarizes effectiveness proposed hardware detecting runtime optimization opportunities benchmark 
number hot spots column lists number times hdc saturated zero indicating detection new hot spot 
number represents number times operating system interrupted bbb 
number static instructions hot spots close estimate total number instructions delivered optimizer entire execution 
column percent static executed instructions hot spots relates number static instructions hot spots total number static instructions executed 
words static instructions executed microprocessor small percentage lie hot spots 
portion total dynamic instructions represented hot spots shown column percent total execution hot spots 
hardware detect hot spots instantly time spent executing optimized hot spots spent detection 
time spent hot spots detected shown percent total execution detected hot spots time lost detection difference column previous column 
column dynamic instructions hot spots detection shows number dynamic instructions benefit runtime optimization 
number reflects subsequent reuses detected hot spots 
purposes experimentation instruction part hot spots heuristically attribute instruction accessed relevant hot spots 
analysis results shows small percentage usually static code seen microprocessor executes intensively hot spots 
large percentage dynamic execution represented small set instructions nearly program execution runtime optimizer easily focus small set potential significant performance increase 
addition possible time spent optimized hot spots lost due detection 
example li number hot spot static instructions comprise total static instructions yielding total hot spot code size instructions 
furthermore entire execution spent detected hot spots 
analysis shows ideally hot spots account lost detection process 
indicates hot spot detector identification swiftly execution hot spot regions falls entirely potentially runtime optimized code 
benchmark hot static static total total dyn 
insts 
spots insts 
executed exec 
exec 
hot hot spots insts 
hot spots detected spots hot spots hot spots detection go ksim gcc compress li ijpeg perl vortex table 
summary hot spots benchmarks 
hot spot static hot spot code size instructions static hot spot size dynamic execution detected hot spot perl 
hot spot static hot spot code size instructions static hot spot size dynamic execution detected hot spot 

detailed hot spot statistics 
examining individual hot spots reveals interesting characteristics program behavior 
details detected hot spots perl benchmark 
hot spot bar graph shows static code size hot spot line graph shows percentage execution spent hot spot detection 
benchmark consists primary hot spots hot spots graph 
correspond hot spots note histogram perl compiled impact architecture inlining histogram code seen executing second primary hot spots 
hand analysis classify code region hot spots hardware actual hot spots 
hand examination actual hot spot intensely executed region code verifying hardware determination 
hot spot cmd exec function loops times calling str free iteration 
blocks totaling static instructions contribute dynamic instructions program total execution 
intense nature blocks serve candidates runtime optimization 
analysis benchmark shows hot spot dominant terms dynamic execution 
case optimizing hot spot benefit dynamic instructions executed 
similar characteristics observed benchmarks 
shows example pre compiled windowsnt applications 
benchmark hot spots represent total execution represent 
see quite hot spots small static code sizes indicating tight executed code 
fact benchmark smaller sized hot spots high total execution percentages indicating excellent opportunities runtime optimization 
benchmark go notable example benchmark obvious hot spots 
game simulation repetitively executes players moves move touches large amount static code little temporal repetition 
hardware able detect hot spots representing execution 
primary hot spot represents execution static code size instructions 
data shown static sizes detected hot spots vary significantly tens instructions low thousands 
point development runtime optimization technology maximum static code size runtime optimizer handle open question 
goal quickly accurately identify hot spots placing artificial restrictions characteristics hot spots detected 
believe better submit larger region code runtime optimizer rely optimizer pare code size available information gathered hot spot 
adjusting existing hardware parameters easy limit size hot spots detected 
dynamic execution lengths individual hot spots vary significantly 
cases execution lengths hot spots fairly small account hundreds thousands instructions 
lengths may short benefit runtime optimization especially performance gains earned optimized code offset cost detection reoptimization 
unfortunately total execution time known runtime 
operating system decisions hot spots optimize 
implementation cost experiments bbb large guarantee accurate results benchmarks 
entries available cache conflicts occurred bit execution taken counters sufficient capture profile data hot spots 
equivalent hardware implementation bbb entry contain bit tag field bit counters bit candidate flag 
total bbb hardware cost slightly kilobytes 
compared amd reported kb onchip cache size justifiable 
variety hardware schemes may implement monitor table require hardware bbb 
monitor table coarsegrained component accommodates branch entries achieve ideal results benchmarks 
monitor table require profile counters furthermore clever implementation may single entry represent nearby branches 
considered cycles lost reporting hot spots os 
cycles offset gains executing optimized code 
operating system interrupted hot spot reported bbb 
rough estimate time required transfer contents bbb operating system memory 
conservatively suppose bbb bit entries requires cycles transfer net cost hot spot cycles 
gcc hot spots net cost cycles negligible compared number instructions spent executing hot spots 
related strategies proposed collect profile data ideas implementations motivated efforts create branch behavior buffer 
efforts focused estimating average program behavior statistical sampling 
consequently techniques rely heuristics static analysis discover important regions code 
knowledge method addresses unique requirements runtime optimization 
conte menezes hirsch propose dedicated hardware profiling 
profile buffer retirement stage interacts reorder buffer determine branch taken 
operating system periodically samples profile buffer gradually constructing arc profile static compiler optimizations 
various techniques explored reduce contention branches profile buffer similar schemes lower hardware cost branch behavior buffer 
approach taken dean collects detailed information single sampled instruction interaction pair sampled concurrent instructions 
capture interesting events cache misses branch mispredictions depth performance analysis microarchitecture performed offline 
morph system developed zhang uses operating system compiler technology provide framework continuous profile driven optimization 
proposed hardware greatly reduces demand software support low overhead os layer necessary 
morph demonstrates feasibility os infrastructure orthogonal hot spot detection mechanism 
focus envision utilizing binary reoptimization technology implementing region runtime optimizations hot spot profile data 
isolation program hot spots lends hot cold optimization strategy proposed cohn lowney 
excluding infrequently cold instructions concentrating intensely hot instructions hot spot potentially derive significant performance benefit 
traditional profiling focuses collecting data compiler optimizations compile methodology 
approach restricts aggressive optimizations specific workload assumed representative 
method dynamically identifies hot spots program collects sufficient data provide framework timely runtime optimization execution 
scheme requires minimal operating system support incurs negligible runtime overhead requires hardware tables counters located critical execution path identify monitor hot spots 
detailed trace driven simulations performed number integer programs including benchmarks spec windowsnt applications 
resulting data showed hot spot detection algorithm applied common benchmarks applications achieves high rate success provides promising framework building runtime optimizer general purpose programs 
subsequent efforts directed implementing region runtime optimizations hot spot data exploring methods delineating hot spots code 
acknowledgments authors members impact team valuable comments microsoft donation software tools 
research supported advanced micro devices direction dr dave christie 
anderson dean ghemawat henzinger leung sites vandevoorde waldspurger weihl continuous profiling cycles gone proc 
th acm symposium operating systems principles pp 
october 
conte patel menezes cox hardware profiling effective technique optimization international journal parallel programming vol 
pp 
april 
zhang wang chen smith system support automatic profiling optimization proc 
th acm symposium operating systems principles pp 
october 
ammons ball larus exploiting hardware performance counters flow context sensitive profiling acm sigplan notices vol 
pp 
june 
calder feller eustace value profiling proceedings th annual international symposium microarchitecture pp 
december 
auslander philipose chambers eggers bershad fast effective dynamic compilation proceedings acm sigplan conference programming language design implementation vol 
pp 
june 
kistler dynamic runtime optimization proceedings joint modular languages conference pp 

static program analysis enhance profile independence instruction level parallelism compilation 
phd thesis department electrical computer engineering university illinois urbana il 
ball larus branch prediction free proceedings acm sigplan conference programming language design implementation pp 
june 
chen chang conte hwu effect code expanding optimizations instruction cache design ieee transactions computers vol 
pp 
september 
lee crowley baer anderson bershad execution characteristics desktop applications windows nt proceedings th international symposium computer architecture pp 
june 
wall predicting program behavior real estimated profiles tech 
rep tn digital equipment wrl technical note palo alto ca 
conte menezes hirsch accurate practical profile driven compilation profile buffer proceedings th annual international symposium microarchitecture pp 
december 
dean hicks waldspurger weihl hardware support instruction level profiling order processors proceedings th annual international symposium microarchitecture pp 
december 
hank hwu rau region compilation motivation proceedings th annual international symposium microarchitecture pp 
december 
cohn lowney hot cold optimization large windows nt applications proceedings th international symposium microarchitecture pp 
december 
