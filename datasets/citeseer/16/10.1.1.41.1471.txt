curvature velocity method local obstacle avoidance reid simmons school computer science carnegie mellon university pittsburgh pa new method local obstacle avoidance indoor mobile robots formulates problem constrained optimization velocity space 
constraints stem physical limitations velocities accelerations environment configuration obstacles placed translational rotational velocities robot 
robot chooses velocity commands satisfy constraints maximize objective function trades speed safety 
efficient real time implementation method extensively tested demonstrating reliable smooth speedy navigation office environments 
obstacle avoidance method basis sophisticated navigation behaviors ranging simple wandering map navigation 
address problem local obstacle avoidance mobile robots operating unknown partially known environments 
problem studied researchers number desiderata necessitate new approach problem 
desiderata common existing methods robot navigate safely face noisy sensors dead reckoning error 
robot goal directed trying avoid obstacles 
method computationally efficient run real time board robot 
addition number desiderata addressed methods dynamics robot taken account enable travel high speeds crowded environments 
method explicitly try maximize forward progress robot 
method simultaneously control direction speed robot 
approach curvature velocity method cvm addresses concerns 
main distinctions method operates velocity space robot cartesian configuration space chooses commands maximizing objective function trades vehicle safety speed goal directedness 
method presumes robot control translational rotational velocities turn instantaneously 
travels arcs circles 
formulation includes synchro drive robots differentially steered robots non holonomic vehicles 
formulation neglects effects accelerations practice approximation indoor mobile robots traveling walking speeds 
curvature velocity method works adding constraints velocity space choosing point space satisfies constraints maximizes objective function 
constraints derive physical limitations robot velocities accelerations sensor data indicate presence obstacles 
represent possible curvature far robot travel hitting obstacle 
achieve real time performance curvature distance obstacles approximated piecewise constant function 
approximation divides velocity space discrete number regions constant distance impact 
method finds point region maximizes objective function 
maximal point command robot 
simple extensions basic method robust sensor noise reduce possibility robot getting stuck 
tests indoor mobile robot demonstrate produces speedy smooth safe travel office environments 
related known local obstacle avoidance methods computing direction robot head take vehicle dynamics account 
example potential field approaches vector sums repulsive attractive features compute desired robot heading 
speed control handled choosing velocity proportional magnitude potential vector 
vector field histogram method improves approach computing dimensional polar histogram processed detect open areas robot travel 
robot velocity chosen direction selected proportional distance obstacles ahead 
method produces smoother travel handle narrow wide openings potential field approach account fact robots turn typically move arcs straight lines 
cluttered environments neglect vehicle dynamics critical 
methods take vehicle dynamics nonholonomic constraints account studied context line path planning methods generally computationally expensive fast local obstacle avoidance 
local obstacle avoidance methods reported incorporate vehicle dynamics choosing steering commands travel direction 
steering angle field method uses curvatures tangent obstacles constrain continuous space case dimensional space steering angles 
curvatures associated arc distances prohibit travel ranges steering angles 
method calculates constraints distance thresholds tries travel dimension 
speed control iterative negotiation process pilot module local obstacle avoidance module opposed method speed turn rate chosen simultaneously point velocity space maximizes objective function 
similar method high speed indoor navigation operates velocity space developed somewhat earlier independently 
method looks discrete set arcs constrained vehicle dynamics chooses closely heads goal direction ensuring robot hit obstacle seconds travel 
original method step approach pick curvatures velocities subsequently adopted step method simultaneously choosing curvatures velocities :10.1.1.153.2740
similar approach developed outdoor navigation 
full vehicle dynamics considered path necessarily circular arc measure calculated path best value chosen 
methods problem analyzing discrete set arcs paths may fall cracks considered 
curvature velocity method formulate local obstacle avoidance problem constrained optimization velocity space robot 
velocity space robot set controllable velocities 
synchro drive robots velocity space orthogonal dimensions translational tv rotational rv velocities 

differentially steered vehicles velocity space left right velocities easily transformed tv rv space robot lateral 
rv tv constrained optimization mean robot chooses tv rv pair maximizes objective function meeting constraints allowable velocities 
advantages formulation local obstacle avoidance problem 
operating velocity space simultaneously control speed heading robot come solutions correspond directly commands control robot 
treating problem constrained optimization easily incorporate constraints environment robot dynamics come formulations instance trade speed safety 
assume robot travels arcs circle curvature rv tv positive curvature denotes clockwise motion 
point velocity space corresponds motion constant curvature cartesian space 
just approximation due effects acceleration effects negligible relatively slow speeds high accelerations indoor mobile robots :10.1.1.153.2740
physical limitations robot impose types velocity space constraints 
robot maximum rotational translational velocities formulation add constraint prohibit backwards motion 
limitations rotational translational accelerations ra max ta max supply constraints 
robot current velocities rv cur tv cur time interval accel chosen cycle time cvm algorithm add constraints give achievable velocities time step obvious constraint tv added safety reasons want ensure tv reachable part space 
important source constraints imposed obstacles environment 
transform cartesian space obstacles velocity space constraints follows convert obstacle configuration space curvatures calculate distance obs point robot travel hitting obstacle obs 
define distance function obstacle velocity space set obstacles obs cumulative distance function defined tv tv max tv tv max rv rv max rv rv max tv rv rv cur ra max accel rv rv cur ra max accel tv tv cur ta max accel tv rv obs rv tv obs tv sensor range limited avoid computing infinite values clip function limiting distance meters implementation general computing obstacle distance function obs complex arbitrarily shaped obstacles 
address approximate obstacles circles 
reasonable approach sensor input sonar laser range readings 
robot circular converting cartesian configuration space obstacles merely involves increasing radii obstacles radius robot 
computing straightforward 
robot origin facing positive axis curvature intersects obstacle get physical environmental constraints velocity space commands robot chosen optimizing objective function 
desiderata section clear objective function prefer higher speeds curvatures travel longer hitting obstacles try orient robot head desired goal direction 
represent criteria simple linear objective function term normalized zero speed term simply indicates preference traveling faster equal 
dist term indicates tv rv obs min obs obs tv rv obs limit tv rv obs min tv rv obs atan atan obs obstacle distance calculations obs tv rv speed tv dist tv rv head rv speed tv tv tv max dist tv rv limit tv rv obs head rv rv preference traveling longer distances curvature rv tv hitting obstacles 
head term error goal heading 
defined difference desired goal heading robot local frame heading robot achieve turns rv radians second time constant implementation sets second 
values indicate relative weight term objective function 
objective function robot exhibit various behaviors depending weights distribution obstacles ranging slowing turn sharply avoid obstacle traveling full speed turning earlier avoid obstacle 
section presents experimental results sensitivity method choice values 
real time implementation curvature velocity method previous section meets criteria local obstacle avoidance computationally efficient 
hard compute limit simplifying assumption circular obstacles 
general formulation limit time consuming optimize approximation techniques simulated annealing 
section describe implementation details address computational concerns 
real time performance achieved approximating limit finite set intervals constant distance impact 
set curvature intervals determined curvatures tangent obstacles divide velocity space regions constant distance dividing overlapping regions distance associated interval minimum distance overlapping regions 
minimum maximum velocity acceleration constraints added space curvature interval vertex points upper boundary constraints evaluated point maximizes objective function guaranteed lie upper boundary 
robot chooses command maximizes objective function curvature intervals 
compute limit eqn 
approximation velocity distance function eqn 

note obstacle obs obs infinite outside curvatures tangent obstacle 
need consider curvatures min max intersection points needed compute eqn 
min obs obs obs obs obs max obs obs obs obs obs note eqn 
defined obstacle circle overlaps origin 
reality obstacle robot occupy space occur due sensor noise circular approximations specifying obstacles 
way deal obstacle defining radius obs set centimeter 
eqn 
calculate minimum maximum curvatures obstacles 
tangent curvatures approximation refined subsequently take constant minimum maximum curvatures produces set obstacle intervals constant distance 
compute piecewise constant approximation limit find min union obstacle intervals splitting overlapping obstacle intervals eliminating overlapping piece greater associated distance 
efficient algorithm uses curvature interval data structure curvatures constant distance value interval 
geometrically curvature interval defines pair lines velocity space distance value lines constant 
min union algorithm begins curvature interval obstacle pair tangent curvatures eqn 
associated distance eqn 
computed form new curvature interval min max obs obs obs max max min min tangent curvatures obstacle min obs obs min obs min obs min obs max obs obs max obs max obs max obs obs obs obs obs obs tv rv obs min min obs max obs ifc min rv tv max 
existing interval modified depending relationship new interval disjoint contained set contains split existing interval 
overlapping split existing interval result depending side intervals overlap occurs approximating distance function constant tangent curvatures really quite non linear 
situations approximation conservative especially distance values tangent curvatures different obstacle 
importantly approximation liberal actual minimum may tangent curvature distance obstacle 
remedy problems refine approximation piecewise constant 
rv tv curvature interval constraints min max min max min min max min min max max min min max max max idea break interval small number intervals calculate constant distance value interval min union algorithm described approximate limit function 
approach pick point obstacle circle closest origin straight line distance divide obstacle quadrants starting point 
curvature intervals defined adjacent points lying minimum maximum tangent curvatures distance value interval assigned minimum endpoint intervals calculated eqn 

maximize objective function note curvature interval provides pair linear inequalities velocity space 
velocity acceleration constraints described previous section linear inequalities 
set linear inequalities linear objective function form easily solvable general 
case additional structure problem simplify calculations distance value constant pairs curvature lines objective function monotonically increasing tv optimal value function curvature interval lies top boundary constraint lines 
leads efficient algorithm curvature interval compute objective function vertex upper boundary relevant constraints choose best value intervals small extension need compute objective function heading error dq zero 
representative obstacle distances distance curvature distance functions correspond obstacles 
obs min max dividing obstacles quadrants rv extensions curvature velocity method described previous sections practical problems 
due sensor noise obstacles may precisely represented internally want robot stay clear obstacles possible slow unavoidable travel near 
second objective function usually job trading goal directed obstacle avoiding behaviors situations choices equally bad indicating robot stuck robot far desired goal heading 
section describe straightforward extensions basic curvature velocity method address problems 
simple extension helps compensate sensor noise grow obstacles safety margin 
relatively small safety margin cm size safety margin inversely proportional narrow opening robot pass 
large safety margin robot trouble navigating doorways past people crowded corridors 
extension adapted helps keep robot away obstacles act cautiously traveling near obstacles add constraint maximum allowable translational velocity proportional distance obstacles :10.1.1.153.2740
specifically curvature interval constrain maximum translational velocity robot able travel imp seconds hitting obstacle 
curvature intervals distance greater extreme points obs obs indicating robot pass nearby obstacle travels curvature extrema value interval greater 
adding safety margin helps increase safety factor adding constraint robot travels full speed distance robot radius away obstacles 
determine constraint calculating curvature pass away obstacle tangent curvature distance tv imp add constraint translational velocity falls line formed points ensures robot travel full speed tv max passes away obstacle 
similar constraint eqn 
added lower bound curvature interval 
occasionally best value objective function move slowly 
occurs instance robot surrounded sides obstacles goal heading straight ahead obstacle field 
handle situations obstacle safety constraints rv tv tv imp tv imp tv max cos sin imp imp tv max tv max tv impact tv max impact tv max rv tv max tv max tv rv adopted rotate away method robot just stops rotates place best translational velocity command nearly zero :10.1.1.153.2740
allows robot eventually see open space front move forward hopefully move local trap 
final extension necessitated choice weighting parameters objective function 
chosen weights robot close facing goal direction degrees performs poorly facing opposite direction 
cases want strongly encourage robot start turning face goal direction 
increasing weight goal heading term proportional far robot goal direction 
particular replace objective function eqn 
section discusses sensitivity method parameter value 
results curvature velocity method cvm implemented tested extensively xavier mobile robot 
xavier built wheel base produced rwi independent control translational rotational velocities 
obstacle detection uses ring sonars data rate hz degree field view front pointing laser range sensor data rate hz 
sonar laser data combined filtered simple cm resolution histogram grid 
base provides xavier dead reckoning information hz rate cvm algorithm run 
new report received occupied grid cell converted ego centric coordinates processed produce curvature constraints 
typically obstacles yield distinct curvature xavier mobile robot intervals number intervals fewer number obstacles due overlapping intervals 
appropriate velocity constraints added tv rv point best evaluation sent base computer 
algorithm including sensor processing takes msecs running board mhz computer 
cvm depends number parameters particular objective function eqn 

determine sensitivity method parameters ran series tests simulated environment 
environment set test method ability head local minima avoid obstacles pursuing goal direction 
trial robot started position orientation shown told head straight ahead trial completed robot crossed dotted line 
parameters systematically varied number trials run setting 
average time finish trial conclude method sensitive relative value goal heading weight insensitive relative values distance progress weights 
method fared badly zero wandering ratio greater robot got trapped local minima 
range standard deviation trial typically greater different mean best setting average slightly better similar trials run varying extra weighting encourages robot turn far heading 
results showed cvm relatively insensitive values greater zero point robot tends get trapped local minima 
best setting environment average completion time std results xavier reported 
testing sensitivity cvm parameters traces various runs xavier shown 
better accentuate differences obstacles boxes round trash fire door grown robot radius robot point 
case robot starts top facing bottom commanded head degrees left 
case robot wall navigate discrete obstacles 
compare cvm running cm sec implementation potential field approach running cm sec 
note cvm produces noticeably smoother paths potential field method 
addition higher speeds robot stays away obstacles paths somewhat smoother 
mainly due fact near obstacle constraints eqn 
important higher speeds robot respond objects earlier 
local obstacle avoidance algorithm higher level behaviors 
wandering achieved setting local goal heading zero biases robot continue current heading 
head direction behavior achieved setting difference current robot heading desired global goal direction 
go goal behavior implemented transforming global goal location robot coordinate frame setting angle robot heading local goal point 
behavior need additional extension goal point falls curvature interval associated distance straight line distance goal intervening obstacles weight goal heading term set high strongly encourage robot head goal 
behaviors turn form basis map navigation schemes 
resulting system exhibits traces xavier runs cvm cm sec cvm cm sec pot field cm sec cvm cm sec reliable speedy navigation office corridor environments 
curvature velocity method local obstacle avoidance treats problem constrained optimization velocity space robot 
advantages formulation include ability simultaneously control speed heading robot ease incorporating constraints environment robot dynamics ability handle trade offs speed safety 
cvm achieves real time performance approximating far robot travel curvature hitting obstacle 
approximation piecewise constant function defined curvatures tangent obstacles 
additional velocity constraints added physical limits robot desire keep away obstacles travel slowly passing nearby obstacles 
method implemented tested xavier synchro drive robot applicable differentially steered vehicles non holonomic vehicles travel circular arcs 
implementation quite efficient enables robot travel safely office environments speeds cm sec 
limiting factor speed appears rate sonar sensors limited field view laser prevents primary obstacle detection sensor 
improving cycle time sensors expect approach meter second travel 
method includes finding better approximations distance function trying sophisticated objective functions 
investigate extending curvature velocity space approach multi step navigation planning problems 
shown vehicle dynamics account maximizing objective function trades speed safety goal directedness create efficient real time local obstacle avoidance algorithm produces safe smooth speedy travel obstacle environments 
acknowledgments chrisman richard goodwin sven koenig sebastian thrun suggestions design implementation cvm 
greg armstrong running experiments keeping xavier healthy 
research sponsored wright laboratory aeronautical systems center air force materiel command usaf advanced research projects agency arpa number 
arkin 
motor schema mobile robot navigation 
international journal robotics research august pp 

borenstein koren 
vector field histogram fast obstacle avoidance mobile robots 
ieee transactions robotics automation pp 

buhmann burgard cremers fox hofmann schneider thrun 
mobile robot rhino 
ai magazine summer pp 

jacobs canny 
planning smooth paths mobile robots 
proc 
ieee intl 
conference robotics automation scottsdale az may pp 

bauer 
robust obstacle avoidance unknown environments 
proc 
ieee intl 
conference robotics automation san diego ca may pp 

fox burgard thrun :10.1.1.153.2740
dynamic window approach collision avoidance 
tech report iai tr cs department university bonn 
kelly 
intelligent predictive control approach high speed cross country autonomous navigation problem tech report cmu cs tr school computer science carnegie mellon university 
khatib 
real time obstacle avoidance manipulators mobile robots 
proc 
ieee intl 
conference robotics automation st louis mo march pp 

latombe 
robot motion planning 
kluwer academic publishers 
simmons increasingly reliable 
proc 
nd intl 
conference artificial intelligence planning systems chicago il june 
simmons koenig 
probabilistic navigation partially observable environments 
proc 
intl 
joint conference artificial intelligence montreal canada august pp 

