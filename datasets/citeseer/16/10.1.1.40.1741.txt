copyright robert gray 
proceedings usenix tcl tk workshop july pages 
available agent tcl flexible secure mobile agent system robert gray department computer science dartmouth college hanover new hampshire robert gray dartmouth edu information agent manages portion user information space 
electronic resources space distributed network contain tremendous quantities data 
mobile agents provide efficient access resources powerful tool implementing information agents 
mobile agent autonomous program migrate machine machine heterogeneous network 
migrating location resource agent access resource efficiently network conditions poor resource low level interface 
telescript best known mobile agent system 
telescript requires programmer learn complex object oriented language complex security model 
agent tcl hand simple flexible secure system tcl scripting language safe tcl extension 
describe architecture agent tcl current implementation 
information agent charged task managing portion user information space 
electronic resources space distributed network contain tremendous quantities data 
mobile agents allow efficient access resources powerful tool implementing information agents 
mobile agent program migrate control machine machine heterogeneous network 
words agent suspend execution point transport code supported afosr contract onr contract 
small section appeared gra 
state machine resume execution new machine 
migrating location electronic resource agent access resource locally eliminate network transfer intermediate data 
agent access resource efficiently network conditions poor resource low level interface 
efficiency combined fact agent require permanent connection home site agents particularly attractive mobile computing roving devices low bandwidth unreliable connection network 
mobile agents ease development testing deployment distributed applications hide communication channels location computation whi eliminate need detect handle network failure migration dynamically distribute redistribute network 
mobile agents move programmer away rigid clientserver model flexible peer peer model programs communicate peers act clients servers depending current needs coe 
anecdotal evidence suggests mobile agents easier understand distributed computing paradigms 
existing applications mobile agents include electronic commerce active documents mail information retrieval workflow process management network management whi ous 
potential applications include distributed applications particularly run disconnected platforms invoke multiple operations remote site whi ous 
advantages potential applications mobile agents led flurry implementation 
notable systems include telescript general magic whi tacoma university cornell mit coe ara university kaiserslautern pei 
systems suffer range weaknesses 
telescript provides complex object oriented language complex security model programmer carefully identify disallow dangerous actions 
tacoma provide high level scripting languages tcl respectively easier learn 
addition tacoma uses horus toolkit provide significant fault tolerance 
tacoma requires programmer explicitly capture state information migration 
tacoma partially address security issues tacoma simple encryption minimal user control resource usage provide low level communication mechanisms forcing communication take place outside agent framework 
scripting languages tacoma sufficient tasks lack faster language unsuitable applications 
ara strikes balance telescript tacoma extremes providing multiple languages framework incorporating additional languages low level communication mechanisms 
ara released address security issues 
agent tcl mobile agent system development dartmouth college gra 
agent tcl ara attempts strike balance existing systems 
agent tcl uses flexible scripting language tcl main language provides framework incorporating additional languages 
agent tcl provides migration communication primitives require programmer explicitly capture state information hide actual transport mechanisms low level building blocks range protocols 
agent tcl uses simple safe tcl security model protect machine malicious agent agents 
agent tcl allows agents migrate machine machine remain stationary access resources network create child agents perform subtasks communicate agents local remote machines 
intended general environment distributed applications tcl tk larger computing communities application developer selecting migration communication creation strategy best network resources task 
agent tcl far complete active sites information management applications 
applications demonstrate convenience efficiency mobile agents 
section presents agent tcl architecture 
section describes selection tcl main agent language current implementation 
section discusses security concerns associated mobile code current safe tcl security mechanisms security mechanisms added provide sufficient protection machines agents 
sections briefly examine information management applications highlight 
architecture agent tcl main goals ffl reduce migration single instruction telescript go allow instruction occur arbitrary points 
instruction require programmer explicitly capture state information hide actual transport mechanisms 
ffl provide transparent communication agents 
communication primitives flexible low level hide actual transport mechanisms 
ffl support multiple languages transport mechanisms allow straightforward addition new language transport mechanism 
ffl provide effective security uncertain world internet 
architecture agent tcl shown 
architecture builds server model telescript whi multiple languages ara pei transport mechanisms predecessor systems dartmouth har kk 
architecture levels 
lowest level api available transport mechanisms 
second level server runs network site 
server performs tasks ffl status 
server keeps track agents running machine answers queries status 
ffl migration 
server accepts incoming agent authenticates identity owner security state capture interpreter server api tcp ip tcl electronic mail java 
server engine 
agents architecture agent tcl 
levels consist api available transport mechanisms server accepts incoming agents mediates agent communication interpreter supported language agents 
passes authenticated agent appropriate interpreter 
server selects best transport mechanism outgoing agent 
ffl communication 
server provides hierarchical namespace agents allows agents send messages namespace 
topmost division namespace network location agent 
message arbitrary sequence bytes predefined syntax semantics types distinguished messages 
event message provides asynchronous notification important occurrence connection message requests rejects establishment direct connection 
direct connection named message stream agents convenient efficient message passing programmer watch messages particular stream server hand control stream interpreter 
server buffers incoming messages selects best transport mechanism outgoing messages creates named message stream connection request accepted 
ffl nonvolatile store 
server provides access nonvolatile store agents back internal state desired 
server restores agents nonvolatile store event machine failure 
tacoma services provided agents 
services include navigation network sensing group communication fault tolerance location independent addressing access control 
important service agents implemented prototype resource manager agents guard access critical system resources screen network disk 
resource managers discussed security section 
third level agent tcl architecture consists interpreter available language 
say interpreter expected languages interpreted due portability security constraints just intime compilation feasible languages java 
interpreter components interpreter security module prevents agent malicious action state module captures restores internal state executing agent api interacts server handle migration communication checkpointing 
adding new language consists writing security module state capture module language specific wrapper generic api 
security module determine access restrictions ensures agent bypass resource managers violate restrictions imposed resource managers 
state capture module provide functions generic api 
takes interpreter instance constructs machineindependent byte sequence represents inter nal state 
second takes byte sequence restores internal state 
top level agent tcl architecture consists agents 
tcl agent tcl architecture completely implemented 
current implementation provide event messages nonvolatile store single language tcl single transport mechanism tcp ip flat hierarchical namespace 
provide migration message passing direct connections sufficient security mechanisms protect machine malicious agent protect agents 
incoming agents authenticated pretty privacy pgp kps resource manager agents assign access restrictions authentication safe tcl enforces restrictions agent executes br 
discuss selection tcl main agent language details base system 
discuss security section 
tcl tcl high level scripting language developed enjoyed enormous popularity wel 
tcl advantages language 
tcl easy learn due elegant simplicity imperative style immediately familiar programmer 
tcl interpreted highly portable easier secure 
tcl embedded applications allows applications implement part functionality mobile tcl agents 
tcl extended user defined commands easy tightly integrate agent functionality rest language allows resource provide package tcl commands agent uses access resource 
package tcl commands efficient encapsulating resource agent attractive alternative certain applications 
tcl disadvantages 
tcl high level interpreted language slower native machine code 
addition tcl provides code modularization aside procedures difficult write debug large scripts 
disadvantages hindrance far mobile agents tend involve high level resource access wrapped straightforward control logic situation tcl uniquely suited 
mobile tcl agent usually short performs complex task usually efficient compared resource network latencies 
addition groups working structured programming extensions tcl faster tcl interpreters sah 
tcl suitable mobile agent application performing search operations large distributed collections numerical data 
reason agent tcl includes framework incorporating additional languages 
framework add support new java language sun 
java structured tcl potential run near native speed just time compilation 
expect tcl continue main agent language java speed critical agents portions agents 
main disadvantage tcl provides facilities capturing complete internal state executing script 
facilities essential providing transparent migration arbitrary points 
adding facilities tcl straightforward required modification tcl core 
basic problem tcl core evaluates script making recursive calls tcl eval 
handler command example recursively calls tcl eval order evaluate body loop 
portion script state runtime stack easily accessible 
solution adds explicit stack tcl core 
split command handlers code section call tcl eval 
call tcl eval replaced push stack 
tcl eval iterates stack empty calls current command top stack 
responsible specifying command finished popped 
illustrates process command 
important note modified tcl core compatible standard tcl core 
command procedure recursive call tcl eval correctly top modified core just impossible capture script complete state command procedure invocation stack 
means existing tcl extensions modification long extension header file 
extension modified developer wants agent able carry expression expr body expression expr set flag command set flag body push body stack expr body body body parse command expr body body command body error body set flag command set flag expression evaluate pop body flag example stack works 
command stack left command right 
sets command flag command finished popped 
extension state machine machine 
case developer changes command provide callback routines state capture restoration 
explicit stack simpler flexible ara solution runtime stack captured portable way tcl interpreter destination machine contain set functions pei 
hand explicit stack efficient 
modified tcl core runs tcl programs approximately percent slower standard tcl core ara modified tcl core imposes little additional overhead 
appears performance penalty reduced significantly additional optimization possible include standard modified tcl cores interpreter agent run top standard faster core want migrate mid execution 
explicit stack available trivial write procedures save restore internal state tcl script 
procedures heart state capture module tcl interpreter 
capture restore stack procedure call frames defined variables procedures 
things open files linked variables currently ignored 
advantages tcl strong disadvantages easily overcome affect agents 
tcl chosen main language agent tcl system 
advantages led tcl mobile agent systems tacoma ara pei 
agent tcl current implementation agent tcl components 
component server runs network site 
server accepts authenticates starts incoming agents buffers incoming messages provides flat namespace answers queries status agents running machine 
server implemented cooperating processes 
process watches network maintains table running agents 
second component consists modified version tcl tcl extension 
modified version tcl provides explicit stack state capture routines 
extension provides commands agent uses migrate communicate create child agents 
important commands agent agent submit agent jump agent send agent receive agent meet agent accept agent 
internally command uses server api contact agent server transfer agent message request wait response 
main difference current implementation proposed architecture migrating creating child agent sending message current implementation bypasses local server interacts directly destination server tcp ip 
approach adopted simplify initial implementation change additional transport mechanisms added 
agent simply tcl script runs top modified version tcl 
agent uses agent command register server obtain name flat namespace 
name currently consists ip address server unique integer optional symbolic name agent specifies agent name command 
agent submit command create child agent particular machine 
agent submit command accepts tcl script encrypts digitally signs script sends script destination server 
server authenticates agent selects name agent starts tcl interpreter execute agent 
agent wants symbolic name unique integer identifier call agent name starts executing 
agent jump command migrates agent particular machine 
agent jump command captures internal state agent encrypts digitally signs state image sends state image destination server 
server authenticates agent selects new name agent starts tcl interpreter 
tcl interpreter restores state image resumes agent execution statement immediately agent jump 
agent send agent receive commands send receive messages 
agent meet agent accept commands establish direct connection agents 
direct connection named message stream 
direct connections required communication efficient convenient noted 
source agent uses agent meet send connection request destination agent 
destination agent uses agent accept receive connection request send acceptance rejection 
acceptance includes tcp ip port number source agent connects 
protocol works agents agent meet 
agent lower ip address integer identifier selects port agent connects port 
flexible rpc mechanism built top direct connection mechanism 
server take responsibility establishing direct connection additional transport mechanisms added 
agent tcl includes slightly modified version tk agent graphical interface interact user current machine 
event handlers associated incoming messages direct connections 
security agent tcl mobile agent program moves machine machine executes 
agent machines necessarily trustworthy 
agent try harm machine access privileged resources 
machines try pull sensitive information agent change behavior agent removing modifying adding data code 
agents machines actively malicious programmed poorly effect 
mobile agent system provide security mechanisms detect prevent malicious actions 
strong security mechanisms mobile agent system justifiably accepted 
security critical issue mobile agent system divided interrelated problems ffl protect machine 
machine able authenticate agent owner assign access permissions authentication prevent violation access permissions 
ffl protect agents 
agent able interfere agent steal agent resources 
problem viewed subproblem protecting machine long agent subvert agent communication mechanisms consume hold excessive system resources unable affect agent agent chooses communicate 
ffl protect agent 
machine able tamper agent pull sensitive information agent agent cooperation 
clearly impossible prevent machine doing wants agent currently executing machine 
detect tampering soon agent migrates malicious machine back honest machine terminate fix agent tampering occurred 
addition ensure sensitive information passes untrusted machine unencrypted form information meaningless cooperation trusted site theft information catastrophic detected audit trail 
ffl protect group machines 
agent consume excessive resources network consumes resources machine 
obvious examples agent roams network forever agent creates child agents creates child agents turn 
agent children eventually unable obtain resources terminated 
problems considered mobile agent literature lo cgh tv seen significant implementation 
problems addressed current implementation agent tcl pgp kps safe tcl br 
current implementation potential solutions remaining security problems 
authentication authentication agent tcl pgp pretty privacy widespread despite controversies export restrictions patents kps 
pgp encrypts file mail message idea private key algorithm randomly chosen private key encrypts private key rsa public key algorithm recipient public key sends encrypted key file recipient 
pgp optionally adds digital signature computing md cryptographic hash file mail message encrypting hash value sender private key 
pgp oriented interactive agent system small modifications 
current implementation run pgp separate process save data encrypted file ask pgp process encrypt file transfer file destination server 
structure efficient tightly integrating pgp rest system simpler flexible especially trivial create agent tcl distribution include pgp uses different encryption software way 
agent registers server agent command registration request digitally signed owner private key encrypted server public key sent server 
server sure agent owner allowed register machine records authenticated identity agent owner 
idea private key session key communication agent newly registered server 
session key needed prevent malicious program contacting server masquerading existing agent 
agent registered server machine predominant case encrypt session key possibility message interception session key simply included message compared server recorded session key 
sequence number included messages prevent replay attacks 
agent migrates agent jump command digitally signed current server private key encrypted recipient server public key 
telescript digitally sign server private key owner private key unavailable agent leaves home machine tv 
approach requires servers high degree trust eventually adopt agent solution cgh agent possible encrypted owner private key creation remains encrypted agent lifetime 
identity agent owner included migration message 
recipient server chooses believe identity trust sending server 
server accepts agent records apparent identity agent owner authenticated identity sending server degree confidence owner identity valid 
session key agent server communication agent case 
steps occur child agent created agent submit command tcl script encrypted tcl state image 
steps occur agent sends message agent machine 
case direct connection idea private key acceptance message session key direct connection 
sequence number associated direct connection prevents replay attacks 
weaknesses current implementation 
automatic distribution mechanism pgp public keys 
server know possible public keys authenticate incoming agents 
automatic distribution mechanism added start agent tcl wide area networks 
second system vulnerable replay attacks attacker replays migrating agent message sent agent outside direct connection 
obvious solution server distinct sequence number servers contact 
authorization enforcement identity agent owner determined system impose access restrictions agent authorization ensure agent violate restrictions enforce ment 
words system guard access available resources 
divide resources types 
indirect resources accessed agent 
builtin resources directly accessible language primitives reasons efficiency convenience simply definition 
builtin tcl tk resources include screen file system wall clock time cpu time 
indirect resources agent controls resource enforces relevant access restrictions 
message agent local server attaches message tuple contains apparent identity agent owner apparent identity sending server flag indicates owner authenticated flag indicates sending server authenticated numerical confidence level represents trust local server places sending server 
agent uses tuple internal access lists respond appropriately incoming message 
builtin resources security maintained safe tcl set resource manager agents 
safe tcl tcl extension designed allow safe execution untrusted tcl scripts br 
safe tcl provides interpreters 
interpreter trusted interpreter access standard tcl tk commands 
interpreter untrusted interpreter dangerous commands removed 
untrusted script executes untrusted interpreter 
dangerous commands include obvious things opening writing file creating network connection creating toplevel window 
dangerous commands include subtle things ringing bell raising lowering window maximizing window covers entire screen 
subtle security risks involve damage machine access privileged information involve serious annoyance machine owner 
idea type security risk restrict number times second agent initiate event restrict agent window wants size position affect 
dangerous commands removed untrusted interpreter want deny access resources associated commands 
removing dangerous command entirely safe tcl replace command link command trusted interpreter 
trusted command severely restricts functionality original command examines command arguments identity script owner determine command allowed 
agent tcl uses generalization safe tcl appears tcl core lo 
agent tcl creates trusted untrusted interpreter incoming agent 
agent executes untrusted interpreter 
dangerous commands removed untrusted interpreter replaced links secure versions trusted interpreter 
secure versions check set access lists see command allowed 
current implementation access list wall clock cpu time screen network file system external programs 
access list set name quantity pairs name specifies name required resource quantity specifies number instances resource applicable screen access list example con tain pair toplevel indicates agent toplevel windows 
program access list contain pair ls indicates agent allowed execute unix ls program 
initially access lists empty agent minimal amount wall clock cpu time modified tcl interpreter aborts script script exceeds time limits 
obtain additional time obtain access builtin resources agent explicitly implicitly ask resource manager agent permission 
resource managers current system 
managers correspond access lists control access wall clock cpu time screen network file system external programs 
agent uses require command explicitly ask resource manager access 
require command takes symbolic name resource manager screen list name quantity pairs specify desired access permissions toplevel screen area percent 
require command just link procedure trusted interpreter 
procedure contacts appropriate resource manager passes list access requests resource manager 
procedure waits response adds access request internal access lists indicating request granted denied 
implicitly ask resource manager access agent simply calls command uses resource 
example agent issues command exec ls exec procedure trusted interpreter checks program access list 
permission execute ls granted command proceeds 
permission execute ls denied command aborts security error 
command contacts program resource manager proceeds aborts depending manager response 
implicit access restrictions convenient agent require command possible determine required resource available tries resource 
implementation provide safe version dangerous commands 
example agent arrives machine source send commands send command probably available difficult secure agents communicate agent framework 
addition annoyance security threats eliminated 
restricting associated commands plan provide agent virtual screen wants user move resize 
annoyance threats remain agent tcl currently protects machine simple kernel user model safe tcl 
direct access system resources possible 
way agent subvert resource manager system way agent modify access lists contained trusted interpreter possible agent contact resource manager directly accomplishes response correctly deny access added access lists 
case safe tcl mechanism enforcing policy provided resource managers 
java added system existing java security mechanisms enforce policy provided resource managers 
addition resource managers agent tcl includes console agent primarily machines specific owner 
console agent purposes 
tracks agents running machine allows machine owner deny entry incoming agents terminate running agents 
second provides pathway resource manager ask owner agent able perform particular action 
owner eventually able specify exactly situations asked 
security areas 
plan add hierarchical system resource managers 
particularly important move telescript model multiple virtual places machine whi 
place security policy machine security policy 
second protect agent malicious machines 
exploring suggestions cgh agent divided components component encrypted signed separately part journey 
scheme allows immediate detection tampering dropping part agent inserting entirely new procedure prevents theft sensitive data 
addition plan record audit trail analyzed determine point failed agent modified 
subtle modification threats modifying piece data changes machine unencrypted solutions clear may impossible 
third protect group machines malicious agent 
looking currency scheme agent owner gives agent finite currency supply finite currency supply 
currency tied legal currency impossible spend currency unit 
agent spend currency order access resources divide currency children 
agent children eventually run currency terminate 
currency schemes exist context electronic commerce way 
applications shows agent illustrates agent commands 
agent task determine users logged set machines 
agent uses agent submit create child agent 
child agent jumps machine machine agent jump executes unix command machine 
child sends list back parent agent send 
parent waiting list agent receive displays list user 
task simple accomplished easily mobile agent agent illustrates general form agent migrates sequence machines 
existing agent tcl agents fall category workflow agent carries electronic form user user cgn medical agent retrieves distributed medical records certain criteria wu 
workflow agent migrate sequentially users need fill sections form order 
agent chooses migrate sequentially agent discard potential candidates travels distinct databases spawning child agent remote database interacting databases traditional client server approach increases total network traffic single operation performed database 
agent workflow medical agents require continuous contact home machine continue task home machine temporarily disconnected 
addition workflow medical agents extremely easy implement agent framework 
code written resource local agent difference agent jump command move agent machine 
agent jump command strictly necessary continually resubmit tcl procedure parameterized current status task procedure parameters determine needed current machine 
approach requires programmer explicitly collect necessary state information 
agent state information index machine list state information required agent complex 
agent jump command convenient automatically captures state 
agent jump command impose moderate execution overhead tcl interpreter overhead smaller reduced near zero ara solution pei 
example alert agent monitors specified set remote resources notifies owner change resource status 
shows alert agent monitors set files notifies user status file changes significantly monitored characteristics include unix bits file size 
agent creates child agent remote filesystem agent submit 
child agent monitors files filesystem sends message parent status file changes significantly 
parent contacts owner mail agent send email message 
child agents know status changes significant status changes user wants see transmitted network 
mobile agents remote machine send back notification change application filter home machine appropriate monitoring routines pre installed remote machine limiting application changes remote administrator considers significant 
mobile agents application monitor status changes desired criteria minimizing ongoing network traffic 
hybrid examples text retrieval agent searches distributed collections text documents 
agent designed launched mobile device 
obtains query bald cc cosmo lost ark temple doom 
jump jump jump jump message exit create jump bald cs dartmouth edu sep tty sep cosmo dartmouth edu pts aug set machines bald cosmo lost ark temple doom moose muir tioga get name server agent submit child agent jumps agent submit agent local ip vars machines procs script machines agent receive code string blocking puts string agent done agent wait output list users jump machine machine execute unix command machine proc machines global agent set list foreach machines catch agent jump append list unable jump machine set users exec append list agent local server users agent send agent root list procedure child agent jumping agent submits child agent jumps machine machine executes unix command machine 
tcl code middle agent array holds current location agent updated automatically agent migrates 
path agents network shown top 
fragment output appears bottom 
email message message file name size change agent alert file agent file agent mail agent message status file changed send alert message user bald moose create create set machines bald moose set directory get name server agent set email agent bald email machine name email agent submit file agents watch changes file size asking user email agent send message owner agent receive code string blocking set alert construct alert string agent send email agent send owner alert machines agent submit vars directory proc file watch file watch directory wait file agents send message saying alert agent monitors set files sends email message user status file changes significantly 
simplified version alert agent appears bottom procedure file watch polls files regular intervals file stat command procedure construct mail constructs readable mail message shown 
network location various agents shown top 
user jumps permanently connected machine network 
spawns child agent collection 
child agents travel remote collections perform query available retrieval tools return permanently connected machine query results 
original agent discards duplicates carries results back mobile device 
approach allows agent carry retrieval mobile device disconnected minimizes total number bytes transferred low bandwidth connection mobile device network document entry consists title author takes duplicates add agent code size 
addition need provide high level search operations collection child agents move collections perform search efficiently combine low level primitives desired search operation 
agent tcl retrieve threedimensional drawings mechanical parts distributed cad databases cbc track purchase orders cgn information retrieval applications external sites 
directions area finish proposed architecture 
add hierarchical namespace nonvolatile store multiple languages transport mechanisms 
specifically interested java lisp electronic mail 
java progress 
addition finish resource managers add security mechanisms protect agent malicious machine group machines malicious agent 
extend existing application agents available security information 
second area add support agents 
resource managers specify security policies type support agent 
effective mobile agent system requires 
process identifying constructing necessary agents 
agents provide directory services navigation services network sensing tools high level communication services graphical construction tools progress 
third area experimentally compare performance mobile agents traditional client server solutions formally characterize agent remain stationary far migrate 
characterization consider things network latency bandwidth relative machine speeds code sizes data volumes 
agent tcl secure mobile agent system gains flexibility simplicity high level scripting language tcl 
implementation complete agent tcl active allowed rapid development efficient distributed applications 
availability agent tcl version available www cs dartmouth edu agent near summer finishing resource managers writing new documentation improving interface agent tcl pgp reworking session key implementation require modifications pgp 
agent tcl version available version uses tcl provides limited security somewhat slower 
agent tcl runs standard unix platforms 
professor david kotz reading various incarnations providing helpful criticism anonymous reviewers constructive feedback professor george cybenko professor daniela rus support encouragement nog ting cai wu aditya kurt cohen scott silver implementation air force navy financial support onr contract afosr contract 
br borenstein rose 
safe tcl 
available ftp ftp fv com pub code safe tcl tar cbc kurt cohen aditya george cybenko 
pattern recognition cad objects electronic yellow pages mechanical parts 
international journal intelligent engineering systems 
appear 
cgh david chess benjamin grosof colin harrison david levine colin gene tsudik 
agents mobile computing 
technical report rc ibm watson research center march 
revised october 
cgn ting cai peter nog 
dartflow workflow management system web transportable agents 
technical report computer science dartmouth college may 
coe michael coen 
software agent environment construction system 
yannis labrou tim finin editors proceedings cikm workshop intelligent information agents third international conference information knowledge management cikm gaithersburg maryland december 
gra robert gray 
agent tcl transportable agent system 
james mayfield tim finin editors proceedings cikm workshop intelligent information agents fourth international conference information knowledge management cikm baltimore maryland december 
har kenneth 
transportable intelligent agent system 
technical report pcs tr department computer science dartmouth college 
dag johansen robbert van renesse fred 
operating system support mobile agents 
proceedings th ieee workshop hot topics operating systems 
kk keith david kotz 
transportable agents 
yannis labrou tim finin editors proceedings cikm workshop intelligent information agents third international conference information knowledge management cikm gaithersburg maryland december 
kps charlie kaufman perlman mike 
network security private communication public world 
prentice hall new jersey 
lo jacob levy john ousterhout 
safe tcl toolkit electronic meeting places 
proceedings usenix workshop electronic commerce pages july 
nog sumit chawla david kotz 
rpc mechanism transportable agents 
technical report computer science dartmouth college 
ous john ousterhout 
scripts agents new software high ground 
invited talk winter usenix conference january 
pei holger 
ara project 
www page www uni kl edu ag ara distributed systems group department computer science university 
sah adam sah 
tc efficient implementation tcl language 
master thesis university california berkeley may 
available technical report ucb csd 
sun java language white 
sun microsystems white sun microsystems 
tv joseph luis valente 
mobile agent security telescript 
proceedings th international conference ieee computer society compcon february 
way peter wayner 
agents unleashed public domain look agent technology 
ap professional hill massachusetts 
wel brent welch 
practical programming tcl tk 
prentice hall new jersey 
whi james white 
telescript technology foundation electronic marketplace 
general magic white general magic 
wu wu 
advanced algorithms information organization retrieval 
master thesis thayer school engineering dartmouth college 
