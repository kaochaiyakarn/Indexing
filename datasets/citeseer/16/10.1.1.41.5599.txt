object oriented approach feature interaction christian prehofer institut ur informatik technische universit unchen unchen germany www informatik tu muenchen de prehofer address feature interaction problem software composition problem 
show applicability new programming style feature oriented programming fop typical feature interaction problems 
fop generalizes inheritance object oriented programming allows compose objects individual services set features 
particular discuss exception handling fop apply fop automata description techniques 
address feature interaction problem software composition problem 
interest feature interactions stemming multimedia applications shows large demand expressive composition concepts objects individual services created 
approach objects individual services created set features 
composition employ feature composition architecture generalization inheritance object oriented programming 
allows incremental change compose features interactions similar refined way 
feature oriented programming fop solve frequent feature interaction problems occur telecommunication examples ffl typical problem feature adapted presence 
idea interaction handling lift feature context adapting services 
lifting context central idea composition architecture generalizes inheritance object oriented programming 
ffl give feature precedence resources impacts overlap 
achieved ordering features implicitly interaction handling 
section feature oriented programming extension language java 
java particularly suitable approach objectoriented languages 
details definitions fop 
feature model show applications require extensions approach 
example section presents vanilla example feature interactions call forwarding call screening 
develop set features composed arbitrarily 
exception handling java examples show integrates feature model 
second example section examines graphical description technique modeled features 
consider simple hierarchical finite state automata serve basis software design 
show composition techniques automata address interaction problems difficult model simple automata 
feature oriented programming introduce fop comparing object oriented programming 
feature declares instance variables defines methods similar subclasses mixins 
main difference separate core functionality subclass overwriting methods superclass different entities 
resolve feature interactions lifting functions feature context 
similar inheritance accomplished adapting overwriting methods lifted class 
depend features separate entities composition 
contrast inheritance just overwrites methods superclass 
fop allows compose objects individual features subclasses fully flexible modular way 
main advantage objects individual services created just selecting desired features object oriented programming 
main novelty approach modular architecture composing features required interaction handling yielding full object 
compose objects real notion class confused type objects 
consider instance example modeling stacks features stack providing push pop operations stack 
counter adds local counter size stack 
lock adding switch allow disallow modifications object stack 
object oriented language extend class stacks counter extend lock 
usually concrete class added concrete class 
generalize independent features added object 
instance run counter object lock 
furthermore easy imagine variations features instance different counters lock permits read access 
fop show easy provide set features interaction handling simple reuse 
general set features replaces rigid structure conventional class hierarchies 
composition features uses architecture adding interaction resolution code overwriting similar constructing concrete class hierarchy 
construct object class type features added particular order 
addition feature added combination features apply order adapt inner features 
feature oriented programming advantageous reasons ffl yields flexibility clarifies dependencies features classes objects individual services composed set features 
desirable alternative features classes framework new functionality incorporated 
ffl core functionality separated interaction handling provides structure clearer interfaces encourages write independent reusable code 
words subclasses independent entity subclass 
continue example modeling variations stacks 
define java interfaces features 
strictly needed ideas useful implementations interface 
interface stack void empty void push char void push char void pop char top interface counter void reset void void dec int size interface lock void lock void unlock boolean unlocked code provides base implementations individual features 
simple extension java 
notation feature sf defines new feature named sf implements stacks 
similar class names java sf new constructor 
feature implementations cf lf new lf cf sf creates object features 
interaction handling important features composed particular order adds cf sf adds lf 
feature sf implements stack string new string void empty java strings void push char string valueof concat void pop substring char top return void push char push push feature cf implements counter int void reset void void dec int size return feature lf implements lock boolean true void lock false void unlock true boolean unlocked return addition base implementations need provide replace method overwriting subclasses 
separate entities handle features time 
code lifts feature interfaces concrete feature implementations 
instance feature cf lifts stack adapts functions stack context cf counter updated accordingly 
composing features cf added object type feature interface stack just directly stack implementation 
important flexible composition shown 
feature cf lifts stack void empty reset super empty void push char super push void pop dec super pop feature lf lifts stack void empty unlocked super empty void push char unlocked super push void pop unlocked super pop feature lf lifts counter void reset unlocked super reset void unlocked super void dec unlocked super dec environment stack counter size dec push pop lock lock unlock composing features rounded boxes boxes arrows note methods unaffected interactions explicitly lifted top size 
modular specification features separated interactions allows object compositions ffl stack counter ffl stack lock ffl stack counter lock ffl counter lock combinations shown adapt features corresponding combination 
resulting objects type behave desired 
addition course feature individually lock 
furthermore easy imagine different variations features additional ones 
composition features shown example features 
compose stack counter lock add counter stack lift stack counter 
lock feature added inner lifted lock 
methods stack adapted stack lock 
general adding feature object having set features methods feature lifted individually new context 
note composed object provides functionality selected features composition need ordering 
instance outermost feature lifted similar lowest class class hierarchy functions overwritten see 
inheritance feature combinations needed combinations including feature interactions programmed explicitly 
contrast re features simply selecting desired ones creating object 
similarly classes interactions programmed hand 
detailed definition features refer 
shows simple translations feature language extension java java inheritance aggregation delegation 
feature interaction telecommunications known problem feature interaction stems abundance features telephones 
instance consider conflict occurring telephone connections forwards calls phone screens calls ics incoming call screening 
call connected 
example clear interaction forwarding fd ics resolved ways 
examples refer 
demonstrate techniques set features domain connecting calls ffl forwarding calls ffl ics incoming call screening ffl ocs outgoing call screening ics ocs look similar small differences 
instance may interact differently features shown 
basic phone basic building block feature phone provides function connect computing phone reached number 
addition simple technique adding actual services full object 
feature adds functionality extending function dispatch feature dispatch connect 
exceptions modeling busy signal function dispatch may throw exception shown java interface description interface phone int connect int dest int dispatch int dest throws busy implementation provides trivial connect functionality just order set stage features 
note need explicit constructor ph initializes instance variable origin call 
java class names self definable constructor functions may arguments 
class ph implements phone origin int function creating initializing objects ph int orig orig trivial dispatch int dispatch int dest throws busy return dest int connect int dest try return dispatch dest catch busy println busy return forwarding add feature forwarding interface interface forward boolean fd check int int forward int dest code simple possible just forwarding selected numbers number auxiliary function fd check 
feature fd implements forward aux 
function boolean fd check int naive check forwarding desired return int forward int return integrate service lift dispatch function feature fd lifts phone int dispatch int dest throws busy fd check dest recursive forwarding return connect forward dest return super dispatch dest note calls super dispatch order invoke possibly features calls connect attempt recursive connect attempt 
recursive forwarding limited simplicity 
incoming call screening ics simple check call raise exception busy ics disallows call 
structure code 
interface icsi int ics int dest throws busy feature ics implements icsi ics int orig super orig aux 
functions boolean ics check int calls return int ics int dest throws busy ics check dest throw new busy return dest feature ics lifts phone lift phone int dispatch int dest throws busy add ics service return super dispatch ics dest resolving ics forward interaction resolve interaction forwarding ics lift forward function ics 
chose lifting forward follows feature ics lifts forward lift forward int forward int dest update origin ok forwarded 
dest return super forward dest case forwarding hops ics checked intermediate hop wrt hop 
check wrt origin call desired just adapt update origin call 
lifting allows modular resolution interaction features 
outgoing call screening ocs quite similar ics model interaction forwarding differently ocs checked initial phone final destination 
choice ocs modeled similar ics different interaction code 
code shown brevity 
stronger condition check ocs intermediate hop 
needs extra data structure storing 
examples possible create objects subset features ics ocs fd 
instance object con created con new ics fd ph fd ics selected originating phone set 
code settings obtain examples connect call phone features just gives println con connect just gives println con connect gives forwarded allowed ics println con connect gives busy forwarded allowed ics println con connect gives forwarded twice println con connect easy imagine features variations features 
approach allows compose features flexible way 
provides clear structure dependencies needed number complementary alternative features grows 
features exceptions example shows fop easily accommodates exceptions java 
java requires declare exception method body may raise interfaces implementation raises exception 
rigid fully explicit declaration exceptions java feature combination fop affected methods marked 
hand restrictive scheme may bit inflexible 
instance example declare exception function dispatch concrete feature composition may exceptions 
case desirable handle exceptions liftings feature adapted context exception declared handled 
remarked adding removing exceptions java setting quite tedious 
features automata study example studied subset group ware application 
example hierarchical automata describe status document 
discussed arise feature interactions easily modeled simple automata concepts 
show model automata programming 
main benefit gain composition automata feature interactions handled fop 
show interactions application domain modeled appropriately fop 
fop provides basis developing advanced automata composition concepts possibly permit graphic notation 
discussed 
idea example specify smaller automata features compose techniques fop 
flexible composition main difference techniques graphic description software components 
model features automata undefined existent changeable fixed erase init fix hierarchical automaton status document ffl states existent undef transition function init 
ffl states changeable fixed transition fix 
assumes defines sub automaton state existent 
viewed refinement state 
ffl assumes defines function erase 
combination features shown 
full application contains larger set features 
motivation example select desired features individually document 
interaction problem example clearly 
state fixed erase possible 
achieved lifting 
shown disallow erase local state fixed 
note hierarchical automata pose problem viewed interaction 
problem arises sub automaton active global automaton corresponding refined state 
case global transition new state refined sub automaton feature unclear sub automaton re initialized old state preserved 
code defines base document global states 
feature implementation requires feature ba indicated requires clause 
feature ba allows da implementation basic functionality ba construct automata 
allows method newstate order define new state 
details shall discussed 
general base functionality new feature rely functionality required ones 
interface void init final int undef final int existent feature da implements requires ba final int undef newstate final int existent newstate default state da state undef void init state undef state existent second component just adds transition 
adds states implementation requires da order implement method 
lifting trivial omitted 
interface void erase feature ea implements requires da void erase state existent state undef feature ea lifts void init super init definition involved defines local automaton named local aut states 
constructor ca initializes local state 
interface void fix feature ca implements requires ba ca refines state uses local automaton ba local aut new ba final int changeable local aut newstate final int fixed local aut newstate initialize default state ca super local aut state changeable void fix local aut state fixed interesting aspects defined 
lift turn local automaton initial state init invoked 
furthermore solve interaction redefine erase 
feature ca lifts lift da initialize void init changeable default state local aut state changeable super init feature ca lifts lift ea void erase disable erase fixed local aut state fixed super erase full example similar interactions refer 
note simple implementation automata sufficient purpose 
pure automata clearly exist efficient implementations 
software applications automata just pose skeleton actual program completed step 
purpose implementation appropriate extensible 
discussion shown typical composition problems automata descriptions modeled fop 
clearly working automata graphical notation interaction resolution desirable 
typical interaction cases possible define graphical equivalents 
advanced specification concepts automata refer :10.1.1.20.5519
instance interactions supported special purpose languages graphical notation 
problem disabling transition possible objectoriented variant statemate 
languages local transition precedence global 
problem regarding life time local states resolved particular annotations statemate 
typical problem simple notations certain aspects modeled particular global transitions reset local state 
main point common automata concepts allow typical composition operations automata consider interactions components explicitly done 
concepts developed possible compose just wanted features automata interactions resolved specified 
remains extract broad set typical interactions devise graphical notation 
shown feature oriented programming allows fully modular compositional modeling typical feature interaction problems 
includes common extensions tools exception handling graphic descriptions automata 
research devoted feature interaction detection specification believe flexible composition techniques support development evolution large complicated software 
feature oriented programming extension object oriented programming paradigm argue object oriented programming benefit ideas developed feature interactions 
focus elaborated composition techniques allow consider interaction agents objects 
extensions parameterized features detailed comparison object oriented techniques refer 
related software composition adaptive programming aims adaptable software design 
versions adaptive programming apply similar techniques consider idea feature interaction composition 
bracha lindstrom 
modularity meets inheritance 
proc 
international conference computer languages san francisco april 
ieee computer society 
cameron 
velthuijsen 
feature interaction benchmark 
ieee communications magazine march 
cameron 
velthuijsen 
feature interaction benchmark 
bouma hugo velthuijsen editors feature interactions telecommunications systems pages amsterdam 
ios press 
cheng ohta editors 
feature interactions telecommunications iii 
ios press tokyo japan oct 
james gosling bill joy guy steele 
java language specification 
addison wesley september 
harel naamad 
statemate semantics statecharts 
ieee transactions software engineering method 
karl lieberherr 
adaptive object oriented software demeter method propagation patterns 
pws publishing boston 
christian prehofer 
feature oriented programming fresh look objects 
ecoop 
appear springer lncs 
christian prehofer 
inheritance feature interaction 
max editor special issues object oriented programming 
ecoop workshop composability issues object orientation heidelberg 
verlag 
linda jens palsberg karl lieberherr 
evolution object behavior context relations 
david garlan editor symposium foundations software engineering san francisco 
acm press 
gunnar 
flexible interaction objects 
technical report tu munchen tum 
gunnar 
supporting workflows include schematic ad hoc aspects 
michael wolf ulrich reimer editors proc 
st int 
conf 
practical aspects knowledge management pakm 
zave 
feature interactions formal specifications telecommunications 
ieee computer august 
