krakatoa decompilation java bytecode reveal source 
todd proebsting scott university arizona presents technique automatically decompiling java bytecode java source 
technique reconstructs source level expressions bytecode reconstructs readable high level control statements primitive goto branches 
fewer dozen simple rules reconstruct high level statements 
decompilation transforms low level language high level language 
java virtual machine jvm specifies low level bytecode language stack machine ly 
language defines operators control flow specified simple explicit transfers labels 
compiling java class yields class file contains type information bytecode 
jvm requires significant amount type information class files object linking 
furthermore bytecode verifiably behaved order ensure safe execution 
decompilation systems exploit type information behaved property recover java source code class file 
technique transforming low level java bytecode legal java source code 
system krakatoa performs type inference issue local variable declarations 
verifier type type inference techniques address department computer science university arizona tucson az email cs arizona edu 
krakatoa volcano located java sumatra 
eruption threw cubic miles debris air heard miles away australia 
known 
presently focus research subproblems recovering source level expressions synthesizing high level control constructs goto primitives 
krakatoa uses stack simulation technique recover expressions perform type inference 
expression recovery creates source level assignments comparisons primitive bytecode operations 
extend ramshaw goto elimination algorithm structure create source arbitrary reducible control flow graphs 
technique produces source code loops multilevel break 
subsequent techniques recover intuitive constructs statements application simple code rewrite rules 
traditional decompilation systems graph transformations recover high level control constructs 
systems require author decompiler anticipate high level control idioms 
faced unexpected language idiom systems abort produce gotos illegal java 
krakatoa represents different approach 
krakatoa produces legal java source legal java bytecode arbitrary reducible control flow recovers intuitive high level constructs source 
gives steps decompilation performed krakatoa 
expression builder reads bytecode recovers expressions type information produces control flow graph cfg 
sequencer orders cfg nodes ramshaw goto elimination technique 
ramshaw algorithm produces convoluted legal java syntax tree ast 
system transforms ast convoluted ast set simple rewrites 
final phase produces java source traversing ast 
expression builder java bytecodes node sequencer flow graph expressions conditional gotos goto eliminator ramshaw algorithm augmented flow graph code simplifier java ast final java printer restructured java ast java source java bytecode decompilation system expression recovery java bytecodes bear close correspondence java source 
result recovering expressions java bytecode simple simpler recovering expressions machine language 
java class files include information recovering high level operations field easy 
fact bytecode behaved verifiable simplifies analysis 
gives sample program abbreviated disassembly 
note level type information disassembly produced sun utility 
symbolic execution bytecode creates corresponding java source expressions 
creates conditional unconditional goto removed subsequent decompilation steps 
symbolic execution simulates java virtual machine evaluation stack strings represent source level expressions computed 
class foo int sam int bar int int sam return compiled foo java class foo extends java lang object int sam int bar int int method int bar int int aload getfield field foo sam 
iload iload iconst istore iload ireturn simple method bytecode disassembly 
instance iload loads value local variable type int represented stack 
similarly top elements symbolic stack bytecode iadd integer addition elements popped stack replaced 
symbolic execution expressions assignment requires emitting java source 
algorithm recovers expressions basic block time 
basic blocks produced conditional expression operation empty stacks information required predecessors 
basic blocks blocks easily identified raised exception stack 
provides step step decompilation bytecode 
initial aload instruction pushes java stack 
virtual functions th local variable refers 
getfield instruction named field sam current top stack 
popped replaced sam 
iload pushes stack 
compares top stack elements branches appropriate instruction lower equal top element 
symbolically executing requires popping top elements emitting appropriate conditional branch 
translating remaining instructions similar 
bytecode instructions equally simple symbolically execute 
unfortunately require information 
stack manipulation routines pop dup depend byte offsets stack top 
instance pop removes top bytes stack bytes represent byte double value byte scalar values 
correctly simulate instructions symbolic execution keeps track size type stack element 
instruction ordering recovering expressions conditional unconditional goto implicit fall behavior determine control flow 
java goto statement control flow expressed structured statements 
ramshaw algorithm eliminating goto pascal programs preserving program structure ram 
algorithm replaces goto multilevel break surrounding loop 
algorithm determines locations surrounding loops 
trivially extended algorithm multilevel continue 
ramshaw extended algorithm replaces forward goto break backward goto continue 
algorithm inserts loop ends just target break statement 
likewise inserts loop starts just target continue 
loops ensure control transfer statement jumps correct instruction 
newly inserted loop break statement control fall loop 
shows example technique 
additional loops break continue create structured program exactly control flow goto program 
ramshaw algorithm requires inputs control flow graph instruction ordering 
algorithm encodes order flow graph augmenting edges instruction augmenting edge instruction sequence 
augmenting edges occur pair physically adjacent instructions actual control flow impossible 
proves augmented graph reducible structurally equivalent pkt program created goto 
ramshaw provides algorithm finding reducible augmented flow graph reducible flow graph 
control flow graphs java programs reducible 
compiled bytecode form reducible control flow graph 
unfortunately simple optimizations loop inversion create irreducible augmented flow graphs 
flow graph program problem augmenting edge statements creates jump body loop formed statements 
utilize ramshaw algorithm developed algorithm orders reducible graph instructions resulting augmented graph reducible 
augmenting flow graph creating reducible augmented flow graph requires augmenting edge enters loop header 
preventing simple ordering instructions header contiguously order loop instructions 
physical adjacency determines augmenting edges contiguously ordering instructions guarantees augmenting edge entering loop outside entering top affect reducibility loop header 
loop nested loops inside easy order simply remove back edges topologically sort remaining directed acyclic graph dag 
handling interior loops requires replacing single placeholder node graph separately ordering loop surrounding graph 
ordering re insert loop nodes placeholder 
re ordering instructions may change instruction falls original bytecode symbolic stack emitted source aload getfield field foo sam 
sam iload sam sam goto iload iconst istore iload ireturn return symbolic execution bytecode stmt expr goto expr goto stmt stmt stmt expr break expr break break stmt break stmt ramshaw goto elimination ordering 
implicit control flow changed algorithm add new branches restore original control flow 
possible topological sort attempts maintain original fall behavior 
algorithm produces reducible augmented graph 
loops ordered separately laid contiguously augmenting edge entering outside enters top 
topological sort loop minus backedges guarantees top node loop header internal edges cause irreducibility 
outside edges loop header loop irreducible 
resulting augmented graph reducible 
loops blocks instructions ordered contiguously 
exception handling regions form contiguous sections instructions 
class files specify instructions regions 
algorithm orders regions contiguously treating loops 
applying technique create total ordering nodes augmenting path krakatoa apply ramshaw technique eliminate goto 
code transformations program points applying ramshaw algorithm eliminating goto krakatoa complex legal java ast see 
krakatoa proceeds recover natural high level constructs original program 
krakatoa uses program point analysis summarize program control flow guide recovering high level constructs 
program point syntactic location program 
statement program point 
program points properties reachability equivalence class 
program point unreachable preceded execution paths tional jump statement return throw break continue 
instance program point phi unreachable preceded return statement 
phi reachable branches preceding statement jump statement 
program points equivalent denoted phi phi computation program points 
instance program point break statement equivalent program point loop exits phi phi 
example phi phi phi phi phi phi equivalent program points phi phi reachability equivalence simple compute standard control flow analyses asu 
ast rewrite rules krakatoa performs series ast rewriting transformations recover natural program constructs 
krakatoa applies rewriting rules repeatedly changes occur 
rules sufficient retrieve high level constructs java language including statements short circuit evaluation expressions 
rewriting rule reduces size ast ensuring termination 
table summarizes rules describe greater detail 
rules generalize 
apply loops apply loops 
rules symmetric cases 
example rule table removes empty branch statement symmetric rule removing empty branch negating predicate 
rewriting rules transformation shown table changes statement statement branch empty 
transformation legal 
second transformation creates statement statement hoisting subsequent statement list part 
algorithm performs transformation reachable program point stmtlist equivalent program point stmtlist 
essentially means statement branch stmtlist reach stmtlist directly 
loop rewriting rules third rule table removes useless continue statements 
program point continue statement equivalent program point continue statement continue removed 
fourth rule creates short circuit test expression loop eliminating interior statement 
doing requires loop body statement branch statement consists single jump program point equivalent breaking loop 
fifth transformation provides example transforming loops statements 
loop equivalent repeat simple break statements safely removed transformation 
loop repeats program point unreachable 
break may removed immediately unreachable program point equivalent program point loop phi table 
transformation replaces loop statement deletes break statements loop 
short circuit evaluation rewriting rules sixth rule shown table recovers conditional 
short circuit exist adjacent conditionals guard statement list failure cause branch equivalent locations 
transformation table recovers expressions 
transformation applicable simple statement represents entire body 
status implemented prototype java decompiler krakatoa java 
run krakatoa number class files including source code access 
examined output krakatoa hand krakatoa appears recover high level constructs 
figures provide example stages decompilation 
rule conditions eliminate expr stmtlist expr stmtlist create expr stmtlist phi stmtlist expr stmtlist stmtlist stmtlist contains reachable program points equivalent phi delete continues stmtlist phi continue phi stmtlist phi phi move conditionals expr phi jump stmtlist stmtlist phi expr stmtlist stmtlist phi phi break continue remove loop stmt expr stmtlist phi phi stmt expr stmtlist stmtlist contains reachable program points equivalent phi program point break equivalent phi create short circuit expr phi expr phi stmtlist expr expr stmtlist equivalent jumps 
phi phi create short circuit expr expr stmtlist expr expr stmtlist stmt branch table canonical code transformation rules phi phi return phi unreachable phi phi phi reachable points phi phi phi phi phi phi phi phi phi break phi unreachable phi continue phi unreachable phi unreachable phi equivalent points shows original source code sample program 
shows results expression decompilation bytecode program 
shows results applying ramshaw algorithm decompiled expression graph 
shows result grammar rewriting rules applied output ramshaw algorithm 
obviously laws simplify boolean expressions 
versions krakatoa 
jvm dup operators duplicate stack elements krakatoa simply creates temporary variable hold duplicated value 
yields unnatural easily readable 
difficult problem failure recover conditional expression operator 
operation presents difficulties requires determining short circuit operators expression recovery requires expression recovery handle non empty stacks basic block boundaries 
fortunately short circuit problem handled easily simple graph writing rules cif 
non empty stack problem difficult requires combining expressions symbolic stack entering basic block multiple predecessors 
krakatoa uses temporary variable hold result branch conditional expression assigns temporary value conditional expression 
currently investigating solutions problem 
appendix contains additional examples krakatoa output 
countermeasures krakatoa effective reproducing readable java source java bytecode 
may alarming want protect source code unwanted copying 
unfortunately countermeasures 
introduce irreducible control flow bogus conditional jumps foil ramshaw algorithm 
stops recreation high level constructs 
krakatoa simply produce source code java language extended goto 
introduce bizarre stack behavior foil expression recovery 
difficult behavior bizarre yield bytecode 
possible create bogus threads control threads execute confuse expression recovery mechanism basic blocks entered non empty stacks 
code obfuscation technique modestly effective change class file symbol table contain bizarre names fields methods 
long cooperating classes agree names class files link execute correctly vv sri 
suggested solution dedicated class foo void foo int int original source class foo void foo int int goto goto goto goto goto goto return foo foo expression decompilation class foo void foo int int lp break lp break lp lp lp break lp break lp break lp lp continue lp lp continue lp lp return goto elimination ramshaw algorithm class foo void foo int int lp lp return ast transformation final decompilation results hardware encryption protect class files wil 
traditional countermeasures java bytecode 
impossible mix code data 
impossible jump middle instructions 
impossible generate bytecode jump 
related ramshaw technique eliminating goto pascal programs replacing multilevel break surrounding loops ram 
attempt recover high level control constructs 
high level control structures provided original pascal 
decompilation systems series graph transformations recover high level constructs lic cif 
systems encounter difficulties presence nested loops arbitrarily control flow 
multilevel break cause considerable problems 
exception handling introduces difficulty systems control flow graph entered places 
krakatoa easily creates multi level break continue able eliminate virtually unnecessary ones successive application rewrite rules 
mocha version beta vv java decompiler written van vliet 
mocha uses graph transformations recover high level constructs 
mocha aborts confronts tangled structured control flow including multi level break continue 
system issue type declarations uses debugging information recover local variable names 
graph transformation systems transform unstructured graph structured graph wo pkt wil 
peterson kasami proof flow graph transformed equivalent formed flow graph 
williams ossher similar technique recognize unstructured sub graphs replace equivalent structured graphs 
node splitting preserves execution sequence program structure 
consider reasonable decompilation 
baker presents technique producing programs flow graphs bak 
baker generates summary control flow information guide graph transformations 
goal similar output decompiler readable possible 
technique structures old fortran programs readability 
result technique may leave goto resulting programs allowed java 
techniques eliminating goto proposed eh amm am 
techniques may change structure program may add condition variables create subroutines 
technique decompiling java bytecode java source 
decompiler krakatoa produces syntactically legal java source legal reducible java bytecode 
focus subproblems decompilation recovery expressions java stack bytecode recovery high level control flow constructs 
stack simulation method recovering expressions 
extension ramshaw goto elimination technique applied reducible control flow graph 
small powerful set code rewriting rules recovering natural high level control flow constructs java source language 
rewrite rules enable krakatoa successfully decompile class files graph transformation systems fail 
krakatoa high level language idiom recognize may leave unnecessary breaks continues code 
produce legal java 
system relies graph transformation system produce high level constructs fail unexpected construct 
techniques combined abundant type information available class files decompilation java bytecode quite effective 
acknowledgment saumya debray helped develop instruction ordering algorithm 
allen ken kennedy carrie porterfield joe warren 
conver sion control dependence data dependence 
pages 
am ashcroft manna 
translating programs schemas schemas 
siam journal computing 
amm 
control flow normalization algorithm complexity 
ieee transactions software engineering 
asu aho sethi ullman 
compilers principles techniques tools 
addison wesley reading massachusetts 
bak brenda baker 
algorithm structuring flowgraphs 
journal association computing machinery january 
cif cristina cifuentes 
structuring algorithm decompilation 
proceedings xix de informatica pages buenos aires argentina august 
eh ana laurie hendren 
taming control flow structured approach eliminating goto statements 
pages 
international conference computer languages may 
lic ulrike 
decompilation control structures means graph transformations 
nivat hartmut ehrig thatcher editors mathematical foundations software development proceedings international joint conference theory practice software development tapsoft volume colloquium trees algebra programming caap volume lecture notes computer science pages 
springer verlag march 
ly tim lindholm frank yellin 
java virtual machine specification 
java series 
addison wesley 
pkt peterson kasami 
capabilities repeat exit statements 
communications acm 
ram lyle ramshaw 
eliminating go preserving program structure 
journal association computing machinery october 
sri kb sriram 

url www org html 
vv van vliet 
mocha 
current url www com eric computers mocha zip 
wil williams 
generating structured flow diagrams nature 
computer journal 
wil wilhelm 
cryptographically protected objects may 
french version appeared proceedings lausanne ch 
epfl ch wilhelm html 
wo williams ossher 
conversion unstructured flow diagrams structured 
computer journal 
additional rewriting rules anticipate tree rewriting rules improve readability code 
anticipated rules build natural loops 
table presents addition code transformation rules applied krakatoa 
expect add rules re implement krakatoa java 
sample decompiler output included representative sampling krakatoa output classfile implements sets java 
original java source left krakatoa output right 
table provides original source class definitions rule conditions include init expr update stmtlist expr update stmtlist simple statement include update init expr stmtlist phi init expr stmtlist stmtlist contains reachable program points equivalent phi simple statement table additional code transformation rules original source output krakatoa import java io import java util vector public class set implements class variables static boolean instance variables protected vector members functions import java io import java util vector public class set extends java lang object implements java lang static boolean protected java util vector members functions defined 
table class definition output krakatoa corresponding krakatoa output 
table provides original source small functions krakatoa output functions 
table shows larger function original source krakatoa output function 
original source output krakatoa public boolean ismember object return members contains ismember public boolean ismember java lang object local return members contains local ismember public void object ismember members addelement public void java lang object local ismember local members addelement local return public void object members public void java lang object local members local return public int size return members size size public int size return members size size boolean equals set set difference difference return size size boolean equals set local set local set local local difference local local local difference local size local size return return equals table member functions original source krakatoa output original source output krakatoa returns new set elements set set public set union set set int size int object obj system println new set members vector members clone size size size obj members elementat ismember obj obj return union public set union set local set local int local int local java lang object local set java lang system println local new set local members java util vector members clone local local size local loop local local local local members elementat local local ismember local local local local loop return local union table member functions original source krakatoa output 
