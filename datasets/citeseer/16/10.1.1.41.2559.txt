forward acknowledgment refining tcp congestion control matthew mathis jamshid mahdavi pittsburgh supercomputing center mathis psc edu 
mahdavi psc edu 
copyright fl association computing machinery 
acm permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copyright components owned acm honored 
abstracting credit permitted 
copy republish post servers redistribute lists requires prior specific permission fee 
request permission publish publications dept acm fax email permissions acm org 
developed forward acknowledgment fack congestion control algorithm addresses performance problems observed internet 
fack algorithm principles congestion control designed proposed tcp sack option 
decoupling congestion control algorithms data recovery attains precise control data flow network 
introduce additional algorithms improve behavior specific situations 
simulations compare fack reno reno sack 
consider potential performance impact fack internet 
evolution internet pushed tcp new limits wide variety ip infrastructures 
anecdotal evidence suggests tcp experiences lower expected performance number situations internet tcp 
common perception weaknesses consequence failure deploy standard selective acknowledgment sack jb today tcp implementations 
sack generally viewed method address data recovery widely investigated address congestion control issues 
floyd pointed multiple segment losses cause reno tcp lose self clock resulting retransmission timeout flo flo 
timeouts cause substantial performance degradation 
timeout interval data sent 
addition timeout followed period slow start 
sequence events network round trip times results significant performance reduction long delay links 
heart problem inability reno tcp supported part national science foundation 
ncr 
copyright fl association computing machinery 
acm appear computer communication review publication acm sigcomm volume number october 
issn 
electronic facsimile differs printed version 
better support electronic viewing 
please printed version referencing layout details page numbers 
accurately control congestion recovering dropped segments 
developed new algorithm improve tcp congestion control recovery 
algorithm called forward acknowledgment fack works conjunction proposed tcp sack option mmfr 
existence sack option greatly improves robustness tcp congestion 
sack help tcp survive multiple segment losses single window incurring retransmission timeout 
sack glean additional information congestion state leading improved tcp behavior recovery 
fack algorithm uses information add precise control injection data network recovery 
fack decouples congestion control algorithms determine data send data recovery algorithms determine data send believe simplest direct way sack improve congestion control 
researchers currently studying congestion control issues tcp 
research community interested potential tcp vegas bop dly 
delay measurements tcp vegas attempts eliminate periodic self induced segment losses caused reno tcp 
vegas congestion avoidance mechanism cam algorithm modifies linear increase phase congestion avoidance 
study hoe investigates congestion control issues slow start hoe hoe 
focused primarily improving congestion control recovery exponential decrease phase congestion avoidance compatible efforts 
expectation efforts eventually incorporated tcp order incrementally improve performance 
section describe principles congestion control fack built 
section presents detailed description fack algorithm 
section examines basic behavior fack algorithm optional algorithms 
sections explore performance various algorithms 
section discuss research directions 
summarize findings 
idea proposed implemented tcp 
congestion control ideal principles van jacobson published standard tcp congestion control algorithms jac bra 
modify algorithms described 
fack extends congestion control algorithms tcp recovery interval 
key concepts conservation packets self clock congestion avoidance slow start reviewed 
conservation packets requires new segment injected network old segment left 
principle leads inherent stability ensuring number segments network remains constant 
schemes especially rate transmission cause number segments network grow bound periods congestion congestion transmission time segments increases 
tcp implements conservation packets relying segment transmissions generally triggered returning 
tcp self clock contributes substantially protecting network congestion 
congestion avoidance equilibrium state algorithm tcp 
tcp maintains congestion window cwnd represents maximum amount outstanding data connection 
tcp sender detects congestion network identified loss segments congestion window halved 
conditions congestion window increased linearly maximum segment size mss round trip network 
stability linear increase multiplicative decrease algorithm demonstrated investigations publication fj mog fj fj 
slow start algorithm tcp uses reach equilibrium state cwnd threshold ssthresh 
ssthresh attempts dynamically estimate correct window size connection 
connection establishment retransmission timeouts tcp sets cwnd mss increases cwnd mss received ack 
exponential increase continues cwnd reaches slow start threshold ssthresh 
ssthresh reached tcp passes congestion avoidance regime 
ssthresh set half current value cwnd sender detects congestion undergoes retransmission timeout 
reno tcp behavior reno tcp currently de facto standard implementation tcp ste 
reno implements slow start congestion avoidance manner described 
includes fast retransmit algorithm tahoe tcp adds new algorithm fast recovery 
fast retransmit fast recovery ste rely counting duplicate acks tcp acknowledgments sent data receiver response additional received segment missing data 
jacobson describes algorithm goes note time takes open window rlog round trip time window size packets 
receiver delayed ack sends ack segments estimate rlog generally agreed slow start correct increase window size mss ack ack acknowledges mss data 
fast retransmit fast recovery jac ste algorithms intended preserve self clock recovery lost segment 
fast retransmit uses duplicate acks detect loss segment 
duplicate acks detected tcp assumes segment lost retransmits 
number chosen minimize likelihood order segments triggering spurious retransmissions 
fast recovery algorithm attempts estimate data remains outstanding network counting duplicate acks 
artificially inflates cwnd duplicate ack received causing new data transmitted cwnd large 
fast recovery allows halved window new data transmitted fast retransmit 
single segment losses fast retransmit fast recovery preserve tcp self clock enable keep network full recovering lost segment 
multiple lost segments reno fully recover resulting timeout subsequent slow start flo 
sack tcp behavior new tcp sack option mmfr progressing ietf standards track 
slight modification original sack option described rfc jb 
receiver holds non contiguous data sends duplicate acks bearing sack options inform sender segments correctly received 
block contiguous data expressed sack option sequence number octet data block sequence number octet just block 
new sack option block required include received segment 
additional sack blocks repeat previously sent sack blocks increase robustness presence lost acks 
illustrate fack compare behavior sack implementation reno congestion control 
standard implementation sack assumptions sack implementation reno congestion control ffl fast retransmit fast recovery modified resend segments expect 
ffl fast recovery continues estimate amount outstanding data counting returning acks 
assumption order retain congestion properties reno tcp main distinction sack implementation reno congestion control sack implementation fack congestion control 
ffl algorithm detecting recovery uses presence sack blocks prevent partial advances snd una causing tcp leave recovery state prematurely 
tcp sender state variable snd una holds sequence number byte unacknowledged data snd nxt holds sequence number byte data 
variables defined tcp standard pos 
fixes problem reno pointed hoe hoe floyd flo 
cases reno may incorrectly fast retransmit fast recovery 
floyd hoe observed strengthening reno test recovery improves behavior number situations ff hoe 
remainder reno sack refer implementation outlined 
sack implementation uses fack congestion control algorithm referred simply fack 
fack design goals single segment losses reno implements ideal congestion control principles set forth 
case multiple losses reno fails meet ideal principles lacks sufficiently accurate estimate data outstanding network precisely time needed 
requisite network state information obtained accurate knowledge forward data held receiver 
forward mean data highest sequence number 
origin name forward acknowledgment 
goal fack algorithm perform precise congestion control recovery keeping accurate estimate amount data outstanding network 
doing fack attempts preserve tcp self clock reduce burstiness tcp 
note tcp implementations discussed nearly identical behavior single segment losses 
reduces need rigorous testing ordinary conditions implementations expected performance 
fack algorithm fack algorithm uses additional information provided sack option keep explicit measure total number bytes data outstanding network 
contrast reno reno sack attempt estimate assuming duplicate ack received represents segment left network 
fack algorithm able straightforward way introducing new state variables snd fack data 
sender retain information data blocks held receiver required order sack information correctly retransmit data 
addition needed control data retransmission information retransmitted segments kept order accurately determine left network 
core fack congestion control algorithm new tcp state variable data sender 
new variable snd fack updated reflect forward data held receiver 
non recovery states snd fack variable updated acknowledgment number tcp header snd una 
recovery receiver holds non contiguous data sender continues update snd una acknowledgment number tcp header utilizes information contained observation reno inaccurately assesses network state arose part ongoing research aimed developing tools benchmarking production internet ipp 
efforts focused tool called treno traceroute reno mat mat evolution earlier tool windowed ping mat 
treno attempts measure available network emulating reno tcp traceroute udp stream 
reno congestion control treno observed exhibit significantly different behavior largely due precise picture congestion state network 
investigation differences treno reno behaviors led discover fack underlying principles 
tcp sack options update snd fack 
sack block received acknowledges data higher sequence number current value snd fack snd fack updated reflect highest sequence number known received plus 
sender algorithms address reliable transport continue existing state variable snd una 
sender algorithms address congestion management altered snd fack provides accurate view state network 
define awnd data sender estimate actual quantity data outstanding network 
assuming unacknowledged segments left network awnd snd nxt gamma snd fack recovery data retransmitted included computation awnd 
sender computes new variable data reflecting quantity outstanding retransmitted data network 
time segment retransmitted data increased segment size retransmitted segment determined left network data decreased segment size 
tcp estimate amount data outstanding network recovery awnd snd nxt gamma snd fack data measure outstanding data fack congestion control algorithm regulate amount data outstanding network mss current value cwnd awnd cwnd fack congestion control algorithm place special requirements algorithm implied sack internet draft sufficient 
generally choose send oldest data 
fack derives robustness simplicity updating state variables retransmits old data increase data sends new data advances snd nxt 
correspondingly acks report new data receiver decrease data advance snd fack 
furthermore sender receives ack advances snd fack value snd nxt time segment retransmitted retransmitted segment unaccounted sender knows segment retransmitted lost 
principle fack algorithm implemented utilizing information provided receiver mechanisms tcp timestamp option determine rightmost segment received kar 
allow benefits improved congestion control recovery immediately realized existing tcp implementations 
complementary nature fack sack expected imminent deployment sack research assuming fack implemented conjunction sack 
true network reordering segments retransmissions 
case cwnd halved immediately lost segment awnd significant larger cwnd 
issue addressed section 
chooses send new data constrained receiver window snd wnd additional check ensure new data lie limit imposed snd wnd 
chooses retransmit old data constrained receiver window 
triggering recovery reno invokes fast recovery counting duplicate acknowledgments dupacks 
algorithm causes unnecessary delay segments lost prior receiving duplicate acknowledgments 
fack version cwnd adjustment retransmission triggered receiver reports reassembly queue longer segments snd fack snd una 
mss dupacks 
exactly segment lost algorithms trigger recovery exactly duplicate acknowledgment 
recovery recovery period ends snd una advances snd nxt time loss detected 
recovery period cwnd held constant recovery ends tcp returns congestion avoidance performs linear increase cwnd 
implementation tested timeout forced detected retransmitted segment lost 
condition included prevent fack aggressive presence persistent congestion 
fack behavior section explore behavior fack algorithm simulator environment 
introduce algorithm estimates correct window conservatively losses result slow start 
introduce algorithm smooth data transmission recovery period 
simulation environment tested new algorithms implementing lbnl simulator ns mf added necessary new congestion control algorithms 
simulator includes models tahoe reno reno sack 
added fack sender simulator able existing sack tcp receiver modification 
set tests uses simple network containing nodes 
nodes represent routers connected ms link host close proximity routers host ms away 
product network kbytes including store forward delays 
tests utilize mss kb 
properly provisioned routers network queues packets long 
varied queue lengths order examine adequately provisioned cases 
implementation fack available release ns 
note historical papers investigating tcp dynamics networks simulations 
believe protocol development adequately address properly provisioned networks protocols shown stable optimal environments 
mb ms ms mb mb ms round trip time ms plus ms store forward delay yielding total pipe size kbytes 
test topology network provisioned queues length packets 
segments unnecessarily retransmitted 
reno behavior slow start 
investigations utilize drop tail routers 
details fack algorithm implementation require changes operate networks intelligent queuing disciplines 
relative benefit fack algorithm networks slightly lower episodes congestion networks expected extreme 
examples plot segment numbers vs time seconds 
segment shown twice enters bottleneck queue leaves 
dropped segments indicated theta 
retransmissions stand enqueue dequeue events visibly order 
cases plots window size router queue occupancy shown 
see www psc edu networking papers enlarged figures 
network provisioned queues length packets 
data unnecessarily retransmitted 
reno sack behavior slow start 
network provisioned queues length packets 
data unnecessarily retransmitted 
fack behavior slow start 
network provisioned queues length packets ssthresh preset segments 
data unnecessarily retransmitted 
sack fack loss recovery details 
behavior slow start slow start tcp opens window exponentially forcing network congestion dropping segments 
shows behavior reno slow start 
reno unable handle multiple segment losses times proceeds slow start timeout interval 
shows behavior reno sack circumstances 
reno sack incur timeout 
due large number lost segments reno sack underestimates window recovery requires round trip times complete recovery 
shows behavior fack situation 
fack divides window size waits half rtt data exit network proceeds retransmit lost segments 
examples reno sack fack unnecessary retransmissions 
reno hand unnecessarily retransmits segments 
fack vs reno sack compares detailed behaviors fack reno sack slightly different case 
variable ssthresh preset bottleneck queue packet buffers 
case behaviors fack reno sack similar 
primary difference visible queue length bottleneck link 
recovery sec reno sack burst transmission causes spike queue length 
window size recovery identical algorithms fack reno sack roughly performance environments tcp loses half window data 
half window data lost window estimate reno sack sufficiently accurate 
shows case 
addition segments lost slow start additional segments dropped transit bottleneck link 
case tcp runs acks invoking fast recovery 
worst case result retransmit timeout followed slow start 
requirements sack implementation tcp sender takes retransmit timeout clear information sack blocks held receiver 
sender timeout slow start possibility retransmitting data received 
sack implementation simulator includes additional test specifically case half window data lost proceeds directly slow start 
avoids retransmit timeout incurs penalties slow start duplicated data 
final result case round trip times lost slow start segments unnecessarily retransmitted 
note possible optimize reno sack case keeping information stored sack blocks 
resulting tcp take penalty slow start case 
slow start overshoots algorithm reno fack examples congestion window immediately cut half second time 
reason behavior dividing cwnd tcp utilize value cwnd lost segment sent 
point session fills available buffer space exactly loss detected rtt cwnd doubled 
improve behavior implementing additional window adjustment cwnd ssthresh mss cwnd tcp slow start reduces cwnd extra factor prior reducing window setting ssthresh 
takes account fact time segment sent cwnd smaller time loss detected conservative setting cwnd ssthresh 
additional algorithm place results test simulation shown 
note segment loss slow start occur time sec compared occurs time sec 
size burst equal number dropped segments plus number dropped acks minus 
section utilized delayed acks cause cwnd increase factor 
effects case shown section 
define half round trip slow start 
choice half somewhat subjective preserves continuity boundary conditions 
network provisioned queues length packets non congestion related losses injected 
segments unnecessarily retransmitted 
sack recovery detail greater window loss 
network provisioned queues length packets 
data unnecessarily retransmitted 
behavior fack 
network provisioned queues length packets 
data unnecessarily retransmitted 
fack behavior bottom top 
utilized cases 
data smoothing congestion epoch segments lost tcp performs exponential backoff cutting cwnd half 
current tcp implementations sender stops transmitting data data left network reduce awnd new value cwnd 
sender resumes transmission data 
typically results full window data transmitted half round trip time resulting uneven transmission data subsequent round trips 
solutions problem suggested hoe jac deployed 
recommended solution problem smooth transmission data rtt slowly reducing cwnd instantly halving 
implemented solution follows time congestion detected snd nxt gamma snd fack gamma time snd fack advances deltaf ack gamma deltaf ack gamma aware research group working tcp implementation includes solution problem similar bal 
added cwnd phase congestion control 
time recovery begins cwnd slightly awnd 
round trip recovery reduced zero 
non zero acts smooth data evenly round trip exactly cwnd bytes data outstanding round trip 
variable scale factor controlling quickly pulled zero 
normally set invoked set 
set queue length routers packets causing network underutilized slow start 
rtt slow start fack top clusters transmissions 
hand fack bottom evenly distributes data full round trip time minimizing effects bursts network 
comparison algorithm performance slowstart order compare performance various algorithms section ran simulations algorithms exhaustive range queue lengths bottleneck router 
algorithms reno reno sack fack fack fack fack 
order compare performance various algorithms meaningful way computed lost opportunity run amount additional data sent connection run entirely congestion avoidance 
events cause idle time link slow start retransmit timeouts deep reductions cwnd result higher lost opportunity 
results comparison shown 
upper graph shows lost opportunity algorithm receiver acknowledges segment examples section 
lower graph uses receiver delayed ack 
graphs effects retransmit timeouts reno clearly visible queue sizes 
delayed ack reno loses kb kb potential data transfer capability slowstart 
delayed ack value increases kb kb 
options sack congestion control perform significantly better reno cases 
delayed ack fack algorithm shows poor performance subset queue sizes examined 
cases fack aggressive slow start takes additional packet loss resulting retransmission timeout 
reno sack shows lower performance queue sizes remaining variations fack 
result additional round trips caused ack starvation immediately slow start see 
versions fack include algorithm show poorer performance low queue lengths 
best consistent performer fack algorithm 
delayed ack fack reno sack cases longer exhibit behaviors mentioned slow start push network far congestion 
effects pronounced delayed ack receiver sends acks frequently minimum sends ack mss data received 
delayed ack tcp implementations internet 
receiver delayed ack 
receiver delayed ack 
comparison behavior various congestion algorithms slow start 
stream mb ms mb ms ms mb mb ms mb ms tiny bulk stream jitter test topology tcp forward path utilization function reverse path utilization 
note load reverse path causes nearly idle capacity forward path 
example uses packet queue length sufficient buffering network 
comparison fack reno reno sack largest queue sizes tested conservative compared algorithms 
performance comparisons investigated behavior performance various congestion control algorithms scenarios 
scenario tcp subjected delay jitter bursty losses demonstrates interesting differences reno reno sack fack 
simulator able investigate tcp behavior situation single low bandwidth data stream reverse direction 
reverse data stream connection small randomly distributed bursts data average rate bursts second 
bursts small constant size run ranging kb 
traffic example characteristic small netnews stream sporadic mail 
environment ran algorithms reno reno sack fack compared performance 
shows forward path performance versus reverse path load algorithm 
note load reverse path reno leaves idle capacity forward path 
reflects combined trace slightly reduced buffering accent interesting detail 
behaviors shown simulations generate 
reno fack jitter effects ack compression drop tail routers high penalty retransmit timeouts 
note example uses packet queue length sufficient buffering network 
reno vs fack shows detailed behavior reno fack situation slightly different 
tiny reverse traffic causes ack compression competes router buffer space turn causes clusters packet loss bulk stream 
response clusters loss reno behavior appears chaotic showing multiple window adjustments single congestion episode timeouts due loss self clock 
bottom shows fack exactly situation 
congestion epochs experience clusters loss fack correctly performs exactly multiplicative decrease cwnd congestion epoch preserves tcp self clock avoids timeouts 
regime fack appears stable behaved control system consistent principles ideal congestion control 
reno sack performs fack situation 
impact internet internet anecdotal evidence suggests episodes multiple packet loss round trip common 
paxson observes behavior roughly traces collected major internet exchange points fast retransmit followed retransmit timeout additional condition packet retransmitted retransmit timeout previously retransmitted 
ff behavior result minor congestion episodes cause multiple packet loss round trip 
note reno tcp implementations exhibit particular behavior prevalence multiple packet loss round trip may significantly common suggested data 
networks psc national supercomputing center high bandwidth connectivity global internet behavior shown appears regularly bulk data transfers moderately loaded wide area links 
deployment version sack nearly double throughput bulk transfers tcp cases 
fixed path reno performance improved defeating tcp cwnd calculation setting maximum window size just slightly smaller needed fill network 
addition believe sack tcp biased atm reno tcp 
typical internet transfers benefits sack moderate result improvements latency goodput 
currently working implementation sack tcp include fack 
implemented fack evaluated testbed environment internet verify performance algorithms look adverse side effects 
investigations explore data recovery aspects sack 
unresolved issues surrounding algorithms 
investigating single simple algorithm replace methods addressing persistent congestion halving sufficient window reduction 
moderately successful deriving closed form mathematical models fack tcp performance topologies believe technique deserves exploration 
new state variable snd fack strengthen round trip time measurements protection wrapped sequence paws algorithms jbb recovery 
fack algorithm implemented treno internet performance metric mat 
tools measure internet performance track evolution tcp mat 
production internet lacks adequate attention issues congestion congestion detection 
routers incapable providing full bandwidth buffering signal onset congestion mechanisms random early detection red fj 
fack algorithm designed help times congestion substitute signals internet layer 
transport internet layers improve behavior internet high load 
current research tcp congestion largely independent fack 
congestion avoidance mechanism cam tcp vegas bop dly attempts avoid unnecessary inflation congestion window delay sensing techniques 
hoe done extensive analyzing effects congestion slow start hoe hoe significant performance problems 
implementation sack fack may reduce gravity problems eliminate 
efforts address different aspects tcp congestion control problem 
hoe discusses form inspiration part 
possible incorporate concepts single tcp implementation allowing study combined benefits 
applications tcp prevalent internet applications pay little attention congestion control issues 
predictable behavior better understanding tcp congestion control may step standardized transport layer congestion behavior internet applications 
implementation publicly available completed 
fack algorithm congestion control algorithm offset slow start overshoot algorithm transmission smoothing 
investigations discovered fack reno sack provide major performance improvements existing reno implementations due primarily avoidance retransmission timeouts 
eventually reno users perceive sack implementations having significant advantage provide incentive rapid widespread deployment sack internet 
fack algorithm benefits reno sack 
fack accurately controls outstanding data network bursty reno sack recover episodes heavy loss better reno sack 
fack uniformly adheres basic principles congestion control may possible produce formal mathematical models behavior support advances congestion control theory 
furthermore experience implementing fack simulator straightforward code prone subtle bugs reno sack 
additional algorithms obtained mixed success 
algorithm conservative general case 
algorithm appears quite 
results explore variations algorithm incorporate ideas included algorithm 
difficulties developing realistic simulations internet observed clustered packet loss 
current simulation technologies accurately model internet vast complexity huge populations users hosts connections packets 
limitation difficult predict operational impact deploying new protocols internet 
limited simulations traffic playback approaches reveal phenomena resembling turbulent coupling protocols 
hope investigate new simulation paradigms 
sally floyd steve mccanne making lbnl simulator publicly available unable complete 
especially grateful anonymous reviewers insightful comments initial draft sally floyd craig partridge invaluable assistance moving final form 
susan blackman karen repeated readings markups grammar spelling 
acknowledge management psc encouraging research activities tcp performance 
experiments take advantage capabilities tcplib dj models complexities 
bal hari balakrishnan march 
presentation ietf tcp lw working group 
bop lawrence brakmo sean malley larry peterson 
tcp vegas new techniques congestion detection avoidance 
proceedings acm sigcomm august 
bra braden 
requirements internet hosts communication layers october 
request comments 
clark lambert zhang 
netblt high throughput transport protocol 
computer communications review 
dj peter danzig sugih jamin 
tcplib library tcp ip traffic characteristics 
technical report tr sys usc networking distributed systems laboratory october 
obtain ftp usc edu pub jamin tcplib 
dly peter danzig zhen liu yan 
evaluation tcp vegas live emulation 
acm sigmetrics 
ff kevin fall sally floyd 
comparisons tahoe reno sack tcp may 
submitted ccr obtain ftp ftp ee lbl gov papers sacks ps fj sally floyd van jacobson 
traffic phase effects packet switched gateways 
computer communications review april 
fj sally floyd van jacobson 
traffic phase effects packet switched gateways 
internetworking research experience september 
fj sally floyd van jacobson 
random early detection gateways congestion avoidance 
ieee acm transactions networking august 
flo sally floyd february 
private communication 
flo sally floyd 
tcp successive fast retransmits february 
obtain ftp ftp ee lbl gov papers ps 
hoe hoe 
startup dynamics tcp congestion control avoidance schemes 
master thesis massachusetts institute technology june 
hoe hoe 
improving start behavior congestion control scheme tcp 
proceedings acm sigcomm august 
ipp charter benchmarking working group ietf 
obtain www ietf cnri reston va html charters charter html 
jac van jacobson 
congestion avoidance control 
proceedings acm sigcomm august 
jac van jacobson 
fast retransmit 
message interest mailing list april 
jac van jacobson july 
private communication 
jb jacobson braden 
tcp extensions long delay paths october 
request comments 
jbb jacobson braden borman 
tcp extensions high performance may 
request comments 
kar phil karn december 
private communication 
mat matthew mathis 
internet performance ip provider metrics information page 
www psc edu mathis 
mat matthew mathis 
windowed ping ip layer performance diagnostic 
proceedings inet june 
mat matthew mathis 
source code treno package 
obtain ftp ftp psc edu pub net tools treno shar 
mat matthew mathis 
diagnosing internet congestion transport layer performance tool 
proceedings inet june 
mf mccanne floyd 
ns lbnl network simulator 
obtain www nrg ee lbl gov ns 
mmfr matthew mathis jamshid mahdavi sally floyd allyn romanow 
tcp selective options may 
internet draft progress draft ietf sack 
txt 
mog jeff mogul 
observing tcp dynamics real networks 
proceedings acm sigcomm pages october 
pos postel 
transmission control protocol september 
request comments 
ste stevens 
tcp ip illustrated volume 
addison wesley reading ma 
ste richard stevens 
tcp slow start congestion avoidance fast retransmit fast recovery algorithms march 
currently internet draft draft stevens spec txt 
tcp minutes meeting th ietf dallas tx december 
obtain www ietf cnri reston va proceedings dec tsv html 
lixia zhang scott shenker david clark 
observations dynamics congestion control algorithm effects twoway traffic 
proceedings acm sigcomm pages 

