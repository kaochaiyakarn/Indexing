query rewriting search croque joachim regina steffen rost andreas heuer university rostock computer science department db research group rostock germany informatik uni rostock de informatik uni rostock de research croque engl html ibm entwicklung gmbh programming lab department germany de ibm com 
query optimization query transformed rewrite rules equivalent execution plan cheaper straightforwardly assigned plan cost model 
finding cheapest equivalent execution plans challenge rewriting complex queries basis large set rewriting rules may potentially span large space equivalent plans 
consequently search strategies explore parts search space heuristics prune space making efficiently traversable 
presents search strategies croque project 
adaptation common strategies led development simple powerful heuristics demonstrated examples executed croque prototype 
proposed heuristics support random search strategy stand 
may integrated seamlessly query optimizers effort 
croque project concerned different aspects optimization evaluation object oriented queries 
starting points considerations queries odmg oql formalized represented internally hybrid approach calculus algebra transformed rule cost optimizer 
developed cost model discussed 
croque rule rewriting spans space equivalent query execution plans 
cost model allows comparative assessment plans defining search space croque 
search strategies search space explored 
search controlled heuristics explore interesting parts search space 
croque cost rulebased optimization object oriented queries joint research project universities rostock konstanz funded german research association dfg contracts 
search strategies croque project detail 
adaptation common random strategies random walk iterative improvement simulated annealing phase optimization led development simple surprisingly powerful heuristics demonstrate examples executed prototypical implementation croque 
proposed heuristics independent croque project principle support random search strategy stand 
heuristics may integrated seamlessly rule query optimizers effort 
certainly discussed heuristics free 
results developed heuristics 
comparing optimization effort approaches obviously leads decision heuristics proposed case ad hoc query optimization 
considering relative strengths approaches thoroughly convinced merging ideas heuristics result powerful outcome 
short look mentioned second approach detail discussed 
fusion heuristics sketched open problem just planning address 
presentation restrict traditional level approach consisting logical physical algebra introduced calculus rewriting done goal oriented fashion just small set rewriting rules 
long version available 
proceeds follows 
section discussing search space adaptations necessary able implement search strategies croque prototype 
section heuristics experimental results obtained examples executed croque prototype implementation 
compare related section 
conclude section giving outlook croque project 
search croque query rewriting logical algebra expressions potentially spans space equivalent query expressions additionally space equivalent execution plans physical rewriting realized physical execution alternatives considered done croque respect materialized views 
space equivalent solutions traversed fast cheap possible means search strategies find plan quickly possible 
cases really necessary find best equivalent plans interested avoiding selection worst plans satisfied sufficiently cheap plan 
possible find best plans acceptable amount search time 
searching plan evaluating user query 
process searching plan croque done search space generated completely 
decision easy implement search way allowing rapid prototyping allowing demonstrate verify heuristics easily 
subsections look shape search space croque concentrate presenting adaptations common search strategies necessary meet requirements special search space summarize experiences search strategies prototype system 
search space essentially identified possibilities select plan evaluating user query exhaustive generation space search strategy select plan 
heuristic generation search space 
cost generation search space 
kind solution implemented exodus shown inefficient ineffective special implementation 
pursue alternative 
research concerning topic left treatment trying overcome inefficiency problem 
exhaustive generation offers advantage supporting rapid prototyping evaluation implemented search strategies mentioned 
close inspection search space possible negligible effort resulting better understanding strategies really 
provided insights weaknesses strategies took consideration 
able compare strategies basis different search spaces resulting assessment space shapes 
obvious drawback exhaustive generation effort necessary generate possible equivalents 
investigating large spaces needed evaluation strategies leads enormous consumption 
heuristic generation prefered ad hoc query optimization desired 
concerned offline evaluation search strategies decided start implementation exhaustive generation 
reflection supported decision extending approach direction heuristic generation possible 
got position able combine advantages exhaustive generation possible extension implementation efficient heuristic generation loosing results done 
designed search space dimensions heuristics section dimension equivalent logical algebra expressions second dimension spanned equivalent physical plans belonging logical expression 
prototype query optimizer provided basis discussion physical choices logical expression transformed manner physical plan 
effect search space consists plan dimension 
shape search space results need adapt search strategies 
adaptation common search strategies prototype implemented optimizer generator described 
optimizer generator extension functional language sml 
known search algorithms divided categories deterministic random genetic hybrid algorithms 
started investigating random walk iterative improvement simulated annealing phase optimization random search strategies 
implemented subsections 
decided look class search strategies called genetic algorithms 
genetic algorithms exceptionally suited traverse large search spaces higher dimensions realization strategy possible straightforwardly contrast strategies 
adapting genetic algorithms requires coding query plans suitable fashion 
coding function may easily defined relational join order optimization obvious complex query expressions treated croque 
discussing genetic algorithms concentrate attention adaptation random strategies dimensional shape search space 
algorithms treated branch bound pruning hashing visited plans marking plans done 
consider plans cost limit cheaper plans considered earlier 
ensures plan considered twice 
random walk rw 
simple search strategy step plan randomly chosen 
choice depend steps 
best plan search process delivered result 
search may restricted time limit maximum number plans visited 
rw easily implemented croque generating random value selecting plan position specified value list equivalent plans 
iterative improvement ii 
iterative improvement described starts random state search space improves solution repeatedly accepting downhill moves visiting plans characterized lower costs reaches minimum 
assumed local minimum number trials plan lower costs 
worth noted common algorithm may fail selecting local minimum 
adaptation ii done way plans iff positions list equivalent plans 
starting random state decided random choice go left right list equivalent plans 
algorithm able accept plan chosen direction due higher cost value direction pursued 
contrast generic algorithm approach guarantee local minimum 
simulated annealing sa 
ii simulated annealing goes cost hills sa accept uphill moves certain probability 
probability function depending number moves done steadily decreasing time 
sa originates idea reproduce process 
starting certain temperature liquid gradually cooled minimum value 
main characteristics method starting temperature cooling factor 
defined starting temperature twice starting plan cost value 
cooling factor defined depending starting temperature actual number equivalent plans space percentage plans shall visited maximum 
implementation sa dimensional search space similar ii 
move chosen direction possible step direction pursued 
algorithm stops moves possible 
number moves control probability accepting uphill moves 
similar ii sa guaranteed find local minimum 
phase optimization po 
phase optimization combination strategies ii sa 
phase ii find local minimum second phase sa searches surroundings able uphill moves refer 
po may implemented dimensional search spaces prolonging starting downhill phase sa considering moves question able uphill moves 
effect po degenerate special version sa 
favourable solution keep track right leftmost plan visited current run 
enables search directions step 
principle done sa enlarging potentially traversed space 
drawback kind solution additional overhead demanding maintenance global variables 
summary search plan evaluating user query 
search done search space generated completely 
due costs ae qz jz ff zoe psi starting point st phase ii randomly chosen starting point nd phase sa chosen plan local minimum fig 

phase optimization lack physical choices prototype search space plan dimension 
shape search space results need adapt common search strategies 
seen discussion adaptation strategies complicated feared 
due fact definitions strategies universally valid generic terms 
determining term neighbourhood defined possible change generic strategies algorithms kind search space shape 
prototype comprising random search strategies random walk iterative improvement simulated annealing phase optimization implemented optimizer generator described 
investigations done implementations led observations shape search spaces 
rw really satisfying cases 
search spaces containing plateaus cost value ii 
cost values alternate ii degenerates simple strategy rw 
sa po suited large search spaces containing local minima 
search spaces comprising plateaus cost value spaces containing cost values alternating times bad sa po 
po complex usage priority sa 
observations motivate interest finding heuristics supporting search section 
heuristics search strategies random walk heavily depend shape search space 
space characterized properties 
search space obviously characterized shape cost value distribution number dimensions 
general possible ensure specific mix plateaus cost value distribution increasing decreasing cost values 
number dimensions may easily fixed value maximum number rewriting rules applicable parallel query expression 
advantage high number dimensions questionable seen description search strategies 
regard random search strategies dimensional search space promising discovery local minima guaranteed 
shape space hard influence goal oriented manner 
crucial point characterizing space definition neighbourhood relation inherently influencing shape space due effect space generation 
heuristics idea define suitable neighbourhood relation effect space exploited choice search strategy starting points 
croque starting points random numbers consumed random search strategies 
control search effective possible 
subsections introduce heuristics 
demonstrate successful examples showing search may controlled effective 
summarize experiences heuristically controlling search discussing known drawbacks approach 
idea neighbourhood relation directly defined application rewriting rules plans iff plan result applying rule second plan 
plans considered assumed similar shape costs 
neighbourhood relation complete correct 
plan may produced different transformation steps 
described assumption fails effective rewriting rules 
propose slightly different way defining neighbourhood relation solving problems surprisingly powerful shown subsection examples 
general equivalence rules may applied directions 
cases heuristically preferred direction application easily distinguished consider directed rules transformation rules framework croque project similar volcano approach 
idea heuristics rules generating plan result better plan rules generation rules applied favourable direction 
rule applications improvements result better plans 
neighbourhood relation number rule applications plans closely produced number transformation steps 
implementing heuristics done ordering search space generation number realized transformation steps 
plan contains integer attribute expressing number rules successfully applied generation special plan 
produced plans ordered decreasing factors heuristically better plans front left original plan rightmost 
choosing pure uniformly distributed random values search strategy starting points ordering plans exploited random values obeying triangular distribution 
distribution promising ordered left plans privileged 
experimental results show performance gains implementation heuristics effective search supported heuristics 
due space limitations example search spaces visited 
experimental results subsection experimental results gained implementation concepts described 
due space restrictions mention details cost model queries search spaces illustration purposes 
long version available 
results confirmed tests 
search strategy evaluation done basis criteria search result finding global optimum 
essential criterion expressing quality search 
random search strategies result criterion depends shape space implemented algorithm generated random values especially quality random value generator 
quality plans selected execution 
traversing small part search space anyway finding global minimum time 
interested best plans selected 
global optimum may missed search results search strategies may rated high plan nearby optimum times 
plans assessed 
number percentage plans visited search development number search space enlarged may estimate effort strategy 
search spaces represented graphically figures drawing curves connecting discrete cost values belonging listed plans 
figures consist curves case plans produced optimizer generator registered search space just order generated 
case correct ordering heuristics ensured list generation 
number transformation steps done production plan noticed axis type figures 
figures best plan marked circle 
type figures additional line drawn showing local minima get worse right hand side 
assessing algorithms done carrying calls algorithm unordered calls ordered search space 
results tests summarized tables counting plans cost value selected execution 
means tabular representations table plans grouped cost values 
column rank rank cost values 
rank value indicates global optimal plan space 
column plans rank shows number plans rank number plans cost value estimated 
table entries indicate hit rates number plans rank selected considered search space ord 
unordered space ordered space ordered heuristics considered search strategy rw ii sa 
subsections search spaces investigate heuristics combination different search strategies 
search space containing plans rw ii sa 
search space contains global optimal plans 
close 
rewriting starting plan uses rules 
additional line shows local minima left hand side smaller values right hand side optimal plans produced transformation steps 
plans costs theta gamma delta costs theta gamma delta fig 

unordered ordered search space containing plans having look exhibits local minima having cost values higher minimum value 
table presents search results search strategies 
random walk iterative improvement contain columns labeled rv subdividing search ordered space cases uniformly distributed random values triangular distributed random values respectively 
table 
search result space rw ii sa rank plans ordered ordered rank ord 
rv ord 
rv ord 
ordered comparing unordered case rv column rw shows fact ordering plans worsen situation nearly effect 
holds ii 
doing step comparison rv unordered space emphasizes advantage heuristics 
search strategies clearly benefit plan ordering triangular distributed random values result anytime plans best cost ranks avoiding selection worse plans 
note plans cost ranks cost rank ii rv column table selected ii sa 
happen time plans cost rank local maxima algorithms ensure discovery local minima 
random walk adjusted visit plans 
ii visited sa eleven plans average 
reason higher number visited plans ii sa programmed loops outer controlled breaking condition related number visited plans breaking condition 
search space investigated test really small 
spaces consisting plans showed ii sa approximated border value 
stress search result may positively influenced exploiting heuristic information control search approach number transformation steps 
search space consisting plans rw ii 
search space contains global optimal plans close figures 
plans cost values estimated close global optimum 
rewriting takes rules 
additional line shows local minima left hand side smaller values right hand side optimal plans produced transformation steps 
costs theta gamma delta plans costs theta gamma delta fig 

unordered ordered search space containing plans tabular representation table indicates superiority approach 
example expressive search space comprises plans plan selection column yields best cost values time 
quality result better time 
plan best rank unordered case uniformly distributed random values 
valid second best third best plan cases rw ii 
table 
search result space rw ii rank plans ordered ordered rank ord 
rv ord 
rv random walk adjusted visit plans 
ii visited plans average 
inner loop running time plans cost value minor effect contrast outer loop 
summary illustrated examples exploiting heuristics results selecting better plans happen heuristics 
seen search spaces pure number rule applications sufficient means plan ordering global optimal plan created greatest number rule applications 
due fact approach rules weighted uniformly naturally 
overcome inaccuracy described 
advantage heuristics ease implementation power 
fact plan ordering corresponds depth traversal potential search space 
obvious main drawback approach necessarily exhaustive search space generation 
solution avoiding demand span space sketched section 
related explains complexity optimizing queries selection predicates comparable join sequence optimization relational databases 
rules describing commutativity selection pushing selection predicate may arranged nearly place query 
arranging predicates combinatorial problem join sequence optimization 
justifies need far reaching optimization object oriented context 
considered number transformation steps necessary generate plan 
method choice optimization done offline rewriting decoupled query execution 
case time spent searching plan executed nearly irrelevant 
implementation discussed section meets requirement 
focused evaluation search strategies task independent time needed answer query 
changing perspective corresponding approach online ad hoc query optimization consider quality applied rules quantity rule applications 
method described heuristically orders rewriting rules quality optimization potential applies order 
promising way online optimization optimization time query execution time added yielding system response time 
method costly normal form described may generated fast naive query transformer starting point 
best rules applied gaining best possible rewriting success fast 
fast query translation fast successful query rewriting result low response time 
concerned semantic query optimization rule graphs 
topic concerned common rules come sophisticated solution 
states probable best reformulated query directly rule set longer query reformulation search graph transitive rules build successive application rules query 
statement similar basics mentioned approach rule quality decide rule application application quantity 
results semantic query optimization partly transferable 
cascades proposes offline transitive closure computation exclude rules consideration 
optimizer generator introduces promise functions guide search rules applied 
approach similar essential step defining functions left database implementor giving hint 
histograms estimation problems basis adaptation optimizer system help selected statistics 
search strategies croque project 
adaptation common strategies characteristics search space led simple surprisingly powerful heuristics thats benefits demonstrated detailed discussion examples executed prototypical implementation croque 
proposed heuristics quantity rule applications may rewriting completed heuristics developed care quality applied rules may control rewriting 
pruning may achieved search space generation 
advantageous complex task 
overcome inherent inaccuracies approaches plan fuse 
way natural consideration combination quality quantity shall achieved 
handling commutativity rules challenge approaches rules may effect algebra allowing rules applied 
croque project partners marc scholl torsten dieter university konstanz lots discussions hints improving concepts described quality students ralf holger stefan paul denny implementing parts croque prototypes colleague jurgen giving hints improving 
cattell editor 
object database standard odmg release 
morgan kaufmann san mateo ca 
fegaras maier sheard 
specifying rule query optimizers reflective framework 
proc 
rd int 
conference deductive object oriented databases pages new york december 
springer 
graefe dewitt 
exodus optimizer generator 
proc 
acm sigmod int 
conference management data pages san francisco ca usa may 
scholl 
incremental updates materialized views user defined functions 
proc 
fifth int 
conference deductive object oriented databases dood switzerland lncs springer pages december 
heuer scholl 
query evaluation croque calculus algebra coincide 
proc 
th british national conference databases london uk lncs springer pages july 
graefe mckenna 
volcano optimizer generator extensibility efficient search 
ieee conference data engineering pages vienna austria april 
graefe 
cascades framework query optimization 
bulletin technical committee data engineering september 
heuer 
query optimization croque project 
proc 
th int 
conference database expert systems applications dexa zurich switzerland lncs springer pages september 
hook sheard 
semantics compile time reflection 
technical report oregon graduate institute portland oregon 

employment simulated annealing cost optimization object oriented queries 
master thesis cs dept university rostock june 
german 
ioannidis poosala 
histogram solutions diverse database estimation problems 
bulletin technical committee data engineering september 
ioannidis wong 
query optimization simulated annealing 
proc 
th acm sigmod int 
conference management data pages san francisco ca usa may 
kang 
randomized algorithms query optimization 
phd thesis university wisconsin madison october 
rost heuer 
query rewriting search croque 
preprint cs cs dept university rostock december 
url informatik uni rostock de jo cs html 
kemper moerkotte 
query optimization object bases exploiting relational techniques 
freytag maier vossen editors query processing advanced database systems chapter pages 
morgan kaufmann publishers 
paul heuer 
ordering rewrite rules 
proc 
second east european symposium advances databases information systems adbis poznan poland lncs springer september 
paul heuer 
query optimization ordering rules 
preprint cs cs dept university rostock june 
url informatik uni rostock de jo cs html 
dogac 
region query optimizer cascades query optimizer framework 
bulletin technical committee data engineering september 
paulson 
ml working programmer 
cambridge university press nd edition 
robinson 
semantic query optimisation rule graphs 
proc 
th krdb workshop seattle wa may 
rost 
analysis alternative search strategies cost optimization object oriented queries 
master thesis cs dept university rostock june 
german 
riedel scholl 
formalization odmg queries 
proc 
th int 
conference database semantics ds october 
sheard 
guide compile time reflective ml 
technical report pacific software research center oregon graduate institute science technology beaverton oregon october 
michael guido moerkotte kemper 
optimizing join orders 
technical report mip faculty mathematics computer sciences university passau 
srinivas 
genetic search analysis fitness moments 
ieee transaction knowledge data engineering feb 
