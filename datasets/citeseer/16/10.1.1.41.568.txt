objects software design paradigm process control mary shaw carnegie mellon university pittsburgh pa mary shaw cs cmu edu standard demonstration problem object oriented programming design automobile cruise control 
design exercise demonstrates object oriented techniques ask object oriented paradigm best task 
examine alternative view cruise control essentially control problem 
new software organization paradigm motivated process control loops 
control view leads architecture dominated analysis classical feedback loop identification discrete stateful components treat objects 
change architectural model calls attention important questions cruise control task aren addressed object oriented design 
design idioms software architectures explicit organization patterns idioms increasingly guide composition modules complete systems 
stage design usually called architecture number common patterns general quite informal garlan shaw 
object oriented architecture booch subject current attention 
architectural idioms strong advocates single paradigm dominates 
choice architecture depend computational character application 
explore software idiom process control loops 
system organization widely recognized software community quietly appear designs dominated models 
object oriented functional design characterized kinds components appear control loop designs characterized kinds components special relations hold components 
explains process control models derives software paradigm control loop organizations 
applies result known problem design cruise control system 
differences control loop object oriented designs reveal relative strengths models problems kind 
control view clarifies different roles played various problem inputs helps designer recognize safety problem system limitation 
drawing knowledge process control offers prospects design guidance quantitative analysis system response characteristics 

process control paradigms continuous processes kinds convert input materials products specific properties performing operations inputs intermediate products 
values measurable properties system state materials equipment settings called variables process 
process variables measure output materials called controlled variables process 
properties input materials intermediate products operations captured process variables 
particular manipulated variables associated things changed control system order regulate process 
process variables confused program variables error lead disaster str wittenmark leveson perry 
mary shaw objects software design paradigm process control process control definitions process variables properties process measured specific kinds distinguished 
confuse process variables program variables 
controlled variable process variable value system intended control input variable process variable measures input process manipulated variable process variable value changed controller set point desired value controlled variable open loop system system information process variables adjust system 
closed loop system system information process variables manipulate process variable compensate variations process variables operating conditions 
feedback control system controlled variable measured result manipulate process variables feedforward control system process variables measured disturbances compensated waiting changes controlled variable visible 
purpose control system maintain specified properties outputs process sufficiently near values called set points 
input materials pure process fully defined operations completely repeatable process simply run surveillance 
process called open loop system 
shows system hot air furnace uses constant burner setting raise temperature air passes 
similar furnace uses timer turn burner fixed intervals open loop system 
return air furnace open loop temperature control hot air open loop assumptions rarely valid physical processes real world 
properties temperature pressure flow rates monitored values control process changing settings apparatus valves 
systems called closed loop systems 
home thermostat common example air temperature thermostat measured furnace turned necessary maintain desired temperature set point 
shows addition thermostat convert closed loop system 
return air gas valve control furnace hot air thermostat closed loop temperature control temperature sensor temperature setting control mary shaw objects software design paradigm process control general forms closed loop control 
feedback control illustrated adjusts process measurements controlled variable 
important components feedback controller process definition process variables including designated input controlled variables sensor obtain controlled variable physical output set point target value controlled variable control algorithm 
corresponds ways furnace burner process thermostat controller return air temperature input variable hot air temperature controlled variable thermostat setting set point temperature sensor sensor 
set point input variables controller manipulated variables process feedback control controlled variable feedforward control shown anticipates effects controlled variable measuring process variables values may timely adjusts process variables 
important components feedforward controller essentially feedback controller sensor obtain values input intermediate variables 
valuable lags process delay effect control changes 
set point input variables manipulated variables controller process feedforward control controlled variable simplified models 
deal complexities properties sensors transmission delays calibration issues 
ignore response characteristics system gain lag hysteresis 
don show combine feedforward feedback choose process variables manipulate 
chemical engineering provides excellent quantitative models predicting processes react various control algorithms number standard strategies perry section 
mentioned section detailed discussion scope 

software paradigm process control usually think software algorithmic compute outputs execute continuous systems solely basis inputs 
normal model allow external perturbations non input values computation change spontaneously regarded hardware error 
normal software model corresponds open loop system cases entirely appropriate 
operating conditions software system completely predictable especially software operating physical system purely algorithmic model breaks 
execution software system affected external mary shaw objects software design paradigm process control disturbances forces events directly visible controllable software indication control paradigm considered software architecture 
establish paradigm software controls continuous processes 
elements pattern incorporate essential parts process control loop methodology requires explicit identification parts computational elements separate process interest control policy 
process definition including mechanisms manipulating process variables 
control algorithm decide manipulate process variables including model process variables reflect true state 
data elements continuously updated process variables sensors collect 
process variables including designated input controlled manipulated variables knowledge sensed 
set point value controlled variable 
sensors obtain values process variables pertinent control 
control loop paradigm establishes relation control algorithm exercises surveillance collects information actual intended states process tunes process variables drive actual state intended state 
computational elements separate issues desired functionality issues responses external disturbances 
software system bundle process process variables regard process definition process variables sensors single subsystem input controlled variables visible subsystem interface 
bundle control algorithm set point second subsystem controller continuous access current values set point monitored variables feedback system controlled variable 
interactions major systems controller receives values process variables process controller supplies continuous guidance process changes manipulated variables 
result particular kind dataflow architecture 
primary characteristic dataflow architectures components interact providing data component executing data available 
dataflow architectures involve independent concurrent processes pacing depends rates processes provide data 
control loop paradigm assumes data related process variables updated continuously 
familiar members dataflow family batch sequential processing pipe filter architectures 
largely linear data enters system processed progressively number distinct computations 
batch sequential architectures phase runs completion delivers result historically magnetic tape 

pipe filter architectures hand filter processes input stream incrementally unix characters lines filters operate concurrently principle 
control loop architecture described differs commitment dataflow loop intrinsic asymmetry control element process element 
appropriate consider control loop design task involves continuing action behavior state software embedded controls physical system uncontrolled open loop computation suffice usually external perturbations imprecise knowledge external state cruise control 
cruise control problem disciplines details methods type problems common examples different people compare models methods shaw nd 
booch cruise control problem explore differences object oriented functional traditional procedural programming gannon booch ward 
booch problem mary shaw objects software design paradigm process control cruise control system exists maintain speed car varying terrain 
see block diagram hardware system 
system engine pulses wheel accelerator brake increase decrease speed resume speed clock cruise control system throttle booch block diagram cruise control inputs system denotes cruise control system maintain car speed 
engine denotes car engine turned cruise control system active engine 
pulses wheel pulse sent revolution wheel 
accelerator indication far accelerator pressed 
brake brake pressed cruise control system temporarily reverts manual control brake pressed 
increase decrease speed increase decrease maintained speed applicable cruise control system 
resume resume maintained speed applicable system 
clock timing pulse millisecond 
output system throttle digital value engine throttle setting 
problem clearly state rules deriving output set inputs 
booch provides certain amount elaboration form data flow diagram questions remain unanswered 
design missing details supplied match apparent behavior cruise control author car 
inputs provide kinds information cruise control active speed maintain 
problem statement says output value engine throttle setting 
classical process control corresponding signal change throttle setting avoids calibration wear problems sensors engine 
conventional cruise control requirement specify control current speed vehicle 
current speed explicit problem statement appear implicitly maintained speed descriptions inputs 
requirement addresses current speed throttle setting remains appropriate output control algorithm 
avoid unnecessary changes problem assume accurately calibrated digital control achieve effect incremental signals retaining previous throttle value controller 
problem statement specifies millisecond clock 
object oriented solution clock combination wheel pulses determine current speed 
presumably process computes speed count number clock pulses wheel pulses 
typical automobile tire circumference feet mph ft sec wheel pulses second 
problem overspecified respect slower clock delivered current time demand sufficient precision require computing 
single system clock required problem convenient reasons 
mary shaw objects software design paradigm process control considerations lead restatement problem system active determine desired speed control engine throttle setting maintain speed 

object view cruise control booch structures object oriented decomposition system objects exist task description 
yields decomposition elements correspond important quantities physical entities system 
result appears blobs represent objects directed lines represent dependencies objects 
target speed appear explicitly problem statement appear desired speed 
driver brake engine clock 
process control view cruise control accelerator current speed desired speed throttle mary shaw objects software design paradigm process control wheel booch object oriented design cruise control section suggests selection control loop architecture software embedded physical system involves continuing behavior especially system subject external perturbations 
conditions hold case cruise control system supposed maintain constant speed automobile despite variations terrain vehicle load air resistance fuel quality develop control loop architecture system identifying essential system elements described section computational elements process definition cruise control software driving mechanical device engine details relevant 
purposes process receives throttle setting turns car wheels 
may fact computers involved example controlling fuel injection system 
standpoint cruise control subsystem process takes throttle setting input controls speed vehicle 
control algorithm algorithm models current speed wheel pulses compares desired speed changes throttle setting 
clock input needed model current speed intervals wheel pulses 
problem requires exact throttle setting change current throttle setting maintained control algorithm 
policy decision change throttle setting discrepancy current speed current speed localized control algorithm 
data elements controlled variable cruise control current speed vehicle 
manipulated variable cruise control throttle setting 
set point desired speed set modified accelerator input increase decrease speed input respectively 
inputs help control cruise control currently controlling car system engine brake resume 
interact resume restores automatic control entire system 
inputs provided human driver operator process terms 
sensor controlled variable cruise control current state current speed modeled data sensor delivers wheel pulses clock 
see discussion accuracy model 
restated control task system active determine desired speed control engine throttle setting maintain speed note current speed output wheel pulses input throttle manipulated variable outside set point active inactive determination 
leads immediately subproblems interface driver concerned system active determine desired speed control loop concerned control engine throttle setting maintain speed actual control problem ll examine 
shows suitable architecture control system 
task model current speed wheel pulses designer validate model carefully 
model fail wheels spin affect control ways 
wheel pulses taken drive wheel wheel spinning cruise control keep wheel spinning constant speed vehicle stops moving 
worse wheel pulses taken non drive wheel drive wheels spinning controller misled believe current speed slow continually increase throttle setting 
designer consider controller full control authority process 
case cruise control manipulated variable throttle brake available 
result automobile faster desired speed controller slow 
controller receives inputs set point computation active inactive toggle indicates controller charge throttle desired speed needs valid vehicle automatic control 
information state continuously updated data lines diagram represent data flow 
controller implemented continuously evaluating function matches dataflow character inputs outputs 
implementations possible including variations simple control proportional control sophisticated disciplines 
parameter controls quickly tightly control tracks set point analysis characteristics discussed section 
noted engine little interest implemented object collection objects 
active inactive toggle desired speed controller throttle setting pulses wheel engine control architecture cruise control wheel rotation set point calculation divides naturally parts determining automatic system active control throttle determining desired speed controller automatic mode 
inputs original problem definition capture state system engine accelerator brake capture events wheel pulses increase decrease speed resume clock 
treat accelerator state specifically continuously updated value 
determination automatic cruise control actively controlling car cleaner depends mary shaw objects software design paradigm process control kind 
transitions states system engine brake 
simplicity assume brake application atomic events blocked brake 
detailed analysis system states relax assumption gannon 
active inactive toggle triggered variety events state transition design natural 
shown 
system completely engine 
inactive active states 
inactive state set point established 
previous set point remembered driver accelerates speed greater set point manual accelerator controls throttle direct linkage note accelerator position design relies relative effect absolute position driver uses brake control system resume signal sent 
active inactive toggle input control system set active exactly state machine state active 
engine engine states inactive nil accel set point system system states state machine activation inactive fast active accel set point brake resume inactive slow determining desired speed simpler require state current value desired speed set point 
time system set point undefined 
time system signal including system set point set current speed modeled wheel pulses 
driver control increases decreases set point set amount 
invoked time define arithmetic undefined values yield undefined values 
summarizes events involved determining set point 
note process requires access clock order estimate current speed pulses wheel 
event effect desired speed engine system set undefined system set current speed estimated wheel pulses increase speed increment desired speed constant decrease speed decrement desired speed constant event table determining set point compose control architecture state machine activation event table determining set point entire system 
need control unit set point determination clock minimize changes original problem statement 
current speed components reasonable elaboration design encapsulate model reusable object encapsulate clock 
objects booch design clear roles resulting system 
entirely reasonable look forward design strategy control loop architecture system number architectures including objects state machines elaborations elements control loop architecture 
mary shaw objects software design paradigm process control shift object oriented view control view cruise control architecture raised number design questions previously separation process control concerns led explicit choice control discipline 
limitations control model clear including possible inaccuracies current speed model incomplete control high speed 
dataflow character model showed irregularities way input specified example mixture state event inputs absolute position accelerator 
event table set point active inactive toggle analysis discussion state machine toggle desired speed clock control unit complete cruise control system 
correspondence architecture problem wheel rotation selection architecture commits designer particular view problem 
abstraction emphasizes aspects problem suppresses 
booch booch characterizes views inherent object oriented functional architectures simply stated object oriented development approach software design decomposition system concept object 
object entity behavior characterized actions suffers requires objects 
object oriented development fundamentally different traditional functional methods primary criteria decomposition module system represents major step process 
issue course deciding abstractions useful particular problem 
argued control view particularly appropriate certain class problems 
case control view clarifies design ways control view leads output actual speed vehicle 
separation control process model actual speed explicit validated similarly raises question control authority 
explicit element control algorithm sets design decision kind control exercised see section 
establishing special relations components control paradigm discriminates different kinds inputs feedback loop obvious 
control paradigm clearly separates manual operation automatic operation 
determination set point easier verify separated control example booch design appear reset desired speed undefined engine turned 
idea software control new scheduling algorithms real time operating systems established area 
control character task rarely obvious system architecture 
example architecture commercial process control system shaw garlan shaw primarily layered architecture control elements control loop level appear objects separation mary shaw objects software design paradigm process control task control obvious 
chimera framework sensor control systems stewart provides reusable reconfigurable building blocks control interact data flow framework explicit separation controller process 
arpa domain specific software community exploring canonical architectures particular problem domains tracz 
early results include software architectures quite appropriately include contain control loops 
task consideration designs light formulation control loop idiom 
contrast cases booch second example sea buoy 
requires continuing operations state changes response external commands 
compensate external perturbations candidate control loop organization 

language support level architecture system independent programming language 
architectures assume certain kinds interactions components interactions induce assumptions way components packaged aspects interfaces 
unfortunately programming language provide comparable levels direct support architectural idioms 
architectures notably procedures objects processes motivated features programming languages intended support structural needs architectures 
orphans booch remarks effect languages architectural design simply kinds building blocks structured systems developed older imperative ms languages tend consist collections subprograms equivalent mainly structurally major building block available 
languages best suited functional decomposition techniques concentrate algorithmic abstractions 
guttag observes unfortunately nature abstractions may conveniently achieved subroutines limited 
subroutines suited description events operations particularly suited description objects 
serious drawback guttag languages provisions providing data flow interfaces small wonder data flow architectures don leap immediately mind 
order achieve data flow want achieve data flow 
example unix pipe filter architectures assume communication pipes 
individual modules achieve conventions read write procedures 

methodological implications object oriented architectures supported associated methodologies 
say methodologies control loop organizations useful 
methodology help designer decide architecture appropriate 
discussed sections 
second methodology help designer identify elements design interactions 
list established section exercised section corresponds instructions finding objects object oriented methodologies 
third methodology help designer identify critical design decisions 
case control include potential safety problems discussed sections 
str wittenmark give collection examples common solutions process control problems str wittenmark 
identifies typical control situation gives advice suitable strategies 
give top methodology serves control paradigm software choose control principle choose control variables choose measured variables create subsystems methodology provide system modifications 
booch proposes object oriented design simple changes control loop design mary shaw objects software design paradigm process control add digital wheel pulses directly available control signal picked component independently control paradigm 
addition section suggested creation object current speed 
separate microcomputers current desired speed throttle assignment function multiple processors put control engine related operations 
corresponds directly design 

performance system response control process control provides powerful tools selecting analyzing response characteristics systems 
example cruise controller set throttle ways perry control simplest common mode control simply turns process 
appropriate considered 
order prevent power rapidly control usually provides form hysteresis actual speed deviate set point amount control exercised power setting switched preset limit 
proportional control output proportional controller fixed multiple measured error 
gain cruise controller amount speed deviation multiplied determine change throttle setting 
parameter control 
depending properties engine lead steady state value quite equal set point oscillation speed set point 
proportional plus reset control controller parts proportional error second cause controller output change long error 
effect forcing error zero 
adding correction derivative error speeds response probably overkill cruise control application 
alternatives mathematical models system responses understood 

correctness software controls physical system correctness safety particularly acute concerns 
sections show control paradigm methodology leads designer consider accuracy design assumptions significant safety implications 
cruise control possibility runaway feedback significant safety concern author cruise control demonstrated 
summary design methodologies get power focusing attention significant decisions appropriate times 
generally decomposing problem way development software structure proceeds hand hand analysis significant decisions 
localizes decisions limits ripples caused changes 
example explored example significant high level decisions better elicited methodology process control common object oriented methodology 
software architecture studies ways software components organized systems reasons selecting architecture analysis systems result 
section describes architecture control paradigms provides rule thumb deciding select software organization execution software system affected external disturbances forces events directly visible controllable software indication control paradigm considered software architecture 
control paradigm separates operation main process compensation external disturbances 
separation concerns yields appropriate abstractions leads design questions neglected 
cruise control exemplifies class software system design problems real time process controlled embedded software 
conceptually processes update control status continuously 
thinking designs explicitly process control problems leads designer software organization separates process mary shaw objects software design paradigm process control concerns control concerns requires explicit attention appropriateness correctness control strategy 
leads early consideration performance correctness questions arise 
acknowledgments usual clear sequence events led 
david garlan colleagues cmu scs sei studying architectural paradigms years regular reading group current events area 
way opportunity learn control software colleagues fisher controls 
spring marc graham arranged darpa domain specific software architecture groups discuss results 
tracz architecture avionics essential core essentially feedback loop 
provoked look process control see close resemblance days looking example realized cruise control staring face 
comments draft roy weil jeannette wing gene rollins david garlan improved result 
research supported carnegie mellon university school computer science software engineering institute sponsored department defense siemens corporate research 
views contained document author interpreted representing official policies government department defense siemens carnegie mellon university 
str wittenmark karl str bj rn wittenmark 
computer controlled systems 
prentice hall 
gannon john gannon 
state model checking event driven system requirements 
proc 
sigsoft conference software critical systems acm software engineering notes vol 
december 
booch grady booch 
object oriented development 
ieee trans 
software engineering se february pp 

garlan shaw david garlan mary shaw 
software architecture 
eds advances software engineering knowledge engineering vol 
world scientific publishing appear 
guttag john guttag ellis horowitz david musser 
design data type specification 
current trends programming methodology vol 
prentice hall 
leveson nancy leveson 
software safety 
acm computing surveys vol 
june pp 
perry robert perry 
perry chemical engineer handbook 
mcgraw hill sec process control 
dale thomas edgar duncan 
process dynamics control 
wiley 
shaw mary shaw 
heterogeneous design idioms software architecture 
proc 
sixth international workshop software specification design ieee october pp 
shaw nd mary shaw robert allen david garlan dan klein john curtis scott 
candidate model problems software architecture 
preparation 
stewart david stewart richard pradeep khosla 
integration real time software modules reconfigurable sensor control systems 
proc 
ieee rsj international conference intelligent robots systems july pp 
stewart david stewart richard pradeep khosla 
software framework reconfigurable robotic automation systems 
cmu ri technical report cmu ri tr may 
tracz personal communication 
ward 
ward cruise control exercise rocky mountain institute software engineering aspen booch adapted formulation ward 
mary shaw objects software design paradigm process control change history added explicit relation parts cite gannon fixed brake state problem finish am fine tuning afternoon evening morning fix figures evening format pack pages tune prose sections evening new figures thermostat system composition block diagram 
prose eve am edits response discussion afternoon reflections sell idea 
afternoon incorporated responses roy comments evening started massive prose conversion moved figures evening model developed moved word afternoon background material including quotes added pm apr elaborated am apr created pm mar application avionics 
get permission show page layout request permissions ieee mary shaw objects software design paradigm process control 
