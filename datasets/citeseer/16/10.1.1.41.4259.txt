marks zero side ect multicast key management arbitrarily revealed key sequences bob briscoe bt research bt labs heath ip re england email jungle bt uk 
goal separately control individual secure sessions unlimited pairs multicast receivers senders 
time solution preserves scalability receiver initiated internet multicast data transfer 
multicast key management solutions absolutely side ects receivers single receiver joins leaves session smartcards required 
cost receiver session typically just short set message exchange key manager 
key managers replicated limit loosely coupled senders remain oblivious members added removed 
technique general solution access arbitrary sub range sequence information revocation long sub range planned time access requested 
presents techniques maintain individual security relationship multicast senders receiver compromising ciency scalability ip multicast data distribution 
focus issues foremost multicast information sold commercially 
prime concern individually restrict receiver data paid 
adopt approach key encrypt sent data systematically changed new unit application data 
keys taken sequence seeded values initially known senders 
key sequence construction arbitrarily di erent sub sequences revealed receiver revealing small number intermediate seed values having reveal key sub sequence 
specifically maximum log seeds need revealed session receiver order reconstruct sub sequence keys long 
compared cient multicast key management solutions date require message length log multicast receivers time receiver group receivers joins leaves 
calculation key sequence requires mean fast hash operations 
notation explained appendix 
contrast receiver added removed scheme zero side ect receivers 
special group key change isn required systematic changes occur su ciently regularly anyway 
keys sent multicast reliable multicast isn required 
key managers delegated handle requests set receiver sessions senders completely oblivious receiver addition removal 
absolutely coupling back senders 
commercial scenarios key managers stateless allowing performance grow linearly unbounded key manager replication 
resilience system assured scenarios face partial failures due complete decoupling elements 
thesis applications rarely require premature eviction pre paid subscription pay tv pay view 
don solution unplanned eviction concentrate pragmatic scenario pre planned eviction believe novel approach 
eviction multicast group planned session set allowed occur arbitrary time 
briefly describe occasional unplanned eviction catered modular combination existing solutions expense loss simplicity scalability 
key sequence constructions companion technical report presents mathematical model encompasses schemes class including way function tree oft :10.1.1.47.2372
scheme companion report particular strengths useful sessions unknown duration multiplies ective key length brute force attack increasing operational key length extremely simple cient terms message bandwidth limited commercial applicability 
scheme chosen simplest secure commercial scenarios 
section discuss requirements describe related multicast key management multicast security issues 
section example application put practical context highlight scalability advantages systematic key changes 
section key sequence construction allows di erent portions key sequence reconstructed various combinations intermediate seeds 
section discusses ciency security construction 
section briefly describes variations approach add security requirements multi sender multicast watermarked audit trail unplanned eviction detail wider literature review 
limitations approach discussed followed 
background definitions requirements internet multicast senders send multicast group address receivers join multicast group message local router 
scalability designers ip multicast deliberately ensured router multicast tree hide downstream join leave activity upstream routers senders 
multicast sender oblivious identities receivers 
clearly security relationship individual receivers impossible uniquely distinguished 
conversely receivers distinguished scalability benefits start eroded 
multicast sender wishes restrict data set receivers typically encrypt data application level 
access controlled limiting circulation key 
new receiver storing away encrypted stream joined secure session 
time receiver allowed key needs changed termed backward security :10.1.1.47.2372
similarly receiver thrown requests leave able decrypt stream key changed forward security 
approaches basis key needs changed receiver new key 
continually changing keys clearly messaging side ects receivers joining leaving 
define secure multicast session set data receiver understand having passed access control test 
key related multicast groups form secure session 
particular receiver leaves multicast group re joins decrypted information missed transmission single secure session 
envisage large receiver communities viewers popular internet pay tv channel 
just audience tuned fifteen minute period potentially cause thousands secure joins leaves second 
term application data unit adu general term minimum useful atom data security commercial point view second example 
adu equates aggregation interval called measured units time 
adu size application security scenario dependent 
may initialisation frame set associated frames video sequence may minutes access network game 
note adu security point view di erent di erent layer application 
adu size vary duration stream dependent content 
adu size primary determinant system scalability 
receivers join fifteen minutes adu size fifteen minutes require re key event 
reduction re keying requirements isn scalability issue 
example system handle requests fifteen minutes provided output just re key request senders 
just scalability problems mind multicast key management architectures introduce key manager role separate concern senders 
deals policy concerns membership isolates senders messaging tra needed access requests 
related ballardie suggests exploiting scalability technique underlying multicast tree delegating key distribution chain routers core multicast routing tree 
security su ers complexity requiring edge customers keys intermediate network providers requiring long chain security associations 
iolus system sets similar distribution hierarchy involving trusted systems :10.1.1.39.4261
gateway nodes partition re keying side ects decrypting re encrypting stream sub group keys 
introduces latency burden packet stream requires strategically placed intermediate systems volunteer processing resource 
alternative class approaches involves single key multicast data hierarchy keys send new key multicast channel data 
approaches involve degree redundant re keying tra arriving receiver order occasional message arrive receiver 
state art class 
group members arranged leaves binary tree group session key root 
auxiliary keys assigned layer tree 
member assigned di erent user identity number uid ectively assigns pair auxiliary keys bit uid space 
pair users bit position uid 
single member leaves new group session key randomly generated multicast encrypted auxiliary key tree held leaving member 
guarantees aside reliability multicast remaining member get message decrypt 
variant recognises potential aggregation member removals occur adu 
group session key multicast group multiple times encrypted di erent logical combinations auxiliary keys order ensure members leaving ones decrypt message 
finding minimised set solution familiar problem reducing number logic gates inputs field logic hardware design 
wong take approach generalisation chang analysing key graphs general case trees 
find tree degree binary cient large groups 
standardised approach pay tv key management falls class 
set secondary keys created receiver holds sub set tamper resistant storage 
group key unknown outside tamper resistant part receiver 
case group key compromised new regularly generated broadcast multiple times di erent secondary keys ensure appropriate receivers re key 
class approaches uses multicast transport send new keys 
reliable multicast extent contradiction terms approaches allow receivers missing occasional multicast new key due localised transmission losses 
approaches include redundancy re keying allow losses reduces ciency increases complexity 
simply ignore possibility losses delegating problem choice su ciently reliable multicast scheme 
scheme falls class group key systematically changed new adu stream 
approach smartcard happens required give non repudiation delivery latency presence exploited control keys sequence reveal 
receiver proxy sender running smartcard smartcards sent primary seed key sequence 
proxy smartcard determines keys give depending policy key manager receiver set session 
shows construct key sequence partially reconstructed intermediate seeds removing need smartcard non repudiation requirement 
requirement focus taxonomies multicast security requirements include possible combinations security requirements multicast 
generally agreed modular approach required building solutions combined requirements searching single monolithic super solution 
examples modular approach show number variations added basic key management schemes achieve selection commercially important requirements 
sender decoupled architecture describe large scale network game scenario explain systematic key changes allow sender decoupling giving scalability benefits asserted 
motivates need key sequences initially built small number seeds 
practical example clarifies possible reveal arbitrary portions key sequence di erent customers 
motivates need reconstruction sub range key sequence small number intermediate seeds 
deliberately choose example financial value adu defined section doesn relate time data volume completely application specific factor 
example participation charged game minute duration strictly related real time minutes defined signalled game time keeper 
game consists virtual zones moderated di erent zone controller 
zone controllers provide background events data bring zone life 
send data encrypted multicast address zone adu index key time zones 
game single secure multicast session defined section despite spread multicast addresses 
players tune background data zone long current key 
foreground events created players zone encrypted meaningless background data 
fig shows data flows relevant game security game progress set 
clearly players sending data shows encrypting senders zone controllers 
similarly receivers decrypt shown game players 
game controller sets game security shown described 
key management operations delegated number replicated key managers km secure web server technology 
key secure multicast session changed game minute adu sequence 
encrypted data headed adu index clear refers key needed decrypt 
set phase game controller zone controllers key managers hold initial seeds enable calculate sequence keys entire duration game 
game set 
game controller shown unicasts shared control session key km satisfying authenticity identity 
easiest way km run secure web servers session key sent encrypted public key client authenticated secure sockets layer ssl communications 
game controller notifies km multicast address control messages immediately join 

game controller generates initial seeds construct entire key sequence multicasts km encrypting message control session key reliable multicast protocol suitable probably small number targets involved 

game announced authenticated session directory announcement regularly repeated multicast shown 
announcement protocol enhanced include details key manager addresses price game minute 
authenticated announcement prevents attacker setting spoof payment servers collect game revenues 
key managers receivers listen announcement order get current price game minute 
receiver session set duration termination 
receiver wishes pay join game having heard advertised session directory contacts km web server requesting certain number game minutes appropriate form 
shown unicast setup fig 
pays km cost requested game minutes paying form cash tokens won previous games 
return fig 

key management system design km sends set intermediate seeds allow calculate just sub range key sequence bought 
key sequence construction described section possible ciently 
take place ssl km needing authentication 
generates relevant keys intermediate seeds bought 

joins relevant multicasts determined game application encrypted background zone data uses key sequence calculated previous step decrypt messages making rest game data meaningful 

time keeper signals new game minute control multicast zone controllers increment adu index key sequence 
adu index 
notices adu index messages incremented uses appropriate key sequence 

game minute index approaches sequence bought application gives player insert coins warning loses access 
game minutes continue increment point reached key required outside range feasibly calculate 
bought game minutes drop game 
scenario illustrates senders completely decoupled receiver join leave activity long key managers know financial value adu index access policy adu 
need communication key managers senders session 
senders certainly need hear receiver activity 
key managers need avoid selling adus transmitted merely need synchronise changing stream adu sequence numbers senders 
example key managers synchronise listening multicast data 
scenarios may possible synchronisation purely time explicit synchronisation signals implicitly time day synchronisation 
scenarios multicast distribution commercial software time transmission may irrelevant 
instance transmission may regularly repeated receivers sold keys part sequence tune time 
example pre payment buy seeds 
ensures key managers hold state customers 
means infinitely replicated central state repository required case seeds bought account customer account status needed checked 
performance linear key manager replication system resilience independent key manager resilience 
key sequence construction notations notation function blinds value computationally limited adversary find 
example blinding way function hash function md standard secure hash 
hash functions typically require lightweight computational resources 
hash functions designed reduce input size fixed size output 
cases input size output merely blinding property size reduction property hash 
computationally fast function maps set input values 
circular rotary bit shift example function 
binary hash tree bht binary hash tree requires blinding functions wellknown 
term left right blinding functions 
typically constructed single blinding function applying simple functions blinding function 
illustrated fig 
instance known blinding function bit left circular shift followed md hash second blinding function bit right circular shift followed md hash 
alternatives precede blinding function xor concatenation known word 
advantageous choose functions consume fig 

blinding functions minimal equal amounts processor resource balances load cases limits susceptibility covert channels appear level processor load reveal choice function executed 
alternatively ciency variants hash function md di erent initialisation vectors 
ill advised tamper tried tested algorithms 
key sequence constructed follows 
sender randomly generates initial seed value 
concrete example take value bits wide 

sender decides required maximum tree depth lead maximum key sequence length new initial seed required 

sender generates left right level intermediate seed values applying respectively left right blinding functions initial seed sender generates second level intermediate seed values creating binary tree intermediate seed values depth levels 
formally intermediate seed levels initial seed mod see appendix notation 
key sequence constructed seed values leaves tree 
strictly stream cipher may require keys shorter key may derived leaf seeds truncation significant bits typically 
choice stream cipher irrelevant long fast secure 
formally 
sender starts multicasting stream encrypting adu adu leaving adu sequence number clear 

sender delegates key management privately communicate initial seeds key managers 
receiver reconstructs portion sequence follows 
receiver granted access adu sender key manager unicasts set seeds receiver ssl 
set consists intermediate seeds closest tree root enable calculation required range keys enabling calculation key outside range 
identified testing indexes minimum maximum seed fact index left child odd index right child 
test performed layer tree starting leaves working upwards 
right minimum left maximum needs revealing moving level 
seed revealed index shifted inwards seed 
move layer minimum maximum indexes halved maximum rounded 
odd tests repeated new indexes revealing right minimum left maximum 
process continues minimum maximum cross meet 
cross shifted inwards 
meet shifted upwards case seed meet needs revealing terminating procedure 
procedure described formally code appendix 
clearly receiver needs know seed resides tree 
seeds indexes explicitly paired revealed 
alternatively reduce bandwidth required protocol may specify order seeds sent index calculated implicitly minimum maximum index order seeds 
possible minimal set seeds allows re creation range keys 
receiver repeat pairs blinding functions intermediate seeds sender re create sequence keys km equations 

receiver access completely di erent range adus sent di erent set intermediate seeds 
creation key sequence graphically represented fig 
example circle relevant intermediate seeds allow receiver re create key sequence seeds keys remain blinded receiver shown grey background 
course value greater typical practice 
note layer assigned arbitrary value long uniquely identifies layer 
relies actual value fig 

binary hash tree necessary sender reveal far tree extends upwards improving security 
session unknown duration starts 
clearly choice limits maximum length key sequence starting point 
simplest round just generate new initial seed start new binary hash tree alongside old required 
known senders receivers range keys overflows maximum key index immediately apparent parties 
cases sensible allocate tree id new tree specify seeds tree 
discussion storage processing costs general approach small number seeds generate larger number keys sender encryption receiver decryption 
case may limited memory capacity key sequence appears require exponentially memory seeds 
show tree construction requires minimal memory minimal processing sender receiver new key sequence calculated 
assume keys sequentially key required 
discuss trade storage processing key managers may able serve seeds arbitrary points tree time 
senders receivers bht cient store seeds branch tree root key currently 
note may multiple roots particularly receivers revealed seed root 
practice principle translates able deallocate memory parent seed immediately hashed produce right child 
leaf seeds deallocated soon sequence ensure tree holds log seeds memory top revealed seeds held generate rest tree right current key 
re earlier example fig follow key calculation sequence step step 
brevity assume keys synonymous corresponding leaf seeds 
immediately available revealed seeds 

requires hash operations 
value calculated way stored 

may deallocated 
requires hash stored 
may deallocated 
requires hashes 
value calculated way stored 

may deallocated soon hashed 
may deallocated soon 
process continues similar lines finished deallocated leaving seeds memory 
noted seed storage strategy adopted hash operation required key seeds penultimate layer hash keys layer hash keys layer 
words branch tree requires hash calculated 
mean 
hashes key 
branches leaves memory extremely scarce embedded device clock cycles spare storage traded processing 
intermediate seeds branch tree current key need calculated don need stored 
closest leaves stored cached needed calculate keys 
intermediate seeds nearer root required recalculated long seeds originally sent key manager discarded sequence left 
senders receivers key manager guarantee access key space sequentially 
respond requests seeds tree 
scenarios requests tend randomly distributed 
key manager identical approach device scarce memory 
calculate seeds part tree initial seeds cache frequently 
simply requires fixed size cache memory allocation discard values store 
ciency table shows various performance parameters bht secure multicast session km receiver sender key manager respectively defined section length range keys receiver requires randomly positioned key space size seed typically size key management protocol header overhead processor time blind seed plus relatively negligible circular shifting operation bht unicast message size ws wh min max log min storage ws mean log min processing latency ts max log mean log min processing key ts max log mean km min storage ws min random bits ws table 
ciency parameters bht secure multicast session unicast message size receiver session set shown equated minimum amount storage receiver requires 
storage required starting session keys started calculated 
minimum sender storage row meaning 
processing latency time required receiver ready decrypt incoming data having received unicast set message session 
note latency cost members join leave schemes cater unplanned eviction 
figures processing key assume sequential access keys caching strategy described section 
exceptional cases session starts ends included figures key processing 
sender group controller multiple senders required generate random bits initial seeds 
number bits required clearly equal minimum sender storage initial seeds 
seen parameters depend size group membership receiver 
cost storage processing latency distributed group membership constant receiver 
unicast message size causes cost key manager rises linearly group membership size cost borne receiver session 
certainly receiver costs dependent group size schemes allow unplanned eviction 
bht construction highly scalable 
security seed tree potentially twice valuable child 
incentive exhaustively search seed space correct value blinds current highest known seed value tree 
md hash involve md operations average 
possible value incorrect blinds value collides known value typically operations md 
apparent seed produce range keys testing data supposedly encrypted 
having succeeded breaking level level twice valuable require brute force ort crack 
note md hash portable source input takes sun 
md take years 
md optimised host architecture twice fast 
generally random values needed build tree contain sustained attacks bounds sub tree created new random seed 
long running sessions trade security convenience continuous key space concatenating side side described earlier 
randomness randomly generated seeds potential area weakness correctly designed 
key sequence construction discussed vulnerable collusion valid group members 
sub group members agree buy di erent range key space share seeds sent access union separate key spaces 
arbitrage variant member collusion discussed 
group member buys key sequence sells portions cheaply selling price making profit keys bought customer 
protection collusion non group members discussed section watermarking 
total system security particular application clearly depends strength security setting session 
example scenario section describes issues need addressed suggests standard cryptographic techniques meet 
security application strong weakest part human element key sequence construction discussed 
requirement variations key management scheme described current lends modular combination mechanisms meet additional commercial requirements described 
multi sender multicast multi sender multicast session secured bht long senders arrange key sequences 
need simultaneously key long keys part sequence 
receivers know key sender sequence long adu index transmitted clear header encrypted adu 
example scenario section described multiple senders synchronise adu index important commercial model application 
sender multi sender multicast uses di erent keys key sequences sender creating di erent secure multicast session multicast address 
follows distinction multicast session secure multicast session defined section 
watermarked audit trail re multicast received data requires low resources part receiver 
value information received relatively low profit re multicasting data undercutting original price arbitrage proved herzog 
general prevention information copying considered infeasible attention focuses tractable problem copy detection uniquely watermarking copy 
watermarked copy discovered traced back source holders original copies passing illicit copies 
watermarks typically applied significant bits medium avoid significantly degrading quality 
approach chameleon watermark keys decrypt stream data combined keys bht 
chameleon stream combining regular stream cipher large block bits kb chameleon concrete example 
receiver long term copy block decipher stream 
block watermarked receiver way specific medium 
block xor operation position watermarked bits preserved output allowing approach generic 
keys generated bht construction treated sequence intermediate keys watermarked sequence final keys generated enforcing watermarked decryption 
approach su ers applicability limitation chameleon previously discussed knowledge 
chameleon doesn detect semi internal leakage users legitimately hold valid long term key block 
intermediate keys final ones leaked receiver 
instance network game example group players collude buy di erent game hour share intermediate keys buys 
receiver entitled certain intermediate keys create final keys watermarked key block decrypt 
keys data produced stamped watermark gives audit trail target leak source shutting stable door horse 
chameleon create audit trail keys data passed completely unauthorised receiver receiver long term key block played game 
cases traitor revealed keys data traced keys data traced 
similarly audit trail players passes long term key block contains watermark traceable source leak 
chameleon raises bar leakage valid candidate modular combination bht 
unplanned eviction pointed bht allows eviction group arbitrary times planned time receiver session set 
pre planned eviction common case occasionally unplanned evictions needed keys bht combined scheme lkh allow occasional unplanned eviction 
achieve watermarking keys sequence generated bht treated intermediate keys 
combined xored group key distributed example lkh produce final key decrypting data stream 
bht intermediate key lkh intermediate key needed produce final key time 
number intermediate keys combined xor meet multiple requirements simultaneously 
instance marks lkh chameleon intermediate keys combined simultaneously achieve low cost planned eviction occasional unplanned eviction watermarked audit trail leakage outside long term group 
formally final key 

intermediate keys generated sequences bht construction means chameleon lkh combining function xor 
general combination way produces aggregate scheme storage costs sum individual component schemes 
combining lkh marks evictions planned cuts re keying messages lkh unplanned eviction required 
limitations duplication information costs little selling multiple copies unit price greater cost duplication results economic incentives potential buyers collude 
discuss receiver collusion arbitrage sections best solution er requiring smartcards ers possibility detecting collusion group member non member 
detecting intra group collusion requiring specialist hardware left 
assumed knowledge value blinded di erent ways starting value doesn lead analytical solution calculate original value 
proofs exist showing blinding function resistant analytical brute force attack won possible prove analytical attack easier techniques 
pressure time avoided analysis trees degree 
potentially er greater ciency expense additional complexity 
instance experiments wong recommend tree degree pattern usage tree subjected related 
solution manage keys large groups 
preserves scalability receiver initiated internet multicast completely decoupling senders receiver join leave activity 
senders completely decoupled key managers absorb receiver activity 
shown commercial applications models need stateless key managers cases unlimited key manager replication feasible 
gains achieved systematic group key changes receiver join leave activity driving re keying 
decoupling achieved senders key managers pre arranging unit financial value multicast data stream application data unit respect charging 
model zero side ect receivers senders receiver joins leaves 
ensure multicast key management bulk data transfer 
re keying isn vulnerable random transmission losses complex repair scalably multicast 
state art techniques allow unplanned eviction group costly messaging terms 
contrast focussed problem planned eviction 
eviction receiver arbitrary adu planned time receiver requests session 
asserted commercial scenarios pre payment subscription don require unplanned eviction require arbitrary planned eviction 
examples pay view tv network gaming 
achieve planned arbitrary eviction designed key sequence construction senders systematically change group key 
designed arbitrary subrange sequence reconstructed revealing small number seeds 
reveal keys receiver log seeds 
scheme requires average just log fast hash operations get started average just hashes calculate new key sequence 
implies processing time generate adu key today technology 
put context pay tv charged second viewers tuning fifteen minute period best alternative scheme chang generate re key message order tens kb second multicast group member 
requires message bytes unicast just receiver start hours viewing 
comparison strictly fair scheme chang schemes class allow unplanned eviction group allowing accurate charging serendipitous viewing 
purpose far scalable solution commercial scenarios unplanned eviction required 
way putting cost scenarios requiring unplanned eviction economically compared planned eviction 
unplanned eviction occasionally required shown combine scheme chang get best worlds 
combining schemes sums storage requirements low respect 
show combine chameleon watermarking scheme give rudimentary detection information leakage outside group 
jake hill ian david parkinson bt 
ross anderson cambridge uni chameleon new kind stream cipher encryption haifa jan www cl cam ac uk ftp users rja chameleon ps gz 
pete bob briscoe alan bt taxonomy communication requirements large scale multicast applications internet draft progress internet engineering task force may draft ietf lsma requirements txt 
bob briscoe ian bt receiver multicast non repudiation key management forthcoming acm conference electronic commerce nov www labs bt com projects 
bob briscoe bt marks zero side ect multicast key management arbitrarily revealed key sequences bt technical report aug www labs bt com projects 
ran canetti ibm watson juan garay bell labs gene nds daniele micciancio mit moni naor weizmann inst 
science benny pinkas weizmann inst 
science multicast security taxonomy cient constructions proceedings ieee infocomm vol mar www wisdom weizmann ac il papers infocom ps 
chang robert engel dilip kandlur dimitrios saha ibm watson research center key management secure internet multicast boolean function minimization techniques proceedings ieee infocomm vol mar www research ibm com people papers infocom srm pdf 
deering multicast routing datagram network phd thesis dept computer science stanford university 

kocher netscape ssl protocol nov 

mark handley ucl scalable internet multimedia conferencing systems phd thesis nov www aciri org thesis ps gz 
shai herzog ibm scott shenker xerox parc deborah estrin usc isi sharing cost multicast trees axiomatic analysis proceedings acm sigcomm cambridge ma aug www research ibm com people herzog html 
ronald rivest md message digest algorithm request comments rfc internet engineering task force www ietf org rfc rfc txt 
tony ballardie scalable multicast key distribution request comments rfc internet engineering task force may www ietf org rfc rfc txt 
itu rec 
conditional access broadcasting systems verb www itu int itu rec bt pdf 
david alan sherman key establishment large dynamic groups way function trees tis report tis labs network associates md may 

iolus framework scalable secure multicasting proceedings acm sigcomm sep cannes france 

fips publication secure hash standard nist department commerce washington 
april 

chung kei wong mohamed gouda simon lam secure group communications key graphs proceedings acm sigcomm sep www acm org sigcomm sigcomm tp abs html appendix algorithm identifying minimum set intermediate seeds bht code fragment function odd tests odd function reveal reveals seed receiver min max working leaves 
move tree level loop min max min amp max converged reveal min reveal sub tree root 
break quit odd min odd min left child reveal min reveal odd min seed min step min right odd max max right child reveal max reveal max seed max step max left min max break min max cousins quit min halve min max 
halve max ready 
level round loop appendix notation notation order 
notation value rounded nearest integer floor function 
mod notation remainder 
