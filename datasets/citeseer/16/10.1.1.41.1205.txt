implementing data cubes efficiently harinarayan anand rajaraman stanford university jeffrey ullman decision support applications involve complex queries large databases 
response times small query optimization critical 
users typically view data multidimensional data cubes 
cell data cube view consisting aggregation interest total sales 
values cells dependent values cells data cube 
common powerful query optimization technique materialize cells compute raw data time 
commercial systems differ mainly approach materializing data cube 
investigate issue cells views materialize expensive materialize views 
lattice framework express dependencies views 
greedy algorithms lattice determine set views materialize 
greedy algorithm performs small constant factor optimal variety models 
consider common case hypercube lattice examine choice materialized views hypercubes detail giving tradeoffs space average time answer query 
decision support systems dss rapidly key gaining competitive advantage businesses 
dss allow businesses get data locked away operational databases turn data useful information 
corporations built building new unified decision support databases called data warehouses users carry analysis 
operational databases maintain state information data warehouses typically maintain historical information 
result data warehouses tend large grow time 
users dss typically interested identifying trends looking individual records isolation 
decision support queries heavy aggregations complex oltp queries 
size data warehouse complexity queries cause queries take long complete 
delay unacceptable dss environments severely limits productivity 
usual requirement query execution times seconds minutes 
ways achieve performance goals 
query optimizers query evaluation techniques enhanced handle aggregations better cs yl different indexing strategies bit mapped indexes join indexes og 
supported nsf iri aro daah air force contract authors address department computer science stanford university stanford ca 
email anand db stanford edu 
commonly technique materialize precompute frequently asked queries 
data warehouse department store chain instance total precomputed tables rad improve query performance 
picking right set queries materialize nontrivial task materializing query may able answer queries quickly 
example may want materialize query relatively infrequently asked helps answer queries quickly 
framework algorithms enable pick set queries materialize 
framework lets infer order queries materialized 
data cube users data warehouses graphical environment data usually multidimensional data cube higher dimensional sub cubes explore trying discover interesting information 
values cell data cube measures interest 
example consider tpc decision support benchmark 
example tpc benchmark models business warehouse 
parts bought suppliers sold customers sale price sp 
database information transaction period years 
dimensions interested part supplier customer 
measure interest total sales 
cell data cube store total sales part bought supplier sold customer terms dimension attribute interchangeably section 
general case dimension may attributes shall see section 
users interested consolidated sales example total sales part customer 
suggest adding additional value domain dimension achieve :10.1.1.120.4505
question want total sales part customer suppliers 
query answered looking value cell 
tpc database size gb running example 
details benchmark refer tpcd 
discussed presentation data set multi dimensional data cube user 
implementation alternatives possible 
physically materialize data cube 
approach gives best query response time 
precomputing storing cell feasible alternative large data cubes space consumed excessive 
noted space consumed data cube indicator time takes create data cube important applications 
space consumed impacts indexing adds cost 

materialize 
case need go raw data compute cell request 
approach problem quick query response database system raw data stored 
extra space raw data required 

materialize part data cube 
consider approach 
data cube values cells computable cells data cube 
dependency similar spreadsheet value cells expressed function values cells 
call cells dependent cells 
instance example compute value cell sum values cells supplier supplier number suppliers 
cells materialize better query performance large data cubes may able materialize small fraction cells data cube due space constraints 
important pick right cells materialize 
approach scalable handle large data cubes 
cell value components address dependent cell 
value cell computable cells data cube 
cell components value computed cells query raw data compute value 
number cells components usually large fraction total number cells data cube 
tpc database dimensions example percent cells data cube dependent 
problem cells data cube materialize real 
different commercial systems pick different strategies 
clearly strategy benefits 
example applications performance paramount importance scalability important go materialize strategy 
system ess example materializes data cube materializes system stg materializes part cube 
issue materialized data cube stored relational system proprietary multi dimensional database system 
assume data cube stored summary tables relational system 
sets cells data cube assigned different tables 
cells data cube organized different sets positions addresses 
example cells addresses match address placed set 
placeholder matches value 
sets corresponds different sql query 
values set cells output sql query select part customer sum sp group part customer refers raw data relation 
queries corresponding different sets cells differ group clause 
general attributes values description set cells appear group clause sql query 
example supplier value set description 
appear group clause sql query 
sql queries various sets cells differ grouping attributes grouping attributes identify queries uniquely 
deciding sets cells materialize equivalent deciding corresponding sql queries views materialize 
rest views sets cells 
motivating example tpc database considered example attributes part supplier customer 
possible groupings attributes 
list queries views possible number rows result 
note suffices mention attributes group clause view 

part supplier customer rows 
part customer 
part supplier 
supplier customer 
part 
supplier 
customer 
indicates attributes group clause 
shows views organized lattice type shall discuss section 
naming views diagram abbreviation part supplier customer 
psc pc ps sc views constructible grouping part supplier customer possible user query request entire view 
example user may ask sales grouped part 
materialized view groups part view need scan view output answer 
answer query view groups part customer view 
case total sales customer part need sum sales customers get result 
assume cost answering query proportional number rows examined 
cost finding total sales grouped part view materialized cost processing rows size view 
answer query part customer view need process rows 
kind user query ask sales single part say widgets 
views indexes scan entire view half average answer question 
comparison rows view versus rows view apply query 
appropriate indexes available views finding sales widgets requires row access view view access average rows 
regardless materialized views indexed expect cost answering queries view single cell proportional size view answered query 
shall discuss cost model detail section 
interesting questions ask 
views materialize get reasonable performance 

space views materialize minimize average query cost 

re willing tolerate degradation average query cost fully materialized data cube space save fully materialized data cube 
provide algorithms help answer questions provide near optimal results 
example fully materialized data cube views materialized slightly rows 
see better 
avoid going raw data need materialize view grouping part supplier customer view view constructed views 
consider view grouping part customer view 
answering query view require process rows 
query answered view grouping part supplier customer requires processing rows 
advantage materializing view grouping part customer 
similar reasoning advantage materializing view grouping supplier customer view 
get average query cost rows improvement terms space consumed cost creating data cube 
cleverly choosing parts data cube materialize reap dramatic benefits 
related multi dimensional data processing known olap enjoyed spectacular growth late 
basic implementation approaches facilitate olap 
approach eschew sql relational databases proprietary multi dimensional database systems apis olap 
raw data relational data warehouses data cube materialized 
users query data cube efficiently retrieves value cell address 
allocate space cells raw data possible cell data cube cell address hashing scheme 
arbor ess implemented way 
note approach materializes cells data cube raw data large 
approach relational database systems users directly query raw data 
issue query performance attacked smart indexes conventional relational query optimization strategies 
products dss agent take tack 
retain significant performance advantage 
performance relational database systems improved dramatically materializing data cube summary tables 
disregard number index nodes accessed 
relational approach scalable handle large data warehouses 
hand better query performance scalable 
materializing selected parts data cube improve performance relational database improve scalability 
products relational world stg world spreadsheet connector materialize parts data cube 
believe investigate fundamental problem detail 
discusses generalizing sql group operator data cube operator 
introduce notion mention 
claim size entire data cube larger size corresponding group 
believe differently 
saw tpc database data cube usually larger times larger corresponding group part supplier customer 
organization organized follows 
section introduce lattice framework model dependency views 
show lattice framework models complex groupings involve arbitrary hierarchies attributes 
section query cost model 
section presents general technique producing near optimal selections materialized views problems arbitrary lattices 
section consider important special case hypercube lattice views associated set attributes grouping occurs 
running example section hypercube 
lattice framework section develop notation describing data cube query answered results 
example section saw data cube queries wish materialize completely specified giving attributes group clause 
may denote view query thing giving grouping attributes inside parenthesis 
example query grouping attributes part customer denoted part customer 
saw views defined supersets answer queries involving subsets 
dependence relation queries may generalize observations section follows 
consider queries say answered results query say dependent example section query part answered results query part customer 
part part customer 
certain queries comparable operator 
example part customer customer part 
operator imposes partial ordering queries 
shall talk views data cube problem forming lattice tm 
order lattice elements views queries upper bound greatest lower bound ordering 
practice need assumptions analysis assumes possible cell data cube exists 
cases data cubes sparse small fraction possible cells 
cases size data cube larger corresponding group 
fact sparser data cube larger ratio size data cube size corresponding group 

partial order 
top element view view dependent 
lattice notation denote lattice set elements queries views dependence relation hl elements lattice hl oe means ancestors descendants element lattice hl defined follows ancestor fb bg descendant fb ag note element lattice descendant ancestor 
immediate proper ancestors element lattice belong set shall call 
formally fb oe oe oe bg lattice diagrams common represent lattice lattice diagram graph lattice elements nodes edge 
lattice elements lattice diagram path downward example hypercube fig 
lattice diagram set views discussed section 
hierarchies real life applications dimensions data cube consist attribute dimensions organized hierarchies attributes 
simple example organizing time dimension hierarchy day month year 
hierarchies important form basis commonly querying operations drill roll 
drill process viewing data progressively detailed levels 
example user drills looking total sales year total sales month sales day 
roll just opposite process viewing data progressively detail 
roll user starts total sales day looks total sales month total sales year 
presence hierarchies dependency lattice hl complex hypercube lattice 
example consider query groups time dimension 
time hierarchy earlier queries possible day month year groups different granularity time dimension 
year month day 
words total sales grouped month example results compute total sales grouped year 
hierarchies introduce query dependencies account determining queries materialize 
things complex hierarchies total orders partial orders attributes dimension 
consider time dimension hierarchy day week month year 
months years divided evenly weeks grouping week determine grouping month year 
words month week week month similarly week year 
include view corresponding time grouping get lattice time dimension shown diagram fig 

week month day year hierarchy time attributes composite lattices multiple hierarchical dimensions faced query dependencies types 
query dependencies caused interaction different dimensions 
example section corresponding lattice fig 
example sort dependency 

query dependencies dimension caused attribute hierarchies 
allowed create views independently group member hierarchy dimensions represent view tuple point hierarchy ith dimension 
lattice called direct product dimensional lattices tm 
directly get operator views rule illustrate building direct product lattice presence hierarchies example tpc benchmark 
example example mentioned tpc benchmark database 
example focus dimensions part customer 
dimensions organized hierarchies 
dimensional lattices dimension queries fig 

dimension lattices modified include attribute lowest element 
customer dimension organized hierarchy individual customers denoted attribute grouped country residence denoted attribute coarsest level grouping grouping denoted attribute 
part dimension individual parts denoted attribute individual parts grouped size denoted attribute grouped types denoted attribute note 
attribute smallest element lattice 
direct product lattice shown fig 

note dimension value query specify dimension query 
example written 
customer part hierarchies customer part dimensions cp ct np nt cs ns combining hierarchical dimensions lattice framework advocate advantageous reasons 
provides clean framework reason dimensional hierarchies hierarchies lattices 
seen fig 
direct product lattice hypercube hierarchies simple 
current data cube approaches unable integrate dependencies caused dimensional hierarchies cleanly dependencies caused inter dimensional interaction 
shall see shortly section doing important deciding views need materialized best query performance 

model common queries asked users better lattice framework 
users usually don jump unconnected elements lattice move edges lattice 
fact drill going going lower higher level path lattice roll going path 

lattice approach tells order materialize views 
example decide materialize views fq qn queries set may dependent need go raw data materialize view 
views materialized materialize views reduce total materialization time dramatically 
doing translates reducing time required create data cube 
consider lattice hs views elements 
perform topological sort operator 
arrange elements descending order respect operator order materialize views order 
views proper ancestor elements materialize views access raw data 
views materialized views materialized earlier 
materializing view proper ancestor smallest number rows 
cost model section review justify assumptions linear cost model time answer query taken equal space occupied view query answered 
consider points estimating sizes views materializing give experimental validation linear cost model 
linear cost model hl lattice queries views 
answer query choose ancestor say qa materialized 
need process table corresponding qa answer cost answering function size table qa choose simplest cost model ffl cost answering number rows table query qa construct discussed section queries ask entire view request sales parts 
user see sales particular part parts 
appropriate index structure view part materialized get answer time 
appropriate index structure search entire part view query single part takes long producing entire view 
example need answer query single part ancestor view part supplier need examine entire view 
seen single scan view sufficient get total sales particular part 
hand wish find total sales part ancestor view part supplier need aggregation view 
hashing sorting early aggregation aggregation 
cost doing aggregation function amount memory available ratio number rows input output 
best case single pass input sufficient example hash table fits main memory 
practice observed aggregations take passes input data 
actual cost queries ask single cells small numbers cells complete view complex feel appropriate assumption uniformity 
data structure store views supports efficient access desired cell case time required proportional number rows aggregated compute value cell data structure case behavior single cell full view queries essentially 
case suitable data structure exists shall assumption time queries asking different cells view occur 
number queries group performance equivalent single query full view total time equal reading materialized time reading view qa preferred materialized ancestor may avoid question full view single cell queries predominate treat queries full view queries 
ffl assume queries identical element view lattice 
clearly factors considered influence query cost 
clustering materialized views attribute indexes may 
complicated cost models certainly possible believe cost model pick simple realistic enables design analyze powerful algorithms 
believe analysis algorithms develop sections reflects performance cost models model 
experimental examination linear cost model substantial validation cost model shown fig 

tpc data asked total sales single supplier conditions views different granularities 
find linear relationship size running time query 
linear relationship expressed formula running time query view size gives fixed cost overhead running query view negligible size 
case row table fig 
gives fixed cost seconds 
ratio query time size view accounting fixed cost 
seen fig 
ratio different views 
source size time sec 
ratio cell applicable view supplier view part supplier view part supplier customer growth query response time size view determining view sizes algorithms require knowledge number rows view 
ways estimating sizes views short materializing views 
commonly approach run algorithms statistically significant small subset raw data 
case get sizes views materializing views 
subset raw data determine views want materialize 
materialize views entire raw data 
sampling analytical methods compute sizes different views materialize largest element lattice view groups largest attribute dimension 
view know grouping attributes statistically independent estimate size view analytically size sample raw data estimate size views 
size view number distinct values attributes groups 
example size view groups part supplier number distinct values part supplier raw data 
known sampling techniques determine number distinct values attributes relation 
optimization data cube lattices important objective develop techniques optimizing space time tradeoff implementing lattice views 
problem approached angles may situation favor time space third willing trade time space long get value trade away 
section shall simple optimization problem 
wish minimize average time taken evaluate view 

constrained materialize fixed number views regardless space 
evidently item minimize space section shall show adapt techniques model optimize space utilization 
simple setting optimization problem np complete straightforward reduction set cover 
motivated look heuristics produce approximate solutions 
obvious choice heuristic greedy algorithm select sequence views best choice gone 
shall see approach fairly close optimal cases shown produce best possible selection views materialize 
greedy algorithm suppose data cube lattice space costs associated view 
space cost number rows view 
cost view suppose limit number views addition top view may select 
selecting set views surely includes top view benefit view relative denote defined follows 

define quantity bw view cost note top view view 
bw gamma 
bw 
define wv bw simpler terms compute benefit considering improve cost evaluating views including 
view covers compare cost evaluating view offered cheapest way evaluating helps cost cost competitor difference represents part benefit selecting materialized view 
total benefit sum views benefit evaluate providing benefit positive 
define greedy algorithm selecting set views materialize 
algorithm shown fig 

top view select view maximized union resulting greedy selection greedy algorithm example consider lattice fig 

views named space costs indicated 
top view cost chosen 
suppose wish choose views 
example lattice space costs execute greedy algorithm lattice successive choices view materialize 
column headed choice fig 
gives benefit views calculating benefit assumption view evaluated cost 
pick view materialize reduce cost views 
benefit times indicated row column fig 

example pick views costs reduced 
benefit 
choice second choice third choice theta theta theta theta theta theta theta theta theta theta theta theta theta theta theta theta benefits possible choices round evidently winner round pick view materialized views 
recalculate benefit view view created cost cost 
benefits shown second column fig 

example benefit choosing longer improves cost count improvement views 
example choosing yields benefit 
yields benefit choice improved cost associated 
winner second round benefit 
notice wasn close best choice round 
third choice summarized column fig 

example complex calculation benefit 
number consists reduce costs plus reduction cost 
winner third round benefit gained improvement cost greedy selection reduces total cost evaluating views case materialized 
cost optimal 
example examine lattice suggested fig 

lattice shall see essentially bad lattice case 
greedy algorithm starting top view picks benefit 
views improved place second choice pick benefit 
specifically consider improves nodes far left 
greedy algorithm produces solution benefit 
optimal choice pick views improve views chains 
optimal solution benefit 
nodes total nodes total nodes total nodes total lattice greedy algorithm poorly ratio greedy optimal 
fact making cost closer making chains arbitrarily large numbers views find examples ratio arbitrarily close worse 
experiment greedy algorithm ran greedy algorithm lattice fig 
tpc database described earlier 
shows resulting order views top view mandatory twelfth view 
units benefit total time total space number rows 
note average query time total time divided number views case 
number selection benefit total time total space 
cp infinite 
ns 
nt 


cs 
np 
ct 
small small 
small 
small greedy order view selection tpc example example shows important materialize views materializing views choice 
graph fig 
total time taken space consumed axis number views picked axis 
clear views total time total space number materialized views time space greedy view selection tpc example 
pick minimal addition space query time reduced substantially 
picked views improve total query time substantially large amounts space 
example clear choice picking views 
pick views cp ns nt top view included table get minimum possible total time total space hardly mandatory space just top view 
performance guarantee greedy algorithm show matter lattice greedy algorithm performs badly 
specifically benefit greedy algorithm benefit optimal algorithm 
precise fraction gamma base natural logarithms 
explanation need develop notation 
views selected order greedy algorithm 
benefit achieved selection benefit respect set consisting top view gamma optimal set views give maximum total benefit 
order views appear arbitrary need pick order 
order define benefit respect set consisting top view plus gamma define put upper bound terms 
greedy solution look view see view cost improved 
attribute improvement various 
example example cost associated improved 
improvement attributed selection greedy solution subsequent selection want compare improvement arbitrary view effected 
suggests improvement cost partitioned top bar lower bar 
suggested improvement due amounts suggested 
likewise larger improvement due divided shown 
greedy optimal improvement view attributed show upper bound need attribute piece benefits particular examine improvements view suggested fig 

example attribute contribution wholly region contained region contribution divided proportions shown 
contribution attributed part contribution attributed part attributed 
general order improvements sequence views chosen 
define ij sum views lattice amount benefit attributed important inequality holds ffl ij sum pieces benefit attributed various exceed benefit observe inequalities fact picked place case 
observation ffl picked greedy algorithm similarly considering second choice greedy algorithm tells ffl gamma reason benefit brings competition second choice minus amount benefit covered benefit great competing choice 
generalizing write ffl gamma gamma gamma delta delta delta gamma gamma sum equations remember 


ij get family inequalities fig 

ka ka ka delta delta delta ka delta delta delta gamma inequalities bounding benefit optimal solution conclude greater minimum right sides inequalities fig 

easy show right sides unequal transfer quantity gamma resulting change looser bound ffl fixed tightest bound occurs right sides fig 
equal 
notice difference ith right side st right side ka gamma gamma difference conclude gamma values observe ffl gamma gamma terms sum ffl gamma gamma bound comes easily inequality fig 
come inequalities equal right sides 
taken ratio formulas gamma gamma gammak gamma gamma delta delta delta gamma gamma gamma gamma example get greedy algorithm optimal 
matching worst possible ratio greedy algorithm saw example specific lattices approached ratio benefits greedy optimal algorithms 
fact ffl ratio gamma gamma reached 
omit detailed construction sequence bad cases 
intuitive idea follows 
construct lattice identical subtrees roots gives large benefit nodes optimal choice 
add lattice node includes descendants kth subtrees plus extra benefit just slightly higher greedy choice 
add lattice node covers kth portion subtree covered plus extra benefit just higher gamma note picked benefit subtree roots shrinks gamma second greedy choice 
continue manner greedy choice nodes covering kth portion subtrees covered previous greedy choices 
possible show optimal choice benefit kb benefit greedy choices just gamma gamma conclude ffl lower bound ratio greedy optimal benefits exact 
ratio gamma gamma shown section occurs lattice gamma approaches gamma gamma 
lattice whatsoever greedy algorithm give benefit optimal benefit 
conversely sequence bad examples suggested section shows ratio improved 
cases greedy optimal analysis section lets discover certain cases greedy approach optimal close optimal 
situations look greedy solution 

larger greedy close optimal 
see consider inequality fig 

essentially says approximately case approximately 

equal greedy optimal 
proof consider inequality fig 

says ka equal ka similarly approximately equal approximately greedy approach near optimal 
extensions basic model ways model fails reflect reality 

views lattice probability requested query 
able associate probability view representing frequency queried 

asking fixed number views materialize allocate fixed amount space views top view materialized 
point requires little extra thought 
computing benefits weight view probability 
greedy algorithm exactly bounds performance optimal 
point presents additional problem 
restrict number views selected fix total space need consider benefit view unit space materialization view 
greedy algorithm appropriate additional complication small view high benefit unit space large view benefit unit space 
choosing small view excludes large view space available large view choose small 
hand view space fraction total space allowed analysis says ratio benefits greedy optimal algorithms gamma hypercube lattice arguably important class lattices hypercubes views vertices dimensional cube intuition attributes grouping may occur st attribute value aggregated view 
view form select cp sum group cp subset 
example hypercube lattice taken tpc benchmark database 
top view groups attributes 
visualize views organized ranks ith rank bottom views group attributes 
gamma delta views rank equal domain size case course apply greedy algorithm hypercube lattices looking fixed number views materialize looking fixed amount space allocate views 
regularity lattice examine detail options selecting set views materialize 
investigations shall assumption true practice attributes domain size shall denote consequence assumption easily estimate size view 
section shall consider happens domain sizes vary 
seen actual views selected materialize vary basic techniques change accommodate general situation 
domain size data data cube distributed randomly simple way estimate sizes views 
combinatorics involved complex intuition convincing 
suppose cells top element lattice appear raw data 
group attributes number cells resulting cube approximation cell contain data point cells nonempty 
size view hand cells data point 
may collapse data points cell aggregate value space cost view approximately view size function number grouped attributes shown fig 

log size view number group attributes size views grows number grouped attributes size views grows exponentially reaches size raw data ceases grow 
notice actual data taken fig 
matches pattern 
top view views grouping attributes maximum size view ps part supplier somewhat fewer rows due fact benchmark explicitly sets fewer rows 
space optimal solution natural question ask investigating time space tradeoff hypercube average time query space minimal 
space minimized materialize top view 
query takes time total time cost queries time optimal solution extreme minimize time materializing query 
time execute query equal size total space needed store data cube equal time taken execute query 
model views size queries group log attributes maximum size may executed top view 
define rank query view number attributes grouped 
queries organize ranks suggested fig 

parameters problem relationship determines time space case 
ranks hypercube lattice 
rank cliff fig 
occurs 
log 
rank gamma delta maximized 
quantity sum sizes queries rank provided growing portion curve fig 

hard show maximum gamma nr 
bulk space time queries rank approximately approximation queries space nr total space time hand time space consumed executing queries flat part curve fig 

materialized queries ranks total space negligible execute queries top view 
space little recall materialize views ranks gamma 
consider time requirements 
possible neglect small queries rank queries rank requires time estimate total number queries 
subcases 


half views take space time time approximately case time space approximately space optimal solution 


space time concentrated rank relatively views 
total time approximated gamma delta total time rank decreases grows approximate sum term gamma delta summarizes time space tradeoff points studied 
extension varying domain sizes suppose domains attribute equally values 
simplest model assume dimension values equally number values varies values ith dimension strategy space time space optimal time optimal gamma delta summary time space optimal strategies hypercube cliff suggested fig 
occur particular rank cliff distributed ranks 
view groups set attributes domain sizes multiply total number rows raw data view behaves cliff rank product domain sizes grouping attributes view exceeds view top cliff 
fundamental behavior suggested fig 
unchanged 
drill grouping progressively attributes views stay fixed maximum size point size drops size views decreases exponentially 
analysis space optimal case change 
time optimal case need replace condition space various queries views product domain sizes grouped attributes 
likewise views product domain sizes grouped attributes exceeds 
investigated problem deciding set cells views data cube materialize order minimize query response times 
materialization views essential query optimization strategy decision support applications 
case right selection views materialize critical success strategy 
tpc benchmark database example database showing important materialize part data cube cube 
second contribution lattice framework models multidimensional analysis 
greedy algorithms lattice pick right views materialize subject various constraints 
greedy algorithm give performs small constant factor optimal solution constraints considered 
looked common case hypercube lattice investigated time space trade detail 
investigating topics 
ffl progressively realistic cost models 
models capture indexing clustering step direction 
ffl data cubes stored systems 
poor scalability systems due fact materialize entire data cube 
selection right cells materialize important 
ffl dynamic materialization 
views sense form memory hierarchy differing access times 
conventional memory hierarchies data usually assigned different memory stores cache main memory dynamically run time accesses 
interesting compare dynamic materialization static materialization scheme investigate 
bala iyer goel ibm santa teresa labs help experiments 
cs chaudhuri kyuseok shim 
including group query optimization 
proceedings twentieth international conference large databases vldb pages santiago chile 
ess arbor software multidimensional analysis converting corporate data strategic information 
white 
www com papers html goetz graefe 
query evaluation techniques large databases 
acm computing surveys vol 
june 
gray bosworth layman pirahesh data cube relational aggregation operator generalizing group cross tab sub totals 
microsoft technical report 
msr tr 
gupta harinarayan quass 
aggregate query processing data warehousing environments proceedings st international vldb conference pages 
haas naughton seshadri stokes 
sampling estimation number distinct values attribute proceedings st international vldb conference pages 
og neill graefe 
multi table joins bitmapped join indexes 
sigmod record pages september 
tpcd editor 
tpc benchmark tm decision support proposed revision 
transaction processing performance council san jose ca april 
rad alan 
support decision makers data warehouse 
datamation march 
stg stanford technology group designing data warehouse relational databases 
white 
tm tremblay 
discrete mathematical structures applications computer science 
mcgraw hill book new york 
john editor 
multidimensional databases 
application development strategies april 
yl yan larson 
eager aggregation lazy aggregation 
proceedings st international vldb conference pages 

