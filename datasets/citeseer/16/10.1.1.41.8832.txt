july challenges integrating biological data sources davidson overton buneman dept computer information science dept genetics university pennsylvania philadelphia pa email central cis upenn edu july national academy sciences report models biomedical research new perspective argue biological research reached point new generalizations higher order biological laws approached may obscured simple mass data 
authors go propose creation matrix biological knowledge called data information knowledge structured stored provide integrated view biology 
intervening years rate data generated exceeded expectations report fortunately data available online overcoming major hurdles creating 
despite substantial efforts creating unified databases genomic data see example ask sense ultimate goal creating unified database biological knowledge attainable 
see number serious obstacles ffl new experimental techniques developed new generalizations laws discovered radical changes structure schema database required 
coping evolution structure major challenge database knowledge base technology 
ffl scope database unclear 
possible example construct satisfactory database genomic data represents fraction biological data 
research supported part doe de fg er nsf bir prime aro daah arpa 
july complete developed relate non biological data sources 
ffl problem scale 
small databases associated individual research groups tied structure large integrated database 
administrative problems appear 
calls massive integration data huge scale volume complexity significant technical challenges remain smaller scale data integration problems arise frequently bioinformatics 
problem integration components met current database technology 
collection inter related data heterogeneous data sources connected internet 
data sources standard databases understood query interfaces relational databases extent object oriented databases 
data exchange interchange formats restricted navigational interfaces acedb entrez 
flat files structure parsed retrieve data asn exchange format data genbank flat files 
addition certain application programs blast fasta viewed kind data source query ideally merged traditional queries 
second increasing number users wish perform complex bulk queries distributed data 
users happy merely browse data sources finding related data haphazard manner 
users continue satisfied special purpose analysis packages guis want browsing capabilities advanced analysis data source interrogation capabilities require powerful query facilities 
furthermore users expectations fast data retrieved risen technological advances networking 
ultimately query interface supported high level defined language capable optimizing ad hoc queries provide answers timely manner 
third updates data strictly locally controlled 
doubtful resource maintainers relinquish local autonomy allow flexibility transactional capabilities systems implement global updates current mode operation informal update paths federation data sources 
various approaches integration appearing bioinformatics community single satisfactory strategy 
report examine technical challenges integration critique available tools resources compare cost advantages various methodologies 
analyzing basic steps strict complete integration transformation various schemas common data model matching semantically related schema objects schema integration transformation data federated database demand matching semantically equivalent data 
progress generic problems wider database community issues semantics steps dealt degree success domain experts biological community 
look solution space integration strategies defined axes tightness federation degree instantiation discuss various solutions fall plane examine cost advantages disadvantages 
examine technical challenges july adequately addressed approaches essential elements long term solution managing optimizations provide timely response dealing updates instance schema level 
steps integration objective integration data distributed number distinct heterogeneous databases accessible single interface 
having constructed interface system capable efficiently executing queries reacting changes underlying resources updates schema data 
cost integration components cost initially constructing interface cost maintaining 
section focuses component construction single database interface component discussed sections 
discussing integration simple example steps concrete 
yac sts yac alu pcr id str source left primed source right primed id str id str id str source schema schema pos sts hit pos yac hit pos hit pos yac hit schemas yac sts yac alu pcr databases example shows schemas databases representing yac sts yac alu pcr physical mapping data 
schema classes yac alu pcr 
graphical notation inspired 
july yac class attributes id representing unique id yac pos set valued attribute indicated star node edge denoting positive hybridization probe 
alu pcr class attributes representing unique id set positive pos yac hit particular yac served source generating probe 
second schema classes time yac sts 
yac class attributes representing unique id positive experimental hits stss analog yac alu pcr relationship 
sts class attributes representing unique id positive left right ends yac insert junction obtain sequence pcr primer selection 
left right arbitrary designations 
suppose want combine databases single database containing information sts results 
suitable schema shown plus node indicates variant 
variant types common programming languages discriminated unions express possibility data item may take number mutually exclusive forms 
occur frequently examples properly represented database management systems object oriented systems 
example yac classes source databases mapped single class yac target database 
pos hit pos sts hit attributes yac classes mapped single attribute pos probe hit takes value alu pcr sts depending type experiment 
difficult mapping involves simplifying representations alu pcr sts probe source 
having different relationships types probes new relationship source introduced maps probe yac source 
sufficient specify source alu pcr probe sts probes new string attribute primer set added indicates yac insert junction develop sts 
note general representation original sts source information 
resolve difference representation straightforward embedding data sufficient need sophisticated structural transformations data 
example general task database integration seen consist conceptual tasks ffl data model transformation ffl semantic schema matching ffl schema integration ffl data transformation ffl semantic data matching expand mean 
july yac sts alu pcr id str pos probe hit primer set str id str source source id str pos yac hit pos yac hit integrated schema yac sts yac alu pcr results 
data model transformation 
bearing mind extracting portions underlying databases integration step integration represent underlying schemas common model 
obviously transformation preserve relevant information 
furthermore sufficiently simple expressive allow data represented multiple ways conflicts alternative representations resolved 
common data model expressive individual data models 
course possible represent data structure relational data model sufficiently elaborate encoding 
expressive mean data model transformation natural obvious 
example want modify schema yac sts experiment result shown prior integrating yac alu pcr database common model able support representations 
various models common data model ranging relational extended entity relationship models semantic functional object oriented models 
various requirements model transforming heterogeneous databases examined authors conclude model supporting complex data structures sets records variants object identity specialization generalization relations object classes desirable 
large transformation models purely syntactic process interesting questions information loss equivalence representation 
semantic schema matching schemas merged correspondences concepts semantic overlap established participating data sources 
typically done resolving names schemas homonyms synonyms creating specializations generalizations concepts show similarities terms 
july yac sts id str pos sts hit primer set str sts source id str pos yac hit modified schema yac sts experiment results example yac probe source example determined natural correspondence yac sts yac alu pcr experiments different approach integration proposed determine alu pcr sts experiments specializations superclass yac probe experiments 
semantic matching schema level remains problem data source integration 
unfortunately proven technologies automate process currently demands labor intensive effort part domain experts 
process facilitated improving level annotation participating databases establishing standardized thesauri biological concepts see working group reports 
done correctly steps may create foundation automated methods semantic matching 
schema integration having determined similarities concepts underlying schemas common global schema created underlying schemas 
may simple union underlying schemas may require modifications representation underlying schemas integrated schema 
concepts overlap semantically frequently represented different ways different schemas specifics concept representation typically depend application requirements 
correspondences established schemas may necessary resolve conflicts representation underlying schemas 
returning yac probe source example necessary perform structural modification database yac stss replace sts primer source attributes single source attribute sts source string valued attribute primer set previously described 
yields intermediate database schema shown 
second way integrated database may radically different ways underlying databases designed may necessary add modify delete concepts 
example may necessary add explicit linking tables concepts different schemas related level 
july continuing yac probe source example integration fairly simple merely associate classes attributes source databases integrated database yac classes id attributes alu pcr sts attributes associated 
data transformation structurally transforming schemas important keep mind changes eventually reflected terms data underlying databases 
follow directly structural schema modifications general possible interpretations schema modification 
example data model supporting classes objects optional attributes classes suppose changed attribute existing class optional required 
number ways schema modification reflected underlying data insert default value attribute omitted simply delete objects class attribute missing 
important meaning schema modification represented explicitly data transformation 
see details database transformations 
semantic data matching semantic matching data level difficult semantic schema matching having formal methodological support requiring domain knowledge 
semantic data matching relationships data items equivalent data sources attributes explicit 
finding protein sequence entries pir loci gdb correspond nucleic acid sequence entries genbank prime examples semantic data matching 
semantic schema matching creation links semantically related data items greatly aided comprehensive thesaurus terms accompanying highly structured data sources 
formation links data sources data level requires deep domain knowledge heuristic techniques guess links 
surprisingly considerable progress area evidenced abstracts year meeting 
attribute rapid pace creating linking tables biological data sources pragmatic approaches taken bioinformatics systems developers attacking integration fundamental level day day questions biologists pose answered linking tables available regardless completeness rest integration process 
dimensions integration number examples integrated databases biological community emerged past years 
solutions roughly classified points plane defined axes 
loosely tightly federated 
instantiation virtual view 
july degree federation 
axis deals primarily tasks db integration performed detail 
tightly federated database schemas transformed common model semantic schema matching schema integration performed possible 
data transformations semantic data matching performed 
loosely federated database common data model integrated schema may union underlying schemas 
furthermore common language querying federation user may aware data coming naming conflicts resolved 
advantages tight federation user point view numerous basically addressing user application developer desiderata single data representation schema uniting relevant data sources enormously reduces task navigating semantic tar pits multiple databases system presents single uniform query language software developer user simple views graphical interfaces easily built 
disadvantages costly build requiring steps integration costly semantic schema data matching steps costly maintain 
time schema evolves happens quite rapidly context biological databases integration modified 
disadvantage inflexible 
mentioned earlier representation concepts database depends intended usage 
providing different views may involve writing different transformations underlying data sources 
instantiated versus view 
second axis deals exists physical copy integrated database integration describes translate queries view queries underlying data sources 
advantages instantiated implementation system performance general better possible distributed environment 
query optimization performed locally assuming system second inter data source communication time eliminated 
system reliability significantly higher fewer dependencies network connectivity individual data sources assuming integrated system reliable 
costly implement inter database constraints determined integration 
disadvantages instantiated implementation just initial cost cost maintenance 
time update underlying databases reflected integrated instance 
may involve complex query resulting update just simple update integrated schema complex 
related problem optimizing queries views involving joins materialized view cost effective discussed detail section 
discussing particular approaches taken important distinguish examples solutions methodology 
example implemented particular methodology tightly integrated instantiated may possible methodology implement loosely integrated view july solution 
flexible methodology solution space useful admit greater range solutions 
typically case methodology admits tightly integrated solution implement loosely integrated solution admits view implementation implement instantiated implementation vice versa 
methodology tightly integrated views extremely flexible 
research database community develop methodologies performing integration tasks 
example methodology implementing view integrations suggests limited family schema transformations integrating schemas 
underlying model functional query language 
solution range fairly loose tight integration view implementation 
furthermore discussion step integration translation model functional model immediately applicable functional databases support 
federated architecture suggested methodology yields loosely federated system view implementation relational systems 
focus gain access permissions data distributed system extend sql language facilitate expressions multiple sources common names 
exist variety methodologies address schema transformation integration aspects integration 
techniques address primarily implementing schema transformations 
discussion transformations er model relational model 
turning examples integration biological databases cost integration influenced autonomous cooperative integration effort 
database researchers generally assume individual data sources federation developing autonomously cooperative development individual data sources agree structure overlapping schema fragments common thesaurus unique identifiers linked sources substantially reduce barriers integration heterogeneous data models chosen 
developers agree common data model cost integration fully absorbed implementation maintenance cost individual data sources 
issue autonomous versus cooperative strategies addresses sociological technical barrier provides important mechanism practical data source coordination integration substantially affect cost integration 
sample solutions cost tight materialized autonomous integration integrated genome database igd developed ritter represents demanding approach integration example tightly federated fully materialized database individual july resources fully autonomous respect integration 
igd uses acedb schema front 
underlying database acedb management system understand sybase 
igd favorably received 
provides common schema underlying databases popular graphical user interface acedb acedb query facility 
updates acedb databases text files transaction management systems expected full blown dbmss daily bulk updates efficient little constraint checking enforced 
integration physically resides site queried remote database accesses provide rapid access data 
imagine scenario queries virtual igd schema translated queries underlying data sources igd constructed 
issues concerning long term viability igd form arise 
igd may pushing acedb past design limits respect database size performance 
anecdotal evidence suggests acedb databases approaching gb unreliable require subverting generality system name space implemented 
second pressing issue cost system maintenance 
clear tools built igd project cope schema data evolution 
point time molecular biology databases modest size bulk reloads database feasible 
true incremental uploads unavoidable 
point issues schema evolution data level maintenance linking table maintenance paramount 
issues means restricted igd sure igd plans address problems 
tight view cooperative integration gdb proposed cooperative federation homogeneous dbms environment sybase 
know details collaboration assume effort coordinate schema design linking tables maintained relating data instances cooperation updates primary updates performed locally site dependencies sites immediately updated 
advantages controlled environment obvious shared schemas homogeneous industrial strength dbms capable distributed queries common name spaces identifiers cooperatively developed linking tables local distributed updates 
solution perfectly reasonable small scale cooperative effort address larger problem data source integration 
clear far top approach scale 
imagine trying integrate data sources available igd cooperative approach 
loose partial views autonomous integration cpl kleisli system supports ad hoc queries heterogeneous distributed databases 
system easily inserted july points space integration possibilities 
date integrate autonomous read resources trans database user views mediators 
mode cpl kleisli offers advantages uniform interface heterogeneous systems inexpensive construction relatively inexpensive maintenance complex queries multiple database uniform treatment heterogeneous resources analysis algorithms blast optimization distributed queries including parallelism lazy evaluation rich type system necessary integrating heterogeneous resources modularization data drivers access distributed resources 
significant practical drawback mediator style integration 
experiments cpl system shown existing network system fragile slow permit adequate response times reasonable distributed queries 
course depends strongly particular resource accessed bulk queries entrez server intolerable relational database systems fast robust parallelized significant performance improvements 
furthermore updates individual underlying systems executed cpl system updates global level currently supported 
links views autonomous integration examples link driven federations exist 
srs genera system developed letovsky www server bairoch genome net 
interface basically allows set data sources browsed casual user users execute single data source retrievals hop data source web links 
proven initial boon biologists scale provide machine access underlying data sources 
clear point navigate style access really constitutes interface functionality extremely limited 
interface extremely inefficient support bulk queries 
new technical challenges new technical challenges need addressed 
lie central concern querying federation lie unexplored concern updating federation 
new technical challenges querying 
fundamental challenge querying develop appropriate data model federation 
current environment scientific databases data types complex example asn arbitrarily embedded records sets lists variants 
formats include arrays 
possible map simpler type system say relational simpler representation loses intuition semantics original representation example mapping list strings relation lose positional information 
represent set pairs representing string position list representation july intuitive translation list operations unnatural 
current commercial products research prototypes extremely simple type systems mainly relational databases appropriate 
technical challenge add value existing query interfaces 
biological data sources sophisticated access techniques implement projections selections data asn acedb 
example entrez queries allow selection complex value asn source allow pruning field selection value 
pruning done asn value retrieved federation server expensive terms communication costs prune level asn driver interface translates asn values values model federation 
placing software asn server significantly reduce amount data transmitted network 
crucial success system deals large amounts data probably difficult challenge querying ability perform optimizations 
example relational model took number years hit commercial market gain widespread acceptance performance initial problem 
optimization techniques model subsequently developed include algebraic rewrite rules push restrictive operators selections projections close base relations translation selections followed cartesian product join various data placement strategies clustering development indexing trees hash structures optimization selections indices appropriate various optimizations joins blocked nested loop join hashed loop joins 
optimizations fall outside semantics model existence algebraic rewrite rule simplifies process enormously commutativity various positive operators cartesian product union assured 
optimizations important distributed environment due latency unreliability communication varied capabilities data servers admit possibilities 
examples types optimizations possible environment follow 
ability rewrite rules high level query language adopted federation dramatically improve performance operations pushed source databases possible 
example federation language sql relations relational data source significantly efficient execute join theta completely data source retrieve retrieve compute join federation server 
cpl query system developed group query retrieves known dna sequences chromosome 
define loci locus symbol genbank ref july locus symbol nx locus id na gamma gdb tab locus genbank ref ny object id object class key gamma gdb tab object genbank loc num locus location id gamma gdb tab locus location written query accesses locus table gdb call gdb tab locus 
tuple table pulls entries object genbank ref object id field matches locus id field locus tuple indicated gdb tab object genbank ref reuse variable 
pulls entries locus location locus location id field matches locus id field locus tuple 
rewrite rules cpl inefficient query accesses gdb multiple times automatically converted single complex access gdb define gdb open sybase server gdb user password bogus define loci gdb query select locus symbol genbank ref locus object genbank ref locus location locus locus id locus location id locus locus id object genbank object id object class key loc num 
ability implement various join strategies federation server joins distributed pushed single data server 
quite bit research semi join strategies non heterogeneous distributed database community 
problem interesting capabilities data servers taken consideration 
example computing theta different data sources small tuples big indexing capabilities cost effective send join value server containing communication costs reduced 
server containing didn indexing capabilities relation retrieved 

ability exploit parallelism data servers 
theta example sending join values server containing sequentially exploit fact data servers handle requests simultaneously send join values parallel 

ability exploit redundancy federation 
frequently data source containing information 
example igd contains complete july replications important databases 
query accesses data databases useful able fire queries parallel igd original data source take whichever responds 
possible poll servers determine load network conditions send query whichever server available 
additionally capabilities servers taken account server greatest capability answering query chosen 
example asn server provide faster response query sybase server projection important query prefer sybase server 
new technical challenges data level updates centralized homogeneous distributed databases updates traditionally handled enclosing transactions 
transactions give number guarantees named acid properties atomicity transaction executed entirety consistency transactions preserve database consistency transform initially consistent database state consistent database state isolation transactions isolated updates uncommitted transaction observed transaction durability effects transaction persist despite system crashes 
due dramatic variation update capabilities underlying data servers notably ability enter commit state impossible enforce strong notion correctness updates view federation 
example sybase servers relatively strict implementation transactions acedb servers require single user sequential modifications database file 
state number integrity constraints hold federation 
example integrity constraint state replicated derived data contradictory updates replicated data current window time 
integrity constraints state information duplicated referential integrity holds genbank ref gdb occur genbank entry 
need formulate requirements updating federations molecular biology databases develop adapt approaches specifying enforcing constraints 
advances area database community need extended environment 
updating instantiated integrated database poses problems underlying data sources updated view instantiation updated 
recomputing view time update occurs minimize amount necessary view current update part depends update 
done view maintenance problem database community updating integrated repository significantly complicated underlying data sources presumably understand view management know relevant view definitions propagate updates occur 
integrated source may perform distributed computations compute correct update due lack transaction management global level may possible get temporally consistent data integrated source may compute incorrect view see details 
july need formulate requirements develop techniques correctly update instantiated integrated databases 
new technical challenges structural updates known schemas databases domain molecular biology evolve extremely rapidly response changing experimental techniques requirements times year 
poses number problems maintaining view definitions existing applications difficult determine schema transformations structural updates affect frequently complex definitions 
useful able capture schema transformations high level declarative language easily modified 
furthermore capturing integrity constraints common paradigm potentially gives mechanism checking correctness information preservation transformations 
goals accomplished 
exist linking tables relating objects different databases step semantic integration 
exist physical integrations important overlapping biological databases 
exist tools querying transforming data heterogeneous data sources currently centers 
ongoing resolving data conflicts 
remain technical organizational challenges alluded report 
strategies helping semantic schema matching 
general strategies resolving data conflicts 
data types included common data model 
natural operations types 
useful optimizations queries language type 
useful source network specific optimizations distributed queries heterogeneous data sources 
updates modeled distributed implemented 
abiteboul hull ifo formal semantic database model 
acm transactions database systems december 
abiteboul hull restructuring hierarchical database objects 
theoretical computer science 
banerjee kim kim korth semantics implementation schema evolution object oriented databases 
sigmod record 
july batini lenzerini methodology data schema integration entity relationship model 
ieee transactions software engineering se november 
breitbart garcia molina silberschatz overview multidatabase transaction management 
vldb journal october 
buneman davidson hart overton wong data transformation system biological data sources 
proceedings st vldb september 
technical report ms cis dept computer information science university pennsylvania 
march 
buneman davidson theoretical aspects schema merging 
lncs advances database technology edbt springer verlag pp 

ceri distributed databases principles systems 
mcgraw hill 
committee models biomedical research 
models biomedical research new perspective 
national academy press washington 
davidson hara morphing sparsely populated data july 
available url www cis upenn edu html 
dayal hwang view definition generalisation database integration system heterogeneous distributed databases 
ieee transactions software engineering se november 
argos srs indexing retrieval tool flat file data libraries 
computer applications biosciences 
grefen widom integrity checking federated databases 
tech 
rep department computer science stanford university 
heimbigner mcleod federated architecture information management 
acm transactions office information systems july 
hull relative information capacity simple relational database schemata 
siam journal computing august 
kim new way compute product join relations 
proceedings acm sigmod international conference management data pp 

davidson buneman semantics database transformations 
tech 
rep department computer information science university philadelphia pa july 
litwin mark roussopoulos interoperability multiple autonomous databases 
acm computing surveys september 
july markowitz shoshani representing extended entity relationship structures relational databases modular approach 
acm transactions database systems september 
meeting interconnection molecular biology databases 
participants july 
miller ioannidis ramakrishnan schema equivalence heterogeneous systems bridging theory practice 
information systems 
motro virtual integration multiple databases 
ieee transactions software engineering se july 
nakayama kitsuregawa takagi hash partitioned join method dynamic strategy 
proceedings conference large databases pp 

navathe elmasri larson integrating user views database design 
ieee computer january 
ritter wolf prototype implementation integrated genomic database 
computers biomedical research 
rusinkiewicz sheth specifying dependencies multidatabase environment 
ieee computer december 
castellanos garcia suitability data models canonical models federated databases 
sigmod record december 
binary relationship integration methodology 
data knowledge engineering 
ullman principles database knowledgebase systems computer science press rockville md 
wiederhold qian modeling asynchrony distributed databases 
proc 
international conference data engineering 
zhuge garcia molina hammer widom 
view maintenance warehousing environment 
proceedings acm sigmod conference june pp 

