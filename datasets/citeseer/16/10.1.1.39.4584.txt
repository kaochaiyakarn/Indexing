scalable trigger processing eric hanson chris lan huang mohan lloyd parthasarathy park albert vernon cse cise department university florida gainesville fl hanson cise ufl edu www cise ufl edu hanson current database trigger systems extremely limited scalability 
proposes way develop truly scalable trigger system 
scalability large numbers triggers achieved trigger cache main memory effectively memory conserving selection predicate index unique expression formats called expression signatures 
key observation large number triggers created structure appearance different constant values 
trigger created tuples added special relations created expression signatures hold trigger constants 
tables augmented database index main memory index structure serve predicate index 
design uses number types concurrency achieve scalability including token tuple level condition level rule action level concurrency 

trigger features commercial database products quite popular application developers allow integrity constraint checking alerting operations performed uniformly applications 
unfortunately effective triggers hampered fact current trigger systems commercial database products scale 
numerous database products allow trigger type update event insert delete update table 
advanced commercial trigger systems effective limits triggers table 
application designers effectively large numbers triggers thousands millions single database feasible 
advent research supported defense advanced research projects agency ncr teradata informix 
internet world wide web important possible support large numbers triggers 
web interface allow users interactively create triggers internet 
type architecture lead large numbers triggers created single database 
presents strategies developing highly scalable trigger system 
concepts introduced implemented system developing called triggerman consists extension module object relational dbms informix universal data option simply called informix info plus additional programs described 
approach propose implementing scalable trigger system uses asynchronous trigger processing sophisticated predicate index 
give response time updates allowing processing large numbers potentially expensive triggers 
scalability concepts outlined trigger system inside dbms server 
key concept exploited develop scalable trigger system large number triggers created certainly case format 
triggers may identical structure constant substituted example 
observation trigger system identify unique expression signatures group predicates taken trigger conditions equivalence classes signatures 
number distinct expression signatures fairly small small main memory data structures created 
follows discuss triggerman command language architecture turn discussion large numbers triggers handled effectively expression signature equivalence classes novel selection predicate indexing technique 

triggerman command language commands triggerman keyword delimited sql syntax 
triggerman supports notion connection local informix database remote database generic data source program 
connection description database contains information host name database resides type database system running informix oracle sybase db name database server user id password 
single connection designated default connection 
multiple data sources defined single connection 
data sources normally correspond tables essential 
triggers defined command create trigger fromlist condition group having action triggers added specific trigger set 
belong default trigger set 
clauses normally specify trigger condition 
optionally group having clauses similar available sql date specify trigger conditions involving aggregates temporal functions 
multiple data sources referenced clause 
allows multiple table triggers defined 
example rule emp table database connection defined 
rule sets salary fred salary bob create trigger emp update emp salary emp name bob update emp set salary new emp salary emp name fred rule illustrates triggerman command allows sql statements run database 
new notation rule action clause allows new updated data values new emp salary value case 
similarly old allows access data values current just update 
values matching trigger condition substituted trigger action macro substitution 
substitution trigger action evaluated 
procedure binds rule condition rule action 
example sophisticated rule condition involves joins follows 
consider schema part real estate database imported triggerman define data source commands house address price salesperson name phone represents neighborhood name location rule schema new house added neighborhood salesperson iris represents notify create trigger insert house salesperson house represents name iris raise event address command refers tables 
raise event command rule action special command allows rule actions communicate outside world hans 

system architecture triggerman architecture components 
triggerman lives inside informix 
data sources normally correspond local remote tables 
commonly data source local table 
case standard informix triggers created automatically triggerman capture updates table 
trigger table update event available informix capture updates transmit triggerman inserting data source app 
data source app data source trigger host dbms informix universal data option update queue table update queue shared memory 
triggerman driver triggerman triggerman console triggerman client app 
triggerman client app 
architecture triggerman trigger processor 
update descriptor table 
remote data sources data source applications transmit update descriptors triggerman data source api defined 

triggerman client applications create triggers drop triggers register events receive event notifications triggers fire 
instances triggerman driver program periodically invokes special function triggerman allowing trigger condition testing action execution performed 
triggerman console special application program lets user directly interact system create triggers drop triggers start system shut general architecture triggerman system illustrated 
libraries come triggerman allow writing client applications data source programs 
libraries define triggerman client application programming interface api triggerman data source api 
console program application programs client api functions connect triggerman issue commands register events forth 
data source programs written data source api 
updates received update capture triggers data source programs consumed call 
shows data source programs triggers place update descriptors table acting queue 
works current implementation 
plan allow updates delivered main memory queue 
deliver updates faster safety persistent update queuing lost 
trigger processing current system asynchronous 
simple informix triggers capture updates triggerman process triggers synchronously 
plan add feature implementation 
triggerman object relational data model 
current implementation supports char varchar integer float data types 
support userdefined types added 
trigger condition testing algorithm triggerman uses discrimination network called treat network hans variation treat network mira trigger condition testing 
plan implement optimized type discrimination network called network triggerman hans 
focuses primarily efficient scalable selection condition testing rule action execution 
results applicable treat rete forg networks trigger condition testing 
results adapted trigger systems 

general trigger condition structure trigger conditions general structure 
clause refers data sources 
clause may contain event condition datasource emp event insert emp sal constant 
example expression signature syntax tree 
data sources referred list 
clause trigger boolean valued expression 
combination tuples data sources list clause evaluates true false 
canonical representation clause formed way 
translate conjunctive normal form cnf ors notation 

conjunct refers zero possibly data sources 
group conjuncts set data sources refer 
group conjuncts refers data source logical conjuncts selection predicate 
refers data sources conjuncts join predicate 
refers zero conjuncts trivial predicate 
refers data sources call hyper join predicate 
predicates may may contain constants 
general premise large numbers triggers created predicates different triggers contain distinct constant values 
examine handle selection join predicates contain constants scalability large numbers triggers achieved 

scalable predicate indexing expression signatures follows treat event condition separately condition convenience 
event conditions clause conditions logically selection conditions hans applied update descriptors submitted system 
tuple variable symbol defined clause trigger corresponds usage particular data source trigger 
general form selection predicate 


kn clauses cij appearing predicate refer tuple variable 
furthermore clause atomic expression contain boolean operators possibly operator 
single clause may contain constants 
convenience assume data source data source id data source corresponds single table remote local database single stream tuples sent messages application program 
expression signature general selection join predicate expression triple consisting data source id operation code insert delete update generalized expression 
tuple variable appearing clause trigger event specified clause event implicitly insert update tuple variable 
format generalized expression 


clause ij cij constants cij substituted placeholder symbols 
entire expression constants numbered left right 
constant number appears clause cij original expression substituted placeholder constant ij expression signature 
practical matter selection predicates contain single clause 
consider example trigger condition insert emp emp salary implementation generalized expression expression signature syntax tree placeholders leaf nodes representing location constant appear 
example signature trigger condition just represented shown 
condition insert emp emp salary different constant earlier condition signature 
general expression signature defines equivalence class instantiations expression different constant values 
expression equivalence class defined expression signature say expression matches expression signature 
expression signatures represent logical structure schema part trigger condition 
assert real application trigger system triggerman large numbers triggers defined relatively small number unique expression signatures observed data source predicate indexes predicate index root 
observation feasible keep set data structures main memory represent distinct expression signatures appearing triggers 
triggers may signature contain different constants tables created store constants information linking expression signature 
tables small low overhead main memory lists indexes cache information 
large stored standard tables index appropriate queried needed sql query processor perform trigger condition testing 
elaborate implementation issues 

processing trigger definition create trigger statement processed number steps performed update trigger system catalogs main memory data structures prime trigger ready run 
primary tables form trigger catalogs trigger set name comments creation date trigger name comments trigger text creation date purpose field indicate trigger trigger set currently enabled eligible fire matched update 
fields self explanatory 
data structure called trigger cache maintained main memory 
contains complete descriptions set accessed triggers including trigger id name expression signature list 
predicate index structure 
data sources relevant trigger syntax tree network skeleton trigger 
current main memory sizes thousands trigger descriptions loaded trigger cache simultaneously 
trigger description takes bytes realistic number mbytes allocated trigger cache trigger descriptions loaded simultaneously 
main memory data structure called predicate index maintained 
diagram predicate index shown 
predicate index take update descriptor identify predicates match 
expression signatures may contain conjunct 
predicate conjunct single conjunct identified selective 
indexed directly 
token matches conjunct remaining conjuncts predicate located tested token 
remaining clauses match token completely matched predicate clause 
see hans details technique 
root predicate index linked set data source predicate indexes hash table data source id data source predicate index contains expression signature list entry unique expression signature triggers predicate data source 
expression signature contains constant placeholders constant table 
ordinary database table containing row expression occurring trigger matches expression signature 
triggers created new expression signatures detected added table trigger system catalogs expression signature field unique id signature 
field identifies data source signature defined 
field text field description signature 
define fields 
expression signature encountered trigger creation time broken parts indexable part non indexable part ni follows ni non indexable portion may null 
format constant table expression signature containing distinct constants indexable portion const const identification number expression signature 
fields const meaning 
unique id selection predicate 
unique id number trigger containing 
identifies treat network node trigger pass token matches alpha node node 
const constants indexable portion 
description non indexable part value null entire predicate indexable 
table large signature indexable part predicate form attribute constant table clustered index const composite key 
predicate different type signature operator may possible index constant fields 
propose develop ways index non equality operators constants types user defined 
putting clustered index constant attributes allow triggers relevant new update descriptor matching particular set constant values retrieved quickly doing random notice const third normal form 
done purposely eliminate need perform joins querying information represented table 
referring back definition expression signature table define remaining attributes 
string giving name constant table expression signature 
number distinct constants appearing expressions signature 
describes set constants organized main memory disk structure allow efficient trigger condition testing 
issue constant set organization covered fully 
disk memory data structures just described steps process create trigger statement 
parse trigger validate check legal statement 

convert clause conjunctive normal form group conjuncts distinct sets tuple variables refer described section 
analysis previous step form trigger condition graph 
undirected graph node tuple variable edge join predicate identified 
nodes contain selection predicate node represented cnf expression 
edges contain cnf expression join condition associated edge 
groups conjuncts refer zero tuple variables tuple variables attached special catch list associated query graph 
handled special cases 
fortunately rarely occur 
ignore simplify discussion 

build treat network rule 

selection predicate alpha node network check see signature seen comparing signature signatures expression signature list data source predicate defined see 
predicate signature seen add signature predicate list update signature catalog table 
signature constant placeholder create constant table expression signature 
predicate constants add row constant table expression signature predicate 

alternative organization strategies expression equivalence classes particular expression signature contains constant placeholder may expressions equivalence class belong different triggers 
number small large 
get optimal performance wide range sizes equivalence classes expressions particular expression signature alternative indexing strategies needed 
main memory data structures low overhead needed size equivalence class small 
disk structures including indexed non indexed tables needed size equivalence class large 
ways considered organize predicates expression signature equivalence class 
main memory list 
main memory index 
non indexed database table 
indexed database table strategies implemented feasible process large numbers triggers containing predicate expressions signature data source predicate indexes constant set set unique constants predicate index root different constants mandatory scalable trigger system 
strategies required order common case triggers fast 
cost model illustrates tradeoffs hans :10.1.1.39.4584
strategies implemented triggerman strategies construction 

common sub expression elimination selection predicates important performance enhancement reduce total time needed determine selection predicates match token common sub expression elimination 
achieved normalizing predicate index structure 
shows expanded view predicate index 
constant set expression signature contains element constant tuple constants const occurring selection predicate matches signature 
constant linked set set id numbers triggers containing particular selection predicate 
example rules form create trigger expression signature list expression signature constant constant set signature contain entry set contain id numbers 
implement constant sets sets fully normalized form shown sets stored main memory lists indexes organizations 
normalized main memory data structure built data retrieved constant table expression signature 
set set ids different triggers having set constants 
expanded view normalized predicate index structure 

processing update descriptors predicate index recall update descriptor token consists data source id operation code old tuple new tuple old new tuple pair 
new token arrives system passes root predicate index locates data source predicate index 
expression signature data source predicate index specific type predicate testing data structure inmemory list memory lightweight index non indexed database table indexed database table expression signature 
predicate testing data structure expression signatures searched find matches current token 
matching constant set constant contains elements 
elements contains zero additional selection predicate clauses 
element set currently visited additional predicate clause tested token 
token matched complete selection predicate expression belongs trigger trigger pinned trigger cache 
pin operation analogous pin operation traditional buffer pool checks see trigger memory brings disk trigger catalog 
pin operation ensures treat network syntax tree trigger mainmemory 
trigger pinned ensuring treat network main memory token passed node network identified field expression just matched token 
processing join temporal conditions performed 
trigger condition satisfied trigger action executed 

concurrent token processing action execution important way get better scalability concurrent processing 
smp platform concurrent tasks execute parallel 
single processor concurrency give better throughput response time making scarce cpu resources available multiple tasks eligible task 
number different kinds concurrency trigger system exploit improved scalability 
token level concurrency multiple tokens processed parallel selection predicate index join condition testing network 
constant set set unique constants top part predicate index expression signature list 
condition level concurrency multiple selection conditions tested single token concurrently 

rule action concurrency multiple rule actions fired processed time 

data level concurrency set data values alpha beta memory node treat network hans processed query run parallel 
ideal scalability trigger system able capitalize types concurrency 
current implementation supports token level concurrency 
plan support types concurrency versions system 
version task queue kept shared memory store incoming internally generated 
explicit task queue maintained possible spawn native operating system threads processes carry tasks due process architecture informix info 
concurrent processing architecture illustrated driver processes 
define num cpus number real cpus system level fraction cpus devote concurrent processing triggerman range 
triggerman administrator set concurrency level parameter 
default value 
defined follows num cpus concurrency level driver process call triggerman function time units 
driver call back immediately execution left 
propose default value equal milliseconds determining best value left 
set set ids different triggers having constant appearing particular signature 
illustration partitioned constant sets sets facilitate concurrent processing 
total execution time invocation threshold left task queue get task task queue execute 
yield processor informix tasks call informix mi yield routine info 
task queue empty return task queue empty return tasks remaining driver program wait time units call returns task queue empty 
driver program immediately call 
default value threshold milliseconds keep task switch overhead driver programs informix processes reasonably low avoid long user defined routine execution 
long execution inside triggerman avoided result higher probability faults deadlock running memory 
keeping execution time inside triggerman reasonably short avoids problem excessive lost rollback occurs trigger processing 
tasks 
process token see rules matches 
run rule action 
process token set conditions 
process token run set rule actions triggered token task types self explanatory 
tasks type generated conditions potential actions structures containing rest condition predicate index partitioned advance multiple predicates processed parallel 
example may beneficial partition predicates advance rules condition different actions 
example suppose rules form create trigger ibm raise event notify user user large number speedup obtained partitioning set triggers sets equal size 
result predicate index substructure illustrated 
set contain triggers 
partitioned round robin subsets approximately equal size 
multiple subsets processed parallel achieve speedup 

trigger application design trigger system proposed designed highly scalable 
just programmers create large number triggers mean best approach 
triggers extremely regular structure may best create single trigger table data referenced trigger clause customize trigger behavior 
discussed detail longer version hans :10.1.1.39.4584

related large body active database systems little focussed predicate indexing scalability 
representative works include ariel postgres rule system starburst rule system rdl chimera rpl dips ode hans ston 
active database systems follow event condition action eca model proposed straightforward way testing condition applicable trigger update event occurs 
cost linear number triggers associated relevant event predicate indexing normally 
cost trigger high checking condition involve running expensive query 
hanson johnson focuses indexing range predicates interval skip list data structure hans approach scale large numbers rules may large amount main memory 
rete forg treat mira algorithms efficient implementation ai production systems related implicit assumption ai rule system architectures number rules small fit main memory 
additional done ai community parallel processing production rule systems fully address issue scaling large numbers rules 
issues related high performance parallel rule processing production systems surveyed gupta 
cite types parallelism exploited including node action data parallelism 
overlap types concurrency outlined section 
hellerstein performing selections joins query processing hell related issue performing expensive selections joins networks treat networks 
proper placement selection predicates networks improve trigger system performance scalability 
developers postgres proposed predicate indexing scheme data index records tagged physical markers indicate rule apply ston ston 
predicates solved index result placement table level marker 
scheme advantage system determine rules apply primarily detecting markers tables data records index records 
query update processing algorithms extended minor ways accomplish 
disadvantage scheme complicates implementation storage index structures 
new records inserted existing records updated large number table level markers may disturbed 
predicate corresponding disturbed markers tested records may quite time consuming ston ston 
phenomenon occur simple predicates form attribute constant index attribute 
research rpl system delc delc addressed issue execution production rule style triggers relational dbms developers discrimination network structure 
approach runs database queries test rule conditions updates occur 
type approach limited scalability due potentially large number queries generated rules 
consistent processing constraints triggers sql relational databases helped lead enhancements sql standard 
focus trigger constraint semantics 
implicit assumption constraints triggers processed query approach scale large number triggers constraints 
speculate may possible assumption 
predicate index proposed potentially 
dips system sell uses set special relations called cond relations condition element tuple variable rule 
cond relations queried updated perform testing selection join conditions rules 
embedding selection predicate testing process query database tables particularly efficient compare favorably sort main memory predicate index 
main memory predicate index get best performance small medium number predicates common case 
dips capable utilizing parallelism database query processor test rule conditions feature common system described 
system addresses issue executing large expert systems working memory kept database bran related rule system scalability 
contribution system improved way represent information normally kept alpha memory nodes treat networks 
focussed large scale production systems oriented handling large numbers triggers operate conjunction databases database applications directly comparable 
summary sets apart prior research efforts database trigger systems database oriented expert systems tools focus scalability multiple dimensions 
include capacity accommodate large numbers triggers handle high rates data update efficiently fire large numbers triggers simultaneously 
achieve scalability careful selection predicate index design support types concurrency condition level rule action level data level 

describes architecture build truly scalable trigger system 
date writing architecture implemented informix console program driver program data source programs 
architecture significant advance currently available database products 
generalizes earlier research results predicate indexing improves limited scalability forg mira ston hans hans 
architecture implemented object relational dbms supports ability execute sql statements inside user defined routines sql callbacks 
variation architecture external application communicating database standard interface odbc 
topic research includes developing ways handle temporal trigger processing hans alfa scalable way large numbers triggers temporal conditions processed efficiently 
potential research topic involves ways support scalable trigger processing trigger conditions involving aggregates 
third potential research topic develop technique implementation main memory disk structures organize constant sets illustrated extensible effectively new operators data types 
results additional research outlined highly efficient scalable extensible trigger processing reality 
acharya tambe gupta implementation production systems message passing computers ieee transactions knowledge data engineering july 
alfa temporal trigger processing triggerman active dbms ph dissertation univ florida august 
bran brant david daniel miranker index support rule activation proceedings acm sigmod conference may pp 

cochrane hamid pirahesh nelson integrating triggers declarative constraints sql database systems proceedings nd vldb conference pp 
bombay india 
date date hugh darwen guide sql standard rd edition addison wesley 
delc delcambre lois james relational production language production language relational databases proceedings second international conference expert database systems pp 
april 
delc delcambre lois james self controlling interpreter relational production language proceedings acm sigmod conference management data pp 
june 
forg forgy rete fast algorithm pattern object pattern match problem artificial intelligence vol 
pp 

geiger kyle inside odbc microsoft press 
gupta anoop charles forgy allen newell high speed implementations rule systems acm transactions computer systems vol 
pp 
may 
hans hanson eric kim wang predicate matching algorithm database rule systems proceedings acm sigmod conference management data pp 
atlantic city nj june 
hans hanson eric design implementation ariel active database rule system ieee transactions 
knowledge data engineering vol 
pp 
february 
hans hanson eric theodore johnson selection predicate indexing active databases interval skip lists information systems vol 
pp 

hans hanson eric liu lu park vernon triggerman asynchronous trigger processor extension object relational dbms university florida cise dept tech 
report december 
www cise ufl edu 
hans hanson eric optimized trigger condition testing ariel networks university florida cise dept tech 
report november 
www cise ufl edu 
hans hanson eric chen engel ramaswamy tan xu flexible recoverable client server database event notification system vldb journal vol 
pp 

hans hanson eric scalable trigger processing triggerman tr florida cise dept july :10.1.1.39.4584
www cise ufl edu hell hellerstein optimization techniques queries expensive methods appear acm transactions database systems tods 
available www cs berkeley edu 
info informix dynamic server universal data option www informix com 
predicate placement active database discrimination networks ph dissertation cise department univ florida gainesville august 
mohan predicate indexing triggerman ms thesis cise department univ florida gainesville dec 
mccarthy dennis dayal architecture active data base management system proceedings 
acm sigmod conference management data portland june pp 

mira miranker daniel treat better match algorithm ai production systems proceedings aaai conference august pp 

sell sellis lin raschid implementing large production systems dbms environment concepts algorithms proceedings acm sigmod conference 
ston stonebraker sellis hanson analysis rule indexing implementations database systems expert database systems proceedings international workshop benjamin cummings pp 

ston stonebraker michael larry rowe michael implementation postgres ieee transactions knowledge data engineering vol 
march pp 

widom ceri active database systems morgan kaufmann 
