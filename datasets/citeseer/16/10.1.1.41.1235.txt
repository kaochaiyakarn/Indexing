property specification patterns finite state verification matthew dwyer kansas state university department computing information sciences nichols hall manhattan ks dwyer cis ksu edu george avrunin university massachusetts department mathematics statistics box amherst ma avrunin math umass edu james corbett university hawai department information computer science honolulu hi corbett hawaii edu finite state verification model checking provides powerful means detect errors subtle difficult reproduce 
transition technology research practice slow 
number potential causes reluctance adopting formal methods practice believe primary cause rests fact practitioners unfamiliar specification processes notations strategies 
years seen growing success leveraging experience design coding patterns 
propose pattern approach presentation codification reuse property specifications finite state verification 
keywords patterns finite state verification formal specification concurrent systems formal specification verification active areas research decades 
formal approaches offer practitioners significant advantages current state practice partially supported nsf ccr ccr ccr ccr 
widely adopted 
addition lack definitive evidence support cost saving benefits formal methods number pragmatic barriers adoption formal methods identified including lack tool support expertise organizations training materials process support formal methods 
believe availability tool support finite state verification provides opportunity overcome barriers 
finite state verification refers set techniques proving properties finite state models computer systems 
properties typically specified temporal logics regular expressions systems specified finite state transition systems kind 
tool support available variety verification techniques including example techniques model checking bisimulation language containment flow analysis inequality necessary conditions 
contrast mechanical theorem proving requires guidance expert finite state verification techniques fully automated relieving user need understand inner workings verification process 
despite automation users finite state verification tools able specify system requirements specification language tool 
example user wants verify process updating value process reading value value flushed process cache linear temporal logic ltl model checker translate prose formula property formula relatively simple writing ltl formula requires knowledge standard ltl idioms 
example property implicitly safety property formula begins operator 
say event fol lows event usually write specification form 
case want constrain intermediate events operator 
need occur prohibit eventually occur 
features expressive power specification formalisms associated formal verification techniques users techniques need expert accurately express requirements wish verify appropriate specification formalisms 
contend acquiring level expertise represents substantial obstacle adoption automated finite state verification techniques providing effective way practitioners draw large experience base greatly reduce obstacle 
propose capture experience base enable transfer experience practitioners way specification pattern system 
patterns originally developed capture recurring solutions design coding problems 
design coding languages rich expressive formalisms provide wide variety solutions problem full range possible solutions usually wider necessary useful 
patterns successful practitioners want solve naturally occurring domain problems 
don need full expressiveness languages prefer guidance best language features solve specific problem 
appears true formal specification languages concurrent reactive systems 
number expressive formalisms ctl modal specifications documented literature example appear relatively simple :10.1.1.35.4632
expressed fairly simply existing specification formalisms don require advanced complex features 
believe collection simple patterns defined assist practitioners mapping descriptions system behavior choice may improve transition formal methods practice 
section describe idea design patterns idea extended software development domains design 
section discusses application patterns description specifications lays terminology format describing specification patterns 
section describes initial specification pattern system finitestate verification 
describe section preliminary experiences patterns teach developers write property specifications 
section discusses ongoing development pattern system section concludes 
design patterns design patterns introduced means leveraging experience expert system designers 
patterns intended capture description recurring solutions software design problems requirements addressed solution means requirements satisfied examples solution 
information described form understood practitioners identify similar requirements systems select patterns address requirements instantiate solutions embody patterns 
important stress descriptions artifacts patterns 
design specifications documents capture solution domain problem describe requirements provide example solution patterns 
patterns seek generalize experience multiple specific problems 
care taken keep patterns removed practice 
defined design pattern characteristics solves specific problem class problems principle strategy 
proven concept demonstrated effective practice 
solution isn obvious direct application basic principles 
describes relationships solution components isolated components solution 
generative demonstrates construct solution 
active community grown idea design patterns evidenced formation numerous workshops notion patterns spreading software related endeavors 
example idea patterns applied describe data models system level analysis modeling information software process organizational structures curricula educating software developers 
intention adapt apply notion patterns description specification properties finite state verification 
absence intent describe portion system execution free certain events states 
known 
example mappings ctl false globally ag ag ag ag ag ag ag ltl false globally ffi 
ffi 
ffi quantified regular expressions sigma set events gammap denote expression matches symbol sigma denote zero instance expression event occur globally gammap gammar gammap sigma gammaq gammap gammaq gammap gammaq gammar gammaq gammap gammaq gammap examples known uses common example mutual exclusion 
state model scope global state formula true process critical section 
event model scope segment execution process critical section enter section event leave section event event process enters critical section 
relationships pattern dual existence pattern 
fact specification formalisms negation explicit queries existence formulate instance absence pattern seen examples 
absence pattern specification pattern property specification pattern generalized description commonly occurring requirement permissible state event sequences finite state model system 
property specification pattern describes essential structure aspect system behavior provides expressions behavior range common formalisms 
example specification patterns figures variant gang pattern format 
pattern comprises name names precise statement pattern intent structure behavior described mappings common specification formalisms examples known uses relationships patterns 
specification formalisms quantified regular expressions event various temporal logics ltl computation tree logic ctl state 
patterns capital letters stand events disjunctions events event formalisms stand state formulas state formalisms 
response intent describe cause effect relationships pair events states 
occurrence cause followed occurrence second effect defined portion system execution 
known follows leads 
example mappings mappings cause effect 
ctl responds globally ag af ag ag ag ag af ag ag ag ag ltl responds globally 
ffi 




quantified regular expressions sigma set events gammap denote expression matches symbol sigma denote zero instance expression responds globally gammap gammas gammap gammar gammap gammas gammap sigma gammaq gammap gammas gammap gammaq gammap gammas gammap gammaq gammar gammaq gammap gammas gammap gammaq gammap gammas gammap examples known uses response properties occur quite commonly specifications concurrent systems 
common example describing requirement resource granted requested 
note state formulations may occur state possible cause effect states coincide 
relationships note response property sort converse precedence property 
precedence says cause precedes effect response says effect follows cause 
equivalent response allows effects occur causes precedence similarly allows causes occur subsequent effects 
note pattern require occurrence cause occurrence effect 
response pattern pattern scope extent program execution pattern hold 
basic kinds scopes global entire program execution execution state event execution state event part execution state event state event designated part execution continues second state event occur 
scope determined specifying global state sequence pattern scopes starting state event pattern 
state delimited scopes interval property evaluated closed left open right 
scope consists states starting state including state 
chose closed left scopes relatively easy encode specifications real property specifications studied 
possible define scopes open left closed right discuss section 
event formalisms underlying model allow events coincide event delimited scopes open ends 
illustrates portions execution designated different kinds scopes 
note scope interpreted optional scope delimiters execution specification true 
scope operators specification formalisms interval logics exception 
experience strongly indicates informal requirements specified properties program executions segments program executions 
pattern system properties mirror view enhance usability 
note various specification formalisms different semantics expressive power property expressed easily formalism may unnatural impossible capture precisely different formalism 
instance statebased formalisms ltl ctl reasonable specify certain proposition hold scope universality pattern regard sense dual absence property stating proposition holds state scope 
event formalisms easy require certain events occur scope property proposition holds scope probably expressed terms appropriate occurrence event indicating proposition true absence event indicating false bear simple relation absence pattern 
similarly note formalisms express conditions involving infinite executions limited finite sequences states events 
expect practice properties specified expressed commonly formalisms pattern system point differences user 
system specification patterns propose develop system property specification patterns finite state verification tools 
pattern system set patterns organized hierarchies connections related patterns facilitate browsing 
user search appropriate pattern match requirement specified mapping section obtain essential structure pattern formalism particular tool instantiate pattern plugging state formulas events specific requirement 
believe useful way organize patterns hierarchy semantics 
example patterns require states events occur occur absence pattern patterns constrain order states events response pattern 
organization pattern system hierarchy illustrated 
hierarchy distinguishes properties deal occurrence ordering states events system execution 
provides separate patterns compound properties built combinations basic patterns 
different users may think patterns different ways patterns appear categories 
example absence pattern non global scope seen constrain order states events put ordering patterns 
patterns organized hierarchies syntactic structure 
allow specify property formalism find corresponding pattern quickly determine specify property bounded existence property patterns occurrence absence universality existence precedence response order compound chains boolean precedence response pattern hierarchy 
note hierarchy shown explicitly address fairness issues included complete pattern system 
discovering patterns defining specification formalism attempts give small set independent concepts large class interesting specifications constructed 
collection specification patterns trying give smallest set generate useful specifications complete listing specifications 
patterns system appear frequently property specifications 
difficult time finding property specifications study 
due fact property specifications adopted large segment practicing developers consequently large body specifications exist 
reason forced draw experiences writing specifications finite state verification specifications appear literature examples practical property specifications 
example experimental study performance finite state verification methods writes specifications fourteen different properties ctl claims automata ltl formula converted spin 
systems studies meanings properties different significant structural similarity specifications terms patterns temporal logical operators example 
study structure specifications graphical user interface software automobile control system home security system revealed structural similarities 
studies backdrop generalized specific patterns operators appeared real specifications arrive property specification patterns 
property specification pattern integrated pattern system expressing mappings consistent style 
assume pattern appears practice type scope may occur context type scope provide mappings pairs patterns scopes 
experience small fraction possible constraints specified logics regular expressions commonly occur practice carries small focused set patterns 
expect set patterns expanded developers encounter property specifications real systems easily map existing patterns 
patterns space limitations prohibit description patterns full detail set web site 
full patterns contain additional examples explanation relationships patterns mappings formalisms 
give intent common patterns 
occurrence patterns include absence state event occur scope 
pattern known 
gives key elements pattern 
existence state event occur scope 
pattern known eventuality 
bounded existence state event occur times scope 
variants pattern specify occurrences occurrences state event 
universality state event occurs scope 
pattern known globally henceforth 
ordering patterns include precedence state event preceded state event scope 
response state event followed state event scope 
pattern known follows leads 
pattern mixture existence precedence expresses causal relationship subject patterns 
gives key elements pattern 
compound patterns include chain precedence sequence states events pn preceded sequence states events qm pattern generalization precedence pattern 
chain response sequence states events pn followed sequence states events qm pattern generalization response pattern 
express bounded fifo relationships 
boolean combinations patterns delimit scopes describe inter scope properties terms individual events states 
cases want generalize patterns allow sets states events describe scopes properties 
cases straightforward disjunctions conjunctions state event descriptions substituted patterns cases yields incorrect specification 
patterns outline boolean combinations applied different cases 
related attempts describing taxonomies property specifications 
popular long lived distinguishes safety liveness properties 
provides high level intuitive understanding classes specifications bad happen vs eventually happen coarse practical constructing particular specifications 
manna pnueli describe finer taxonomy syntactic structure ltl formulae 
taxonomy defined terms canonical forms 
forms match way specifications typically encoded ltl provide alternative codings canonical forms 
give number examples textual descriptions intuition specifications 
closest thing pattern catalog appears literature specification concurrent reactive systems 
unfortunately taxonomy coarse users 
furthermore syntactic nature suffers additional drawbacks 
specific ltl users particular finitestate verification tools may need couch specifications formalism 
second practitioners naturally attack problem starting syntax particular specification formalism informal understanding meaning requirements 
taxonomy organized features related meaning appropriate 
experience pattern system taught semester graduate course specification verification reactive systems 
course component masters software engineering curriculum 
students course exclusively non traditional students working software industry 
number students taken logic discrete mathematics course taken courses distant past 
believe group representative broad class practicing software developers clearly experts formal methods 
course involved development significant collection formal specifications selected realistic systems including graphical user interfaces transactional processing inventory control system automobile control system home security system 
specifications derived informal english language statements system requirements refined stylized structured english 
specifications subsequently verified model checking 
writing reading formal specifications process identifying composing small set patterns similar described section 
students able write correct specifications projects matter weeks able read critique specifications 
project focused ctl specification formalism students required express properties formalisms including ltl finite state automata gil 
benefits pattern approach stood formalisms mapping ctl patterns back alternative formalisms straightforward 
experience date limited anecdotal feel pattern approach useful educational tool means transferring ex pert knowledge 
students course including weakest formal backgrounds capable producing readable specifications specification language semester 
subsequently clear students internalized pattern system mappings sufficiently apply independently projects master degrees 
directions addition adding patterns system plan extend ways 
plan provide mappings formalisms graphical interval logic gil 
inca query language automata various process algebra formalisms ccs csp 
plan explore alternate organizations patterns 
example hierarchy syntax particular formalism allow analyst proficient formalism quickly find pattern subsequently translate specification formalism 
provide variations patterns 
example simple changes mappings chain patterns allow analyst restrict possible states events occur chain elements 
issue arises state formalisms scopes open closed endpoints included 
scopes closed left open right state scope state state state state 
slight changes mappings open scope left close right 
general scope open left inserting nextstate operator closed right changing condition operator 
example responds specified scope open left closed right follows ffi ffi 
plan provide open closed variations scopes state mappings 
validation important issue 
analyst sure specification correctly captures intended property 
aspects problem 
ensuring analyst identified correct specification pattern 
hope providing precise prose descriptions examples patterns minimize risk error difficult problem really outside scope pattern system se 
aspect validation ensuring mappings consistent correct 
pattern system community users time expose errors mappings 
addition check mappings pattern consistency translating finite state structures tableau algorithms comparing common representation semantics 
patterns people define characterized aggressive disregard originality 
patterns research expression best practice software domain 
pattern system belong individual community experts practitioners contribute 
important pattern system agreed community 
reasons system described viewed starting point 
useful grow process open dialog critical review 
efforts underway pattern domains provide web mechanism collaborative development pattern systems 
believe specification patterns similar collaboration undertaken formal specification community set website store current versions specification patterns system 
particular want stress belief users specification patterns benefit variety views pattern system reflecting semantic hierarchies syntactic structure specifications particular formalisms organizing principles hope web site vehicle collecting disseminating views individual patterns 
suggested finite state verification readily accessible developers concurrent reactive systems definition pattern system 
described initial version pattern system specification properties finite state verification tools 
experience suggests pattern system enables non experts proficient writing reading formal specifications realistic systems relatively quickly 
development pattern system community activity requiring participation broad range experts patterns formal specification domain 
hope collaboration reality resulting pattern system studied put practicing developers 
anderson beame burns chan notkin reese 
model checking large software specifications 
software engineering notes nov 
proceedings fourth acm sigsoft symposium foundations software engineering 
appleton 
patterns software essential concepts terminology 
www com docs patterns intro html 
avrunin buy corbett dillon wileden 
automated analysis concurrent systems constrained expression toolset 
ieee transactions software engineering nov 
buschmann meunier rohnert stal 
pattern oriented software architecture system patterns 
wiley sons 
cain coplien harrison 
social patterns productive software organizations 
annals software engineering dec 

empirical comparison static concurrency analysis techniques 
phd thesis university massachusetts amherst may 
clarke emerson sistla 
automatic verification finite state concurrent systems temporal logic specifications 
acm transactions programming languages systems apr 
cleaveland parrow steffen 
concurrency workbench semantics tool verification concurrent systems 
acm transactions programming languages systems jan 
coplien 
organizational patterns 
www bell labs com cgi user 
coplien schmidt editors 
pattern languages program design 
addison wesley 
corbett avrunin 
integer programming verify general safety liveness properties 
formal methods system design jan 
dillon kutty moser ramakrishna 
graphical interval logic specifying concurrent systems 
acm transactions software engineering methodology apr 
dwyer avrunin corbett 
system specification patterns 
www cis ksu edu dwyer spec patterns html 
dwyer carr hines 
model checking graphical user interfaces abstractions 
lncs pages 
proceedings th european software engineering conference th acm sigsoft symposium foundations software engineering sept 
dwyer clarke 
data flow analysis verifying properties concurrent programs 
software engineering notes dec 
proceedings acm sigsoft symposium foundations software engineering 
fowler editor 
analysis patterns reusable object models 
addison wesley 
gamma helm johnson vlissides 
design patterns elements reusable object oriented software 
addison wesley 
har el kurshan 
software analytical communication protocols 
technical journal 
hay editor 
data model patterns conventions thought 
house publishing 
lamport 
proving correctness multiprocess programs 
ieee transactions software engineering se 
manna pnueli 
temporal logic reactive concurrent systems specification 
springerverlag 
sharp mclaughlin prieto 
pedagogical patterns successes teaching object technology 
www cs edu oopsla html 
mcmillan 
symbolic model checking 
kluwer academic publishers 
clarke osterweil 
verification communication protocols data flow analysis 
proceedings acm sigsoft symposium foundations software engineering oct 
osterweil 
cecil sequencing constraint language automatic static analysis generation 
ieee transactions software engineering mar 
rosenblum 
formal methods testing state art state practice issta panel summary 
acm sigsoft software engineering notes july 
wing 
model checking software systems case study 
software engineering notes oct 
proceedings third acm sigsoft symposium foundations software engineering 
