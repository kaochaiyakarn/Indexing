general model nested transactional workflows dean kuo div 
information technology csiro gpo box canberra act australia dean kuo cbr dit csiro au michael lawley liu maria orlowska crc distributed systems technology department computer science university queensland qld australia fm lawley liu dstc edu au applies concepts transaction processing workflows enabling workflows exhibit relaxed transactional behaviour 
general model transactional workflows 
define correctness transactional workflows terms model model find schedules execution transactional workflow guaranteed terminate acceptable termination commit abort states 
allow transactional workflow consist number tasks composed constructs ordering contingency alternative conditional iteration 
addition show model support proper nesting transactional workflows reduce difficulty scheduling algorithms provide structured modular twf specification 
keywords transactional workflows tasks failure atomicity model correctness schedules 
current advances inter operability different hardware operating systems dou shm distributed applications advantage technology accessing data executing processes heterogeneous distributed environment 
data sources may database management systems dbmss files systems spreadsheets processes may legacy applications services executed machine distributed environment 
process may human oriented activity 
organisations especially telecommunications take advantage interoperability integration existing legacy systems 
major problems associated inter management failures node communication failures management concurrent executions 
concept transactions bhg gr originated research centralised databases designed deal precisely problems restricted environment 
transactions provide known acid atomicity consistency isolation durability properties 
transaction executes entirety takes state system database consistent state execution affected concurrently executing transactions transaction commits effects permanent durable 
properties managed transaction processing system 
reported funded part cooperative research centres program department prime minister cabinet commonwealth government australia 
done author crc distributed systems technology distributed environment role transaction processing monitor manage execution distributed transactions 
number protocols distributed transactions 
known protocol phase commit protocol pc bhg gr 
transaction processing monitor ordinates commit distributed transaction preparing sub transaction distributed transaction 
prepares fail sub transactions aborted committed 
databases support pc protocol distributed transactions supported preparing sub transaction executing databases support pc 
transaction processing monitor requests sub transaction executing database support pc commit 
commit fails transactions aborted committed 
database support pc impossible support distributed transactions 
protocol optimistic commit protocol requires subtransaction compensatable sub transaction semantically logically undone subtransaction committed 
transaction manager simply commits sub transaction aborts transaction manager aborts sub transactions committed executing compensation 
property transaction manager exploits support distributed transactions 
transactions may forcible 
underlying system guarantee transactions eventually commit failures occur 
example deposit bank account upper limit forcible 
straightforward support distributed transactions sub transactions forcible 
approaches described requires sub transactions conform specific set criteria fact distributed transactions composed mixture sub transactions compensatable forcible support pc supported 
transaction processing manager needs execute sub transactions compensatable ordinate execution sub transactions support pc execute forcible sub transactions 
research transactional workflow generalises methods supporting transactions distributed environment 
relaxes failure atomicity commit abort transactions 
deal issues execution atomicity management concurrent executions 
scope part current research 
transactional workflows provide mechanism application programmer write applications need deal explicitly failures 
transactions transactional workflows allow application define level failure atomicity required application requirement resource supports pc protocol 
transactional workflow twf may long lived consists number tasks composed ordering contingency alternative conditional iteration constructs 
tasks may traditional transaction service human oriented activity twf 
twf relaxes failure atomicity transactions allowing specification tasks non critical tasks require undo 
twf commits critical tasks commit non critical tasks commit abort 
similarly twf aborts tasks require undo initial abort states tasks require undo initial abort commit states 
twf system manages failures workflow application programmer need deal ad hoc manner 
summary twf system general flexible approach issues addressed transaction processing monitors gr 
provide twf system ability reason correctly execute twf need model 
gives levels specification level application programmer uses specify twf model level specification mapped twf system reason twf derive schedule twf guaranteed commit abort 
model simple possible able represent constructs twf application programmer expect twf system 
contributions mechanism support nesting twf may task twf 
large tasks reasoning determine correctness generate schedules may computationally expensive 
nesting determining correctness schedules larger twf requires examining derived task properties nested examining twf 
transaction processing monitors lab tra enjoyed rise popularity widely 
applications middleware communicate resources homogeneous environment providing gateways resources load balancing location independence transaction processing 
due requirement resource distributed environment needs support pc protocol due poor performance pc protocol 
number commercial multidatabase management systems digital dbi dig 
approach supporting distributed transactions requires dbmss support pc 
condition satisfied transactions supported users advised perform updates inconsistencies may arise 
spectrum commercial workflow systems lin flowmark lr 
provide transactional behaviour manage failures concurrent executions biased workflows human oriented tasks creating updating passing documents 
products email pass objects organisation 
related advanced transaction models atms 
number atms elm 
models require resource supports pc transaction compensatable 
atm designed specific application domains consequently inflexible 
transactional workflows rs 
support subset constructs transactional workflow specification model 
furthermore support nesting concentrate supporting workflow transactions providing relaxed transactional behaviour workflows 
aims yw aae similar aims workflows 
formal model transactional workflows define correctness failure atomicity provide richer set constructs allow nesting 
furthermore model models commit protocol tasks assume tasks compensatable 
summary research focuses properties tasks generate schedule guarantee twf commits aborts 
approach general approach taken atms transactions require task compensatable supports pc 
addition allow relaxation failure atomicity 
rest organised follows 
section give motivating example highlights uses twf system 
section give detailed description tasks section model 
section show model represents constructs contingency specification level 
suggestions section 
example section introduce motivating example illustrate various features associated model 
example software installation upgrade process distributed network 
problem description brief outline problem parameters ffl distributed set client server machines running version client server software 
ffl client server software needs upgraded version 
ffl servers support clients 
ffl clients talk servers 
ffl servers running simultaneously network different nodes 
ffl server running installation server 
twf specification involves performing system wide configuration upgrading nodes network 
illustrated 
note task nodes transactional workflow fact transactional workflows 
double box indicates task require undoing transactional workflow abort 
single box indicates task critical undone failure oval node represents decision node 
shows sub transactional workflow perform configuration provides example contingency plan 
fail get old configuration information pertaining installation server attempt get new set configuration information presumably querying user 
upgrade node configuration nodes perform perform entire upgrade get config old config get new get configuration information shows specification upgrade node 
dotted box indicates task noncritical 
transactional workflow abort task fails 
server upgraded client upgrade fails need undo upgrade server 
shows upgrade server node 
split boxes indicate task top compensation bottom 
task test server fails transactional workflow upgrade server users upgrade client email upgrade node aborted backward recovery 
involves compensating rolling back task requires undoing 
case server stopped new version de installed putting server back place server started 
backup server de install install server start server server server test disk space server start server check upgrade server transactional workflows section describe transactional workflows properties composed tasks 
tasks task function application service activity carried process 
process may human oriented activity 
twf system deal actual semantics tasks manages order execution various stages task twf 
system assumes application programmer implemented twf meaningful conceptual specification 
associated task finite state machine consisting set visible states set labelled transitions states 
tasks initial state set commit states set abort states 
initial state represents state task invoked 
task successfully executed task commit states task failed execution task abort states 
tasks commit state abort state 
reason multiple commit abort states enable model contingency alternatives easily see section 
task essentially properties affect schedules twf 

task forcible underlying system guarantee task succeed 
transition task may forcible 
example dbms supports pc transition prepared state commit state forcible 
transition transaction prepare state forcible dbms may abort transaction 
summary task transition states task forcible twf system underlying system guarantee presence failures task transition task eventually succeed 
property 
task logically undone successfully executed committed say task compensatable 
twf system deal actual semantics compensation 
application programmer define task compensation task undone meaningfully specification 
twf system views task undone compensation aborted task may side effects 
example section shows example compensation 
task de install compensation task install 
task compensation defined part task task undone compensation action independent twf executed task 
applications approach restrictive may different requirements need define task compensation specifically context twf 
allow task defined twf 
compensation executed task requires compensation compensation defined part task 
activity task compensation defined defined activity 
tasks described flexible general 
composing tasks form transactional workflows transactional workflow composed arbitrary number tasks number constructs 
identified collection constructs expect twf system 
ordering contingency alternative conditional iteration 
discover useful constructs shall extend include 
ordering basic requirement twf specification specification order tasks may executed 
twf represented acyclic graph node corresponds task edge represents ordering constraint 
task set visible states 
edge pair nodes tasks tk tk twf graph labelled states vs vs state vs respectively vs visible states task tk respectively tk 
edge specifies illegal twf task tk state vs task tk state vs state vs typically edge specifies task may start task committed 
contingency execution task twf may fail 
contingency plan composed tasks 
allows specification contingency task main task 
twf system execute contingency task main task aborts 
execution twf task fails execution twf forward progress commit contingency task successfully executed 
example usage contingency shown task fails get old configuration information contingency get information user 
example making airline reservations 
fail reserve seat contingency task may reserve seat british 
alternative alternative composed arbitrary number tasks 
specifies number alternatives achieving goal 
twf system freedom choose task execute alternative twf guaranteed terminate acceptable termination states 
choice may depend properties task 
contingency plan constraint task abort task commit 
task described set visible states transitions form directed acyclic graph partial order 
defined 
conditional conditionals statements supported twf model 
composed condition tasks 
execution twf system able determine tasks executed 
condition data distributed system example balance account greater certain amount invoke particular task task 
conditionals supported advanced transaction models dom related research transactional workflows rs 
iteration iteration contains condition subtask shown 
condition true subtask repeatedly invoked 
section show encapsulate iteration condition subtask single task 
manner able support iterations requiring twf graph acyclic 
say task commits invocations subtask commit 
condition relaxed encapsulating subtask contingency plan 
appropriate counters conditions effectively relax constraint produce iteration subtask commits exactly times invocations 
typical usage application requires task commits specification allows try fixed maximum number times 
condition loop task tasks task task iteration relaxing failure atomicity allowing application programmer specify non critical tasks tasks require undo twf failure atomicity relaxed 
represent model non critical tasks tasks require undoing constructs described earlier 
task tk critical twf represented contingency plan null task contingency task 
task tk aborts contingency task executed 
null task commit contingency plan commit task tk aborts 
task twf require undone twf aborts represented task null compensation 
define model twf commits tasks twf commit states aborts tasks initial state abort states 
keeps model simple losing expressibility 
example shown section upgrading node gives example critical tasks tasks require undo 
example critical successfully send email users null task task effect commit executed forcible 
twf commit necessary undo server upgrade twf upgrading node aborts 
model section model 
tasks model represents task non deterministic finite state machine arbitrary number states 
task initial state set intermediate commit abort states set labelled state transitions name 
formal description task 
initial state represents state task executed 
commit respectively abort states represent task successfully respectively unsuccessfully executed 
transition composed old state action label new state 
old new states states task 
transition initial state transition commit state transition abort state 
states transitions task form directed acyclic graph partial order 
task name string task state string action string transition record old state task state action action new state task state task record name task name initial task state intermediate set task state commit set task state abort set task state transitions set transition tasks model task may multiple commit states 
set states task represent task successfully executed committed 
task may multiple intermediate abort states 
required model contingencies alternatives 
general model rs allow task commit state abort state intermediate states 
states task derived transitions 
task behaviour deterministic 
example task shown initial state action execute issued state action ready state abort state 
task prepared state action commit requested transition deterministic 
say task forcible state set states possible manage execution task state states transitions non deterministic 
task forcible initial state commit states say task forcible 
task compensatable task transition commit states abort states 
transitions abort states subset commit states task compensatable subset 
requirement task compensation forcible system failure occurs execution compensation underlying system continuously re execute compensation compensation task successfully executed 
definition formally defines 
model set commit abort states need define set states single state 
definition identify set states forcible task commit abort states 
definition forcible tk means state task tk forcible states set subset states task tk definition tk task set states tk forcible tk true ffl ffl act hs act tk transitions forcible tk 
definition state task forcible set states require exist sequence deterministic transitions state states transitions non deterministic require possible new state transition forcible suppose task tk transaction supports pc protocol finite state machine task shown 
notice task forcible abort state state commit state task forcible commit state task prepared state 
managing execution twf relies knowledge states task forcible commit abort states 
definitions define states task forcible commit abort respectively 
prepare abort execute abort execute prepare commit abort initial ready prepared abort commit state transition diagram pc tasks definition tk task 
forcible commit tk fs forcible tk tk commit task compensatable task forcible abort state commit state 
definition tk task 
forcible abort tk fs forcible tk tk abort transactional workflows section model 
formal description 
twf represented name set tasks set illegal states 
model constructs contingency alternative conditional iteration associated tasks explicitly 
modelled tasks twf sections describe represented single task 
ordering represented set illegal states 
show section map ordering constraint set illegal states twf 
twf composed set tasks 
state twf set states tasks twf 
represented set task name task state pairs 
example state twf comprising tasks tk tk tk initially 
tk initial tk initial tk initial task twf initial state 
twf system manages execution twf initial state termination commit abort states 
set illegal states defines set constraints execution twf 
twf permitted enter illegal states execution 
illegal states twf enables model represent constructs ordering 
twf state set task name task state twf record name string tasks set task illegal set twf state transactional workflows twf system needs find execution twf enters illegal states terminates commit abort states 
failures occur twf commits 
introduce notion safe states define correct twf executions 
informally twf state safe guaranteed twf get acceptable termination states failures occur 
execution twf intermediate state safe state 
tasks twf state forcible commit respectively abort states twf forcible commit respectively abort state 
tasks state forcible commit abort tasks forcible commit abort state safe non forcible task commits aborts force tasks state twf commits aborts 
safe states twf 
distributed transaction processing sub transactions distributed transaction forcible abort states times including prepared state 
sub transactions prepared states distributed transaction forcible commit abort 
sub transaction commits state distributed transaction longer forcible abort assume sub transactions compensatable forcible commit safe state 
definitions define states twf forcible commit forcible abort safe states respectively 
definition twf transactional workflow state twf twf forcible commit twf iff statei tk twf tasks tk name name state forcible commit tk definition twf transactional workflow state twf twf forcible abort twf iff statei tk twf tasks tk name name state forcible abort tk definition twf transactional workflow state twf twf safe states twf iff ffl twf forcible commit tk ffl twf forcible abort tk ffl tk tk twf tasks tk name state state forcible commit tk forcible abort tk tk tk tk tk name state state forcible commit tk forcible abort tk 
transition twf corresponds transition tasks twf 
schedule twf sequence transitions takes twf initial state commit abort states 
twf initial state task twf initial state 
defined definition 
definition twf transactional workflow 
twf initial state twf name tk twf twf commit state task twf commit states 
similarly abort states twf 
twf composed tasks tk tk commit states tk respectively tk respectively commit states twf name htk name ig name htk name ig name htk name ig name htk name ig abort state twf tasks abort states tasks abort states initial state 
definitions define set commit abort states twf respectively 
definition twf twf 
twf commit states twf pi tk twf tasks name tk definition twf twf 
twf abort states twf pi tk twf tasks name tk abort gamma twf initial state twf twf intermediate state initial state commit abort states 
defined formally definition 
definition twf transactional workflow 
twf inter states twf iff ffl pi tk twf tasks name states tk states tk tk intermediate tk commit tk abort ffl initial state twf twf commit states twf twf abort states twf 
definition safe states definition defines safe schedules 
crucial definition transitions states twf definition 
definition twf transactional workflow 
hs htk name twf transitions twf iff ffl states twf ffl action state tk transitions ffl htk name statei ffl htk name state ffl tk tk tk tk twf tasks htk name statei htk name statei transition tasks twf transition 
definition twf transactional workflow 
hs act delta delta delta act twf sched twf iff ffl twf commit states twf twf abort states twf ffl twf initial state twf ffl hs act twf transitions twf twf illegal twf safe states twf hs act si twf transitions twf twf safe states twf 
condition says possible states twf action safe 
twf able terminate commit abort states 
twf correct twf system execute twf guarantee terminate commit abort states failures occur twf commits exists schedule initial state commit states 
correctness defined definition 
definition twf transactional workflow 
hs act delta delta delta act twf sched twf twf commit states twf twf correct 
mapping transactional workflow task support nesting need find mapping twf task need find single finite state machine represent twf 
section define mapping 
states task representing twf cartesian product states tasks twf 
may large number states unimportant states remove 
implementation twf system need generate possible states 
mapping defined definition 
section describe determine visible important states task represent set states single state merging task states 
notation state string respectively action string convert state respectively action twf string representation 
functions injective 
definition twf transactional workflow 
define mapping twf task ffl twf name twf name ffl twf initial state string twf initial state twf ffl twf intermediate string twf inter states twf ffl twf commit string twf commit states twf ffl twf abort string twf abort states twf ffl twf transitions ae state string action string act state string act delta delta delta act delta delta delta act twf sched twf oe elementary show state twf forcible commit states corresponding state task representing twf forcible commit state 
similar result holds abort states 
visible states merging states shown represent twf task finite state machine 
clear may states twf composed large number tasks 
required method reduce number states task 
mapping task simplification mapping applicable task just tasks represent 
states task useful useful twf system managing execution task twf 
say useful states visible states twf 
transition consists old state action new state 
new state transition visible state task new state forcible commit forcible abort 
old state forcible commit respectively abort new state forcible commit respectively abort new state visible state 
twf system finds states useful managing task execution twf 
distributed transaction sub transaction forcible commit enters prepare state know importance state impossible support distributed transactions 
initial state commit abort states visible states vital twf system 
definition formally defines visible states 
definition tk task subset states tk visible states tk iff ffl tk commit tk abort ffl hs act si tk transitions forcible commit tk forcible commit tk forcible abort tk forcible abort tk 
notice task explicitly specify set visible states enables model represent dependencies arbitrary states tasks twf 
required model represent data flow tasks 
example ready state visible state 
task may output available reaches states 
ready visible state twf system needs know task entered ready state 
transition exists visible states vs vs task sequence actions take task state vs vs reduce number states merging states task single state single state represent set states need define equivalence classes task states 
informally 
task initial state 
task commit states 
task abort states 
intermediate states forcible commit forcible abort 
intermediate states forcible commit forcible abort 
intermediate states forcible commit forcible abort 
intermediate states forcible commit forcible abort 
definition formally defines equivalence 
definition tk task states task tk fs tk intermediate tk commit tk abort iff ffl tk initial ffl tk commit tk commit ffl tk abort tk abort ffl forcible commit tk forcible commit tk ffl forcible abort tk forcible abort tk 
simplify task having single state represent set state equivalence class 
example represent commit states single state states forcible commit forcible abort single state 
transition exists state equiv representing equivalence class states state equiv representing equivalence class states transition state equiv state equiv nested twf twf may task larger twf 
mapping derive task represents inner twf 
find visible states task merge states 
difficulty finding schedules larger twf reduced 
general task forcible abort initially may forcible commit execution intermediate forcible commit state 
cases task tasks formed levels nesting contain visible intermediate states 
notion visible states merging states reduces complexity tasks formed levels nesting 
modelling twf constructs section show model constructs ordering contingency alternative conditional iteration 
ordering ordering constraints represented illegal states twf 
edge task tk visible state vs task tk visible state vs see fs twf state htk name vs htk name vi set illegal states represent ordering constraint 
recall task states transitions form directed acyclic graph define partial order 
vs vs defined 
vs task tk vs task tk ordering constraint example ordering specifies task tk commit tk starts twf composed tasks htk tk tk tk tk represented set illegal states ae twf state htk name tk initial htk name vi com state tk commit oe twf execution enter illegal states know ordering constraints satisfied 
contingency alternatives contingency plan composed tasks alternative composed arbitrary number tasks 
take advantage nesting representing contingency plan alternative single task 
fact contingency plan alternative special 
commit states twf task twf commit states 
introduced earlier contingency plan composed main task contingency task 
contingency plan commit state main task contingency task commit states 
illegal state contingency main task abort state contingency commit state contingency executed trying commit main task 
alternative composed arbitrary number tasks 
commit state set states exactly tasks commit states 
tasks initial state abort states 
contingency constraints 
remaining steps map contingency alternative task similar mapping twf task 
representing contingencies alternative require task multiple commit states 
mapping contingencies alternatives uses features tasks multiple commit abort states 
tasks restricted commit state abort state possible map contingency alternative task mapping complex 
conditionals conditional composed condition tasks represent single task 
conditionals introduce non determinism condition evaluated run time determine task executed 
twf system schedules conditional needs take pessimistic view 
example tasks contains forcible commit state prepared state twf system depend existence state 
tasks conditional contain forcible commit state task representing conditional contain state forcible commit state 
tasks conditional contain intermediate state equivalence class conditional task intermediate state represents states state equivalence class 
commit respectively abort state represents states tasks commit respectively abort state initial state 
transition states conditional task exists sequence action takes tasks conditional state 
iteration iterations contain condition task 
general structure conditionals conditional expressed iteration 
model iteration single task 
iteration specifies condition satisfied task repeatedly executed 
cases 
task iteration contain prepare state forcible commit state just commit state task representing iteration contains states 
initial state commit state abort state 
task iteration support prepare state states task represents iteration 
initial state prepare state commit state abort state 
task iteration forcible commit states initial state iteration task forcible initial state commit state 
iteration task compensatable task iteration compensatable 
presents model composed set tasks 
model represent ordering contingencies alternatives iterations conditionals 
model twf system extract properties task reason twf determine correctness find schedule twf guaranteed terminate commit abort states failures occur execution 
currently implementing prototype model 
prototype able map twf task simplify task finite state machine deriving visible states merging states tasks 
furthermore able map twf constructs ordering contingency alternative conditional iteration model 
model derive necessary sufficient conditions correct schedules 
results reduce difficulty determining correctness twf finding schedules 
model currently deals management failures 
extending model twf system manage concurrent executions 
aae alonso agrawal el abbadi kamath mohan 
advanced transaction models workflow contexts 
research report rj ibm almaden research center harry road san jose ca usa july 
bhg bernstein hadzilacos goodman 
concurrency control recovery database systems 
addison wesley 
dig digital 
dec db integrator handbook 
digital maynard massachusetts edition january 
dou dale dougherty editor 
power programming rpc 
reilly associates 
elm elmagarmid editor 
database transaction models advanced applications 
morgan kaufmann 
gr gray reuter 
transaction processing concepts techniques 
morgan kaufmann 
lab unix system laboratories 
system release product overview 
lin user guide 
levy korth silberschatz 
optimistic commit protocol distributed transaction management 
clifford king editors proceedings acm sigmod international conference management data volume pages 
lynch merritt weihl fekete 
atomic transactions 
morgan kaufmann 
lr leymann roller 
business process management flowmark 
accessible www software ibm com workgroup flowmark htm 
manola georgakopoulos hornik brodie 
distributed object management 
international journal intelligent cooperative information systems march 
rusinkiewicz klas muth 
cooperative transaction model cooperative activity model 
proceedings th vldb conference pages 
vldb september 
rs rusinkiewicz sheth 
specification execution transactional workflows 
kim editor modern database systems object model interoperability 
addison wesley 
shm shirley hu 
guide writing dce applications 
reilly 
tra transarc 
distributed transaction processing osf dce september 
white 
yw sheth 
schek weikum 
merging application centric data centric approaches support transaction oriented multi system workflows 
sigmod records 

