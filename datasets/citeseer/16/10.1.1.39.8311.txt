circular compositional reasoning liveness mcmillan mcmillan cadence com cadence berkeley labs addison st berkeley ca usa mcmillan cadence com 
compositional proofs systems components involve apparently circular arguments 
correctness component assumed verifying component vice versa 
apparent circularity arguments resolved induction time 
previous methods circular compositional reasoning apply safety properties 
presents method circular compositional reasoning applies liveness properties 
new circular compositional rule implemented smv proof assistant 
method illustrated algorithm order instruction execution 
implementation proved live arbitrary resources compositional model checking 
fl cadence berkeley labs cadence design systems 
compositional methods conjunction model checking reduce verification large systems number smaller localized verification problems 
necessary model checkers limited state explosion problem 
compositional techniques implemented example smv model checking system mcm mocha system 
methods originally described terms assumption guarantee paradigm pnu 
component system specified terms properties assumes environment properties guarantee provided assumptions hold 
process assumes guarantees compose process guarantees assumptions infer modular verification paradigm gl 
limitation approach composing processes necessary assume correctness verify vice versa 
place assumption guarantee chain process satisfies useful properties absence environment assumptions 
abadi lamport showed somewhat surprising fact certain restrictions processes properties proved prove assuming prove assuming hold 
restrictions essentially follows processes modify disjoint subsets system variables interleaved manner property safety property restrict state variables process 
assumptions show truth time depend holding time gamma vice versa 
proved mutual induction time 
argument hold contained operators refer 
technique restricted safety properties temporal logic properties expressible form gp past time formula 
alur henzinger ah extended approach case processes properties represented synchronous mealy machines 
relaxes requirement interleaving concurrency allows safety properties verified 
mutual dependence liveness properties occur real systems 
consider example problem multiple execution units instruction set processor 
times instruction unit may depend result instruction unit times inverse relation may hold 
order prove unit live eventually produces result assume live vice versa 
introduce compositional technique allows kind reasoning 
essence explicit induction time implied approach assuming property time gamma proving time vice versa 
condition gamma implies expressible temporal logic 
proof subgoals generated rule verified model checking 
proof rule integrated proof assistant smv model checking system 
extends technique mcm applied safety properties 
integration circular proof rule various reduction techniques including symmetry reduction temporal case splitting data type reduction possible verify liveness systems unbounded arrays illustrate algorithm example 
remainder structured follows 
section background provided smv system various reduction techniques implements 
section circular compositional rule introduced soundness proved 
generalized somewhat allow reasoning systems zero delay communication mealy machines 
implementation rule smv discussed including optimizations improve veri model refinement relations implementation fig 

compositional refinement verification fication complexity common cases including refinement verification 
section illustrates application rule example algorithm 
background smv system supports approach compositional model checking geared proving model acting system specification implemented detailed system model 
notion correctness usually defined terms refinement maps relate signaling behavior suitable points implementation events occurring model see fig 

typically model implementation refinement maps expressed hdl language sets equations may involve time delay 
formally view simply linear temporal logic properties 
refinement maps decompose system structurally smaller parts separate verification 
rely circular compositional rule allows assume map temporal property holds true verifying map vice versa 
assume signal correct model verifying signal assume signal correct model verifying signal possible compositionally verify systems cyclic data flow instruction set processors 
implemented prior mcm circular rule applied properties expressed assignments class safety property 
symmetry reduction addition smv system exploit symmetry design reduce large number symmetric proof obligations small number representative cases 
symmetric data types called borrowed murphi language id 
order exploit symmetry data type guarantee values type certain symmetric ways 
particular may compared equality indices arrays finite arrays scalarset types may summed commutative associative operator 
smv ensures conditions hold applying appropriate type checking rules programs 
details methods reader referred mcm 
temporal case splitting system contains large regular array structure memory register file fifo buffer confine verification problem elements large array means temporal case splitting rule 
rule verify time data items passed fixed element array 
allows consider individually path data item take system reduce number state variables model checking problem accordingly 
temporal case splitting rule breaks proof goe cases value variable possible value show oe true just times times value infer oe true times 
oe holds range variable gp hold 
typically auxiliary variable remembers location large data structure store item currently appearing unit output 
prove subgoal value commonly necessary necessary refer element array 
effectively decomposed large array individual components purposes model checking 
data type reduction large data structures decomposed components may large data types addresses data words 
case data type reduction 
reduces large infinite type small finite containing values relevant case verified 
remaining values represented single value 
corresponding data abstraction interpretation operations 
abstraction conservative property valid reduced structure valid original structure 
example comparing values equality result unknown value 
property proved reduced structure true original 
hand possible truth value property reduced structure case obtain information 
reduction combination temporal case splitting symmetry reduction model checking possible properties systems unbounded arrays mcm 
circular compositional rule consider problem extending circular compositional reasoning liveness properties 
framework linear temporal logic ltl formalize inference rule circular compositional reasoning prove soundness 
defining model logic 
note notion process process composition system 
example tla lam process simply temporal property 
standard linear temporal logic 
model oe infinite sequence states oe oe 
formula atomic proposition xq formulas 
exact definitions state atomic proposition relevant omit 
notation oe indicate model oe satisfies formula ith state 
relation satisfy standard definition definition 
models oe formulas oe 
oe oe iff oe oe 
oe oe iff oe oe oe 
oe oe iff exists oe oe 
oe xoe iff oe oe 
say oe oe oe oe take initial interpretation formulas oe oe valid oe oe models oe 
addition usual abbreviations example fp eventually equivalent true gp henceforth equivalent suppose collection formulas prove gp properties hold times 
fix founded order oe formulas transitive irreflexive relation infinite backward chains 
intuitive meaning order oe may assume time proving time may assume time gamma 
proposition denote delta set propositions assumed time proving theta set assumed time necessity element theta oe 
including may element delta allows construct apparently circular arguments 
notion time gamma implies time expressed formula logic operator theorem theorem 
sets gamma formulas founded order oe sets delta theta delta implies oe gamma delta theta gp proof 
lexical order theta 
iff oe order founded 
oe model gamma suppose contradiction pair oe founded may suppose loss generality minimal pair 
founded order nonempty set minimal element 
follows oe delta oe theta oe delta theta contradiction 
prove gp suffices prove gamma delta theta note linear temporal formulas validity verify model checking methods 
viewed problematic known algorithms ltl model checking exponential formula size 
observe shortly certain common cases problem reduced model checking ctl formula size 
particular restricted class properties covered mcm recover complexity 
proof graphs smv system applies theorem context proof graph 
framework supports assumption guarantee style reasoning assume time prove time circular compositional reasoning assume time gamma 
proof graph directed graph vertices propositions proved edge indicates proposition assumed proving subset edges identified unit delay edges 
assumed time gamma proving time graph obtained deleting unit delay edges founded infinite backward paths 
finite case equivalent saying acyclic 
complete proof graph may fact cyclic 
required cycle contains unit delay edge 
strongly connected component graph corresponds application circular compositional rule 
particular formula cycle form gp may apply circular rule 
formulas cycle may form 
suppose proposition gp cycle 
strongly connected component containing gp 
delta set propositions gp gp gp theta subset gp gp strongly connected component graph predecessor unit delay edge assumed time gamma predecessor normal edge assumed time denote gamma set propositions gp set predecessors cycle gp 
proposition cycle gamma set theorem 
union strongly connected components 
gp oe gamma delta theta oe gamma oe proof 
transitive irreflexive closure iff path path 
founded order 
suppose cycle 
predecessor satisfies induction may assume oe gamma modus ponens oe suppose contrary gp strongly connected component predecessor satisfy path contradiction 
induction may assume oe gamma modus ponens oe delta theta 
oe iff founded order satisfying conditions theorem 
oe order apply circular compositional rule smv supply set properties proved proof graph 
theorem construct sufficient set proof obligations form ltl formulas 
implementing rule smv smv language property specified syntax name 
assert formula specifying proof graph properties referred names 
arc proof graph specified follows 
prove respective names properties unit delay arc specified putting assumption parentheses follows 
prove smv verifies cycle proof graph cut unit delay arc simple example example consider token ring time step token owner passes token successor ring 
simple representation protocol smv language forall boolean init mod boolean variable indicates process holding token 
initially process holds token 
suppose prove compositionally process holds token infinitely 
specified smv follows forall assert specifies property process stating true infinitely 
course eventually hold predecessor mod eventually holds 
write proof graph forall mod prove smv rightly complain proof graph cyclic 
need introduce unit delay edges graph way breaks cycle 
passing token involves unit delay infer sufficient assume mod time gamma prove time unfortunately argument works times time gamma 
unit delay arc prove property holds assumptions 
fortunately true process holds token initially 
true initially independent processes 
fortunately unit delay arc sufficient break cycle 
proof graph forall prove prove proof subgoals resulting circular compositional rule gamma gamma gamma verified locally just definition variable abstracting away processes 
course reduction unnecessary practice number states entire system case 
demonstrates principle decomposing liveness properties circular compositional rule 
section ll see trivial example 
checking subgoals efficiently proof subgoals generated circular compositional rule ltl formulas 
disadvantage ltl opposed branching time logic ctl model checking complexity ltl exponential formula size ctl linear time 
see section significant special cases circular compositional rule generates ltl proof subgoals translated linearly ctl 
especially significant case refinement verification compositional rule show system implements model vis vis refinement relation 
case formulas resulting circular compositional rule quite large set formulas proved rule consist large fraction system description 
model checking ltl model checking problem ltl determine infinite path finite state graph model formula 
done adding new boolean state variable model corresponding occurrence temporal operator formula bcm 
note cost increase state space size factor exponential number temporal operators formula 
constraints variables added transition relation corresponding fixed point characterizations temporal operators 
example denote state variable associate subformula xv note xv denotes value state variable time 
view equivalence constraint transition relation 
fact set states satisfying set satisfying equivalence 
obtained adding fairness constraint gf model 
effect rules case true forever holds 
constraints easily shown equivalent means having added constraints model substitute occurrence formula 
having performed substitution temporal operator formula remains boolean formula true initial state 
original formula true paths original model derived boolean formula true initially fair paths extended model 
existence path determined time linear size extended state graph number fairness constraints 
fact derived formula trivially ctl contains temporal operators simply ctl model checker purpose 
symbolic ctl model checker bcm process simpler transition relation case expressed boolean constraint current values state variables 
transition constraints derived ltl formula simply conjoined transition relation original model 
noted procedure linear state graph size exponential formula size model expanded exponential factor formula size 
observed state graph usually derived compact representation program text boolean formula characterizing transition relation 
practice ctl ltl model checking exponential number state variables model 
desirable possible eliminate exponential dependence formula size restrict complexity problem function number state variables 
certain common cases including refinement verification translating ltl formula linearly slightly extended version ctl avoiding exponential construction 
exponential practice 
problem pspace complete 
extending ctl noted emerson eh ctl viewed subset general branching time logic ctl 
ctl define path formula ltl formula state formulas state formula atomic proposition path formula prepended path quantifier state formula respectively true state path formula true path respectively paths state 
ctl subset logic path formulas allowed xp state formulas 
extend allowable path formulas slightly changing model checking complexity ctl 
particular transition formula boolean combination state formulas formulas form xp state formula 
example state formulas xq transition formula transition formula xq state formula 
transition formula characterizes set transitions model 
note model contains non boolean state variables extend notion transition formula contain terms refer value variable example valid transition formula logic includes function symbol predicate 
extension alter results 
extend logic ctl defining subset ctl restricted path formulas transition formulas formulas form transition formula state formula 
easily see model checking remains linear time extended modalities provide symbolic algorithms 
rewrite transition formula binary predicate states replace occurrence state formula occurrence xq 
example bcm relational mu calculus characterize set states satisfying ep ap transition formula ep ap transition relation model 
clearly sets computed time linear size relation number operators computed sets state formulas 
modalities transition formula obey fixed point characterizations xq xq note xq transition formula state formula 
sets xq xq computed characterization 
fixed points give direct algorithm tarski fixed point theorem evaluating modalities 
naive explicit state application algorithm quadratic time linear time algorithm obtained idea ces algorithm ces problematic case simply backward bfs keeping count number outgoing edges state satisfying xq state need visited 
symbolic linear time explicit state algorithms model checking extended version ctl 
checking circular compositional rule proof subgoal generated circular compositional rule form gamma delta theta oe gamma delta theta conjunctions sets formulas 
intuitively formulas gamma assumed hold initially delta assumed hold time gamma theta assumed hold time proving oe time consider special case formulas delta theta transition formulas defined formulas gamma boolean combinations state variables initial conditions formulas form gp transition formula words transition invariants 
typical forms formulas occur refinement verification mcm 
special case see model checking problem formulas form translated linearly ctl model checking problem 
eliminate formulas gamma simply converting constraints initial state transition relation model 
suppose denote finite kripke model initial states characterized boolean formula transition relation characterized transition formula boolean formula transition formula gq iff ip rq eliminating gamma way left formula delta theta oe 
note formula true paths model starting initial state 
implicitly path quantifier front formula 
pushing path quantifier initial negation obtain delta theta oe note assumption subformulas transition formulas formula extended version ctl 
checked time linear model size 
fact slightly better practice computing fixed point eu modality restrict model states reachable initial states transitions satisfying delta 
note general ctl model checking restrict computation set states infinite fair paths 
case transition relation known total fairness constraints know state infinite fair path 
case checking formula reduces reachability analysis formula true iff path initial state state satisfying theta oe transitions satisfying delta 
note case subformulas transition formula reduce simply adding new state variables disallowed operators substituting state variables corresponding subformulas 
example set delta contained formula xf replace adding constraints xv gf model substituting formula obtain transition formula xv case proof subgoals exactly fit linear time case may substantially reduce number state variables added model basis exponential complexity model checking ltl 
optimizations implemented smv 
result circular rule assignments comprise system description contribute exponential complexity formula size associated ltl model checking 
verifying version algorithm consider concrete example circular compositional rule prove liveness system compositionally localized model checking 
functional verification design described mcm 
consider verification liveness 
algorithm algorithm tom allows instruction set processor execute instructions dataflow order sequential order 
increase throughput unit allowing instructions processed parallel avoiding pipeline stalls due hazards 
pending instruction held reservation station values operands available issued order execution unit 
flow instructions implementation algorithm pictured 
instruction arrives fetches register file val tag operands val tag val tag val tag val tag op dst opr opr reservation stations op dst opr opr op dst opr opr eu eu eu tagged results ops instructions execution pipelines fig 

flow instructions algorithm operands special register file 
register file holds actual value tag indicating reservation station produce register value completes 
instruction operands values tags stored reservation station rs 
rs watches results returning execution unit result tag matches operands records value place tag 
rs values operands may issue instruction execution pipeline 
tagged result returns pipeline rs cleared result value needed stored destination register 
subsequent instruction modified register tag result discarded 
value sequential execution overwritten 
addition alu instructions implementation includes instructions read register values external output write values external input 
stall output indicating instruction currently received 
stall happen available rs store instruction value register read output available 
structural decomposition prove instruction reservation station eventually terminates 
proof functional correctness mcm step proof break verification problem lemmas apply circular compositional rule 
lemma details example tutorial smv included smv software 
time writing software tutorial downloaded url www cad eecs berkeley edu smv 
states operands required instruction reservation station eventually arrive reservation station 
second states result instruction reservation station eventually arrives result bus reservation station eventually cleared 
operand liveness lemma prove result liveness vice versa 
smv specification operand liveness lemma operand forall tag live assert st valid 
st valid tag type reservation station indices 
reservation stations lemma live states station valid contains instruction operand eventually valid hold value tag 
similar lemma stated operand 
result liveness lemma just simply stated forall tag live assert st valid 
st valid reservation stations lemma live states station valid contains instruction eventually cleared 
note reservation station cleared result returns result bus 
path splitting apply model checking directly point verify lemmas state space large small instances design 
state space explosion case chiefly due large arrays design register file array reservation station array execution unit array 
break verification problem cases function particular path taken data item operand result producer consumer 
example consider source operand instruction stored reservation station time 
call reservation station consumer operand 
source operand destination operand previous instruction assigned reservation station call producer operand 
note consumer reservation station holds tag fact pointer producer reservation station 
operand produced stored register destination register producer source register consumer 
analysis suggests case split reduce size verification problem just reservation stations register 
prove liveness operands arriving consumer reservation station split cases producer reservation station indicated tag operand intermediate register indicated source operand index instruction 
prove case need reservation stations register elements arrays abstracted away 
apply temporal case splitting smv declaration operand forall tag reg subcase live live st tag aux consumer reservation stations breaks operand liveness lemma array cases producer reservation station source register 
note added auxiliary variable aux model remember source operand register reservation station implementation store information auxiliary variables described mcm 
naturally order prove operands consumer reservation station eventually arrive assume producer reservation station eventually produces result 
hand clearly assume operands instruction eventually arrive order prove eventually produces result 
circular compositional rule comes play 
note producer instruction enters machine time unit consumer instruction fact consumer comes hold tag pointing producer 
prove consumer operand eventually arrives instructions arriving time sufficient assume results eventually arrive producer instructions arriving time gamma 
smv add arcs proof graph operand forall tag reg live prove live proving live time assume live time gamma 
verifying case requires register reservation stations model 
fact default data type reductions mcm automatically eliminate reservation stations register reduce types register indices tags values respectively 
effectively broken large data structures components verification purposes 
mcm symmetry techniques automatically reduce cases need verify just representative cases 
result liveness lemma consider possible paths data item producer consumer 
case operands sent reservation station execution unit operation applied 
result returned result bus tagged reservation station turn clears reservation station 
prove liveness results reservation station split cases execution unit 
presents problem time instruction enters reservation station execution unit determined 
possible split cases value variable declaration forall tag eu subcase live live aux eu st issued creates case live execution unit case states result eventually arrive times instruction execution unit time reservation station issued state 
note derived temporal operator 
formula true iff holds time holds definition true case holds 
formula just abbreviation 
smv recognizes time true value set cases complete 
prove instruction execution unit eventually terminates assume operands eventually arrive 
add arcs proof graph forall tag eu live live prove live note assume operand liveness lemma time proving result liveness lemma time gamma 
allowable cycles proof graph broken unit delay arc issues fairness implementation contains number arbiters functions example choose reservation station issue execution unit execution unit execution unit complete returning result result bus 
proving functional correctness design arbitration choices left completely free words abstraction arbiter outputs just free variables 
prove liveness require arbiters fair example instruction reservation station ready issued eventually chosen execution 
possible introduce actual implementation arbiter proof break symmetry reservation stations execution units 
simply introduce assumption fairness 
way smv follows forall tag assert 
assertion issue fair says reservation station remains ready state eventually issued execution unit 
assertion break symmetry index types allows symmetry data type reductions verify design generically number reservation stations execution units 
course prove actual arbiter implementation satisfies fairness assertion 
done locally cost breaking symmetry high 
general symmetry breaking nature arbiters appears practical away stating fairness properties verifying arbiters separately 
fairness assertion proving result liveness add proof graph forall tag eu prove live note fairness assertion issue fair enter circular compositional rule cycle proof graph 
assumed initially time property proving live 
summary result applying described proof decomposition set proof subgoals solved model checking false yield sequential counterexamples 
implementation algorithm shown satisfy lemmas arbitrary finite infinite number registers reservation stations execution units assuming arbiters fair 
told model checking subgoals maximum state variables 
verification time including generation proof goals model checking cpu seconds mhz pentium ii processor 
seen mutual dependence liveness properties occur practice example case processors multiple execution units 
situation standard assumption guarantee approach compositional verification followed 
proof independent data word size alu functions supported liveness depend data path 
appropriate circular compositional rule combined model checking prove mutually dependent liveness properties induction time 
rule obtained extending technique safety verification mcm 
resulting proof goals linear temporal formulas care taken insure assertions deriving system description contribute exponential state space explosion addition tableau variables 
accomplished part extension branching time logic ctl include modalities containing transition formulas 
circular compositional rule implemented smv system fits framework including temporal case splitting symmetry reduction data type reduction 
possible verify liveness systems large unbounded arrays model checking 
possible temporal case splitting facility smv extended allow case splitting value variable 
case algorithm structure liveness proof including case splits followed exactly functional proof mcm 
main difference prove liveness necessary add fairness assumptions arbiters 
hand data path logic necessary liveness depend data path 
note proof quite succinct consisting line temporal assertions corresponding proof graph declarations case splitting declarations 
due fact model checking handle details proof 
turn possible case splitting data type reduction effect property specific abstraction 
ah alur henzinger 
reactive modules 
th annual ieee symp 
logic computer science lics 
alur henzinger mang qadeer rajamani 
mocha modularity model checking 
hu vardi editors conference computer aided verification cav number lncs pages 
springer verlag 
abadi lamport 
composing specifications 
acm trans 
prog 
lang 
syst jan 
bcm burch clarke mcmillan dill hwang 
symbolic model checking states 
information computation jun 
ces clarke emerson sistla 
automatic verification finite state concurrent systems temporal logic specifications 
acm trans 
program 
lang 
syst 
eh emerson halpern 
revisited versus linear time temporal logic 
acm 
gl orna grumberg david long 
model checking modular verification 
baeten groote editors concur volume lncs 
springer verlag august 
id ip dill 
better verification symmetry 
formal methods system design aug 
lam lamport 
temporal logic actions 
research report digital equipment systems research center dec 
mcm mcmillan 
verification implementation algorithm compositional model checking 
hu vardi editors conference computer aided verification cav number lncs pages 
springer verlag 
mcm mcmillan 
verification infinite state systems compositional model checking 

eecs berkeley edu papers ps gz february 
pnu pnueli 
transition global modular temporal reasoning programs 
logics models concurrent systems nato asi series pages 
springer verlag 
tom 
efficient algorithm exploiting multiple arithmetic units 
ibm research development jan 

