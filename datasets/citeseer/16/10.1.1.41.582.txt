generative programming active libraries extended krzysztof czarnecki ulrich eisenecker robert gluck david vandevoorde todd veldhuizen daimlerchrysler ag research technology ulm czarnecki acm org heidelberg ulrich eisenecker online de university copenhagen dept computer science diku dk edison design group vandevoorde com indiana university computer science dept acm org 
describe generative programming approach generating customized programming components systems active libraries approach 
contrast conventional libraries active libraries may contain metaprograms implementing domainspecific code generation optimizations debugging profiling testing 
working examples illustrate potential active libraries 
discuss relevant implementation technologies 
main goal generic programming improve reusability providing parameterized components instantiated different choices parameters 
standard template library remarkable generic algorithms orthogonally combined generic container representations 
aims generative programming resemble generic programming differ important aspects enhance power generic programming 
generative programming sect 
modeling families software systems software entities particular requirements specification highly customized optimized instance family automatically manufactured demand elementary reusable implementation components means configuration knowledge see 
generative programming involves phases software development process specification software entities design implementation generative software systems mapping hardware constraints space speed 
refer libraries apply concepts generative programming active libraries sect 

active libraries require implementation technologies provided traditional compilers sect 

illustrate ideas working examples generative matrix computation library sect 
libraries generate cus components tau package sect 
extensible profiling tool system sect 
extensible compilation 
generative programming goals principles goal modern programming design domain specific abstractions implement abstractions programming language 
providing abstractions deal major problems domain specific knowledge may get lost implementation exists semantic gap domain specific abstractions features offered programming language flexibility generality design may incur considerable performance penalties runtime 
generative programming gp approach generating customized components systems 
goals decrease conceptual gap domain concepts program code known achieving high intentionality achieve high reusability adaptability simplify managing variants intermediate products increase efficiency space execution time 
meet goals gp deploys principles parameterization differences generic programming parameterization allows represent compact way families components components commonalities 
analysis modeling dependencies interactions parameter value combinations valid values parameters may imply values parameters 
dependencies referred horizontal configuration knowledge occur parameters level abstraction 
overhead elimination domain specific optimizations generating components statically compile time overhead due unused code run time checks unnecessary levels indirection may eliminated 
complicated domain specific optimizations may performed example loop transformations scientific codes 
separating problem solution spaces problem space consists application oriented concepts features application designers express needs solution space contains elementary reusable implementation components generic components may combined analyzed transformed metaprograms order produce desired software entity 
configuration knowledge map problem space solution space 
configuration knowledge may capture specific information default settings parameter dependencies illegal feature combinations specific construction optimization rules 
distinction problem space solution space configuration knowledge allows specification systems features generic programming expects parameters instantiate concrete component 
separation concerns term coined dijkstra refers importance dealing important issue time 
avoid program code deals issues simultaneously generative programming tries separate issue distinct set code 
pieces code combined generate needed component 
idea borrowed aspect oriented programming 
generative programming programming paradigms goals similar generative programming generic programming domain specific languages dsls aspect oriented programming aop 
generative programming broader scope borrows important ideas generic programming may summarized reuse parameterization 
generic programming allows components extensively customizable retain efficiency statically configured code 
technique eliminate dependencies types algorithms necessary 
example iterators allow generic algorithms efficiently dense sparse matrices 
generic programming limits code generation substituting concrete types generic type parameters welding pre existing fragments code fixed pattern 
allow generation completely new code 
generative programming general provides automatic configuration generic components specifications powerful form parameterization 
example automatic configuration allows parameters optimization flag speed space accuracy 
parameters map configurations implementation components just single parameter components 
domain specific languages dsls provide specialized language features increase abstraction level particular problem domain allow users closely domain concepts cost language generality 
domain specific languages range widely languages numerical symbolic computation mathematica known languages telephone switches financial calculations name just application domains 
dsls able perform domain specific optimizations error checking 
hand traditional dsls typically lack support generic programming 
shortcomings traditional dsls may overcome embedding dsls existing languages advocated 
aspect oriented programming current programming methods notations concentrate finding composing functional units usually expressed objects modules procedures 
properties error handling synchronization expressed cleanly locally current object oriented notations languages cleanly localized way 
expressed small code fragments scattered functional components 
aspect oriented programming aop decomposes problems functional units aspects error handling synchronization 
aop system components aspects woven obtain system implementation contains intertwined mixture aspects components called tangled code 
weaving performed compile time compiler preprocessor runtime dynamic reflection 
case weaving requires form metaprogramming see 
generative programming wider scope includes automatic configuration generic programming techniques provides new ways interacting compiler development environment 
putting generative programming concept generative programming encompasses properties previous paradigms additional techniques achieve goals listed sect 
dsl techniques improve intentionality program code enable domain specific optimizations error checking 
aop techniques achieve separation concerns isolating aspects functional components 
generic programming techniques parameterize types iterators separate data storage traversal aspects 
configuration knowledge map problem space solution space 
different parts configuration knowledge different times different contexts compile time runtime 
active libraries noted previous section generative programming requires metaprogramming weaving automatic configuration 
supporting domain specific notations may require syntactic extensions non textual interactive representations 
libraries generative programming ideas need implementation code implement syntax extensions rendering textual non textual program representations perform code generation apply domain specific optimizations 
active libraries passive collections routines objects traditional libraries take active role generating code 
active libraries provide abstractions optimize abstractions 
may generate components specialize algorithms optimize code automatically configure tune target machine check source code correctness report compile time domain specific errors warnings 
may describe stretching traditional meaning library imply specific packaging technology 
tools profilers debuggers intelligible way provide domain specific debugging profiling testing code 
may contain code rendering domain specific textual non textual program representations interacting representations 
perspective forces redefine conventional interaction compilers libraries applications 
active libraries may viewed knowledgeable agents interact produce concrete components 
agents need infrastructure supporting communication agents code generation transformation interaction programmer 
types active libraries active libraries possess different levels sophistication characterized type metaprogramming active libraries extend compiler ii active libraries extend environment provide domain specific tool support iii active libraries contain analyze transform domain specific concepts different times different contexts 
extending compiler active libraries may extend compiler providing domain specific abstractions automatic means producing optimized program code 
may compose specialize algorithms automatically tune code target machine instrument code 
generative matrix computation library examples libraries extend compiler sect 

domain specific tool support active libraries may extend programming environment provide domain specific debugging support domain specific profiling code analysis capabilities 
example interaction tau sect 

example programming platform supports ideas extended metaprogramming described intentional programming ip system 
extended metaprogramming active libraries may contain executed compile optimize adapt debug analyze visualize edit domain specific abstractions 
active libraries may generate different code depending deployment context example may query hardware operating system architecture 
furthermore may different times different contexts example compile time knowledge context properties remain stable runtime may perform optimizations compile time may injected application allow optimization reconfiguration runtime 
implementation technologies active libraries require languages techniques open programming environment 
issues need addressed constructing active libraries language support transformation analysis tool interfacing 
survey issues section 
list technologies believe relevant time writing put existing generators 
language support key issue construction active libraries support generative tasks implementation language 
generative programming novel concept existing languages equipped 
templates language includes compile time processing abilities quite accident byproduct template instantiation 
nested templates allow compile time data structures created manipulated encoded types basis expression templates technique 
template metaprogram technique exploits template mechanism perform arbitrary computations compile time metaprograms perform code generation selectively inlining code metaprogram executed 
technique proven powerful way write code generators 
extensible compilation metalevel processing metalevel processing systems library writers ability directly manipulate language constructs 
analyze transform syntax trees generate new source code compile time 
mpc metalevel architecture system provides capability language 
mpc allows library developers extend syntax language certain ways example adding new keywords 
examples metalevel processing systems open sect 

important differentiating factor metalevel processing system implemented pre processor open compiler extensible programming environment ip 
potential disadvantage metalevel processing systems complexity code write modern languages complicated syntax trees code manipulates trees tends complex 
situation improved replacing direct manipulation syntax trees declarative metalanguage manipulating code 
example fog system provides metalanguage 
meta languages program generation specific metacomputation task stretches capabilities usual programming languages 
programming languages support code manipulation transformation 
design implementation generative programming languages requires novel concepts type systems 
important concept stems area partial evaluation level generally multi level programming languages 
level languages contain static code evaluated compile time dynamic code compiled executed run time 
multi level languages provide simpler approach writing program generators see example system 
program transformation key issue construction active libraries program analysis transformation optimize weave implementation code 
exactly activities take place depends binding times library components specifications 
fundamental operations essence wide spectrum automatic transformation methods program specialization program composition program inversion 
shortly discuss program specialization program composition transformation programs run time 
program specialization provides means tailor generic highly parameterized components specific needs applications 
best developed specialization techniques partial evaluation 
extensive theory literature specialization code generation developed field 
important discovery concept generating extensions unifies wide class apparently different program generators 
examples include parsing translation theorem proving pattern matching 
partial evaluation components handle variability run time transformed component generators generating extensions terminology field handle variability compile time 
futamura projections provide theoretical cornerstone technique 
cases transformations avoid need library developers complex meta level processing systems 
automatic tools turning general component component generator generating extension exist various programming languages prolog scheme see 
program composition construction software sharing combining existing implementation components main activity producing customized software 
unfortunately program hierarchies modularity come free add intermediate data structures redundant computations interface code error checking 
program composition techniques remove redundancies allow fusing components paying unacceptably high price 
runtime code generation systems allow libraries generate customized code run time 
possible perform optimizations depend information available run time example structure sparse matrix number processors parallel application 
examples systems generate native code tick fabius 
code generation speeds high cycles generated instruction achieved 
runtime code modification achieved dynamic reflection facilities available languages smalltalk clos 
interfacing concept active libraries requires redefine interaction traditional programming tools 
mentioned self instrumentation active libraries allows new possibilities profiling debugging program analysis 
extensible tools provide domain specific support programming environments need tools provide hooks libraries define customized debugging support profiling examples tools tau sect 
intentional programming system 
examples active library extending compiler projects scientific computing fit description active libraries 
trend result main factors desire high level abstractions closely model problem domain inability traditional compilers optimize abstractions 
describe libraries 
library provides array objects similar fortran 
largest performance problem arrays temporaries result overloaded operators 
solves problem expression templates technique allows generate custom evaluation kernels array expressions 
library performs loop transformations tiling reordering collapsing unit stride optimizations previously responsibility optimizing compilers 
generates different code depending target architecture 
template metaprogram technique generate specialized algorithms operations small vectors matrices 
generative matrix computation library able generate matrix components selected combination features element types real numbers density dense sparse storage formats row columnwise sparse formats memory allocation dynamic static error checking bounds compatibility memory allocation operations addition subtraction multiplication 
combinations features valid specified configuration dsl 
configuration dsl form parameter space component configured number parameters parameter values parameterized 
particular configuration expression translated concrete configuration generic components 
currently exist implementations intentional programming system see details 
widespread expression templates generative programming idioms template metaprogramming facilities control structures static metaprogramming 
demonstrates translation matrix configuration expression configuration generic components 
translation performed template metaprogram 
contains generator generating efficient implementations matrix expressions 
generator reads properties operands configuration repositories 
typedef matrix int structure dense space checking check bounds matrix generator ret matrix rect dyn fig 

sample code specifying rectangular dense matrix bounds checking 
generated matrix type shown gray area 
implementation matrix component comprises lines code lines configuration generator matrix components lines operations 
matrix configuration dsl covers different kinds matrices 
despite large number supported matrix variants performance generated code comparable performance manually coded variants 
achieved exclusive static binding combined inlining 
example active library domain specific tool support tau package tuning analysis parallel programs 
profilers tau allows libraries instrument 
self instrumentation solves important problems associated tracing profiling large libraries 
libraries layers user level layer layers internal implementation routines 
automatic instrumentation mixes layers may result swamp hard interpret information 
problem compounded template libraries long symbol names template instances 
self instrumentation tau offers active libraries profilers tracers understandable way time spent internal routines properly attributed responsible interface routines complex symbol names especially template routines rewritten conform user view library 
example uses pretty printing describe expression templates kernels tau 
users profile applications see time spent array expressions incomprehensible template types runtime library routines 
extensible translation pronounced chroma system developed vandevoorde specifically support concept active libraries 
describe illustrate detail extensible compilation system metalevel processing 
system provides api manipulating syntax trees framework allows library developers extend compilation process 
syntax trees manipulated called 
parser language produces specified fed translation framework 
grammar language static possible add new syntax structures 
translation extensible defining new transformations 
language describes transformations code act 
source parser checker templates modules expander engine code generator binder fig 

general organization libraries composed modules collections types procedures templates 
modules may contain active components able generate transform code 
components system exposes components checker expander module manager template manager binder 
active components attach components 
output binder file interpreted engine fed traditional optimizing code generator 
binder activate modules implement domain specific global optimizations 
checker role verify semantic consistency types procedures templates 
elements active component attached component take control checking 
example relax type matching requirements call site available procedure declarations overload set ensure early enforcement template instantiation assumptions 
expander second pass reduce application specific nodes syntax tree generic set nodes understood binder 
active component want take control translation procedure type template 
usually desirable intercept specific constructs 
system allows events captured active libraries checker expander time type procedure template definitions call sites overload resolution object definitions constructor calls template instantiation 
example example demonstrates miniature active library enforces constraint template type arguments type template instantiated type 
modules active library second implements library 
module defines template type value parameter may non type enforced component defined module program synonym module xd declare value type export template type type xd value annotation brackets export proc init ref var example uses value proc init module initialization var value int okay ref value int okay var value ref int error 
program module keyword type line similar keyword class 
square brackets denote template parameters line template arguments lines annotations 
annotations line allow programmer attach active components types procedures 
example component indicates template argument checked 
translation system attaches annotation template executes associated active component time attempt instantiate template lines 
special procedure init lines corresponds object constructors module initializers 
definition module module synonym module xt translator export type extends xt export proc init int fg virtual phase xt phase request request init xt virtual generate ref xt context var int template argument number virtual generate ref xt context ref tspec convert xt node tspec arg null xt fatal unexpected non type arg tspec arg xt fatal unexpected ref type xt generate call base module active components implemented objects respond interface provided framework 
active component attaches aspect system method phase line invoked determine stage wishes take control 
stage encountered construct attached method generate line template instantiation invoked current context translation 
example template argument retrieved verification non type argument default instantiation behavior accessible interface called 
approach generating software components call generative programming described active libraries implement approach 
approach advantages conventional passive libraries procedures objects allows implementation highly parameterized domain specific abstractions inefficiency 
examples area scientific computing extensible translation approach applicable problem domains business components network applications operating systems 
summary ability couple high level abstractions code transformation implementation weaving enables development highly intentional adaptable reusable software generating highly optimized applications components 
clear required including research generative analysis design methods domain analysis oo methods development metrics testing techniques generative programs research integrating ideas related areas domain specific languages generators automatic program transformation optimization programs metaobject protocols domain engineering development industrial strength generative programming tools 

bjrner ershov jones editors 
partial evaluation mixed computation 
north holland amsterdam 

chiba 
metaobject protocol 
oopsla pages 

consel hornof noel noy volanschi 
uniform approach compile time run time specialization 
danvy pages 

czarnecki 
generative programming principles techniques software engineering automated configuration fragment component models 
phd thesis 
technical university 

czarnecki eisenecker 
meta control structures template metaprogramming 
home online de home ulrich eisenecker meta htm 

czarnecki eisenecker 
components generative programming 
nierstrasz editor proceedings joint european software engineering conference acm sigsoft international symposium foundations software engineering esec fse toulouse september 
springer verlag 

czarnecki eisenecker 
generative programming methods techniques applications 
addison wesley longman 
appear 

danvy gluck thiemann editors 
partial evaluation volume lecture notes computer science 
springer verlag 

eisenecker 
generative programming gp 
editor modular programming languages volume pages 
springerverlag 

engler 
incorporating application semantics control compilation 
usenix conference domain specific languages dsl october 

engler hsieh kaashoek 
language high level efficient machine independent dynamic code generation 
popl pages 

ershov 
essence compilation 
neuhold editor formal description programming concepts pages 
north holland 

futamura 
partial evaluation computation process approach compiler compiler 
systems computers controls 

futamura 
partial computation programs 
goto furukawa nakajima nakata yonezawa editors rims symposia software science engineering volume lecture notes computer science pages kyoto japan 
springer verlag 

gluck jrgensen 
automatic program generator multi level specialization 
lisp symbolic computation 

gluck 
metacomputation tool formal linguistic modeling 
trappl editor cybernetics systems volume pages singapore 
world scientific 

mock philipose chambers eggers 
run time specialization proceedings acm sigplan symposium partial evaluation semantics program manipulation pepm pages 
acm june 

hudak 
building domain specific embedded languages 
acm computing surveys es dec 

ishikawa hori sato maeda 
design implementation metalevel architecture mpc approach 
reflection 

jones gomard sestoft 
partial evaluation automatic program generation 
prentice hall international international series computer science june 
isbn number 

kiczales home page aspect oriented programming project 
www parc xerox com aop 

leone lee 
lightweight run time code generation 
proceedings acm sigplan workshop partial evaluation semantics program manipulation pages 
technical report department computer science university melbourne june 

marlet thibault consel 
mapping software architectures efficient implementations partial evaluation 
conference automated software engineering pages lake tahoe nevada 
ieee computer society 

musser 
stl tutorial guide programming standard template library 
addison wesley reading ma usa 


anwendung von am beispiel der 
technische chemnitz 
diplomarbeit 

poletto engler kaashoek 
tcc system fast flexible high level dynamic code generation 
pldi 

cuny beckman 
portable profiling tracing parallel scientific applications 
proceedings acm sigmetrics symposium parallel distributed tools pages august 

siek lumsdaine 
modern software tools scientific computing chapter modern framework portable high performance numerical linear algebra 
birkhauser 

home page intentional programming project 
www research microsoft com research ip 

gross 
code composition implementation language compilers 
usenix conference domain specific languages 

taha 
benaissa sheard 
multi stage programming axiomatization type safety 
international colloquium automata languages programming lecture notes computer science aalborg denmark 
springer verlag 

turchin 
concept supercompiler 
acm toplas 

veldhuizen 
expression templates 
report june 
reprinted gems ed 
stanley lippman 

veldhuizen 
template metaprograms 
report may 
reprinted gems ed 
stanley lippman 

veldhuizen 
arrays 
volume lecture notes computer science 

wadler 
deforestation transforming programs eliminate trees 
theoretical computer science 

muchnick 
weaving way past definition rule 
position aspect oriented programming workshop ecoop lisbon june 
available www ee surrey ac uk research csrg fog pdf 
