querying shapes histories rakesh agrawal giuseppe psaila edward wimmers mohamed zait ibm almaden research center harry road san jose ca shape definition language called sdl retrieving objects shapes contained histories associated objects 
small powerful language allows rich variety queries shapes historical time sequences 
interesting feature sdl ability perform blurry matching 
blurry match user cares shape care specific details 
important feature sdl efficient implementability 
sdl operators designed greedy reduce non determinism turn substantially reduces amount back tracking implementation 
give transformation rules rewriting sdl expression efficient form index structure speeding execution sdl queries 
historical time sequences constitute large portion data stored computers 
examples include histories stock prices histories product sales histories inventory consumption assume simple data model database consists set objects 
associated object set sequences real values 
call sequences histories history name 
example stock database associated stock may current address politecnico di milano italy 
permission copy fee part material granted provided copies distributed direct commercial advantage vldb copyright notice title publication date appear notice copying permission large data base endowment 
copy republish requires fee special permission endowment 
proceedings st vldb conference zurich switzerland histories opening price closing price high day low day trading volume 
ability select objects occurrence shape histories requirement arises naturally applications 
example may want retrieve stocks closing price history contains head shoulder pattern 
able specify shapes roughly 
example may choose call trend transitions long limited specified number 
propose shape definition language called sdl 
small powerful language allows rich variety queries shapes histories 
interesting feature sdl capability blurry matching 
blurry match user cares shape care specific details 
example user may interested shape time periods long contains ups 
sdl designed easy natural express queries 
important feature sdl designed efficiently implementable 
sdl operators greedy little non determinism sense multiple match possibilities inherent sdl shape turn substantially reduces amount back tracking implementation 
addition sdl provides potential rewriting shape expression efficient form potential indexes speeding implementation 
sdl benefits rich heritage languages regular expressions earlier symbol description lb ub iv fv slightly increasing transition highly increasing transition slightly decreasing transition highly decreasing transition appears transition zero value non zero value zero nonzero disappears transition non zero value zero value nonzero zero stable final value nearly equal initial value zero initial final values zero zero zero table illustrative alphabet different design focus influences expressions easy write understand optimize evaluate 
example blurry matching sdl reminiscent approximate matching strings patterns time series sdl allows user impose arbitrary conditions blurry match requires user specify conditions completely 
event specification languages active databases concentrate detecting endpoints events concentrating intervals sdl 
seq focused building framework describing constructs various existing sequence models 
organization rest organized follows 
section introduce sdl informally examples formal semantics appendix section discuss design rationale sdl 
discuss expressive power capability blurry matching ease efficient implementability 
section give transformation rules rewriting sdl expression equivalent efficient form 
section describe index structure show speed evaluation sdl queries 
conclude section summary 
expanded version see :10.1.1.40.9926
shape definition language introduce shape definition language sdl informally examples 
formal semantics appendix object database associated named histories 
history sequence real values 
behavior history described considering values assumed history unit time period considering transitions instant 
immediate history generates transition sequence alphabet symbols describe classes transitions 
alphabet syntax specifying alphabet alphabet symbol lb ub iv fv symbol symbol alphabet defined rest descriptors provide definition symbol 
lb ub lower upper bounds respectively allowed variation initial value final value transition 
iv fv zero nonzero specify constraints initial final value respectively transition 
table gives illustrative alphabet consider time sequence 
alphabet transition sequence corresponding zero appears stable disappears depending alphabet transition sequence corresponding time sequence 
example transition sequence corresponding zero stable stable stable ambiguity cause inconsistency query time user specifies particular shape matched 
example user value time time sequence asked stable resolve ambiguity stable zero favor stable 
alphabet time sequence give concrete examples 
notation represent subsequence consisting elements position position inclusive position 
represent null sequence elementary shape see section requires transition 
shape descriptors alphabet language define classes shapes matched histories parts 
application shape descriptor time sequence produces set subsequences match shape subsequence matches result empty set 
depending descriptor null sequence match shape 
convenience user null sequences reported user 
syntax defining shape shape name parameters descriptor shape definition identified means name shape followed possibly empty list parameters see section descriptor shape 
example definition spike shape spike concat definition parameters 
meaning descriptor clear momentarily 
elementary shapes simplest shape descriptor elementary shape 
symbols alphabet correspond elementary shapes 
elementary shape applied time sequence resulting set contains subsequences contain specified elementary shape 
example shape descriptor stable applied time sequence yields set fh 
descriptor zero yields set fh note subsequence contained result set descriptors transition corresponding subsequence satisfies definitions stable zero 
shape descriptor results empty set contains transition 
derived shapes starting elementary shapes complex shapes derived recursively combining elementary previously defined shapes 
describe set operators available purpose 
multiple choice operator 
operator allows shape multiple values 
syntax 
pn shape descriptor 
shape obtained means operator applied time sequence resulting set contains subsequences match shapes 
example shape zero appears applied time sequence yields set fh zero transition appears transition 
concatenation operator concat 
shapes concatenated operator concat concat 
pn shape obtained concat operator applied time sequence shape matched 
matching subsequence matched subsequence immediately element match accepted strictly contiguous example shape descriptor concat stable stable specifies interested detecting upward trend indicated consecutive ups reversed indicated downs followed 
applied time sequence yields set fh 
transition sequence corresponding subsequence stable 
multiple occurrence operators exact atleast atmost 
shapes composed multiple contiguous occurrences shape defined operators exact atleast atmost exact atleast atmost shape obtained exact atleast atmost applied time sequence matches subsequences contain exactly contiguous occurrences shape addition resulting subsequences preceded followed subsequence matches example exact yields 
atleast yields fh 
atmost yields 
shape results empty set subsequence exactly transitions long consisting entirely transitions preceded followed transition 
second shape matched subsequence consisting contiguous transitions 
result third shape merits discussion 
shape atmost matches null sequence positions participate transition 
null sequences answer participate sequence consecutive ups 
final answer case set null sequences report null sequences user see answer 
allowing null sequence match atmost virtue naturally specify concat atleast atmost match corresponding transition sequence 
bounded occurrences operator 
operator interesting sdl operator 
permits blurry matching allowing users state shape giving specific details 
syntax length shape occurrences length specifies length shape number transitions 
shape occurrences forms 
form shape occurrences precisely composition logical operators 
shape defined form applied time sequence resulting set contains subsequences length long terms number time periods transitions contain precisely occurrences shape 
occurrences need contiguous matched subsequence may arbitrary gap 
may overlap 
example shape descriptor specifies interested subsequences intervals long ups 
applied time sequence yields set fh 
transition sequence corresponding subsequence stable 
note subsequence stable answer downs 
example consider shape precisely looking sequences time periods long transitions 
subsequence satisfies constraint 
operators precisely confused multiple occurrence operators exact atleast atmost 
class operators introduce shapes matched appear operator constrain sub shapes 
importantly precisely allow overlaps gaps exact atleast atmost 
second form shape occurrences inorder 
pn shape descriptor 
shape obtained form applied time sequence resulting subsequences length long contains shapes pn order 
may overlap may arbitrary gap 
example shape descriptor inorder atleast specifies interested subsequences time periods long 
matching subsequence contain subsequence atleast ups followed subsequence intervals long contains downs 
applied time sequence yields set fh stable 
parameterized shapes shape definitions parameterized specifying names parameters parameter list shape name definition shape place concrete values 
example parameterized spike shape spike concat exact exact parameterized shape definition shape parameters bound 
bound concrete values parameters example shape width ht ht width inorder spike ht ht spike ht ht design sdl sdl provides key advantages ffl natural powerful language expressing shape queries ffl capability blurry matching ffl reduction output clutter ffl efficient implementation expressive power sdl sdl express wide variety queries shapes history 
sequence shape type query called continuous matching finds subsequences match shape type query referred regular matching produces boolean indicating entire sequence matches shape 
sdl includes operators concat atleast sdl equivalent expressive power regular expressions regular matching 
equivalence proven :10.1.1.40.9926
sdl designed provide ease expression efficient implementation features enhance effectiveness 
atleast operator variant operator regular expressions provides efficiency gains expressiveness enhancements continuous matching 
operator required number matches allowed nondeterministically exit continue matching atleast greedy operator exit matches 
regular matching case greedy nature atleast cause loss expressive power write shape subsequent shapes affected greedy nature atleast 
details construction :10.1.1.40.9926
case continuous matching greedy semantics atleast allow sdl take advantage contextual information eliminate useless clutter 
example shape atleast sdl find maximal subsequences consecutive ups 
words sdl report non maximal subsequences eliminating useless clutter 
regular expressions able eliminate clutter unable look ahead provide contextual information 
happen consecutive ups history sdl report single subsequence length regular expression report different largely overlapping subsequences subsequences length subsequences length entire subsequence length 
finding subsequences important non greedy version atleast added easily sdl 
ease expression sdl sdl designed easy natural express shape queries 
example atleast operator provides compact representation repetitions natural familiar regular expression notation 
sdl provides non recursive macro facility parameters enhances readability allowing commonly occurring shapes abstracted 
exciting features sdl inclusion operator permits blurry matching user cares shape care specific details 
example indicate subsequence specified operator user specify limiting number downs occur subsequence 
operator simulated regular expressions easy 
details construction involve keeping track times diverse finite entered accepting states :10.1.1.40.9926
operator presents natural method expressing desired shape 
instructive give example 
assume 
disjoint elementary shapes elementary shapes disjoint match transition sequence 
consider problem finding permutation expression matches exactly sequences length precisely occurrence straightforward approach listing possible strings grows 
known permutation expression compacted bit exponential size compaction possible regular expression notation 
see details proofs :10.1.1.40.9926
exponential size required expressing permutations regular expression notation tedious error prone particularly readable 
parameterized shapes macros dramatically reduce size permutation expression 
define inductively parameterized shapes describe permutations elements follows shape shape concat concat shape concat concat concat shape 
concat gamma 

concat gamma 
gamma size permutation expression elements size 
blurring matching provides effective permutation expression 
example precisely 
precisely trick linear size 
instructive examine features blurry matching permit compact permutation expression 
blurry matching permits conjunctive disjunctive expressions 
known adding regular expressions increase expressive power regular expressions permit compact expressions see chapter exercises 
permutation expression example 
regular expression 
ja describe characters 
concatenating copies possible express size sequences length exactly easy see regular expression 
ja gamma ja 
ja 
ja gamma ja 
expresses sequences exactly expressions obtain regular expression conjunctions expresses permutations size 
noted pure regular expression expresses permutations exponential size 
compactness permutation expressions blurry shape notation primarily due fact blurry shapes permit conjunctions 
blurry shapes enhance readability allowing overlap directly regular expressions conjunctions handle overlap indirectly coding overlap different regular expression 
permutation example somewhat contrived permit easy analysis complexity expressive sdl versus regular expressions representative large class blurry queries search shapes may occur order 
efficient implementability sdl semantics sdl specifies operators atleast greedy operator introduces non determinism 
context non determinism means starting point different subsequences match starting particular starting point 
implies amount back tracking sdl implementation needs substantially reduced 
example shape concat atleast atleast normal regular expression semantics evaluator automaton keep searching searching sdl semantics search 
addition sdl provides potential rewriting shape expression efficient form section potential indexes section 
shape rewriting set transformation rules rewrite shape expression equivalent efficient expression 
sdl shape operators classified groups ffl concat exact atleast atmost inorder shape arguments appear specified order overlap 
ffl precisely shape arguments appear specified order overlap 
ffl shape arguments may appear order 
operator rewritten operators belonging group 
idempotence commutativity associativity operator idempotence property duplicates shape removed 
commutativity property shapes permuted 
associativity property useful unnesting similar operators redundant shapes removed idempotence commutativity 
operators idempotent commutative associative 
concat inorder operators associative idempotent commutative 
example application properties associativity commutativity idempotence distributivity concat operators distribute operators concat concat concat deciding form costly match similar problem distributing join union relational query optimization concat result joins result union resulting sets see section 
folding identical shapes concat identical shapes inside concat operator folded exact operator 
example concat 
concat exact number occurrences original shape definition common suffix prefix transformation allows index structure section evaluate exact 
multiple occurrences operators shape expressions involving multiple occurrences operator moo reduced simpler expressions 
transformation rules fall categories depending moo composed moo inside concat inside 
composition 
moo composed moo result depends 
atmost exact 
rule atmost operator shape arguments right hand side rule correspond occurrences atmost argument match 
inside concat 
concat operator applied shape result 
exception matches null sequence case result yielded match null sequence atmost specified number occurrences 
concat atmost 
inside 
operators atmost atleast match range number occurrences specified shape exact matches specified number occurrence 
behavior differs inside 
atmost atleast shape equivalent atmost atleast number occurrences equal maximum minimum original ones 
atleast atleast atleast min atmost atmost atmost max exact shape specify number occurrences reduced exact shape expression remains unchanged 
different inside rules order different written inside important commutative exact atleast atleast atleast gamma exact atmost atmost atmost gamma atmost atleast atleast mn rules consequence rewritings atleast atmost atleast np exact np exact 
exact gamma exact atmost np exact exact 
exact gamma exact np length interval matching performed 
operator composed operators precisely properties 
inside operators properties inside concat operators respectively 
length specified operator guaranteed minimum length shape interval length match performed result empty 
guaranteed minimum length computed shape expression involves precisely 
tempting inorder rewritten operators family allows gaps overlap 
example transformations valid inorder inorder inorder 
precisely indexing straightforward method evaluate shape query scan entire database match specified shape sequence 
propose storage structure show speeding implementation sdl 
storage structure proposed hierarchical storage structure acts index structure consisting layers 
top layer array indexed symbol name alphabet 
size ns ns number symbols alphabet 
elements point instance second layer 
instance second layer array indexed start period occurrence symbol sequence elements point instance third layer 
size array layer np np maximum number time periods time sequence 
instance third layer array indexed maximum number occurrences associated symbol 
element array points sorted list object ids 
consider array layer pointed kth element second layer array 
array np gamma elements starting kth position symbol occur np gamma times 
number elements third layer array depends parent second layer 
null special value mark elements corresponding empty combinations symbol start specific position sequences database 
having created structure longer need original data 
illustrates structure 
specific entries structure sequence 
size layers structure independent number sequences database fourth layer depends number sequences 
worst case layers ns np np theta np entries approximated ns theta np 
case arises elements arrays non null 
worst case total np entries fourth layer sequence transition sequence contain identical symbol contiguous positions 
best case entry 
sequences average identical contiguous symbols total number entries index roughly equal np theta ns theta np 
original data sequences stored sequences tuples number contiguous occurrences symbol requiring entries 
generally expect np smaller 
store sequences index storage structure save storage long 
theta ns theta np 
ns np save storage 
addition index speed query processing 
mapping problem may transition sequence corresponding time sequence 
example time sequence mapped zero zero zero stable 
way deal problem store mappings index 
may lead exponential explosion number mappings 
store form index explained 
assume existence set primitive elementary shapes disjoint transition primitive shapes 
regard members set assume elementary shape union subset transition elementary shape exactly primitive elementary shape subset corresponding elementary shape 
case transformation rule 
pn eliminates elementary shape favor corresponding primitive elementary shapes 
pn ambiguity 
set primitive elementary shapes necessary add new primitive elementary shapes 
general requires exponential number new primitive elementary shapes need new primitive elementary shape possible non empty subset original elementary shapes 
fortunately natural sufficient condition requires linear blowup number new primitive elementary shapes 
primitive shape associated interval real numbers linear blowup 
see imagine elementary shapes 
give rise endpoints 
endpoints define disjoint consecutive intervals 
may fewer intervals endpoints coincide 
add new primitive symbol interval giving rise transition shape start period appears zero stable disappears null number consecutive occurences 
np np 


np np np np 

np np null null null null np index structure sdl queries 
new primitive symbols original elementary shapes clearly expressed union corresponding new primitive elementary shapes 
intuitively fact original elementary shapes associated interval implies intersections original elementary shapes empty require new primitive shapes controlling blowup 
shape matching index notation denote elementary derived shape respectively eval denotes evaluation shape interval denotes length interval gamma result eval set tuples oid start length oid object id start start period length length matched subsequence 
notation shape start occur means get object identifiers occurrences shape starting represents index traversal 
tuples resulting matching null sequence start length 
operations elementary shapes consider evaluation elementary shapes shapes derived applying multiples occurrences operators elementary shapes 
ffl elementary shape extra primitive symbols may needed handle constraints initial final values 
eval oid start length shape start occur max min ffl exact eval exact oid start max length shape start occur gamma min gamma max directly index get subsequences match null sequence 
computed expression eval exact oid start length eval atleast oid start ffl atmost eval atmost oid start max length min gamma max shape start occur min gamma max eval exact ffl atleast eval atleast np oid start max length min gamma max shape start occur gamma nx min gamma max eval exact unioned expression 
ffl precisely evaluation precisely interval similar exact atmost atleast equal greater smaller sum occurrences 
operations derived shapes evaluation complex forms derived shapes performed index structure inductively 
ffl concat result matching shape constrains interval shape searched 
expression implements evaluation performed inductively eval concat pr pj eval eval denotes interval matching starts 
results evaluation min start length max start length 
evaluated followed join operation resulting sets predicate pr oid oid start start length projection pj oid oid start start length length length 
inductive evaluation concatenation shapes stops result join empty joins performed 
case evaluation returns empty set 
elements sorted oid join operations implemented merge join 
ffl multiple occurrences operators evaluation schema concat replacing exact atmost operators stopping condition concat 
exact operator returns result step result step empty empty result 
atmost operator returns result step result step empty 
atleast evaluation stops join returns empty set 
returns result step step returns empty result 
ffl eval 
dn eval ffl length parameter defines family intervals inside interval match performed 
implemented expression eval sie gamman eval precisely operators evaluation schema exact atmost atleast respectively different definition interval predicate projection allow gaps overlap shape arguments 
definitions interval predicate projection require offset time period consecutive shapes 
hand inorder accept overlap evaluation schema concat exception definition interval predicate projection requires consecutive shapes separated length subsequence matched allow gaps overlap shapes inside implemented join set subsequences match shape order sequence matter 
operator shapes implemented union set subsequences match set sequences match summary sdl shape definition language retrieving objects shapes contained histories associated objects 
sdl designed small powerful language expressing naturally intuitively rich variety queries shapes histories 
sdl equivalent expressive power regular expressions finding sequence matches particular shape 
case continuous matching finds subsequences sequence match particular shape sdl provides context information regular expressions unable 
sdl discard non maximal subsequences eliminating useless clutter regular expressions provide service unable lookahead provide context information 
novel feature sdl ability perform blurry matching user gives shape specific details 
sdl efficiently implementable operators designed limit non determinism turn reduces back tracking 
sdl query expression rewritten efficient form transformation rules execution speeded index structure 
acknowledgment stefano ceri john shafer useful discussions 
appendix formal semantics sdl notation sequence real values describing history 
formally sequence function interval real numbers interval finite set consecutive nonnegative integers 
interval frequently denoted 
length indicate number elements domain function represents sequence element identified position sequence 
element history position 
refer symbol position length 
subsequence defined follows 
element identified position original sequence elements order element referred 
subsequence position position inclusive represented length 
similarly indicates subsequence length defined length gamma 
notice max min 
exists alphabet symbols mapping map values consecutive elements symbols symbol corresponds elementary shape 
elementary shape induces class containing subsequences length satisfy definition corresponding alphabet 
notation indicate sequence belonging class induced definition elementary shape 
operator application pair sequence shape possibly empty set intervals 
resulting set intervals contains subsequences match shape notice definition implies interval denotes null sequence elementary shape matches intervals single transition form 
elementary shapes 
sequence symbols iff derived shape 
sequence 
pn shapes 

pn derived shape concat 
syntax concatenation operator concat 
pn 
formulas give semantics concat jg 
concat 
pn iff exists concat 
pn 
derived shapes exact atleast atmost 
syntaxes exact atleast atmost 
operators provide richer forms concatenation 
semantics described follows 
atleast iff concat 
pm 
pm atmost iff concat 
pm 
pm exact iff concat 
pn 
pn derived shape 
syntax indicates length sequence terms time periods transitions condition expressed argument hold 
kk pg 
derived shapes precisely 
syntaxes precisely 
forms sense general restricted shape 
iff card iff card precisely iff card derived shape inorder 
syntax inorder 
pn 
form sense general restricted shape 
inorder 
pn iff exist 
kn 
kn gamma pu derived shapes 
syntaxes 
pn 
pn 
forms sense general restricted shape 

pn 
pn 

pn agrawal psaila wimmers zait :10.1.1.40.9926
querying shapes histories 
ibm research report rj ibm almaden research center san jose california june 
berndt clifford 
dynamic time warping find patterns time series 
kdd aaai workshop knowledge discovery databases pages seattle washington july 
chakravarthy 
kim 
composite events active databases semantics contexts detection 
proc 
vldb conference pages santiago chile september 
edwards magee 
technical analysis stock trends 
john magee springfield massachusetts 
dittrich 
detecting composite events active databases petri nets 
proc 
th int workshop research issues data engineering active database systems pages february 
gehani jagadish shmueli 
composite event specification active databases model implementation 
proc 
vldb conference pages vancouver british columbia canada august 
hopcroft ullman 
automaton theory languages computation 
addison wesley reading massachusetts 
seshadri livny ramakrishnan 
seq model sequence databases 
proc 
ieee int conference data engineering taiwan 
wu manber 
fast text searching allowing errors 
communications acm october 

