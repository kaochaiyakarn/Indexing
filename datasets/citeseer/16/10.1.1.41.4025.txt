drawing red line java back wilson hsieh department computer science university utah cs utah edu software protection viable alternative hardware protection systems languages java absence hardware mechanisms protection coupled absence user kernel boundary 
show red line order java virtual machine effective reliable operating system 
discuss red line implemented software mechanisms explain ones java system building 

appeared previous hotos stated protection software issue 
statement incomplete protection software issue software issue 
particular issues resource control communication termination need dealt software hardware protection mechanisms 
date systems replace hardware mechanisms software mechanisms type safety java neglected issues 
result systems exemplified java useful robust operating systems 
goal support applications require simultaneous execution multiple programs running mobile code browser untrusted extensions database 
processes trap instructions cross red line research largely supported defense advanced research projects agency monitored dept army contract dabt air force research laboratory rome research site usaf agreement 
government authorized reproduce distribute reprints governmental purposes notwithstanding copyright annotation 
separates user processes kernel 
red line enforces protection separation user kernel mode enables implementation process termination enforcement resource controls safe inter process communication 
claim systems software mechanisms protection java retain notion red line replace hardware protection mechanisms software ones 
java motivating example discussion applies just java 
arguments applicable operating systems type safe languages extensibility language runtime systems evolving operating systems 
show failure java enforce distinction user kernel results non robust systems 
examine red line implemented java 

red line illustrates traditional red line separates user mode kernel mode terms important interdependent system functions protection resource control safe inter process communication termination 
assume model processes executing user mode enter leave kernel mode trap instructions 
furthermore kernel code just arbitrary code trusted 
discuss processes execute kernel mode apply 

protection primary function red line traditional hardware system enforcing protection 
process executing user mode may access memory ports outside address space 
addition access privileged instructions needed change user mode kernel mode communication protection resources termination time restricted unrestricted access restricted access memory instructions policy defined limits mediated kernel policy enforces mediates communication red line 
red line traditional operating systems 
settings 
kernel processes protected buggy malicious applications 
protection java require user kernel distinction java type safe 
assume java type system sound bytecode verifier functions properly 
type safety provides protection directly processes write arbitrary locations memory 
protection important function red line mentioned equally important 
unfortunately type safety protection obscured need red line 

resource control user kernel boundary necessary enforce resource control 
process running user mode subject policy limitations resources consume 
kernel hand access physical resources machine enforces resource limits user processes 
example user processes subject limits processor cycles allowed preempted 
similar restrictions apply memory process may memory provided kernel 
changes resource allocations done entering kernel 
example kernel change amount memory provided process process executes sbrk system call 
operating systems exokernel move resource management user level 
systems kernel responsible providing mechanisms enforcing policy 
kernel code written resource control mind 
instance attempted kernel operation exceed user process resource limit cause process terminated kernel structured resource control violation cause abrupt termination integrity kernel 
proper resource control java requires user kernel distinction certain parts java system written access physical resources require memory allocation 
restriction analogous allowing page fault handlers fault 
example exception handling code java runtime depend ability acquire heap memory inability acquire memory signaled exception 
developers java failed separate parts system subjected policy defined resource limits access physical resources 
words lack red line difficult build robust system 
addition limiting resources required kernel understood garbage collector interacts red line 
standard java garbage collector considered red line shared system service 
unfortunately entire garbage collector kernel difficult properly account gc pressure caused particular process 
discuss section appropriate parts garbage collector exist red line user space time spent kernel minimized 

communication kernel ensure communication mechanisms subject constraints imposed protection resource control termination 
example kernel bound ipc port queues ensure process deny service process communications 
similarly kernel bookkeeping capabilities ensure process acquire communication rights 
focus data sharing primary communication mechanism concern pervasiveness systems java 
operating systems provide data sharing form shared memory memory mapped files 
case mmap ed files kernel provides memory shared processes 
red line crossed establish memory mappings process address space ensure processes violate protection guarantees 
java lack red line causes problems data sharing 
particular uncontrolled sharing causes problems areas resource control memory accounting termination 
memory accounting difficult uncontrolled sharing clear account object shared multiple user processes 
termination complicated processes keep alive pointers objects belong process objects may reclaimed process ends undermines resource control 
important difficult java ensure kernel designed expose critical objects user processes 
example java allows object monitor 
kernel handed internal thread control block user process obtain lock possibly prevent user processes making progress 

termination process terminated integrity system harmed 
course system guarantee processes depend terminated process continue function ensure unrelated processes unaffected 
integrity preserved ensuring shared data structures modified atomically 
termination related resource control kernel reclaim resources process terminates 
atomicity provided ways supplying cleanup handlers invoked case termination deferring termination requests 
assigning cleanup handlers slightly lower cost common case programming tedious error prone 
operating systems provide mechanism defer termination requests 
usually software flag set non region entered cleared left 
traditional operating systems unix non region encompasses complete kernel 
crossing red line tantamount entering code termination requests deferred 
order understand red line necessary java safe termination useful look history java threads 
original java specification provided method threads caused exception thrown thread context 
asynchronous exception handled run time error locks released unwinding stack 
javasoft realized procedure lead damaged data structures target thread holds locks 
particular data structures vital integrity runtime system left inconsistent states 
result javasoft deprecated thread 
proposal termination flawed due missing red line java 
different mechanism termination thread destroy proposed terminated thread releasing locks held 
proposal potential deadlock javasoft implemented 
problems corrupting vital parts run time system avoided defining red line user kernel 
parts java run time libraries considered kernel code order ensure correctness 
second mechanisms protect kernel code termination 
defining red line protect integrity system asynchronous exceptions usable programming tool multi threaded applications 
applications rely cooperation threads 
making termination safe allows kill uncooperative code malicious applets 

draw java red line designing building multi process java virtual machine encountered issues described previous sections 
section describe possible software mechanisms implementing various aspects red line explain solution chosen system 
kernel consists java code 
kernel entry exit implemented function calls may inlined 
considering adding java language support mark methods kernel entry points 
support allow compiler automatically generate kernel entry exit code 
thread entering kernel defers termination requests ensures kernel code may terminate abruptly 
enter kernel need ensure non 
instance resolving symbols class sure state class global class table kept consistent 
kernel code throw exceptions 
rule necessary avoid abrupt termination 
avoid exceptions due linkage verification errors ensuring java parts kernel sound 
trust kernel code cause stack overflow exceptions checking sufficient space available kernel entry 
similar kernel stack overflows operating systems assumption empirically ensured 

resource control possible solution controlling memory kernel bytecode rewriting 
instructions inserted bytecode causes java object allocated 
instructions check attempted allocation process memory limit 
resource violation detected callback invoked appropriate action taken 
advantage approach portable standard jvms 
solution incomplete rewriting system code creates problems example callback function decides abort call originates java runtime 
system code rewritten memory allocated behalf user process system code may accounted 
memory usage controlled process executes rewritten code application portions rewritten way 
structured kernel able back memory conditions error condition matter disrupting state 
java specification requires error condition mapped runtime exception exception created thrown return user code 
order support fair scheduling kernel multithreaded preemptive 
priority inheritance locks internal kernel prevents starvation 
process receives heap allows collect heaps independently 
collecting user process heap require stopping processes entering kernel disallow cross heap general result process gc red line 
shared kernel heap describe section cross heap heap handled differently 
treat external distributed garbage collection schemes 

communication approach communication disallow direct sharing 
approach taken :10.1.1.124.9017
restriction obviates problems direct object sharing accomplished controlling process name space 
processes want exchange structured objects marshal objects serial communication channel 
way unwanted cross prevented 
uses restricted form direct sharing primary means communication 
shared objects allocated shared area subject process allocation limits 
communicating processes direct access objects serialize data communicate 
order prevent processes shared objects create illegal cross heap control writes heap 
actual data exchanged reading writing primitive fields shared objects 
write barriers prevent cross heap 
write barriers special code executed bytecode instructions write heap 
compiler prove object destination write lies writing process heap write barrier check may omitted 

termination possible way ensure termination safe restrict access primitives cause termination 
instance thread execution path divided segments :10.1.1.124.9017
termination request effective thread executing segment safe deferred 
protect server segment termination requests posted client 
kernel thread segments viable protecting servers 
order effective means terminating uncooperative applications trusted kernel required 
kernel structured respond termination requests short bounded amount time 
reclaim process memory termination steps 
threads executing process destroyed stack space reclaimed 
step cleans stack heap 
disallow cross heap simply merge process heap kernel heap garbage collect kernel heap turn resolve cycles 

related researchers proposed solutions shortcomings java 
instance nilsen introduce java extensions real time computation 
extensions support atomic sections asynchronous exceptions masked 
subjecting catch clauses real time threads set restrictions attempt asynchronous exceptions useful tool real time applications 
contrast protect kernel termination safe system designed real time user processes 
idea separating heaps controlling memory 
write barriers detect cross heap 
primarily targeted denial service attacks java provide functionality system 
example allow applications share objects directly 
earliest java support multiple processes came balfanz gong 
alta systems provide process abstractions java :10.1.1.124.9017
researchers noted necessity providing clear distinction user kernel modes 
jdk javasoft introduced abstraction protection domains represent separate namespaces 
domains correspond user kernel code clean termination protection domains guaranteed 
solely security purposes code access privileges put single protection domain 
discuss security issues mechanisms implement security policies necessarily require red line crossings 
vino extensible os uses software fault isolation protect extensions uses transactions provide cleanup handlers 
addition vino establishes set rules order prevent resource hoarding single 
instance graft access memory granted permission 
vino transaction semantics relatively heavyweight allow kernel operation aborted 
inferno uses type safe language called limbo enforce memory protection 
inferno kernel provides environment running applications dis virtual machine 
manages processes memory namespaces provides data streaming network protocols 
inferno controls application access resources controlling namespace visible application 
inferno control resources memory 

red line protection resource control safe termination impact system services structured 
instance system service gettimeofday require resource control protection termination 
reason place service red line protection system time read user processes 
example shows services require functions red line may implemented fewer red line crossings language protection 
circumstances red line crossed kernel user mode upcall 
upcalls frequent java example required implement java user controlled loading classes 
instances kernel assume upcall may return 
kernel clean state upcall 
example release locks holds 
red line cost os researchers traditional operating systems serves multiple functions primary protection function 
contend retaining notion red line useful effective structuring tool language systems java protection mechanism implemented type safety 
acknowledgments jay lepreau support research 
grateful patrick enlightening discussion collaboration research 
patrick jay lepreau john carter eric eide feedback helped improve greatly 
back stoller hsieh lepreau 
java operating systems design implementation 
technical report uucs university utah aug 
balfanz gong 
experience secure multiprocessing java 
proceedings th international conference distributed computing systems pages amsterdam netherlands may 

resource safe java service guarantees uncooperative environments 
proceedings ieee workshop programming languages real time industrial applications madrid spain dec 
bershad savage pardyak becker fiuczynski sirer 
protection software issue 
proceedings fifth workshop hot topics operating systems pages orcas island wa may 
bershad savage pardyak sirer fiuczynski becker chambers eggers 
extensibility safety performance spin operating system 
proc 
th acm symp 
operating systems principles pages copper mountain dec 
cheriton duda 
caching model operating system kernel functionality 
proc 
symp 
operating systems design implementation pages monterey ca nov 
clark 
structuring systems upcalls 
proceedings th symposium operating systems principles pages orcas island wa dec 
czajkowski von eicken 
resource accounting interface java 
proc 
acm conf 
object oriented programming systems languages applications vancouver canada oct 
acm 
dorward pike presotto ritchie trickey 
inferno operating system 
bell labs technical journal winter 
engler kaashoek toole jr exokernel operating system architecture application level resource management 
proc 
th acm symp 
operating systems principles pages dec 
gong mueller 
going sandbox overview new security architecture java development kit 
proc 
usenix symp 
internet technologies systems pages monterey ca dec 
usenix 
hawblitzel :10.1.1.124.9017
chang czajkowski hu von eicken 
implementing multiple protection domains java 
proc 
usenix annual technical conf pages new orleans la 
lindholm yellin 
java virtual machine specification 
java series 
addison wesley jan 
nilsen mitra 
asynchronous java exception handling real time context 
proceedings ieee workshop prog 
lang 
real time industrial applications madrid spain dec 
shapiro 
survey distributed garbage collection techniques 
proceedings international workshop memory management scotland sept 
seltzer endo small smith 
dealing disaster surviving misbehaved kernel extensions 
proc 
second symp 
operating systems design implementation pages seattle wa oct 
usenix assoc 
javasoft thread thread suspend thread resume 
www javasoft com products jdk docs guide misc html 
lepreau 
nested java processes os structure mobile code 
proceedings eighth acm sigops european workshop pages sintra portugal sept 
acm 
wilson 
uniprocessor garbage collection techniques 
proceedings international workshop memory management st malo france sept 
springerverlag 
