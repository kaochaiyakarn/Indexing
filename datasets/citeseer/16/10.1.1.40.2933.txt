copyright ieee 
published proceedings micro december research triangle park north carolina 
personal material permitted 
permission reprint republish material advertising promotional purposes creating new collective works resale redistribution servers lists reuse copyrighted component works obtained ieee 
contact manager copyrights permissions ieee service center lane box piscataway nj usa 
telephone intl 

value profiling brad calder peter feller alan eustace department computer science engineering digital equipment university california san diego western research lab cs ucsd edu eustace pa dec com identifying variables invariant constant compile time allows compiler perform optimizations including constant folding code specialization partial evaluation 
variables labeled constants may exhibit semi invariant behavior 
variable identified constant compile time high degree invariant behavior run time 
run time information available identify variables semi invariant benefit invariant compiler optimizations 
examine invariance profiling instruction values show instructions semi invariant values different inputs 
investigate ability estimate invariance instructions program profiling load instructions 
addition propose new type profiling called convergent profiling 
estimating invariance loads convergent profiling reduce profiling time needed generate accurate value profile 
value profile automatically guide code generation dynamic compilation adaptive execution code specialization partial evaluation compiler optimizations 
compiler optimization techniques depend analysis determine variables invariant behavior 
variables invariant run time behavior labeled compile time fully benefit optimizations 
examines profile feedback information identify variables semi invariant behavior 
semi invariant variable identified constant compile time high degree invariant behavior run time 
occurs variable small possible values account variable values run time 
value profiling approach identify semi invariant variables 
goal value profiling different value prediction 
value prediction predict result value write register instruction 
shown provide predictable results previously cached values predict value variable hardware buffer :10.1.1.122.8305
approach shown hardware value predictor values produced instruction high degree temporal locality 
research semi invariance variables different previous hardware predication studies 
compiler optimizations concerned invariance variable top values variable popular range values variable life time program temporal relationship values provide useful information 
value profiling techniques keep track top values instruction number occurrences values 
information automatically guide compilation optimization 
section examine motivation related 
section describes method value profiling 
section describes methodology gather results 
section examines semi invariant behavior instruction types parameters loads shows high degree invariance types instructions 
order reduce time generate value profile optimization investigates ability estimate invariance non load instructions value profiling load instructions propagating invariance 
section examines new type profiler called convergent profiler value profiling 
goal convergent profiler reduce amount time takes gather detailed profile information 
value profiling data profiled invariance instructions reaches steady state point profiling turned sampled 
reduces profiling time creating accurate value profile 
conclude summarizing 
motivation related originally motivated result examining input values long latency instructions 
divide dec alpha processor take cycles execute divide intel pentium processor take cycles 
beneficial special case divide instructions optimizable numerators denominators 
profiling hydro spec benchmark suite executed divide instructions numerator denominator 
conditioning divide instructions numerator denominator profiling information able reduce execution time hydro running dec alpha processor 
applying optimization handful video games pitfall intel pentium processor able reduce number cycles executed estimated programs 
results show value profiling effective reducing execution time long latency instructions 
publications value prediction hardware provided motivation research value profiling :10.1.1.122.8305
lipasti showed average instructions wrote value time executed instructions produced value values produced instruction value prediction table 
results show high degree temporal locality values produced instructions necessarily equal instruction degree invariance needed certain compiler optimizations 
uses value profiling value profiling benefit areas research including dynamic compilation adaptive execution performing compiler optimizations specialize program certain values providing hints value prediction hardware 
estimation static calculation detailed pipeline architecture model pentium processor 
estimation takes consideration data dependent resource conflict stalls 
dynamic compilation adaptive execution code specialization dynamic compilation adaptive execution emerging directions compiler research provide improved execution performance delaying part compilation process run time 
techniques range filling compiler generated specialized templates run time fully adaptive code generation 
techniques effective compiler determine sections code concentrate adaptive execution 
existing techniques dynamic compilation adaptive execution require user identify run time invariants user guided annotations 
goals value profiling provide automated approach identifying semi invariant variables guide dynamic compilation adaptive execution 
staging analysis proposed lee leone knoblock ruf effective means determining computations performed early compiler optimizations performed late postponed compiler dynamic code generation 
approach requires programmers provide hints staging analysis determine arguments semi invariant behavior 
addition wolfe started investigate form staging analysis automatic identification semi invariant variables 
consel noel partial evaluation techniques automatically generate templates run time code generation approach requires user annotate arguments top level procedures global variables data structures run time constants 
auslander proposed dynamic compilation system uses unique form binding time analysis generate templates code sequences identified semi invariant 
approach currently uses user defined annotations indicate variables semi invariant 
annotations needed drive techniques require identification semi invariant variables value profiling automate process 
automate process approaches current techniques generating run time code identify code regions potentially benefit run time code generation 
value profiling determine code regions variables behavior 
code regions identified profitable value profiling candidates dynamic compilation adaptive execution 
approaches dynamic compilation determine optimizable code regions applied static optimization 
regions benefit code specialization variable instruction value multiple inputs 
case code duplicated creating specialized version optimized treat variable constant 
execution specialized code conditioned value 
value profiling determine potential variables instructions value multiple inputs order guide code specialization 
hardware optimizations predicting value seen instruction value shown predictability tag hardware buffers 
results show value profiling classify invariance instructions form value profiling potentially improve hardware value prediction 
instructions shown variant kept value prediction buffer reducing number conflicts aliasing effects resulting accurate prediction smaller tables 
instructions shown high invariance value profiler sticky replacement policy 
memory disambiguation buffer mdb architecture allows load dependent instructions hoisted loop checking store addresses inside loop conflict load 
store inside loop address load dependent instructions re executed 
similar hardware mechanism take advantage values checking store address value 
architecture value load hoisted loop changes load dependent instructions re executed 
value profiling identify semi invariant load instructions 
value profiling section discuss straight forward approach value profiling 
study concentrates profiling instruction level finding invariance written register values instructions 
value profiling information level directly mapped back corresponding variables compiler optimization 
types information needed value profiling compiler optimizations invariant instruction value life time program top result values instruction 
determining invariance instruction resulting value calculated different ways 
value prediction results lipasti tag table store cache values predict result value instruction 
keeping track number correct predictions equates number times instruction destination register void collect stats reg cur value total executed cur value value mrv metric num times profiled lfu insert tnv table value num times profiled num times profiled value cur value simple value profiler keeping track frequent occurring values value mrv metric 
assigned value value values 
call value mrv metric history depth values kept 
mrv metric provides indication temporal reuse values instruction equate exactly invariance instruction 
invariance inv mean percent time instruction spends executing frequent values 
example instruction may write register values repetitive pattern xy 
pattern result mrv stores value instruction invariance inv inv 
example different values result instruction times row switching value 
case mrv metric determine variable value time instruction invariance inv 
mrv differs invariance state associated value indicating number times value occurred 
replacement policy uses tell value common 
mrv metric times prediction invariance times examples described 
value profiler value profiling information required compiler optimization ranges needing know invariance instruction having know top values popular range values 
shows simple profiler keep track information pseudo code 
value profiler keeps top value tnv table register written instruction 
tnv table register profiled 
tnv table stores value number occurrences pairs entry frequently lfu replacement policy 
inserting value table entry exists occurrence count incremented number profiled occurrences 
value frequently entry replaced 
replacement policy top value table chose lru replacement policy replacing value take consideration number occurrences value 
lfu replacement policy tnv table 
straight forward lfu replacement policy tnv table lead situations invariant value way tnv table 
example tnv table contains entries profiled frequently replacement policy sequence xy table battle get tnv table succeed 
tnv table forgiving adding temp tnv table store current values specified time period merged final tnv table just clearing bottom entries tnv table 
approach clearing bottom half tnv table profiling instruction specified clear interval 
instruction profiled clear interval bottom half table cleared clear interval counter reset 
number times sampled dependent frequency middle entry tnv table 
middle entry lfu entry top half table 
clear interval needs larger frequency count entry new value way top half table 
profiling set clear interval twice frequency middle entry time table cleared minimum clear interval times 
evaluation methodology perform evaluation collected information spec programs 
programs compiled dec alpha axp processor dec fortran compilers 
compiled spec benchmark suite osf operating system full compiler optimization ifo 
table shows data sets gathering results program number instructions executed millions 
atom instrument programs gather value profiles 
atom instrumentation tool interface allows elements program executable instructions basic blocks procedures queried manipulated 
particular atom data set data set program name exe name exe compress ref short gcc cp decl stmt go stone stone ijpeg vigo li ref puzzle puzzle ksim ref train perl primes scrabble vortex ref train applu ref train apsi ref train fpppp ref train hydro ref train mgrid ref train su cor ref train swim ref train tomcatv ref train turb ref train wave ref train table data sets gathering results program number instructions executed millions data set 
allows instrumentation program navigate basic blocks program executable collect information registers opcodes branch conditions perform control flow data flow analysis 
invariance instructions section examines invariance predictability values instruction types procedure parameters loads 
reporting invariance results ignored instructions need executed correct execution program 
included reasonable number loads programs 
loads ignored inserted program code alignment prefetching dec alpha processor 
results sizes tnv table profiling 
breakdown invariance different instruction types table tnv table size 
results tnv table size instruction register 
metrics describe metrics 
instruction said invariance calculated number times top values instruction occurred profiling final tnv table profiling dividing number times instruction executed profiled 
order examine invariance instruction look inv inv 
inv frequency count program fld lda st fmul cmp compress gcc go ijpeg li perl ksim vortex applu apsi fpppp hydro mgrid su cor swim tomcatv turb wave avg table breakdown invariance instruction types 
categories include integer loads floating point loads fld load address calculations lda stores st integer multiplication floating point multiplication fmul floating point division integer arithmetic floating point arithmetic compare cmp shift conditional moves floating point operations 
number shown percent invariance top value inv class type number parenthesis dynamic execution frequency type 
results shown instruction types write register branches 
frequently occurring value final tnv table divided number times instruction profiled 
inv number occurrences top values final tnv table added divided number times instruction profiled 
examining difference invariance profiles data sets normal convergent profile examine difference invariance difference top values encountered instructions executed profiles 
diff diff show weighted difference invariance profiles top value tnv table top values 
difference invariance calculated instruction instruction basis included weighted average input instructions executed profiles 
metric shows percent instructions profiled profile top value second profile 
calculate instruction top value tnv table profile compared top value second profile 
number times value occurred tnv table profile added sum counter 
counter divided total number times instructions profiled input 
metrics find find calculated similar manner 
show percent time top element top elements profile instruction appear top values instruction second profile 
calculating results find find look instructions invariance profile greater 
reason looking instructions inv invariance larger ignore instructions random invariance 
variant instructions high likelihood top values profiles different interested instructions 
arbitrarily chose large avoid variant instructions looking top values 
results numbers shown number percent match values profiles second number parenthesis percent profiled instructions match corresponds invariance filter 
number parenthesis percent instructions profiled invariance greater 
comparing different data sets overlap represents percent instructions weighted execution profiled data set profiled second data set 
breakdown instruction type invariance table shows percent invariance program broken different disjoint instruction categories data set 
number represents average percent invariance top value inv instruction type 
number parenthesis percent executed instructions class data set data set comparing params data set data set procedure calls params params invariance top values program instr inv inv inv inv lap diff diff find find compress gcc go ijpeg li perl ksim vortex applu apsi fpppp hydro mgrid su cor swim tomcatv turb wave average table invariance parameter values procedure calls 
instr percent executed instructions procedure calls 
columns show percent procedure calls parameter inv invariance greater 
rest metrics terms parameters described detail 
type accounts executing program 
store instructions invariance reported invariance value stored 
results show integer programs integer loads calculation load addresses lda integer arithmetic instructions high degree invariance frequently executed 
floating point instructions invariance types different program 
programs mgrid swim tomcatv show low invariance hydro invariant instructions 
invariance parameters specializing procedures procedure parameters potentially beneficial form specialization especially code written modular fashion general purpose specialized manner run application 
table shows predictability parameters 
instr shows percent instructions executed procedure calls data set 
columns show percent procedure calls parameter inv invariance greater 
columns show results terms procedures remaining columns show results terms parameter invariance values 
remaining metrics described detail 
results show invariance parameters predictable different input sets 
table shows average top value parameters executed passed procedures data set value time parameter passed procedure second data set 
invariance loads graphs show invariance loads terms percent dynamically executed loads program 
left graph shows percent invariance calculated top value inv final entry tnv table instruction right graph shows percent invariance top values inv 
invariance shown non accumulative axis weighted frequency execution 
interested optimizing instructions inv invariance greater li account executed loads 
shows programs compress vortex ksim perl inv invariance executed loads ksim perl inv invariance loads 
interesting note graphs bi modal nature load invariance programs 
loads completely invariant variant 
table shows value invariance loads 
invariance inv inv shown table data set average invariance shown 
mrv percentage time value value encountered load 
diff weighted difference mrv inv percentages instruction instruction basis 
rest metrics described 
results show mrv metric difference invariance average difference percent executed loads compress gcc go ijpeg li perl ksim vortex applu apsi fpppp hydro mgrid su cor swim tomcatv turb wave percent executed loads invariance loads 
graph left shows percent invariance top value inv tnv table graph right shows percent invariance top values inv tnv table 
percent invariance shown axis axis percent executed load instructions 
graph formed sorting instructions invariance putting instructions buckets filling buckets load execution frequency 
average invariance weighted execution frequency bucket graphed 
comparing data set data set data set data set invariance top values program mrv inv inv diff mrv inv inv diff overlap diff diff find find compress gcc go ijpeg li perl ksim vortex applu apsi fpppp hydro mgrid su cor swim tomcatv turb wave average table invariance load values tnv table size 
mrv average percent time current value load value load 
diff difference mrv inv calculated instruction instruction 
rest metrics described detail 
large programs 
difference invariance instructions data sets small 
results show loads executed data sets invariance filter top invariant value time 
invariance inputs similar certain percentage values 
clearing interval table size parameters affect top values tnv table invariance 
profiling loads entry tnv table clearing bottom half table turned average results showed difference invariance top value different time tnv table filter 
examining different table sizes clearing tnv table size average difference invariance tnv table size top value different time 
table size load profile average difference invariance top value different time compared entry tnv table examining loads inv invariance 
estimating invariance instructions loads really unknown quantity dealing program execution 
value invariance loads known reasonable believe invariance values instructions estimated invariance value propagation 
significantly reduce profiling time needed generate value profile instructions 
investigate load value profiles previous section propagated load invariance program data flow control flow analysis deriving invariance non load instructions write register 
achieved reasonable results simple inter procedural analysis algorithm 
estimation algorithm builds procedure call graph procedure contains basic block control flow graph 
propagate invariance basic block associated contains invariance registers processing basic block 
basic block processed predecessors control flow graph merged basic block 
updated processing instruction basic block derive basic block 
calculate invariance instructions basic block developed set simple heuristics 
default heuristic instructions input registers set def register invariance invariance register times invariance second register 
input registers undefined invariance def register left undefined 
instructions input register mov invariance def register assigned invariance 
heuristics propagate invariance included loop depth induction variables stack pointer special instructions brevity go 
table shows invariance estimation algorithm non load instructions write register 
second column table shows percent executed instructions results apply 
third column prof shows invariance inv instructions profile form table 
fourth column estimated invariance instructions fifth column weighted difference invariance inv real profile estimation instruction instruction basis 
columns show percent executed instructions average invariance threshold 
column contains numbers number percent instructions executed inv invariance threshold 
second number percent invariant instructions estimation classified invariant threshold 
number column shows percent instructions normalized invariant instructions threshold estimation thought invariant threshold 
number column normalized percent instructions estimated 
results show estimated propagation difference average invariance real profile 
terms classifying variables invariant threshold estimation finds instructions invariance estimation estimates invariant instructions threshold 
estimated invariance typically lower real profile 
reasons 
default heuristic multiplies invariance uses arrive invariance def 
times estimation correct lot time provides conservative estimation invariance written register 
reason times uses instruction variant resulting computation invariant 
particularly true logical instructions shift arithmetic instructions 
convergent value profiling amount time user wait profile generated vary depending gains achievable value profiling 
level detail required inv instructions invariance threshold program instrs prof est diff compress gcc go ijpeg li perl ksim vortex apsi fpppp hydro mgrid su cor swim tomcatv turb wave average table invariance instructions computed propagating invariance load value profile 
instrs shows percent instructions non load register writing instructions results table apply 
prof est percent invariance real profile estimated profile 
diff percent difference profile estimation 
columns show percent executed instructions average invariance threshold percentage estimation profile percent estimated 
value profiler determines impact time profile 
problem straight forward profiler shown run hundreds times slower original application especially instructions profiled 
solution propose somewhat intelligent profiler realizes data invariance top values profiled converging steady state profiling turned instruction instruction basis 
examining value invariance instructions noticed instructions converge percent execution steady state 
steady state reached point profiling instruction 
keeping track percent change invariance classify instructions converged changing 
convergent profiler stops profiling instructions classified converged convergence criteria 
convergence criteria tested time period convergence interval profiling instruction 
model behavior profiling code conditioned boolean test profiling turned instruction 
profiling turned normal profiling occurs convergence interval convergence criteria tested 
profiling condition set false profile converged instruction 
profiling turned periodically execution counter checked see retry time period elapsed 
profiling turned retry time period set number total executed backoff back constant random number 
periodically turn profiling back see invariance changing 
examine performance heuristics convergence criteria value profiling 
heuristic concentrates instructions increasing invariance 
instructions invariance changing interested instructions increasing final invariance decreasing final invariance compiler optimization purposes 
continue profile instruction final invariance increasing choose profiling instructions invariance decreasing 
percent invariance convergence test greater percent invariance previous interval invariance increasing profiling continues 
profiling stopped 
calculating invariance total frequency top half tnv table examined 
results testing criteria instruction executions 
second heuristic examined convergence criteria continue profiling change invariance current convergence interval greater inv increase bound lower inv decrease bound 
percent invariance changing bounds profiling continues 
profiling stops invariance converged bounds 
convergent profile comparing full load profile convergent convergence invariance invariance top values program prof conv backoff inv inv diff diff find find compress gcc go ijpeg li perl ksim vortex applu apsi fpppp hydro mgrid su cor swim tomcatv turb wave average table convergent profiler profiling continues invariance increasing turned 
prof percent time executable profiled 
conv percent time convergent criteria decided invariance converged increasing 
backoff percent time spent profiling turning profiling back 
performance convergent profiler table shows performance convergent profiler stops profiling instance change invariance decreases 
second column percent instructions profiled shows percentage time profiling turned program execution 
third column conv shows percent time profiling converged convergence criteria tested column percent time convergence test decided invariance increasing 
fifth column backoff shows percent time spent profiling turning profiling back retry time period 
rest metrics described compare results profiling loads program complete execution convergent profile results 
results show average convergent profiling spent time profiling profiling turned time 
programs time converge 
gcc outlier execution converge 
reason gcc executes static load instructions inputs loads execute long 
loads fully profiled execution time fit time interval sampling convergence invocations 
results show convergent profiler invariance differed full profile able find top value full length profile top values convergent profile time 
table shows performance convergent profiler upper lower change invariance convergence back invariance program prof conv dec diff diff compress gcc go ijpeg li perl ksim vortex applu apsi fpppp hydro mgrid su cor swim tomcatv turb wave average table convergent profiler profiling continues long change invariance inv decrease bound 
new column dec shows percent time invariance decreasing testing convergence 
bounds determining convergence 
new column dec shows percent time test convergence decided continue profiling invariance decreasing 
results inv increase threshold inv decrease threshold 
invariance increasing decreasing profiling turned 
results show heuristic spends time profiling average lower difference invariance comparison heuristic 
terms values new heuristic increased matching top values 
advantage second heuristic obtain accurate invariance 
table shows lot time spent profiling decrease invariance 
reason variant instruction start looking invariant just couple values 
take invariance instruction reach final variant behavior 
results show time profiling spent profiling turned back convergence criteria 
problem instruction profiled long time takes invariance change 
invariance instruction converges profiling changes new steady state take lot profiling bring invariance new steady state 
possible solution monitor happening dump current profile information start new tnv table instruction 
converge faster new steady state 
examining sampling techniques approaches convergent profiling part research 
summary explored invariant behavior values loads parameters register defining instructions 
invariant behavior identified value profiler automatically guide compiler optimizations dynamic code generation 
showed value profiling effective means finding invariant semi invariant instructions 
results show invariance instructions value profiling predictable different input sets 
addition examined techniques reducing profiling time generate value profile 
technique load value profile estimate invariance non load instructions invariance difference real profile 
second approach proposed reducing profiling time idea creating convergent profiler identifies profiling information reaches steady state converged 
convergent profiler loads profiled program execution average recorded invariance full length profiler top values time 
idea convergent profiling proposed potentially decreasing profiling time needed types detailed profilers 
view value profiling important part compiler research especially areas dynamic compilation adaptive execution identifying invariant semi invariant instructions compile time essential 
complementary approach trying identify semi invariant variables data flow staging analysis try prove variable value change hold values lifetime program 
type analysis combination value profiling identify optimizable code regions 
acknowledgments jim larus todd austin barbara dean tullsen anonymous reviewers providing useful comments 
funded part uc micro dec external research 
generous equipment software digital equipment 
auslander philipose chambers eggers bershad 
fast effective dynamic compilation 
proceedings acm sigplan conference programming language design implementation 
acm may 
wolfe 
initial results variable analysis 
th international workshop languages compilers parallel computing august 
consel noel 
general approach run time specialization application thirteenth acm symposium principles programming languages 
acm january 
engler hsieh kaashoek 
language high level efficient machine independent dynamic code generation 
thirteenth acm symposium principles programming languages 
acm january 
gabbay mendelson 
speculative execution value prediction 
ee department tr technion israel technology november 
gallagher chen mahlke gyllenhaal hwu 
dynamic memory disambiguation memory conflict buffer 
international conference architectural support programming languages operating systems 
knoblock ruf 
data specialization 
proceedings acm sigplan conference programming language design implementation 
acm january 
lee leone 
optimizing ml run time code generation 
proceedings acm sigplan conference programming language design implementation 
acm may 
lipasti shen 
exceeding dataflow limit value prediction 
th international symposium microarchitecture december 
lipasti wilkerson shen 
value locality load value prediction 
seventh international conference architectural support programming languages operating systems october 
srivastava eustace 
atom system building customized program analysis tools 
proceedings conference programming language design implementation pages 
acm 
