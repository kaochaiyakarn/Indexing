parallelising large functional program keeping lolita busy hans wolfgang loidl richard morgan phil trinder sanjay chris cooper simon peyton jones roberto department computing science university glasgow glasgow scotland department computer science university durham durham england computing department open university milton keynes england 
parallel version lolita natural language engineering system construction 
believe lines haskell lolita largest non strict parallel functional program 
report ongoing parallelisation lolita interesting features common real world applications lazy languages code specifically designed parallelism laziness essential efficiency lolita lolita interfaces data structures outside haskell heap foreign language interface lolita written closely involved parallelisation 
expectations parallelising program achieve moderate speedups small changes code 
date speedups achieved lolita running realistic simulation processor shared memory target machine 
currently tuning program sun target machine wall clock speedup limited physical memory availability sequential foreign language front 
process parallelising lolita changes parallel software engineering techniques implementation technology 
intriguing aspect parallelism achieved small number changes requiring understanding application 
attribute ease parallelisation primarily top approach enabled evaluation strategies new mechanism introducing controlling parallelism non strict languages 
despite advantages functional programming model parallel computation large non strict parallel functional programs 
believe due scarcity robust parallel functional language implementations lacking support high level languages describing behavioural aspects program 
constructed gum parallel runtime system haskell glasgow haskell compiler thm 
order facilitate parallel program design developed evaluation strategies describing dynamic behaviour lazy parallel programs 
gum portable available shared distributed memory architectures including cm dav sun shared memory multiprocessor networks alphas 
freely available users developers worldwide 
gum integrated simulator visualisation tools hlp 
superset haskell program parallel machines called glasgow parallel haskell gph 
lolita natural language engineering system mss developed durham university years 
originally written parallel execution code mind 
team interest parallelism partly means reducing runtime partly means increase functionality acceptable response time 
groups glasgow durham cooperated lolita believe result largest non strict parallel functional program constructed 
large program tests scalability parallel software engineering techniques underlying implementation technology runtime system simulator visualisation tools 
excellent integrated engineering environment parallel program development performance evaluation 
focus particular aspect accompanying lt 
addition size lolita features interest parallel program lolita exists parallelising code written consideration parallelism 
fundamental reason approach feasible haskell declarative leaves evaluation order expressions program unspecified 
result program fixed sequential evaluation order 
contrast extremely difficult take large body existing imperative code construct parallel version 
laziness essential efficiency lolita program explores forests alternative sentence parses meanings investigating just additional tree prohibitively expensive 
typically large piece software lolita written group closely involved introducing parallelism 
fortunately parallelisation requires understanding program global structure particular sub module 
large programs lolita written entirely single language 
program written haskell example parser written large conceptually persistent data structure pre loaded shared processors accessed foreign language interface 
structure remainder follows 
section briefly describes lolita 
section describes parallelism gph new mechanism introducing controlling parallelism evaluation strategies 
section describes parallelisation date ongoing 
section discusses lessons learnt parallelising lolita addresses runtime system issues parallel functional languages 
introducing lolita lolita large scale object linguistic interactor translator analyser system state art natural language processing system able grammatically parse semantically pragmatically analyse reason answer queries complex texts articles financial pages quality newspapers 
written pure lazy functional programming language haskell consists lines source code gw excluding comments 
system development laboratory natural language engineering university durham 
project currently involves team approximately developers working simultaneously different components system 
june lolita system demonstrated royal society london 
research group follows pragmatic approach nlp production robust useful working system primary interest 
pragmatic view spawned new field natural language research termed natural language engineering feel best describes adopted methodology 
lolita system natural language processing nlp systems built solve specific problems 
systems restricted particular task perform domain 
aim lolita produce general domain independent knowledge representation reasoning system 
conceptually lolita system thought consisting major processes 
analysis consists mapping text logical representation meaning 

inference process deriving inferences logical representation text 

generation conversion information represented logical form text 
processes interacts heart lolita knowledge base type semantic network called semnet 
analysis phase mainly writes logical form text semnet inference component reads knowledge possibly writes inferences semnet generation module traverses semnet order knowledge 
semnet basics common semantic networks semnet graph knowledge representation concepts relationships represented nodes arcs respectively knowledge elicited graph traversal 
power semnet lies efficient inference procedures designed inheritance lg 
addition supports forms reasoning analogy lg epistemic reasoning time location bg standard logical connective reasoning 
currently semnet comprises approximately nodes compatible wordnet mil 
types nodes entities events assertions actions roles main types directed arcs subject object action read traversed direction 
event nodes subject object action arc action nodes action event node 
shows example assertion event statement semnet 
events generally depending action subject object arc abbreviated sub obj resp 
specify particular entities related action 
inverse spec arc called generalisation abbreviated gen interpreted set inclusion 
set membership represented instance abbreviated inst arc sanjay instance humans 
reverse instance arc called universal 
actual fact analysis phase reads knowledge word meanings semnet hot coffee human love enjoy sanjay ni hot things beverage coffee espresso specialisation spec generalisation spec spec spec similar dislike specialisation event subject object action antonym fig 

portion semnet event expressing statement sanjay likes hot coffee 
analysis front analysis phase lolita previously described process transforming natural language logical meaning represented newly created events entities semnet 
actual fact stage consists number abstracted sub processes special interest parallelisation system 
morphology parsing 
morphology initial preparation input text parsed 
consists punctuation spaces input separate grammatical units replaces short hand words longer versions ll 
addition facility recovering words par guessing unknown ones 
lolita parser provides large scale coverage able deal full serious text brown corpus wordnet having develop newspaper articles 
grammar rules expressed bnf notation 
uses top tomita style approach incorporates deterministic operators improved efficiency building parse forest possible parses input 
grammar uses set features penalties order select parses input 
lolita grammar built aim dealing erroneous incomplete input real life speech fragments nl utterances 
parser produces best parse list possible parses representing deep grammatical structure input word features extracted errors structural feature caused printed missing parts inferred un parsable parts isolated 
semantic pragmatic analysis 
task semantic analysis map deep grammatical representation input provided parsing component nodes semnet shown 
network checked existence nodes represent concepts input decisions taken gamma gamma gamma gamma gamma 
oe hj phi phi phi phi psi 
sen full roberto depth det motorbike parse tree semantic net subject owns motorbike roberto event act roberto univ object fig 

simplified example semantic analysis 
input parse tree transformed section semnet 
generate new nodes connect rest semnet 
things involves anaphora resolution making deictic absolute tomorrow expanded date utterance event resolved speaker semantic pragmatic analysis ensure new modified portion semnet built basis previous stages portion consistent existing network 
examples sentences saw tree fly house obvious syntactical semantic rules violated bought japanese tv phillips highly undesirable extend coverage semantic representation world knowledge stating phillips japanese manufacturer consumer electronics 
pragmatic analysis located intersection semantic linguistic world knowledge resolve conflict new existing information semnet low level belief attached new portion semantic network resulting input 
way deciding acceptability input source control 
takes account information came way provided reliable source unknown source part chat factual news report 
model source control incorporated lolita bg 
generation lolita generator smi rest lolita system developed specific restrictions imposed particular application flexible 
capable generating nl utterances semnet widely interface lolita debugging tool 
input consists chunk semnet output nl utterance complexity greater equal sentence depending parameters particular application storytelling query context required style simple previous dialogue applicable 
lolita applications built core lolita systems various applications shown 
query dialogue translation tutor chinese lolita core template generation fig 

diagram showing various applications built lolita core 
example applications template generation 
involves identification relevant information contained ordinary text newspaper articles 
relevant information template 
template contains various slots act field headings bodies filled content original text 
example suitable template meetings contain slots participants 
lolita identifies information taken input text fill slots 
summary overview lolita nlp system 
input system consists natural language text processed 
text analysed parsed representation meaning created new events asserted semnet knowledge representation heart lolita 
order analysis handle inherent ambiguity natural language parsing ambiguities word sense ambiguity anaphora resolution common 
unambiguous logical form input represented semnet inference procedures may operate knowledge 
procedures range basic inheritance complex forms induction analogy 
back lolita consists generation module traverses semnet knowledge contained nl utterances 
core system applications built 
range language tutoring machine translation dialogue 
range applications illustrates versatility core system 
gph evaluation strategies gph parallel extension haskell essence problem facing parallel programmer addition specifying value program compute explicitly parallel programs specify machine organise computation 
aspects parallel execution program threads created execute processor transfer data remote processors synchronise threads 
managing aspects top constructing correct efficient algorithm parallel programming hard 
extreme rely compiler runtime system manage parallel execution programmer input 
unfortunately purely implicit approach fruitful large scale functional programs interested 
approach gph radical runtime system manages parallel execution requiring programmer indicate values usefully evaluated parallel threads basic execution model lazy extent values evaluated 
term programmer specified aspects program dynamic behaviour 
parallelism introduced gph par combinator takes arguments evaluated parallel 
expression par haskell infix operator notation value strict argument par value dynamic behaviour indicate evaluated new parallel thread parent thread continuing evaluation say sparked thread may subsequently created evaluate processor idle 
thread necessarily created similar lazy 
control sequencing important parallel language roe introduce sequential composition operator seq 
expression seq value 
corresponding dynamic behaviour evaluate weak head normal form whnf returning 
simple parallel programming model provided par seq find code inserted order obtain better parallel performance 
realistic programs algorithm entirely obscured dynamic behaviour code 
evaluation strategies evaluation strategies lazy higher order functions separate concerns specifying algorithm specifying program dynamic behaviour 
function definition split parts algorithm strategy values defined manipulated 
algorithmic code consequently uncluttered details relating parallel behaviour 
fact driving philosophy evaluation strategies possible understand semantics function considering dynamic behaviour 
evaluation strategies written language algorithm desirable properties 
strategies powerful simpler strategies composed passed arguments form elaborate strategies 
strategies extensible user define new application specific strategies 
strategies defined types language 
strategies type safe normal type system applies strategic code 
strategies clear semantics precisely algorithmic language 
section gives abridged description evaluation strategies 
complete description discussion strategies 
strategy type strategy function specifies dynamic behaviour required computing value type 
strategy contribution value computed algorithmic component function evaluated purely effect returns just nullary tuple 
type strategy strategies controlling evaluation degree simplest strategies introduce parallelism specify evaluation degree 
simplest strategy termed performs reduction 
surprisingly strategy proves useful evaluating pair may want evaluate element second 
strategy reduction whnf default evaluation degree gph strategy reduce value type whnf easily defined rwhnf strategy rwhnf seq expressions reduced normal form nf form contains redexes rnf strategy 
rnf strategy defined built datatypes function types type incorporating function type reduction engines support reduction inner redexes functions 
defining new strategy data type better single overloaded rnf strategy works data type 
obvious solution haskell type class overload rnf operation 
nf whnf coincide built types integers booleans default method rnf rwhnf 
class rnf strategy rnf rwhnf data type instance declared specifies reduce value type normal form 
instance relies element types class 
consider lists pairs example 
instance rnf rnf xs rnf seq rnf xs instance rnf rnf seq rnf combining strategies evaluation strategies just normal higher order functions combined full power language passed parameters composed function composition operator 
elements strategy combined sequential parallel composition seq par 
useful strategies higher order example strategy sequentially applies strategy element list 
strategy evaluates just spine list rwhnf evaluates element list whnf 
analogous functions datatype versions haskell ph constructor classes defined arbitrary datatypes 
strategic examples haskell pragmatic reasons extracted programs run efficient parallel implementation haskell thm 
strategy strategy strat strat xs strat seq strat xs data oriented parallelism strategy specify parallelism sequencing evaluation degree 
strategies specifying data oriented parallelism describe dynamic behaviour terms data structure 
example parlist similar applies strategy element list parallel 
parlist strategy strategy parlist strat parlist strat xs strat par parlist strat xs data oriented strategies applied function applies strategy data structure returning 
function defined lower precedence operator acts separator algorithmic behavioural code 
strategy seq parallel map useful example data oriented parallelism example parmap function defined applies function argument element list parallel 
note algorithmic code map xs cleanly separated strategy 
strat parameter determines dynamic behaviour element result list parmap parametric dynamic behaviour 
parmap strategy parmap strat xs map xs parlist strat control oriented parallelism control oriented parallelism subexpressions function selected parallel evaluation 
control oriented strategy typically sequence strategy applications composed par seq specifies subexpressions function evaluated parallel order 
sequence loosely termed strategy invoked demanding function 
haskell flip function simply reorders binary function parameters 
demanding demanding flip seq flip par parallel fibonacci function divide conquer control oriented parallelism written follows 
variants divide conquer strategy linear system solver discussed accompanying lt 
demanding strategy strategy rnf par rnf additional dynamic behaviour strategies control aspects dynamic behaviour avoiding cluttering algorithmic code 
simple example thresholding mechanism controls thread granularity 
example granularity improved machines threads created argument small 
application thresholding turns important parallelisation lolita discuss detail section 
demanding strategy strategy rnf par rnf parallelising lolita sequential profiling preparation parallelising large program performed sequential profiling code 
reveal particular hotspot program syntactic parsing stage biggest component top level structure execution time 
stage heavy functions called haskell optimise time consuming parsing process 
foreign language calls complicate parallelisation parsing stage 
haskell part parsing major recoding 
top level pipeline dominating hotspot sequential execution program pipeline approach promising way achieve parallelism processor sharedmemory machine sun aiming 
structure pipeline parallel version shown 
stage discussed section executed separate thread linked form pipeline 
key step parallelising structure define strategies complex intermediate data structures parse trees communicate stages 
order avoid naming data structures strategic function application operator comes sequential parallel variant 
expression form applies strategy input value parallel applies function strategy mainly specify evaluation degree operator specifies pipeline parallelism 
definitions new combinators follows infixl strategic function application sequential parallel infixl strategic function composition sequential parallel strategy strategy demanding gx gx demanding gx gx gx gx data oriented approach defining parallelism intermediate data structures simplifies top parallelisation large system possible define parts data structure evaluated parallel considering algorithms produce data structures 
synt 
parsing semantic 
normalisation pragmatic 
back fig 

pipeline structure lolita code top level function clearly shows algorithm separated dynamic behaviour stage operator 
parallel version achieved separation explicit pipeline strategy 
required name intermediate value pipeline reflect structure code quite way 
experience main motivation developing strategic function application operator 
note code uses parmap parsing stage describe data parallelism input processing sentences input text parallel 
moment source parallelism code stage re entrant 
changing code exploit form parallelism ongoing 
strategies individual stages discussed subsequent sections 
glance activity profile exhibit poor parallelism 
part sequential front algorithm part parsing fashion strictness 
furthermore consistent parallelism compilation yields fairly utilisation processor machine 
considering minimal changes code achieve parallelism reasonable step parallelisation process 
parallel parsing major source parallelism time consuming syntactic parsing phase merging possible parse trees order build parse tree sentence 
complication parsing natural languages ambiguity 
ambiguity parsing stage produces just list possible parse trees 
internally result represented single tree points contains alternatives nodes representing different possible parses subtrees 
lazy function convert single tree list possible parse trees 
node function merge list parse trees produced recursive calls 
merging lists possible parse trees sorted simple syntactic criteria likelihood parse 
stage laziness haskell crucial 
order produce parse tree node necessary evaluate element lists produced alternatives 
parallelism point view behaviour explains force evaluation parts parse forest risking introduce high degree redundant 
furthermore parsing process merging lists triggers evaluation sublists particular evaluation quality possible parses 
merging cheap triggers usefully done parallel 
opts inp global result morphology sgml inp global sentences global sgml parsing parmap rnf heuristic parse global sentences analysis timeout parse prag opts global back result back opts pick parse tree best score results semantic pragmatic analysis 
done speculatively 
parse prag opts parse forest global global take global map analyse parse forest analyse pt opts timeout pt global parlist rwhnf rnf rwhnf rwhnf pipeline semantic pragmatic analyses parse global prag transform rnf rnf sem transform rnf sem rnf global rwhnf global parse back inp opts rwhnf parlist rwhnf rwhnf opts rnf rnf rnf rnf rnf opts rwhnf parlist rwhnf rwhnf rwhnf parlist rwhnf inp fig 

top level function lolita order improve granularity threads produced parallel tree traversal apply thresholding strategy shown span tree 
value attached node tree specifies number leaves current subtree 
threshold generating parallel process order merge possible subtrees specified percentage leaves reached current node 
cheap involves checking provided span value 
strength strategies reusability different algorithmic code dynamic behaviour 
able exploit feature applying polymorphic thresholding strategy lists different types syntactic parsing stage 
performed series measurements order determine best value span strategy 
setup models processor shared memory sun available durham 
shows activity granularity profiles span threshold 
syntactic parsing stage achieve quite utilisation system 
blocked threads high number runnable threads generated 
impose significant runtime overhead system 
histogram threads sorted thread size granularity profile right hand side reveals threads fine grained lolita mg rts bp bp bl bm br running runnable fetching blocked tasks average parallelism runtime fig 

activity profile lolita pipeline parallelism span pf ff span span div pf pf strategy bs bs par seq strategy bs fig 

granularity control strategy parsing stage threads shorter cycles 
leads bad ratio computation versus parallelism overhead 
comparison increasing span threshold number blocked runnable threads reduced significantly number small threads drops drastically shown 
threads shorter cycles 
corresponding drop total number threads especially fine grained threads runtime drops cycles previous version cycles version 
result measurements considering low amount parallelism required fully utilise processor shared memory machine span thresholds gum executions lolita 
parallel semantic analysis source parallelism improve quality analysis applying semantic pragmatic analyses data parallel fashion different lolita mg rts bp bp bl bm br running runnable fetching blocked tasks average parallelism runtime number threads granularity pure exec 
time fig 

activity granularity profiles lolita span threshold lolita mg rts bp bp bl bm br running runnable fetching blocked tasks average parallelism runtime number threads granularity pure exec 
time fig 

activity granularity profiles lolita span threshold possible parse trees sentence 
complexity analyses sequential system picks parse tree may cause analysis fail succeed different parse tree 
parallelism increase performance system improve quality result 
additional data parallelism defined strategy function parse prag see 
parse forest contains possible parses sentence 
semantic pragmatic analyses applied predefined number specified global parses 
data parallel strategy applied list results demands score analysis element triple order avoid unnecessary computation stage 
score decide parses choose result text analysis 
far systematically measured improvements quality result analysing possible parse trees 
considering sentences analysed possible parse trees possibility analyse large additional costs attractive natural language engineering point view 
parallel structure summarises parallel structure arising sources parallelism described 
syntactic parsing stage internally granularity control strategy shown 
note analyses may add nodes semantic net described section 
creates additional dependence different instances analysis indicated vertical arcs 
lazy evaluation ensures completely analyses 
synt 
parsing semantic 
pragmatic 
normalisation semantic 
pragmatic 
normalisation back synt 
parsing synt 
parsing semantic 
pragmatic 
semantic 
pragmatic 
normalisation semantic 
pragmatic 
normalisation stream text sgml tree parse forest parse tree normalisation sentence sentence sentence fig 

detailed structure lolita emphasised specifying strategies describe parallel behaviour entailed understanding modifying modules lolita functions module 
far module syntactic parsing stage 
proves necessary expose parallelism sub algorithms contain significant sources parallelism 
fact tedious part code changes adding instances intermediate data structures spread dozen modules 
process partially automated win 
sun implementation currently tuning performance lolita sun 
realistic simulation showed average parallelism just pipeline parallelism parallel parsing 
actual speedup exceed 
measurements varying span values indicate partly caused fine grained parallelism parsing stage 
lolita originally written consideration parallel execution contains sequential front part syntactic parsing stage pleased amount parallelism 
particular gain set small changes quite remarkable 
wall clock speedups obtained date quite match simulation results 
shown processors execution small inputs achieves average parallelism 
high span value bound amount parallelism parsing phase 
bounds total heap residency system proves important 
processors available physical memory insufficient heavy swapping causes drastic degradation performance 
reason gum designed support distributed memory architectures uniformly loads copy entire code separate local heap processor 
lolita large program incorporating large static data segments totalling mb requires mb virtual memory total sequential incarnation 
clearly great deal data shared opportunity exploring 
making parsing functions re entrant allow analysis performed data parallel fashion set input sentences 
difference gum activity profile results larger degree fetching 
probably caused expensive generic communication routines pvm gum 
contrast measures mainly hardware costs performing communication 
fine granularity generated threads increased overhead leads significantly smaller utilisation parsing stage 
pipeline stages computation effective source parallelism 
lolita exec rts running runnable fetching blocked tasks average parallelism runtime fig 

activity profile lolita run gum processors discussion current stage parallelising lolita top level pipeline parallelism divide conquer parallelism expensive stage pipeline 
additional speculative parallelism analysis stage order improve quality result 
currently working changes code provide global data parallelism program changes haskell code place 
current parallel version lolita achieves parallelism emulating processor shared memory machine 
corresponding speedup exceed 
partly due overhead caused fine grained parallelism partly due strategies perform speculative computations avoided speculation potentially expensive components 
thresholding strategy parsing stage proved effective increasing average granularity generated threads 
obtain significant wall clock speedups target machine 
due lack parallelism due high memory consumption application exceeds available main memory current setting 
working obtain better results making parsing code re entrant exploit data parallelism 
parallelising lolita taught great deal large scale parallel functional programming 
intriguing aspect parallelism achieved small number changes application 
able top approach parallelisation extent difficult strict language 
parallelism specified evaluation strategies acting data structures passed modules 
result parallelism introduced changing understanding program 
abstraction crucial working application size 
example introducing top level parallelism entailed changing just modules 
considering small amount code changes large application fact designed executed parallel presence inherently sequential foreign language calls pleased achieved degree parallelism 
experiences lolita medium scale programs distilled guidelines engineering large parallel functional programs lt 
concrete outcome parallelising lolita strategic function application support pipeline parallelism 
extension strategy module proven useful parallel programs parallelising compiler jun 
parallelisation lolita pointed importance issues 
choice fixed heap size processor proved inflexible slightly change runtime system 
shared memory setting heaps grow dynamically necessary 
general program annotations runtime system options tuning data locality program useful 
uniform access external data structure processor important semantic net constructed outside haskell heap 
distributed memory usage data structures communication mechanism gum treat specially 
current version presence conceptually persistent data structure required recoding routines reading sharing data structure 
fact recoding just part code required changes actual parallelisation haskell program 
general support persistent data distributed setting simplify program parallelisation considerably 
bg gould 
semnet knowledge representation lolita 
phd thesis university durham forthcoming 
bg 
uncertainty management source control heuristic approach 
international conference information processing management uncertainty knowledge systems 
spain july 
dav davis 
mpp parallel haskell 
ifl intl workshop implementation functional languages pages bad germany september 
draft proceedings 
ellis morgan 
new transformation deterministically natural language grammars 
proceedings rd international workshop parsing technologies tilburg netherlands 
gw gill wadler 
real world applications functional programs 
url www dcs gla ac uk fp realworld html 
hlp hammond 
loidl partridge 
visualising granularity parallel programs graphical winnowing system haskell 
high performance functional computing pages denver colorado april 
url www dcs gla ac uk fp software 
jun 
parallel compiler message passing multiprocessors 
ifl intl 
workshop implementation functional languages september st andrews scotland 
lt 
loidl trinder 
engineering large parallel functional programs 
ifl intl 
workshop implementation functional languages september st andrews scotland 
lg long 
inheritance hierarchies 
technical report department computer science university durham 
lg long 
reasoning analogy causality model application 
artificial intelligence 
ellis horwood 
mil miller 
wordnet online lexical database 
international journal lexicography 
mohr kranz halstead jr lazy task creation technique increasing granularity parallel programs 
ieee transactions parallel distributed systems july 
mss morgan smith short 
translation meaning style lolita 
intl 
bcs conf 
machine translation years cranfield university november 
par parker 
spelling correction nlp system lolita dictionary organisation search algorithms 
master thesis department computer science university durham 
ph peterson hammond haskell non strict purely functional language may 
roe roe 
parallel programming functional languages 
phd thesis department computing science university glasgow february 
smi smith 
natural language generation lolita system engineering approach 
phd thesis department computer science university durham 
trinder hammond 
loidl peyton jones 
algorithm strategy parallelism 
journal functional programming jan 
url www dcs gla ac uk publications strategies strategies html 
thm trinder hammond mattson jr partridge peyton jones 
gum portable parallel implementation haskell 
pldi programming languages design implementation pages philadelphia usa may 
win 
type sensitive preprocessor haskell 
glasgow workshop functional programming scotland september 
article processed macro package llncs style 
